{"nodes":[{"content":"Defines and represents a dynamic method that can be compiled, executed, and discarded. Discarded methods are available for garbage collection.","nodes":[{"pos":[0,142],"content":"Defines and represents a dynamic method that can be compiled, executed, and discarded. Discarded methods are available for garbage collection.","nodes":[{"content":"Defines and represents a dynamic method that can be compiled, executed, and discarded. Discarded methods are available for garbage collection.","pos":[0,142],"nodes":[{"content":"Defines and represents a dynamic method that can be compiled, executed, and discarded.","pos":[0,86]},{"content":"Discarded methods are available for garbage collection.","pos":[87,142]}]}]}],"pos":[3404,3547],"yaml":true},{"content":"You can use the <xref:System.Reflection.Emit.DynamicMethod> class to generate and execute a method at run time, without having to generate a dynamic assembly and a dynamic type to contain the method. The executable code created by the just-in-time (JIT) compiler is reclaimed when the <xref:System.Reflection.Emit.DynamicMethod> object is reclaimed. Dynamic methods are the most efficient way to generate and execute small amounts of code.  \n  \n A dynamic method can be anonymously hosted, or it can belogically associated with a module or with a type.  \n  \n-   If the dynamic method is anonymously hosted, it is located in a system-provided assembly, and therefore is isolated from other code. By default, it does not have access to any non-public data. An anonymously hosted dynamic method can have restricted ability to skip the JIT compiler's visibility checks, if it has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag. The trust level of the assembly whose non-public members are accessed by the dynamic method must be equal to, or a subset of, the trust level of the call stack that emitted the dynamic method. For more information about anonymously hosted dynamic methods, see [Walkthrough: Emitting Code in Partial Trust Scenarios](~/docs/framework/reflection-and-codedom/walkthrough-emitting-code-in-partial-trust-scenarios.md).  \n  \n-   If the dynamic method is associated with a module that you specify, the dynamic method is effectively global to that module. It can access all types in the module and all `internal` (`Friend` in Visual Basic) members of the types. You can associate a dynamic method with any module, regardless of whether you created the module, provided that a demand for <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess> flag can be satisfied by the call stack that includes your code. If the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag is included in the grant, the dynamic method can skip the JIT compiler's visibility checks and access the private data of all types declared in the module or in any other module in any assembly.  \n  \n    > [!NOTE]\n    >  When you specify the module with which a dynamic method is associated, that module must not be in the system-provided assembly that is used for anonymous hosting.  \n  \n-   If the dynamic method is associated with a type that you specify, it has access to all members of the type, regardless of access level. In addition, JIT visibility checks can be skipped. This gives the dynamic method access to the private data of other types declared in the same module or in any other module in any assembly. You can associate a dynamic method with any type, but your code must be granted <xref:System.Security.Permissions.ReflectionPermission> with both the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess> and <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess> flags.  \n  \n The following table shows which types and members are accessible to an anonymously hosted dynamic method, with and without JIT visibility checks, depending on whether <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess> flag is granted.  \n  \n||Without <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess>|With <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess>|  \n|-|-|-|  \n|Without skipping JIT visibility checks|Public members of public types in any assembly.|Public members of public types in any assembly.|  \n|Skipping JIT visibility checks, with restrictions|Public members of public types in any assembly.|All members of all types, only in assemblies whose trust levels are equal to or less than the trust level of the assembly that emitted the dynamic method.|  \n  \n> [!NOTE]\n>  Prior to the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], emitting code required <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag. This permission is included by default in the FullTrust and LocalIntranet named permission sets, but not in the Internet permission set. Therefore, in earlier versions of the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] a library can be used with Internet permissions only if it has the <xref:System.Security.SecurityCriticalAttribute> attribute and also executes an <xref:System.Security.PermissionSet.Assert%2A> for <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit>. Such libraries require careful security review because coding errors could result in security holes. The [!INCLUDE[net_v20SP1_short](~/includes/net-v20sp1-short-md.md)] allows code to be emitted in partial trust scenarios without issuing any security demands, because generating code is not inherently a privileged operation. That is, the generated code has no more permissions than the assembly that emits it. This allows libraries that emit code to be security transparent and removes the need to assert <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit>, which simplifies the task of writing a secure library. To use this feature, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.  \n  \n The following table shows which types and members are accessible to a dynamic method that is associated with a module or with a type in a module.  \n  \n||Associated with module|Associated with type|  \n|-|-|-|  \n|Without skipping JIT visibility checks|Public and internal members of public, internal, and private types in the module.<br /><br /> Public members of public types in any assembly.|All members of the associated type. Public and internal members of all the other types in the module.<br /><br /> Public members of public types in any assembly.|  \n|Skipping JIT visibility checks|All members of all types in any assembly.|All members of all types in any assembly.|  \n  \n A dynamic method that is associated with a module has the permissions of that module. A dynamic method that is associated with a type has the permissions of the module containing that type.  \n  \n Dynamic methods and their parameters do not have to be named, but you can specify names to assist in debugging. Custom attributes are not supported on dynamic methods or their parameters.  \n  \n Although dynamic methods are `static` methods (`Shared` methods in Visual Basic), the relaxed rules for delegate binding introduced in the [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)] allow a dynamic method to be bound to an object, so that it acts like an instance method when called using that delegate instance. An example that demonstrates this is provided for the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%28System.Type%2CSystem.Object%29> method overload.  \n  \n> [!NOTE]\n>  In the [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)], dynamic methods do not support symbol information, that is, local variable names and line-number mapping. This limitation might be removed in a future version. You can use <xref:System.Reflection.Emit.AssemblyBuilder> during development to simplify debugging the generated Microsoft intermediate language (MSIL), and then switch to dynamic methods during final deployment, because the <xref:System.Reflection.Emit.ILGenerator> calls are the same in both cases.  \n  \n## Verification  \n The following list summarizes the conditions under which dynamic methods can contain unverifiable code. (For example, a dynamic method is unverifiable if its <xref:System.Reflection.Emit.DynamicMethod.InitLocals%2A> property is set to `false`.)  \n  \n-   A dynamic method that is associated with a security-critical assembly is also security-critical, and can skip verification. For example, an assembly without security attributes that is run as a desktop application is treated as security-critical by the runtime. If you associate a dynamic method with the assembly, the dynamic method can contain unverifiable code.  \n  \n-   If a dynamic method that contains unverifiable code is associated with an assembly that has level 1 transparency, the just-in-time (JIT) compiler injects a security demand. The demand succeeds only if the dynamic method is executed by fully trusted code. See [Security-Transparent Code, Level 1](~/docs/framework/misc/security-transparent-code-level-1.md).  \n  \n-   If a dynamic method that contains unverifiable code is associated with an assembly that has level 2 transparency (such as mscorlib.dll), it throws an exception (injected by the JIT compiler) instead of making a security demand. See [Security-Transparent Code, Level 2](~/docs/framework/misc/security-transparent-code-level-2.md).  \n  \n-   An anonymously hosted dynamic method that contains unverifiable code always throws an exception. It can never skip verification, even if it is created and executed by fully trusted code.  \n  \n The exception that is thrown for unverifiable code varies depending on the way the dynamic method is invoked. If you invoke a dynamic method by using a delegate returned from the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> method, a <xref:System.Security.VerificationException> is thrown. If you invoke the dynamic method by using the <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method, a <xref:System.Reflection.TargetInvocationException> is thrown with an inner <xref:System.Security.VerificationException>.","nodes":[{"pos":[0,439],"content":"You can use the <xref:System.Reflection.Emit.DynamicMethod> class to generate and execute a method at run time, without having to generate a dynamic assembly and a dynamic type to contain the method. The executable code created by the just-in-time (JIT) compiler is reclaimed when the <xref:System.Reflection.Emit.DynamicMethod> object is reclaimed. Dynamic methods are the most efficient way to generate and execute small amounts of code.","nodes":[{"content":"You can use the <xref:System.Reflection.Emit.DynamicMethod> class to generate and execute a method at run time, without having to generate a dynamic assembly and a dynamic type to contain the method. The executable code created by the just-in-time (JIT) compiler is reclaimed when the <xref:System.Reflection.Emit.DynamicMethod> object is reclaimed. Dynamic methods are the most efficient way to generate and execute small amounts of code.","pos":[0,439],"nodes":[{"content":"You can use the <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph> class to generate and execute a method at run time, without having to generate a dynamic assembly and a dynamic type to contain the method.","pos":[0,199],"source":"You can use the <xref:System.Reflection.Emit.DynamicMethod> class to generate and execute a method at run time, without having to generate a dynamic assembly and a dynamic type to contain the method."},{"content":"The executable code created by the just-in-time (JIT) compiler is reclaimed when the <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph> object is reclaimed.","pos":[200,349],"source":" The executable code created by the just-in-time (JIT) compiler is reclaimed when the <xref:System.Reflection.Emit.DynamicMethod> object is reclaimed."},{"content":"Dynamic methods are the most efficient way to generate and execute small amounts of code.","pos":[350,439]}]}]},{"pos":[446,552],"content":"A dynamic method can be anonymously hosted, or it can belogically associated with a module or with a type.","nodes":[{"content":"A dynamic method can be anonymously hosted, or it can belogically associated with a module or with a type.","pos":[0,106]}]},{"pos":[562,1458],"content":"If the dynamic method is anonymously hosted, it is located in a system-provided assembly, and therefore is isolated from other code. By default, it does not have access to any non-public data. An anonymously hosted dynamic method can have restricted ability to skip the JIT compiler's visibility checks, if it has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag. The trust level of the assembly whose non-public members are accessed by the dynamic method must be equal to, or a subset of, the trust level of the call stack that emitted the dynamic method. For more information about anonymously hosted dynamic methods, see [Walkthrough: Emitting Code in Partial Trust Scenarios](~/docs/framework/reflection-and-codedom/walkthrough-emitting-code-in-partial-trust-scenarios.md).","nodes":[{"content":"If the dynamic method is anonymously hosted, it is located in a system-provided assembly, and therefore is isolated from other code.","pos":[0,132]},{"content":"By default, it does not have access to any non-public data.","pos":[133,192]},{"content":"An anonymously hosted dynamic method can have restricted ability to skip the JIT compiler's visibility checks, if it has been granted <ph id=\"ph1\">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> with the <ph id=\"ph2\">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName&gt;</ph> flag.","pos":[193,482],"source":" An anonymously hosted dynamic method can have restricted ability to skip the JIT compiler's visibility checks, if it has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag."},{"content":"The trust level of the assembly whose non-public members are accessed by the dynamic method must be equal to, or a subset of, the trust level of the call stack that emitted the dynamic method.","pos":[483,675]},{"content":"For more information about anonymously hosted dynamic methods, see <bpt id=\"p1\">[</bpt>Walkthrough: Emitting Code in Partial Trust Scenarios<ept id=\"p1\">](~/docs/framework/reflection-and-codedom/walkthrough-emitting-code-in-partial-trust-scenarios.md)</ept>.","pos":[676,896],"source":" For more information about anonymously hosted dynamic methods, see [Walkthrough: Emitting Code in Partial Trust Scenarios](~/docs/framework/reflection-and-codedom/walkthrough-emitting-code-in-partial-trust-scenarios.md)."}]},{"pos":[1468,2328],"content":"If the dynamic method is associated with a module that you specify, the dynamic method is effectively global to that module. It can access all types in the module and all `internal` (`Friend` in Visual Basic) members of the types. You can associate a dynamic method with any module, regardless of whether you created the module, provided that a demand for <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess> flag can be satisfied by the call stack that includes your code. If the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag is included in the grant, the dynamic method can skip the JIT compiler's visibility checks and access the private data of all types declared in the module or in any other module in any assembly.","nodes":[{"content":"If the dynamic method is associated with a module that you specify, the dynamic method is effectively global to that module.","pos":[0,124]},{"content":"It can access all types in the module and all <ph id=\"ph1\">`internal`</ph> (<ph id=\"ph2\">`Friend`</ph> in Visual Basic) members of the types.","pos":[125,230],"source":" It can access all types in the module and all `internal` (`Friend` in Visual Basic) members of the types."},{"content":"You can associate a dynamic method with any module, regardless of whether you created the module, provided that a demand for <ph id=\"ph1\">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> with the <ph id=\"ph2\">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess&gt;</ph> flag can be satisfied by the call stack that includes your code.","pos":[231,568],"source":" You can associate a dynamic method with any module, regardless of whether you created the module, provided that a demand for <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess> flag can be satisfied by the call stack that includes your code."},{"content":"If the <ph id=\"ph1\">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName&gt;</ph> flag is included in the grant, the dynamic method can skip the JIT compiler's visibility checks and access the private data of all types declared in the module or in any other module in any assembly.","pos":[569,860],"source":" If the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag is included in the grant, the dynamic method can skip the JIT compiler's visibility checks and access the private data of all types declared in the module or in any other module in any assembly."}]},{"pos":[2340,2517],"content":"[!NOTE]\nWhen you specify the module with which a dynamic method is associated, that module must not be in the system-provided assembly that is used for anonymous hosting.","leadings":["","    >  "],"nodes":[{"content":"When you specify the module with which a dynamic method is associated, that module must not be in the system-provided assembly that is used for anonymous hosting.","pos":[8,170]}]},{"pos":[2527,3170],"content":"If the dynamic method is associated with a type that you specify, it has access to all members of the type, regardless of access level. In addition, JIT visibility checks can be skipped. This gives the dynamic method access to the private data of other types declared in the same module or in any other module in any assembly. You can associate a dynamic method with any type, but your code must be granted <xref:System.Security.Permissions.ReflectionPermission> with both the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess> and <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess> flags.","nodes":[{"content":"If the dynamic method is associated with a type that you specify, it has access to all members of the type, regardless of access level. In addition, JIT visibility checks can be skipped. This gives the dynamic method access to the private data of other types declared in the same module or in any other module in any assembly. You can associate a dynamic method with any type, but your code must be granted <xref:System.Security.Permissions.ReflectionPermission> with both the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess> and <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess> flags.","pos":[0,643],"nodes":[{"content":"If the dynamic method is associated with a type that you specify, it has access to all members of the type, regardless of access level.","pos":[0,135]},{"content":"In addition, JIT visibility checks can be skipped.","pos":[136,186]},{"content":"This gives the dynamic method access to the private data of other types declared in the same module or in any other module in any assembly.","pos":[187,326]},{"content":"You can associate a dynamic method with any type, but your code must be granted <ph id=\"ph1\">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> with both the <ph id=\"ph2\">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess&gt;</ph> flags.","pos":[327,643],"source":" You can associate a dynamic method with any type, but your code must be granted <xref:System.Security.Permissions.ReflectionPermission> with both the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess> and <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess> flags."}]}]},{"pos":[3177,3508],"content":"The following table shows which types and members are accessible to an anonymously hosted dynamic method, with and without JIT visibility checks, depending on whether <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess> flag is granted.","nodes":[{"content":"The following table shows which types and members are accessible to an anonymously hosted dynamic method, with and without JIT visibility checks, depending on whether <ph id=\"ph1\">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> with the <ph id=\"ph2\">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess&gt;</ph> flag is granted.","pos":[0,331],"source":"The following table shows which types and members are accessible to an anonymously hosted dynamic method, with and without JIT visibility checks, depending on whether <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess> flag is granted."}]},{"pos":[3516,3606],"content":"Without <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess>","nodes":[{"content":"Without <ph id=\"ph1\">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess&gt;</ph>","pos":[0,90],"source":"Without <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess>"}]},{"pos":[3607,3694],"content":"With <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess>","nodes":[{"content":"With <ph id=\"ph1\">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess&gt;</ph>","pos":[0,87],"source":"With <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess>"}]},{"pos":[3709,3747],"content":"Without skipping JIT visibility checks","nodes":[{"content":"Without skipping JIT visibility checks","pos":[0,38]}]},{"pos":[3748,3795],"content":"Public members of public types in any assembly.","nodes":[{"content":"Public members of public types in any assembly.","pos":[0,47]}]},{"pos":[3796,3843],"content":"Public members of public types in any assembly.","nodes":[{"content":"Public members of public types in any assembly.","pos":[0,47]}]},{"pos":[3848,3897],"content":"Skipping JIT visibility checks, with restrictions","nodes":[{"content":"Skipping JIT visibility checks, with restrictions","pos":[0,49]}]},{"pos":[3898,3945],"content":"Public members of public types in any assembly.","nodes":[{"content":"Public members of public types in any assembly.","pos":[0,47]}]},{"pos":[3946,4100],"content":"All members of all types, only in assemblies whose trust levels are equal to or less than the trust level of the assembly that emitted the dynamic method.","nodes":[{"content":"All members of all types, only in assemblies whose trust levels are equal to or less than the trust level of the assembly that emitted the dynamic method.","pos":[0,154]}]},{"pos":[4109,5636],"content":"[!NOTE]\n Prior to the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], emitting code required <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag. This permission is included by default in the FullTrust and LocalIntranet named permission sets, but not in the Internet permission set. Therefore, in earlier versions of the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] a library can be used with Internet permissions only if it has the <xref:System.Security.SecurityCriticalAttribute> attribute and also executes an <xref:System.Security.PermissionSet.Assert%2A> for <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit>. Such libraries require careful security review because coding errors could result in security holes. The [!INCLUDE[net_v20SP1_short](~/includes/net-v20sp1-short-md.md)] allows code to be emitted in partial trust scenarios without issuing any security demands, because generating code is not inherently a privileged operation. That is, the generated code has no more permissions than the assembly that emits it. This allows libraries that emit code to be security transparent and removes the need to assert <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit>, which simplifies the task of writing a secure library. To use this feature, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.","leadings":["","> "],"nodes":[{"content":" Prior to the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], emitting code required <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag. This permission is included by default in the FullTrust and LocalIntranet named permission sets, but not in the Internet permission set. Therefore, in earlier versions of the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] a library can be used with Internet permissions only if it has the <xref:System.Security.SecurityCriticalAttribute> attribute and also executes an <xref:System.Security.PermissionSet.Assert%2A> for <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit>. Such libraries require careful security review because coding errors could result in security holes. The [!INCLUDE[net_v20SP1_short](~/includes/net-v20sp1-short-md.md)] allows code to be emitted in partial trust scenarios without issuing any security demands, because generating code is not inherently a privileged operation. That is, the generated code has no more permissions than the assembly that emits it. This allows libraries that emit code to be security transparent and removes the need to assert <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit>, which simplifies the task of writing a secure library. To use this feature, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.","pos":[8,1525],"nodes":[{"content":"Prior to the <ph id=\"ph1\">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>, emitting code required <ph id=\"ph2\">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> with the <ph id=\"ph3\">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName&gt;</ph> flag.","pos":[1,255],"source":" Prior to the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], emitting code required <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag."},{"content":"This permission is included by default in the FullTrust and LocalIntranet named permission sets, but not in the Internet permission set.","pos":[256,392]},{"content":"Therefore, in earlier versions of the <ph id=\"ph1\">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]</ph> a library can be used with Internet permissions only if it has the <ph id=\"ph2\">&lt;xref:System.Security.SecurityCriticalAttribute&gt;</ph> attribute and also executes an <ph id=\"ph3\">&lt;xref:System.Security.PermissionSet.Assert%2A&gt;</ph> for <ph id=\"ph4\">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit&gt;</ph>.","pos":[393,758],"source":" Therefore, in earlier versions of the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] a library can be used with Internet permissions only if it has the <xref:System.Security.SecurityCriticalAttribute> attribute and also executes an <xref:System.Security.PermissionSet.Assert%2A> for <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit>."},{"content":"Such libraries require careful security review because coding errors could result in security holes.","pos":[759,859]},{"content":"The <ph id=\"ph1\">[!INCLUDE[net_v20SP1_short](~/includes/net-v20sp1-short-md.md)]</ph> allows code to be emitted in partial trust scenarios without issuing any security demands, because generating code is not inherently a privileged operation.","pos":[860,1084],"source":" The [!INCLUDE[net_v20SP1_short](~/includes/net-v20sp1-short-md.md)] allows code to be emitted in partial trust scenarios without issuing any security demands, because generating code is not inherently a privileged operation."},{"content":"That is, the generated code has no more permissions than the assembly that emits it.","pos":[1085,1169]},{"content":"This allows libraries that emit code to be security transparent and removes the need to assert <ph id=\"ph1\">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit&gt;</ph>, which simplifies the task of writing a secure library.","pos":[1170,1395],"source":" This allows libraries that emit code to be security transparent and removes the need to assert <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit>, which simplifies the task of writing a secure library."},{"content":"To use this feature, your application should target the <ph id=\"ph1\">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> or later.","pos":[1396,1517],"source":" To use this feature, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later."}]}]},{"pos":[5643,5788],"content":"The following table shows which types and members are accessible to a dynamic method that is associated with a module or with a type in a module.","nodes":[{"content":"The following table shows which types and members are accessible to a dynamic method that is associated with a module or with a type in a module.","pos":[0,145]}]},{"pos":[5796,5818],"content":"Associated with module","nodes":[{"content":"Associated with module","pos":[0,22]}]},{"pos":[5819,5839],"content":"Associated with type","nodes":[{"content":"Associated with type","pos":[0,20]}]},{"pos":[5854,5892],"content":"Without skipping JIT visibility checks","nodes":[{"content":"Without skipping JIT visibility checks","pos":[0,38]}]},{"pos":[5893,6034],"content":"Public and internal members of public, internal, and private types in the module.<br /><br /> Public members of public types in any assembly.","nodes":[{"content":"Public and internal members of public, internal, and private types in the module.","pos":[0,81]},{"content":"Public members of public types in any assembly.","pos":[94,141]}]},{"pos":[6035,6196],"content":"All members of the associated type. Public and internal members of all the other types in the module.<br /><br /> Public members of public types in any assembly.","nodes":[{"content":"All members of the associated type. Public and internal members of all the other types in the module.","pos":[0,101],"nodes":[{"content":"All members of the associated type.","pos":[0,35]},{"content":"Public and internal members of all the other types in the module.","pos":[36,101]}]},{"content":"Public members of public types in any assembly.","pos":[114,161]}]},{"pos":[6201,6231],"content":"Skipping JIT visibility checks","nodes":[{"content":"Skipping JIT visibility checks","pos":[0,30]}]},{"pos":[6232,6273],"content":"All members of all types in any assembly.","nodes":[{"content":"All members of all types in any assembly.","pos":[0,41]}]},{"pos":[6274,6315],"content":"All members of all types in any assembly.","nodes":[{"content":"All members of all types in any assembly.","pos":[0,41]}]},{"pos":[6323,6512],"content":"A dynamic method that is associated with a module has the permissions of that module. A dynamic method that is associated with a type has the permissions of the module containing that type.","nodes":[{"content":"A dynamic method that is associated with a module has the permissions of that module. A dynamic method that is associated with a type has the permissions of the module containing that type.","pos":[0,189],"nodes":[{"content":"A dynamic method that is associated with a module has the permissions of that module.","pos":[0,85]},{"content":"A dynamic method that is associated with a type has the permissions of the module containing that type.","pos":[86,189]}]}]},{"pos":[6519,6706],"content":"Dynamic methods and their parameters do not have to be named, but you can specify names to assist in debugging. Custom attributes are not supported on dynamic methods or their parameters.","nodes":[{"content":"Dynamic methods and their parameters do not have to be named, but you can specify names to assist in debugging. Custom attributes are not supported on dynamic methods or their parameters.","pos":[0,187],"nodes":[{"content":"Dynamic methods and their parameters do not have to be named, but you can specify names to assist in debugging.","pos":[0,111]},{"content":"Custom attributes are not supported on dynamic methods or their parameters.","pos":[112,187]}]}]},{"pos":[6713,7197],"content":"Although dynamic methods are `static` methods (`Shared` methods in Visual Basic), the relaxed rules for delegate binding introduced in the [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)] allow a dynamic method to be bound to an object, so that it acts like an instance method when called using that delegate instance. An example that demonstrates this is provided for the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%28System.Type%2CSystem.Object%29> method overload.","nodes":[{"content":"Although dynamic methods are <ph id=\"ph1\">`static`</ph> methods (<ph id=\"ph2\">`Shared`</ph> methods in Visual Basic), the relaxed rules for delegate binding introduced in the <ph id=\"ph3\">[!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)]</ph> allow a dynamic method to be bound to an object, so that it acts like an instance method when called using that delegate instance.","pos":[0,321],"source":"Although dynamic methods are `static` methods (`Shared` methods in Visual Basic), the relaxed rules for delegate binding introduced in the [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)] allow a dynamic method to be bound to an object, so that it acts like an instance method when called using that delegate instance."},{"content":"An example that demonstrates this is provided for the <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%28System.Type%2CSystem.Object%29&gt;</ph> method overload.","pos":[322,484],"source":" An example that demonstrates this is provided for the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%28System.Type%2CSystem.Object%29> method overload."}]},{"pos":[7205,7736],"content":"[!NOTE]\n In the [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)], dynamic methods do not support symbol information, that is, local variable names and line-number mapping. This limitation might be removed in a future version. You can use <xref:System.Reflection.Emit.AssemblyBuilder> during development to simplify debugging the generated Microsoft intermediate language (MSIL), and then switch to dynamic methods during final deployment, because the <xref:System.Reflection.Emit.ILGenerator> calls are the same in both cases.","leadings":["","> "],"nodes":[{"content":" In the [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)], dynamic methods do not support symbol information, that is, local variable names and line-number mapping. This limitation might be removed in a future version. You can use <xref:System.Reflection.Emit.AssemblyBuilder> during development to simplify debugging the generated Microsoft intermediate language (MSIL), and then switch to dynamic methods during final deployment, because the <xref:System.Reflection.Emit.ILGenerator> calls are the same in both cases.","pos":[8,529],"nodes":[{"content":"In the <ph id=\"ph1\">[!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)]</ph>, dynamic methods do not support symbol information, that is, local variable names and line-number mapping.","pos":[1,166],"source":" In the [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)], dynamic methods do not support symbol information, that is, local variable names and line-number mapping."},{"content":"This limitation might be removed in a future version.","pos":[167,220]},{"content":"You can use <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.AssemblyBuilder&gt;</ph> during development to simplify debugging the generated Microsoft intermediate language (MSIL), and then switch to dynamic methods during final deployment, because the <ph id=\"ph2\">&lt;xref:System.Reflection.Emit.ILGenerator&gt;</ph> calls are the same in both cases.","pos":[221,521],"source":" You can use <xref:System.Reflection.Emit.AssemblyBuilder> during development to simplify debugging the generated Microsoft intermediate language (MSIL), and then switch to dynamic methods during final deployment, because the <xref:System.Reflection.Emit.ILGenerator> calls are the same in both cases."}]}]},{"pos":[7745,7757],"content":"Verification","linkify":"Verification","nodes":[{"content":"Verification","pos":[0,12]}]},{"pos":[7761,8005],"content":"The following list summarizes the conditions under which dynamic methods can contain unverifiable code. (For example, a dynamic method is unverifiable if its <xref:System.Reflection.Emit.DynamicMethod.InitLocals%2A> property is set to `false`.)","nodes":[{"content":"The following list summarizes the conditions under which dynamic methods can contain unverifiable code.","pos":[0,103]},{"content":"(For example, a dynamic method is unverifiable if its <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.DynamicMethod.InitLocals%2A&gt;</ph> property is set to <ph id=\"ph2\">`false`</ph>.)","pos":[104,244],"source":" (For example, a dynamic method is unverifiable if its <xref:System.Reflection.Emit.DynamicMethod.InitLocals%2A> property is set to `false`.)"}]},{"pos":[8015,8379],"content":"A dynamic method that is associated with a security-critical assembly is also security-critical, and can skip verification. For example, an assembly without security attributes that is run as a desktop application is treated as security-critical by the runtime. If you associate a dynamic method with the assembly, the dynamic method can contain unverifiable code.","nodes":[{"content":"A dynamic method that is associated with a security-critical assembly is also security-critical, and can skip verification. For example, an assembly without security attributes that is run as a desktop application is treated as security-critical by the runtime. If you associate a dynamic method with the assembly, the dynamic method can contain unverifiable code.","pos":[0,364],"nodes":[{"content":"A dynamic method that is associated with a security-critical assembly is also security-critical, and can skip verification.","pos":[0,123]},{"content":"For example, an assembly without security attributes that is run as a desktop application is treated as security-critical by the runtime.","pos":[124,261]},{"content":"If you associate a dynamic method with the assembly, the dynamic method can contain unverifiable code.","pos":[262,364]}]}]},{"pos":[8389,8745],"content":"If a dynamic method that contains unverifiable code is associated with an assembly that has level 1 transparency, the just-in-time (JIT) compiler injects a security demand. The demand succeeds only if the dynamic method is executed by fully trusted code. See [Security-Transparent Code, Level 1](~/docs/framework/misc/security-transparent-code-level-1.md).","nodes":[{"content":"If a dynamic method that contains unverifiable code is associated with an assembly that has level 1 transparency, the just-in-time (JIT) compiler injects a security demand.","pos":[0,172]},{"content":"The demand succeeds only if the dynamic method is executed by fully trusted code.","pos":[173,254]},{"content":"See <bpt id=\"p1\">[</bpt>Security-Transparent Code, Level 1<ept id=\"p1\">](~/docs/framework/misc/security-transparent-code-level-1.md)</ept>.","pos":[255,356],"source":" See [Security-Transparent Code, Level 1](~/docs/framework/misc/security-transparent-code-level-1.md)."}]},{"pos":[8755,9084],"content":"If a dynamic method that contains unverifiable code is associated with an assembly that has level 2 transparency (such as mscorlib.dll), it throws an exception (injected by the JIT compiler) instead of making a security demand. See [Security-Transparent Code, Level 2](~/docs/framework/misc/security-transparent-code-level-2.md).","nodes":[{"content":"If a dynamic method that contains unverifiable code is associated with an assembly that has level 2 transparency (such as mscorlib.dll), it throws an exception (injected by the JIT compiler) instead of making a security demand.","pos":[0,227]},{"content":"See <bpt id=\"p1\">[</bpt>Security-Transparent Code, Level 2<ept id=\"p1\">](~/docs/framework/misc/security-transparent-code-level-2.md)</ept>.","pos":[228,329],"source":" See [Security-Transparent Code, Level 2](~/docs/framework/misc/security-transparent-code-level-2.md)."}]},{"pos":[9094,9280],"content":"An anonymously hosted dynamic method that contains unverifiable code always throws an exception. It can never skip verification, even if it is created and executed by fully trusted code.","nodes":[{"content":"An anonymously hosted dynamic method that contains unverifiable code always throws an exception. It can never skip verification, even if it is created and executed by fully trusted code.","pos":[0,186],"nodes":[{"content":"An anonymously hosted dynamic method that contains unverifiable code always throws an exception.","pos":[0,96]},{"content":"It can never skip verification, even if it is created and executed by fully trusted code.","pos":[97,186]}]}]},{"pos":[9287,9824],"content":"The exception that is thrown for unverifiable code varies depending on the way the dynamic method is invoked. If you invoke a dynamic method by using a delegate returned from the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> method, a <xref:System.Security.VerificationException> is thrown. If you invoke the dynamic method by using the <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method, a <xref:System.Reflection.TargetInvocationException> is thrown with an inner <xref:System.Security.VerificationException>.","nodes":[{"content":"The exception that is thrown for unverifiable code varies depending on the way the dynamic method is invoked. If you invoke a dynamic method by using a delegate returned from the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> method, a <xref:System.Security.VerificationException> is thrown. If you invoke the dynamic method by using the <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method, a <xref:System.Reflection.TargetInvocationException> is thrown with an inner <xref:System.Security.VerificationException>.","pos":[0,537],"nodes":[{"content":"The exception that is thrown for unverifiable code varies depending on the way the dynamic method is invoked.","pos":[0,109]},{"content":"If you invoke a dynamic method by using a delegate returned from the <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A&gt;</ph> method, a <ph id=\"ph2\">&lt;xref:System.Security.VerificationException&gt;</ph> is thrown.","pos":[110,306],"source":" If you invoke a dynamic method by using a delegate returned from the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> method, a <xref:System.Security.VerificationException> is thrown."},{"content":"If you invoke the dynamic method by using the <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.DynamicMethod.Invoke%2A&gt;</ph> method, a <ph id=\"ph2\">&lt;xref:System.Reflection.TargetInvocationException&gt;</ph> is thrown with an inner <ph id=\"ph3\">&lt;xref:System.Security.VerificationException&gt;</ph>.","pos":[307,537],"source":" If you invoke the dynamic method by using the <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method, a <xref:System.Reflection.TargetInvocationException> is thrown with an inner <xref:System.Security.VerificationException>."}]}]}],"pos":[3558,13435],"yaml":true,"extradata":"MT"},{"content":"Initializes an anonymously hosted dynamic method, specifying the method name, return type, and parameter types.","nodes":[{"pos":[0,111],"content":"Initializes an anonymously hosted dynamic method, specifying the method name, return type, and parameter types.","nodes":[{"content":"Initializes an anonymously hosted dynamic method, specifying the method name, return type, and parameter types.","pos":[0,111]}]}],"pos":[23697,23809],"yaml":true},{"content":"The dynamic method that is created by this constructor is associated with an anonymous assembly instead of an existing type or module. The anonymous assembly exists only to provide a sandbox environment for dynamic methods, that is, to isolate them from other code. This environment makes it safe for the dynamic method to be emitted and executed by partially trusted code.  \n  \n This constructor specifies that just-in-time (JIT) visibility checks will be enforced for the Microsoft intermediate language (MSIL) of the dynamic method. That is, the code in the dynamic method has access to public methods of public classes. Exceptions are thrown if the method tries to access types or members that are `private`, `protected`, or `internal` (`Friend` in Visual Basic). To create a dynamic method that has restricted ability to skip JIT visibility checks, use the <xref:System.Reflection.Emit.DynamicMethod.%23ctor%28System.String%2CSystem.Type%2CSystem.Type%5B%5D%2CSystem.Boolean%29> constructor.  \n  \n When an anonymously hosted dynamic method is constructed, the call stack of the emitting assembly is included. When the method is invoked, the permissions of the emitting assembly are used instead of the permissions of the actual caller. Thus, the dynamic method cannot execute at a higher level of privilege than that of the assembly that emitted it, even if it is passed to and executed by an assembly that has a higher trust level.  \n  \n This constructor specifies the method attributes <xref:System.Reflection.MethodAttributes?displayProperty=fullName> and <xref:System.Reflection.MethodAttributes?displayProperty=fullName>, and the calling convention <xref:System.Reflection.CallingConventions?displayProperty=fullName>.  \n  \n> [!NOTE]\n>  This constructor was introduced in the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.","nodes":[{"pos":[0,373],"content":"The dynamic method that is created by this constructor is associated with an anonymous assembly instead of an existing type or module. The anonymous assembly exists only to provide a sandbox environment for dynamic methods, that is, to isolate them from other code. This environment makes it safe for the dynamic method to be emitted and executed by partially trusted code.","nodes":[{"content":"The dynamic method that is created by this constructor is associated with an anonymous assembly instead of an existing type or module. The anonymous assembly exists only to provide a sandbox environment for dynamic methods, that is, to isolate them from other code. This environment makes it safe for the dynamic method to be emitted and executed by partially trusted code.","pos":[0,373],"nodes":[{"content":"The dynamic method that is created by this constructor is associated with an anonymous assembly instead of an existing type or module.","pos":[0,134]},{"content":"The anonymous assembly exists only to provide a sandbox environment for dynamic methods, that is, to isolate them from other code.","pos":[135,265]},{"content":"This environment makes it safe for the dynamic method to be emitted and executed by partially trusted code.","pos":[266,373]}]}]},{"pos":[380,996],"content":"This constructor specifies that just-in-time (JIT) visibility checks will be enforced for the Microsoft intermediate language (MSIL) of the dynamic method. That is, the code in the dynamic method has access to public methods of public classes. Exceptions are thrown if the method tries to access types or members that are `private`, `protected`, or `internal` (`Friend` in Visual Basic). To create a dynamic method that has restricted ability to skip JIT visibility checks, use the <xref:System.Reflection.Emit.DynamicMethod.%23ctor%28System.String%2CSystem.Type%2CSystem.Type%5B%5D%2CSystem.Boolean%29> constructor.","nodes":[{"content":"This constructor specifies that just-in-time (JIT) visibility checks will be enforced for the Microsoft intermediate language (MSIL) of the dynamic method.","pos":[0,155]},{"content":"That is, the code in the dynamic method has access to public methods of public classes.","pos":[156,243]},{"content":"Exceptions are thrown if the method tries to access types or members that are <ph id=\"ph1\">`private`</ph>, <ph id=\"ph2\">`protected`</ph>, or <ph id=\"ph3\">`internal`</ph> (<ph id=\"ph4\">`Friend`</ph> in Visual Basic).","pos":[244,387],"source":" Exceptions are thrown if the method tries to access types or members that are `private`, `protected`, or `internal` (`Friend` in Visual Basic)."},{"content":"To create a dynamic method that has restricted ability to skip JIT visibility checks, use the <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.DynamicMethod.%23ctor%28System.String%2CSystem.Type%2CSystem.Type%5B%5D%2CSystem.Boolean%29&gt;</ph> constructor.","pos":[388,616],"source":" To create a dynamic method that has restricted ability to skip JIT visibility checks, use the <xref:System.Reflection.Emit.DynamicMethod.%23ctor%28System.String%2CSystem.Type%2CSystem.Type%5B%5D%2CSystem.Boolean%29> constructor."}]},{"pos":[1003,1437],"content":"When an anonymously hosted dynamic method is constructed, the call stack of the emitting assembly is included. When the method is invoked, the permissions of the emitting assembly are used instead of the permissions of the actual caller. Thus, the dynamic method cannot execute at a higher level of privilege than that of the assembly that emitted it, even if it is passed to and executed by an assembly that has a higher trust level.","nodes":[{"content":"When an anonymously hosted dynamic method is constructed, the call stack of the emitting assembly is included. When the method is invoked, the permissions of the emitting assembly are used instead of the permissions of the actual caller. Thus, the dynamic method cannot execute at a higher level of privilege than that of the assembly that emitted it, even if it is passed to and executed by an assembly that has a higher trust level.","pos":[0,434],"nodes":[{"content":"When an anonymously hosted dynamic method is constructed, the call stack of the emitting assembly is included.","pos":[0,110]},{"content":"When the method is invoked, the permissions of the emitting assembly are used instead of the permissions of the actual caller.","pos":[111,237]},{"content":"Thus, the dynamic method cannot execute at a higher level of privilege than that of the assembly that emitted it, even if it is passed to and executed by an assembly that has a higher trust level.","pos":[238,434]}]}]},{"pos":[1444,1728],"content":"This constructor specifies the method attributes <xref:System.Reflection.MethodAttributes?displayProperty=fullName> and <xref:System.Reflection.MethodAttributes?displayProperty=fullName>, and the calling convention <xref:System.Reflection.CallingConventions?displayProperty=fullName>.","nodes":[{"content":"This constructor specifies the method attributes <ph id=\"ph1\">&lt;xref:System.Reflection.MethodAttributes?displayProperty=fullName&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Reflection.MethodAttributes?displayProperty=fullName&gt;</ph>, and the calling convention <ph id=\"ph3\">&lt;xref:System.Reflection.CallingConventions?displayProperty=fullName&gt;</ph>.","pos":[0,284],"source":"This constructor specifies the method attributes <xref:System.Reflection.MethodAttributes?displayProperty=fullName> and <xref:System.Reflection.MethodAttributes?displayProperty=fullName>, and the calling convention <xref:System.Reflection.CallingConventions?displayProperty=fullName>."}]},{"pos":[1736,1851],"content":"[!NOTE]\n This constructor was introduced in the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.","leadings":["","> "],"nodes":[{"content":"This constructor was introduced in the <ph id=\"ph1\">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> or later.","pos":[9,113],"source":" This constructor was introduced in the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later."}]}],"pos":[23820,25683],"yaml":true,"extradata":"MT"},{"content":"The name of the dynamic method. This can be a zero-length string, but it cannot be `null`.","nodes":[{"pos":[0,90],"content":"The name of the dynamic method. This can be a zero-length string, but it cannot be `null`.","nodes":[{"content":"The name of the dynamic method.","pos":[0,31]},{"content":"This can be a zero-length string, but it cannot be <ph id=\"ph1\">`null`</ph>.","pos":[32,90],"source":" This can be a zero-length string, but it cannot be `null`."}]}],"pos":[25858,25949],"yaml":true},{"content":"A <xref href=\"System.Type\"></xref> object that specifies the return type of the dynamic method, or `null` if the method has no return type.","nodes":[{"pos":[0,139],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> object that specifies the return type of the dynamic method, or <ph id=\"ph2\">`null`</ph> if the method has no return type.","source":"A <xref href=\"System.Type\"></xref> object that specifies the return type of the dynamic method, or `null` if the method has no return type."}],"pos":[26013,26153],"yaml":true},{"content":"An array of <xref href=\"System.Type\"></xref> objects specifying the types of the parameters of the dynamic method, or `null` if the method has no parameters.","nodes":[{"pos":[0,157],"content":"An array of <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> objects specifying the types of the parameters of the dynamic method, or <ph id=\"ph2\">`null`</ph> if the method has no parameters.","source":"An array of <xref href=\"System.Type\"></xref> objects specifying the types of the parameters of the dynamic method, or `null` if the method has no parameters."}],"pos":[26223,26381],"yaml":true},{"content":"An element of <code>parameterTypes</code> is `null` or <xref href=\"System.Void\"></xref>.","nodes":[{"pos":[0,88],"content":"An element of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">parameterTypes</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">`null`</ph> or <ph id=\"ph3\">&lt;xref href=\"System.Void\"&gt;&lt;/xref&gt;</ph>.","source":"An element of <code>parameterTypes</code> is `null` or <xref href=\"System.Void\"></xref>."}],"pos":[26545,26634],"yaml":true},{"content":"<code>name</code> is `null`.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;name&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>name</code> is `null`."}],"pos":[26736,26765],"yaml":true},{"content":"<code>returnType</code> is a type for which <xref href=\"System.Type.IsByRef\"></xref> returns `true`.","nodes":[{"pos":[0,100],"content":"<ph id=\"ph1\">&lt;code&gt;returnType&lt;/code&gt;</ph> is a type for which <ph id=\"ph2\">&lt;xref href=\"System.Type.IsByRef\"&gt;&lt;/xref&gt;</ph> returns <ph id=\"ph3\">`true`</ph>.","source":"<code>returnType</code> is a type for which <xref href=\"System.Type.IsByRef\"></xref> returns `true`."}],"pos":[26867,26968],"yaml":true},{"content":"Initializes an anonymously hosted dynamic method, specifying the method name, return type, parameter types, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.","nodes":[{"pos":[0,274],"content":"Initializes an anonymously hosted dynamic method, specifying the method name, return type, parameter types, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.","nodes":[{"content":"Initializes an anonymously hosted dynamic method, specifying the method name, return type, parameter types, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.","pos":[0,274]}]}],"pos":[28374,28649],"yaml":true},{"content":"The dynamic method that is created by this constructor is associated with an anonymous assembly instead of an existing type or module. The anonymous assembly exists only to provide a sandbox environment for dynamic methods, that is, to isolate them from other code. This environment makes it safe for the dynamic method to be emitted and executed by partially trusted code.  \n  \n Anonymously hosted dynamic methods do not have automatic access to any types or members that are `private`, `protected`, or `internal` (`Friend` in Visual Basic). This is different from dynamic methods that are associated with an existing type or module, which have access to hidden members in their associated scope.  \n  \n Specify `true` for `restrictedSkipVisibility` if your dynamic method has to access types or members that are `private`, `protected`, or `internal`. This gives the dynamic method restricted access to these members. That is, the members can be accessed only if the following conditions are met:  \n  \n-   The target members belong to an assembly that has a level of trust equal to or lower than the call stack that emits the dynamic method.  \n  \n-   The call stack that emits the dynamic method is granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag. This is always true when the code is executed with full trust. For partially trusted code, it is true only if the host explicitly grants the permission.  \n  \n    > [!IMPORTANT]\n    >  If the permission has not been granted, a security exception is thrown when <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> is called or when the dynamic method is invoked, not when this constructor is called. No special permissions are required to emit the dynamic method.  \n  \n For example, a dynamic method that is created with `restrictedSkipVisibility` set to `true` can access a private member of any assembly on the call stack if the call stack has been granted restricted member access. If the dynamic method is created with partially trusted code on the call stack, it cannot access a private member of a type in a [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] assembly, because such assemblies are fully trusted.  \n  \n If `restrictedSkipVisibility` is `false`, JIT visibility checks are enforced. The code in the dynamic method has access to public methods of public classes, and exceptions are thrown if it tries to access types or members that are `private`, `protected`, or `internal`.  \n  \n When an anonymously hosted dynamic method is constructed, the call stack of the emitting assembly is included. When the method is invoked, the permissions of the emitting call stack are used instead of the permissions of the actual caller. Thus, the dynamic method cannot execute at a higher level of privilege than that of the assembly that emitted it, even if it is passed to and executed by an assembly that has a higher trust level.  \n  \n This constructor specifies the method attributes <xref:System.Reflection.MethodAttributes?displayProperty=fullName> and <xref:System.Reflection.MethodAttributes?displayProperty=fullName>, and the calling convention <xref:System.Reflection.CallingConventions?displayProperty=fullName>.  \n  \n> [!NOTE]\n>  This constructor was introduced in the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.","nodes":[{"pos":[0,373],"content":"The dynamic method that is created by this constructor is associated with an anonymous assembly instead of an existing type or module. The anonymous assembly exists only to provide a sandbox environment for dynamic methods, that is, to isolate them from other code. This environment makes it safe for the dynamic method to be emitted and executed by partially trusted code.","nodes":[{"content":"The dynamic method that is created by this constructor is associated with an anonymous assembly instead of an existing type or module. The anonymous assembly exists only to provide a sandbox environment for dynamic methods, that is, to isolate them from other code. This environment makes it safe for the dynamic method to be emitted and executed by partially trusted code.","pos":[0,373],"nodes":[{"content":"The dynamic method that is created by this constructor is associated with an anonymous assembly instead of an existing type or module.","pos":[0,134]},{"content":"The anonymous assembly exists only to provide a sandbox environment for dynamic methods, that is, to isolate them from other code.","pos":[135,265]},{"content":"This environment makes it safe for the dynamic method to be emitted and executed by partially trusted code.","pos":[266,373]}]}]},{"pos":[380,697],"content":"Anonymously hosted dynamic methods do not have automatic access to any types or members that are `private`, `protected`, or `internal` (`Friend` in Visual Basic). This is different from dynamic methods that are associated with an existing type or module, which have access to hidden members in their associated scope.","nodes":[{"content":"Anonymously hosted dynamic methods do not have automatic access to any types or members that are <ph id=\"ph1\">`private`</ph>, <ph id=\"ph2\">`protected`</ph>, or <ph id=\"ph3\">`internal`</ph> (<ph id=\"ph4\">`Friend`</ph> in Visual Basic).","pos":[0,162],"source":"Anonymously hosted dynamic methods do not have automatic access to any types or members that are `private`, `protected`, or `internal` (`Friend` in Visual Basic)."},{"content":"This is different from dynamic methods that are associated with an existing type or module, which have access to hidden members in their associated scope.","pos":[163,317]}]},{"pos":[704,996],"content":"Specify `true` for `restrictedSkipVisibility` if your dynamic method has to access types or members that are `private`, `protected`, or `internal`. This gives the dynamic method restricted access to these members. That is, the members can be accessed only if the following conditions are met:","nodes":[{"content":"Specify <ph id=\"ph1\">`true`</ph> for <ph id=\"ph2\">`restrictedSkipVisibility`</ph> if your dynamic method has to access types or members that are <ph id=\"ph3\">`private`</ph>, <ph id=\"ph4\">`protected`</ph>, or <ph id=\"ph5\">`internal`</ph>.","pos":[0,147],"source":"Specify `true` for `restrictedSkipVisibility` if your dynamic method has to access types or members that are `private`, `protected`, or `internal`."},{"content":"This gives the dynamic method restricted access to these members.","pos":[148,213]},{"content":"That is, the members can be accessed only if the following conditions are met:","pos":[214,292]}]},{"pos":[1006,1141],"content":"The target members belong to an assembly that has a level of trust equal to or lower than the call stack that emits the dynamic method.","nodes":[{"content":"The target members belong to an assembly that has a level of trust equal to or lower than the call stack that emits the dynamic method.","pos":[0,135]}]},{"pos":[1151,1515],"content":"The call stack that emits the dynamic method is granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag. This is always true when the code is executed with full trust. For partially trusted code, it is true only if the host explicitly grants the permission.","nodes":[{"content":"The call stack that emits the dynamic method is granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag. This is always true when the code is executed with full trust. For partially trusted code, it is true only if the host explicitly grants the permission.","pos":[0,364],"nodes":[{"content":"The call stack that emits the dynamic method is granted <ph id=\"ph1\">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> with the <ph id=\"ph2\">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName&gt;</ph> flag.","pos":[0,211],"source":"The call stack that emits the dynamic method is granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag."},{"content":"This is always true when the code is executed with full trust.","pos":[212,274]},{"content":"For partially trusted code, it is true only if the host explicitly grants the permission.","pos":[275,364]}]}]},{"pos":[1527,1834],"content":"[!IMPORTANT]\nIf the permission has not been granted, a security exception is thrown when <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> is called or when the dynamic method is invoked, not when this constructor is called. No special permissions are required to emit the dynamic method.","leadings":["","    >  "],"nodes":[{"content":"If the permission has not been granted, a security exception is thrown when <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> is called or when the dynamic method is invoked, not when this constructor is called. No special permissions are required to emit the dynamic method.","pos":[13,300],"nodes":[{"content":"If the permission has not been granted, a security exception is thrown when <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A&gt;</ph> is called or when the dynamic method is invoked, not when this constructor is called.","pos":[0,223],"source":"If the permission has not been granted, a security exception is thrown when <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> is called or when the dynamic method is invoked, not when this constructor is called."},{"content":"No special permissions are required to emit the dynamic method.","pos":[224,287]}]}]},{"pos":[1841,2291],"content":"For example, a dynamic method that is created with `restrictedSkipVisibility` set to `true` can access a private member of any assembly on the call stack if the call stack has been granted restricted member access. If the dynamic method is created with partially trusted code on the call stack, it cannot access a private member of a type in a [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] assembly, because such assemblies are fully trusted.","nodes":[{"content":"For example, a dynamic method that is created with <ph id=\"ph1\">`restrictedSkipVisibility`</ph> set to <ph id=\"ph2\">`true`</ph> can access a private member of any assembly on the call stack if the call stack has been granted restricted member access.","pos":[0,214],"source":"For example, a dynamic method that is created with `restrictedSkipVisibility` set to `true` can access a private member of any assembly on the call stack if the call stack has been granted restricted member access."},{"content":"If the dynamic method is created with partially trusted code on the call stack, it cannot access a private member of a type in a <ph id=\"ph1\">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]</ph> assembly, because such assemblies are fully trusted.","pos":[215,450],"source":" If the dynamic method is created with partially trusted code on the call stack, it cannot access a private member of a type in a [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] assembly, because such assemblies are fully trusted."}]},{"pos":[2298,2567],"content":"If `restrictedSkipVisibility` is `false`, JIT visibility checks are enforced. The code in the dynamic method has access to public methods of public classes, and exceptions are thrown if it tries to access types or members that are `private`, `protected`, or `internal`.","nodes":[{"content":"If <ph id=\"ph1\">`restrictedSkipVisibility`</ph> is <ph id=\"ph2\">`false`</ph>, JIT visibility checks are enforced.","pos":[0,77],"source":"If `restrictedSkipVisibility` is `false`, JIT visibility checks are enforced."},{"content":"The code in the dynamic method has access to public methods of public classes, and exceptions are thrown if it tries to access types or members that are <ph id=\"ph1\">`private`</ph>, <ph id=\"ph2\">`protected`</ph>, or <ph id=\"ph3\">`internal`</ph>.","pos":[78,269],"source":" The code in the dynamic method has access to public methods of public classes, and exceptions are thrown if it tries to access types or members that are `private`, `protected`, or `internal`."}]},{"pos":[2574,3010],"content":"When an anonymously hosted dynamic method is constructed, the call stack of the emitting assembly is included. When the method is invoked, the permissions of the emitting call stack are used instead of the permissions of the actual caller. Thus, the dynamic method cannot execute at a higher level of privilege than that of the assembly that emitted it, even if it is passed to and executed by an assembly that has a higher trust level.","nodes":[{"content":"When an anonymously hosted dynamic method is constructed, the call stack of the emitting assembly is included. When the method is invoked, the permissions of the emitting call stack are used instead of the permissions of the actual caller. Thus, the dynamic method cannot execute at a higher level of privilege than that of the assembly that emitted it, even if it is passed to and executed by an assembly that has a higher trust level.","pos":[0,436],"nodes":[{"content":"When an anonymously hosted dynamic method is constructed, the call stack of the emitting assembly is included.","pos":[0,110]},{"content":"When the method is invoked, the permissions of the emitting call stack are used instead of the permissions of the actual caller.","pos":[111,239]},{"content":"Thus, the dynamic method cannot execute at a higher level of privilege than that of the assembly that emitted it, even if it is passed to and executed by an assembly that has a higher trust level.","pos":[240,436]}]}]},{"pos":[3017,3301],"content":"This constructor specifies the method attributes <xref:System.Reflection.MethodAttributes?displayProperty=fullName> and <xref:System.Reflection.MethodAttributes?displayProperty=fullName>, and the calling convention <xref:System.Reflection.CallingConventions?displayProperty=fullName>.","nodes":[{"content":"This constructor specifies the method attributes <ph id=\"ph1\">&lt;xref:System.Reflection.MethodAttributes?displayProperty=fullName&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Reflection.MethodAttributes?displayProperty=fullName&gt;</ph>, and the calling convention <ph id=\"ph3\">&lt;xref:System.Reflection.CallingConventions?displayProperty=fullName&gt;</ph>.","pos":[0,284],"source":"This constructor specifies the method attributes <xref:System.Reflection.MethodAttributes?displayProperty=fullName> and <xref:System.Reflection.MethodAttributes?displayProperty=fullName>, and the calling convention <xref:System.Reflection.CallingConventions?displayProperty=fullName>."}]},{"pos":[3309,3424],"content":"[!NOTE]\n This constructor was introduced in the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.","leadings":["","> "],"nodes":[{"content":"This constructor was introduced in the <ph id=\"ph1\">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> or later.","pos":[9,113],"source":" This constructor was introduced in the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later."}]}],"pos":[28660,32109],"yaml":true,"extradata":"MT"},{"content":"The name of the dynamic method. This can be a zero-length string, but it cannot be `null`.","nodes":[{"pos":[0,90],"content":"The name of the dynamic method. This can be a zero-length string, but it cannot be `null`.","nodes":[{"content":"The name of the dynamic method.","pos":[0,31]},{"content":"This can be a zero-length string, but it cannot be <ph id=\"ph1\">`null`</ph>.","pos":[32,90],"source":" This can be a zero-length string, but it cannot be `null`."}]}],"pos":[32315,32406],"yaml":true},{"content":"A <xref href=\"System.Type\"></xref> object that specifies the return type of the dynamic method, or `null` if the method has no return type.","nodes":[{"pos":[0,139],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> object that specifies the return type of the dynamic method, or <ph id=\"ph2\">`null`</ph> if the method has no return type.","source":"A <xref href=\"System.Type\"></xref> object that specifies the return type of the dynamic method, or `null` if the method has no return type."}],"pos":[32470,32610],"yaml":true},{"content":"An array of <xref href=\"System.Type\"></xref> objects specifying the types of the parameters of the dynamic method, or `null` if the method has no parameters.","nodes":[{"pos":[0,157],"content":"An array of <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> objects specifying the types of the parameters of the dynamic method, or <ph id=\"ph2\">`null`</ph> if the method has no parameters.","source":"An array of <xref href=\"System.Type\"></xref> objects specifying the types of the parameters of the dynamic method, or `null` if the method has no parameters."}],"pos":[32680,32838],"yaml":true},{"content":"`true` to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method, with this restriction: the trust level of the assemblies that contain those types and members must be equal to or less than the trust level of the call stack that emits the dynamic method; otherwise, `false`.","nodes":[{"pos":[0,310],"content":"<ph id=\"ph1\">`true`</ph> to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method, with this restriction: the trust level of the assemblies that contain those types and members must be equal to or less than the trust level of the call stack that emits the dynamic method; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method, with this restriction: the trust level of the assemblies that contain those types and members must be equal to or less than the trust level of the call stack that emits the dynamic method; otherwise, `false`."}],"pos":[32919,33232],"yaml":true},{"content":"An element of <code>parameterTypes</code> is `null` or <xref href=\"System.Void\"></xref>.","nodes":[{"pos":[0,88],"content":"An element of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">parameterTypes</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">`null`</ph> or <ph id=\"ph3\">&lt;xref href=\"System.Void\"&gt;&lt;/xref&gt;</ph>.","source":"An element of <code>parameterTypes</code> is `null` or <xref href=\"System.Void\"></xref>."}],"pos":[33396,33485],"yaml":true},{"content":"<code>name</code> is `null`.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;name&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>name</code> is `null`."}],"pos":[33587,33616],"yaml":true},{"content":"<code>returnType</code> is a type for which <xref href=\"System.Type.IsByRef\"></xref> returns `true`.","nodes":[{"pos":[0,100],"content":"<ph id=\"ph1\">&lt;code&gt;returnType&lt;/code&gt;</ph> is a type for which <ph id=\"ph2\">&lt;xref href=\"System.Type.IsByRef\"&gt;&lt;/xref&gt;</ph> returns <ph id=\"ph3\">`true`</ph>.","source":"<code>returnType</code> is a type for which <xref href=\"System.Type.IsByRef\"></xref> returns `true`."}],"pos":[33718,33819],"yaml":true},{"content":"Creates a dynamic method that is global to a module, specifying the method name, return type, parameter types, and module.","nodes":[{"pos":[0,122],"content":"Creates a dynamic method that is global to a module, specifying the method name, return type, parameter types, and module.","nodes":[{"content":"Creates a dynamic method that is global to a module, specifying the method name, return type, parameter types, and module.","pos":[0,122]}]}],"pos":[35252,35375],"yaml":true},{"content":"This constructor specifies method attributes <xref:System.Reflection.MethodAttributes?displayProperty=fullName> and <xref:System.Reflection.MethodAttributes?displayProperty=fullName>, calling convention <xref:System.Reflection.CallingConventions?displayProperty=fullName>, and does not skip just-in-time (JIT) visibility checks.  \n  \n The dynamic method created with this constructor has access to public and `internal` (`Friend` in Visual Basic) members of all the types contained in module `m`.  \n  \n> [!NOTE]\n>  For backward compatibility, this constructor demands <xref:System.Security.Permissions.SecurityPermission> with the <xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName> flag if the following conditions are both true: `m` is a module other than the calling module, and the demand for <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag has failed. If the demand for <xref:System.Security.Permissions.SecurityPermission> succeeds, the operation is allowed.  \n  \n> [!NOTE]\n>  Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag. (See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.","nodes":[{"pos":[0,328],"content":"This constructor specifies method attributes <xref:System.Reflection.MethodAttributes?displayProperty=fullName> and <xref:System.Reflection.MethodAttributes?displayProperty=fullName>, calling convention <xref:System.Reflection.CallingConventions?displayProperty=fullName>, and does not skip just-in-time (JIT) visibility checks.","nodes":[{"content":"This constructor specifies method attributes <ph id=\"ph1\">&lt;xref:System.Reflection.MethodAttributes?displayProperty=fullName&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Reflection.MethodAttributes?displayProperty=fullName&gt;</ph>, calling convention <ph id=\"ph3\">&lt;xref:System.Reflection.CallingConventions?displayProperty=fullName&gt;</ph>, and does not skip just-in-time (JIT) visibility checks.","pos":[0,328],"source":"This constructor specifies method attributes <xref:System.Reflection.MethodAttributes?displayProperty=fullName> and <xref:System.Reflection.MethodAttributes?displayProperty=fullName>, calling convention <xref:System.Reflection.CallingConventions?displayProperty=fullName>, and does not skip just-in-time (JIT) visibility checks."}]},{"pos":[335,496],"content":"The dynamic method created with this constructor has access to public and <ph id=\"ph1\">`internal`</ph> (<ph id=\"ph2\">`Friend`</ph> in Visual Basic) members of all the types contained in module <ph id=\"ph3\">`m`</ph>.","source":"The dynamic method created with this constructor has access to public and `internal` (`Friend` in Visual Basic) members of all the types contained in module `m`."},{"pos":[504,1102],"content":"[!NOTE]\n For backward compatibility, this constructor demands <xref:System.Security.Permissions.SecurityPermission> with the <xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName> flag if the following conditions are both true: `m` is a module other than the calling module, and the demand for <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag has failed. If the demand for <xref:System.Security.Permissions.SecurityPermission> succeeds, the operation is allowed.","leadings":["","> "],"nodes":[{"content":" For backward compatibility, this constructor demands <xref:System.Security.Permissions.SecurityPermission> with the <xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName> flag if the following conditions are both true: `m` is a module other than the calling module, and the demand for <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag has failed. If the demand for <xref:System.Security.Permissions.SecurityPermission> succeeds, the operation is allowed.","pos":[8,596],"nodes":[{"content":"For backward compatibility, this constructor demands <ph id=\"ph1\">&lt;xref:System.Security.Permissions.SecurityPermission&gt;</ph> with the <ph id=\"ph2\">&lt;xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName&gt;</ph> flag if the following conditions are both true: <ph id=\"ph3\">`m`</ph> is a module other than the calling module, and the demand for <ph id=\"ph4\">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> with the <ph id=\"ph5\">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName&gt;</ph> flag has failed.","pos":[1,480],"source":" For backward compatibility, this constructor demands <xref:System.Security.Permissions.SecurityPermission> with the <xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName> flag if the following conditions are both true: `m` is a module other than the calling module, and the demand for <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag has failed."},{"content":"If the demand for <ph id=\"ph1\">&lt;xref:System.Security.Permissions.SecurityPermission&gt;</ph> succeeds, the operation is allowed.","pos":[481,588],"source":" If the demand for <xref:System.Security.Permissions.SecurityPermission> succeeds, the operation is allowed."}]}]},{"pos":[1110,1639],"content":"[!NOTE]\n Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag. (See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.","leadings":["","> "],"nodes":[{"content":" Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag. (See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.","pos":[8,527],"nodes":[{"content":"Starting with the <ph id=\"ph1\">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>, this member no longer requires <ph id=\"ph2\">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> with the <ph id=\"ph3\">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName&gt;</ph> flag.","pos":[1,268],"source":" Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag."},{"content":"(See <bpt id=\"p1\">[</bpt>Security Issues in Reflection Emit<ept id=\"p1\">](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md)</ept>.) To use this functionality, your application should target the <ph id=\"ph1\">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> or later.","pos":[269,519],"source":" (See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later."}]}]}],"pos":[35386,37036],"yaml":true,"extradata":"MT"},{"content":"The name of the dynamic method. This can be a zero-length string, but it cannot be `null`.","nodes":[{"pos":[0,90],"content":"The name of the dynamic method. This can be a zero-length string, but it cannot be `null`.","nodes":[{"content":"The name of the dynamic method.","pos":[0,31]},{"content":"This can be a zero-length string, but it cannot be <ph id=\"ph1\">`null`</ph>.","pos":[32,90],"source":" This can be a zero-length string, but it cannot be `null`."}]}],"pos":[38273,38364],"yaml":true},{"content":"A <xref href=\"System.Type\"></xref> object that specifies the return type of the dynamic method, or `null` if the method has no return type.","nodes":[{"pos":[0,139],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> object that specifies the return type of the dynamic method, or <ph id=\"ph2\">`null`</ph> if the method has no return type.","source":"A <xref href=\"System.Type\"></xref> object that specifies the return type of the dynamic method, or `null` if the method has no return type."}],"pos":[38428,38568],"yaml":true},{"content":"An array of <xref href=\"System.Type\"></xref> objects specifying the types of the parameters of the dynamic method, or `null` if the method has no parameters.","nodes":[{"pos":[0,157],"content":"An array of <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> objects specifying the types of the parameters of the dynamic method, or <ph id=\"ph2\">`null`</ph> if the method has no parameters.","source":"An array of <xref href=\"System.Type\"></xref> objects specifying the types of the parameters of the dynamic method, or `null` if the method has no parameters."}],"pos":[38638,38796],"yaml":true},{"content":"A <xref href=\"System.Reflection.Module\"></xref> representing the module with which the dynamic method is to be logically associated.","nodes":[{"pos":[0,132],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Module\"&gt;&lt;/xref&gt;</ph> representing the module with which the dynamic method is to be logically associated.","source":"A <xref href=\"System.Reflection.Module\"></xref> representing the module with which the dynamic method is to be logically associated."}],"pos":[38864,38997],"yaml":true},{"content":"An element of <code>parameterTypes</code> is `null` or <xref href=\"System.Void\"></xref>.  \n  \n -or-  \n  \n <code>m</code> is a module that provides anonymous hosting for dynamic methods.","nodes":[{"pos":[0,88],"content":"An element of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">parameterTypes</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">`null`</ph> or <ph id=\"ph3\">&lt;xref href=\"System.Void\"&gt;&lt;/xref&gt;</ph>.","source":"An element of <code>parameterTypes</code> is `null` or <xref href=\"System.Void\"></xref>."},{"pos":[95,99],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[106,185],"content":"<ph id=\"ph1\">&lt;code&gt;m&lt;/code&gt;</ph> is a module that provides anonymous hosting for dynamic methods.","source":"<code>m</code> is a module that provides anonymous hosting for dynamic methods."}],"pos":[39161,39355],"yaml":true},{"content":"<code>name</code> is `null`.  \n  \n -or-  \n  \n <code>m</code> is `null`.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;name&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>name</code> is `null`."},{"pos":[35,39],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[46,71],"content":"<ph id=\"ph1\">&lt;code&gt;m&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>m</code> is `null`."}],"pos":[39457,39535],"yaml":true},{"content":"<code>returnType</code> is a type for which <xref href=\"System.Type.IsByRef\"></xref> returns `true`.","nodes":[{"pos":[0,100],"content":"<ph id=\"ph1\">&lt;code&gt;returnType&lt;/code&gt;</ph> is a type for which <ph id=\"ph2\">&lt;xref href=\"System.Type.IsByRef\"&gt;&lt;/xref&gt;</ph> returns <ph id=\"ph3\">`true`</ph>.","source":"<code>returnType</code> is a type for which <xref href=\"System.Type.IsByRef\"></xref> returns `true`."}],"pos":[39637,39738],"yaml":true},{"content":"Creates a dynamic method, specifying the method name, return type, parameter types, and the type with which the dynamic method is logically associated.","nodes":[{"pos":[0,151],"content":"Creates a dynamic method, specifying the method name, return type, parameter types, and the type with which the dynamic method is logically associated.","nodes":[{"content":"Creates a dynamic method, specifying the method name, return type, parameter types, and the type with which the dynamic method is logically associated.","pos":[0,151]}]}],"pos":[41126,41278],"yaml":true},{"content":"The dynamic method created with this constructor has access to all members of the type `owner`, and to public and `internal` (`Friend` in Visual Basic) members of all the other types in the module that contains `owner`.  \n  \n This constructor specifies method attributes <xref:System.Reflection.MethodAttributes?displayProperty=fullName> and <xref:System.Reflection.MethodAttributes?displayProperty=fullName>, calling convention <xref:System.Reflection.CallingConventions?displayProperty=fullName>, and does not skip just-in-time (JIT) visibility checks.  \n  \n> [!NOTE]\n>  For backward compatibility, this constructor demands <xref:System.Security.Permissions.SecurityPermission> with the <xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName> flag if the following conditions are both true: `owner` is in a module other than the calling module, and the demand for <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag has failed. If the demand for <xref:System.Security.Permissions.SecurityPermission> succeeds, the operation is allowed.  \n  \n> [!NOTE]\n>  Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag. (See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.","nodes":[{"pos":[0,219],"content":"The dynamic method created with this constructor has access to all members of the type <ph id=\"ph1\">`owner`</ph>, and to public and <ph id=\"ph2\">`internal`</ph> (<ph id=\"ph3\">`Friend`</ph> in Visual Basic) members of all the other types in the module that contains <ph id=\"ph4\">`owner`</ph>.","source":"The dynamic method created with this constructor has access to all members of the type `owner`, and to public and `internal` (`Friend` in Visual Basic) members of all the other types in the module that contains `owner`."},{"pos":[226,554],"content":"This constructor specifies method attributes <xref:System.Reflection.MethodAttributes?displayProperty=fullName> and <xref:System.Reflection.MethodAttributes?displayProperty=fullName>, calling convention <xref:System.Reflection.CallingConventions?displayProperty=fullName>, and does not skip just-in-time (JIT) visibility checks.","nodes":[{"content":"This constructor specifies method attributes <ph id=\"ph1\">&lt;xref:System.Reflection.MethodAttributes?displayProperty=fullName&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Reflection.MethodAttributes?displayProperty=fullName&gt;</ph>, calling convention <ph id=\"ph3\">&lt;xref:System.Reflection.CallingConventions?displayProperty=fullName&gt;</ph>, and does not skip just-in-time (JIT) visibility checks.","pos":[0,328],"source":"This constructor specifies method attributes <xref:System.Reflection.MethodAttributes?displayProperty=fullName> and <xref:System.Reflection.MethodAttributes?displayProperty=fullName>, calling convention <xref:System.Reflection.CallingConventions?displayProperty=fullName>, and does not skip just-in-time (JIT) visibility checks."}]},{"pos":[562,1167],"content":"[!NOTE]\n For backward compatibility, this constructor demands <xref:System.Security.Permissions.SecurityPermission> with the <xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName> flag if the following conditions are both true: `owner` is in a module other than the calling module, and the demand for <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag has failed. If the demand for <xref:System.Security.Permissions.SecurityPermission> succeeds, the operation is allowed.","leadings":["","> "],"nodes":[{"content":" For backward compatibility, this constructor demands <xref:System.Security.Permissions.SecurityPermission> with the <xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName> flag if the following conditions are both true: `owner` is in a module other than the calling module, and the demand for <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag has failed. If the demand for <xref:System.Security.Permissions.SecurityPermission> succeeds, the operation is allowed.","pos":[8,603],"nodes":[{"content":"For backward compatibility, this constructor demands <ph id=\"ph1\">&lt;xref:System.Security.Permissions.SecurityPermission&gt;</ph> with the <ph id=\"ph2\">&lt;xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName&gt;</ph> flag if the following conditions are both true: <ph id=\"ph3\">`owner`</ph> is in a module other than the calling module, and the demand for <ph id=\"ph4\">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> with the <ph id=\"ph5\">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName&gt;</ph> flag has failed.","pos":[1,487],"source":" For backward compatibility, this constructor demands <xref:System.Security.Permissions.SecurityPermission> with the <xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName> flag if the following conditions are both true: `owner` is in a module other than the calling module, and the demand for <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag has failed."},{"content":"If the demand for <ph id=\"ph1\">&lt;xref:System.Security.Permissions.SecurityPermission&gt;</ph> succeeds, the operation is allowed.","pos":[488,595],"source":" If the demand for <xref:System.Security.Permissions.SecurityPermission> succeeds, the operation is allowed."}]}]},{"pos":[1175,1704],"content":"[!NOTE]\n Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag. (See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.","leadings":["","> "],"nodes":[{"content":" Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag. (See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.","pos":[8,527],"nodes":[{"content":"Starting with the <ph id=\"ph1\">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>, this member no longer requires <ph id=\"ph2\">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> with the <ph id=\"ph3\">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName&gt;</ph> flag.","pos":[1,268],"source":" Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag."},{"content":"(See <bpt id=\"p1\">[</bpt>Security Issues in Reflection Emit<ept id=\"p1\">](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md)</ept>.) To use this functionality, your application should target the <ph id=\"ph1\">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> or later.","pos":[269,519],"source":" (See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later."}]}]}],"pos":[41289,43004],"yaml":true,"extradata":"MT"},{"content":"The name of the dynamic method. This can be a zero-length string, but it cannot be `null`.","nodes":[{"pos":[0,90],"content":"The name of the dynamic method. This can be a zero-length string, but it cannot be `null`.","nodes":[{"content":"The name of the dynamic method.","pos":[0,31]},{"content":"This can be a zero-length string, but it cannot be <ph id=\"ph1\">`null`</ph>.","pos":[32,90],"source":" This can be a zero-length string, but it cannot be `null`."}]}],"pos":[45850,45941],"yaml":true},{"content":"A <xref href=\"System.Type\"></xref> object that specifies the return type of the dynamic method, or `null` if the method has no return type.","nodes":[{"pos":[0,139],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> object that specifies the return type of the dynamic method, or <ph id=\"ph2\">`null`</ph> if the method has no return type.","source":"A <xref href=\"System.Type\"></xref> object that specifies the return type of the dynamic method, or `null` if the method has no return type."}],"pos":[46005,46145],"yaml":true},{"content":"An array of <xref href=\"System.Type\"></xref> objects specifying the types of the parameters of the dynamic method, or `null` if the method has no parameters.","nodes":[{"pos":[0,157],"content":"An array of <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> objects specifying the types of the parameters of the dynamic method, or <ph id=\"ph2\">`null`</ph> if the method has no parameters.","source":"An array of <xref href=\"System.Type\"></xref> objects specifying the types of the parameters of the dynamic method, or `null` if the method has no parameters."}],"pos":[46215,46373],"yaml":true},{"content":"A <xref href=\"System.Type\"></xref> with which the dynamic method is logically associated. The dynamic method has access to all members of the type.","nodes":[{"pos":[0,147],"content":"A <xref href=\"System.Type\"></xref> with which the dynamic method is logically associated. The dynamic method has access to all members of the type.","nodes":[{"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> with which the dynamic method is logically associated.","pos":[0,89],"source":"A <xref href=\"System.Type\"></xref> with which the dynamic method is logically associated."},{"content":"The dynamic method has access to all members of the type.","pos":[90,147]}]}],"pos":[46432,46580],"yaml":true},{"content":"An element of <code>parameterTypes</code> is `null` or <xref href=\"System.Void\"></xref>.  \n  \n -or-  \n  \n <code>owner</code> is an interface, an array, an open generic type, or a type parameter of a generic type or method.","nodes":[{"pos":[0,88],"content":"An element of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">parameterTypes</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">`null`</ph> or <ph id=\"ph3\">&lt;xref href=\"System.Void\"&gt;&lt;/xref&gt;</ph>.","source":"An element of <code>parameterTypes</code> is `null` or <xref href=\"System.Void\"></xref>."},{"pos":[95,99],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[106,222],"content":"<ph id=\"ph1\">&lt;code&gt;owner&lt;/code&gt;</ph> is an interface, an array, an open generic type, or a type parameter of a generic type or method.","source":"<code>owner</code> is an interface, an array, an open generic type, or a type parameter of a generic type or method."}],"pos":[46744,46975],"yaml":true},{"content":"<code>name</code> is `null`.  \n  \n -or-  \n  \n <code>owner</code> is `null`.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;name&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>name</code> is `null`."},{"pos":[35,39],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[46,75],"content":"<ph id=\"ph1\">&lt;code&gt;owner&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>owner</code> is `null`."}],"pos":[47077,47159],"yaml":true},{"content":"<code>returnType</code> is `null`, or is a type for which <xref href=\"System.Type.IsByRef\"></xref> returns `true`.","nodes":[{"pos":[0,114],"content":"<ph id=\"ph1\">&lt;code&gt;returnType&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>, or is a type for which <ph id=\"ph3\">&lt;xref href=\"System.Type.IsByRef\"&gt;&lt;/xref&gt;</ph> returns <ph id=\"ph4\">`true`</ph>.","source":"<code>returnType</code> is `null`, or is a type for which <xref href=\"System.Type.IsByRef\"></xref> returns `true`."}],"pos":[47261,47376],"yaml":true},{"content":"Creates a dynamic method that is global to a module, specifying the method name, return type, parameter types, module, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.","nodes":[{"pos":[0,285],"content":"Creates a dynamic method that is global to a module, specifying the method name, return type, parameter types, module, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.","nodes":[{"content":"Creates a dynamic method that is global to a module, specifying the method name, return type, parameter types, module, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.","pos":[0,285]}]}],"pos":[48881,49167],"yaml":true},{"content":"This constructor specifies method attributes <xref:System.Reflection.MethodAttributes?displayProperty=fullName> and <xref:System.Reflection.MethodAttributes?displayProperty=fullName>, and calling convention <xref:System.Reflection.CallingConventions?displayProperty=fullName>.  \n  \n The dynamic method created with this constructor has access to public and `internal` (`Friend` in Visual Basic) members of all the types in contained module `m`. Skipping the JIT compiler's visibility checks allows the dynamic method to access private and protected members of all other types as well. This is useful, for example, when writing code to serialize objects.  \n  \n> [!NOTE]\n>  For backward compatibility, this constructor demands <xref:System.Security.Permissions.SecurityPermission> with the <xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName> flag if the following conditions are both true: `m` is a module other than the calling module, and the demand for <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag has failed. If the demand for <xref:System.Security.Permissions.SecurityPermission> succeeds, the operation is allowed.  \n  \n> [!NOTE]\n>  Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag. (See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.","nodes":[{"pos":[0,276],"content":"This constructor specifies method attributes <xref:System.Reflection.MethodAttributes?displayProperty=fullName> and <xref:System.Reflection.MethodAttributes?displayProperty=fullName>, and calling convention <xref:System.Reflection.CallingConventions?displayProperty=fullName>.","nodes":[{"content":"This constructor specifies method attributes <ph id=\"ph1\">&lt;xref:System.Reflection.MethodAttributes?displayProperty=fullName&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Reflection.MethodAttributes?displayProperty=fullName&gt;</ph>, and calling convention <ph id=\"ph3\">&lt;xref:System.Reflection.CallingConventions?displayProperty=fullName&gt;</ph>.","pos":[0,276],"source":"This constructor specifies method attributes <xref:System.Reflection.MethodAttributes?displayProperty=fullName> and <xref:System.Reflection.MethodAttributes?displayProperty=fullName>, and calling convention <xref:System.Reflection.CallingConventions?displayProperty=fullName>."}]},{"pos":[283,653],"content":"The dynamic method created with this constructor has access to public and `internal` (`Friend` in Visual Basic) members of all the types in contained module `m`. Skipping the JIT compiler's visibility checks allows the dynamic method to access private and protected members of all other types as well. This is useful, for example, when writing code to serialize objects.","nodes":[{"content":"The dynamic method created with this constructor has access to public and <ph id=\"ph1\">`internal`</ph> (<ph id=\"ph2\">`Friend`</ph> in Visual Basic) members of all the types in contained module <ph id=\"ph3\">`m`</ph>.","pos":[0,161],"source":"The dynamic method created with this constructor has access to public and `internal` (`Friend` in Visual Basic) members of all the types in contained module `m`."},{"content":"Skipping the JIT compiler's visibility checks allows the dynamic method to access private and protected members of all other types as well.","pos":[162,301]},{"content":"This is useful, for example, when writing code to serialize objects.","pos":[302,370]}]},{"pos":[661,1259],"content":"[!NOTE]\n For backward compatibility, this constructor demands <xref:System.Security.Permissions.SecurityPermission> with the <xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName> flag if the following conditions are both true: `m` is a module other than the calling module, and the demand for <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag has failed. If the demand for <xref:System.Security.Permissions.SecurityPermission> succeeds, the operation is allowed.","leadings":["","> "],"nodes":[{"content":" For backward compatibility, this constructor demands <xref:System.Security.Permissions.SecurityPermission> with the <xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName> flag if the following conditions are both true: `m` is a module other than the calling module, and the demand for <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag has failed. If the demand for <xref:System.Security.Permissions.SecurityPermission> succeeds, the operation is allowed.","pos":[8,596],"nodes":[{"content":"For backward compatibility, this constructor demands <ph id=\"ph1\">&lt;xref:System.Security.Permissions.SecurityPermission&gt;</ph> with the <ph id=\"ph2\">&lt;xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName&gt;</ph> flag if the following conditions are both true: <ph id=\"ph3\">`m`</ph> is a module other than the calling module, and the demand for <ph id=\"ph4\">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> with the <ph id=\"ph5\">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName&gt;</ph> flag has failed.","pos":[1,480],"source":" For backward compatibility, this constructor demands <xref:System.Security.Permissions.SecurityPermission> with the <xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName> flag if the following conditions are both true: `m` is a module other than the calling module, and the demand for <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag has failed."},{"content":"If the demand for <ph id=\"ph1\">&lt;xref:System.Security.Permissions.SecurityPermission&gt;</ph> succeeds, the operation is allowed.","pos":[481,588],"source":" If the demand for <xref:System.Security.Permissions.SecurityPermission> succeeds, the operation is allowed."}]}]},{"pos":[1267,1796],"content":"[!NOTE]\n Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag. (See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.","leadings":["","> "],"nodes":[{"content":" Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag. (See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.","pos":[8,527],"nodes":[{"content":"Starting with the <ph id=\"ph1\">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>, this member no longer requires <ph id=\"ph2\">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> with the <ph id=\"ph3\">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName&gt;</ph> flag.","pos":[1,268],"source":" Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag."},{"content":"(See <bpt id=\"p1\">[</bpt>Security Issues in Reflection Emit<ept id=\"p1\">](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md)</ept>.) To use this functionality, your application should target the <ph id=\"ph1\">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> or later.","pos":[269,519],"source":" (See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later."}]}]}],"pos":[49178,50985],"yaml":true,"extradata":"MT"},{"content":"The name of the dynamic method. This can be a zero-length string, but it cannot be `null`.","nodes":[{"pos":[0,90],"content":"The name of the dynamic method. This can be a zero-length string, but it cannot be `null`.","nodes":[{"content":"The name of the dynamic method.","pos":[0,31]},{"content":"This can be a zero-length string, but it cannot be <ph id=\"ph1\">`null`</ph>.","pos":[32,90],"source":" This can be a zero-length string, but it cannot be `null`."}]}],"pos":[51209,51300],"yaml":true},{"content":"A <xref href=\"System.Type\"></xref> object that specifies the return type of the dynamic method, or `null` if the method has no return type.","nodes":[{"pos":[0,139],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> object that specifies the return type of the dynamic method, or <ph id=\"ph2\">`null`</ph> if the method has no return type.","source":"A <xref href=\"System.Type\"></xref> object that specifies the return type of the dynamic method, or `null` if the method has no return type."}],"pos":[51364,51504],"yaml":true},{"content":"An array of <xref href=\"System.Type\"></xref> objects specifying the types of the parameters of the dynamic method, or `null` if the method has no parameters.","nodes":[{"pos":[0,157],"content":"An array of <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> objects specifying the types of the parameters of the dynamic method, or <ph id=\"ph2\">`null`</ph> if the method has no parameters.","source":"An array of <xref href=\"System.Type\"></xref> objects specifying the types of the parameters of the dynamic method, or `null` if the method has no parameters."}],"pos":[51574,51732],"yaml":true},{"content":"A <xref href=\"System.Reflection.Module\"></xref> representing the module with which the dynamic method is to be logically associated.","nodes":[{"pos":[0,132],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Module\"&gt;&lt;/xref&gt;</ph> representing the module with which the dynamic method is to be logically associated.","source":"A <xref href=\"System.Reflection.Module\"></xref> representing the module with which the dynamic method is to be logically associated."}],"pos":[51800,51933],"yaml":true},{"content":"`true` to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method.","nodes":[{"pos":[0,101],"content":"<ph id=\"ph1\">`true`</ph> to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method.","source":"`true` to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method."}],"pos":[52004,52108],"yaml":true},{"content":"An element of <code>parameterTypes</code> is `null` or <xref href=\"System.Void\"></xref>.  \n  \n -or-  \n  \n <code>m</code> is a module that provides anonymous hosting for dynamic methods.","nodes":[{"pos":[0,88],"content":"An element of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">parameterTypes</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">`null`</ph> or <ph id=\"ph3\">&lt;xref href=\"System.Void\"&gt;&lt;/xref&gt;</ph>.","source":"An element of <code>parameterTypes</code> is `null` or <xref href=\"System.Void\"></xref>."},{"pos":[95,99],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[106,185],"content":"<ph id=\"ph1\">&lt;code&gt;m&lt;/code&gt;</ph> is a module that provides anonymous hosting for dynamic methods.","source":"<code>m</code> is a module that provides anonymous hosting for dynamic methods."}],"pos":[52272,52466],"yaml":true},{"content":"<code>name</code> is `null`.  \n  \n -or-  \n  \n <code>m</code> is `null`.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;name&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>name</code> is `null`."},{"pos":[35,39],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[46,71],"content":"<ph id=\"ph1\">&lt;code&gt;m&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>m</code> is `null`."}],"pos":[52568,52646],"yaml":true},{"content":"<code>returnType</code> is a type for which <xref href=\"System.Type.IsByRef\"></xref> returns `true`.","nodes":[{"pos":[0,100],"content":"<ph id=\"ph1\">&lt;code&gt;returnType&lt;/code&gt;</ph> is a type for which <ph id=\"ph2\">&lt;xref href=\"System.Type.IsByRef\"&gt;&lt;/xref&gt;</ph> returns <ph id=\"ph3\">`true`</ph>.","source":"<code>returnType</code> is a type for which <xref href=\"System.Type.IsByRef\"></xref> returns `true`."}],"pos":[52748,52849],"yaml":true},{"content":"Creates a dynamic method, specifying the method name, return type, parameter types, the type with which the dynamic method is logically associated, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.","nodes":[{"pos":[0,314],"content":"Creates a dynamic method, specifying the method name, return type, parameter types, the type with which the dynamic method is logically associated, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.","nodes":[{"content":"Creates a dynamic method, specifying the method name, return type, parameter types, the type with which the dynamic method is logically associated, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.","pos":[0,314]}]}],"pos":[54309,54624],"yaml":true},{"content":"The dynamic method created with this constructor has access to all members of the type `owner`, and to public and `internal` (`Friend` in Visual Basic) members of all the other types in the module that contains `owner`. Skipping the JIT compiler's visibility checks allows the dynamic method to access private and protected members of all other types as well. This is useful, for example, when writing code to serialize objects.  \n  \n This constructor specifies method attributes <xref:System.Reflection.MethodAttributes?displayProperty=fullName> and <xref:System.Reflection.MethodAttributes?displayProperty=fullName>, and calling convention <xref:System.Reflection.CallingConventions?displayProperty=fullName>.  \n  \n> [!NOTE]\n>  For backward compatibility, this constructor demands <xref:System.Security.Permissions.SecurityPermission> with the <xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName> flag if the following conditions are both true: `owner` is in a module other than the calling module, and the demand for <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag has failed. If the demand for <xref:System.Security.Permissions.SecurityPermission> succeeds, the operation is allowed.  \n  \n> [!NOTE]\n>  Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag. (See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.","nodes":[{"pos":[0,428],"content":"The dynamic method created with this constructor has access to all members of the type `owner`, and to public and `internal` (`Friend` in Visual Basic) members of all the other types in the module that contains `owner`. Skipping the JIT compiler's visibility checks allows the dynamic method to access private and protected members of all other types as well. This is useful, for example, when writing code to serialize objects.","nodes":[{"content":"The dynamic method created with this constructor has access to all members of the type <ph id=\"ph1\">`owner`</ph>, and to public and <ph id=\"ph2\">`internal`</ph> (<ph id=\"ph3\">`Friend`</ph> in Visual Basic) members of all the other types in the module that contains <ph id=\"ph4\">`owner`</ph>.","pos":[0,219],"source":"The dynamic method created with this constructor has access to all members of the type `owner`, and to public and `internal` (`Friend` in Visual Basic) members of all the other types in the module that contains `owner`."},{"content":"Skipping the JIT compiler's visibility checks allows the dynamic method to access private and protected members of all other types as well.","pos":[220,359]},{"content":"This is useful, for example, when writing code to serialize objects.","pos":[360,428]}]},{"pos":[435,711],"content":"This constructor specifies method attributes <xref:System.Reflection.MethodAttributes?displayProperty=fullName> and <xref:System.Reflection.MethodAttributes?displayProperty=fullName>, and calling convention <xref:System.Reflection.CallingConventions?displayProperty=fullName>.","nodes":[{"content":"This constructor specifies method attributes <ph id=\"ph1\">&lt;xref:System.Reflection.MethodAttributes?displayProperty=fullName&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Reflection.MethodAttributes?displayProperty=fullName&gt;</ph>, and calling convention <ph id=\"ph3\">&lt;xref:System.Reflection.CallingConventions?displayProperty=fullName&gt;</ph>.","pos":[0,276],"source":"This constructor specifies method attributes <xref:System.Reflection.MethodAttributes?displayProperty=fullName> and <xref:System.Reflection.MethodAttributes?displayProperty=fullName>, and calling convention <xref:System.Reflection.CallingConventions?displayProperty=fullName>."}]},{"pos":[719,1324],"content":"[!NOTE]\n For backward compatibility, this constructor demands <xref:System.Security.Permissions.SecurityPermission> with the <xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName> flag if the following conditions are both true: `owner` is in a module other than the calling module, and the demand for <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag has failed. If the demand for <xref:System.Security.Permissions.SecurityPermission> succeeds, the operation is allowed.","leadings":["","> "],"nodes":[{"content":" For backward compatibility, this constructor demands <xref:System.Security.Permissions.SecurityPermission> with the <xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName> flag if the following conditions are both true: `owner` is in a module other than the calling module, and the demand for <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag has failed. If the demand for <xref:System.Security.Permissions.SecurityPermission> succeeds, the operation is allowed.","pos":[8,603],"nodes":[{"content":"For backward compatibility, this constructor demands <ph id=\"ph1\">&lt;xref:System.Security.Permissions.SecurityPermission&gt;</ph> with the <ph id=\"ph2\">&lt;xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName&gt;</ph> flag if the following conditions are both true: <ph id=\"ph3\">`owner`</ph> is in a module other than the calling module, and the demand for <ph id=\"ph4\">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> with the <ph id=\"ph5\">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName&gt;</ph> flag has failed.","pos":[1,487],"source":" For backward compatibility, this constructor demands <xref:System.Security.Permissions.SecurityPermission> with the <xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName> flag if the following conditions are both true: `owner` is in a module other than the calling module, and the demand for <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag has failed."},{"content":"If the demand for <ph id=\"ph1\">&lt;xref:System.Security.Permissions.SecurityPermission&gt;</ph> succeeds, the operation is allowed.","pos":[488,595],"source":" If the demand for <xref:System.Security.Permissions.SecurityPermission> succeeds, the operation is allowed."}]}]},{"pos":[1332,1861],"content":"[!NOTE]\n Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag. (See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.","leadings":["","> "],"nodes":[{"content":" Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag. (See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.","pos":[8,527],"nodes":[{"content":"Starting with the <ph id=\"ph1\">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>, this member no longer requires <ph id=\"ph2\">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> with the <ph id=\"ph3\">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName&gt;</ph> flag.","pos":[1,268],"source":" Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag."},{"content":"(See <bpt id=\"p1\">[</bpt>Security Issues in Reflection Emit<ept id=\"p1\">](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md)</ept>.) To use this functionality, your application should target the <ph id=\"ph1\">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> or later.","pos":[269,519],"source":" (See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later."}]}]}],"pos":[54635,56507],"yaml":true,"extradata":"MT"},{"content":"The name of the dynamic method. This can be a zero-length string, but it cannot be `null`.","nodes":[{"pos":[0,90],"content":"The name of the dynamic method. This can be a zero-length string, but it cannot be `null`.","nodes":[{"content":"The name of the dynamic method.","pos":[0,31]},{"content":"This can be a zero-length string, but it cannot be <ph id=\"ph1\">`null`</ph>.","pos":[32,90],"source":" This can be a zero-length string, but it cannot be `null`."}]}],"pos":[56715,56806],"yaml":true},{"content":"A <xref href=\"System.Type\"></xref> object that specifies the return type of the dynamic method, or `null` if the method has no return type.","nodes":[{"pos":[0,139],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> object that specifies the return type of the dynamic method, or <ph id=\"ph2\">`null`</ph> if the method has no return type.","source":"A <xref href=\"System.Type\"></xref> object that specifies the return type of the dynamic method, or `null` if the method has no return type."}],"pos":[56870,57010],"yaml":true},{"content":"An array of <xref href=\"System.Type\"></xref> objects specifying the types of the parameters of the dynamic method, or `null` if the method has no parameters.","nodes":[{"pos":[0,157],"content":"An array of <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> objects specifying the types of the parameters of the dynamic method, or <ph id=\"ph2\">`null`</ph> if the method has no parameters.","source":"An array of <xref href=\"System.Type\"></xref> objects specifying the types of the parameters of the dynamic method, or `null` if the method has no parameters."}],"pos":[57080,57238],"yaml":true},{"content":"A <xref href=\"System.Type\"></xref> with which the dynamic method is logically associated. The dynamic method has access to all members of the type.","nodes":[{"pos":[0,147],"content":"A <xref href=\"System.Type\"></xref> with which the dynamic method is logically associated. The dynamic method has access to all members of the type.","nodes":[{"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> with which the dynamic method is logically associated.","pos":[0,89],"source":"A <xref href=\"System.Type\"></xref> with which the dynamic method is logically associated."},{"content":"The dynamic method has access to all members of the type.","pos":[90,147]}]}],"pos":[57297,57445],"yaml":true},{"content":"`true` to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method; otherwise, `false`.","nodes":[{"pos":[0,121],"content":"<ph id=\"ph1\">`true`</ph> to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method; otherwise, `false`."}],"pos":[57516,57640],"yaml":true},{"content":"An element of <code>parameterTypes</code> is `null` or <xref href=\"System.Void\"></xref>.  \n  \n -or-  \n  \n <code>owner</code> is an interface, an array, an open generic type, or a type parameter of a generic type or method.","nodes":[{"pos":[0,88],"content":"An element of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">parameterTypes</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">`null`</ph> or <ph id=\"ph3\">&lt;xref href=\"System.Void\"&gt;&lt;/xref&gt;</ph>.","source":"An element of <code>parameterTypes</code> is `null` or <xref href=\"System.Void\"></xref>."},{"pos":[95,99],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[106,222],"content":"<ph id=\"ph1\">&lt;code&gt;owner&lt;/code&gt;</ph> is an interface, an array, an open generic type, or a type parameter of a generic type or method.","source":"<code>owner</code> is an interface, an array, an open generic type, or a type parameter of a generic type or method."}],"pos":[57804,58035],"yaml":true},{"content":"<code>name</code> is `null`.  \n  \n -or-  \n  \n <code>owner</code> is `null`.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;name&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>name</code> is `null`."},{"pos":[35,39],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[46,75],"content":"<ph id=\"ph1\">&lt;code&gt;owner&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>owner</code> is `null`."}],"pos":[58137,58219],"yaml":true},{"content":"<code>returnType</code> is `null`, or is a type for which <xref href=\"System.Type.IsByRef\"></xref> returns `true`.","nodes":[{"pos":[0,114],"content":"<ph id=\"ph1\">&lt;code&gt;returnType&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>, or is a type for which <ph id=\"ph3\">&lt;xref href=\"System.Type.IsByRef\"&gt;&lt;/xref&gt;</ph> returns <ph id=\"ph4\">`true`</ph>.","source":"<code>returnType</code> is `null`, or is a type for which <xref href=\"System.Type.IsByRef\"></xref> returns `true`."}],"pos":[58321,58436],"yaml":true},{"content":"Creates a dynamic method that is global to a module, specifying the method name, attributes, calling convention, return type, parameter types, module, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.","nodes":[{"pos":[0,317],"content":"Creates a dynamic method that is global to a module, specifying the method name, attributes, calling convention, return type, parameter types, module, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.","nodes":[{"content":"Creates a dynamic method that is global to a module, specifying the method name, attributes, calling convention, return type, parameter types, module, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.","pos":[0,317]}]}],"pos":[60271,60589],"yaml":true},{"content":"The dynamic method created with this constructor has access to public and `internal` (`Friend` in Visual Basic) members of all the public and internal types contained in module `m`.  \n  \n Skipping the JIT compiler's visibility checks allows the dynamic method to access private and protected members of all other types in the module and in all other assemblies as well. This is useful, for example, when writing code to serialize objects.  \n  \n> [!NOTE]\n>  For backward compatibility, this constructor demands <xref:System.Security.Permissions.SecurityPermission> with the <xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName> flag if the following conditions are both true: `m` is a module other than the calling module, and the demand for <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag has failed. If the demand for <xref:System.Security.Permissions.SecurityPermission> succeeds, the operation is allowed.  \n  \n> [!NOTE]\n>  Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag. (See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.","nodes":[{"pos":[0,181],"content":"The dynamic method created with this constructor has access to public and <ph id=\"ph1\">`internal`</ph> (<ph id=\"ph2\">`Friend`</ph> in Visual Basic) members of all the public and internal types contained in module <ph id=\"ph3\">`m`</ph>.","source":"The dynamic method created with this constructor has access to public and `internal` (`Friend` in Visual Basic) members of all the public and internal types contained in module `m`."},{"pos":[188,438],"content":"Skipping the JIT compiler's visibility checks allows the dynamic method to access private and protected members of all other types in the module and in all other assemblies as well. This is useful, for example, when writing code to serialize objects.","nodes":[{"content":"Skipping the JIT compiler's visibility checks allows the dynamic method to access private and protected members of all other types in the module and in all other assemblies as well. This is useful, for example, when writing code to serialize objects.","pos":[0,250],"nodes":[{"content":"Skipping the JIT compiler's visibility checks allows the dynamic method to access private and protected members of all other types in the module and in all other assemblies as well.","pos":[0,181]},{"content":"This is useful, for example, when writing code to serialize objects.","pos":[182,250]}]}]},{"pos":[446,1044],"content":"[!NOTE]\n For backward compatibility, this constructor demands <xref:System.Security.Permissions.SecurityPermission> with the <xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName> flag if the following conditions are both true: `m` is a module other than the calling module, and the demand for <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag has failed. If the demand for <xref:System.Security.Permissions.SecurityPermission> succeeds, the operation is allowed.","leadings":["","> "],"nodes":[{"content":" For backward compatibility, this constructor demands <xref:System.Security.Permissions.SecurityPermission> with the <xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName> flag if the following conditions are both true: `m` is a module other than the calling module, and the demand for <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag has failed. If the demand for <xref:System.Security.Permissions.SecurityPermission> succeeds, the operation is allowed.","pos":[8,596],"nodes":[{"content":"For backward compatibility, this constructor demands <ph id=\"ph1\">&lt;xref:System.Security.Permissions.SecurityPermission&gt;</ph> with the <ph id=\"ph2\">&lt;xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName&gt;</ph> flag if the following conditions are both true: <ph id=\"ph3\">`m`</ph> is a module other than the calling module, and the demand for <ph id=\"ph4\">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> with the <ph id=\"ph5\">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName&gt;</ph> flag has failed.","pos":[1,480],"source":" For backward compatibility, this constructor demands <xref:System.Security.Permissions.SecurityPermission> with the <xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName> flag if the following conditions are both true: `m` is a module other than the calling module, and the demand for <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag has failed."},{"content":"If the demand for <ph id=\"ph1\">&lt;xref:System.Security.Permissions.SecurityPermission&gt;</ph> succeeds, the operation is allowed.","pos":[481,588],"source":" If the demand for <xref:System.Security.Permissions.SecurityPermission> succeeds, the operation is allowed."}]}]},{"pos":[1052,1581],"content":"[!NOTE]\n Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag. (See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.","leadings":["","> "],"nodes":[{"content":" Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag. (See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.","pos":[8,527],"nodes":[{"content":"Starting with the <ph id=\"ph1\">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>, this member no longer requires <ph id=\"ph2\">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> with the <ph id=\"ph3\">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName&gt;</ph> flag.","pos":[1,268],"source":" Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag."},{"content":"(See <bpt id=\"p1\">[</bpt>Security Issues in Reflection Emit<ept id=\"p1\">](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md)</ept>.) To use this functionality, your application should target the <ph id=\"ph1\">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> or later.","pos":[269,519],"source":" (See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later."}]}]}],"pos":[60600,62192],"yaml":true,"extradata":"MT"},{"content":"The name of the dynamic method. This can be a zero-length string, but it cannot be `null`.","nodes":[{"pos":[0,90],"content":"The name of the dynamic method. This can be a zero-length string, but it cannot be `null`.","nodes":[{"content":"The name of the dynamic method.","pos":[0,31]},{"content":"This can be a zero-length string, but it cannot be <ph id=\"ph1\">`null`</ph>.","pos":[32,90],"source":" This can be a zero-length string, but it cannot be `null`."}]}],"pos":[62519,62610],"yaml":true},{"content":"A bitwise combination of <xref href=\"System.Reflection.MethodAttributes\"></xref> values that specifies the attributes of the dynamic method. The only combination allowed is <xref href=\"System.Reflection.MethodAttributes.Public\"></xref> and <xref href=\"System.Reflection.MethodAttributes.Static\"></xref>.","nodes":[{"pos":[0,303],"content":"A bitwise combination of <xref href=\"System.Reflection.MethodAttributes\"></xref> values that specifies the attributes of the dynamic method. The only combination allowed is <xref href=\"System.Reflection.MethodAttributes.Public\"></xref> and <xref href=\"System.Reflection.MethodAttributes.Static\"></xref>.","nodes":[{"content":"A bitwise combination of <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodAttributes\"&gt;&lt;/xref&gt;</ph> values that specifies the attributes of the dynamic method.","pos":[0,140],"source":"A bitwise combination of <xref href=\"System.Reflection.MethodAttributes\"></xref> values that specifies the attributes of the dynamic method."},{"content":"The only combination allowed is <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodAttributes.Public\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph2\">&lt;xref href=\"System.Reflection.MethodAttributes.Static\"&gt;&lt;/xref&gt;</ph>.","pos":[141,303],"source":" The only combination allowed is <xref href=\"System.Reflection.MethodAttributes.Public\"></xref> and <xref href=\"System.Reflection.MethodAttributes.Static\"></xref>."}]}],"pos":[62697,63001],"yaml":true},{"content":"The calling convention for the dynamic method. Must be <xref href=\"System.Reflection.CallingConventions.Standard\"></xref>.","nodes":[{"pos":[0,122],"content":"The calling convention for the dynamic method. Must be <xref href=\"System.Reflection.CallingConventions.Standard\"></xref>.","nodes":[{"content":"The calling convention for the dynamic method.","pos":[0,46]},{"content":"Must be <ph id=\"ph1\">&lt;xref href=\"System.Reflection.CallingConventions.Standard\"&gt;&lt;/xref&gt;</ph>.","pos":[47,122],"source":" Must be <xref href=\"System.Reflection.CallingConventions.Standard\"></xref>."}]}],"pos":[63097,63220],"yaml":true},{"content":"A <xref href=\"System.Type\"></xref> object that specifies the return type of the dynamic method, or `null` if the method has no return type.","nodes":[{"pos":[0,139],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> object that specifies the return type of the dynamic method, or <ph id=\"ph2\">`null`</ph> if the method has no return type.","source":"A <xref href=\"System.Type\"></xref> object that specifies the return type of the dynamic method, or `null` if the method has no return type."}],"pos":[63284,63424],"yaml":true},{"content":"An array of <xref href=\"System.Type\"></xref> objects specifying the types of the parameters of the dynamic method, or `null` if the method has no parameters.","nodes":[{"pos":[0,157],"content":"An array of <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> objects specifying the types of the parameters of the dynamic method, or <ph id=\"ph2\">`null`</ph> if the method has no parameters.","source":"An array of <xref href=\"System.Type\"></xref> objects specifying the types of the parameters of the dynamic method, or `null` if the method has no parameters."}],"pos":[63494,63652],"yaml":true},{"content":"`true` to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method; otherwise, `false`.","nodes":[{"pos":[0,121],"content":"<ph id=\"ph1\">`true`</ph> to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method; otherwise, `false`."}],"pos":[63794,63918],"yaml":true},{"content":"An element of <code>parameterTypes</code> is `null` or <xref href=\"System.Void\"></xref>.  \n  \n -or-  \n  \n <code>m</code> is a module that provides anonymous hosting for dynamic methods.","nodes":[{"pos":[0,88],"content":"An element of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">parameterTypes</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">`null`</ph> or <ph id=\"ph3\">&lt;xref href=\"System.Void\"&gt;&lt;/xref&gt;</ph>.","source":"An element of <code>parameterTypes</code> is `null` or <xref href=\"System.Void\"></xref>."},{"pos":[95,99],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[106,185],"content":"<ph id=\"ph1\">&lt;code&gt;m&lt;/code&gt;</ph> is a module that provides anonymous hosting for dynamic methods.","source":"<code>m</code> is a module that provides anonymous hosting for dynamic methods."}],"pos":[64082,64276],"yaml":true},{"content":"<code>name</code> is `null`.  \n  \n -or-  \n  \n <code>m</code> is `null`.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;name&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>name</code> is `null`."},{"pos":[35,39],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[46,71],"content":"<ph id=\"ph1\">&lt;code&gt;m&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>m</code> is `null`."}],"pos":[64378,64456],"yaml":true},{"content":"<code>attributes</code> is a combination of flags other than <xref href=\"System.Reflection.MethodAttributes.Public\"></xref> and <xref href=\"System.Reflection.MethodAttributes.Static\"></xref>.  \n  \n -or-  \n  \n <code>callingConvention</code> is not <xref href=\"System.Reflection.CallingConventions.Standard\"></xref>.  \n  \n -or-  \n  \n <code>returnType</code> is a type for which <xref href=\"System.Type.IsByRef\"></xref> returns `true`.","nodes":[{"pos":[0,191],"content":"<ph id=\"ph1\">&lt;code&gt;attributes&lt;/code&gt;</ph> is a combination of flags other than <ph id=\"ph2\">&lt;xref href=\"System.Reflection.MethodAttributes.Public\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph3\">&lt;xref href=\"System.Reflection.MethodAttributes.Static\"&gt;&lt;/xref&gt;</ph>.","source":"<code>attributes</code> is a combination of flags other than <xref href=\"System.Reflection.MethodAttributes.Public\"></xref> and <xref href=\"System.Reflection.MethodAttributes.Static\"></xref>."},{"pos":[198,202],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[209,314],"content":"<ph id=\"ph1\">&lt;code&gt;callingConvention&lt;/code&gt;</ph> is not <ph id=\"ph2\">&lt;xref href=\"System.Reflection.CallingConventions.Standard\"&gt;&lt;/xref&gt;</ph>.","source":"<code>callingConvention</code> is not <xref href=\"System.Reflection.CallingConventions.Standard\"></xref>."},{"pos":[321,325],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[332,432],"content":"<ph id=\"ph1\">&lt;code&gt;returnType&lt;/code&gt;</ph> is a type for which <ph id=\"ph2\">&lt;xref href=\"System.Type.IsByRef\"&gt;&lt;/xref&gt;</ph> returns <ph id=\"ph3\">`true`</ph>.","source":"<code>returnType</code> is a type for which <xref href=\"System.Type.IsByRef\"></xref> returns `true`."}],"pos":[64558,65009],"yaml":true},{"content":"Creates a dynamic method, specifying the method name, attributes, calling convention, return type, parameter types, the type with which the dynamic method is logically associated, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.","nodes":[{"pos":[0,346],"content":"Creates a dynamic method, specifying the method name, attributes, calling convention, return type, parameter types, the type with which the dynamic method is logically associated, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.","nodes":[{"content":"Creates a dynamic method, specifying the method name, attributes, calling convention, return type, parameter types, the type with which the dynamic method is logically associated, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.","pos":[0,346]}]}],"pos":[66799,67146],"yaml":true},{"content":"The dynamic method is global to the module that contains the type `owner`. It has access to all members of the type `owner`.  \n  \n The dynamic method created with this constructor has access to all members of the type `owner`, and to public and `internal` (`Friend` in Visual Basic) members of all the types contained in the module that contains `owner`. Skipping the JIT compiler's visibility checks allows the dynamic method to access private and protected members of all other types as well. This is useful, for example, when writing code to serialize objects.  \n  \n> [!NOTE]\n>  For backward compatibility, this constructor demands <xref:System.Security.Permissions.SecurityPermission> with the <xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName> flag if the following conditions are both true: `owner` is in a module other than the calling module, and the demand for <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag has failed. If the demand for <xref:System.Security.Permissions.SecurityPermission> succeeds, the operation is allowed.  \n  \n> [!NOTE]\n>  Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag. (See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.","nodes":[{"pos":[0,124],"content":"The dynamic method is global to the module that contains the type `owner`. It has access to all members of the type `owner`.","nodes":[{"content":"The dynamic method is global to the module that contains the type <ph id=\"ph1\">`owner`</ph>.","pos":[0,74],"source":"The dynamic method is global to the module that contains the type `owner`."},{"content":"It has access to all members of the type <ph id=\"ph1\">`owner`</ph>.","pos":[75,124],"source":" It has access to all members of the type `owner`."}]},{"pos":[131,563],"content":"The dynamic method created with this constructor has access to all members of the type `owner`, and to public and `internal` (`Friend` in Visual Basic) members of all the types contained in the module that contains `owner`. Skipping the JIT compiler's visibility checks allows the dynamic method to access private and protected members of all other types as well. This is useful, for example, when writing code to serialize objects.","nodes":[{"content":"The dynamic method created with this constructor has access to all members of the type <ph id=\"ph1\">`owner`</ph>, and to public and <ph id=\"ph2\">`internal`</ph> (<ph id=\"ph3\">`Friend`</ph> in Visual Basic) members of all the types contained in the module that contains <ph id=\"ph4\">`owner`</ph>.","pos":[0,223],"source":"The dynamic method created with this constructor has access to all members of the type `owner`, and to public and `internal` (`Friend` in Visual Basic) members of all the types contained in the module that contains `owner`."},{"content":"Skipping the JIT compiler's visibility checks allows the dynamic method to access private and protected members of all other types as well.","pos":[224,363]},{"content":"This is useful, for example, when writing code to serialize objects.","pos":[364,432]}]},{"pos":[571,1176],"content":"[!NOTE]\n For backward compatibility, this constructor demands <xref:System.Security.Permissions.SecurityPermission> with the <xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName> flag if the following conditions are both true: `owner` is in a module other than the calling module, and the demand for <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag has failed. If the demand for <xref:System.Security.Permissions.SecurityPermission> succeeds, the operation is allowed.","leadings":["","> "],"nodes":[{"content":" For backward compatibility, this constructor demands <xref:System.Security.Permissions.SecurityPermission> with the <xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName> flag if the following conditions are both true: `owner` is in a module other than the calling module, and the demand for <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag has failed. If the demand for <xref:System.Security.Permissions.SecurityPermission> succeeds, the operation is allowed.","pos":[8,603],"nodes":[{"content":"For backward compatibility, this constructor demands <ph id=\"ph1\">&lt;xref:System.Security.Permissions.SecurityPermission&gt;</ph> with the <ph id=\"ph2\">&lt;xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName&gt;</ph> flag if the following conditions are both true: <ph id=\"ph3\">`owner`</ph> is in a module other than the calling module, and the demand for <ph id=\"ph4\">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> with the <ph id=\"ph5\">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName&gt;</ph> flag has failed.","pos":[1,487],"source":" For backward compatibility, this constructor demands <xref:System.Security.Permissions.SecurityPermission> with the <xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName> flag if the following conditions are both true: `owner` is in a module other than the calling module, and the demand for <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag has failed."},{"content":"If the demand for <ph id=\"ph1\">&lt;xref:System.Security.Permissions.SecurityPermission&gt;</ph> succeeds, the operation is allowed.","pos":[488,595],"source":" If the demand for <xref:System.Security.Permissions.SecurityPermission> succeeds, the operation is allowed."}]}]},{"pos":[1184,1713],"content":"[!NOTE]\n Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag. (See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.","leadings":["","> "],"nodes":[{"content":" Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag. (See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.","pos":[8,527],"nodes":[{"content":"Starting with the <ph id=\"ph1\">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>, this member no longer requires <ph id=\"ph2\">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> with the <ph id=\"ph3\">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName&gt;</ph> flag.","pos":[1,268],"source":" Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag."},{"content":"(See <bpt id=\"p1\">[</bpt>Security Issues in Reflection Emit<ept id=\"p1\">](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md)</ept>.) To use this functionality, your application should target the <ph id=\"ph1\">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> or later.","pos":[269,519],"source":" (See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later."}]}]}],"pos":[67157,68881],"yaml":true,"extradata":"MT"},{"content":"The name of the dynamic method. This can be a zero-length string, but it cannot be `null`.","nodes":[{"pos":[0,90],"content":"The name of the dynamic method. This can be a zero-length string, but it cannot be `null`.","nodes":[{"content":"The name of the dynamic method.","pos":[0,31]},{"content":"This can be a zero-length string, but it cannot be <ph id=\"ph1\">`null`</ph>.","pos":[32,90],"source":" This can be a zero-length string, but it cannot be `null`."}]}],"pos":[69192,69283],"yaml":true},{"content":"A bitwise combination of <xref href=\"System.Reflection.MethodAttributes\"></xref> values that specifies the attributes of the dynamic method. The only combination allowed is <xref href=\"System.Reflection.MethodAttributes.Public\"></xref> and <xref href=\"System.Reflection.MethodAttributes.Static\"></xref>.","nodes":[{"pos":[0,303],"content":"A bitwise combination of <xref href=\"System.Reflection.MethodAttributes\"></xref> values that specifies the attributes of the dynamic method. The only combination allowed is <xref href=\"System.Reflection.MethodAttributes.Public\"></xref> and <xref href=\"System.Reflection.MethodAttributes.Static\"></xref>.","nodes":[{"content":"A bitwise combination of <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodAttributes\"&gt;&lt;/xref&gt;</ph> values that specifies the attributes of the dynamic method.","pos":[0,140],"source":"A bitwise combination of <xref href=\"System.Reflection.MethodAttributes\"></xref> values that specifies the attributes of the dynamic method."},{"content":"The only combination allowed is <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodAttributes.Public\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph2\">&lt;xref href=\"System.Reflection.MethodAttributes.Static\"&gt;&lt;/xref&gt;</ph>.","pos":[141,303],"source":" The only combination allowed is <xref href=\"System.Reflection.MethodAttributes.Public\"></xref> and <xref href=\"System.Reflection.MethodAttributes.Static\"></xref>."}]}],"pos":[69370,69674],"yaml":true},{"content":"The calling convention for the dynamic method. Must be <xref href=\"System.Reflection.CallingConventions.Standard\"></xref>.","nodes":[{"pos":[0,122],"content":"The calling convention for the dynamic method. Must be <xref href=\"System.Reflection.CallingConventions.Standard\"></xref>.","nodes":[{"content":"The calling convention for the dynamic method.","pos":[0,46]},{"content":"Must be <ph id=\"ph1\">&lt;xref href=\"System.Reflection.CallingConventions.Standard\"&gt;&lt;/xref&gt;</ph>.","pos":[47,122],"source":" Must be <xref href=\"System.Reflection.CallingConventions.Standard\"></xref>."}]}],"pos":[69770,69893],"yaml":true},{"content":"A <xref href=\"System.Type\"></xref> object that specifies the return type of the dynamic method, or `null` if the method has no return type.","nodes":[{"pos":[0,139],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> object that specifies the return type of the dynamic method, or <ph id=\"ph2\">`null`</ph> if the method has no return type.","source":"A <xref href=\"System.Type\"></xref> object that specifies the return type of the dynamic method, or `null` if the method has no return type."}],"pos":[69957,70097],"yaml":true},{"content":"An array of <xref href=\"System.Type\"></xref> objects specifying the types of the parameters of the dynamic method, or `null` if the method has no parameters.","nodes":[{"pos":[0,157],"content":"An array of <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> objects specifying the types of the parameters of the dynamic method, or <ph id=\"ph2\">`null`</ph> if the method has no parameters.","source":"An array of <xref href=\"System.Type\"></xref> objects specifying the types of the parameters of the dynamic method, or `null` if the method has no parameters."}],"pos":[70167,70325],"yaml":true},{"content":"A <xref href=\"System.Type\"></xref> with which the dynamic method is logically associated. The dynamic method has access to all members of the type.","nodes":[{"pos":[0,147],"content":"A <xref href=\"System.Type\"></xref> with which the dynamic method is logically associated. The dynamic method has access to all members of the type.","nodes":[{"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> with which the dynamic method is logically associated.","pos":[0,89],"source":"A <xref href=\"System.Type\"></xref> with which the dynamic method is logically associated."},{"content":"The dynamic method has access to all members of the type.","pos":[90,147]}]}],"pos":[70384,70532],"yaml":true},{"content":"`true` to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method; otherwise, `false`.","nodes":[{"pos":[0,121],"content":"<ph id=\"ph1\">`true`</ph> to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method; otherwise, `false`."}],"pos":[70603,70727],"yaml":true},{"content":"An element of <code>parameterTypes</code> is `null` or <xref href=\"System.Void\"></xref>.  \n  \n -or-  \n  \n <code>owner</code> is an interface, an array, an open generic type, or a type parameter of a generic type or method.","nodes":[{"pos":[0,88],"content":"An element of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">parameterTypes</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">`null`</ph> or <ph id=\"ph3\">&lt;xref href=\"System.Void\"&gt;&lt;/xref&gt;</ph>.","source":"An element of <code>parameterTypes</code> is `null` or <xref href=\"System.Void\"></xref>."},{"pos":[95,99],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[106,222],"content":"<ph id=\"ph1\">&lt;code&gt;owner&lt;/code&gt;</ph> is an interface, an array, an open generic type, or a type parameter of a generic type or method.","source":"<code>owner</code> is an interface, an array, an open generic type, or a type parameter of a generic type or method."}],"pos":[70891,71122],"yaml":true},{"content":"<code>name</code> is `null`.  \n  \n -or-  \n  \n <code>owner</code> is `null`.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;name&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>name</code> is `null`."},{"pos":[35,39],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[46,75],"content":"<ph id=\"ph1\">&lt;code&gt;owner&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>owner</code> is `null`."}],"pos":[71224,71306],"yaml":true},{"content":"<code>attributes</code> is a combination of flags other than <xref href=\"System.Reflection.MethodAttributes.Public\"></xref> and <xref href=\"System.Reflection.MethodAttributes.Static\"></xref>.  \n  \n -or-  \n  \n <code>callingConvention</code> is not <xref href=\"System.Reflection.CallingConventions.Standard\"></xref>.  \n  \n -or-  \n  \n <code>returnType</code> is a type for which <xref href=\"System.Type.IsByRef\"></xref> returns `true`.","nodes":[{"pos":[0,191],"content":"<ph id=\"ph1\">&lt;code&gt;attributes&lt;/code&gt;</ph> is a combination of flags other than <ph id=\"ph2\">&lt;xref href=\"System.Reflection.MethodAttributes.Public\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph3\">&lt;xref href=\"System.Reflection.MethodAttributes.Static\"&gt;&lt;/xref&gt;</ph>.","source":"<code>attributes</code> is a combination of flags other than <xref href=\"System.Reflection.MethodAttributes.Public\"></xref> and <xref href=\"System.Reflection.MethodAttributes.Static\"></xref>."},{"pos":[198,202],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[209,314],"content":"<ph id=\"ph1\">&lt;code&gt;callingConvention&lt;/code&gt;</ph> is not <ph id=\"ph2\">&lt;xref href=\"System.Reflection.CallingConventions.Standard\"&gt;&lt;/xref&gt;</ph>.","source":"<code>callingConvention</code> is not <xref href=\"System.Reflection.CallingConventions.Standard\"></xref>."},{"pos":[321,325],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[332,432],"content":"<ph id=\"ph1\">&lt;code&gt;returnType&lt;/code&gt;</ph> is a type for which <ph id=\"ph2\">&lt;xref href=\"System.Type.IsByRef\"&gt;&lt;/xref&gt;</ph> returns <ph id=\"ph3\">`true`</ph>.","source":"<code>returnType</code> is a type for which <xref href=\"System.Type.IsByRef\"></xref> returns `true`."}],"pos":[71408,71859],"yaml":true},{"content":"Gets the attributes specified when the dynamic method was created.","nodes":[{"pos":[0,66],"content":"Gets the attributes specified when the dynamic method was created.","nodes":[{"content":"Gets the attributes specified when the dynamic method was created.","pos":[0,66]}]}],"pos":[73005,73072],"yaml":true},{"content":"Currently, the method attributes for a dynamic method are always <xref:System.Reflection.MethodAttributes.Public> and <xref:System.Reflection.MethodAttributes.Static>.","nodes":[{"pos":[0,167],"content":"Currently, the method attributes for a dynamic method are always <xref:System.Reflection.MethodAttributes.Public> and <xref:System.Reflection.MethodAttributes.Static>.","nodes":[{"content":"Currently, the method attributes for a dynamic method are always <ph id=\"ph1\">&lt;xref:System.Reflection.MethodAttributes.Public&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Reflection.MethodAttributes.Static&gt;</ph>.","pos":[0,167],"source":"Currently, the method attributes for a dynamic method are always <xref:System.Reflection.MethodAttributes.Public> and <xref:System.Reflection.MethodAttributes.Static>."}]}],"pos":[73083,73251],"yaml":true,"extradata":"MT"},{"content":"A bitwise combination of the <xref href=\"System.Reflection.MethodAttributes\"></xref> values representing the attributes for the method.","nodes":[{"pos":[0,135],"content":"A bitwise combination of the <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodAttributes\"&gt;&lt;/xref&gt;</ph> values representing the attributes for the method.","source":"A bitwise combination of the <xref href=\"System.Reflection.MethodAttributes\"></xref> values representing the attributes for the method."}],"pos":[74050,74186],"yaml":true},{"content":"Gets the calling convention specified when the dynamic method was created.","nodes":[{"pos":[0,74],"content":"Gets the calling convention specified when the dynamic method was created.","nodes":[{"content":"Gets the calling convention specified when the dynamic method was created.","pos":[0,74]}]}],"pos":[75452,75527],"yaml":true},{"content":"Currently, the calling convention for a dynamic method is always <xref:System.Reflection.CallingConventions.Standard>.","nodes":[{"pos":[0,118],"content":"Currently, the calling convention for a dynamic method is always <xref:System.Reflection.CallingConventions.Standard>.","nodes":[{"content":"Currently, the calling convention for a dynamic method is always <ph id=\"ph1\">&lt;xref:System.Reflection.CallingConventions.Standard&gt;</ph>.","pos":[0,118],"source":"Currently, the calling convention for a dynamic method is always <xref:System.Reflection.CallingConventions.Standard>."}]}],"pos":[75538,75657],"yaml":true,"extradata":"MT"},{"content":"One of the <xref href=\"System.Reflection.CallingConventions\"></xref> values that indicates the calling convention of the method.","nodes":[{"pos":[0,128],"content":"One of the <ph id=\"ph1\">&lt;xref href=\"System.Reflection.CallingConventions\"&gt;&lt;/xref&gt;</ph> values that indicates the calling convention of the method.","source":"One of the <xref href=\"System.Reflection.CallingConventions\"></xref> values that indicates the calling convention of the method."}],"pos":[76468,76597],"yaml":true},{"content":"Completes the dynamic method and creates a delegate that can be used to execute it.","nodes":[{"pos":[0,83],"content":"Completes the dynamic method and creates a delegate that can be used to execute it.","nodes":[{"content":"Completes the dynamic method and creates a delegate that can be used to execute it.","pos":[0,83]}]}],"pos":[77907,77991],"yaml":true},{"content":"Calling the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> method or the <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method completes the dynamic method. Any further attempt to alter the dynamic method, such as modifying parameter definitions or emitting more Microsoft intermediate language (MSIL), is ignored; no exception is thrown.  \n  \n To create a method body for a dynamic method when you have your own MSIL generator, call the <xref:System.Reflection.Emit.DynamicMethod.GetDynamicILInfo%2A> method to obtain a <xref:System.Reflection.Emit.DynamicILInfo> object. If you do not have your own MSIL generator, call the <xref:System.Reflection.Emit.DynamicMethod.GetILGenerator%2A> method to obtain an <xref:System.Reflection.Emit.ILGenerator> object that can be used to generate the method body.","nodes":[{"pos":[0,360],"content":"Calling the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> method or the <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method completes the dynamic method. Any further attempt to alter the dynamic method, such as modifying parameter definitions or emitting more Microsoft intermediate language (MSIL), is ignored; no exception is thrown.","nodes":[{"content":"Calling the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> method or the <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method completes the dynamic method. Any further attempt to alter the dynamic method, such as modifying parameter definitions or emitting more Microsoft intermediate language (MSIL), is ignored; no exception is thrown.","pos":[0,360],"nodes":[{"content":"Calling the <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A&gt;</ph> method or the <ph id=\"ph2\">&lt;xref:System.Reflection.Emit.DynamicMethod.Invoke%2A&gt;</ph> method completes the dynamic method.","pos":[0,178],"source":"Calling the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> method or the <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method completes the dynamic method."},{"content":"Any further attempt to alter the dynamic method, such as modifying parameter definitions or emitting more Microsoft intermediate language (MSIL), is ignored; no exception is thrown.","pos":[179,360]}]}]},{"pos":[367,824],"content":"To create a method body for a dynamic method when you have your own MSIL generator, call the <xref:System.Reflection.Emit.DynamicMethod.GetDynamicILInfo%2A> method to obtain a <xref:System.Reflection.Emit.DynamicILInfo> object. If you do not have your own MSIL generator, call the <xref:System.Reflection.Emit.DynamicMethod.GetILGenerator%2A> method to obtain an <xref:System.Reflection.Emit.ILGenerator> object that can be used to generate the method body.","nodes":[{"content":"To create a method body for a dynamic method when you have your own MSIL generator, call the <xref:System.Reflection.Emit.DynamicMethod.GetDynamicILInfo%2A> method to obtain a <xref:System.Reflection.Emit.DynamicILInfo> object. If you do not have your own MSIL generator, call the <xref:System.Reflection.Emit.DynamicMethod.GetILGenerator%2A> method to obtain an <xref:System.Reflection.Emit.ILGenerator> object that can be used to generate the method body.","pos":[0,457],"nodes":[{"content":"To create a method body for a dynamic method when you have your own MSIL generator, call the <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.DynamicMethod.GetDynamicILInfo%2A&gt;</ph> method to obtain a <ph id=\"ph2\">&lt;xref:System.Reflection.Emit.DynamicILInfo&gt;</ph> object.","pos":[0,227],"source":"To create a method body for a dynamic method when you have your own MSIL generator, call the <xref:System.Reflection.Emit.DynamicMethod.GetDynamicILInfo%2A> method to obtain a <xref:System.Reflection.Emit.DynamicILInfo> object."},{"content":"If you do not have your own MSIL generator, call the <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.DynamicMethod.GetILGenerator%2A&gt;</ph> method to obtain an <ph id=\"ph2\">&lt;xref:System.Reflection.Emit.ILGenerator&gt;</ph> object that can be used to generate the method body.","pos":[228,457],"source":" If you do not have your own MSIL generator, call the <xref:System.Reflection.Emit.DynamicMethod.GetILGenerator%2A> method to obtain an <xref:System.Reflection.Emit.ILGenerator> object that can be used to generate the method body."}]}]}],"pos":[78002,78831],"yaml":true,"extradata":"MT"},{"content":"A delegate type whose signature matches that of the dynamic method.","nodes":[{"pos":[0,67],"content":"A delegate type whose signature matches that of the dynamic method.","nodes":[{"content":"A delegate type whose signature matches that of the dynamic method.","pos":[0,67]}]}],"pos":[79971,80039],"yaml":true},{"content":"A delegate of the specified type, which can be used to execute the dynamic method.","nodes":[{"pos":[0,82],"content":"A delegate of the specified type, which can be used to execute the dynamic method.","nodes":[{"content":"A delegate of the specified type, which can be used to execute the dynamic method.","pos":[0,82]}]}],"pos":[80098,80181],"yaml":true},{"content":"The dynamic method has no method body.","nodes":[{"pos":[0,38],"content":"The dynamic method has no method body.","nodes":[{"content":"The dynamic method has no method body.","pos":[0,38]}]}],"pos":[80370,80409],"yaml":true},{"content":"<code>delegateType</code> has the wrong number of parameters or the wrong parameter types.","nodes":[{"pos":[0,90],"content":"<ph id=\"ph1\">&lt;code&gt;delegateType&lt;/code&gt;</ph> has the wrong number of parameters or the wrong parameter types.","source":"<code>delegateType</code> has the wrong number of parameters or the wrong parameter types."}],"pos":[80503,80594],"yaml":true},{"content":"Completes the dynamic method and creates a delegate that can be used to execute it, specifying the delegate type and an object the delegate is bound to.","nodes":[{"pos":[0,152],"content":"Completes the dynamic method and creates a delegate that can be used to execute it, specifying the delegate type and an object the delegate is bound to.","nodes":[{"content":"Completes the dynamic method and creates a delegate that can be used to execute it, specifying the delegate type and an object the delegate is bound to.","pos":[0,152]}]}],"pos":[81960,82113],"yaml":true},{"content":"This method overload creates a delegate bound to a particular object. Such a delegate is said to be closed over its first argument. Although the method is static, it acts as if it were an instance method; the instance is `target`.  \n  \n This method overload requires `target` to be of the same type as the first parameter of the dynamic method, or to be assignable to that type (for example, a derived class).  The signature of `delegateType` has all the parameters of the dynamic method except the first. For example, if the dynamic method has the parameters <xref:System.String>, <xref:System.Int32>, and <xref:System.Byte>, then `delegateType` has the parameters <xref:System.Int32> and <xref:System.Byte>; `target` is of type <xref:System.String>.  \n  \n Calling the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> method or the <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method completes the dynamic method. Any further attempt to alter the dynamic method, such as modifying parameter definitions or emitting more Microsoft intermediate language (MSIL), is ignored; no exception is thrown.  \n  \n To create a method body for a dynamic method when you have your own MSIL generator, call the <xref:System.Reflection.Emit.DynamicMethod.GetDynamicILInfo%2A> method to obtain a <xref:System.Reflection.Emit.DynamicILInfo> object. If you do not have your own MSIL generator, call the <xref:System.Reflection.Emit.DynamicMethod.GetILGenerator%2A> method to obtain an <xref:System.Reflection.Emit.ILGenerator> object that can be used to generate the method body.","nodes":[{"pos":[0,230],"content":"This method overload creates a delegate bound to a particular object. Such a delegate is said to be closed over its first argument. Although the method is static, it acts as if it were an instance method; the instance is `target`.","nodes":[{"content":"This method overload creates a delegate bound to a particular object.","pos":[0,69]},{"content":"Such a delegate is said to be closed over its first argument.","pos":[70,131]},{"content":"Although the method is static, it acts as if it were an instance method; the instance is <ph id=\"ph1\">`target`</ph>.","pos":[132,230],"source":" Although the method is static, it acts as if it were an instance method; the instance is `target`."}]},{"pos":[237,751],"content":"This method overload requires `target` to be of the same type as the first parameter of the dynamic method, or to be assignable to that type (for example, a derived class).  The signature of `delegateType` has all the parameters of the dynamic method except the first. For example, if the dynamic method has the parameters <xref:System.String>, <xref:System.Int32>, and <xref:System.Byte>, then `delegateType` has the parameters <xref:System.Int32> and <xref:System.Byte>; `target` is of type <xref:System.String>.","nodes":[{"content":"This method overload requires <ph id=\"ph1\">`target`</ph> to be of the same type as the first parameter of the dynamic method, or to be assignable to that type (for example, a derived class).","pos":[0,172],"source":"This method overload requires `target` to be of the same type as the first parameter of the dynamic method, or to be assignable to that type (for example, a derived class)."},{"content":"The signature of <ph id=\"ph1\">`delegateType`</ph> has all the parameters of the dynamic method except the first.","pos":[174,268],"source":"  The signature of `delegateType` has all the parameters of the dynamic method except the first."},{"content":"For example, if the dynamic method has the parameters <ph id=\"ph1\">&lt;xref:System.String&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Int32&gt;</ph>, and <ph id=\"ph3\">&lt;xref:System.Byte&gt;</ph>, then <ph id=\"ph4\">`delegateType`</ph> has the parameters <ph id=\"ph5\">&lt;xref:System.Int32&gt;</ph> and <ph id=\"ph6\">&lt;xref:System.Byte&gt;</ph>; <ph id=\"ph7\">`target`</ph> is of type <ph id=\"ph8\">&lt;xref:System.String&gt;</ph>.","pos":[269,514],"source":" For example, if the dynamic method has the parameters <xref:System.String>, <xref:System.Int32>, and <xref:System.Byte>, then `delegateType` has the parameters <xref:System.Int32> and <xref:System.Byte>; `target` is of type <xref:System.String>."}]},{"pos":[758,1118],"content":"Calling the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> method or the <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method completes the dynamic method. Any further attempt to alter the dynamic method, such as modifying parameter definitions or emitting more Microsoft intermediate language (MSIL), is ignored; no exception is thrown.","nodes":[{"content":"Calling the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> method or the <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method completes the dynamic method. Any further attempt to alter the dynamic method, such as modifying parameter definitions or emitting more Microsoft intermediate language (MSIL), is ignored; no exception is thrown.","pos":[0,360],"nodes":[{"content":"Calling the <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A&gt;</ph> method or the <ph id=\"ph2\">&lt;xref:System.Reflection.Emit.DynamicMethod.Invoke%2A&gt;</ph> method completes the dynamic method.","pos":[0,178],"source":"Calling the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> method or the <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method completes the dynamic method."},{"content":"Any further attempt to alter the dynamic method, such as modifying parameter definitions or emitting more Microsoft intermediate language (MSIL), is ignored; no exception is thrown.","pos":[179,360]}]}]},{"pos":[1125,1582],"content":"To create a method body for a dynamic method when you have your own MSIL generator, call the <xref:System.Reflection.Emit.DynamicMethod.GetDynamicILInfo%2A> method to obtain a <xref:System.Reflection.Emit.DynamicILInfo> object. If you do not have your own MSIL generator, call the <xref:System.Reflection.Emit.DynamicMethod.GetILGenerator%2A> method to obtain an <xref:System.Reflection.Emit.ILGenerator> object that can be used to generate the method body.","nodes":[{"content":"To create a method body for a dynamic method when you have your own MSIL generator, call the <xref:System.Reflection.Emit.DynamicMethod.GetDynamicILInfo%2A> method to obtain a <xref:System.Reflection.Emit.DynamicILInfo> object. If you do not have your own MSIL generator, call the <xref:System.Reflection.Emit.DynamicMethod.GetILGenerator%2A> method to obtain an <xref:System.Reflection.Emit.ILGenerator> object that can be used to generate the method body.","pos":[0,457],"nodes":[{"content":"To create a method body for a dynamic method when you have your own MSIL generator, call the <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.DynamicMethod.GetDynamicILInfo%2A&gt;</ph> method to obtain a <ph id=\"ph2\">&lt;xref:System.Reflection.Emit.DynamicILInfo&gt;</ph> object.","pos":[0,227],"source":"To create a method body for a dynamic method when you have your own MSIL generator, call the <xref:System.Reflection.Emit.DynamicMethod.GetDynamicILInfo%2A> method to obtain a <xref:System.Reflection.Emit.DynamicILInfo> object."},{"content":"If you do not have your own MSIL generator, call the <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.DynamicMethod.GetILGenerator%2A&gt;</ph> method to obtain an <ph id=\"ph2\">&lt;xref:System.Reflection.Emit.ILGenerator&gt;</ph> object that can be used to generate the method body.","pos":[228,457],"source":" If you do not have your own MSIL generator, call the <xref:System.Reflection.Emit.DynamicMethod.GetILGenerator%2A> method to obtain an <xref:System.Reflection.Emit.ILGenerator> object that can be used to generate the method body."}]}]}],"pos":[82124,83715],"yaml":true,"extradata":"MT"},{"content":"A delegate type whose signature matches that of the dynamic method, minus the first parameter.","nodes":[{"pos":[0,94],"content":"A delegate type whose signature matches that of the dynamic method, minus the first parameter.","nodes":[{"content":"A delegate type whose signature matches that of the dynamic method, minus the first parameter.","pos":[0,94]}]}],"pos":[86630,86725],"yaml":true},{"content":"An object the delegate is bound to. Must be of the same type as the first parameter of the dynamic method.","nodes":[{"pos":[0,106],"content":"An object the delegate is bound to. Must be of the same type as the first parameter of the dynamic method.","nodes":[{"content":"An object the delegate is bound to. Must be of the same type as the first parameter of the dynamic method.","pos":[0,106],"nodes":[{"content":"An object the delegate is bound to.","pos":[0,35]},{"content":"Must be of the same type as the first parameter of the dynamic method.","pos":[36,106]}]}]}],"pos":[86787,86894],"yaml":true},{"content":"A delegate of the specified type, which can be used to execute the dynamic method with the specified target object.","nodes":[{"pos":[0,115],"content":"A delegate of the specified type, which can be used to execute the dynamic method with the specified target object.","nodes":[{"content":"A delegate of the specified type, which can be used to execute the dynamic method with the specified target object.","pos":[0,115]}]}],"pos":[86953,87069],"yaml":true},{"content":"The dynamic method has no method body.","nodes":[{"pos":[0,38],"content":"The dynamic method has no method body.","nodes":[{"content":"The dynamic method has no method body.","pos":[0,38]}]}],"pos":[87258,87297],"yaml":true},{"content":"<code>target</code> is not the same type as the first parameter of the dynamic method, and is not assignable to that type.  \n  \n -or-  \n  \n <code>delegateType</code> has the wrong number of parameters or the wrong parameter types.","nodes":[{"pos":[0,122],"content":"<ph id=\"ph1\">&lt;code&gt;target&lt;/code&gt;</ph> is not the same type as the first parameter of the dynamic method, and is not assignable to that type.","source":"<code>target</code> is not the same type as the first parameter of the dynamic method, and is not assignable to that type."},{"pos":[129,133],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[140,230],"content":"<ph id=\"ph1\">&lt;code&gt;delegateType&lt;/code&gt;</ph> has the wrong number of parameters or the wrong parameter types.","source":"<code>delegateType</code> has the wrong number of parameters or the wrong parameter types."}],"pos":[87391,87628],"yaml":true},{"content":"Gets the type that declares the method, which is always `null` for dynamic methods.","nodes":[{"pos":[0,83],"content":"Gets the type that declares the method, which is always <ph id=\"ph1\">`null`</ph> for dynamic methods.","source":"Gets the type that declares the method, which is always `null` for dynamic methods."}],"pos":[88867,88951],"yaml":true},{"content":"This property always returns `null` for dynamic methods. Even when a dynamic method is logically associated with a type, it is not declared by the type.","nodes":[{"pos":[0,152],"content":"This property always returns `null` for dynamic methods. Even when a dynamic method is logically associated with a type, it is not declared by the type.","nodes":[{"content":"This property always returns <ph id=\"ph1\">`null`</ph> for dynamic methods.","pos":[0,56],"source":"This property always returns `null` for dynamic methods."},{"content":"Even when a dynamic method is logically associated with a type, it is not declared by the type.","pos":[57,152]}]}],"pos":[88962,89115],"yaml":true,"extradata":"MT"},{"content":"Always `null`.","nodes":[{"pos":[0,14],"content":"Always <ph id=\"ph1\">`null`</ph>.","source":"Always `null`."}],"pos":[89861,89876],"yaml":true},{"content":"Defines a parameter of the dynamic method.","nodes":[{"pos":[0,42],"content":"Defines a parameter of the dynamic method.","nodes":[{"content":"Defines a parameter of the dynamic method.","pos":[0,42]}]}],"pos":[91398,91441],"yaml":true},{"content":"If `position` is 0, the <xref:System.Reflection.Emit.DynamicMethod.DefineParameter%2A> method refers to the return value. Setting parameter information has no effect on the return value.  \n  \n If the dynamic method has already been completed, by calling the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> or <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method, the <xref:System.Reflection.Emit.DynamicMethod.DefineParameter%2A> method has no effect. No exception is thrown.","nodes":[{"pos":[0,186],"content":"If `position` is 0, the <xref:System.Reflection.Emit.DynamicMethod.DefineParameter%2A> method refers to the return value. Setting parameter information has no effect on the return value.","nodes":[{"content":"If <ph id=\"ph1\">`position`</ph> is 0, the <ph id=\"ph2\">&lt;xref:System.Reflection.Emit.DynamicMethod.DefineParameter%2A&gt;</ph> method refers to the return value.","pos":[0,121],"source":"If `position` is 0, the <xref:System.Reflection.Emit.DynamicMethod.DefineParameter%2A> method refers to the return value."},{"content":"Setting parameter information has no effect on the return value.","pos":[122,186]}]},{"pos":[193,497],"content":"If the dynamic method has already been completed, by calling the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> or <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method, the <xref:System.Reflection.Emit.DynamicMethod.DefineParameter%2A> method has no effect. No exception is thrown.","nodes":[{"content":"If the dynamic method has already been completed, by calling the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> or <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method, the <xref:System.Reflection.Emit.DynamicMethod.DefineParameter%2A> method has no effect. No exception is thrown.","pos":[0,304],"nodes":[{"content":"If the dynamic method has already been completed, by calling the <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Reflection.Emit.DynamicMethod.Invoke%2A&gt;</ph> method, the <ph id=\"ph3\">&lt;xref:System.Reflection.Emit.DynamicMethod.DefineParameter%2A&gt;</ph> method has no effect.","pos":[0,280],"source":"If the dynamic method has already been completed, by calling the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> or <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method, the <xref:System.Reflection.Emit.DynamicMethod.DefineParameter%2A> method has no effect."},{"content":"No exception is thrown.","pos":[281,304]}]}]}],"pos":[91452,91954],"yaml":true,"extradata":"MT"},{"content":"The position of the parameter in the parameter list. Parameters are indexed beginning with the number 1 for the first parameter.","nodes":[{"pos":[0,128],"content":"The position of the parameter in the parameter list. Parameters are indexed beginning with the number 1 for the first parameter.","nodes":[{"content":"The position of the parameter in the parameter list. Parameters are indexed beginning with the number 1 for the first parameter.","pos":[0,128],"nodes":[{"content":"The position of the parameter in the parameter list.","pos":[0,52]},{"content":"Parameters are indexed beginning with the number 1 for the first parameter.","pos":[53,128]}]}]}],"pos":[92846,92975],"yaml":true},{"content":"A bitwise combination of <xref href=\"System.Reflection.ParameterAttributes\"></xref> values that specifies the attributes of the parameter.","nodes":[{"pos":[0,138],"content":"A bitwise combination of <ph id=\"ph1\">&lt;xref href=\"System.Reflection.ParameterAttributes\"&gt;&lt;/xref&gt;</ph> values that specifies the attributes of the parameter.","source":"A bitwise combination of <xref href=\"System.Reflection.ParameterAttributes\"></xref> values that specifies the attributes of the parameter."}],"pos":[93065,93204],"yaml":true},{"content":"The name of the parameter. The name can be a zero-length string.","nodes":[{"pos":[0,64],"content":"The name of the parameter. The name can be a zero-length string.","nodes":[{"content":"The name of the parameter. The name can be a zero-length string.","pos":[0,64],"nodes":[{"content":"The name of the parameter.","pos":[0,26]},{"content":"The name can be a zero-length string.","pos":[27,64]}]}]}],"pos":[93273,93338],"yaml":true},{"content":"Always returns `null`.","nodes":[{"pos":[0,22],"content":"Always returns <ph id=\"ph1\">`null`</ph>.","source":"Always returns `null`."}],"pos":[93421,93444],"yaml":true},{"content":"The method has no parameters.  \n  \n -or-  \n  \n <code>position</code> is less than 0.  \n  \n -or-  \n  \n <code>position</code> is greater than the number of the method's parameters.","nodes":[{"pos":[0,29],"content":"The method has no parameters.","nodes":[{"content":"The method has no parameters.","pos":[0,29]}]},{"pos":[36,40],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[47,84],"content":"<ph id=\"ph1\">&lt;code&gt;position&lt;/code&gt;</ph> is less than 0.","source":"<code>position</code> is less than 0."},{"pos":[91,95],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[102,178],"content":"<ph id=\"ph1\">&lt;code&gt;position&lt;/code&gt;</ph> is greater than the number of the method's parameters.","source":"<code>position</code> is greater than the number of the method's parameters."}],"pos":[93638,93827],"yaml":true},{"content":"Returns the base implementation for the method.","nodes":[{"pos":[0,47],"content":"Returns the base implementation for the method.","nodes":[{"content":"Returns the base implementation for the method.","pos":[0,47]}]}],"pos":[94923,94971],"yaml":true},{"content":"This method always returns the current `DynamicMethod` object.","nodes":[{"pos":[0,62],"content":"This method always returns the current <ph id=\"ph1\">`DynamicMethod`</ph> object.","source":"This method always returns the current `DynamicMethod` object."}],"pos":[94982,95045],"yaml":true,"extradata":"MT"},{"content":"The base implementation of the method.","nodes":[{"pos":[0,38],"content":"The base implementation of the method.","nodes":[{"content":"The base implementation of the method.","pos":[0,38]}]}],"pos":[95226,95265],"yaml":true},{"content":"Returns all the custom attributes defined for the method.","nodes":[{"pos":[0,57],"content":"Returns all the custom attributes defined for the method.","nodes":[{"content":"Returns all the custom attributes defined for the method.","pos":[0,57]}]}],"pos":[96559,96617],"yaml":true},{"content":"For dynamic methods, specifying `true` for `inherit` has no effect, because the method is not declared in a type.  \n  \n> [!NOTE]\n>  Custom attributes are not currently supported on dynamic methods. The only attribute returned is <xref:System.Runtime.CompilerServices.MethodImplAttribute>; you can get the method implementation flags more easily using the <xref:System.Reflection.Emit.DynamicMethod.GetMethodImplementationFlags%2A> method.","nodes":[{"pos":[0,113],"content":"For dynamic methods, specifying <ph id=\"ph1\">`true`</ph> for <ph id=\"ph2\">`inherit`</ph> has no effect, because the method is not declared in a type.","source":"For dynamic methods, specifying `true` for `inherit` has no effect, because the method is not declared in a type."},{"pos":[121,438],"content":"[!NOTE]\n Custom attributes are not currently supported on dynamic methods. The only attribute returned is <xref:System.Runtime.CompilerServices.MethodImplAttribute>; you can get the method implementation flags more easily using the <xref:System.Reflection.Emit.DynamicMethod.GetMethodImplementationFlags%2A> method.","leadings":["","> "],"nodes":[{"content":" Custom attributes are not currently supported on dynamic methods. The only attribute returned is <xref:System.Runtime.CompilerServices.MethodImplAttribute>; you can get the method implementation flags more easily using the <xref:System.Reflection.Emit.DynamicMethod.GetMethodImplementationFlags%2A> method.","pos":[8,315],"nodes":[{"content":"Custom attributes are not currently supported on dynamic methods.","pos":[1,66]},{"content":"The only attribute returned is <ph id=\"ph1\">&lt;xref:System.Runtime.CompilerServices.MethodImplAttribute&gt;</ph>; you can get the method implementation flags more easily using the <ph id=\"ph2\">&lt;xref:System.Reflection.Emit.DynamicMethod.GetMethodImplementationFlags%2A&gt;</ph> method.","pos":[67,307],"source":" The only attribute returned is <xref:System.Runtime.CompilerServices.MethodImplAttribute>; you can get the method implementation flags more easily using the <xref:System.Reflection.Emit.DynamicMethod.GetMethodImplementationFlags%2A> method."}]}]}],"pos":[96628,97072],"yaml":true,"extradata":"MT"},{"content":"`true` to search the method's inheritance chain to find the custom attributes; `false` to check only the current method.","nodes":[{"pos":[0,120],"content":"<ph id=\"ph1\">`true`</ph> to search the method's inheritance chain to find the custom attributes; <ph id=\"ph2\">`false`</ph> to check only the current method.","source":"`true` to search the method's inheritance chain to find the custom attributes; `false` to check only the current method."}],"pos":[97236,97359],"yaml":true},{"content":"An array of objects representing all the custom attributes of the method.","nodes":[{"pos":[0,73],"content":"An array of objects representing all the custom attributes of the method.","nodes":[{"content":"An array of objects representing all the custom attributes of the method.","pos":[0,73]}]}],"pos":[97418,97492],"yaml":true},{"content":"Returns the custom attributes of the specified type that have been applied to the method.","nodes":[{"pos":[0,89],"content":"Returns the custom attributes of the specified type that have been applied to the method.","nodes":[{"content":"Returns the custom attributes of the specified type that have been applied to the method.","pos":[0,89]}]}],"pos":[98842,98932],"yaml":true},{"content":"For dynamic methods, specifying `true` for `inherit` has no effect, because the method is not declared in a type.  \n  \n> [!NOTE]\n>  Custom attributes are not currently supported on dynamic methods. The only attribute returned is <xref:System.Runtime.CompilerServices.MethodImplAttribute>; you can get the method implementation flags more easily using the <xref:System.Reflection.Emit.DynamicMethod.GetMethodImplementationFlags%2A> method.","nodes":[{"pos":[0,113],"content":"For dynamic methods, specifying <ph id=\"ph1\">`true`</ph> for <ph id=\"ph2\">`inherit`</ph> has no effect, because the method is not declared in a type.","source":"For dynamic methods, specifying `true` for `inherit` has no effect, because the method is not declared in a type."},{"pos":[121,438],"content":"[!NOTE]\n Custom attributes are not currently supported on dynamic methods. The only attribute returned is <xref:System.Runtime.CompilerServices.MethodImplAttribute>; you can get the method implementation flags more easily using the <xref:System.Reflection.Emit.DynamicMethod.GetMethodImplementationFlags%2A> method.","leadings":["","> "],"nodes":[{"content":" Custom attributes are not currently supported on dynamic methods. The only attribute returned is <xref:System.Runtime.CompilerServices.MethodImplAttribute>; you can get the method implementation flags more easily using the <xref:System.Reflection.Emit.DynamicMethod.GetMethodImplementationFlags%2A> method.","pos":[8,315],"nodes":[{"content":"Custom attributes are not currently supported on dynamic methods.","pos":[1,66]},{"content":"The only attribute returned is <ph id=\"ph1\">&lt;xref:System.Runtime.CompilerServices.MethodImplAttribute&gt;</ph>; you can get the method implementation flags more easily using the <ph id=\"ph2\">&lt;xref:System.Reflection.Emit.DynamicMethod.GetMethodImplementationFlags%2A&gt;</ph> method.","pos":[67,307],"source":" The only attribute returned is <xref:System.Runtime.CompilerServices.MethodImplAttribute>; you can get the method implementation flags more easily using the <xref:System.Reflection.Emit.DynamicMethod.GetMethodImplementationFlags%2A> method."}]}]}],"pos":[98943,99387],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Type\"></xref> representing the type of custom attribute to return.","nodes":[{"pos":[0,87],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> representing the type of custom attribute to return.","source":"A <xref href=\"System.Type\"></xref> representing the type of custom attribute to return."}],"pos":[99574,99662],"yaml":true},{"content":"`true` to search the method's inheritance chain to find the custom attributes; `false` to check only the current method.","nodes":[{"pos":[0,120],"content":"<ph id=\"ph1\">`true`</ph> to search the method's inheritance chain to find the custom attributes; <ph id=\"ph2\">`false`</ph> to check only the current method.","source":"`true` to search the method's inheritance chain to find the custom attributes; `false` to check only the current method."}],"pos":[99726,99849],"yaml":true},{"content":"An array of objects representing the attributes of the method that are of type <code>attributeType</code> or derive from type <code>attributeType</code>.","nodes":[{"pos":[0,153],"content":"An array of objects representing the attributes of the method that are of type <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">attributeType</ph><ept id=\"p1\">&lt;/code&gt;</ept> or derive from type <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">attributeType</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"An array of objects representing the attributes of the method that are of type <code>attributeType</code> or derive from type <code>attributeType</code>."}],"pos":[99908,100062],"yaml":true},{"content":"<code>attributeType</code> is `null`.","nodes":[{"pos":[0,37],"content":"<ph id=\"ph1\">&lt;code&gt;attributeType&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>attributeType</code> is `null`."}],"pos":[100248,100286],"yaml":true},{"content":"Returns a <xref href=\"System.Reflection.Emit.DynamicILInfo\"></xref> object that can be used to generate a method body from metadata tokens, scopes, and Microsoft intermediate language (MSIL) streams.","nodes":[{"pos":[0,199],"content":"Returns a <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.DynamicILInfo\"&gt;&lt;/xref&gt;</ph> object that can be used to generate a method body from metadata tokens, scopes, and Microsoft intermediate language (MSIL) streams.","source":"Returns a <xref href=\"System.Reflection.Emit.DynamicILInfo\"></xref> object that can be used to generate a method body from metadata tokens, scopes, and Microsoft intermediate language (MSIL) streams."}],"pos":[101369,101569],"yaml":true},{"content":"The <xref:System.Reflection.Emit.DynamicILInfo> class is provided to support unmanaged code generation.","nodes":[{"pos":[0,103],"content":"The <xref:System.Reflection.Emit.DynamicILInfo> class is provided to support unmanaged code generation.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.DynamicILInfo&gt;</ph> class is provided to support unmanaged code generation.","pos":[0,103],"source":"The <xref:System.Reflection.Emit.DynamicILInfo> class is provided to support unmanaged code generation."}]}],"pos":[101580,101684],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Reflection.Emit.DynamicILInfo\"></xref> object that can be used to generate a method body from metadata tokens, scopes, and MSIL streams.","nodes":[{"pos":[0,157],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.DynamicILInfo\"&gt;&lt;/xref&gt;</ph> object that can be used to generate a method body from metadata tokens, scopes, and MSIL streams.","source":"A <xref href=\"System.Reflection.Emit.DynamicILInfo\"></xref> object that can be used to generate a method body from metadata tokens, scopes, and MSIL streams."}],"pos":[101871,102029],"yaml":true},{"content":"Returns a Microsoft intermediate language (MSIL) generator for the method with the specified MSIL stream size.","nodes":[{"pos":[0,110],"content":"Returns a Microsoft intermediate language (MSIL) generator for the method with the specified MSIL stream size.","nodes":[{"content":"Returns a Microsoft intermediate language (MSIL) generator for the method with the specified MSIL stream size.","pos":[0,110]}]}],"pos":[103248,103359],"yaml":true},{"content":"After a dynamic method has been completed, by calling the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> or <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method, any further attempt to add MSIL is ignored. No exception is thrown.  \n  \n> [!NOTE]\n>  There are restrictions on unverifiable code in dynamic methods, even in some full-trust scenarios. See the \"Verification\" section in Remarks for <xref:System.Reflection.Emit.DynamicMethod>.","nodes":[{"pos":[0,252],"content":"After a dynamic method has been completed, by calling the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> or <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method, any further attempt to add MSIL is ignored. No exception is thrown.","nodes":[{"content":"After a dynamic method has been completed, by calling the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> or <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method, any further attempt to add MSIL is ignored. No exception is thrown.","pos":[0,252],"nodes":[{"content":"After a dynamic method has been completed, by calling the <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Reflection.Emit.DynamicMethod.Invoke%2A&gt;</ph> method, any further attempt to add MSIL is ignored.","pos":[0,228],"source":"After a dynamic method has been completed, by calling the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> or <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method, any further attempt to add MSIL is ignored."},{"content":"No exception is thrown.","pos":[229,252]}]}]},{"pos":[260,460],"content":"[!NOTE]\n There are restrictions on unverifiable code in dynamic methods, even in some full-trust scenarios. See the \"Verification\" section in Remarks for <xref:System.Reflection.Emit.DynamicMethod>.","leadings":["","> "],"nodes":[{"content":" There are restrictions on unverifiable code in dynamic methods, even in some full-trust scenarios. See the \"Verification\" section in Remarks for <xref:System.Reflection.Emit.DynamicMethod>.","pos":[8,198],"nodes":[{"content":"There are restrictions on unverifiable code in dynamic methods, even in some full-trust scenarios.","pos":[1,99]},{"content":"See the \"Verification\" section in Remarks for <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph>.","pos":[100,190],"source":" See the \"Verification\" section in Remarks for <xref:System.Reflection.Emit.DynamicMethod>."}]}]}],"pos":[103370,103838],"yaml":true,"extradata":"MT"},{"content":"The size of the MSIL stream, in bytes.","nodes":[{"pos":[0,38],"content":"The size of the MSIL stream, in bytes.","nodes":[{"content":"The size of the MSIL stream, in bytes.","pos":[0,38]}]}],"pos":[104621,104660],"yaml":true},{"content":"An <xref href=\"System.Reflection.Emit.ILGenerator\"></xref> object for the method, with the specified MSIL stream size.","nodes":[{"pos":[0,118],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.ILGenerator\"&gt;&lt;/xref&gt;</ph> object for the method, with the specified MSIL stream size.","source":"An <xref href=\"System.Reflection.Emit.ILGenerator\"></xref> object for the method, with the specified MSIL stream size."}],"pos":[104738,104857],"yaml":true},{"content":"Returns a Microsoft intermediate language (MSIL) generator for the method with a default MSIL stream size of 64 bytes.","nodes":[{"pos":[0,118],"content":"Returns a Microsoft intermediate language (MSIL) generator for the method with a default MSIL stream size of 64 bytes.","nodes":[{"content":"Returns a Microsoft intermediate language (MSIL) generator for the method with a default MSIL stream size of 64 bytes.","pos":[0,118]}]}],"pos":[106113,106232],"yaml":true},{"content":"After a dynamic method has been completed, by calling the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> or <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method, any further attempt to add MSIL is ignored. No exception is thrown.  \n  \n> [!NOTE]\n>  There are restrictions on unverifiable code in dynamic methods, even in some full-trust scenarios. See the \"Verification\" section in Remarks for <xref:System.Reflection.Emit.DynamicMethod>.","nodes":[{"pos":[0,252],"content":"After a dynamic method has been completed, by calling the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> or <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method, any further attempt to add MSIL is ignored. No exception is thrown.","nodes":[{"content":"After a dynamic method has been completed, by calling the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> or <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method, any further attempt to add MSIL is ignored. No exception is thrown.","pos":[0,252],"nodes":[{"content":"After a dynamic method has been completed, by calling the <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Reflection.Emit.DynamicMethod.Invoke%2A&gt;</ph> method, any further attempt to add MSIL is ignored.","pos":[0,228],"source":"After a dynamic method has been completed, by calling the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> or <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method, any further attempt to add MSIL is ignored."},{"content":"No exception is thrown.","pos":[229,252]}]}]},{"pos":[260,460],"content":"[!NOTE]\n There are restrictions on unverifiable code in dynamic methods, even in some full-trust scenarios. See the \"Verification\" section in Remarks for <xref:System.Reflection.Emit.DynamicMethod>.","leadings":["","> "],"nodes":[{"content":" There are restrictions on unverifiable code in dynamic methods, even in some full-trust scenarios. See the \"Verification\" section in Remarks for <xref:System.Reflection.Emit.DynamicMethod>.","pos":[8,198],"nodes":[{"content":"There are restrictions on unverifiable code in dynamic methods, even in some full-trust scenarios.","pos":[1,99]},{"content":"See the \"Verification\" section in Remarks for <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph>.","pos":[100,190],"source":" See the \"Verification\" section in Remarks for <xref:System.Reflection.Emit.DynamicMethod>."}]}]}],"pos":[106243,106711],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Reflection.Emit.ILGenerator\"></xref> object for the method.","nodes":[{"pos":[0,81],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.ILGenerator\"&gt;&lt;/xref&gt;</ph> object for the method.","source":"An <xref href=\"System.Reflection.Emit.ILGenerator\"></xref> object for the method."}],"pos":[107793,107875],"yaml":true},{"content":"Returns the implementation flags for the method.","nodes":[{"pos":[0,48],"content":"Returns the implementation flags for the method.","nodes":[{"content":"Returns the implementation flags for the method.","pos":[0,48]}]}],"pos":[109215,109264],"yaml":true},{"content":"Currently, method implementation attributes for dynamic methods are always <xref:System.Reflection.MethodImplAttributes.IL> and <xref:System.Reflection.MethodImplAttributes.NoInlining>.","nodes":[{"pos":[0,185],"content":"Currently, method implementation attributes for dynamic methods are always <xref:System.Reflection.MethodImplAttributes.IL> and <xref:System.Reflection.MethodImplAttributes.NoInlining>.","nodes":[{"content":"Currently, method implementation attributes for dynamic methods are always <ph id=\"ph1\">&lt;xref:System.Reflection.MethodImplAttributes.IL&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Reflection.MethodImplAttributes.NoInlining&gt;</ph>.","pos":[0,185],"source":"Currently, method implementation attributes for dynamic methods are always <xref:System.Reflection.MethodImplAttributes.IL> and <xref:System.Reflection.MethodImplAttributes.NoInlining>."}]}],"pos":[109275,109461],"yaml":true,"extradata":"MT"},{"content":"A bitwise combination of <xref href=\"System.Reflection.MethodImplAttributes\"></xref> values representing the implementation flags for the method.","nodes":[{"pos":[0,145],"content":"A bitwise combination of <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodImplAttributes\"&gt;&lt;/xref&gt;</ph> values representing the implementation flags for the method.","source":"A bitwise combination of <xref href=\"System.Reflection.MethodImplAttributes\"></xref> values representing the implementation flags for the method."}],"pos":[109673,109819],"yaml":true},{"content":"Returns the parameters of the dynamic method.","nodes":[{"pos":[0,45],"content":"Returns the parameters of the dynamic method.","nodes":[{"content":"Returns the parameters of the dynamic method.","pos":[0,45]}]}],"pos":[111019,111065],"yaml":true},{"content":"The <xref:System.Reflection.ParameterInfo> objects returned by this method are for information only. Use the <xref:System.Reflection.Emit.DynamicMethod.DefineParameter%2A> method to set or change the characteristics of the parameters.","nodes":[{"pos":[0,234],"content":"The <xref:System.Reflection.ParameterInfo> objects returned by this method are for information only. Use the <xref:System.Reflection.Emit.DynamicMethod.DefineParameter%2A> method to set or change the characteristics of the parameters.","nodes":[{"content":"The <xref:System.Reflection.ParameterInfo> objects returned by this method are for information only. Use the <xref:System.Reflection.Emit.DynamicMethod.DefineParameter%2A> method to set or change the characteristics of the parameters.","pos":[0,234],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> objects returned by this method are for information only.","pos":[0,100],"source":"The <xref:System.Reflection.ParameterInfo> objects returned by this method are for information only."},{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.DynamicMethod.DefineParameter%2A&gt;</ph> method to set or change the characteristics of the parameters.","pos":[101,234],"source":" Use the <xref:System.Reflection.Emit.DynamicMethod.DefineParameter%2A> method to set or change the characteristics of the parameters."}]}]}],"pos":[111076,111311],"yaml":true,"extradata":"MT"},{"content":"An array of <xref href=\"System.Reflection.ParameterInfo\"></xref> objects that represent the parameters of the dynamic method.","nodes":[{"pos":[0,125],"content":"An array of <ph id=\"ph1\">&lt;xref href=\"System.Reflection.ParameterInfo\"&gt;&lt;/xref&gt;</ph> objects that represent the parameters of the dynamic method.","source":"An array of <xref href=\"System.Reflection.ParameterInfo\"></xref> objects that represent the parameters of the dynamic method."}],"pos":[112118,112244],"yaml":true},{"content":"Gets or sets a value indicating whether the local variables in the method are zero-initialized.","nodes":[{"pos":[0,95],"content":"Gets or sets a value indicating whether the local variables in the method are zero-initialized.","nodes":[{"content":"Gets or sets a value indicating whether the local variables in the method are zero-initialized.","pos":[0,95]}]}],"pos":[113471,113567],"yaml":true},{"content":"If this property is set to `true`, the emitted Microsoft intermediate language (MSIL) includes initialization of local variables. If it is set to `false`, local variables are not initialized and the generated code is unverifiable.","nodes":[{"pos":[0,230],"content":"If this property is set to `true`, the emitted Microsoft intermediate language (MSIL) includes initialization of local variables. If it is set to `false`, local variables are not initialized and the generated code is unverifiable.","nodes":[{"content":"If this property is set to <ph id=\"ph1\">`true`</ph>, the emitted Microsoft intermediate language (MSIL) includes initialization of local variables.","pos":[0,129],"source":"If this property is set to `true`, the emitted Microsoft intermediate language (MSIL) includes initialization of local variables."},{"content":"If it is set to <ph id=\"ph1\">`false`</ph>, local variables are not initialized and the generated code is unverifiable.","pos":[130,230],"source":" If it is set to `false`, local variables are not initialized and the generated code is unverifiable."}]}],"pos":[113578,113809],"yaml":true,"extradata":"MT"},{"content":"`true` if the local variables in the method are zero-initialized; otherwise, `false`. The default is `true`.","nodes":[{"pos":[0,108],"content":"`true` if the local variables in the method are zero-initialized; otherwise, `false`. The default is `true`.","nodes":[{"content":"<ph id=\"ph1\">`true`</ph> if the local variables in the method are zero-initialized; otherwise, <ph id=\"ph2\">`false`</ph>.","pos":[0,85],"source":"`true` if the local variables in the method are zero-initialized; otherwise, `false`."},{"content":"The default is <ph id=\"ph1\">`true`</ph>.","pos":[86,108],"source":" The default is `true`."}]}],"pos":[114603,114714],"yaml":true},{"content":"Invokes the dynamic method using the specified parameters, under the constraints of the specified binder, with the specified culture information.","nodes":[{"pos":[0,145],"content":"Invokes the dynamic method using the specified parameters, under the constraints of the specified binder, with the specified culture information.","nodes":[{"content":"Invokes the dynamic method using the specified parameters, under the constraints of the specified binder, with the specified culture information.","pos":[0,145]}]}],"pos":[116431,116577],"yaml":true},{"content":"In addition to the listed exceptions, the calling code should be prepared to catch any exceptions thrown by the dynamic method.  \n  \n Executing a dynamic method with a delegate created by the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> method is more efficient than executing it with the <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method.  \n  \n Calling the <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method or the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> method completes the dynamic method. Any further attempt to alter the dynamic method, such as modifying parameter definitions or emitting more Microsoft intermediate language (MSIL), is ignored; no exception is thrown.  \n  \n All dynamic methods are static, so the `obj` parameter is always ignored. To treat a dynamic method as if it were an instance method, use the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%28System.Type%2CSystem.Object%29> overload that takes an object instance.  \n  \n If the dynamic method has no parameters, the value of `parameters` should be `null`. Otherwise the number, type, and order of elements in the parameters array should be identical to the number, type, and order of parameters of the dynamic method.  \n  \n> [!NOTE]\n>  This method overload is called by the <xref:System.Reflection.MethodBase.Invoke%28System.Object%2CSystem.Object%5B%5D%29> method overload inherited from the <xref:System.Reflection.MethodBase> class, so the preceding remarks apply to both overloads.  \n  \n This method does not demand permissions directly, but invoking the dynamic method can result in security demands, depending on the method. For example, no demands are made for anonymously hosted dynamic methods that are created with the `restrictedSkipVisibility` parameter set to `false`. On the other hand, if you create a method with `restrictedSkipVisibility` set to `true` so it can access a hidden member of a target assembly, the method will cause a demand for the permissions of the target assembly plus <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag.  \n  \n> [!NOTE]\n>  Prior to the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method required <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess> flag.","nodes":[{"pos":[0,127],"content":"In addition to the listed exceptions, the calling code should be prepared to catch any exceptions thrown by the dynamic method.","nodes":[{"content":"In addition to the listed exceptions, the calling code should be prepared to catch any exceptions thrown by the dynamic method.","pos":[0,127]}]},{"pos":[134,367],"content":"Executing a dynamic method with a delegate created by the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> method is more efficient than executing it with the <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method.","nodes":[{"content":"Executing a dynamic method with a delegate created by the <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A&gt;</ph> method is more efficient than executing it with the <ph id=\"ph2\">&lt;xref:System.Reflection.Emit.DynamicMethod.Invoke%2A&gt;</ph> method.","pos":[0,233],"source":"Executing a dynamic method with a delegate created by the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> method is more efficient than executing it with the <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method."}]},{"pos":[374,734],"content":"Calling the <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method or the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> method completes the dynamic method. Any further attempt to alter the dynamic method, such as modifying parameter definitions or emitting more Microsoft intermediate language (MSIL), is ignored; no exception is thrown.","nodes":[{"content":"Calling the <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method or the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> method completes the dynamic method. Any further attempt to alter the dynamic method, such as modifying parameter definitions or emitting more Microsoft intermediate language (MSIL), is ignored; no exception is thrown.","pos":[0,360],"nodes":[{"content":"Calling the <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.DynamicMethod.Invoke%2A&gt;</ph> method or the <ph id=\"ph2\">&lt;xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A&gt;</ph> method completes the dynamic method.","pos":[0,178],"source":"Calling the <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method or the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> method completes the dynamic method."},{"content":"Any further attempt to alter the dynamic method, such as modifying parameter definitions or emitting more Microsoft intermediate language (MSIL), is ignored; no exception is thrown.","pos":[179,360]}]}]},{"pos":[741,1014],"content":"All dynamic methods are static, so the `obj` parameter is always ignored. To treat a dynamic method as if it were an instance method, use the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%28System.Type%2CSystem.Object%29> overload that takes an object instance.","nodes":[{"content":"All dynamic methods are static, so the <ph id=\"ph1\">`obj`</ph> parameter is always ignored.","pos":[0,73],"source":"All dynamic methods are static, so the `obj` parameter is always ignored."},{"content":"To treat a dynamic method as if it were an instance method, use the <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%28System.Type%2CSystem.Object%29&gt;</ph> overload that takes an object instance.","pos":[74,273],"source":" To treat a dynamic method as if it were an instance method, use the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%28System.Type%2CSystem.Object%29> overload that takes an object instance."}]},{"pos":[1021,1267],"content":"If the dynamic method has no parameters, the value of `parameters` should be `null`. Otherwise the number, type, and order of elements in the parameters array should be identical to the number, type, and order of parameters of the dynamic method.","nodes":[{"content":"If the dynamic method has no parameters, the value of <ph id=\"ph1\">`parameters`</ph> should be <ph id=\"ph2\">`null`</ph>.","pos":[0,84],"source":"If the dynamic method has no parameters, the value of `parameters` should be `null`."},{"content":"Otherwise the number, type, and order of elements in the parameters array should be identical to the number, type, and order of parameters of the dynamic method.","pos":[85,246]}]},{"pos":[1275,1535],"content":"[!NOTE]\n This method overload is called by the <xref:System.Reflection.MethodBase.Invoke%28System.Object%2CSystem.Object%5B%5D%29> method overload inherited from the <xref:System.Reflection.MethodBase> class, so the preceding remarks apply to both overloads.","leadings":["","> "],"nodes":[{"content":"This method overload is called by the <ph id=\"ph1\">&lt;xref:System.Reflection.MethodBase.Invoke%28System.Object%2CSystem.Object%5B%5D%29&gt;</ph> method overload inherited from the <ph id=\"ph2\">&lt;xref:System.Reflection.MethodBase&gt;</ph> class, so the preceding remarks apply to both overloads.","pos":[9,258],"source":" This method overload is called by the <xref:System.Reflection.MethodBase.Invoke%28System.Object%2CSystem.Object%5B%5D%29> method overload inherited from the <xref:System.Reflection.MethodBase> class, so the preceding remarks apply to both overloads."}]},{"pos":[1542,2209],"content":"This method does not demand permissions directly, but invoking the dynamic method can result in security demands, depending on the method. For example, no demands are made for anonymously hosted dynamic methods that are created with the `restrictedSkipVisibility` parameter set to `false`. On the other hand, if you create a method with `restrictedSkipVisibility` set to `true` so it can access a hidden member of a target assembly, the method will cause a demand for the permissions of the target assembly plus <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag.","nodes":[{"content":"This method does not demand permissions directly, but invoking the dynamic method can result in security demands, depending on the method.","pos":[0,138]},{"content":"For example, no demands are made for anonymously hosted dynamic methods that are created with the <ph id=\"ph1\">`restrictedSkipVisibility`</ph> parameter set to <ph id=\"ph2\">`false`</ph>.","pos":[139,289],"source":" For example, no demands are made for anonymously hosted dynamic methods that are created with the `restrictedSkipVisibility` parameter set to `false`."},{"content":"On the other hand, if you create a method with <ph id=\"ph1\">`restrictedSkipVisibility`</ph> set to <ph id=\"ph2\">`true`</ph> so it can access a hidden member of a target assembly, the method will cause a demand for the permissions of the target assembly plus <ph id=\"ph3\">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> with the <ph id=\"ph4\">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName&gt;</ph> flag.","pos":[290,667],"source":" On the other hand, if you create a method with `restrictedSkipVisibility` set to `true` so it can access a hidden member of a target assembly, the method will cause a demand for the permissions of the target assembly plus <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag."}]},{"pos":[2217,2468],"content":"[!NOTE]\n Prior to the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method required <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess> flag.","leadings":["","> "],"nodes":[{"content":"Prior to the <ph id=\"ph1\">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>, this method required <ph id=\"ph2\">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> with the <ph id=\"ph3\">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess&gt;</ph> flag.","pos":[9,249],"source":" Prior to the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method required <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess> flag."}]}],"pos":[116588,119075],"yaml":true,"extradata":"MT"},{"content":"This parameter is ignored for dynamic methods, because they are static. Specify `null`.","nodes":[{"pos":[0,87],"content":"This parameter is ignored for dynamic methods, because they are static. Specify `null`.","nodes":[{"content":"This parameter is ignored for dynamic methods, because they are static.","pos":[0,71]},{"content":"Specify <ph id=\"ph1\">`null`</ph>.","pos":[72,87],"source":" Specify `null`."}]}],"pos":[120000,120088],"yaml":true},{"content":"A bitwise combination of <xref href=\"System.Reflection.BindingFlags\"></xref> values.","nodes":[{"pos":[0,84],"content":"A bitwise combination of <ph id=\"ph1\">&lt;xref href=\"System.Reflection.BindingFlags\"&gt;&lt;/xref&gt;</ph> values.","source":"A bitwise combination of <xref href=\"System.Reflection.BindingFlags\"></xref> values."}],"pos":[120171,120256],"yaml":true},{"content":"A <xref href=\"System.Reflection.Binder\"></xref> object that enables the binding, coercion of argument types, invocation of members, and retrieval of <xref href=\"System.Reflection.MemberInfo\"></xref> objects through reflection. If <code>binder</code> is `null`, the default binder is used. For more details, see <xref href=\"System.Reflection.Binder\"></xref>.","nodes":[{"pos":[0,357],"content":"A <xref href=\"System.Reflection.Binder\"></xref> object that enables the binding, coercion of argument types, invocation of members, and retrieval of <xref href=\"System.Reflection.MemberInfo\"></xref> objects through reflection. If <code>binder</code> is `null`, the default binder is used. For more details, see <xref href=\"System.Reflection.Binder\"></xref>.","nodes":[{"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Binder\"&gt;&lt;/xref&gt;</ph> object that enables the binding, coercion of argument types, invocation of members, and retrieval of <ph id=\"ph2\">&lt;xref href=\"System.Reflection.MemberInfo\"&gt;&lt;/xref&gt;</ph> objects through reflection.","pos":[0,226],"source":"A <xref href=\"System.Reflection.Binder\"></xref> object that enables the binding, coercion of argument types, invocation of members, and retrieval of <xref href=\"System.Reflection.MemberInfo\"></xref> objects through reflection."},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">binder</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">`null`</ph>, the default binder is used.","pos":[227,288],"source":" If <code>binder</code> is `null`, the default binder is used."},{"content":"For more details, see <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Binder\"&gt;&lt;/xref&gt;</ph>.","pos":[289,357],"source":" For more details, see <xref href=\"System.Reflection.Binder\"></xref>."}]}],"pos":[120329,120687],"yaml":true},{"content":"An argument list. This is an array of arguments with the same number, order, and type as the parameters of the method to be invoked. If there are no parameters this parameter should be `null`.","nodes":[{"pos":[0,192],"content":"An argument list. This is an array of arguments with the same number, order, and type as the parameters of the method to be invoked. If there are no parameters this parameter should be `null`.","nodes":[{"content":"An argument list.","pos":[0,17]},{"content":"This is an array of arguments with the same number, order, and type as the parameters of the method to be invoked.","pos":[18,132]},{"content":"If there are no parameters this parameter should be <ph id=\"ph1\">`null`</ph>.","pos":[133,192],"source":" If there are no parameters this parameter should be `null`."}]}],"pos":[120755,120948],"yaml":true},{"content":"An instance of <xref href=\"System.Globalization.CultureInfo\"></xref> used to govern the coercion of types. If this is `null`, the <xref href=\"System.Globalization.CultureInfo\"></xref> for the current thread is used. For example, this information is needed to correctly convert a <xref href=\"System.String\"></xref> that represents 1000 to a <xref href=\"System.Double\"></xref> value, because 1000 is represented differently by different cultures.","nodes":[{"pos":[0,444],"content":"An instance of <xref href=\"System.Globalization.CultureInfo\"></xref> used to govern the coercion of types. If this is `null`, the <xref href=\"System.Globalization.CultureInfo\"></xref> for the current thread is used. For example, this information is needed to correctly convert a <xref href=\"System.String\"></xref> that represents 1000 to a <xref href=\"System.Double\"></xref> value, because 1000 is represented differently by different cultures.","nodes":[{"content":"An instance of <ph id=\"ph1\">&lt;xref href=\"System.Globalization.CultureInfo\"&gt;&lt;/xref&gt;</ph> used to govern the coercion of types.","pos":[0,106],"source":"An instance of <xref href=\"System.Globalization.CultureInfo\"></xref> used to govern the coercion of types."},{"content":"If this is <ph id=\"ph1\">`null`</ph>, the <ph id=\"ph2\">&lt;xref href=\"System.Globalization.CultureInfo\"&gt;&lt;/xref&gt;</ph> for the current thread is used.","pos":[107,215],"source":" If this is `null`, the <xref href=\"System.Globalization.CultureInfo\"></xref> for the current thread is used."},{"content":"For example, this information is needed to correctly convert a <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> that represents 1000 to a <ph id=\"ph2\">&lt;xref href=\"System.Double\"&gt;&lt;/xref&gt;</ph> value, because 1000 is represented differently by different cultures.","pos":[216,444],"source":" For example, this information is needed to correctly convert a <xref href=\"System.String\"></xref> that represents 1000 to a <xref href=\"System.Double\"></xref> value, because 1000 is represented differently by different cultures."}]}],"pos":[121030,121475],"yaml":true},{"content":"A <xref href=\"System.Object\"></xref> containing the return value of the invoked method.","nodes":[{"pos":[0,87],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Object\"&gt;&lt;/xref&gt;</ph> containing the return value of the invoked method.","source":"A <xref href=\"System.Object\"></xref> containing the return value of the invoked method."}],"pos":[121532,121620],"yaml":true},{"content":"The <xref href=\"System.Reflection.CallingConventions.VarArgs\"></xref> calling convention is not supported.","nodes":[{"pos":[0,106],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Reflection.CallingConventions.VarArgs\"&gt;&lt;/xref&gt;</ph> calling convention is not supported.","source":"The <xref href=\"System.Reflection.CallingConventions.VarArgs\"></xref> calling convention is not supported."}],"pos":[121793,121900],"yaml":true},{"content":"The number of elements in <code>parameters</code> does not match the number of parameters in the dynamic method.","nodes":[{"pos":[0,112],"content":"The number of elements in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">parameters</ph><ept id=\"p1\">&lt;/code&gt;</ept> does not match the number of parameters in the dynamic method.","source":"The number of elements in <code>parameters</code> does not match the number of parameters in the dynamic method."}],"pos":[122040,122153],"yaml":true},{"content":"The type of one or more elements of <code>parameters</code> does not match the type of the corresponding parameter of the dynamic method.","nodes":[{"pos":[0,137],"content":"The type of one or more elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">parameters</ph><ept id=\"p1\">&lt;/code&gt;</ept> does not match the type of the corresponding parameter of the dynamic method.","source":"The type of one or more elements of <code>parameters</code> does not match the type of the corresponding parameter of the dynamic method."}],"pos":[122247,122385],"yaml":true},{"content":"The dynamic method is associated with a module, is not anonymously hosted, and was constructed with <code>skipVisibility</code> set to `false`, but the dynamic method accesses members that are not `public` or `internal` (`Friend` in Visual Basic).  \n  \n -or-  \n  \n The dynamic method is anonymously hosted and was constructed with <code>skipVisibility</code> set to `false`, but it accesses members that are not `public`.  \n  \n -or-  \n  \n The dynamic method contains unverifiable code. See the \"Verification\" section in Remarks for <xref href=\"System.Reflection.Emit.DynamicMethod\"></xref>.","nodes":[{"pos":[0,247],"content":"The dynamic method is associated with a module, is not anonymously hosted, and was constructed with <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">skipVisibility</ph><ept id=\"p1\">&lt;/code&gt;</ept> set to <ph id=\"ph2\">`false`</ph>, but the dynamic method accesses members that are not <ph id=\"ph3\">`public`</ph> or <ph id=\"ph4\">`internal`</ph> (<ph id=\"ph5\">`Friend`</ph> in Visual Basic).","source":"The dynamic method is associated with a module, is not anonymously hosted, and was constructed with <code>skipVisibility</code> set to `false`, but the dynamic method accesses members that are not `public` or `internal` (`Friend` in Visual Basic)."},{"pos":[254,258],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[265,421],"content":"The dynamic method is anonymously hosted and was constructed with <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">skipVisibility</ph><ept id=\"p1\">&lt;/code&gt;</ept> set to <ph id=\"ph2\">`false`</ph>, but it accesses members that are not <ph id=\"ph3\">`public`</ph>.","source":"The dynamic method is anonymously hosted and was constructed with <code>skipVisibility</code> set to `false`, but it accesses members that are not `public`."},{"pos":[428,432],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[439,590],"content":"The dynamic method contains unverifiable code. See the \"Verification\" section in Remarks for <xref href=\"System.Reflection.Emit.DynamicMethod\"></xref>.","nodes":[{"content":"The dynamic method contains unverifiable code.","pos":[0,46]},{"content":"See the \"Verification\" section in Remarks for <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.DynamicMethod\"&gt;&lt;/xref&gt;</ph>.","pos":[47,151],"source":" See the \"Verification\" section in Remarks for <xref href=\"System.Reflection.Emit.DynamicMethod\"></xref>."}]}],"pos":[122517,123122],"yaml":true},{"content":"Indicates whether the specified custom attribute type is defined.","nodes":[{"pos":[0,65],"content":"Indicates whether the specified custom attribute type is defined.","nodes":[{"content":"Indicates whether the specified custom attribute type is defined.","pos":[0,65]}]}],"pos":[124325,124391],"yaml":true},{"content":"For dynamic methods, specifying `true` for `inherit` has no effect. Dynamic methods have no inheritance chain.  \n  \n> [!NOTE]\n>  Custom attributes are not currently supported on dynamic methods.","nodes":[{"pos":[0,110],"content":"For dynamic methods, specifying `true` for `inherit` has no effect. Dynamic methods have no inheritance chain.","nodes":[{"content":"For dynamic methods, specifying <ph id=\"ph1\">`true`</ph> for <ph id=\"ph2\">`inherit`</ph> has no effect.","pos":[0,67],"source":"For dynamic methods, specifying `true` for `inherit` has no effect."},{"content":"Dynamic methods have no inheritance chain.","pos":[68,110]}]},{"pos":[118,194],"content":"[!NOTE]\n Custom attributes are not currently supported on dynamic methods.","leadings":["","> "],"nodes":[{"content":"Custom attributes are not currently supported on dynamic methods.","pos":[9,74]}]}],"pos":[124402,124602],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Type\"></xref> representing the type of custom attribute to search for.","nodes":[{"pos":[0,91],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> representing the type of custom attribute to search for.","source":"A <xref href=\"System.Type\"></xref> representing the type of custom attribute to search for."}],"pos":[124775,124867],"yaml":true},{"content":"`true` to search the method's inheritance chain to find the custom attributes; `false` to check only the current method.","nodes":[{"pos":[0,120],"content":"<ph id=\"ph1\">`true`</ph> to search the method's inheritance chain to find the custom attributes; <ph id=\"ph2\">`false`</ph> to check only the current method.","source":"`true` to search the method's inheritance chain to find the custom attributes; `false` to check only the current method."}],"pos":[124931,125054],"yaml":true},{"content":"`true` if the specified custom attribute type is defined; otherwise, `false`.","nodes":[{"pos":[0,77],"content":"<ph id=\"ph1\">`true`</ph> if the specified custom attribute type is defined; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the specified custom attribute type is defined; otherwise, `false`."}],"pos":[125112,125192],"yaml":true},{"content":"Gets a value that indicates whether the current dynamic method is security-critical or security-safe-critical, and therefore can perform critical operations.","nodes":[{"pos":[0,157],"content":"Gets a value that indicates whether the current dynamic method is security-critical or security-safe-critical, and therefore can perform critical operations.","nodes":[{"content":"Gets a value that indicates whether the current dynamic method is security-critical or security-safe-critical, and therefore can perform critical operations.","pos":[0,157]}]}],"pos":[126360,126518],"yaml":true},{"content":"The <xref:System.Reflection.Emit.DynamicMethod.IsSecurityCritical%2A>, <xref:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical%2A>, and <xref:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent%2A> properties report the transparency level of the dynamic method as determined by the common language runtime (CLR). The combinations of these properties are shown in the following table:  \n  \n|Security level|IsSecurityCritical|IsSecuritySafeCritical|IsSecurityTransparent|  \n|--------------------|------------------------|----------------------------|---------------------------|  \n|Critical|`true`|`false`|`false`|  \n|Safe critical|`true`|`true`|`false`|  \n|Transparent|`false`|`false`|`true`|  \n  \n Using these properties is much simpler than examining the security annotations of an assembly and its types, checking the current trust level, and attempting to duplicate the runtime's rules.  \n  \n The transparency of a dynamic method depends on the module it is associated with. If the dynamic method is associated with a type rather than a module, its transparency depends on the module that contains the type. Dynamic methods do not have security annotations, so they are assigned the default transparency for the associated module.  \n  \n-   Anonymously hosted dynamic methods are always transparent, because the system-provided module that contains them is transparent.  \n  \n-   The transparency of a dynamic method that is associated with a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is described in the following table.  \n  \n    |Assembly annotation|Level 1 transparency|Level 2 transparency|  \n    |-------------------------|--------------------------|--------------------------|  \n    |Fully transparent|Transparent|Transparent|  \n    |Fully critical|Critical|Critical|  \n    |Mixed transparency|Transparent|Transparent|  \n    |Security-agnostic|Safe-critical|Critical|  \n  \n     For example, if you associate a dynamic method with a type that is in mscorlib.dll, which has level 2 mixed transparency, the dynamic method is transparent and cannot execute critical code. For information about transparency levels, see [Security-Transparent Code, Level 1](~/docs/framework/misc/security-transparent-code-level-1.md) and [Security-Transparent Code, Level 2](~/docs/framework/misc/security-transparent-code-level-2.md).  \n  \n    > [!NOTE]\n    >  Associating a dynamic method with a module in a trusted level 1 assembly that is security-agnostic, such as System.dll, does not permit elevation of trust. If the grant set of the code that calls the dynamic method does not include the grant set of System.dll (that is, full trust), <xref:System.Security.SecurityException> is thrown when the dynamic method is called.  \n  \n-   The transparency of a dynamic method that is associated with a partially trusted assembly depends on how the assembly is loaded. If the assembly is loaded with partial trust (for example, into a sandboxed application domain), the runtime ignores the security annotations of the assembly. The assembly and all its types and members, including dynamic methods, are treated as transparent. The runtime pays attention to security annotations only if the partial-trust assembly is loaded with full trust (for example, into the default application domain of a desktop application). In that case, the runtime assigns the dynamic method the default transparency for methods according to the assembly's annotations.  \n  \n For more information about reflection emit and transparency, see [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md). For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md).","nodes":[{"pos":[0,400],"content":"The <xref:System.Reflection.Emit.DynamicMethod.IsSecurityCritical%2A>, <xref:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical%2A>, and <xref:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent%2A> properties report the transparency level of the dynamic method as determined by the common language runtime (CLR). The combinations of these properties are shown in the following table:","nodes":[{"content":"The <xref:System.Reflection.Emit.DynamicMethod.IsSecurityCritical%2A>, <xref:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical%2A>, and <xref:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent%2A> properties report the transparency level of the dynamic method as determined by the common language runtime (CLR). The combinations of these properties are shown in the following table:","pos":[0,400],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.DynamicMethod.IsSecurityCritical%2A&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical%2A&gt;</ph>, and <ph id=\"ph3\">&lt;xref:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent%2A&gt;</ph> properties report the transparency level of the dynamic method as determined by the common language runtime (CLR).","pos":[0,329],"source":"The <xref:System.Reflection.Emit.DynamicMethod.IsSecurityCritical%2A>, <xref:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical%2A>, and <xref:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent%2A> properties report the transparency level of the dynamic method as determined by the common language runtime (CLR)."},{"content":"The combinations of these properties are shown in the following table:","pos":[330,400]}]}]},{"pos":[407,421],"content":"Security level","nodes":[{"content":"Security level","pos":[0,14]}]},{"pos":[422,440],"content":"IsSecurityCritical","nodes":[{"content":"IsSecurityCritical","pos":[0,18]}]},{"pos":[441,463],"content":"IsSecuritySafeCritical","nodes":[{"content":"IsSecuritySafeCritical","pos":[0,22]}]},{"pos":[464,485],"content":"IsSecurityTransparent","nodes":[{"content":"IsSecurityTransparent","pos":[0,21]}]},{"pos":[597,605],"content":"Critical","nodes":[{"content":"Critical","pos":[0,8]}]},{"pos":[633,646],"content":"Safe critical","nodes":[{"content":"Safe critical","pos":[0,13]}]},{"pos":[673,684],"content":"Transparent","nodes":[{"content":"Transparent","pos":[0,11]}]},{"pos":[715,906],"content":"Using these properties is much simpler than examining the security annotations of an assembly and its types, checking the current trust level, and attempting to duplicate the runtime's rules.","nodes":[{"content":"Using these properties is much simpler than examining the security annotations of an assembly and its types, checking the current trust level, and attempting to duplicate the runtime's rules.","pos":[0,191]}]},{"pos":[913,1250],"content":"The transparency of a dynamic method depends on the module it is associated with. If the dynamic method is associated with a type rather than a module, its transparency depends on the module that contains the type. Dynamic methods do not have security annotations, so they are assigned the default transparency for the associated module.","nodes":[{"content":"The transparency of a dynamic method depends on the module it is associated with. If the dynamic method is associated with a type rather than a module, its transparency depends on the module that contains the type. Dynamic methods do not have security annotations, so they are assigned the default transparency for the associated module.","pos":[0,337],"nodes":[{"content":"The transparency of a dynamic method depends on the module it is associated with.","pos":[0,81]},{"content":"If the dynamic method is associated with a type rather than a module, its transparency depends on the module that contains the type.","pos":[82,214]},{"content":"Dynamic methods do not have security annotations, so they are assigned the default transparency for the associated module.","pos":[215,337]}]}]},{"pos":[1260,1388],"content":"Anonymously hosted dynamic methods are always transparent, because the system-provided module that contains them is transparent.","nodes":[{"content":"Anonymously hosted dynamic methods are always transparent, because the system-provided module that contains them is transparent.","pos":[0,128]}]},{"pos":[1398,1596],"content":"The transparency of a dynamic method that is associated with a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is described in the following table.","nodes":[{"content":"The transparency of a dynamic method that is associated with a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is described in the following table.","pos":[0,198]}]},{"pos":[1607,1626],"content":"Assembly annotation","nodes":[{"content":"Assembly annotation","pos":[0,19]}]},{"pos":[1627,1647],"content":"Level 1 transparency","nodes":[{"content":"Level 1 transparency","pos":[0,20]}]},{"pos":[1648,1668],"content":"Level 2 transparency","nodes":[{"content":"Level 2 transparency","pos":[0,20]}]},{"pos":[1765,1782],"content":"Fully transparent","nodes":[{"content":"Fully transparent","pos":[0,17]}]},{"pos":[1783,1794],"content":"Transparent","nodes":[{"content":"Transparent","pos":[0,11]}]},{"pos":[1795,1806],"content":"Transparent","nodes":[{"content":"Transparent","pos":[0,11]}]},{"pos":[1815,1829],"content":"Fully critical","nodes":[{"content":"Fully critical","pos":[0,14]}]},{"pos":[1830,1838],"content":"Critical","nodes":[{"content":"Critical","pos":[0,8]}]},{"pos":[1839,1847],"content":"Critical","nodes":[{"content":"Critical","pos":[0,8]}]},{"pos":[1856,1874],"content":"Mixed transparency","nodes":[{"content":"Mixed transparency","pos":[0,18]}]},{"pos":[1875,1886],"content":"Transparent","nodes":[{"content":"Transparent","pos":[0,11]}]},{"pos":[1887,1898],"content":"Transparent","nodes":[{"content":"Transparent","pos":[0,11]}]},{"pos":[1907,1924],"content":"Security-agnostic","nodes":[{"content":"Security-agnostic","pos":[0,17]}]},{"pos":[1925,1938],"content":"Safe-critical","nodes":[{"content":"Safe-critical","pos":[0,13]}]},{"pos":[1939,1947],"content":"Critical","nodes":[{"content":"Critical","pos":[0,8]}]},{"pos":[1959,2394],"content":"For example, if you associate a dynamic method with a type that is in mscorlib.dll, which has level 2 mixed transparency, the dynamic method is transparent and cannot execute critical code. For information about transparency levels, see [Security-Transparent Code, Level 1](~/docs/framework/misc/security-transparent-code-level-1.md) and [Security-Transparent Code, Level 2](~/docs/framework/misc/security-transparent-code-level-2.md).","nodes":[{"content":"For example, if you associate a dynamic method with a type that is in mscorlib.dll, which has level 2 mixed transparency, the dynamic method is transparent and cannot execute critical code.","pos":[0,189]},{"content":"For information about transparency levels, see <bpt id=\"p1\">[</bpt>Security-Transparent Code, Level 1<ept id=\"p1\">](~/docs/framework/misc/security-transparent-code-level-1.md)</ept> and <bpt id=\"p2\">[</bpt>Security-Transparent Code, Level 2<ept id=\"p2\">](~/docs/framework/misc/security-transparent-code-level-2.md)</ept>.","pos":[190,435],"source":" For information about transparency levels, see [Security-Transparent Code, Level 1](~/docs/framework/misc/security-transparent-code-level-1.md) and [Security-Transparent Code, Level 2](~/docs/framework/misc/security-transparent-code-level-2.md)."}]},{"pos":[2406,2789],"content":"[!NOTE]\nAssociating a dynamic method with a module in a trusted level 1 assembly that is security-agnostic, such as System.dll, does not permit elevation of trust. If the grant set of the code that calls the dynamic method does not include the grant set of System.dll (that is, full trust), <xref:System.Security.SecurityException> is thrown when the dynamic method is called.","leadings":["","    >  "],"nodes":[{"content":"Associating a dynamic method with a module in a trusted level 1 assembly that is security-agnostic, such as System.dll, does not permit elevation of trust. If the grant set of the code that calls the dynamic method does not include the grant set of System.dll (that is, full trust), <xref:System.Security.SecurityException> is thrown when the dynamic method is called.","pos":[8,376],"nodes":[{"content":"Associating a dynamic method with a module in a trusted level 1 assembly that is security-agnostic, such as System.dll, does not permit elevation of trust.","pos":[0,155]},{"content":"If the grant set of the code that calls the dynamic method does not include the grant set of System.dll (that is, full trust), <ph id=\"ph1\">&lt;xref:System.Security.SecurityException&gt;</ph> is thrown when the dynamic method is called.","pos":[156,368],"source":" If the grant set of the code that calls the dynamic method does not include the grant set of System.dll (that is, full trust), <xref:System.Security.SecurityException> is thrown when the dynamic method is called."}]}]},{"pos":[2799,3505],"content":"The transparency of a dynamic method that is associated with a partially trusted assembly depends on how the assembly is loaded. If the assembly is loaded with partial trust (for example, into a sandboxed application domain), the runtime ignores the security annotations of the assembly. The assembly and all its types and members, including dynamic methods, are treated as transparent. The runtime pays attention to security annotations only if the partial-trust assembly is loaded with full trust (for example, into the default application domain of a desktop application). In that case, the runtime assigns the dynamic method the default transparency for methods according to the assembly's annotations.","nodes":[{"content":"The transparency of a dynamic method that is associated with a partially trusted assembly depends on how the assembly is loaded. If the assembly is loaded with partial trust (for example, into a sandboxed application domain), the runtime ignores the security annotations of the assembly. The assembly and all its types and members, including dynamic methods, are treated as transparent. The runtime pays attention to security annotations only if the partial-trust assembly is loaded with full trust (for example, into the default application domain of a desktop application). In that case, the runtime assigns the dynamic method the default transparency for methods according to the assembly's annotations.","pos":[0,706],"nodes":[{"content":"The transparency of a dynamic method that is associated with a partially trusted assembly depends on how the assembly is loaded.","pos":[0,128]},{"content":"If the assembly is loaded with partial trust (for example, into a sandboxed application domain), the runtime ignores the security annotations of the assembly.","pos":[129,287]},{"content":"The assembly and all its types and members, including dynamic methods, are treated as transparent.","pos":[288,386]},{"content":"The runtime pays attention to security annotations only if the partial-trust assembly is loaded with full trust (for example, into the default application domain of a desktop application).","pos":[387,575]},{"content":"In that case, the runtime assigns the dynamic method the default transparency for methods according to the assembly's annotations.","pos":[576,706]}]}]},{"pos":[3512,3800],"content":"For more information about reflection emit and transparency, see [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md). For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md).","nodes":[{"content":"For more information about reflection emit and transparency, see <bpt id=\"p1\">[</bpt>Security Issues in Reflection Emit<ept id=\"p1\">](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md)</ept>.","pos":[0,181],"source":"For more information about reflection emit and transparency, see [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md)."},{"content":"For information about transparency, see <bpt id=\"p1\">[</bpt>Security Changes<ept id=\"p1\">](~/docs/framework/security/security-changes.md)</ept>.","pos":[182,288],"source":" For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md)."}]}],"pos":[126529,130362],"yaml":true,"extradata":"MT"},{"content":"`true` if the current dynamic method is security-critical or security-safe-critical; `false` if it is transparent.","nodes":[{"pos":[0,114],"content":"<ph id=\"ph1\">`true`</ph> if the current dynamic method is security-critical or security-safe-critical; <ph id=\"ph2\">`false`</ph> if it is transparent.","source":"`true` if the current dynamic method is security-critical or security-safe-critical; `false` if it is transparent."}],"pos":[130552,130669],"yaml":true},{"content":"The dynamic method doesn't have a method body.","nodes":[{"pos":[0,46],"content":"The dynamic method doesn't have a method body.","nodes":[{"content":"The dynamic method doesn't have a method body.","pos":[0,46]}]}],"pos":[130862,130909],"yaml":true},{"content":"Gets a value that indicates whether the current dynamic method is security-safe-critical at the current trust level; that is, whether it can perform critical operations and can be accessed by transparent code.","nodes":[{"pos":[0,209],"content":"Gets a value that indicates whether the current dynamic method is security-safe-critical at the current trust level; that is, whether it can perform critical operations and can be accessed by transparent code.","nodes":[{"content":"Gets a value that indicates whether the current dynamic method is security-safe-critical at the current trust level; that is, whether it can perform critical operations and can be accessed by transparent code.","pos":[0,209]}]}],"pos":[131976,132186],"yaml":true},{"content":"The <xref:System.Reflection.Emit.DynamicMethod.IsSecurityCritical%2A>, <xref:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical%2A>, and <xref:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent%2A> properties report the transparency level of the dynamic method as determined by the common language runtime (CLR). The combinations of these properties are shown in the following table:  \n  \n|Security level|IsSecurityCritical|IsSecuritySafeCritical|IsSecurityTransparent|  \n|--------------------|------------------------|----------------------------|---------------------------|  \n|Critical|`true`|`false`|`false`|  \n|Safe critical|`true`|`true`|`false`|  \n|Transparent|`false`|`false`|`true`|  \n  \n Using these properties is much simpler than examining the security annotations of an assembly and its types, checking the current trust level, and attempting to duplicate the runtime's rules.  \n  \n The transparency of a dynamic method depends on the module it is associated with. If the dynamic method is associated with a type rather than a module, its transparency depends on the module that contains the type. Dynamic methods do not have security annotations, so they are assigned the default transparency for the associated module.  \n  \n-   Anonymously hosted dynamic methods are always transparent, because the system-provided module that contains them is transparent.  \n  \n-   The transparency of a dynamic method that is associated with a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is described in the following table.  \n  \n    |Assembly annotation|Level 1 transparency|Level 2 transparency|  \n    |-------------------------|--------------------------|--------------------------|  \n    |Fully transparent|Transparent|Transparent|  \n    |Fully critical|Critical|Critical|  \n    |Mixed transparency|Transparent|Transparent|  \n    |Security-agnostic|Safe-critical|Critical|  \n  \n     For example, if you associate a dynamic method with a type that is in mscorlib.dll, which has level 2 mixed transparency, the dynamic method is transparent and cannot execute critical code. For information about transparency levels, see [Security-Transparent Code, Level 1](~/docs/framework/misc/security-transparent-code-level-1.md) and [Security-Transparent Code, Level 2](~/docs/framework/misc/security-transparent-code-level-2.md).  \n  \n    > [!NOTE]\n    >  Associating a dynamic method with a module in a trusted level 1 assembly that is security-agnostic, such as System.dll, does not permit elevation of trust. If the grant set of the code that calls the dynamic method does not include the grant set of System.dll (that is, full trust), <xref:System.Security.SecurityException> is thrown when the dynamic method is called.  \n  \n-   The transparency of a dynamic method that is associated with a partially trusted assembly depends on how the assembly is loaded. If the assembly is loaded with partial trust (for example, into a sandboxed application domain), the runtime ignores the security annotations of the assembly. The assembly and all its types and members, including dynamic methods, are treated as transparent. The runtime pays attention to security annotations only if the partial-trust assembly is loaded with full trust (for example, into the default application domain of a desktop application). In that case, the runtime assigns the dynamic method the default transparency for methods according to the assembly's annotations.  \n  \n For more information about reflection emit and transparency, see [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md). For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md).","nodes":[{"pos":[0,400],"content":"The <xref:System.Reflection.Emit.DynamicMethod.IsSecurityCritical%2A>, <xref:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical%2A>, and <xref:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent%2A> properties report the transparency level of the dynamic method as determined by the common language runtime (CLR). The combinations of these properties are shown in the following table:","nodes":[{"content":"The <xref:System.Reflection.Emit.DynamicMethod.IsSecurityCritical%2A>, <xref:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical%2A>, and <xref:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent%2A> properties report the transparency level of the dynamic method as determined by the common language runtime (CLR). The combinations of these properties are shown in the following table:","pos":[0,400],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.DynamicMethod.IsSecurityCritical%2A&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical%2A&gt;</ph>, and <ph id=\"ph3\">&lt;xref:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent%2A&gt;</ph> properties report the transparency level of the dynamic method as determined by the common language runtime (CLR).","pos":[0,329],"source":"The <xref:System.Reflection.Emit.DynamicMethod.IsSecurityCritical%2A>, <xref:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical%2A>, and <xref:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent%2A> properties report the transparency level of the dynamic method as determined by the common language runtime (CLR)."},{"content":"The combinations of these properties are shown in the following table:","pos":[330,400]}]}]},{"pos":[407,421],"content":"Security level","nodes":[{"content":"Security level","pos":[0,14]}]},{"pos":[422,440],"content":"IsSecurityCritical","nodes":[{"content":"IsSecurityCritical","pos":[0,18]}]},{"pos":[441,463],"content":"IsSecuritySafeCritical","nodes":[{"content":"IsSecuritySafeCritical","pos":[0,22]}]},{"pos":[464,485],"content":"IsSecurityTransparent","nodes":[{"content":"IsSecurityTransparent","pos":[0,21]}]},{"pos":[597,605],"content":"Critical","nodes":[{"content":"Critical","pos":[0,8]}]},{"pos":[633,646],"content":"Safe critical","nodes":[{"content":"Safe critical","pos":[0,13]}]},{"pos":[673,684],"content":"Transparent","nodes":[{"content":"Transparent","pos":[0,11]}]},{"pos":[715,906],"content":"Using these properties is much simpler than examining the security annotations of an assembly and its types, checking the current trust level, and attempting to duplicate the runtime's rules.","nodes":[{"content":"Using these properties is much simpler than examining the security annotations of an assembly and its types, checking the current trust level, and attempting to duplicate the runtime's rules.","pos":[0,191]}]},{"pos":[913,1250],"content":"The transparency of a dynamic method depends on the module it is associated with. If the dynamic method is associated with a type rather than a module, its transparency depends on the module that contains the type. Dynamic methods do not have security annotations, so they are assigned the default transparency for the associated module.","nodes":[{"content":"The transparency of a dynamic method depends on the module it is associated with. If the dynamic method is associated with a type rather than a module, its transparency depends on the module that contains the type. Dynamic methods do not have security annotations, so they are assigned the default transparency for the associated module.","pos":[0,337],"nodes":[{"content":"The transparency of a dynamic method depends on the module it is associated with.","pos":[0,81]},{"content":"If the dynamic method is associated with a type rather than a module, its transparency depends on the module that contains the type.","pos":[82,214]},{"content":"Dynamic methods do not have security annotations, so they are assigned the default transparency for the associated module.","pos":[215,337]}]}]},{"pos":[1260,1388],"content":"Anonymously hosted dynamic methods are always transparent, because the system-provided module that contains them is transparent.","nodes":[{"content":"Anonymously hosted dynamic methods are always transparent, because the system-provided module that contains them is transparent.","pos":[0,128]}]},{"pos":[1398,1596],"content":"The transparency of a dynamic method that is associated with a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is described in the following table.","nodes":[{"content":"The transparency of a dynamic method that is associated with a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is described in the following table.","pos":[0,198]}]},{"pos":[1607,1626],"content":"Assembly annotation","nodes":[{"content":"Assembly annotation","pos":[0,19]}]},{"pos":[1627,1647],"content":"Level 1 transparency","nodes":[{"content":"Level 1 transparency","pos":[0,20]}]},{"pos":[1648,1668],"content":"Level 2 transparency","nodes":[{"content":"Level 2 transparency","pos":[0,20]}]},{"pos":[1765,1782],"content":"Fully transparent","nodes":[{"content":"Fully transparent","pos":[0,17]}]},{"pos":[1783,1794],"content":"Transparent","nodes":[{"content":"Transparent","pos":[0,11]}]},{"pos":[1795,1806],"content":"Transparent","nodes":[{"content":"Transparent","pos":[0,11]}]},{"pos":[1815,1829],"content":"Fully critical","nodes":[{"content":"Fully critical","pos":[0,14]}]},{"pos":[1830,1838],"content":"Critical","nodes":[{"content":"Critical","pos":[0,8]}]},{"pos":[1839,1847],"content":"Critical","nodes":[{"content":"Critical","pos":[0,8]}]},{"pos":[1856,1874],"content":"Mixed transparency","nodes":[{"content":"Mixed transparency","pos":[0,18]}]},{"pos":[1875,1886],"content":"Transparent","nodes":[{"content":"Transparent","pos":[0,11]}]},{"pos":[1887,1898],"content":"Transparent","nodes":[{"content":"Transparent","pos":[0,11]}]},{"pos":[1907,1924],"content":"Security-agnostic","nodes":[{"content":"Security-agnostic","pos":[0,17]}]},{"pos":[1925,1938],"content":"Safe-critical","nodes":[{"content":"Safe-critical","pos":[0,13]}]},{"pos":[1939,1947],"content":"Critical","nodes":[{"content":"Critical","pos":[0,8]}]},{"pos":[1959,2394],"content":"For example, if you associate a dynamic method with a type that is in mscorlib.dll, which has level 2 mixed transparency, the dynamic method is transparent and cannot execute critical code. For information about transparency levels, see [Security-Transparent Code, Level 1](~/docs/framework/misc/security-transparent-code-level-1.md) and [Security-Transparent Code, Level 2](~/docs/framework/misc/security-transparent-code-level-2.md).","nodes":[{"content":"For example, if you associate a dynamic method with a type that is in mscorlib.dll, which has level 2 mixed transparency, the dynamic method is transparent and cannot execute critical code.","pos":[0,189]},{"content":"For information about transparency levels, see <bpt id=\"p1\">[</bpt>Security-Transparent Code, Level 1<ept id=\"p1\">](~/docs/framework/misc/security-transparent-code-level-1.md)</ept> and <bpt id=\"p2\">[</bpt>Security-Transparent Code, Level 2<ept id=\"p2\">](~/docs/framework/misc/security-transparent-code-level-2.md)</ept>.","pos":[190,435],"source":" For information about transparency levels, see [Security-Transparent Code, Level 1](~/docs/framework/misc/security-transparent-code-level-1.md) and [Security-Transparent Code, Level 2](~/docs/framework/misc/security-transparent-code-level-2.md)."}]},{"pos":[2406,2789],"content":"[!NOTE]\nAssociating a dynamic method with a module in a trusted level 1 assembly that is security-agnostic, such as System.dll, does not permit elevation of trust. If the grant set of the code that calls the dynamic method does not include the grant set of System.dll (that is, full trust), <xref:System.Security.SecurityException> is thrown when the dynamic method is called.","leadings":["","    >  "],"nodes":[{"content":"Associating a dynamic method with a module in a trusted level 1 assembly that is security-agnostic, such as System.dll, does not permit elevation of trust. If the grant set of the code that calls the dynamic method does not include the grant set of System.dll (that is, full trust), <xref:System.Security.SecurityException> is thrown when the dynamic method is called.","pos":[8,376],"nodes":[{"content":"Associating a dynamic method with a module in a trusted level 1 assembly that is security-agnostic, such as System.dll, does not permit elevation of trust.","pos":[0,155]},{"content":"If the grant set of the code that calls the dynamic method does not include the grant set of System.dll (that is, full trust), <ph id=\"ph1\">&lt;xref:System.Security.SecurityException&gt;</ph> is thrown when the dynamic method is called.","pos":[156,368],"source":" If the grant set of the code that calls the dynamic method does not include the grant set of System.dll (that is, full trust), <xref:System.Security.SecurityException> is thrown when the dynamic method is called."}]}]},{"pos":[2799,3505],"content":"The transparency of a dynamic method that is associated with a partially trusted assembly depends on how the assembly is loaded. If the assembly is loaded with partial trust (for example, into a sandboxed application domain), the runtime ignores the security annotations of the assembly. The assembly and all its types and members, including dynamic methods, are treated as transparent. The runtime pays attention to security annotations only if the partial-trust assembly is loaded with full trust (for example, into the default application domain of a desktop application). In that case, the runtime assigns the dynamic method the default transparency for methods according to the assembly's annotations.","nodes":[{"content":"The transparency of a dynamic method that is associated with a partially trusted assembly depends on how the assembly is loaded. If the assembly is loaded with partial trust (for example, into a sandboxed application domain), the runtime ignores the security annotations of the assembly. The assembly and all its types and members, including dynamic methods, are treated as transparent. The runtime pays attention to security annotations only if the partial-trust assembly is loaded with full trust (for example, into the default application domain of a desktop application). In that case, the runtime assigns the dynamic method the default transparency for methods according to the assembly's annotations.","pos":[0,706],"nodes":[{"content":"The transparency of a dynamic method that is associated with a partially trusted assembly depends on how the assembly is loaded.","pos":[0,128]},{"content":"If the assembly is loaded with partial trust (for example, into a sandboxed application domain), the runtime ignores the security annotations of the assembly.","pos":[129,287]},{"content":"The assembly and all its types and members, including dynamic methods, are treated as transparent.","pos":[288,386]},{"content":"The runtime pays attention to security annotations only if the partial-trust assembly is loaded with full trust (for example, into the default application domain of a desktop application).","pos":[387,575]},{"content":"In that case, the runtime assigns the dynamic method the default transparency for methods according to the assembly's annotations.","pos":[576,706]}]}]},{"pos":[3512,3800],"content":"For more information about reflection emit and transparency, see [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md). For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md).","nodes":[{"content":"For more information about reflection emit and transparency, see <bpt id=\"p1\">[</bpt>Security Issues in Reflection Emit<ept id=\"p1\">](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md)</ept>.","pos":[0,181],"source":"For more information about reflection emit and transparency, see [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md)."},{"content":"For information about transparency, see <bpt id=\"p1\">[</bpt>Security Changes<ept id=\"p1\">](~/docs/framework/security/security-changes.md)</ept>.","pos":[182,288],"source":" For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md)."}]}],"pos":[132197,136030],"yaml":true,"extradata":"MT"},{"content":"`true` if the dynamic method is security-safe-critical at the current trust level; `false` if it is security-critical or transparent.","nodes":[{"pos":[0,133],"content":"<ph id=\"ph1\">`true`</ph> if the dynamic method is security-safe-critical at the current trust level; <ph id=\"ph2\">`false`</ph> if it is security-critical or transparent.","source":"`true` if the dynamic method is security-safe-critical at the current trust level; `false` if it is security-critical or transparent."}],"pos":[136224,136360],"yaml":true},{"content":"The dynamic method doesn't have a method body.","nodes":[{"pos":[0,46],"content":"The dynamic method doesn't have a method body.","nodes":[{"content":"The dynamic method doesn't have a method body.","pos":[0,46]}]}],"pos":[136557,136604],"yaml":true},{"content":"Gets a value that indicates whether the current dynamic method is transparent at the current trust level, and therefore cannot perform critical operations.","nodes":[{"pos":[0,155],"content":"Gets a value that indicates whether the current dynamic method is transparent at the current trust level, and therefore cannot perform critical operations.","nodes":[{"content":"Gets a value that indicates whether the current dynamic method is transparent at the current trust level, and therefore cannot perform critical operations.","pos":[0,155]}]}],"pos":[137665,137821],"yaml":true},{"content":"The <xref:System.Reflection.Emit.DynamicMethod.IsSecurityCritical%2A>, <xref:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical%2A>, and <xref:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent%2A> properties report the transparency level of the dynamic method as determined by the common language runtime (CLR). The combinations of these properties are shown in the following table:  \n  \n|Security level|IsSecurityCritical|IsSecuritySafeCritical|IsSecurityTransparent|  \n|--------------------|------------------------|----------------------------|---------------------------|  \n|Critical|`true`|`false`|`false`|  \n|Safe critical|`true`|`true`|`false`|  \n|Transparent|`false`|`false`|`true`|  \n  \n Using these properties is much simpler than examining the security annotations of an assembly and its types, checking the current trust level, and attempting to duplicate the runtime's rules.  \n  \n The transparency of a dynamic method depends on the module it is associated with. If the dynamic method is associated with a type rather than a module, its transparency depends on the module that contains the type. Dynamic methods do not have security annotations, so they are assigned the default transparency for the associated module.  \n  \n-   Anonymously hosted dynamic methods are always transparent, because the system-provided module that contains them is transparent.  \n  \n-   The transparency of a dynamic method that is associated with a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is described in the following table.  \n  \n    |Assembly annotation|Level 1 transparency|Level 2 transparency|  \n    |-------------------------|--------------------------|--------------------------|  \n    |Fully transparent|Transparent|Transparent|  \n    |Fully critical|Critical|Critical|  \n    |Mixed transparency|Transparent|Transparent|  \n    |Security-agnostic|Safe-critical|Critical|  \n  \n     For example, if you associate a dynamic method with a type that is in mscorlib.dll, which has level 2 mixed transparency, the dynamic method is transparent and cannot execute critical code. For information about transparency levels, see [Security-Transparent Code, Level 1](~/docs/framework/misc/security-transparent-code-level-1.md) and [Security-Transparent Code, Level 2](~/docs/framework/misc/security-transparent-code-level-2.md).  \n  \n    > [!NOTE]\n    >  Associating a dynamic method with a module in a trusted level 1 assembly that is security-agnostic, such as System.dll, does not permit elevation of trust. If the grant set of the code that calls the dynamic method does not include the grant set of System.dll (that is, full trust), <xref:System.Security.SecurityException> is thrown when the dynamic method is called.  \n  \n-   The transparency of a dynamic method that is associated with a partially trusted assembly depends on how the assembly is loaded. If the assembly is loaded with partial trust (for example, into a sandboxed application domain), the runtime ignores the security annotations of the assembly. The assembly and all its types and members, including dynamic methods, are treated as transparent. The runtime pays attention to security annotations only if the partial-trust assembly is loaded with full trust (for example, into the default application domain of a desktop application). In that case, the runtime assigns the dynamic method the default transparency for methods according to the assembly's annotations.  \n  \n For more information about reflection emit and transparency, see [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md). For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md).","nodes":[{"pos":[0,400],"content":"The <xref:System.Reflection.Emit.DynamicMethod.IsSecurityCritical%2A>, <xref:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical%2A>, and <xref:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent%2A> properties report the transparency level of the dynamic method as determined by the common language runtime (CLR). The combinations of these properties are shown in the following table:","nodes":[{"content":"The <xref:System.Reflection.Emit.DynamicMethod.IsSecurityCritical%2A>, <xref:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical%2A>, and <xref:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent%2A> properties report the transparency level of the dynamic method as determined by the common language runtime (CLR). The combinations of these properties are shown in the following table:","pos":[0,400],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.DynamicMethod.IsSecurityCritical%2A&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical%2A&gt;</ph>, and <ph id=\"ph3\">&lt;xref:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent%2A&gt;</ph> properties report the transparency level of the dynamic method as determined by the common language runtime (CLR).","pos":[0,329],"source":"The <xref:System.Reflection.Emit.DynamicMethod.IsSecurityCritical%2A>, <xref:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical%2A>, and <xref:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent%2A> properties report the transparency level of the dynamic method as determined by the common language runtime (CLR)."},{"content":"The combinations of these properties are shown in the following table:","pos":[330,400]}]}]},{"pos":[407,421],"content":"Security level","nodes":[{"content":"Security level","pos":[0,14]}]},{"pos":[422,440],"content":"IsSecurityCritical","nodes":[{"content":"IsSecurityCritical","pos":[0,18]}]},{"pos":[441,463],"content":"IsSecuritySafeCritical","nodes":[{"content":"IsSecuritySafeCritical","pos":[0,22]}]},{"pos":[464,485],"content":"IsSecurityTransparent","nodes":[{"content":"IsSecurityTransparent","pos":[0,21]}]},{"pos":[597,605],"content":"Critical","nodes":[{"content":"Critical","pos":[0,8]}]},{"pos":[633,646],"content":"Safe critical","nodes":[{"content":"Safe critical","pos":[0,13]}]},{"pos":[673,684],"content":"Transparent","nodes":[{"content":"Transparent","pos":[0,11]}]},{"pos":[715,906],"content":"Using these properties is much simpler than examining the security annotations of an assembly and its types, checking the current trust level, and attempting to duplicate the runtime's rules.","nodes":[{"content":"Using these properties is much simpler than examining the security annotations of an assembly and its types, checking the current trust level, and attempting to duplicate the runtime's rules.","pos":[0,191]}]},{"pos":[913,1250],"content":"The transparency of a dynamic method depends on the module it is associated with. If the dynamic method is associated with a type rather than a module, its transparency depends on the module that contains the type. Dynamic methods do not have security annotations, so they are assigned the default transparency for the associated module.","nodes":[{"content":"The transparency of a dynamic method depends on the module it is associated with. If the dynamic method is associated with a type rather than a module, its transparency depends on the module that contains the type. Dynamic methods do not have security annotations, so they are assigned the default transparency for the associated module.","pos":[0,337],"nodes":[{"content":"The transparency of a dynamic method depends on the module it is associated with.","pos":[0,81]},{"content":"If the dynamic method is associated with a type rather than a module, its transparency depends on the module that contains the type.","pos":[82,214]},{"content":"Dynamic methods do not have security annotations, so they are assigned the default transparency for the associated module.","pos":[215,337]}]}]},{"pos":[1260,1388],"content":"Anonymously hosted dynamic methods are always transparent, because the system-provided module that contains them is transparent.","nodes":[{"content":"Anonymously hosted dynamic methods are always transparent, because the system-provided module that contains them is transparent.","pos":[0,128]}]},{"pos":[1398,1596],"content":"The transparency of a dynamic method that is associated with a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is described in the following table.","nodes":[{"content":"The transparency of a dynamic method that is associated with a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is described in the following table.","pos":[0,198]}]},{"pos":[1607,1626],"content":"Assembly annotation","nodes":[{"content":"Assembly annotation","pos":[0,19]}]},{"pos":[1627,1647],"content":"Level 1 transparency","nodes":[{"content":"Level 1 transparency","pos":[0,20]}]},{"pos":[1648,1668],"content":"Level 2 transparency","nodes":[{"content":"Level 2 transparency","pos":[0,20]}]},{"pos":[1765,1782],"content":"Fully transparent","nodes":[{"content":"Fully transparent","pos":[0,17]}]},{"pos":[1783,1794],"content":"Transparent","nodes":[{"content":"Transparent","pos":[0,11]}]},{"pos":[1795,1806],"content":"Transparent","nodes":[{"content":"Transparent","pos":[0,11]}]},{"pos":[1815,1829],"content":"Fully critical","nodes":[{"content":"Fully critical","pos":[0,14]}]},{"pos":[1830,1838],"content":"Critical","nodes":[{"content":"Critical","pos":[0,8]}]},{"pos":[1839,1847],"content":"Critical","nodes":[{"content":"Critical","pos":[0,8]}]},{"pos":[1856,1874],"content":"Mixed transparency","nodes":[{"content":"Mixed transparency","pos":[0,18]}]},{"pos":[1875,1886],"content":"Transparent","nodes":[{"content":"Transparent","pos":[0,11]}]},{"pos":[1887,1898],"content":"Transparent","nodes":[{"content":"Transparent","pos":[0,11]}]},{"pos":[1907,1924],"content":"Security-agnostic","nodes":[{"content":"Security-agnostic","pos":[0,17]}]},{"pos":[1925,1938],"content":"Safe-critical","nodes":[{"content":"Safe-critical","pos":[0,13]}]},{"pos":[1939,1947],"content":"Critical","nodes":[{"content":"Critical","pos":[0,8]}]},{"pos":[1959,2394],"content":"For example, if you associate a dynamic method with a type that is in mscorlib.dll, which has level 2 mixed transparency, the dynamic method is transparent and cannot execute critical code. For information about transparency levels, see [Security-Transparent Code, Level 1](~/docs/framework/misc/security-transparent-code-level-1.md) and [Security-Transparent Code, Level 2](~/docs/framework/misc/security-transparent-code-level-2.md).","nodes":[{"content":"For example, if you associate a dynamic method with a type that is in mscorlib.dll, which has level 2 mixed transparency, the dynamic method is transparent and cannot execute critical code.","pos":[0,189]},{"content":"For information about transparency levels, see <bpt id=\"p1\">[</bpt>Security-Transparent Code, Level 1<ept id=\"p1\">](~/docs/framework/misc/security-transparent-code-level-1.md)</ept> and <bpt id=\"p2\">[</bpt>Security-Transparent Code, Level 2<ept id=\"p2\">](~/docs/framework/misc/security-transparent-code-level-2.md)</ept>.","pos":[190,435],"source":" For information about transparency levels, see [Security-Transparent Code, Level 1](~/docs/framework/misc/security-transparent-code-level-1.md) and [Security-Transparent Code, Level 2](~/docs/framework/misc/security-transparent-code-level-2.md)."}]},{"pos":[2406,2789],"content":"[!NOTE]\nAssociating a dynamic method with a module in a trusted level 1 assembly that is security-agnostic, such as System.dll, does not permit elevation of trust. If the grant set of the code that calls the dynamic method does not include the grant set of System.dll (that is, full trust), <xref:System.Security.SecurityException> is thrown when the dynamic method is called.","leadings":["","    >  "],"nodes":[{"content":"Associating a dynamic method with a module in a trusted level 1 assembly that is security-agnostic, such as System.dll, does not permit elevation of trust. If the grant set of the code that calls the dynamic method does not include the grant set of System.dll (that is, full trust), <xref:System.Security.SecurityException> is thrown when the dynamic method is called.","pos":[8,376],"nodes":[{"content":"Associating a dynamic method with a module in a trusted level 1 assembly that is security-agnostic, such as System.dll, does not permit elevation of trust.","pos":[0,155]},{"content":"If the grant set of the code that calls the dynamic method does not include the grant set of System.dll (that is, full trust), <ph id=\"ph1\">&lt;xref:System.Security.SecurityException&gt;</ph> is thrown when the dynamic method is called.","pos":[156,368],"source":" If the grant set of the code that calls the dynamic method does not include the grant set of System.dll (that is, full trust), <xref:System.Security.SecurityException> is thrown when the dynamic method is called."}]}]},{"pos":[2799,3505],"content":"The transparency of a dynamic method that is associated with a partially trusted assembly depends on how the assembly is loaded. If the assembly is loaded with partial trust (for example, into a sandboxed application domain), the runtime ignores the security annotations of the assembly. The assembly and all its types and members, including dynamic methods, are treated as transparent. The runtime pays attention to security annotations only if the partial-trust assembly is loaded with full trust (for example, into the default application domain of a desktop application). In that case, the runtime assigns the dynamic method the default transparency for methods according to the assembly's annotations.","nodes":[{"content":"The transparency of a dynamic method that is associated with a partially trusted assembly depends on how the assembly is loaded. If the assembly is loaded with partial trust (for example, into a sandboxed application domain), the runtime ignores the security annotations of the assembly. The assembly and all its types and members, including dynamic methods, are treated as transparent. The runtime pays attention to security annotations only if the partial-trust assembly is loaded with full trust (for example, into the default application domain of a desktop application). In that case, the runtime assigns the dynamic method the default transparency for methods according to the assembly's annotations.","pos":[0,706],"nodes":[{"content":"The transparency of a dynamic method that is associated with a partially trusted assembly depends on how the assembly is loaded.","pos":[0,128]},{"content":"If the assembly is loaded with partial trust (for example, into a sandboxed application domain), the runtime ignores the security annotations of the assembly.","pos":[129,287]},{"content":"The assembly and all its types and members, including dynamic methods, are treated as transparent.","pos":[288,386]},{"content":"The runtime pays attention to security annotations only if the partial-trust assembly is loaded with full trust (for example, into the default application domain of a desktop application).","pos":[387,575]},{"content":"In that case, the runtime assigns the dynamic method the default transparency for methods according to the assembly's annotations.","pos":[576,706]}]}]},{"pos":[3512,3800],"content":"For more information about reflection emit and transparency, see [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md). For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md).","nodes":[{"content":"For more information about reflection emit and transparency, see <bpt id=\"p1\">[</bpt>Security Issues in Reflection Emit<ept id=\"p1\">](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md)</ept>.","pos":[0,181],"source":"For more information about reflection emit and transparency, see [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md)."},{"content":"For information about transparency, see <bpt id=\"p1\">[</bpt>Security Changes<ept id=\"p1\">](~/docs/framework/security/security-changes.md)</ept>.","pos":[182,288],"source":" For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md)."}]}],"pos":[137832,141665],"yaml":true,"extradata":"MT"},{"content":"`true` if the dynamic method is security-transparent at the current trust level; otherwise, `false`.","nodes":[{"pos":[0,100],"content":"<ph id=\"ph1\">`true`</ph> if the dynamic method is security-transparent at the current trust level; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the dynamic method is security-transparent at the current trust level; otherwise, `false`."}],"pos":[141858,141961],"yaml":true},{"content":"The dynamic method doesn't have a method body.","nodes":[{"pos":[0,46],"content":"The dynamic method doesn't have a method body.","nodes":[{"content":"The dynamic method doesn't have a method body.","pos":[0,46]}]}],"pos":[142157,142204],"yaml":true},{"content":"Not supported for dynamic methods.","nodes":[{"pos":[0,34],"content":"Not supported for dynamic methods.","nodes":[{"content":"Not supported for dynamic methods.","pos":[0,34]}]}],"pos":[143250,143285],"yaml":true},{"content":"Not supported for dynamic methods.","nodes":[{"pos":[0,34],"content":"Not supported for dynamic methods.","nodes":[{"content":"Not supported for dynamic methods.","pos":[0,34]}]}],"pos":[143436,143471],"yaml":true},{"content":"Not allowed for dynamic methods.","nodes":[{"pos":[0,32],"content":"Not allowed for dynamic methods.","nodes":[{"content":"Not allowed for dynamic methods.","pos":[0,32]}]}],"pos":[143658,143691],"yaml":true},{"content":"Gets the module with which the dynamic method is logically associated.","nodes":[{"pos":[0,70],"content":"Gets the module with which the dynamic method is logically associated.","nodes":[{"content":"Gets the module with which the dynamic method is logically associated.","pos":[0,70]}]}],"pos":[145690,145761],"yaml":true},{"content":"If a module was specified when the dynamic method was created, this property returns that module. If a type was specified as the owner when the dynamic method was created, this property returns the module which contains that type.","nodes":[{"pos":[0,230],"content":"If a module was specified when the dynamic method was created, this property returns that module. If a type was specified as the owner when the dynamic method was created, this property returns the module which contains that type.","nodes":[{"content":"If a module was specified when the dynamic method was created, this property returns that module. If a type was specified as the owner when the dynamic method was created, this property returns the module which contains that type.","pos":[0,230],"nodes":[{"content":"If a module was specified when the dynamic method was created, this property returns that module.","pos":[0,97]},{"content":"If a type was specified as the owner when the dynamic method was created, this property returns the module which contains that type.","pos":[98,230]}]}]}],"pos":[145772,146003],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Reflection.Module\"></xref> with which the current dynamic method is associated.","nodes":[{"pos":[0,102],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Module\"&gt;&lt;/xref&gt;</ph> with which the current dynamic method is associated.","source":"The <xref href=\"System.Reflection.Module\"></xref> with which the current dynamic method is associated."}],"pos":[146823,146926],"yaml":true},{"content":"Gets the name of the dynamic method.","nodes":[{"pos":[0,36],"content":"Gets the name of the dynamic method.","nodes":[{"content":"Gets the name of the dynamic method.","pos":[0,36]}]}],"pos":[148014,148051],"yaml":true},{"content":"> [!NOTE]\n>  It is not necessary to name dynamic methods.","nodes":[{"pos":[2,57],"content":"[!NOTE]\n It is not necessary to name dynamic methods.","leadings":["","> "],"nodes":[{"content":"It is not necessary to name dynamic methods.","pos":[9,53]}]}],"pos":[148062,148132],"yaml":true,"extradata":"MT"},{"content":"The simple name of the method.","nodes":[{"pos":[0,30],"content":"The simple name of the method.","nodes":[{"content":"The simple name of the method.","pos":[0,30]}]}],"pos":[148864,148895],"yaml":true},{"content":"Gets the class that was used in reflection to obtain the method.","nodes":[{"pos":[0,64],"content":"Gets the class that was used in reflection to obtain the method.","nodes":[{"content":"Gets the class that was used in reflection to obtain the method.","pos":[0,64]}]}],"pos":[150131,150196],"yaml":true},{"content":"This property always returns `null` for dynamic methods.","nodes":[{"pos":[0,56],"content":"This property always returns <ph id=\"ph1\">`null`</ph> for dynamic methods.","source":"This property always returns `null` for dynamic methods."}],"pos":[150207,150264],"yaml":true,"extradata":"MT"},{"content":"Always `null`.","nodes":[{"pos":[0,14],"content":"Always <ph id=\"ph1\">`null`</ph>.","source":"Always `null`."}],"pos":[151010,151025],"yaml":true},{"content":"Gets the return parameter of the dynamic method.","nodes":[{"pos":[0,48],"content":"Gets the return parameter of the dynamic method.","nodes":[{"content":"Gets the return parameter of the dynamic method.","pos":[0,48]}]}],"pos":[152218,152267],"yaml":true},{"content":"This property always returns `null` for dynamic methods.","nodes":[{"pos":[0,56],"content":"This property always returns <ph id=\"ph1\">`null`</ph> for dynamic methods.","source":"This property always returns `null` for dynamic methods."}],"pos":[152278,152335],"yaml":true,"extradata":"MT"},{"content":"Always `null`.","nodes":[{"pos":[0,14],"content":"Always <ph id=\"ph1\">`null`</ph>.","source":"Always `null`."}],"pos":[152506,152521],"yaml":true},{"content":"Gets the type of return value for the dynamic method.","nodes":[{"pos":[0,53],"content":"Gets the type of return value for the dynamic method.","nodes":[{"content":"Gets the type of return value for the dynamic method.","pos":[0,53]}]}],"pos":[153750,153804],"yaml":true},{"content":"If `null` was specified for the return type when the dynamic method was created, this property returns <xref:System.Void?displayProperty=fullName>.","nodes":[{"pos":[0,147],"content":"If <ph id=\"ph1\">`null`</ph> was specified for the return type when the dynamic method was created, this property returns <ph id=\"ph2\">&lt;xref:System.Void?displayProperty=fullName&gt;</ph>.","source":"If `null` was specified for the return type when the dynamic method was created, this property returns <xref:System.Void?displayProperty=fullName>."}],"pos":[153815,153963],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Type\"></xref> representing the type of the return value of the current method; <xref href=\"System.Void\"></xref> if the method has no return type.","nodes":[{"pos":[0,166],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> representing the type of the return value of the current method; <ph id=\"ph2\">&lt;xref href=\"System.Void\"&gt;&lt;/xref&gt;</ph> if the method has no return type.","source":"A <xref href=\"System.Type\"></xref> representing the type of the return value of the current method; <xref href=\"System.Void\"></xref> if the method has no return type."}],"pos":[154703,154870],"yaml":true},{"content":"Gets the custom attributes of the return type for the dynamic method.","nodes":[{"pos":[0,69],"content":"Gets the custom attributes of the return type for the dynamic method.","nodes":[{"content":"Gets the custom attributes of the return type for the dynamic method.","pos":[0,69]}]}],"pos":[156190,156260],"yaml":true},{"content":"Custom attributes are not supported on the return type of a dynamic method, so the array of custom attributes returned by the <xref:System.Reflection.ICustomAttributeProvider.GetCustomAttributes%2A> method is always empty.","nodes":[{"pos":[0,222],"content":"Custom attributes are not supported on the return type of a dynamic method, so the array of custom attributes returned by the <xref:System.Reflection.ICustomAttributeProvider.GetCustomAttributes%2A> method is always empty.","nodes":[{"content":"Custom attributes are not supported on the return type of a dynamic method, so the array of custom attributes returned by the <ph id=\"ph1\">&lt;xref:System.Reflection.ICustomAttributeProvider.GetCustomAttributes%2A&gt;</ph> method is always empty.","pos":[0,222],"source":"Custom attributes are not supported on the return type of a dynamic method, so the array of custom attributes returned by the <xref:System.Reflection.ICustomAttributeProvider.GetCustomAttributes%2A> method is always empty."}]}],"pos":[156271,156494],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Reflection.ICustomAttributeProvider\"></xref> representing the custom attributes of the return type for the dynamic method.","nodes":[{"pos":[0,144],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Reflection.ICustomAttributeProvider\"&gt;&lt;/xref&gt;</ph> representing the custom attributes of the return type for the dynamic method.","source":"An <xref href=\"System.Reflection.ICustomAttributeProvider\"></xref> representing the custom attributes of the return type for the dynamic method."}],"pos":[157356,157501],"yaml":true},{"content":"Returns the signature of the method, represented as a string.","nodes":[{"pos":[0,61],"content":"Returns the signature of the method, represented as a string.","nodes":[{"content":"Returns the signature of the method, represented as a string.","pos":[0,61]}]}],"pos":[158669,158731],"yaml":true},{"content":"The signature includes only types and the method name, if any. Parameter names are not included.","nodes":[{"pos":[0,96],"content":"The signature includes only types and the method name, if any. Parameter names are not included.","nodes":[{"content":"The signature includes only types and the method name, if any. Parameter names are not included.","pos":[0,96],"nodes":[{"content":"The signature includes only types and the method name, if any.","pos":[0,62]},{"content":"Parameter names are not included.","pos":[63,96]}]}]}],"pos":[158742,158839],"yaml":true,"extradata":"MT"},{"content":"A string representing the method signature.","nodes":[{"pos":[0,43],"content":"A string representing the method signature.","nodes":[{"content":"A string representing the method signature.","pos":[0,43]}]}],"pos":[159646,159690],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Reflection.Emit.DynamicMethod\n  commentId: T:System.Reflection.Emit.DynamicMethod\n  id: DynamicMethod\n  children:\n  - System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[])\n  - System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Boolean)\n  - System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module)\n  - System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type)\n  - System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module,System.Boolean)\n  - System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type,System.Boolean)\n  - System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Reflection.Module,System.Boolean)\n  - System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type,System.Boolean)\n  - System.Reflection.Emit.DynamicMethod.Attributes\n  - System.Reflection.Emit.DynamicMethod.CallingConvention\n  - System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type)\n  - System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type,System.Object)\n  - System.Reflection.Emit.DynamicMethod.DeclaringType\n  - System.Reflection.Emit.DynamicMethod.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)\n  - System.Reflection.Emit.DynamicMethod.GetBaseDefinition\n  - System.Reflection.Emit.DynamicMethod.GetCustomAttributes(System.Boolean)\n  - System.Reflection.Emit.DynamicMethod.GetCustomAttributes(System.Type,System.Boolean)\n  - System.Reflection.Emit.DynamicMethod.GetDynamicILInfo\n  - System.Reflection.Emit.DynamicMethod.GetILGenerator(System.Int32)\n  - System.Reflection.Emit.DynamicMethod.GetILGenerator\n  - System.Reflection.Emit.DynamicMethod.GetMethodImplementationFlags\n  - System.Reflection.Emit.DynamicMethod.GetParameters\n  - System.Reflection.Emit.DynamicMethod.InitLocals\n  - System.Reflection.Emit.DynamicMethod.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)\n  - System.Reflection.Emit.DynamicMethod.IsDefined(System.Type,System.Boolean)\n  - System.Reflection.Emit.DynamicMethod.IsSecurityCritical\n  - System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical\n  - System.Reflection.Emit.DynamicMethod.IsSecurityTransparent\n  - System.Reflection.Emit.DynamicMethod.MethodHandle\n  - System.Reflection.Emit.DynamicMethod.MethodImplementationFlags\n  - System.Reflection.Emit.DynamicMethod.Module\n  - System.Reflection.Emit.DynamicMethod.Name\n  - System.Reflection.Emit.DynamicMethod.ReflectedType\n  - System.Reflection.Emit.DynamicMethod.ReturnParameter\n  - System.Reflection.Emit.DynamicMethod.ReturnType\n  - System.Reflection.Emit.DynamicMethod.ReturnTypeCustomAttributes\n  - System.Reflection.Emit.DynamicMethod.ToString\n  langs:\n  - csharp\n  name: DynamicMethod\n  nameWithType: DynamicMethod\n  fullName: System.Reflection.Emit.DynamicMethod\n  type: Class\n  assemblies:\n  - System.Reflection.Emit.Lightweight\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Defines and represents a dynamic method that can be compiled, executed, and discarded. Discarded methods are available for garbage collection.\n  remarks: \"You can use the <xref:System.Reflection.Emit.DynamicMethod> class to generate and execute a method at run time, without having to generate a dynamic assembly and a dynamic type to contain the method. The executable code created by the just-in-time (JIT) compiler is reclaimed when the <xref:System.Reflection.Emit.DynamicMethod> object is reclaimed. Dynamic methods are the most efficient way to generate and execute small amounts of code.  \\n  \\n A dynamic method can be anonymously hosted, or it can belogically associated with a module or with a type.  \\n  \\n-   If the dynamic method is anonymously hosted, it is located in a system-provided assembly, and therefore is isolated from other code. By default, it does not have access to any non-public data. An anonymously hosted dynamic method can have restricted ability to skip the JIT compiler's visibility checks, if it has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag. The trust level of the assembly whose non-public members are accessed by the dynamic method must be equal to, or a subset of, the trust level of the call stack that emitted the dynamic method. For more information about anonymously hosted dynamic methods, see [Walkthrough: Emitting Code in Partial Trust Scenarios](~/docs/framework/reflection-and-codedom/walkthrough-emitting-code-in-partial-trust-scenarios.md).  \\n  \\n-   If the dynamic method is associated with a module that you specify, the dynamic method is effectively global to that module. It can access all types in the module and all `internal` (`Friend` in Visual Basic) members of the types. You can associate a dynamic method with any module, regardless of whether you created the module, provided that a demand for <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess> flag can be satisfied by the call stack that includes your code. If the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag is included in the grant, the dynamic method can skip the JIT compiler's visibility checks and access the private data of all types declared in the module or in any other module in any assembly.  \\n  \\n    > [!NOTE]\\n    >  When you specify the module with which a dynamic method is associated, that module must not be in the system-provided assembly that is used for anonymous hosting.  \\n  \\n-   If the dynamic method is associated with a type that you specify, it has access to all members of the type, regardless of access level. In addition, JIT visibility checks can be skipped. This gives the dynamic method access to the private data of other types declared in the same module or in any other module in any assembly. You can associate a dynamic method with any type, but your code must be granted <xref:System.Security.Permissions.ReflectionPermission> with both the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess> and <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess> flags.  \\n  \\n The following table shows which types and members are accessible to an anonymously hosted dynamic method, with and without JIT visibility checks, depending on whether <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess> flag is granted.  \\n  \\n||Without <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess>|With <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess>|  \\n|-|-|-|  \\n|Without skipping JIT visibility checks|Public members of public types in any assembly.|Public members of public types in any assembly.|  \\n|Skipping JIT visibility checks, with restrictions|Public members of public types in any assembly.|All members of all types, only in assemblies whose trust levels are equal to or less than the trust level of the assembly that emitted the dynamic method.|  \\n  \\n> [!NOTE]\\n>  Prior to the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], emitting code required <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag. This permission is included by default in the FullTrust and LocalIntranet named permission sets, but not in the Internet permission set. Therefore, in earlier versions of the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] a library can be used with Internet permissions only if it has the <xref:System.Security.SecurityCriticalAttribute> attribute and also executes an <xref:System.Security.PermissionSet.Assert%2A> for <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit>. Such libraries require careful security review because coding errors could result in security holes. The [!INCLUDE[net_v20SP1_short](~/includes/net-v20sp1-short-md.md)] allows code to be emitted in partial trust scenarios without issuing any security demands, because generating code is not inherently a privileged operation. That is, the generated code has no more permissions than the assembly that emits it. This allows libraries that emit code to be security transparent and removes the need to assert <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit>, which simplifies the task of writing a secure library. To use this feature, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.  \\n  \\n The following table shows which types and members are accessible to a dynamic method that is associated with a module or with a type in a module.  \\n  \\n||Associated with module|Associated with type|  \\n|-|-|-|  \\n|Without skipping JIT visibility checks|Public and internal members of public, internal, and private types in the module.<br /><br /> Public members of public types in any assembly.|All members of the associated type. Public and internal members of all the other types in the module.<br /><br /> Public members of public types in any assembly.|  \\n|Skipping JIT visibility checks|All members of all types in any assembly.|All members of all types in any assembly.|  \\n  \\n A dynamic method that is associated with a module has the permissions of that module. A dynamic method that is associated with a type has the permissions of the module containing that type.  \\n  \\n Dynamic methods and their parameters do not have to be named, but you can specify names to assist in debugging. Custom attributes are not supported on dynamic methods or their parameters.  \\n  \\n Although dynamic methods are `static` methods (`Shared` methods in Visual Basic), the relaxed rules for delegate binding introduced in the [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)] allow a dynamic method to be bound to an object, so that it acts like an instance method when called using that delegate instance. An example that demonstrates this is provided for the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%28System.Type%2CSystem.Object%29> method overload.  \\n  \\n> [!NOTE]\\n>  In the [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)], dynamic methods do not support symbol information, that is, local variable names and line-number mapping. This limitation might be removed in a future version. You can use <xref:System.Reflection.Emit.AssemblyBuilder> during development to simplify debugging the generated Microsoft intermediate language (MSIL), and then switch to dynamic methods during final deployment, because the <xref:System.Reflection.Emit.ILGenerator> calls are the same in both cases.  \\n  \\n## Verification  \\n The following list summarizes the conditions under which dynamic methods can contain unverifiable code. (For example, a dynamic method is unverifiable if its <xref:System.Reflection.Emit.DynamicMethod.InitLocals%2A> property is set to `false`.)  \\n  \\n-   A dynamic method that is associated with a security-critical assembly is also security-critical, and can skip verification. For example, an assembly without security attributes that is run as a desktop application is treated as security-critical by the runtime. If you associate a dynamic method with the assembly, the dynamic method can contain unverifiable code.  \\n  \\n-   If a dynamic method that contains unverifiable code is associated with an assembly that has level 1 transparency, the just-in-time (JIT) compiler injects a security demand. The demand succeeds only if the dynamic method is executed by fully trusted code. See [Security-Transparent Code, Level 1](~/docs/framework/misc/security-transparent-code-level-1.md).  \\n  \\n-   If a dynamic method that contains unverifiable code is associated with an assembly that has level 2 transparency (such as mscorlib.dll), it throws an exception (injected by the JIT compiler) instead of making a security demand. See [Security-Transparent Code, Level 2](~/docs/framework/misc/security-transparent-code-level-2.md).  \\n  \\n-   An anonymously hosted dynamic method that contains unverifiable code always throws an exception. It can never skip verification, even if it is created and executed by fully trusted code.  \\n  \\n The exception that is thrown for unverifiable code varies depending on the way the dynamic method is invoked. If you invoke a dynamic method by using a delegate returned from the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> method, a <xref:System.Security.VerificationException> is thrown. If you invoke the dynamic method by using the <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method, a <xref:System.Reflection.TargetInvocationException> is thrown with an inner <xref:System.Security.VerificationException>.\"\n  example:\n  - \"The following code example creates a dynamic method that takes two parameters. The example emits a simple function body that prints the first parameter to the console, and the example uses the second parameter as the return value of the method. The example completes the method by creating a delegate, invokes the delegate with different parameters, and finally invokes the dynamic method using the <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method.  \\n  \\n [!code-cpp[Reflection.DynamicMethod.All#1](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#1)]\\n [!code-csharp[Reflection.DynamicMethod.All#1](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#1)]\\n [!code-vb[Reflection.DynamicMethod.All#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#1)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public sealed class DynamicMethod : System.Reflection.MethodInfo\n  inheritance:\n  - System.Object\n  - System.Reflection.MemberInfo\n  - System.Reflection.MethodBase\n  - System.Reflection.MethodInfo\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Reflection.MemberInfo.CustomAttributes\n  - System.Reflection.MemberInfo.GetCustomAttributesData\n  - System.Reflection.MemberInfo.MetadataToken\n  - System.Reflection.MemberInfo.op_Equality(System.Reflection.MemberInfo,System.Reflection.MemberInfo)\n  - System.Reflection.MemberInfo.op_Inequality(System.Reflection.MemberInfo,System.Reflection.MemberInfo)\n  - System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Boolean)\n  - System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Type,System.Boolean)\n  - System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#IsDefined(System.Type,System.Boolean)\n  - System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  - System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetType\n  - System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  - System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfoCount(System.UInt32@)\n  - System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  - System.Reflection.MethodBase.ContainsGenericParameters\n  - System.Reflection.MethodBase.GetCurrentMethod\n  - System.Reflection.MethodBase.GetMethodBody\n  - System.Reflection.MethodBase.GetMethodFromHandle(System.RuntimeMethodHandle)\n  - System.Reflection.MethodBase.GetMethodFromHandle(System.RuntimeMethodHandle,System.RuntimeTypeHandle)\n  - System.Reflection.MethodBase.Invoke(System.Object,System.Object[])\n  - System.Reflection.MethodBase.IsAbstract\n  - System.Reflection.MethodBase.IsAssembly\n  - System.Reflection.MethodBase.IsConstructor\n  - System.Reflection.MethodBase.IsFamily\n  - System.Reflection.MethodBase.IsFamilyAndAssembly\n  - System.Reflection.MethodBase.IsFamilyOrAssembly\n  - System.Reflection.MethodBase.IsFinal\n  - System.Reflection.MethodBase.IsGenericMethod\n  - System.Reflection.MethodBase.IsGenericMethodDefinition\n  - System.Reflection.MethodBase.IsHideBySig\n  - System.Reflection.MethodBase.IsPrivate\n  - System.Reflection.MethodBase.IsPublic\n  - System.Reflection.MethodBase.IsSpecialName\n  - System.Reflection.MethodBase.IsStatic\n  - System.Reflection.MethodBase.IsVirtual\n  - System.Reflection.MethodBase.op_Equality(System.Reflection.MethodBase,System.Reflection.MethodBase)\n  - System.Reflection.MethodBase.op_Inequality(System.Reflection.MethodBase,System.Reflection.MethodBase)\n  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#GetType\n  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#GetTypeInfoCount(System.UInt32@)\n  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsAbstract\n  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsAssembly\n  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsConstructor\n  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsFamily\n  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsFamilyAndAssembly\n  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsFamilyOrAssembly\n  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsFinal\n  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsHideBySig\n  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsPrivate\n  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsPublic\n  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsSpecialName\n  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsStatic\n  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsVirtual\n  - System.Reflection.MethodInfo.Equals(System.Object)\n  - System.Reflection.MethodInfo.GetGenericArguments\n  - System.Reflection.MethodInfo.GetGenericMethodDefinition\n  - System.Reflection.MethodInfo.GetHashCode\n  - System.Reflection.MethodInfo.MakeGenericMethod(System.Type[])\n  - System.Reflection.MethodInfo.MemberType\n  - System.Reflection.MethodInfo.op_Equality(System.Reflection.MethodInfo,System.Reflection.MethodInfo)\n  - System.Reflection.MethodInfo.op_Inequality(System.Reflection.MethodInfo,System.Reflection.MethodInfo)\n  - System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  - System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#GetType\n  - System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  - System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#GetTypeInfoCount(System.UInt32@)\n  - System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  extensionMethods:\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.MemberInfo,System.Type)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.MemberInfo)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.MemberInfo,System.Boolean)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo,System.Type)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.MemberInfo)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.MemberInfo,System.Boolean)\n  - System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.MemberInfo,System.Type)\n  - System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  - System.Reflection.MemberInfoExtensions.GetMetadataToken(System.Reflection.MemberInfo)\n  - System.Reflection.MemberInfoExtensions.HasMetadataToken(System.Reflection.MemberInfo)\n  - System.Reflection.MethodInfoExtensions.GetBaseDefinition(System.Reflection.MethodInfo)\n  - System.Reflection.RuntimeReflectionExtensions.GetRuntimeBaseDefinition(System.Reflection.MethodInfo)\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/DynamicMethod.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[])\n  commentId: M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[])\n  id: '#ctor(System.String,System.Type,System.Type[])'\n  parent: System.Reflection.Emit.DynamicMethod\n  langs:\n  - csharp\n  name: DynamicMethod(String, Type, Type[])\n  nameWithType: DynamicMethod.DynamicMethod(String, Type, Type[])\n  fullName: DynamicMethod.DynamicMethod(String, Type, Type[])\n  type: Constructor\n  assemblies:\n  - System.Reflection.Emit.Lightweight\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Initializes an anonymously hosted dynamic method, specifying the method name, return type, and parameter types.\n  remarks: \"The dynamic method that is created by this constructor is associated with an anonymous assembly instead of an existing type or module. The anonymous assembly exists only to provide a sandbox environment for dynamic methods, that is, to isolate them from other code. This environment makes it safe for the dynamic method to be emitted and executed by partially trusted code.  \\n  \\n This constructor specifies that just-in-time (JIT) visibility checks will be enforced for the Microsoft intermediate language (MSIL) of the dynamic method. That is, the code in the dynamic method has access to public methods of public classes. Exceptions are thrown if the method tries to access types or members that are `private`, `protected`, or `internal` (`Friend` in Visual Basic). To create a dynamic method that has restricted ability to skip JIT visibility checks, use the <xref:System.Reflection.Emit.DynamicMethod.%23ctor%28System.String%2CSystem.Type%2CSystem.Type%5B%5D%2CSystem.Boolean%29> constructor.  \\n  \\n When an anonymously hosted dynamic method is constructed, the call stack of the emitting assembly is included. When the method is invoked, the permissions of the emitting assembly are used instead of the permissions of the actual caller. Thus, the dynamic method cannot execute at a higher level of privilege than that of the assembly that emitted it, even if it is passed to and executed by an assembly that has a higher trust level.  \\n  \\n This constructor specifies the method attributes <xref:System.Reflection.MethodAttributes?displayProperty=fullName> and <xref:System.Reflection.MethodAttributes?displayProperty=fullName>, and the calling convention <xref:System.Reflection.CallingConventions?displayProperty=fullName>.  \\n  \\n> [!NOTE]\\n>  This constructor was introduced in the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.\"\n  syntax:\n    content: public DynamicMethod (string name, Type returnType, Type[] parameterTypes);\n    parameters:\n    - id: name\n      type: System.String\n      description: The name of the dynamic method. This can be a zero-length string, but it cannot be `null`.\n    - id: returnType\n      type: System.Type\n      description: A <xref href=\"System.Type\"></xref> object that specifies the return type of the dynamic method, or `null` if the method has no return type.\n    - id: parameterTypes\n      type: System.Type[]\n      description: An array of <xref href=\"System.Type\"></xref> objects specifying the types of the parameters of the dynamic method, or `null` if the method has no parameters.\n  overload: System.Reflection.Emit.DynamicMethod.#ctor*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: An element of <code>parameterTypes</code> is `null` or <xref href=\"System.Void\"></xref>.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>name</code> is `null`.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: <code>returnType</code> is a type for which <xref href=\"System.Type.IsByRef\"></xref> returns `true`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/DynamicMethod.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Boolean)\n  commentId: M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Boolean)\n  id: '#ctor(System.String,System.Type,System.Type[],System.Boolean)'\n  parent: System.Reflection.Emit.DynamicMethod\n  langs:\n  - csharp\n  name: DynamicMethod(String, Type, Type[], Boolean)\n  nameWithType: DynamicMethod.DynamicMethod(String, Type, Type[], Boolean)\n  fullName: DynamicMethod.DynamicMethod(String, Type, Type[], Boolean)\n  type: Constructor\n  assemblies:\n  - System.Reflection.Emit.Lightweight\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Initializes an anonymously hosted dynamic method, specifying the method name, return type, parameter types, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.\n  remarks: \"The dynamic method that is created by this constructor is associated with an anonymous assembly instead of an existing type or module. The anonymous assembly exists only to provide a sandbox environment for dynamic methods, that is, to isolate them from other code. This environment makes it safe for the dynamic method to be emitted and executed by partially trusted code.  \\n  \\n Anonymously hosted dynamic methods do not have automatic access to any types or members that are `private`, `protected`, or `internal` (`Friend` in Visual Basic). This is different from dynamic methods that are associated with an existing type or module, which have access to hidden members in their associated scope.  \\n  \\n Specify `true` for `restrictedSkipVisibility` if your dynamic method has to access types or members that are `private`, `protected`, or `internal`. This gives the dynamic method restricted access to these members. That is, the members can be accessed only if the following conditions are met:  \\n  \\n-   The target members belong to an assembly that has a level of trust equal to or lower than the call stack that emits the dynamic method.  \\n  \\n-   The call stack that emits the dynamic method is granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag. This is always true when the code is executed with full trust. For partially trusted code, it is true only if the host explicitly grants the permission.  \\n  \\n    > [!IMPORTANT]\\n    >  If the permission has not been granted, a security exception is thrown when <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> is called or when the dynamic method is invoked, not when this constructor is called. No special permissions are required to emit the dynamic method.  \\n  \\n For example, a dynamic method that is created with `restrictedSkipVisibility` set to `true` can access a private member of any assembly on the call stack if the call stack has been granted restricted member access. If the dynamic method is created with partially trusted code on the call stack, it cannot access a private member of a type in a [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] assembly, because such assemblies are fully trusted.  \\n  \\n If `restrictedSkipVisibility` is `false`, JIT visibility checks are enforced. The code in the dynamic method has access to public methods of public classes, and exceptions are thrown if it tries to access types or members that are `private`, `protected`, or `internal`.  \\n  \\n When an anonymously hosted dynamic method is constructed, the call stack of the emitting assembly is included. When the method is invoked, the permissions of the emitting call stack are used instead of the permissions of the actual caller. Thus, the dynamic method cannot execute at a higher level of privilege than that of the assembly that emitted it, even if it is passed to and executed by an assembly that has a higher trust level.  \\n  \\n This constructor specifies the method attributes <xref:System.Reflection.MethodAttributes?displayProperty=fullName> and <xref:System.Reflection.MethodAttributes?displayProperty=fullName>, and the calling convention <xref:System.Reflection.CallingConventions?displayProperty=fullName>.  \\n  \\n> [!NOTE]\\n>  This constructor was introduced in the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.\"\n  syntax:\n    content: public DynamicMethod (string name, Type returnType, Type[] parameterTypes, bool restrictedSkipVisibility);\n    parameters:\n    - id: name\n      type: System.String\n      description: The name of the dynamic method. This can be a zero-length string, but it cannot be `null`.\n    - id: returnType\n      type: System.Type\n      description: A <xref href=\"System.Type\"></xref> object that specifies the return type of the dynamic method, or `null` if the method has no return type.\n    - id: parameterTypes\n      type: System.Type[]\n      description: An array of <xref href=\"System.Type\"></xref> objects specifying the types of the parameters of the dynamic method, or `null` if the method has no parameters.\n    - id: restrictedSkipVisibility\n      type: System.Boolean\n      description: '`true` to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method, with this restriction: the trust level of the assemblies that contain those types and members must be equal to or less than the trust level of the call stack that emits the dynamic method; otherwise, `false`.'\n  overload: System.Reflection.Emit.DynamicMethod.#ctor*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: An element of <code>parameterTypes</code> is `null` or <xref href=\"System.Void\"></xref>.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>name</code> is `null`.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: <code>returnType</code> is a type for which <xref href=\"System.Type.IsByRef\"></xref> returns `true`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/DynamicMethod.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module)\n  commentId: M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module)\n  id: '#ctor(System.String,System.Type,System.Type[],System.Reflection.Module)'\n  parent: System.Reflection.Emit.DynamicMethod\n  langs:\n  - csharp\n  name: DynamicMethod(String, Type, Type[], Module)\n  nameWithType: DynamicMethod.DynamicMethod(String, Type, Type[], Module)\n  fullName: DynamicMethod.DynamicMethod(String, Type, Type[], Module)\n  type: Constructor\n  assemblies:\n  - System.Reflection.Emit.Lightweight\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Creates a dynamic method that is global to a module, specifying the method name, return type, parameter types, and module.\n  remarks: \"This constructor specifies method attributes <xref:System.Reflection.MethodAttributes?displayProperty=fullName> and <xref:System.Reflection.MethodAttributes?displayProperty=fullName>, calling convention <xref:System.Reflection.CallingConventions?displayProperty=fullName>, and does not skip just-in-time (JIT) visibility checks.  \\n  \\n The dynamic method created with this constructor has access to public and `internal` (`Friend` in Visual Basic) members of all the types contained in module `m`.  \\n  \\n> [!NOTE]\\n>  For backward compatibility, this constructor demands <xref:System.Security.Permissions.SecurityPermission> with the <xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName> flag if the following conditions are both true: `m` is a module other than the calling module, and the demand for <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag has failed. If the demand for <xref:System.Security.Permissions.SecurityPermission> succeeds, the operation is allowed.  \\n  \\n> [!NOTE]\\n>  Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag. (See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.\"\n  example:\n  - \"The following code example creates a dynamic method that takes two parameters. The example emits a simple function body that prints the first parameter to the console, and the example uses the second parameter as the return value of the method. The example completes the method by creating a delegate, invokes the delegate with different parameters, and finally invokes the dynamic method using the <xref:System.Reflection.Emit.DynamicMethod.Invoke%28System.Object%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29> method.  \\n  \\n [!code-cpp[Reflection.DynamicMethod.ctor1#1](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.ctor1/cpp/source.cpp#1)]\\n [!code-csharp[Reflection.DynamicMethod.ctor1#1](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.ctor1/CS/source.cs#1)]\\n [!code-vb[Reflection.DynamicMethod.ctor1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.ctor1/VB/source.vb#1)]\"\n  syntax:\n    content: public DynamicMethod (string name, Type returnType, Type[] parameterTypes, System.Reflection.Module m);\n    parameters:\n    - id: name\n      type: System.String\n      description: The name of the dynamic method. This can be a zero-length string, but it cannot be `null`.\n    - id: returnType\n      type: System.Type\n      description: A <xref href=\"System.Type\"></xref> object that specifies the return type of the dynamic method, or `null` if the method has no return type.\n    - id: parameterTypes\n      type: System.Type[]\n      description: An array of <xref href=\"System.Type\"></xref> objects specifying the types of the parameters of the dynamic method, or `null` if the method has no parameters.\n    - id: m\n      type: System.Reflection.Module\n      description: A <xref href=\"System.Reflection.Module\"></xref> representing the module with which the dynamic method is to be logically associated.\n  overload: System.Reflection.Emit.DynamicMethod.#ctor*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"An element of <code>parameterTypes</code> is `null` or <xref href=\\\"System.Void\\\"></xref>.  \\n  \\n -or-  \\n  \\n <code>m</code> is a module that provides anonymous hosting for dynamic methods.\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>name</code> is `null`.  \\n  \\n -or-  \\n  \\n <code>m</code> is `null`.\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: <code>returnType</code> is a type for which <xref href=\"System.Type.IsByRef\"></xref> returns `true`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/DynamicMethod.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type)\n  commentId: M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type)\n  id: '#ctor(System.String,System.Type,System.Type[],System.Type)'\n  parent: System.Reflection.Emit.DynamicMethod\n  langs:\n  - csharp\n  name: DynamicMethod(String, Type, Type[], Type)\n  nameWithType: DynamicMethod.DynamicMethod(String, Type, Type[], Type)\n  fullName: DynamicMethod.DynamicMethod(String, Type, Type[], Type)\n  type: Constructor\n  assemblies:\n  - System.Reflection.Emit.Lightweight\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Creates a dynamic method, specifying the method name, return type, parameter types, and the type with which the dynamic method is logically associated.\n  remarks: \"The dynamic method created with this constructor has access to all members of the type `owner`, and to public and `internal` (`Friend` in Visual Basic) members of all the other types in the module that contains `owner`.  \\n  \\n This constructor specifies method attributes <xref:System.Reflection.MethodAttributes?displayProperty=fullName> and <xref:System.Reflection.MethodAttributes?displayProperty=fullName>, calling convention <xref:System.Reflection.CallingConventions?displayProperty=fullName>, and does not skip just-in-time (JIT) visibility checks.  \\n  \\n> [!NOTE]\\n>  For backward compatibility, this constructor demands <xref:System.Security.Permissions.SecurityPermission> with the <xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName> flag if the following conditions are both true: `owner` is in a module other than the calling module, and the demand for <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag has failed. If the demand for <xref:System.Security.Permissions.SecurityPermission> succeeds, the operation is allowed.  \\n  \\n> [!NOTE]\\n>  Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag. (See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.\"\n  example:\n  - \"The following code example creates a <xref:System.Reflection.Emit.DynamicMethod> that is logically associated with a type. This association gives it access to the private members of that type.  \\n  \\n The code example defines a class named `Example` with a private field, a class named `DerivedFromxample` that derives from the first class, a delegate type named `UseLikeStatic` that returns <xref:System.Int32> and has parameters of type `Example` and <xref:System.Int32>, and a delegate type named `UseLikeInstance` that returns <xref:System.Int32> and has one parameter of type <xref:System.Int32>.  \\n  \\n The example code then creates a <xref:System.Reflection.Emit.DynamicMethod> that changes the private field of an instance of `Example` and returns the previous value.  \\n  \\n> [!NOTE]\\n>  In general, changing the internal fields of classes is not good object-oriented coding practice.  \\n  \\n The example code creates an instance of `Example` and then creates two delegates. The first is of type `UseLikeStatic`, which has the same parameters as the dynamic method. The second is of type `UseLikeInstance`, which lacks the first parameter (of type `Example`). This delegate is created using the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%28System.Type%2CSystem.Object%29> method overload; the second parameter of that method overload is an instance of `Example`, in this case the instance just created, which is bound to the newly created delegate. Whenever that delegate is invoked, the dynamic method acts on the bound instance of `Example`.  \\n  \\n> [!NOTE]\\n>  This is an example of the relaxed rules for delegate binding introduced in the [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)], along with new overloads of the <xref:System.Delegate.CreateDelegate%2A?displayProperty=fullName> method. For more information, see the <xref:System.Delegate> class.  \\n  \\n The `UseLikeStatic` delegate is invoked, passing in the instance of `Example` that is bound to the `UseLikeInstance` delegate. Then the `UseLikeInstance` delegate is invoked, so that both delegates act on the same instance of `Example`. The changes in the values of the internal field are displayed after each call. Finally, a `UseLikeInstance` delegate is bound to an instance of `DerivedFromxample`, and the delegate calls are repeated.  \\n  \\n [!code-csharp[Reflection.DynamicMethod.ClosedOver#1](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.ClosedOver/cs/source.cs#1)]\\n [!code-vb[Reflection.DynamicMethod.ClosedOver#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.ClosedOver/vb/source.vb#1)]\"\n  syntax:\n    content: public DynamicMethod (string name, Type returnType, Type[] parameterTypes, Type owner);\n    parameters:\n    - id: name\n      type: System.String\n      description: The name of the dynamic method. This can be a zero-length string, but it cannot be `null`.\n    - id: returnType\n      type: System.Type\n      description: A <xref href=\"System.Type\"></xref> object that specifies the return type of the dynamic method, or `null` if the method has no return type.\n    - id: parameterTypes\n      type: System.Type[]\n      description: An array of <xref href=\"System.Type\"></xref> objects specifying the types of the parameters of the dynamic method, or `null` if the method has no parameters.\n    - id: owner\n      type: System.Type\n      description: A <xref href=\"System.Type\"></xref> with which the dynamic method is logically associated. The dynamic method has access to all members of the type.\n  overload: System.Reflection.Emit.DynamicMethod.#ctor*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"An element of <code>parameterTypes</code> is `null` or <xref href=\\\"System.Void\\\"></xref>.  \\n  \\n -or-  \\n  \\n <code>owner</code> is an interface, an array, an open generic type, or a type parameter of a generic type or method.\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>name</code> is `null`.  \\n  \\n -or-  \\n  \\n <code>owner</code> is `null`.\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: <code>returnType</code> is `null`, or is a type for which <xref href=\"System.Type.IsByRef\"></xref> returns `true`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/DynamicMethod.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module,System.Boolean)\n  commentId: M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module,System.Boolean)\n  id: '#ctor(System.String,System.Type,System.Type[],System.Reflection.Module,System.Boolean)'\n  parent: System.Reflection.Emit.DynamicMethod\n  langs:\n  - csharp\n  name: DynamicMethod(String, Type, Type[], Module, Boolean)\n  nameWithType: DynamicMethod.DynamicMethod(String, Type, Type[], Module, Boolean)\n  fullName: DynamicMethod.DynamicMethod(String, Type, Type[], Module, Boolean)\n  type: Constructor\n  assemblies:\n  - System.Reflection.Emit.Lightweight\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Creates a dynamic method that is global to a module, specifying the method name, return type, parameter types, module, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.\n  remarks: \"This constructor specifies method attributes <xref:System.Reflection.MethodAttributes?displayProperty=fullName> and <xref:System.Reflection.MethodAttributes?displayProperty=fullName>, and calling convention <xref:System.Reflection.CallingConventions?displayProperty=fullName>.  \\n  \\n The dynamic method created with this constructor has access to public and `internal` (`Friend` in Visual Basic) members of all the types in contained module `m`. Skipping the JIT compiler's visibility checks allows the dynamic method to access private and protected members of all other types as well. This is useful, for example, when writing code to serialize objects.  \\n  \\n> [!NOTE]\\n>  For backward compatibility, this constructor demands <xref:System.Security.Permissions.SecurityPermission> with the <xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName> flag if the following conditions are both true: `m` is a module other than the calling module, and the demand for <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag has failed. If the demand for <xref:System.Security.Permissions.SecurityPermission> succeeds, the operation is allowed.  \\n  \\n> [!NOTE]\\n>  Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag. (See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.\"\n  syntax:\n    content: public DynamicMethod (string name, Type returnType, Type[] parameterTypes, System.Reflection.Module m, bool skipVisibility);\n    parameters:\n    - id: name\n      type: System.String\n      description: The name of the dynamic method. This can be a zero-length string, but it cannot be `null`.\n    - id: returnType\n      type: System.Type\n      description: A <xref href=\"System.Type\"></xref> object that specifies the return type of the dynamic method, or `null` if the method has no return type.\n    - id: parameterTypes\n      type: System.Type[]\n      description: An array of <xref href=\"System.Type\"></xref> objects specifying the types of the parameters of the dynamic method, or `null` if the method has no parameters.\n    - id: m\n      type: System.Reflection.Module\n      description: A <xref href=\"System.Reflection.Module\"></xref> representing the module with which the dynamic method is to be logically associated.\n    - id: skipVisibility\n      type: System.Boolean\n      description: '`true` to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method.'\n  overload: System.Reflection.Emit.DynamicMethod.#ctor*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"An element of <code>parameterTypes</code> is `null` or <xref href=\\\"System.Void\\\"></xref>.  \\n  \\n -or-  \\n  \\n <code>m</code> is a module that provides anonymous hosting for dynamic methods.\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>name</code> is `null`.  \\n  \\n -or-  \\n  \\n <code>m</code> is `null`.\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: <code>returnType</code> is a type for which <xref href=\"System.Type.IsByRef\"></xref> returns `true`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/DynamicMethod.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type,System.Boolean)\n  commentId: M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type,System.Boolean)\n  id: '#ctor(System.String,System.Type,System.Type[],System.Type,System.Boolean)'\n  parent: System.Reflection.Emit.DynamicMethod\n  langs:\n  - csharp\n  name: DynamicMethod(String, Type, Type[], Type, Boolean)\n  nameWithType: DynamicMethod.DynamicMethod(String, Type, Type[], Type, Boolean)\n  fullName: DynamicMethod.DynamicMethod(String, Type, Type[], Type, Boolean)\n  type: Constructor\n  assemblies:\n  - System.Reflection.Emit.Lightweight\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Creates a dynamic method, specifying the method name, return type, parameter types, the type with which the dynamic method is logically associated, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.\n  remarks: \"The dynamic method created with this constructor has access to all members of the type `owner`, and to public and `internal` (`Friend` in Visual Basic) members of all the other types in the module that contains `owner`. Skipping the JIT compiler's visibility checks allows the dynamic method to access private and protected members of all other types as well. This is useful, for example, when writing code to serialize objects.  \\n  \\n This constructor specifies method attributes <xref:System.Reflection.MethodAttributes?displayProperty=fullName> and <xref:System.Reflection.MethodAttributes?displayProperty=fullName>, and calling convention <xref:System.Reflection.CallingConventions?displayProperty=fullName>.  \\n  \\n> [!NOTE]\\n>  For backward compatibility, this constructor demands <xref:System.Security.Permissions.SecurityPermission> with the <xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName> flag if the following conditions are both true: `owner` is in a module other than the calling module, and the demand for <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag has failed. If the demand for <xref:System.Security.Permissions.SecurityPermission> succeeds, the operation is allowed.  \\n  \\n> [!NOTE]\\n>  Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag. (See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.\"\n  syntax:\n    content: public DynamicMethod (string name, Type returnType, Type[] parameterTypes, Type owner, bool skipVisibility);\n    parameters:\n    - id: name\n      type: System.String\n      description: The name of the dynamic method. This can be a zero-length string, but it cannot be `null`.\n    - id: returnType\n      type: System.Type\n      description: A <xref href=\"System.Type\"></xref> object that specifies the return type of the dynamic method, or `null` if the method has no return type.\n    - id: parameterTypes\n      type: System.Type[]\n      description: An array of <xref href=\"System.Type\"></xref> objects specifying the types of the parameters of the dynamic method, or `null` if the method has no parameters.\n    - id: owner\n      type: System.Type\n      description: A <xref href=\"System.Type\"></xref> with which the dynamic method is logically associated. The dynamic method has access to all members of the type.\n    - id: skipVisibility\n      type: System.Boolean\n      description: '`true` to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method; otherwise, `false`.'\n  overload: System.Reflection.Emit.DynamicMethod.#ctor*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"An element of <code>parameterTypes</code> is `null` or <xref href=\\\"System.Void\\\"></xref>.  \\n  \\n -or-  \\n  \\n <code>owner</code> is an interface, an array, an open generic type, or a type parameter of a generic type or method.\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>name</code> is `null`.  \\n  \\n -or-  \\n  \\n <code>owner</code> is `null`.\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: <code>returnType</code> is `null`, or is a type for which <xref href=\"System.Type.IsByRef\"></xref> returns `true`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/DynamicMethod.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Reflection.Module,System.Boolean)\n  commentId: M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Reflection.Module,System.Boolean)\n  id: '#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Reflection.Module,System.Boolean)'\n  parent: System.Reflection.Emit.DynamicMethod\n  langs:\n  - csharp\n  name: DynamicMethod(String, MethodAttributes, CallingConventions, Type, Type[], Module, Boolean)\n  nameWithType: DynamicMethod.DynamicMethod(String, MethodAttributes, CallingConventions, Type, Type[], Module, Boolean)\n  fullName: DynamicMethod.DynamicMethod(String, MethodAttributes, CallingConventions, Type, Type[], Module, Boolean)\n  type: Constructor\n  assemblies:\n  - System.Reflection.Emit.Lightweight\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Creates a dynamic method that is global to a module, specifying the method name, attributes, calling convention, return type, parameter types, module, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.\n  remarks: \"The dynamic method created with this constructor has access to public and `internal` (`Friend` in Visual Basic) members of all the public and internal types contained in module `m`.  \\n  \\n Skipping the JIT compiler's visibility checks allows the dynamic method to access private and protected members of all other types in the module and in all other assemblies as well. This is useful, for example, when writing code to serialize objects.  \\n  \\n> [!NOTE]\\n>  For backward compatibility, this constructor demands <xref:System.Security.Permissions.SecurityPermission> with the <xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName> flag if the following conditions are both true: `m` is a module other than the calling module, and the demand for <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag has failed. If the demand for <xref:System.Security.Permissions.SecurityPermission> succeeds, the operation is allowed.  \\n  \\n> [!NOTE]\\n>  Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag. (See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.\"\n  syntax:\n    content: public DynamicMethod (string name, System.Reflection.MethodAttributes attributes, System.Reflection.CallingConventions callingConvention, Type returnType, Type[] parameterTypes, System.Reflection.Module m, bool skipVisibility);\n    parameters:\n    - id: name\n      type: System.String\n      description: The name of the dynamic method. This can be a zero-length string, but it cannot be `null`.\n    - id: attributes\n      type: System.Reflection.MethodAttributes\n      description: A bitwise combination of <xref href=\"System.Reflection.MethodAttributes\"></xref> values that specifies the attributes of the dynamic method. The only combination allowed is <xref href=\"System.Reflection.MethodAttributes.Public\"></xref> and <xref href=\"System.Reflection.MethodAttributes.Static\"></xref>.\n    - id: callingConvention\n      type: System.Reflection.CallingConventions\n      description: The calling convention for the dynamic method. Must be <xref href=\"System.Reflection.CallingConventions.Standard\"></xref>.\n    - id: returnType\n      type: System.Type\n      description: A <xref href=\"System.Type\"></xref> object that specifies the return type of the dynamic method, or `null` if the method has no return type.\n    - id: parameterTypes\n      type: System.Type[]\n      description: An array of <xref href=\"System.Type\"></xref> objects specifying the types of the parameters of the dynamic method, or `null` if the method has no parameters.\n    - id: m\n      type: System.Reflection.Module\n      description: ''\n    - id: skipVisibility\n      type: System.Boolean\n      description: '`true` to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method; otherwise, `false`.'\n  overload: System.Reflection.Emit.DynamicMethod.#ctor*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"An element of <code>parameterTypes</code> is `null` or <xref href=\\\"System.Void\\\"></xref>.  \\n  \\n -or-  \\n  \\n <code>m</code> is a module that provides anonymous hosting for dynamic methods.\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>name</code> is `null`.  \\n  \\n -or-  \\n  \\n <code>m</code> is `null`.\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"<code>attributes</code> is a combination of flags other than <xref href=\\\"System.Reflection.MethodAttributes.Public\\\"></xref> and <xref href=\\\"System.Reflection.MethodAttributes.Static\\\"></xref>.  \\n  \\n -or-  \\n  \\n <code>callingConvention</code> is not <xref href=\\\"System.Reflection.CallingConventions.Standard\\\"></xref>.  \\n  \\n -or-  \\n  \\n <code>returnType</code> is a type for which <xref href=\\\"System.Type.IsByRef\\\"></xref> returns `true`.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/DynamicMethod.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type,System.Boolean)\n  commentId: M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type,System.Boolean)\n  id: '#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type,System.Boolean)'\n  parent: System.Reflection.Emit.DynamicMethod\n  langs:\n  - csharp\n  name: DynamicMethod(String, MethodAttributes, CallingConventions, Type, Type[], Type, Boolean)\n  nameWithType: DynamicMethod.DynamicMethod(String, MethodAttributes, CallingConventions, Type, Type[], Type, Boolean)\n  fullName: DynamicMethod.DynamicMethod(String, MethodAttributes, CallingConventions, Type, Type[], Type, Boolean)\n  type: Constructor\n  assemblies:\n  - System.Reflection.Emit.Lightweight\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Creates a dynamic method, specifying the method name, attributes, calling convention, return type, parameter types, the type with which the dynamic method is logically associated, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.\n  remarks: \"The dynamic method is global to the module that contains the type `owner`. It has access to all members of the type `owner`.  \\n  \\n The dynamic method created with this constructor has access to all members of the type `owner`, and to public and `internal` (`Friend` in Visual Basic) members of all the types contained in the module that contains `owner`. Skipping the JIT compiler's visibility checks allows the dynamic method to access private and protected members of all other types as well. This is useful, for example, when writing code to serialize objects.  \\n  \\n> [!NOTE]\\n>  For backward compatibility, this constructor demands <xref:System.Security.Permissions.SecurityPermission> with the <xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName> flag if the following conditions are both true: `owner` is in a module other than the calling module, and the demand for <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag has failed. If the demand for <xref:System.Security.Permissions.SecurityPermission> succeeds, the operation is allowed.  \\n  \\n> [!NOTE]\\n>  Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag. (See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.\"\n  syntax:\n    content: public DynamicMethod (string name, System.Reflection.MethodAttributes attributes, System.Reflection.CallingConventions callingConvention, Type returnType, Type[] parameterTypes, Type owner, bool skipVisibility);\n    parameters:\n    - id: name\n      type: System.String\n      description: The name of the dynamic method. This can be a zero-length string, but it cannot be `null`.\n    - id: attributes\n      type: System.Reflection.MethodAttributes\n      description: A bitwise combination of <xref href=\"System.Reflection.MethodAttributes\"></xref> values that specifies the attributes of the dynamic method. The only combination allowed is <xref href=\"System.Reflection.MethodAttributes.Public\"></xref> and <xref href=\"System.Reflection.MethodAttributes.Static\"></xref>.\n    - id: callingConvention\n      type: System.Reflection.CallingConventions\n      description: The calling convention for the dynamic method. Must be <xref href=\"System.Reflection.CallingConventions.Standard\"></xref>.\n    - id: returnType\n      type: System.Type\n      description: A <xref href=\"System.Type\"></xref> object that specifies the return type of the dynamic method, or `null` if the method has no return type.\n    - id: parameterTypes\n      type: System.Type[]\n      description: An array of <xref href=\"System.Type\"></xref> objects specifying the types of the parameters of the dynamic method, or `null` if the method has no parameters.\n    - id: owner\n      type: System.Type\n      description: A <xref href=\"System.Type\"></xref> with which the dynamic method is logically associated. The dynamic method has access to all members of the type.\n    - id: skipVisibility\n      type: System.Boolean\n      description: '`true` to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method; otherwise, `false`.'\n  overload: System.Reflection.Emit.DynamicMethod.#ctor*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"An element of <code>parameterTypes</code> is `null` or <xref href=\\\"System.Void\\\"></xref>.  \\n  \\n -or-  \\n  \\n <code>owner</code> is an interface, an array, an open generic type, or a type parameter of a generic type or method.\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>name</code> is `null`.  \\n  \\n -or-  \\n  \\n <code>owner</code> is `null`.\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"<code>attributes</code> is a combination of flags other than <xref href=\\\"System.Reflection.MethodAttributes.Public\\\"></xref> and <xref href=\\\"System.Reflection.MethodAttributes.Static\\\"></xref>.  \\n  \\n -or-  \\n  \\n <code>callingConvention</code> is not <xref href=\\\"System.Reflection.CallingConventions.Standard\\\"></xref>.  \\n  \\n -or-  \\n  \\n <code>returnType</code> is a type for which <xref href=\\\"System.Type.IsByRef\\\"></xref> returns `true`.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/DynamicMethod.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.DynamicMethod.Attributes\n  commentId: P:System.Reflection.Emit.DynamicMethod.Attributes\n  id: Attributes\n  parent: System.Reflection.Emit.DynamicMethod\n  langs:\n  - csharp\n  name: Attributes\n  nameWithType: DynamicMethod.Attributes\n  fullName: DynamicMethod.Attributes\n  type: Property\n  assemblies:\n  - System.Reflection.Emit.Lightweight\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Gets the attributes specified when the dynamic method was created.\n  remarks: Currently, the method attributes for a dynamic method are always <xref:System.Reflection.MethodAttributes.Public> and <xref:System.Reflection.MethodAttributes.Static>.\n  example:\n  - \"The following code example displays the method attributes of a dynamic method. This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.  \\n  \\n [!code-cpp[Reflection.DynamicMethod.All#21](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#21)]\\n [!code-csharp[Reflection.DynamicMethod.All#21](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#21)]\\n [!code-vb[Reflection.DynamicMethod.All#21](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#21)]\"\n  syntax:\n    content: public override System.Reflection.MethodAttributes Attributes { get; }\n    return:\n      type: System.Reflection.MethodAttributes\n      description: A bitwise combination of the <xref href=\"System.Reflection.MethodAttributes\"></xref> values representing the attributes for the method.\n  overload: System.Reflection.Emit.DynamicMethod.Attributes*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/DynamicMethod.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.DynamicMethod.CallingConvention\n  commentId: P:System.Reflection.Emit.DynamicMethod.CallingConvention\n  id: CallingConvention\n  parent: System.Reflection.Emit.DynamicMethod\n  langs:\n  - csharp\n  name: CallingConvention\n  nameWithType: DynamicMethod.CallingConvention\n  fullName: DynamicMethod.CallingConvention\n  type: Property\n  assemblies:\n  - System.Reflection.Emit.Lightweight\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Gets the calling convention specified when the dynamic method was created.\n  remarks: Currently, the calling convention for a dynamic method is always <xref:System.Reflection.CallingConventions.Standard>.\n  example:\n  - \"The following code example displays the calling convention of a dynamic method. This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.  \\n  \\n [!code-cpp[Reflection.DynamicMethod.All#22](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#22)]\\n [!code-csharp[Reflection.DynamicMethod.All#22](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#22)]\\n [!code-vb[Reflection.DynamicMethod.All#22](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#22)]\"\n  syntax:\n    content: public override System.Reflection.CallingConventions CallingConvention { get; }\n    return:\n      type: System.Reflection.CallingConventions\n      description: One of the <xref href=\"System.Reflection.CallingConventions\"></xref> values that indicates the calling convention of the method.\n  overload: System.Reflection.Emit.DynamicMethod.CallingConvention*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/DynamicMethod.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type)\n  commentId: M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type)\n  id: CreateDelegate(System.Type)\n  parent: System.Reflection.Emit.DynamicMethod\n  langs:\n  - csharp\n  name: CreateDelegate(Type)\n  nameWithType: DynamicMethod.CreateDelegate(Type)\n  fullName: DynamicMethod.CreateDelegate(Type)\n  type: Method\n  assemblies:\n  - System.Reflection.Emit.Lightweight\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Completes the dynamic method and creates a delegate that can be used to execute it.\n  remarks: \"Calling the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> method or the <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method completes the dynamic method. Any further attempt to alter the dynamic method, such as modifying parameter definitions or emitting more Microsoft intermediate language (MSIL), is ignored; no exception is thrown.  \\n  \\n To create a method body for a dynamic method when you have your own MSIL generator, call the <xref:System.Reflection.Emit.DynamicMethod.GetDynamicILInfo%2A> method to obtain a <xref:System.Reflection.Emit.DynamicILInfo> object. If you do not have your own MSIL generator, call the <xref:System.Reflection.Emit.DynamicMethod.GetILGenerator%2A> method to obtain an <xref:System.Reflection.Emit.ILGenerator> object that can be used to generate the method body.\"\n  example:\n  - \"The following code example creates a dynamic method that takes two parameters. The example emits a simple function body that prints the first parameter to the console, and the example uses the second parameter as the return value of the method. The example completes the method by creating a delegate, invokes the delegate with different parameters, and finally invokes the dynamic method using the <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method.  \\n  \\n [!code-cpp[Reflection.DynamicMethod.ctor1#1](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.ctor1/cpp/source.cpp#1)]\\n [!code-csharp[Reflection.DynamicMethod.ctor1#1](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.ctor1/CS/source.cs#1)]\\n [!code-vb[Reflection.DynamicMethod.ctor1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.ctor1/VB/source.vb#1)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public override sealed Delegate CreateDelegate (Type delegateType);\n    parameters:\n    - id: delegateType\n      type: System.Type\n      description: A delegate type whose signature matches that of the dynamic method.\n    return:\n      type: System.Delegate\n      description: A delegate of the specified type, which can be used to execute the dynamic method.\n  overload: System.Reflection.Emit.DynamicMethod.CreateDelegate*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The dynamic method has no method body.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>delegateType</code> has the wrong number of parameters or the wrong parameter types.\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/DynamicMethod.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type,System.Object)\n  commentId: M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type,System.Object)\n  id: CreateDelegate(System.Type,System.Object)\n  parent: System.Reflection.Emit.DynamicMethod\n  langs:\n  - csharp\n  name: CreateDelegate(Type, Object)\n  nameWithType: DynamicMethod.CreateDelegate(Type, Object)\n  fullName: DynamicMethod.CreateDelegate(Type, Object)\n  type: Method\n  assemblies:\n  - System.Reflection.Emit.Lightweight\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Completes the dynamic method and creates a delegate that can be used to execute it, specifying the delegate type and an object the delegate is bound to.\n  remarks: \"This method overload creates a delegate bound to a particular object. Such a delegate is said to be closed over its first argument. Although the method is static, it acts as if it were an instance method; the instance is `target`.  \\n  \\n This method overload requires `target` to be of the same type as the first parameter of the dynamic method, or to be assignable to that type (for example, a derived class).  The signature of `delegateType` has all the parameters of the dynamic method except the first. For example, if the dynamic method has the parameters <xref:System.String>, <xref:System.Int32>, and <xref:System.Byte>, then `delegateType` has the parameters <xref:System.Int32> and <xref:System.Byte>; `target` is of type <xref:System.String>.  \\n  \\n Calling the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> method or the <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method completes the dynamic method. Any further attempt to alter the dynamic method, such as modifying parameter definitions or emitting more Microsoft intermediate language (MSIL), is ignored; no exception is thrown.  \\n  \\n To create a method body for a dynamic method when you have your own MSIL generator, call the <xref:System.Reflection.Emit.DynamicMethod.GetDynamicILInfo%2A> method to obtain a <xref:System.Reflection.Emit.DynamicILInfo> object. If you do not have your own MSIL generator, call the <xref:System.Reflection.Emit.DynamicMethod.GetILGenerator%2A> method to obtain an <xref:System.Reflection.Emit.ILGenerator> object that can be used to generate the method body.\"\n  example:\n  - \"The following code example creates delegate that binds a <xref:System.Reflection.Emit.DynamicMethod> to an instance of a type, so that the method acts on the same instance each time it is invoked.  \\n  \\n The code example defines a class named `Example` with a private field, a class named `DerivedFromxample` that derives from the first class, a delegate type named `UseLikeStatic` that returns <xref:System.Int32> and has parameters of type `Example` and <xref:System.Int32>, and a delegate type named `UseLikeInstance` that returns <xref:System.Int32> and has one parameter of type <xref:System.Int32>.  \\n  \\n The example code then creates a <xref:System.Reflection.Emit.DynamicMethod> that changes the private field of an instance of `Example` and returns the previous value.  \\n  \\n> [!NOTE]\\n>  In general, changing the internal fields of classes is not good object-oriented coding practice.  \\n  \\n The example code creates an instance of `Example` and then creates two delegates. The first is of type `UseLikeStatic`, which has the same parameters as the dynamic method. The second is of type `UseLikeInstance`, which lacks the first parameter (of type `Example`). This delegate is created using the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%28System.Type%2CSystem.Object%29> method overload; the second parameter of that method overload is an instance of `Example`, in this case the instance just created, which is bound to the newly created delegate. Whenever that delegate is invoked, the dynamic method acts on the bound instance of `Example`.  \\n  \\n> [!NOTE]\\n>  This is an example of the relaxed rules for delegate binding introduced in the [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)], along with new overloads of the <xref:System.Delegate.CreateDelegate%2A?displayProperty=fullName> method. For more information, see the <xref:System.Delegate> class.  \\n  \\n The `UseLikeStatic` delegate is invoked, passing in the instance of `Example` that is bound to the `UseLikeInstance` delegate. Then the `UseLikeInstance` delegate is invoked, so that both delegates act on the same instance of `Example`. The changes in the values of the internal field are displayed after each call. Finally, a `UseLikeInstance` delegate is bound to an instance of `DerivedFromxample`, and the delegate calls are repeated.  \\n  \\n [!code-csharp[Reflection.DynamicMethod.ClosedOver#1](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.ClosedOver/cs/source.cs#1)]\\n [!code-vb[Reflection.DynamicMethod.ClosedOver#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.ClosedOver/vb/source.vb#1)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public override sealed Delegate CreateDelegate (Type delegateType, object target);\n    parameters:\n    - id: delegateType\n      type: System.Type\n      description: A delegate type whose signature matches that of the dynamic method, minus the first parameter.\n    - id: target\n      type: System.Object\n      description: An object the delegate is bound to. Must be of the same type as the first parameter of the dynamic method.\n    return:\n      type: System.Delegate\n      description: A delegate of the specified type, which can be used to execute the dynamic method with the specified target object.\n  overload: System.Reflection.Emit.DynamicMethod.CreateDelegate*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The dynamic method has no method body.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>target</code> is not the same type as the first parameter of the dynamic method, and is not assignable to that type.  \\n  \\n -or-  \\n  \\n <code>delegateType</code> has the wrong number of parameters or the wrong parameter types.\"\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/DynamicMethod.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.DynamicMethod.DeclaringType\n  commentId: P:System.Reflection.Emit.DynamicMethod.DeclaringType\n  id: DeclaringType\n  parent: System.Reflection.Emit.DynamicMethod\n  langs:\n  - csharp\n  name: DeclaringType\n  nameWithType: DynamicMethod.DeclaringType\n  fullName: DynamicMethod.DeclaringType\n  type: Property\n  assemblies:\n  - System.Reflection.Emit.Lightweight\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Gets the type that declares the method, which is always `null` for dynamic methods.\n  remarks: This property always returns `null` for dynamic methods. Even when a dynamic method is logically associated with a type, it is not declared by the type.\n  example:\n  - \"The following code example displays the declaring type of a dynamic method. This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.  \\n  \\n [!code-cpp[Reflection.DynamicMethod.All#23](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#23)]\\n [!code-csharp[Reflection.DynamicMethod.All#23](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#23)]\\n [!code-vb[Reflection.DynamicMethod.All#23](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#23)]\"\n  syntax:\n    content: public override Type DeclaringType { get; }\n    return:\n      type: System.Type\n      description: Always `null`.\n  overload: System.Reflection.Emit.DynamicMethod.DeclaringType*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/DynamicMethod.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.DynamicMethod.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)\n  commentId: M:System.Reflection.Emit.DynamicMethod.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)\n  id: DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)\n  parent: System.Reflection.Emit.DynamicMethod\n  langs:\n  - csharp\n  name: DefineParameter(Int32, ParameterAttributes, String)\n  nameWithType: DynamicMethod.DefineParameter(Int32, ParameterAttributes, String)\n  fullName: DynamicMethod.DefineParameter(Int32, ParameterAttributes, String)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Defines a parameter of the dynamic method.\n  remarks: \"If `position` is 0, the <xref:System.Reflection.Emit.DynamicMethod.DefineParameter%2A> method refers to the return value. Setting parameter information has no effect on the return value.  \\n  \\n If the dynamic method has already been completed, by calling the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> or <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method, the <xref:System.Reflection.Emit.DynamicMethod.DefineParameter%2A> method has no effect. No exception is thrown.\"\n  example:\n  - \"The following code example shows how to define parameter information for a dynamic method. This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.  \\n  \\n [!code-cpp[Reflection.DynamicMethod.All#33](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#33)]\\n [!code-csharp[Reflection.DynamicMethod.All#33](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#33)]\\n [!code-vb[Reflection.DynamicMethod.All#33](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#33)]\"\n  syntax:\n    content: public System.Reflection.Emit.ParameterBuilder DefineParameter (int position, System.Reflection.ParameterAttributes attributes, string parameterName);\n    parameters:\n    - id: position\n      type: System.Int32\n      description: The position of the parameter in the parameter list. Parameters are indexed beginning with the number 1 for the first parameter.\n    - id: attributes\n      type: System.Reflection.ParameterAttributes\n      description: A bitwise combination of <xref href=\"System.Reflection.ParameterAttributes\"></xref> values that specifies the attributes of the parameter.\n    - id: parameterName\n      type: System.String\n      description: The name of the parameter. The name can be a zero-length string.\n    return:\n      type: System.Reflection.Emit.ParameterBuilder\n      description: Always returns `null`.\n  overload: System.Reflection.Emit.DynamicMethod.DefineParameter*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"The method has no parameters.  \\n  \\n -or-  \\n  \\n <code>position</code> is less than 0.  \\n  \\n -or-  \\n  \\n <code>position</code> is greater than the number of the method's parameters.\"\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/DynamicMethod.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.DynamicMethod.GetBaseDefinition\n  commentId: M:System.Reflection.Emit.DynamicMethod.GetBaseDefinition\n  id: GetBaseDefinition\n  parent: System.Reflection.Emit.DynamicMethod\n  langs:\n  - csharp\n  name: GetBaseDefinition()\n  nameWithType: DynamicMethod.GetBaseDefinition()\n  fullName: DynamicMethod.GetBaseDefinition()\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit.Lightweight\n  namespace: System.Reflection.Emit\n  summary: Returns the base implementation for the method.\n  remarks: This method always returns the current `DynamicMethod` object.\n  syntax:\n    content: public override System.Reflection.MethodInfo GetBaseDefinition ();\n    parameters: []\n    return:\n      type: System.Reflection.MethodInfo\n      description: The base implementation of the method.\n  overload: System.Reflection.Emit.DynamicMethod.GetBaseDefinition*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/DynamicMethod.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.DynamicMethod.GetCustomAttributes(System.Boolean)\n  commentId: M:System.Reflection.Emit.DynamicMethod.GetCustomAttributes(System.Boolean)\n  id: GetCustomAttributes(System.Boolean)\n  parent: System.Reflection.Emit.DynamicMethod\n  langs:\n  - csharp\n  name: GetCustomAttributes(Boolean)\n  nameWithType: DynamicMethod.GetCustomAttributes(Boolean)\n  fullName: DynamicMethod.GetCustomAttributes(Boolean)\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit.Lightweight\n  namespace: System.Reflection.Emit\n  summary: Returns all the custom attributes defined for the method.\n  remarks: \"For dynamic methods, specifying `true` for `inherit` has no effect, because the method is not declared in a type.  \\n  \\n> [!NOTE]\\n>  Custom attributes are not currently supported on dynamic methods. The only attribute returned is <xref:System.Runtime.CompilerServices.MethodImplAttribute>; you can get the method implementation flags more easily using the <xref:System.Reflection.Emit.DynamicMethod.GetMethodImplementationFlags%2A> method.\"\n  syntax:\n    content: public override object[] GetCustomAttributes (bool inherit);\n    parameters:\n    - id: inherit\n      type: System.Boolean\n      description: \"`true` to search the method's inheritance chain to find the custom attributes; `false` to check only the current method.\"\n    return:\n      type: System.Object[]\n      description: An array of objects representing all the custom attributes of the method.\n  overload: System.Reflection.Emit.DynamicMethod.GetCustomAttributes*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/DynamicMethod.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.DynamicMethod.GetCustomAttributes(System.Type,System.Boolean)\n  commentId: M:System.Reflection.Emit.DynamicMethod.GetCustomAttributes(System.Type,System.Boolean)\n  id: GetCustomAttributes(System.Type,System.Boolean)\n  parent: System.Reflection.Emit.DynamicMethod\n  langs:\n  - csharp\n  name: GetCustomAttributes(Type, Boolean)\n  nameWithType: DynamicMethod.GetCustomAttributes(Type, Boolean)\n  fullName: DynamicMethod.GetCustomAttributes(Type, Boolean)\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit.Lightweight\n  namespace: System.Reflection.Emit\n  summary: Returns the custom attributes of the specified type that have been applied to the method.\n  remarks: \"For dynamic methods, specifying `true` for `inherit` has no effect, because the method is not declared in a type.  \\n  \\n> [!NOTE]\\n>  Custom attributes are not currently supported on dynamic methods. The only attribute returned is <xref:System.Runtime.CompilerServices.MethodImplAttribute>; you can get the method implementation flags more easily using the <xref:System.Reflection.Emit.DynamicMethod.GetMethodImplementationFlags%2A> method.\"\n  syntax:\n    content: public override object[] GetCustomAttributes (Type attributeType, bool inherit);\n    parameters:\n    - id: attributeType\n      type: System.Type\n      description: A <xref href=\"System.Type\"></xref> representing the type of custom attribute to return.\n    - id: inherit\n      type: System.Boolean\n      description: \"`true` to search the method's inheritance chain to find the custom attributes; `false` to check only the current method.\"\n    return:\n      type: System.Object[]\n      description: An array of objects representing the attributes of the method that are of type <code>attributeType</code> or derive from type <code>attributeType</code>.\n  overload: System.Reflection.Emit.DynamicMethod.GetCustomAttributes*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>attributeType</code> is `null`.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/DynamicMethod.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.DynamicMethod.GetDynamicILInfo\n  commentId: M:System.Reflection.Emit.DynamicMethod.GetDynamicILInfo\n  id: GetDynamicILInfo\n  parent: System.Reflection.Emit.DynamicMethod\n  langs:\n  - csharp\n  name: GetDynamicILInfo()\n  nameWithType: DynamicMethod.GetDynamicILInfo()\n  fullName: DynamicMethod.GetDynamicILInfo()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Returns a <xref href=\"System.Reflection.Emit.DynamicILInfo\"></xref> object that can be used to generate a method body from metadata tokens, scopes, and Microsoft intermediate language (MSIL) streams.\n  remarks: The <xref:System.Reflection.Emit.DynamicILInfo> class is provided to support unmanaged code generation.\n  syntax:\n    content: public System.Reflection.Emit.DynamicILInfo GetDynamicILInfo ();\n    parameters: []\n    return:\n      type: System.Reflection.Emit.DynamicILInfo\n      description: A <xref href=\"System.Reflection.Emit.DynamicILInfo\"></xref> object that can be used to generate a method body from metadata tokens, scopes, and MSIL streams.\n  overload: System.Reflection.Emit.DynamicMethod.GetDynamicILInfo*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/DynamicMethod.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.DynamicMethod.GetILGenerator(System.Int32)\n  commentId: M:System.Reflection.Emit.DynamicMethod.GetILGenerator(System.Int32)\n  id: GetILGenerator(System.Int32)\n  parent: System.Reflection.Emit.DynamicMethod\n  langs:\n  - csharp\n  name: GetILGenerator(Int32)\n  nameWithType: DynamicMethod.GetILGenerator(Int32)\n  fullName: DynamicMethod.GetILGenerator(Int32)\n  type: Method\n  assemblies:\n  - System.Reflection.Emit.Lightweight\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Returns a Microsoft intermediate language (MSIL) generator for the method with the specified MSIL stream size.\n  remarks: \"After a dynamic method has been completed, by calling the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> or <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method, any further attempt to add MSIL is ignored. No exception is thrown.  \\n  \\n> [!NOTE]\\n>  There are restrictions on unverifiable code in dynamic methods, even in some full-trust scenarios. See the \\\"Verification\\\" section in Remarks for <xref:System.Reflection.Emit.DynamicMethod>.\"\n  example:\n  - \"The following code example demonstrates this method overload. This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.  \\n  \\n [!code-cpp[Reflection.DynamicMethod.All#2](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#2)]\\n [!code-csharp[Reflection.DynamicMethod.All#2](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#2)]\\n [!code-vb[Reflection.DynamicMethod.All#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#2)]\"\n  syntax:\n    content: public System.Reflection.Emit.ILGenerator GetILGenerator (int streamSize);\n    parameters:\n    - id: streamSize\n      type: System.Int32\n      description: The size of the MSIL stream, in bytes.\n    return:\n      type: System.Reflection.Emit.ILGenerator\n      description: An <xref href=\"System.Reflection.Emit.ILGenerator\"></xref> object for the method, with the specified MSIL stream size.\n  overload: System.Reflection.Emit.DynamicMethod.GetILGenerator*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/DynamicMethod.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.DynamicMethod.GetILGenerator\n  commentId: M:System.Reflection.Emit.DynamicMethod.GetILGenerator\n  id: GetILGenerator\n  parent: System.Reflection.Emit.DynamicMethod\n  langs:\n  - csharp\n  name: GetILGenerator()\n  nameWithType: DynamicMethod.GetILGenerator()\n  fullName: DynamicMethod.GetILGenerator()\n  type: Method\n  assemblies:\n  - System.Reflection.Emit.Lightweight\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Returns a Microsoft intermediate language (MSIL) generator for the method with a default MSIL stream size of 64 bytes.\n  remarks: \"After a dynamic method has been completed, by calling the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> or <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method, any further attempt to add MSIL is ignored. No exception is thrown.  \\n  \\n> [!NOTE]\\n>  There are restrictions on unverifiable code in dynamic methods, even in some full-trust scenarios. See the \\\"Verification\\\" section in Remarks for <xref:System.Reflection.Emit.DynamicMethod>.\"\n  example:\n  - \"The following code example creates a dynamic method that takes two parameters. The example emits a simple function body that prints the first parameter to the console, and the example uses the second parameter as the return value of the method. The example completes the method by creating a delegate, invokes the delegate with different parameters, and finally invokes the dynamic method using the <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method.  \\n  \\n [!code-cpp[Reflection.DynamicMethod.ctor1#1](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.ctor1/cpp/source.cpp#1)]\\n [!code-csharp[Reflection.DynamicMethod.ctor1#1](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.ctor1/CS/source.cs#1)]\\n [!code-vb[Reflection.DynamicMethod.ctor1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.ctor1/VB/source.vb#1)]\"\n  syntax:\n    content: public System.Reflection.Emit.ILGenerator GetILGenerator ();\n    parameters: []\n    return:\n      type: System.Reflection.Emit.ILGenerator\n      description: An <xref href=\"System.Reflection.Emit.ILGenerator\"></xref> object for the method.\n  overload: System.Reflection.Emit.DynamicMethod.GetILGenerator*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/DynamicMethod.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.DynamicMethod.GetMethodImplementationFlags\n  commentId: M:System.Reflection.Emit.DynamicMethod.GetMethodImplementationFlags\n  id: GetMethodImplementationFlags\n  parent: System.Reflection.Emit.DynamicMethod\n  langs:\n  - csharp\n  name: GetMethodImplementationFlags()\n  nameWithType: DynamicMethod.GetMethodImplementationFlags()\n  fullName: DynamicMethod.GetMethodImplementationFlags()\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit.Lightweight\n  namespace: System.Reflection.Emit\n  summary: Returns the implementation flags for the method.\n  remarks: Currently, method implementation attributes for dynamic methods are always <xref:System.Reflection.MethodImplAttributes.IL> and <xref:System.Reflection.MethodImplAttributes.NoInlining>.\n  syntax:\n    content: public override System.Reflection.MethodImplAttributes GetMethodImplementationFlags ();\n    parameters: []\n    return:\n      type: System.Reflection.MethodImplAttributes\n      description: A bitwise combination of <xref href=\"System.Reflection.MethodImplAttributes\"></xref> values representing the implementation flags for the method.\n  overload: System.Reflection.Emit.DynamicMethod.GetMethodImplementationFlags*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/DynamicMethod.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.DynamicMethod.GetParameters\n  commentId: M:System.Reflection.Emit.DynamicMethod.GetParameters\n  id: GetParameters\n  parent: System.Reflection.Emit.DynamicMethod\n  langs:\n  - csharp\n  name: GetParameters()\n  nameWithType: DynamicMethod.GetParameters()\n  fullName: DynamicMethod.GetParameters()\n  type: Method\n  assemblies:\n  - System.Reflection.Emit.Lightweight\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Returns the parameters of the dynamic method.\n  remarks: The <xref:System.Reflection.ParameterInfo> objects returned by this method are for information only. Use the <xref:System.Reflection.Emit.DynamicMethod.DefineParameter%2A> method to set or change the characteristics of the parameters.\n  example:\n  - \"The following code example displays the parameters of a dynamic method. This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.  \\n  \\n [!code-cpp[Reflection.DynamicMethod.All#34](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#34)]\\n [!code-csharp[Reflection.DynamicMethod.All#34](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#34)]\\n [!code-vb[Reflection.DynamicMethod.All#34](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#34)]\"\n  syntax:\n    content: public override System.Reflection.ParameterInfo[] GetParameters ();\n    parameters: []\n    return:\n      type: System.Reflection.ParameterInfo[]\n      description: An array of <xref href=\"System.Reflection.ParameterInfo\"></xref> objects that represent the parameters of the dynamic method.\n  overload: System.Reflection.Emit.DynamicMethod.GetParameters*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/DynamicMethod.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.DynamicMethod.InitLocals\n  commentId: P:System.Reflection.Emit.DynamicMethod.InitLocals\n  id: InitLocals\n  parent: System.Reflection.Emit.DynamicMethod\n  langs:\n  - csharp\n  name: InitLocals\n  nameWithType: DynamicMethod.InitLocals\n  fullName: DynamicMethod.InitLocals\n  type: Property\n  assemblies:\n  - System.Reflection.Emit.Lightweight\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Gets or sets a value indicating whether the local variables in the method are zero-initialized.\n  remarks: If this property is set to `true`, the emitted Microsoft intermediate language (MSIL) includes initialization of local variables. If it is set to `false`, local variables are not initialized and the generated code is unverifiable.\n  example:\n  - \"The following code example displays the <xref:System.Reflection.Emit.DynamicMethod.InitLocals%2A> property of a dynamic method. This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.  \\n  \\n [!code-cpp[Reflection.DynamicMethod.All#24](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#24)]\\n [!code-csharp[Reflection.DynamicMethod.All#24](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#24)]\\n [!code-vb[Reflection.DynamicMethod.All#24](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#24)]\"\n  syntax:\n    content: public bool InitLocals { get; set; }\n    return:\n      type: System.Boolean\n      description: '`true` if the local variables in the method are zero-initialized; otherwise, `false`. The default is `true`.'\n  overload: System.Reflection.Emit.DynamicMethod.InitLocals*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/DynamicMethod.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.DynamicMethod.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)\n  commentId: M:System.Reflection.Emit.DynamicMethod.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)\n  id: Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)\n  parent: System.Reflection.Emit.DynamicMethod\n  langs:\n  - csharp\n  name: Invoke(Object, BindingFlags, Binder, Object[], CultureInfo)\n  nameWithType: DynamicMethod.Invoke(Object, BindingFlags, Binder, Object[], CultureInfo)\n  fullName: DynamicMethod.Invoke(Object, BindingFlags, Binder, Object[], CultureInfo)\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit.Lightweight\n  namespace: System.Reflection.Emit\n  summary: Invokes the dynamic method using the specified parameters, under the constraints of the specified binder, with the specified culture information.\n  remarks: \"In addition to the listed exceptions, the calling code should be prepared to catch any exceptions thrown by the dynamic method.  \\n  \\n Executing a dynamic method with a delegate created by the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> method is more efficient than executing it with the <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method.  \\n  \\n Calling the <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method or the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> method completes the dynamic method. Any further attempt to alter the dynamic method, such as modifying parameter definitions or emitting more Microsoft intermediate language (MSIL), is ignored; no exception is thrown.  \\n  \\n All dynamic methods are static, so the `obj` parameter is always ignored. To treat a dynamic method as if it were an instance method, use the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%28System.Type%2CSystem.Object%29> overload that takes an object instance.  \\n  \\n If the dynamic method has no parameters, the value of `parameters` should be `null`. Otherwise the number, type, and order of elements in the parameters array should be identical to the number, type, and order of parameters of the dynamic method.  \\n  \\n> [!NOTE]\\n>  This method overload is called by the <xref:System.Reflection.MethodBase.Invoke%28System.Object%2CSystem.Object%5B%5D%29> method overload inherited from the <xref:System.Reflection.MethodBase> class, so the preceding remarks apply to both overloads.  \\n  \\n This method does not demand permissions directly, but invoking the dynamic method can result in security demands, depending on the method. For example, no demands are made for anonymously hosted dynamic methods that are created with the `restrictedSkipVisibility` parameter set to `false`. On the other hand, if you create a method with `restrictedSkipVisibility` set to `true` so it can access a hidden member of a target assembly, the method will cause a demand for the permissions of the target assembly plus <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag.  \\n  \\n> [!NOTE]\\n>  Prior to the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method required <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess> flag.\"\n  example:\n  - \"The following code example invokes a dynamic method with exact binding, using the US-English culture. This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.  \\n  \\n [!code-cpp[Reflection.DynamicMethod.All#4](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#4)]\\n [!code-csharp[Reflection.DynamicMethod.All#4](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#4)]\\n [!code-vb[Reflection.DynamicMethod.All#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#4)]\"\n  syntax:\n    content: public override object Invoke (object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] parameters, System.Globalization.CultureInfo culture);\n    parameters:\n    - id: obj\n      type: System.Object\n      description: This parameter is ignored for dynamic methods, because they are static. Specify `null`.\n    - id: invokeAttr\n      type: System.Reflection.BindingFlags\n      description: A bitwise combination of <xref href=\"System.Reflection.BindingFlags\"></xref> values.\n    - id: binder\n      type: System.Reflection.Binder\n      description: A <xref href=\"System.Reflection.Binder\"></xref> object that enables the binding, coercion of argument types, invocation of members, and retrieval of <xref href=\"System.Reflection.MemberInfo\"></xref> objects through reflection. If <code>binder</code> is `null`, the default binder is used. For more details, see <xref href=\"System.Reflection.Binder\"></xref>.\n    - id: parameters\n      type: System.Object[]\n      description: An argument list. This is an array of arguments with the same number, order, and type as the parameters of the method to be invoked. If there are no parameters this parameter should be `null`.\n    - id: culture\n      type: System.Globalization.CultureInfo\n      description: An instance of <xref href=\"System.Globalization.CultureInfo\"></xref> used to govern the coercion of types. If this is `null`, the <xref href=\"System.Globalization.CultureInfo\"></xref> for the current thread is used. For example, this information is needed to correctly convert a <xref href=\"System.String\"></xref> that represents 1000 to a <xref href=\"System.Double\"></xref> value, because 1000 is represented differently by different cultures.\n    return:\n      type: System.Object\n      description: A <xref href=\"System.Object\"></xref> containing the return value of the invoked method.\n  overload: System.Reflection.Emit.DynamicMethod.Invoke*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The <xref href=\"System.Reflection.CallingConventions.VarArgs\"></xref> calling convention is not supported.\n  - type: System.Reflection.TargetParameterCountException\n    commentId: T:System.Reflection.TargetParameterCountException\n    description: The number of elements in <code>parameters</code> does not match the number of parameters in the dynamic method.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The type of one or more elements of <code>parameters</code> does not match the type of the corresponding parameter of the dynamic method.\n  - type: System.Reflection.TargetInvocationException\n    commentId: T:System.Reflection.TargetInvocationException\n    description: \"The dynamic method is associated with a module, is not anonymously hosted, and was constructed with <code>skipVisibility</code> set to `false`, but the dynamic method accesses members that are not `public` or `internal` (`Friend` in Visual Basic).  \\n  \\n -or-  \\n  \\n The dynamic method is anonymously hosted and was constructed with <code>skipVisibility</code> set to `false`, but it accesses members that are not `public`.  \\n  \\n -or-  \\n  \\n The dynamic method contains unverifiable code. See the \\\"Verification\\\" section in Remarks for <xref href=\\\"System.Reflection.Emit.DynamicMethod\\\"></xref>.\"\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/DynamicMethod.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.DynamicMethod.IsDefined(System.Type,System.Boolean)\n  commentId: M:System.Reflection.Emit.DynamicMethod.IsDefined(System.Type,System.Boolean)\n  id: IsDefined(System.Type,System.Boolean)\n  parent: System.Reflection.Emit.DynamicMethod\n  langs:\n  - csharp\n  name: IsDefined(Type, Boolean)\n  nameWithType: DynamicMethod.IsDefined(Type, Boolean)\n  fullName: DynamicMethod.IsDefined(Type, Boolean)\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit.Lightweight\n  namespace: System.Reflection.Emit\n  summary: Indicates whether the specified custom attribute type is defined.\n  remarks: \"For dynamic methods, specifying `true` for `inherit` has no effect. Dynamic methods have no inheritance chain.  \\n  \\n> [!NOTE]\\n>  Custom attributes are not currently supported on dynamic methods.\"\n  syntax:\n    content: public override bool IsDefined (Type attributeType, bool inherit);\n    parameters:\n    - id: attributeType\n      type: System.Type\n      description: A <xref href=\"System.Type\"></xref> representing the type of custom attribute to search for.\n    - id: inherit\n      type: System.Boolean\n      description: \"`true` to search the method's inheritance chain to find the custom attributes; `false` to check only the current method.\"\n    return:\n      type: System.Boolean\n      description: '`true` if the specified custom attribute type is defined; otherwise, `false`.'\n  overload: System.Reflection.Emit.DynamicMethod.IsDefined*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/DynamicMethod.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.DynamicMethod.IsSecurityCritical\n  commentId: P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical\n  id: IsSecurityCritical\n  parent: System.Reflection.Emit.DynamicMethod\n  langs:\n  - csharp\n  name: IsSecurityCritical\n  nameWithType: DynamicMethod.IsSecurityCritical\n  fullName: DynamicMethod.IsSecurityCritical\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Gets a value that indicates whether the current dynamic method is security-critical or security-safe-critical, and therefore can perform critical operations.\n  remarks: \"The <xref:System.Reflection.Emit.DynamicMethod.IsSecurityCritical%2A>, <xref:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical%2A>, and <xref:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent%2A> properties report the transparency level of the dynamic method as determined by the common language runtime (CLR). The combinations of these properties are shown in the following table:  \\n  \\n|Security level|IsSecurityCritical|IsSecuritySafeCritical|IsSecurityTransparent|  \\n|--------------------|------------------------|----------------------------|---------------------------|  \\n|Critical|`true`|`false`|`false`|  \\n|Safe critical|`true`|`true`|`false`|  \\n|Transparent|`false`|`false`|`true`|  \\n  \\n Using these properties is much simpler than examining the security annotations of an assembly and its types, checking the current trust level, and attempting to duplicate the runtime's rules.  \\n  \\n The transparency of a dynamic method depends on the module it is associated with. If the dynamic method is associated with a type rather than a module, its transparency depends on the module that contains the type. Dynamic methods do not have security annotations, so they are assigned the default transparency for the associated module.  \\n  \\n-   Anonymously hosted dynamic methods are always transparent, because the system-provided module that contains them is transparent.  \\n  \\n-   The transparency of a dynamic method that is associated with a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is described in the following table.  \\n  \\n    |Assembly annotation|Level 1 transparency|Level 2 transparency|  \\n    |-------------------------|--------------------------|--------------------------|  \\n    |Fully transparent|Transparent|Transparent|  \\n    |Fully critical|Critical|Critical|  \\n    |Mixed transparency|Transparent|Transparent|  \\n    |Security-agnostic|Safe-critical|Critical|  \\n  \\n     For example, if you associate a dynamic method with a type that is in mscorlib.dll, which has level 2 mixed transparency, the dynamic method is transparent and cannot execute critical code. For information about transparency levels, see [Security-Transparent Code, Level 1](~/docs/framework/misc/security-transparent-code-level-1.md) and [Security-Transparent Code, Level 2](~/docs/framework/misc/security-transparent-code-level-2.md).  \\n  \\n    > [!NOTE]\\n    >  Associating a dynamic method with a module in a trusted level 1 assembly that is security-agnostic, such as System.dll, does not permit elevation of trust. If the grant set of the code that calls the dynamic method does not include the grant set of System.dll (that is, full trust), <xref:System.Security.SecurityException> is thrown when the dynamic method is called.  \\n  \\n-   The transparency of a dynamic method that is associated with a partially trusted assembly depends on how the assembly is loaded. If the assembly is loaded with partial trust (for example, into a sandboxed application domain), the runtime ignores the security annotations of the assembly. The assembly and all its types and members, including dynamic methods, are treated as transparent. The runtime pays attention to security annotations only if the partial-trust assembly is loaded with full trust (for example, into the default application domain of a desktop application). In that case, the runtime assigns the dynamic method the default transparency for methods according to the assembly's annotations.  \\n  \\n For more information about reflection emit and transparency, see [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md). For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md).\"\n  syntax:\n    content: >-\n      [get: System.Security.SecuritySafeCritical]\n\n      public override bool IsSecurityCritical { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the current dynamic method is security-critical or security-safe-critical; `false` if it is transparent.'\n  overload: System.Reflection.Emit.DynamicMethod.IsSecurityCritical*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The dynamic method doesn't have a method body.\n  attributes:\n  - type: 'get: System.Security.SecuritySafeCritical'\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/DynamicMethod.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical\n  commentId: P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical\n  id: IsSecuritySafeCritical\n  parent: System.Reflection.Emit.DynamicMethod\n  langs:\n  - csharp\n  name: IsSecuritySafeCritical\n  nameWithType: DynamicMethod.IsSecuritySafeCritical\n  fullName: DynamicMethod.IsSecuritySafeCritical\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Gets a value that indicates whether the current dynamic method is security-safe-critical at the current trust level; that is, whether it can perform critical operations and can be accessed by transparent code.\n  remarks: \"The <xref:System.Reflection.Emit.DynamicMethod.IsSecurityCritical%2A>, <xref:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical%2A>, and <xref:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent%2A> properties report the transparency level of the dynamic method as determined by the common language runtime (CLR). The combinations of these properties are shown in the following table:  \\n  \\n|Security level|IsSecurityCritical|IsSecuritySafeCritical|IsSecurityTransparent|  \\n|--------------------|------------------------|----------------------------|---------------------------|  \\n|Critical|`true`|`false`|`false`|  \\n|Safe critical|`true`|`true`|`false`|  \\n|Transparent|`false`|`false`|`true`|  \\n  \\n Using these properties is much simpler than examining the security annotations of an assembly and its types, checking the current trust level, and attempting to duplicate the runtime's rules.  \\n  \\n The transparency of a dynamic method depends on the module it is associated with. If the dynamic method is associated with a type rather than a module, its transparency depends on the module that contains the type. Dynamic methods do not have security annotations, so they are assigned the default transparency for the associated module.  \\n  \\n-   Anonymously hosted dynamic methods are always transparent, because the system-provided module that contains them is transparent.  \\n  \\n-   The transparency of a dynamic method that is associated with a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is described in the following table.  \\n  \\n    |Assembly annotation|Level 1 transparency|Level 2 transparency|  \\n    |-------------------------|--------------------------|--------------------------|  \\n    |Fully transparent|Transparent|Transparent|  \\n    |Fully critical|Critical|Critical|  \\n    |Mixed transparency|Transparent|Transparent|  \\n    |Security-agnostic|Safe-critical|Critical|  \\n  \\n     For example, if you associate a dynamic method with a type that is in mscorlib.dll, which has level 2 mixed transparency, the dynamic method is transparent and cannot execute critical code. For information about transparency levels, see [Security-Transparent Code, Level 1](~/docs/framework/misc/security-transparent-code-level-1.md) and [Security-Transparent Code, Level 2](~/docs/framework/misc/security-transparent-code-level-2.md).  \\n  \\n    > [!NOTE]\\n    >  Associating a dynamic method with a module in a trusted level 1 assembly that is security-agnostic, such as System.dll, does not permit elevation of trust. If the grant set of the code that calls the dynamic method does not include the grant set of System.dll (that is, full trust), <xref:System.Security.SecurityException> is thrown when the dynamic method is called.  \\n  \\n-   The transparency of a dynamic method that is associated with a partially trusted assembly depends on how the assembly is loaded. If the assembly is loaded with partial trust (for example, into a sandboxed application domain), the runtime ignores the security annotations of the assembly. The assembly and all its types and members, including dynamic methods, are treated as transparent. The runtime pays attention to security annotations only if the partial-trust assembly is loaded with full trust (for example, into the default application domain of a desktop application). In that case, the runtime assigns the dynamic method the default transparency for methods according to the assembly's annotations.  \\n  \\n For more information about reflection emit and transparency, see [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md). For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md).\"\n  syntax:\n    content: >-\n      [get: System.Security.SecuritySafeCritical]\n\n      public override bool IsSecuritySafeCritical { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the dynamic method is security-safe-critical at the current trust level; `false` if it is security-critical or transparent.'\n  overload: System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The dynamic method doesn't have a method body.\n  attributes:\n  - type: 'get: System.Security.SecuritySafeCritical'\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/DynamicMethod.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.DynamicMethod.IsSecurityTransparent\n  commentId: P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent\n  id: IsSecurityTransparent\n  parent: System.Reflection.Emit.DynamicMethod\n  langs:\n  - csharp\n  name: IsSecurityTransparent\n  nameWithType: DynamicMethod.IsSecurityTransparent\n  fullName: DynamicMethod.IsSecurityTransparent\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Gets a value that indicates whether the current dynamic method is transparent at the current trust level, and therefore cannot perform critical operations.\n  remarks: \"The <xref:System.Reflection.Emit.DynamicMethod.IsSecurityCritical%2A>, <xref:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical%2A>, and <xref:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent%2A> properties report the transparency level of the dynamic method as determined by the common language runtime (CLR). The combinations of these properties are shown in the following table:  \\n  \\n|Security level|IsSecurityCritical|IsSecuritySafeCritical|IsSecurityTransparent|  \\n|--------------------|------------------------|----------------------------|---------------------------|  \\n|Critical|`true`|`false`|`false`|  \\n|Safe critical|`true`|`true`|`false`|  \\n|Transparent|`false`|`false`|`true`|  \\n  \\n Using these properties is much simpler than examining the security annotations of an assembly and its types, checking the current trust level, and attempting to duplicate the runtime's rules.  \\n  \\n The transparency of a dynamic method depends on the module it is associated with. If the dynamic method is associated with a type rather than a module, its transparency depends on the module that contains the type. Dynamic methods do not have security annotations, so they are assigned the default transparency for the associated module.  \\n  \\n-   Anonymously hosted dynamic methods are always transparent, because the system-provided module that contains them is transparent.  \\n  \\n-   The transparency of a dynamic method that is associated with a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is described in the following table.  \\n  \\n    |Assembly annotation|Level 1 transparency|Level 2 transparency|  \\n    |-------------------------|--------------------------|--------------------------|  \\n    |Fully transparent|Transparent|Transparent|  \\n    |Fully critical|Critical|Critical|  \\n    |Mixed transparency|Transparent|Transparent|  \\n    |Security-agnostic|Safe-critical|Critical|  \\n  \\n     For example, if you associate a dynamic method with a type that is in mscorlib.dll, which has level 2 mixed transparency, the dynamic method is transparent and cannot execute critical code. For information about transparency levels, see [Security-Transparent Code, Level 1](~/docs/framework/misc/security-transparent-code-level-1.md) and [Security-Transparent Code, Level 2](~/docs/framework/misc/security-transparent-code-level-2.md).  \\n  \\n    > [!NOTE]\\n    >  Associating a dynamic method with a module in a trusted level 1 assembly that is security-agnostic, such as System.dll, does not permit elevation of trust. If the grant set of the code that calls the dynamic method does not include the grant set of System.dll (that is, full trust), <xref:System.Security.SecurityException> is thrown when the dynamic method is called.  \\n  \\n-   The transparency of a dynamic method that is associated with a partially trusted assembly depends on how the assembly is loaded. If the assembly is loaded with partial trust (for example, into a sandboxed application domain), the runtime ignores the security annotations of the assembly. The assembly and all its types and members, including dynamic methods, are treated as transparent. The runtime pays attention to security annotations only if the partial-trust assembly is loaded with full trust (for example, into the default application domain of a desktop application). In that case, the runtime assigns the dynamic method the default transparency for methods according to the assembly's annotations.  \\n  \\n For more information about reflection emit and transparency, see [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md). For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md).\"\n  syntax:\n    content: >-\n      [get: System.Security.SecuritySafeCritical]\n\n      public override bool IsSecurityTransparent { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the dynamic method is security-transparent at the current trust level; otherwise, `false`.'\n  overload: System.Reflection.Emit.DynamicMethod.IsSecurityTransparent*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The dynamic method doesn't have a method body.\n  attributes:\n  - type: 'get: System.Security.SecuritySafeCritical'\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/DynamicMethod.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.DynamicMethod.MethodHandle\n  commentId: P:System.Reflection.Emit.DynamicMethod.MethodHandle\n  id: MethodHandle\n  parent: System.Reflection.Emit.DynamicMethod\n  langs:\n  - csharp\n  name: MethodHandle\n  nameWithType: DynamicMethod.MethodHandle\n  fullName: DynamicMethod.MethodHandle\n  type: Property\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit.Lightweight\n  namespace: System.Reflection.Emit\n  summary: Not supported for dynamic methods.\n  syntax:\n    content: public override RuntimeMethodHandle MethodHandle { get; }\n    return:\n      type: System.RuntimeMethodHandle\n      description: Not supported for dynamic methods.\n  overload: System.Reflection.Emit.DynamicMethod.MethodHandle*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: Not allowed for dynamic methods.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/DynamicMethod.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.DynamicMethod.MethodImplementationFlags\n  commentId: P:System.Reflection.Emit.DynamicMethod.MethodImplementationFlags\n  id: MethodImplementationFlags\n  parent: System.Reflection.Emit.DynamicMethod\n  langs:\n  - csharp\n  name: MethodImplementationFlags\n  nameWithType: DynamicMethod.MethodImplementationFlags\n  fullName: DynamicMethod.MethodImplementationFlags\n  type: Property\n  assemblies:\n  - System.Reflection.Emit.Lightweight\n  namespace: System.Reflection.Emit\n  syntax:\n    content: public override System.Reflection.MethodImplAttributes MethodImplementationFlags { get; }\n    return:\n      type: System.Reflection.MethodImplAttributes\n      description: ''\n  overload: System.Reflection.Emit.DynamicMethod.MethodImplementationFlags*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/DynamicMethod.xml\n- uid: System.Reflection.Emit.DynamicMethod.Module\n  commentId: P:System.Reflection.Emit.DynamicMethod.Module\n  id: Module\n  parent: System.Reflection.Emit.DynamicMethod\n  langs:\n  - csharp\n  name: Module\n  nameWithType: DynamicMethod.Module\n  fullName: DynamicMethod.Module\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Gets the module with which the dynamic method is logically associated.\n  remarks: If a module was specified when the dynamic method was created, this property returns that module. If a type was specified as the owner when the dynamic method was created, this property returns the module which contains that type.\n  example:\n  - \"The following code example displays the <xref:System.Reflection.Emit.DynamicMethod.Module%2A> property of a dynamic method. This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.  \\n  \\n [!code-cpp[Reflection.DynamicMethod.All#26](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#26)]\\n [!code-csharp[Reflection.DynamicMethod.All#26](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#26)]\\n [!code-vb[Reflection.DynamicMethod.All#26](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#26)]\"\n  syntax:\n    content: public override System.Reflection.Module Module { get; }\n    return:\n      type: System.Reflection.Module\n      description: The <xref href=\"System.Reflection.Module\"></xref> with which the current dynamic method is associated.\n  overload: System.Reflection.Emit.DynamicMethod.Module*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/DynamicMethod.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.DynamicMethod.Name\n  commentId: P:System.Reflection.Emit.DynamicMethod.Name\n  id: Name\n  parent: System.Reflection.Emit.DynamicMethod\n  langs:\n  - csharp\n  name: Name\n  nameWithType: DynamicMethod.Name\n  fullName: DynamicMethod.Name\n  type: Property\n  assemblies:\n  - System.Reflection.Emit.Lightweight\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Gets the name of the dynamic method.\n  remarks: >-\n    > [!NOTE]\n\n    >  It is not necessary to name dynamic methods.\n  example:\n  - \"The following code example displays the name of a dynamic method. This code example is part of a larger example provided for  the <xref:System.Reflection.Emit.DynamicMethod> class.  \\n  \\n [!code-cpp[Reflection.DynamicMethod.All#27](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#27)]\\n [!code-csharp[Reflection.DynamicMethod.All#27](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#27)]\\n [!code-vb[Reflection.DynamicMethod.All#27](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#27)]\"\n  syntax:\n    content: public override string Name { get; }\n    return:\n      type: System.String\n      description: The simple name of the method.\n  overload: System.Reflection.Emit.DynamicMethod.Name*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/DynamicMethod.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.DynamicMethod.ReflectedType\n  commentId: P:System.Reflection.Emit.DynamicMethod.ReflectedType\n  id: ReflectedType\n  parent: System.Reflection.Emit.DynamicMethod\n  langs:\n  - csharp\n  name: ReflectedType\n  nameWithType: DynamicMethod.ReflectedType\n  fullName: DynamicMethod.ReflectedType\n  type: Property\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit.Lightweight\n  namespace: System.Reflection.Emit\n  summary: Gets the class that was used in reflection to obtain the method.\n  remarks: This property always returns `null` for dynamic methods.\n  example:\n  - \"The following code example displays the reflected type of a dynamic method. This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.  \\n  \\n [!code-cpp[Reflection.DynamicMethod.All#28](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#28)]\\n [!code-csharp[Reflection.DynamicMethod.All#28](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#28)]\\n [!code-vb[Reflection.DynamicMethod.All#28](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#28)]\"\n  syntax:\n    content: public override Type ReflectedType { get; }\n    return:\n      type: System.Type\n      description: Always `null`.\n  overload: System.Reflection.Emit.DynamicMethod.ReflectedType*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/DynamicMethod.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.DynamicMethod.ReturnParameter\n  commentId: P:System.Reflection.Emit.DynamicMethod.ReturnParameter\n  id: ReturnParameter\n  parent: System.Reflection.Emit.DynamicMethod\n  langs:\n  - csharp\n  name: ReturnParameter\n  nameWithType: DynamicMethod.ReturnParameter\n  fullName: DynamicMethod.ReturnParameter\n  type: Property\n  assemblies:\n  - System.Reflection.Emit.Lightweight\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Gets the return parameter of the dynamic method.\n  remarks: This property always returns `null` for dynamic methods.\n  syntax:\n    content: public override System.Reflection.ParameterInfo ReturnParameter { get; }\n    return:\n      type: System.Reflection.ParameterInfo\n      description: Always `null`.\n  overload: System.Reflection.Emit.DynamicMethod.ReturnParameter*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/DynamicMethod.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.DynamicMethod.ReturnType\n  commentId: P:System.Reflection.Emit.DynamicMethod.ReturnType\n  id: ReturnType\n  parent: System.Reflection.Emit.DynamicMethod\n  langs:\n  - csharp\n  name: ReturnType\n  nameWithType: DynamicMethod.ReturnType\n  fullName: DynamicMethod.ReturnType\n  type: Property\n  assemblies:\n  - System.Reflection.Emit.Lightweight\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Gets the type of return value for the dynamic method.\n  remarks: If `null` was specified for the return type when the dynamic method was created, this property returns <xref:System.Void?displayProperty=fullName>.\n  example:\n  - \"The following code example displays the return type of a dynamic method. This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.  \\n  \\n [!code-cpp[Reflection.DynamicMethod.All#30](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#30)]\\n [!code-csharp[Reflection.DynamicMethod.All#30](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#30)]\\n [!code-vb[Reflection.DynamicMethod.All#30](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#30)]\"\n  syntax:\n    content: public override Type ReturnType { get; }\n    return:\n      type: System.Type\n      description: A <xref href=\"System.Type\"></xref> representing the type of the return value of the current method; <xref href=\"System.Void\"></xref> if the method has no return type.\n  overload: System.Reflection.Emit.DynamicMethod.ReturnType*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/DynamicMethod.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.DynamicMethod.ReturnTypeCustomAttributes\n  commentId: P:System.Reflection.Emit.DynamicMethod.ReturnTypeCustomAttributes\n  id: ReturnTypeCustomAttributes\n  parent: System.Reflection.Emit.DynamicMethod\n  langs:\n  - csharp\n  name: ReturnTypeCustomAttributes\n  nameWithType: DynamicMethod.ReturnTypeCustomAttributes\n  fullName: DynamicMethod.ReturnTypeCustomAttributes\n  type: Property\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit.Lightweight\n  namespace: System.Reflection.Emit\n  summary: Gets the custom attributes of the return type for the dynamic method.\n  remarks: Custom attributes are not supported on the return type of a dynamic method, so the array of custom attributes returned by the <xref:System.Reflection.ICustomAttributeProvider.GetCustomAttributes%2A> method is always empty.\n  example:\n  - \"The following code example shows how to display the custom attributes of the return type of a dynamic method. This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.  \\n  \\n [!code-cpp[Reflection.DynamicMethod.All#31](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#31)]\\n [!code-csharp[Reflection.DynamicMethod.All#31](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#31)]\\n [!code-vb[Reflection.DynamicMethod.All#31](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#31)]\"\n  syntax:\n    content: public override System.Reflection.ICustomAttributeProvider ReturnTypeCustomAttributes { get; }\n    return:\n      type: System.Reflection.ICustomAttributeProvider\n      description: An <xref href=\"System.Reflection.ICustomAttributeProvider\"></xref> representing the custom attributes of the return type for the dynamic method.\n  overload: System.Reflection.Emit.DynamicMethod.ReturnTypeCustomAttributes*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/DynamicMethod.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.DynamicMethod.ToString\n  commentId: M:System.Reflection.Emit.DynamicMethod.ToString\n  id: ToString\n  parent: System.Reflection.Emit.DynamicMethod\n  langs:\n  - csharp\n  name: ToString()\n  nameWithType: DynamicMethod.ToString()\n  fullName: DynamicMethod.ToString()\n  type: Method\n  assemblies:\n  - System.Reflection.Emit.Lightweight\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Returns the signature of the method, represented as a string.\n  remarks: The signature includes only types and the method name, if any. Parameter names are not included.\n  example:\n  - \"The following code example displays the <xref:System.Reflection.Emit.DynamicMethod.ToString%2A> method of a dynamic method. This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.  \\n  \\n [!code-cpp[Reflection.DynamicMethod.All#32](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#32)]\\n [!code-csharp[Reflection.DynamicMethod.All#32](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#32)]\\n [!code-vb[Reflection.DynamicMethod.All#32](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#32)]\"\n  syntax:\n    content: public override string ToString ();\n    parameters: []\n    return:\n      type: System.String\n      description: A string representing the method signature.\n  overload: System.Reflection.Emit.DynamicMethod.ToString*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/DynamicMethod.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\nreferences:\n- uid: System.Reflection.MethodInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MethodInfo\n  nameWithType: MethodInfo\n  fullName: System.Reflection.MethodInfo\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.NotSupportedException\n  parent: System\n  isExternal: false\n  name: NotSupportedException\n  nameWithType: NotSupportedException\n  fullName: System.NotSupportedException\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  nameWithType: InvalidOperationException\n  fullName: System.InvalidOperationException\n- uid: System.ArgumentOutOfRangeException\n  parent: System\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n- uid: System.Reflection.TargetParameterCountException\n  parent: System.Reflection\n  isExternal: false\n  name: TargetParameterCountException\n  nameWithType: TargetParameterCountException\n  fullName: System.Reflection.TargetParameterCountException\n- uid: System.Reflection.TargetInvocationException\n  parent: System.Reflection\n  isExternal: false\n  name: TargetInvocationException\n  nameWithType: TargetInvocationException\n  fullName: System.Reflection.TargetInvocationException\n- uid: System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[])\n  parent: System.Reflection.Emit.DynamicMethod\n  isExternal: false\n  name: DynamicMethod(String, Type, Type[])\n  nameWithType: DynamicMethod.DynamicMethod(String, Type, Type[])\n  fullName: DynamicMethod.DynamicMethod(String, Type, Type[])\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Type[]\n  parent: System\n  isExternal: false\n  name: Type[]\n  nameWithType: Type[]\n  fullName: System.Type[]\n  spec.csharp:\n  - uid: System.Type\n    name: Type\n    nameWithType: Type\n    fullName: System.Type\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Boolean)\n  parent: System.Reflection.Emit.DynamicMethod\n  isExternal: false\n  name: DynamicMethod(String, Type, Type[], Boolean)\n  nameWithType: DynamicMethod.DynamicMethod(String, Type, Type[], Boolean)\n  fullName: DynamicMethod.DynamicMethod(String, Type, Type[], Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module)\n  parent: System.Reflection.Emit.DynamicMethod\n  isExternal: false\n  name: DynamicMethod(String, Type, Type[], Module)\n  nameWithType: DynamicMethod.DynamicMethod(String, Type, Type[], Module)\n  fullName: DynamicMethod.DynamicMethod(String, Type, Type[], Module)\n- uid: System.Reflection.Module\n  parent: System.Reflection\n  isExternal: false\n  name: Module\n  nameWithType: Module\n  fullName: System.Reflection.Module\n- uid: System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type)\n  parent: System.Reflection.Emit.DynamicMethod\n  isExternal: false\n  name: DynamicMethod(String, Type, Type[], Type)\n  nameWithType: DynamicMethod.DynamicMethod(String, Type, Type[], Type)\n  fullName: DynamicMethod.DynamicMethod(String, Type, Type[], Type)\n- uid: System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module,System.Boolean)\n  parent: System.Reflection.Emit.DynamicMethod\n  isExternal: false\n  name: DynamicMethod(String, Type, Type[], Module, Boolean)\n  nameWithType: DynamicMethod.DynamicMethod(String, Type, Type[], Module, Boolean)\n  fullName: DynamicMethod.DynamicMethod(String, Type, Type[], Module, Boolean)\n- uid: System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type,System.Boolean)\n  parent: System.Reflection.Emit.DynamicMethod\n  isExternal: false\n  name: DynamicMethod(String, Type, Type[], Type, Boolean)\n  nameWithType: DynamicMethod.DynamicMethod(String, Type, Type[], Type, Boolean)\n  fullName: DynamicMethod.DynamicMethod(String, Type, Type[], Type, Boolean)\n- uid: System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Reflection.Module,System.Boolean)\n  parent: System.Reflection.Emit.DynamicMethod\n  isExternal: false\n  name: DynamicMethod(String, MethodAttributes, CallingConventions, Type, Type[], Module, Boolean)\n  nameWithType: DynamicMethod.DynamicMethod(String, MethodAttributes, CallingConventions, Type, Type[], Module, Boolean)\n  fullName: DynamicMethod.DynamicMethod(String, MethodAttributes, CallingConventions, Type, Type[], Module, Boolean)\n- uid: System.Reflection.MethodAttributes\n  parent: System.Reflection\n  isExternal: false\n  name: MethodAttributes\n  nameWithType: MethodAttributes\n  fullName: System.Reflection.MethodAttributes\n- uid: System.Reflection.CallingConventions\n  parent: System.Reflection\n  isExternal: false\n  name: CallingConventions\n  nameWithType: CallingConventions\n  fullName: System.Reflection.CallingConventions\n- uid: System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type,System.Boolean)\n  parent: System.Reflection.Emit.DynamicMethod\n  isExternal: false\n  name: DynamicMethod(String, MethodAttributes, CallingConventions, Type, Type[], Type, Boolean)\n  nameWithType: DynamicMethod.DynamicMethod(String, MethodAttributes, CallingConventions, Type, Type[], Type, Boolean)\n  fullName: DynamicMethod.DynamicMethod(String, MethodAttributes, CallingConventions, Type, Type[], Type, Boolean)\n- uid: System.Reflection.Emit.DynamicMethod.Attributes\n  parent: System.Reflection.Emit.DynamicMethod\n  isExternal: false\n  name: Attributes\n  nameWithType: DynamicMethod.Attributes\n  fullName: DynamicMethod.Attributes\n- uid: System.Reflection.Emit.DynamicMethod.CallingConvention\n  parent: System.Reflection.Emit.DynamicMethod\n  isExternal: false\n  name: CallingConvention\n  nameWithType: DynamicMethod.CallingConvention\n  fullName: DynamicMethod.CallingConvention\n- uid: System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type)\n  parent: System.Reflection.Emit.DynamicMethod\n  isExternal: false\n  name: CreateDelegate(Type)\n  nameWithType: DynamicMethod.CreateDelegate(Type)\n  fullName: DynamicMethod.CreateDelegate(Type)\n- uid: System.Delegate\n  parent: System\n  isExternal: false\n  name: Delegate\n  nameWithType: Delegate\n  fullName: System.Delegate\n- uid: System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type,System.Object)\n  parent: System.Reflection.Emit.DynamicMethod\n  isExternal: false\n  name: CreateDelegate(Type, Object)\n  nameWithType: DynamicMethod.CreateDelegate(Type, Object)\n  fullName: DynamicMethod.CreateDelegate(Type, Object)\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Reflection.Emit.DynamicMethod.DeclaringType\n  parent: System.Reflection.Emit.DynamicMethod\n  isExternal: false\n  name: DeclaringType\n  nameWithType: DynamicMethod.DeclaringType\n  fullName: DynamicMethod.DeclaringType\n- uid: System.Reflection.Emit.DynamicMethod.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)\n  parent: System.Reflection.Emit.DynamicMethod\n  isExternal: false\n  name: DefineParameter(Int32, ParameterAttributes, String)\n  nameWithType: DynamicMethod.DefineParameter(Int32, ParameterAttributes, String)\n  fullName: DynamicMethod.DefineParameter(Int32, ParameterAttributes, String)\n- uid: System.Reflection.Emit.ParameterBuilder\n  parent: System.Reflection.Emit\n  isExternal: false\n  name: ParameterBuilder\n  nameWithType: ParameterBuilder\n  fullName: System.Reflection.Emit.ParameterBuilder\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Reflection.ParameterAttributes\n  parent: System.Reflection\n  isExternal: false\n  name: ParameterAttributes\n  nameWithType: ParameterAttributes\n  fullName: System.Reflection.ParameterAttributes\n- uid: System.Reflection.Emit.DynamicMethod.GetBaseDefinition\n  parent: System.Reflection.Emit.DynamicMethod\n  isExternal: false\n  name: GetBaseDefinition()\n  nameWithType: DynamicMethod.GetBaseDefinition()\n  fullName: DynamicMethod.GetBaseDefinition()\n- uid: System.Reflection.Emit.DynamicMethod.GetCustomAttributes(System.Boolean)\n  parent: System.Reflection.Emit.DynamicMethod\n  isExternal: false\n  name: GetCustomAttributes(Boolean)\n  nameWithType: DynamicMethod.GetCustomAttributes(Boolean)\n  fullName: DynamicMethod.GetCustomAttributes(Boolean)\n- uid: System.Object[]\n  parent: System\n  isExternal: false\n  name: Object[]\n  nameWithType: Object[]\n  fullName: System.Object[]\n  spec.csharp:\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Reflection.Emit.DynamicMethod.GetCustomAttributes(System.Type,System.Boolean)\n  parent: System.Reflection.Emit.DynamicMethod\n  isExternal: false\n  name: GetCustomAttributes(Type, Boolean)\n  nameWithType: DynamicMethod.GetCustomAttributes(Type, Boolean)\n  fullName: DynamicMethod.GetCustomAttributes(Type, Boolean)\n- uid: System.Reflection.Emit.DynamicMethod.GetDynamicILInfo\n  parent: System.Reflection.Emit.DynamicMethod\n  isExternal: false\n  name: GetDynamicILInfo()\n  nameWithType: DynamicMethod.GetDynamicILInfo()\n  fullName: DynamicMethod.GetDynamicILInfo()\n- uid: System.Reflection.Emit.DynamicILInfo\n  parent: System.Reflection.Emit\n  isExternal: false\n  name: DynamicILInfo\n  nameWithType: DynamicILInfo\n  fullName: System.Reflection.Emit.DynamicILInfo\n- uid: System.Reflection.Emit.DynamicMethod.GetILGenerator(System.Int32)\n  parent: System.Reflection.Emit.DynamicMethod\n  isExternal: false\n  name: GetILGenerator(Int32)\n  nameWithType: DynamicMethod.GetILGenerator(Int32)\n  fullName: DynamicMethod.GetILGenerator(Int32)\n- uid: System.Reflection.Emit.ILGenerator\n  parent: System.Reflection.Emit\n  isExternal: false\n  name: ILGenerator\n  nameWithType: ILGenerator\n  fullName: System.Reflection.Emit.ILGenerator\n- uid: System.Reflection.Emit.DynamicMethod.GetILGenerator\n  parent: System.Reflection.Emit.DynamicMethod\n  isExternal: false\n  name: GetILGenerator()\n  nameWithType: DynamicMethod.GetILGenerator()\n  fullName: DynamicMethod.GetILGenerator()\n- uid: System.Reflection.Emit.DynamicMethod.GetMethodImplementationFlags\n  parent: System.Reflection.Emit.DynamicMethod\n  isExternal: false\n  name: GetMethodImplementationFlags()\n  nameWithType: DynamicMethod.GetMethodImplementationFlags()\n  fullName: DynamicMethod.GetMethodImplementationFlags()\n- uid: System.Reflection.MethodImplAttributes\n  parent: System.Reflection\n  isExternal: false\n  name: MethodImplAttributes\n  nameWithType: MethodImplAttributes\n  fullName: System.Reflection.MethodImplAttributes\n- uid: System.Reflection.Emit.DynamicMethod.GetParameters\n  parent: System.Reflection.Emit.DynamicMethod\n  isExternal: false\n  name: GetParameters()\n  nameWithType: DynamicMethod.GetParameters()\n  fullName: DynamicMethod.GetParameters()\n- uid: System.Reflection.ParameterInfo\n  name: ParameterInfo\n  nameWithType: ParameterInfo\n  fullName: System.Reflection.ParameterInfo\n- uid: System.Reflection.ParameterInfo[]\n  parent: System.Reflection\n  isExternal: false\n  name: ParameterInfo[]\n  nameWithType: ParameterInfo[]\n  fullName: System.Reflection.ParameterInfo[]\n  spec.csharp:\n  - uid: System.Reflection.ParameterInfo\n    name: ParameterInfo\n    nameWithType: ParameterInfo\n    fullName: System.Reflection.ParameterInfo\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Reflection.Emit.DynamicMethod.InitLocals\n  parent: System.Reflection.Emit.DynamicMethod\n  isExternal: false\n  name: InitLocals\n  nameWithType: DynamicMethod.InitLocals\n  fullName: DynamicMethod.InitLocals\n- uid: System.Reflection.Emit.DynamicMethod.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)\n  parent: System.Reflection.Emit.DynamicMethod\n  isExternal: false\n  name: Invoke(Object, BindingFlags, Binder, Object[], CultureInfo)\n  nameWithType: DynamicMethod.Invoke(Object, BindingFlags, Binder, Object[], CultureInfo)\n  fullName: DynamicMethod.Invoke(Object, BindingFlags, Binder, Object[], CultureInfo)\n- uid: System.Reflection.BindingFlags\n  parent: System.Reflection\n  isExternal: false\n  name: BindingFlags\n  nameWithType: BindingFlags\n  fullName: System.Reflection.BindingFlags\n- uid: System.Reflection.Binder\n  parent: System.Reflection\n  isExternal: false\n  name: Binder\n  nameWithType: Binder\n  fullName: System.Reflection.Binder\n- uid: System.Globalization.CultureInfo\n  parent: System.Globalization\n  isExternal: false\n  name: CultureInfo\n  nameWithType: CultureInfo\n  fullName: System.Globalization.CultureInfo\n- uid: System.Reflection.Emit.DynamicMethod.IsDefined(System.Type,System.Boolean)\n  parent: System.Reflection.Emit.DynamicMethod\n  isExternal: false\n  name: IsDefined(Type, Boolean)\n  nameWithType: DynamicMethod.IsDefined(Type, Boolean)\n  fullName: DynamicMethod.IsDefined(Type, Boolean)\n- uid: System.Reflection.Emit.DynamicMethod.IsSecurityCritical\n  parent: System.Reflection.Emit.DynamicMethod\n  isExternal: false\n  name: IsSecurityCritical\n  nameWithType: DynamicMethod.IsSecurityCritical\n  fullName: DynamicMethod.IsSecurityCritical\n- uid: System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical\n  parent: System.Reflection.Emit.DynamicMethod\n  isExternal: false\n  name: IsSecuritySafeCritical\n  nameWithType: DynamicMethod.IsSecuritySafeCritical\n  fullName: DynamicMethod.IsSecuritySafeCritical\n- uid: System.Reflection.Emit.DynamicMethod.IsSecurityTransparent\n  parent: System.Reflection.Emit.DynamicMethod\n  isExternal: false\n  name: IsSecurityTransparent\n  nameWithType: DynamicMethod.IsSecurityTransparent\n  fullName: DynamicMethod.IsSecurityTransparent\n- uid: System.Reflection.Emit.DynamicMethod.MethodHandle\n  parent: System.Reflection.Emit.DynamicMethod\n  isExternal: false\n  name: MethodHandle\n  nameWithType: DynamicMethod.MethodHandle\n  fullName: DynamicMethod.MethodHandle\n- uid: System.RuntimeMethodHandle\n  parent: System\n  isExternal: false\n  name: RuntimeMethodHandle\n  nameWithType: RuntimeMethodHandle\n  fullName: System.RuntimeMethodHandle\n- uid: System.Reflection.Emit.DynamicMethod.MethodImplementationFlags\n  parent: System.Reflection.Emit.DynamicMethod\n  isExternal: false\n  name: MethodImplementationFlags\n  nameWithType: DynamicMethod.MethodImplementationFlags\n  fullName: DynamicMethod.MethodImplementationFlags\n- uid: System.Reflection.Emit.DynamicMethod.Module\n  parent: System.Reflection.Emit.DynamicMethod\n  isExternal: false\n  name: Module\n  nameWithType: DynamicMethod.Module\n  fullName: DynamicMethod.Module\n- uid: System.Reflection.Emit.DynamicMethod.Name\n  parent: System.Reflection.Emit.DynamicMethod\n  isExternal: false\n  name: Name\n  nameWithType: DynamicMethod.Name\n  fullName: DynamicMethod.Name\n- uid: System.Reflection.Emit.DynamicMethod.ReflectedType\n  parent: System.Reflection.Emit.DynamicMethod\n  isExternal: false\n  name: ReflectedType\n  nameWithType: DynamicMethod.ReflectedType\n  fullName: DynamicMethod.ReflectedType\n- uid: System.Reflection.Emit.DynamicMethod.ReturnParameter\n  parent: System.Reflection.Emit.DynamicMethod\n  isExternal: false\n  name: ReturnParameter\n  nameWithType: DynamicMethod.ReturnParameter\n  fullName: DynamicMethod.ReturnParameter\n- uid: System.Reflection.Emit.DynamicMethod.ReturnType\n  parent: System.Reflection.Emit.DynamicMethod\n  isExternal: false\n  name: ReturnType\n  nameWithType: DynamicMethod.ReturnType\n  fullName: DynamicMethod.ReturnType\n- uid: System.Reflection.Emit.DynamicMethod.ReturnTypeCustomAttributes\n  parent: System.Reflection.Emit.DynamicMethod\n  isExternal: false\n  name: ReturnTypeCustomAttributes\n  nameWithType: DynamicMethod.ReturnTypeCustomAttributes\n  fullName: DynamicMethod.ReturnTypeCustomAttributes\n- uid: System.Reflection.ICustomAttributeProvider\n  parent: System.Reflection\n  isExternal: false\n  name: ICustomAttributeProvider\n  nameWithType: ICustomAttributeProvider\n  fullName: System.Reflection.ICustomAttributeProvider\n- uid: System.Reflection.Emit.DynamicMethod.ToString\n  parent: System.Reflection.Emit.DynamicMethod\n  isExternal: false\n  name: ToString()\n  nameWithType: DynamicMethod.ToString()\n  fullName: DynamicMethod.ToString()\n- uid: System.Reflection.Emit.DynamicMethod.#ctor*\n  parent: System.Reflection.Emit.DynamicMethod\n  isExternal: false\n  name: DynamicMethod\n  nameWithType: DynamicMethod.DynamicMethod\n  fullName: DynamicMethod.DynamicMethod\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/DynamicMethod.xml\n- uid: System.Reflection.Emit.DynamicMethod.Attributes*\n  parent: System.Reflection.Emit.DynamicMethod\n  isExternal: false\n  name: Attributes\n  nameWithType: DynamicMethod.Attributes\n  fullName: DynamicMethod.Attributes\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/DynamicMethod.xml\n- uid: System.Reflection.Emit.DynamicMethod.CallingConvention*\n  parent: System.Reflection.Emit.DynamicMethod\n  isExternal: false\n  name: CallingConvention\n  nameWithType: DynamicMethod.CallingConvention\n  fullName: DynamicMethod.CallingConvention\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/DynamicMethod.xml\n- uid: System.Reflection.Emit.DynamicMethod.CreateDelegate*\n  parent: System.Reflection.Emit.DynamicMethod\n  isExternal: false\n  name: CreateDelegate\n  nameWithType: DynamicMethod.CreateDelegate\n  fullName: DynamicMethod.CreateDelegate\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/DynamicMethod.xml\n- uid: System.Reflection.Emit.DynamicMethod.DeclaringType*\n  parent: System.Reflection.Emit.DynamicMethod\n  isExternal: false\n  name: DeclaringType\n  nameWithType: DynamicMethod.DeclaringType\n  fullName: DynamicMethod.DeclaringType\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/DynamicMethod.xml\n- uid: System.Reflection.Emit.DynamicMethod.DefineParameter*\n  parent: System.Reflection.Emit.DynamicMethod\n  isExternal: false\n  name: DefineParameter\n  nameWithType: DynamicMethod.DefineParameter\n  fullName: DynamicMethod.DefineParameter\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/DynamicMethod.xml\n- uid: System.Reflection.Emit.DynamicMethod.GetBaseDefinition*\n  parent: System.Reflection.Emit.DynamicMethod\n  isExternal: false\n  name: GetBaseDefinition\n  nameWithType: DynamicMethod.GetBaseDefinition\n  fullName: DynamicMethod.GetBaseDefinition\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/DynamicMethod.xml\n- uid: System.Reflection.Emit.DynamicMethod.GetCustomAttributes*\n  parent: System.Reflection.Emit.DynamicMethod\n  isExternal: false\n  name: GetCustomAttributes\n  nameWithType: DynamicMethod.GetCustomAttributes\n  fullName: DynamicMethod.GetCustomAttributes\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/DynamicMethod.xml\n- uid: System.Reflection.Emit.DynamicMethod.GetDynamicILInfo*\n  parent: System.Reflection.Emit.DynamicMethod\n  isExternal: false\n  name: GetDynamicILInfo\n  nameWithType: DynamicMethod.GetDynamicILInfo\n  fullName: DynamicMethod.GetDynamicILInfo\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/DynamicMethod.xml\n- uid: System.Reflection.Emit.DynamicMethod.GetILGenerator*\n  parent: System.Reflection.Emit.DynamicMethod\n  isExternal: false\n  name: GetILGenerator\n  nameWithType: DynamicMethod.GetILGenerator\n  fullName: DynamicMethod.GetILGenerator\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/DynamicMethod.xml\n- uid: System.Reflection.Emit.DynamicMethod.GetMethodImplementationFlags*\n  parent: System.Reflection.Emit.DynamicMethod\n  isExternal: false\n  name: GetMethodImplementationFlags\n  nameWithType: DynamicMethod.GetMethodImplementationFlags\n  fullName: DynamicMethod.GetMethodImplementationFlags\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/DynamicMethod.xml\n- uid: System.Reflection.Emit.DynamicMethod.GetParameters*\n  parent: System.Reflection.Emit.DynamicMethod\n  isExternal: false\n  name: GetParameters\n  nameWithType: DynamicMethod.GetParameters\n  fullName: DynamicMethod.GetParameters\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/DynamicMethod.xml\n- uid: System.Reflection.Emit.DynamicMethod.InitLocals*\n  parent: System.Reflection.Emit.DynamicMethod\n  isExternal: false\n  name: InitLocals\n  nameWithType: DynamicMethod.InitLocals\n  fullName: DynamicMethod.InitLocals\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/DynamicMethod.xml\n- uid: System.Reflection.Emit.DynamicMethod.Invoke*\n  parent: System.Reflection.Emit.DynamicMethod\n  isExternal: false\n  name: Invoke\n  nameWithType: DynamicMethod.Invoke\n  fullName: DynamicMethod.Invoke\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/DynamicMethod.xml\n- uid: System.Reflection.Emit.DynamicMethod.IsDefined*\n  parent: System.Reflection.Emit.DynamicMethod\n  isExternal: false\n  name: IsDefined\n  nameWithType: DynamicMethod.IsDefined\n  fullName: DynamicMethod.IsDefined\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/DynamicMethod.xml\n- uid: System.Reflection.Emit.DynamicMethod.IsSecurityCritical*\n  parent: System.Reflection.Emit.DynamicMethod\n  isExternal: false\n  name: IsSecurityCritical\n  nameWithType: DynamicMethod.IsSecurityCritical\n  fullName: DynamicMethod.IsSecurityCritical\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/DynamicMethod.xml\n- uid: System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical*\n  parent: System.Reflection.Emit.DynamicMethod\n  isExternal: false\n  name: IsSecuritySafeCritical\n  nameWithType: DynamicMethod.IsSecuritySafeCritical\n  fullName: DynamicMethod.IsSecuritySafeCritical\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/DynamicMethod.xml\n- uid: System.Reflection.Emit.DynamicMethod.IsSecurityTransparent*\n  parent: System.Reflection.Emit.DynamicMethod\n  isExternal: false\n  name: IsSecurityTransparent\n  nameWithType: DynamicMethod.IsSecurityTransparent\n  fullName: DynamicMethod.IsSecurityTransparent\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/DynamicMethod.xml\n- uid: System.Reflection.Emit.DynamicMethod.MethodHandle*\n  parent: System.Reflection.Emit.DynamicMethod\n  isExternal: false\n  name: MethodHandle\n  nameWithType: DynamicMethod.MethodHandle\n  fullName: DynamicMethod.MethodHandle\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/DynamicMethod.xml\n- uid: System.Reflection.Emit.DynamicMethod.MethodImplementationFlags*\n  parent: System.Reflection.Emit.DynamicMethod\n  isExternal: false\n  name: MethodImplementationFlags\n  nameWithType: DynamicMethod.MethodImplementationFlags\n  fullName: DynamicMethod.MethodImplementationFlags\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/DynamicMethod.xml\n- uid: System.Reflection.Emit.DynamicMethod.Module*\n  parent: System.Reflection.Emit.DynamicMethod\n  isExternal: false\n  name: Module\n  nameWithType: DynamicMethod.Module\n  fullName: DynamicMethod.Module\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/DynamicMethod.xml\n- uid: System.Reflection.Emit.DynamicMethod.Name*\n  parent: System.Reflection.Emit.DynamicMethod\n  isExternal: false\n  name: Name\n  nameWithType: DynamicMethod.Name\n  fullName: DynamicMethod.Name\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/DynamicMethod.xml\n- uid: System.Reflection.Emit.DynamicMethod.ReflectedType*\n  parent: System.Reflection.Emit.DynamicMethod\n  isExternal: false\n  name: ReflectedType\n  nameWithType: DynamicMethod.ReflectedType\n  fullName: DynamicMethod.ReflectedType\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/DynamicMethod.xml\n- uid: System.Reflection.Emit.DynamicMethod.ReturnParameter*\n  parent: System.Reflection.Emit.DynamicMethod\n  isExternal: false\n  name: ReturnParameter\n  nameWithType: DynamicMethod.ReturnParameter\n  fullName: DynamicMethod.ReturnParameter\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/DynamicMethod.xml\n- uid: System.Reflection.Emit.DynamicMethod.ReturnType*\n  parent: System.Reflection.Emit.DynamicMethod\n  isExternal: false\n  name: ReturnType\n  nameWithType: DynamicMethod.ReturnType\n  fullName: DynamicMethod.ReturnType\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/DynamicMethod.xml\n- uid: System.Reflection.Emit.DynamicMethod.ReturnTypeCustomAttributes*\n  parent: System.Reflection.Emit.DynamicMethod\n  isExternal: false\n  name: ReturnTypeCustomAttributes\n  nameWithType: DynamicMethod.ReturnTypeCustomAttributes\n  fullName: DynamicMethod.ReturnTypeCustomAttributes\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/DynamicMethod.xml\n- uid: System.Reflection.Emit.DynamicMethod.ToString*\n  parent: System.Reflection.Emit.DynamicMethod\n  isExternal: false\n  name: ToString\n  nameWithType: DynamicMethod.ToString\n  fullName: DynamicMethod.ToString\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/DynamicMethod.xml\n- uid: System.Reflection.MethodInfo.Equals(System.Object)\n  parent: System.Reflection.MethodInfo\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: MethodInfo.Equals(Object)\n  fullName: MethodInfo.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Reflection.MethodInfo.GetHashCode\n  parent: System.Reflection.MethodInfo\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: MethodInfo.GetHashCode()\n  fullName: MethodInfo.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Reflection.MemberInfo.CustomAttributes\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: CustomAttributes\n  nameWithType: MemberInfo.CustomAttributes\n  fullName: MemberInfo.CustomAttributes\n- uid: System.Reflection.MemberInfo.GetCustomAttributesData\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: GetCustomAttributesData()\n  nameWithType: MemberInfo.GetCustomAttributesData()\n  fullName: MemberInfo.GetCustomAttributesData()\n- uid: System.Reflection.MethodInfo.MemberType\n  parent: System.Reflection.MethodInfo\n  isExternal: false\n  name: MemberType\n  nameWithType: MethodInfo.MemberType\n  fullName: MethodInfo.MemberType\n- uid: System.Reflection.MemberInfo.MetadataToken\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: MetadataToken\n  nameWithType: MemberInfo.MetadataToken\n  fullName: MemberInfo.MetadataToken\n- uid: System.Reflection.MemberInfo.op_Equality(System.Reflection.MemberInfo,System.Reflection.MemberInfo)\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: op_Equality(MemberInfo, MemberInfo)\n  nameWithType: MemberInfo.op_Equality(MemberInfo, MemberInfo)\n  fullName: MemberInfo.op_Equality(MemberInfo, MemberInfo)\n- uid: System.Reflection.MemberInfo.op_Inequality(System.Reflection.MemberInfo,System.Reflection.MemberInfo)\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: op_Inequality(MemberInfo, MemberInfo)\n  nameWithType: MemberInfo.op_Inequality(MemberInfo, MemberInfo)\n  fullName: MemberInfo.op_Inequality(MemberInfo, MemberInfo)\n- uid: System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Boolean)\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: ICustomAttributeProvider.GetCustomAttributes(Boolean)\n  nameWithType: MemberInfo.ICustomAttributeProvider.GetCustomAttributes(Boolean)\n  fullName: MemberInfo.ICustomAttributeProvider.GetCustomAttributes(Boolean)\n- uid: System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Type,System.Boolean)\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)\n  nameWithType: MemberInfo.ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)\n  fullName: MemberInfo.ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)\n- uid: System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#IsDefined(System.Type,System.Boolean)\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: ICustomAttributeProvider.IsDefined(Type, Boolean)\n  nameWithType: MemberInfo.ICustomAttributeProvider.IsDefined(Type, Boolean)\n  fullName: MemberInfo.ICustomAttributeProvider.IsDefined(Type, Boolean)\n- uid: System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: _MemberInfo.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n  nameWithType: MemberInfo._MemberInfo.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n  fullName: MemberInfo._MemberInfo.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n- uid: System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetType\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: _MemberInfo.GetType()\n  nameWithType: MemberInfo._MemberInfo.GetType()\n  fullName: MemberInfo._MemberInfo.GetType()\n- uid: System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: _MemberInfo.GetTypeInfo(UInt32, UInt32, IntPtr)\n  nameWithType: MemberInfo._MemberInfo.GetTypeInfo(UInt32, UInt32, IntPtr)\n  fullName: MemberInfo._MemberInfo.GetTypeInfo(UInt32, UInt32, IntPtr)\n- uid: System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfoCount(System.UInt32@)\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: _MemberInfo.GetTypeInfoCount(UInt32)\n  nameWithType: MemberInfo._MemberInfo.GetTypeInfoCount(UInt32)\n  fullName: MemberInfo._MemberInfo.GetTypeInfoCount(UInt32)\n- uid: System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: _MemberInfo.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n  nameWithType: MemberInfo._MemberInfo.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n  fullName: MemberInfo._MemberInfo.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n- uid: System.Reflection.MethodBase.ContainsGenericParameters\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: ContainsGenericParameters\n  nameWithType: MethodBase.ContainsGenericParameters\n  fullName: MethodBase.ContainsGenericParameters\n- uid: System.Reflection.MethodBase.GetCurrentMethod\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: GetCurrentMethod()\n  nameWithType: MethodBase.GetCurrentMethod()\n  fullName: MethodBase.GetCurrentMethod()\n- uid: System.Reflection.MethodInfo.GetGenericArguments\n  parent: System.Reflection.MethodInfo\n  isExternal: false\n  name: GetGenericArguments()\n  nameWithType: MethodInfo.GetGenericArguments()\n  fullName: MethodInfo.GetGenericArguments()\n- uid: System.Reflection.MethodBase.GetMethodBody\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: GetMethodBody()\n  nameWithType: MethodBase.GetMethodBody()\n  fullName: MethodBase.GetMethodBody()\n- uid: System.Reflection.MethodBase.GetMethodFromHandle(System.RuntimeMethodHandle)\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: GetMethodFromHandle(RuntimeMethodHandle)\n  nameWithType: MethodBase.GetMethodFromHandle(RuntimeMethodHandle)\n  fullName: MethodBase.GetMethodFromHandle(RuntimeMethodHandle)\n- uid: System.Reflection.MethodBase.GetMethodFromHandle(System.RuntimeMethodHandle,System.RuntimeTypeHandle)\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: GetMethodFromHandle(RuntimeMethodHandle, RuntimeTypeHandle)\n  nameWithType: MethodBase.GetMethodFromHandle(RuntimeMethodHandle, RuntimeTypeHandle)\n  fullName: MethodBase.GetMethodFromHandle(RuntimeMethodHandle, RuntimeTypeHandle)\n- uid: System.Reflection.MethodBase.Invoke(System.Object,System.Object[])\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: Invoke(Object, Object[])\n  nameWithType: MethodBase.Invoke(Object, Object[])\n  fullName: MethodBase.Invoke(Object, Object[])\n- uid: System.Reflection.MethodBase.IsAbstract\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: IsAbstract\n  nameWithType: MethodBase.IsAbstract\n  fullName: MethodBase.IsAbstract\n- uid: System.Reflection.MethodBase.IsAssembly\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: IsAssembly\n  nameWithType: MethodBase.IsAssembly\n  fullName: MethodBase.IsAssembly\n- uid: System.Reflection.MethodBase.IsConstructor\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: IsConstructor\n  nameWithType: MethodBase.IsConstructor\n  fullName: MethodBase.IsConstructor\n- uid: System.Reflection.MethodBase.IsFamily\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: IsFamily\n  nameWithType: MethodBase.IsFamily\n  fullName: MethodBase.IsFamily\n- uid: System.Reflection.MethodBase.IsFamilyAndAssembly\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: IsFamilyAndAssembly\n  nameWithType: MethodBase.IsFamilyAndAssembly\n  fullName: MethodBase.IsFamilyAndAssembly\n- uid: System.Reflection.MethodBase.IsFamilyOrAssembly\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: IsFamilyOrAssembly\n  nameWithType: MethodBase.IsFamilyOrAssembly\n  fullName: MethodBase.IsFamilyOrAssembly\n- uid: System.Reflection.MethodBase.IsFinal\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: IsFinal\n  nameWithType: MethodBase.IsFinal\n  fullName: MethodBase.IsFinal\n- uid: System.Reflection.MethodBase.IsGenericMethod\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: IsGenericMethod\n  nameWithType: MethodBase.IsGenericMethod\n  fullName: MethodBase.IsGenericMethod\n- uid: System.Reflection.MethodBase.IsGenericMethodDefinition\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: IsGenericMethodDefinition\n  nameWithType: MethodBase.IsGenericMethodDefinition\n  fullName: MethodBase.IsGenericMethodDefinition\n- uid: System.Reflection.MethodBase.IsHideBySig\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: IsHideBySig\n  nameWithType: MethodBase.IsHideBySig\n  fullName: MethodBase.IsHideBySig\n- uid: System.Reflection.MethodBase.IsPrivate\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: IsPrivate\n  nameWithType: MethodBase.IsPrivate\n  fullName: MethodBase.IsPrivate\n- uid: System.Reflection.MethodBase.IsPublic\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: IsPublic\n  nameWithType: MethodBase.IsPublic\n  fullName: MethodBase.IsPublic\n- uid: System.Reflection.MethodBase.IsSpecialName\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: IsSpecialName\n  nameWithType: MethodBase.IsSpecialName\n  fullName: MethodBase.IsSpecialName\n- uid: System.Reflection.MethodBase.IsStatic\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: IsStatic\n  nameWithType: MethodBase.IsStatic\n  fullName: MethodBase.IsStatic\n- uid: System.Reflection.MethodBase.IsVirtual\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: IsVirtual\n  nameWithType: MethodBase.IsVirtual\n  fullName: MethodBase.IsVirtual\n- uid: System.Reflection.MethodBase.op_Equality(System.Reflection.MethodBase,System.Reflection.MethodBase)\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: op_Equality(MethodBase, MethodBase)\n  nameWithType: MethodBase.op_Equality(MethodBase, MethodBase)\n  fullName: MethodBase.op_Equality(MethodBase, MethodBase)\n- uid: System.Reflection.MethodBase.op_Inequality(System.Reflection.MethodBase,System.Reflection.MethodBase)\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: op_Inequality(MethodBase, MethodBase)\n  nameWithType: MethodBase.op_Inequality(MethodBase, MethodBase)\n  fullName: MethodBase.op_Inequality(MethodBase, MethodBase)\n- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: _MethodBase.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n  nameWithType: MethodBase._MethodBase.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n  fullName: MethodBase._MethodBase.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#GetType\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: _MethodBase.GetType()\n  nameWithType: MethodBase._MethodBase.GetType()\n  fullName: MethodBase._MethodBase.GetType()\n- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: _MethodBase.GetTypeInfo(UInt32, UInt32, IntPtr)\n  nameWithType: MethodBase._MethodBase.GetTypeInfo(UInt32, UInt32, IntPtr)\n  fullName: MethodBase._MethodBase.GetTypeInfo(UInt32, UInt32, IntPtr)\n- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#GetTypeInfoCount(System.UInt32@)\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: _MethodBase.GetTypeInfoCount(UInt32)\n  nameWithType: MethodBase._MethodBase.GetTypeInfoCount(UInt32)\n  fullName: MethodBase._MethodBase.GetTypeInfoCount(UInt32)\n- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: _MethodBase.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n  nameWithType: MethodBase._MethodBase.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n  fullName: MethodBase._MethodBase.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsAbstract\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: _MethodBase.IsAbstract\n  nameWithType: MethodBase._MethodBase.IsAbstract\n  fullName: MethodBase._MethodBase.IsAbstract\n- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsAssembly\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: _MethodBase.IsAssembly\n  nameWithType: MethodBase._MethodBase.IsAssembly\n  fullName: MethodBase._MethodBase.IsAssembly\n- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsConstructor\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: _MethodBase.IsConstructor\n  nameWithType: MethodBase._MethodBase.IsConstructor\n  fullName: MethodBase._MethodBase.IsConstructor\n- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsFamily\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: _MethodBase.IsFamily\n  nameWithType: MethodBase._MethodBase.IsFamily\n  fullName: MethodBase._MethodBase.IsFamily\n- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsFamilyAndAssembly\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: _MethodBase.IsFamilyAndAssembly\n  nameWithType: MethodBase._MethodBase.IsFamilyAndAssembly\n  fullName: MethodBase._MethodBase.IsFamilyAndAssembly\n- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsFamilyOrAssembly\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: _MethodBase.IsFamilyOrAssembly\n  nameWithType: MethodBase._MethodBase.IsFamilyOrAssembly\n  fullName: MethodBase._MethodBase.IsFamilyOrAssembly\n- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsFinal\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: _MethodBase.IsFinal\n  nameWithType: MethodBase._MethodBase.IsFinal\n  fullName: MethodBase._MethodBase.IsFinal\n- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsHideBySig\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: _MethodBase.IsHideBySig\n  nameWithType: MethodBase._MethodBase.IsHideBySig\n  fullName: MethodBase._MethodBase.IsHideBySig\n- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsPrivate\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: _MethodBase.IsPrivate\n  nameWithType: MethodBase._MethodBase.IsPrivate\n  fullName: MethodBase._MethodBase.IsPrivate\n- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsPublic\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: _MethodBase.IsPublic\n  nameWithType: MethodBase._MethodBase.IsPublic\n  fullName: MethodBase._MethodBase.IsPublic\n- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsSpecialName\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: _MethodBase.IsSpecialName\n  nameWithType: MethodBase._MethodBase.IsSpecialName\n  fullName: MethodBase._MethodBase.IsSpecialName\n- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsStatic\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: _MethodBase.IsStatic\n  nameWithType: MethodBase._MethodBase.IsStatic\n  fullName: MethodBase._MethodBase.IsStatic\n- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsVirtual\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: _MethodBase.IsVirtual\n  nameWithType: MethodBase._MethodBase.IsVirtual\n  fullName: MethodBase._MethodBase.IsVirtual\n- uid: System.Reflection.MethodInfo.GetGenericMethodDefinition\n  parent: System.Reflection.MethodInfo\n  isExternal: false\n  name: GetGenericMethodDefinition()\n  nameWithType: MethodInfo.GetGenericMethodDefinition()\n  fullName: MethodInfo.GetGenericMethodDefinition()\n- uid: System.Reflection.MethodInfo.MakeGenericMethod(System.Type[])\n  parent: System.Reflection.MethodInfo\n  isExternal: false\n  name: MakeGenericMethod(Type[])\n  nameWithType: MethodInfo.MakeGenericMethod(Type[])\n  fullName: MethodInfo.MakeGenericMethod(Type[])\n- uid: System.Reflection.MethodInfo.op_Equality(System.Reflection.MethodInfo,System.Reflection.MethodInfo)\n  parent: System.Reflection.MethodInfo\n  isExternal: false\n  name: op_Equality(MethodInfo, MethodInfo)\n  nameWithType: MethodInfo.op_Equality(MethodInfo, MethodInfo)\n  fullName: MethodInfo.op_Equality(MethodInfo, MethodInfo)\n- uid: System.Reflection.MethodInfo.op_Inequality(System.Reflection.MethodInfo,System.Reflection.MethodInfo)\n  parent: System.Reflection.MethodInfo\n  isExternal: false\n  name: op_Inequality(MethodInfo, MethodInfo)\n  nameWithType: MethodInfo.op_Inequality(MethodInfo, MethodInfo)\n  fullName: MethodInfo.op_Inequality(MethodInfo, MethodInfo)\n- uid: System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  parent: System.Reflection.MethodInfo\n  isExternal: false\n  name: _MethodInfo.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n  nameWithType: MethodInfo._MethodInfo.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n  fullName: MethodInfo._MethodInfo.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n- uid: System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#GetType\n  parent: System.Reflection.MethodInfo\n  isExternal: false\n  name: _MethodInfo.GetType()\n  nameWithType: MethodInfo._MethodInfo.GetType()\n  fullName: MethodInfo._MethodInfo.GetType()\n- uid: System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  parent: System.Reflection.MethodInfo\n  isExternal: false\n  name: _MethodInfo.GetTypeInfo(UInt32, UInt32, IntPtr)\n  nameWithType: MethodInfo._MethodInfo.GetTypeInfo(UInt32, UInt32, IntPtr)\n  fullName: MethodInfo._MethodInfo.GetTypeInfo(UInt32, UInt32, IntPtr)\n- uid: System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#GetTypeInfoCount(System.UInt32@)\n  parent: System.Reflection.MethodInfo\n  isExternal: false\n  name: _MethodInfo.GetTypeInfoCount(UInt32)\n  nameWithType: MethodInfo._MethodInfo.GetTypeInfoCount(UInt32)\n  fullName: MethodInfo._MethodInfo.GetTypeInfoCount(UInt32)\n- uid: System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  parent: System.Reflection.MethodInfo\n  isExternal: false\n  name: _MethodInfo.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n  nameWithType: MethodInfo._MethodInfo.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n  fullName: MethodInfo._MethodInfo.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.MemberInfo,System.Type)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: GetCustomAttribute(MemberInfo, Type)\n  nameWithType: CustomAttributeExtensions.GetCustomAttribute(MemberInfo, Type)\n  fullName: CustomAttributeExtensions.GetCustomAttribute(MemberInfo, Type)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: GetCustomAttribute(MemberInfo, Type, Boolean)\n  nameWithType: CustomAttributeExtensions.GetCustomAttribute(MemberInfo, Type, Boolean)\n  fullName: CustomAttributeExtensions.GetCustomAttribute(MemberInfo, Type, Boolean)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.MemberInfo)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: GetCustomAttribute<T>(MemberInfo)\n  nameWithType: CustomAttributeExtensions.GetCustomAttribute<T>(MemberInfo)\n  fullName: CustomAttributeExtensions.GetCustomAttribute<T>(MemberInfo)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.MemberInfo,System.Boolean)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: GetCustomAttribute<T>(MemberInfo, Boolean)\n  nameWithType: CustomAttributeExtensions.GetCustomAttribute<T>(MemberInfo, Boolean)\n  fullName: CustomAttributeExtensions.GetCustomAttribute<T>(MemberInfo, Boolean)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: GetCustomAttributes(MemberInfo)\n  nameWithType: CustomAttributeExtensions.GetCustomAttributes(MemberInfo)\n  fullName: CustomAttributeExtensions.GetCustomAttributes(MemberInfo)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: GetCustomAttributes(MemberInfo, Boolean)\n  nameWithType: CustomAttributeExtensions.GetCustomAttributes(MemberInfo, Boolean)\n  fullName: CustomAttributeExtensions.GetCustomAttributes(MemberInfo, Boolean)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo,System.Type)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: GetCustomAttributes(MemberInfo, Type)\n  nameWithType: CustomAttributeExtensions.GetCustomAttributes(MemberInfo, Type)\n  fullName: CustomAttributeExtensions.GetCustomAttributes(MemberInfo, Type)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: GetCustomAttributes(MemberInfo, Type, Boolean)\n  nameWithType: CustomAttributeExtensions.GetCustomAttributes(MemberInfo, Type, Boolean)\n  fullName: CustomAttributeExtensions.GetCustomAttributes(MemberInfo, Type, Boolean)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.MemberInfo)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: GetCustomAttributes<T>(MemberInfo)\n  nameWithType: CustomAttributeExtensions.GetCustomAttributes<T>(MemberInfo)\n  fullName: CustomAttributeExtensions.GetCustomAttributes<T>(MemberInfo)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.MemberInfo,System.Boolean)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: GetCustomAttributes<T>(MemberInfo, Boolean)\n  nameWithType: CustomAttributeExtensions.GetCustomAttributes<T>(MemberInfo, Boolean)\n  fullName: CustomAttributeExtensions.GetCustomAttributes<T>(MemberInfo, Boolean)\n- uid: System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.MemberInfo,System.Type)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: IsDefined(MemberInfo, Type)\n  nameWithType: CustomAttributeExtensions.IsDefined(MemberInfo, Type)\n  fullName: CustomAttributeExtensions.IsDefined(MemberInfo, Type)\n- uid: System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: IsDefined(MemberInfo, Type, Boolean)\n  nameWithType: CustomAttributeExtensions.IsDefined(MemberInfo, Type, Boolean)\n  fullName: CustomAttributeExtensions.IsDefined(MemberInfo, Type, Boolean)\n- uid: System.Reflection.MemberInfoExtensions.GetMetadataToken(System.Reflection.MemberInfo)\n  parent: System.Reflection.MemberInfoExtensions\n  isExternal: false\n  name: GetMetadataToken(MemberInfo)\n  nameWithType: MemberInfoExtensions.GetMetadataToken(MemberInfo)\n  fullName: MemberInfoExtensions.GetMetadataToken(MemberInfo)\n- uid: System.Reflection.MemberInfoExtensions.HasMetadataToken(System.Reflection.MemberInfo)\n  parent: System.Reflection.MemberInfoExtensions\n  isExternal: false\n  name: HasMetadataToken(MemberInfo)\n  nameWithType: MemberInfoExtensions.HasMetadataToken(MemberInfo)\n  fullName: MemberInfoExtensions.HasMetadataToken(MemberInfo)\n- uid: System.Reflection.MethodInfoExtensions.GetBaseDefinition(System.Reflection.MethodInfo)\n  parent: System.Reflection.MethodInfoExtensions\n  isExternal: false\n  name: GetBaseDefinition(MethodInfo)\n  nameWithType: MethodInfoExtensions.GetBaseDefinition(MethodInfo)\n  fullName: MethodInfoExtensions.GetBaseDefinition(MethodInfo)\n- uid: System.Reflection.RuntimeReflectionExtensions.GetRuntimeBaseDefinition(System.Reflection.MethodInfo)\n  parent: System.Reflection.RuntimeReflectionExtensions\n  isExternal: false\n  name: GetRuntimeBaseDefinition(MethodInfo)\n  nameWithType: RuntimeReflectionExtensions.GetRuntimeBaseDefinition(MethodInfo)\n  fullName: RuntimeReflectionExtensions.GetRuntimeBaseDefinition(MethodInfo)\n"}