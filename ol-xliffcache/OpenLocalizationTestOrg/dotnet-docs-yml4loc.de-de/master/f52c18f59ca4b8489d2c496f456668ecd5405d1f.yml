### YamlMime:ManagedReference
items:
- uid: System.ServiceModel.Channels.IReplyChannel
  commentId: T:System.ServiceModel.Channels.IReplyChannel
  id: IReplyChannel
  children:
  - System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest(System.AsyncCallback,System.Object)
  - System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)
  - System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)
  - System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest(System.TimeSpan,System.AsyncCallback,System.Object)
  - System.ServiceModel.Channels.IReplyChannel.EndReceiveRequest(System.IAsyncResult)
  - System.ServiceModel.Channels.IReplyChannel.EndTryReceiveRequest(System.IAsyncResult,System.ServiceModel.Channels.RequestContext@)
  - System.ServiceModel.Channels.IReplyChannel.EndWaitForRequest(System.IAsyncResult)
  - System.ServiceModel.Channels.IReplyChannel.LocalAddress
  - System.ServiceModel.Channels.IReplyChannel.ReceiveRequest
  - System.ServiceModel.Channels.IReplyChannel.ReceiveRequest(System.TimeSpan)
  - System.ServiceModel.Channels.IReplyChannel.TryReceiveRequest(System.TimeSpan,System.ServiceModel.Channels.RequestContext@)
  - System.ServiceModel.Channels.IReplyChannel.WaitForRequest(System.TimeSpan)
  langs:
  - csharp
  name: IReplyChannel
  nameWithType: IReplyChannel
  fullName: System.ServiceModel.Channels.IReplyChannel
  type: Interface
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Channels
  summary: Defines the interface that a channel must implement to be on the receiving side of a request-reply communication between messaging endpoints.
  remarks: "The <xref:System.ServiceModel.Channels.IReplyChannel> interface includes synchronous and asynchronous variants of a <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> method return an <xref:System.ServiceModel.Channels.RequestContext> that can be used to construct replies to received requests.  \n  \n The contract includes synchronous and asynchronous variants of receive, try-to-receive and wait-for-a-message functionality.  \n  \n An <xref:System.ServiceModel.Channels.IReplyChannel> is not necessarily bound to a single sender. Other channels and channel interfaces provide correlation between the sender and the reply channel, but the base contract makes no such restriction.  \n  \n The pull model is used with an <xref:System.ServiceModel.Channels.IReplyChannel> to receive messages. This model consists of calling <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> (or one of its variants) and then waiting for a message to arrive."
  syntax:
    content: 'public interface IReplyChannel : System.ServiceModel.Channels.IChannel'
  derivedClasses:
  - System.ServiceModel.Channels.IReplySessionChannel
  implements:
  - System.ServiceModel.Channels.IChannel
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel.Channels/IReplyChannel.xml
  ms.technology:
  - dotnet-standard
  author: Erikre
  ms.author: erikre
  manager: erikre
- uid: System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest(System.AsyncCallback,System.Object)
  commentId: M:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest(System.AsyncCallback,System.Object)
  id: BeginReceiveRequest(System.AsyncCallback,System.Object)
  parent: System.ServiceModel.Channels.IReplyChannel
  langs:
  - csharp
  name: BeginReceiveRequest(AsyncCallback, Object)
  nameWithType: IReplyChannel.BeginReceiveRequest(AsyncCallback, Object)
  fullName: IReplyChannel.BeginReceiveRequest(AsyncCallback, Object)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Channels
  summary: Begins an asynchronous operation to receive an available request with a default timeout.
  remarks: "The <xref:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest%28System.AsyncCallback%2CSystem.Object%29> method implements the standard pattern for invoking <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest> asynchronously. The default timeout is 1 minute. If a receive timeout is set on the binding used to configure the connection, then that value is used. Use <xref:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> if you want to specify an explicit timeout with the call that overrides these other values.  \n  \n If the request message received is larger that the maximum message size allowed by the binding being used, a <xref:System.ServiceModel.QuotaExceededException> is thrown. The maximum message size is set by the <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A> property. The default value is 65536 bytes."
  example:
  - "The following code illustrates how to implement this method:  \n  \n [!code-csharp[S_UE_MessageInterceptor#1](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingchannellistener.cs#1)]"
  syntax:
    content: public IAsyncResult BeginReceiveRequest (AsyncCallback callback, object state);
    parameters:
    - id: callback
      type: System.AsyncCallback
      description: The <xref href="System.AsyncCallback"></xref> delegate that receives the notification of the asynchronous receive that a request operation completes.
    - id: state
      type: System.Object
      description: An object, specified by the application, that contains state information associated with the asynchronous receive of a request operation.
    return:
      type: System.IAsyncResult
      description: The <xref href="System.IAsyncResult"></xref> that references the asynchronous reception of the request.
  overload: System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel.Channels/IReplyChannel.xml
  ms.technology:
  - dotnet-standard
  author: Erikre
  ms.author: erikre
  manager: erikre
- uid: System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)
  commentId: M:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)
  id: BeginReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)
  parent: System.ServiceModel.Channels.IReplyChannel
  langs:
  - csharp
  name: BeginReceiveRequest(TimeSpan, AsyncCallback, Object)
  nameWithType: IReplyChannel.BeginReceiveRequest(TimeSpan, AsyncCallback, Object)
  fullName: IReplyChannel.BeginReceiveRequest(TimeSpan, AsyncCallback, Object)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Channels
  summary: Begins an asynchronous operation to receive an available request with a specified timeout.
  remarks: "The <xref:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> method implements the standard pattern for invoking <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%28System.TimeSpan%29>asynchronously. The timeout set on this method overrides a receive timeout set on the binding that is used to configure the connection.  \n  \n If the request message received is larger that the maximum message size allowed by the binding being used, a <xref:System.ServiceModel.QuotaExceededException> is thrown. The maximum message size is set by the <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A> property. The default value is 65536 bytes."
  example:
  - "The following code illustrates how to implement this method:  \n  \n [!code-csharp[S_UE_MessageInterceptor#2](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingchannellistener.cs#2)]"
  syntax:
    content: public IAsyncResult BeginReceiveRequest (TimeSpan timeout, AsyncCallback callback, object state);
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: The <xref href="System.TimeSpan"></xref> that specifies the interval of time to wait for the reception of an available request.
    - id: callback
      type: System.AsyncCallback
      description: The <xref href="System.AsyncCallback"></xref> delegate that receives the notification of the asynchronous receive that a request operation completes.
    - id: state
      type: System.Object
      description: An object, specified by the application, that contains state information associated with the asynchronous receive of a request operation.
    return:
      type: System.IAsyncResult
      description: The <xref href="System.IAsyncResult"></xref> that references the asynchronous reception of the request.
  overload: System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel.Channels/IReplyChannel.xml
  ms.technology:
  - dotnet-standard
  author: Erikre
  ms.author: erikre
  manager: erikre
- uid: System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)
  commentId: M:System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)
  id: BeginTryReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)
  parent: System.ServiceModel.Channels.IReplyChannel
  langs:
  - csharp
  name: BeginTryReceiveRequest(TimeSpan, AsyncCallback, Object)
  nameWithType: IReplyChannel.BeginTryReceiveRequest(TimeSpan, AsyncCallback, Object)
  fullName: IReplyChannel.BeginTryReceiveRequest(TimeSpan, AsyncCallback, Object)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Channels
  summary: Begins an asynchronous operation to receive a request message that has a specified time out and state object associated with it.
  remarks: "Use the asynchronous <xref:System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> method when you need the application processing to continue without waiting. Use one of the synchronous <xref:System.ServiceModel.Channels.IReplyChannel.TryReceiveRequest%28System.TimeSpan%2CSystem.ServiceModel.Channels.RequestContext%40%29> methods when it is acceptable for the current thread to be blocked while it replies to the request message or until the timeout interval is exceeded.  \n  \n This method receives notification, through a callback, of the identity of the event handler for the operation. The operation is not complete until either a message becomes available in the channel or the time out occurs."
  example:
  - "The following code illustrates how to implement this method:  \n  \n [!code-csharp[S_UE_MessageInterceptor#5](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingchannellistener.cs#5)]"
  syntax:
    content: public IAsyncResult BeginTryReceiveRequest (TimeSpan timeout, AsyncCallback callback, object state);
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: The <xref href="System.TimeSpan"></xref> that specifies how long the receive request operation has to complete before timing out and returning `false`.
    - id: callback
      type: System.AsyncCallback
      description: The <xref href="System.AsyncCallback"></xref> delegate that receives the notification of the asynchronous receive that a request operation completes.
    - id: state
      type: System.Object
      description: An object, specified by the application, that contains state information associated with the asynchronous receive of a request operation.
    return:
      type: System.IAsyncResult
      description: The <xref href="System.IAsyncResult"></xref> that references the asynchronous receive request operation.
  overload: System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel.Channels/IReplyChannel.xml
  ms.technology:
  - dotnet-standard
  author: Erikre
  ms.author: erikre
  manager: erikre
- uid: System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest(System.TimeSpan,System.AsyncCallback,System.Object)
  commentId: M:System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest(System.TimeSpan,System.AsyncCallback,System.Object)
  id: BeginWaitForRequest(System.TimeSpan,System.AsyncCallback,System.Object)
  parent: System.ServiceModel.Channels.IReplyChannel
  langs:
  - csharp
  name: BeginWaitForRequest(TimeSpan, AsyncCallback, Object)
  nameWithType: IReplyChannel.BeginWaitForRequest(TimeSpan, AsyncCallback, Object)
  fullName: IReplyChannel.BeginWaitForRequest(TimeSpan, AsyncCallback, Object)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Channels
  summary: Begins an asynchronous request operation that has a specified time out and state object associated with it.
  remarks: "Use the synchronous <xref:System.ServiceModel.Channels.IReplyChannel.WaitForRequest%28System.TimeSpan%29> method when it is acceptable for the current thread to be blocked while it waits for a request message to arrive in the queue. The thread is blocked up to the specified `timeout`.  \n  \n This method receives notification, through a callback, of the identity of the event handler for the operation. The operation is not complete until either a request message becomes available in the channel or the time out occurs."
  example:
  - "The following code illustrates how to implement this method:  \n  \n [!code-csharp[S_UE_MessageInterceptor#10](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingchannellistener.cs#10)]"
  syntax:
    content: public IAsyncResult BeginWaitForRequest (TimeSpan timeout, AsyncCallback callback, object state);
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: The <xref href="System.TimeSpan"></xref> that specifies the interval of time to wait for the reception of an available request.
    - id: callback
      type: System.AsyncCallback
      description: The <xref href="System.AsyncCallback"></xref> delegate that receives the notification of the asynchronous receive that a request operation completes.
    - id: state
      type: System.Object
      description: An object, specified by the application, that contains state information associated with the asynchronous receive of a request operation.
    return:
      type: System.IAsyncResult
      description: The <xref href="System.IAsyncResult"></xref> that references the asynchronous operation to wait for a request message to arrive.
  overload: System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel.Channels/IReplyChannel.xml
  ms.technology:
  - dotnet-standard
  author: Erikre
  ms.author: erikre
  manager: erikre
- uid: System.ServiceModel.Channels.IReplyChannel.EndReceiveRequest(System.IAsyncResult)
  commentId: M:System.ServiceModel.Channels.IReplyChannel.EndReceiveRequest(System.IAsyncResult)
  id: EndReceiveRequest(System.IAsyncResult)
  parent: System.ServiceModel.Channels.IReplyChannel
  langs:
  - csharp
  name: EndReceiveRequest(IAsyncResult)
  nameWithType: IReplyChannel.EndReceiveRequest(IAsyncResult)
  fullName: IReplyChannel.EndReceiveRequest(IAsyncResult)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Channels
  summary: Completes an asynchronous operation to receive an available request.
  remarks: If the request message received is larger that the maximum message size allowed by the binding being used, a <xref:System.ServiceModel.QuotaExceededException> is thrown. The maximum message size is set by the <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A> property. The default value is 65536 bytes.
  example:
  - "The following code illustrates how to implement this method:  \n  \n [!code-csharp[S_UE_MessageInterceptor#3](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingchannellistener.cs#3)]"
  syntax:
    content: public System.ServiceModel.Channels.RequestContext EndReceiveRequest (IAsyncResult result);
    parameters:
    - id: result
      type: System.IAsyncResult
      description: The <xref href="System.IAsyncResult"></xref> returned by a call to the <xref href="System.ServiceModel.Channels.IInputChannel.BeginReceive*"></xref> method.
    return:
      type: System.ServiceModel.Channels.RequestContext
      description: The <xref href="System.ServiceModel.Channels.RequestContext"></xref> used to construct a reply to the request.
  overload: System.ServiceModel.Channels.IReplyChannel.EndReceiveRequest*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel.Channels/IReplyChannel.xml
  ms.technology:
  - dotnet-standard
  author: Erikre
  ms.author: erikre
  manager: erikre
- uid: System.ServiceModel.Channels.IReplyChannel.EndTryReceiveRequest(System.IAsyncResult,System.ServiceModel.Channels.RequestContext@)
  commentId: M:System.ServiceModel.Channels.IReplyChannel.EndTryReceiveRequest(System.IAsyncResult,System.ServiceModel.Channels.RequestContext@)
  id: EndTryReceiveRequest(System.IAsyncResult,System.ServiceModel.Channels.RequestContext@)
  parent: System.ServiceModel.Channels.IReplyChannel
  langs:
  - csharp
  name: EndTryReceiveRequest(IAsyncResult, RequestContext)
  nameWithType: IReplyChannel.EndTryReceiveRequest(IAsyncResult, RequestContext)
  fullName: IReplyChannel.EndTryReceiveRequest(IAsyncResult, RequestContext)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Channels
  summary: Completes the specified asynchronous operation to receive a request message.
  remarks: ''
  example:
  - "The following code illustrates how to implement this method:  \n  \n [!code-csharp[S_UE_MessageInterceptor#6](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingchannellistener.cs#6)]"
  syntax:
    content: public bool EndTryReceiveRequest (IAsyncResult result, out System.ServiceModel.Channels.RequestContext context);
    parameters:
    - id: result
      type: System.IAsyncResult
      description: The <xref href="System.IAsyncResult"></xref> returned by a call to the <xref href="System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)"></xref> method.
    - id: context
      type: System.ServiceModel.Channels.RequestContext
      description: The <xref href="System.ServiceModel.Channels.RequestContext"></xref> received.
    return:
      type: System.Boolean
      description: '`true` if a request message is received before the specified interval of time elapses; otherwise `false`.'
  overload: System.ServiceModel.Channels.IReplyChannel.EndTryReceiveRequest*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel.Channels/IReplyChannel.xml
  ms.technology:
  - dotnet-standard
  author: Erikre
  ms.author: erikre
  manager: erikre
- uid: System.ServiceModel.Channels.IReplyChannel.EndWaitForRequest(System.IAsyncResult)
  commentId: M:System.ServiceModel.Channels.IReplyChannel.EndWaitForRequest(System.IAsyncResult)
  id: EndWaitForRequest(System.IAsyncResult)
  parent: System.ServiceModel.Channels.IReplyChannel
  langs:
  - csharp
  name: EndWaitForRequest(IAsyncResult)
  nameWithType: IReplyChannel.EndWaitForRequest(IAsyncResult)
  fullName: IReplyChannel.EndWaitForRequest(IAsyncResult)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Channels
  summary: Completes the specified asynchronous wait-for-a-request message operation.
  remarks: ''
  example:
  - "The following code illustrates how to implement this method:  \n  \n [!code-csharp[S_UE_MessageInterceptor#11](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingchannellistener.cs#11)]"
  syntax:
    content: public bool EndWaitForRequest (IAsyncResult result);
    parameters:
    - id: result
      type: System.IAsyncResult
      description: The <xref href="System.IAsyncResult"></xref> that identifies the <xref href="System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest(System.TimeSpan,System.AsyncCallback,System.Object)"></xref> operation to finish, and from which to retrieve an end result.
    return:
      type: System.Boolean
      description: '`true` if a request is received before the specified interval of time elapses; otherwise `false`.'
  overload: System.ServiceModel.Channels.IReplyChannel.EndWaitForRequest*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel.Channels/IReplyChannel.xml
  ms.technology:
  - dotnet-standard
  author: Erikre
  ms.author: erikre
  manager: erikre
- uid: System.ServiceModel.Channels.IReplyChannel.LocalAddress
  commentId: P:System.ServiceModel.Channels.IReplyChannel.LocalAddress
  id: LocalAddress
  parent: System.ServiceModel.Channels.IReplyChannel
  langs:
  - csharp
  name: LocalAddress
  nameWithType: IReplyChannel.LocalAddress
  fullName: IReplyChannel.LocalAddress
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Channels
  summary: Gets the address on which this reply channel receives messages.
  remarks: ''
  example:
  - "The following code illustrates how to implement this property:  \n  \n [!code-csharp[S_UE_MessageInterceptor#0](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingchannellistener.cs#0)]"
  syntax:
    content: public System.ServiceModel.EndpointAddress LocalAddress { get; }
    return:
      type: System.ServiceModel.EndpointAddress
      description: The <xref href="System.ServiceModel.EndpointAddress"></xref> on which this reply channel receives messages.
  overload: System.ServiceModel.Channels.IReplyChannel.LocalAddress*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel.Channels/IReplyChannel.xml
  ms.technology:
  - dotnet-standard
  author: Erikre
  ms.author: erikre
  manager: erikre
- uid: System.ServiceModel.Channels.IReplyChannel.ReceiveRequest
  commentId: M:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest
  id: ReceiveRequest
  parent: System.ServiceModel.Channels.IReplyChannel
  langs:
  - csharp
  name: ReceiveRequest()
  nameWithType: IReplyChannel.ReceiveRequest()
  fullName: IReplyChannel.ReceiveRequest()
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Channels
  summary: Returns the context of the request received, if one is available. If a context is not available, waits until there is one available.
  remarks: "<xref:System.ServiceModel.Channels.RequestContext> encapsulates the request message and a mechanism for replying to that message.  \n  \n <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> can be called multiple times or concurrently. Only one <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> call completes per request received.  \n  \n If the request message received is larger that the maximum message size allowed by the binding being used, a <xref:System.ServiceModel.QuotaExceededException> is thrown. The maximum message size is set by the <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A> property. The default value is 65536 bytes."
  example:
  - "The following code illustrates how to implement this method:  \n  \n [!code-csharp[S_UE_MessageInterceptor#7](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingchannellistener.cs#7)]"
  syntax:
    content: public System.ServiceModel.Channels.RequestContext ReceiveRequest ();
    parameters: []
    return:
      type: System.ServiceModel.Channels.RequestContext
      description: The <xref href="System.ServiceModel.Channels.RequestContext"></xref> used to construct replies.
  overload: System.ServiceModel.Channels.IReplyChannel.ReceiveRequest*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel.Channels/IReplyChannel.xml
  ms.technology:
  - dotnet-standard
  author: Erikre
  ms.author: erikre
  manager: erikre
- uid: System.ServiceModel.Channels.IReplyChannel.ReceiveRequest(System.TimeSpan)
  commentId: M:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest(System.TimeSpan)
  id: ReceiveRequest(System.TimeSpan)
  parent: System.ServiceModel.Channels.IReplyChannel
  langs:
  - csharp
  name: ReceiveRequest(TimeSpan)
  nameWithType: IReplyChannel.ReceiveRequest(TimeSpan)
  fullName: IReplyChannel.ReceiveRequest(TimeSpan)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Channels
  summary: Returns the context of the request received, if one is available. If a context is not available, waits until there is one available.
  remarks: "<xref:System.ServiceModel.Channels.RequestContext> encapsulates the request message and a mechanism for replying to that message.  \n  \n <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> can be called multiple times or concurrently. Only one <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> call completes per request received.  \n  \n If the request message received is larger that the maximum message size allowed by the binding being used, a <xref:System.ServiceModel.QuotaExceededException> is thrown. The maximum message size is set by the <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A> property. The default value is 65536 bytes."
  example:
  - "The following code illustrates how to implement this method:  \n  \n [!code-csharp[S_UE_MessageInterceptor#8](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingchannellistener.cs#8)]"
  syntax:
    content: public System.ServiceModel.Channels.RequestContext ReceiveRequest (TimeSpan timeout);
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: The <xref href="System.TimeSpan"></xref> that specifies how long the receive of a request operation has to complete before timing out and returning `false`.
    return:
      type: System.ServiceModel.Channels.RequestContext
      description: The <xref href="System.ServiceModel.Channels.RequestContext"></xref> used to construct replies.
  overload: System.ServiceModel.Channels.IReplyChannel.ReceiveRequest*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel.Channels/IReplyChannel.xml
  ms.technology:
  - dotnet-standard
  author: Erikre
  ms.author: erikre
  manager: erikre
- uid: System.ServiceModel.Channels.IReplyChannel.TryReceiveRequest(System.TimeSpan,System.ServiceModel.Channels.RequestContext@)
  commentId: M:System.ServiceModel.Channels.IReplyChannel.TryReceiveRequest(System.TimeSpan,System.ServiceModel.Channels.RequestContext@)
  id: TryReceiveRequest(System.TimeSpan,System.ServiceModel.Channels.RequestContext@)
  parent: System.ServiceModel.Channels.IReplyChannel
  langs:
  - csharp
  name: TryReceiveRequest(TimeSpan, RequestContext)
  nameWithType: IReplyChannel.TryReceiveRequest(TimeSpan, RequestContext)
  fullName: IReplyChannel.TryReceiveRequest(TimeSpan, RequestContext)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Channels
  summary: Returns a value that indicates whether a request is received before a specified interval of time elapses.
  remarks: Use <xref:System.ServiceModel.Channels.IReplyChannel.TryReceiveRequest%28System.TimeSpan%2CSystem.ServiceModel.Channels.RequestContext%40%29> when it is acceptable for the current thread to be blocked while it waits for a request message to arrive in the queue. The thread is blocked up to the specified `timeout`. If you need the application processing to continue without waiting, use the asynchronous <xref:System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> method.
  example:
  - "The following code illustrates how to implement this method:  \n  \n [!code-csharp[S_UE_MessageInterceptor#4](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingchannellistener.cs#4)]"
  syntax:
    content: public bool TryReceiveRequest (TimeSpan timeout, out System.ServiceModel.Channels.RequestContext context);
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: The <xref href="System.TimeSpan"></xref> that specifies how long the receive of a request operation has to complete before timing out and returning `false`.
    - id: context
      type: System.ServiceModel.Channels.RequestContext
      description: The <xref href="System.ServiceModel.Channels.RequestContext"></xref> received.
    return:
      type: System.Boolean
      description: '`true` if a request message is received before the specified interval of time elapses; otherwise `false`.'
  overload: System.ServiceModel.Channels.IReplyChannel.TryReceiveRequest*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel.Channels/IReplyChannel.xml
  ms.technology:
  - dotnet-standard
  author: Erikre
  ms.author: erikre
  manager: erikre
- uid: System.ServiceModel.Channels.IReplyChannel.WaitForRequest(System.TimeSpan)
  commentId: M:System.ServiceModel.Channels.IReplyChannel.WaitForRequest(System.TimeSpan)
  id: WaitForRequest(System.TimeSpan)
  parent: System.ServiceModel.Channels.IReplyChannel
  langs:
  - csharp
  name: WaitForRequest(TimeSpan)
  nameWithType: IReplyChannel.WaitForRequest(TimeSpan)
  fullName: IReplyChannel.WaitForRequest(TimeSpan)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Channels
  summary: Returns a value that indicates whether a request message is received before a specified interval of time elapses.
  remarks: "Calling <xref:System.ServiceModel.Channels.IReplyChannel.WaitForRequest%28System.TimeSpan%29> does not result in a request message being received or processed in any way.  \n  \n The <xref:System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> method exists primarily for transacted scenarios where the user wants to receive the message using a transaction. When using just <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> normally for this, the user must create the transaction, and then call <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> and hope the message arrives before the transaction times out, which may not be possible.  \n  \n Instead, the user can call <xref:System.ServiceModel.Channels.IReplyChannel.WaitForRequest%28System.TimeSpan%29> and specify the time out (even infinite), then when a message arrives they can open the transaction, call <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> and be confident that they can get the message back before the transaction expires.  \n  \n Use <xref:System.ServiceModel.Channels.IReplyChannel.WaitForRequest%28System.TimeSpan%29> when it is acceptable for the current thread to be blocked while it waits for a message to arrive in the queue. The thread is blocked up to the specified `timeout`. If you need the application processing to continue without waiting, use the asynchronous <xref:System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> method."
  example:
  - "The following code illustrates how to implement this method:  \n  \n [!code-csharp[S_UE_MessageInterceptor#9](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingchannellistener.cs#9)]"
  syntax:
    content: public bool WaitForRequest (TimeSpan timeout);
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: The <xref href="System.TimeSpan"></xref> that specifies how long a request operation has to complete before timing out and returning `false`.
    return:
      type: System.Boolean
      description: '`true` if a request is received before the specified interval of time elapses; otherwise `false`.'
  overload: System.ServiceModel.Channels.IReplyChannel.WaitForRequest*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel.Channels/IReplyChannel.xml
  ms.technology:
  - dotnet-standard
  author: Erikre
  ms.author: erikre
  manager: erikre
references:
- uid: System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest(System.AsyncCallback,System.Object)
  parent: System.ServiceModel.Channels.IReplyChannel
  isExternal: false
  name: BeginReceiveRequest(AsyncCallback, Object)
  nameWithType: IReplyChannel.BeginReceiveRequest(AsyncCallback, Object)
  fullName: IReplyChannel.BeginReceiveRequest(AsyncCallback, Object)
- uid: System.IAsyncResult
  parent: System
  isExternal: false
  name: IAsyncResult
  nameWithType: IAsyncResult
  fullName: System.IAsyncResult
- uid: System.AsyncCallback
  parent: System
  isExternal: false
  name: AsyncCallback
  nameWithType: AsyncCallback
  fullName: System.AsyncCallback
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)
  parent: System.ServiceModel.Channels.IReplyChannel
  isExternal: false
  name: BeginReceiveRequest(TimeSpan, AsyncCallback, Object)
  nameWithType: IReplyChannel.BeginReceiveRequest(TimeSpan, AsyncCallback, Object)
  fullName: IReplyChannel.BeginReceiveRequest(TimeSpan, AsyncCallback, Object)
- uid: System.TimeSpan
  parent: System
  isExternal: false
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)
  parent: System.ServiceModel.Channels.IReplyChannel
  isExternal: false
  name: BeginTryReceiveRequest(TimeSpan, AsyncCallback, Object)
  nameWithType: IReplyChannel.BeginTryReceiveRequest(TimeSpan, AsyncCallback, Object)
  fullName: IReplyChannel.BeginTryReceiveRequest(TimeSpan, AsyncCallback, Object)
- uid: System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest(System.TimeSpan,System.AsyncCallback,System.Object)
  parent: System.ServiceModel.Channels.IReplyChannel
  isExternal: false
  name: BeginWaitForRequest(TimeSpan, AsyncCallback, Object)
  nameWithType: IReplyChannel.BeginWaitForRequest(TimeSpan, AsyncCallback, Object)
  fullName: IReplyChannel.BeginWaitForRequest(TimeSpan, AsyncCallback, Object)
- uid: System.ServiceModel.Channels.IReplyChannel.EndReceiveRequest(System.IAsyncResult)
  parent: System.ServiceModel.Channels.IReplyChannel
  isExternal: false
  name: EndReceiveRequest(IAsyncResult)
  nameWithType: IReplyChannel.EndReceiveRequest(IAsyncResult)
  fullName: IReplyChannel.EndReceiveRequest(IAsyncResult)
- uid: System.ServiceModel.Channels.RequestContext
  parent: System.ServiceModel.Channels
  isExternal: false
  name: RequestContext
  nameWithType: RequestContext
  fullName: System.ServiceModel.Channels.RequestContext
- uid: System.ServiceModel.Channels.IReplyChannel.EndTryReceiveRequest(System.IAsyncResult,System.ServiceModel.Channels.RequestContext@)
  parent: System.ServiceModel.Channels.IReplyChannel
  isExternal: false
  name: EndTryReceiveRequest(IAsyncResult, RequestContext)
  nameWithType: IReplyChannel.EndTryReceiveRequest(IAsyncResult, RequestContext)
  fullName: IReplyChannel.EndTryReceiveRequest(IAsyncResult, RequestContext)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ServiceModel.Channels.IReplyChannel.EndWaitForRequest(System.IAsyncResult)
  parent: System.ServiceModel.Channels.IReplyChannel
  isExternal: false
  name: EndWaitForRequest(IAsyncResult)
  nameWithType: IReplyChannel.EndWaitForRequest(IAsyncResult)
  fullName: IReplyChannel.EndWaitForRequest(IAsyncResult)
- uid: System.ServiceModel.Channels.IReplyChannel.LocalAddress
  parent: System.ServiceModel.Channels.IReplyChannel
  isExternal: false
  name: LocalAddress
  nameWithType: IReplyChannel.LocalAddress
  fullName: IReplyChannel.LocalAddress
- uid: System.ServiceModel.EndpointAddress
  parent: System.ServiceModel
  isExternal: false
  name: EndpointAddress
  nameWithType: EndpointAddress
  fullName: System.ServiceModel.EndpointAddress
- uid: System.ServiceModel.Channels.IReplyChannel.ReceiveRequest
  parent: System.ServiceModel.Channels.IReplyChannel
  isExternal: false
  name: ReceiveRequest()
  nameWithType: IReplyChannel.ReceiveRequest()
  fullName: IReplyChannel.ReceiveRequest()
- uid: System.ServiceModel.Channels.IReplyChannel.ReceiveRequest(System.TimeSpan)
  parent: System.ServiceModel.Channels.IReplyChannel
  isExternal: false
  name: ReceiveRequest(TimeSpan)
  nameWithType: IReplyChannel.ReceiveRequest(TimeSpan)
  fullName: IReplyChannel.ReceiveRequest(TimeSpan)
- uid: System.ServiceModel.Channels.IReplyChannel.TryReceiveRequest(System.TimeSpan,System.ServiceModel.Channels.RequestContext@)
  parent: System.ServiceModel.Channels.IReplyChannel
  isExternal: false
  name: TryReceiveRequest(TimeSpan, RequestContext)
  nameWithType: IReplyChannel.TryReceiveRequest(TimeSpan, RequestContext)
  fullName: IReplyChannel.TryReceiveRequest(TimeSpan, RequestContext)
- uid: System.ServiceModel.Channels.IReplyChannel.WaitForRequest(System.TimeSpan)
  parent: System.ServiceModel.Channels.IReplyChannel
  isExternal: false
  name: WaitForRequest(TimeSpan)
  nameWithType: IReplyChannel.WaitForRequest(TimeSpan)
  fullName: IReplyChannel.WaitForRequest(TimeSpan)
- uid: System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest*
  parent: System.ServiceModel.Channels.IReplyChannel
  isExternal: false
  name: BeginReceiveRequest
  nameWithType: IReplyChannel.BeginReceiveRequest
  fullName: IReplyChannel.BeginReceiveRequest
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel.Channels/IReplyChannel.xml
- uid: System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest*
  parent: System.ServiceModel.Channels.IReplyChannel
  isExternal: false
  name: BeginTryReceiveRequest
  nameWithType: IReplyChannel.BeginTryReceiveRequest
  fullName: IReplyChannel.BeginTryReceiveRequest
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel.Channels/IReplyChannel.xml
- uid: System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest*
  parent: System.ServiceModel.Channels.IReplyChannel
  isExternal: false
  name: BeginWaitForRequest
  nameWithType: IReplyChannel.BeginWaitForRequest
  fullName: IReplyChannel.BeginWaitForRequest
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel.Channels/IReplyChannel.xml
- uid: System.ServiceModel.Channels.IReplyChannel.EndReceiveRequest*
  parent: System.ServiceModel.Channels.IReplyChannel
  isExternal: false
  name: EndReceiveRequest
  nameWithType: IReplyChannel.EndReceiveRequest
  fullName: IReplyChannel.EndReceiveRequest
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel.Channels/IReplyChannel.xml
- uid: System.ServiceModel.Channels.IReplyChannel.EndTryReceiveRequest*
  parent: System.ServiceModel.Channels.IReplyChannel
  isExternal: false
  name: EndTryReceiveRequest
  nameWithType: IReplyChannel.EndTryReceiveRequest
  fullName: IReplyChannel.EndTryReceiveRequest
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel.Channels/IReplyChannel.xml
- uid: System.ServiceModel.Channels.IReplyChannel.EndWaitForRequest*
  parent: System.ServiceModel.Channels.IReplyChannel
  isExternal: false
  name: EndWaitForRequest
  nameWithType: IReplyChannel.EndWaitForRequest
  fullName: IReplyChannel.EndWaitForRequest
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel.Channels/IReplyChannel.xml
- uid: System.ServiceModel.Channels.IReplyChannel.LocalAddress*
  parent: System.ServiceModel.Channels.IReplyChannel
  isExternal: false
  name: LocalAddress
  nameWithType: IReplyChannel.LocalAddress
  fullName: IReplyChannel.LocalAddress
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel.Channels/IReplyChannel.xml
- uid: System.ServiceModel.Channels.IReplyChannel.ReceiveRequest*
  parent: System.ServiceModel.Channels.IReplyChannel
  isExternal: false
  name: ReceiveRequest
  nameWithType: IReplyChannel.ReceiveRequest
  fullName: IReplyChannel.ReceiveRequest
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel.Channels/IReplyChannel.xml
- uid: System.ServiceModel.Channels.IReplyChannel.TryReceiveRequest*
  parent: System.ServiceModel.Channels.IReplyChannel
  isExternal: false
  name: TryReceiveRequest
  nameWithType: IReplyChannel.TryReceiveRequest
  fullName: IReplyChannel.TryReceiveRequest
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel.Channels/IReplyChannel.xml
- uid: System.ServiceModel.Channels.IReplyChannel.WaitForRequest*
  parent: System.ServiceModel.Channels.IReplyChannel
  isExternal: false
  name: WaitForRequest
  nameWithType: IReplyChannel.WaitForRequest
  fullName: IReplyChannel.WaitForRequest
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel.Channels/IReplyChannel.xml
- uid: System.ServiceModel.Channels.IChannel
  parent: System.ServiceModel.Channels
  isExternal: false
  name: IChannel
  nameWithType: IChannel
  fullName: System.ServiceModel.Channels.IChannel
