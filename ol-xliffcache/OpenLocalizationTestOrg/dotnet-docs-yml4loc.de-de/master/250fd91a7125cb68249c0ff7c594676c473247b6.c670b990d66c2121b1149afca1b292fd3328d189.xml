{"nodes":[{"content":"Manages a collection of extensions for a <xref href=\"System.Activities.Hosting.WorkflowInstance\"></xref>.","nodes":[{"pos":[0,105],"content":"Manages a collection of extensions for a <ph id=\"ph1\">&lt;xref href=\"System.Activities.Hosting.WorkflowInstance\"&gt;&lt;/xref&gt;</ph>.","source":"Manages a collection of extensions for a <xref href=\"System.Activities.Hosting.WorkflowInstance\"></xref>."}],"pos":[823,929],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Activities.Hosting.WorkflowInstanceExtensionManager\"></xref> class.","nodes":[{"pos":[0,120],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Activities.Hosting.WorkflowInstanceExtensionManager\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.Activities.Hosting.WorkflowInstanceExtensionManager\"></xref> class."}],"pos":[2464,2585],"yaml":true},{"content":"Adds the specified extension to the collection of extensions.","nodes":[{"pos":[0,61],"content":"Adds the specified extension to the collection of extensions.","nodes":[{"content":"Adds the specified extension to the collection of extensions.","pos":[0,61]}]}],"pos":[3851,3913],"yaml":true},{"content":"When this overload is used, each workflow instance that requests this extension type will get the extension instance provided to this method. If each workflow instance should have its own instance of the extension, use the other <xref:System.Activities.Hosting.WorkflowInstanceExtensionManager.Add%2A> overload.  \n  \n If any of the <xref:System.Activities.Hosting.WorkflowInstanceExtensionManager.Add%2A> overloads are called after <xref:System.Activities.Hosting.WorkflowInstanceExtensionManager.MakeReadOnly%2A>, an <xref:System.InvalidOperationException> is thrown.","nodes":[{"pos":[0,311],"content":"When this overload is used, each workflow instance that requests this extension type will get the extension instance provided to this method. If each workflow instance should have its own instance of the extension, use the other <xref:System.Activities.Hosting.WorkflowInstanceExtensionManager.Add%2A> overload.","nodes":[{"content":"When this overload is used, each workflow instance that requests this extension type will get the extension instance provided to this method. If each workflow instance should have its own instance of the extension, use the other <xref:System.Activities.Hosting.WorkflowInstanceExtensionManager.Add%2A> overload.","pos":[0,311],"nodes":[{"content":"When this overload is used, each workflow instance that requests this extension type will get the extension instance provided to this method.","pos":[0,141]},{"content":"If each workflow instance should have its own instance of the extension, use the other <ph id=\"ph1\">&lt;xref:System.Activities.Hosting.WorkflowInstanceExtensionManager.Add%2A&gt;</ph> overload.","pos":[142,311],"source":" If each workflow instance should have its own instance of the extension, use the other <xref:System.Activities.Hosting.WorkflowInstanceExtensionManager.Add%2A> overload."}]}]},{"pos":[318,568],"content":"If any of the <xref:System.Activities.Hosting.WorkflowInstanceExtensionManager.Add%2A> overloads are called after <xref:System.Activities.Hosting.WorkflowInstanceExtensionManager.MakeReadOnly%2A>, an <xref:System.InvalidOperationException> is thrown.","nodes":[{"content":"If any of the <ph id=\"ph1\">&lt;xref:System.Activities.Hosting.WorkflowInstanceExtensionManager.Add%2A&gt;</ph> overloads are called after <ph id=\"ph2\">&lt;xref:System.Activities.Hosting.WorkflowInstanceExtensionManager.MakeReadOnly%2A&gt;</ph>, an <ph id=\"ph3\">&lt;xref:System.InvalidOperationException&gt;</ph> is thrown.","pos":[0,250],"source":"If any of the <xref:System.Activities.Hosting.WorkflowInstanceExtensionManager.Add%2A> overloads are called after <xref:System.Activities.Hosting.WorkflowInstanceExtensionManager.MakeReadOnly%2A>, an <xref:System.InvalidOperationException> is thrown."}]}],"pos":[3924,4497],"yaml":true,"extradata":"MT"},{"content":"The extension to add.","nodes":[{"pos":[0,21],"content":"The extension to add.","nodes":[{"content":"The extension to add.","pos":[0,21]}]}],"pos":[4663,4685],"yaml":true},{"content":"Registers a <xref href=\"System.Func`1\"></xref> that is used to provide an instance of an extension when requested by a workflow instance.","nodes":[{"pos":[0,137],"content":"Registers a <ph id=\"ph1\">&lt;xref href=\"System.Func`1\"&gt;&lt;/xref&gt;</ph> that is used to provide an instance of an extension when requested by a workflow instance.","source":"Registers a <xref href=\"System.Func`1\"></xref> that is used to provide an instance of an extension when requested by a workflow instance."}],"pos":[5893,6031],"yaml":true},{"content":"When this overload is used, each workflow instance that requests this extension type will get a new instance of the extension. If a singleton extension is desired, use the other <xref:System.Activities.Hosting.WorkflowInstanceExtensionManager.Add%2A> overload.  \n  \n If any of the <xref:System.Activities.Hosting.WorkflowInstanceExtensionManager.Add%2A> overloads are called after <xref:System.Activities.Hosting.WorkflowInstanceExtensionManager.MakeReadOnly%2A>, an <xref:System.InvalidOperationException> is thrown.","nodes":[{"pos":[0,260],"content":"When this overload is used, each workflow instance that requests this extension type will get a new instance of the extension. If a singleton extension is desired, use the other <xref:System.Activities.Hosting.WorkflowInstanceExtensionManager.Add%2A> overload.","nodes":[{"content":"When this overload is used, each workflow instance that requests this extension type will get a new instance of the extension. If a singleton extension is desired, use the other <xref:System.Activities.Hosting.WorkflowInstanceExtensionManager.Add%2A> overload.","pos":[0,260],"nodes":[{"content":"When this overload is used, each workflow instance that requests this extension type will get a new instance of the extension.","pos":[0,126]},{"content":"If a singleton extension is desired, use the other <ph id=\"ph1\">&lt;xref:System.Activities.Hosting.WorkflowInstanceExtensionManager.Add%2A&gt;</ph> overload.","pos":[127,260],"source":" If a singleton extension is desired, use the other <xref:System.Activities.Hosting.WorkflowInstanceExtensionManager.Add%2A> overload."}]}]},{"pos":[267,517],"content":"If any of the <xref:System.Activities.Hosting.WorkflowInstanceExtensionManager.Add%2A> overloads are called after <xref:System.Activities.Hosting.WorkflowInstanceExtensionManager.MakeReadOnly%2A>, an <xref:System.InvalidOperationException> is thrown.","nodes":[{"content":"If any of the <ph id=\"ph1\">&lt;xref:System.Activities.Hosting.WorkflowInstanceExtensionManager.Add%2A&gt;</ph> overloads are called after <ph id=\"ph2\">&lt;xref:System.Activities.Hosting.WorkflowInstanceExtensionManager.MakeReadOnly%2A&gt;</ph>, an <ph id=\"ph3\">&lt;xref:System.InvalidOperationException&gt;</ph> is thrown.","pos":[0,250],"source":"If any of the <xref:System.Activities.Hosting.WorkflowInstanceExtensionManager.Add%2A> overloads are called after <xref:System.Activities.Hosting.WorkflowInstanceExtensionManager.MakeReadOnly%2A>, an <xref:System.InvalidOperationException> is thrown."}]}],"pos":[6042,6564],"yaml":true,"extradata":"MT"},{"content":"The method that creates the extension.","nodes":[{"pos":[0,38],"content":"The method that creates the extension.","nodes":[{"content":"The method that creates the extension.","pos":[0,38]}]}],"pos":[6767,6806],"yaml":true},{"content":"The type of extension to add.","nodes":[{"pos":[0,29],"content":"The type of extension to add.","nodes":[{"content":"The type of extension to add.","pos":[0,29]}]}],"pos":[6857,6887],"yaml":true},{"content":"Marks the collection of extensions as read-only.","nodes":[{"pos":[0,48],"content":"Marks the collection of extensions as read-only.","nodes":[{"content":"Marks the collection of extensions as read-only.","pos":[0,48]}]}],"pos":[8059,8108],"yaml":true},{"content":"This method is called when a workflow host is prepared for execution. If any of the <xref:System.Activities.Hosting.WorkflowInstanceExtensionManager.Add%2A> overloads are called after <xref:System.Activities.Hosting.WorkflowInstanceExtensionManager.MakeReadOnly%2A>, an <xref:System.InvalidOperationException> is thrown.","nodes":[{"pos":[0,320],"content":"This method is called when a workflow host is prepared for execution. If any of the <xref:System.Activities.Hosting.WorkflowInstanceExtensionManager.Add%2A> overloads are called after <xref:System.Activities.Hosting.WorkflowInstanceExtensionManager.MakeReadOnly%2A>, an <xref:System.InvalidOperationException> is thrown.","nodes":[{"content":"This method is called when a workflow host is prepared for execution. If any of the <xref:System.Activities.Hosting.WorkflowInstanceExtensionManager.Add%2A> overloads are called after <xref:System.Activities.Hosting.WorkflowInstanceExtensionManager.MakeReadOnly%2A>, an <xref:System.InvalidOperationException> is thrown.","pos":[0,320],"nodes":[{"content":"This method is called when a workflow host is prepared for execution.","pos":[0,69]},{"content":"If any of the <ph id=\"ph1\">&lt;xref:System.Activities.Hosting.WorkflowInstanceExtensionManager.Add%2A&gt;</ph> overloads are called after <ph id=\"ph2\">&lt;xref:System.Activities.Hosting.WorkflowInstanceExtensionManager.MakeReadOnly%2A&gt;</ph>, an <ph id=\"ph3\">&lt;xref:System.InvalidOperationException&gt;</ph> is thrown.","pos":[70,320],"source":" If any of the <xref:System.Activities.Hosting.WorkflowInstanceExtensionManager.Add%2A> overloads are called after <xref:System.Activities.Hosting.WorkflowInstanceExtensionManager.MakeReadOnly%2A>, an <xref:System.InvalidOperationException> is thrown."}]}]}],"pos":[8119,8440],"yaml":true,"extradata":"MT"}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Activities.Hosting.WorkflowInstanceExtensionManager\n  commentId: T:System.Activities.Hosting.WorkflowInstanceExtensionManager\n  id: WorkflowInstanceExtensionManager\n  children:\n  - System.Activities.Hosting.WorkflowInstanceExtensionManager.#ctor\n  - System.Activities.Hosting.WorkflowInstanceExtensionManager.Add(System.Object)\n  - System.Activities.Hosting.WorkflowInstanceExtensionManager.Add``1(System.Func{``0})\n  - System.Activities.Hosting.WorkflowInstanceExtensionManager.MakeReadOnly\n  langs:\n  - csharp\n  name: WorkflowInstanceExtensionManager\n  nameWithType: WorkflowInstanceExtensionManager\n  fullName: System.Activities.Hosting.WorkflowInstanceExtensionManager\n  type: Class\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Hosting\n  summary: Manages a collection of extensions for a <xref href=\"System.Activities.Hosting.WorkflowInstance\"></xref>.\n  syntax:\n    content: public class WorkflowInstanceExtensionManager\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Activities.Hosting/WorkflowInstanceExtensionManager.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Activities.Hosting.WorkflowInstanceExtensionManager.#ctor\n  commentId: M:System.Activities.Hosting.WorkflowInstanceExtensionManager.#ctor\n  id: '#ctor'\n  parent: System.Activities.Hosting.WorkflowInstanceExtensionManager\n  langs:\n  - csharp\n  name: WorkflowInstanceExtensionManager()\n  nameWithType: WorkflowInstanceExtensionManager.WorkflowInstanceExtensionManager()\n  fullName: WorkflowInstanceExtensionManager.WorkflowInstanceExtensionManager()\n  type: Constructor\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Hosting\n  summary: Initializes a new instance of the <xref href=\"System.Activities.Hosting.WorkflowInstanceExtensionManager\"></xref> class.\n  syntax:\n    content: public WorkflowInstanceExtensionManager ();\n    parameters: []\n  overload: System.Activities.Hosting.WorkflowInstanceExtensionManager.#ctor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Activities.Hosting/WorkflowInstanceExtensionManager.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Activities.Hosting.WorkflowInstanceExtensionManager.Add(System.Object)\n  commentId: M:System.Activities.Hosting.WorkflowInstanceExtensionManager.Add(System.Object)\n  id: Add(System.Object)\n  parent: System.Activities.Hosting.WorkflowInstanceExtensionManager\n  langs:\n  - csharp\n  name: Add(Object)\n  nameWithType: WorkflowInstanceExtensionManager.Add(Object)\n  fullName: WorkflowInstanceExtensionManager.Add(Object)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Hosting\n  summary: Adds the specified extension to the collection of extensions.\n  remarks: \"When this overload is used, each workflow instance that requests this extension type will get the extension instance provided to this method. If each workflow instance should have its own instance of the extension, use the other <xref:System.Activities.Hosting.WorkflowInstanceExtensionManager.Add%2A> overload.  \\n  \\n If any of the <xref:System.Activities.Hosting.WorkflowInstanceExtensionManager.Add%2A> overloads are called after <xref:System.Activities.Hosting.WorkflowInstanceExtensionManager.MakeReadOnly%2A>, an <xref:System.InvalidOperationException> is thrown.\"\n  syntax:\n    content: public virtual void Add (object singletonExtension);\n    parameters:\n    - id: singletonExtension\n      type: System.Object\n      description: The extension to add.\n  overload: System.Activities.Hosting.WorkflowInstanceExtensionManager.Add*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Activities.Hosting/WorkflowInstanceExtensionManager.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Activities.Hosting.WorkflowInstanceExtensionManager.Add``1(System.Func{``0})\n  commentId: M:System.Activities.Hosting.WorkflowInstanceExtensionManager.Add``1(System.Func{``0})\n  id: Add``1(System.Func{``0})\n  parent: System.Activities.Hosting.WorkflowInstanceExtensionManager\n  langs:\n  - csharp\n  name: Add<T>(Func<T>)\n  nameWithType: WorkflowInstanceExtensionManager.Add<T>(Func<T>)\n  fullName: WorkflowInstanceExtensionManager.Add<T>(Func<T>)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Hosting\n  summary: Registers a <xref href=\"System.Func`1\"></xref> that is used to provide an instance of an extension when requested by a workflow instance.\n  remarks: \"When this overload is used, each workflow instance that requests this extension type will get a new instance of the extension. If a singleton extension is desired, use the other <xref:System.Activities.Hosting.WorkflowInstanceExtensionManager.Add%2A> overload.  \\n  \\n If any of the <xref:System.Activities.Hosting.WorkflowInstanceExtensionManager.Add%2A> overloads are called after <xref:System.Activities.Hosting.WorkflowInstanceExtensionManager.MakeReadOnly%2A>, an <xref:System.InvalidOperationException> is thrown.\"\n  syntax:\n    content: 'public virtual void Add<T> (Func<T> extensionCreationFunction) where T : class;'\n    parameters:\n    - id: extensionCreationFunction\n      type: System.Func{T}\n      description: The method that creates the extension.\n    typeParameters:\n    - id: T\n      description: The type of extension to add.\n  overload: System.Activities.Hosting.WorkflowInstanceExtensionManager.Add``1*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Activities.Hosting/WorkflowInstanceExtensionManager.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Activities.Hosting.WorkflowInstanceExtensionManager.MakeReadOnly\n  commentId: M:System.Activities.Hosting.WorkflowInstanceExtensionManager.MakeReadOnly\n  id: MakeReadOnly\n  parent: System.Activities.Hosting.WorkflowInstanceExtensionManager\n  langs:\n  - csharp\n  name: MakeReadOnly()\n  nameWithType: WorkflowInstanceExtensionManager.MakeReadOnly()\n  fullName: WorkflowInstanceExtensionManager.MakeReadOnly()\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Hosting\n  summary: Marks the collection of extensions as read-only.\n  remarks: This method is called when a workflow host is prepared for execution. If any of the <xref:System.Activities.Hosting.WorkflowInstanceExtensionManager.Add%2A> overloads are called after <xref:System.Activities.Hosting.WorkflowInstanceExtensionManager.MakeReadOnly%2A>, an <xref:System.InvalidOperationException> is thrown.\n  syntax:\n    content: public void MakeReadOnly ();\n    parameters: []\n  overload: System.Activities.Hosting.WorkflowInstanceExtensionManager.MakeReadOnly*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Activities.Hosting/WorkflowInstanceExtensionManager.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Activities.Hosting.WorkflowInstanceExtensionManager.#ctor\n  parent: System.Activities.Hosting.WorkflowInstanceExtensionManager\n  isExternal: false\n  name: WorkflowInstanceExtensionManager()\n  nameWithType: WorkflowInstanceExtensionManager.WorkflowInstanceExtensionManager()\n  fullName: WorkflowInstanceExtensionManager.WorkflowInstanceExtensionManager()\n- uid: System.Activities.Hosting.WorkflowInstanceExtensionManager.Add(System.Object)\n  parent: System.Activities.Hosting.WorkflowInstanceExtensionManager\n  isExternal: false\n  name: Add(Object)\n  nameWithType: WorkflowInstanceExtensionManager.Add(Object)\n  fullName: WorkflowInstanceExtensionManager.Add(Object)\n- uid: System.Activities.Hosting.WorkflowInstanceExtensionManager.Add``1(System.Func{``0})\n  parent: System.Activities.Hosting.WorkflowInstanceExtensionManager\n  isExternal: false\n  name: Add<T>(Func<T>)\n  nameWithType: WorkflowInstanceExtensionManager.Add<T>(Func<T>)\n  fullName: WorkflowInstanceExtensionManager.Add<T>(Func<T>)\n- uid: System.Func`1\n  name: Func<TResult>\n  nameWithType: Func<TResult>\n  fullName: System.Func<TResult>\n- uid: T\n  name: T\n  nameWithType: T\n  fullName: T\n- uid: System.Func{T}\n  parent: System\n  isExternal: false\n  name: Func<T>\n  nameWithType: Func<T>\n  fullName: System.Func<T>\n  spec.csharp:\n  - uid: System.Func`1\n    name: Func\n    nameWithType: Func\n    fullName: System.Func\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: T\n    name: T\n    nameWithType: T\n    fullName: T\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Activities.Hosting.WorkflowInstanceExtensionManager.MakeReadOnly\n  parent: System.Activities.Hosting.WorkflowInstanceExtensionManager\n  isExternal: false\n  name: MakeReadOnly()\n  nameWithType: WorkflowInstanceExtensionManager.MakeReadOnly()\n  fullName: WorkflowInstanceExtensionManager.MakeReadOnly()\n- uid: System.Activities.Hosting.WorkflowInstanceExtensionManager.#ctor*\n  parent: System.Activities.Hosting.WorkflowInstanceExtensionManager\n  isExternal: false\n  name: WorkflowInstanceExtensionManager\n  nameWithType: WorkflowInstanceExtensionManager.WorkflowInstanceExtensionManager\n  fullName: WorkflowInstanceExtensionManager.WorkflowInstanceExtensionManager\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Activities.Hosting/WorkflowInstanceExtensionManager.xml\n- uid: System.Activities.Hosting.WorkflowInstanceExtensionManager.Add*\n  parent: System.Activities.Hosting.WorkflowInstanceExtensionManager\n  isExternal: false\n  name: Add\n  nameWithType: WorkflowInstanceExtensionManager.Add\n  fullName: WorkflowInstanceExtensionManager.Add\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Activities.Hosting/WorkflowInstanceExtensionManager.xml\n- uid: System.Activities.Hosting.WorkflowInstanceExtensionManager.Add``1*\n  parent: System.Activities.Hosting.WorkflowInstanceExtensionManager\n  isExternal: false\n  name: Add<T>\n  nameWithType: WorkflowInstanceExtensionManager.Add<T>\n  fullName: WorkflowInstanceExtensionManager.Add<T>\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Activities.Hosting/WorkflowInstanceExtensionManager.xml\n- uid: System.Activities.Hosting.WorkflowInstanceExtensionManager.MakeReadOnly*\n  parent: System.Activities.Hosting.WorkflowInstanceExtensionManager\n  isExternal: false\n  name: MakeReadOnly\n  nameWithType: WorkflowInstanceExtensionManager.MakeReadOnly\n  fullName: WorkflowInstanceExtensionManager.MakeReadOnly\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Activities.Hosting/WorkflowInstanceExtensionManager.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n"}