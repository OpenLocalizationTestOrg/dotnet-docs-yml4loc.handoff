### YamlMime:ManagedReference
items:
- uid: System.ServiceModel.Dispatcher.ExceptionHandler
  commentId: T:System.ServiceModel.Dispatcher.ExceptionHandler
  id: ExceptionHandler
  children:
  - System.ServiceModel.Dispatcher.ExceptionHandler.#ctor
  - System.ServiceModel.Dispatcher.ExceptionHandler.AlwaysHandle
  - System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler
  - System.ServiceModel.Dispatcher.ExceptionHandler.HandleException(System.Exception)
  - System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler
  langs:
  - csharp
  name: ExceptionHandler
  nameWithType: ExceptionHandler
  fullName: System.ServiceModel.Dispatcher.ExceptionHandler
  type: Class
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  summary: Extend the <xref href="System.ServiceModel.Dispatcher.ExceptionHandler"></xref> class to create an exception handler for unhandled exceptions that occur within the Windows Communication Foundation (WCF) runtime.
  remarks: Extend the <xref:System.ServiceModel.Dispatcher.ExceptionHandler> class and override the <xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A> method to determine whether an exception should terminate the application. Then create a new instance of your custom <xref:System.ServiceModel.Dispatcher.ExceptionHandler> class and assign it to the static <xref:System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler%2A> or <xref:System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler%2A> property prior to creating [!INCLUDE[indigo2](~/includes/indigo2-md.md)] clients or services.
  example:
  - "The following code example shows an implementation of the <xref:System.ServiceModel.Dispatcher.ExceptionHandler> abstract class that overrides the <xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A> method.  \n  \n [!code-csharp[S_UEExceptionHandler#0](~/samples/snippets/csharp/VS_Snippets_CFX/s_ueexceptionhandler/cs/program.cs#0)]\n [!code-vb[S_UEExceptionHandler#0](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_ueexceptionhandler/vb/module1.vb#0)]  \n  \n The following code example shows how to enable the custom `MyExceptionHandler` for unhandled exceptions that occur within the [!INCLUDE[indigo2](~/includes/indigo2-md.md)] runtime.  \n  \n [!code-csharp[S_UEExceptionHandler#1](~/samples/snippets/csharp/VS_Snippets_CFX/s_ueexceptionhandler/cs/program.cs#1)]\n [!code-vb[S_UEExceptionHandler#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_ueexceptionhandler/vb/module1.vb#1)]"
  syntax:
    content: public abstract class ExceptionHandler
  inheritance:
  - System.Object
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel.Dispatcher/ExceptionHandler.xml
  ms.technology:
  - dotnet-standard
  author: Erikre
  ms.author: erikre
  manager: erikre
- uid: System.ServiceModel.Dispatcher.ExceptionHandler.#ctor
  commentId: M:System.ServiceModel.Dispatcher.ExceptionHandler.#ctor
  id: '#ctor'
  parent: System.ServiceModel.Dispatcher.ExceptionHandler
  langs:
  - csharp
  name: ExceptionHandler()
  nameWithType: ExceptionHandler.ExceptionHandler()
  fullName: ExceptionHandler.ExceptionHandler()
  type: Constructor
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  summary: Initializes a new instance of the <xref href="System.ServiceModel.Dispatcher.ExceptionHandler"></xref> class.
  syntax:
    content: protected ExceptionHandler ();
    parameters: []
  overload: System.ServiceModel.Dispatcher.ExceptionHandler.#ctor*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel.Dispatcher/ExceptionHandler.xml
  ms.technology:
  - dotnet-standard
  author: Erikre
  ms.author: erikre
  manager: erikre
- uid: System.ServiceModel.Dispatcher.ExceptionHandler.AlwaysHandle
  commentId: P:System.ServiceModel.Dispatcher.ExceptionHandler.AlwaysHandle
  id: AlwaysHandle
  parent: System.ServiceModel.Dispatcher.ExceptionHandler
  langs:
  - csharp
  name: AlwaysHandle
  nameWithType: ExceptionHandler.AlwaysHandle
  fullName: ExceptionHandler.AlwaysHandle
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  summary: Gets an instance of <xref href="System.ServiceModel.Dispatcher.ExceptionHandler"></xref> that handles all exceptions.
  syntax:
    content: public static System.ServiceModel.Dispatcher.ExceptionHandler AlwaysHandle { get; }
    return:
      type: System.ServiceModel.Dispatcher.ExceptionHandler
      description: An <xref href="System.ServiceModel.Dispatcher.ExceptionHandler"></xref> object that returns `true` for all exceptions.
  overload: System.ServiceModel.Dispatcher.ExceptionHandler.AlwaysHandle*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel.Dispatcher/ExceptionHandler.xml
  ms.technology:
  - dotnet-standard
  author: Erikre
  ms.author: erikre
  manager: erikre
- uid: System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler
  commentId: P:System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler
  id: AsynchronousThreadExceptionHandler
  parent: System.ServiceModel.Dispatcher.ExceptionHandler
  langs:
  - csharp
  name: AsynchronousThreadExceptionHandler
  nameWithType: ExceptionHandler.AsynchronousThreadExceptionHandler
  fullName: ExceptionHandler.AsynchronousThreadExceptionHandler
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  summary: Gets or sets the current <xref href="System.ServiceModel.Dispatcher.ExceptionHandler"></xref> implementation for the application domain.
  remarks: "By default, the <xref:System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler%2A> property is `null`, and unhandled exceptions on asynchronous [!INCLUDE[indigo2](~/includes/indigo2-md.md)] threads terminate the application.  Set this property to an <xref:System.ServiceModel.Dispatcher.ExceptionHandler> object to receive and react to these exceptions.  \n  \n If an unhandled exception occurs on an asynchronous [!INCLUDE[indigo2](~/includes/indigo2-md.md)] thread and reaches this handler, the state of the application domain may be compromised.  <xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A> should not return `true` for these exceptions."
  syntax:
    content: >-
      [get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)]

      [set: System.Security.SecuritySafeCritical]

      public static System.ServiceModel.Dispatcher.ExceptionHandler AsynchronousThreadExceptionHandler { get; set; }
    return:
      type: System.ServiceModel.Dispatcher.ExceptionHandler
      description: Assign a custom <xref href="System.ServiceModel.Dispatcher.ExceptionHandler"></xref> object that receives unhandled exceptions that occur on asynchronous [!INCLUDE[indigo1](~/includes/indigo1-md.md)] threads.
  overload: System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler*
  exceptions: []
  attributes:
  - type: 'get: System.Runtime.ConstrainedExecution.ReliabilityContract'
  - type: 'set: System.Security.SecuritySafeCritical'
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel.Dispatcher/ExceptionHandler.xml
  ms.technology:
  - dotnet-standard
  author: Erikre
  ms.author: erikre
  manager: erikre
- uid: System.ServiceModel.Dispatcher.ExceptionHandler.HandleException(System.Exception)
  commentId: M:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException(System.Exception)
  id: HandleException(System.Exception)
  parent: System.ServiceModel.Dispatcher.ExceptionHandler
  langs:
  - csharp
  name: HandleException(Exception)
  nameWithType: ExceptionHandler.HandleException(Exception)
  fullName: ExceptionHandler.HandleException(Exception)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  summary: When overridden in a derived class, returns `true` if the exception has been handled, or `false` if the exception should be rethrown and the application terminated.
  remarks: The <xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A> property returns `true` if the exception has been handled. If it returns `false` or throws a different exception, the original exception is rethrown.
  example:
  - "The following code example shows an implementation of the <xref:System.ServiceModel.Dispatcher.ExceptionHandler> abstract class that overrides the <xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A> method.  \n  \n  \n  \n The following code example shows how to enable the custom `MyExceptionHandler` for unhandled exceptions that occur within the [!INCLUDE[indigo2](~/includes/indigo2-md.md)] runtime."
  syntax:
    content: public abstract bool HandleException (Exception exception);
    parameters:
    - id: exception
      type: System.Exception
      description: The exception the occurred within the [!INCLUDE[indigo1](~/includes/indigo1-md.md)] runtime and which may terminate the application.
    return:
      type: System.Boolean
      description: '`true` if the exception has been handled; otherwise, `false`.'
  overload: System.ServiceModel.Dispatcher.ExceptionHandler.HandleException*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel.Dispatcher/ExceptionHandler.xml
  ms.technology:
  - dotnet-standard
  author: Erikre
  ms.author: erikre
  manager: erikre
- uid: System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler
  commentId: P:System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler
  id: TransportExceptionHandler
  parent: System.ServiceModel.Dispatcher.ExceptionHandler
  langs:
  - csharp
  name: TransportExceptionHandler
  nameWithType: ExceptionHandler.TransportExceptionHandler
  fullName: ExceptionHandler.TransportExceptionHandler
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  summary: Gets or sets the current transport <xref href="System.ServiceModel.Dispatcher.ExceptionHandler"></xref> implementation for the application domain.
  remarks: "By default, the <xref:System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler%2A> property is set to the value of <xref:System.ServiceModel.Dispatcher.ExceptionHandler.AlwaysHandle%2A>, causing unhandled exceptions within [!INCLUDE[indigo2](~/includes/indigo2-md.md)] transports to be ignored.  Set this property to an instance of <xref:System.ServiceModel.Dispatcher.ExceptionHandler> to receive and react to these exceptions.  \n  \n If an unhandled exception occurs within a global [!INCLUDE[indigo2](~/includes/indigo2-md.md)] transport and reaches this handler, there is a possibility that the state of the application domain is compromised. <xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A> can return `false` for these exceptions to cause the application to be terminated."
  syntax:
    content: public static System.ServiceModel.Dispatcher.ExceptionHandler TransportExceptionHandler { get; set; }
    return:
      type: System.ServiceModel.Dispatcher.ExceptionHandler
      description: A custom <xref href="System.ServiceModel.Dispatcher.ExceptionHandler"></xref> object that receives unhandled exceptions that occur within the global [!INCLUDE[indigo1](~/includes/indigo1-md.md)] transports.
  overload: System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel.Dispatcher/ExceptionHandler.xml
  ms.technology:
  - dotnet-standard
  author: Erikre
  ms.author: erikre
  manager: erikre
references:
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.ServiceModel.Dispatcher.ExceptionHandler.#ctor
  parent: System.ServiceModel.Dispatcher.ExceptionHandler
  isExternal: false
  name: ExceptionHandler()
  nameWithType: ExceptionHandler.ExceptionHandler()
  fullName: ExceptionHandler.ExceptionHandler()
- uid: System.ServiceModel.Dispatcher.ExceptionHandler.AlwaysHandle
  parent: System.ServiceModel.Dispatcher.ExceptionHandler
  isExternal: false
  name: AlwaysHandle
  nameWithType: ExceptionHandler.AlwaysHandle
  fullName: ExceptionHandler.AlwaysHandle
- uid: System.ServiceModel.Dispatcher.ExceptionHandler
  parent: System.ServiceModel.Dispatcher
  isExternal: false
  name: ExceptionHandler
  nameWithType: ExceptionHandler
  fullName: System.ServiceModel.Dispatcher.ExceptionHandler
- uid: System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler
  parent: System.ServiceModel.Dispatcher.ExceptionHandler
  isExternal: false
  name: AsynchronousThreadExceptionHandler
  nameWithType: ExceptionHandler.AsynchronousThreadExceptionHandler
  fullName: ExceptionHandler.AsynchronousThreadExceptionHandler
- uid: System.ServiceModel.Dispatcher.ExceptionHandler.HandleException(System.Exception)
  parent: System.ServiceModel.Dispatcher.ExceptionHandler
  isExternal: false
  name: HandleException(Exception)
  nameWithType: ExceptionHandler.HandleException(Exception)
  fullName: ExceptionHandler.HandleException(Exception)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Exception
  parent: System
  isExternal: false
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler
  parent: System.ServiceModel.Dispatcher.ExceptionHandler
  isExternal: false
  name: TransportExceptionHandler
  nameWithType: ExceptionHandler.TransportExceptionHandler
  fullName: ExceptionHandler.TransportExceptionHandler
- uid: System.ServiceModel.Dispatcher.ExceptionHandler.#ctor*
  parent: System.ServiceModel.Dispatcher.ExceptionHandler
  isExternal: false
  name: ExceptionHandler
  nameWithType: ExceptionHandler.ExceptionHandler
  fullName: ExceptionHandler.ExceptionHandler
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel.Dispatcher/ExceptionHandler.xml
- uid: System.ServiceModel.Dispatcher.ExceptionHandler.AlwaysHandle*
  parent: System.ServiceModel.Dispatcher.ExceptionHandler
  isExternal: false
  name: AlwaysHandle
  nameWithType: ExceptionHandler.AlwaysHandle
  fullName: ExceptionHandler.AlwaysHandle
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel.Dispatcher/ExceptionHandler.xml
- uid: System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler*
  parent: System.ServiceModel.Dispatcher.ExceptionHandler
  isExternal: false
  name: AsynchronousThreadExceptionHandler
  nameWithType: ExceptionHandler.AsynchronousThreadExceptionHandler
  fullName: ExceptionHandler.AsynchronousThreadExceptionHandler
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel.Dispatcher/ExceptionHandler.xml
- uid: System.ServiceModel.Dispatcher.ExceptionHandler.HandleException*
  parent: System.ServiceModel.Dispatcher.ExceptionHandler
  isExternal: false
  name: HandleException
  nameWithType: ExceptionHandler.HandleException
  fullName: ExceptionHandler.HandleException
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel.Dispatcher/ExceptionHandler.xml
- uid: System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler*
  parent: System.ServiceModel.Dispatcher.ExceptionHandler
  isExternal: false
  name: TransportExceptionHandler
  nameWithType: ExceptionHandler.TransportExceptionHandler
  fullName: ExceptionHandler.TransportExceptionHandler
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel.Dispatcher/ExceptionHandler.xml
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: Object.Equals(Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: Object.Equals(Object, Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: false
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: Object.GetHashCode()
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  nameWithType: Object.GetType()
  fullName: Object.GetType()
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: Object.MemberwiseClone()
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: Object.ReferenceEquals(Object, Object)
- uid: System.Object.ToString
  parent: System.Object
  isExternal: false
  name: ToString()
  nameWithType: Object.ToString()
  fullName: Object.ToString()
