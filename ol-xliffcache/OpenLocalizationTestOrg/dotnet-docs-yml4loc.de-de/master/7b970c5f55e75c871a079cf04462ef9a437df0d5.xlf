<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7b970c5f55e75c871a079cf04462ef9a437df0d5</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Xml.Linq.XAttribute.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">252056fd9738493a633280a48259d316ad96d9b7</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7cf4ff3804c8cd972c15a222f6cd065678637830</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Represents an XML attribute.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>An XML attribute is a name/value pair associated with an XML element.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph> contains a list of the attributes for that element.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>Attributes must have a qualified name that is unique to the element.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>Attributes are not derived from <ph id="ph1">&lt;xref:System.Xml.Linq.XNode&gt;</ph>; they are not nodes in the XML tree.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>Instead, they are simply name/value pairs associated with an element.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>Attributes are maintained in the XML tree in the order that they were added to the element.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>When a collection of attributes is returned by <ph id="ph1">&lt;xref:System.Xml.Linq.XElement.Attributes%2A&gt;</ph>, they are returned in the order that they were added to the element, and are not sorted.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>Technically, in XML, namespace declarations are not attributes proper.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, this distinction is not normally made by many XML programmers.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>Instead, because namespace declarations have exactly the same XML syntax as attributes, most XML programmers think of namespaces as attributes.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>To simplify the <ph id="ph1">[!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)]</ph> programming interface, namespaces are represented in the XML tree as attributes.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>Such namespace attributes impact serialization of an XML tree.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>When serializing, <ph id="ph1">[!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)]</ph> attempts to serialize with the namespace prefix specified in namespace attributes.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use the <ph id="ph1">&lt;xref:System.Xml.Linq.XAttribute.IsNamespaceDeclaration%2A&gt;</ph> to determine if an attribute is really a namespace declaration.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Linq.XAttribute&gt;</ph> class derives from <ph id="ph2">&lt;xref:System.Xml.Linq.XObject&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can add annotations to attributes, and observe events for them.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>Some <ph id="ph1">&lt;xref:System.Xml.Linq.XAttribute&gt;</ph> methods can be used from XAML.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>LINQ to XML Dynamic Properties<ept id="p1">](http://msdn.microsoft.com/library/0455f47c-4a68-4f2e-a3f8-dd1d85b99012)</ept>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Xml.Linq.XAttribute"&gt;&lt;/xref&gt;</ph> class from another <ph id="ph2">&lt;xref href="System.Xml.Linq.XAttribute"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>This constructor is primarily used internally when making a deep copy of an XML tree.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.Linq.XAttribute"&gt;&lt;/xref&gt;</ph> object to copy from.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">other</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Xml.Linq.XAttribute"&gt;&lt;/xref&gt;</ph> class from the specified name and value.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>There is an implicit conversion from string to <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typical use of this constructor is to specify a string as the first parameter instead of creating a new <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph>, as follows:</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can also use the addition operator overload with an <ph id="ph1">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph> and a string to create an <ph id="ph2">&lt;xref:System.Xml.Linq.XName&gt;</ph>, as follows:</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Working with XML Namespaces<ept id="p1">](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430)</ept>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>These same approaches will work for Visual Basic, however XML literals provide a better approach for creating XML trees.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`value`</ph> parameter can be a <ph id="ph2">&lt;xref:System.String&gt;</ph>, <ph id="ph3">`double`</ph>, <ph id="ph4">`float`</ph>, <ph id="ph5">`decimal`</ph>, <ph id="ph6">`bool`</ph>, <ph id="ph7">&lt;xref:System.DateTime&gt;</ph>, or <ph id="ph8">&lt;xref:System.TimeSpan&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the value is a <ph id="ph1">&lt;xref:System.DateTime&gt;</ph> or <ph id="ph2">&lt;xref:System.TimeSpan&gt;</ph>, the value of the attribute is formatted correctly per the W3C specifications.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Xml.Linq.XName"&gt;&lt;/xref&gt;</ph> of the attribute.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Object"&gt;&lt;/xref&gt;</ph> containing the value of the attribute.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p1">&lt;/code&gt;</ept> or <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">value</ph><ept id="p2">&lt;/code&gt;</ept> parameter is <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Gets an empty collection of attributes.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property is typically used by class implementers when writing a method that returns a collection of attributes.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the method needs to return an empty collection of attributes, it could use this property to get an empty collection of <ph id="ph1">&lt;xref:System.Xml.Linq.XAttribute&gt;</ph> objects.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Collections.Generic.IEnumerable`1"&gt;&lt;/xref&gt;</ph> of <ph id="ph2">&lt;xref href="System.Xml.Linq.XAttribute"&gt;&lt;/xref&gt;</ph> containing an empty collection.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Determines if this attribute is a namespace declaration.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>Technically, in XML, namespace declarations are not attributes proper.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, this distinction is not normally made by most XML programmers.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source>Instead, because namespace declarations have exactly the same syntax as attributes, most XML programmers think of namespaces as attributes.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source>To simplify the <ph id="ph1">[!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)]</ph> programming interface, namespaces are represented in the XML tree as attributes.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use this property to determine if a particular <ph id="ph1">[!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)]</ph> attribute is really a namespace declaration.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if this attribute is a namespace declaration; otherwise <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Gets the expanded name of this attribute.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>The expanded name returned by this property is in the form of <ph id="ph1">`{namespace}localname`</ph>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.Linq.XName"&gt;&lt;/xref&gt;</ph> containing the name of this attribute.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Gets the next attribute of the parent element.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT">
          <source>Attributes are maintained in the XML tree in the order that they were added to the element.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT">
          <source>When a collection of attributes is returned by <ph id="ph1">&lt;xref:System.Xml.Linq.XElement.Attributes%2A&gt;</ph>, they are returned in the order that they were added, and are not sorted.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you request the next attribute through this property, this property returns the attribute that was added after this attribute.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT">
          <source>If this attribute does not have a parent, or if there is no next attribute, then this property returns <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.Linq.XAttribute"&gt;&lt;/xref&gt;</ph> containing the next attribute of the parent element.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Gets the node type for this node.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because all classes that derive from <ph id="ph1">&lt;xref:System.Xml.Linq.XObject&gt;</ph> contain a <ph id="ph2">&lt;xref:System.Xml.Linq.XObject.NodeType%2A&gt;</ph> property, you can write code that operates on collections of concrete subclass of <ph id="ph3">&lt;xref:System.Xml.Linq.XObject&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT">
          <source>Your code can then test for the node type of each node in the collection.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The node type.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>For <ph id="ph1">&lt;xref href="System.Xml.Linq.XAttribute"&gt;&lt;/xref&gt;</ph> objects, this value is <ph id="ph2">&lt;xref href="System.Xml.XmlNodeType.Attribute"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Gets the previous attribute of the parent element.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT">
          <source>Attributes are maintained in the XML tree in the order that they were added to the element.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT">
          <source>When a collection of attributes is returned by <ph id="ph1">&lt;xref:System.Xml.Linq.XElement.Attributes%2A&gt;</ph>, they are returned in the order that they were added, and are not sorted.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you request the previous attribute through this property, this property returns the attribute that was added before this attribute.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT">
          <source>If this attribute does not have a parent, or if this attribute is the first attribute, then this property returns <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph> class stores its attributes as a singly-linked list of <ph id="ph2">&lt;xref:System.Xml.Linq.XAttribute&gt;</ph> objects.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT">
          <source>This means that the <ph id="ph1">&lt;xref:System.Xml.Linq.XAttribute.PreviousAttribute%2A&gt;</ph> property must traverse the list of attributes that belong to the element.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, using this property might affect your performance.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.Linq.XAttribute"&gt;&lt;/xref&gt;</ph> containing the previous attribute of the parent element.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Removes this attribute from its parent element.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use this method to modify an XML tree.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method will cause events to occur.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT">
          <source>There are many scenarios in which you might want to remove a set of attributes.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)]</ph> programming, you should not manipulate or modify a set of nodes while you are querying for nodes in that set.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT">
          <source>In practical terms, this means that you should not iterate over a set of attributes and remove them.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT">
          <source>Instead, you should materialize them into a <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> using the <ph id="ph2">&lt;xref:System.Linq.Enumerable.ToList%2A&gt;</ph> extension method.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT">
          <source>Then you can iterate over the list, removing the attributes.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Mixed Declarative Code/Imperative Code Bugs (LINQ to XML)<ept id="p1">](http://msdn.microsoft.com/library/d9a5c404-2b0e-46cd-a358-0e78773b3094)</ept>.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT">
          <source>Alternatively, if you want to remove a set of attributes, it is recommended that you use the <ph id="ph1">&lt;xref:System.Xml.Linq.Extensions.Remove%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method copies the attributes to a list, then iterates over the list, removing the attributes.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The parent element is <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Sets the value of this attribute.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value is converted to its string representation and assigned to the <ph id="ph1">&lt;xref:System.Xml.Linq.XAttribute.Value%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is invalid to pass an instance of a class that derives from <ph id="ph1">&lt;xref:System.Xml.Linq.XObject&gt;</ph>, such as <ph id="ph2">&lt;xref:System.Xml.Linq.XElement&gt;</ph> or <ph id="ph3">&lt;xref:System.Xml.Linq.XAttribute&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method will raise the <ph id="ph1">&lt;xref:System.Xml.Linq.XObject.Changed&gt;</ph> and the <ph id="ph2">&lt;xref:System.Xml.Linq.XObject.Changing&gt;</ph> events.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The value to assign to this attribute.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">value</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">value</ph><ept id="p1">&lt;/code&gt;</ept> is an <ph id="ph2">&lt;xref href="System.Xml.Linq.XObject"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Converts the current <ph id="ph1">&lt;xref href="System.Xml.Linq.XAttribute"&gt;&lt;/xref&gt;</ph> object to a string representation.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method returns a string in the form of <ph id="ph1">`AttributeName="content"`</ph>.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT">
          <source>When this method is called and <ph id="ph1">&lt;xref:System.Xml.Linq.XAttribute&gt;</ph> contains control character, an exception is thrown with a message like: hexadecimal value 0x0B, is an invalid character.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.String"&gt;&lt;/xref&gt;</ph> containing the XML text representation of an attribute and its value.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Gets or sets the value of this attribute.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use this property to get or set the value of an attribute.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT">
          <source>Setting this property will raise the <ph id="ph1">&lt;xref:System.Xml.Linq.XObject.Changed&gt;</ph> and the <ph id="ph2">&lt;xref:System.Xml.Linq.XObject.Changing&gt;</ph> events.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you are getting the value and the attribute might not exist, it is more convenient to use the explicit conversion operators, and assign the attribute to a nullable type such as <ph id="ph1">`string`</ph> or <ph id="ph2">&lt;xref:System.Nullable%601&gt;</ph> of <ph id="ph3">&lt;xref:System.Int32&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the attribute does not exist, then the nullable type is set to <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT">
          <source>Before using this property, you must make sure that the <ph id="ph1">&lt;xref:System.Xml.Linq.XElement.Attribute%2A&gt;</ph> method does not return <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.String"&gt;&lt;/xref&gt;</ph> containing the value of this attribute.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>When setting, the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">value</ph><ept id="p1">&lt;/code&gt;</ept> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>