{"nodes":[{"content":"Base class for security keys.","nodes":[{"pos":[0,29],"content":"Base class for security keys.","nodes":[{"content":"Base class for security keys.","pos":[0,29]}]}],"pos":[904,934],"yaml":true},{"content":"Security keys are used for cryptographic operations, such as generating digital signatures and encrypting XML data.","nodes":[{"pos":[0,115],"content":"Security keys are used for cryptographic operations, such as generating digital signatures and encrypting XML data.","nodes":[{"content":"Security keys are used for cryptographic operations, such as generating digital signatures and encrypting XML data.","pos":[0,115]}]}],"pos":[945,1061],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.IdentityModel.Tokens.SecurityKey\"></xref> class.","nodes":[{"pos":[0,101],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.IdentityModel.Tokens.SecurityKey\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.IdentityModel.Tokens.SecurityKey\"></xref> class."}],"pos":[2608,2710],"yaml":true},{"content":"When overridden in a derived class, decrypts the specified encrypted key.","nodes":[{"pos":[0,73],"content":"When overridden in a derived class, decrypts the specified encrypted key.","nodes":[{"content":"When overridden in a derived class, decrypts the specified encrypted key.","pos":[0,73]}]}],"pos":[3958,4032],"yaml":true},{"content":"Use the static fields of the <xref:System.IdentityModel.Tokens.SecurityAlgorithms> class to specify the algorithm.","nodes":[{"pos":[0,114],"content":"Use the static fields of the <xref:System.IdentityModel.Tokens.SecurityAlgorithms> class to specify the algorithm.","nodes":[{"content":"Use the static fields of the <ph id=\"ph1\">&lt;xref:System.IdentityModel.Tokens.SecurityAlgorithms&gt;</ph> class to specify the algorithm.","pos":[0,114],"source":"Use the static fields of the <xref:System.IdentityModel.Tokens.SecurityAlgorithms> class to specify the algorithm."}]}],"pos":[4043,4158],"yaml":true,"extradata":"MT"},{"content":"The cryptographic algorithm that was used to encrypt the key.","nodes":[{"pos":[0,61],"content":"The cryptographic algorithm that was used to encrypt the key.","nodes":[{"content":"The cryptographic algorithm that was used to encrypt the key.","pos":[0,61]}]}],"pos":[4332,4394],"yaml":true},{"content":"An array of <xref href=\"System.Byte\"></xref> that contains the encrypted key.","nodes":[{"pos":[0,77],"content":"An array of <ph id=\"ph1\">&lt;xref href=\"System.Byte\"&gt;&lt;/xref&gt;</ph> that contains the encrypted key.","source":"An array of <xref href=\"System.Byte\"></xref> that contains the encrypted key."}],"pos":[4457,4535],"yaml":true},{"content":"An array of <xref href=\"System.Byte\"></xref> that contains the decrypted key.","nodes":[{"pos":[0,77],"content":"An array of <ph id=\"ph1\">&lt;xref href=\"System.Byte\"&gt;&lt;/xref&gt;</ph> that contains the decrypted key.","source":"An array of <xref href=\"System.Byte\"></xref> that contains the decrypted key."}],"pos":[4592,4670],"yaml":true},{"content":"When overridden in a derived class, encrypts the specified key.","nodes":[{"pos":[0,63],"content":"When overridden in a derived class, encrypts the specified key.","nodes":[{"content":"When overridden in a derived class, encrypts the specified key.","pos":[0,63]}]}],"pos":[5855,5919],"yaml":true},{"content":"Use the static fields of the <xref:System.IdentityModel.Tokens.SecurityAlgorithms> class to specify the algorithm.","nodes":[{"pos":[0,114],"content":"Use the static fields of the <xref:System.IdentityModel.Tokens.SecurityAlgorithms> class to specify the algorithm.","nodes":[{"content":"Use the static fields of the <ph id=\"ph1\">&lt;xref:System.IdentityModel.Tokens.SecurityAlgorithms&gt;</ph> class to specify the algorithm.","pos":[0,114],"source":"Use the static fields of the <xref:System.IdentityModel.Tokens.SecurityAlgorithms> class to specify the algorithm."}]}],"pos":[5930,6045],"yaml":true,"extradata":"MT"},{"content":"The cryptographic algorithm to encrypt the key with.","nodes":[{"pos":[0,52],"content":"The cryptographic algorithm to encrypt the key with.","nodes":[{"content":"The cryptographic algorithm to encrypt the key with.","pos":[0,52]}]}],"pos":[6219,6272],"yaml":true},{"content":"An array of <xref href=\"System.Byte\"></xref> that contains the key.","nodes":[{"pos":[0,67],"content":"An array of <ph id=\"ph1\">&lt;xref href=\"System.Byte\"&gt;&lt;/xref&gt;</ph> that contains the key.","source":"An array of <xref href=\"System.Byte\"></xref> that contains the key."}],"pos":[6335,6403],"yaml":true},{"content":"An array of <xref href=\"System.Byte\"></xref> that contains the encrypted key.","nodes":[{"pos":[0,77],"content":"An array of <ph id=\"ph1\">&lt;xref href=\"System.Byte\"&gt;&lt;/xref&gt;</ph> that contains the encrypted key.","source":"An array of <xref href=\"System.Byte\"></xref> that contains the encrypted key."}],"pos":[6460,6538],"yaml":true},{"content":"When overridden in a derived class, gets a value that indicates whether the specified algorithm uses asymmetric keys.","nodes":[{"pos":[0,117],"content":"When overridden in a derived class, gets a value that indicates whether the specified algorithm uses asymmetric keys.","nodes":[{"content":"When overridden in a derived class, gets a value that indicates whether the specified algorithm uses asymmetric keys.","pos":[0,117]}]}],"pos":[7723,7841],"yaml":true},{"content":"Use the static fields of the <xref:System.IdentityModel.Tokens.SecurityAlgorithms> class to specify the algorithm.","nodes":[{"pos":[0,114],"content":"Use the static fields of the <xref:System.IdentityModel.Tokens.SecurityAlgorithms> class to specify the algorithm.","nodes":[{"content":"Use the static fields of the <ph id=\"ph1\">&lt;xref:System.IdentityModel.Tokens.SecurityAlgorithms&gt;</ph> class to specify the algorithm.","pos":[0,114],"source":"Use the static fields of the <xref:System.IdentityModel.Tokens.SecurityAlgorithms> class to specify the algorithm."}]}],"pos":[7852,7967],"yaml":true,"extradata":"MT"},{"content":"The cryptographic algorithm.","nodes":[{"pos":[0,28],"content":"The cryptographic algorithm.","nodes":[{"content":"The cryptographic algorithm.","pos":[0,28]}]}],"pos":[8134,8163],"yaml":true},{"content":"`true` when the specified algorithm uses asymmetric keys; otherwise, `false`.","nodes":[{"pos":[0,77],"content":"<ph id=\"ph1\">`true`</ph> when the specified algorithm uses asymmetric keys; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` when the specified algorithm uses asymmetric keys; otherwise, `false`."}],"pos":[8221,8301],"yaml":true},{"content":"When overridden in a derived class, gets a value that indicates whether the specified algorithm is supported by this class.","nodes":[{"pos":[0,123],"content":"When overridden in a derived class, gets a value that indicates whether the specified algorithm is supported by this class.","nodes":[{"content":"When overridden in a derived class, gets a value that indicates whether the specified algorithm is supported by this class.","pos":[0,123]}]}],"pos":[9491,9615],"yaml":true},{"content":"The cryptographic algorithm.","nodes":[{"pos":[0,28],"content":"The cryptographic algorithm.","nodes":[{"content":"The cryptographic algorithm.","pos":[0,28]}]}],"pos":[9781,9810],"yaml":true},{"content":"`true` when the specified algorithm is supported by this class; otherwise, `false`.","nodes":[{"pos":[0,83],"content":"<ph id=\"ph1\">`true`</ph> when the specified algorithm is supported by this class; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` when the specified algorithm is supported by this class; otherwise, `false`."}],"pos":[9868,9954],"yaml":true},{"content":"When overridden in a derived class, gets a value that indicates whether the specified algorithm uses symmetric keys.","nodes":[{"pos":[0,116],"content":"When overridden in a derived class, gets a value that indicates whether the specified algorithm uses symmetric keys.","nodes":[{"content":"When overridden in a derived class, gets a value that indicates whether the specified algorithm uses symmetric keys.","pos":[0,116]}]}],"pos":[11143,11260],"yaml":true},{"content":"Use the static fields of the <xref:System.IdentityModel.Tokens.SecurityAlgorithms> class to specify the algorithm.","nodes":[{"pos":[0,114],"content":"Use the static fields of the <xref:System.IdentityModel.Tokens.SecurityAlgorithms> class to specify the algorithm.","nodes":[{"content":"Use the static fields of the <ph id=\"ph1\">&lt;xref:System.IdentityModel.Tokens.SecurityAlgorithms&gt;</ph> class to specify the algorithm.","pos":[0,114],"source":"Use the static fields of the <xref:System.IdentityModel.Tokens.SecurityAlgorithms> class to specify the algorithm."}]}],"pos":[11271,11386],"yaml":true,"extradata":"MT"},{"content":"The cryptographic algorithm.","nodes":[{"pos":[0,28],"content":"The cryptographic algorithm.","nodes":[{"content":"The cryptographic algorithm.","pos":[0,28]}]}],"pos":[11552,11581],"yaml":true},{"content":"`true` when the specified algorithm uses symmetric keys; otherwise, `false`.","nodes":[{"pos":[0,76],"content":"<ph id=\"ph1\">`true`</ph> when the specified algorithm uses symmetric keys; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` when the specified algorithm uses symmetric keys; otherwise, `false`."}],"pos":[11639,11718],"yaml":true},{"content":"When overridden in a derived class, gets the size, in bits, of the key.","nodes":[{"pos":[0,71],"content":"When overridden in a derived class, gets the size, in bits, of the key.","nodes":[{"content":"When overridden in a derived class, gets the size, in bits, of the key.","pos":[0,71]}]}],"pos":[12762,12834],"yaml":true},{"content":"The size, in bits, of the key.","nodes":[{"pos":[0,30],"content":"The size, in bits, of the key.","nodes":[{"content":"The size, in bits, of the key.","pos":[0,30]}]}],"pos":[12950,12981],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.IdentityModel.Tokens.SecurityKey\n  commentId: T:System.IdentityModel.Tokens.SecurityKey\n  id: SecurityKey\n  children:\n  - System.IdentityModel.Tokens.SecurityKey.#ctor\n  - System.IdentityModel.Tokens.SecurityKey.DecryptKey(System.String,System.Byte[])\n  - System.IdentityModel.Tokens.SecurityKey.EncryptKey(System.String,System.Byte[])\n  - System.IdentityModel.Tokens.SecurityKey.IsAsymmetricAlgorithm(System.String)\n  - System.IdentityModel.Tokens.SecurityKey.IsSupportedAlgorithm(System.String)\n  - System.IdentityModel.Tokens.SecurityKey.IsSymmetricAlgorithm(System.String)\n  - System.IdentityModel.Tokens.SecurityKey.KeySize\n  langs:\n  - csharp\n  name: SecurityKey\n  nameWithType: SecurityKey\n  fullName: System.IdentityModel.Tokens.SecurityKey\n  type: Class\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: Base class for security keys.\n  remarks: Security keys are used for cryptographic operations, such as generating digital signatures and encrypting XML data.\n  syntax:\n    content: public abstract class SecurityKey\n  inheritance:\n  - System.Object\n  derivedClasses:\n  - System.IdentityModel.Tokens.AsymmetricSecurityKey\n  - System.IdentityModel.Tokens.SecurityKeyElement\n  - System.IdentityModel.Tokens.SymmetricSecurityKey\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/SecurityKey.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: v-jibran\n  manager: markgal\n- uid: System.IdentityModel.Tokens.SecurityKey.#ctor\n  commentId: M:System.IdentityModel.Tokens.SecurityKey.#ctor\n  id: '#ctor'\n  parent: System.IdentityModel.Tokens.SecurityKey\n  langs:\n  - csharp\n  name: SecurityKey()\n  nameWithType: SecurityKey.SecurityKey()\n  fullName: SecurityKey.SecurityKey()\n  type: Constructor\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: Initializes a new instance of the <xref href=\"System.IdentityModel.Tokens.SecurityKey\"></xref> class.\n  syntax:\n    content: protected SecurityKey ();\n    parameters: []\n  overload: System.IdentityModel.Tokens.SecurityKey.#ctor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/SecurityKey.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: v-jibran\n  manager: markgal\n- uid: System.IdentityModel.Tokens.SecurityKey.DecryptKey(System.String,System.Byte[])\n  commentId: M:System.IdentityModel.Tokens.SecurityKey.DecryptKey(System.String,System.Byte[])\n  id: DecryptKey(System.String,System.Byte[])\n  parent: System.IdentityModel.Tokens.SecurityKey\n  langs:\n  - csharp\n  name: DecryptKey(String, Byte[])\n  nameWithType: SecurityKey.DecryptKey(String, Byte[])\n  fullName: SecurityKey.DecryptKey(String, Byte[])\n  type: Method\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: When overridden in a derived class, decrypts the specified encrypted key.\n  remarks: Use the static fields of the <xref:System.IdentityModel.Tokens.SecurityAlgorithms> class to specify the algorithm.\n  syntax:\n    content: public abstract byte[] DecryptKey (string algorithm, byte[] keyData);\n    parameters:\n    - id: algorithm\n      type: System.String\n      description: The cryptographic algorithm that was used to encrypt the key.\n    - id: keyData\n      type: System.Byte[]\n      description: An array of <xref href=\"System.Byte\"></xref> that contains the encrypted key.\n    return:\n      type: System.Byte[]\n      description: An array of <xref href=\"System.Byte\"></xref> that contains the decrypted key.\n  overload: System.IdentityModel.Tokens.SecurityKey.DecryptKey*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/SecurityKey.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: v-jibran\n  manager: markgal\n- uid: System.IdentityModel.Tokens.SecurityKey.EncryptKey(System.String,System.Byte[])\n  commentId: M:System.IdentityModel.Tokens.SecurityKey.EncryptKey(System.String,System.Byte[])\n  id: EncryptKey(System.String,System.Byte[])\n  parent: System.IdentityModel.Tokens.SecurityKey\n  langs:\n  - csharp\n  name: EncryptKey(String, Byte[])\n  nameWithType: SecurityKey.EncryptKey(String, Byte[])\n  fullName: SecurityKey.EncryptKey(String, Byte[])\n  type: Method\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: When overridden in a derived class, encrypts the specified key.\n  remarks: Use the static fields of the <xref:System.IdentityModel.Tokens.SecurityAlgorithms> class to specify the algorithm.\n  syntax:\n    content: public abstract byte[] EncryptKey (string algorithm, byte[] keyData);\n    parameters:\n    - id: algorithm\n      type: System.String\n      description: The cryptographic algorithm to encrypt the key with.\n    - id: keyData\n      type: System.Byte[]\n      description: An array of <xref href=\"System.Byte\"></xref> that contains the key.\n    return:\n      type: System.Byte[]\n      description: An array of <xref href=\"System.Byte\"></xref> that contains the encrypted key.\n  overload: System.IdentityModel.Tokens.SecurityKey.EncryptKey*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/SecurityKey.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: v-jibran\n  manager: markgal\n- uid: System.IdentityModel.Tokens.SecurityKey.IsAsymmetricAlgorithm(System.String)\n  commentId: M:System.IdentityModel.Tokens.SecurityKey.IsAsymmetricAlgorithm(System.String)\n  id: IsAsymmetricAlgorithm(System.String)\n  parent: System.IdentityModel.Tokens.SecurityKey\n  langs:\n  - csharp\n  name: IsAsymmetricAlgorithm(String)\n  nameWithType: SecurityKey.IsAsymmetricAlgorithm(String)\n  fullName: SecurityKey.IsAsymmetricAlgorithm(String)\n  type: Method\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: When overridden in a derived class, gets a value that indicates whether the specified algorithm uses asymmetric keys.\n  remarks: Use the static fields of the <xref:System.IdentityModel.Tokens.SecurityAlgorithms> class to specify the algorithm.\n  syntax:\n    content: public abstract bool IsAsymmetricAlgorithm (string algorithm);\n    parameters:\n    - id: algorithm\n      type: System.String\n      description: The cryptographic algorithm.\n    return:\n      type: System.Boolean\n      description: '`true` when the specified algorithm uses asymmetric keys; otherwise, `false`.'\n  overload: System.IdentityModel.Tokens.SecurityKey.IsAsymmetricAlgorithm*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/SecurityKey.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: v-jibran\n  manager: markgal\n- uid: System.IdentityModel.Tokens.SecurityKey.IsSupportedAlgorithm(System.String)\n  commentId: M:System.IdentityModel.Tokens.SecurityKey.IsSupportedAlgorithm(System.String)\n  id: IsSupportedAlgorithm(System.String)\n  parent: System.IdentityModel.Tokens.SecurityKey\n  langs:\n  - csharp\n  name: IsSupportedAlgorithm(String)\n  nameWithType: SecurityKey.IsSupportedAlgorithm(String)\n  fullName: SecurityKey.IsSupportedAlgorithm(String)\n  type: Method\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: When overridden in a derived class, gets a value that indicates whether the specified algorithm is supported by this class.\n  syntax:\n    content: public abstract bool IsSupportedAlgorithm (string algorithm);\n    parameters:\n    - id: algorithm\n      type: System.String\n      description: The cryptographic algorithm.\n    return:\n      type: System.Boolean\n      description: '`true` when the specified algorithm is supported by this class; otherwise, `false`.'\n  overload: System.IdentityModel.Tokens.SecurityKey.IsSupportedAlgorithm*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/SecurityKey.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: v-jibran\n  manager: markgal\n- uid: System.IdentityModel.Tokens.SecurityKey.IsSymmetricAlgorithm(System.String)\n  commentId: M:System.IdentityModel.Tokens.SecurityKey.IsSymmetricAlgorithm(System.String)\n  id: IsSymmetricAlgorithm(System.String)\n  parent: System.IdentityModel.Tokens.SecurityKey\n  langs:\n  - csharp\n  name: IsSymmetricAlgorithm(String)\n  nameWithType: SecurityKey.IsSymmetricAlgorithm(String)\n  fullName: SecurityKey.IsSymmetricAlgorithm(String)\n  type: Method\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: When overridden in a derived class, gets a value that indicates whether the specified algorithm uses symmetric keys.\n  remarks: Use the static fields of the <xref:System.IdentityModel.Tokens.SecurityAlgorithms> class to specify the algorithm.\n  syntax:\n    content: public abstract bool IsSymmetricAlgorithm (string algorithm);\n    parameters:\n    - id: algorithm\n      type: System.String\n      description: The cryptographic algorithm.\n    return:\n      type: System.Boolean\n      description: '`true` when the specified algorithm uses symmetric keys; otherwise, `false`.'\n  overload: System.IdentityModel.Tokens.SecurityKey.IsSymmetricAlgorithm*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/SecurityKey.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: v-jibran\n  manager: markgal\n- uid: System.IdentityModel.Tokens.SecurityKey.KeySize\n  commentId: P:System.IdentityModel.Tokens.SecurityKey.KeySize\n  id: KeySize\n  parent: System.IdentityModel.Tokens.SecurityKey\n  langs:\n  - csharp\n  name: KeySize\n  nameWithType: SecurityKey.KeySize\n  fullName: SecurityKey.KeySize\n  type: Property\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: When overridden in a derived class, gets the size, in bits, of the key.\n  syntax:\n    content: public abstract int KeySize { get; }\n    return:\n      type: System.Int32\n      description: The size, in bits, of the key.\n  overload: System.IdentityModel.Tokens.SecurityKey.KeySize*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/SecurityKey.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: v-jibran\n  manager: markgal\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.IdentityModel.Tokens.SecurityKey.#ctor\n  parent: System.IdentityModel.Tokens.SecurityKey\n  isExternal: false\n  name: SecurityKey()\n  nameWithType: SecurityKey.SecurityKey()\n  fullName: SecurityKey.SecurityKey()\n- uid: System.IdentityModel.Tokens.SecurityKey.DecryptKey(System.String,System.Byte[])\n  parent: System.IdentityModel.Tokens.SecurityKey\n  isExternal: false\n  name: DecryptKey(String, Byte[])\n  nameWithType: SecurityKey.DecryptKey(String, Byte[])\n  fullName: SecurityKey.DecryptKey(String, Byte[])\n- uid: System.Byte\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte\n- uid: System.Byte[]\n  parent: System\n  isExternal: false\n  name: Byte[]\n  nameWithType: Byte[]\n  fullName: System.Byte[]\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: System.Byte\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.IdentityModel.Tokens.SecurityKey.EncryptKey(System.String,System.Byte[])\n  parent: System.IdentityModel.Tokens.SecurityKey\n  isExternal: false\n  name: EncryptKey(String, Byte[])\n  nameWithType: SecurityKey.EncryptKey(String, Byte[])\n  fullName: SecurityKey.EncryptKey(String, Byte[])\n- uid: System.IdentityModel.Tokens.SecurityKey.IsAsymmetricAlgorithm(System.String)\n  parent: System.IdentityModel.Tokens.SecurityKey\n  isExternal: false\n  name: IsAsymmetricAlgorithm(String)\n  nameWithType: SecurityKey.IsAsymmetricAlgorithm(String)\n  fullName: SecurityKey.IsAsymmetricAlgorithm(String)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.IdentityModel.Tokens.SecurityKey.IsSupportedAlgorithm(System.String)\n  parent: System.IdentityModel.Tokens.SecurityKey\n  isExternal: false\n  name: IsSupportedAlgorithm(String)\n  nameWithType: SecurityKey.IsSupportedAlgorithm(String)\n  fullName: SecurityKey.IsSupportedAlgorithm(String)\n- uid: System.IdentityModel.Tokens.SecurityKey.IsSymmetricAlgorithm(System.String)\n  parent: System.IdentityModel.Tokens.SecurityKey\n  isExternal: false\n  name: IsSymmetricAlgorithm(String)\n  nameWithType: SecurityKey.IsSymmetricAlgorithm(String)\n  fullName: SecurityKey.IsSymmetricAlgorithm(String)\n- uid: System.IdentityModel.Tokens.SecurityKey.KeySize\n  parent: System.IdentityModel.Tokens.SecurityKey\n  isExternal: false\n  name: KeySize\n  nameWithType: SecurityKey.KeySize\n  fullName: SecurityKey.KeySize\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.IdentityModel.Tokens.SecurityKey.#ctor*\n  parent: System.IdentityModel.Tokens.SecurityKey\n  isExternal: false\n  name: SecurityKey\n  nameWithType: SecurityKey.SecurityKey\n  fullName: SecurityKey.SecurityKey\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/SecurityKey.xml\n- uid: System.IdentityModel.Tokens.SecurityKey.DecryptKey*\n  parent: System.IdentityModel.Tokens.SecurityKey\n  isExternal: false\n  name: DecryptKey\n  nameWithType: SecurityKey.DecryptKey\n  fullName: SecurityKey.DecryptKey\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/SecurityKey.xml\n- uid: System.IdentityModel.Tokens.SecurityKey.EncryptKey*\n  parent: System.IdentityModel.Tokens.SecurityKey\n  isExternal: false\n  name: EncryptKey\n  nameWithType: SecurityKey.EncryptKey\n  fullName: SecurityKey.EncryptKey\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/SecurityKey.xml\n- uid: System.IdentityModel.Tokens.SecurityKey.IsAsymmetricAlgorithm*\n  parent: System.IdentityModel.Tokens.SecurityKey\n  isExternal: false\n  name: IsAsymmetricAlgorithm\n  nameWithType: SecurityKey.IsAsymmetricAlgorithm\n  fullName: SecurityKey.IsAsymmetricAlgorithm\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/SecurityKey.xml\n- uid: System.IdentityModel.Tokens.SecurityKey.IsSupportedAlgorithm*\n  parent: System.IdentityModel.Tokens.SecurityKey\n  isExternal: false\n  name: IsSupportedAlgorithm\n  nameWithType: SecurityKey.IsSupportedAlgorithm\n  fullName: SecurityKey.IsSupportedAlgorithm\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/SecurityKey.xml\n- uid: System.IdentityModel.Tokens.SecurityKey.IsSymmetricAlgorithm*\n  parent: System.IdentityModel.Tokens.SecurityKey\n  isExternal: false\n  name: IsSymmetricAlgorithm\n  nameWithType: SecurityKey.IsSymmetricAlgorithm\n  fullName: SecurityKey.IsSymmetricAlgorithm\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/SecurityKey.xml\n- uid: System.IdentityModel.Tokens.SecurityKey.KeySize*\n  parent: System.IdentityModel.Tokens.SecurityKey\n  isExternal: false\n  name: KeySize\n  nameWithType: SecurityKey.KeySize\n  fullName: SecurityKey.KeySize\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/SecurityKey.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n"}