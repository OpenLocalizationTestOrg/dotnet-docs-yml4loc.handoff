### YamlMime:ManagedReference
items:
- uid: System.Drawing.Graphics
  commentId: T:System.Drawing.Graphics
  id: Graphics
  children:
  - System.Drawing.Graphics.AddMetafileComment(System.Byte[])
  - System.Drawing.Graphics.BeginContainer
  - System.Drawing.Graphics.BeginContainer(System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.GraphicsUnit)
  - System.Drawing.Graphics.BeginContainer(System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit)
  - System.Drawing.Graphics.Clear(System.Drawing.Color)
  - System.Drawing.Graphics.Clip
  - System.Drawing.Graphics.ClipBounds
  - System.Drawing.Graphics.CompositingMode
  - System.Drawing.Graphics.CompositingQuality
  - System.Drawing.Graphics.CopyFromScreen(System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Size)
  - System.Drawing.Graphics.CopyFromScreen(System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Size,System.Drawing.CopyPixelOperation)
  - System.Drawing.Graphics.CopyFromScreen(System.Drawing.Point,System.Drawing.Point,System.Drawing.Size)
  - System.Drawing.Graphics.CopyFromScreen(System.Drawing.Point,System.Drawing.Point,System.Drawing.Size,System.Drawing.CopyPixelOperation)
  - System.Drawing.Graphics.Dispose
  - System.Drawing.Graphics.DpiX
  - System.Drawing.Graphics.DpiY
  - System.Drawing.Graphics.DrawArc(System.Drawing.Pen,System.Drawing.Rectangle,System.Single,System.Single)
  - System.Drawing.Graphics.DrawArc(System.Drawing.Pen,System.Drawing.RectangleF,System.Single,System.Single)
  - System.Drawing.Graphics.DrawArc(System.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  - System.Drawing.Graphics.DrawArc(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)
  - System.Drawing.Graphics.DrawBezier(System.Drawing.Pen,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point)
  - System.Drawing.Graphics.DrawBezier(System.Drawing.Pen,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)
  - System.Drawing.Graphics.DrawBezier(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)
  - System.Drawing.Graphics.DrawBeziers(System.Drawing.Pen,System.Drawing.PointF[])
  - System.Drawing.Graphics.DrawBeziers(System.Drawing.Pen,System.Drawing.Point[])
  - System.Drawing.Graphics.DrawClosedCurve(System.Drawing.Pen,System.Drawing.Point[],System.Single,System.Drawing.Drawing2D.FillMode)
  - System.Drawing.Graphics.DrawClosedCurve(System.Drawing.Pen,System.Drawing.PointF[],System.Single,System.Drawing.Drawing2D.FillMode)
  - System.Drawing.Graphics.DrawClosedCurve(System.Drawing.Pen,System.Drawing.Point[])
  - System.Drawing.Graphics.DrawClosedCurve(System.Drawing.Pen,System.Drawing.PointF[])
  - System.Drawing.Graphics.DrawCurve(System.Drawing.Pen,System.Drawing.Point[])
  - System.Drawing.Graphics.DrawCurve(System.Drawing.Pen,System.Drawing.PointF[])
  - System.Drawing.Graphics.DrawCurve(System.Drawing.Pen,System.Drawing.Point[],System.Single)
  - System.Drawing.Graphics.DrawCurve(System.Drawing.Pen,System.Drawing.PointF[],System.Single)
  - System.Drawing.Graphics.DrawCurve(System.Drawing.Pen,System.Drawing.PointF[],System.Int32,System.Int32)
  - System.Drawing.Graphics.DrawCurve(System.Drawing.Pen,System.Drawing.Point[],System.Int32,System.Int32,System.Single)
  - System.Drawing.Graphics.DrawCurve(System.Drawing.Pen,System.Drawing.PointF[],System.Int32,System.Int32,System.Single)
  - System.Drawing.Graphics.DrawEllipse(System.Drawing.Pen,System.Drawing.Rectangle)
  - System.Drawing.Graphics.DrawEllipse(System.Drawing.Pen,System.Drawing.RectangleF)
  - System.Drawing.Graphics.DrawEllipse(System.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32)
  - System.Drawing.Graphics.DrawEllipse(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single)
  - System.Drawing.Graphics.DrawIcon(System.Drawing.Icon,System.Int32,System.Int32)
  - System.Drawing.Graphics.DrawIcon(System.Drawing.Icon,System.Drawing.Rectangle)
  - System.Drawing.Graphics.DrawIconUnstretched(System.Drawing.Icon,System.Drawing.Rectangle)
  - System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Single,System.Single,System.Drawing.RectangleF,System.Drawing.GraphicsUnit)
  - System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Single,System.Single,System.Single,System.Single,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.IntPtr)
  - System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.IntPtr)
  - System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Single,System.Single,System.Single,System.Single,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)
  - System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)
  - System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Single,System.Single,System.Single,System.Single,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes)
  - System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes)
  - System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Single,System.Single,System.Single,System.Single,System.Drawing.GraphicsUnit)
  - System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.GraphicsUnit)
  - System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.Int32)
  - System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.Int32)
  - System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)
  - System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)
  - System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Int32,System.Int32,System.Int32,System.Int32)
  - System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Single,System.Single,System.Single,System.Single)
  - System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes)
  - System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point)
  - System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[])
  - System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF)
  - System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[])
  - System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle)
  - System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.RectangleF)
  - System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Int32,System.Int32)
  - System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Int32,System.Int32,System.Drawing.Rectangle,System.Drawing.GraphicsUnit)
  - System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit)
  - System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit)
  - System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.GraphicsUnit)
  - System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit)
  - System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Single,System.Single)
  - System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes)
  - System.Drawing.Graphics.DrawImageUnscaled(System.Drawing.Image,System.Int32,System.Int32,System.Int32,System.Int32)
  - System.Drawing.Graphics.DrawImageUnscaled(System.Drawing.Image,System.Int32,System.Int32)
  - System.Drawing.Graphics.DrawImageUnscaled(System.Drawing.Image,System.Drawing.Point)
  - System.Drawing.Graphics.DrawImageUnscaled(System.Drawing.Image,System.Drawing.Rectangle)
  - System.Drawing.Graphics.DrawImageUnscaledAndClipped(System.Drawing.Image,System.Drawing.Rectangle)
  - System.Drawing.Graphics.DrawLine(System.Drawing.Pen,System.Drawing.PointF,System.Drawing.PointF)
  - System.Drawing.Graphics.DrawLine(System.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32)
  - System.Drawing.Graphics.DrawLine(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single)
  - System.Drawing.Graphics.DrawLine(System.Drawing.Pen,System.Drawing.Point,System.Drawing.Point)
  - System.Drawing.Graphics.DrawLines(System.Drawing.Pen,System.Drawing.Point[])
  - System.Drawing.Graphics.DrawLines(System.Drawing.Pen,System.Drawing.PointF[])
  - System.Drawing.Graphics.DrawPath(System.Drawing.Pen,System.Drawing.Drawing2D.GraphicsPath)
  - System.Drawing.Graphics.DrawPie(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)
  - System.Drawing.Graphics.DrawPie(System.Drawing.Pen,System.Drawing.Rectangle,System.Single,System.Single)
  - System.Drawing.Graphics.DrawPie(System.Drawing.Pen,System.Drawing.RectangleF,System.Single,System.Single)
  - System.Drawing.Graphics.DrawPie(System.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  - System.Drawing.Graphics.DrawPolygon(System.Drawing.Pen,System.Drawing.PointF[])
  - System.Drawing.Graphics.DrawPolygon(System.Drawing.Pen,System.Drawing.Point[])
  - System.Drawing.Graphics.DrawRectangle(System.Drawing.Pen,System.Drawing.Rectangle)
  - System.Drawing.Graphics.DrawRectangle(System.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32)
  - System.Drawing.Graphics.DrawRectangle(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single)
  - System.Drawing.Graphics.DrawRectangles(System.Drawing.Pen,System.Drawing.Rectangle[])
  - System.Drawing.Graphics.DrawRectangles(System.Drawing.Pen,System.Drawing.RectangleF[])
  - System.Drawing.Graphics.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Single,System.Single,System.Drawing.StringFormat)
  - System.Drawing.Graphics.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.RectangleF,System.Drawing.StringFormat)
  - System.Drawing.Graphics.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Single,System.Single)
  - System.Drawing.Graphics.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.RectangleF)
  - System.Drawing.Graphics.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.PointF)
  - System.Drawing.Graphics.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.PointF,System.Drawing.StringFormat)
  - System.Drawing.Graphics.EndContainer(System.Drawing.Drawing2D.GraphicsContainer)
  - System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)
  - System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Rectangle,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)
  - System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc)
  - System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)
  - System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc)
  - System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)
  - System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)
  - System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)
  - System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)
  - System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)
  - System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)
  - System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)
  - System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)
  - System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc)
  - System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)
  - System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)
  - System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)
  - System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF[],System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)
  - System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc)
  - System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)
  - System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Graphics.EnumerateMetafileProc)
  - System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point[],System.Drawing.Graphics.EnumerateMetafileProc)
  - System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF,System.Drawing.Graphics.EnumerateMetafileProc)
  - System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF[],System.Drawing.Graphics.EnumerateMetafileProc)
  - System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF,System.Drawing.Graphics.EnumerateMetafileProc)
  - System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)
  - System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point[],System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)
  - System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Rectangle,System.Drawing.Graphics.EnumerateMetafileProc)
  - System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF[],System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)
  - System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Rectangle,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)
  - System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)
  - System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)
  - System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc)
  - System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point[],System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)
  - System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc)
  - System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)
  - System.Drawing.Graphics.ExcludeClip(System.Drawing.Region)
  - System.Drawing.Graphics.ExcludeClip(System.Drawing.Rectangle)
  - System.Drawing.Graphics.FillClosedCurve(System.Drawing.Brush,System.Drawing.Point[])
  - System.Drawing.Graphics.FillClosedCurve(System.Drawing.Brush,System.Drawing.PointF[])
  - System.Drawing.Graphics.FillClosedCurve(System.Drawing.Brush,System.Drawing.Point[],System.Drawing.Drawing2D.FillMode)
  - System.Drawing.Graphics.FillClosedCurve(System.Drawing.Brush,System.Drawing.PointF[],System.Drawing.Drawing2D.FillMode)
  - System.Drawing.Graphics.FillClosedCurve(System.Drawing.Brush,System.Drawing.Point[],System.Drawing.Drawing2D.FillMode,System.Single)
  - System.Drawing.Graphics.FillClosedCurve(System.Drawing.Brush,System.Drawing.PointF[],System.Drawing.Drawing2D.FillMode,System.Single)
  - System.Drawing.Graphics.FillEllipse(System.Drawing.Brush,System.Int32,System.Int32,System.Int32,System.Int32)
  - System.Drawing.Graphics.FillEllipse(System.Drawing.Brush,System.Single,System.Single,System.Single,System.Single)
  - System.Drawing.Graphics.FillEllipse(System.Drawing.Brush,System.Drawing.Rectangle)
  - System.Drawing.Graphics.FillEllipse(System.Drawing.Brush,System.Drawing.RectangleF)
  - System.Drawing.Graphics.FillPath(System.Drawing.Brush,System.Drawing.Drawing2D.GraphicsPath)
  - System.Drawing.Graphics.FillPie(System.Drawing.Brush,System.Drawing.Rectangle,System.Single,System.Single)
  - System.Drawing.Graphics.FillPie(System.Drawing.Brush,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  - System.Drawing.Graphics.FillPie(System.Drawing.Brush,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)
  - System.Drawing.Graphics.FillPolygon(System.Drawing.Brush,System.Drawing.Point[])
  - System.Drawing.Graphics.FillPolygon(System.Drawing.Brush,System.Drawing.PointF[])
  - System.Drawing.Graphics.FillPolygon(System.Drawing.Brush,System.Drawing.Point[],System.Drawing.Drawing2D.FillMode)
  - System.Drawing.Graphics.FillPolygon(System.Drawing.Brush,System.Drawing.PointF[],System.Drawing.Drawing2D.FillMode)
  - System.Drawing.Graphics.FillRectangle(System.Drawing.Brush,System.Drawing.Rectangle)
  - System.Drawing.Graphics.FillRectangle(System.Drawing.Brush,System.Drawing.RectangleF)
  - System.Drawing.Graphics.FillRectangle(System.Drawing.Brush,System.Int32,System.Int32,System.Int32,System.Int32)
  - System.Drawing.Graphics.FillRectangle(System.Drawing.Brush,System.Single,System.Single,System.Single,System.Single)
  - System.Drawing.Graphics.FillRectangles(System.Drawing.Brush,System.Drawing.RectangleF[])
  - System.Drawing.Graphics.FillRectangles(System.Drawing.Brush,System.Drawing.Rectangle[])
  - System.Drawing.Graphics.FillRegion(System.Drawing.Brush,System.Drawing.Region)
  - System.Drawing.Graphics.Finalize
  - System.Drawing.Graphics.Flush
  - System.Drawing.Graphics.Flush(System.Drawing.Drawing2D.FlushIntention)
  - System.Drawing.Graphics.FromHdc(System.IntPtr)
  - System.Drawing.Graphics.FromHdc(System.IntPtr,System.IntPtr)
  - System.Drawing.Graphics.FromHdcInternal(System.IntPtr)
  - System.Drawing.Graphics.FromHwnd(System.IntPtr)
  - System.Drawing.Graphics.FromHwndInternal(System.IntPtr)
  - System.Drawing.Graphics.FromImage(System.Drawing.Image)
  - System.Drawing.Graphics.GetContextInfo
  - System.Drawing.Graphics.GetHalftonePalette
  - System.Drawing.Graphics.GetHdc
  - System.Drawing.Graphics.GetNearestColor(System.Drawing.Color)
  - System.Drawing.Graphics.InterpolationMode
  - System.Drawing.Graphics.IntersectClip(System.Drawing.Rectangle)
  - System.Drawing.Graphics.IntersectClip(System.Drawing.RectangleF)
  - System.Drawing.Graphics.IntersectClip(System.Drawing.Region)
  - System.Drawing.Graphics.IsClipEmpty
  - System.Drawing.Graphics.IsVisible(System.Drawing.Point)
  - System.Drawing.Graphics.IsVisible(System.Drawing.PointF)
  - System.Drawing.Graphics.IsVisible(System.Drawing.Rectangle)
  - System.Drawing.Graphics.IsVisible(System.Drawing.RectangleF)
  - System.Drawing.Graphics.IsVisible(System.Int32,System.Int32)
  - System.Drawing.Graphics.IsVisible(System.Single,System.Single)
  - System.Drawing.Graphics.IsVisible(System.Int32,System.Int32,System.Int32,System.Int32)
  - System.Drawing.Graphics.IsVisible(System.Single,System.Single,System.Single,System.Single)
  - System.Drawing.Graphics.IsVisibleClipEmpty
  - System.Drawing.Graphics.MeasureCharacterRanges(System.String,System.Drawing.Font,System.Drawing.RectangleF,System.Drawing.StringFormat)
  - System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font)
  - System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font,System.Drawing.SizeF)
  - System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font,System.Int32)
  - System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font,System.Drawing.PointF,System.Drawing.StringFormat)
  - System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font,System.Drawing.SizeF,System.Drawing.StringFormat)
  - System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font,System.Int32,System.Drawing.StringFormat)
  - System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font,System.Drawing.SizeF,System.Drawing.StringFormat,System.Int32@,System.Int32@)
  - System.Drawing.Graphics.MultiplyTransform(System.Drawing.Drawing2D.Matrix)
  - System.Drawing.Graphics.MultiplyTransform(System.Drawing.Drawing2D.Matrix,System.Drawing.Drawing2D.MatrixOrder)
  - System.Drawing.Graphics.PageScale
  - System.Drawing.Graphics.PageUnit
  - System.Drawing.Graphics.PixelOffsetMode
  - System.Drawing.Graphics.ReleaseHdc
  - System.Drawing.Graphics.ReleaseHdc(System.IntPtr)
  - System.Drawing.Graphics.ReleaseHdcInternal(System.IntPtr)
  - System.Drawing.Graphics.RenderingOrigin
  - System.Drawing.Graphics.ResetClip
  - System.Drawing.Graphics.ResetTransform
  - System.Drawing.Graphics.Restore(System.Drawing.Drawing2D.GraphicsState)
  - System.Drawing.Graphics.RotateTransform(System.Single)
  - System.Drawing.Graphics.RotateTransform(System.Single,System.Drawing.Drawing2D.MatrixOrder)
  - System.Drawing.Graphics.Save
  - System.Drawing.Graphics.ScaleTransform(System.Single,System.Single)
  - System.Drawing.Graphics.ScaleTransform(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)
  - System.Drawing.Graphics.SetClip(System.Drawing.Region,System.Drawing.Drawing2D.CombineMode)
  - System.Drawing.Graphics.SetClip(System.Drawing.RectangleF,System.Drawing.Drawing2D.CombineMode)
  - System.Drawing.Graphics.SetClip(System.Drawing.Rectangle,System.Drawing.Drawing2D.CombineMode)
  - System.Drawing.Graphics.SetClip(System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.CombineMode)
  - System.Drawing.Graphics.SetClip(System.Drawing.Graphics,System.Drawing.Drawing2D.CombineMode)
  - System.Drawing.Graphics.SetClip(System.Drawing.Rectangle)
  - System.Drawing.Graphics.SetClip(System.Drawing.Graphics)
  - System.Drawing.Graphics.SetClip(System.Drawing.Drawing2D.GraphicsPath)
  - System.Drawing.Graphics.SetClip(System.Drawing.RectangleF)
  - System.Drawing.Graphics.SmoothingMode
  - System.Drawing.Graphics.TextContrast
  - System.Drawing.Graphics.TextRenderingHint
  - System.Drawing.Graphics.Transform
  - System.Drawing.Graphics.TransformPoints(System.Drawing.Drawing2D.CoordinateSpace,System.Drawing.Drawing2D.CoordinateSpace,System.Drawing.Point[])
  - System.Drawing.Graphics.TransformPoints(System.Drawing.Drawing2D.CoordinateSpace,System.Drawing.Drawing2D.CoordinateSpace,System.Drawing.PointF[])
  - System.Drawing.Graphics.TranslateClip(System.Int32,System.Int32)
  - System.Drawing.Graphics.TranslateClip(System.Single,System.Single)
  - System.Drawing.Graphics.TranslateTransform(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)
  - System.Drawing.Graphics.TranslateTransform(System.Single,System.Single)
  - System.Drawing.Graphics.VisibleClipBounds
  langs:
  - csharp
  name: Graphics
  nameWithType: Graphics
  fullName: System.Drawing.Graphics
  type: Class
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Encapsulates a GDI+ drawing surface. This class cannot be inherited.
  remarks: "The <xref:System.Drawing.Graphics> class provides methods for drawing objects to the display device. A <xref:System.Drawing.Graphics> is associated with a specific device context.  \n  \n You can obtain a <xref:System.Drawing.Graphics> object by calling the <xref:System.Windows.Forms.Control.CreateGraphics%2A?displayProperty=fullName> method on an object that inherits from <xref:System.Windows.Forms.Control?displayProperty=fullName>, or by handling a control's <xref:System.Windows.Forms.Control.Paint?displayProperty=fullName> event and accessing the <xref:System.Windows.Forms.PaintEventArgs.Graphics%2A> property of the <xref:System.Windows.Forms.PaintEventArgs?displayProperty=fullName> class. You can also create a <xref:System.Drawing.Graphics> object from an image by using the <xref:System.Drawing.Graphics.FromImage%2A> method. For more information about creating a <xref:System.Drawing.Graphics> object, see [How to: Create Graphics Objects for Drawing](~/docs/framework/winforms/advanced/how-to-create-graphics-objects-for-drawing.md).  \n  \n You can draw many different shapes and lines by using a <xref:System.Drawing.Graphics> object. For more information about how to draw lines and shapes, see the specific `Draw`*GraphicalElement* method for the line or shape you want to draw. These methods include <xref:System.Drawing.Graphics.DrawLine%2A>, <xref:System.Drawing.Graphics.DrawArc%2A>, <xref:System.Drawing.Graphics.DrawClosedCurve%2A>, <xref:System.Drawing.Graphics.DrawPolygon%2A>, and <xref:System.Drawing.Graphics.DrawRectangle%2A>. For more information about how to draw lines and shapes, see [Using a Pen to Draw Lines and Shapes](~/docs/framework/winforms/advanced/using-a-pen-to-draw-lines-and-shapes.md) and [Using a Brush to Fill Shapes](~/docs/framework/winforms/advanced/using-a-brush-to-fill-shapes.md).  \n  \n You can also draw images and icons by using the <xref:System.Drawing.Graphics.DrawImage%2A> and <xref:System.Drawing.Graphics.DrawIcon%2A> methods, respectively. To perform a bit-block transfer of color data from the screen to the drawing surface of the <xref:System.Drawing.Graphics> object, see <xref:System.Drawing.Graphics.CopyFromScreen%2A>. For more information about how to draw images with a <xref:System.Drawing.Graphics> object, see [Working with Images, Bitmaps, Icons, and Metafiles](~/docs/framework/winforms/advanced/working-with-images-bitmaps-icons-and-metafiles.md).  \n  \n In addition, you can manipulate the coordinate system used by the <xref:System.Drawing.Graphics> object. For more information on the coordinate system and how to manipulate it, see [Coordinate Systems and Transformations](~/docs/framework/winforms/advanced/coordinate-systems-and-transformations.md)."
  example:
  - "The following code example is designed for use with Windows Forms and requires a <xref:System.Windows.Forms.PaintEventArgs> object. The <xref:System.Windows.Forms.PaintEventArgs> object is named `e` and is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates an image from a JPEG file. The file is named SampImag.jpg and is located in the folder of the example.  \n  \n-   Creates a point at which to draw the upper-left corner of the image.  \n  \n-   Draws the unscaled image to the screen by using a <xref:System.Drawing.Graphics> object.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples#40](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#40)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples#40](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#40)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples#40](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#40)]"
  syntax:
    content: 'public sealed class Graphics : MarshalByRefObject, IDisposable, System.Drawing.IDeviceContext'
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  implements:
  - System.Drawing.IDeviceContext
  - System.IDisposable
  inheritedMembers:
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.AddMetafileComment(System.Byte[])
  commentId: M:System.Drawing.Graphics.AddMetafileComment(System.Byte[])
  id: AddMetafileComment(System.Byte[])
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: AddMetafileComment(Byte[])
  nameWithType: Graphics.AddMetafileComment(Byte[])
  fullName: Graphics.AddMetafileComment(Byte[])
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Adds a comment to the current <xref href="System.Drawing.Imaging.Metafile"></xref>.
  remarks: This method is valid only if this <xref:System.Drawing.Graphics> is associated with a <xref:System.Drawing.Imaging.Metafile>.
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler, as well as `thisForm`, the <xref:System.Windows.Forms.Form> for the example. The code performs the following actions:  \n  \n-   Creates a temporary <xref:System.Drawing.Graphics> for creating the metafile and gets an `hdc`, a handle to its device context.  \n  \n-   Creates a new metafile using the `hdc`.  \n  \n-   Creates a <xref:System.Drawing.Graphics> for display of the metafile from the <xref:System.Drawing.Imaging.Metafile>.  \n  \n-   Draws a rectangle to the metafile.  \n  \n-   Adds a comment to the metafile.  \n  \n-   Disposes the <xref:System.Drawing.Graphics> for the metafile-which closes the metafile.  \n  \n-   Disposes the metafile.  \n  \n-   Releases the temporary `hdc`.  \n  \n-   Disposes the temporary <xref:System.Drawing.Graphics>.  \n  \n-   Creates a second metafile from the previously created file.  \n  \n-   Draws the metafile to the screen.  \n  \n-   Disposes the metafile.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#1)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#1)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#1)]"
  syntax:
    content: public void AddMetafileComment (byte[] data);
    parameters:
    - id: data
      type: System.Byte[]
      description: Array of bytes that contains the comment.
  overload: System.Drawing.Graphics.AddMetafileComment*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.BeginContainer
  commentId: M:System.Drawing.Graphics.BeginContainer
  id: BeginContainer
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: BeginContainer()
  nameWithType: Graphics.BeginContainer()
  fullName: Graphics.BeginContainer()
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Saves a graphics container with the current state of this <xref href="System.Drawing.Graphics"></xref> and opens and uses a new graphics container.
  remarks: "Use this method with the <xref:System.Drawing.Graphics.EndContainer%2A> method to create nested graphics containers. Graphics containers retain graphics state, such as transformation, clipping region, and rendering properties.  \n  \n When you call the <xref:System.Drawing.Graphics.BeginContainer%2A> method of a <xref:System.Drawing.Graphics>, an information block that holds the state of the <xref:System.Drawing.Graphics> is put on a stack. The <xref:System.Drawing.Graphics.BeginContainer%2A> method returns a <xref:System.Drawing.Drawing2D.GraphicsContainer> that identifies that information block. When you pass the identifying object to the <xref:System.Drawing.Graphics.EndContainer%2A> method, the information block is removed from the stack and is used to restore the <xref:System.Drawing.Graphics> to the state it was in at the time of the <xref:System.Drawing.Graphics.BeginContainer%2A> method call.  \n  \n Containers can be nested; that is, you can call the <xref:System.Drawing.Graphics.BeginContainer%2A> method several times before you call the <xref:System.Drawing.Graphics.EndContainer%2A> method. Each time you call the <xref:System.Drawing.Graphics.BeginContainer%2A> method, an information block is put on the stack, and you receive a <xref:System.Drawing.Drawing2D.GraphicsContainer> for the information block. When you pass one of those objects to the <xref:System.Drawing.Graphics.EndContainer%2A> method, the <xref:System.Drawing.Graphics> is returned to the state it was in at the time of the <xref:System.Drawing.Graphics.BeginContainer%2A> method call that returned that particular <xref:System.Drawing.Drawing2D.GraphicsContainer>. The information block placed on the stack by that <xref:System.Drawing.Graphics.BeginContainer%2A> method call is removed from the stack, and all information blocks placed on that stack after that <xref:System.Drawing.Graphics.BeginContainer%2A> method call are also removed.  \n  \n Calls to the <xref:System.Drawing.Graphics.Save%2A> method place information blocks on the same stack as calls to the <xref:System.Drawing.Graphics.BeginContainer%2A> method. Just as an <xref:System.Drawing.Graphics.EndContainer%2A> method call is paired with a <xref:System.Drawing.Graphics.BeginContainer%2A> method call, a <xref:System.Drawing.Graphics.Restore%2A> method call is paired with a <xref:System.Drawing.Graphics.Save%2A> method call.  \n  \n When you call the <xref:System.Drawing.Graphics.EndContainer%2A> method, all information blocks placed on the stack (by the <xref:System.Drawing.Graphics.Save%2A> method or by the <xref:System.Drawing.Graphics.BeginContainer%2A> method) after the corresponding call to the <xref:System.Drawing.Graphics.BeginContainer%2A> method are removed from the stack. Likewise, when you call the <xref:System.Drawing.Graphics.Restore%2A> method, all information blocks placed on the stack (by the <xref:System.Drawing.Graphics.Save%2A> method or by the <xref:System.Drawing.Graphics.BeginContainer%2A> method) after the corresponding call to the <xref:System.Drawing.Graphics.Save%2A> method are removed from the stack.  \n  \n The graphics state established by the <xref:System.Drawing.Graphics.BeginContainer%2A> method includes the rendering qualities of the default graphics state; any rendering-quality state changes existing when the method is called are reset to the default values."
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Opens a new graphics container and saves the old container.  \n  \n-   Translates the world coordinates in the container.  \n  \n-   Fills a red rectangle in the (translated coordinates of the) new container.  \n  \n-   Closes the new container and restores the saved container.  \n  \n-   Fills a green rectangle (to the untranslated coordinates) of the saved container.  \n  \n The result is a green rectangle that overlies a red rectangle of the same size.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#2)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#2)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#2)]"
  syntax:
    content: public System.Drawing.Drawing2D.GraphicsContainer BeginContainer ();
    parameters: []
    return:
      type: System.Drawing.Drawing2D.GraphicsContainer
      description: This method returns a <xref href="System.Drawing.Drawing2D.GraphicsContainer"></xref> that represents the state of this <xref href="System.Drawing.Graphics"></xref> at the time of the method call.
  overload: System.Drawing.Graphics.BeginContainer*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.BeginContainer(System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.GraphicsUnit)
  commentId: M:System.Drawing.Graphics.BeginContainer(System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.GraphicsUnit)
  id: BeginContainer(System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.GraphicsUnit)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: BeginContainer(Rectangle, Rectangle, GraphicsUnit)
  nameWithType: Graphics.BeginContainer(Rectangle, Rectangle, GraphicsUnit)
  fullName: Graphics.BeginContainer(Rectangle, Rectangle, GraphicsUnit)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Saves a graphics container with the current state of this <xref href="System.Drawing.Graphics"></xref> and opens and uses a new graphics container with the specified scale transformation.
  remarks: "Use this method with the <xref:System.Drawing.Graphics.EndContainer%2A> method to create nested graphics containers. Graphics containers retain graphics state, such as transformation, clipping region, and rendering properties.  \n  \n When you call the <xref:System.Drawing.Graphics.BeginContainer%2A> method of a <xref:System.Drawing.Graphics>, an information block that holds the state of the <xref:System.Drawing.Graphics> is put on a stack. The <xref:System.Drawing.Graphics.BeginContainer%2A> method returns a <xref:System.Drawing.Drawing2D.GraphicsContainer> that identifies that information block. When you pass the identifying object to the <xref:System.Drawing.Graphics.EndContainer%2A> method, the information block is removed from the stack and is used to restore the <xref:System.Drawing.Graphics> to the state it was in at the time of the <xref:System.Drawing.Graphics.BeginContainer%2A> method call.  \n  \n Containers can be nested; that is, you can call the <xref:System.Drawing.Graphics.BeginContainer%2A> method several times before you call the <xref:System.Drawing.Graphics.EndContainer%2A> method. Each time you call the <xref:System.Drawing.Graphics.BeginContainer%2A> method, an information block is put on the stack, and you receive a <xref:System.Drawing.Drawing2D.GraphicsContainer> for the information block. When you pass one of those objects to the <xref:System.Drawing.Graphics.EndContainer%2A> method, the <xref:System.Drawing.Graphics> is returned to the state it was in at the time of the <xref:System.Drawing.Graphics.BeginContainer%2A> method call that returned that particular <xref:System.Drawing.Drawing2D.GraphicsContainer>. The information block placed on the stack by that <xref:System.Drawing.Graphics.BeginContainer%2A> method call is removed from the stack, and all information blocks placed on that stack after that <xref:System.Drawing.Graphics.BeginContainer%2A> method call are also removed.  \n  \n Calls to the <xref:System.Drawing.Graphics.Save%2A> method place information blocks on the same stack as calls to the <xref:System.Drawing.Graphics.BeginContainer%2A> method. Just as an <xref:System.Drawing.Graphics.EndContainer%2A> method call is paired with a <xref:System.Drawing.Graphics.BeginContainer%2A> method call, a <xref:System.Drawing.Graphics.Restore%2A> method call is paired with a <xref:System.Drawing.Graphics.Save%2A> method call.  \n  \n When you call the <xref:System.Drawing.Graphics.EndContainer%2A> method, all information blocks placed on the stack (by the <xref:System.Drawing.Graphics.Save%2A> method or by the <xref:System.Drawing.Graphics.BeginContainer%2A> method) after the corresponding call to the <xref:System.Drawing.Graphics.BeginContainer%2A> method are removed from the stack. Likewise, when you call the <xref:System.Drawing.Graphics.Restore%2A> method, all information blocks placed on the stack (by the <xref:System.Drawing.Graphics.Save%2A> method or by the <xref:System.Drawing.Graphics.BeginContainer%2A> method) after the corresponding call to the <xref:System.Drawing.Graphics.Save%2A> method are removed from the stack.  \n  \n This method specifies a scale transformation for the new graphics container with the `dstrect` and `srcrect` parameters. The scale is equal to the transformation that, when applied to `srcrect`, results in `dstrect`.  \n  \n The graphics state established by the <xref:System.Drawing.Graphics.BeginContainer%2A> method includes the rendering qualities of the default graphics state; any rendering-quality state changes existing when the method is called are reset to the default values."
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates two rectangles to specify a scale transformation for the new container.  \n  \n-   Opens the new graphics container and saves the old container.  \n  \n-   Fills a red rectangle in the (scaled coordinates of the) new container.  \n  \n-   Closes the new container and restores the saved container.  \n  \n-   Fills a green rectangle (to the unscaled coordinates) of the saved container.  \n  \n The result is a green rectangle that overlies a smaller red rectangle.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#3)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#3)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#3)]"
  syntax:
    content: public System.Drawing.Drawing2D.GraphicsContainer BeginContainer (System.Drawing.Rectangle dstrect, System.Drawing.Rectangle srcrect, System.Drawing.GraphicsUnit unit);
    parameters:
    - id: dstrect
      type: System.Drawing.Rectangle
      description: <xref href="System.Drawing.Rectangle"></xref> structure that, together with the <code>srcrect</code> parameter, specifies a scale transformation for the container.
    - id: srcrect
      type: System.Drawing.Rectangle
      description: <xref href="System.Drawing.Rectangle"></xref> structure that, together with the <code>dstrect</code> parameter, specifies a scale transformation for the container.
    - id: unit
      type: System.Drawing.GraphicsUnit
      description: Member of the <xref href="System.Drawing.GraphicsUnit"></xref> enumeration that specifies the unit of measure for the container.
    return:
      type: System.Drawing.Drawing2D.GraphicsContainer
      description: This method returns a <xref href="System.Drawing.Drawing2D.GraphicsContainer"></xref> that represents the state of this <xref href="System.Drawing.Graphics"></xref> at the time of the method call.
  overload: System.Drawing.Graphics.BeginContainer*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.BeginContainer(System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit)
  commentId: M:System.Drawing.Graphics.BeginContainer(System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit)
  id: BeginContainer(System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: BeginContainer(RectangleF, RectangleF, GraphicsUnit)
  nameWithType: Graphics.BeginContainer(RectangleF, RectangleF, GraphicsUnit)
  fullName: Graphics.BeginContainer(RectangleF, RectangleF, GraphicsUnit)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Saves a graphics container with the current state of this <xref href="System.Drawing.Graphics"></xref> and opens and uses a new graphics container with the specified scale transformation.
  remarks: "Use this method with the <xref:System.Drawing.Graphics.EndContainer%2A> method to create nested graphics containers. Graphics containers retain graphics state, such as transformation, clipping region, and rendering properties.  \n  \n When you call the <xref:System.Drawing.Graphics.BeginContainer%2A> method of a <xref:System.Drawing.Graphics>, an information block that holds the state of the <xref:System.Drawing.Graphics> is put on a stack. The <xref:System.Drawing.Graphics.BeginContainer%2A> method returns a <xref:System.Drawing.Drawing2D.GraphicsContainer> that identifies that information block. When you pass the identifying object to the <xref:System.Drawing.Graphics.EndContainer%2A> method, the information block is removed from the stack and is used to restore the <xref:System.Drawing.Graphics> to the state it was in at the time of the <xref:System.Drawing.Graphics.BeginContainer%2A> method call.  \n  \n Containers can be nested; that is, you can call the <xref:System.Drawing.Graphics.BeginContainer%2A> method several times before you call the <xref:System.Drawing.Graphics.EndContainer%2A> method. Each time you call the <xref:System.Drawing.Graphics.BeginContainer%2A> method, an information block is put on the stack, and you receive a <xref:System.Drawing.Drawing2D.GraphicsContainer> for the information block. When you pass one of those objects to the <xref:System.Drawing.Graphics.EndContainer%2A> method, the <xref:System.Drawing.Graphics> is returned to the state it was in at the time of the <xref:System.Drawing.Graphics.BeginContainer%2A> method call that returned that particular <xref:System.Drawing.Drawing2D.GraphicsContainer>. The information block placed on the stack by that <xref:System.Drawing.Graphics.BeginContainer%2A> method call is removed from the stack, and all information blocks placed on that stack after that <xref:System.Drawing.Graphics.BeginContainer%2A> method call are also removed.  \n  \n Calls to the <xref:System.Drawing.Graphics.Save%2A> method place information blocks on the same stack as calls to the <xref:System.Drawing.Graphics.BeginContainer%2A> method. Just as an <xref:System.Drawing.Graphics.EndContainer%2A> method call is paired with a <xref:System.Drawing.Graphics.BeginContainer%2A> method call, a <xref:System.Drawing.Graphics.Restore%2A> method call is paired with a <xref:System.Drawing.Graphics.Save%2A> method call.  \n  \n When you call the <xref:System.Drawing.Graphics.EndContainer%2A> method, all information blocks placed on the stack (by the `Save` method or by the <xref:System.Drawing.Graphics.BeginContainer%2A> method) after the corresponding call to the <xref:System.Drawing.Graphics.BeginContainer%2A> method are removed from the stack. Likewise, when you call the <xref:System.Drawing.Graphics.Restore%2A> method, all information blocks placed on the stack (by the <xref:System.Drawing.Graphics.Save%2A> method or by the <xref:System.Drawing.Graphics.BeginContainer%2A> method) after the corresponding call to the <xref:System.Drawing.Graphics.Save%2A> method are removed from the stack.  \n  \n This method specifies a scale transformation for the new graphics container with the `dstrect` and `srcrect` parameters. The scale is equal to the transformation that, when applied to `srcrect`, results in `dstrect`.  \n  \n The graphics state established by the <xref:System.Drawing.Graphics.BeginContainer%2A> method includes the rendering qualities of the default graphics state; any rendering-quality state changes existing when the method is called are reset to the default values."
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates two rectangles to specify a scale transformation for the new container.  \n  \n-   Opens the new graphics container and saves the old container.  \n  \n-   Fills a red rectangle in the (scaled coordinates of the) new container.  \n  \n-   Closes the new container and restores the saved container.  \n  \n-   Fills a green rectangle (to the unscaled coordinates) of the saved container.  \n  \n The result is a green rectangle that overlies a smaller red rectangle.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#4)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#4)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#4)]"
  syntax:
    content: public System.Drawing.Drawing2D.GraphicsContainer BeginContainer (System.Drawing.RectangleF dstrect, System.Drawing.RectangleF srcrect, System.Drawing.GraphicsUnit unit);
    parameters:
    - id: dstrect
      type: System.Drawing.RectangleF
      description: <xref href="System.Drawing.RectangleF"></xref> structure that, together with the <code>srcrect</code> parameter, specifies a scale transformation for the new graphics container.
    - id: srcrect
      type: System.Drawing.RectangleF
      description: <xref href="System.Drawing.RectangleF"></xref> structure that, together with the <code>dstrect</code> parameter, specifies a scale transformation for the new graphics container.
    - id: unit
      type: System.Drawing.GraphicsUnit
      description: Member of the <xref href="System.Drawing.GraphicsUnit"></xref> enumeration that specifies the unit of measure for the container.
    return:
      type: System.Drawing.Drawing2D.GraphicsContainer
      description: This method returns a <xref href="System.Drawing.Drawing2D.GraphicsContainer"></xref> that represents the state of this <xref href="System.Drawing.Graphics"></xref> at the time of the method call.
  overload: System.Drawing.Graphics.BeginContainer*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.Clear(System.Drawing.Color)
  commentId: M:System.Drawing.Graphics.Clear(System.Drawing.Color)
  id: Clear(System.Drawing.Color)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: Clear(Color)
  nameWithType: Graphics.Clear(Color)
  fullName: Graphics.Clear(Color)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Clears the entire drawing surface and fills it with the specified background color.
  remarks: The <xref:System.Drawing.Graphics.Clear%2A> method clears the state of the graphics object and should not be called when the graphics object cannot be updated. For example, if the <xref:System.Drawing.Graphics.Clear%2A> method is called on a secure desktop in a terminal server session, an <xref:System.Runtime.InteropServices.ExternalException> may occur, leaving the <xref:System.Drawing.Graphics> object in an inconsistent state.
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code clears the drawing surface of the <xref:System.Drawing.Graphics> and sets the background color to the system-defined teal color.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples#5](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#5)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#5)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#5)]"
  syntax:
    content: public void Clear (System.Drawing.Color color);
    parameters:
    - id: color
      type: System.Drawing.Color
      description: <xref href="System.Drawing.Color"></xref> structure that represents the background color of the drawing surface.
  overload: System.Drawing.Graphics.Clear*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.Clip
  commentId: P:System.Drawing.Graphics.Clip
  id: Clip
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: Clip
  nameWithType: Graphics.Clip
  fullName: Graphics.Clip
  type: Property
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Gets or sets a <xref href="System.Drawing.Region"></xref> that limits the drawing region of this <xref href="System.Drawing.Graphics"></xref>.
  remarks: Modifying the <xref:System.Drawing.Region> object returned by the <xref:System.Drawing.Graphics.Clip%2A> property does not affect subsequent drawing with the <xref:System.Drawing.Graphics> object. To change the clip region, replace the <xref:System.Drawing.Graphics.Clip%2A> property value with a new <xref:System.Drawing.Region> object. To determine whether the clipping region is infinite, retrieve the <xref:System.Drawing.Graphics.Clip%2A> property and call its <xref:System.Drawing.Region.IsInfinite%2A> method.
  example:
  - "The following code example demonstrates the use of the <xref:System.Drawing.Graphics.Clip%2A> property. This example is designed to be used with Windows Forms. Paste the code into a form and call the `SetAndFillClip` method when handling the form's <xref:System.Windows.Forms.Control.Paint> event, passing `e` as <xref:System.Windows.Forms.PaintEventArgs>.  \n  \n [!code-cpp[System.Drawing.GraphicsProperties#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/CPP/form1.cpp#4)]\n [!code-csharp[System.Drawing.GraphicsProperties#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/CS/form1.cs#4)]\n [!code-vb[System.Drawing.GraphicsProperties#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/VB/form1.vb#4)]"
  syntax:
    content: public System.Drawing.Region Clip { get; set; }
    return:
      type: System.Drawing.Region
      description: A <xref href="System.Drawing.Region"></xref> that limits the portion of this <xref href="System.Drawing.Graphics"></xref> that is currently available for drawing.
  overload: System.Drawing.Graphics.Clip*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.ClipBounds
  commentId: P:System.Drawing.Graphics.ClipBounds
  id: ClipBounds
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: ClipBounds
  nameWithType: Graphics.ClipBounds
  fullName: Graphics.ClipBounds
  type: Property
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Gets a <xref href="System.Drawing.RectangleF"></xref> structure that bounds the clipping region of this <xref href="System.Drawing.Graphics"></xref>.
  remarks: "The unit for resulting rectangle is designated by the <xref:System.Drawing.Graphics.PageUnit%2A> property. The default unit is pixels. A <xref:System.Drawing.Graphics> is typically associated with a control and the origin of the rectangle will be relative to the client area of that control.  \n  \n If the clipping region is infinite, the <xref:System.Drawing.Graphics.ClipBounds%2A> property returns a meaningless large rectangle. To determine whether the clipping region is infinite, retrieve the <xref:System.Drawing.Graphics.Clip%2A> property and call its <xref:System.Drawing.Region.IsInfinite%2A> method."
  syntax:
    content: public System.Drawing.RectangleF ClipBounds { get; }
    return:
      type: System.Drawing.RectangleF
      description: A <xref href="System.Drawing.RectangleF"></xref> structure that represents a bounding rectangle for the clipping region of this <xref href="System.Drawing.Graphics"></xref>.
  overload: System.Drawing.Graphics.ClipBounds*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.CompositingMode
  commentId: P:System.Drawing.Graphics.CompositingMode
  id: CompositingMode
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: CompositingMode
  nameWithType: Graphics.CompositingMode
  fullName: Graphics.CompositingMode
  type: Property
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Gets a value that specifies how composited images are drawn to this <xref href="System.Drawing.Graphics"></xref>.
  remarks: "The compositing mode determines whether pixels from a source image overwrite or are combined with background pixels.  \n  \n> [!NOTE]\n>  You should not use a <xref:System.Drawing.Graphics.CompositingMode%2A> property value of <xref:System.Drawing.Drawing2D.CompositingMode.SourceCopy> when the <xref:System.Drawing.Graphics.TextRenderingHint%2A> property is set to <xref:System.Drawing.Text.TextRenderingHint.ClearTypeGridFit>. An exception could occur or the image may not render correctly."
  syntax:
    content: public System.Drawing.Drawing2D.CompositingMode CompositingMode { get; set; }
    return:
      type: System.Drawing.Drawing2D.CompositingMode
      description: This property specifies a member of the <xref href="System.Drawing.Drawing2D.CompositingMode"></xref> enumeration. The default is <xref href="System.Drawing.Drawing2D.CompositingMode.SourceOver"></xref>.
  overload: System.Drawing.Graphics.CompositingMode*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.CompositingQuality
  commentId: P:System.Drawing.Graphics.CompositingQuality
  id: CompositingQuality
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: CompositingQuality
  nameWithType: Graphics.CompositingQuality
  fullName: Graphics.CompositingQuality
  type: Property
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Gets or sets the rendering quality of composited images drawn to this <xref href="System.Drawing.Graphics"></xref>.
  remarks: The compositing quality determines the rendering quality level of composited images.
  syntax:
    content: public System.Drawing.Drawing2D.CompositingQuality CompositingQuality { get; set; }
    return:
      type: System.Drawing.Drawing2D.CompositingQuality
      description: This property specifies a member of the <xref href="System.Drawing.Drawing2D.CompositingQuality"></xref> enumeration. The default is <xref href="System.Drawing.Drawing2D.CompositingQuality.Default"></xref>.
  overload: System.Drawing.Graphics.CompositingQuality*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.CopyFromScreen(System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Size)
  commentId: M:System.Drawing.Graphics.CopyFromScreen(System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Size)
  id: CopyFromScreen(System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Size)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: CopyFromScreen(Int32, Int32, Int32, Int32, Size)
  nameWithType: Graphics.CopyFromScreen(Int32, Int32, Int32, Int32, Size)
  fullName: Graphics.CopyFromScreen(Int32, Int32, Int32, Int32, Size)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Performs a bit-block transfer of the color data, corresponding to a rectangle of pixels, from the screen to the drawing surface of the <xref href="System.Drawing.Graphics"></xref>.
  remarks: The <xref:System.Drawing.Graphics.CopyFromScreen%2A> methods are useful for layering one image on top of another. To specify how the source and destination colors are blended, use one of the <xref:System.Drawing.Graphics.CopyFromScreen%2A> methods that takes a <xref:System.Drawing.CopyPixelOperation> parameter.
  example:
  - "The following code example demonstrates how to use the <xref:System.Drawing.Graphics.CopyFromScreen%2A> for printing a copy of the current form.  \n  \n [!code-csharp[System.Drawing.Graphics.CopyFromScreen#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Graphics.CopyFromScreen/CS/Form1.cs#1)]\n [!code-vb[System.Drawing.Graphics.CopyFromScreen#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Graphics.CopyFromScreen/VB/Form1.vb#1)]"
  syntax:
    content: public void CopyFromScreen (int sourceX, int sourceY, int destinationX, int destinationY, System.Drawing.Size blockRegionSize);
    parameters:
    - id: sourceX
      type: System.Int32
      description: The x-coordinate of the point at the upper-left corner of the source rectangle.
    - id: sourceY
      type: System.Int32
      description: The y-coordinate of the point at the upper-left corner of the source rectangle.
    - id: destinationX
      type: System.Int32
      description: The x-coordinate of the point at the upper-left corner of the destination rectangle.
    - id: destinationY
      type: System.Int32
      description: The y-coordinate of the point at the upper-left corner of the destination rectangle.
    - id: blockRegionSize
      type: System.Drawing.Size
      description: The size of the area to be transferred.
  overload: System.Drawing.Graphics.CopyFromScreen*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: The operation failed.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.CopyFromScreen(System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Size,System.Drawing.CopyPixelOperation)
  commentId: M:System.Drawing.Graphics.CopyFromScreen(System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Size,System.Drawing.CopyPixelOperation)
  id: CopyFromScreen(System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Size,System.Drawing.CopyPixelOperation)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: CopyFromScreen(Int32, Int32, Int32, Int32, Size, CopyPixelOperation)
  nameWithType: Graphics.CopyFromScreen(Int32, Int32, Int32, Int32, Size, CopyPixelOperation)
  fullName: Graphics.CopyFromScreen(Int32, Int32, Int32, Int32, Size, CopyPixelOperation)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Performs a bit-block transfer of the color data, corresponding to a rectangle of pixels, from the screen to the drawing surface of the <xref href="System.Drawing.Graphics"></xref>.
  remarks: The <xref:System.Drawing.Graphics.CopyFromScreen%2A> methods are useful for layering one image on top of another. The `copyPixelOperation` parameter allows you to specify if and how the source colors should be blended with the colors in the destination area.
  example:
  - "The following example demonstrates how to use the <xref:System.Drawing.Graphics.CopyFromScreen%2A> method. To run this example, paste it into a Windows Form. Handle the form’s <xref:System.Windows.Forms.Control.Paint> event and call the `CopyPixels4` method from the <xref:System.Windows.Forms.Control.Paint> event-handling method, passing `e` as <xref:System.Windows.Forms.PaintEventArgs>.  \n  \n [!code-csharp[System.Drawing.MiscWhidbeySnippets#7](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/CS/Form1.cs#7)]\n [!code-vb[System.Drawing.MiscWhidbeySnippets#7](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/VB/Form1.vb#7)]"
  syntax:
    content: public void CopyFromScreen (int sourceX, int sourceY, int destinationX, int destinationY, System.Drawing.Size blockRegionSize, System.Drawing.CopyPixelOperation copyPixelOperation);
    parameters:
    - id: sourceX
      type: System.Int32
      description: The x-coordinate of the point at the upper-left corner of the source rectangle.
    - id: sourceY
      type: System.Int32
      description: The y-coordinate of the point at the upper-left corner of the source rectangle
    - id: destinationX
      type: System.Int32
      description: The x-coordinate of the point at the upper-left corner of the destination rectangle.
    - id: destinationY
      type: System.Int32
      description: The y-coordinate of the point at the upper-left corner of the destination rectangle.
    - id: blockRegionSize
      type: System.Drawing.Size
      description: The size of the area to be transferred.
    - id: copyPixelOperation
      type: System.Drawing.CopyPixelOperation
      description: One of the <xref href="System.Drawing.CopyPixelOperation"></xref> values.
  overload: System.Drawing.Graphics.CopyFromScreen*
  exceptions:
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: <code>copyPixelOperation</code> is not a member of <xref href="System.Drawing.CopyPixelOperation"></xref>.
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: The operation failed.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.CopyFromScreen(System.Drawing.Point,System.Drawing.Point,System.Drawing.Size)
  commentId: M:System.Drawing.Graphics.CopyFromScreen(System.Drawing.Point,System.Drawing.Point,System.Drawing.Size)
  id: CopyFromScreen(System.Drawing.Point,System.Drawing.Point,System.Drawing.Size)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: CopyFromScreen(Point, Point, Size)
  nameWithType: Graphics.CopyFromScreen(Point, Point, Size)
  fullName: Graphics.CopyFromScreen(Point, Point, Size)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Performs a bit-block transfer of color data, corresponding to a rectangle of pixels, from the screen to the drawing surface of the <xref href="System.Drawing.Graphics"></xref>.
  remarks: The <xref:System.Drawing.Graphics.CopyFromScreen%2A> methods are useful for layering one image on top of another. To specify how the source and destination colors are blended, use one of the <xref:System.Drawing.Graphics.CopyFromScreen%2A> methods that takes a <xref:System.Drawing.CopyPixelOperation> parameter.
  example:
  - "The following example demonstrates how to use the <xref:System.Drawing.Graphics.CopyFromScreen%2A> method. To run this example, paste it into a Windows Form. Handle the form’s <xref:System.Windows.Forms.Control.Paint> event and call the `CopyPixels1` method from the <xref:System.Windows.Forms.Control.Paint> event-handling method, passing `e` as <xref:System.Windows.Forms.PaintEventArgs>.  \n  \n [!code-csharp[System.Drawing.MiscWhidbeySnippets#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/CS/Form1.cs#4)]\n [!code-vb[System.Drawing.MiscWhidbeySnippets#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/VB/Form1.vb#4)]"
  syntax:
    content: public void CopyFromScreen (System.Drawing.Point upperLeftSource, System.Drawing.Point upperLeftDestination, System.Drawing.Size blockRegionSize);
    parameters:
    - id: upperLeftSource
      type: System.Drawing.Point
      description: The point at the upper-left corner of the source rectangle.
    - id: upperLeftDestination
      type: System.Drawing.Point
      description: The point at the upper-left corner of the destination rectangle.
    - id: blockRegionSize
      type: System.Drawing.Size
      description: The size of the area to be transferred.
  overload: System.Drawing.Graphics.CopyFromScreen*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: The operation failed.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.CopyFromScreen(System.Drawing.Point,System.Drawing.Point,System.Drawing.Size,System.Drawing.CopyPixelOperation)
  commentId: M:System.Drawing.Graphics.CopyFromScreen(System.Drawing.Point,System.Drawing.Point,System.Drawing.Size,System.Drawing.CopyPixelOperation)
  id: CopyFromScreen(System.Drawing.Point,System.Drawing.Point,System.Drawing.Size,System.Drawing.CopyPixelOperation)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: CopyFromScreen(Point, Point, Size, CopyPixelOperation)
  nameWithType: Graphics.CopyFromScreen(Point, Point, Size, CopyPixelOperation)
  fullName: Graphics.CopyFromScreen(Point, Point, Size, CopyPixelOperation)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Performs a bit-block transfer of color data, corresponding to a rectangle of pixels, from the screen to the drawing surface of the <xref href="System.Drawing.Graphics"></xref>.
  remarks: The <xref:System.Drawing.Graphics.CopyFromScreen%2A> methods are useful for layering one image on top of another. The `copyPixelOperation` parameter allows you to specify if and how the source colors should be blended with the colors in the destination area.
  example:
  - "The following example demonstrates how to use the <xref:System.Drawing.Graphics.CopyFromScreen%2A> method. To run this example, paste it into a Windows Form. Handle the form’s <xref:System.Windows.Forms.Control.Paint> event and call the `CopyPixels2` method from the <xref:System.Windows.Forms.Control.Paint> event-handling method, passing `e` as <xref:System.Windows.Forms.PaintEventArgs>.  \n  \n [!code-csharp[System.Drawing.MiscWhidbeySnippets#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/CS/Form1.cs#5)]\n [!code-vb[System.Drawing.MiscWhidbeySnippets#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/VB/Form1.vb#5)]"
  syntax:
    content: public void CopyFromScreen (System.Drawing.Point upperLeftSource, System.Drawing.Point upperLeftDestination, System.Drawing.Size blockRegionSize, System.Drawing.CopyPixelOperation copyPixelOperation);
    parameters:
    - id: upperLeftSource
      type: System.Drawing.Point
      description: The point at the upper-left corner of the source rectangle.
    - id: upperLeftDestination
      type: System.Drawing.Point
      description: The point at the upper-left corner of the destination rectangle.
    - id: blockRegionSize
      type: System.Drawing.Size
      description: The size of the area to be transferred.
    - id: copyPixelOperation
      type: System.Drawing.CopyPixelOperation
      description: One of the <xref href="System.Drawing.CopyPixelOperation"></xref> values.
  overload: System.Drawing.Graphics.CopyFromScreen*
  exceptions:
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: <code>copyPixelOperation</code> is not a member of <xref href="System.Drawing.CopyPixelOperation"></xref>.
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: The operation failed.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.Dispose
  commentId: M:System.Drawing.Graphics.Dispose
  id: Dispose
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: Dispose()
  nameWithType: Graphics.Dispose()
  fullName: Graphics.Dispose()
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Releases all resources used by this <xref href="System.Drawing.Graphics"></xref>.
  remarks: Calling <xref:System.Drawing.Graphics.Dispose%2A> allows the resources used by this <xref:System.Drawing.Graphics> to be reallocated for other purposes.
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates an <xref:System.Drawing.Image> from a graphics file SampImag.jpg in the example directory.  \n  \n-   Creates a <xref:System.Drawing.Graphics> from the <xref:System.Drawing.Image>.  \n  \n-   Alters the image by filling a rectangle within it.  \n  \n-   Draws the <xref:System.Drawing.Image> to the screen.  \n  \n-   Releases the created <xref:System.Drawing.Graphics>.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples#6](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#6)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples#6](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#6)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples#6](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#6)]"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Drawing.Graphics.Dispose*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.DpiX
  commentId: P:System.Drawing.Graphics.DpiX
  id: DpiX
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: DpiX
  nameWithType: Graphics.DpiX
  fullName: Graphics.DpiX
  type: Property
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Gets the horizontal resolution of this <xref href="System.Drawing.Graphics"></xref>.
  remarks: "For more information about creating high-resolution applications, see  \n  \n [High DPI](http://go.microsoft.com/fwlink/?LinkId=159804)."
  example:
  - "The following method shows the use of the <xref:System.Drawing.Graphics.DpiX%2A> and <xref:System.Drawing.Graphics.DpiY%2A> properties. This example is designed for use with a Windows Form. To run this example, paste it into a form that contains a <xref:System.Windows.Forms.ListBox> named listBox1 and call this method from the form's constructor.  \n  \n [!code-cpp[System.Drawing.MiscExamples#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.MiscExamples/CPP/form1.cpp#4)]\n [!code-csharp[System.Drawing.MiscExamples#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.MiscExamples/CS/form1.cs#4)]\n [!code-vb[System.Drawing.MiscExamples#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.MiscExamples/VB/form1.vb#4)]"
  syntax:
    content: public float DpiX { get; }
    return:
      type: System.Single
      description: The value, in dots per inch, for the horizontal resolution supported by this <xref href="System.Drawing.Graphics"></xref>.
  overload: System.Drawing.Graphics.DpiX*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.DpiY
  commentId: P:System.Drawing.Graphics.DpiY
  id: DpiY
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: DpiY
  nameWithType: Graphics.DpiY
  fullName: Graphics.DpiY
  type: Property
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Gets the vertical resolution of this <xref href="System.Drawing.Graphics"></xref>.
  remarks: "For more information about creating high-resolution applications, see  \n  \n [High DPI](http://go.microsoft.com/fwlink/?LinkId=159804)."
  example:
  - "The following method shows the use of the <xref:System.Drawing.Graphics.DpiX%2A> and <xref:System.Drawing.Graphics.DpiY%2A> properties. This example is designed for use with a Windows Form. To run this example, paste it into a form that contains a <xref:System.Windows.Forms.ListBox> named listBox1 and call this method from the form's constructor.  \n  \n [!code-cpp[System.Drawing.MiscExamples#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.MiscExamples/CPP/form1.cpp#4)]\n [!code-csharp[System.Drawing.MiscExamples#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.MiscExamples/CS/form1.cs#4)]\n [!code-vb[System.Drawing.MiscExamples#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.MiscExamples/VB/form1.vb#4)]"
  syntax:
    content: public float DpiY { get; }
    return:
      type: System.Single
      description: The value, in dots per inch, for the vertical resolution supported by this <xref href="System.Drawing.Graphics"></xref>.
  overload: System.Drawing.Graphics.DpiY*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.DrawArc(System.Drawing.Pen,System.Drawing.Rectangle,System.Single,System.Single)
  commentId: M:System.Drawing.Graphics.DrawArc(System.Drawing.Pen,System.Drawing.Rectangle,System.Single,System.Single)
  id: DrawArc(System.Drawing.Pen,System.Drawing.Rectangle,System.Single,System.Single)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: DrawArc(Pen, Rectangle, Single, Single)
  nameWithType: Graphics.DrawArc(Pen, Rectangle, Single, Single)
  fullName: Graphics.DrawArc(Pen, Rectangle, Single, Single)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Draws an arc representing a portion of an ellipse specified by a <xref href="System.Drawing.Rectangle"></xref> structure.
  remarks: This method draws an arc that is a portion of the perimeter of an ellipse. The ellipse is defined by the boundaries of a rectangle. The arc is the portion of the perimeter of the ellipse between the `startAngle` parameter and the `startAngle` + `sweepAngle` parameters.
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates a black pen.  \n  \n-   Creates a rectangle to bound an ellipse.  \n  \n-   Defines the start (45 degrees) and sweep (270 degrees) angles.  \n  \n-   Draws the elliptical arc to the screen.  \n  \n The result is a partial ellipse missing a segment between + and - 45 degrees of the x axis.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples#7](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#7)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples#7](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#7)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples#7](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#7)]"
  syntax:
    content: public void DrawArc (System.Drawing.Pen pen, System.Drawing.Rectangle rect, float startAngle, float sweepAngle);
    parameters:
    - id: pen
      type: System.Drawing.Pen
      description: <xref href="System.Drawing.Pen"></xref> that determines the color, width, and style of the arc.
    - id: rect
      type: System.Drawing.Rectangle
      description: <xref href="System.Drawing.RectangleF"></xref> structure that defines the boundaries of the ellipse.
    - id: startAngle
      type: System.Single
      description: Angle in degrees measured clockwise from the x-axis to the starting point of the arc.
    - id: sweepAngle
      type: System.Single
      description: Angle in degrees measured clockwise from the <code>startAngle</code> parameter to ending point of the arc.
  overload: System.Drawing.Graphics.DrawArc*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>pen</code> is `null`.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.DrawArc(System.Drawing.Pen,System.Drawing.RectangleF,System.Single,System.Single)
  commentId: M:System.Drawing.Graphics.DrawArc(System.Drawing.Pen,System.Drawing.RectangleF,System.Single,System.Single)
  id: DrawArc(System.Drawing.Pen,System.Drawing.RectangleF,System.Single,System.Single)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: DrawArc(Pen, RectangleF, Single, Single)
  nameWithType: Graphics.DrawArc(Pen, RectangleF, Single, Single)
  fullName: Graphics.DrawArc(Pen, RectangleF, Single, Single)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Draws an arc representing a portion of an ellipse specified by a <xref href="System.Drawing.RectangleF"></xref> structure.
  remarks: This method draws an arc that is a portion of the perimeter of an ellipse. The ellipse is defined by the boundaries of a rectangle. The arc is the portion of the perimeter of the ellipse between the `startAngle` parameter and the `startAngle` + `sweepAngle` parameters.
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates a black pen.  \n  \n-   Creates a rectangle to bound an ellipse.  \n  \n-   Defines the start (45 degrees) and sweep (270 degrees) angles.  \n  \n-   Draws the elliptical arc to the screen.  \n  \n The result is a partial ellipse missing a segment between + and - 45 degrees of the x axis.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples#8](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#8)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples#8](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#8)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples#8](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#8)]"
  syntax:
    content: public void DrawArc (System.Drawing.Pen pen, System.Drawing.RectangleF rect, float startAngle, float sweepAngle);
    parameters:
    - id: pen
      type: System.Drawing.Pen
      description: <xref href="System.Drawing.Pen"></xref> that determines the color, width, and style of the arc.
    - id: rect
      type: System.Drawing.RectangleF
      description: <xref href="System.Drawing.RectangleF"></xref> structure that defines the boundaries of the ellipse.
    - id: startAngle
      type: System.Single
      description: Angle in degrees measured clockwise from the x-axis to the starting point of the arc.
    - id: sweepAngle
      type: System.Single
      description: Angle in degrees measured clockwise from the <code>startAngle</code> parameter to ending point of the arc.
  overload: System.Drawing.Graphics.DrawArc*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>pen</code> is `null`
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.DrawArc(System.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  commentId: M:System.Drawing.Graphics.DrawArc(System.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  id: DrawArc(System.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: DrawArc(Pen, Int32, Int32, Int32, Int32, Int32, Int32)
  nameWithType: Graphics.DrawArc(Pen, Int32, Int32, Int32, Int32, Int32, Int32)
  fullName: Graphics.DrawArc(Pen, Int32, Int32, Int32, Int32, Int32, Int32)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Draws an arc representing a portion of an ellipse specified by a pair of coordinates, a width, and a height.
  remarks: This method draws an arc that is a portion of the perimeter of an ellipse. The ellipse is defined by the boundaries of a rectangle. The arc is the portion of the perimeter of the ellipse between the `startAngle` parameter and the `startAngle` + `sweepAngle` parameters.
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates a black pen.  \n  \n-   Creates the position and size of a rectangle to bound an ellipse.  \n  \n-   Defines the start (45 degrees) and sweep (270 degrees) angles.  \n  \n-   Draws the elliptical arc to the screen.  \n  \n The result is a partial ellipse missing a segment between + and - 45 degrees of the x axis.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples#9](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#9)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples#9](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#9)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples#9](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#9)]"
  syntax:
    content: public void DrawArc (System.Drawing.Pen pen, int x, int y, int width, int height, int startAngle, int sweepAngle);
    parameters:
    - id: pen
      type: System.Drawing.Pen
      description: <xref href="System.Drawing.Pen"></xref> that determines the color, width, and style of the arc.
    - id: x
      type: System.Int32
      description: The x-coordinate of the upper-left corner of the rectangle that defines the ellipse.
    - id: y
      type: System.Int32
      description: The y-coordinate of the upper-left corner of the rectangle that defines the ellipse.
    - id: width
      type: System.Int32
      description: Width of the rectangle that defines the ellipse.
    - id: height
      type: System.Int32
      description: Height of the rectangle that defines the ellipse.
    - id: startAngle
      type: System.Int32
      description: Angle in degrees measured clockwise from the x-axis to the starting point of the arc.
    - id: sweepAngle
      type: System.Int32
      description: Angle in degrees measured clockwise from the <code>startAngle</code> parameter to ending point of the arc.
  overload: System.Drawing.Graphics.DrawArc*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>rects</code> is a zero-length array.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.DrawArc(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)
  commentId: M:System.Drawing.Graphics.DrawArc(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)
  id: DrawArc(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: DrawArc(Pen, Single, Single, Single, Single, Single, Single)
  nameWithType: Graphics.DrawArc(Pen, Single, Single, Single, Single, Single, Single)
  fullName: Graphics.DrawArc(Pen, Single, Single, Single, Single, Single, Single)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Draws an arc representing a portion of an ellipse specified by a pair of coordinates, a width, and a height.
  remarks: This method draws an arc that is a portion of the perimeter of an ellipse. The ellipse is defined by the boundaries of a rectangle. The arc is the portion of the perimeter of the ellipse between the `startAngle` parameter and the `startAngle` + `sweepAngle` parameters.
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates a black pen.  \n  \n-   Creates the position and size of a rectangle to bound an ellipse.  \n  \n-   Defines the start (45 degrees) and sweep (270 degrees) angles.  \n  \n-   Draws the elliptical arc to the screen.  \n  \n The result is a partial ellipse missing a segment between + and - 45 degrees of the x axis.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples#10](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#10)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples#10](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#10)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples#10](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#10)]"
  syntax:
    content: public void DrawArc (System.Drawing.Pen pen, float x, float y, float width, float height, float startAngle, float sweepAngle);
    parameters:
    - id: pen
      type: System.Drawing.Pen
      description: <xref href="System.Drawing.Pen"></xref> that determines the color, width, and style of the arc.
    - id: x
      type: System.Single
      description: The x-coordinate of the upper-left corner of the rectangle that defines the ellipse.
    - id: y
      type: System.Single
      description: The y-coordinate of the upper-left corner of the rectangle that defines the ellipse.
    - id: width
      type: System.Single
      description: Width of the rectangle that defines the ellipse.
    - id: height
      type: System.Single
      description: Height of the rectangle that defines the ellipse.
    - id: startAngle
      type: System.Single
      description: Angle in degrees measured clockwise from the x-axis to the starting point of the arc.
    - id: sweepAngle
      type: System.Single
      description: Angle in degrees measured clockwise from the <code>startAngle</code> parameter to ending point of the arc.
  overload: System.Drawing.Graphics.DrawArc*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>pen</code> is `null`.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.DrawBezier(System.Drawing.Pen,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point)
  commentId: M:System.Drawing.Graphics.DrawBezier(System.Drawing.Pen,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point)
  id: DrawBezier(System.Drawing.Pen,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: DrawBezier(Pen, Point, Point, Point, Point)
  nameWithType: Graphics.DrawBezier(Pen, Point, Point, Point, Point)
  fullName: Graphics.DrawBezier(Pen, Point, Point, Point, Point)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Draws a Bézier spline defined by four <xref href="System.Drawing.Point"></xref> structures.
  remarks: The Bézier curve is drawn from the first point to the fourth point. The second and third points are control points that determine the shape of the curve.
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates a black pen.  \n  \n-   Creates the start, end, and two control points for the curve.  \n  \n-   Draws the Bézier curve to the screen.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples#11](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#11)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples#11](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#11)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples#11](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#11)]"
  syntax:
    content: public void DrawBezier (System.Drawing.Pen pen, System.Drawing.Point pt1, System.Drawing.Point pt2, System.Drawing.Point pt3, System.Drawing.Point pt4);
    parameters:
    - id: pen
      type: System.Drawing.Pen
      description: <xref href="System.Drawing.Pen"></xref> structure that determines the color, width, and style of the curve.
    - id: pt1
      type: System.Drawing.Point
      description: <xref href="System.Drawing.Point"></xref> structure that represents the starting point of the curve.
    - id: pt2
      type: System.Drawing.Point
      description: <xref href="System.Drawing.Point"></xref> structure that represents the first control point for the curve.
    - id: pt3
      type: System.Drawing.Point
      description: <xref href="System.Drawing.Point"></xref> structure that represents the second control point for the curve.
    - id: pt4
      type: System.Drawing.Point
      description: <xref href="System.Drawing.Point"></xref> structure that represents the ending point of the curve.
  overload: System.Drawing.Graphics.DrawBezier*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>pen</code> is `null`.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.DrawBezier(System.Drawing.Pen,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)
  commentId: M:System.Drawing.Graphics.DrawBezier(System.Drawing.Pen,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)
  id: DrawBezier(System.Drawing.Pen,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: DrawBezier(Pen, PointF, PointF, PointF, PointF)
  nameWithType: Graphics.DrawBezier(Pen, PointF, PointF, PointF, PointF)
  fullName: Graphics.DrawBezier(Pen, PointF, PointF, PointF, PointF)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Draws a Bézier spline defined by four <xref href="System.Drawing.PointF"></xref> structures.
  remarks: The Bézier spline is drawn from the first point to the fourth point. The second and third points are control points that determine the shape of the curve.
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates a black pen.  \n  \n-   Creates the start, end, and two control points for the curve.  \n  \n-   Draws the Bézier curve to the screen.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples#12](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#12)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples#12](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#12)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples#12](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#12)]"
  syntax:
    content: public void DrawBezier (System.Drawing.Pen pen, System.Drawing.PointF pt1, System.Drawing.PointF pt2, System.Drawing.PointF pt3, System.Drawing.PointF pt4);
    parameters:
    - id: pen
      type: System.Drawing.Pen
      description: <xref href="System.Drawing.Pen"></xref> that determines the color, width, and style of the curve.
    - id: pt1
      type: System.Drawing.PointF
      description: <xref href="System.Drawing.PointF"></xref> structure that represents the starting point of the curve.
    - id: pt2
      type: System.Drawing.PointF
      description: <xref href="System.Drawing.PointF"></xref> structure that represents the first control point for the curve.
    - id: pt3
      type: System.Drawing.PointF
      description: <xref href="System.Drawing.PointF"></xref> structure that represents the second control point for the curve.
    - id: pt4
      type: System.Drawing.PointF
      description: <xref href="System.Drawing.PointF"></xref> structure that represents the ending point of the curve.
  overload: System.Drawing.Graphics.DrawBezier*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>pen</code> is `null`.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.DrawBezier(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)
  commentId: M:System.Drawing.Graphics.DrawBezier(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)
  id: DrawBezier(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: DrawBezier(Pen, Single, Single, Single, Single, Single, Single, Single, Single)
  nameWithType: Graphics.DrawBezier(Pen, Single, Single, Single, Single, Single, Single, Single, Single)
  fullName: Graphics.DrawBezier(Pen, Single, Single, Single, Single, Single, Single, Single, Single)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Draws a Bézier spline defined by four ordered pairs of coordinates that represent points.
  remarks: The Bézier spline is drawn from the first point to the fourth point. The second and third points are control points that determine the shape of the curve.
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates a black pen.  \n  \n-   Creates the coordinates of the start, end, and two control points for the curve.  \n  \n-   Draws the Bézier curve to the screen.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples#13](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#13)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples#13](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#13)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples#13](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#13)]"
  syntax:
    content: public void DrawBezier (System.Drawing.Pen pen, float x1, float y1, float x2, float y2, float x3, float y3, float x4, float y4);
    parameters:
    - id: pen
      type: System.Drawing.Pen
      description: <xref href="System.Drawing.Pen"></xref> that determines the color, width, and style of the curve.
    - id: x1
      type: System.Single
      description: The x-coordinate of the starting point of the curve.
    - id: y1
      type: System.Single
      description: The y-coordinate of the starting point of the curve.
    - id: x2
      type: System.Single
      description: The x-coordinate of the first control point of the curve.
    - id: y2
      type: System.Single
      description: The y-coordinate of the first control point of the curve.
    - id: x3
      type: System.Single
      description: The x-coordinate of the second control point of the curve.
    - id: y3
      type: System.Single
      description: The y-coordinate of the second control point of the curve.
    - id: x4
      type: System.Single
      description: The x-coordinate of the ending point of the curve.
    - id: y4
      type: System.Single
      description: The y-coordinate of the ending point of the curve.
  overload: System.Drawing.Graphics.DrawBezier*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>pen</code> is `null`.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.DrawBeziers(System.Drawing.Pen,System.Drawing.PointF[])
  commentId: M:System.Drawing.Graphics.DrawBeziers(System.Drawing.Pen,System.Drawing.PointF[])
  id: DrawBeziers(System.Drawing.Pen,System.Drawing.PointF[])
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: DrawBeziers(Pen, PointF[])
  nameWithType: Graphics.DrawBeziers(Pen, PointF[])
  fullName: Graphics.DrawBeziers(Pen, PointF[])
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Draws a series of Bézier splines from an array of <xref href="System.Drawing.PointF"></xref> structures.
  remarks: 'The number of points in the array should be a multiple of 3 plus 1 because the first spline requires 4 points and any other splines require 3 points each. The first Bézier curve is drawn from the first point to the fourth point in the point array. The second and third points are control points that determine the shape of the curve. Each subsequent curve needs exactly three more points: two more control points and an ending point. The ending point of the previous curve is used as the starting point for each additional curve.'
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates a black pen.  \n  \n-   Creates the start, end, and two control points for a first curve and endpoint and two control points for a second curve.  \n  \n-   Draws the successive Bézier curves to the screen.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples#15](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#15)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples#15](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#15)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples#15](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#15)]"
  syntax:
    content: public void DrawBeziers (System.Drawing.Pen pen, System.Drawing.PointF[] points);
    parameters:
    - id: pen
      type: System.Drawing.Pen
      description: <xref href="System.Drawing.Pen"></xref> that determines the color, width, and style of the curve.
    - id: points
      type: System.Drawing.PointF[]
      description: Array of <xref href="System.Drawing.PointF"></xref> structures that represent the points that determine the curve. The number of points in the array should be a multiple of 3 plus 1, such as 4, 7, or 10.
  overload: System.Drawing.Graphics.DrawBeziers*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>pen</code> is `null`.  \n  \n -or-  \n  \n <code>points</code> is `null`."
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.DrawBeziers(System.Drawing.Pen,System.Drawing.Point[])
  commentId: M:System.Drawing.Graphics.DrawBeziers(System.Drawing.Pen,System.Drawing.Point[])
  id: DrawBeziers(System.Drawing.Pen,System.Drawing.Point[])
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: DrawBeziers(Pen, Point[])
  nameWithType: Graphics.DrawBeziers(Pen, Point[])
  fullName: Graphics.DrawBeziers(Pen, Point[])
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Draws a series of Bézier splines from an array of <xref href="System.Drawing.Point"></xref> structures.
  remarks: 'The number of points in the array should be a multiple of 3 plus 1 because the first spline requires 4 points and any other splines require 3 points each. The first Bézier spline is drawn from the first point to the fourth point in the point array. The second and third points are control points that determine the shape of the curve. Each subsequent curve needs exactly three more points: two more control points and an ending point. The ending point of the previous curve is used as the starting point for each additional curve.'
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates a black pen.  \n  \n-   Creates the start, end, and two control points for a first curve and endpoint and two control points for a second curve.  \n  \n-   Draws the successive Bézier curves to the screen.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples#14](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#14)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples#14](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#14)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples#14](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#14)]"
  syntax:
    content: public void DrawBeziers (System.Drawing.Pen pen, System.Drawing.Point[] points);
    parameters:
    - id: pen
      type: System.Drawing.Pen
      description: <xref href="System.Drawing.Pen"></xref> that determines the color, width, and style of the curve.
    - id: points
      type: System.Drawing.Point[]
      description: Array of <xref href="System.Drawing.Point"></xref> structures that represent the points that determine the curve. The number of points in the array should be a multiple of 3 plus 1, such as 4, 7, or 10.
  overload: System.Drawing.Graphics.DrawBeziers*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>pen</code> is `null`.  \n  \n -or-  \n  \n <code>points</code> is `null`."
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.DrawClosedCurve(System.Drawing.Pen,System.Drawing.Point[],System.Single,System.Drawing.Drawing2D.FillMode)
  commentId: M:System.Drawing.Graphics.DrawClosedCurve(System.Drawing.Pen,System.Drawing.Point[],System.Single,System.Drawing.Drawing2D.FillMode)
  id: DrawClosedCurve(System.Drawing.Pen,System.Drawing.Point[],System.Single,System.Drawing.Drawing2D.FillMode)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: DrawClosedCurve(Pen, Point[], Single, FillMode)
  nameWithType: Graphics.DrawClosedCurve(Pen, Point[], Single, FillMode)
  fullName: Graphics.DrawClosedCurve(Pen, Point[], Single, FillMode)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Draws a closed cardinal spline defined by an array of <xref href="System.Drawing.Point"></xref> structures using a specified tension.
  remarks: "This method draws a closed cardinal spline that passes through each point in the array. If the last point does not match the first point, an additional curve segment is added from the last point to the first point to close it.  \n  \n The array of points must contain at least four <xref:System.Drawing.Point> structures.  \n  \n The `tension` parameter determines the shape of the spline. If the value of the `tension` parameter is 0.0F, this method draws straight line segments to connect the points. Usually, the `tension` parameter is less than or equal to 1.0F. Values over 1.0F produce unusual results."
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates red and green pens.  \n  \n-   Creates seven points to define the curve.  \n  \n-   Draws seven red straight lines between the seven points to form a polygon.  \n  \n-   Creates tension and fill mode settings.  \n  \n-   Draws a green closed curve through the seven points.  \n  \n The method uses a tension of 1.0 and sets the fill mode to `FillMode.Alternate`.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples#17](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#17)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples#17](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#17)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples#17](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#17)]"
  syntax:
    content: public void DrawClosedCurve (System.Drawing.Pen pen, System.Drawing.Point[] points, float tension, System.Drawing.Drawing2D.FillMode fillmode);
    parameters:
    - id: pen
      type: System.Drawing.Pen
      description: <xref href="System.Drawing.Pen"></xref> that determines the color, width, and height of the curve.
    - id: points
      type: System.Drawing.Point[]
      description: Array of <xref href="System.Drawing.Point"></xref> structures that define the spline.
    - id: tension
      type: System.Single
      description: Value greater than or equal to 0.0F that specifies the tension of the curve.
    - id: fillmode
      type: System.Drawing.Drawing2D.FillMode
      description: Member of the <xref href="System.Drawing.Drawing2D.FillMode"></xref> enumeration that determines how the curve is filled. This parameter is required but ignored.
  overload: System.Drawing.Graphics.DrawClosedCurve*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>pen</code> is `null`.  \n  \n -or-  \n  \n <code>points</code> is `null`."
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.DrawClosedCurve(System.Drawing.Pen,System.Drawing.PointF[],System.Single,System.Drawing.Drawing2D.FillMode)
  commentId: M:System.Drawing.Graphics.DrawClosedCurve(System.Drawing.Pen,System.Drawing.PointF[],System.Single,System.Drawing.Drawing2D.FillMode)
  id: DrawClosedCurve(System.Drawing.Pen,System.Drawing.PointF[],System.Single,System.Drawing.Drawing2D.FillMode)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: DrawClosedCurve(Pen, PointF[], Single, FillMode)
  nameWithType: Graphics.DrawClosedCurve(Pen, PointF[], Single, FillMode)
  fullName: Graphics.DrawClosedCurve(Pen, PointF[], Single, FillMode)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Draws a closed cardinal spline defined by an array of <xref href="System.Drawing.PointF"></xref> structures using a specified tension.
  remarks: "This method draws a closed cardinal spline that passes through each point in the array. If the last point does not match the first point, an additional curve segment is added from the last point to the first point to close it.  \n  \n The array of points must contain at least four <xref:System.Drawing.PointF> structures.  \n  \n The `tension` parameter determines the shape of the spline. If the value of the `tension` parameter is 0.0F, this method draws straight line segments to connect the points. Usually, the `tension` parameter is less than or equal to 1.0F. Values over 1.0F produce unusual results."
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates red and green pens.  \n  \n-   Creates seven points to define the curve.  \n  \n-   Draws seven red straight lines between the seven points to form a polygon.  \n  \n-   Creates tension and fill mode settings.  \n  \n-   Draws a green closed curve through the seven points.  \n  \n The method uses a tension of 1.0 and sets the fill mode to `FillMode.Alternate`.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples#19](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#19)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples#19](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#19)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples#19](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#19)]"
  syntax:
    content: public void DrawClosedCurve (System.Drawing.Pen pen, System.Drawing.PointF[] points, float tension, System.Drawing.Drawing2D.FillMode fillmode);
    parameters:
    - id: pen
      type: System.Drawing.Pen
      description: <xref href="System.Drawing.Pen"></xref> that determines the color, width, and height of the curve.
    - id: points
      type: System.Drawing.PointF[]
      description: Array of <xref href="System.Drawing.PointF"></xref> structures that define the spline.
    - id: tension
      type: System.Single
      description: Value greater than or equal to 0.0F that specifies the tension of the curve.
    - id: fillmode
      type: System.Drawing.Drawing2D.FillMode
      description: Member of the <xref href="System.Drawing.Drawing2D.FillMode"></xref> enumeration that determines how the curve is filled. This parameter is required but is ignored.
  overload: System.Drawing.Graphics.DrawClosedCurve*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>pen</code> is `null`.  \n  \n -or-  \n  \n <code>points</code> is `null`."
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.DrawClosedCurve(System.Drawing.Pen,System.Drawing.Point[])
  commentId: M:System.Drawing.Graphics.DrawClosedCurve(System.Drawing.Pen,System.Drawing.Point[])
  id: DrawClosedCurve(System.Drawing.Pen,System.Drawing.Point[])
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: DrawClosedCurve(Pen, Point[])
  nameWithType: Graphics.DrawClosedCurve(Pen, Point[])
  fullName: Graphics.DrawClosedCurve(Pen, Point[])
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Draws a closed cardinal spline defined by an array of <xref href="System.Drawing.Point"></xref> structures.
  remarks: "This method draws a closed cardinal spline that passes through each point in the array. If the last point does not match the first point, an additional curve segment is added from the last point to the first point to close the figure.  \n  \n The array of points must contain at least four <xref:System.Drawing.Point> structures.  \n  \n This method uses a default tension of 0.5."
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates red and green pens.  \n  \n-   Creates seven points to define a curve.  \n  \n-   Draws seven red straight lines between the seven points to form a closed polygon.  \n  \n-   Draws a green closed curve through the seven points.  \n  \n The method uses a default tension of 0.5.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples#16](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#16)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples#16](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#16)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples#16](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#16)]"
  syntax:
    content: public void DrawClosedCurve (System.Drawing.Pen pen, System.Drawing.Point[] points);
    parameters:
    - id: pen
      type: System.Drawing.Pen
      description: <xref href="System.Drawing.Pen"></xref> that determines the color, width, and height of the curve.
    - id: points
      type: System.Drawing.Point[]
      description: Array of <xref href="System.Drawing.Point"></xref> structures that define the spline.
  overload: System.Drawing.Graphics.DrawClosedCurve*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>pen</code> is `null`.  \n  \n -or-  \n  \n <code>points</code> is `null`."
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.DrawClosedCurve(System.Drawing.Pen,System.Drawing.PointF[])
  commentId: M:System.Drawing.Graphics.DrawClosedCurve(System.Drawing.Pen,System.Drawing.PointF[])
  id: DrawClosedCurve(System.Drawing.Pen,System.Drawing.PointF[])
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: DrawClosedCurve(Pen, PointF[])
  nameWithType: Graphics.DrawClosedCurve(Pen, PointF[])
  fullName: Graphics.DrawClosedCurve(Pen, PointF[])
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Draws a closed cardinal spline defined by an array of <xref href="System.Drawing.PointF"></xref> structures.
  remarks: "This method draws a closed cardinal spline that passes through each point in the array. If the last point does not match the first point, an additional curve segment is added from the last point to the first point to close it.  \n  \n The array of points must contain at least four <xref:System.Drawing.PointF> structures.  \n  \n This method uses a default tension of 0.5."
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates red and green pens.  \n  \n-   Creates seven points to define a curve.  \n  \n-   Draws seven red straight lines between the seven points to form a closed polygon.  \n  \n-   Draws a green closed curve through the seven points.  \n  \n The method uses a default tension of 0.5.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples#18](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#18)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples#18](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#18)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples#18](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#18)]"
  syntax:
    content: public void DrawClosedCurve (System.Drawing.Pen pen, System.Drawing.PointF[] points);
    parameters:
    - id: pen
      type: System.Drawing.Pen
      description: <xref href="System.Drawing.Pen"></xref> that determines the color, width, and height of the curve.
    - id: points
      type: System.Drawing.PointF[]
      description: Array of <xref href="System.Drawing.PointF"></xref> structures that define the spline.
  overload: System.Drawing.Graphics.DrawClosedCurve*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>pen</code> is `null`.  \n  \n -or-  \n  \n <code>points</code> is `null`."
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.DrawCurve(System.Drawing.Pen,System.Drawing.Point[])
  commentId: M:System.Drawing.Graphics.DrawCurve(System.Drawing.Pen,System.Drawing.Point[])
  id: DrawCurve(System.Drawing.Pen,System.Drawing.Point[])
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: DrawCurve(Pen, Point[])
  nameWithType: Graphics.DrawCurve(Pen, Point[])
  fullName: Graphics.DrawCurve(Pen, Point[])
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Draws a cardinal spline through a specified array of <xref href="System.Drawing.Point"></xref> structures.
  remarks: "This method draws a cardinal spline that passes through each point in the array.  \n  \n The array of points must contain at least three <xref:System.Drawing.Point> structures for a curve to be drawn.  \n  \n This method uses a default tension of 0.5."
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates red and green pens.  \n  \n-   Creates seven points to define a curve.  \n  \n-   Draws six red straight lines between the seven points to form an incomplete polygon.  \n  \n-   Draws an open green curve through the seven points.  \n  \n The method uses a default tension of 0.5.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples#20](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#20)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples#20](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#20)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples#20](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#20)]"
  syntax:
    content: public void DrawCurve (System.Drawing.Pen pen, System.Drawing.Point[] points);
    parameters:
    - id: pen
      type: System.Drawing.Pen
      description: <xref href="System.Drawing.Pen"></xref> that determines the color, width, and height of the curve.
    - id: points
      type: System.Drawing.Point[]
      description: Array of <xref href="System.Drawing.Point"></xref> structures that define the spline.
  overload: System.Drawing.Graphics.DrawCurve*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>pen</code> is `null`.  \n  \n -or-  \n  \n <code>points</code> is `null`."
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.DrawCurve(System.Drawing.Pen,System.Drawing.PointF[])
  commentId: M:System.Drawing.Graphics.DrawCurve(System.Drawing.Pen,System.Drawing.PointF[])
  id: DrawCurve(System.Drawing.Pen,System.Drawing.PointF[])
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: DrawCurve(Pen, PointF[])
  nameWithType: Graphics.DrawCurve(Pen, PointF[])
  fullName: Graphics.DrawCurve(Pen, PointF[])
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Draws a cardinal spline through a specified array of <xref href="System.Drawing.PointF"></xref> structures.
  remarks: "This method draws a cardinal spline that passes through each point in the array.  \n  \n The array of points must contain at least three <xref:System.Drawing.PointF> structures for a curve to be drawn.  \n  \n This method uses a default tension of 0.5."
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates red and green pens.  \n  \n-   Creates seven points to define a curve.  \n  \n-   Draws six red straight lines between the seven points to form an incomplete polygon.  \n  \n-   Draws an open green curve through the seven points.  \n  \n The method uses a default tension of 0.5.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples#23](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#23)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples#23](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#23)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples#23](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#23)]"
  syntax:
    content: public void DrawCurve (System.Drawing.Pen pen, System.Drawing.PointF[] points);
    parameters:
    - id: pen
      type: System.Drawing.Pen
      description: <xref href="System.Drawing.Pen"></xref> that determines the color, width, and style of the curve.
    - id: points
      type: System.Drawing.PointF[]
      description: Array of <xref href="System.Drawing.PointF"></xref> structures that define the spline.
  overload: System.Drawing.Graphics.DrawCurve*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>pen</code> is `null`.  \n  \n -or-  \n  \n <code>points</code> is `null`."
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.DrawCurve(System.Drawing.Pen,System.Drawing.Point[],System.Single)
  commentId: M:System.Drawing.Graphics.DrawCurve(System.Drawing.Pen,System.Drawing.Point[],System.Single)
  id: DrawCurve(System.Drawing.Pen,System.Drawing.Point[],System.Single)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: DrawCurve(Pen, Point[], Single)
  nameWithType: Graphics.DrawCurve(Pen, Point[], Single)
  fullName: Graphics.DrawCurve(Pen, Point[], Single)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Draws a cardinal spline through a specified array of <xref href="System.Drawing.Point"></xref> structures using a specified tension.
  remarks: "This method draws a cardinal spline that passes through each point in the array.  \n  \n The array of points must contain at least three <xref:System.Drawing.Point> structures for a curve to be drawn.  \n  \n The `tension` parameter determines the shape of the spline. If the value of the `tension` parameter is 0.0F, this method draws straight line segments to connect the points. Usually, the `tension` parameter is less than or equal to 1.0F. Values over 1.0F produce unusual results."
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates red and green pens.  \n  \n-   Creates seven points to define the curve.  \n  \n-   Draws six red straight lines between the seven points to form an incomplete polygon.  \n  \n-   Creates a tension setting.  \n  \n-   Draws an open green closed curve through the seven points.  \n  \n The method uses a tension of 1.0.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples#22](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#22)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples#22](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#22)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples#22](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#22)]"
  syntax:
    content: public void DrawCurve (System.Drawing.Pen pen, System.Drawing.Point[] points, float tension);
    parameters:
    - id: pen
      type: System.Drawing.Pen
      description: <xref href="System.Drawing.Pen"></xref> that determines the color, width, and style of the curve.
    - id: points
      type: System.Drawing.Point[]
      description: Array of <xref href="System.Drawing.Point"></xref> structures that define the spline.
    - id: tension
      type: System.Single
      description: Value greater than or equal to 0.0F that specifies the tension of the curve.
  overload: System.Drawing.Graphics.DrawCurve*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>pen</code> is `null`.  \n  \n -or-  \n  \n <code>points</code> is `null`."
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.DrawCurve(System.Drawing.Pen,System.Drawing.PointF[],System.Single)
  commentId: M:System.Drawing.Graphics.DrawCurve(System.Drawing.Pen,System.Drawing.PointF[],System.Single)
  id: DrawCurve(System.Drawing.Pen,System.Drawing.PointF[],System.Single)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: DrawCurve(Pen, PointF[], Single)
  nameWithType: Graphics.DrawCurve(Pen, PointF[], Single)
  fullName: Graphics.DrawCurve(Pen, PointF[], Single)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Draws a cardinal spline through a specified array of <xref href="System.Drawing.PointF"></xref> structures using a specified tension.
  remarks: "This method draws a cardinal spline that passes through each point in the array.  \n  \n The array of points must contain at least three <xref:System.Drawing.PointF> structures for a curve to be drawn.  \n  \n The `tension` parameter determines the shape of the spline. If the value of the `tension` parameter is 0.0F, this method draws straight line segments to connect the points. Usually, the `tension` parameter is less than or equal to 1.0F. Values over 1.0F produce unusual results."
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates red and green pens.  \n  \n-   Creates seven points to define the curve.  \n  \n-   Draws six red straight lines between the seven points to form an incomplete polygon.  \n  \n-   Creates a tension setting.  \n  \n-   Draws an open green closed curve through the seven points.  \n  \n The method uses a tension of 1.0.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples#26](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#26)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples#26](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#26)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples#26](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#26)]"
  syntax:
    content: public void DrawCurve (System.Drawing.Pen pen, System.Drawing.PointF[] points, float tension);
    parameters:
    - id: pen
      type: System.Drawing.Pen
      description: <xref href="System.Drawing.Pen"></xref> that determines the color, width, and style of the curve.
    - id: points
      type: System.Drawing.PointF[]
      description: Array of <xref href="System.Drawing.PointF"></xref> structures that represent the points that define the curve.
    - id: tension
      type: System.Single
      description: Value greater than or equal to 0.0F that specifies the tension of the curve.
  overload: System.Drawing.Graphics.DrawCurve*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>pen</code> is `null`.  \n  \n -or-  \n  \n <code>points</code> is `null`."
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.DrawCurve(System.Drawing.Pen,System.Drawing.PointF[],System.Int32,System.Int32)
  commentId: M:System.Drawing.Graphics.DrawCurve(System.Drawing.Pen,System.Drawing.PointF[],System.Int32,System.Int32)
  id: DrawCurve(System.Drawing.Pen,System.Drawing.PointF[],System.Int32,System.Int32)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: DrawCurve(Pen, PointF[], Int32, Int32)
  nameWithType: Graphics.DrawCurve(Pen, PointF[], Int32, Int32)
  fullName: Graphics.DrawCurve(Pen, PointF[], Int32, Int32)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Draws a cardinal spline through a specified array of <xref href="System.Drawing.PointF"></xref> structures. The drawing begins offset from the beginning of the array.
  remarks: "This method draws a cardinal spline that passes through each point in the array.  \n  \n The array of points must contain at least three <xref:System.Drawing.PointF> structures for a curve to be drawn.  \n  \n The value of the `offset` parameter specifies the number of elements to skip in the array. The first element after the skipped elements represents the starting point of the curve.  \n  \n The value of the `numberOfSegments` parameter specifies the number of segments, after the starting point, to draw in the curve. The value of the `numberOfSegments` parameter must be at least 1. The value of the `offset` parameter plus the value of the `numberOfSegments` parameter must be less than the number of elements in the array of the `points` parameter.  \n  \n This method uses a default tension of 0.5."
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates red and green pens.  \n  \n-   Creates seven points to define a curve.  \n  \n-   Draws six red straight lines between the seven points to form an incomplete polygon.  \n  \n-   Defines the starting point offset and number of segments.  \n  \n-   Draws an open green curve (starting at the third point) through the last five points.  \n  \n The method uses a default tension of 0.5.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples#24](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#24)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples#24](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#24)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples#24](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#24)]"
  syntax:
    content: public void DrawCurve (System.Drawing.Pen pen, System.Drawing.PointF[] points, int offset, int numberOfSegments);
    parameters:
    - id: pen
      type: System.Drawing.Pen
      description: <xref href="System.Drawing.Pen"></xref> that determines the color, width, and style of the curve.
    - id: points
      type: System.Drawing.PointF[]
      description: Array of <xref href="System.Drawing.PointF"></xref> structures that define the spline.
    - id: offset
      type: System.Int32
      description: Offset from the first element in the array of the <code>points</code> parameter to the starting point in the curve.
    - id: numberOfSegments
      type: System.Int32
      description: Number of segments after the starting point to include in the curve.
  overload: System.Drawing.Graphics.DrawCurve*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>pen</code> is `null`.  \n  \n -or-  \n  \n <code>points</code> is `null`."
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.DrawCurve(System.Drawing.Pen,System.Drawing.Point[],System.Int32,System.Int32,System.Single)
  commentId: M:System.Drawing.Graphics.DrawCurve(System.Drawing.Pen,System.Drawing.Point[],System.Int32,System.Int32,System.Single)
  id: DrawCurve(System.Drawing.Pen,System.Drawing.Point[],System.Int32,System.Int32,System.Single)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: DrawCurve(Pen, Point[], Int32, Int32, Single)
  nameWithType: Graphics.DrawCurve(Pen, Point[], Int32, Int32, Single)
  fullName: Graphics.DrawCurve(Pen, Point[], Int32, Int32, Single)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Draws a cardinal spline through a specified array of <xref href="System.Drawing.Point"></xref> structures using a specified tension.
  remarks: "This method draws a cardinal spline that passes through each point in the array.  \n  \n The array of points must contain at least three <xref:System.Drawing.Point> structures for a curve to be drawn.  \n  \n The value of the `offset` parameter specifies the number of elements to skip in the array. The first element after the skipped elements represents the starting point of the curve.  \n  \n The value of the `numberOfSegments` parameter specifies the number of segments, after the starting point, to draw in the curve. The value of the `numberOfSegments` parameter must be at least 1. The value of the `offset` parameter plus the value of the `numberOfSegments` parameter must be less than the number of elements in the array of the `points` parameter.  \n  \n The `tension` parameter determines the shape of the spline. If the value of the `tension` parameter is 0.0F, this method draws straight line segments to connect the points. Usually, the `tension` parameter is less than or equal to 1.0F. Values over 1.0F produce unusual results."
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates red and green pens.  \n  \n-   Creates seven points to define a curve.  \n  \n-   Draws six red straight lines between the seven points to form an incomplete polygon.  \n  \n-   Defines the starting point offset and number of segments.  \n  \n-   Defines the tension.  \n  \n-   Draws an open green curve (starting at the third point) through the last five points.  \n  \n The method sets the tension to 1.0.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples#21](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#21)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples#21](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#21)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples#21](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#21)]"
  syntax:
    content: public void DrawCurve (System.Drawing.Pen pen, System.Drawing.Point[] points, int offset, int numberOfSegments, float tension);
    parameters:
    - id: pen
      type: System.Drawing.Pen
      description: <xref href="System.Drawing.Pen"></xref> that determines the color, width, and style of the curve.
    - id: points
      type: System.Drawing.Point[]
      description: Array of <xref href="System.Drawing.Point"></xref> structures that define the spline.
    - id: offset
      type: System.Int32
      description: Offset from the first element in the array of the <code>points</code> parameter to the starting point in the curve.
    - id: numberOfSegments
      type: System.Int32
      description: Number of segments after the starting point to include in the curve.
    - id: tension
      type: System.Single
      description: Value greater than or equal to 0.0F that specifies the tension of the curve.
  overload: System.Drawing.Graphics.DrawCurve*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>pen</code> is `null`.  \n  \n -or-  \n  \n <code>points</code> is `null`."
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.DrawCurve(System.Drawing.Pen,System.Drawing.PointF[],System.Int32,System.Int32,System.Single)
  commentId: M:System.Drawing.Graphics.DrawCurve(System.Drawing.Pen,System.Drawing.PointF[],System.Int32,System.Int32,System.Single)
  id: DrawCurve(System.Drawing.Pen,System.Drawing.PointF[],System.Int32,System.Int32,System.Single)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: DrawCurve(Pen, PointF[], Int32, Int32, Single)
  nameWithType: Graphics.DrawCurve(Pen, PointF[], Int32, Int32, Single)
  fullName: Graphics.DrawCurve(Pen, PointF[], Int32, Int32, Single)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Draws a cardinal spline through a specified array of <xref href="System.Drawing.PointF"></xref> structures using a specified tension. The drawing begins offset from the beginning of the array.
  remarks: "This method draws a cardinal spline that passes through each point in the array.  \n  \n The array of points must contain at least three <xref:System.Drawing.PointF> structures for curve to be drawn.  \n  \n The value of the `offset` parameter specifies the number of elements to skip in the array. The first element after the skipped elements represents the starting point of the curve.  \n  \n The value of the `numberOfSegments` parameter specifies the number of segments, after the starting point, to draw in the curve. The value of the `numberOfSegments` parameter must be at least 1. The value of the `offset` parameter plus the value of the `numberOfSegments` parameter must be less than the number of elements in the array of the `points` parameter.  \n  \n The `tension` parameter determines the shape of the spline. If the value of the `tension` parameter is 0.0F, this method draws straight line segments to connect the points. Usually, the `tension` parameter is less than or equal to 1.0F. Values over 1.0F produce unusual results."
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates red and green pens.  \n  \n-   Creates seven points to define a curve.  \n  \n-   Draws six red straight lines between the seven points to form an incomplete polygon.  \n  \n-   Defines the starting point offset and number of segments.  \n  \n-   Defines the tension.  \n  \n-   Draws an open green curve (starting at the third point) through the last five points.  \n  \n The method sets the tension to 1.0.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples#25](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#25)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples#25](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#25)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples#25](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#25)]"
  syntax:
    content: public void DrawCurve (System.Drawing.Pen pen, System.Drawing.PointF[] points, int offset, int numberOfSegments, float tension);
    parameters:
    - id: pen
      type: System.Drawing.Pen
      description: <xref href="System.Drawing.Pen"></xref> that determines the color, width, and style of the curve.
    - id: points
      type: System.Drawing.PointF[]
      description: Array of <xref href="System.Drawing.PointF"></xref> structures that define the spline.
    - id: offset
      type: System.Int32
      description: Offset from the first element in the array of the <code>points</code> parameter to the starting point in the curve.
    - id: numberOfSegments
      type: System.Int32
      description: Number of segments after the starting point to include in the curve.
    - id: tension
      type: System.Single
      description: Value greater than or equal to 0.0F that specifies the tension of the curve.
  overload: System.Drawing.Graphics.DrawCurve*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>pen</code> is `null`.  \n  \n -or-  \n  \n <code>points</code> is `null`."
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.DrawEllipse(System.Drawing.Pen,System.Drawing.Rectangle)
  commentId: M:System.Drawing.Graphics.DrawEllipse(System.Drawing.Pen,System.Drawing.Rectangle)
  id: DrawEllipse(System.Drawing.Pen,System.Drawing.Rectangle)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: DrawEllipse(Pen, Rectangle)
  nameWithType: Graphics.DrawEllipse(Pen, Rectangle)
  fullName: Graphics.DrawEllipse(Pen, Rectangle)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Draws an ellipse specified by a bounding <xref href="System.Drawing.Rectangle"></xref> structure.
  remarks: This method draws an ellipse that is defined by the bounding rectangle specified by the `rect` parameter.
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates a black pen.  \n  \n-   Creates a rectangle to bound an ellipse.  \n  \n-   Draws the ellipse to the screen.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples#27](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#27)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples#27](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#27)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples#27](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#27)]"
  syntax:
    content: public void DrawEllipse (System.Drawing.Pen pen, System.Drawing.Rectangle rect);
    parameters:
    - id: pen
      type: System.Drawing.Pen
      description: <xref href="System.Drawing.Pen"></xref> that determines the color, width, and style of the ellipse.
    - id: rect
      type: System.Drawing.Rectangle
      description: <xref href="System.Drawing.Rectangle"></xref> structure that defines the boundaries of the ellipse.
  overload: System.Drawing.Graphics.DrawEllipse*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>pen</code> is `null`.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.DrawEllipse(System.Drawing.Pen,System.Drawing.RectangleF)
  commentId: M:System.Drawing.Graphics.DrawEllipse(System.Drawing.Pen,System.Drawing.RectangleF)
  id: DrawEllipse(System.Drawing.Pen,System.Drawing.RectangleF)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: DrawEllipse(Pen, RectangleF)
  nameWithType: Graphics.DrawEllipse(Pen, RectangleF)
  fullName: Graphics.DrawEllipse(Pen, RectangleF)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Draws an ellipse defined by a bounding <xref href="System.Drawing.RectangleF"></xref>.
  remarks: This method draws an ellipse that is defined by the bounding rectangle specified by the `rect` parameter.
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates a black pen.  \n  \n-   Creates a rectangle to bound an ellipse.  \n  \n-   Draws the ellipse to the screen.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples#28](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#28)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples#28](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#28)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples#28](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#28)]"
  syntax:
    content: public void DrawEllipse (System.Drawing.Pen pen, System.Drawing.RectangleF rect);
    parameters:
    - id: pen
      type: System.Drawing.Pen
      description: <xref href="System.Drawing.Pen"></xref> that determines the color, width, and style of the ellipse.
    - id: rect
      type: System.Drawing.RectangleF
      description: <xref href="System.Drawing.RectangleF"></xref> structure that defines the boundaries of the ellipse.
  overload: System.Drawing.Graphics.DrawEllipse*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>pen</code> is `null`.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.DrawEllipse(System.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32)
  commentId: M:System.Drawing.Graphics.DrawEllipse(System.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32)
  id: DrawEllipse(System.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: DrawEllipse(Pen, Int32, Int32, Int32, Int32)
  nameWithType: Graphics.DrawEllipse(Pen, Int32, Int32, Int32, Int32)
  fullName: Graphics.DrawEllipse(Pen, Int32, Int32, Int32, Int32)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Draws an ellipse defined by a bounding rectangle specified by coordinates for the upper-left corner of the rectangle, a height, and a width.
  remarks: This method draws an ellipse that is defined by the bounding rectangle described by the `x`, `y`, `width`, and `height` parameters.
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates a black pen.  \n  \n-   Creates the position and size of a rectangle to bound an ellipse.  \n  \n-   Draws the ellipse to the screen.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples#29](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#29)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples#29](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#29)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples#29](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#29)]"
  syntax:
    content: public void DrawEllipse (System.Drawing.Pen pen, int x, int y, int width, int height);
    parameters:
    - id: pen
      type: System.Drawing.Pen
      description: <xref href="System.Drawing.Pen"></xref> that determines the color, width, and style of the ellipse.
    - id: x
      type: System.Int32
      description: The x-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse.
    - id: y
      type: System.Int32
      description: The y-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse.
    - id: width
      type: System.Int32
      description: Width of the bounding rectangle that defines the ellipse.
    - id: height
      type: System.Int32
      description: Height of the bounding rectangle that defines the ellipse.
  overload: System.Drawing.Graphics.DrawEllipse*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>pen</code> is `null`.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.DrawEllipse(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single)
  commentId: M:System.Drawing.Graphics.DrawEllipse(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single)
  id: DrawEllipse(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: DrawEllipse(Pen, Single, Single, Single, Single)
  nameWithType: Graphics.DrawEllipse(Pen, Single, Single, Single, Single)
  fullName: Graphics.DrawEllipse(Pen, Single, Single, Single, Single)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Draws an ellipse defined by a bounding rectangle specified by a pair of coordinates, a height, and a width.
  remarks: This method draws an ellipse that is defined by the bounding rectangle described by the `x`, `y`, `width`, and `height` parameters.
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates a black pen.  \n  \n-   Creates the position and size of a rectangle to bound an ellipse.  \n  \n-   Draws the ellipse to the screen.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples#30](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#30)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples#30](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#30)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples#30](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#30)]"
  syntax:
    content: public void DrawEllipse (System.Drawing.Pen pen, float x, float y, float width, float height);
    parameters:
    - id: pen
      type: System.Drawing.Pen
      description: <xref href="System.Drawing.Pen"></xref> that determines the color, width, and style of the ellipse.
    - id: x
      type: System.Single
      description: The x-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse.
    - id: y
      type: System.Single
      description: The y-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse.
    - id: width
      type: System.Single
      description: Width of the bounding rectangle that defines the ellipse.
    - id: height
      type: System.Single
      description: Height of the bounding rectangle that defines the ellipse.
  overload: System.Drawing.Graphics.DrawEllipse*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>pen</code> is `null`.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.DrawIcon(System.Drawing.Icon,System.Int32,System.Int32)
  commentId: M:System.Drawing.Graphics.DrawIcon(System.Drawing.Icon,System.Int32,System.Int32)
  id: DrawIcon(System.Drawing.Icon,System.Int32,System.Int32)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: DrawIcon(Icon, Int32, Int32)
  nameWithType: Graphics.DrawIcon(Icon, Int32, Int32)
  fullName: Graphics.DrawIcon(Icon, Int32, Int32)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Draws the image represented by the specified <xref href="System.Drawing.Icon"></xref> at the specified coordinates.
  remarks: ''
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates an icon from a standard Windows icon file SampIcon.ico in the example folder.  \n  \n-   Creates the coordinates of the upper-left corner at which to draw the icon.  \n  \n-   Draws the icon to the screen.  \n  \n The drawn icon is unscaled.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples#32](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#32)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples#32](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#32)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples#32](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#32)]"
  syntax:
    content: public void DrawIcon (System.Drawing.Icon icon, int x, int y);
    parameters:
    - id: icon
      type: System.Drawing.Icon
      description: <xref href="System.Drawing.Icon"></xref> to draw.
    - id: x
      type: System.Int32
      description: The x-coordinate of the upper-left corner of the drawn image.
    - id: y
      type: System.Int32
      description: The y-coordinate of the upper-left corner of the drawn image.
  overload: System.Drawing.Graphics.DrawIcon*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>icon</code> is `null`.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.DrawIcon(System.Drawing.Icon,System.Drawing.Rectangle)
  commentId: M:System.Drawing.Graphics.DrawIcon(System.Drawing.Icon,System.Drawing.Rectangle)
  id: DrawIcon(System.Drawing.Icon,System.Drawing.Rectangle)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: DrawIcon(Icon, Rectangle)
  nameWithType: Graphics.DrawIcon(Icon, Rectangle)
  fullName: Graphics.DrawIcon(Icon, Rectangle)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Draws the image represented by the specified <xref href="System.Drawing.Icon"></xref> within the area specified by a <xref href="System.Drawing.Rectangle"></xref> structure.
  remarks: ''
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates an icon from a standard Windows icon file SampIcon.ico in the example folder.  \n  \n-   Creates a rectangle in which to draw the icon.  \n  \n-   Draws the icon to the screen.  \n  \n The position of the rectangle locates the icon on the screen, and the size of the rectangle determines the scaling of the drawn icon.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples#31](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#31)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples#31](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#31)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples#31](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#31)]"
  syntax:
    content: public void DrawIcon (System.Drawing.Icon icon, System.Drawing.Rectangle targetRect);
    parameters:
    - id: icon
      type: System.Drawing.Icon
      description: <xref href="System.Drawing.Icon"></xref> to draw.
    - id: targetRect
      type: System.Drawing.Rectangle
      description: <xref href="System.Drawing.Rectangle"></xref> structure that specifies the location and size of the resulting image on the display surface. The image contained in the <code>icon</code> parameter is scaled to the dimensions of this rectangular area.
  overload: System.Drawing.Graphics.DrawIcon*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>icon</code> is `null`.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.DrawIconUnstretched(System.Drawing.Icon,System.Drawing.Rectangle)
  commentId: M:System.Drawing.Graphics.DrawIconUnstretched(System.Drawing.Icon,System.Drawing.Rectangle)
  id: DrawIconUnstretched(System.Drawing.Icon,System.Drawing.Rectangle)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: DrawIconUnstretched(Icon, Rectangle)
  nameWithType: Graphics.DrawIconUnstretched(Icon, Rectangle)
  fullName: Graphics.DrawIconUnstretched(Icon, Rectangle)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Draws the image represented by the specified <xref href="System.Drawing.Icon"></xref> without scaling the image.
  remarks: ''
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates an icon from a standard Windows icon file SampIcon.ico in the example folder.  \n  \n-   Creates a rectangle in which to draw the icon.  \n  \n-   Draws the icon to the screen.  \n  \n The position of the rectangle locates the icon on the screen, and the drawn icon is unscaled and unclipped.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples#33](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#33)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples#33](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#33)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples#33](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#33)]"
  syntax:
    content: public void DrawIconUnstretched (System.Drawing.Icon icon, System.Drawing.Rectangle targetRect);
    parameters:
    - id: icon
      type: System.Drawing.Icon
      description: <xref href="System.Drawing.Icon"></xref> to draw.
    - id: targetRect
      type: System.Drawing.Rectangle
      description: <xref href="System.Drawing.Rectangle"></xref> structure that specifies the location and size of the resulting image. The image is not scaled to fit this rectangle, but retains its original size. If the image is larger than the rectangle, it is clipped to fit inside it.
  overload: System.Drawing.Graphics.DrawIconUnstretched*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>icon</code> is `null`.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Single,System.Single,System.Drawing.RectangleF,System.Drawing.GraphicsUnit)
  commentId: M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Single,System.Single,System.Drawing.RectangleF,System.Drawing.GraphicsUnit)
  id: DrawImage(System.Drawing.Image,System.Single,System.Single,System.Drawing.RectangleF,System.Drawing.GraphicsUnit)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: DrawImage(Image, Single, Single, RectangleF, GraphicsUnit)
  nameWithType: Graphics.DrawImage(Image, Single, Single, RectangleF, GraphicsUnit)
  fullName: Graphics.DrawImage(Image, Single, Single, RectangleF, GraphicsUnit)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Draws a portion of an image at a specified location.
  remarks: "An <xref:System.Drawing.Image> stores a value for pixel width and a value for horizontal resolution (dots per inch). The physical width, measured in inches, of an image is the pixel width divided by the horizontal resolution. For example, an image with a pixel width of 360 and a horizontal resolution of 72 dots per inch has a physical width of 5 inches. Similar remarks apply to pixel height and physical height.  \n  \n This method draws a portion of an image using its physical size, so the image portion will have its correct size in inches regardless of the resolution (dots per inch) of the display device. For example, suppose an image portion has a pixel width of 216 and a horizontal resolution of 72 dots per inch. If you call this method to draw that image portion on a device that has a resolution of 96 dots per inch, the pixel width of the rendered image portion will be (216/72)*96 = 288."
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates an image from a JPEG file SampImag.jpg in the folder of the example.  \n  \n-   Creates the coordinates at which to draw the upper-left corner of the image.  \n  \n-   Creates a source rectangle from which to extract a portion of the image.  \n  \n-   Sets the unit of measure of the source rectangle to pixels.  \n  \n-   Draws the image to the screen.  \n  \n The size of the source rectangle determines what portion of the unscaled original image is drawn to the screen.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples2#62](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#62)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples2#62](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#62)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples2#62](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#62)]"
  syntax:
    content: public void DrawImage (System.Drawing.Image image, float x, float y, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit);
    parameters:
    - id: image
      type: System.Drawing.Image
      description: <xref href="System.Drawing.Image"></xref> to draw.
    - id: x
      type: System.Single
      description: The x-coordinate of the upper-left corner of the drawn image.
    - id: y
      type: System.Single
      description: The y-coordinate of the upper-left corner of the drawn image.
    - id: srcRect
      type: System.Drawing.RectangleF
      description: <xref href="System.Drawing.RectangleF"></xref> structure that specifies the portion of the <xref href="System.Drawing.Image"></xref> to draw.
    - id: srcUnit
      type: System.Drawing.GraphicsUnit
      description: Member of the <xref href="System.Drawing.GraphicsUnit"></xref> enumeration that specifies the units of measure used by the <code>srcRect</code> parameter.
  overload: System.Drawing.Graphics.DrawImage*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>image</code> is `null`.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Single,System.Single,System.Single,System.Single,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.IntPtr)
  commentId: M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Single,System.Single,System.Single,System.Single,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.IntPtr)
  id: DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Single,System.Single,System.Single,System.Single,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.IntPtr)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: DrawImage(Image, Rectangle, Single, Single, Single, Single, GraphicsUnit, ImageAttributes, Graphics+DrawImageAbort, IntPtr)
  nameWithType: Graphics.DrawImage(Image, Rectangle, Single, Single, Single, Single, GraphicsUnit, ImageAttributes, Graphics+DrawImageAbort, IntPtr)
  fullName: Graphics.DrawImage(Image, Rectangle, Single, Single, Single, Single, GraphicsUnit, ImageAttributes, Graphics+DrawImageAbort, IntPtr)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Draws the specified portion of the specified <xref href="System.Drawing.Image"></xref> at the specified location and with the specified size.
  remarks: "The `srcX`, `srcY`, `srcWidth`, and `srcHeight` parameters specify a rectangular portion, of the `image` object to draw. The rectangle is relative to the upper-left corner of the source image. This portion is scaled to fit inside the rectangle specified by the `destRect` parameter.  \n  \n This overload with the `callback` and `callbackData` parameters provides the means to stop the drawing of an image once it starts according to criteria and data determined by the application. For example, an application could start drawing a large image and the user might scroll the image off the screen, in which case the application could stop the drawing."
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code first defines a callback method for the <xref:System.Drawing.Graphics.DrawImageAbort> delegate; the definition is simplistic and merely tests to see whether the <xref:System.Drawing.Graphics.DrawImage%2A> method calls it with a null `callBackData` parameter. The main body of the example performs the following actions:  \n  \n-   Creates an instance of the <xref:System.Drawing.Graphics.DrawImageAbort> callback method.  \n  \n-   Creates an image from a JPEG file SampImag.jpg in the folder of the example.  \n  \n-   Creates points that define a destination rectangle in which to draw the image.  \n  \n-   Creates a source rectangle to select the portion of the image to draw.  \n  \n-   Sets the graphics drawing unit to pixel.  \n  \n-   Draws the original image to the screen.  \n  \n-   Creates an additional destination rectangle in which to draw an adjusted image.  \n  \n-   Creates and sets the attributes of the adjusted image to have a larger-than-usual gamma value.  \n  \n-   Draws the adjusted image to the screen.  \n  \n For the original, unadjusted destination rectangle, the position locates the image on the screen, and the size of the source rectangle and the size and shape of the destination rectangle determines the scaling of the drawn image.  \n  \n Because this example uses an overload that passes a `callBackData` parameter, the <xref:System.Drawing.Graphics.DrawImageAbort> callback returns `false`, which causes the <xref:System.Drawing.Graphics.DrawImage%2A> method to continue, and the example draws the adjusted image to the screen.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples2#55](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#55)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples2#55](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#55)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples2#55](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#55)]"
  syntax:
    content: public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle destRect, float srcX, float srcY, float srcWidth, float srcHeight, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttrs, System.Drawing.Graphics.DrawImageAbort callback, IntPtr callbackData);
    parameters:
    - id: image
      type: System.Drawing.Image
      description: <xref href="System.Drawing.Image"></xref> to draw.
    - id: destRect
      type: System.Drawing.Rectangle
      description: <xref href="System.Drawing.Rectangle"></xref> structure that specifies the location and size of the drawn image. The image is scaled to fit the rectangle.
    - id: srcX
      type: System.Single
      description: The x-coordinate of the upper-left corner of the portion of the source image to draw.
    - id: srcY
      type: System.Single
      description: The y-coordinate of the upper-left corner of the portion of the source image to draw.
    - id: srcWidth
      type: System.Single
      description: Width of the portion of the source image to draw.
    - id: srcHeight
      type: System.Single
      description: Height of the portion of the source image to draw.
    - id: srcUnit
      type: System.Drawing.GraphicsUnit
      description: Member of the <xref href="System.Drawing.GraphicsUnit"></xref> enumeration that specifies the units of measure used to determine the source rectangle.
    - id: imageAttrs
      type: System.Drawing.Imaging.ImageAttributes
      description: <xref href="System.Drawing.Imaging.ImageAttributes"></xref> that specifies recoloring and gamma information for the <code>image</code> object.
    - id: callback
      type: System.Drawing.Graphics+DrawImageAbort
      description: <xref href="System.Drawing.Graphics.DrawImageAbort"></xref> delegate that specifies a method to call during the drawing of the image. This method is called frequently to check whether to stop execution of the <xref href="System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Single,System.Single,System.Single,System.Single,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.IntPtr)"></xref> method according to application-determined criteria.
    - id: callbackData
      type: System.IntPtr
      description: Value specifying additional data for the <xref href="System.Drawing.Graphics.DrawImageAbort"></xref> delegate to use when checking whether to stop execution of the `DrawImage` method.
  overload: System.Drawing.Graphics.DrawImage*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>image</code> is `null`.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.IntPtr)
  commentId: M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.IntPtr)
  id: DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.IntPtr)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: DrawImage(Image, Rectangle, Int32, Int32, Int32, Int32, GraphicsUnit, ImageAttributes, Graphics+DrawImageAbort, IntPtr)
  nameWithType: Graphics.DrawImage(Image, Rectangle, Int32, Int32, Int32, Int32, GraphicsUnit, ImageAttributes, Graphics+DrawImageAbort, IntPtr)
  fullName: Graphics.DrawImage(Image, Rectangle, Int32, Int32, Int32, Int32, GraphicsUnit, ImageAttributes, Graphics+DrawImageAbort, IntPtr)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Draws the specified portion of the specified <xref href="System.Drawing.Image"></xref> at the specified location and with the specified size.
  remarks: "The `srcX`, `srcY`, `srcWidth`, and `srcHeight` parameters specify a rectangular portion, of the `image` object to draw. The rectangle is relative to the upper-left corner of the source image. This portion is scaled to fit inside the rectangle specified by the `destRect` parameter.  \n  \n This overload with the `callback` and `callbackData` parameters provides the means to stop the drawing of an image once it starts according to criteria and data determined by the application. For example, an application could start drawing a large image and the user might scroll the image off the screen, in which case the application could stop the drawing."
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code first defines a callback method for the <xref:System.Drawing.Graphics.DrawImageAbort> delegate; the definition is simplistic and merely tests to see whether the <xref:System.Drawing.Graphics.DrawImage%2A> method calls it with a null `callBackData` parameter. The main body of the example performs the following actions:  \n  \n-   Creates an instance of the <xref:System.Drawing.Graphics.DrawImageAbort> callback method.  \n  \n-   Creates an image from a JPEG file SampImag.jpg in the folder of the example.  \n  \n-   Creates points that define a destination rectangle in which to draw the image.  \n  \n-   Creates a source rectangle to select the portion of the image to draw.  \n  \n-   Sets the graphics drawing unit to pixel.  \n  \n-   Draws the original image to the screen.  \n  \n-   Creates an additional destination rectangle in which to draw an adjusted image.  \n  \n-   Creates and sets the attributes of the adjusted image to have a larger-than-usual gamma value.  \n  \n-   Draws the adjusted image to the screen.  \n  \n For the original, unadjusted destination rectangle, the position locates the image on the screen, and the size of the source rectangle and the size and shape of the destination rectangle determines the scaling of the drawn image.  \n  \n Because this example uses an overload that passes a `callBackData` parameter, the <xref:System.Drawing.Graphics.DrawImageAbort> callback returns `false`, which causes the <xref:System.Drawing.Graphics.DrawImage%2A> method to continue, and the example draws the adjusted image to the screen.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples#51](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#51)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples#51](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#51)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples#51](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#51)]"
  syntax:
    content: public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle destRect, int srcX, int srcY, int srcWidth, int srcHeight, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttrs, System.Drawing.Graphics.DrawImageAbort callback, IntPtr callbackData);
    parameters:
    - id: image
      type: System.Drawing.Image
      description: <xref href="System.Drawing.Image"></xref> to draw.
    - id: destRect
      type: System.Drawing.Rectangle
      description: <xref href="System.Drawing.Rectangle"></xref> structure that specifies the location and size of the drawn image. The image is scaled to fit the rectangle.
    - id: srcX
      type: System.Int32
      description: The x-coordinate of the upper-left corner of the portion of the source image to draw.
    - id: srcY
      type: System.Int32
      description: The y-coordinate of the upper-left corner of the portion of the source image to draw.
    - id: srcWidth
      type: System.Int32
      description: Width of the portion of the source image to draw.
    - id: srcHeight
      type: System.Int32
      description: Height of the portion of the source image to draw.
    - id: srcUnit
      type: System.Drawing.GraphicsUnit
      description: Member of the <xref href="System.Drawing.GraphicsUnit"></xref> enumeration that specifies the units of measure used to determine the source rectangle.
    - id: imageAttrs
      type: System.Drawing.Imaging.ImageAttributes
      description: <xref href="System.Drawing.Imaging.ImageAttributes"></xref> that specifies recoloring and gamma information for the <code>image</code> object.
    - id: callback
      type: System.Drawing.Graphics+DrawImageAbort
      description: <xref href="System.Drawing.Graphics.DrawImageAbort"></xref> delegate that specifies a method to call during the drawing of the image. This method is called frequently to check whether to stop execution of the <xref href="System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.IntPtr)"></xref> method according to application-determined criteria.
    - id: callbackData
      type: System.IntPtr
      description: Value specifying additional data for the <xref href="System.Drawing.Graphics.DrawImageAbort"></xref> delegate to use when checking whether to stop execution of the `DrawImage` method.
  overload: System.Drawing.Graphics.DrawImage*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>image</code> is `null`.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Single,System.Single,System.Single,System.Single,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)
  commentId: M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Single,System.Single,System.Single,System.Single,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)
  id: DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Single,System.Single,System.Single,System.Single,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: DrawImage(Image, Rectangle, Single, Single, Single, Single, GraphicsUnit, ImageAttributes, Graphics+DrawImageAbort)
  nameWithType: Graphics.DrawImage(Image, Rectangle, Single, Single, Single, Single, GraphicsUnit, ImageAttributes, Graphics+DrawImageAbort)
  fullName: Graphics.DrawImage(Image, Rectangle, Single, Single, Single, Single, GraphicsUnit, ImageAttributes, Graphics+DrawImageAbort)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Draws the specified portion of the specified <xref href="System.Drawing.Image"></xref> at the specified location and with the specified size.
  remarks: "The `srcX`, `srcY`, `srcWidth`, and `srcHeight` parameters specify a rectangular portion, of the `image` object to draw. The rectangle is relative to the upper-left corner of the source image. This portion is scaled to fit inside the rectangle specified by the `destRect` parameter.  \n  \n This overload with the `callback` parameter provides the means to stop the drawing of an image once it starts according to criteria determined by the application. For example, an application could start drawing a large image and the user might scroll the image off the screen, in which case the application could stop the drawing."
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code first defines a callback method for the <xref:System.Drawing.Graphics.DrawImageAbort> delegate; the definition is simplistic and merely tests to see whether the <xref:System.Drawing.Graphics.DrawImage%2A> method calls it with a null `callBackData` parameter. The main body of the example performs the following actions:  \n  \n-   Creates an instance of the <xref:System.Drawing.Graphics.DrawImageAbort> callback method.  \n  \n-   Creates an image from a JPEG file SampImag.jpg in the folder of the example.  \n  \n-   Creates points that define a destination rectangle in which to draw the image.  \n  \n-   Creates a source rectangle to select the portion of the image to draw.  \n  \n-   Sets the graphics drawing unit to pixel.  \n  \n-   Draws the original image to the screen.  \n  \n-   Creates an additional destination rectangle in which to draw an adjusted image.  \n  \n-   Creates and sets the attributes of the adjusted image to have a larger-than-usual gamma value.  \n  \n-   Draws the adjusted image to the screen.  \n  \n For the original, unadjusted destination rectangle, the position locates the image on the screen, and the size of the source rectangle and the size and shape of the destination rectangle determines the scaling of the drawn image.  \n  \n Because this example uses an overload that does not pass a `callBackData` parameter, the <xref:System.Drawing.Graphics.DrawImageAbort> callback returns `true`, which causes the <xref:System.Drawing.Graphics.DrawImage%2A> method to end, and the exception-handling code included in the example prints out the exception text rather than drawing the image.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples#54](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#54)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples#54](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#54)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples#54](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#54)]"
  syntax:
    content: public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle destRect, float srcX, float srcY, float srcWidth, float srcHeight, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttrs, System.Drawing.Graphics.DrawImageAbort callback);
    parameters:
    - id: image
      type: System.Drawing.Image
      description: <xref href="System.Drawing.Image"></xref> to draw.
    - id: destRect
      type: System.Drawing.Rectangle
      description: <xref href="System.Drawing.Rectangle"></xref> structure that specifies the location and size of the drawn image. The image is scaled to fit the rectangle.
    - id: srcX
      type: System.Single
      description: The x-coordinate of the upper-left corner of the portion of the source image to draw.
    - id: srcY
      type: System.Single
      description: The y-coordinate of the upper-left corner of the portion of the source image to draw.
    - id: srcWidth
      type: System.Single
      description: Width of the portion of the source image to draw.
    - id: srcHeight
      type: System.Single
      description: Height of the portion of the source image to draw.
    - id: srcUnit
      type: System.Drawing.GraphicsUnit
      description: Member of the <xref href="System.Drawing.GraphicsUnit"></xref> enumeration that specifies the units of measure used to determine the source rectangle.
    - id: imageAttrs
      type: System.Drawing.Imaging.ImageAttributes
      description: <xref href="System.Drawing.Imaging.ImageAttributes"></xref> that specifies recoloring and gamma information for the <code>image</code> object.
    - id: callback
      type: System.Drawing.Graphics+DrawImageAbort
      description: <xref href="System.Drawing.Graphics.DrawImageAbort"></xref> delegate that specifies a method to call during the drawing of the image. This method is called frequently to check whether to stop execution of the <xref href="System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Single,System.Single,System.Single,System.Single,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)"></xref> method according to application-determined criteria.
  overload: System.Drawing.Graphics.DrawImage*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>image</code> is `null`.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)
  commentId: M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)
  id: DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: DrawImage(Image, Rectangle, Int32, Int32, Int32, Int32, GraphicsUnit, ImageAttributes, Graphics+DrawImageAbort)
  nameWithType: Graphics.DrawImage(Image, Rectangle, Int32, Int32, Int32, Int32, GraphicsUnit, ImageAttributes, Graphics+DrawImageAbort)
  fullName: Graphics.DrawImage(Image, Rectangle, Int32, Int32, Int32, Int32, GraphicsUnit, ImageAttributes, Graphics+DrawImageAbort)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Draws the specified portion of the specified <xref href="System.Drawing.Image"></xref> at the specified location and with the specified size.
  remarks: "The `srcX`, `srcY`, `srcWidth`, and `srcHeight` parameters specify a rectangular portion, of the `image` object to draw. The rectangle is relative to the upper-left corner of the source image. This portion is scaled to fit inside the rectangle specified by the `destRect` object.  \n  \n This overload with the `callback` parameter provides the means to stop the drawing of an image once it starts according to criteria determined by the application. For example, an application could start drawing a large image and the user might scroll the image off the screen, in which case the application could stop the drawing."
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code first defines a callback method for the <xref:System.Drawing.Graphics.DrawImageAbort> delegate; the definition is simplistic and merely tests to see whether the <xref:System.Drawing.Graphics.DrawImage%2A> method calls it with a null `callBackData` parameter. The main body of the example performs the following actions:  \n  \n-   Creates an instance of the <xref:System.Drawing.Graphics.DrawImageAbort> callback method.  \n  \n-   Creates an image from a JPEG file SampImag.jpg in the folder of the example.  \n  \n-   Creates points that define a destination rectangle in which to draw the image.  \n  \n-   Creates a source rectangle to select the portion of the image to draw.  \n  \n-   Sets the graphics drawing unit to pixel.  \n  \n-   Draws the original image to the screen.  \n  \n-   Creates an additional destination rectangle in which to draw an adjusted image.  \n  \n-   Creates and sets the attributes of the adjusted image to have a larger-than-usual gamma value.  \n  \n-   Draws the adjusted image to the screen.  \n  \n For the original, unadjusted destination rectangle, the position locates the image on the screen, and the size of the source rectangle and the size and shape of the destination rectangle determines the scaling of the drawn image.  \n  \n Because this example uses an overload that does not pass a `callBackData` parameter, the <xref:System.Drawing.Graphics.DrawImageAbort> callback returns `true`, which causes the <xref:System.Drawing.Graphics.DrawImage%2A> method to end, and the exception-handling code included in the example prints out the exception text rather than drawing the image.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples#50](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#50)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples#50](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#50)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples#50](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#50)]"
  syntax:
    content: public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle destRect, int srcX, int srcY, int srcWidth, int srcHeight, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttr, System.Drawing.Graphics.DrawImageAbort callback);
    parameters:
    - id: image
      type: System.Drawing.Image
      description: <xref href="System.Drawing.Image"></xref> to draw.
    - id: destRect
      type: System.Drawing.Rectangle
      description: <xref href="System.Drawing.Rectangle"></xref> structure that specifies the location and size of the drawn image. The image is scaled to fit the rectangle.
    - id: srcX
      type: System.Int32
      description: The x-coordinate of the upper-left corner of the portion of the source image to draw.
    - id: srcY
      type: System.Int32
      description: The y-coordinate of the upper-left corner of the portion of the source image to draw.
    - id: srcWidth
      type: System.Int32
      description: Width of the portion of the source image to draw.
    - id: srcHeight
      type: System.Int32
      description: Height of the portion of the source image to draw.
    - id: srcUnit
      type: System.Drawing.GraphicsUnit
      description: Member of the <xref href="System.Drawing.GraphicsUnit"></xref> enumeration that specifies the units of measure used to determine the source rectangle.
    - id: imageAttr
      type: System.Drawing.Imaging.ImageAttributes
      description: <xref href="System.Drawing.Imaging.ImageAttributes"></xref> that specifies recoloring and gamma information for <code>image</code>.
    - id: callback
      type: System.Drawing.Graphics+DrawImageAbort
      description: <xref href="System.Drawing.Graphics.DrawImageAbort"></xref> delegate that specifies a method to call during the drawing of the image. This method is called frequently to check whether to stop execution of the <xref href="System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)"></xref> method according to application-determined criteria.
  overload: System.Drawing.Graphics.DrawImage*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>image</code> is `null`.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Single,System.Single,System.Single,System.Single,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes)
  commentId: M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Single,System.Single,System.Single,System.Single,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes)
  id: DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Single,System.Single,System.Single,System.Single,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: DrawImage(Image, Rectangle, Single, Single, Single, Single, GraphicsUnit, ImageAttributes)
  nameWithType: Graphics.DrawImage(Image, Rectangle, Single, Single, Single, Single, GraphicsUnit, ImageAttributes)
  fullName: Graphics.DrawImage(Image, Rectangle, Single, Single, Single, Single, GraphicsUnit, ImageAttributes)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Draws the specified portion of the specified <xref href="System.Drawing.Image"></xref> at the specified location and with the specified size.
  remarks: The `srcX`, `srcY`, `srcWidth`, and `srcHeight` parameters specify a rectangular portion, of the `image` object to draw. The rectangle is relative to the upper-left corner of the source image. This portion is scaled to fit inside the rectangle specified by the `destRect` parameter.
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates an image from a JPEG file SampImag.jpg in the folder of the example.  \n  \n-   Creates a destination rectangle in which to draw the image.  \n  \n-   Creates the coordinates of a source rectangle from which to extract a portion of the image.  \n  \n-   Sets the unit of measure of the source rectangle to pixels.  \n  \n-   Draws the original image to the screen.  \n  \n-   Creates an additional rectangle in which to draw an adjusted image.  \n  \n-   Creates and sets the attributes of the adjusted image to have a larger-than-usual gamma value.  \n  \n-   Draws the adjusted image to the screen.  \n  \n For the original, unadjusted destination rectangle, the position locates the image on the screen, and the sizes of the source and destination rectangles determine the scaling of the drawn image, and the size of the source rectangle determines what portion of the original image is drawn to the screen.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples#53](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#53)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples#53](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#53)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples#53](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#53)]"
  syntax:
    content: public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle destRect, float srcX, float srcY, float srcWidth, float srcHeight, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttrs);
    parameters:
    - id: image
      type: System.Drawing.Image
      description: <xref href="System.Drawing.Image"></xref> to draw.
    - id: destRect
      type: System.Drawing.Rectangle
      description: <xref href="System.Drawing.Rectangle"></xref> structure that specifies the location and size of the drawn image. The image is scaled to fit the rectangle.
    - id: srcX
      type: System.Single
      description: The x-coordinate of the upper-left corner of the portion of the source image to draw.
    - id: srcY
      type: System.Single
      description: The y-coordinate of the upper-left corner of the portion of the source image to draw.
    - id: srcWidth
      type: System.Single
      description: Width of the portion of the source image to draw.
    - id: srcHeight
      type: System.Single
      description: Height of the portion of the source image to draw.
    - id: srcUnit
      type: System.Drawing.GraphicsUnit
      description: Member of the <xref href="System.Drawing.GraphicsUnit"></xref> enumeration that specifies the units of measure used to determine the source rectangle.
    - id: imageAttrs
      type: System.Drawing.Imaging.ImageAttributes
      description: <xref href="System.Drawing.Imaging.ImageAttributes"></xref> that specifies recoloring and gamma information for the <code>image</code> object.
  overload: System.Drawing.Graphics.DrawImage*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>image</code> is `null`.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes)
  commentId: M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes)
  id: DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: DrawImage(Image, Rectangle, Int32, Int32, Int32, Int32, GraphicsUnit, ImageAttributes)
  nameWithType: Graphics.DrawImage(Image, Rectangle, Int32, Int32, Int32, Int32, GraphicsUnit, ImageAttributes)
  fullName: Graphics.DrawImage(Image, Rectangle, Int32, Int32, Int32, Int32, GraphicsUnit, ImageAttributes)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Draws the specified portion of the specified <xref href="System.Drawing.Image"></xref> at the specified location and with the specified size.
  remarks: The `srcX`, `srcY`, `srcWidth`, and `srcHeight` parameters specify a rectangular portion, of the `image` object to draw. The rectangle is relative to the upper-left corner of the source image. This portion is scaled to fit inside the rectangle specified by the `destRect` parameter.
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates an image from a JPEG file SampImag.jpg in the folder of the example.  \n  \n-   Creates a destination rectangle in which to draw the image.  \n  \n-   Creates the coordinates of a source rectangle from which to extract a portion of the image.  \n  \n-   Sets the unit of measure of the source rectangle to pixels.  \n  \n-   Draws the original image to the screen.  \n  \n-   Creates an additional rectangle in which to draw an adjusted image.  \n  \n-   Creates and sets the attributes of the adjusted image to have a larger-than-usual gamma value.  \n  \n-   Draws the adjusted image to the screen.  \n  \n For the original, unadjusted destination rectangle, the position locates the image on the screen, and the sizes of the source and destination rectangles determine the scaling of the drawn image, and the size of the source rectangle determines what portion of the original image is drawn to the screen.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples#49](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#49)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples#49](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#49)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples#49](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#49)]"
  syntax:
    content: public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle destRect, int srcX, int srcY, int srcWidth, int srcHeight, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttr);
    parameters:
    - id: image
      type: System.Drawing.Image
      description: <xref href="System.Drawing.Image"></xref> to draw.
    - id: destRect
      type: System.Drawing.Rectangle
      description: <xref href="System.Drawing.Rectangle"></xref> structure that specifies the location and size of the drawn image. The image is scaled to fit the rectangle.
    - id: srcX
      type: System.Int32
      description: The x-coordinate of the upper-left corner of the portion of the source image to draw.
    - id: srcY
      type: System.Int32
      description: The y-coordinate of the upper-left corner of the portion of the source image to draw.
    - id: srcWidth
      type: System.Int32
      description: Width of the portion of the source image to draw.
    - id: srcHeight
      type: System.Int32
      description: Height of the portion of the source image to draw.
    - id: srcUnit
      type: System.Drawing.GraphicsUnit
      description: Member of the <xref href="System.Drawing.GraphicsUnit"></xref> enumeration that specifies the units of measure used to determine the source rectangle.
    - id: imageAttr
      type: System.Drawing.Imaging.ImageAttributes
      description: <xref href="System.Drawing.Imaging.ImageAttributes"></xref> that specifies recoloring and gamma information for the <code>image</code> object.
  overload: System.Drawing.Graphics.DrawImage*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>image</code> is `null`.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Single,System.Single,System.Single,System.Single,System.Drawing.GraphicsUnit)
  commentId: M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Single,System.Single,System.Single,System.Single,System.Drawing.GraphicsUnit)
  id: DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Single,System.Single,System.Single,System.Single,System.Drawing.GraphicsUnit)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: DrawImage(Image, Rectangle, Single, Single, Single, Single, GraphicsUnit)
  nameWithType: Graphics.DrawImage(Image, Rectangle, Single, Single, Single, Single, GraphicsUnit)
  fullName: Graphics.DrawImage(Image, Rectangle, Single, Single, Single, Single, GraphicsUnit)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Draws the specified portion of the specified <xref href="System.Drawing.Image"></xref> at the specified location and with the specified size.
  remarks: The `srcX`, `srcY`, `srcWidth`, and `srcHeight` parameters specify a rectangular portion, of the `image` object to draw. The rectangle is relative to the upper-left corner of the source image. This portion is scaled to fit inside the rectangle specified by the `destRect` parameter.
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates an image from a JPEG file SampImag.jpg in the folder of the example.  \n  \n-   Creates the coordinates of a destination rectangle in which to draw the image.  \n  \n-   Creates a source rectangle from which to extract a portion of the image.  \n  \n-   Sets the unit of measure of the source rectangle to pixels.  \n  \n-   Draws the image to the screen.  \n  \n The position of the destination rectangle locates the image on the screen, the sizes of the source and destination rectangles determine the scaling of the drawn image, and the size of the source rectangle determines what portion of the original image is drawn to the screen.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples#52](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#52)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples#52](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#52)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples#52](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#52)]"
  syntax:
    content: public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle destRect, float srcX, float srcY, float srcWidth, float srcHeight, System.Drawing.GraphicsUnit srcUnit);
    parameters:
    - id: image
      type: System.Drawing.Image
      description: <xref href="System.Drawing.Image"></xref> to draw.
    - id: destRect
      type: System.Drawing.Rectangle
      description: <xref href="System.Drawing.Rectangle"></xref> structure that specifies the location and size of the drawn image. The image is scaled to fit the rectangle.
    - id: srcX
      type: System.Single
      description: The x-coordinate of the upper-left corner of the portion of the source image to draw.
    - id: srcY
      type: System.Single
      description: The y-coordinate of the upper-left corner of the portion of the source image to draw.
    - id: srcWidth
      type: System.Single
      description: Width of the portion of the source image to draw.
    - id: srcHeight
      type: System.Single
      description: Height of the portion of the source image to draw.
    - id: srcUnit
      type: System.Drawing.GraphicsUnit
      description: Member of the <xref href="System.Drawing.GraphicsUnit"></xref> enumeration that specifies the units of measure used to determine the source rectangle.
  overload: System.Drawing.Graphics.DrawImage*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>image</code> is `null`.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.GraphicsUnit)
  commentId: M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.GraphicsUnit)
  id: DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.GraphicsUnit)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: DrawImage(Image, Rectangle, Int32, Int32, Int32, Int32, GraphicsUnit)
  nameWithType: Graphics.DrawImage(Image, Rectangle, Int32, Int32, Int32, Int32, GraphicsUnit)
  fullName: Graphics.DrawImage(Image, Rectangle, Int32, Int32, Int32, Int32, GraphicsUnit)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Draws the specified portion of the specified <xref href="System.Drawing.Image"></xref> at the specified location and with the specified size.
  remarks: The `srcX`, `srcY`, `srcWidth`, and `srcHeight` parameters specify a rectangular portion, of the `image` object to draw. The rectangle is relative to the upper-left corner of the source image. This portion is scaled to fit inside the rectangle specified by the `destRect` parameter.
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates an image from a JPEG file SampImag.jpg in the folder of the example.  \n  \n-   Creates a destination rectangle in which to draw the image.  \n  \n-   Creates the coordinates of a source rectangle from which to extract a portion of the image.  \n  \n-   Sets the unit of measure of the source rectangle to pixels.  \n  \n-   Draws the image to the screen.  \n  \n The position of the destination rectangle locates the image on the screen, and the sizes of the source and destination rectangles determine the scaling of the drawn image, and the size of the source rectangle determines what portion of the original image is drawn to the screen.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples#48](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#48)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples#48](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#48)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples#48](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#48)]"
  syntax:
    content: public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle destRect, int srcX, int srcY, int srcWidth, int srcHeight, System.Drawing.GraphicsUnit srcUnit);
    parameters:
    - id: image
      type: System.Drawing.Image
      description: <xref href="System.Drawing.Image"></xref> to draw.
    - id: destRect
      type: System.Drawing.Rectangle
      description: <xref href="System.Drawing.Rectangle"></xref> structure that specifies the location and size of the drawn image. The image is scaled to fit the rectangle.
    - id: srcX
      type: System.Int32
      description: The x-coordinate of the upper-left corner of the portion of the source image to draw.
    - id: srcY
      type: System.Int32
      description: The y-coordinate of the upper-left corner of the portion of the source image to draw.
    - id: srcWidth
      type: System.Int32
      description: Width of the portion of the source image to draw.
    - id: srcHeight
      type: System.Int32
      description: Height of the portion of the source image to draw.
    - id: srcUnit
      type: System.Drawing.GraphicsUnit
      description: Member of the <xref href="System.Drawing.GraphicsUnit"></xref> enumeration that specifies the units of measure used to determine the source rectangle.
  overload: System.Drawing.Graphics.DrawImage*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>image</code> is `null`.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.Int32)
  commentId: M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.Int32)
  id: DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.Int32)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: DrawImage(Image, PointF[], RectangleF, GraphicsUnit, ImageAttributes, Graphics+DrawImageAbort, Int32)
  nameWithType: Graphics.DrawImage(Image, PointF[], RectangleF, GraphicsUnit, ImageAttributes, Graphics+DrawImageAbort, Int32)
  fullName: Graphics.DrawImage(Image, PointF[], RectangleF, GraphicsUnit, ImageAttributes, Graphics+DrawImageAbort, Int32)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Draws the specified portion of the specified <xref href="System.Drawing.Image"></xref> at the specified location and with the specified size.
  remarks: "The `destPoints` parameter specifies three points of a parallelogram. The three <xref:System.Drawing.PointF> structures represent the upper-left, upper-right, and lower-left corners of the parallelogram. The fourth point is extrapolated from the first three to form a parallelogram.  \n  \n The `srcRect` parameter specifies a rectangular portion of the `image` object to draw. This portion is scaled and sheared to fit inside the parallelogram specified by the `destPoints` parameter.  \n  \n This overload with the `callback` and `callbackData` parameters provides the means to stop the drawing of an image once it starts according to criteria and data determined by the application. For example, an application could start drawing a large image and the user might scroll the image off the screen, in which case the application could stop the drawing."
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the `Pa`<xref:System.Windows.Forms.Control.Paint> event handler. The code first defines a callback method for the <xref:System.Drawing.Graphics.DrawImageAbort> delegate; the definition is simplistic and merely tests to see whether the <xref:System.Drawing.Graphics.DrawImage%2A> method calls it with a null `callBackData` parameter. The main body of the example performs the following actions:  \n  \n-   Creates an instance of the <xref:System.Drawing.Graphics.DrawImageAbort> callback method.  \n  \n-   Creates an image from a JPEG file SampImag.jpg in the folder of the example.  \n  \n-   Creates points that define a parallelogram in which to draw the image.  \n  \n-   Creates a rectangle to select the portion of the image to draw.  \n  \n-   Sets the graphics drawing unit to pixel.  \n  \n-   Draws the original image to the screen.  \n  \n-   Creates an additional parallelogram in which to draw an adjusted image.  \n  \n-   Creates and sets the attributes of the adjusted image to have a larger-than-usual gamma value.  \n  \n-   Draws the adjusted image to the screen.  \n  \n For the original, unadjusted parallelogram, the position locates the image on the screen, and the size of the rectangle and the size and shape of the parallelogram determines the scaling and shearing of the drawn image.  \n  \n Because this example uses an overload that passes a `callBackData` parameter, the <xref:System.Drawing.Graphics.DrawImageAbort> callback returns `false`, which causes the <xref:System.Drawing.Graphics.DrawImage%2A> method to continue, and the example draws the adjusted image to the screen.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples#45](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#45)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples#45](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#45)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples#45](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#45)]"
  syntax:
    content: public void DrawImage (System.Drawing.Image image, System.Drawing.PointF[] destPoints, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttr, System.Drawing.Graphics.DrawImageAbort callback, int callbackData);
    parameters:
    - id: image
      type: System.Drawing.Image
      description: <xref href="System.Drawing.Image"></xref> to draw.
    - id: destPoints
      type: System.Drawing.PointF[]
      description: Array of three <xref href="System.Drawing.PointF"></xref> structures that define a parallelogram.
    - id: srcRect
      type: System.Drawing.RectangleF
      description: <xref href="System.Drawing.RectangleF"></xref> structure that specifies the portion of the <code>image</code> object to draw.
    - id: srcUnit
      type: System.Drawing.GraphicsUnit
      description: Member of the <xref href="System.Drawing.GraphicsUnit"></xref> enumeration that specifies the units of measure used by the <code>srcRect</code> parameter.
    - id: imageAttr
      type: System.Drawing.Imaging.ImageAttributes
      description: <xref href="System.Drawing.Imaging.ImageAttributes"></xref> that specifies recoloring and gamma information for the <code>image</code> object.
    - id: callback
      type: System.Drawing.Graphics+DrawImageAbort
      description: <xref href="System.Drawing.Graphics.DrawImageAbort"></xref> delegate that specifies a method to call during the drawing of the image. This method is called frequently to check whether to stop execution of the <xref href="System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.Int32)"></xref> method according to application-determined criteria.
    - id: callbackData
      type: System.Int32
      description: Value specifying additional data for the <xref href="System.Drawing.Graphics.DrawImageAbort"></xref> delegate to use when checking whether to stop execution of the <xref href="System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.Int32)"></xref> method.
  overload: System.Drawing.Graphics.DrawImage*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>image</code> is `null`.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.Int32)
  commentId: M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.Int32)
  id: DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.Int32)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: DrawImage(Image, Point[], Rectangle, GraphicsUnit, ImageAttributes, Graphics+DrawImageAbort, Int32)
  nameWithType: Graphics.DrawImage(Image, Point[], Rectangle, GraphicsUnit, ImageAttributes, Graphics+DrawImageAbort, Int32)
  fullName: Graphics.DrawImage(Image, Point[], Rectangle, GraphicsUnit, ImageAttributes, Graphics+DrawImageAbort, Int32)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Draws the specified portion of the specified <xref href="System.Drawing.Image"></xref> at the specified location and with the specified size.
  remarks: "The `destPoints` parameter specifies three points of a parallelogram. The three <xref:System.Drawing.PointF> structures represent the upper-left, upper-right, and lower-left corners of the parallelogram. The fourth point is extrapolated from the first three to form a parallelogram.  \n  \n The `srcRect` parameter specifies a rectangular portion of the `image` object to draw. This portion is scaled and sheared to fit inside the parallelogram specified by the `destPoints` parameter.  \n  \n This overload with the `callback` and `callbackData` parameters provides the means to stop the drawing of an image once it starts according to criteria and data determined by the application. For example, an application could start drawing a large image and the user might scroll the image off the screen, in which case the application could stop the drawing."
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code first defines a callback method for the <xref:System.Drawing.Graphics.DrawImageAbort> delegate; the definition is simplistic and merely tests to see whether the <xref:System.Drawing.Graphics.DrawImage%2A> method calls it with a null `callBackData` parameter. The main body of the example performs the following actions:  \n  \n-   Creates an instance of the <xref:System.Drawing.Graphics.DrawImageAbort> callback method.  \n  \n-   Creates an image from a JPEG file SampImag.jpg in the folder of the example.  \n  \n-   Creates points that define a parallelogram in which to draw the image.  \n  \n-   Creates a rectangle to select the portion of the image to draw.  \n  \n-   Sets the graphics drawing unit to pixel.  \n  \n-   Draws the original image to the screen.  \n  \n-   Creates an additional parallelogram in which to draw an adjusted image.  \n  \n-   Creates and sets the attributes of the adjusted image to have a larger-than-usual gamma value.  \n  \n-   Draws the adjusted image to the screen.  \n  \n For the original, unadjusted parallelogram, the position locates the image on the screen, and the size of the rectangle and the size and shape of the parallelogram determines the scaling and shearing of the drawn image.  \n  \n Because this example uses an overload that passes a `callBackData` parameter, the <xref:System.Drawing.Graphics.DrawImageAbort> callback returns `false`, which causes the <xref:System.Drawing.Graphics.DrawImage%2A> method to continue, and the example draws the adjusted image to the screen.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples#39](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#39)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples#39](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#39)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples#39](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#39)]"
  syntax:
    content: public void DrawImage (System.Drawing.Image image, System.Drawing.Point[] destPoints, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttr, System.Drawing.Graphics.DrawImageAbort callback, int callbackData);
    parameters:
    - id: image
      type: System.Drawing.Image
      description: <xref href="System.Drawing.Image"></xref> to draw.
    - id: destPoints
      type: System.Drawing.Point[]
      description: Array of three <xref href="System.Drawing.PointF"></xref> structures that define a parallelogram.
    - id: srcRect
      type: System.Drawing.Rectangle
      description: <xref href="System.Drawing.Rectangle"></xref> structure that specifies the portion of the <code>image</code> object to draw.
    - id: srcUnit
      type: System.Drawing.GraphicsUnit
      description: Member of the <xref href="System.Drawing.GraphicsUnit"></xref> enumeration that specifies the units of measure used by the <code>srcRect</code> parameter.
    - id: imageAttr
      type: System.Drawing.Imaging.ImageAttributes
      description: <xref href="System.Drawing.Imaging.ImageAttributes"></xref> that specifies recoloring and gamma information for the <code>image</code> object.
    - id: callback
      type: System.Drawing.Graphics+DrawImageAbort
      description: <xref href="System.Drawing.Graphics.DrawImageAbort"></xref> delegate that specifies a method to call during the drawing of the image. This method is called frequently to check whether to stop execution of the <xref href="System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.Int32)"></xref> method according to application-determined criteria.
    - id: callbackData
      type: System.Int32
      description: Value specifying additional data for the <xref href="System.Drawing.Graphics.DrawImageAbort"></xref> delegate to use when checking whether to stop execution of the <xref href="System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.Int32)"></xref> method.
  overload: System.Drawing.Graphics.DrawImage*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)
  commentId: M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)
  id: DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: DrawImage(Image, PointF[], RectangleF, GraphicsUnit, ImageAttributes, Graphics+DrawImageAbort)
  nameWithType: Graphics.DrawImage(Image, PointF[], RectangleF, GraphicsUnit, ImageAttributes, Graphics+DrawImageAbort)
  fullName: Graphics.DrawImage(Image, PointF[], RectangleF, GraphicsUnit, ImageAttributes, Graphics+DrawImageAbort)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Draws the specified portion of the specified <xref href="System.Drawing.Image"></xref> at the specified location and with the specified size.
  remarks: "The `destPoints` parameter specifies three points of a parallelogram. The three <xref:System.Drawing.PointF> structures represent the upper-left, upper-right, and lower-left corners of the parallelogram. The fourth point is extrapolated from the first three to form a parallelogram.  \n  \n The `srcRect` parameter specifies a rectangular portion of the `image` object to draw. This portion is scaled and sheared to fit inside the parallelogram specified by the `destPoints` parameter.  \n  \n This overload with the `callback` parameter provides the means to stop the drawing of an image once it starts according to criteria determined by the application. For example, an application could start drawing a large image and the user might scroll the image off the screen, in which case the application could stop the drawing."
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code first defines a callback method for the <xref:System.Drawing.Graphics.DrawImageAbort> delegate; the definition is simplistic and merely tests to see whether the <xref:System.Drawing.Graphics.DrawImage%2A> method calls it with a null `callBackData` parameter. The main body of the example performs the following actions:  \n  \n-   Creates an instance of the <xref:System.Drawing.Graphics.DrawImageAbort> callback method.  \n  \n-   Creates an image from a JPEG file SampImag.jpg in the folder of the example.  \n  \n-   Creates points that define a parallelogram in which to draw the image.  \n  \n-   Creates a rectangle to select the portion of the image to draw.  \n  \n-   Sets the graphics drawing unit to pixel.  \n  \n-   Draws the original image to the screen.  \n  \n-   Creates an additional parallelogram in which to draw an adjusted image.  \n  \n-   Creates and sets the attributes of the adjusted image to have a larger-than-usual gamma value.  \n  \n-   Draws the adjusted image to the screen.  \n  \n For the original, unadjusted parallelogram, the position locates the image on the screen, and the size of the rectangle and the size and shape of the parallelogram determines the scaling and shearing of the drawn image.  \n  \n Because this example uses an overload that does not pass a `callBackData` parameter, the <xref:System.Drawing.Graphics.DrawImageAbort> callback returns `true`, which causes the <xref:System.Drawing.Graphics.DrawImage%2A> method to end, and the exception-handling code included in the example prints out the exception text rather than drawing the image.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples#44](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#44)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples#44](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#44)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples#44](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#44)]"
  syntax:
    content: public void DrawImage (System.Drawing.Image image, System.Drawing.PointF[] destPoints, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttr, System.Drawing.Graphics.DrawImageAbort callback);
    parameters:
    - id: image
      type: System.Drawing.Image
      description: <xref href="System.Drawing.Image"></xref> to draw.
    - id: destPoints
      type: System.Drawing.PointF[]
      description: Array of three <xref href="System.Drawing.PointF"></xref> structures that define a parallelogram.
    - id: srcRect
      type: System.Drawing.RectangleF
      description: <xref href="System.Drawing.RectangleF"></xref> structure that specifies the portion of the <code>image</code> object to draw.
    - id: srcUnit
      type: System.Drawing.GraphicsUnit
      description: Member of the <xref href="System.Drawing.GraphicsUnit"></xref> enumeration that specifies the units of measure used by the <code>srcRect</code> parameter.
    - id: imageAttr
      type: System.Drawing.Imaging.ImageAttributes
      description: <xref href="System.Drawing.Imaging.ImageAttributes"></xref> that specifies recoloring and gamma information for the <code>image</code> object.
    - id: callback
      type: System.Drawing.Graphics+DrawImageAbort
      description: <xref href="System.Drawing.Graphics.DrawImageAbort"></xref> delegate that specifies a method to call during the drawing of the image. This method is called frequently to check whether to stop execution of the <xref href="System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)"></xref> method according to application-determined criteria.
  overload: System.Drawing.Graphics.DrawImage*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>image</code> is `null`.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)
  commentId: M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)
  id: DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: DrawImage(Image, Point[], Rectangle, GraphicsUnit, ImageAttributes, Graphics+DrawImageAbort)
  nameWithType: Graphics.DrawImage(Image, Point[], Rectangle, GraphicsUnit, ImageAttributes, Graphics+DrawImageAbort)
  fullName: Graphics.DrawImage(Image, Point[], Rectangle, GraphicsUnit, ImageAttributes, Graphics+DrawImageAbort)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Draws the specified portion of the specified <xref href="System.Drawing.Image"></xref> at the specified location and with the specified size.
  remarks: "The `destPoints` parameter specifies three points of a parallelogram. The three <xref:System.Drawing.PointF> structures represent the upper-left, upper-right, and lower-left corners of the parallelogram. The fourth point is extrapolated from the first three to form a parallelogram.  \n  \n The `srcRect` parameter specifies a rectangular portion of the `image` object to draw. This portion is scaled and sheared to fit inside the parallelogram specified by the `destPoints` parameter.  \n  \n This overload with the `callback` parameter provides the means to stop the drawing of an image once it starts according to criteria determined by the application. For example, an application could start drawing a large image and the user might scroll the image off the screen, in which case the application could stop the drawing."
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code first defines a callback method for the <xref:System.Drawing.Graphics.DrawImageAbort> delegate; the definition is simplistic and merely tests to see whether the <xref:System.Drawing.Graphics.DrawImage%2A> method calls it with a null `callBackData` parameter. The main body of the example performs the following actions:  \n  \n-   Creates an instance of the <xref:System.Drawing.Graphics.DrawImageAbort> callback method:  \n  \n-   Creates an image from a JPEG file SampImag.jpg in the folder of the example.  \n  \n-   Creates points that define a parallelogram in which to draw the image.  \n  \n-   Creates a rectangle to select the portion of the image to draw.  \n  \n-   Sets the graphics drawing unit to pixel.  \n  \n-   Draws the original image to the screen.  \n  \n-   Creates an additional parallelogram in which to draw an adjusted image.  \n  \n-   Creates and sets the attributes of the adjusted image to have a larger-than-usual gamma value.  \n  \n-   Draws the adjusted image to the screen.  \n  \n For the original, unadjusted parallelogram, the position locates the image on the screen, and the size of the rectangle and the size and shape of the parallelogram determines the scaling and shearing of the drawn image.  \n  \n Because this example uses an overload that does not pass a `callBackData` parameter, the <xref:System.Drawing.Graphics.DrawImageAbort> callback returns `true`, which causes the <xref:System.Drawing.Graphics.DrawImage%2A> method to end, and the exception-handling code included in the example prints out the exception text rather than drawing the image.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples#38](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#38)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples#38](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#38)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples#38](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#38)]"
  syntax:
    content: public void DrawImage (System.Drawing.Image image, System.Drawing.Point[] destPoints, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttr, System.Drawing.Graphics.DrawImageAbort callback);
    parameters:
    - id: image
      type: System.Drawing.Image
      description: <xref href="System.Drawing.Image"></xref> to draw.
    - id: destPoints
      type: System.Drawing.Point[]
      description: Array of three <xref href="System.Drawing.PointF"></xref> structures that define a parallelogram.
    - id: srcRect
      type: System.Drawing.Rectangle
      description: <xref href="System.Drawing.Rectangle"></xref> structure that specifies the portion of the <code>image</code> object to draw.
    - id: srcUnit
      type: System.Drawing.GraphicsUnit
      description: Member of the <xref href="System.Drawing.GraphicsUnit"></xref> enumeration that specifies the units of measure used by the <code>srcRect</code> parameter.
    - id: imageAttr
      type: System.Drawing.Imaging.ImageAttributes
      description: <xref href="System.Drawing.Imaging.ImageAttributes"></xref> that specifies recoloring and gamma information for the <code>image</code> object.
    - id: callback
      type: System.Drawing.Graphics+DrawImageAbort
      description: <xref href="System.Drawing.Graphics.DrawImageAbort"></xref> delegate that specifies a method to call during the drawing of the image. This method is called frequently to check whether to stop execution of the <xref href="System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)"></xref> method according to application-determined criteria.
  overload: System.Drawing.Graphics.DrawImage*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>image</code> is `null`.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Int32,System.Int32,System.Int32,System.Int32)
  commentId: M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Int32,System.Int32,System.Int32,System.Int32)
  id: DrawImage(System.Drawing.Image,System.Int32,System.Int32,System.Int32,System.Int32)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: DrawImage(Image, Int32, Int32, Int32, Int32)
  nameWithType: Graphics.DrawImage(Image, Int32, Int32, Int32, Int32)
  fullName: Graphics.DrawImage(Image, Int32, Int32, Int32, Int32)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Draws the specified <xref href="System.Drawing.Image"></xref> at the specified location and with the specified size.
  remarks: The rectangle defined by the `x`, `y`, `width`, and `height` parameters determines the position and size of the drawn image.
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates an image from a JPEG file SampImag.jpg in the folder of the example.  \n  \n-   Creates the position and size of a rectangle in which to draw the image.  \n  \n-   Draws the image to the screen.  \n  \n The position of the rectangle locates the image on the screen, and the size of the original image and the size of the rectangle determines the scaling of the drawn image.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples2#60](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#60)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples2#60](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#60)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples2#60](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#60)]"
  syntax:
    content: public void DrawImage (System.Drawing.Image image, int x, int y, int width, int height);
    parameters:
    - id: image
      type: System.Drawing.Image
      description: <xref href="System.Drawing.Image"></xref> to draw.
    - id: x
      type: System.Int32
      description: The x-coordinate of the upper-left corner of the drawn image.
    - id: y
      type: System.Int32
      description: The y-coordinate of the upper-left corner of the drawn image.
    - id: width
      type: System.Int32
      description: Width of the drawn image.
    - id: height
      type: System.Int32
      description: Height of the drawn image.
  overload: System.Drawing.Graphics.DrawImage*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>image</code> is `null`.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Single,System.Single,System.Single,System.Single)
  commentId: M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Single,System.Single,System.Single,System.Single)
  id: DrawImage(System.Drawing.Image,System.Single,System.Single,System.Single,System.Single)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: DrawImage(Image, Single, Single, Single, Single)
  nameWithType: Graphics.DrawImage(Image, Single, Single, Single, Single)
  fullName: Graphics.DrawImage(Image, Single, Single, Single, Single)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Draws the specified <xref href="System.Drawing.Image"></xref> at the specified location and with the specified size.
  remarks: The rectangle defined by the `x`, `y`, `width`, and `height` parameters determines the position and size of the drawn image.
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates an image from a JPEG file SampImag.jpg in the folder of the example.  \n  \n-   Creates the position and size of a rectangle in which to draw the image.  \n  \n-   Draws the image to the screen.  \n  \n The position of the rectangle locates the image on the screen, and the size of the original image and the size of the rectangle determines the scaling of the drawn image.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples2#63](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#63)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples2#63](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#63)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples2#63](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#63)]"
  syntax:
    content: public void DrawImage (System.Drawing.Image image, float x, float y, float width, float height);
    parameters:
    - id: image
      type: System.Drawing.Image
      description: <xref href="System.Drawing.Image"></xref> to draw.
    - id: x
      type: System.Single
      description: The x-coordinate of the upper-left corner of the drawn image.
    - id: y
      type: System.Single
      description: The y-coordinate of the upper-left corner of the drawn image.
    - id: width
      type: System.Single
      description: Width of the drawn image.
    - id: height
      type: System.Single
      description: Height of the drawn image.
  overload: System.Drawing.Graphics.DrawImage*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>image</code> is `null`.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes)
  commentId: M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes)
  id: DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: DrawImage(Image, PointF[], RectangleF, GraphicsUnit, ImageAttributes)
  nameWithType: Graphics.DrawImage(Image, PointF[], RectangleF, GraphicsUnit, ImageAttributes)
  fullName: Graphics.DrawImage(Image, PointF[], RectangleF, GraphicsUnit, ImageAttributes)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Draws the specified portion of the specified <xref href="System.Drawing.Image"></xref> at the specified location and with the specified size.
  remarks: "The `destPoints` parameter specifies three points of a parallelogram. The three <xref:System.Drawing.PointF> structures represent the upper-left, upper-right, and lower-left corners of the parallelogram. The fourth point is extrapolated from the first three to form a parallelogram.  \n  \n The `srcRect` parameter specifies a rectangular portion of the `image` object to draw. This portion is scaled and sheared to fit inside the parallelogram specified by the `destPoints` parameter."
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates an image from a JPEG file SampImag.jpg in the folder of the example.  \n  \n-   Creates points that define a destination parallelogram in which to draw the image.  \n  \n-   Creates a source rectangle from which to extract a portion of the image.  \n  \n-   Sets the unit of measure of the source rectangle to pixels.  \n  \n-   Draws the original image to the screen.  \n  \n-   Creates an additional parallelogram in which to draw an adjusted image.  \n  \n-   Creates and sets the attributes of the adjusted image to have a larger-than-usual gamma value.  \n  \n-   Draws the adjusted image to the screen.  \n  \n For the original, unadjusted destination parallelogram, the position locates the image on the screen, the size of the source rectangle and the size and shape of the destination parallelogram determines the scaling and shearing of the drawn image, and the size of the rectangle determines what portion of the original image is drawn to the screen.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples#43](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#43)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples#43](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#43)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples#43](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#43)]"
  syntax:
    content: public void DrawImage (System.Drawing.Image image, System.Drawing.PointF[] destPoints, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttr);
    parameters:
    - id: image
      type: System.Drawing.Image
      description: <xref href="System.Drawing.Image"></xref> to draw.
    - id: destPoints
      type: System.Drawing.PointF[]
      description: Array of three <xref href="System.Drawing.PointF"></xref> structures that define a parallelogram.
    - id: srcRect
      type: System.Drawing.RectangleF
      description: <xref href="System.Drawing.RectangleF"></xref> structure that specifies the portion of the <code>image</code> object to draw.
    - id: srcUnit
      type: System.Drawing.GraphicsUnit
      description: Member of the <xref href="System.Drawing.GraphicsUnit"></xref> enumeration that specifies the units of measure used by the <code>srcRect</code> parameter.
    - id: imageAttr
      type: System.Drawing.Imaging.ImageAttributes
      description: <xref href="System.Drawing.Imaging.ImageAttributes"></xref> that specifies recoloring and gamma information for the <code>image</code> object.
  overload: System.Drawing.Graphics.DrawImage*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>image</code> is `null`.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point)
  commentId: M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point)
  id: DrawImage(System.Drawing.Image,System.Drawing.Point)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: DrawImage(Image, Point)
  nameWithType: Graphics.DrawImage(Image, Point)
  fullName: Graphics.DrawImage(Image, Point)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Draws the specified <xref href="System.Drawing.Image"></xref>, using its original physical size, at the specified location.
  remarks: "An <xref:System.Drawing.Image> stores a value for pixel width and a value for horizontal resolution (dots per inch). The physical width, measured in inches, of an image is the pixel width divided by the horizontal resolution. For example, an image with a pixel width of 216 and a horizontal resolution of 72 dots per inch has a physical width of 3 inches. Similar remarks apply to pixel height and physical height.  \n  \n This method draws an image using its physical size, so the image will have its correct size in inches regardless of the resolution (dots per inch) of the display device. For example, suppose an image has a pixel width of 216 and a horizontal resolution of 72 dots per inch. If you call this method to draw that image on a device that has a resolution of 96 dots per inch, the pixel width of the rendered image will be (216/72)*96 = 288."
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates an image from a JPEG file SampImag.jpg in the folder of the example.  \n  \n-   Creates a point at which to draw the upper-left corner of the image.  \n  \n-   Draws the unscaled image to the screen.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples#34](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#34)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples#34](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#34)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples#34](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#34)]"
  syntax:
    content: public void DrawImage (System.Drawing.Image image, System.Drawing.Point point);
    parameters:
    - id: image
      type: System.Drawing.Image
      description: <xref href="System.Drawing.Image"></xref> to draw.
    - id: point
      type: System.Drawing.Point
      description: <xref href="System.Drawing.Point"></xref> structure that represents the location of the upper-left corner of the drawn image.
  overload: System.Drawing.Graphics.DrawImage*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>image</code> is `null`.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[])
  commentId: M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[])
  id: DrawImage(System.Drawing.Image,System.Drawing.Point[])
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: DrawImage(Image, Point[])
  nameWithType: Graphics.DrawImage(Image, Point[])
  fullName: Graphics.DrawImage(Image, Point[])
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Draws the specified <xref href="System.Drawing.Image"></xref> at the specified location and with the specified shape and size.
  remarks: "The `destPoints` parameter specifies three points of a parallelogram. The three <xref:System.Drawing.Point> structures represent the upper-left, upper-right, and lower-left corners of the parallelogram. The fourth point is extrapolated from the first three to form a parallelogram.  \n  \n The image represented by the `image` parameter is scaled and sheared to fit the shape of the parallelogram specified by the `destPoints` parameters."
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates an image from a JPEG file SampImag.jpg in the folder of the example.  \n  \n-   Creates points that define a parallelogram in which to draw the image.  \n  \n-   Draws the image to the screen.  \n  \n The position of the parallelogram locates the image on the screen, and the size of the original image and the size and shape of the parallelogram determines the scaling and shearing of the drawn image.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples#35](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#35)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples#35](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#35)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples#35](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#35)]"
  syntax:
    content: public void DrawImage (System.Drawing.Image image, System.Drawing.Point[] destPoints);
    parameters:
    - id: image
      type: System.Drawing.Image
      description: <xref href="System.Drawing.Image"></xref> to draw.
    - id: destPoints
      type: System.Drawing.Point[]
      description: Array of three <xref href="System.Drawing.Point"></xref> structures that define a parallelogram.
  overload: System.Drawing.Graphics.DrawImage*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>image</code> is `null`.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF)
  commentId: M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF)
  id: DrawImage(System.Drawing.Image,System.Drawing.PointF)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: DrawImage(Image, PointF)
  nameWithType: Graphics.DrawImage(Image, PointF)
  fullName: Graphics.DrawImage(Image, PointF)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Draws the specified <xref href="System.Drawing.Image"></xref>, using its original physical size, at the specified location.
  remarks: "An <xref:System.Drawing.Image> stores a value for pixel width and a value for horizontal resolution (dots per inch). The physical width, measured in inches, of an image is the pixel width divided by the horizontal resolution. For example, an image with a pixel width of 216 and a horizontal resolution of 72 dots per inch has a physical width of 3 inches. Similar remarks apply to pixel height and physical height.  \n  \n This method draws an image using its physical size, so the image will have its correct size in inches regardless of the resolution (dots per inch) of the display device. For example, suppose an image has a pixel width of 216 and a horizontal resolution of 72 dots per inch. If you call this method to draw that image on a device that has a resolution of 96 dots per inch, the pixel width of the rendered image will be (216/72)*96 = 288."
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates an image from a JPEG file SampImag.jpg in the folder of the example.  \n  \n-   Creates a point at which to draw the upper-left corner of the image.  \n  \n-   Draws the unscaled image to the screen.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples#40](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#40)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples#40](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#40)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples#40](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#40)]"
  syntax:
    content: public void DrawImage (System.Drawing.Image image, System.Drawing.PointF point);
    parameters:
    - id: image
      type: System.Drawing.Image
      description: <xref href="System.Drawing.Image"></xref> to draw.
    - id: point
      type: System.Drawing.PointF
      description: <xref href="System.Drawing.PointF"></xref> structure that represents the upper-left corner of the drawn image.
  overload: System.Drawing.Graphics.DrawImage*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>image</code> is `null`.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[])
  commentId: M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[])
  id: DrawImage(System.Drawing.Image,System.Drawing.PointF[])
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: DrawImage(Image, PointF[])
  nameWithType: Graphics.DrawImage(Image, PointF[])
  fullName: Graphics.DrawImage(Image, PointF[])
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Draws the specified <xref href="System.Drawing.Image"></xref> at the specified location and with the specified shape and size.
  remarks: "The `destPoints` parameter specifies three points of a parallelogram. The three <xref:System.Drawing.PointF> structures represent the upper-left, upper-right, and lower-left corners of the parallelogram. The fourth point is extrapolated from the first three to form a parallelogram.  \n  \n The image represented by the `image` object is scaled and sheared to fit the shape of the parallelogram specified by the `destPoints` parameter."
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates an image from a JPEG file SampImag.jpg in the folder of the example.  \n  \n-   Creates points that define a parallelogram in which to draw the image.  \n  \n-   Draws the image to the screen.  \n  \n The position of the parallelogram locates the image on the screen, and the size of the original image and the size and shape of the parallelogram determines the scaling and shearing of the drawn image.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples#41](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#41)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples#41](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#41)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples#41](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#41)]"
  syntax:
    content: public void DrawImage (System.Drawing.Image image, System.Drawing.PointF[] destPoints);
    parameters:
    - id: image
      type: System.Drawing.Image
      description: <xref href="System.Drawing.Image"></xref> to draw.
    - id: destPoints
      type: System.Drawing.PointF[]
      description: Array of three <xref href="System.Drawing.PointF"></xref> structures that define a parallelogram.
  overload: System.Drawing.Graphics.DrawImage*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>image</code> is `null`.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle)
  commentId: M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle)
  id: DrawImage(System.Drawing.Image,System.Drawing.Rectangle)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: DrawImage(Image, Rectangle)
  nameWithType: Graphics.DrawImage(Image, Rectangle)
  fullName: Graphics.DrawImage(Image, Rectangle)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Draws the specified <xref href="System.Drawing.Image"></xref> at the specified location and with the specified size.
  remarks: The image represented by the `image` object is scaled to the dimensions of the `rect` rectangle.
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates an image from a JPEG file SampImag.jpg in the folder of the example.  \n  \n-   Creates a rectangle in which to draw the image.  \n  \n-   Draws the image to the screen.  \n  \n The position of the rectangle locates the image on the screen, and the size of the original image and the size of the rectangle determines the scaling of the drawn image.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples#46](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#46)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples#46](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#46)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples#46](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#46)]"
  syntax:
    content: public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle rect);
    parameters:
    - id: image
      type: System.Drawing.Image
      description: <xref href="System.Drawing.Image"></xref> to draw.
    - id: rect
      type: System.Drawing.Rectangle
      description: <xref href="System.Drawing.Rectangle"></xref> structure that specifies the location and size of the drawn image.
  overload: System.Drawing.Graphics.DrawImage*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>image</code> is `null`.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.RectangleF)
  commentId: M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.RectangleF)
  id: DrawImage(System.Drawing.Image,System.Drawing.RectangleF)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: DrawImage(Image, RectangleF)
  nameWithType: Graphics.DrawImage(Image, RectangleF)
  fullName: Graphics.DrawImage(Image, RectangleF)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Draws the specified <xref href="System.Drawing.Image"></xref> at the specified location and with the specified size.
  remarks: The image represented by the `image` object is scaled to the dimensions of the `rect` rectangle.
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates an image from a JPEG file SampImag.jpg in the folder of the example.  \n  \n-   Creates a rectangle in which to draw the image.  \n  \n-   Draws the image to the screen.  \n  \n The position of the rectangle locates the image on the screen, and the original size of the image and the size of the rectangle determines the scaling of the drawn image.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples2#56](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#56)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples2#56](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#56)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples2#56](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#56)]"
  syntax:
    content: public void DrawImage (System.Drawing.Image image, System.Drawing.RectangleF rect);
    parameters:
    - id: image
      type: System.Drawing.Image
      description: <xref href="System.Drawing.Image"></xref> to draw.
    - id: rect
      type: System.Drawing.RectangleF
      description: <xref href="System.Drawing.RectangleF"></xref> structure that specifies the location and size of the drawn image.
  overload: System.Drawing.Graphics.DrawImage*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>image</code> is `null`.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Int32,System.Int32)
  commentId: M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Int32,System.Int32)
  id: DrawImage(System.Drawing.Image,System.Int32,System.Int32)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: DrawImage(Image, Int32, Int32)
  nameWithType: Graphics.DrawImage(Image, Int32, Int32)
  fullName: Graphics.DrawImage(Image, Int32, Int32)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Draws the specified image, using its original physical size, at the location specified by a coordinate pair.
  remarks: "An <xref:System.Drawing.Image> stores a value for pixel width and a value for horizontal resolution (dots per inch). The physical width, measured in inches, of an image is the pixel width divided by the horizontal resolution. For example, an image with a pixel width of 216 and a horizontal resolution of 72 dots per inch has a physical width of 3 inches. Similar remarks apply to pixel height and physical height.  \n  \n The <xref:System.Drawing.Graphics.DrawImage%2A> method draws an image using its physical size, so the image will have its correct size in inches regardless of the resolution (dots per inch) of the display device. For example, suppose an image has a pixel width of 216 and a horizontal resolution of 72 dots per inch. If you call <xref:System.Drawing.Graphics.DrawImage%2A> to draw that image on a device that has a resolution of 96 dots per inch, the pixel width of the rendered image will be (216/72)*96 = 288."
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates an image from a JPEG file SampImag.jpg in the folder of the example SampImag.jpg in the folder of the example.  \n  \n-   Creates the coordinates of a point at which to draw the upper-left corner of the image.  \n  \n-   Draws the unscaled image.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples2#58](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#58)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples2#58](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#58)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples2#58](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#58)]"
  syntax:
    content: public void DrawImage (System.Drawing.Image image, int x, int y);
    parameters:
    - id: image
      type: System.Drawing.Image
      description: <xref href="System.Drawing.Image"></xref> to draw.
    - id: x
      type: System.Int32
      description: The x-coordinate of the upper-left corner of the drawn image.
    - id: y
      type: System.Int32
      description: The y-coordinate of the upper-left corner of the drawn image.
  overload: System.Drawing.Graphics.DrawImage*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>image</code> is `null`.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Int32,System.Int32,System.Drawing.Rectangle,System.Drawing.GraphicsUnit)
  commentId: M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Int32,System.Int32,System.Drawing.Rectangle,System.Drawing.GraphicsUnit)
  id: DrawImage(System.Drawing.Image,System.Int32,System.Int32,System.Drawing.Rectangle,System.Drawing.GraphicsUnit)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: DrawImage(Image, Int32, Int32, Rectangle, GraphicsUnit)
  nameWithType: Graphics.DrawImage(Image, Int32, Int32, Rectangle, GraphicsUnit)
  fullName: Graphics.DrawImage(Image, Int32, Int32, Rectangle, GraphicsUnit)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Draws a portion of an image at a specified location.
  remarks: "An <xref:System.Drawing.Image> stores a value for pixel width and a value for horizontal resolution (dots per inch). The physical width, measured in inches, of an image is the pixel width divided by the horizontal resolution. For example, an image with a pixel width of 360 and a horizontal resolution of 72 dots per inch has a physical width of 5 inches. Similar remarks apply to pixel height and physical height.  \n  \n This method draws a portion of an image using its physical size, so the image portion will have its correct size in inches regardless of the resolution (dots per inch) of the display device. For example, suppose an image portion has a pixel width of 216 and a horizontal resolution of 72 dots per inch. If you call this method to draw that image portion on a device that has a resolution of 96 dots per inch, the pixel width of the rendered image portion will be (216/72)*96 = 288."
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates an image from a JPEG file SampImag.jpg in the folder of the example.  \n  \n-   Creates the coordinates at which to draw the upper-left corner of the image.  \n  \n-   Creates a source rectangle from which to extract a portion of the image.  \n  \n-   Sets the unit of measure of the source rectangle to pixels.  \n  \n-   Draws the image to the screen.  \n  \n The size of the source rectangle determines what portion of the unscaled original image is drawn to the screen.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples2#59](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#59)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples2#59](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#59)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples2#59](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#59)]"
  syntax:
    content: public void DrawImage (System.Drawing.Image image, int x, int y, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit);
    parameters:
    - id: image
      type: System.Drawing.Image
      description: <xref href="System.Drawing.Image"></xref> to draw.
    - id: x
      type: System.Int32
      description: The x-coordinate of the upper-left corner of the drawn image.
    - id: y
      type: System.Int32
      description: The y-coordinate of the upper-left corner of the drawn image.
    - id: srcRect
      type: System.Drawing.Rectangle
      description: <xref href="System.Drawing.Rectangle"></xref> structure that specifies the portion of the <code>image</code> object to draw.
    - id: srcUnit
      type: System.Drawing.GraphicsUnit
      description: Member of the <xref href="System.Drawing.GraphicsUnit"></xref> enumeration that specifies the units of measure used by the <code>srcRect</code> parameter.
  overload: System.Drawing.Graphics.DrawImage*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>image</code> is `null`.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit)
  commentId: M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit)
  id: DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: DrawImage(Image, Point[], Rectangle, GraphicsUnit)
  nameWithType: Graphics.DrawImage(Image, Point[], Rectangle, GraphicsUnit)
  fullName: Graphics.DrawImage(Image, Point[], Rectangle, GraphicsUnit)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Draws the specified portion of the specified <xref href="System.Drawing.Image"></xref> at the specified location and with the specified size.
  remarks: "The `destPoints` parameter specifies three points of a parallelogram. The three <xref:System.Drawing.Point> structures represent the upper-left, upper-right, and lower-left corners of the parallelogram. The fourth point is extrapolated from the first three to form a parallelogram.  \n  \n The `srcRect` parameter specifies a rectangular portion of the `image` object to draw. This portion is scaled and sheared to fit inside the parallelogram specified by the `destPoints` parameter."
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates an image from a JPEG file SampImag.jpg in the folder of the example.  \n  \n-   Creates points that define a parallelogram in which to draw the image.  \n  \n-   Creates a rectangle to select the portion of the image to draw.  \n  \n-   Sets the graphics drawing unit to pixel.  \n  \n-   Draws the image to the screen.  \n  \n The position of the parallelogram locates the image on the screen, and the size of the rectangle and the size and shape of the parallelogram determines the scaling and shearing of the drawn image.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples#36](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#36)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples#36](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#36)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples#36](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#36)]"
  syntax:
    content: public void DrawImage (System.Drawing.Image image, System.Drawing.Point[] destPoints, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit);
    parameters:
    - id: image
      type: System.Drawing.Image
      description: <xref href="System.Drawing.Image"></xref> to draw.
    - id: destPoints
      type: System.Drawing.Point[]
      description: Array of three <xref href="System.Drawing.Point"></xref> structures that define a parallelogram.
    - id: srcRect
      type: System.Drawing.Rectangle
      description: <xref href="System.Drawing.Rectangle"></xref> structure that specifies the portion of the <code>image</code> object to draw.
    - id: srcUnit
      type: System.Drawing.GraphicsUnit
      description: Member of the <xref href="System.Drawing.GraphicsUnit"></xref> enumeration that specifies the units of measure used by the <code>srcRect</code> parameter.
  overload: System.Drawing.Graphics.DrawImage*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>image</code> is `null`.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit)
  commentId: M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit)
  id: DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: DrawImage(Image, PointF[], RectangleF, GraphicsUnit)
  nameWithType: Graphics.DrawImage(Image, PointF[], RectangleF, GraphicsUnit)
  fullName: Graphics.DrawImage(Image, PointF[], RectangleF, GraphicsUnit)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Draws the specified portion of the specified <xref href="System.Drawing.Image"></xref> at the specified location and with the specified size.
  remarks: "The `destPoints` parameter specifies three points of a parallelogram. The three <xref:System.Drawing.PointF> structures represent the upper-left, upper-right, and lower-left corners of the parallelogram. The fourth point is extrapolated from the first three to form a parallelogram.  \n  \n The `srcRect` parameter specifies a rectangular portion of the `image` object to draw. This portion is scaled and sheared to fit inside the parallelogram specified by the `destPoints` parameter."
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates an image from a JPEG file SampImag.jpg in the folder of the example.  \n  \n-   Creates points that define a destination parallelogram in which to draw the image.  \n  \n-   Creates a source rectangle from which to extract a portion of the image.  \n  \n-   Sets the unit of measure of the source rectangle to pixels.  \n  \n-   Draws the image to the screen.  \n  \n The position of the destination parallelogram locates the image on the screen, the size of the source rectangle and the size and shape of the destination parallelogram determines the scaling and shearing of the drawn image, and the size of the rectangle determines what portion of the original image is drawn to the screen.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples#42](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#42)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples#42](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#42)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples#42](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#42)]"
  syntax:
    content: public void DrawImage (System.Drawing.Image image, System.Drawing.PointF[] destPoints, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit);
    parameters:
    - id: image
      type: System.Drawing.Image
      description: <xref href="System.Drawing.Image"></xref> to draw.
    - id: destPoints
      type: System.Drawing.PointF[]
      description: Array of three <xref href="System.Drawing.PointF"></xref> structures that define a parallelogram.
    - id: srcRect
      type: System.Drawing.RectangleF
      description: <xref href="System.Drawing.RectangleF"></xref> structure that specifies the portion of the <code>image</code> object to draw.
    - id: srcUnit
      type: System.Drawing.GraphicsUnit
      description: Member of the <xref href="System.Drawing.GraphicsUnit"></xref> enumeration that specifies the units of measure used by the <code>srcRect</code> parameter.
  overload: System.Drawing.Graphics.DrawImage*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>image</code> is `null`.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.GraphicsUnit)
  commentId: M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.GraphicsUnit)
  id: DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.GraphicsUnit)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: DrawImage(Image, Rectangle, Rectangle, GraphicsUnit)
  nameWithType: Graphics.DrawImage(Image, Rectangle, Rectangle, GraphicsUnit)
  fullName: Graphics.DrawImage(Image, Rectangle, Rectangle, GraphicsUnit)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Draws the specified portion of the specified <xref href="System.Drawing.Image"></xref> at the specified location and with the specified size.
  remarks: The `srcRect` parameter specifies a rectangular portion of the `image` object to draw. This portion is scaled to fit inside the rectangle specified by the `destRect` parameter.
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates an image from a JPEG file SampImag.jpg in the folder of the example.  \n  \n-   Creates a destination rectangle in which to draw the image.  \n  \n-   Creates a source rectangle from which to extract a portion of the image.  \n  \n-   Sets the unit of measure of the source rectangle to pixels.  \n  \n-   Draws the image to the screen.  \n  \n The position of the destination rectangle locates the image on the screen, the sizes of the source and destination rectangles determine the scaling of the drawn image, and the size of the source rectangle determines what portion of the original image is drawn to the screen.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples#47](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#47)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples#47](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#47)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples#47](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#47)]"
  syntax:
    content: public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle destRect, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit);
    parameters:
    - id: image
      type: System.Drawing.Image
      description: <xref href="System.Drawing.Image"></xref> to draw.
    - id: destRect
      type: System.Drawing.Rectangle
      description: <xref href="System.Drawing.Rectangle"></xref> structure that specifies the location and size of the drawn image. The image is scaled to fit the rectangle.
    - id: srcRect
      type: System.Drawing.Rectangle
      description: <xref href="System.Drawing.Rectangle"></xref> structure that specifies the portion of the <code>image</code> object to draw.
    - id: srcUnit
      type: System.Drawing.GraphicsUnit
      description: Member of the <xref href="System.Drawing.GraphicsUnit"></xref> enumeration that specifies the units of measure used by the <code>srcRect</code> parameter.
  overload: System.Drawing.Graphics.DrawImage*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>image</code> is `null`.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit)
  commentId: M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit)
  id: DrawImage(System.Drawing.Image,System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: DrawImage(Image, RectangleF, RectangleF, GraphicsUnit)
  nameWithType: Graphics.DrawImage(Image, RectangleF, RectangleF, GraphicsUnit)
  fullName: Graphics.DrawImage(Image, RectangleF, RectangleF, GraphicsUnit)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Draws the specified portion of the specified <xref href="System.Drawing.Image"></xref> at the specified location and with the specified size.
  remarks: The `srcRect` parameter specifies a rectangular portion of the `image` object to draw. This portion is scaled to fit inside the rectangle specified by the `destRect` parameter.
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates an image from a JPEG file SampImag.jpg in the folder of the example.  \n  \n-   Creates a destination rectangle in which to draw the image.  \n  \n-   Creates a source rectangle from which to extract a portion of the image.  \n  \n-   Sets the unit of measure of the source rectangle to pixels.  \n  \n-   Draws the image to the screen.  \n  \n The position of the destination rectangle locates the image on the screen, the sizes of the source and destination rectangles determine the scaling of the drawn image, and the size of the source rectangle determines what portion of the original image is drawn to the screen.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples2#57](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#57)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples2#57](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#57)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples2#57](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#57)]"
  syntax:
    content: public void DrawImage (System.Drawing.Image image, System.Drawing.RectangleF destRect, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit);
    parameters:
    - id: image
      type: System.Drawing.Image
      description: <xref href="System.Drawing.Image"></xref> to draw.
    - id: destRect
      type: System.Drawing.RectangleF
      description: <xref href="System.Drawing.RectangleF"></xref> structure that specifies the location and size of the drawn image. The image is scaled to fit the rectangle.
    - id: srcRect
      type: System.Drawing.RectangleF
      description: <xref href="System.Drawing.RectangleF"></xref> structure that specifies the portion of the <code>image</code> object to draw.
    - id: srcUnit
      type: System.Drawing.GraphicsUnit
      description: Member of the <xref href="System.Drawing.GraphicsUnit"></xref> enumeration that specifies the units of measure used by the <code>srcRect</code> parameter.
  overload: System.Drawing.Graphics.DrawImage*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>image</code> is `null`.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Single,System.Single)
  commentId: M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Single,System.Single)
  id: DrawImage(System.Drawing.Image,System.Single,System.Single)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: DrawImage(Image, Single, Single)
  nameWithType: Graphics.DrawImage(Image, Single, Single)
  fullName: Graphics.DrawImage(Image, Single, Single)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Draws the specified <xref href="System.Drawing.Image"></xref>, using its original physical size, at the specified location.
  remarks: "An <xref:System.Drawing.Image> stores a value for pixel width and a value for horizontal resolution (dots per inch). The physical width, measured in inches, of an image is the pixel width divided by the horizontal resolution. For example, an image with a pixel width of 216 and a horizontal resolution of 72 dots per inch has a physical width of 3 inches. Similar remarks apply to pixel height and physical height.  \n  \n This method draws an image using its physical size, so the image will have its correct size in inches regardless of the resolution (dots per inch) of the display device. For example, suppose an image has a pixel width of 216 and a horizontal resolution of 72 dots per inch. If you call this method to draw that image on a device that has a resolution of 96 dots per inch, the pixel width of the rendered image will be (216/72)*96 = 288."
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates an image from a JPEG file SampImag.jpg in the folder of the example.  \n  \n-   Creates the coordinates of a point at which to draw the upper-left corner of the image.  \n  \n-   Draws the unscaled image to the screen.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples2#61](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#61)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples2#61](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#61)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples2#61](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#61)]"
  syntax:
    content: public void DrawImage (System.Drawing.Image image, float x, float y);
    parameters:
    - id: image
      type: System.Drawing.Image
      description: <xref href="System.Drawing.Image"></xref> to draw.
    - id: x
      type: System.Single
      description: The x-coordinate of the upper-left corner of the drawn image.
    - id: y
      type: System.Single
      description: The y-coordinate of the upper-left corner of the drawn image.
  overload: System.Drawing.Graphics.DrawImage*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>image</code> is `null`.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes)
  commentId: M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes)
  id: DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: DrawImage(Image, Point[], Rectangle, GraphicsUnit, ImageAttributes)
  nameWithType: Graphics.DrawImage(Image, Point[], Rectangle, GraphicsUnit, ImageAttributes)
  fullName: Graphics.DrawImage(Image, Point[], Rectangle, GraphicsUnit, ImageAttributes)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Draws the specified portion of the specified <xref href="System.Drawing.Image"></xref> at the specified location.
  remarks: "The `destPoints` parameter specifies three points of a parallelogram. The three <xref:System.Drawing.Point> structures represent the upper-left, upper-right, and lower-left corners of the parallelogram. The fourth point is extrapolated from the first three to form a parallelogram.  \n  \n The `srcRect` parameter specifies a rectangular portion of the`image` object to draw. This portion is scaled and sheared to fit inside the parallelogram specified by the `destPoints` parameter."
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates an image from a JPEG file SampImag.jpg in the folder of the example.  \n  \n-   Creates points that define a parallelogram in which to draw the image.  \n  \n-   Creates a rectangle to select the portion of the image to draw.  \n  \n-   Sets the graphics drawing unit to pixel.  \n  \n-   Draws the original image to the screen.  \n  \n-   Creates an additional parallelogram in which to draw an adjusted image.  \n  \n-   Creates and sets the attributes of the adjusted image to have a larger-than-usual gamma value.  \n  \n-   Draws the adjusted image to the screen.  \n  \n For the original, unadjusted parallelogram, the position locates the image on the screen, and the size of the rectangle and the size and shape of the parallelogram determines the scaling and shearing of the drawn image.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples#37](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#37)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples#37](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#37)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples#37](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#37)]"
  syntax:
    content: public void DrawImage (System.Drawing.Image image, System.Drawing.Point[] destPoints, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttr);
    parameters:
    - id: image
      type: System.Drawing.Image
      description: <xref href="System.Drawing.Image"></xref> to draw.
    - id: destPoints
      type: System.Drawing.Point[]
      description: Array of three <xref href="System.Drawing.Point"></xref> structures that define a parallelogram.
    - id: srcRect
      type: System.Drawing.Rectangle
      description: <xref href="System.Drawing.Rectangle"></xref> structure that specifies the portion of the <code>image</code> object to draw.
    - id: srcUnit
      type: System.Drawing.GraphicsUnit
      description: Member of the <xref href="System.Drawing.GraphicsUnit"></xref> enumeration that specifies the units of measure used by the <code>srcRect</code> parameter.
    - id: imageAttr
      type: System.Drawing.Imaging.ImageAttributes
      description: <xref href="System.Drawing.Imaging.ImageAttributes"></xref> that specifies recoloring and gamma information for the <code>image</code> object.
  overload: System.Drawing.Graphics.DrawImage*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>image</code> is `null`.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.DrawImageUnscaled(System.Drawing.Image,System.Int32,System.Int32,System.Int32,System.Int32)
  commentId: M:System.Drawing.Graphics.DrawImageUnscaled(System.Drawing.Image,System.Int32,System.Int32,System.Int32,System.Int32)
  id: DrawImageUnscaled(System.Drawing.Image,System.Int32,System.Int32,System.Int32,System.Int32)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: DrawImageUnscaled(Image, Int32, Int32, Int32, Int32)
  nameWithType: Graphics.DrawImageUnscaled(Image, Int32, Int32, Int32, Int32)
  fullName: Graphics.DrawImageUnscaled(Image, Int32, Int32, Int32, Int32)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Draws a specified image using its original physical size at a specified location.
  remarks: "An <xref:System.Drawing.Image> stores a value for pixel width and a value for horizontal resolution (dots per inch). The physical width, measured in inches, of an image is the pixel width divided by the horizontal resolution. For example, an image with a pixel width of 216 and a horizontal resolution of 72 dots per inch has a physical width of 3 inches. Similar remarks apply to pixel height and physical height.  \n  \n The <xref:System.Drawing.Graphics.DrawImageUnscaled%2A> method draws an image using its physical size, so the image will have its correct size in inches regardless of the resolution (dots per inch) of the display device. For example, suppose an image has a pixel width of 216 and a horizontal resolution of 72 dots per inch. If you call <xref:System.Drawing.Graphics.DrawImageUnscaled%2A> to draw that image on a device that has a resolution of 96 dots per inch, the pixel width of the rendered image will be (216/72)*96 = 288."
  syntax:
    content: public void DrawImageUnscaled (System.Drawing.Image image, int x, int y, int width, int height);
    parameters:
    - id: image
      type: System.Drawing.Image
      description: <xref href="System.Drawing.Image"></xref> to draw.
    - id: x
      type: System.Int32
      description: The x-coordinate of the upper-left corner of the drawn image.
    - id: y
      type: System.Int32
      description: The y-coordinate of the upper-left corner of the drawn image.
    - id: width
      type: System.Int32
      description: Not used.
    - id: height
      type: System.Int32
      description: Not used.
  overload: System.Drawing.Graphics.DrawImageUnscaled*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>image</code> is `null`.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.DrawImageUnscaled(System.Drawing.Image,System.Int32,System.Int32)
  commentId: M:System.Drawing.Graphics.DrawImageUnscaled(System.Drawing.Image,System.Int32,System.Int32)
  id: DrawImageUnscaled(System.Drawing.Image,System.Int32,System.Int32)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: DrawImageUnscaled(Image, Int32, Int32)
  nameWithType: Graphics.DrawImageUnscaled(Image, Int32, Int32)
  fullName: Graphics.DrawImageUnscaled(Image, Int32, Int32)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Draws the specified image using its original physical size at the location specified by a coordinate pair.
  remarks: "An <xref:System.Drawing.Image> stores a value for pixel width and a value for horizontal resolution (dots per inch). The physical width, measured in inches, of an image is the pixel width divided by the horizontal resolution. For example, an image with a pixel width of 216 and a horizontal resolution of 72 dots per inch has a physical width of 3 inches. Similar remarks apply to pixel height and physical height.  \n  \n The <xref:System.Drawing.Graphics.DrawImageUnscaled%2A> method draws an image using its physical size, so the image will have its correct size in inches regardless of the resolution (dots per inch) of the display device. For example, suppose an image has a pixel width of 216 and a horizontal resolution of 72 dots per inch. If you call <xref:System.Drawing.Graphics.DrawImageUnscaled%2A> to draw that image on a device that has a resolution of 96 dots per inch, the pixel width of the rendered image will be (216/72)*96 = 288."
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates an image from a JPEG file, SampImag.jpg, in the folder of the example.  \n  \n-   Creates a point at which to draw the upper-left corner of the image.  \n  \n-   Draws the entire image using its physical size.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples2#65](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#65)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples2#65](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#65)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples2#65](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#65)]"
  syntax:
    content: public void DrawImageUnscaled (System.Drawing.Image image, int x, int y);
    parameters:
    - id: image
      type: System.Drawing.Image
      description: <xref href="System.Drawing.Image"></xref> to draw.
    - id: x
      type: System.Int32
      description: The x-coordinate of the upper-left corner of the drawn image.
    - id: y
      type: System.Int32
      description: The y-coordinate of the upper-left corner of the drawn image.
  overload: System.Drawing.Graphics.DrawImageUnscaled*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>image</code> is `null`.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.DrawImageUnscaled(System.Drawing.Image,System.Drawing.Point)
  commentId: M:System.Drawing.Graphics.DrawImageUnscaled(System.Drawing.Image,System.Drawing.Point)
  id: DrawImageUnscaled(System.Drawing.Image,System.Drawing.Point)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: DrawImageUnscaled(Image, Point)
  nameWithType: Graphics.DrawImageUnscaled(Image, Point)
  fullName: Graphics.DrawImageUnscaled(Image, Point)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Draws a specified image using its original physical size at a specified location.
  remarks: "An <xref:System.Drawing.Image> stores a value for pixel width and a value for horizontal resolution (dots per inch). The physical width, measured in inches, of an image is the pixel width divided by the horizontal resolution. For example, an image with a pixel width of 216 and a horizontal resolution of 72 dots per inch has a physical width of 3 inches. Similar remarks apply to pixel height and physical height.  \n  \n The <xref:System.Drawing.Graphics.DrawImageUnscaled%2A> method draws an image using its physical size, so the image will have its correct size in inches regardless of the resolution (dots per inch) of the display device. For example, suppose an image has a pixel width of 216 and a horizontal resolution of 72 dots per inch. If you call <xref:System.Drawing.Graphics.DrawImageUnscaled%2A> to draw that image on a device that has a resolution of 96 dots per inch, the pixel width of the rendered image will be (216/72)*96 = 288."
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates an image from a JPEG file SampImag.jpg in the folder of the example.  \n  \n-   Creates a point at which to draw the upper-left corner of the image.  \n  \n-   Draws the entire image using its physical size.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples2#64](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#64)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples2#64](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#64)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples2#64](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#64)]"
  syntax:
    content: public void DrawImageUnscaled (System.Drawing.Image image, System.Drawing.Point point);
    parameters:
    - id: image
      type: System.Drawing.Image
      description: <xref href="System.Drawing.Image"></xref> to draw.
    - id: point
      type: System.Drawing.Point
      description: <xref href="System.Drawing.Point"></xref> structure that specifies the upper-left corner of the drawn image.
  overload: System.Drawing.Graphics.DrawImageUnscaled*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>image</code> is `null`.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.DrawImageUnscaled(System.Drawing.Image,System.Drawing.Rectangle)
  commentId: M:System.Drawing.Graphics.DrawImageUnscaled(System.Drawing.Image,System.Drawing.Rectangle)
  id: DrawImageUnscaled(System.Drawing.Image,System.Drawing.Rectangle)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: DrawImageUnscaled(Image, Rectangle)
  nameWithType: Graphics.DrawImageUnscaled(Image, Rectangle)
  fullName: Graphics.DrawImageUnscaled(Image, Rectangle)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Draws a specified image using its original physical size at a specified location.
  remarks: "An <xref:System.Drawing.Image> stores a value for pixel width and a value for horizontal resolution (dots per inch). The physical width, measured in inches, of an image is the pixel width divided by the horizontal resolution. For example, an image with a pixel width of 216 and a horizontal resolution of 72 dots per inch has a physical width of 3 inches. Similar remarks apply to pixel height and physical height.  \n  \n The <xref:System.Drawing.Graphics.DrawImageUnscaled%2A> method draws an image using its physical size, so the image will have its correct size in inches regardless of the resolution (dots per inch) of the display device. For example, suppose an image has a pixel width of 216 and a horizontal resolution of 72 dots per inch. If you call <xref:System.Drawing.Graphics.DrawImageUnscaled%2A> to draw that image on a device that has a resolution of 96 dots per inch, the pixel width of the rendered image will be (216/72)*96 = 288."
  syntax:
    content: public void DrawImageUnscaled (System.Drawing.Image image, System.Drawing.Rectangle rect);
    parameters:
    - id: image
      type: System.Drawing.Image
      description: <xref href="System.Drawing.Image"></xref> to draw.
    - id: rect
      type: System.Drawing.Rectangle
      description: <xref href="System.Drawing.Rectangle"></xref> that specifies the upper-left corner of the drawn image. The X and Y properties of the rectangle specify the upper-left corner. The Width and Height properties are ignored.
  overload: System.Drawing.Graphics.DrawImageUnscaled*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>image</code> is `null`.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.DrawImageUnscaledAndClipped(System.Drawing.Image,System.Drawing.Rectangle)
  commentId: M:System.Drawing.Graphics.DrawImageUnscaledAndClipped(System.Drawing.Image,System.Drawing.Rectangle)
  id: DrawImageUnscaledAndClipped(System.Drawing.Image,System.Drawing.Rectangle)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: DrawImageUnscaledAndClipped(Image, Rectangle)
  nameWithType: Graphics.DrawImageUnscaledAndClipped(Image, Rectangle)
  fullName: Graphics.DrawImageUnscaledAndClipped(Image, Rectangle)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Draws the specified image without scaling and clips it, if necessary, to fit in the specified rectangle.
  remarks: ''
  example:
  - "The following example demonstrates how to use the <xref:System.Drawing.Graphics.DrawImageUnscaledAndClipped%2A> method. To run this example, paste it into a Windows Form. Handle the form’s <xref:System.Windows.Forms.Control.Paint> event and call the `DrawImageUnscaled` method from the <xref:System.Windows.Forms.Control.Paint> event-handling method, passing `e` as <xref:System.Windows.Forms.PaintEventArgs>.  \n  \n [!code-csharp[System.Drawing.MiscWhidbeySnippets#8](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/CS/Form1.cs#8)]\n [!code-vb[System.Drawing.MiscWhidbeySnippets#8](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/VB/Form1.vb#8)]"
  syntax:
    content: public void DrawImageUnscaledAndClipped (System.Drawing.Image image, System.Drawing.Rectangle rect);
    parameters:
    - id: image
      type: System.Drawing.Image
      description: The <xref href="System.Drawing.Image"></xref> to draw.
    - id: rect
      type: System.Drawing.Rectangle
      description: The <xref href="System.Drawing.Rectangle"></xref> in which to draw the image.
  overload: System.Drawing.Graphics.DrawImageUnscaledAndClipped*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>image</code> is `null`.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.DrawLine(System.Drawing.Pen,System.Drawing.PointF,System.Drawing.PointF)
  commentId: M:System.Drawing.Graphics.DrawLine(System.Drawing.Pen,System.Drawing.PointF,System.Drawing.PointF)
  id: DrawLine(System.Drawing.Pen,System.Drawing.PointF,System.Drawing.PointF)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: DrawLine(Pen, PointF, PointF)
  nameWithType: Graphics.DrawLine(Pen, PointF, PointF)
  fullName: Graphics.DrawLine(Pen, PointF, PointF)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Draws a line connecting two <xref href="System.Drawing.PointF"></xref> structures.
  remarks: This method draws a line connecting the two points specified by the `pt1` and p`2` parameters.
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates a black pen.  \n  \n-   Creates points for the endpoints of the line.  \n  \n-   Draws the line to the screen.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples2#67](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#67)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples2#67](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#67)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples2#67](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#67)]"
  syntax:
    content: public void DrawLine (System.Drawing.Pen pen, System.Drawing.PointF pt1, System.Drawing.PointF pt2);
    parameters:
    - id: pen
      type: System.Drawing.Pen
      description: <xref href="System.Drawing.Pen"></xref> that determines the color, width, and style of the line.
    - id: pt1
      type: System.Drawing.PointF
      description: <xref href="System.Drawing.PointF"></xref> structure that represents the first point to connect.
    - id: pt2
      type: System.Drawing.PointF
      description: <xref href="System.Drawing.PointF"></xref> structure that represents the second point to connect.
  overload: System.Drawing.Graphics.DrawLine*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>pen</code> is `null`.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.DrawLine(System.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32)
  commentId: M:System.Drawing.Graphics.DrawLine(System.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32)
  id: DrawLine(System.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: DrawLine(Pen, Int32, Int32, Int32, Int32)
  nameWithType: Graphics.DrawLine(Pen, Int32, Int32, Int32, Int32)
  fullName: Graphics.DrawLine(Pen, Int32, Int32, Int32, Int32)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Draws a line connecting the two points specified by the coordinate pairs.
  remarks: This method draws a line connecting the two points specified by the `x1`, `y1`, `x2`, and `y2` parameters.
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates a black pen.  \n  \n-   Creates the coordinates of the endpoints of the line.  \n  \n-   Draws the line to the screen.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples2#68](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#68)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples2#68](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#68)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples2#68](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#68)]"
  syntax:
    content: public void DrawLine (System.Drawing.Pen pen, int x1, int y1, int x2, int y2);
    parameters:
    - id: pen
      type: System.Drawing.Pen
      description: <xref href="System.Drawing.Pen"></xref> that determines the color, width, and style of the line.
    - id: x1
      type: System.Int32
      description: The x-coordinate of the first point.
    - id: y1
      type: System.Int32
      description: The y-coordinate of the first point.
    - id: x2
      type: System.Int32
      description: The x-coordinate of the second point.
    - id: y2
      type: System.Int32
      description: The y-coordinate of the second point.
  overload: System.Drawing.Graphics.DrawLine*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>pen</code> is `null`.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.DrawLine(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single)
  commentId: M:System.Drawing.Graphics.DrawLine(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single)
  id: DrawLine(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: DrawLine(Pen, Single, Single, Single, Single)
  nameWithType: Graphics.DrawLine(Pen, Single, Single, Single, Single)
  fullName: Graphics.DrawLine(Pen, Single, Single, Single, Single)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Draws a line connecting the two points specified by the coordinate pairs.
  remarks: This method draws a line connecting the two points specified by the `x1`, `y1`, `x2`, and `y2` parameters.
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates a black pen.  \n  \n-   Creates the coordinates of the endpoints of the line.  \n  \n-   Draws the line to the screen.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples2#69](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#69)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples2#69](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#69)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples2#69](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#69)]"
  syntax:
    content: public void DrawLine (System.Drawing.Pen pen, float x1, float y1, float x2, float y2);
    parameters:
    - id: pen
      type: System.Drawing.Pen
      description: <xref href="System.Drawing.Pen"></xref> that determines the color, width, and style of the line.
    - id: x1
      type: System.Single
      description: The x-coordinate of the first point.
    - id: y1
      type: System.Single
      description: The y-coordinate of the first point.
    - id: x2
      type: System.Single
      description: The x-coordinate of the second point.
    - id: y2
      type: System.Single
      description: The y-coordinate of the second point.
  overload: System.Drawing.Graphics.DrawLine*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>pen</code> is `null`.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.DrawLine(System.Drawing.Pen,System.Drawing.Point,System.Drawing.Point)
  commentId: M:System.Drawing.Graphics.DrawLine(System.Drawing.Pen,System.Drawing.Point,System.Drawing.Point)
  id: DrawLine(System.Drawing.Pen,System.Drawing.Point,System.Drawing.Point)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: DrawLine(Pen, Point, Point)
  nameWithType: Graphics.DrawLine(Pen, Point, Point)
  fullName: Graphics.DrawLine(Pen, Point, Point)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Draws a line connecting two <xref href="System.Drawing.Point"></xref> structures.
  remarks: ''
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates a black pen.  \n  \n-   Creates points for the endpoints of the line.  \n  \n-   Draws the line to the screen.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples2#66](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#66)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples2#66](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#66)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples2#66](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#66)]"
  syntax:
    content: public void DrawLine (System.Drawing.Pen pen, System.Drawing.Point pt1, System.Drawing.Point pt2);
    parameters:
    - id: pen
      type: System.Drawing.Pen
      description: <xref href="System.Drawing.Pen"></xref> that determines the color, width, and style of the line.
    - id: pt1
      type: System.Drawing.Point
      description: <xref href="System.Drawing.Point"></xref> structure that represents the first point to connect.
    - id: pt2
      type: System.Drawing.Point
      description: <xref href="System.Drawing.Point"></xref> structure that represents the second point to connect.
  overload: System.Drawing.Graphics.DrawLine*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>pen</code> is `null`.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.DrawLines(System.Drawing.Pen,System.Drawing.Point[])
  commentId: M:System.Drawing.Graphics.DrawLines(System.Drawing.Pen,System.Drawing.Point[])
  id: DrawLines(System.Drawing.Pen,System.Drawing.Point[])
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: DrawLines(Pen, Point[])
  nameWithType: Graphics.DrawLines(Pen, Point[])
  fullName: Graphics.DrawLines(Pen, Point[])
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Draws a series of line segments that connect an array of <xref href="System.Drawing.Point"></xref> structures.
  remarks: This method draws a series of lines connecting an array of ending points. The first two points in the array specify the first line. Each additional point specifies the end of a line segment whose starting point is the ending point of the previous line segment.
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates a black pen.  \n  \n-   Creates an array of points of segments of the line.  \n  \n-   Draws the connected line segments to the screen.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples2#70](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#70)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples2#70](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#70)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples2#70](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#70)]"
  syntax:
    content: public void DrawLines (System.Drawing.Pen pen, System.Drawing.Point[] points);
    parameters:
    - id: pen
      type: System.Drawing.Pen
      description: <xref href="System.Drawing.Pen"></xref> that determines the color, width, and style of the line segments.
    - id: points
      type: System.Drawing.Point[]
      description: Array of <xref href="System.Drawing.Point"></xref> structures that represent the points to connect.
  overload: System.Drawing.Graphics.DrawLines*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>pen</code> is `null`.  \n  \n -or-  \n  \n <code>points</code> is `null`."
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.DrawLines(System.Drawing.Pen,System.Drawing.PointF[])
  commentId: M:System.Drawing.Graphics.DrawLines(System.Drawing.Pen,System.Drawing.PointF[])
  id: DrawLines(System.Drawing.Pen,System.Drawing.PointF[])
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: DrawLines(Pen, PointF[])
  nameWithType: Graphics.DrawLines(Pen, PointF[])
  fullName: Graphics.DrawLines(Pen, PointF[])
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Draws a series of line segments that connect an array of <xref href="System.Drawing.PointF"></xref> structures.
  remarks: This method draws a series of lines connecting an array of ending points. The first two points in the array specify the first line. Each additional point specifies the end of a line segment whose starting point is the ending point of the previous line segment.
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Code creates a black pen.  \n  \n-   Creates an array of points of segments of the line.  \n  \n-   Draws the connected line segments to the screen.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples2#71](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#71)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples2#71](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#71)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples2#71](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#71)]"
  syntax:
    content: public void DrawLines (System.Drawing.Pen pen, System.Drawing.PointF[] points);
    parameters:
    - id: pen
      type: System.Drawing.Pen
      description: <xref href="System.Drawing.Pen"></xref> that determines the color, width, and style of the line segments.
    - id: points
      type: System.Drawing.PointF[]
      description: Array of <xref href="System.Drawing.PointF"></xref> structures that represent the points to connect.
  overload: System.Drawing.Graphics.DrawLines*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>pen</code> is `null`.  \n  \n -or-  \n  \n <code>points</code> is `null`."
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.DrawPath(System.Drawing.Pen,System.Drawing.Drawing2D.GraphicsPath)
  commentId: M:System.Drawing.Graphics.DrawPath(System.Drawing.Pen,System.Drawing.Drawing2D.GraphicsPath)
  id: DrawPath(System.Drawing.Pen,System.Drawing.Drawing2D.GraphicsPath)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: DrawPath(Pen, GraphicsPath)
  nameWithType: Graphics.DrawPath(Pen, GraphicsPath)
  fullName: Graphics.DrawPath(Pen, GraphicsPath)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Draws a <xref href="System.Drawing.Drawing2D.GraphicsPath"></xref>.
  remarks: The current transformation in the graphic context is applied to the <xref:System.Drawing.Drawing2D.GraphicsPath> before it is drawn.
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates a graphics path object and adds an ellipse to it.  \n  \n-   Creates a black pen.  \n  \n-   Draws the graphics path to the screen.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples2#72](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#72)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples2#72](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#72)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples2#72](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#72)]"
  syntax:
    content: public void DrawPath (System.Drawing.Pen pen, System.Drawing.Drawing2D.GraphicsPath path);
    parameters:
    - id: pen
      type: System.Drawing.Pen
      description: <xref href="System.Drawing.Pen"></xref> that determines the color, width, and style of the path.
    - id: path
      type: System.Drawing.Drawing2D.GraphicsPath
      description: <xref href="System.Drawing.Drawing2D.GraphicsPath"></xref> to draw.
  overload: System.Drawing.Graphics.DrawPath*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>pen</code> is `null`.  \n  \n -or-  \n  \n <code>path</code> is `null`."
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.DrawPie(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)
  commentId: M:System.Drawing.Graphics.DrawPie(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)
  id: DrawPie(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: DrawPie(Pen, Single, Single, Single, Single, Single, Single)
  nameWithType: Graphics.DrawPie(Pen, Single, Single, Single, Single, Single, Single)
  fullName: Graphics.DrawPie(Pen, Single, Single, Single, Single, Single, Single)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Draws a pie shape defined by an ellipse specified by a coordinate pair, a width, a height, and two radial lines.
  remarks: "This method draws a pie shape defined by an arc of an ellipse and the two radial lines that intersect with the endpoints of the arc. The ellipse is defined by the bounding rectangle described by the `x`, `y`, `width`, and `height` parameters. The pie shape consists of the two radial lines defined by the `startAngle` and `sweepAngle` parameters, and the arc between the intersections of those radial lines with the ellipse.  \n  \n If the `sweepAngle` parameter is greater than 360 degrees or less than -360 degrees, it is treated as if it were 360 degrees or -360 degrees, respectively."
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates a black pen.  \n  \n-   Creates the position and size of a rectangle that bounds a complete ellipse.  \n  \n-   Defines the angles at which to start drawing (relative to the x axis) and through which to draw (both in a clockwise direction).  \n  \n-   Draws the pie segment to the screen.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples2#76](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#76)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples2#76](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#76)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples2#76](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#76)]"
  syntax:
    content: public void DrawPie (System.Drawing.Pen pen, float x, float y, float width, float height, float startAngle, float sweepAngle);
    parameters:
    - id: pen
      type: System.Drawing.Pen
      description: <xref href="System.Drawing.Pen"></xref> that determines the color, width, and style of the pie shape.
    - id: x
      type: System.Single
      description: The x-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse from which the pie shape comes.
    - id: y
      type: System.Single
      description: The y-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse from which the pie shape comes.
    - id: width
      type: System.Single
      description: Width of the bounding rectangle that defines the ellipse from which the pie shape comes.
    - id: height
      type: System.Single
      description: Height of the bounding rectangle that defines the ellipse from which the pie shape comes.
    - id: startAngle
      type: System.Single
      description: Angle measured in degrees clockwise from the x-axis to the first side of the pie shape.
    - id: sweepAngle
      type: System.Single
      description: Angle measured in degrees clockwise from the <code>startAngle</code> parameter to the second side of the pie shape.
  overload: System.Drawing.Graphics.DrawPie*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>pen</code> is `null`.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.DrawPie(System.Drawing.Pen,System.Drawing.Rectangle,System.Single,System.Single)
  commentId: M:System.Drawing.Graphics.DrawPie(System.Drawing.Pen,System.Drawing.Rectangle,System.Single,System.Single)
  id: DrawPie(System.Drawing.Pen,System.Drawing.Rectangle,System.Single,System.Single)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: DrawPie(Pen, Rectangle, Single, Single)
  nameWithType: Graphics.DrawPie(Pen, Rectangle, Single, Single)
  fullName: Graphics.DrawPie(Pen, Rectangle, Single, Single)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Draws a pie shape defined by an ellipse specified by a <xref href="System.Drawing.Rectangle"></xref> structure and two radial lines.
  remarks: "This method draws a pie shape defined by an arc of an ellipse and the two radial lines that intersect with the endpoints of the arc. The ellipse is defined by the bounding rectangle. The pie shape consists of the two radial lines defined by the `startAngle` and `sweepAngle` parameters, and the arc between the intersections of those radial lines with the ellipse.  \n  \n If the `sweepAngle` parameter is greater than 360 degrees or less than -360 degrees, it is treated as if it were 360 degrees or -360 degrees, respectively."
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates a black pen.  \n  \n-   Creates a rectangle that bounds a complete ellipse.  \n  \n-   Defines the angles at which to start drawing (relative to the x axis) and through which to draw (both in a clockwise direction).  \n  \n-   Draws the pie segment to the screen.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples2#73](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#73)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples2#73](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#73)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples2#73](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#73)]"
  syntax:
    content: public void DrawPie (System.Drawing.Pen pen, System.Drawing.Rectangle rect, float startAngle, float sweepAngle);
    parameters:
    - id: pen
      type: System.Drawing.Pen
      description: <xref href="System.Drawing.Pen"></xref> that determines the color, width, and style of the pie shape.
    - id: rect
      type: System.Drawing.Rectangle
      description: <xref href="System.Drawing.Rectangle"></xref> structure that represents the bounding rectangle that defines the ellipse from which the pie shape comes.
    - id: startAngle
      type: System.Single
      description: Angle measured in degrees clockwise from the x-axis to the first side of the pie shape.
    - id: sweepAngle
      type: System.Single
      description: Angle measured in degrees clockwise from the <code>startAngle</code> parameter to the second side of the pie shape.
  overload: System.Drawing.Graphics.DrawPie*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>pen</code> is `null`.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.DrawPie(System.Drawing.Pen,System.Drawing.RectangleF,System.Single,System.Single)
  commentId: M:System.Drawing.Graphics.DrawPie(System.Drawing.Pen,System.Drawing.RectangleF,System.Single,System.Single)
  id: DrawPie(System.Drawing.Pen,System.Drawing.RectangleF,System.Single,System.Single)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: DrawPie(Pen, RectangleF, Single, Single)
  nameWithType: Graphics.DrawPie(Pen, RectangleF, Single, Single)
  fullName: Graphics.DrawPie(Pen, RectangleF, Single, Single)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Draws a pie shape defined by an ellipse specified by a <xref href="System.Drawing.RectangleF"></xref> structure and two radial lines.
  remarks: "This method draws a pie shape defined by an arc of an ellipse and the two radial lines that intersect with the endpoints of the arc. The ellipse is defined by the bounding rectangle. The pie shape consists of the two radial lines defined by the `startAngle` and `sweepAngle` parameters, and the arc between the intersections of those radial lines with the ellipse.  \n  \n If the `sweepAngle` parameter is greater than 360 degrees or less than -360 degrees, it is treated as if it were 360 degrees or -360 degrees, respectively."
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates a black pen.  \n  \n-   Creates a rectangle that bounds a complete ellipse.  \n  \n-   Defines the angles at which to start drawing (relative to the x axis) and through which to draw (both in a clockwise direction).  \n  \n-   Draws the pie segment to the screen.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples2#74](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#74)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples2#74](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#74)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples2#74](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#74)]"
  syntax:
    content: public void DrawPie (System.Drawing.Pen pen, System.Drawing.RectangleF rect, float startAngle, float sweepAngle);
    parameters:
    - id: pen
      type: System.Drawing.Pen
      description: <xref href="System.Drawing.Pen"></xref> that determines the color, width, and style of the pie shape.
    - id: rect
      type: System.Drawing.RectangleF
      description: <xref href="System.Drawing.RectangleF"></xref> structure that represents the bounding rectangle that defines the ellipse from which the pie shape comes.
    - id: startAngle
      type: System.Single
      description: Angle measured in degrees clockwise from the x-axis to the first side of the pie shape.
    - id: sweepAngle
      type: System.Single
      description: Angle measured in degrees clockwise from the <code>startAngle</code> parameter to the second side of the pie shape.
  overload: System.Drawing.Graphics.DrawPie*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>pen</code> is `null`.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.DrawPie(System.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  commentId: M:System.Drawing.Graphics.DrawPie(System.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  id: DrawPie(System.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: DrawPie(Pen, Int32, Int32, Int32, Int32, Int32, Int32)
  nameWithType: Graphics.DrawPie(Pen, Int32, Int32, Int32, Int32, Int32, Int32)
  fullName: Graphics.DrawPie(Pen, Int32, Int32, Int32, Int32, Int32, Int32)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Draws a pie shape defined by an ellipse specified by a coordinate pair, a width, a height, and two radial lines.
  remarks: "This method draws a pie shape defined by an arc of an ellipse and the two radial lines that intersect with the endpoints of the arc. The ellipse is defined by the bounding rectangle described by the `x`, `y`, `width`, and `height` parameters. The pie shape consists of the two radial lines defined by the `startAngle` and `sweepAngle` parameters, and the arc between the intersections of those radial lines with the ellipse.  \n  \n If the `sweepAngle` parameter is greater than 360 degrees or less than -360 degrees, it is treated as if it were 360 degrees or -360 degrees, respectively."
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates a black pen.  \n  \n-   Creates the position and size of a rectangle that bounds a complete ellipse.  \n  \n-   Defines the angles at which to start drawing (relative to the x axis) and through which to draw (both in a clockwise direction).  \n  \n-   Draws the pie shape to the screen.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples2#75](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#75)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples2#75](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#75)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples2#75](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#75)]"
  syntax:
    content: public void DrawPie (System.Drawing.Pen pen, int x, int y, int width, int height, int startAngle, int sweepAngle);
    parameters:
    - id: pen
      type: System.Drawing.Pen
      description: <xref href="System.Drawing.Pen"></xref> that determines the color, width, and style of the pie shape.
    - id: x
      type: System.Int32
      description: The x-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse from which the pie shape comes.
    - id: y
      type: System.Int32
      description: The y-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse from which the pie shape comes.
    - id: width
      type: System.Int32
      description: Width of the bounding rectangle that defines the ellipse from which the pie shape comes.
    - id: height
      type: System.Int32
      description: Height of the bounding rectangle that defines the ellipse from which the pie shape comes.
    - id: startAngle
      type: System.Int32
      description: Angle measured in degrees clockwise from the x-axis to the first side of the pie shape.
    - id: sweepAngle
      type: System.Int32
      description: Angle measured in degrees clockwise from the <code>startAngle</code> parameter to the second side of the pie shape.
  overload: System.Drawing.Graphics.DrawPie*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>pen</code> is `null`.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.DrawPolygon(System.Drawing.Pen,System.Drawing.PointF[])
  commentId: M:System.Drawing.Graphics.DrawPolygon(System.Drawing.Pen,System.Drawing.PointF[])
  id: DrawPolygon(System.Drawing.Pen,System.Drawing.PointF[])
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: DrawPolygon(Pen, PointF[])
  nameWithType: Graphics.DrawPolygon(Pen, PointF[])
  fullName: Graphics.DrawPolygon(Pen, PointF[])
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Draws a polygon defined by an array of <xref href="System.Drawing.PointF"></xref> structures.
  remarks: Every pair of two consecutive points in the array specifies a side of the polygon. In addition, if the last point and the first of the array point do not coincide, they specify the last side of the polygon.
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates a black pen.  \n  \n-   Creates an array of seven points for the vertices of the polygon.  \n  \n-   Draws the polygon to the screen.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples2#77](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#77)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples2#77](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#77)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples2#77](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#77)]"
  syntax:
    content: public void DrawPolygon (System.Drawing.Pen pen, System.Drawing.PointF[] points);
    parameters:
    - id: pen
      type: System.Drawing.Pen
      description: <xref href="System.Drawing.Pen"></xref> that determines the color, width, and style of the polygon.
    - id: points
      type: System.Drawing.PointF[]
      description: Array of <xref href="System.Drawing.PointF"></xref> structures that represent the vertices of the polygon.
  overload: System.Drawing.Graphics.DrawPolygon*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>pen</code> is `null`.  \n  \n -or-  \n  \n <code>points</code> is `null`."
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.DrawPolygon(System.Drawing.Pen,System.Drawing.Point[])
  commentId: M:System.Drawing.Graphics.DrawPolygon(System.Drawing.Pen,System.Drawing.Point[])
  id: DrawPolygon(System.Drawing.Pen,System.Drawing.Point[])
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: DrawPolygon(Pen, Point[])
  nameWithType: Graphics.DrawPolygon(Pen, Point[])
  fullName: Graphics.DrawPolygon(Pen, Point[])
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Draws a polygon defined by an array of <xref href="System.Drawing.Point"></xref> structures.
  remarks: Every pair of two consecutive points in the array specifies a side of the polygon. In addition, if the last point and the first point of the array do not coincide, they specify the last side of the polygon.
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates a black pen.  \n  \n-   Creates an array of seven points for the vertices of the polygon.  \n  \n-   Draws the polygon to the screen.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples2#78](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#78)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples2#78](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#78)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples2#78](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#78)]"
  syntax:
    content: public void DrawPolygon (System.Drawing.Pen pen, System.Drawing.Point[] points);
    parameters:
    - id: pen
      type: System.Drawing.Pen
      description: <xref href="System.Drawing.Pen"></xref> that determines the color, width, and style of the polygon.
    - id: points
      type: System.Drawing.Point[]
      description: Array of <xref href="System.Drawing.Point"></xref> structures that represent the vertices of the polygon.
  overload: System.Drawing.Graphics.DrawPolygon*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>pen</code> is `null`.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.DrawRectangle(System.Drawing.Pen,System.Drawing.Rectangle)
  commentId: M:System.Drawing.Graphics.DrawRectangle(System.Drawing.Pen,System.Drawing.Rectangle)
  id: DrawRectangle(System.Drawing.Pen,System.Drawing.Rectangle)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: DrawRectangle(Pen, Rectangle)
  nameWithType: Graphics.DrawRectangle(Pen, Rectangle)
  fullName: Graphics.DrawRectangle(Pen, Rectangle)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Draws a rectangle specified by a <xref href="System.Drawing.Rectangle"></xref> structure.
  remarks: For information about how to draw a <xref:System.Drawing.RectangleF>, see<xref:System.Drawing.Graphics.DrawRectangles%28System.Drawing.Pen%2CSystem.Drawing.RectangleF%5B%5D%29>.
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates a black pen.  \n  \n-   Creates a rectangle.  \n  \n-   Draws the rectangle to the screen.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples2#79](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#79)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples2#79](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#79)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples2#79](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#79)]"
  syntax:
    content: public void DrawRectangle (System.Drawing.Pen pen, System.Drawing.Rectangle rect);
    parameters:
    - id: pen
      type: System.Drawing.Pen
      description: A <xref href="System.Drawing.Pen"></xref> that determines the color, width, and style of the rectangle.
    - id: rect
      type: System.Drawing.Rectangle
      description: A <xref href="System.Drawing.Rectangle"></xref> structure that represents the rectangle to draw.
  overload: System.Drawing.Graphics.DrawRectangle*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>pen</code> is `null`.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.DrawRectangle(System.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32)
  commentId: M:System.Drawing.Graphics.DrawRectangle(System.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32)
  id: DrawRectangle(System.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: DrawRectangle(Pen, Int32, Int32, Int32, Int32)
  nameWithType: Graphics.DrawRectangle(Pen, Int32, Int32, Int32, Int32)
  fullName: Graphics.DrawRectangle(Pen, Int32, Int32, Int32, Int32)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Draws a rectangle specified by a coordinate pair, a width, and a height.
  remarks: For information about how to draw a <xref:System.Drawing.RectangleF>, see <xref:System.Drawing.Graphics.DrawRectangles%28System.Drawing.Pen%2CSystem.Drawing.RectangleF%5B%5D%29>.
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates a black pen.  \n  \n-   Creates the position and size of a rectangle.  \n  \n-   Draws the rectangle to the screen.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples2#80](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#80)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples2#80](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#80)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples2#80](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#80)]"
  syntax:
    content: public void DrawRectangle (System.Drawing.Pen pen, int x, int y, int width, int height);
    parameters:
    - id: pen
      type: System.Drawing.Pen
      description: <xref href="System.Drawing.Pen"></xref> that determines the color, width, and style of the rectangle.
    - id: x
      type: System.Int32
      description: The x-coordinate of the upper-left corner of the rectangle to draw.
    - id: y
      type: System.Int32
      description: The y-coordinate of the upper-left corner of the rectangle to draw.
    - id: width
      type: System.Int32
      description: Width of the rectangle to draw.
    - id: height
      type: System.Int32
      description: Height of the rectangle to draw.
  overload: System.Drawing.Graphics.DrawRectangle*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>pen</code> is `null`.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.DrawRectangle(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single)
  commentId: M:System.Drawing.Graphics.DrawRectangle(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single)
  id: DrawRectangle(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: DrawRectangle(Pen, Single, Single, Single, Single)
  nameWithType: Graphics.DrawRectangle(Pen, Single, Single, Single, Single)
  fullName: Graphics.DrawRectangle(Pen, Single, Single, Single, Single)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Draws a rectangle specified by a coordinate pair, a width, and a height.
  remarks: For information about how to draw a <xref:System.Drawing.RectangleF>, see <xref:System.Drawing.Graphics.DrawRectangles%28System.Drawing.Pen%2CSystem.Drawing.RectangleF%5B%5D%29>.
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates a black pen.  \n  \n-   Creates the position and size of a rectangle.  \n  \n-   Draws the rectangle to the screen.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples2#81](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#81)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples2#81](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#81)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples2#81](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#81)]"
  syntax:
    content: public void DrawRectangle (System.Drawing.Pen pen, float x, float y, float width, float height);
    parameters:
    - id: pen
      type: System.Drawing.Pen
      description: A <xref href="System.Drawing.Pen"></xref> that determines the color, width, and style of the rectangle.
    - id: x
      type: System.Single
      description: The x-coordinate of the upper-left corner of the rectangle to draw.
    - id: y
      type: System.Single
      description: The y-coordinate of the upper-left corner of the rectangle to draw.
    - id: width
      type: System.Single
      description: The width of the rectangle to draw.
    - id: height
      type: System.Single
      description: The height of the rectangle to draw.
  overload: System.Drawing.Graphics.DrawRectangle*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>pen</code> is `null`.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.DrawRectangles(System.Drawing.Pen,System.Drawing.Rectangle[])
  commentId: M:System.Drawing.Graphics.DrawRectangles(System.Drawing.Pen,System.Drawing.Rectangle[])
  id: DrawRectangles(System.Drawing.Pen,System.Drawing.Rectangle[])
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: DrawRectangles(Pen, Rectangle[])
  nameWithType: Graphics.DrawRectangles(Pen, Rectangle[])
  fullName: Graphics.DrawRectangles(Pen, Rectangle[])
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Draws a series of rectangles specified by <xref href="System.Drawing.Rectangle"></xref> structures.
  remarks: ''
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates a black pen.  \n  \n-   Creates an array of three rectangles.  \n  \n-   Draws the rectangles to the screen.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples2#82](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#82)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples2#82](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#82)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples2#82](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#82)]"
  syntax:
    content: public void DrawRectangles (System.Drawing.Pen pen, System.Drawing.Rectangle[] rects);
    parameters:
    - id: pen
      type: System.Drawing.Pen
      description: <xref href="System.Drawing.Pen"></xref> that determines the color, width, and style of the outlines of the rectangles.
    - id: rects
      type: System.Drawing.Rectangle[]
      description: Array of <xref href="System.Drawing.Rectangle"></xref> structures that represent the rectangles to draw.
  overload: System.Drawing.Graphics.DrawRectangles*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>pen</code> is `null`.  \n  \n -or-  \n  \n <code>rects</code> is `null`."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>rects</code> is a zero-length array.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.DrawRectangles(System.Drawing.Pen,System.Drawing.RectangleF[])
  commentId: M:System.Drawing.Graphics.DrawRectangles(System.Drawing.Pen,System.Drawing.RectangleF[])
  id: DrawRectangles(System.Drawing.Pen,System.Drawing.RectangleF[])
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: DrawRectangles(Pen, RectangleF[])
  nameWithType: Graphics.DrawRectangles(Pen, RectangleF[])
  fullName: Graphics.DrawRectangles(Pen, RectangleF[])
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Draws a series of rectangles specified by <xref href="System.Drawing.RectangleF"></xref> structures.
  remarks: ''
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates a black pen.  \n  \n-   Creates an array of three rectangles.  \n  \n-   Draws the rectangles to the screen.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples2#83](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#83)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples2#83](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#83)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples2#83](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#83)]"
  syntax:
    content: public void DrawRectangles (System.Drawing.Pen pen, System.Drawing.RectangleF[] rects);
    parameters:
    - id: pen
      type: System.Drawing.Pen
      description: <xref href="System.Drawing.Pen"></xref> that determines the color, width, and style of the outlines of the rectangles.
    - id: rects
      type: System.Drawing.RectangleF[]
      description: Array of <xref href="System.Drawing.RectangleF"></xref> structures that represent the rectangles to draw.
  overload: System.Drawing.Graphics.DrawRectangles*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>pen</code> is `null`.  \n  \n -or-  \n  \n <code>rects</code> is `null`."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>rects</code> is a zero-length array.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Single,System.Single,System.Drawing.StringFormat)
  commentId: M:System.Drawing.Graphics.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Single,System.Single,System.Drawing.StringFormat)
  id: DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Single,System.Single,System.Drawing.StringFormat)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: DrawString(String, Font, Brush, Single, Single, StringFormat)
  nameWithType: Graphics.DrawString(String, Font, Brush, Single, Single, StringFormat)
  fullName: Graphics.DrawString(String, Font, Brush, Single, Single, StringFormat)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Draws the specified text string at the specified location with the specified <xref href="System.Drawing.Brush"></xref> and <xref href="System.Drawing.Font"></xref> objects using the formatting attributes of the specified <xref href="System.Drawing.StringFormat"></xref>.
  remarks: ''
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates a text string to draw.  \n  \n-   Defines the font as Arial (16pt).  \n  \n-   Creates a solid, black brush to draw with.  \n  \n-   Creates the coordinates of a point for the upper-left corner at which to draw the text.  \n  \n-   Sets the format of the string to draw vertically  \n  \n-   Draws the string to the screen using the font, brush, destination point, and format.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples2#89](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#89)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples2#89](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#89)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples2#89](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#89)]"
  syntax:
    content: public void DrawString (string s, System.Drawing.Font font, System.Drawing.Brush brush, float x, float y, System.Drawing.StringFormat format);
    parameters:
    - id: s
      type: System.String
      description: String to draw.
    - id: font
      type: System.Drawing.Font
      description: <xref href="System.Drawing.Font"></xref> that defines the text format of the string.
    - id: brush
      type: System.Drawing.Brush
      description: <xref href="System.Drawing.Brush"></xref> that determines the color and texture of the drawn text.
    - id: x
      type: System.Single
      description: The x-coordinate of the upper-left corner of the drawn text.
    - id: y
      type: System.Single
      description: The y-coordinate of the upper-left corner of the drawn text.
    - id: format
      type: System.Drawing.StringFormat
      description: <xref href="System.Drawing.StringFormat"></xref> that specifies formatting attributes, such as line spacing and alignment, that are applied to the drawn text.
  overload: System.Drawing.Graphics.DrawString*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>brush</code> is `null`.  \n  \n -or-  \n  \n <code>s</code> is `null`."
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.RectangleF,System.Drawing.StringFormat)
  commentId: M:System.Drawing.Graphics.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.RectangleF,System.Drawing.StringFormat)
  id: DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.RectangleF,System.Drawing.StringFormat)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: DrawString(String, Font, Brush, RectangleF, StringFormat)
  nameWithType: Graphics.DrawString(String, Font, Brush, RectangleF, StringFormat)
  fullName: Graphics.DrawString(String, Font, Brush, RectangleF, StringFormat)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Draws the specified text string in the specified rectangle with the specified <xref href="System.Drawing.Brush"></xref> and <xref href="System.Drawing.Font"></xref> objects using the formatting attributes of the specified <xref href="System.Drawing.StringFormat"></xref>.
  remarks: The text represented by the `s` parameter is drawn inside the rectangle represented by the `layoutRectangle` parameter. If the text does not fit inside the rectangle, it is truncated at the nearest word, unless otherwise specified with the `format` parameter.
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates a text string to draw.  \n  \n-   Defines the font as Arial (16pt).  \n  \n-   Creates a solid, black brush to draw with.  \n  \n-   Creates a rectangle in which to draw the text.  \n  \n-   Draws the rectangle to the screen.  \n  \n-   Sets the format of the string to center it within the rectangle.  \n  \n-   Draws the string to the screen using the font, brush, and destination rectangle.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples2#87](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#87)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples2#87](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#87)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples2#87](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#87)]"
  syntax:
    content: public void DrawString (string s, System.Drawing.Font font, System.Drawing.Brush brush, System.Drawing.RectangleF layoutRectangle, System.Drawing.StringFormat format);
    parameters:
    - id: s
      type: System.String
      description: String to draw.
    - id: font
      type: System.Drawing.Font
      description: <xref href="System.Drawing.Font"></xref> that defines the text format of the string.
    - id: brush
      type: System.Drawing.Brush
      description: <xref href="System.Drawing.Brush"></xref> that determines the color and texture of the drawn text.
    - id: layoutRectangle
      type: System.Drawing.RectangleF
      description: <xref href="System.Drawing.RectangleF"></xref> structure that specifies the location of the drawn text.
    - id: format
      type: System.Drawing.StringFormat
      description: <xref href="System.Drawing.StringFormat"></xref> that specifies formatting attributes, such as line spacing and alignment, that are applied to the drawn text.
  overload: System.Drawing.Graphics.DrawString*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>brush</code> is `null`.  \n  \n -or-  \n  \n <code>s</code> is `null`."
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Single,System.Single)
  commentId: M:System.Drawing.Graphics.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Single,System.Single)
  id: DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Single,System.Single)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: DrawString(String, Font, Brush, Single, Single)
  nameWithType: Graphics.DrawString(String, Font, Brush, Single, Single)
  fullName: Graphics.DrawString(String, Font, Brush, Single, Single)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Draws the specified text string at the specified location with the specified <xref href="System.Drawing.Brush"></xref> and <xref href="System.Drawing.Font"></xref> objects.
  remarks: ''
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates a text string to draw.  \n  \n-   Defines the font as Arial (16pt).  \n  \n-   Creates a solid black brush to draw with.  \n  \n-   Creates a point for the upper-left corner at which to draw the text.  \n  \n-   Draws the string to the screen using the font, brush, and destination point.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples2#88](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#88)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples2#88](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#88)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples2#88](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#88)]"
  syntax:
    content: public void DrawString (string s, System.Drawing.Font font, System.Drawing.Brush brush, float x, float y);
    parameters:
    - id: s
      type: System.String
      description: String to draw.
    - id: font
      type: System.Drawing.Font
      description: <xref href="System.Drawing.Font"></xref> that defines the text format of the string.
    - id: brush
      type: System.Drawing.Brush
      description: <xref href="System.Drawing.Brush"></xref> that determines the color and texture of the drawn text.
    - id: x
      type: System.Single
      description: The x-coordinate of the upper-left corner of the drawn text.
    - id: y
      type: System.Single
      description: The y-coordinate of the upper-left corner of the drawn text.
  overload: System.Drawing.Graphics.DrawString*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>brush</code> is `null`.  \n  \n -or-  \n  \n <code>s</code> is `null`."
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.RectangleF)
  commentId: M:System.Drawing.Graphics.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.RectangleF)
  id: DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.RectangleF)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: DrawString(String, Font, Brush, RectangleF)
  nameWithType: Graphics.DrawString(String, Font, Brush, RectangleF)
  fullName: Graphics.DrawString(String, Font, Brush, RectangleF)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Draws the specified text string in the specified rectangle with the specified <xref href="System.Drawing.Brush"></xref> and <xref href="System.Drawing.Font"></xref> objects.
  remarks: The text represented by the `s` parameter is drawn inside the rectangle represented by the `layoutRectangle` parameter. If the text does not fit inside the rectangle, it is truncated at the nearest word. To further manipulate how the string is drawn inside the rectangle use the <xref:System.Drawing.Graphics.DrawString%2A> overload that takes a <xref:System.Drawing.StringFormat>.
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates a text string to draw.  \n  \n-   Defines the font as Arial (16pt).  \n  \n-   Creates a solid, black brush to draw with.  \n  \n-   Creates a rectangle in which to draw the text.  \n  \n-   Draws the rectangle to the screen.  \n  \n-   Draws the string to the screen using the font, brush, and destination rectangle.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples2#86](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#86)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples2#86](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#86)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples2#86](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#86)]"
  syntax:
    content: public void DrawString (string s, System.Drawing.Font font, System.Drawing.Brush brush, System.Drawing.RectangleF layoutRectangle);
    parameters:
    - id: s
      type: System.String
      description: String to draw.
    - id: font
      type: System.Drawing.Font
      description: <xref href="System.Drawing.Font"></xref> that defines the text format of the string.
    - id: brush
      type: System.Drawing.Brush
      description: <xref href="System.Drawing.Brush"></xref> that determines the color and texture of the drawn text.
    - id: layoutRectangle
      type: System.Drawing.RectangleF
      description: <xref href="System.Drawing.RectangleF"></xref> structure that specifies the location of the drawn text.
  overload: System.Drawing.Graphics.DrawString*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>brush</code> is `null`.  \n  \n -or-  \n  \n <code>s</code> is `null`."
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.PointF)
  commentId: M:System.Drawing.Graphics.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.PointF)
  id: DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.PointF)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: DrawString(String, Font, Brush, PointF)
  nameWithType: Graphics.DrawString(String, Font, Brush, PointF)
  fullName: Graphics.DrawString(String, Font, Brush, PointF)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Draws the specified text string at the specified location with the specified <xref href="System.Drawing.Brush"></xref> and <xref href="System.Drawing.Font"></xref> objects.
  remarks: ''
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates a text string to draw.  \n  \n-   Defines the font as Arial (16pt).  \n  \n-   Creates a solid, black brush to draw with.  \n  \n-   Creates a point for the upper-left corner at which to draw the text.  \n  \n-   Draws the string to the screen using the font, brush, and destination point.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples2#84](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#84)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples2#84](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#84)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples2#84](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#84)]"
  syntax:
    content: public void DrawString (string s, System.Drawing.Font font, System.Drawing.Brush brush, System.Drawing.PointF point);
    parameters:
    - id: s
      type: System.String
      description: String to draw.
    - id: font
      type: System.Drawing.Font
      description: <xref href="System.Drawing.Font"></xref> that defines the text format of the string.
    - id: brush
      type: System.Drawing.Brush
      description: <xref href="System.Drawing.Brush"></xref> that determines the color and texture of the drawn text.
    - id: point
      type: System.Drawing.PointF
      description: <xref href="System.Drawing.PointF"></xref> structure that specifies the upper-left corner of the drawn text.
  overload: System.Drawing.Graphics.DrawString*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>brush</code> is `null`.  \n  \n -or-  \n  \n <code>s</code> is `null`."
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.PointF,System.Drawing.StringFormat)
  commentId: M:System.Drawing.Graphics.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.PointF,System.Drawing.StringFormat)
  id: DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.PointF,System.Drawing.StringFormat)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: DrawString(String, Font, Brush, PointF, StringFormat)
  nameWithType: Graphics.DrawString(String, Font, Brush, PointF, StringFormat)
  fullName: Graphics.DrawString(String, Font, Brush, PointF, StringFormat)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Draws the specified text string at the specified location with the specified <xref href="System.Drawing.Brush"></xref> and <xref href="System.Drawing.Font"></xref> objects using the formatting attributes of the specified <xref href="System.Drawing.StringFormat"></xref>.
  remarks: ''
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates a text string to draw.  \n  \n-   Defines the font as Arial (16pt).  \n  \n-   Creates a solid, black brush to draw with.  \n  \n-   Creates a point for the upper-left corner at which to draw the text.  \n  \n-   Sets the format of the string to draw vertically.  \n  \n-   Draws the string to the screen using the font, brush, destination point, and format.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples2#85](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#85)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples2#85](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#85)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples2#85](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#85)]"
  syntax:
    content: public void DrawString (string s, System.Drawing.Font font, System.Drawing.Brush brush, System.Drawing.PointF point, System.Drawing.StringFormat format);
    parameters:
    - id: s
      type: System.String
      description: String to draw.
    - id: font
      type: System.Drawing.Font
      description: <xref href="System.Drawing.Font"></xref> that defines the text format of the string.
    - id: brush
      type: System.Drawing.Brush
      description: <xref href="System.Drawing.Brush"></xref> that determines the color and texture of the drawn text.
    - id: point
      type: System.Drawing.PointF
      description: <xref href="System.Drawing.PointF"></xref> structure that specifies the upper-left corner of the drawn text.
    - id: format
      type: System.Drawing.StringFormat
      description: <xref href="System.Drawing.StringFormat"></xref> that specifies formatting attributes, such as line spacing and alignment, that are applied to the drawn text.
  overload: System.Drawing.Graphics.DrawString*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>brush</code> is `null`.  \n  \n -or-  \n  \n <code>s</code> is `null`."
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.EndContainer(System.Drawing.Drawing2D.GraphicsContainer)
  commentId: M:System.Drawing.Graphics.EndContainer(System.Drawing.Drawing2D.GraphicsContainer)
  id: EndContainer(System.Drawing.Drawing2D.GraphicsContainer)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: EndContainer(GraphicsContainer)
  nameWithType: Graphics.EndContainer(GraphicsContainer)
  fullName: Graphics.EndContainer(GraphicsContainer)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Closes the current graphics container and restores the state of this <xref href="System.Drawing.Graphics"></xref> to the state saved by a call to the <xref href="System.Drawing.Graphics.BeginContainer"></xref> method.
  remarks: "Use this method with the <xref:System.Drawing.Graphics.BeginContainer%2A> method to create nested graphics containers. Graphics containers retain graphics state, such as transformation, clipping region, and rendering properties.  \n  \n When you call the <xref:System.Drawing.Graphics.BeginContainer%2A> method of a <xref:System.Drawing.Graphics>, an information block that holds the state of the <xref:System.Drawing.Graphics> is put on a stack. The <xref:System.Drawing.Graphics.BeginContainer%2A> method returns a <xref:System.Drawing.Drawing2D.GraphicsContainer> that identifies that information block. When you pass the identifying object to the <xref:System.Drawing.Graphics.EndContainer%2A> method, the information block is removed from the stack and is used to restore the <xref:System.Drawing.Graphics> to the state it was in at the time of the <xref:System.Drawing.Graphics.BeginContainer%2A> method call.  \n  \n Containers can be nested; that is, you can call the <xref:System.Drawing.Graphics.BeginContainer%2A> method several times before you call the <xref:System.Drawing.Graphics.EndContainer%2A> method. Each time you call the <xref:System.Drawing.Graphics.BeginContainer%2A> method, an information block is put on the stack, and you receive a <xref:System.Drawing.Drawing2D.GraphicsContainer> for the information block. When you pass one of those objects to the <xref:System.Drawing.Graphics.EndContainer%2A> method, the <xref:System.Drawing.Graphics> is returned to the state it was in at the time of the <xref:System.Drawing.Graphics.BeginContainer%2A> method call that returned that particular <xref:System.Drawing.Drawing2D.GraphicsContainer>. The information block placed on the stack by that <xref:System.Drawing.Graphics.BeginContainer%2A> method call is removed from the stack, and all information blocks placed on that stack after that <xref:System.Drawing.Graphics.BeginContainer%2A> method call are also removed.  \n  \n Calls to the <xref:System.Drawing.Graphics.Save%2A> method place information blocks on the same stack as calls to the <xref:System.Drawing.Graphics.BeginContainer%2A> method. Just as an <xref:System.Drawing.Graphics.EndContainer%2A> method call is paired with a <xref:System.Drawing.Graphics.BeginContainer%2A> method call, a <xref:System.Drawing.Graphics.Restore%2A> method call is paired with a <xref:System.Drawing.Graphics.Save%2A> method call.  \n  \n When you call the <xref:System.Drawing.Graphics.EndContainer%2A> method, all information blocks placed on the stack (by the <xref:System.Drawing.Graphics.Save%2A> method or by the <xref:System.Drawing.Graphics.BeginContainer%2A> method) after the corresponding call to the <xref:System.Drawing.Graphics.BeginContainer%2A> method are removed from the stack. Likewise, when you call the <xref:System.Drawing.Graphics.Restore%2A> method, all information blocks placed on the stack (by the <xref:System.Drawing.Graphics.Save%2A> method or by the <xref:System.Drawing.Graphics.BeginContainer%2A> method) after the corresponding call to the <xref:System.Drawing.Graphics.Save%2A> method are removed from the stack."
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Opens a new graphics container and saves the old container.  \n  \n-   Translates the world coordinates in the container.  \n  \n-   Fills a red rectangle in the (translated coordinates of the) new container.  \n  \n-   Closes the new container and restores the saved container.  \n  \n-   Fills a green rectangle (to the untranslated coordinates) of the saved container.  \n  \n The result is a green rectangle that overlies a red rectangle of the same size.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples2#90](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#90)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples2#90](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#90)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples2#90](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#90)]"
  syntax:
    content: public void EndContainer (System.Drawing.Drawing2D.GraphicsContainer container);
    parameters:
    - id: container
      type: System.Drawing.Drawing2D.GraphicsContainer
      description: <xref href="System.Drawing.Drawing2D.GraphicsContainer"></xref> that represents the container this method restores.
  overload: System.Drawing.Graphics.EndContainer*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)
  commentId: M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)
  id: EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: EnumerateMetafile(Metafile, PointF, RectangleF, GraphicsUnit, Graphics+EnumerateMetafileProc, IntPtr)
  nameWithType: Graphics.EnumerateMetafile(Metafile, PointF, RectangleF, GraphicsUnit, Graphics+EnumerateMetafileProc, IntPtr)
  fullName: Graphics.EnumerateMetafile(Metafile, PointF, RectangleF, GraphicsUnit, Graphics+EnumerateMetafileProc, IntPtr)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Sends the records in a selected rectangle from a <xref href="System.Drawing.Imaging.Metafile"></xref>, one at a time, to a callback method for display at a specified point.
  remarks: "This method enumerates the records contained in the specified metafile. Each record is individually sent to a callback method specified by the `callback` parameter. Typically, the callback method calls the <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method to \"play back\", or draw, the record.  \n  \n If the callback method calls<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, it must do so by calling the <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method of the specific <xref:System.Drawing.Imaging.Metafile> that is being enumerated.  \n  \n Any drawing that takes place outside of the rectangle specified by the `srcRect` parameter is ignored."
  example:
  - For a code example, see <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.
  syntax:
    content: public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF destPoint, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);
    parameters:
    - id: metafile
      type: System.Drawing.Imaging.Metafile
      description: <xref href="System.Drawing.Imaging.Metafile"></xref> to enumerate.
    - id: destPoint
      type: System.Drawing.PointF
      description: <xref href="System.Drawing.PointF"></xref> structure that specifies the location of the upper-left corner of the drawn metafile.
    - id: srcRect
      type: System.Drawing.RectangleF
      description: <xref href="System.Drawing.RectangleF"></xref> structure that specifies the portion of the metafile, relative to its upper-left corner, to draw.
    - id: srcUnit
      type: System.Drawing.GraphicsUnit
      description: Member of the <xref href="System.Drawing.GraphicsUnit"></xref> enumeration that specifies the unit of measure used to determine the portion of the metafile that the rectangle specified by the <code>srcRect</code> parameter contains.
    - id: callback
      type: System.Drawing.Graphics+EnumerateMetafileProc
      description: <xref href="System.Drawing.Graphics.EnumerateMetafileProc"></xref> delegate that specifies the method to which the metafile records are sent.
    - id: callbackData
      type: System.IntPtr
      description: Internal pointer that is required, but ignored. You can pass <xref href="System.IntPtr.Zero"></xref> for this parameter.
  overload: System.Drawing.Graphics.EnumerateMetafile*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Rectangle,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)
  commentId: M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Rectangle,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)
  id: EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Rectangle,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: EnumerateMetafile(Metafile, Rectangle, Graphics+EnumerateMetafileProc, IntPtr, ImageAttributes)
  nameWithType: Graphics.EnumerateMetafile(Metafile, Rectangle, Graphics+EnumerateMetafileProc, IntPtr, ImageAttributes)
  fullName: Graphics.EnumerateMetafile(Metafile, Rectangle, Graphics+EnumerateMetafileProc, IntPtr, ImageAttributes)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Sends the records of the specified <xref href="System.Drawing.Imaging.Metafile"></xref>, one at a time, to a callback method for display in a specified rectangle using specified image attributes.
  remarks: "This method enumerates the records contained in the specified metafile. Each record is individually sent to a callback method specified by the `callback` parameter. Typically, the callback method calls the <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method to \"play back\", or draw, the record.  \n  \n If the callback method calls <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, it must do so by calling the <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method of the specific <xref:System.Drawing.Imaging.Metafile> that is being enumerated.  \n  \n The image attributes specified by the `imageAttr` parameter replace those specified when the metafile was written."
  example:
  - For a code example, see <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.
  syntax:
    content: public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Rectangle destRect, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);
    parameters:
    - id: metafile
      type: System.Drawing.Imaging.Metafile
      description: <xref href="System.Drawing.Imaging.Metafile"></xref> to enumerate.
    - id: destRect
      type: System.Drawing.Rectangle
      description: <xref href="System.Drawing.Rectangle"></xref> structure that specifies the location and size of the drawn metafile.
    - id: callback
      type: System.Drawing.Graphics+EnumerateMetafileProc
      description: <xref href="System.Drawing.Graphics.EnumerateMetafileProc"></xref> delegate that specifies the method to which the metafile records are sent.
    - id: callbackData
      type: System.IntPtr
      description: Internal pointer that is required, but ignored. You can pass <xref href="System.IntPtr.Zero"></xref> for this parameter.
    - id: imageAttr
      type: System.Drawing.Imaging.ImageAttributes
      description: <xref href="System.Drawing.Imaging.ImageAttributes"></xref> that specifies image attribute information for the drawn image.
  overload: System.Drawing.Graphics.EnumerateMetafile*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc)
  commentId: M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc)
  id: EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: EnumerateMetafile(Metafile, Rectangle, Rectangle, GraphicsUnit, Graphics+EnumerateMetafileProc)
  nameWithType: Graphics.EnumerateMetafile(Metafile, Rectangle, Rectangle, GraphicsUnit, Graphics+EnumerateMetafileProc)
  fullName: Graphics.EnumerateMetafile(Metafile, Rectangle, Rectangle, GraphicsUnit, Graphics+EnumerateMetafileProc)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Sends the records of a selected rectangle from a <xref href="System.Drawing.Imaging.Metafile"></xref>, one at a time, to a callback method for display in a specified rectangle.
  remarks: "This method enumerates the records contained in the specified metafile. Each record is individually sent to a callback method specified by the `callback` parameter. Typically, the callback method calls the <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method to \"play back\", or draw, the record.  \n  \n If the callback method calls<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, it must do so by calling the <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method of the specific <xref:System.Drawing.Imaging.Metafile> that is being enumerated.  \n  \n Any drawing that takes place outside of the rectangle specified by the `srcRect` parameter is ignored."
  example:
  - For a code example, see <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.
  syntax:
    content: public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Rectangle destRect, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback);
    parameters:
    - id: metafile
      type: System.Drawing.Imaging.Metafile
      description: <xref href="System.Drawing.Imaging.Metafile"></xref> to enumerate.
    - id: destRect
      type: System.Drawing.Rectangle
      description: <xref href="System.Drawing.Rectangle"></xref> structure that specifies the location and size of the drawn metafile.
    - id: srcRect
      type: System.Drawing.Rectangle
      description: <xref href="System.Drawing.Rectangle"></xref> structure that specifies the portion of the metafile, relative to its upper-left corner, to draw.
    - id: srcUnit
      type: System.Drawing.GraphicsUnit
      description: Member of the <xref href="System.Drawing.GraphicsUnit"></xref> enumeration that specifies the unit of measure used to determine the portion of the metafile that the rectangle specified by the <code>srcRect</code> parameter contains.
    - id: callback
      type: System.Drawing.Graphics+EnumerateMetafileProc
      description: <xref href="System.Drawing.Graphics.EnumerateMetafileProc"></xref> delegate that specifies the method to which the metafile records are sent.
  overload: System.Drawing.Graphics.EnumerateMetafile*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)
  commentId: M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)
  id: EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: EnumerateMetafile(Metafile, RectangleF, Graphics+EnumerateMetafileProc, IntPtr, ImageAttributes)
  nameWithType: Graphics.EnumerateMetafile(Metafile, RectangleF, Graphics+EnumerateMetafileProc, IntPtr, ImageAttributes)
  fullName: Graphics.EnumerateMetafile(Metafile, RectangleF, Graphics+EnumerateMetafileProc, IntPtr, ImageAttributes)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Sends the records of the specified <xref href="System.Drawing.Imaging.Metafile"></xref>, one at a time, to a callback method for display in a specified rectangle using specified image attributes.
  remarks: "This method enumerates the records contained in the specified metafile. Each record is individually sent to a callback method specified by the `callback` parameter. Typically, the callback method calls the <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method to \"play back\", or draw, the record.  \n  \n If the callback method calls <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, it must do so by calling the <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method of the specific <xref:System.Drawing.Imaging.Metafile> that is being enumerated.  \n  \n The image attributes specified by the `imageAttr` parameter replace those specified when the metafile was written."
  example:
  - For a code example, see <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.
  syntax:
    content: public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.RectangleF destRect, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);
    parameters:
    - id: metafile
      type: System.Drawing.Imaging.Metafile
      description: <xref href="System.Drawing.Imaging.Metafile"></xref> to enumerate.
    - id: destRect
      type: System.Drawing.RectangleF
      description: <xref href="System.Drawing.RectangleF"></xref> structure that specifies the location and size of the drawn metafile.
    - id: callback
      type: System.Drawing.Graphics+EnumerateMetafileProc
      description: <xref href="System.Drawing.Graphics.EnumerateMetafileProc"></xref> delegate that specifies the method to which the metafile records are sent.
    - id: callbackData
      type: System.IntPtr
      description: Internal pointer that is required, but ignored. You can pass <xref href="System.IntPtr.Zero"></xref> for this parameter.
    - id: imageAttr
      type: System.Drawing.Imaging.ImageAttributes
      description: <xref href="System.Drawing.Imaging.ImageAttributes"></xref> that specifies image attribute information for the drawn image.
  overload: System.Drawing.Graphics.EnumerateMetafile*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc)
  commentId: M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc)
  id: EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: EnumerateMetafile(Metafile, RectangleF, RectangleF, GraphicsUnit, Graphics+EnumerateMetafileProc)
  nameWithType: Graphics.EnumerateMetafile(Metafile, RectangleF, RectangleF, GraphicsUnit, Graphics+EnumerateMetafileProc)
  fullName: Graphics.EnumerateMetafile(Metafile, RectangleF, RectangleF, GraphicsUnit, Graphics+EnumerateMetafileProc)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Sends the records of a selected rectangle from a <xref href="System.Drawing.Imaging.Metafile"></xref>, one at a time, to a callback method for display in a specified rectangle.
  remarks: "This method enumerates the records contained in the specified metafile. Each record is individually sent to a callback method specified by the `callback` parameter. Typically, the callback method calls the <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method to \"play back\", or draw, the record.  \n  \n If the callback method calls <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, it must do so by calling the <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method of the specific <xref:System.Drawing.Imaging.Metafile> that is being enumerated.  \n  \n Any drawing that takes place outside of the rectangle specified by the `srcRect` parameter is ignored."
  example:
  - For a code example, see <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.
  syntax:
    content: public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.RectangleF destRect, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback);
    parameters:
    - id: metafile
      type: System.Drawing.Imaging.Metafile
      description: <xref href="System.Drawing.Imaging.Metafile"></xref> to enumerate.
    - id: destRect
      type: System.Drawing.RectangleF
      description: <xref href="System.Drawing.RectangleF"></xref> structure that specifies the location and size of the drawn metafile.
    - id: srcRect
      type: System.Drawing.RectangleF
      description: <xref href="System.Drawing.RectangleF"></xref> structure that specifies the portion of the metafile, relative to its upper-left corner, to draw.
    - id: srcUnit
      type: System.Drawing.GraphicsUnit
      description: Member of the <xref href="System.Drawing.GraphicsUnit"></xref> enumeration that specifies the unit of measure used to determine the portion of the metafile that the rectangle specified by the <code>srcRect</code> parameter contains.
    - id: callback
      type: System.Drawing.Graphics+EnumerateMetafileProc
      description: <xref href="System.Drawing.Graphics.EnumerateMetafileProc"></xref> delegate that specifies the method to which the metafile records are sent.
  overload: System.Drawing.Graphics.EnumerateMetafile*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)
  commentId: M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)
  id: EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: EnumerateMetafile(Metafile, Point, Rectangle, GraphicsUnit, Graphics+EnumerateMetafileProc, IntPtr)
  nameWithType: Graphics.EnumerateMetafile(Metafile, Point, Rectangle, GraphicsUnit, Graphics+EnumerateMetafileProc, IntPtr)
  fullName: Graphics.EnumerateMetafile(Metafile, Point, Rectangle, GraphicsUnit, Graphics+EnumerateMetafileProc, IntPtr)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Sends the records in a selected rectangle from a <xref href="System.Drawing.Imaging.Metafile"></xref>, one at a time, to a callback method for display at a specified point.
  remarks: "This method enumerates the records contained in the specified metafile. Each record is individually sent to a callback method specified by the `callback` parameter. Typically, the callback method calls the <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method to \"play back\", or draw, the record.  \n  \n If the callback method calls<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, it must do so by calling the <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method of the specific <xref:System.Drawing.Imaging.Metafile> that is being enumerated."
  example:
  - For a code example, see <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.
  syntax:
    content: public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point destPoint, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);
    parameters:
    - id: metafile
      type: System.Drawing.Imaging.Metafile
      description: <xref href="System.Drawing.Imaging.Metafile"></xref> to enumerate.
    - id: destPoint
      type: System.Drawing.Point
      description: <xref href="System.Drawing.Point"></xref> structure that specifies the location of the upper-left corner of the drawn metafile.
    - id: srcRect
      type: System.Drawing.Rectangle
      description: <xref href="System.Drawing.Rectangle"></xref> structure that specifies the portion of the metafile, relative to its upper-left corner, to draw.
    - id: srcUnit
      type: System.Drawing.GraphicsUnit
      description: Member of the <xref href="System.Drawing.GraphicsUnit"></xref> enumeration that specifies the unit of measure used to determine the portion of the metafile that the rectangle specified by the <code>srcRect</code> parameter contains.
    - id: callback
      type: System.Drawing.Graphics+EnumerateMetafileProc
      description: <xref href="System.Drawing.Graphics.EnumerateMetafileProc"></xref> delegate that specifies the method to which the metafile records are sent.
    - id: callbackData
      type: System.IntPtr
      description: Internal pointer that is required, but ignored. You can pass <xref href="System.IntPtr.Zero"></xref> for this parameter.
  overload: System.Drawing.Graphics.EnumerateMetafile*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)
  commentId: M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)
  id: EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: EnumerateMetafile(Metafile, Point[], Rectangle, GraphicsUnit, Graphics+EnumerateMetafileProc, IntPtr)
  nameWithType: Graphics.EnumerateMetafile(Metafile, Point[], Rectangle, GraphicsUnit, Graphics+EnumerateMetafileProc, IntPtr)
  fullName: Graphics.EnumerateMetafile(Metafile, Point[], Rectangle, GraphicsUnit, Graphics+EnumerateMetafileProc, IntPtr)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Sends the records in a selected rectangle from a <xref href="System.Drawing.Imaging.Metafile"></xref>, one at a time, to a callback method for display in a specified parallelogram.
  remarks: "This method enumerates the records contained in the specified metafile. Each record is individually sent to a callback method specified by the `callback` parameter. Typically, the callback method calls the <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method to \"play back\", or draw, the record.  \n  \n If the callback method calls<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, it must do so by calling the <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method of the specific <xref:System.Drawing.Imaging.Metafile> that is being enumerated.  \n  \n The `destPoints` parameter specifies three points of a parallelogram. The three <xref:System.Drawing.Point> structures represent the upper-left, upper-right, and lower-left corners of the parallelogram. The fourth point is extrapolated from the first three to form a parallelogram. The drawn metafile is scaled and sheared to fit the parallelogram.  \n  \n Any drawing that takes place outside of the rectangle specified by the `srcRect` parameter is ignored."
  example:
  - For a code example, see <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.
  syntax:
    content: public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point[] destPoints, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);
    parameters:
    - id: metafile
      type: System.Drawing.Imaging.Metafile
      description: <xref href="System.Drawing.Imaging.Metafile"></xref> to enumerate.
    - id: destPoints
      type: System.Drawing.Point[]
      description: Array of three <xref href="System.Drawing.Point"></xref> structures that define a parallelogram that determines the size and location of the drawn metafile.
    - id: srcRect
      type: System.Drawing.Rectangle
      description: <xref href="System.Drawing.Rectangle"></xref> structure that specifies the portion of the metafile, relative to its upper-left corner, to draw.
    - id: srcUnit
      type: System.Drawing.GraphicsUnit
      description: Member of the <xref href="System.Drawing.GraphicsUnit"></xref> enumeration that specifies the unit of measure used to determine the portion of the metafile that the rectangle specified by the <code>srcRect</code> parameter contains.
    - id: callback
      type: System.Drawing.Graphics+EnumerateMetafileProc
      description: <xref href="System.Drawing.Graphics.EnumerateMetafileProc"></xref> delegate that specifies the method to which the metafile records are sent.
    - id: callbackData
      type: System.IntPtr
      description: Internal pointer that is required, but ignored. You can pass <xref href="System.IntPtr.Zero"></xref> for this parameter.
  overload: System.Drawing.Graphics.EnumerateMetafile*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)
  commentId: M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)
  id: EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: EnumerateMetafile(Metafile, PointF[], RectangleF, GraphicsUnit, Graphics+EnumerateMetafileProc, IntPtr)
  nameWithType: Graphics.EnumerateMetafile(Metafile, PointF[], RectangleF, GraphicsUnit, Graphics+EnumerateMetafileProc, IntPtr)
  fullName: Graphics.EnumerateMetafile(Metafile, PointF[], RectangleF, GraphicsUnit, Graphics+EnumerateMetafileProc, IntPtr)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Sends the records in a selected rectangle from a <xref href="System.Drawing.Imaging.Metafile"></xref>, one at a time, to a callback method for display in a specified parallelogram.
  remarks: "This method enumerates the records contained in the specified metafile. Each record is individually sent to a callback method specified by the `callback` parameter. Typically, the callback method calls the <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method to \"play back\", or draw, the record.  \n  \n If the callback method calls<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, it must do so by calling the <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method of the specific <xref:System.Drawing.Imaging.Metafile> that is being enumerated.  \n  \n The `destPoints` parameter specifies three points of a parallelogram. The three <xref:System.Drawing.PointF> structures represent the upper-left, upper-right, and lower-left corners of the parallelogram. The fourth point is extrapolated from the first three to form a parallelogram. The drawn metafile is scaled and sheared to fit the parallelogram.  \n  \n Any drawing that takes place outside of the rectangle specified by the `srcRect` parameter is ignored."
  example:
  - For a code example, see <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.
  syntax:
    content: public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF[] destPoints, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);
    parameters:
    - id: metafile
      type: System.Drawing.Imaging.Metafile
      description: <xref href="System.Drawing.Imaging.Metafile"></xref> to enumerate.
    - id: destPoints
      type: System.Drawing.PointF[]
      description: Array of three <xref href="System.Drawing.PointF"></xref> structures that define a parallelogram that determines the size and location of the drawn metafile.
    - id: srcRect
      type: System.Drawing.RectangleF
      description: <xref href="System.Drawing.RectangleF"></xref> structure that specifies the portion of the metafile, relative to its upper-left corner, to draw.
    - id: srcUnit
      type: System.Drawing.GraphicsUnit
      description: Member of the <xref href="System.Drawing.GraphicsUnit"></xref> enumeration that specifies the unit of measure used to determine the portion of the metafile that the rectangle specified by the <code>srcRect</code> parameter contains.
    - id: callback
      type: System.Drawing.Graphics+EnumerateMetafileProc
      description: <xref href="System.Drawing.Graphics.EnumerateMetafileProc"></xref> delegate that specifies the method to which the metafile records are sent.
    - id: callbackData
      type: System.IntPtr
      description: Internal pointer that is required, but ignored. You can pass <xref href="System.IntPtr.Zero"></xref> for this parameter.
  overload: System.Drawing.Graphics.EnumerateMetafile*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)
  commentId: M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)
  id: EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: EnumerateMetafile(Metafile, PointF[], RectangleF, GraphicsUnit, Graphics+EnumerateMetafileProc, IntPtr, ImageAttributes)
  nameWithType: Graphics.EnumerateMetafile(Metafile, PointF[], RectangleF, GraphicsUnit, Graphics+EnumerateMetafileProc, IntPtr, ImageAttributes)
  fullName: Graphics.EnumerateMetafile(Metafile, PointF[], RectangleF, GraphicsUnit, Graphics+EnumerateMetafileProc, IntPtr, ImageAttributes)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Sends the records in a selected rectangle from a <xref href="System.Drawing.Imaging.Metafile"></xref>, one at a time, to a callback method for display in a specified parallelogram using specified image attributes.
  remarks: "This method enumerates the records contained in the specified metafile. Each record is individually sent to a callback method specified by the `callback` parameter. Typically, the callback method calls the <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method to \"play back\", or draw, the record.  \n  \n If the callback method calls<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, it must do so by calling the <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method of the specific <xref:System.Drawing.Imaging.Metafile> that is being enumerated.  \n  \n The `destPoints` parameter specifies three points of a parallelogram. The three <xref:System.Drawing.PointF> structures represent the upper-left, upper-right, and lower-left corners of the parallelogram. The fourth point is extrapolated from the first three to form a parallelogram. The drawn metafile is scaled and sheared to fit the parallelogram.  \n  \n Any drawing that takes place outside of the rectangle specified by the `srcRect` parameter is ignored.  \n  \n The image attributes specified by the `imageAttr` parameter replace those specified when the metafile was written."
  example:
  - For a code example, see <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.
  syntax:
    content: public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF[] destPoints, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit unit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);
    parameters:
    - id: metafile
      type: System.Drawing.Imaging.Metafile
      description: <xref href="System.Drawing.Imaging.Metafile"></xref> to enumerate.
    - id: destPoints
      type: System.Drawing.PointF[]
      description: Array of three <xref href="System.Drawing.PointF"></xref> structures that define a parallelogram that determines the size and location of the drawn metafile.
    - id: srcRect
      type: System.Drawing.RectangleF
      description: <xref href="System.Drawing.RectangleF"></xref> structure that specifies the portion of the metafile, relative to its upper-left corner, to draw.
    - id: unit
      type: System.Drawing.GraphicsUnit
      description: Member of the <xref href="System.Drawing.GraphicsUnit"></xref> enumeration that specifies the unit of measure used to determine the portion of the metafile that the rectangle specified by the <code>srcRect</code> parameter contains.
    - id: callback
      type: System.Drawing.Graphics+EnumerateMetafileProc
      description: <xref href="System.Drawing.Graphics.EnumerateMetafileProc"></xref> delegate that specifies the method to which the metafile records are sent.
    - id: callbackData
      type: System.IntPtr
      description: Internal pointer that is required, but ignored. You can pass <xref href="System.IntPtr.Zero"></xref> for this parameter.
    - id: imageAttr
      type: System.Drawing.Imaging.ImageAttributes
      description: <xref href="System.Drawing.Imaging.ImageAttributes"></xref> that specifies image attribute information for the drawn image.
  overload: System.Drawing.Graphics.EnumerateMetafile*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)
  commentId: M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)
  id: EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: EnumerateMetafile(Metafile, RectangleF, RectangleF, GraphicsUnit, Graphics+EnumerateMetafileProc, IntPtr)
  nameWithType: Graphics.EnumerateMetafile(Metafile, RectangleF, RectangleF, GraphicsUnit, Graphics+EnumerateMetafileProc, IntPtr)
  fullName: Graphics.EnumerateMetafile(Metafile, RectangleF, RectangleF, GraphicsUnit, Graphics+EnumerateMetafileProc, IntPtr)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Sends the records of a selected rectangle from a <xref href="System.Drawing.Imaging.Metafile"></xref>, one at a time, to a callback method for display in a specified rectangle.
  remarks: "This method enumerates the records contained in the specified metafile. Each record is individually sent to a callback method specified by the`callback` parameter. Typically, the callback method calls the <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method to \"play back\", or draw, the record.  \n  \n If the callback method calls <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, it must do so by calling the <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method of the specific <xref:System.Drawing.Imaging.Metafile> that is being enumerated.  \n  \n Any drawing that takes place outside of the rectangle specified by the `srcRect` parameter is ignored."
  example:
  - For a code example, see <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.
  syntax:
    content: public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.RectangleF destRect, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);
    parameters:
    - id: metafile
      type: System.Drawing.Imaging.Metafile
      description: <xref href="System.Drawing.Imaging.Metafile"></xref> to enumerate.
    - id: destRect
      type: System.Drawing.RectangleF
      description: <xref href="System.Drawing.RectangleF"></xref> structure that specifies the location and size of the drawn metafile.
    - id: srcRect
      type: System.Drawing.RectangleF
      description: <xref href="System.Drawing.RectangleF"></xref> structure that specifies the portion of the metafile, relative to its upper-left corner, to draw.
    - id: srcUnit
      type: System.Drawing.GraphicsUnit
      description: Member of the <xref href="System.Drawing.GraphicsUnit"></xref> enumeration that specifies the unit of measure used to determine the portion of the metafile that the rectangle specified by the <code>srcRect</code> parameter contains.
    - id: callback
      type: System.Drawing.Graphics+EnumerateMetafileProc
      description: <xref href="System.Drawing.Graphics.EnumerateMetafileProc"></xref> delegate that specifies the method to which the metafile records are sent.
    - id: callbackData
      type: System.IntPtr
      description: Internal pointer that is required, but ignored. You can pass <xref href="System.IntPtr.Zero"></xref> for this parameter.
  overload: System.Drawing.Graphics.EnumerateMetafile*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)
  commentId: M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)
  id: EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: EnumerateMetafile(Metafile, Point, Rectangle, GraphicsUnit, Graphics+EnumerateMetafileProc, IntPtr, ImageAttributes)
  nameWithType: Graphics.EnumerateMetafile(Metafile, Point, Rectangle, GraphicsUnit, Graphics+EnumerateMetafileProc, IntPtr, ImageAttributes)
  fullName: Graphics.EnumerateMetafile(Metafile, Point, Rectangle, GraphicsUnit, Graphics+EnumerateMetafileProc, IntPtr, ImageAttributes)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Sends the records in a selected rectangle from a <xref href="System.Drawing.Imaging.Metafile"></xref>, one at a time, to a callback method for display at a specified point using specified image attributes.
  remarks: "This method enumerates the records contained in the specified metafile. Each record is individually sent to a callback method specified by the `callback` parameter. Typically, the callback method calls the <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method to \"play back\", or draw, the record.  \n  \n If the callback method calls<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, it must do so by calling the <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method of the specific <xref:System.Drawing.Imaging.Metafile> that is being enumerated."
  example:
  - For a code example, see <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.
  syntax:
    content: public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point destPoint, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit unit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);
    parameters:
    - id: metafile
      type: System.Drawing.Imaging.Metafile
      description: <xref href="System.Drawing.Imaging.Metafile"></xref> to enumerate.
    - id: destPoint
      type: System.Drawing.Point
      description: <xref href="System.Drawing.Point"></xref> structure that specifies the location of the upper-left corner of the drawn metafile.
    - id: srcRect
      type: System.Drawing.Rectangle
      description: <xref href="System.Drawing.Rectangle"></xref> structure that specifies the portion of the metafile, relative to its upper-left corner, to draw.
    - id: unit
      type: System.Drawing.GraphicsUnit
      description: Member of the <xref href="System.Drawing.GraphicsUnit"></xref> enumeration that specifies the unit of measure used to determine the portion of the metafile that the rectangle specified by the <code>srcRect</code> parameter contains.
    - id: callback
      type: System.Drawing.Graphics+EnumerateMetafileProc
      description: <xref href="System.Drawing.Graphics.EnumerateMetafileProc"></xref> delegate that specifies the method to which the metafile records are sent.
    - id: callbackData
      type: System.IntPtr
      description: Internal pointer that is required, but ignored. You can pass <xref href="System.IntPtr.Zero"></xref> for this parameter.
    - id: imageAttr
      type: System.Drawing.Imaging.ImageAttributes
      description: <xref href="System.Drawing.Imaging.ImageAttributes"></xref> that specifies image attribute information for the drawn image.
  overload: System.Drawing.Graphics.EnumerateMetafile*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)
  commentId: M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)
  id: EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: EnumerateMetafile(Metafile, Point[], Rectangle, GraphicsUnit, Graphics+EnumerateMetafileProc, IntPtr, ImageAttributes)
  nameWithType: Graphics.EnumerateMetafile(Metafile, Point[], Rectangle, GraphicsUnit, Graphics+EnumerateMetafileProc, IntPtr, ImageAttributes)
  fullName: Graphics.EnumerateMetafile(Metafile, Point[], Rectangle, GraphicsUnit, Graphics+EnumerateMetafileProc, IntPtr, ImageAttributes)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Sends the records in a selected rectangle from a <xref href="System.Drawing.Imaging.Metafile"></xref>, one at a time, to a callback method for display in a specified parallelogram using specified image attributes.
  remarks: "This method enumerates the records contained in the specified metafile. Each record is individually sent to a callback method specified by the `callback` parameter. Typically, the callback method calls the <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method to \"play back\", or draw, the record.  \n  \n If the callback method calls<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, it must do so by calling the <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method of the specific <xref:System.Drawing.Imaging.Metafile> that is being enumerated.  \n  \n The `destPoints` parameter specifies three points of a parallelogram. The three <xref:System.Drawing.Point> structures represent the upper-left, upper-right, and lower-left corners of the parallelogram. The fourth point is extrapolated from the first three to form a parallelogram. The drawn metafile is scaled and sheared to fit the parallelogram.  \n  \n Any drawing that takes place outside of the rectangle specified by the `srcRect` parameter is ignored.  \n  \n The image attributes specified by the `imageAttr` parameter replace those specified when the metafile was written."
  example:
  - For a code example, see <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.
  syntax:
    content: public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point[] destPoints, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit unit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);
    parameters:
    - id: metafile
      type: System.Drawing.Imaging.Metafile
      description: <xref href="System.Drawing.Imaging.Metafile"></xref> to enumerate.
    - id: destPoints
      type: System.Drawing.Point[]
      description: Array of three <xref href="System.Drawing.Point"></xref> structures that define a parallelogram that determines the size and location of the drawn metafile.
    - id: srcRect
      type: System.Drawing.Rectangle
      description: <xref href="System.Drawing.Rectangle"></xref> structure that specifies the portion of the metafile, relative to its upper-left corner, to draw.
    - id: unit
      type: System.Drawing.GraphicsUnit
      description: Member of the <xref href="System.Drawing.GraphicsUnit"></xref> enumeration that specifies the unit of measure used to determine the portion of the metafile that the rectangle specified by the <code>srcRect</code> parameter contains.
    - id: callback
      type: System.Drawing.Graphics+EnumerateMetafileProc
      description: <xref href="System.Drawing.Graphics.EnumerateMetafileProc"></xref> delegate that specifies the method to which the metafile records are sent.
    - id: callbackData
      type: System.IntPtr
      description: Internal pointer that is required, but ignored. You can pass <xref href="System.IntPtr.Zero"></xref> for this parameter.
    - id: imageAttr
      type: System.Drawing.Imaging.ImageAttributes
      description: <xref href="System.Drawing.Imaging.ImageAttributes"></xref> that specifies image attribute information for the drawn image.
  overload: System.Drawing.Graphics.EnumerateMetafile*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)
  commentId: M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)
  id: EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: EnumerateMetafile(Metafile, PointF, RectangleF, GraphicsUnit, Graphics+EnumerateMetafileProc, IntPtr, ImageAttributes)
  nameWithType: Graphics.EnumerateMetafile(Metafile, PointF, RectangleF, GraphicsUnit, Graphics+EnumerateMetafileProc, IntPtr, ImageAttributes)
  fullName: Graphics.EnumerateMetafile(Metafile, PointF, RectangleF, GraphicsUnit, Graphics+EnumerateMetafileProc, IntPtr, ImageAttributes)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Sends the records in a selected rectangle from a <xref href="System.Drawing.Imaging.Metafile"></xref>, one at a time, to a callback method for display at a specified point using specified image attributes.
  remarks: "This method enumerates the records contained in the specified metafile. Each record is individually sent to a callback method specified by the `callback` parameter. Typically, the callback method calls the <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method to \"play back\", or draw, the record.  \n  \n If the callback method calls<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, it must do so by calling the <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method of the specific <xref:System.Drawing.Imaging.Metafile> that is being enumerated.  \n  \n Any drawing that takes place outside of the rectangle specified by the `srcRect` parameter is ignored.  \n  \n The image attributes specified by the `imageAttr` parameter replace those specified when the metafile was written."
  example:
  - For a code example, see <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.
  syntax:
    content: public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF destPoint, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit unit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);
    parameters:
    - id: metafile
      type: System.Drawing.Imaging.Metafile
      description: <xref href="System.Drawing.Imaging.Metafile"></xref> to enumerate.
    - id: destPoint
      type: System.Drawing.PointF
      description: <xref href="System.Drawing.PointF"></xref> structure that specifies the location of the upper-left corner of the drawn metafile.
    - id: srcRect
      type: System.Drawing.RectangleF
      description: <xref href="System.Drawing.RectangleF"></xref> structure that specifies the portion of the metafile, relative to its upper-left corner, to draw.
    - id: unit
      type: System.Drawing.GraphicsUnit
      description: Member of the <xref href="System.Drawing.GraphicsUnit"></xref> enumeration that specifies the unit of measure used to determine the portion of the metafile that the rectangle specified by the <code>srcRect</code> parameter contains.
    - id: callback
      type: System.Drawing.Graphics+EnumerateMetafileProc
      description: <xref href="System.Drawing.Graphics.EnumerateMetafileProc"></xref> delegate that specifies the method to which the metafile records are sent.
    - id: callbackData
      type: System.IntPtr
      description: Internal pointer that is required, but ignored. You can pass <xref href="System.IntPtr.Zero"></xref> for this parameter.
    - id: imageAttr
      type: System.Drawing.Imaging.ImageAttributes
      description: <xref href="System.Drawing.Imaging.ImageAttributes"></xref> that specifies image attribute information for the drawn image.
  overload: System.Drawing.Graphics.EnumerateMetafile*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc)
  commentId: M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc)
  id: EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: EnumerateMetafile(Metafile, PointF[], RectangleF, GraphicsUnit, Graphics+EnumerateMetafileProc)
  nameWithType: Graphics.EnumerateMetafile(Metafile, PointF[], RectangleF, GraphicsUnit, Graphics+EnumerateMetafileProc)
  fullName: Graphics.EnumerateMetafile(Metafile, PointF[], RectangleF, GraphicsUnit, Graphics+EnumerateMetafileProc)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Sends the records in a selected rectangle from a <xref href="System.Drawing.Imaging.Metafile"></xref>, one at a time, to a callback method for display in a specified parallelogram.
  remarks: "This method enumerates the records contained in the specified metafile. Each record is individually sent to a callback method specified by the `callback` parameter. Typically, the callback method calls the <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method to \"play back\", or draw, the record.  \n  \n If the callback method calls<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, it must do so by calling the <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method of the specific <xref:System.Drawing.Imaging.Metafile> that is being enumerated.  \n  \n The `destPoints` parameter specifies three points of a parallelogram. The three <xref:System.Drawing.Point> structures represent the upper-left, upper-right, and lower-left corners of the parallelogram. The fourth point is extrapolated from the first three to form a parallelogram. The drawn metafile is scaled and sheared to fit the parallelogram.  \n  \n Any drawing that takes place outside of the rectangle specified by the `srcRect` parameter is ignored."
  example:
  - For a code example, see <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.
  syntax:
    content: public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF[] destPoints, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback);
    parameters:
    - id: metafile
      type: System.Drawing.Imaging.Metafile
      description: <xref href="System.Drawing.Imaging.Metafile"></xref> to enumerate.
    - id: destPoints
      type: System.Drawing.PointF[]
      description: Array of three <xref href="System.Drawing.PointF"></xref> structures that define a parallelogram that determines the size and location of the drawn metafile.
    - id: srcRect
      type: System.Drawing.RectangleF
      description: <xref href="System.Drawing.RectangleF"></xref> structures that specifies the portion of the metafile, relative to its upper-left corner, to draw.
    - id: srcUnit
      type: System.Drawing.GraphicsUnit
      description: Member of the <xref href="System.Drawing.GraphicsUnit"></xref> enumeration that specifies the unit of measure used to determine the portion of the metafile that the rectangle specified by the <code>srcRect</code> parameter contains.
    - id: callback
      type: System.Drawing.Graphics+EnumerateMetafileProc
      description: <xref href="System.Drawing.Graphics.EnumerateMetafileProc"></xref> delegate that specifies the method to which the metafile records are sent.
  overload: System.Drawing.Graphics.EnumerateMetafile*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)
  commentId: M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)
  id: EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: EnumerateMetafile(Metafile, Rectangle, Rectangle, GraphicsUnit, Graphics+EnumerateMetafileProc, IntPtr, ImageAttributes)
  nameWithType: Graphics.EnumerateMetafile(Metafile, Rectangle, Rectangle, GraphicsUnit, Graphics+EnumerateMetafileProc, IntPtr, ImageAttributes)
  fullName: Graphics.EnumerateMetafile(Metafile, Rectangle, Rectangle, GraphicsUnit, Graphics+EnumerateMetafileProc, IntPtr, ImageAttributes)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Sends the records of a selected rectangle from a <xref href="System.Drawing.Imaging.Metafile"></xref>, one at a time, to a callback method for display in a specified rectangle using specified image attributes.
  remarks: "This method enumerates the records contained in the specified metafile. Each record is individually sent to a callback method specified by the `callback` parameter. Typically, the callback method calls the <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method to \"play back\", or draw, the record.  \n  \n If the callback method calls<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, it must do so by calling the <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method of the specific <xref:System.Drawing.Imaging.Metafile> that is being enumerated.  \n  \n Any drawing that takes place outside of the rectangle specified by the `srcRect` parameter is ignored.  \n  \n The image attributes specified by the `imageAttr` parameter replace those specified when the metafile was written."
  example:
  - For a code example, see <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.
  syntax:
    content: public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Rectangle destRect, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit unit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);
    parameters:
    - id: metafile
      type: System.Drawing.Imaging.Metafile
      description: <xref href="System.Drawing.Imaging.Metafile"></xref> to enumerate.
    - id: destRect
      type: System.Drawing.Rectangle
      description: <xref href="System.Drawing.Rectangle"></xref> structure that specifies the location and size of the drawn metafile.
    - id: srcRect
      type: System.Drawing.Rectangle
      description: <xref href="System.Drawing.Rectangle"></xref> structure that specifies the portion of the metafile, relative to its upper-left corner, to draw.
    - id: unit
      type: System.Drawing.GraphicsUnit
      description: Member of the <xref href="System.Drawing.GraphicsUnit"></xref> enumeration that specifies the unit of measure used to determine the portion of the metafile that the rectangle specified by the <code>srcRect</code> parameter contains.
    - id: callback
      type: System.Drawing.Graphics+EnumerateMetafileProc
      description: <xref href="System.Drawing.Graphics.EnumerateMetafileProc"></xref> delegate that specifies the method to which the metafile records are sent.
    - id: callbackData
      type: System.IntPtr
      description: Internal pointer that is required, but ignored. You can pass <xref href="System.IntPtr.Zero"></xref> for this parameter.
    - id: imageAttr
      type: System.Drawing.Imaging.ImageAttributes
      description: <xref href="System.Drawing.Imaging.ImageAttributes"></xref> that specifies image attribute information for the drawn image.
  overload: System.Drawing.Graphics.EnumerateMetafile*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)
  commentId: M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)
  id: EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: EnumerateMetafile(Metafile, RectangleF, RectangleF, GraphicsUnit, Graphics+EnumerateMetafileProc, IntPtr, ImageAttributes)
  nameWithType: Graphics.EnumerateMetafile(Metafile, RectangleF, RectangleF, GraphicsUnit, Graphics+EnumerateMetafileProc, IntPtr, ImageAttributes)
  fullName: Graphics.EnumerateMetafile(Metafile, RectangleF, RectangleF, GraphicsUnit, Graphics+EnumerateMetafileProc, IntPtr, ImageAttributes)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Sends the records of a selected rectangle from a <xref href="System.Drawing.Imaging.Metafile"></xref>, one at a time, to a callback method for display in a specified rectangle using specified image attributes.
  remarks: "This method enumerates the records contained in the specified metafile. Each record is individually sent to a callback method specified by the `callback` parameter. Typically, the callback method calls the <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method to \"play back\", or draw, the record.  \n  \n If the callback method calls <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, it must do so by calling the <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method of the specific <xref:System.Drawing.Imaging.Metafile> that is being enumerated.  \n  \n Any drawing that takes place outside of the rectangle specified by the `srcRect` parameter is ignored.  \n  \n The image attributes specified by the `imageAttr` parameter replace those specified when the metafile was written."
  example:
  - For a code example, see <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.
  syntax:
    content: public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.RectangleF destRect, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit unit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);
    parameters:
    - id: metafile
      type: System.Drawing.Imaging.Metafile
      description: <xref href="System.Drawing.Imaging.Metafile"></xref> to enumerate.
    - id: destRect
      type: System.Drawing.RectangleF
      description: <xref href="System.Drawing.RectangleF"></xref> structure that specifies the location and size of the drawn metafile.
    - id: srcRect
      type: System.Drawing.RectangleF
      description: <xref href="System.Drawing.RectangleF"></xref> structure that specifies the portion of the metafile, relative to its upper-left corner, to draw.
    - id: unit
      type: System.Drawing.GraphicsUnit
      description: Member of the <xref href="System.Drawing.GraphicsUnit"></xref> enumeration that specifies the unit of measure used to determine the portion of the metafile that the rectangle specified by the <code>srcRect</code> parameter contains.
    - id: callback
      type: System.Drawing.Graphics+EnumerateMetafileProc
      description: <xref href="System.Drawing.Graphics.EnumerateMetafileProc"></xref> delegate that specifies the method to which the metafile records are sent.
    - id: callbackData
      type: System.IntPtr
      description: Internal pointer that is required, but ignored. You can pass <xref href="System.IntPtr.Zero"></xref> for this parameter.
    - id: imageAttr
      type: System.Drawing.Imaging.ImageAttributes
      description: <xref href="System.Drawing.Imaging.ImageAttributes"></xref> that specifies image attribute information for the drawn image.
  overload: System.Drawing.Graphics.EnumerateMetafile*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)
  commentId: M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)
  id: EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: EnumerateMetafile(Metafile, Rectangle, Rectangle, GraphicsUnit, Graphics+EnumerateMetafileProc, IntPtr)
  nameWithType: Graphics.EnumerateMetafile(Metafile, Rectangle, Rectangle, GraphicsUnit, Graphics+EnumerateMetafileProc, IntPtr)
  fullName: Graphics.EnumerateMetafile(Metafile, Rectangle, Rectangle, GraphicsUnit, Graphics+EnumerateMetafileProc, IntPtr)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Sends the records of a selected rectangle from a <xref href="System.Drawing.Imaging.Metafile"></xref>, one at a time, to a callback method for display in a specified rectangle.
  remarks: "This method enumerates the records contained in the specified metafile. Each record is individually sent to a callback method specified by the `callback` parameter. Typically, the callback method calls the <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method to \"play back\", or draw, the record.  \n  \n If the callback method calls <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, it must do so by calling the <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method of the specific <xref:System.Drawing.Imaging.Metafile> that is being enumerated.  \n  \n Any drawing that takes place outside of the rectangle specified by the `srcRect` parameter is ignored."
  example:
  - For a code example, see <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.
  syntax:
    content: public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Rectangle destRect, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);
    parameters:
    - id: metafile
      type: System.Drawing.Imaging.Metafile
      description: <xref href="System.Drawing.Imaging.Metafile"></xref> to enumerate.
    - id: destRect
      type: System.Drawing.Rectangle
      description: <xref href="System.Drawing.Rectangle"></xref> structure that specifies the location and size of the drawn metafile.
    - id: srcRect
      type: System.Drawing.Rectangle
      description: <xref href="System.Drawing.Rectangle"></xref> structure that specifies the portion of the metafile, relative to its upper-left corner, to draw.
    - id: srcUnit
      type: System.Drawing.GraphicsUnit
      description: Member of the <xref href="System.Drawing.GraphicsUnit"></xref> enumeration that specifies the unit of measure used to determine the portion of the metafile that the rectangle specified by the <code>srcRect</code> parameter contains.
    - id: callback
      type: System.Drawing.Graphics+EnumerateMetafileProc
      description: <xref href="System.Drawing.Graphics.EnumerateMetafileProc"></xref> delegate that specifies the method to which the metafile records are sent.
    - id: callbackData
      type: System.IntPtr
      description: Internal pointer that is required, but ignored. You can pass <xref href="System.IntPtr.Zero"></xref> for this parameter.
  overload: System.Drawing.Graphics.EnumerateMetafile*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF[],System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)
  commentId: M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF[],System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)
  id: EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF[],System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: EnumerateMetafile(Metafile, PointF[], Graphics+EnumerateMetafileProc, IntPtr, ImageAttributes)
  nameWithType: Graphics.EnumerateMetafile(Metafile, PointF[], Graphics+EnumerateMetafileProc, IntPtr, ImageAttributes)
  fullName: Graphics.EnumerateMetafile(Metafile, PointF[], Graphics+EnumerateMetafileProc, IntPtr, ImageAttributes)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Sends the records in the specified <xref href="System.Drawing.Imaging.Metafile"></xref>, one at a time, to a callback method for display in a specified parallelogram using specified image attributes.
  remarks: "This method enumerates the records contained in the specified metafile. Each record is individually sent to a callback method specified by the `callback` parameter. Typically, the callback method calls the <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method to \"play back\", or draw, the record.  \n  \n If the callback method calls<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, it must do so by calling the <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method of the specific <xref:System.Drawing.Imaging.Metafile> that is being enumerated.  \n  \n The `destPoints` parameter specifies three points of a parallelogram. The three <xref:System.Drawing.PointF> structures represent the upper-left, upper-right, and lower-left corners of the parallelogram. The fourth point is extrapolated from the first three to form a parallelogram. The drawn metafile is scaled and sheared to fit the parallelogram.  \n  \n The image attributes specified by the `imageAttr` parameter replace those specified when the metafile was written."
  example:
  - For a code example, see <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.
  syntax:
    content: public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF[] destPoints, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);
    parameters:
    - id: metafile
      type: System.Drawing.Imaging.Metafile
      description: <xref href="System.Drawing.Imaging.Metafile"></xref> to enumerate.
    - id: destPoints
      type: System.Drawing.PointF[]
      description: Array of three <xref href="System.Drawing.PointF"></xref> structures that define a parallelogram that determines the size and location of the drawn metafile.
    - id: callback
      type: System.Drawing.Graphics+EnumerateMetafileProc
      description: <xref href="System.Drawing.Graphics.EnumerateMetafileProc"></xref> delegate that specifies the method to which the metafile records are sent.
    - id: callbackData
      type: System.IntPtr
      description: Internal pointer that is required, but ignored. You can pass <xref href="System.IntPtr.Zero"></xref> for this parameter.
    - id: imageAttr
      type: System.Drawing.Imaging.ImageAttributes
      description: <xref href="System.Drawing.Imaging.ImageAttributes"></xref> that specifies image attribute information for the drawn image.
  overload: System.Drawing.Graphics.EnumerateMetafile*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc)
  commentId: M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc)
  id: EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: EnumerateMetafile(Metafile, Point[], Rectangle, GraphicsUnit, Graphics+EnumerateMetafileProc)
  nameWithType: Graphics.EnumerateMetafile(Metafile, Point[], Rectangle, GraphicsUnit, Graphics+EnumerateMetafileProc)
  fullName: Graphics.EnumerateMetafile(Metafile, Point[], Rectangle, GraphicsUnit, Graphics+EnumerateMetafileProc)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Sends the records in a selected rectangle from a <xref href="System.Drawing.Imaging.Metafile"></xref>, one at a time, to a callback method for display in a specified parallelogram.
  remarks: "This method enumerates the records contained in the specified metafile. Each record is individually sent to a callback method specified by the `callback` parameter. Typically, the callback method calls the <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method to \"play back\", or draw, the record.  \n  \n If the callback method calls<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, it must do so by calling the <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method of the specific <xref:System.Drawing.Imaging.Metafile> that is being enumerated.  \n  \n The `destPoints` parameter specifies three points of a parallelogram. The three <xref:System.Drawing.Point> structures represent the upper-left, upper-right, and lower-left corners of the parallelogram. The fourth point is extrapolated from the first three to form a parallelogram. The drawn metafile is scaled and sheared to fit the parallelogram.  \n  \n Any drawing that takes place outside of the rectangle specified by the `srcRect` parameter is ignored."
  example:
  - For a code example, see <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.
  syntax:
    content: public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point[] destPoints, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback);
    parameters:
    - id: metafile
      type: System.Drawing.Imaging.Metafile
      description: <xref href="System.Drawing.Imaging.Metafile"></xref> to enumerate.
    - id: destPoints
      type: System.Drawing.Point[]
      description: Array of three <xref href="System.Drawing.Point"></xref> structures that define a parallelogram that determines the size and location of the drawn metafile.
    - id: srcRect
      type: System.Drawing.Rectangle
      description: <xref href="System.Drawing.Rectangle"></xref> structure that specifies the portion of the metafile, relative to its upper-left corner, to draw.
    - id: srcUnit
      type: System.Drawing.GraphicsUnit
      description: Member of the <xref href="System.Drawing.GraphicsUnit"></xref> enumeration that specifies the unit of measure used to determine the portion of the metafile that the rectangle specified by the <code>srcRect</code> parameter contains.
    - id: callback
      type: System.Drawing.Graphics+EnumerateMetafileProc
      description: <xref href="System.Drawing.Graphics.EnumerateMetafileProc"></xref> delegate that specifies the method to which the metafile records are sent.
  overload: System.Drawing.Graphics.EnumerateMetafile*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)
  commentId: M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)
  id: EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: EnumerateMetafile(Metafile, PointF, Graphics+EnumerateMetafileProc, IntPtr, ImageAttributes)
  nameWithType: Graphics.EnumerateMetafile(Metafile, PointF, Graphics+EnumerateMetafileProc, IntPtr, ImageAttributes)
  fullName: Graphics.EnumerateMetafile(Metafile, PointF, Graphics+EnumerateMetafileProc, IntPtr, ImageAttributes)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Sends the records in the specified <xref href="System.Drawing.Imaging.Metafile"></xref>, one at a time, to a callback method for display at a specified point using specified image attributes.
  remarks: "This method enumerates the records contained in the specified metafile. Each record is individually sent to a callback method specified by the `callback` parameter. Typically, the callback method calls the <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method to \"play back\", or draw, the record.  \n  \n If the callback method calls<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, it must do so by calling the method of the specific <xref:System.Drawing.Imaging.Metafile> that is being enumerated.  \n  \n The image attributes specified by the `imageAttr` parameter replace those specified when the metafile was written."
  example:
  - For a code example, see <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.
  syntax:
    content: public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF destPoint, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);
    parameters:
    - id: metafile
      type: System.Drawing.Imaging.Metafile
      description: <xref href="System.Drawing.Imaging.Metafile"></xref> to enumerate.
    - id: destPoint
      type: System.Drawing.PointF
      description: <xref href="System.Drawing.PointF"></xref> structure that specifies the location of the upper-left corner of the drawn metafile.
    - id: callback
      type: System.Drawing.Graphics+EnumerateMetafileProc
      description: <xref href="System.Drawing.Graphics.EnumerateMetafileProc"></xref> delegate that specifies the method to which the metafile records are sent.
    - id: callbackData
      type: System.IntPtr
      description: Internal pointer that is required, but ignored. You can pass <xref href="System.IntPtr.Zero"></xref> for this parameter.
    - id: imageAttr
      type: System.Drawing.Imaging.ImageAttributes
      description: <xref href="System.Drawing.Imaging.ImageAttributes"></xref> that specifies image attribute information for the drawn image.
  overload: System.Drawing.Graphics.EnumerateMetafile*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Graphics.EnumerateMetafileProc)
  commentId: M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Graphics.EnumerateMetafileProc)
  id: EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Graphics.EnumerateMetafileProc)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: EnumerateMetafile(Metafile, Point, Graphics+EnumerateMetafileProc)
  nameWithType: Graphics.EnumerateMetafile(Metafile, Point, Graphics+EnumerateMetafileProc)
  fullName: Graphics.EnumerateMetafile(Metafile, Point, Graphics+EnumerateMetafileProc)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Sends the records in the specified <xref href="System.Drawing.Imaging.Metafile"></xref>, one at a time, to a callback method for display at a specified point.
  remarks: "This method enumerates the records contained in the specified metafile. Each record is individually sent to a callback method specified by the `callback` parameter. Typically, the callback method calls the <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method to \"play back\", or draw, the record.  \n  \n If the callback method calls <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, it must do so by calling the <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method of the specific <xref:System.Drawing.Imaging.Metafile> that is being enumerated."
  example:
  - "The following code example creates a form that has a <xref:System.Drawing.Imaging.Metafile> as one of its private members. The <xref:System.Windows.Forms.Control.OnPaint%2A> method calls <xref:System.Drawing.Graphics.EnumerateMetafile%2A>, which calls the form's `MetafileCallback` method for each record in the metafile. The `MetafileCallback` method calls the <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method. Notice that the `MetafileCallback` method receives the record data as an <xref:System.IntPtr>, but the <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method expects the record data to be a byte array. The call to <xref:System.Runtime.InteropServices.Marshal.Copy%2A> copies the record data to a byte array so that it can be passed to <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>.  \n  \n [!code-csharp[System.Drawing.Graphics.EnumerateMetafile#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Graphics.EnumerateMetafile/CS/Form1.cs#1)]\n [!code-vb[System.Drawing.Graphics.EnumerateMetafile#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Graphics.EnumerateMetafile/VB/Form1.vb#1)]"
  syntax:
    content: public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point destPoint, System.Drawing.Graphics.EnumerateMetafileProc callback);
    parameters:
    - id: metafile
      type: System.Drawing.Imaging.Metafile
      description: <xref href="System.Drawing.Imaging.Metafile"></xref> to enumerate.
    - id: destPoint
      type: System.Drawing.Point
      description: <xref href="System.Drawing.Point"></xref> structure that specifies the location of the upper-left corner of the drawn metafile.
    - id: callback
      type: System.Drawing.Graphics+EnumerateMetafileProc
      description: <xref href="System.Drawing.Graphics.EnumerateMetafileProc"></xref> delegate that specifies the method to which the metafile records are sent.
  overload: System.Drawing.Graphics.EnumerateMetafile*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point[],System.Drawing.Graphics.EnumerateMetafileProc)
  commentId: M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point[],System.Drawing.Graphics.EnumerateMetafileProc)
  id: EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point[],System.Drawing.Graphics.EnumerateMetafileProc)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: EnumerateMetafile(Metafile, Point[], Graphics+EnumerateMetafileProc)
  nameWithType: Graphics.EnumerateMetafile(Metafile, Point[], Graphics+EnumerateMetafileProc)
  fullName: Graphics.EnumerateMetafile(Metafile, Point[], Graphics+EnumerateMetafileProc)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Sends the records in the specified <xref href="System.Drawing.Imaging.Metafile"></xref>, one at a time, to a callback method for display in a specified parallelogram.
  remarks: "This method enumerates the records contained in the specified metafile. Each record is individually sent to a callback method specified by the `callback` parameter. Typically, the callback method calls the <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method to \"play back\", or draw, the record.  \n  \n If the callback method calls<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, it must do so by calling the <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method of the specific <xref:System.Drawing.Imaging.Metafile> that is being enumerated."
  example:
  - For a code example, see <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.
  syntax:
    content: public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point[] destPoints, System.Drawing.Graphics.EnumerateMetafileProc callback);
    parameters:
    - id: metafile
      type: System.Drawing.Imaging.Metafile
      description: <xref href="System.Drawing.Imaging.Metafile"></xref> to enumerate.
    - id: destPoints
      type: System.Drawing.Point[]
      description: Array of three <xref href="System.Drawing.Point"></xref> structures that define a parallelogram that determines the size and location of the drawn metafile.
    - id: callback
      type: System.Drawing.Graphics+EnumerateMetafileProc
      description: <xref href="System.Drawing.Graphics.EnumerateMetafileProc"></xref> delegate that specifies the method to which the metafile records are sent.
  overload: System.Drawing.Graphics.EnumerateMetafile*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF,System.Drawing.Graphics.EnumerateMetafileProc)
  commentId: M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF,System.Drawing.Graphics.EnumerateMetafileProc)
  id: EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF,System.Drawing.Graphics.EnumerateMetafileProc)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: EnumerateMetafile(Metafile, PointF, Graphics+EnumerateMetafileProc)
  nameWithType: Graphics.EnumerateMetafile(Metafile, PointF, Graphics+EnumerateMetafileProc)
  fullName: Graphics.EnumerateMetafile(Metafile, PointF, Graphics+EnumerateMetafileProc)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Sends the records in the specified <xref href="System.Drawing.Imaging.Metafile"></xref>, one at a time, to a callback method for display at a specified point.
  remarks: "This method enumerates the records contained in the specified metafile. Each record is individually sent to a callback method specified by the `callback` parameter. Typically, the callback method calls the <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method to \"play back\", or draw, the record.  \n  \n If the callback method calls<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, it must do so by calling the<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method of the specific <xref:System.Drawing.Imaging.Metafile> that is being enumerated."
  example:
  - For a code example, see <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.
  syntax:
    content: public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF destPoint, System.Drawing.Graphics.EnumerateMetafileProc callback);
    parameters:
    - id: metafile
      type: System.Drawing.Imaging.Metafile
      description: <xref href="System.Drawing.Imaging.Metafile"></xref> to enumerate.
    - id: destPoint
      type: System.Drawing.PointF
      description: <xref href="System.Drawing.PointF"></xref> structure that specifies the location of the upper-left corner of the drawn metafile.
    - id: callback
      type: System.Drawing.Graphics+EnumerateMetafileProc
      description: <xref href="System.Drawing.Graphics.EnumerateMetafileProc"></xref> delegate that specifies the method to which the metafile records are sent.
  overload: System.Drawing.Graphics.EnumerateMetafile*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF[],System.Drawing.Graphics.EnumerateMetafileProc)
  commentId: M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF[],System.Drawing.Graphics.EnumerateMetafileProc)
  id: EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF[],System.Drawing.Graphics.EnumerateMetafileProc)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: EnumerateMetafile(Metafile, PointF[], Graphics+EnumerateMetafileProc)
  nameWithType: Graphics.EnumerateMetafile(Metafile, PointF[], Graphics+EnumerateMetafileProc)
  fullName: Graphics.EnumerateMetafile(Metafile, PointF[], Graphics+EnumerateMetafileProc)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Sends the records in the specified <xref href="System.Drawing.Imaging.Metafile"></xref>, one at a time, to a callback method for display in a specified parallelogram.
  remarks: "This method enumerates the records contained in the specified metafile. Each record is individually sent to a callback method specified by the `callback` parameter. Typically, the callback method calls the <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method to \"play back\", or draw, the record.  \n  \n If the callback method calls<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, it must do so by calling the <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method of the specific <xref:System.Drawing.Imaging.Metafile> that is being enumerated.  \n  \n The `destPoints` parameter specifies three points of a parallelogram. The three <xref:System.Drawing.PointF> structures represent the upper-left, upper-right, and lower-left corners of the parallelogram. The fourth point is extrapolated from the first three to form a parallelogram. The drawn metafile is scaled and sheared to fit the parallelogram."
  example:
  - For a code example, see <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.
  syntax:
    content: public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF[] destPoints, System.Drawing.Graphics.EnumerateMetafileProc callback);
    parameters:
    - id: metafile
      type: System.Drawing.Imaging.Metafile
      description: <xref href="System.Drawing.Imaging.Metafile"></xref> to enumerate.
    - id: destPoints
      type: System.Drawing.PointF[]
      description: Array of three <xref href="System.Drawing.PointF"></xref> structures that define a parallelogram that determines the size and location of the drawn metafile.
    - id: callback
      type: System.Drawing.Graphics+EnumerateMetafileProc
      description: <xref href="System.Drawing.Graphics.EnumerateMetafileProc"></xref> delegate that specifies the method to which the metafile records are sent.
  overload: System.Drawing.Graphics.EnumerateMetafile*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF,System.Drawing.Graphics.EnumerateMetafileProc)
  commentId: M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF,System.Drawing.Graphics.EnumerateMetafileProc)
  id: EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF,System.Drawing.Graphics.EnumerateMetafileProc)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: EnumerateMetafile(Metafile, RectangleF, Graphics+EnumerateMetafileProc)
  nameWithType: Graphics.EnumerateMetafile(Metafile, RectangleF, Graphics+EnumerateMetafileProc)
  fullName: Graphics.EnumerateMetafile(Metafile, RectangleF, Graphics+EnumerateMetafileProc)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Sends the records of the specified <xref href="System.Drawing.Imaging.Metafile"></xref>, one at a time, to a callback method for display in a specified rectangle.
  remarks: "This method enumerates the records contained in the specified metafile. Each record is individually sent to a callback method specified by the `callback` parameter. Typically, the callback method calls the <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method to \"play back\", or draw, the record.  \n  \n If the callback method calls <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, it must do so by calling the <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method of the specific <xref:System.Drawing.Imaging.Metafile> that is being enumerated."
  example:
  - For a code example, see <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.
  syntax:
    content: public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.RectangleF destRect, System.Drawing.Graphics.EnumerateMetafileProc callback);
    parameters:
    - id: metafile
      type: System.Drawing.Imaging.Metafile
      description: <xref href="System.Drawing.Imaging.Metafile"></xref> to enumerate.
    - id: destRect
      type: System.Drawing.RectangleF
      description: <xref href="System.Drawing.RectangleF"></xref> structure that specifies the location and size of the drawn metafile.
    - id: callback
      type: System.Drawing.Graphics+EnumerateMetafileProc
      description: <xref href="System.Drawing.Graphics.EnumerateMetafileProc"></xref> delegate that specifies the method to which the metafile records are sent.
  overload: System.Drawing.Graphics.EnumerateMetafile*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)
  commentId: M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)
  id: EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: EnumerateMetafile(Metafile, Point, Graphics+EnumerateMetafileProc, IntPtr)
  nameWithType: Graphics.EnumerateMetafile(Metafile, Point, Graphics+EnumerateMetafileProc, IntPtr)
  fullName: Graphics.EnumerateMetafile(Metafile, Point, Graphics+EnumerateMetafileProc, IntPtr)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Sends the records in the specified <xref href="System.Drawing.Imaging.Metafile"></xref>, one at a time, to a callback method for display at a specified point.
  remarks: "This method enumerates the records contained in the specified metafile. Each record is individually sent to a callback method specified by the `callback` parameter. Typically, the callback method calls the <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method to \"play back\", or draw, the record.  \n  \n If the callback method calls <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, it must do so by calling the <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method of the specific <xref:System.Drawing.Imaging.Metafile> that is being enumerated."
  example:
  - For a code example, see <xref:System.Drawing.Graphics.EnumerateMetafile%2A>.
  syntax:
    content: public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point destPoint, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);
    parameters:
    - id: metafile
      type: System.Drawing.Imaging.Metafile
      description: <xref href="System.Drawing.Imaging.Metafile"></xref> to enumerate.
    - id: destPoint
      type: System.Drawing.Point
      description: <xref href="System.Drawing.Point"></xref> structure that specifies the location of the upper-left corner of the drawn metafile.
    - id: callback
      type: System.Drawing.Graphics+EnumerateMetafileProc
      description: <xref href="System.Drawing.Graphics.EnumerateMetafileProc"></xref> delegate that specifies the method to which the metafile records are sent.
    - id: callbackData
      type: System.IntPtr
      description: Internal pointer that is required, but ignored. You can pass <xref href="System.IntPtr.Zero"></xref> for this parameter.
  overload: System.Drawing.Graphics.EnumerateMetafile*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point[],System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)
  commentId: M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point[],System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)
  id: EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point[],System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: EnumerateMetafile(Metafile, Point[], Graphics+EnumerateMetafileProc, IntPtr)
  nameWithType: Graphics.EnumerateMetafile(Metafile, Point[], Graphics+EnumerateMetafileProc, IntPtr)
  fullName: Graphics.EnumerateMetafile(Metafile, Point[], Graphics+EnumerateMetafileProc, IntPtr)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Sends the records in the specified <xref href="System.Drawing.Imaging.Metafile"></xref>, one at a time, to a callback method for display in a specified parallelogram.
  remarks: "This method enumerates the records contained in the specified metafile. Each record is individually sent to a callback method specified by the `callback` parameter. Typically, the callback method calls the <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method to \"play back\", or draw, the record.  \n  \n If the callback method calls <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, it must do so by calling the <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method of the specific <xref:System.Drawing.Imaging.Metafile> that is being enumerated."
  example:
  - For a code example, see <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.
  syntax:
    content: public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point[] destPoints, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);
    parameters:
    - id: metafile
      type: System.Drawing.Imaging.Metafile
      description: <xref href="System.Drawing.Imaging.Metafile"></xref> to enumerate.
    - id: destPoints
      type: System.Drawing.Point[]
      description: Array of three <xref href="System.Drawing.Point"></xref> structures that define a parallelogram that determines the size and location of the drawn metafile.
    - id: callback
      type: System.Drawing.Graphics+EnumerateMetafileProc
      description: <xref href="System.Drawing.Graphics.EnumerateMetafileProc"></xref> delegate that specifies the method to which the metafile records are sent.
    - id: callbackData
      type: System.IntPtr
      description: Internal pointer that is required, but ignored. You can pass <xref href="System.IntPtr.Zero"></xref> for this parameter.
  overload: System.Drawing.Graphics.EnumerateMetafile*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Rectangle,System.Drawing.Graphics.EnumerateMetafileProc)
  commentId: M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Rectangle,System.Drawing.Graphics.EnumerateMetafileProc)
  id: EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Rectangle,System.Drawing.Graphics.EnumerateMetafileProc)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: EnumerateMetafile(Metafile, Rectangle, Graphics+EnumerateMetafileProc)
  nameWithType: Graphics.EnumerateMetafile(Metafile, Rectangle, Graphics+EnumerateMetafileProc)
  fullName: Graphics.EnumerateMetafile(Metafile, Rectangle, Graphics+EnumerateMetafileProc)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Sends the records of the specified <xref href="System.Drawing.Imaging.Metafile"></xref>, one at a time, to a callback method for display in a specified rectangle.
  remarks: "This method enumerates the records contained in the specified metafile. Each record is individually sent to a callback method specified by the `callback` parameter. Typically, the callback method calls the <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method to \"play back\", or draw, the record.  \n  \n If the callback method calls <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, it must do so by calling the <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method of the specific <xref:System.Drawing.Imaging.Metafile> that is being enumerated."
  example:
  - For a code example, see <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.
  syntax:
    content: public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Rectangle destRect, System.Drawing.Graphics.EnumerateMetafileProc callback);
    parameters:
    - id: metafile
      type: System.Drawing.Imaging.Metafile
      description: <xref href="System.Drawing.Imaging.Metafile"></xref> to enumerate.
    - id: destRect
      type: System.Drawing.Rectangle
      description: <xref href="System.Drawing.Rectangle"></xref> structure that specifies the location and size of the drawn metafile.
    - id: callback
      type: System.Drawing.Graphics+EnumerateMetafileProc
      description: <xref href="System.Drawing.Graphics.EnumerateMetafileProc"></xref> delegate that specifies the method to which the metafile records are sent.
  overload: System.Drawing.Graphics.EnumerateMetafile*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF[],System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)
  commentId: M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF[],System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)
  id: EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF[],System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: EnumerateMetafile(Metafile, PointF[], Graphics+EnumerateMetafileProc, IntPtr)
  nameWithType: Graphics.EnumerateMetafile(Metafile, PointF[], Graphics+EnumerateMetafileProc, IntPtr)
  fullName: Graphics.EnumerateMetafile(Metafile, PointF[], Graphics+EnumerateMetafileProc, IntPtr)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Sends the records in the specified <xref href="System.Drawing.Imaging.Metafile"></xref>, one at a time, to a callback method for display in a specified parallelogram.
  remarks: "This method enumerates the records contained in the specified metafile. Each record is individually sent to a callback method specified by the `callback` parameter. Typically, the callback method calls the <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method to \"play back\", or draw, the record.  \n  \n If the callback method calls <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, it must do so by calling the <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method of the specific <xref:System.Drawing.Imaging.Metafile> that is being enumerated.  \n  \n The `destPoints` parameter specifies three points of a parallelogram. The three <xref:System.Drawing.PointF> structures represent the upper-left, upper-right, and lower-left corners of the parallelogram. The fourth point is extrapolated from the first three to form a parallelogram. The drawn metafile is scaled and sheared to fit the parallelogram."
  example:
  - For a code example, see <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.
  syntax:
    content: public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF[] destPoints, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);
    parameters:
    - id: metafile
      type: System.Drawing.Imaging.Metafile
      description: <xref href="System.Drawing.Imaging.Metafile"></xref> to enumerate.
    - id: destPoints
      type: System.Drawing.PointF[]
      description: Array of three <xref href="System.Drawing.PointF"></xref> structures that define a parallelogram that determines the size and location of the drawn metafile.
    - id: callback
      type: System.Drawing.Graphics+EnumerateMetafileProc
      description: <xref href="System.Drawing.Graphics.EnumerateMetafileProc"></xref> delegate that specifies the method to which the metafile records are sent.
    - id: callbackData
      type: System.IntPtr
      description: Internal pointer that is required, but ignored. You can pass <xref href="System.IntPtr.Zero"></xref> for this parameter.
  overload: System.Drawing.Graphics.EnumerateMetafile*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Rectangle,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)
  commentId: M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Rectangle,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)
  id: EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Rectangle,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: EnumerateMetafile(Metafile, Rectangle, Graphics+EnumerateMetafileProc, IntPtr)
  nameWithType: Graphics.EnumerateMetafile(Metafile, Rectangle, Graphics+EnumerateMetafileProc, IntPtr)
  fullName: Graphics.EnumerateMetafile(Metafile, Rectangle, Graphics+EnumerateMetafileProc, IntPtr)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Sends the records of the specified <xref href="System.Drawing.Imaging.Metafile"></xref>, one at a time, to a callback method for display in a specified rectangle.
  remarks: "This method enumerates the records contained in the specified metafile. Each record is individually sent to a callback method specified by the `callback` parameter. Typically, the callback method calls the <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method to \"play back\", or draw, the record.  \n  \n If the callback method calls<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, it must do so by calling the <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method of the specific <xref:System.Drawing.Imaging.Metafile> that is being enumerated."
  example:
  - For a code example, see <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.
  syntax:
    content: public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Rectangle destRect, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);
    parameters:
    - id: metafile
      type: System.Drawing.Imaging.Metafile
      description: <xref href="System.Drawing.Imaging.Metafile"></xref> to enumerate.
    - id: destRect
      type: System.Drawing.Rectangle
      description: <xref href="System.Drawing.Rectangle"></xref> structure that specifies the location and size of the drawn metafile.
    - id: callback
      type: System.Drawing.Graphics+EnumerateMetafileProc
      description: <xref href="System.Drawing.Graphics.EnumerateMetafileProc"></xref> delegate that specifies the method to which the metafile records are sent.
    - id: callbackData
      type: System.IntPtr
      description: Internal pointer that is required, but ignored. You can pass <xref href="System.IntPtr.Zero"></xref> for this parameter.
  overload: System.Drawing.Graphics.EnumerateMetafile*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)
  commentId: M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)
  id: EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: EnumerateMetafile(Metafile, RectangleF, Graphics+EnumerateMetafileProc, IntPtr)
  nameWithType: Graphics.EnumerateMetafile(Metafile, RectangleF, Graphics+EnumerateMetafileProc, IntPtr)
  fullName: Graphics.EnumerateMetafile(Metafile, RectangleF, Graphics+EnumerateMetafileProc, IntPtr)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Sends the records of the specified <xref href="System.Drawing.Imaging.Metafile"></xref>, one at a time, to a callback method for display in a specified rectangle.
  remarks: "This method enumerates the records contained in the specified metafile. Each record is individually sent to a callback method specified by the `callback` parameter. Typically, the callback method calls the <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method to \"play back\", or draw, the record.  \n  \n If the callback method calls <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, it must do so by calling the <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method of the specific <xref:System.Drawing.Imaging.Metafile> that is being enumerated."
  example:
  - For a code example, see <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.
  syntax:
    content: public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.RectangleF destRect, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);
    parameters:
    - id: metafile
      type: System.Drawing.Imaging.Metafile
      description: <xref href="System.Drawing.Imaging.Metafile"></xref> to enumerate.
    - id: destRect
      type: System.Drawing.RectangleF
      description: <xref href="System.Drawing.RectangleF"></xref> structure that specifies the location and size of the drawn metafile.
    - id: callback
      type: System.Drawing.Graphics+EnumerateMetafileProc
      description: <xref href="System.Drawing.Graphics.EnumerateMetafileProc"></xref> delegate that specifies the method to which the metafile records are sent.
    - id: callbackData
      type: System.IntPtr
      description: Internal pointer that is required, but ignored. You can pass <xref href="System.IntPtr.Zero"></xref> for this parameter.
  overload: System.Drawing.Graphics.EnumerateMetafile*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)
  commentId: M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)
  id: EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: EnumerateMetafile(Metafile, Point, Graphics+EnumerateMetafileProc, IntPtr, ImageAttributes)
  nameWithType: Graphics.EnumerateMetafile(Metafile, Point, Graphics+EnumerateMetafileProc, IntPtr, ImageAttributes)
  fullName: Graphics.EnumerateMetafile(Metafile, Point, Graphics+EnumerateMetafileProc, IntPtr, ImageAttributes)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Sends the records in the specified <xref href="System.Drawing.Imaging.Metafile"></xref>, one at a time, to a callback method for display at a specified point using specified image attributes.
  remarks: "This method enumerates the records contained in the specified metafile. Each record is individually sent to a callback method specified by the `callback` parameter. Typically, the callback method calls the <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method to \"play back\", or draw, the record.  \n  \n If the callback method calls <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, it must do so by calling the <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method of the specific <xref:System.Drawing.Imaging.Metafile> that is being enumerated."
  example:
  - For a code example, see <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.
  syntax:
    content: public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point destPoint, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);
    parameters:
    - id: metafile
      type: System.Drawing.Imaging.Metafile
      description: <xref href="System.Drawing.Imaging.Metafile"></xref> to enumerate.
    - id: destPoint
      type: System.Drawing.Point
      description: <xref href="System.Drawing.Point"></xref> structure that specifies the location of the upper-left corner of the drawn metafile.
    - id: callback
      type: System.Drawing.Graphics+EnumerateMetafileProc
      description: <xref href="System.Drawing.Graphics.EnumerateMetafileProc"></xref> delegate that specifies the method to which the metafile records are sent.
    - id: callbackData
      type: System.IntPtr
      description: Internal pointer that is required, but ignored. You can pass <xref href="System.IntPtr.Zero"></xref> for this parameter.
    - id: imageAttr
      type: System.Drawing.Imaging.ImageAttributes
      description: <xref href="System.Drawing.Imaging.ImageAttributes"></xref> that specifies image attribute information for the drawn image.
  overload: System.Drawing.Graphics.EnumerateMetafile*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc)
  commentId: M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc)
  id: EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: EnumerateMetafile(Metafile, Point, Rectangle, GraphicsUnit, Graphics+EnumerateMetafileProc)
  nameWithType: Graphics.EnumerateMetafile(Metafile, Point, Rectangle, GraphicsUnit, Graphics+EnumerateMetafileProc)
  fullName: Graphics.EnumerateMetafile(Metafile, Point, Rectangle, GraphicsUnit, Graphics+EnumerateMetafileProc)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Sends the records in a selected rectangle from a <xref href="System.Drawing.Imaging.Metafile"></xref>, one at a time, to a callback method for display at a specified point.
  remarks: "This method enumerates the records contained in the specified metafile. Each record is individually sent to a callback method specified by the `callback` parameter. Typically, the callback method calls the <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method to \"play back\", or draw, the record.  \n  \n If the callback method calls <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, it must do so by calling the <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method of the specific <xref:System.Drawing.Imaging.Metafile> that is being enumerated."
  example:
  - For a code example, see <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.
  syntax:
    content: public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point destPoint, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback);
    parameters:
    - id: metafile
      type: System.Drawing.Imaging.Metafile
      description: <xref href="System.Drawing.Imaging.Metafile"></xref> to enumerate.
    - id: destPoint
      type: System.Drawing.Point
      description: <xref href="System.Drawing.Point"></xref> structure that specifies the location of the upper-left corner of the drawn metafile.
    - id: srcRect
      type: System.Drawing.Rectangle
      description: <xref href="System.Drawing.Rectangle"></xref> structure that specifies the portion of the metafile, relative to its upper-left corner, to draw.
    - id: srcUnit
      type: System.Drawing.GraphicsUnit
      description: Member of the <xref href="System.Drawing.GraphicsUnit"></xref> enumeration that specifies the unit of measure used to determine the portion of the metafile that the rectangle specified by the <code>srcRect</code> parameter contains.
    - id: callback
      type: System.Drawing.Graphics+EnumerateMetafileProc
      description: <xref href="System.Drawing.Graphics.EnumerateMetafileProc"></xref> delegate that specifies the method to which the metafile records are sent.
  overload: System.Drawing.Graphics.EnumerateMetafile*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point[],System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)
  commentId: M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point[],System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)
  id: EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point[],System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: EnumerateMetafile(Metafile, Point[], Graphics+EnumerateMetafileProc, IntPtr, ImageAttributes)
  nameWithType: Graphics.EnumerateMetafile(Metafile, Point[], Graphics+EnumerateMetafileProc, IntPtr, ImageAttributes)
  fullName: Graphics.EnumerateMetafile(Metafile, Point[], Graphics+EnumerateMetafileProc, IntPtr, ImageAttributes)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Sends the records in the specified <xref href="System.Drawing.Imaging.Metafile"></xref>, one at a time, to a callback method for display in a specified parallelogram using specified image attributes.
  remarks: "This method enumerates the records contained in the specified metafile. Each record is individually sent to a callback method specified by the `callback` parameter. Typically, the callback method calls the <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method to \"play back\", or draw, the record.  \n  \n If the callback method calls<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, it must do so by calling the <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method of the specific <xref:System.Drawing.Imaging.Metafile> that is being enumerated.  \n  \n The `destPoints` parameter specifies three points of a parallelogram. The three <xref:System.Drawing.Point> structures represent the upper-left, upper-right, and lower-left corners of the parallelogram. The fourth point is extrapolated from the first three to form a parallelogram. The drawn metafile is scaled and sheared to fit the parallelogram.  \n  \n The image attributes specified by the `imageAttr` parameter replace those specified when the metafile was written."
  example:
  - For a code example, see <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.
  syntax:
    content: public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point[] destPoints, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);
    parameters:
    - id: metafile
      type: System.Drawing.Imaging.Metafile
      description: <xref href="System.Drawing.Imaging.Metafile"></xref> to enumerate.
    - id: destPoints
      type: System.Drawing.Point[]
      description: Array of three <xref href="System.Drawing.Point"></xref> structures that define a parallelogram that determines the size and location of the drawn metafile.
    - id: callback
      type: System.Drawing.Graphics+EnumerateMetafileProc
      description: <xref href="System.Drawing.Graphics.EnumerateMetafileProc"></xref> delegate that specifies the method to which the metafile records are sent.
    - id: callbackData
      type: System.IntPtr
      description: Internal pointer that is required, but ignored. You can pass <xref href="System.IntPtr.Zero"></xref> for this parameter.
    - id: imageAttr
      type: System.Drawing.Imaging.ImageAttributes
      description: <xref href="System.Drawing.Imaging.ImageAttributes"></xref> that specifies image attribute information for the drawn image.
  overload: System.Drawing.Graphics.EnumerateMetafile*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc)
  commentId: M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc)
  id: EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: EnumerateMetafile(Metafile, PointF, RectangleF, GraphicsUnit, Graphics+EnumerateMetafileProc)
  nameWithType: Graphics.EnumerateMetafile(Metafile, PointF, RectangleF, GraphicsUnit, Graphics+EnumerateMetafileProc)
  fullName: Graphics.EnumerateMetafile(Metafile, PointF, RectangleF, GraphicsUnit, Graphics+EnumerateMetafileProc)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Sends the records in a selected rectangle from a <xref href="System.Drawing.Imaging.Metafile"></xref>, one at a time, to a callback method for display at a specified point.
  remarks: "This method enumerates the records contained in the specified metafile. Each record is individually sent to a callback method specified by the `callback` parameter. Typically, the callback method calls the <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method to \"play back\", or draw, the record.  \n  \n If the callback method calls <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, it must do so by calling the <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method of the specific <xref:System.Drawing.Imaging.Metafile> that is being enumerated.  \n  \n Any drawing that takes place outside of the rectangle specified by the `srcRect` parameter is ignored."
  example:
  - For a code example, see <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.
  syntax:
    content: public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF destPoint, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback);
    parameters:
    - id: metafile
      type: System.Drawing.Imaging.Metafile
      description: <xref href="System.Drawing.Imaging.Metafile"></xref> to enumerate.
    - id: destPoint
      type: System.Drawing.PointF
      description: <xref href="System.Drawing.PointF"></xref> structure that specifies the location of the upper-left corner of the drawn metafile.
    - id: srcRect
      type: System.Drawing.RectangleF
      description: <xref href="System.Drawing.RectangleF"></xref> structure that specifies the portion of the metafile, relative to its upper-left corner, to draw.
    - id: srcUnit
      type: System.Drawing.GraphicsUnit
      description: Member of the <xref href="System.Drawing.GraphicsUnit"></xref> enumeration that specifies the unit of measure used to determine the portion of the metafile that the rectangle specified by the <code>srcRect</code> parameter contains.
    - id: callback
      type: System.Drawing.Graphics+EnumerateMetafileProc
      description: <xref href="System.Drawing.Graphics.EnumerateMetafileProc"></xref> delegate that specifies the method to which the metafile records are sent.
  overload: System.Drawing.Graphics.EnumerateMetafile*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)
  commentId: M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)
  id: EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: EnumerateMetafile(Metafile, PointF, Graphics+EnumerateMetafileProc, IntPtr)
  nameWithType: Graphics.EnumerateMetafile(Metafile, PointF, Graphics+EnumerateMetafileProc, IntPtr)
  fullName: Graphics.EnumerateMetafile(Metafile, PointF, Graphics+EnumerateMetafileProc, IntPtr)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Sends the records in the specified <xref href="System.Drawing.Imaging.Metafile"></xref>, one at a time, to a callback method for display at a specified point.
  remarks: "This method enumerates the records contained in the specified metafile. Each record is individually sent to a callback method specified by the `callback` parameter. Typically, the callback method calls the <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method to \"play back\", or draw, the record.  \n  \n If the callback method calls<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, it must do so by calling the <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method of the specific <xref:System.Drawing.Imaging.Metafile> that is being enumerated."
  example:
  - For a code example, see <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.
  syntax:
    content: public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF destPoint, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);
    parameters:
    - id: metafile
      type: System.Drawing.Imaging.Metafile
      description: <xref href="System.Drawing.Imaging.Metafile"></xref> to enumerate.
    - id: destPoint
      type: System.Drawing.PointF
      description: <xref href="System.Drawing.PointF"></xref> structure that specifies the location of the upper-left corner of the drawn metafile.
    - id: callback
      type: System.Drawing.Graphics+EnumerateMetafileProc
      description: <xref href="System.Drawing.Graphics.EnumerateMetafileProc"></xref> delegate that specifies the method to which the metafile records are sent.
    - id: callbackData
      type: System.IntPtr
      description: Internal pointer that is required, but ignored. You can pass <xref href="System.IntPtr.Zero"></xref> for this parameter.
  overload: System.Drawing.Graphics.EnumerateMetafile*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.ExcludeClip(System.Drawing.Region)
  commentId: M:System.Drawing.Graphics.ExcludeClip(System.Drawing.Region)
  id: ExcludeClip(System.Drawing.Region)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: ExcludeClip(Region)
  nameWithType: Graphics.ExcludeClip(Region)
  fullName: Graphics.ExcludeClip(Region)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Updates the clip region of this <xref href="System.Drawing.Graphics"></xref> to exclude the area specified by a <xref href="System.Drawing.Region"></xref>.
  remarks: This method excludes the area specified by the `region` parameter from the current clip region and assigns the resulting area to the <xref:System.Drawing.Graphics.Clip%2A> property of this <xref:System.Drawing.Graphics>.
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates a 100 pixel by 100 pixel rectangle whose upper-left corner is at the coordinate (100, 100).  \n  \n-   Sets the clipping region to exclude the rectangle.  \n  \n-   Fills a 300 pixel by 300 pixel rectangle whose upper-left corner is at the coordinate (0, 0) with a solid blue brush.  \n  \n The result is a blue rectangle with a square area toward its lower-right corner missing.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples2#91](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#91)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples2#91](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#91)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples2#91](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#91)]"
  syntax:
    content: public void ExcludeClip (System.Drawing.Region region);
    parameters:
    - id: region
      type: System.Drawing.Region
      description: <xref href="System.Drawing.Region"></xref> that specifies the region to exclude from the clip region.
  overload: System.Drawing.Graphics.ExcludeClip*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.ExcludeClip(System.Drawing.Rectangle)
  commentId: M:System.Drawing.Graphics.ExcludeClip(System.Drawing.Rectangle)
  id: ExcludeClip(System.Drawing.Rectangle)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: ExcludeClip(Rectangle)
  nameWithType: Graphics.ExcludeClip(Rectangle)
  fullName: Graphics.ExcludeClip(Rectangle)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Updates the clip region of this <xref href="System.Drawing.Graphics"></xref> to exclude the area specified by a <xref href="System.Drawing.Rectangle"></xref> structure.
  remarks: This method excludes the area specified by the `rect` parameter from the current clip region and assigns the resulting area to the <xref:System.Drawing.Graphics.Clip%2A> property of this <xref:System.Drawing.Graphics>.
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates a 100 pixel by 100 pixel rectangle whose upper-left corner is at the coordinate (100, 100).  \n  \n-   Creates a region defined by the rectangle.  \n  \n-   Sets the clipping region to exclude the rectangular region.  \n  \n-   Fills a 300 pixel by 300 pixel rectangle whose upper-left corner is at the coordinate (0, 0) with a solid blue brush.  \n  \n The result is a blue rectangle with a square region toward its lower-right corner missing.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples2#92](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#92)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples2#92](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#92)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples2#92](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#92)]"
  syntax:
    content: public void ExcludeClip (System.Drawing.Rectangle rect);
    parameters:
    - id: rect
      type: System.Drawing.Rectangle
      description: <xref href="System.Drawing.Rectangle"></xref> structure that specifies the rectangle to exclude from the clip region.
  overload: System.Drawing.Graphics.ExcludeClip*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.FillClosedCurve(System.Drawing.Brush,System.Drawing.Point[])
  commentId: M:System.Drawing.Graphics.FillClosedCurve(System.Drawing.Brush,System.Drawing.Point[])
  id: FillClosedCurve(System.Drawing.Brush,System.Drawing.Point[])
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: FillClosedCurve(Brush, Point[])
  nameWithType: Graphics.FillClosedCurve(Brush, Point[])
  fullName: Graphics.FillClosedCurve(Brush, Point[])
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Fills the interior of a closed cardinal spline curve defined by an array of <xref href="System.Drawing.Point"></xref> structures.
  remarks: "This method fills the interior of a closed cardinal spline that passes through each point in the array. If the last point does not match the first point, an additional curve segment is added from the last point to the first point to close it.  \n  \n The array of points must contain at least four <xref:System.Drawing.Point> structures.  \n  \n This method uses a default tension of 0.5."
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates a solid red brush.  \n  \n-   Creates an array of four points to define a spline.  \n  \n-   Fills the curve on the screen.  \n  \n The curve has a default tension of 0.5.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples2#93](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#93)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples2#93](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#93)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples2#93](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#93)]"
  syntax:
    content: public void FillClosedCurve (System.Drawing.Brush brush, System.Drawing.Point[] points);
    parameters:
    - id: brush
      type: System.Drawing.Brush
      description: <xref href="System.Drawing.Brush"></xref> that determines the characteristics of the fill.
    - id: points
      type: System.Drawing.Point[]
      description: Array of <xref href="System.Drawing.Point"></xref> structures that define the spline.
  overload: System.Drawing.Graphics.FillClosedCurve*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>brush</code> is `null`.  \n  \n -or-  \n  \n <code>points</code> is `null`."
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.FillClosedCurve(System.Drawing.Brush,System.Drawing.PointF[])
  commentId: M:System.Drawing.Graphics.FillClosedCurve(System.Drawing.Brush,System.Drawing.PointF[])
  id: FillClosedCurve(System.Drawing.Brush,System.Drawing.PointF[])
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: FillClosedCurve(Brush, PointF[])
  nameWithType: Graphics.FillClosedCurve(Brush, PointF[])
  fullName: Graphics.FillClosedCurve(Brush, PointF[])
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Fills the interior of a closed cardinal spline curve defined by an array of <xref href="System.Drawing.PointF"></xref> structures.
  remarks: "This method fills the interior of a closed cardinal spline that passes through each point in the array. If the last point does not match the first point, an additional curve segment is added from the last point to the first point to close it.  \n  \n The array of points must contain at least four <xref:System.Drawing.PointF> structures.  \n  \n This method uses a default tension of 0.5."
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates a solid red brush.  \n  \n-   Creates an array of four points to define a spline.  \n  \n-   Fills the curve on the screen.  \n  \n The curve has a default tension of 0.5.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples2#96](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#96)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples2#96](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#96)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples2#96](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#96)]"
  syntax:
    content: public void FillClosedCurve (System.Drawing.Brush brush, System.Drawing.PointF[] points);
    parameters:
    - id: brush
      type: System.Drawing.Brush
      description: <xref href="System.Drawing.Brush"></xref> that determines the characteristics of the fill.
    - id: points
      type: System.Drawing.PointF[]
      description: Array of <xref href="System.Drawing.PointF"></xref> structures that define the spline.
  overload: System.Drawing.Graphics.FillClosedCurve*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>brush</code> is `null`.  \n  \n -or-  \n  \n <code>points</code> is `null`."
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.FillClosedCurve(System.Drawing.Brush,System.Drawing.Point[],System.Drawing.Drawing2D.FillMode)
  commentId: M:System.Drawing.Graphics.FillClosedCurve(System.Drawing.Brush,System.Drawing.Point[],System.Drawing.Drawing2D.FillMode)
  id: FillClosedCurve(System.Drawing.Brush,System.Drawing.Point[],System.Drawing.Drawing2D.FillMode)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: FillClosedCurve(Brush, Point[], FillMode)
  nameWithType: Graphics.FillClosedCurve(Brush, Point[], FillMode)
  fullName: Graphics.FillClosedCurve(Brush, Point[], FillMode)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Fills the interior of a closed cardinal spline curve defined by an array of <xref href="System.Drawing.Point"></xref> structures using the specified fill mode.
  remarks: "This method fills the interior of a closed cardinal spline that passes through each point in the array. If the last point does not match the first point, an additional curve segment is added from the last point to the first point to close it.  \n  \n The array of points must contain at least four <xref:System.Drawing.Point> structures.  \n  \n This method uses a default tension of 0.5."
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates a solid red brush.  \n  \n-   Creates an array of four points to define a spline.  \n  \n-   Sets the fill mode to <xref:System.Drawing.Drawing2D.FillMode.Winding>.  \n  \n-   Fills the curve on the screen.  \n  \n The curve has a default tension of 0.5.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples2#94](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#94)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples2#94](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#94)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples2#94](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#94)]"
  syntax:
    content: public void FillClosedCurve (System.Drawing.Brush brush, System.Drawing.Point[] points, System.Drawing.Drawing2D.FillMode fillmode);
    parameters:
    - id: brush
      type: System.Drawing.Brush
      description: <xref href="System.Drawing.Brush"></xref> that determines the characteristics of the fill.
    - id: points
      type: System.Drawing.Point[]
      description: Array of <xref href="System.Drawing.Point"></xref> structures that define the spline.
    - id: fillmode
      type: System.Drawing.Drawing2D.FillMode
      description: Member of the <xref href="System.Drawing.Drawing2D.FillMode"></xref> enumeration that determines how the curve is filled.
  overload: System.Drawing.Graphics.FillClosedCurve*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>brush</code> is `null`.  \n  \n -or-  \n  \n <code>points</code> is `null`."
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.FillClosedCurve(System.Drawing.Brush,System.Drawing.PointF[],System.Drawing.Drawing2D.FillMode)
  commentId: M:System.Drawing.Graphics.FillClosedCurve(System.Drawing.Brush,System.Drawing.PointF[],System.Drawing.Drawing2D.FillMode)
  id: FillClosedCurve(System.Drawing.Brush,System.Drawing.PointF[],System.Drawing.Drawing2D.FillMode)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: FillClosedCurve(Brush, PointF[], FillMode)
  nameWithType: Graphics.FillClosedCurve(Brush, PointF[], FillMode)
  fullName: Graphics.FillClosedCurve(Brush, PointF[], FillMode)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Fills the interior of a closed cardinal spline curve defined by an array of <xref href="System.Drawing.PointF"></xref> structures using the specified fill mode.
  remarks: "This method fills the interior of a closed cardinal spline that passes through each point in the array. If the last point does not match the first point, an additional curve segment is added from the last point to the first point to close it.  \n  \n The array of points must contain at least four <xref:System.Drawing.Point> structures.  \n  \n This method uses a default tension of 0.5."
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates a solid red brush.  \n  \n-   Creates an array of four points to define a spline.  \n  \n-   Sets the fill mode to <xref:System.Drawing.Drawing2D.FillMode.Winding>.  \n  \n-   Fills the curve on the screen.  \n  \n The curve has a default tension of 0.5.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples2#97](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#97)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples2#97](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#97)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples2#97](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#97)]"
  syntax:
    content: public void FillClosedCurve (System.Drawing.Brush brush, System.Drawing.PointF[] points, System.Drawing.Drawing2D.FillMode fillmode);
    parameters:
    - id: brush
      type: System.Drawing.Brush
      description: <xref href="System.Drawing.Brush"></xref> that determines the characteristics of the fill.
    - id: points
      type: System.Drawing.PointF[]
      description: Array of <xref href="System.Drawing.PointF"></xref> structures that define the spline.
    - id: fillmode
      type: System.Drawing.Drawing2D.FillMode
      description: Member of the <xref href="System.Drawing.Drawing2D.FillMode"></xref> enumeration that determines how the curve is filled.
  overload: System.Drawing.Graphics.FillClosedCurve*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>brush</code> is `null`.  \n  \n -or-  \n  \n <code>points</code> is `null`."
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.FillClosedCurve(System.Drawing.Brush,System.Drawing.Point[],System.Drawing.Drawing2D.FillMode,System.Single)
  commentId: M:System.Drawing.Graphics.FillClosedCurve(System.Drawing.Brush,System.Drawing.Point[],System.Drawing.Drawing2D.FillMode,System.Single)
  id: FillClosedCurve(System.Drawing.Brush,System.Drawing.Point[],System.Drawing.Drawing2D.FillMode,System.Single)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: FillClosedCurve(Brush, Point[], FillMode, Single)
  nameWithType: Graphics.FillClosedCurve(Brush, Point[], FillMode, Single)
  fullName: Graphics.FillClosedCurve(Brush, Point[], FillMode, Single)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Fills the interior of a closed cardinal spline curve defined by an array of <xref href="System.Drawing.Point"></xref> structures using the specified fill mode and tension.
  remarks: "This method fills the interior of a closed cardinal spline that passes through each point in the array. If the last point does not match the first point, an additional curve segment is added from the last point to the first point to close it.  \n  \n The array of points must contain at least four <xref:System.Drawing.Point> structures.  \n  \n The `tension` parameter determines the shape of the spline. If the value of the `tension` parameter is 0.0F, this method draws straight line segments to connect the points. Usually, the `tension` parameter is less than or equal to 1.0F. Values over 1.0F produce unusual results."
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates a solid red brush.  \n  \n-   Creates an array of four points to define a spline.  \n  \n-   Sets the fill mode to <xref:System.Drawing.Drawing2D.FillMode.Winding>.  \n  \n-   Sets the tension to 1.0.  \n  \n-   Fills the curve on the screen.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples2#95](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#95)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples2#95](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#95)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples2#95](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#95)]"
  syntax:
    content: public void FillClosedCurve (System.Drawing.Brush brush, System.Drawing.Point[] points, System.Drawing.Drawing2D.FillMode fillmode, float tension);
    parameters:
    - id: brush
      type: System.Drawing.Brush
      description: <xref href="System.Drawing.Brush"></xref> that determines the characteristics of the fill.
    - id: points
      type: System.Drawing.Point[]
      description: Array of <xref href="System.Drawing.Point"></xref> structures that define the spline.
    - id: fillmode
      type: System.Drawing.Drawing2D.FillMode
      description: Member of the <xref href="System.Drawing.Drawing2D.FillMode"></xref> enumeration that determines how the curve is filled.
    - id: tension
      type: System.Single
      description: Value greater than or equal to 0.0F that specifies the tension of the curve.
  overload: System.Drawing.Graphics.FillClosedCurve*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>brush</code> is `null`.  \n  \n -or-  \n  \n <code>points</code> is `null`."
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.FillClosedCurve(System.Drawing.Brush,System.Drawing.PointF[],System.Drawing.Drawing2D.FillMode,System.Single)
  commentId: M:System.Drawing.Graphics.FillClosedCurve(System.Drawing.Brush,System.Drawing.PointF[],System.Drawing.Drawing2D.FillMode,System.Single)
  id: FillClosedCurve(System.Drawing.Brush,System.Drawing.PointF[],System.Drawing.Drawing2D.FillMode,System.Single)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: FillClosedCurve(Brush, PointF[], FillMode, Single)
  nameWithType: Graphics.FillClosedCurve(Brush, PointF[], FillMode, Single)
  fullName: Graphics.FillClosedCurve(Brush, PointF[], FillMode, Single)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Fills the interior of a closed cardinal spline curve defined by an array of <xref href="System.Drawing.PointF"></xref> structures using the specified fill mode and tension.
  remarks: "This method fills the interior of a closed cardinal spline that passes through each point in the array. If the last point does not match the first point, an additional curve segment is added from the last point to the first point to close it.  \n  \n The array of points must contain at least four <xref:System.Drawing.Point> structures.  \n  \n The `tension` parameter determines the shape of the spline. If the value of the `tension` parameter is 0.0F, this method draws straight line segments to connect the points. Usually, the `tension` parameter is less than or equal to 1.0F. Values over 1.0F produce unusual results."
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates a solid red brush.  \n  \n-   Creates an array of four points to define a spline.  \n  \n-   Sets the fill mode to <xref:System.Drawing.Drawing2D.FillMode.Winding>.  \n  \n-   Sets the tension to 1.0.  \n  \n-   Fills the curve on the screen.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples2#98](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#98)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples2#98](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#98)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples2#98](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#98)]"
  syntax:
    content: public void FillClosedCurve (System.Drawing.Brush brush, System.Drawing.PointF[] points, System.Drawing.Drawing2D.FillMode fillmode, float tension);
    parameters:
    - id: brush
      type: System.Drawing.Brush
      description: A <xref href="System.Drawing.Brush"></xref> that determines the characteristics of the fill.
    - id: points
      type: System.Drawing.PointF[]
      description: Array of <xref href="System.Drawing.PointF"></xref> structures that define the spline.
    - id: fillmode
      type: System.Drawing.Drawing2D.FillMode
      description: Member of the <xref href="System.Drawing.Drawing2D.FillMode"></xref> enumeration that determines how the curve is filled.
    - id: tension
      type: System.Single
      description: Value greater than or equal to 0.0F that specifies the tension of the curve.
  overload: System.Drawing.Graphics.FillClosedCurve*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>brush</code> is `null`.  \n  \n -or-  \n  \n <code>points</code> is `null`."
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.FillEllipse(System.Drawing.Brush,System.Int32,System.Int32,System.Int32,System.Int32)
  commentId: M:System.Drawing.Graphics.FillEllipse(System.Drawing.Brush,System.Int32,System.Int32,System.Int32,System.Int32)
  id: FillEllipse(System.Drawing.Brush,System.Int32,System.Int32,System.Int32,System.Int32)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: FillEllipse(Brush, Int32, Int32, Int32, Int32)
  nameWithType: Graphics.FillEllipse(Brush, Int32, Int32, Int32, Int32)
  fullName: Graphics.FillEllipse(Brush, Int32, Int32, Int32, Int32)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Fills the interior of an ellipse defined by a bounding rectangle specified by a pair of coordinates, a width, and a height.
  remarks: This method fills the interior of an ellipse with a <xref:System.Drawing.Brush>. The ellipse is defined by the bounding rectangle represented by the `x`, `y`, `width`, and `height` parameters.
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates a solid red brush.  \n  \n-   Creates the location and size of a rectangle that bounds an ellipse.  \n  \n-   Fills the ellipse on the screen.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples2#101](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#101)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples2#101](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#101)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples2#101](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#101)]"
  syntax:
    content: public void FillEllipse (System.Drawing.Brush brush, int x, int y, int width, int height);
    parameters:
    - id: brush
      type: System.Drawing.Brush
      description: <xref href="System.Drawing.Brush"></xref> that determines the characteristics of the fill.
    - id: x
      type: System.Int32
      description: The x-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse.
    - id: y
      type: System.Int32
      description: The y-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse.
    - id: width
      type: System.Int32
      description: Width of the bounding rectangle that defines the ellipse.
    - id: height
      type: System.Int32
      description: Height of the bounding rectangle that defines the ellipse.
  overload: System.Drawing.Graphics.FillEllipse*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>brush</code> is `null`.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.FillEllipse(System.Drawing.Brush,System.Single,System.Single,System.Single,System.Single)
  commentId: M:System.Drawing.Graphics.FillEllipse(System.Drawing.Brush,System.Single,System.Single,System.Single,System.Single)
  id: FillEllipse(System.Drawing.Brush,System.Single,System.Single,System.Single,System.Single)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: FillEllipse(Brush, Single, Single, Single, Single)
  nameWithType: Graphics.FillEllipse(Brush, Single, Single, Single, Single)
  fullName: Graphics.FillEllipse(Brush, Single, Single, Single, Single)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Fills the interior of an ellipse defined by a bounding rectangle specified by a pair of coordinates, a width, and a height.
  remarks: This method fills the interior of an ellipse with a <xref:System.Drawing.Brush>. The ellipse is defined by the bounding rectangle represented by the `x`, `y`, `width`, and `height` parameters.
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates a solid red brush.  \n  \n-   Creates the location and size of a rectangle that bounds an ellipse.  \n  \n-   Fills the ellipse on the screen.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples2#102](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#102)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples2#102](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#102)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples2#102](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#102)]"
  syntax:
    content: public void FillEllipse (System.Drawing.Brush brush, float x, float y, float width, float height);
    parameters:
    - id: brush
      type: System.Drawing.Brush
      description: <xref href="System.Drawing.Brush"></xref> that determines the characteristics of the fill.
    - id: x
      type: System.Single
      description: The x-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse.
    - id: y
      type: System.Single
      description: The y-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse.
    - id: width
      type: System.Single
      description: Width of the bounding rectangle that defines the ellipse.
    - id: height
      type: System.Single
      description: Height of the bounding rectangle that defines the ellipse.
  overload: System.Drawing.Graphics.FillEllipse*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>brush</code> is `null`.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.FillEllipse(System.Drawing.Brush,System.Drawing.Rectangle)
  commentId: M:System.Drawing.Graphics.FillEllipse(System.Drawing.Brush,System.Drawing.Rectangle)
  id: FillEllipse(System.Drawing.Brush,System.Drawing.Rectangle)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: FillEllipse(Brush, Rectangle)
  nameWithType: Graphics.FillEllipse(Brush, Rectangle)
  fullName: Graphics.FillEllipse(Brush, Rectangle)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Fills the interior of an ellipse defined by a bounding rectangle specified by a <xref href="System.Drawing.Rectangle"></xref> structure.
  remarks: This method fills the interior of an ellipse with a <xref:System.Drawing.Brush>. The ellipse is defined by the bounding rectangle represented by the `rect` parameter.
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates a solid red brush.  \n  \n-   Creates a rectangle that bounds an ellipse.  \n  \n-   Fills the ellipse on the screen.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples2#99](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#99)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples2#99](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#99)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples2#99](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#99)]"
  syntax:
    content: public void FillEllipse (System.Drawing.Brush brush, System.Drawing.Rectangle rect);
    parameters:
    - id: brush
      type: System.Drawing.Brush
      description: <xref href="System.Drawing.Brush"></xref> that determines the characteristics of the fill.
    - id: rect
      type: System.Drawing.Rectangle
      description: <xref href="System.Drawing.Rectangle"></xref> structure that represents the bounding rectangle that defines the ellipse.
  overload: System.Drawing.Graphics.FillEllipse*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>brush</code> is `null`.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.FillEllipse(System.Drawing.Brush,System.Drawing.RectangleF)
  commentId: M:System.Drawing.Graphics.FillEllipse(System.Drawing.Brush,System.Drawing.RectangleF)
  id: FillEllipse(System.Drawing.Brush,System.Drawing.RectangleF)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: FillEllipse(Brush, RectangleF)
  nameWithType: Graphics.FillEllipse(Brush, RectangleF)
  fullName: Graphics.FillEllipse(Brush, RectangleF)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Fills the interior of an ellipse defined by a bounding rectangle specified by a <xref href="System.Drawing.RectangleF"></xref> structure.
  remarks: This method fills the interior of an ellipse with a <xref:System.Drawing.Brush>. The ellipse is defined by the bounding rectangle represented by the `rect` parameter.
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates a solid red brush.  \n  \n-   Creates a rectangle that bounds an ellipse.  \n  \n-   Fills the ellipse on the screen.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples2#100](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#100)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples2#100](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#100)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples2#100](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#100)]"
  syntax:
    content: public void FillEllipse (System.Drawing.Brush brush, System.Drawing.RectangleF rect);
    parameters:
    - id: brush
      type: System.Drawing.Brush
      description: <xref href="System.Drawing.Brush"></xref> that determines the characteristics of the fill.
    - id: rect
      type: System.Drawing.RectangleF
      description: <xref href="System.Drawing.RectangleF"></xref> structure that represents the bounding rectangle that defines the ellipse.
  overload: System.Drawing.Graphics.FillEllipse*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>brush</code> is `null`.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.FillPath(System.Drawing.Brush,System.Drawing.Drawing2D.GraphicsPath)
  commentId: M:System.Drawing.Graphics.FillPath(System.Drawing.Brush,System.Drawing.Drawing2D.GraphicsPath)
  id: FillPath(System.Drawing.Brush,System.Drawing.Drawing2D.GraphicsPath)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: FillPath(Brush, GraphicsPath)
  nameWithType: Graphics.FillPath(Brush, GraphicsPath)
  fullName: Graphics.FillPath(Brush, GraphicsPath)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Fills the interior of a <xref href="System.Drawing.Drawing2D.GraphicsPath"></xref>.
  remarks: A <xref:System.Drawing.Drawing2D.GraphicsPath> consists of a series of line and curve segments. If the path represented by the `path` parameter is not closed, an additional segment is added from the last point to the first point to close the path.
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates a solid red brush.  \n  \n-   Creates a graphics path object.  \n  \n-   Adds an ellipse to the graphics path.  \n  \n-   Fills the path on the screen.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples2#103](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#103)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples2#103](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#103)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples2#103](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#103)]"
  syntax:
    content: public void FillPath (System.Drawing.Brush brush, System.Drawing.Drawing2D.GraphicsPath path);
    parameters:
    - id: brush
      type: System.Drawing.Brush
      description: <xref href="System.Drawing.Brush"></xref> that determines the characteristics of the fill.
    - id: path
      type: System.Drawing.Drawing2D.GraphicsPath
      description: <xref href="System.Drawing.Drawing2D.GraphicsPath"></xref> that represents the path to fill.
  overload: System.Drawing.Graphics.FillPath*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>brush</code> is `null`.  \n  \n -or-  \n  \n <code>path</code> is `null`."
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.FillPie(System.Drawing.Brush,System.Drawing.Rectangle,System.Single,System.Single)
  commentId: M:System.Drawing.Graphics.FillPie(System.Drawing.Brush,System.Drawing.Rectangle,System.Single,System.Single)
  id: FillPie(System.Drawing.Brush,System.Drawing.Rectangle,System.Single,System.Single)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: FillPie(Brush, Rectangle, Single, Single)
  nameWithType: Graphics.FillPie(Brush, Rectangle, Single, Single)
  fullName: Graphics.FillPie(Brush, Rectangle, Single, Single)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Fills the interior of a pie section defined by an ellipse specified by a <xref href="System.Drawing.RectangleF"></xref> structure and two radial lines.
  remarks: "This method fills the interior of a pie section defined by an arc of an ellipse and the two radial lines that intersect with the endpoints of the arc. The ellipse is defined by the bounding rectangle. The pie section consists of the two radial lines defined by the `startAngle` and `sweepAngle` parameters and the arc between the intersections of those radial lines with the ellipse.  \n  \n If the `sweepAngle` parameter is greater than 360 degrees or less than -360 degrees, it is treated as if it were 360 degrees or -360 degrees, respectively."
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates a solid red brush.  \n  \n-   Creates a rectangle that bounds an ellipse.  \n  \n-   Defines the start angle (relative to the x axis) and the sweep angle (both in a clockwise direction).  \n  \n-   Fills the pie-shaped area of the ellipse on the screen.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples2#104](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#104)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples2#104](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#104)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples2#104](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#104)]"
  syntax:
    content: public void FillPie (System.Drawing.Brush brush, System.Drawing.Rectangle rect, float startAngle, float sweepAngle);
    parameters:
    - id: brush
      type: System.Drawing.Brush
      description: <xref href="System.Drawing.Brush"></xref> that determines the characteristics of the fill.
    - id: rect
      type: System.Drawing.Rectangle
      description: <xref href="System.Drawing.Rectangle"></xref> structure that represents the bounding rectangle that defines the ellipse from which the pie section comes.
    - id: startAngle
      type: System.Single
      description: Angle in degrees measured clockwise from the x-axis to the first side of the pie section.
    - id: sweepAngle
      type: System.Single
      description: Angle in degrees measured clockwise from the <code>startAngle</code> parameter to the second side of the pie section.
  overload: System.Drawing.Graphics.FillPie*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>brush</code> is `null`.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.FillPie(System.Drawing.Brush,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  commentId: M:System.Drawing.Graphics.FillPie(System.Drawing.Brush,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  id: FillPie(System.Drawing.Brush,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: FillPie(Brush, Int32, Int32, Int32, Int32, Int32, Int32)
  nameWithType: Graphics.FillPie(Brush, Int32, Int32, Int32, Int32, Int32, Int32)
  fullName: Graphics.FillPie(Brush, Int32, Int32, Int32, Int32, Int32, Int32)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Fills the interior of a pie section defined by an ellipse specified by a pair of coordinates, a width, a height, and two radial lines.
  remarks: "This method fills the interior of a pie section defined by an arc of an ellipse and the two radial lines that intersect with the endpoints of the arc. The ellipse is defined by the bounding rectangle. The pie section consists of the two radial lines defined by the `startAngle` and `sweepAngle` parameters and the arc between the intersections of those radial lines with the ellipse.  \n  \n If the `sweepAngle` parameter is greater than 360 degrees or less than -360 degrees, it is treated as if it were 360 degrees or -360 degrees, respectively."
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates a solid red brush.  \n  \n-   Creates the location and size of a rectangle that bounds an ellipse.  \n  \n-   Defines the start angle (relative to the x axis) and the sweep angle (both in a clockwise direction).  \n  \n-   Fills the pie-shaped area of the ellipse on the screen.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples2#105](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#105)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples2#105](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#105)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples2#105](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#105)]"
  syntax:
    content: public void FillPie (System.Drawing.Brush brush, int x, int y, int width, int height, int startAngle, int sweepAngle);
    parameters:
    - id: brush
      type: System.Drawing.Brush
      description: <xref href="System.Drawing.Brush"></xref> that determines the characteristics of the fill.
    - id: x
      type: System.Int32
      description: The x-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse from which the pie section comes.
    - id: y
      type: System.Int32
      description: The y-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse from which the pie section comes.
    - id: width
      type: System.Int32
      description: Width of the bounding rectangle that defines the ellipse from which the pie section comes.
    - id: height
      type: System.Int32
      description: Height of the bounding rectangle that defines the ellipse from which the pie section comes.
    - id: startAngle
      type: System.Int32
      description: Angle in degrees measured clockwise from the x-axis to the first side of the pie section.
    - id: sweepAngle
      type: System.Int32
      description: Angle in degrees measured clockwise from the <code>startAngle</code> parameter to the second side of the pie section.
  overload: System.Drawing.Graphics.FillPie*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>brush</code> is `null`.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.FillPie(System.Drawing.Brush,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)
  commentId: M:System.Drawing.Graphics.FillPie(System.Drawing.Brush,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)
  id: FillPie(System.Drawing.Brush,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: FillPie(Brush, Single, Single, Single, Single, Single, Single)
  nameWithType: Graphics.FillPie(Brush, Single, Single, Single, Single, Single, Single)
  fullName: Graphics.FillPie(Brush, Single, Single, Single, Single, Single, Single)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Fills the interior of a pie section defined by an ellipse specified by a pair of coordinates, a width, a height, and two radial lines.
  remarks: "This method fills the interior of a pie section defined by an arc of an ellipse and the two radial lines that intersect with the endpoints of the arc. The ellipse is defined by the bounding rectangle. The pie section consists of the two radial lines defined by the `startAngle` and `sweepAngle` parameters, and the arc between the intersections of those radial lines with the ellipse.  \n  \n If the `sweepAngle` parameter is greater than 360 degrees or less than -360 degrees, it is treated as if it were 360 degrees or -360 degrees, respectively."
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates a solid red brush.  \n  \n-   Creates the location and size of a rectangle that bounds an ellipse.  \n  \n-   Defines the start angle (relative to the x axis) and the sweep angle (both in a clockwise direction).  \n  \n-   Fills the pie-shaped area of the ellipse on the screen.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples2#106](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#106)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples2#106](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#106)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples2#106](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#106)]"
  syntax:
    content: public void FillPie (System.Drawing.Brush brush, float x, float y, float width, float height, float startAngle, float sweepAngle);
    parameters:
    - id: brush
      type: System.Drawing.Brush
      description: <xref href="System.Drawing.Brush"></xref> that determines the characteristics of the fill.
    - id: x
      type: System.Single
      description: The x-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse from which the pie section comes.
    - id: y
      type: System.Single
      description: The y-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse from which the pie section comes.
    - id: width
      type: System.Single
      description: Width of the bounding rectangle that defines the ellipse from which the pie section comes.
    - id: height
      type: System.Single
      description: Height of the bounding rectangle that defines the ellipse from which the pie section comes.
    - id: startAngle
      type: System.Single
      description: Angle in degrees measured clockwise from the x-axis to the first side of the pie section.
    - id: sweepAngle
      type: System.Single
      description: Angle in degrees measured clockwise from the <code>startAngle</code> parameter to the second side of the pie section.
  overload: System.Drawing.Graphics.FillPie*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>brush</code> is `null`.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.FillPolygon(System.Drawing.Brush,System.Drawing.Point[])
  commentId: M:System.Drawing.Graphics.FillPolygon(System.Drawing.Brush,System.Drawing.Point[])
  id: FillPolygon(System.Drawing.Brush,System.Drawing.Point[])
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: FillPolygon(Brush, Point[])
  nameWithType: Graphics.FillPolygon(Brush, Point[])
  fullName: Graphics.FillPolygon(Brush, Point[])
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Fills the interior of a polygon defined by an array of points specified by <xref href="System.Drawing.Point"></xref> structures.
  remarks: Every two consecutive points in the array specify a side of the polygon. In addition, if the last point and the first point do not coincide, they specify the closing side of the polygon.
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates a solid blue brush.  \n  \n-   Creates an array of seven points to define a polygon.  \n  \n-   Fills the polygonal area on the screen.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples2#107](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#107)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples2#107](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#107)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples2#107](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#107)]"
  syntax:
    content: public void FillPolygon (System.Drawing.Brush brush, System.Drawing.Point[] points);
    parameters:
    - id: brush
      type: System.Drawing.Brush
      description: <xref href="System.Drawing.Brush"></xref> that determines the characteristics of the fill.
    - id: points
      type: System.Drawing.Point[]
      description: Array of <xref href="System.Drawing.Point"></xref> structures that represent the vertices of the polygon to fill.
  overload: System.Drawing.Graphics.FillPolygon*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>brush</code> is `null`.  \n  \n -or-  \n  \n <code>points</code> is `null`."
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.FillPolygon(System.Drawing.Brush,System.Drawing.PointF[])
  commentId: M:System.Drawing.Graphics.FillPolygon(System.Drawing.Brush,System.Drawing.PointF[])
  id: FillPolygon(System.Drawing.Brush,System.Drawing.PointF[])
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: FillPolygon(Brush, PointF[])
  nameWithType: Graphics.FillPolygon(Brush, PointF[])
  fullName: Graphics.FillPolygon(Brush, PointF[])
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Fills the interior of a polygon defined by an array of points specified by <xref href="System.Drawing.PointF"></xref> structures.
  remarks: Every two consecutive points in the array specify a side of the polygon. In addition, if the last point and the first point do not coincide, they specify the closing side of the polygon.
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates a solid blue brush.  \n  \n-   Creates an array of seven points to define a polygon.  \n  \n-   Fills the polygonal area on the screen.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples2#109](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#109)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples2#109](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#109)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples2#109](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#109)]"
  syntax:
    content: public void FillPolygon (System.Drawing.Brush brush, System.Drawing.PointF[] points);
    parameters:
    - id: brush
      type: System.Drawing.Brush
      description: <xref href="System.Drawing.Brush"></xref> that determines the characteristics of the fill.
    - id: points
      type: System.Drawing.PointF[]
      description: Array of <xref href="System.Drawing.PointF"></xref> structures that represent the vertices of the polygon to fill.
  overload: System.Drawing.Graphics.FillPolygon*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>brush</code> is `null`.  \n  \n -or-  \n  \n <code>points</code> is `null`."
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.FillPolygon(System.Drawing.Brush,System.Drawing.Point[],System.Drawing.Drawing2D.FillMode)
  commentId: M:System.Drawing.Graphics.FillPolygon(System.Drawing.Brush,System.Drawing.Point[],System.Drawing.Drawing2D.FillMode)
  id: FillPolygon(System.Drawing.Brush,System.Drawing.Point[],System.Drawing.Drawing2D.FillMode)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: FillPolygon(Brush, Point[], FillMode)
  nameWithType: Graphics.FillPolygon(Brush, Point[], FillMode)
  fullName: Graphics.FillPolygon(Brush, Point[], FillMode)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Fills the interior of a polygon defined by an array of points specified by <xref href="System.Drawing.Point"></xref> structures using the specified fill mode.
  remarks: Every two consecutive points in the array specify a side of the polygon. In addition, if the last point and the first point do not coincide, they specify the closing side of the polygon.
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates a solid blue brush.  \n  \n-   Creates an array of seven points to define a polygon.  \n  \n-   Sets the fill mode to <xref:System.Drawing.Drawing2D.FillMode.Winding>.  \n  \n-   Fills the polygonal area on the screen.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples2#108](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#108)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples2#108](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#108)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples2#108](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#108)]"
  syntax:
    content: public void FillPolygon (System.Drawing.Brush brush, System.Drawing.Point[] points, System.Drawing.Drawing2D.FillMode fillMode);
    parameters:
    - id: brush
      type: System.Drawing.Brush
      description: <xref href="System.Drawing.Brush"></xref> that determines the characteristics of the fill.
    - id: points
      type: System.Drawing.Point[]
      description: Array of <xref href="System.Drawing.Point"></xref> structures that represent the vertices of the polygon to fill.
    - id: fillMode
      type: System.Drawing.Drawing2D.FillMode
      description: Member of the <xref href="System.Drawing.Drawing2D.FillMode"></xref> enumeration that determines the style of the fill.
  overload: System.Drawing.Graphics.FillPolygon*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>brush</code> is `null`.  \n  \n -or-  \n  \n <code>points</code> is `null`."
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.FillPolygon(System.Drawing.Brush,System.Drawing.PointF[],System.Drawing.Drawing2D.FillMode)
  commentId: M:System.Drawing.Graphics.FillPolygon(System.Drawing.Brush,System.Drawing.PointF[],System.Drawing.Drawing2D.FillMode)
  id: FillPolygon(System.Drawing.Brush,System.Drawing.PointF[],System.Drawing.Drawing2D.FillMode)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: FillPolygon(Brush, PointF[], FillMode)
  nameWithType: Graphics.FillPolygon(Brush, PointF[], FillMode)
  fullName: Graphics.FillPolygon(Brush, PointF[], FillMode)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Fills the interior of a polygon defined by an array of points specified by <xref href="System.Drawing.PointF"></xref> structures using the specified fill mode.
  remarks: Every two consecutive points in the array specify a side of the polygon. In addition, if the last point and the first point do not coincide, they specify the closing side of the polygon.
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following action:  \n  \n-   Creates a solid blue brush.  \n  \n-   Creates an array of seven points to define a polygon.  \n  \n-   Sets the fill mode to <xref:System.Drawing.Drawing2D.FillMode.Winding>.  \n  \n-   Fills the polygonal area on the screen.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples2#110](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#110)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples2#110](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#110)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples2#110](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#110)]"
  syntax:
    content: public void FillPolygon (System.Drawing.Brush brush, System.Drawing.PointF[] points, System.Drawing.Drawing2D.FillMode fillMode);
    parameters:
    - id: brush
      type: System.Drawing.Brush
      description: <xref href="System.Drawing.Brush"></xref> that determines the characteristics of the fill.
    - id: points
      type: System.Drawing.PointF[]
      description: Array of <xref href="System.Drawing.PointF"></xref> structures that represent the vertices of the polygon to fill.
    - id: fillMode
      type: System.Drawing.Drawing2D.FillMode
      description: Member of the <xref href="System.Drawing.Drawing2D.FillMode"></xref> enumeration that determines the style of the fill.
  overload: System.Drawing.Graphics.FillPolygon*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>brush</code> is `null`.  \n  \n -or-  \n  \n <code>points</code> is `null`."
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.FillRectangle(System.Drawing.Brush,System.Drawing.Rectangle)
  commentId: M:System.Drawing.Graphics.FillRectangle(System.Drawing.Brush,System.Drawing.Rectangle)
  id: FillRectangle(System.Drawing.Brush,System.Drawing.Rectangle)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: FillRectangle(Brush, Rectangle)
  nameWithType: Graphics.FillRectangle(Brush, Rectangle)
  fullName: Graphics.FillRectangle(Brush, Rectangle)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Fills the interior of a rectangle specified by a <xref href="System.Drawing.Rectangle"></xref> structure.
  remarks: This method fills the interior of the rectangle defined by the `rect` parameter, including the specified upper-left corner and up to the calculated lower and bottom edges.
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following action:  \n  \n-   Creates a solid blue brush.  \n  \n-   Creates a rectangle.  \n  \n-   Fills the rectangular area on the screen.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples3#111](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#111)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples3#111](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#111)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples3#111](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#111)]"
  syntax:
    content: public void FillRectangle (System.Drawing.Brush brush, System.Drawing.Rectangle rect);
    parameters:
    - id: brush
      type: System.Drawing.Brush
      description: <xref href="System.Drawing.Brush"></xref> that determines the characteristics of the fill.
    - id: rect
      type: System.Drawing.Rectangle
      description: <xref href="System.Drawing.Rectangle"></xref> structure that represents the rectangle to fill.
  overload: System.Drawing.Graphics.FillRectangle*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>brush</code> is `null`.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.FillRectangle(System.Drawing.Brush,System.Drawing.RectangleF)
  commentId: M:System.Drawing.Graphics.FillRectangle(System.Drawing.Brush,System.Drawing.RectangleF)
  id: FillRectangle(System.Drawing.Brush,System.Drawing.RectangleF)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: FillRectangle(Brush, RectangleF)
  nameWithType: Graphics.FillRectangle(Brush, RectangleF)
  fullName: Graphics.FillRectangle(Brush, RectangleF)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Fills the interior of a rectangle specified by a <xref href="System.Drawing.RectangleF"></xref> structure.
  remarks: This method fills the interior of the rectangle defined by the `rect` parameter, including the specified upper-left corner and up to the calculated lower and bottom edges.
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following action:  \n  \n-   Creates a solid blue brush.  \n  \n-   Creates a rectangle.  \n  \n-   Fills the rectangular area on the screen.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples3#112](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#112)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples3#112](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#112)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples3#112](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#112)]"
  syntax:
    content: public void FillRectangle (System.Drawing.Brush brush, System.Drawing.RectangleF rect);
    parameters:
    - id: brush
      type: System.Drawing.Brush
      description: <xref href="System.Drawing.Brush"></xref> that determines the characteristics of the fill.
    - id: rect
      type: System.Drawing.RectangleF
      description: <xref href="System.Drawing.RectangleF"></xref> structure that represents the rectangle to fill.
  overload: System.Drawing.Graphics.FillRectangle*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>brush</code> is `null`.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.FillRectangle(System.Drawing.Brush,System.Int32,System.Int32,System.Int32,System.Int32)
  commentId: M:System.Drawing.Graphics.FillRectangle(System.Drawing.Brush,System.Int32,System.Int32,System.Int32,System.Int32)
  id: FillRectangle(System.Drawing.Brush,System.Int32,System.Int32,System.Int32,System.Int32)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: FillRectangle(Brush, Int32, Int32, Int32, Int32)
  nameWithType: Graphics.FillRectangle(Brush, Int32, Int32, Int32, Int32)
  fullName: Graphics.FillRectangle(Brush, Int32, Int32, Int32, Int32)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Fills the interior of a rectangle specified by a pair of coordinates, a width, and a height.
  remarks: This method fills the interior of the rectangle defined by the`x`, `y`, `width`, and `height` parameters, including the specified upper-left corner and up to the calculated lower and bottom edges.
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following action:  \n  \n-   Creates a solid blue brush.  \n  \n-   Creates the location and size of a rectangle.  \n  \n-   Fills the rectangular area on the screen.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples3#113](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#113)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples3#113](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#113)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples3#113](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#113)]"
  syntax:
    content: public void FillRectangle (System.Drawing.Brush brush, int x, int y, int width, int height);
    parameters:
    - id: brush
      type: System.Drawing.Brush
      description: <xref href="System.Drawing.Brush"></xref> that determines the characteristics of the fill.
    - id: x
      type: System.Int32
      description: The x-coordinate of the upper-left corner of the rectangle to fill.
    - id: y
      type: System.Int32
      description: The y-coordinate of the upper-left corner of the rectangle to fill.
    - id: width
      type: System.Int32
      description: Width of the rectangle to fill.
    - id: height
      type: System.Int32
      description: Height of the rectangle to fill.
  overload: System.Drawing.Graphics.FillRectangle*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>brush</code> is `null`.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.FillRectangle(System.Drawing.Brush,System.Single,System.Single,System.Single,System.Single)
  commentId: M:System.Drawing.Graphics.FillRectangle(System.Drawing.Brush,System.Single,System.Single,System.Single,System.Single)
  id: FillRectangle(System.Drawing.Brush,System.Single,System.Single,System.Single,System.Single)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: FillRectangle(Brush, Single, Single, Single, Single)
  nameWithType: Graphics.FillRectangle(Brush, Single, Single, Single, Single)
  fullName: Graphics.FillRectangle(Brush, Single, Single, Single, Single)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Fills the interior of a rectangle specified by a pair of coordinates, a width, and a height.
  remarks: This method fills the interior of the rectangle defined by the `x`, `y`, `width`, and `height` parameters, including the specified upper-left corner and up to the calculated lower and bottom edges.
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following action:  \n  \n-   Creates a solid blue brush.  \n  \n-   Creates the location and size of a rectangle.  \n  \n-   Fills the rectangular area on the screen.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples3#114](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#114)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples3#114](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#114)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples3#114](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#114)]"
  syntax:
    content: public void FillRectangle (System.Drawing.Brush brush, float x, float y, float width, float height);
    parameters:
    - id: brush
      type: System.Drawing.Brush
      description: <xref href="System.Drawing.Brush"></xref> that determines the characteristics of the fill.
    - id: x
      type: System.Single
      description: The x-coordinate of the upper-left corner of the rectangle to fill.
    - id: y
      type: System.Single
      description: The y-coordinate of the upper-left corner of the rectangle to fill.
    - id: width
      type: System.Single
      description: Width of the rectangle to fill.
    - id: height
      type: System.Single
      description: Height of the rectangle to fill.
  overload: System.Drawing.Graphics.FillRectangle*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>brush</code> is `null`.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.FillRectangles(System.Drawing.Brush,System.Drawing.RectangleF[])
  commentId: M:System.Drawing.Graphics.FillRectangles(System.Drawing.Brush,System.Drawing.RectangleF[])
  id: FillRectangles(System.Drawing.Brush,System.Drawing.RectangleF[])
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: FillRectangles(Brush, RectangleF[])
  nameWithType: Graphics.FillRectangles(Brush, RectangleF[])
  fullName: Graphics.FillRectangles(Brush, RectangleF[])
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Fills the interiors of a series of rectangles specified by <xref href="System.Drawing.RectangleF"></xref> structures.
  remarks: ''
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following action:  \n  \n-   Creates a solid blue brush.  \n  \n-   Creates an array of three rectangles.  \n  \n-   Fills the three rectangular areas on the screen.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples3#116](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#116)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples3#116](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#116)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples3#116](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#116)]"
  syntax:
    content: public void FillRectangles (System.Drawing.Brush brush, System.Drawing.RectangleF[] rects);
    parameters:
    - id: brush
      type: System.Drawing.Brush
      description: <xref href="System.Drawing.Brush"></xref> that determines the characteristics of the fill.
    - id: rects
      type: System.Drawing.RectangleF[]
      description: Array of <xref href="System.Drawing.RectangleF"></xref> structures that represent the rectangles to fill.
  overload: System.Drawing.Graphics.FillRectangles*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>brush</code> is `null`.  \n  \n -or-  \n  \n <code>rects</code> is `null`."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>Rects</code> is a zero-length array.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.FillRectangles(System.Drawing.Brush,System.Drawing.Rectangle[])
  commentId: M:System.Drawing.Graphics.FillRectangles(System.Drawing.Brush,System.Drawing.Rectangle[])
  id: FillRectangles(System.Drawing.Brush,System.Drawing.Rectangle[])
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: FillRectangles(Brush, Rectangle[])
  nameWithType: Graphics.FillRectangles(Brush, Rectangle[])
  fullName: Graphics.FillRectangles(Brush, Rectangle[])
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Fills the interiors of a series of rectangles specified by <xref href="System.Drawing.Rectangle"></xref> structures.
  remarks: ''
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following action:  \n  \n-   Creates a solid blue brush.  \n  \n-   Creates an array of three rectangles.  \n  \n-   Fills the three rectangular areas on the screen.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples3#115](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#115)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples3#115](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#115)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples3#115](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#115)]"
  syntax:
    content: public void FillRectangles (System.Drawing.Brush brush, System.Drawing.Rectangle[] rects);
    parameters:
    - id: brush
      type: System.Drawing.Brush
      description: <xref href="System.Drawing.Brush"></xref> that determines the characteristics of the fill.
    - id: rects
      type: System.Drawing.Rectangle[]
      description: Array of <xref href="System.Drawing.Rectangle"></xref> structures that represent the rectangles to fill.
  overload: System.Drawing.Graphics.FillRectangles*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>brush</code> is `null`.  \n  \n -or-  \n  \n <code>rects</code> is `null`."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>rects</code> is a zero-length array.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.FillRegion(System.Drawing.Brush,System.Drawing.Region)
  commentId: M:System.Drawing.Graphics.FillRegion(System.Drawing.Brush,System.Drawing.Region)
  id: FillRegion(System.Drawing.Brush,System.Drawing.Region)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: FillRegion(Brush, Region)
  nameWithType: Graphics.FillRegion(Brush, Region)
  fullName: Graphics.FillRegion(Brush, Region)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Fills the interior of a <xref href="System.Drawing.Region"></xref>.
  remarks: A <xref:System.Drawing.Region> is composed of rectangles and paths. If the region is not closed, an additional segment is added from the last point to the first point to close it.
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following action:  \n  \n-   Creates a solid blue brush.  \n  \n-   Creates a rectangle.  \n  \n-   Creates a rectangular region.  \n  \n-   Fills the rectangular region on the screen.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples3#117](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#117)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples3#117](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#117)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples3#117](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#117)]"
  syntax:
    content: public void FillRegion (System.Drawing.Brush brush, System.Drawing.Region region);
    parameters:
    - id: brush
      type: System.Drawing.Brush
      description: <xref href="System.Drawing.Brush"></xref> that determines the characteristics of the fill.
    - id: region
      type: System.Drawing.Region
      description: <xref href="System.Drawing.Region"></xref> that represents the area to fill.
  overload: System.Drawing.Graphics.FillRegion*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>brush</code> is `null`.  \n  \n -or-  \n  \n <code>region</code> is `null`."
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.Finalize
  commentId: M:System.Drawing.Graphics.Finalize
  id: Finalize
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: Finalize()
  nameWithType: Graphics.Finalize()
  fullName: Graphics.Finalize()
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Allows an object to try to free resources and perform other cleanup operations before it is reclaimed by garbage collection.
  syntax:
    content: ~Graphics ();
    parameters: []
  overload: System.Drawing.Graphics.Finalize*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.Flush
  commentId: M:System.Drawing.Graphics.Flush
  id: Flush
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: Flush()
  nameWithType: Graphics.Flush()
  fullName: Graphics.Flush()
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Forces execution of all pending graphics operations and returns immediately without waiting for the operations to finish.
  remarks: This method starts a flush and returns immediately without waiting for any currently executing graphics operation to finish.
  syntax:
    content: public void Flush ();
    parameters: []
  overload: System.Drawing.Graphics.Flush*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.Flush(System.Drawing.Drawing2D.FlushIntention)
  commentId: M:System.Drawing.Graphics.Flush(System.Drawing.Drawing2D.FlushIntention)
  id: Flush(System.Drawing.Drawing2D.FlushIntention)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: Flush(FlushIntention)
  nameWithType: Graphics.Flush(FlushIntention)
  fullName: Graphics.Flush(FlushIntention)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Forces execution of all pending graphics operations with the method waiting or not waiting, as specified, to return before the operations finish.
  remarks: A value of <xref:System.Drawing.Drawing2D.FlushIntention.Flush> for the `intention` parameter specifies that the method return immediately after beginning the flush, while a value of <xref:System.Drawing.Drawing2D.FlushIntention.Sync> specifies that the method wait before returning until any existing operations finish.
  syntax:
    content: public void Flush (System.Drawing.Drawing2D.FlushIntention intention);
    parameters:
    - id: intention
      type: System.Drawing.Drawing2D.FlushIntention
      description: Member of the <xref href="System.Drawing.Drawing2D.FlushIntention"></xref> enumeration that specifies whether the method returns immediately or waits for any existing operations to finish.
  overload: System.Drawing.Graphics.Flush*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.FromHdc(System.IntPtr)
  commentId: M:System.Drawing.Graphics.FromHdc(System.IntPtr)
  id: FromHdc(System.IntPtr)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: FromHdc(IntPtr)
  nameWithType: Graphics.FromHdc(IntPtr)
  fullName: Graphics.FromHdc(IntPtr)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Creates a new <xref href="System.Drawing.Graphics"></xref> from the specified handle to a device context.
  remarks: "You should always call the <xref:System.Drawing.Graphics.Dispose%2A> method to release the <xref:System.Drawing.Graphics> and related resources created by the <xref:System.Drawing.Graphics.FromHdc%2A> method.  \n  \n Even if the display device has an associated ICM color profile, [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] will not use that profile by default. To enable ICM for a <xref:System.Drawing.Graphics>, construct the <xref:System.Drawing.Graphics> from an HDC after you pass the HDC (and ICM_ON) to the `SetICMMode` function. Then any drawing done by the <xref:System.Drawing.Graphics> will be adjusted according to the ICM profile associated with the display device. Enabling ICM will result in slower performance.  \n  \n The state of the device context (mapping mode, logical unit, and the like) at the time you call <xref:System.Drawing.Graphics.FromHdc%2A> can affect rendering done by the <xref:System.Drawing.Graphics>."
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following action:  \n  \n-   Creates an internal pointer type variable `hdc` and sets it to the handle to the device context of the graphics object of the form.  \n  \n-   Creates a new graphics object using `hdc`.  \n  \n-   Draws a rectangle with the new graphics object (on the screen).  \n  \n-   Releases the new graphics object using `hdc`.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples3#118](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#118)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples3#118](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#118)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples3#118](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#118)]"
  syntax:
    content: public static System.Drawing.Graphics FromHdc (IntPtr hdc);
    parameters:
    - id: hdc
      type: System.IntPtr
      description: Handle to a device context.
    return:
      type: System.Drawing.Graphics
      description: This method returns a new <xref href="System.Drawing.Graphics"></xref> for the specified device context.
  overload: System.Drawing.Graphics.FromHdc*
  exceptions: []
  attributes: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.FromHdc(System.IntPtr,System.IntPtr)
  commentId: M:System.Drawing.Graphics.FromHdc(System.IntPtr,System.IntPtr)
  id: FromHdc(System.IntPtr,System.IntPtr)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: FromHdc(IntPtr, IntPtr)
  nameWithType: Graphics.FromHdc(IntPtr, IntPtr)
  fullName: Graphics.FromHdc(IntPtr, IntPtr)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Creates a new <xref href="System.Drawing.Graphics"></xref> from the specified handle to a device context and handle to a device.
  remarks: "You should always call the <xref:System.Drawing.Graphics.Dispose%2A> method to release the <xref:System.Drawing.Graphics> and related resources created by the <xref:System.Drawing.Graphics.FromHdc%2A> method.  \n  \n Even if the display device has an associated ICM color profile, [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] will not use that profile by default. To enable ICM for a <xref:System.Drawing.Graphics>, construct the <xref:System.Drawing.Graphics> from an HDC after you pass the HDC (and ICM_ON) to the `SetICMMode` function. Then any drawing done by the <xref:System.Drawing.Graphics> will be adjusted according to the ICM profile associated with the display device. Enabling ICM will result in slower performance.  \n  \n The state of the device context (mapping mode, logical unit, and the like) at the time you call <xref:System.Drawing.Graphics.FromHdc%2A> can affect rendering done by the <xref:System.Drawing.Graphics>.  \n  \n The device handle is typically used to query specific printer capabilities."
  syntax:
    content: public static System.Drawing.Graphics FromHdc (IntPtr hdc, IntPtr hdevice);
    parameters:
    - id: hdc
      type: System.IntPtr
      description: Handle to a device context.
    - id: hdevice
      type: System.IntPtr
      description: Handle to a device.
    return:
      type: System.Drawing.Graphics
      description: This method returns a new <xref href="System.Drawing.Graphics"></xref> for the specified device context and device.
  overload: System.Drawing.Graphics.FromHdc*
  exceptions: []
  attributes: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.FromHdcInternal(System.IntPtr)
  commentId: M:System.Drawing.Graphics.FromHdcInternal(System.IntPtr)
  id: FromHdcInternal(System.IntPtr)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: FromHdcInternal(IntPtr)
  nameWithType: Graphics.FromHdcInternal(IntPtr)
  fullName: Graphics.FromHdcInternal(IntPtr)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Returns a <xref href="System.Drawing.Graphics"></xref> for the specified device context.
  remarks: This method should not be used.
  syntax:
    content: public static System.Drawing.Graphics FromHdcInternal (IntPtr hdc);
    parameters:
    - id: hdc
      type: System.IntPtr
      description: Handle to a device context.
    return:
      type: System.Drawing.Graphics
      description: A <xref href="System.Drawing.Graphics"></xref> for the specified device context.
  overload: System.Drawing.Graphics.FromHdcInternal*
  exceptions: []
  attributes: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.FromHwnd(System.IntPtr)
  commentId: M:System.Drawing.Graphics.FromHwnd(System.IntPtr)
  id: FromHwnd(System.IntPtr)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: FromHwnd(IntPtr)
  nameWithType: Graphics.FromHwnd(IntPtr)
  fullName: Graphics.FromHwnd(IntPtr)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Creates a new <xref href="System.Drawing.Graphics"></xref> from the specified handle to a window.
  remarks: You should always call the<xref:System.Drawing.Graphics.Dispose%2A> method to release the <xref:System.Drawing.Graphics> and related resources created by the <xref:System.Drawing.Graphics.FromHwnd%2A> method.
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler, as well as `thisForm`, the <xref:System.Windows.Forms.Form> for the example. The code performs the following actions:  \n  \n-   Creates a new internal pointer variable `hwnd` and sets it to the handle of the example's form.  \n  \n-   Creates a new <xref:System.Drawing.Graphics> from the handle.  \n  \n-   Draws a rectangle to the new <xref:System.Drawing.Graphics> using a red pen.  \n  \n-   Disposes the new <xref:System.Drawing.Graphics>.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples3#119](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#119)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples3#119](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#119)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples3#119](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#119)]"
  syntax:
    content: public static System.Drawing.Graphics FromHwnd (IntPtr hwnd);
    parameters:
    - id: hwnd
      type: System.IntPtr
      description: Handle to a window.
    return:
      type: System.Drawing.Graphics
      description: This method returns a new <xref href="System.Drawing.Graphics"></xref> for the specified window handle.
  overload: System.Drawing.Graphics.FromHwnd*
  exceptions: []
  attributes: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.FromHwndInternal(System.IntPtr)
  commentId: M:System.Drawing.Graphics.FromHwndInternal(System.IntPtr)
  id: FromHwndInternal(System.IntPtr)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: FromHwndInternal(IntPtr)
  nameWithType: Graphics.FromHwndInternal(IntPtr)
  fullName: Graphics.FromHwndInternal(IntPtr)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Creates a new <xref href="System.Drawing.Graphics"></xref> for the specified windows handle.
  remarks: This method should not be used.
  syntax:
    content: public static System.Drawing.Graphics FromHwndInternal (IntPtr hwnd);
    parameters:
    - id: hwnd
      type: System.IntPtr
      description: Handle to a window.
    return:
      type: System.Drawing.Graphics
      description: A <xref href="System.Drawing.Graphics"></xref> for the specified window handle.
  overload: System.Drawing.Graphics.FromHwndInternal*
  exceptions: []
  attributes: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.FromImage(System.Drawing.Image)
  commentId: M:System.Drawing.Graphics.FromImage(System.Drawing.Image)
  id: FromImage(System.Drawing.Image)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: FromImage(Image)
  nameWithType: Graphics.FromImage(Image)
  fullName: Graphics.FromImage(Image)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Creates a new <xref href="System.Drawing.Graphics"></xref> from the specified <xref href="System.Drawing.Image"></xref>.
  remarks: "If the image has an indexed pixel format, this method throws an exception with the message, \"A Graphics object cannot be created from an image that has an indexed pixel format.\" The indexed pixel formats are shown in the following list.  \n  \n-   <xref:System.Drawing.Imaging.PixelFormat.Format1bppIndexed>  \n  \n-   <xref:System.Drawing.Imaging.PixelFormat.Format4bppIndexed>  \n  \n-   <xref:System.Drawing.Imaging.PixelFormat.Format8bppIndexed>  \n  \n You can save the indexed image as another format by using the <xref:System.Drawing.Image.Save%28System.String%2CSystem.Drawing.Imaging.ImageFormat%29> method and then retrieve a <xref:System.Drawing.Graphics> object for the new image.  \n  \n This method also throws an exception if the image has any of the following pixel formats.  \n  \n-   <xref:System.Drawing.Imaging.PixelFormat.Undefined>  \n  \n-   <xref:System.Drawing.Imaging.PixelFormat.DontCare>  \n  \n-   <xref:System.Drawing.Imaging.PixelFormat.Format16bppArgb1555>  \n  \n-   <xref:System.Drawing.Imaging.PixelFormat.Format16bppGrayScale>  \n  \n You should always call the <xref:System.Drawing.Graphics.Dispose%2A> method to release the <xref:System.Drawing.Graphics> and related resources created by the <xref:System.Drawing.Graphics.FromImage%2A> method."
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following action:  \n  \n-   Creates an <xref:System.Drawing.Image> from a graphics file SampImag.jpg in the example folder.  \n  \n-   Creates a <xref:System.Drawing.Graphics> from the <xref:System.Drawing.Image>.  \n  \n-   Alters the image by filling a rectangle within it.  \n  \n-   Draws the <xref:System.Drawing.Image> to the screen.  \n  \n-   Releases the created <xref:System.Drawing.Graphics>.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples3#120](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#120)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples3#120](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#120)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples3#120](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#120)]"
  syntax:
    content: public static System.Drawing.Graphics FromImage (System.Drawing.Image image);
    parameters:
    - id: image
      type: System.Drawing.Image
      description: <xref href="System.Drawing.Image"></xref> from which to create the new <xref href="System.Drawing.Graphics"></xref>.
    return:
      type: System.Drawing.Graphics
      description: This method returns a new <xref href="System.Drawing.Graphics"></xref> for the specified <xref href="System.Drawing.Image"></xref>.
  overload: System.Drawing.Graphics.FromImage*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>image</code> is `null`.
  - type: System.Exception
    commentId: T:System.Exception
    description: <code>image</code> has an indexed pixel format or its format is undefined.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.GetContextInfo
  commentId: M:System.Drawing.Graphics.GetContextInfo
  id: GetContextInfo
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: GetContextInfo()
  nameWithType: Graphics.GetContextInfo()
  fullName: Graphics.GetContextInfo()
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Gets the cumulative graphics context.
  remarks: The return value is an object array where the first element contains the cumulative clip region and the second element contains the cumulative translate/transform matrix.
  syntax:
    content: public object GetContextInfo ();
    parameters: []
    return:
      type: System.Object
      description: An <xref href="System.Object"></xref> representing the cumulative graphics context.
  overload: System.Drawing.Graphics.GetContextInfo*
  exceptions: []
  attributes: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.GetHalftonePalette
  commentId: M:System.Drawing.Graphics.GetHalftonePalette
  id: GetHalftonePalette
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: GetHalftonePalette()
  nameWithType: Graphics.GetHalftonePalette()
  fullName: Graphics.GetHalftonePalette()
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Gets a handle to the current Windows halftone palette.
  remarks: The purpose of the <xref:System.Drawing.Graphics.GetHalftonePalette%2A> method is to enable [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] to produce a better quality halftone when the display uses 8 bits per pixel. To display an image using the halftone palette, use the following procedure.
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Defines interoperability <xref:System.Runtime.InteropServices.DllImportAttribute> attributes for the Windows DLL file gdi32.dll, which contains the necessary [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] functions.  \n  \n-   Defines the `SelectPalette` and `RealizePalette` functions in that DLL as external.  \n  \n-   Creates an image from an existing image file SampImag.jpg (which must be in the same folder as the example code file) and draws the image to the screen.  \n  \n-   Creates internal pointer type variables and sets their values to the handle to the graphics object and to the current Windows halftone palette, respectively.  \n  \n-   Selects and realizes the halftone palette.  \n  \n-   Creates a new graphics object using the `hdc` parameter.  \n  \n-   Draws the image again.  \n  \n-   Releases the handle to the device context.  \n  \n The result is two renderings of the sample image: one with the 16-bit palette and one with the 8-bit palette.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples3#121](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#121)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples3#121](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#121)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples3#121](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#121)]"
  syntax:
    content: public static IntPtr GetHalftonePalette ();
    parameters: []
    return:
      type: System.IntPtr
      description: Internal pointer that specifies the handle to the palette.
  overload: System.Drawing.Graphics.GetHalftonePalette*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.GetHdc
  commentId: M:System.Drawing.Graphics.GetHdc
  id: GetHdc
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: GetHdc()
  nameWithType: Graphics.GetHdc()
  fullName: Graphics.GetHdc()
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Gets the handle to the device context associated with this <xref href="System.Drawing.Graphics"></xref>.
  remarks: "The device context is a Windows structure based on [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] that defines a set of graphical objects and their associated attributes, as well as the graphical modes that affect output. This method returns that device context with the exception of a font. Because a font is not selected, calls to the <xref:System.Drawing.Font.FromHdc%2A> method using a handle returned from the <xref:System.Drawing.Graphics.GetHdc%2A> method will fail.  \n  \n Calls to the <xref:System.Drawing.Graphics.GetHdc%2A> and <xref:System.Drawing.Graphics.ReleaseHdc%2A> methods must appear in pairs. During the scope of a <xref:System.Drawing.Graphics.GetHdc%2A> and <xref:System.Drawing.Graphics.ReleaseHdc%2A> method pair, you usually make only calls to [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] functions. Calls in that scope made to [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] methods of the <xref:System.Drawing.Graphics> that produced the `hdc` parameter fail with an `ObjectBusy` error. Also, [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] ignores any state changes made to the <xref:System.Drawing.Graphics> of the `hdc` parameter in subsequent operations."
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The example illustrates calling a Windows [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] function to perform the same task as a [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] <xref:System.Drawing.Graphics> method. The code performs the following actions:  \n  \n-   Defines the interoperability <xref:System.Runtime.InteropServices.DllImportAttribute> attribute for the Windows DLL file gdi32.dll. This DLL contains the desired [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] function.  \n  \n-   Defines the <xref:System.Drawing.Rectangle> function in that DLL as external.  \n  \n-   Creates a red pen.  \n  \n-   With the pen, draws a rectangle to the screen using the [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] <xref:System.Drawing.Graphics.DrawRectangle%2A> method.  \n  \n-   Defines an internal pointer type variable `hdc` and sets its value to the handle to the device context of the form.  \n  \n-   Draws a rectangle to the screen using the [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] <xref:System.Drawing.Rectangle> function.  \n  \n-   Releases the device context represented by the `hdc` parameter.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples3#122](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#122)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples3#122](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#122)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples3#122](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#122)]"
  syntax:
    content: public IntPtr GetHdc ();
    parameters: []
    return:
      type: System.IntPtr
      description: Handle to the device context associated with this <xref href="System.Drawing.Graphics"></xref>.
  overload: System.Drawing.Graphics.GetHdc*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.GetNearestColor(System.Drawing.Color)
  commentId: M:System.Drawing.Graphics.GetNearestColor(System.Drawing.Color)
  id: GetNearestColor(System.Drawing.Color)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: GetNearestColor(Color)
  nameWithType: Graphics.GetNearestColor(Color)
  fullName: Graphics.GetNearestColor(Color)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Gets the nearest color to the specified <xref href="System.Drawing.Color"></xref> structure.
  remarks: ''
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates an arbitrary color with ARGB coordinates (255, 165, 63, 136).  \n  \n-   Creates a solid brush and sets its color to the specified color.  \n  \n-   Fills an ellipse using the arbitrary color.  \n  \n-   Creates a second color and sets its value to the nearest system ARGB color.  \n  \n-   Fills a second ellipse with this color.  \n  \n The result is two ellipses: the first drawn with the arbitrary specified color and the second drawn with the system color nearest the specified color.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples3#123](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#123)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples3#123](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#123)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples3#123](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#123)]"
  syntax:
    content: public System.Drawing.Color GetNearestColor (System.Drawing.Color color);
    parameters:
    - id: color
      type: System.Drawing.Color
      description: <xref href="System.Drawing.Color"></xref> structure for which to find a match.
    return:
      type: System.Drawing.Color
      description: A <xref href="System.Drawing.Color"></xref> structure that represents the nearest color to the one specified with the <code>color</code> parameter.
  overload: System.Drawing.Graphics.GetNearestColor*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.InterpolationMode
  commentId: P:System.Drawing.Graphics.InterpolationMode
  id: InterpolationMode
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: InterpolationMode
  nameWithType: Graphics.InterpolationMode
  fullName: Graphics.InterpolationMode
  type: Property
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Gets or sets the interpolation mode associated with this <xref href="System.Drawing.Graphics"></xref>.
  remarks: The interpolation mode determines how intermediate values between two endpoints are calculated.
  syntax:
    content: public System.Drawing.Drawing2D.InterpolationMode InterpolationMode { get; set; }
    return:
      type: System.Drawing.Drawing2D.InterpolationMode
      description: One of the <xref href="System.Drawing.Drawing2D.InterpolationMode"></xref> values.
  overload: System.Drawing.Graphics.InterpolationMode*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.IntersectClip(System.Drawing.Rectangle)
  commentId: M:System.Drawing.Graphics.IntersectClip(System.Drawing.Rectangle)
  id: IntersectClip(System.Drawing.Rectangle)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: IntersectClip(Rectangle)
  nameWithType: Graphics.IntersectClip(Rectangle)
  fullName: Graphics.IntersectClip(Rectangle)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Updates the clip region of this <xref href="System.Drawing.Graphics"></xref> to the intersection of the current clip region and the specified <xref href="System.Drawing.Rectangle"></xref> structure.
  remarks: This method assigns to the <xref:System.Drawing.Graphics.Clip%2A> property of this <xref:System.Drawing.Graphics> the area represented by the intersection of the current clip region and the rectangle specified by the `rect` parameter.
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates a rectangle with upper-left corner at (0, 0) and sets the clipping region to this rectangle.  \n  \n-   Creates a second rectangle with upper-left corner at (100, 100) and sets the clipping region to the intersection of this rectangle and the current clipping region (the first rectangle).  \n  \n-   Fills a large rectangle that includes both previous rectangles with a solid blue brush.  \n  \n-   Resets the clipping region to infinite.  \n  \n-   Draws rectangles around the two clipping regions. It uses a black pen for the first clipping rectangle and a red pen for the second clipping region.  \n  \n The result is that only the intersection of the two rectangles is filled with blue.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples3#124](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#124)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples3#124](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#124)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples3#124](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#124)]"
  syntax:
    content: public void IntersectClip (System.Drawing.Rectangle rect);
    parameters:
    - id: rect
      type: System.Drawing.Rectangle
      description: <xref href="System.Drawing.Rectangle"></xref> structure to intersect with the current clip region.
  overload: System.Drawing.Graphics.IntersectClip*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.IntersectClip(System.Drawing.RectangleF)
  commentId: M:System.Drawing.Graphics.IntersectClip(System.Drawing.RectangleF)
  id: IntersectClip(System.Drawing.RectangleF)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: IntersectClip(RectangleF)
  nameWithType: Graphics.IntersectClip(RectangleF)
  fullName: Graphics.IntersectClip(RectangleF)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Updates the clip region of this <xref href="System.Drawing.Graphics"></xref> to the intersection of the current clip region and the specified <xref href="System.Drawing.RectangleF"></xref> structure.
  remarks: This method assigns to the <xref:System.Drawing.Graphics.Clip%2A> property of this <xref:System.Drawing.Graphics> the area represented by the intersection of the current clip region and the rectangle specified by the `rect` parameter.
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates a rectangle with upper-left corner at (0, 0) and sets the clipping region to this rectangle.  \n  \n-   Creates a second rectangle with upper-left corner at (100, 100) and sets the clipping region to the intersection of this rectangle and the current clipping region (the first rectangle).  \n  \n-   Fills a large rectangle that includes both previous rectangles with a solid blue brush.  \n  \n-   Resets the clipping region to infinite.  \n  \n-   Draws rectangles around the two clipping regions. It uses a black pen for the first clipping rectangle and a red pen for the second clipping region.  \n  \n The result is that only the intersection of the two rectangles is filled with blue.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples3#125](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#125)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples3#125](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#125)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples3#125](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#125)]"
  syntax:
    content: public void IntersectClip (System.Drawing.RectangleF rect);
    parameters:
    - id: rect
      type: System.Drawing.RectangleF
      description: <xref href="System.Drawing.RectangleF"></xref> structure to intersect with the current clip region.
  overload: System.Drawing.Graphics.IntersectClip*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.IntersectClip(System.Drawing.Region)
  commentId: M:System.Drawing.Graphics.IntersectClip(System.Drawing.Region)
  id: IntersectClip(System.Drawing.Region)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: IntersectClip(Region)
  nameWithType: Graphics.IntersectClip(Region)
  fullName: Graphics.IntersectClip(Region)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Updates the clip region of this <xref href="System.Drawing.Graphics"></xref> to the intersection of the current clip region and the specified <xref href="System.Drawing.Region"></xref>.
  remarks: This method assigns to the <xref:System.Drawing.Graphics.Clip%2A> property of this <xref:System.Drawing.Graphics> the area represented by the intersection of the current clip region and the region specified by the `region` parameter.
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates a rectangle with upper-left corner at (0, 0).  \n  \n-   Creates a region and sets it to the rectangle, and sets the clipping region to this region.  \n  \n-   Creates a second rectangle with upper-left corner at (100, 100).  \n  \n-   Creates a region and sets it to the second rectangle, and sets the clipping region to the intersection of this region and the current clipping region (the first rectangle) using a combine mode of <xref:System.Drawing.Drawing2D.CombineMode.Replace>.  \n  \n-   Fills a large rectangle that includes both previous regions with a solid blue brush.  \n  \n-   Resets the clipping region to infinite.  \n  \n-   Draws rectangles around the two clipping regions. It uses a black pen for the first clipping region and a red pen for the second clipping region.  \n  \n The result is that only the intersection of the two regions is filled with blue.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples3#126](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#126)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples3#126](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#126)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples3#126](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#126)]"
  syntax:
    content: public void IntersectClip (System.Drawing.Region region);
    parameters:
    - id: region
      type: System.Drawing.Region
      description: <xref href="System.Drawing.Region"></xref> to intersect with the current region.
  overload: System.Drawing.Graphics.IntersectClip*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.IsClipEmpty
  commentId: P:System.Drawing.Graphics.IsClipEmpty
  id: IsClipEmpty
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: IsClipEmpty
  nameWithType: Graphics.IsClipEmpty
  fullName: Graphics.IsClipEmpty
  type: Property
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Gets a value indicating whether the clipping region of this <xref href="System.Drawing.Graphics"></xref> is empty.
  syntax:
    content: public bool IsClipEmpty { get; }
    return:
      type: System.Boolean
      description: '`true` if the clipping region of this <xref href="System.Drawing.Graphics"></xref> is empty; otherwise, `false`.'
  overload: System.Drawing.Graphics.IsClipEmpty*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.IsVisible(System.Drawing.Point)
  commentId: M:System.Drawing.Graphics.IsVisible(System.Drawing.Point)
  id: IsVisible(System.Drawing.Point)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: IsVisible(Point)
  nameWithType: Graphics.IsVisible(Point)
  fullName: Graphics.IsVisible(Point)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Indicates whether the specified <xref href="System.Drawing.Point"></xref> structure is contained within the visible clip region of this <xref href="System.Drawing.Graphics"></xref>.
  remarks: ''
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates a rectangular clipping region and sets it as the clipping region for the graphics object of the form using <xref:System.Drawing.Drawing2D.CombineMode.Replace>.  \n  \n-   Creates two points, one inside the clipping region and one outside.  \n  \n-   Tests each of the points for visibility and draws only the visible one.  \n  \n The result is one small red circle, which is within the clip region.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples3#127](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#127)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples3#127](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#127)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples3#127](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#127)]"
  syntax:
    content: public bool IsVisible (System.Drawing.Point point);
    parameters:
    - id: point
      type: System.Drawing.Point
      description: <xref href="System.Drawing.Point"></xref> structure to test for visibility.
    return:
      type: System.Boolean
      description: '`true` if the point specified by the <code>point</code> parameter is contained within the visible clip region of this <xref href="System.Drawing.Graphics"></xref>; otherwise, `false`.'
  overload: System.Drawing.Graphics.IsVisible*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.IsVisible(System.Drawing.PointF)
  commentId: M:System.Drawing.Graphics.IsVisible(System.Drawing.PointF)
  id: IsVisible(System.Drawing.PointF)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: IsVisible(PointF)
  nameWithType: Graphics.IsVisible(PointF)
  fullName: Graphics.IsVisible(PointF)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Indicates whether the specified <xref href="System.Drawing.PointF"></xref> structure is contained within the visible clip region of this <xref href="System.Drawing.Graphics"></xref>.
  remarks: ''
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates a rectangular clipping region and sets it as the clipping region for the graphics of the form using <xref:System.Drawing.Drawing2D.CombineMode.Replace>.  \n  \n-   Creates two points, one inside the clipping region and one outside.  \n  \n-   Tests each of the points for visibility and draws only the visible one.  \n  \n The result is one small red circle, which is within the clip region.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples3#128](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#128)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples3#128](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#128)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples3#128](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#128)]"
  syntax:
    content: public bool IsVisible (System.Drawing.PointF point);
    parameters:
    - id: point
      type: System.Drawing.PointF
      description: <xref href="System.Drawing.PointF"></xref> structure to test for visibility.
    return:
      type: System.Boolean
      description: '`true` if the point specified by the <code>point</code> parameter is contained within the visible clip region of this <xref href="System.Drawing.Graphics"></xref>; otherwise, `false`.'
  overload: System.Drawing.Graphics.IsVisible*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.IsVisible(System.Drawing.Rectangle)
  commentId: M:System.Drawing.Graphics.IsVisible(System.Drawing.Rectangle)
  id: IsVisible(System.Drawing.Rectangle)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: IsVisible(Rectangle)
  nameWithType: Graphics.IsVisible(Rectangle)
  fullName: Graphics.IsVisible(Rectangle)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Indicates whether the rectangle specified by a <xref href="System.Drawing.Rectangle"></xref> structure is contained within the visible clip region of this <xref href="System.Drawing.Graphics"></xref>.
  remarks: ''
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates a rectangular clipping region and sets it as the clipping region for the graphics object of the form using<xref:System.Drawing.Drawing2D.CombineMode.Replace>.  \n  \n-   Creates the location and size of two rectangles, one inside the clipping region and one outside.  \n  \n-   Tests each of the rectangles for visibility and draws only the visible one.  \n  \n The result is one small red rectangle, which is within the clip region.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples3#129](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#129)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples3#129](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#129)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples3#129](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#129)]"
  syntax:
    content: public bool IsVisible (System.Drawing.Rectangle rect);
    parameters:
    - id: rect
      type: System.Drawing.Rectangle
      description: <xref href="System.Drawing.Rectangle"></xref> structure to test for visibility.
    return:
      type: System.Boolean
      description: '`true` if the rectangle specified by the <code>rect</code> parameter is contained within the visible clip region of this <xref href="System.Drawing.Graphics"></xref>; otherwise, `false`.'
  overload: System.Drawing.Graphics.IsVisible*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.IsVisible(System.Drawing.RectangleF)
  commentId: M:System.Drawing.Graphics.IsVisible(System.Drawing.RectangleF)
  id: IsVisible(System.Drawing.RectangleF)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: IsVisible(RectangleF)
  nameWithType: Graphics.IsVisible(RectangleF)
  fullName: Graphics.IsVisible(RectangleF)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Indicates whether the rectangle specified by a <xref href="System.Drawing.RectangleF"></xref> structure is contained within the visible clip region of this <xref href="System.Drawing.Graphics"></xref>.
  remarks: ''
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates a rectangular clipping region and sets it as the clipping region for the graphics object of the form using <xref:System.Drawing.Drawing2D.CombineMode.Replace>.  \n  \n-   Creates two rectangles, one inside the clipping region and one outside.  \n  \n-   Tests each of the rectangles for visibility and draws only the visible one.  \n  \n The result is one small red rectangle, which is within the clip region.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples3#130](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#130)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples3#130](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#130)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples3#130](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#130)]"
  syntax:
    content: public bool IsVisible (System.Drawing.RectangleF rect);
    parameters:
    - id: rect
      type: System.Drawing.RectangleF
      description: <xref href="System.Drawing.RectangleF"></xref> structure to test for visibility.
    return:
      type: System.Boolean
      description: '`true` if the rectangle specified by the <code>rect</code> parameter is contained within the visible clip region of this <xref href="System.Drawing.Graphics"></xref>; otherwise, `false`.'
  overload: System.Drawing.Graphics.IsVisible*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.IsVisible(System.Int32,System.Int32)
  commentId: M:System.Drawing.Graphics.IsVisible(System.Int32,System.Int32)
  id: IsVisible(System.Int32,System.Int32)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: IsVisible(Int32, Int32)
  nameWithType: Graphics.IsVisible(Int32, Int32)
  fullName: Graphics.IsVisible(Int32, Int32)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Indicates whether the point specified by a pair of coordinates is contained within the visible clip region of this <xref href="System.Drawing.Graphics"></xref>.
  remarks: ''
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates a rectangular clipping region and sets it as the clipping region for the graphics object of the form using <xref:System.Drawing.Drawing2D.CombineMode.Replace>.  \n  \n-   Creates two points, one inside the clipping region and one outside.  \n  \n-   Tests each of the points for visibility and draws only the visible one.  \n  \n The result is one small red circle, which is within the clip region.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples3#131](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#131)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples3#131](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#131)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples3#131](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#131)]"
  syntax:
    content: public bool IsVisible (int x, int y);
    parameters:
    - id: x
      type: System.Int32
      description: The x-coordinate of the point to test for visibility.
    - id: y
      type: System.Int32
      description: The y-coordinate of the point to test for visibility.
    return:
      type: System.Boolean
      description: '`true` if the point defined by the <code>x</code> and <code>y</code> parameters is contained within the visible clip region of this <xref href="System.Drawing.Graphics"></xref>; otherwise, `false`.'
  overload: System.Drawing.Graphics.IsVisible*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.IsVisible(System.Single,System.Single)
  commentId: M:System.Drawing.Graphics.IsVisible(System.Single,System.Single)
  id: IsVisible(System.Single,System.Single)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: IsVisible(Single, Single)
  nameWithType: Graphics.IsVisible(Single, Single)
  fullName: Graphics.IsVisible(Single, Single)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Indicates whether the point specified by a pair of coordinates is contained within the visible clip region of this <xref href="System.Drawing.Graphics"></xref>.
  remarks: ''
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates a rectangular clipping region and sets it as the clipping region for the graphics object of the form using <xref:System.Drawing.Drawing2D.CombineMode.Replace>.  \n  \n-   Creates two points, one inside the clipping region and one outside.  \n  \n-   Tests each of the points for visibility and draws only the visible one.  \n  \n The result is one small red circle, which is within the clip region.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples3#133](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#133)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples3#133](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#133)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples3#133](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#133)]"
  syntax:
    content: public bool IsVisible (float x, float y);
    parameters:
    - id: x
      type: System.Single
      description: The x-coordinate of the point to test for visibility.
    - id: y
      type: System.Single
      description: The y-coordinate of the point to test for visibility.
    return:
      type: System.Boolean
      description: '`true` if the point defined by the <code>x</code> and <code>y</code> parameters is contained within the visible clip region of this <xref href="System.Drawing.Graphics"></xref>; otherwise, `false`.'
  overload: System.Drawing.Graphics.IsVisible*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.IsVisible(System.Int32,System.Int32,System.Int32,System.Int32)
  commentId: M:System.Drawing.Graphics.IsVisible(System.Int32,System.Int32,System.Int32,System.Int32)
  id: IsVisible(System.Int32,System.Int32,System.Int32,System.Int32)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: IsVisible(Int32, Int32, Int32, Int32)
  nameWithType: Graphics.IsVisible(Int32, Int32, Int32, Int32)
  fullName: Graphics.IsVisible(Int32, Int32, Int32, Int32)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Indicates whether the rectangle specified by a pair of coordinates, a width, and a height is contained within the visible clip region of this <xref href="System.Drawing.Graphics"></xref>.
  remarks: ''
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates a rectangular clipping region and sets it as the clipping region for the graphics object of the form using <xref:System.Drawing.Drawing2D.CombineMode.Replace>.  \n  \n-   Creates the location and size of two rectangles, one inside the clipping region and one outside.  \n  \n-   Tests each of the rectangles for visibility and draws only the visible one.  \n  \n The result is one small red rectangle, which is within the clip region.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples3#132](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#132)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples3#132](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#132)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples3#132](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#132)]"
  syntax:
    content: public bool IsVisible (int x, int y, int width, int height);
    parameters:
    - id: x
      type: System.Int32
      description: The x-coordinate of the upper-left corner of the rectangle to test for visibility.
    - id: y
      type: System.Int32
      description: The y-coordinate of the upper-left corner of the rectangle to test for visibility.
    - id: width
      type: System.Int32
      description: Width of the rectangle to test for visibility.
    - id: height
      type: System.Int32
      description: Height of the rectangle to test for visibility.
    return:
      type: System.Boolean
      description: '`true` if the rectangle defined by the <code>x</code>, <code>y</code>, <code>width</code>, and <code>height</code> parameters is contained within the visible clip region of this <xref href="System.Drawing.Graphics"></xref>; otherwise, `false`.'
  overload: System.Drawing.Graphics.IsVisible*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.IsVisible(System.Single,System.Single,System.Single,System.Single)
  commentId: M:System.Drawing.Graphics.IsVisible(System.Single,System.Single,System.Single,System.Single)
  id: IsVisible(System.Single,System.Single,System.Single,System.Single)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: IsVisible(Single, Single, Single, Single)
  nameWithType: Graphics.IsVisible(Single, Single, Single, Single)
  fullName: Graphics.IsVisible(Single, Single, Single, Single)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Indicates whether the rectangle specified by a pair of coordinates, a width, and a height is contained within the visible clip region of this <xref href="System.Drawing.Graphics"></xref>.
  remarks: ''
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates a rectangular clipping region and sets it as the clipping region for the graphics object of the form using <xref:System.Drawing.Drawing2D.CombineMode.Replace>.  \n  \n-   Creates the location and size of two rectangles, one inside the clipping region and one outside.  \n  \n-   Tests each of the rectangles for visibility and draws only the visible one.  \n  \n The result is one small red rectangle, which is within the clip region.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples3#134](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#134)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples3#134](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#134)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples3#134](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#134)]"
  syntax:
    content: public bool IsVisible (float x, float y, float width, float height);
    parameters:
    - id: x
      type: System.Single
      description: The x-coordinate of the upper-left corner of the rectangle to test for visibility.
    - id: y
      type: System.Single
      description: The y-coordinate of the upper-left corner of the rectangle to test for visibility.
    - id: width
      type: System.Single
      description: Width of the rectangle to test for visibility.
    - id: height
      type: System.Single
      description: Height of the rectangle to test for visibility.
    return:
      type: System.Boolean
      description: '`true` if the rectangle defined by the <code>x</code>, <code>y</code>, <code>width</code>, and <code>height</code> parameters is contained within the visible clip region of this <xref href="System.Drawing.Graphics"></xref>; otherwise, `false`.'
  overload: System.Drawing.Graphics.IsVisible*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.IsVisibleClipEmpty
  commentId: P:System.Drawing.Graphics.IsVisibleClipEmpty
  id: IsVisibleClipEmpty
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: IsVisibleClipEmpty
  nameWithType: Graphics.IsVisibleClipEmpty
  fullName: Graphics.IsVisibleClipEmpty
  type: Property
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Gets a value indicating whether the visible clipping region of this <xref href="System.Drawing.Graphics"></xref> is empty.
  remarks: The visible clipping region is the intersection of the clipping region of this `Graphics` and the clipping region of the window.
  syntax:
    content: public bool IsVisibleClipEmpty { get; }
    return:
      type: System.Boolean
      description: '`true` if the visible portion of the clipping region of this <xref href="System.Drawing.Graphics"></xref> is empty; otherwise, `false`.'
  overload: System.Drawing.Graphics.IsVisibleClipEmpty*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.MeasureCharacterRanges(System.String,System.Drawing.Font,System.Drawing.RectangleF,System.Drawing.StringFormat)
  commentId: M:System.Drawing.Graphics.MeasureCharacterRanges(System.String,System.Drawing.Font,System.Drawing.RectangleF,System.Drawing.StringFormat)
  id: MeasureCharacterRanges(System.String,System.Drawing.Font,System.Drawing.RectangleF,System.Drawing.StringFormat)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: MeasureCharacterRanges(String, Font, RectangleF, StringFormat)
  nameWithType: Graphics.MeasureCharacterRanges(String, Font, RectangleF, StringFormat)
  fullName: Graphics.MeasureCharacterRanges(String, Font, RectangleF, StringFormat)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Gets an array of <xref href="System.Drawing.Region"></xref> objects, each of which bounds a range of character positions within the specified string.
  remarks: The regions returned by this method are resolution-dependent, so there might be a slight loss of accuracy if strings are recorded in a metafile at one resolution and later played back at a different resolution.
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Sets a string \"First and Second ranges\" and a font for display of the string (\"Times New Roman\", 16 point).  \n  \n-   Sets two character ranges within the string (which correspond to the words \"First\" and \"Second\").  \n  \n-   Creates a rectangle in which to display the string.  \n  \n-   Sets the formatting of the string ¾ including the two character ranges.  \n  \n-   Draws the string to the screen.  \n  \n-   Measures the character ranges, determines rectangles that bound the two specified ranges.  \n  \n-   Draws the two rectangles to the screen.  \n  \n The result is the displayed string with the first range (\"First\") bounded by a red rectangle and the second range (\"Second\") bounded by a blue rectangle.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples3#135](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#135)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples3#135](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#135)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples3#135](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#135)]"
  syntax:
    content: public System.Drawing.Region[] MeasureCharacterRanges (string text, System.Drawing.Font font, System.Drawing.RectangleF layoutRect, System.Drawing.StringFormat stringFormat);
    parameters:
    - id: text
      type: System.String
      description: String to measure.
    - id: font
      type: System.Drawing.Font
      description: <xref href="System.Drawing.Font"></xref> that defines the text format of the string.
    - id: layoutRect
      type: System.Drawing.RectangleF
      description: <xref href="System.Drawing.RectangleF"></xref> structure that specifies the layout rectangle for the string.
    - id: stringFormat
      type: System.Drawing.StringFormat
      description: <xref href="System.Drawing.StringFormat"></xref> that represents formatting information, such as line spacing, for the string.
    return:
      type: System.Drawing.Region[]
      description: This method returns an array of <xref href="System.Drawing.Region"></xref> objects, each of which bounds a range of character positions within the specified string.
  overload: System.Drawing.Graphics.MeasureCharacterRanges*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font)
  commentId: M:System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font)
  id: MeasureString(System.String,System.Drawing.Font)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: MeasureString(String, Font)
  nameWithType: Graphics.MeasureString(String, Font)
  fullName: Graphics.MeasureString(String, Font)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Measures the specified string when drawn with the specified <xref href="System.Drawing.Font"></xref>.
  remarks: The <xref:System.Drawing.Graphics.MeasureString%2A> method is designed for use with individual strings and includes a small amount of extra space before and after the string to allow for overhanging glyphs. Also, the <xref:System.Drawing.Graphics.DrawString%2A> method adjusts glyph points to optimize display quality and might display a string narrower than reported by <xref:System.Drawing.Graphics.MeasureString%2A>. To obtain metrics suitable for adjacent strings in layout (for example, when implementing formatted text), use the <xref:System.Drawing.Graphics.MeasureCharacterRanges%2A> method or one of the <xref:System.Drawing.Graphics.MeasureString%2A> methods that takes a <xref:System.Drawing.StringFormat>, and pass <xref:System.Drawing.StringFormat.GenericTypographic%2A>. Also, ensure the <xref:System.Drawing.Graphics.TextRenderingHint%2A> for the <xref:System.Drawing.Graphics> is <xref:System.Drawing.Text.TextRenderingHint.AntiAlias>.
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates a string to measure.  \n  \n-   Creates a font object and sets it to Arial (16 point).  \n  \n-   Creates a size object and uses it and the font object to measure the size of the string.  \n  \n-   Draws a red rectangle using the measured size of the string.  \n  \n-   Draws the string within the drawn rectangle.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples3#136](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#136)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples3#136](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#136)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples3#136](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#136)]"
  syntax:
    content: public System.Drawing.SizeF MeasureString (string text, System.Drawing.Font font);
    parameters:
    - id: text
      type: System.String
      description: String to measure.
    - id: font
      type: System.Drawing.Font
      description: <xref href="System.Drawing.Font"></xref> that defines the text format of the string.
    return:
      type: System.Drawing.SizeF
      description: This method returns a <xref href="System.Drawing.SizeF"></xref> structure that represents the size, in the units specified by the <xref href="System.Drawing.Graphics.PageUnit"></xref> property, of the string specified by the <code>text</code> parameter as drawn with the <code>font</code> parameter.
  overload: System.Drawing.Graphics.MeasureString*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>font</code> is `null`.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font,System.Drawing.SizeF)
  commentId: M:System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font,System.Drawing.SizeF)
  id: MeasureString(System.String,System.Drawing.Font,System.Drawing.SizeF)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: MeasureString(String, Font, SizeF)
  nameWithType: Graphics.MeasureString(String, Font, SizeF)
  fullName: Graphics.MeasureString(String, Font, SizeF)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Measures the specified string when drawn with the specified <xref href="System.Drawing.Font"></xref> within the specified layout area.
  remarks: The <xref:System.Drawing.Graphics.MeasureString%2A> method is designed for use with individual strings and includes a small amount of extra space before and after the string to allow for overhanging glyphs. Also, the <xref:System.Drawing.Graphics.DrawString%2A> method adjusts glyph points to optimize display quality and might display a string narrower than reported by <xref:System.Drawing.Graphics.MeasureString%2A>. To obtain metrics suitable for adjacent strings in layout (for example, when implementing formatted text), use the <xref:System.Drawing.Graphics.MeasureCharacterRanges%2A> method or one of the <xref:System.Drawing.Graphics.MeasureString%2A> methods that takes a <xref:System.Drawing.StringFormat>, and pass <xref:System.Drawing.StringFormat.GenericTypographic%2A>. Also, ensure the <xref:System.Drawing.Graphics.TextRenderingHint%2A> for the <xref:System.Drawing.Graphics> is <xref:System.Drawing.Text.TextRenderingHint.AntiAlias>.
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates a string to measure and a font object set to Arial (16 point).  \n  \n-   Sets the maximum layout size of the string.  \n  \n-   Creates a size object and uses it, the font object, and the maximum layout size to measure the size of the string.  \n  \n-   Draws a red rectangle using the measured size of the string.  \n  \n-   Draws the string within the drawn rectangle.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples3#138](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#138)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples3#138](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#138)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples3#138](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#138)]"
  syntax:
    content: public System.Drawing.SizeF MeasureString (string text, System.Drawing.Font font, System.Drawing.SizeF layoutArea);
    parameters:
    - id: text
      type: System.String
      description: String to measure.
    - id: font
      type: System.Drawing.Font
      description: <xref href="System.Drawing.Font"></xref> defines the text format of the string.
    - id: layoutArea
      type: System.Drawing.SizeF
      description: <xref href="System.Drawing.SizeF"></xref> structure that specifies the maximum layout area for the text.
    return:
      type: System.Drawing.SizeF
      description: This method returns a <xref href="System.Drawing.SizeF"></xref> structure that represents the size, in the units specified by the <xref href="System.Drawing.Graphics.PageUnit"></xref> property, of the string specified by the <code>text</code> parameter as drawn with the <code>font</code> parameter.
  overload: System.Drawing.Graphics.MeasureString*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>font</code> is `null`.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font,System.Int32)
  commentId: M:System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font,System.Int32)
  id: MeasureString(System.String,System.Drawing.Font,System.Int32)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: MeasureString(String, Font, Int32)
  nameWithType: Graphics.MeasureString(String, Font, Int32)
  fullName: Graphics.MeasureString(String, Font, Int32)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Measures the specified string when drawn with the specified <xref href="System.Drawing.Font"></xref>.
  remarks: "The `width` parameter specifies the maximum value of the width component of the returned <xref:System.Drawing.SizeF> structure (<xref:System.Drawing.SizeF.Width%2A>). If the `width` parameter is less than the actual width of the string, the returned <xref:System.Drawing.SizeF.Width%2A> component is truncated to a value representing the maximum number of characters that will fit within the specified width. To accommodate the entire string, the returned <xref:System.Drawing.SizeF.Height%2A> component is adjusted to a value that allows displaying the string with character wrap.  \n  \n The <xref:System.Drawing.Graphics.MeasureString%2A> method is designed for use with individual strings and includes a small amount of extra space before and after the string to allow for overhanging glyphs. Also, the <xref:System.Drawing.Graphics.DrawString%2A> method adjusts glyph points to optimize display quality and might display a string narrower than reported by <xref:System.Drawing.Graphics.MeasureString%2A>. To obtain metrics suitable for adjacent strings in layout (for example, when implementing formatted text), use the <xref:System.Drawing.Graphics.MeasureCharacterRanges%2A> method or one of the <xref:System.Drawing.Graphics.MeasureString%2A> methods that takes a <xref:System.Drawing.StringFormat>, and pass <xref:System.Drawing.StringFormat.GenericTypographic%2A>. Also, ensure the <xref:System.Drawing.Graphics.TextRenderingHint%2A> for the <xref:System.Drawing.Graphics> is <xref:System.Drawing.Text.TextRenderingHint.AntiAlias>."
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates a string to measure and a font object set to Arial (16 point).  \n  \n-   Sets the maximum width of the string.  \n  \n-   Creates a size object and uses it, the font object, and the maximum string width to measure the size of the string.  \n  \n-   Draws a red rectangle using the measured size of the string.  \n  \n-   Draws the string within the drawn rectangle.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples3#141](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#141)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples3#141](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#141)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples3#141](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#141)]"
  syntax:
    content: public System.Drawing.SizeF MeasureString (string text, System.Drawing.Font font, int width);
    parameters:
    - id: text
      type: System.String
      description: String to measure.
    - id: font
      type: System.Drawing.Font
      description: <xref href="System.Drawing.Font"></xref> that defines the format of the string.
    - id: width
      type: System.Int32
      description: Maximum width of the string in pixels.
    return:
      type: System.Drawing.SizeF
      description: This method returns a <xref href="System.Drawing.SizeF"></xref> structure that represents the size, in the units specified by the <xref href="System.Drawing.Graphics.PageUnit"></xref> property, of the string specified in the <code>text</code> parameter as drawn with the <code>font</code> parameter.
  overload: System.Drawing.Graphics.MeasureString*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>font</code> is `null`.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font,System.Drawing.PointF,System.Drawing.StringFormat)
  commentId: M:System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font,System.Drawing.PointF,System.Drawing.StringFormat)
  id: MeasureString(System.String,System.Drawing.Font,System.Drawing.PointF,System.Drawing.StringFormat)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: MeasureString(String, Font, PointF, StringFormat)
  nameWithType: Graphics.MeasureString(String, Font, PointF, StringFormat)
  fullName: Graphics.MeasureString(String, Font, PointF, StringFormat)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Measures the specified string when drawn with the specified <xref href="System.Drawing.Font"></xref> and formatted with the specified <xref href="System.Drawing.StringFormat"></xref>.
  remarks: The <xref:System.Drawing.Graphics.MeasureString%2A> method is designed for use with individual strings and includes a small amount of extra space before and after the string to allow for overhanging glyphs. Also, the <xref:System.Drawing.Graphics.DrawString%2A> method adjusts glyph points to optimize display quality and might display a string narrower than reported by <xref:System.Drawing.Graphics.MeasureString%2A>. To obtain metrics suitable for adjacent strings in layout (for example, when implementing formatted text), use the <xref:System.Drawing.Graphics.MeasureCharacterRanges%2A> method or one of the <xref:System.Drawing.Graphics.MeasureString%2A> methods that takes a <xref:System.Drawing.StringFormat>, and pass <xref:System.Drawing.StringFormat.GenericTypographic%2A>. Also, ensure the <xref:System.Drawing.Graphics.TextRenderingHint%2A> for the <xref:System.Drawing.Graphics> is <xref:System.Drawing.Text.TextRenderingHint.AntiAlias>.
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates a string to measure and a font object set to Arial (16 point)  \n  \n-   Creates a point to locate the upper-left corner of the string.  \n  \n-   Creates a string format object and sets its format flags to <xref:System.Drawing.StringFormatFlags.DirectionVertical>.  \n  \n-   Creates a size object to measure the string.  \n  \n-   Measures the size of the string, using the string, the font object, the locating point, and the string format.  \n  \n-   Draws a red rectangle using the locating point and the measured size of the string.  \n  \n-   Draws the string within the drawn rectangle.  \n  \n The result is a vertical rectangle enclosing a vertical string.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples3#137](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#137)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples3#137](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#137)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples3#137](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#137)]"
  syntax:
    content: public System.Drawing.SizeF MeasureString (string text, System.Drawing.Font font, System.Drawing.PointF origin, System.Drawing.StringFormat stringFormat);
    parameters:
    - id: text
      type: System.String
      description: String to measure.
    - id: font
      type: System.Drawing.Font
      description: <xref href="System.Drawing.Font"></xref> defines the text format of the string.
    - id: origin
      type: System.Drawing.PointF
      description: <xref href="System.Drawing.PointF"></xref> structure that represents the upper-left corner of the string.
    - id: stringFormat
      type: System.Drawing.StringFormat
      description: <xref href="System.Drawing.StringFormat"></xref> that represents formatting information, such as line spacing, for the string.
    return:
      type: System.Drawing.SizeF
      description: This method returns a <xref href="System.Drawing.SizeF"></xref> structure that represents the size, in the units specified by the <xref href="System.Drawing.Graphics.PageUnit"></xref> property, of the string specified by the <code>text</code> parameter as drawn with the <code>font</code> parameter and the <code>stringFormat</code> parameter.
  overload: System.Drawing.Graphics.MeasureString*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>font</code> is `null`.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font,System.Drawing.SizeF,System.Drawing.StringFormat)
  commentId: M:System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font,System.Drawing.SizeF,System.Drawing.StringFormat)
  id: MeasureString(System.String,System.Drawing.Font,System.Drawing.SizeF,System.Drawing.StringFormat)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: MeasureString(String, Font, SizeF, StringFormat)
  nameWithType: Graphics.MeasureString(String, Font, SizeF, StringFormat)
  fullName: Graphics.MeasureString(String, Font, SizeF, StringFormat)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Measures the specified string when drawn with the specified <xref href="System.Drawing.Font"></xref> and formatted with the specified <xref href="System.Drawing.StringFormat"></xref>.
  remarks: The <xref:System.Drawing.Graphics.MeasureString%2A> method is designed for use with individual strings and includes a small amount of extra space before and after the string to allow for overhanging glyphs. Also, the <xref:System.Drawing.Graphics.DrawString%2A> method adjusts glyph points to optimize display quality and might display a string narrower than reported by <xref:System.Drawing.Graphics.MeasureString%2A>. To obtain metrics suitable for adjacent strings in layout (for example, when implementing formatted text), use the <xref:System.Drawing.Graphics.MeasureCharacterRanges%2A> method or one of the <xref:System.Drawing.Graphics.MeasureString%2A> methods that takes a <xref:System.Drawing.StringFormat>, and pass <xref:System.Drawing.StringFormat.GenericTypographic%2A>. Also, ensure the <xref:System.Drawing.Graphics.TextRenderingHint%2A> for the <xref:System.Drawing.Graphics> is <xref:System.Drawing.Text.TextRenderingHint.AntiAlias>.
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates a string to measure and a font object set to Arial (16 point).  \n  \n-   Sets the maximum layout size of the string, creating a size object to measure the string.  \n  \n-   Creates a string format object and sets its format flags to <xref:System.Drawing.StringFormatFlags.DirectionVertical>.  \n  \n-   Measures the size of the string, using the string, the font object, the maximum layout size, and the string format.  \n  \n-   Draws a red rectangle using the measured size of the string.  \n  \n-   Draws the string within the drawn rectangle.  \n  \n The result is a vertical rectangle enclosing a vertical string.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples3#139](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#139)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples3#139](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#139)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples3#139](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#139)]"
  syntax:
    content: public System.Drawing.SizeF MeasureString (string text, System.Drawing.Font font, System.Drawing.SizeF layoutArea, System.Drawing.StringFormat stringFormat);
    parameters:
    - id: text
      type: System.String
      description: String to measure.
    - id: font
      type: System.Drawing.Font
      description: <xref href="System.Drawing.Font"></xref> defines the text format of the string.
    - id: layoutArea
      type: System.Drawing.SizeF
      description: <xref href="System.Drawing.SizeF"></xref> structure that specifies the maximum layout area for the text.
    - id: stringFormat
      type: System.Drawing.StringFormat
      description: <xref href="System.Drawing.StringFormat"></xref> that represents formatting information, such as line spacing, for the string.
    return:
      type: System.Drawing.SizeF
      description: This method returns a <xref href="System.Drawing.SizeF"></xref> structure that represents the size, in the units specified by the <xref href="System.Drawing.Graphics.PageUnit"></xref> property, of the string specified in the <code>text</code> parameter as drawn with the <code>font</code> parameter and the <code>stringFormat</code> parameter.
  overload: System.Drawing.Graphics.MeasureString*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>font</code> is `null`.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font,System.Int32,System.Drawing.StringFormat)
  commentId: M:System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font,System.Int32,System.Drawing.StringFormat)
  id: MeasureString(System.String,System.Drawing.Font,System.Int32,System.Drawing.StringFormat)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: MeasureString(String, Font, Int32, StringFormat)
  nameWithType: Graphics.MeasureString(String, Font, Int32, StringFormat)
  fullName: Graphics.MeasureString(String, Font, Int32, StringFormat)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Measures the specified string when drawn with the specified <xref href="System.Drawing.Font"></xref> and formatted with the specified <xref href="System.Drawing.StringFormat"></xref>.
  remarks: The <xref:System.Drawing.Graphics.MeasureString%2A> method is designed for use with individual strings and includes a small amount of extra space before and after the string to allow for overhanging glyphs. Also, the <xref:System.Drawing.Graphics.DrawString%2A> method adjusts glyph points to optimize display quality and might display a string narrower than reported by <xref:System.Drawing.Graphics.MeasureString%2A>. To obtain metrics suitable for adjacent strings in layout (for example, when implementing formatted text), use the <xref:System.Drawing.Graphics.MeasureCharacterRanges%2A> method or one of the <xref:System.Drawing.Graphics.MeasureString%2A> methods that takes a <xref:System.Drawing.StringFormat>, and pass <xref:System.Drawing.StringFormat.GenericTypographic%2A>. Also, ensure the <xref:System.Drawing.Graphics.TextRenderingHint%2A> for the <xref:System.Drawing.Graphics> is <xref:System.Drawing.Text.TextRenderingHint.AntiAlias>.
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates a string to measure and a font object set it to Arial (16 point).  \n  \n-   Sets the maximum width of the string.  \n  \n-   Creates a string format object and sets its format flags to<xref:System.Drawing.StringFormatFlags.DirectionVertical>.  \n  \n-   Creates a size object to measure the string.  \n  \n-   Measures the size of the string, using the string, the font object, the maximum width, and the string format.  \n  \n-   Draws a red rectangle using the measured size of the string.  \n  \n-   Draws the string within the drawn rectangle.  \n  \n The result is a vertical rectangle enclosing a vertical string.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples3#142](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#142)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples3#142](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#142)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples3#142](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#142)]"
  syntax:
    content: public System.Drawing.SizeF MeasureString (string text, System.Drawing.Font font, int width, System.Drawing.StringFormat format);
    parameters:
    - id: text
      type: System.String
      description: String to measure.
    - id: font
      type: System.Drawing.Font
      description: <xref href="System.Drawing.Font"></xref> that defines the text format of the string.
    - id: width
      type: System.Int32
      description: Maximum width of the string.
    - id: format
      type: System.Drawing.StringFormat
      description: <xref href="System.Drawing.StringFormat"></xref> that represents formatting information, such as line spacing, for the string.
    return:
      type: System.Drawing.SizeF
      description: This method returns a <xref href="System.Drawing.SizeF"></xref> structure that represents the size, in the units specified by the <xref href="System.Drawing.Graphics.PageUnit"></xref> property, of the string specified in the <code>text</code> parameter as drawn with the <code>font</code> parameter and the <code>stringFormat</code> parameter.
  overload: System.Drawing.Graphics.MeasureString*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>font</code> is `null`.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font,System.Drawing.SizeF,System.Drawing.StringFormat,System.Int32@,System.Int32@)
  commentId: M:System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font,System.Drawing.SizeF,System.Drawing.StringFormat,System.Int32@,System.Int32@)
  id: MeasureString(System.String,System.Drawing.Font,System.Drawing.SizeF,System.Drawing.StringFormat,System.Int32@,System.Int32@)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: MeasureString(String, Font, SizeF, StringFormat, Int32, Int32)
  nameWithType: Graphics.MeasureString(String, Font, SizeF, StringFormat, Int32, Int32)
  fullName: Graphics.MeasureString(String, Font, SizeF, StringFormat, Int32, Int32)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Measures the specified string when drawn with the specified <xref href="System.Drawing.Font"></xref> and formatted with the specified <xref href="System.Drawing.StringFormat"></xref>.
  remarks: The <xref:System.Drawing.Graphics.MeasureString%2A> method is designed for use with individual strings and includes a small amount of extra space before and after the string to allow for overhanging glyphs. Also, the <xref:System.Drawing.Graphics.DrawString%2A> method adjusts glyph points to optimize display quality and might display a string narrower than reported by <xref:System.Drawing.Graphics.MeasureString%2A>. To obtain metrics suitable for adjacent strings in layout (for example, when implementing formatted text), use the <xref:System.Drawing.Graphics.MeasureCharacterRanges%2A> method or one of the <xref:System.Drawing.Graphics.MeasureString%2A> methods that takes a <xref:System.Drawing.StringFormat> and pass <xref:System.Drawing.StringFormat.GenericTypographic%2A>. Also ensure the <xref:System.Drawing.Graphics.TextRenderingHint%2A> for the <xref:System.Drawing.Graphics> is <xref:System.Drawing.Text.TextRenderingHint.AntiAlias>.
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates a string to measure and a font object set to Arial (16 point)  \n  \n-   Sets the maximum layout size of the string.  \n  \n-   Creates a string format object and sets its format flags to <xref:System.Drawing.StringFormatFlags.DirectionVertical>.  \n  \n-   Creates the integer variables `charactersFitted` and `linesFilled` and a size object to measure the string.  \n  \n-   Measures the size of the string and determines the number of characters fitted and lines filled, using the string, the font object, the maximum layout size, and the string format.  \n  \n-   Draws a red rectangle using the measured size of the string.  \n  \n-   Draws the string within the drawn rectangle.  \n  \n-   Draws the values of the number of characters fitted and lines filled.  \n  \n The result is a vertical rectangle enclosing a vertical string.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples3#140](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#140)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples3#140](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#140)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples3#140](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#140)]"
  syntax:
    content: public System.Drawing.SizeF MeasureString (string text, System.Drawing.Font font, System.Drawing.SizeF layoutArea, System.Drawing.StringFormat stringFormat, out int charactersFitted, out int linesFilled);
    parameters:
    - id: text
      type: System.String
      description: String to measure.
    - id: font
      type: System.Drawing.Font
      description: <xref href="System.Drawing.Font"></xref> that defines the text format of the string.
    - id: layoutArea
      type: System.Drawing.SizeF
      description: <xref href="System.Drawing.SizeF"></xref> structure that specifies the maximum layout area for the text.
    - id: stringFormat
      type: System.Drawing.StringFormat
      description: <xref href="System.Drawing.StringFormat"></xref> that represents formatting information, such as line spacing, for the string.
    - id: charactersFitted
      type: System.Int32
      description: Number of characters in the string.
    - id: linesFilled
      type: System.Int32
      description: Number of text lines in the string.
    return:
      type: System.Drawing.SizeF
      description: This method returns a <xref href="System.Drawing.SizeF"></xref> structure that represents the size of the string, in the units specified by the <xref href="System.Drawing.Graphics.PageUnit"></xref> property, of the <code>text</code> parameter as drawn with the <code>font</code> parameter and the <code>stringFormat</code> parameter.
  overload: System.Drawing.Graphics.MeasureString*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>font</code> is `null`.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.MultiplyTransform(System.Drawing.Drawing2D.Matrix)
  commentId: M:System.Drawing.Graphics.MultiplyTransform(System.Drawing.Drawing2D.Matrix)
  id: MultiplyTransform(System.Drawing.Drawing2D.Matrix)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: MultiplyTransform(Matrix)
  nameWithType: Graphics.MultiplyTransform(Matrix)
  fullName: Graphics.MultiplyTransform(Matrix)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Multiplies the world transformation of this <xref href="System.Drawing.Graphics"></xref> and specified the <xref href="System.Drawing.Drawing2D.Matrix"></xref>.
  remarks: This method prepends the matrix specified by the `matrix` parameter, so that the result is `matrix` x world transformation.
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates a `transformMatrix` matrix (a two by two identity matrix plus a zero-translation vector).  \n  \n-   Translates the transform matrix by a vector (200, 100).  \n  \n-   Rotates the world transformation matrix of the Windows Form by 30 degrees, prepends the rotation matrix for 30 degrees to the form's transformation matrix.  \n  \n-   Multiplies the rotated world transformation matrix by the translated `transformMatrix`, and prepends the `transformMatrix` to the world transformation matrix.  \n  \n-   Draws a rotated, translated ellipse.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples3#143](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#143)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples3#143](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#143)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples3#143](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#143)]"
  syntax:
    content: public void MultiplyTransform (System.Drawing.Drawing2D.Matrix matrix);
    parameters:
    - id: matrix
      type: System.Drawing.Drawing2D.Matrix
      description: 4x4 <xref href="System.Drawing.Drawing2D.Matrix"></xref> that multiplies the world transformation.
  overload: System.Drawing.Graphics.MultiplyTransform*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.MultiplyTransform(System.Drawing.Drawing2D.Matrix,System.Drawing.Drawing2D.MatrixOrder)
  commentId: M:System.Drawing.Graphics.MultiplyTransform(System.Drawing.Drawing2D.Matrix,System.Drawing.Drawing2D.MatrixOrder)
  id: MultiplyTransform(System.Drawing.Drawing2D.Matrix,System.Drawing.Drawing2D.MatrixOrder)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: MultiplyTransform(Matrix, MatrixOrder)
  nameWithType: Graphics.MultiplyTransform(Matrix, MatrixOrder)
  fullName: Graphics.MultiplyTransform(Matrix, MatrixOrder)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Multiplies the world transformation of this <xref href="System.Drawing.Graphics"></xref> and specified the <xref href="System.Drawing.Drawing2D.Matrix"></xref> in the specified order.
  remarks: A value of<xref:System.Drawing.Drawing2D.MatrixOrder.Prepend> for the `order` parameter specifies that the order of the multiplication is `matrix` x world transformation. A value of <xref:System.Drawing.Drawing2D.MatrixOrder.Append> for `order` specifies that the order of the multiplication is world transformation x `matrix`.
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates a `transformMatrix` matrix (a two by two identity matrix plus a zero-translation vector).  \n  \n-   Translates the transform matrix by a vector (200, 100).  \n  \n-   Rotates the world transformation matrix of the Windows Form by 30 degrees, prepending the rotation matrix for 30 degrees to the form's transformation matrix.  \n  \n-   Multiplies the rotated world transformation matrix by the translated `transformMatrix`, appending the `transformMatrix` to the world transformation matrix.  \n  \n-   Draws a rotated, translated ellipse.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples3#144](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#144)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples3#144](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#144)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples3#144](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#144)]"
  syntax:
    content: public void MultiplyTransform (System.Drawing.Drawing2D.Matrix matrix, System.Drawing.Drawing2D.MatrixOrder order);
    parameters:
    - id: matrix
      type: System.Drawing.Drawing2D.Matrix
      description: 4x4 <xref href="System.Drawing.Drawing2D.Matrix"></xref> that multiplies the world transformation.
    - id: order
      type: System.Drawing.Drawing2D.MatrixOrder
      description: Member of the <xref href="System.Drawing.Drawing2D.MatrixOrder"></xref> enumeration that determines the order of the multiplication.
  overload: System.Drawing.Graphics.MultiplyTransform*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.PageScale
  commentId: P:System.Drawing.Graphics.PageScale
  id: PageScale
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: PageScale
  nameWithType: Graphics.PageScale
  fullName: Graphics.PageScale
  type: Property
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Gets or sets the scaling between world units and page units for this <xref href="System.Drawing.Graphics"></xref>.
  remarks: ''
  example:
  - "The following code example demonstrates how to use the <xref:System.Drawing.Graphics.PageScale%2A> and <xref:System.Drawing.Graphics.TranslateTransform%2A> members to change the scale and origin when you draw a rectangle.  \n  \n This example is designed to be used with Windows Forms. Paste the code into a form and call the `ChangePageScaleAndTranslateTransform` method when handling the form's <xref:System.Windows.Forms.Control.Paint> event, passing `e` as <xref:System.Windows.Forms.PaintEventArgs>.  \n  \n [!code-cpp[System.Drawing.GraphicsProperties#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/CPP/form1.cpp#2)]\n [!code-csharp[System.Drawing.GraphicsProperties#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/CS/form1.cs#2)]\n [!code-vb[System.Drawing.GraphicsProperties#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/VB/form1.vb#2)]"
  syntax:
    content: public float PageScale { get; set; }
    return:
      type: System.Single
      description: This property specifies a value for the scaling between world units and page units for this <xref href="System.Drawing.Graphics"></xref>.
  overload: System.Drawing.Graphics.PageScale*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.PageUnit
  commentId: P:System.Drawing.Graphics.PageUnit
  id: PageUnit
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: PageUnit
  nameWithType: Graphics.PageUnit
  fullName: Graphics.PageUnit
  type: Property
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Gets or sets the unit of measure used for page coordinates in this <xref href="System.Drawing.Graphics"></xref>.
  remarks: The graphics unit is the unit of measure used for page coordinates in this <xref:System.Drawing.Graphics>.
  example:
  - "The following code example demonstrates the effect of changing the <xref:System.Drawing.Graphics.PageUnit%2A> property.  \n  \n This example is designed to be used with Windows Forms. Paste the code into a form and call the `ChangePageUnit` method when handling the form's <xref:System.Windows.Forms.Control.Paint> event, passing `e` as <xref:System.Windows.Forms.PaintEventArgs>.  \n  \n [!code-cpp[System.Drawing.GraphicsProperties#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/CPP/form1.cpp#3)]\n [!code-csharp[System.Drawing.GraphicsProperties#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/CS/form1.cs#3)]\n [!code-vb[System.Drawing.GraphicsProperties#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/VB/form1.vb#3)]"
  syntax:
    content: public System.Drawing.GraphicsUnit PageUnit { get; set; }
    return:
      type: System.Drawing.GraphicsUnit
      description: One of the <xref href="System.Drawing.GraphicsUnit"></xref> values other than <xref href="System.Drawing.GraphicsUnit.World"></xref>.
  overload: System.Drawing.Graphics.PageUnit*
  exceptions:
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: <xref href="System.Drawing.Graphics.PageUnit"></xref> is set to <xref href="System.Drawing.GraphicsUnit.World"></xref>, which is not a physical unit.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.PixelOffsetMode
  commentId: P:System.Drawing.Graphics.PixelOffsetMode
  id: PixelOffsetMode
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: PixelOffsetMode
  nameWithType: Graphics.PixelOffsetMode
  fullName: Graphics.PixelOffsetMode
  type: Property
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Gets or set a value specifying how pixels are offset during rendering of this <xref href="System.Drawing.Graphics"></xref>.
  remarks: Use this property to specify either higher quality, slower rendering, or lower quality, faster rendering of the contents of this<xref:System.Drawing.Graphics>object.
  syntax:
    content: public System.Drawing.Drawing2D.PixelOffsetMode PixelOffsetMode { get; set; }
    return:
      type: System.Drawing.Drawing2D.PixelOffsetMode
      description: This property specifies a member of the <xref href="System.Drawing.Drawing2D.PixelOffsetMode"></xref> enumeration
  overload: System.Drawing.Graphics.PixelOffsetMode*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.ReleaseHdc
  commentId: M:System.Drawing.Graphics.ReleaseHdc
  id: ReleaseHdc
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: ReleaseHdc()
  nameWithType: Graphics.ReleaseHdc()
  fullName: Graphics.ReleaseHdc()
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Releases a device context handle obtained by a previous call to the <xref href="System.Drawing.Graphics.GetHdc"></xref> method of this <xref href="System.Drawing.Graphics"></xref>.
  remarks: <xref:System.Drawing.Graphics.GetHdc%2A> and <xref:System.Drawing.Graphics.ReleaseHdc%2A> are two methods that allow you to get and release the handle for a Windows device. You should always follow a call to <xref:System.Drawing.Graphics.GetHdc%2A> with a call to <xref:System.Drawing.Graphics.ReleaseHdc%2A> when you are finished with the Windows handle.
  syntax:
    content: public void ReleaseHdc ();
    parameters: []
  overload: System.Drawing.Graphics.ReleaseHdc*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.ReleaseHdc(System.IntPtr)
  commentId: M:System.Drawing.Graphics.ReleaseHdc(System.IntPtr)
  id: ReleaseHdc(System.IntPtr)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: ReleaseHdc(IntPtr)
  nameWithType: Graphics.ReleaseHdc(IntPtr)
  fullName: Graphics.ReleaseHdc(IntPtr)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Releases a device context handle obtained by a previous call to the <xref href="System.Drawing.Graphics.GetHdc"></xref> method of this <xref href="System.Drawing.Graphics"></xref>.
  remarks: "The device context is a Windows structure based on [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] that defines a set of graphical objects and their associated attributes, as well as the graphical modes that affect output.  \n  \n Calls to the <xref:System.Drawing.Graphics.GetHdc%2A> and <xref:System.Drawing.Graphics.ReleaseHdc%2A> methods must appear in pairs. During the scope of a <xref:System.Drawing.Graphics.GetHdc%2A> and <xref:System.Drawing.Graphics.ReleaseHdc%2A> method pair, you usually make calls only to [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] functions. Calls in that scope made to [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] methods of the <xref:System.Drawing.Graphics> that produced the `hdc` parameter fail with an `ObjectBusy` error. Also, [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] ignores any state changes made to the <xref:System.Drawing.Graphics> of the `hdc` parameter in subsequent operations."
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The example illustrates calling a Windows [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] function to perform the same task as a [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] <xref:System.Drawing.Graphics> method. The code performs the following actions:  \n  \n-   Defines the interoperability <xref:System.Runtime.InteropServices.DllImportAttribute> attribute for the Windows DLL file gdi32.dll. This DLL contains the desired [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] function, and it defines the <xref:System.Drawing.Rectangle> function in that DLL as external.  \n  \n-   Creates a red pen.  \n  \n-   With the pen, draws a rectangle to the screen using the [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] <xref:System.Drawing.Graphics.DrawRectangle%2A> method.  \n  \n-   Defines an internal pointer type variable `hdc` and sets its value to the handle to the device context of the form.  \n  \n-   Draws a rectangle to the screen using the [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] <xref:System.Drawing.Rectangle> function.  \n  \n-   Releases the device context represented by the `hdc` parameter.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples3#145](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#145)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples3#145](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#145)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples3#145](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#145)]"
  syntax:
    content: public void ReleaseHdc (IntPtr hdc);
    parameters:
    - id: hdc
      type: System.IntPtr
      description: Handle to a device context obtained by a previous call to the <xref href="System.Drawing.Graphics.GetHdc"></xref> method of this <xref href="System.Drawing.Graphics"></xref>.
  overload: System.Drawing.Graphics.ReleaseHdc*
  exceptions: []
  attributes: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.ReleaseHdcInternal(System.IntPtr)
  commentId: M:System.Drawing.Graphics.ReleaseHdcInternal(System.IntPtr)
  id: ReleaseHdcInternal(System.IntPtr)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: ReleaseHdcInternal(IntPtr)
  nameWithType: Graphics.ReleaseHdcInternal(IntPtr)
  fullName: Graphics.ReleaseHdcInternal(IntPtr)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Releases a handle to a device context.
  syntax:
    content: public void ReleaseHdcInternal (IntPtr hdc);
    parameters:
    - id: hdc
      type: System.IntPtr
      description: Handle to a device context.
  overload: System.Drawing.Graphics.ReleaseHdcInternal*
  exceptions: []
  attributes: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.RenderingOrigin
  commentId: P:System.Drawing.Graphics.RenderingOrigin
  id: RenderingOrigin
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: RenderingOrigin
  nameWithType: Graphics.RenderingOrigin
  fullName: Graphics.RenderingOrigin
  type: Property
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Gets or sets the rendering origin of this <xref href="System.Drawing.Graphics"></xref> for dithering and for hatch brushes.
  syntax:
    content: public System.Drawing.Point RenderingOrigin { get; set; }
    return:
      type: System.Drawing.Point
      description: A <xref href="System.Drawing.Point"></xref> structure that represents the dither origin for 8-bits-per-pixel and 16-bits-per-pixel dithering and is also used to set the origin for hatch brushes.
  overload: System.Drawing.Graphics.RenderingOrigin*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.ResetClip
  commentId: M:System.Drawing.Graphics.ResetClip
  id: ResetClip
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: ResetClip()
  nameWithType: Graphics.ResetClip()
  fullName: Graphics.ResetClip()
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Resets the clip region of this <xref href="System.Drawing.Graphics"></xref> to an infinite region.
  remarks: When the clipping region of a <xref:System.Drawing.Graphics> is infinite, items that this <xref:System.Drawing.Graphics> draws are not clipped.
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates a rectangle with upper-left corner at (0, 0) and sets the clipping region to this rectangle.  \n  \n-   Creates a second rectangle with upper-left corner at (100, 100) and sets the clipping region to the intersection of this rectangle and the current clipping region (the first rectangle).  \n  \n-   Fills a large rectangle that includes both previous rectangles with a solid blue brush.  \n  \n-   Resets the clipping region to infinite.  \n  \n-   Draws rectangles around the two clipping regions; it uses a black pen for the first clipping rectangle and a red pen for the second clipping region.  \n  \n The result is that only the intersection of the two rectangles is filled with blue.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples3#146](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#146)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples3#146](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#146)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples3#146](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#146)]"
  syntax:
    content: public void ResetClip ();
    parameters: []
  overload: System.Drawing.Graphics.ResetClip*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.ResetTransform
  commentId: M:System.Drawing.Graphics.ResetTransform
  id: ResetTransform
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: ResetTransform()
  nameWithType: Graphics.ResetTransform()
  fullName: Graphics.ResetTransform()
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Resets the world transformation matrix of this <xref href="System.Drawing.Graphics"></xref> to the identity matrix.
  remarks: The identity matrix represents a transformation with no scaling, rotation, or translation. Resetting the world transformation of this <xref:System.Drawing.Graphics> to the identity matrix means that its world transformation does not change the geometry of transformed items.
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Translates the world transform of the Windows Form by a vector (100, 0).  \n  \n-   Saves the graphics state of the form.  \n  \n-   Resets the world transform of the form to an identity and fills a rectangle with a solid red brush.  \n  \n-   Restores the translated graphics state and fills a rectangle with a solid blue brush.  \n  \n The result is an untranslated red-filled rectangle and a translated blue-filled rectangle.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples3#147](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#147)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples3#147](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#147)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples3#147](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#147)]"
  syntax:
    content: public void ResetTransform ();
    parameters: []
  overload: System.Drawing.Graphics.ResetTransform*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.Restore(System.Drawing.Drawing2D.GraphicsState)
  commentId: M:System.Drawing.Graphics.Restore(System.Drawing.Drawing2D.GraphicsState)
  id: Restore(System.Drawing.Drawing2D.GraphicsState)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: Restore(GraphicsState)
  nameWithType: Graphics.Restore(GraphicsState)
  fullName: Graphics.Restore(GraphicsState)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Restores the state of this <xref href="System.Drawing.Graphics"></xref> to the state represented by a <xref href="System.Drawing.Drawing2D.GraphicsState"></xref>.
  remarks: "When you call the <xref:System.Drawing.Graphics.Save%2A> method of a <xref:System.Drawing.Graphics>, an information block that holds the state of the <xref:System.Drawing.Graphics> is put on a stack. The <xref:System.Drawing.Graphics.Save%2A> method returns a <xref:System.Drawing.Drawing2D.GraphicsState> that identifies that information block. When you pass the identifying <xref:System.Drawing.Drawing2D.GraphicsState> to the<xref:System.Drawing.Graphics.Restore%2A> method, the information block is removed from the stack and is used to restore the <xref:System.Drawing.Graphics> to the state it was in at the time of the <xref:System.Drawing.Graphics.Save%2A> method call. Note that the <xref:System.Drawing.Drawing2D.GraphicsState> returned by a given call to the <xref:System.Drawing.Graphics.Save%2A> method can be passed only once to the `Restore` method.  \n  \n Calls to the <xref:System.Drawing.Graphics.Save%2A> method can be nested; that is, you can call the <xref:System.Drawing.Graphics.Save%2A> method several times before you call the <xref:System.Drawing.Graphics.Restore%2A> method. Each time you call the <xref:System.Drawing.Graphics.Save%2A> method, an information block is put on the stack, and you receive a <xref:System.Drawing.Drawing2D.GraphicsState> for the information block. When you pass one of those objects to the <xref:System.Drawing.Graphics.Restore%2A> method, the <xref:System.Drawing.Graphics> is returned to the state it was in at the time of the <xref:System.Drawing.Graphics.Save%2A> method call that returned that particular <xref:System.Drawing.Drawing2D.GraphicsState>. The information block placed on the stack by that <xref:System.Drawing.Graphics.Save%2A> method call is removed from the stack, and all information blocks placed on that stack after that <xref:System.Drawing.Graphics.Save%2A> method call are also removed.  \n  \n Calls to the <xref:System.Drawing.Graphics.BeginContainer%2A> method place information blocks on the same stack as calls to the <xref:System.Drawing.Graphics.Save%2A> method. Just as a <xref:System.Drawing.Graphics.Restore%2A> call is paired with a <xref:System.Drawing.Graphics.Save%2A> call, a <xref:System.Drawing.Graphics.EndContainer%2A> method call is paired with a <xref:System.Drawing.Graphics.BeginContainer%2A> method call.  \n  \n When you call the <xref:System.Drawing.Graphics.Restore%2A> method, all information blocks placed on the stack (by the <xref:System.Drawing.Graphics.Save%2A> method or by the <xref:System.Drawing.Graphics.BeginContainer%2A> method) after the corresponding call to the <xref:System.Drawing.Graphics.Save%2A> method are removed from the stack. Likewise, when you call the <xref:System.Drawing.Graphics.EndContainer%2A> method, all information blocks placed on the stack (by the <xref:System.Drawing.Graphics.Save%2A> method or by the <xref:System.Drawing.Graphics.BeginContainer%2A> method) after the corresponding call to the <xref:System.Drawing.Graphics.BeginContainer%2A> method are removed from the stack."
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Translates the world transform of the Windows Form by a vector (100, 0).  \n  \n-   Saves the graphics state of the form.  \n  \n-   Resets the world transform of the form to an identity and fills a rectangle with a solid red brush.  \n  \n-   Restores the translated graphics state and fills a second rectangle with a solid blue brush.  \n  \n The result is an untranslated red-filled rectangle and a translated blue-filled rectangle.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples3#148](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#148)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples3#148](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#148)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples3#148](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#148)]"
  syntax:
    content: public void Restore (System.Drawing.Drawing2D.GraphicsState gstate);
    parameters:
    - id: gstate
      type: System.Drawing.Drawing2D.GraphicsState
      description: <xref href="System.Drawing.Drawing2D.GraphicsState"></xref> that represents the state to which to restore this <xref href="System.Drawing.Graphics"></xref>.
  overload: System.Drawing.Graphics.Restore*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.RotateTransform(System.Single)
  commentId: M:System.Drawing.Graphics.RotateTransform(System.Single)
  id: RotateTransform(System.Single)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: RotateTransform(Single)
  nameWithType: Graphics.RotateTransform(Single)
  fullName: Graphics.RotateTransform(Single)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Applies the specified rotation to the transformation matrix of this <xref href="System.Drawing.Graphics"></xref>.
  remarks: The rotation operation consists of multiplying the transformation matrix by a matrix whose elements are derived from the `angle` parameter. This method applies the rotation by prepending it to the transformation matrix.
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Translates the world transformation matrix of the Windows Form by the vector (100, 0).  \n  \n-   Rotates the world transformation by an angle of 30 degrees, prepending the rotation matrix to the world transformation matrix.  \n  \n-   Draws a rotated, translated ellipse with a blue pen.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples3#149](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#149)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples3#149](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#149)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples3#149](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#149)]"
  syntax:
    content: public void RotateTransform (float angle);
    parameters:
    - id: angle
      type: System.Single
      description: Angle of rotation in degrees.
  overload: System.Drawing.Graphics.RotateTransform*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.RotateTransform(System.Single,System.Drawing.Drawing2D.MatrixOrder)
  commentId: M:System.Drawing.Graphics.RotateTransform(System.Single,System.Drawing.Drawing2D.MatrixOrder)
  id: RotateTransform(System.Single,System.Drawing.Drawing2D.MatrixOrder)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: RotateTransform(Single, MatrixOrder)
  nameWithType: Graphics.RotateTransform(Single, MatrixOrder)
  fullName: Graphics.RotateTransform(Single, MatrixOrder)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Applies the specified rotation to the transformation matrix of this <xref href="System.Drawing.Graphics"></xref> in the specified order.
  remarks: The rotation operation consists of multiplying the transformation matrix by a matrix whose elements are derived from the `angle` parameter. This method prepends or appends the transformation matrix of the <xref:System.Drawing.Graphics> by the rotation matrix according to the `order` parameter.
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Translates the world transformation matrix of the Windows Form by the vector (100, 0).  \n  \n-   Rotates the world transform by an angle of 30 degrees, appending the rotation matrix to the world transformation matrix with <xref:System.Drawing.Drawing2D.MatrixOrder.Append>.  \n  \n-   Draws a translated, rotated ellipse with a blue pen.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples3#150](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#150)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples3#150](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#150)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples3#150](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#150)]"
  syntax:
    content: public void RotateTransform (float angle, System.Drawing.Drawing2D.MatrixOrder order);
    parameters:
    - id: angle
      type: System.Single
      description: Angle of rotation in degrees.
    - id: order
      type: System.Drawing.Drawing2D.MatrixOrder
      description: Member of the <xref href="System.Drawing.Drawing2D.MatrixOrder"></xref> enumeration that specifies whether the rotation is appended or prepended to the matrix transformation.
  overload: System.Drawing.Graphics.RotateTransform*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.Save
  commentId: M:System.Drawing.Graphics.Save
  id: Save
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: Save()
  nameWithType: Graphics.Save()
  fullName: Graphics.Save()
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Saves the current state of this <xref href="System.Drawing.Graphics"></xref> and identifies the saved state with a <xref href="System.Drawing.Drawing2D.GraphicsState"></xref>.
  remarks: "When you call the <xref:System.Drawing.Graphics.Save%2A> method of a <xref:System.Drawing.Graphics>, an information block that holds the state of the <xref:System.Drawing.Graphics> is put on a stack. The <xref:System.Drawing.Graphics.Save%2A> method returns a <xref:System.Drawing.Drawing2D.GraphicsState> that identifies that information block. When you pass the identifying <xref:System.Drawing.Drawing2D.GraphicsState> to the <xref:System.Drawing.Graphics.Restore%2A> method, the information block is removed from the stack and is used to restore the <xref:System.Drawing.Graphics> to the state it was in at the time of the <xref:System.Drawing.Graphics.Save%2A> method call. Note that the <xref:System.Drawing.Drawing2D.GraphicsState> returned by a given call to the <xref:System.Drawing.Graphics.Save%2A> method can be passed only once to the <xref:System.Drawing.Graphics.Restore%2A> method.  \n  \n Calls to the <xref:System.Drawing.Graphics.Save%2A> method can be nested; that is, you can call the <xref:System.Drawing.Graphics.Save%2A> method several times before you call the <xref:System.Drawing.Graphics.Restore%2A> method. Each time you call the <xref:System.Drawing.Graphics.Save%2A> method, an information block is put on the stack, and you receive a<xref:System.Drawing.Drawing2D.GraphicsState> for the information block. When you pass one of those objects to the <xref:System.Drawing.Graphics.Restore%2A> method, the <xref:System.Drawing.Graphics> is returned to the state it was in at the time of the <xref:System.Drawing.Graphics.Save%2A> method call that returned that particular <xref:System.Drawing.Drawing2D.GraphicsState>. The information block placed on the stack by that <xref:System.Drawing.Graphics.Save%2A> method call is removed from the stack, and all information blocks placed on that stack after that <xref:System.Drawing.Graphics.Save%2A> method call are also removed.  \n  \n Calls to the <xref:System.Drawing.Graphics.BeginContainer%2A> method place information blocks on the same stack as calls to the <xref:System.Drawing.Graphics.Save%2A> method. Just as a <xref:System.Drawing.Graphics.Restore%2A> call is paired with a <xref:System.Drawing.Graphics.Save%2A> call, a <xref:System.Drawing.Graphics.EndContainer%2A> method call is paired with a <xref:System.Drawing.Graphics.BeginContainer%2A> method call.  \n  \n When you call the <xref:System.Drawing.Graphics.Restore%2A> method, all information blocks placed on the stack (by the <xref:System.Drawing.Graphics.Save%2A> method or by the <xref:System.Drawing.Graphics.BeginContainer%2A> method) after the corresponding call to the <xref:System.Drawing.Graphics.Save%2A> method are removed from the stack. Likewise, When you call the <xref:System.Drawing.Graphics.EndContainer%2A> method, all information blocks placed on the stack (by the <xref:System.Drawing.Graphics.Save%2A> method or by the <xref:System.Drawing.Graphics.BeginContainer%2A> method) after the corresponding call to the <xref:System.Drawing.Graphics.BeginContainer%2A> method are removed from the stack."
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Translates the world transform of the Windows Form by a vector (100, 0).  \n  \n-   Saves the graphics state of the form.  \n  \n-   Resets the world transform of the form to an identity (2x2 identity matrix plus a zero-vector translation) and fills a rectangle with a solid red brush.  \n  \n-   Restores the translated graphics state and fills a rectangle with a solid blue brush.  \n  \n The result is an untranslated red-filled rectangle on the left and a translated blue-filled rectangle on the right of the form.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples3#151](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#151)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples3#151](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#151)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples3#151](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#151)]"
  syntax:
    content: public System.Drawing.Drawing2D.GraphicsState Save ();
    parameters: []
    return:
      type: System.Drawing.Drawing2D.GraphicsState
      description: This method returns a <xref href="System.Drawing.Drawing2D.GraphicsState"></xref> that represents the saved state of this <xref href="System.Drawing.Graphics"></xref>.
  overload: System.Drawing.Graphics.Save*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.ScaleTransform(System.Single,System.Single)
  commentId: M:System.Drawing.Graphics.ScaleTransform(System.Single,System.Single)
  id: ScaleTransform(System.Single,System.Single)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: ScaleTransform(Single, Single)
  nameWithType: Graphics.ScaleTransform(Single, Single)
  fullName: Graphics.ScaleTransform(Single, Single)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Applies the specified scaling operation to the transformation matrix of this <xref href="System.Drawing.Graphics"></xref> by prepending it to the object's transformation matrix.
  remarks: The scaling operation consists of multiplying the transformation matrix by a diagonal matrix whose elements are (`sx`, `sy`, 1). This method prepends the transformation matrix of the <xref:System.Drawing.Graphics> by the scaling matrix.
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Rotates the world transformation matrix of the Windows Form by 30 degrees.  \n  \n-   Scales that matrix by a factor of 3 in the x direction and a factor of 1 in the y direction by prepending the scaling transformation.  \n  \n-   Draws a scaled, rotated rectangle with a blue pen.  \n  \n The result is still a rectangle.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples3#152](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#152)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples3#152](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#152)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples3#152](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#152)]"
  syntax:
    content: public void ScaleTransform (float sx, float sy);
    parameters:
    - id: sx
      type: System.Single
      description: Scale factor in the x direction.
    - id: sy
      type: System.Single
      description: Scale factor in the y direction.
  overload: System.Drawing.Graphics.ScaleTransform*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.ScaleTransform(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)
  commentId: M:System.Drawing.Graphics.ScaleTransform(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)
  id: ScaleTransform(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: ScaleTransform(Single, Single, MatrixOrder)
  nameWithType: Graphics.ScaleTransform(Single, Single, MatrixOrder)
  fullName: Graphics.ScaleTransform(Single, Single, MatrixOrder)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Applies the specified scaling operation to the transformation matrix of this <xref href="System.Drawing.Graphics"></xref> in the specified order.
  remarks: The scaling operation consists of multiplying the transformation matrix by a diagonal matrix whose elements are (`sx`, `sy`, 1). This method prepends or appends the transformation matrix of the <xref:System.Drawing.Graphics> by the scaling matrix according to the `order` parameter.
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Rotates the world transformation matrix of the Windows Form by 30 degrees.  \n  \n-   Scales that matrix by a factor of 3 in the x direction and a factor of 1 in the y direction by appending the scaling transformation with the <xref:System.Drawing.Drawing2D.MatrixOrder.Append> member.  \n  \n-   Draws a rotated, scaled rectangle with a blue pen.  \n  \n The result is a parallelogram.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples3#153](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#153)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples3#153](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#153)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples3#153](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#153)]"
  syntax:
    content: public void ScaleTransform (float sx, float sy, System.Drawing.Drawing2D.MatrixOrder order);
    parameters:
    - id: sx
      type: System.Single
      description: Scale factor in the x direction.
    - id: sy
      type: System.Single
      description: Scale factor in the y direction.
    - id: order
      type: System.Drawing.Drawing2D.MatrixOrder
      description: Member of the <xref href="System.Drawing.Drawing2D.MatrixOrder"></xref> enumeration that specifies whether the scaling operation is prepended or appended to the transformation matrix.
  overload: System.Drawing.Graphics.ScaleTransform*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.SetClip(System.Drawing.Region,System.Drawing.Drawing2D.CombineMode)
  commentId: M:System.Drawing.Graphics.SetClip(System.Drawing.Region,System.Drawing.Drawing2D.CombineMode)
  id: SetClip(System.Drawing.Region,System.Drawing.Drawing2D.CombineMode)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: SetClip(Region, CombineMode)
  nameWithType: Graphics.SetClip(Region, CombineMode)
  fullName: Graphics.SetClip(Region, CombineMode)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Sets the clipping region of this <xref href="System.Drawing.Graphics"></xref> to the result of the specified operation combining the current clip region and the specified <xref href="System.Drawing.Region"></xref>.
  remarks: ''
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates a small rectangle for the clipping region.  \n  \n-   Sets the clipping region to the rectangle with the <xref:System.Drawing.Drawing2D.CombineMode.Replace> member.  \n  \n-   Fills a large rectangle with a solid black brush.  \n  \n The result is a small, filled, black rectangle.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples3#162](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#162)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples3#162](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#162)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples3#162](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#162)]"
  syntax:
    content: public void SetClip (System.Drawing.Region region, System.Drawing.Drawing2D.CombineMode combineMode);
    parameters:
    - id: region
      type: System.Drawing.Region
      description: <xref href="System.Drawing.Region"></xref> to combine.
    - id: combineMode
      type: System.Drawing.Drawing2D.CombineMode
      description: Member from the <xref href="System.Drawing.Drawing2D.CombineMode"></xref> enumeration that specifies the combining operation to use.
  overload: System.Drawing.Graphics.SetClip*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.SetClip(System.Drawing.RectangleF,System.Drawing.Drawing2D.CombineMode)
  commentId: M:System.Drawing.Graphics.SetClip(System.Drawing.RectangleF,System.Drawing.Drawing2D.CombineMode)
  id: SetClip(System.Drawing.RectangleF,System.Drawing.Drawing2D.CombineMode)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: SetClip(RectangleF, CombineMode)
  nameWithType: Graphics.SetClip(RectangleF, CombineMode)
  fullName: Graphics.SetClip(RectangleF, CombineMode)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Sets the clipping region of this <xref href="System.Drawing.Graphics"></xref> to the result of the specified operation combining the current clip region and the rectangle specified by a <xref href="System.Drawing.RectangleF"></xref> structure.
  remarks: ''
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates a small rectangle for the clipping region.  \n  \n-   Sets the clipping region to the rectangle with the <xref:System.Drawing.Drawing2D.CombineMode.Replace> member.  \n  \n-   Fills a large rectangle with a solid black brush.  \n  \n The result is a small, filled, black rectangle.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples3#161](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#161)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples3#161](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#161)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples3#161](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#161)]"
  syntax:
    content: public void SetClip (System.Drawing.RectangleF rect, System.Drawing.Drawing2D.CombineMode combineMode);
    parameters:
    - id: rect
      type: System.Drawing.RectangleF
      description: <xref href="System.Drawing.RectangleF"></xref> structure to combine.
    - id: combineMode
      type: System.Drawing.Drawing2D.CombineMode
      description: Member of the <xref href="System.Drawing.Drawing2D.CombineMode"></xref> enumeration that specifies the combining operation to use.
  overload: System.Drawing.Graphics.SetClip*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.SetClip(System.Drawing.Rectangle,System.Drawing.Drawing2D.CombineMode)
  commentId: M:System.Drawing.Graphics.SetClip(System.Drawing.Rectangle,System.Drawing.Drawing2D.CombineMode)
  id: SetClip(System.Drawing.Rectangle,System.Drawing.Drawing2D.CombineMode)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: SetClip(Rectangle, CombineMode)
  nameWithType: Graphics.SetClip(Rectangle, CombineMode)
  fullName: Graphics.SetClip(Rectangle, CombineMode)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Sets the clipping region of this <xref href="System.Drawing.Graphics"></xref> to the result of the specified operation combining the current clip region and the rectangle specified by a <xref href="System.Drawing.Rectangle"></xref> structure.
  remarks: ''
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates a small rectangle for the clipping region.  \n  \n-   Sets the clipping region to the rectangle with the <xref:System.Drawing.Drawing2D.CombineMode.Replace> member.  \n  \n-   Fills a large rectangle with a solid black brush.  \n  \n The result is a small, filled, black rectangle.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples3#159](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#159)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples3#159](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#159)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples3#159](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#159)]"
  syntax:
    content: public void SetClip (System.Drawing.Rectangle rect, System.Drawing.Drawing2D.CombineMode combineMode);
    parameters:
    - id: rect
      type: System.Drawing.Rectangle
      description: <xref href="System.Drawing.Rectangle"></xref> structure to combine.
    - id: combineMode
      type: System.Drawing.Drawing2D.CombineMode
      description: Member of the <xref href="System.Drawing.Drawing2D.CombineMode"></xref> enumeration that specifies the combining operation to use.
  overload: System.Drawing.Graphics.SetClip*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.SetClip(System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.CombineMode)
  commentId: M:System.Drawing.Graphics.SetClip(System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.CombineMode)
  id: SetClip(System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.CombineMode)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: SetClip(GraphicsPath, CombineMode)
  nameWithType: Graphics.SetClip(GraphicsPath, CombineMode)
  fullName: Graphics.SetClip(GraphicsPath, CombineMode)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Sets the clipping region of this <xref href="System.Drawing.Graphics"></xref> to the result of the specified operation combining the current clip region and the specified <xref href="System.Drawing.Drawing2D.GraphicsPath"></xref>.
  remarks: If the graphics path represented by the `path` parameter is not closed, an additional segment is added from the last point to the first point to close the path.
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates a graphics path and adds an ellipse to the path.  \n  \n-   Sets the clipping region to the elliptical path with the <xref:System.Drawing.Drawing2D.CombineMode.Replace> member.  \n  \n-   Fills a large rectangle with a solid black brush.  \n  \n The result is a filled, black ellipse.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples3#155](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#155)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples3#155](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#155)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples3#155](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#155)]"
  syntax:
    content: public void SetClip (System.Drawing.Drawing2D.GraphicsPath path, System.Drawing.Drawing2D.CombineMode combineMode);
    parameters:
    - id: path
      type: System.Drawing.Drawing2D.GraphicsPath
      description: <xref href="System.Drawing.Drawing2D.GraphicsPath"></xref> to combine.
    - id: combineMode
      type: System.Drawing.Drawing2D.CombineMode
      description: Member of the <xref href="System.Drawing.Drawing2D.CombineMode"></xref> enumeration that specifies the combining operation to use.
  overload: System.Drawing.Graphics.SetClip*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.SetClip(System.Drawing.Graphics,System.Drawing.Drawing2D.CombineMode)
  commentId: M:System.Drawing.Graphics.SetClip(System.Drawing.Graphics,System.Drawing.Drawing2D.CombineMode)
  id: SetClip(System.Drawing.Graphics,System.Drawing.Drawing2D.CombineMode)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: SetClip(Graphics, CombineMode)
  nameWithType: Graphics.SetClip(Graphics, CombineMode)
  fullName: Graphics.SetClip(Graphics, CombineMode)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Sets the clipping region of this <xref href="System.Drawing.Graphics"></xref> to the result of the specified combining operation of the current clip region and the <xref href="System.Drawing.Graphics.Clip"></xref> property of the specified <xref href="System.Drawing.Graphics"></xref>.
  remarks: ''
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler, as well as `thisForm`, the <xref:System.Windows.Forms.Form> for the example. The code performs the following actions:  \n  \n-   Creates a temporary <xref:System.Drawing.Graphics> from the `thisForm`<xref:System.Windows.Forms.Form> of the example.  \n  \n-   Sets the clipping region of the temporary <xref:System.Drawing.Graphics> to a small square.  \n  \n-   Updates the clipping region of the form's graphic object to that of the new <xref:System.Drawing.Graphics> with the <xref:System.Drawing.Drawing2D.CombineMode.Replace> member.  \n  \n-   Fills a large rectangle with a solid black brush.  \n  \n The result is a small, filled, black square.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples3#157](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#157)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples3#157](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#157)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples3#157](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#157)]"
  syntax:
    content: public void SetClip (System.Drawing.Graphics g, System.Drawing.Drawing2D.CombineMode combineMode);
    parameters:
    - id: g
      type: System.Drawing.Graphics
      description: <xref href="System.Drawing.Graphics"></xref> that specifies the clip region to combine.
    - id: combineMode
      type: System.Drawing.Drawing2D.CombineMode
      description: Member of the <xref href="System.Drawing.Drawing2D.CombineMode"></xref> enumeration that specifies the combining operation to use.
  overload: System.Drawing.Graphics.SetClip*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.SetClip(System.Drawing.Rectangle)
  commentId: M:System.Drawing.Graphics.SetClip(System.Drawing.Rectangle)
  id: SetClip(System.Drawing.Rectangle)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: SetClip(Rectangle)
  nameWithType: Graphics.SetClip(Rectangle)
  fullName: Graphics.SetClip(Rectangle)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Sets the clipping region of this <xref href="System.Drawing.Graphics"></xref> to the rectangle specified by a <xref href="System.Drawing.Rectangle"></xref> structure.
  remarks: ''
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates a small rectangle for the clipping region.  \n  \n-   Sets the clipping region to the rectangle.  \n  \n-   Fills a large rectangle with a solid black brush.  \n  \n The result is a small, filled, black rectangle.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples3#158](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#158)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples3#158](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#158)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples3#158](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#158)]"
  syntax:
    content: public void SetClip (System.Drawing.Rectangle rect);
    parameters:
    - id: rect
      type: System.Drawing.Rectangle
      description: <xref href="System.Drawing.Rectangle"></xref> structure that represents the new clip region.
  overload: System.Drawing.Graphics.SetClip*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.SetClip(System.Drawing.Graphics)
  commentId: M:System.Drawing.Graphics.SetClip(System.Drawing.Graphics)
  id: SetClip(System.Drawing.Graphics)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: SetClip(Graphics)
  nameWithType: Graphics.SetClip(Graphics)
  fullName: Graphics.SetClip(Graphics)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Sets the clipping region of this <xref href="System.Drawing.Graphics"></xref> to the `Clip` property of the specified <xref href="System.Drawing.Graphics"></xref>.
  remarks: ''
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler, as well as `thisForm`, the <xref:System.Windows.Forms.Form> for the example. The code performs the following actions:  \n  \n-   Creates a temporary <xref:System.Drawing.Graphics> from the `thisForm`<xref:System.Windows.Forms.Form> of the example.  \n  \n-   Sets the clipping region of the temporary <xref:System.Drawing.Graphics> to a small square.  \n  \n-   Updates the clipping region of the form's graphic object to that of the temporary <xref:System.Drawing.Graphics>.  \n  \n-   Fills a large rectangle with a solid black brush.  \n  \n The result is a small, filled, black square.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples3#156](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#156)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples3#156](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#156)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples3#156](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#156)]"
  syntax:
    content: public void SetClip (System.Drawing.Graphics g);
    parameters:
    - id: g
      type: System.Drawing.Graphics
      description: <xref href="System.Drawing.Graphics"></xref> from which to take the new clip region.
  overload: System.Drawing.Graphics.SetClip*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.SetClip(System.Drawing.Drawing2D.GraphicsPath)
  commentId: M:System.Drawing.Graphics.SetClip(System.Drawing.Drawing2D.GraphicsPath)
  id: SetClip(System.Drawing.Drawing2D.GraphicsPath)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: SetClip(GraphicsPath)
  nameWithType: Graphics.SetClip(GraphicsPath)
  fullName: Graphics.SetClip(GraphicsPath)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Sets the clipping region of this <xref href="System.Drawing.Graphics"></xref> to the specified <xref href="System.Drawing.Drawing2D.GraphicsPath"></xref>.
  remarks: If the graphics path represented by the `path` parameter is not closed, an additional segment is added from the last point to the first point to close the path.
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates a graphics path and adds an ellipse to the path.  \n  \n-   Sets the clipping region to the elliptical path.  \n  \n-   Fills a large rectangle with a solid black brush.  \n  \n The result is a filled, black ellipse.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples3#154](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#154)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples3#154](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#154)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples3#154](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#154)]"
  syntax:
    content: public void SetClip (System.Drawing.Drawing2D.GraphicsPath path);
    parameters:
    - id: path
      type: System.Drawing.Drawing2D.GraphicsPath
      description: <xref href="System.Drawing.Drawing2D.GraphicsPath"></xref> that represents the new clip region.
  overload: System.Drawing.Graphics.SetClip*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.SetClip(System.Drawing.RectangleF)
  commentId: M:System.Drawing.Graphics.SetClip(System.Drawing.RectangleF)
  id: SetClip(System.Drawing.RectangleF)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: SetClip(RectangleF)
  nameWithType: Graphics.SetClip(RectangleF)
  fullName: Graphics.SetClip(RectangleF)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Sets the clipping region of this <xref href="System.Drawing.Graphics"></xref> to the rectangle specified by a <xref href="System.Drawing.RectangleF"></xref> structure.
  remarks: ''
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates a small rectangle for the clipping region.  \n  \n-   Sets the clipping region to the rectangle.  \n  \n-   Fills a large rectangle with a solid black brush.  \n  \n The result is a small, filled, black rectangle.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples3#160](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#160)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples3#160](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#160)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples3#160](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#160)]"
  syntax:
    content: public void SetClip (System.Drawing.RectangleF rect);
    parameters:
    - id: rect
      type: System.Drawing.RectangleF
      description: <xref href="System.Drawing.RectangleF"></xref> structure that represents the new clip region.
  overload: System.Drawing.Graphics.SetClip*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.SmoothingMode
  commentId: P:System.Drawing.Graphics.SmoothingMode
  id: SmoothingMode
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: SmoothingMode
  nameWithType: Graphics.SmoothingMode
  fullName: Graphics.SmoothingMode
  type: Property
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Gets or sets the rendering quality for this <xref href="System.Drawing.Graphics"></xref>.
  remarks: The smoothing mode specifies whether lines, curves, and the edges of filled areas use smoothing (also called antialiasing). One exception is that path gradient brushes do not obey the smoothing mode. Areas filled using a <xref:System.Drawing.Drawing2D.PathGradientBrush> are rendered the same way (aliased) regardless of the <xref:System.Drawing.Graphics.SmoothingMode%2A> property.
  example:
  - "The following method demonstrates the effects of setting the <xref:System.Drawing.Pen.DashCap%2A>, <xref:System.Drawing.Pen.DashPattern%2A>, and <xref:System.Drawing.Graphics.SmoothingMode%2A> properties. The output of the example is shown in the following illustration.  \n  \n ![Lines with and without smoothing applied.](~/add/media/gdi-smoothingmode.png \"Lines with and without smoothing applied.\")  \n  \n This example is designed to be used with Windows Forms. Paste the code into a form and call the `ShowPensAndSmoothingMode` method when handling the form's <xref:System.Windows.Forms.Control.Paint> event, passing `e` as <xref:System.Windows.Forms.PaintEventArgs>.  \n  \n [!code-cpp[System.Drawing.PensExample#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.PensExample/CPP/form1.cpp#3)]\n [!code-csharp[System.Drawing.PensExample#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.PensExample/CS/form1.cs#3)]\n [!code-vb[System.Drawing.PensExample#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.PensExample/VB/form1.vb#3)]"
  syntax:
    content: public System.Drawing.Drawing2D.SmoothingMode SmoothingMode { get; set; }
    return:
      type: System.Drawing.Drawing2D.SmoothingMode
      description: One of the <xref href="System.Drawing.Drawing2D.SmoothingMode"></xref> values.
  overload: System.Drawing.Graphics.SmoothingMode*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.TextContrast
  commentId: P:System.Drawing.Graphics.TextContrast
  id: TextContrast
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: TextContrast
  nameWithType: Graphics.TextContrast
  fullName: Graphics.TextContrast
  type: Property
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Gets or sets the gamma correction value for rendering text.
  remarks: The gamma correction value must be between 0 and 12. The default value is 4.
  example:
  - "The following code example demonstrates the use of the <xref:System.Drawing.Graphics.TextRenderingHint%2A> and <xref:System.Drawing.Graphics.TextContrast%2A> properties.  \n  \n This example is designed to be used with Windows Forms. Paste the code into a form and call the `ChangeTextRenderingHintAndTextContrast` method when handling the form's <xref:System.Windows.Forms.Control.Paint> event, passing `e` as <xref:System.Windows.Forms.PaintEventArgs>.  \n  \n [!code-cpp[System.Drawing.GraphicsProperties#5](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/CPP/form1.cpp#5)]\n [!code-csharp[System.Drawing.GraphicsProperties#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/CS/form1.cs#5)]\n [!code-vb[System.Drawing.GraphicsProperties#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/VB/form1.vb#5)]"
  syntax:
    content: public int TextContrast { get; set; }
    return:
      type: System.Int32
      description: The gamma correction value used for rendering antialiased and ClearType text.
  overload: System.Drawing.Graphics.TextContrast*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.TextRenderingHint
  commentId: P:System.Drawing.Graphics.TextRenderingHint
  id: TextRenderingHint
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: TextRenderingHint
  nameWithType: Graphics.TextRenderingHint
  fullName: Graphics.TextRenderingHint
  type: Property
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Gets or sets the rendering mode for text associated with this <xref href="System.Drawing.Graphics"></xref>.
  remarks: "The text rendering hint specifies whether text renders with antialiasing.  \n  \n> [!NOTE]\n>  You should not use a <xref:System.Drawing.Graphics.CompositingMode%2A> property value of <xref:System.Drawing.Drawing2D.CompositingMode.SourceCopy> when the <xref:System.Drawing.Graphics.TextRenderingHint%2A> property is set to <xref:System.Drawing.Text.TextRenderingHint.ClearTypeGridFit>. An exception could occur or the image may not render correctly."
  example:
  - "The following code example demonstrates the use of the <xref:System.Drawing.Graphics.TextRenderingHint%2A> and <xref:System.Drawing.Graphics.TextContrast%2A> properties.  \n  \n This example is designed to be used with Windows Forms. Paste the code into a form and call the `ChangeTextRenderingHintAndTextContrast` method when handling the form's <xref:System.Windows.Forms.Control.Paint> event, passing `e` as <xref:System.Windows.Forms.PaintEventArgs>.  \n  \n [!code-cpp[System.Drawing.GraphicsProperties#5](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/CPP/form1.cpp#5)]\n [!code-csharp[System.Drawing.GraphicsProperties#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/CS/form1.cs#5)]\n [!code-vb[System.Drawing.GraphicsProperties#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/VB/form1.vb#5)]"
  syntax:
    content: public System.Drawing.Text.TextRenderingHint TextRenderingHint { get; set; }
    return:
      type: System.Drawing.Text.TextRenderingHint
      description: One of the <xref href="System.Drawing.Text.TextRenderingHint"></xref> values.
  overload: System.Drawing.Graphics.TextRenderingHint*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.Transform
  commentId: P:System.Drawing.Graphics.Transform
  id: Transform
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: Transform
  nameWithType: Graphics.Transform
  fullName: Graphics.Transform
  type: Property
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Gets or sets a copy of the geometric world transformation for this <xref href="System.Drawing.Graphics"></xref>.
  remarks: "GDI+ uses three coordinate spaces: world, page, and device. World coordinates are the coordinates used to model a particular graphic world and are the coordinates you pass to methods in the .NET Framework. Page coordinates refer to the coordinate system used by a drawing surface, such as a form or a control. Device coordinates are the coordinates used by the physical device being drawn on, such as a screen or a printer. The <xref:System.Drawing.Graphics.Transform%2A> property represents the world transformation, which maps world coordinates to page coordinates.  \n  \n Because the matrix returned and by the <xref:System.Drawing.Graphics.Transform%2A> property is a copy of the geometric transform, you should dispose of the matrix when you no longer need it."
  syntax:
    content: public System.Drawing.Drawing2D.Matrix Transform { get; set; }
    return:
      type: System.Drawing.Drawing2D.Matrix
      description: A copy of the <xref href="System.Drawing.Drawing2D.Matrix"></xref> that represents the geometric world transformation for this <xref href="System.Drawing.Graphics"></xref>.
  overload: System.Drawing.Graphics.Transform*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.TransformPoints(System.Drawing.Drawing2D.CoordinateSpace,System.Drawing.Drawing2D.CoordinateSpace,System.Drawing.Point[])
  commentId: M:System.Drawing.Graphics.TransformPoints(System.Drawing.Drawing2D.CoordinateSpace,System.Drawing.Drawing2D.CoordinateSpace,System.Drawing.Point[])
  id: TransformPoints(System.Drawing.Drawing2D.CoordinateSpace,System.Drawing.Drawing2D.CoordinateSpace,System.Drawing.Point[])
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: TransformPoints(CoordinateSpace, CoordinateSpace, Point[])
  nameWithType: Graphics.TransformPoints(CoordinateSpace, CoordinateSpace, Point[])
  fullName: Graphics.TransformPoints(CoordinateSpace, CoordinateSpace, Point[])
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Transforms an array of points from one coordinate space to another using the current world and page transformations of this <xref href="System.Drawing.Graphics"></xref>.
  remarks: ''
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates two points and draws a blue line between them.  \n  \n-   Sets the world transform to translate by amounts 40 in the x direction and 30 in the y direction.  \n  \n-   Transforms the points from world coordinates (<xref:System.Drawing.Drawing2D.CoordinateSpace.World>) to page coordinates (<xref:System.Drawing.Drawing2D.CoordinateSpace.Page>).  \n  \n-   Resets the world transformation to the identity.  \n  \n-   Draws a red line between the transformed points.  \n  \n The result is a blue line and a translated red line below it.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples3#163](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#163)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples3#163](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#163)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples3#163](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#163)]"
  syntax:
    content: public void TransformPoints (System.Drawing.Drawing2D.CoordinateSpace destSpace, System.Drawing.Drawing2D.CoordinateSpace srcSpace, System.Drawing.Point[] pts);
    parameters:
    - id: destSpace
      type: System.Drawing.Drawing2D.CoordinateSpace
      description: Member of the <xref href="System.Drawing.Drawing2D.CoordinateSpace"></xref> enumeration that specifies the destination coordinate space.
    - id: srcSpace
      type: System.Drawing.Drawing2D.CoordinateSpace
      description: Member of the <xref href="System.Drawing.Drawing2D.CoordinateSpace"></xref> enumeration that specifies the source coordinate space.
    - id: pts
      type: System.Drawing.Point[]
      description: Array of <xref href="System.Drawing.Point"></xref> structures that represents the points to transformation.
  overload: System.Drawing.Graphics.TransformPoints*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.TransformPoints(System.Drawing.Drawing2D.CoordinateSpace,System.Drawing.Drawing2D.CoordinateSpace,System.Drawing.PointF[])
  commentId: M:System.Drawing.Graphics.TransformPoints(System.Drawing.Drawing2D.CoordinateSpace,System.Drawing.Drawing2D.CoordinateSpace,System.Drawing.PointF[])
  id: TransformPoints(System.Drawing.Drawing2D.CoordinateSpace,System.Drawing.Drawing2D.CoordinateSpace,System.Drawing.PointF[])
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: TransformPoints(CoordinateSpace, CoordinateSpace, PointF[])
  nameWithType: Graphics.TransformPoints(CoordinateSpace, CoordinateSpace, PointF[])
  fullName: Graphics.TransformPoints(CoordinateSpace, CoordinateSpace, PointF[])
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Transforms an array of points from one coordinate space to another using the current world and page transformations of this <xref href="System.Drawing.Graphics"></xref>.
  remarks: ''
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates two points and draws a blue line between them.  \n  \n-   Sets the world transform to translate by amounts 40 in the x direction and 30 in the y direction.  \n  \n-   Transforms the points from world coordinates (<xref:System.Drawing.Drawing2D.CoordinateSpace.World>) to page coordinates (<xref:System.Drawing.Drawing2D.CoordinateSpace.Page>).  \n  \n-   Resets the world transformation to the identity and draws a red line between the transformed points.  \n  \n The result is a blue line and a translated red line below it.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples3#164](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#164)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples3#164](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#164)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples3#164](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#164)]"
  syntax:
    content: public void TransformPoints (System.Drawing.Drawing2D.CoordinateSpace destSpace, System.Drawing.Drawing2D.CoordinateSpace srcSpace, System.Drawing.PointF[] pts);
    parameters:
    - id: destSpace
      type: System.Drawing.Drawing2D.CoordinateSpace
      description: Member of the <xref href="System.Drawing.Drawing2D.CoordinateSpace"></xref> enumeration that specifies the destination coordinate space.
    - id: srcSpace
      type: System.Drawing.Drawing2D.CoordinateSpace
      description: Member of the <xref href="System.Drawing.Drawing2D.CoordinateSpace"></xref> enumeration that specifies the source coordinate space.
    - id: pts
      type: System.Drawing.PointF[]
      description: Array of <xref href="System.Drawing.PointF"></xref> structures that represent the points to transform.
  overload: System.Drawing.Graphics.TransformPoints*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.TranslateClip(System.Int32,System.Int32)
  commentId: M:System.Drawing.Graphics.TranslateClip(System.Int32,System.Int32)
  id: TranslateClip(System.Int32,System.Int32)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: TranslateClip(Int32, Int32)
  nameWithType: Graphics.TranslateClip(Int32, Int32)
  fullName: Graphics.TranslateClip(Int32, Int32)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Translates the clipping region of this <xref href="System.Drawing.Graphics"></xref> by specified amounts in the horizontal and vertical directions.
  remarks: ''
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates a rectangle for the clipping region.  \n  \n-   Sets the clipping region to the rectangle.  \n  \n-   Translates the clipping region by a vector (50, 50).  \n  \n-   Fills a large rectangle with a solid black brush.  \n  \n The result is a translated, small, black rectangle.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples3#165](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#165)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples3#165](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#165)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples3#165](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#165)]"
  syntax:
    content: public void TranslateClip (int dx, int dy);
    parameters:
    - id: dx
      type: System.Int32
      description: The x-coordinate of the translation.
    - id: dy
      type: System.Int32
      description: The y-coordinate of the translation.
  overload: System.Drawing.Graphics.TranslateClip*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.TranslateClip(System.Single,System.Single)
  commentId: M:System.Drawing.Graphics.TranslateClip(System.Single,System.Single)
  id: TranslateClip(System.Single,System.Single)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: TranslateClip(Single, Single)
  nameWithType: Graphics.TranslateClip(Single, Single)
  fullName: Graphics.TranslateClip(Single, Single)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Translates the clipping region of this <xref href="System.Drawing.Graphics"></xref> by specified amounts in the horizontal and vertical directions.
  remarks: ''
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates a rectangle for the clipping region.  \n  \n-   Sets the clipping region to the rectangle.  \n  \n-   Translates the clipping region by a vector (50.0F, 50.0F).  \n  \n-   Fills a large rectangle with a solid black brush.  \n  \n The result is a translated, small, black rectangle.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples3#166](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#166)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples3#166](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#166)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples3#166](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#166)]"
  syntax:
    content: public void TranslateClip (float dx, float dy);
    parameters:
    - id: dx
      type: System.Single
      description: The x-coordinate of the translation.
    - id: dy
      type: System.Single
      description: The y-coordinate of the translation.
  overload: System.Drawing.Graphics.TranslateClip*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.TranslateTransform(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)
  commentId: M:System.Drawing.Graphics.TranslateTransform(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)
  id: TranslateTransform(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: TranslateTransform(Single, Single, MatrixOrder)
  nameWithType: Graphics.TranslateTransform(Single, Single, MatrixOrder)
  fullName: Graphics.TranslateTransform(Single, Single, MatrixOrder)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Changes the origin of the coordinate system by applying the specified translation to the transformation matrix of this <xref href="System.Drawing.Graphics"></xref> in the specified order.
  remarks: The translation operation consists of multiplying the transformation matrix by a matrix whose translation part is the `dx` and `dy` parameters. This method prepends or appends the transformation matrix of the <xref:System.Drawing.Graphics> by the translation matrix according to the `order` parameter.
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Rotates the world transformation matrix of the Windows Form by 30.0F degrees.  \n  \n-   Moves the graphics object's origin by calling <xref:System.Drawing.Graphics.TranslateTransform%2A>, appending the translation to the world transformation matrix.  \n  \n-   Draws a rotated, translated ellipse with a blue pen.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples3#168](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#168)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples3#168](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#168)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples3#168](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#168)]"
  syntax:
    content: public void TranslateTransform (float dx, float dy, System.Drawing.Drawing2D.MatrixOrder order);
    parameters:
    - id: dx
      type: System.Single
      description: The x-coordinate of the translation.
    - id: dy
      type: System.Single
      description: The y-coordinate of the translation.
    - id: order
      type: System.Drawing.Drawing2D.MatrixOrder
      description: Member of the <xref href="System.Drawing.Drawing2D.MatrixOrder"></xref> enumeration that specifies whether the translation is prepended or appended to the transformation matrix.
  overload: System.Drawing.Graphics.TranslateTransform*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.TranslateTransform(System.Single,System.Single)
  commentId: M:System.Drawing.Graphics.TranslateTransform(System.Single,System.Single)
  id: TranslateTransform(System.Single,System.Single)
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: TranslateTransform(Single, Single)
  nameWithType: Graphics.TranslateTransform(Single, Single)
  fullName: Graphics.TranslateTransform(Single, Single)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Changes the origin of the coordinate system by prepending the specified translation to the transformation matrix of this <xref href="System.Drawing.Graphics"></xref>.
  remarks: The origin is typically the upper-left-hand corner of the drawing surface.  The translation operation consists of multiplying the transformation matrix by a matrix whose translation part is the `dx` and `dy` parameters. This method applies the translation by prepending the translation matrix to the transformation matrix.
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Rotates the world transformation matrix of the Windows Form by 30.0F degrees.  \n  \n-   Moves the origin of the graphics object by calling <xref:System.Drawing.Graphics.TranslateTransform%2A>, prepending the translation to the transformation matrix.  \n  \n-   Draws a translated, rotated ellipse with a blue pen.  \n  \n [!code-cpp[System.Drawing.ClassicGraphicsExamples3#167](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#167)]\n [!code-csharp[System.Drawing.ClassicGraphicsExamples3#167](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#167)]\n [!code-vb[System.Drawing.ClassicGraphicsExamples3#167](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#167)]  \n  \n The following illustration shows the output of running the previous code example.  \n  \n ![Translated and transformed ellipse](~/add/media/ndp-tranlatetransform.png \"Translated and transformed ellipse\")"
  syntax:
    content: public void TranslateTransform (float dx, float dy);
    parameters:
    - id: dx
      type: System.Single
      description: The x-coordinate of the translation.
    - id: dy
      type: System.Single
      description: The y-coordinate of the translation.
  overload: System.Drawing.Graphics.TranslateTransform*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Drawing.Graphics.VisibleClipBounds
  commentId: P:System.Drawing.Graphics.VisibleClipBounds
  id: VisibleClipBounds
  parent: System.Drawing.Graphics
  langs:
  - csharp
  name: VisibleClipBounds
  nameWithType: Graphics.VisibleClipBounds
  fullName: Graphics.VisibleClipBounds
  type: Property
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: Gets the bounding rectangle of the visible clipping region of this <xref href="System.Drawing.Graphics"></xref>.
  remarks: "The unit for resulting rectangle is designated by the <xref:System.Drawing.Graphics.PageUnit%2A> property. The default unit is pixels. A <xref:System.Drawing.Graphics> is typically associated with a control and the origin of the rectangle will be relative to the client area of that control.  \n  \n The visible clipping region is the intersection of the clipping region of this <xref:System.Drawing.Graphics> and the clipping region of the window."
  syntax:
    content: public System.Drawing.RectangleF VisibleClipBounds { get; }
    return:
      type: System.Drawing.RectangleF
      description: A <xref href="System.Drawing.RectangleF"></xref> structure that represents a bounding rectangle for the visible clipping region of this <xref href="System.Drawing.Graphics"></xref>.
  overload: System.Drawing.Graphics.VisibleClipBounds*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
references:
- uid: System.MarshalByRefObject
  parent: System
  isExternal: false
  name: MarshalByRefObject
  nameWithType: MarshalByRefObject
  fullName: System.MarshalByRefObject
- uid: System.ComponentModel.Win32Exception
  parent: System.ComponentModel
  isExternal: false
  name: Win32Exception
  nameWithType: Win32Exception
  fullName: System.ComponentModel.Win32Exception
- uid: System.ComponentModel.InvalidEnumArgumentException
  parent: System.ComponentModel
  isExternal: false
  name: InvalidEnumArgumentException
  nameWithType: InvalidEnumArgumentException
  fullName: System.ComponentModel.InvalidEnumArgumentException
- uid: System.ArgumentNullException
  parent: System
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.Exception
  parent: System
  isExternal: false
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: System.Drawing.Graphics.AddMetafileComment(System.Byte[])
  parent: System.Drawing.Graphics
  isExternal: false
  name: AddMetafileComment(Byte[])
  nameWithType: Graphics.AddMetafileComment(Byte[])
  fullName: Graphics.AddMetafileComment(Byte[])
- uid: System.Byte
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: System.Byte[]
  parent: System
  isExternal: false
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Drawing.Graphics.BeginContainer
  parent: System.Drawing.Graphics
  isExternal: false
  name: BeginContainer()
  nameWithType: Graphics.BeginContainer()
  fullName: Graphics.BeginContainer()
- uid: System.Drawing.Drawing2D.GraphicsContainer
  parent: System.Drawing.Drawing2D
  isExternal: false
  name: GraphicsContainer
  nameWithType: GraphicsContainer
  fullName: System.Drawing.Drawing2D.GraphicsContainer
- uid: System.Drawing.Graphics.BeginContainer(System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.GraphicsUnit)
  parent: System.Drawing.Graphics
  isExternal: false
  name: BeginContainer(Rectangle, Rectangle, GraphicsUnit)
  nameWithType: Graphics.BeginContainer(Rectangle, Rectangle, GraphicsUnit)
  fullName: Graphics.BeginContainer(Rectangle, Rectangle, GraphicsUnit)
- uid: System.Drawing.Rectangle
  parent: System.Drawing
  isExternal: false
  name: Rectangle
  nameWithType: Rectangle
  fullName: System.Drawing.Rectangle
- uid: System.Drawing.GraphicsUnit
  parent: System.Drawing
  isExternal: false
  name: GraphicsUnit
  nameWithType: GraphicsUnit
  fullName: System.Drawing.GraphicsUnit
- uid: System.Drawing.Graphics.BeginContainer(System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit)
  parent: System.Drawing.Graphics
  isExternal: false
  name: BeginContainer(RectangleF, RectangleF, GraphicsUnit)
  nameWithType: Graphics.BeginContainer(RectangleF, RectangleF, GraphicsUnit)
  fullName: Graphics.BeginContainer(RectangleF, RectangleF, GraphicsUnit)
- uid: System.Drawing.RectangleF
  parent: System.Drawing
  isExternal: false
  name: RectangleF
  nameWithType: RectangleF
  fullName: System.Drawing.RectangleF
- uid: System.Drawing.Graphics.Clear(System.Drawing.Color)
  parent: System.Drawing.Graphics
  isExternal: false
  name: Clear(Color)
  nameWithType: Graphics.Clear(Color)
  fullName: Graphics.Clear(Color)
- uid: System.Drawing.Color
  parent: System.Drawing
  isExternal: false
  name: Color
  nameWithType: Color
  fullName: System.Drawing.Color
- uid: System.Drawing.Graphics.Clip
  parent: System.Drawing.Graphics
  isExternal: false
  name: Clip
  nameWithType: Graphics.Clip
  fullName: Graphics.Clip
- uid: System.Drawing.Region
  parent: System.Drawing
  isExternal: false
  name: Region
  nameWithType: Region
  fullName: System.Drawing.Region
- uid: System.Drawing.Graphics.ClipBounds
  parent: System.Drawing.Graphics
  isExternal: false
  name: ClipBounds
  nameWithType: Graphics.ClipBounds
  fullName: Graphics.ClipBounds
- uid: System.Drawing.Graphics.CompositingMode
  parent: System.Drawing.Graphics
  isExternal: false
  name: CompositingMode
  nameWithType: Graphics.CompositingMode
  fullName: Graphics.CompositingMode
- uid: System.Drawing.Drawing2D.CompositingMode
  parent: System.Drawing.Drawing2D
  isExternal: false
  name: CompositingMode
  nameWithType: CompositingMode
  fullName: System.Drawing.Drawing2D.CompositingMode
- uid: System.Drawing.Graphics.CompositingQuality
  parent: System.Drawing.Graphics
  isExternal: false
  name: CompositingQuality
  nameWithType: Graphics.CompositingQuality
  fullName: Graphics.CompositingQuality
- uid: System.Drawing.Drawing2D.CompositingQuality
  parent: System.Drawing.Drawing2D
  isExternal: false
  name: CompositingQuality
  nameWithType: CompositingQuality
  fullName: System.Drawing.Drawing2D.CompositingQuality
- uid: System.Drawing.Graphics.CopyFromScreen(System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Size)
  parent: System.Drawing.Graphics
  isExternal: false
  name: CopyFromScreen(Int32, Int32, Int32, Int32, Size)
  nameWithType: Graphics.CopyFromScreen(Int32, Int32, Int32, Int32, Size)
  fullName: Graphics.CopyFromScreen(Int32, Int32, Int32, Int32, Size)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Drawing.Size
  parent: System.Drawing
  isExternal: false
  name: Size
  nameWithType: Size
  fullName: System.Drawing.Size
- uid: System.Drawing.Graphics.CopyFromScreen(System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Size,System.Drawing.CopyPixelOperation)
  parent: System.Drawing.Graphics
  isExternal: false
  name: CopyFromScreen(Int32, Int32, Int32, Int32, Size, CopyPixelOperation)
  nameWithType: Graphics.CopyFromScreen(Int32, Int32, Int32, Int32, Size, CopyPixelOperation)
  fullName: Graphics.CopyFromScreen(Int32, Int32, Int32, Int32, Size, CopyPixelOperation)
- uid: System.Drawing.CopyPixelOperation
  parent: System.Drawing
  isExternal: false
  name: CopyPixelOperation
  nameWithType: CopyPixelOperation
  fullName: System.Drawing.CopyPixelOperation
- uid: System.Drawing.Graphics.CopyFromScreen(System.Drawing.Point,System.Drawing.Point,System.Drawing.Size)
  parent: System.Drawing.Graphics
  isExternal: false
  name: CopyFromScreen(Point, Point, Size)
  nameWithType: Graphics.CopyFromScreen(Point, Point, Size)
  fullName: Graphics.CopyFromScreen(Point, Point, Size)
- uid: System.Drawing.Point
  parent: System.Drawing
  isExternal: false
  name: Point
  nameWithType: Point
  fullName: System.Drawing.Point
- uid: System.Drawing.Graphics.CopyFromScreen(System.Drawing.Point,System.Drawing.Point,System.Drawing.Size,System.Drawing.CopyPixelOperation)
  parent: System.Drawing.Graphics
  isExternal: false
  name: CopyFromScreen(Point, Point, Size, CopyPixelOperation)
  nameWithType: Graphics.CopyFromScreen(Point, Point, Size, CopyPixelOperation)
  fullName: Graphics.CopyFromScreen(Point, Point, Size, CopyPixelOperation)
- uid: System.Drawing.Graphics.Dispose
  parent: System.Drawing.Graphics
  isExternal: false
  name: Dispose()
  nameWithType: Graphics.Dispose()
  fullName: Graphics.Dispose()
- uid: System.Drawing.Graphics.DpiX
  parent: System.Drawing.Graphics
  isExternal: false
  name: DpiX
  nameWithType: Graphics.DpiX
  fullName: Graphics.DpiX
- uid: System.Single
  parent: System
  isExternal: false
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: System.Drawing.Graphics.DpiY
  parent: System.Drawing.Graphics
  isExternal: false
  name: DpiY
  nameWithType: Graphics.DpiY
  fullName: Graphics.DpiY
- uid: System.Drawing.Graphics.DrawArc(System.Drawing.Pen,System.Drawing.Rectangle,System.Single,System.Single)
  parent: System.Drawing.Graphics
  isExternal: false
  name: DrawArc(Pen, Rectangle, Single, Single)
  nameWithType: Graphics.DrawArc(Pen, Rectangle, Single, Single)
  fullName: Graphics.DrawArc(Pen, Rectangle, Single, Single)
- uid: System.Drawing.Pen
  parent: System.Drawing
  isExternal: false
  name: Pen
  nameWithType: Pen
  fullName: System.Drawing.Pen
- uid: System.Drawing.Graphics.DrawArc(System.Drawing.Pen,System.Drawing.RectangleF,System.Single,System.Single)
  parent: System.Drawing.Graphics
  isExternal: false
  name: DrawArc(Pen, RectangleF, Single, Single)
  nameWithType: Graphics.DrawArc(Pen, RectangleF, Single, Single)
  fullName: Graphics.DrawArc(Pen, RectangleF, Single, Single)
- uid: System.Drawing.Graphics.DrawArc(System.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  parent: System.Drawing.Graphics
  isExternal: false
  name: DrawArc(Pen, Int32, Int32, Int32, Int32, Int32, Int32)
  nameWithType: Graphics.DrawArc(Pen, Int32, Int32, Int32, Int32, Int32, Int32)
  fullName: Graphics.DrawArc(Pen, Int32, Int32, Int32, Int32, Int32, Int32)
- uid: System.Drawing.Graphics.DrawArc(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)
  parent: System.Drawing.Graphics
  isExternal: false
  name: DrawArc(Pen, Single, Single, Single, Single, Single, Single)
  nameWithType: Graphics.DrawArc(Pen, Single, Single, Single, Single, Single, Single)
  fullName: Graphics.DrawArc(Pen, Single, Single, Single, Single, Single, Single)
- uid: System.Drawing.Graphics.DrawBezier(System.Drawing.Pen,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point)
  parent: System.Drawing.Graphics
  isExternal: false
  name: DrawBezier(Pen, Point, Point, Point, Point)
  nameWithType: Graphics.DrawBezier(Pen, Point, Point, Point, Point)
  fullName: Graphics.DrawBezier(Pen, Point, Point, Point, Point)
- uid: System.Drawing.Graphics.DrawBezier(System.Drawing.Pen,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)
  parent: System.Drawing.Graphics
  isExternal: false
  name: DrawBezier(Pen, PointF, PointF, PointF, PointF)
  nameWithType: Graphics.DrawBezier(Pen, PointF, PointF, PointF, PointF)
  fullName: Graphics.DrawBezier(Pen, PointF, PointF, PointF, PointF)
- uid: System.Drawing.PointF
  parent: System.Drawing
  isExternal: false
  name: PointF
  nameWithType: PointF
  fullName: System.Drawing.PointF
- uid: System.Drawing.Graphics.DrawBezier(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)
  parent: System.Drawing.Graphics
  isExternal: false
  name: DrawBezier(Pen, Single, Single, Single, Single, Single, Single, Single, Single)
  nameWithType: Graphics.DrawBezier(Pen, Single, Single, Single, Single, Single, Single, Single, Single)
  fullName: Graphics.DrawBezier(Pen, Single, Single, Single, Single, Single, Single, Single, Single)
- uid: System.Drawing.Graphics.DrawBeziers(System.Drawing.Pen,System.Drawing.PointF[])
  parent: System.Drawing.Graphics
  isExternal: false
  name: DrawBeziers(Pen, PointF[])
  nameWithType: Graphics.DrawBeziers(Pen, PointF[])
  fullName: Graphics.DrawBeziers(Pen, PointF[])
- uid: System.Drawing.PointF[]
  parent: System.Drawing
  isExternal: false
  name: PointF[]
  nameWithType: PointF[]
  fullName: System.Drawing.PointF[]
  spec.csharp:
  - uid: System.Drawing.PointF
    name: PointF
    nameWithType: PointF
    fullName: System.Drawing.PointF
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Drawing.Graphics.DrawBeziers(System.Drawing.Pen,System.Drawing.Point[])
  parent: System.Drawing.Graphics
  isExternal: false
  name: DrawBeziers(Pen, Point[])
  nameWithType: Graphics.DrawBeziers(Pen, Point[])
  fullName: Graphics.DrawBeziers(Pen, Point[])
- uid: System.Drawing.Point[]
  parent: System.Drawing
  isExternal: false
  name: Point[]
  nameWithType: Point[]
  fullName: System.Drawing.Point[]
  spec.csharp:
  - uid: System.Drawing.Point
    name: Point
    nameWithType: Point
    fullName: System.Drawing.Point
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Drawing.Graphics.DrawClosedCurve(System.Drawing.Pen,System.Drawing.Point[],System.Single,System.Drawing.Drawing2D.FillMode)
  parent: System.Drawing.Graphics
  isExternal: false
  name: DrawClosedCurve(Pen, Point[], Single, FillMode)
  nameWithType: Graphics.DrawClosedCurve(Pen, Point[], Single, FillMode)
  fullName: Graphics.DrawClosedCurve(Pen, Point[], Single, FillMode)
- uid: System.Drawing.Drawing2D.FillMode
  parent: System.Drawing.Drawing2D
  isExternal: false
  name: FillMode
  nameWithType: FillMode
  fullName: System.Drawing.Drawing2D.FillMode
- uid: System.Drawing.Graphics.DrawClosedCurve(System.Drawing.Pen,System.Drawing.PointF[],System.Single,System.Drawing.Drawing2D.FillMode)
  parent: System.Drawing.Graphics
  isExternal: false
  name: DrawClosedCurve(Pen, PointF[], Single, FillMode)
  nameWithType: Graphics.DrawClosedCurve(Pen, PointF[], Single, FillMode)
  fullName: Graphics.DrawClosedCurve(Pen, PointF[], Single, FillMode)
- uid: System.Drawing.Graphics.DrawClosedCurve(System.Drawing.Pen,System.Drawing.Point[])
  parent: System.Drawing.Graphics
  isExternal: false
  name: DrawClosedCurve(Pen, Point[])
  nameWithType: Graphics.DrawClosedCurve(Pen, Point[])
  fullName: Graphics.DrawClosedCurve(Pen, Point[])
- uid: System.Drawing.Graphics.DrawClosedCurve(System.Drawing.Pen,System.Drawing.PointF[])
  parent: System.Drawing.Graphics
  isExternal: false
  name: DrawClosedCurve(Pen, PointF[])
  nameWithType: Graphics.DrawClosedCurve(Pen, PointF[])
  fullName: Graphics.DrawClosedCurve(Pen, PointF[])
- uid: System.Drawing.Graphics.DrawCurve(System.Drawing.Pen,System.Drawing.Point[])
  parent: System.Drawing.Graphics
  isExternal: false
  name: DrawCurve(Pen, Point[])
  nameWithType: Graphics.DrawCurve(Pen, Point[])
  fullName: Graphics.DrawCurve(Pen, Point[])
- uid: System.Drawing.Graphics.DrawCurve(System.Drawing.Pen,System.Drawing.PointF[])
  parent: System.Drawing.Graphics
  isExternal: false
  name: DrawCurve(Pen, PointF[])
  nameWithType: Graphics.DrawCurve(Pen, PointF[])
  fullName: Graphics.DrawCurve(Pen, PointF[])
- uid: System.Drawing.Graphics.DrawCurve(System.Drawing.Pen,System.Drawing.Point[],System.Single)
  parent: System.Drawing.Graphics
  isExternal: false
  name: DrawCurve(Pen, Point[], Single)
  nameWithType: Graphics.DrawCurve(Pen, Point[], Single)
  fullName: Graphics.DrawCurve(Pen, Point[], Single)
- uid: System.Drawing.Graphics.DrawCurve(System.Drawing.Pen,System.Drawing.PointF[],System.Single)
  parent: System.Drawing.Graphics
  isExternal: false
  name: DrawCurve(Pen, PointF[], Single)
  nameWithType: Graphics.DrawCurve(Pen, PointF[], Single)
  fullName: Graphics.DrawCurve(Pen, PointF[], Single)
- uid: System.Drawing.Graphics.DrawCurve(System.Drawing.Pen,System.Drawing.PointF[],System.Int32,System.Int32)
  parent: System.Drawing.Graphics
  isExternal: false
  name: DrawCurve(Pen, PointF[], Int32, Int32)
  nameWithType: Graphics.DrawCurve(Pen, PointF[], Int32, Int32)
  fullName: Graphics.DrawCurve(Pen, PointF[], Int32, Int32)
- uid: System.Drawing.Graphics.DrawCurve(System.Drawing.Pen,System.Drawing.Point[],System.Int32,System.Int32,System.Single)
  parent: System.Drawing.Graphics
  isExternal: false
  name: DrawCurve(Pen, Point[], Int32, Int32, Single)
  nameWithType: Graphics.DrawCurve(Pen, Point[], Int32, Int32, Single)
  fullName: Graphics.DrawCurve(Pen, Point[], Int32, Int32, Single)
- uid: System.Drawing.Graphics.DrawCurve(System.Drawing.Pen,System.Drawing.PointF[],System.Int32,System.Int32,System.Single)
  parent: System.Drawing.Graphics
  isExternal: false
  name: DrawCurve(Pen, PointF[], Int32, Int32, Single)
  nameWithType: Graphics.DrawCurve(Pen, PointF[], Int32, Int32, Single)
  fullName: Graphics.DrawCurve(Pen, PointF[], Int32, Int32, Single)
- uid: System.Drawing.Graphics.DrawEllipse(System.Drawing.Pen,System.Drawing.Rectangle)
  parent: System.Drawing.Graphics
  isExternal: false
  name: DrawEllipse(Pen, Rectangle)
  nameWithType: Graphics.DrawEllipse(Pen, Rectangle)
  fullName: Graphics.DrawEllipse(Pen, Rectangle)
- uid: System.Drawing.Graphics.DrawEllipse(System.Drawing.Pen,System.Drawing.RectangleF)
  parent: System.Drawing.Graphics
  isExternal: false
  name: DrawEllipse(Pen, RectangleF)
  nameWithType: Graphics.DrawEllipse(Pen, RectangleF)
  fullName: Graphics.DrawEllipse(Pen, RectangleF)
- uid: System.Drawing.Graphics.DrawEllipse(System.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32)
  parent: System.Drawing.Graphics
  isExternal: false
  name: DrawEllipse(Pen, Int32, Int32, Int32, Int32)
  nameWithType: Graphics.DrawEllipse(Pen, Int32, Int32, Int32, Int32)
  fullName: Graphics.DrawEllipse(Pen, Int32, Int32, Int32, Int32)
- uid: System.Drawing.Graphics.DrawEllipse(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single)
  parent: System.Drawing.Graphics
  isExternal: false
  name: DrawEllipse(Pen, Single, Single, Single, Single)
  nameWithType: Graphics.DrawEllipse(Pen, Single, Single, Single, Single)
  fullName: Graphics.DrawEllipse(Pen, Single, Single, Single, Single)
- uid: System.Drawing.Graphics.DrawIcon(System.Drawing.Icon,System.Int32,System.Int32)
  parent: System.Drawing.Graphics
  isExternal: false
  name: DrawIcon(Icon, Int32, Int32)
  nameWithType: Graphics.DrawIcon(Icon, Int32, Int32)
  fullName: Graphics.DrawIcon(Icon, Int32, Int32)
- uid: System.Drawing.Icon
  parent: System.Drawing
  isExternal: false
  name: Icon
  nameWithType: Icon
  fullName: System.Drawing.Icon
- uid: System.Drawing.Graphics.DrawIcon(System.Drawing.Icon,System.Drawing.Rectangle)
  parent: System.Drawing.Graphics
  isExternal: false
  name: DrawIcon(Icon, Rectangle)
  nameWithType: Graphics.DrawIcon(Icon, Rectangle)
  fullName: Graphics.DrawIcon(Icon, Rectangle)
- uid: System.Drawing.Graphics.DrawIconUnstretched(System.Drawing.Icon,System.Drawing.Rectangle)
  parent: System.Drawing.Graphics
  isExternal: false
  name: DrawIconUnstretched(Icon, Rectangle)
  nameWithType: Graphics.DrawIconUnstretched(Icon, Rectangle)
  fullName: Graphics.DrawIconUnstretched(Icon, Rectangle)
- uid: System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Single,System.Single,System.Drawing.RectangleF,System.Drawing.GraphicsUnit)
  parent: System.Drawing.Graphics
  isExternal: false
  name: DrawImage(Image, Single, Single, RectangleF, GraphicsUnit)
  nameWithType: Graphics.DrawImage(Image, Single, Single, RectangleF, GraphicsUnit)
  fullName: Graphics.DrawImage(Image, Single, Single, RectangleF, GraphicsUnit)
- uid: System.Drawing.Image
  parent: System.Drawing
  isExternal: false
  name: Image
  nameWithType: Image
  fullName: System.Drawing.Image
- uid: System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Single,System.Single,System.Single,System.Single,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.IntPtr)
  parent: System.Drawing.Graphics
  isExternal: false
  name: DrawImage(Image, Rectangle, Single, Single, Single, Single, GraphicsUnit, ImageAttributes, Graphics+DrawImageAbort, IntPtr)
  nameWithType: Graphics.DrawImage(Image, Rectangle, Single, Single, Single, Single, GraphicsUnit, ImageAttributes, Graphics+DrawImageAbort, IntPtr)
  fullName: Graphics.DrawImage(Image, Rectangle, Single, Single, Single, Single, GraphicsUnit, ImageAttributes, Graphics+DrawImageAbort, IntPtr)
- uid: System.Drawing.Imaging.ImageAttributes
  parent: System.Drawing.Imaging
  isExternal: false
  name: ImageAttributes
  nameWithType: ImageAttributes
  fullName: System.Drawing.Imaging.ImageAttributes
- uid: System.Drawing.Graphics
  parent: System.Drawing
  isExternal: false
  name: Graphics
  nameWithType: Graphics
  fullName: System.Drawing.Graphics+DrawImageAbort
- uid: System.IntPtr
  parent: System
  isExternal: false
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.IntPtr)
  parent: System.Drawing.Graphics
  isExternal: false
  name: DrawImage(Image, Rectangle, Int32, Int32, Int32, Int32, GraphicsUnit, ImageAttributes, Graphics+DrawImageAbort, IntPtr)
  nameWithType: Graphics.DrawImage(Image, Rectangle, Int32, Int32, Int32, Int32, GraphicsUnit, ImageAttributes, Graphics+DrawImageAbort, IntPtr)
  fullName: Graphics.DrawImage(Image, Rectangle, Int32, Int32, Int32, Int32, GraphicsUnit, ImageAttributes, Graphics+DrawImageAbort, IntPtr)
- uid: System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Single,System.Single,System.Single,System.Single,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)
  parent: System.Drawing.Graphics
  isExternal: false
  name: DrawImage(Image, Rectangle, Single, Single, Single, Single, GraphicsUnit, ImageAttributes, Graphics+DrawImageAbort)
  nameWithType: Graphics.DrawImage(Image, Rectangle, Single, Single, Single, Single, GraphicsUnit, ImageAttributes, Graphics+DrawImageAbort)
  fullName: Graphics.DrawImage(Image, Rectangle, Single, Single, Single, Single, GraphicsUnit, ImageAttributes, Graphics+DrawImageAbort)
- uid: System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)
  parent: System.Drawing.Graphics
  isExternal: false
  name: DrawImage(Image, Rectangle, Int32, Int32, Int32, Int32, GraphicsUnit, ImageAttributes, Graphics+DrawImageAbort)
  nameWithType: Graphics.DrawImage(Image, Rectangle, Int32, Int32, Int32, Int32, GraphicsUnit, ImageAttributes, Graphics+DrawImageAbort)
  fullName: Graphics.DrawImage(Image, Rectangle, Int32, Int32, Int32, Int32, GraphicsUnit, ImageAttributes, Graphics+DrawImageAbort)
- uid: System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Single,System.Single,System.Single,System.Single,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes)
  parent: System.Drawing.Graphics
  isExternal: false
  name: DrawImage(Image, Rectangle, Single, Single, Single, Single, GraphicsUnit, ImageAttributes)
  nameWithType: Graphics.DrawImage(Image, Rectangle, Single, Single, Single, Single, GraphicsUnit, ImageAttributes)
  fullName: Graphics.DrawImage(Image, Rectangle, Single, Single, Single, Single, GraphicsUnit, ImageAttributes)
- uid: System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes)
  parent: System.Drawing.Graphics
  isExternal: false
  name: DrawImage(Image, Rectangle, Int32, Int32, Int32, Int32, GraphicsUnit, ImageAttributes)
  nameWithType: Graphics.DrawImage(Image, Rectangle, Int32, Int32, Int32, Int32, GraphicsUnit, ImageAttributes)
  fullName: Graphics.DrawImage(Image, Rectangle, Int32, Int32, Int32, Int32, GraphicsUnit, ImageAttributes)
- uid: System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Single,System.Single,System.Single,System.Single,System.Drawing.GraphicsUnit)
  parent: System.Drawing.Graphics
  isExternal: false
  name: DrawImage(Image, Rectangle, Single, Single, Single, Single, GraphicsUnit)
  nameWithType: Graphics.DrawImage(Image, Rectangle, Single, Single, Single, Single, GraphicsUnit)
  fullName: Graphics.DrawImage(Image, Rectangle, Single, Single, Single, Single, GraphicsUnit)
- uid: System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.GraphicsUnit)
  parent: System.Drawing.Graphics
  isExternal: false
  name: DrawImage(Image, Rectangle, Int32, Int32, Int32, Int32, GraphicsUnit)
  nameWithType: Graphics.DrawImage(Image, Rectangle, Int32, Int32, Int32, Int32, GraphicsUnit)
  fullName: Graphics.DrawImage(Image, Rectangle, Int32, Int32, Int32, Int32, GraphicsUnit)
- uid: System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.Int32)
  parent: System.Drawing.Graphics
  isExternal: false
  name: DrawImage(Image, PointF[], RectangleF, GraphicsUnit, ImageAttributes, Graphics+DrawImageAbort, Int32)
  nameWithType: Graphics.DrawImage(Image, PointF[], RectangleF, GraphicsUnit, ImageAttributes, Graphics+DrawImageAbort, Int32)
  fullName: Graphics.DrawImage(Image, PointF[], RectangleF, GraphicsUnit, ImageAttributes, Graphics+DrawImageAbort, Int32)
- uid: System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.Int32)
  parent: System.Drawing.Graphics
  isExternal: false
  name: DrawImage(Image, Point[], Rectangle, GraphicsUnit, ImageAttributes, Graphics+DrawImageAbort, Int32)
  nameWithType: Graphics.DrawImage(Image, Point[], Rectangle, GraphicsUnit, ImageAttributes, Graphics+DrawImageAbort, Int32)
  fullName: Graphics.DrawImage(Image, Point[], Rectangle, GraphicsUnit, ImageAttributes, Graphics+DrawImageAbort, Int32)
- uid: System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)
  parent: System.Drawing.Graphics
  isExternal: false
  name: DrawImage(Image, PointF[], RectangleF, GraphicsUnit, ImageAttributes, Graphics+DrawImageAbort)
  nameWithType: Graphics.DrawImage(Image, PointF[], RectangleF, GraphicsUnit, ImageAttributes, Graphics+DrawImageAbort)
  fullName: Graphics.DrawImage(Image, PointF[], RectangleF, GraphicsUnit, ImageAttributes, Graphics+DrawImageAbort)
- uid: System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)
  parent: System.Drawing.Graphics
  isExternal: false
  name: DrawImage(Image, Point[], Rectangle, GraphicsUnit, ImageAttributes, Graphics+DrawImageAbort)
  nameWithType: Graphics.DrawImage(Image, Point[], Rectangle, GraphicsUnit, ImageAttributes, Graphics+DrawImageAbort)
  fullName: Graphics.DrawImage(Image, Point[], Rectangle, GraphicsUnit, ImageAttributes, Graphics+DrawImageAbort)
- uid: System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Int32,System.Int32,System.Int32,System.Int32)
  parent: System.Drawing.Graphics
  isExternal: false
  name: DrawImage(Image, Int32, Int32, Int32, Int32)
  nameWithType: Graphics.DrawImage(Image, Int32, Int32, Int32, Int32)
  fullName: Graphics.DrawImage(Image, Int32, Int32, Int32, Int32)
- uid: System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Single,System.Single,System.Single,System.Single)
  parent: System.Drawing.Graphics
  isExternal: false
  name: DrawImage(Image, Single, Single, Single, Single)
  nameWithType: Graphics.DrawImage(Image, Single, Single, Single, Single)
  fullName: Graphics.DrawImage(Image, Single, Single, Single, Single)
- uid: System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes)
  parent: System.Drawing.Graphics
  isExternal: false
  name: DrawImage(Image, PointF[], RectangleF, GraphicsUnit, ImageAttributes)
  nameWithType: Graphics.DrawImage(Image, PointF[], RectangleF, GraphicsUnit, ImageAttributes)
  fullName: Graphics.DrawImage(Image, PointF[], RectangleF, GraphicsUnit, ImageAttributes)
- uid: System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point)
  parent: System.Drawing.Graphics
  isExternal: false
  name: DrawImage(Image, Point)
  nameWithType: Graphics.DrawImage(Image, Point)
  fullName: Graphics.DrawImage(Image, Point)
- uid: System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[])
  parent: System.Drawing.Graphics
  isExternal: false
  name: DrawImage(Image, Point[])
  nameWithType: Graphics.DrawImage(Image, Point[])
  fullName: Graphics.DrawImage(Image, Point[])
- uid: System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF)
  parent: System.Drawing.Graphics
  isExternal: false
  name: DrawImage(Image, PointF)
  nameWithType: Graphics.DrawImage(Image, PointF)
  fullName: Graphics.DrawImage(Image, PointF)
- uid: System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[])
  parent: System.Drawing.Graphics
  isExternal: false
  name: DrawImage(Image, PointF[])
  nameWithType: Graphics.DrawImage(Image, PointF[])
  fullName: Graphics.DrawImage(Image, PointF[])
- uid: System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle)
  parent: System.Drawing.Graphics
  isExternal: false
  name: DrawImage(Image, Rectangle)
  nameWithType: Graphics.DrawImage(Image, Rectangle)
  fullName: Graphics.DrawImage(Image, Rectangle)
- uid: System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.RectangleF)
  parent: System.Drawing.Graphics
  isExternal: false
  name: DrawImage(Image, RectangleF)
  nameWithType: Graphics.DrawImage(Image, RectangleF)
  fullName: Graphics.DrawImage(Image, RectangleF)
- uid: System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Int32,System.Int32)
  parent: System.Drawing.Graphics
  isExternal: false
  name: DrawImage(Image, Int32, Int32)
  nameWithType: Graphics.DrawImage(Image, Int32, Int32)
  fullName: Graphics.DrawImage(Image, Int32, Int32)
- uid: System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Int32,System.Int32,System.Drawing.Rectangle,System.Drawing.GraphicsUnit)
  parent: System.Drawing.Graphics
  isExternal: false
  name: DrawImage(Image, Int32, Int32, Rectangle, GraphicsUnit)
  nameWithType: Graphics.DrawImage(Image, Int32, Int32, Rectangle, GraphicsUnit)
  fullName: Graphics.DrawImage(Image, Int32, Int32, Rectangle, GraphicsUnit)
- uid: System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit)
  parent: System.Drawing.Graphics
  isExternal: false
  name: DrawImage(Image, Point[], Rectangle, GraphicsUnit)
  nameWithType: Graphics.DrawImage(Image, Point[], Rectangle, GraphicsUnit)
  fullName: Graphics.DrawImage(Image, Point[], Rectangle, GraphicsUnit)
- uid: System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit)
  parent: System.Drawing.Graphics
  isExternal: false
  name: DrawImage(Image, PointF[], RectangleF, GraphicsUnit)
  nameWithType: Graphics.DrawImage(Image, PointF[], RectangleF, GraphicsUnit)
  fullName: Graphics.DrawImage(Image, PointF[], RectangleF, GraphicsUnit)
- uid: System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.GraphicsUnit)
  parent: System.Drawing.Graphics
  isExternal: false
  name: DrawImage(Image, Rectangle, Rectangle, GraphicsUnit)
  nameWithType: Graphics.DrawImage(Image, Rectangle, Rectangle, GraphicsUnit)
  fullName: Graphics.DrawImage(Image, Rectangle, Rectangle, GraphicsUnit)
- uid: System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit)
  parent: System.Drawing.Graphics
  isExternal: false
  name: DrawImage(Image, RectangleF, RectangleF, GraphicsUnit)
  nameWithType: Graphics.DrawImage(Image, RectangleF, RectangleF, GraphicsUnit)
  fullName: Graphics.DrawImage(Image, RectangleF, RectangleF, GraphicsUnit)
- uid: System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Single,System.Single)
  parent: System.Drawing.Graphics
  isExternal: false
  name: DrawImage(Image, Single, Single)
  nameWithType: Graphics.DrawImage(Image, Single, Single)
  fullName: Graphics.DrawImage(Image, Single, Single)
- uid: System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes)
  parent: System.Drawing.Graphics
  isExternal: false
  name: DrawImage(Image, Point[], Rectangle, GraphicsUnit, ImageAttributes)
  nameWithType: Graphics.DrawImage(Image, Point[], Rectangle, GraphicsUnit, ImageAttributes)
  fullName: Graphics.DrawImage(Image, Point[], Rectangle, GraphicsUnit, ImageAttributes)
- uid: System.Drawing.Graphics.DrawImageUnscaled(System.Drawing.Image,System.Int32,System.Int32,System.Int32,System.Int32)
  parent: System.Drawing.Graphics
  isExternal: false
  name: DrawImageUnscaled(Image, Int32, Int32, Int32, Int32)
  nameWithType: Graphics.DrawImageUnscaled(Image, Int32, Int32, Int32, Int32)
  fullName: Graphics.DrawImageUnscaled(Image, Int32, Int32, Int32, Int32)
- uid: System.Drawing.Graphics.DrawImageUnscaled(System.Drawing.Image,System.Int32,System.Int32)
  parent: System.Drawing.Graphics
  isExternal: false
  name: DrawImageUnscaled(Image, Int32, Int32)
  nameWithType: Graphics.DrawImageUnscaled(Image, Int32, Int32)
  fullName: Graphics.DrawImageUnscaled(Image, Int32, Int32)
- uid: System.Drawing.Graphics.DrawImageUnscaled(System.Drawing.Image,System.Drawing.Point)
  parent: System.Drawing.Graphics
  isExternal: false
  name: DrawImageUnscaled(Image, Point)
  nameWithType: Graphics.DrawImageUnscaled(Image, Point)
  fullName: Graphics.DrawImageUnscaled(Image, Point)
- uid: System.Drawing.Graphics.DrawImageUnscaled(System.Drawing.Image,System.Drawing.Rectangle)
  parent: System.Drawing.Graphics
  isExternal: false
  name: DrawImageUnscaled(Image, Rectangle)
  nameWithType: Graphics.DrawImageUnscaled(Image, Rectangle)
  fullName: Graphics.DrawImageUnscaled(Image, Rectangle)
- uid: System.Drawing.Graphics.DrawImageUnscaledAndClipped(System.Drawing.Image,System.Drawing.Rectangle)
  parent: System.Drawing.Graphics
  isExternal: false
  name: DrawImageUnscaledAndClipped(Image, Rectangle)
  nameWithType: Graphics.DrawImageUnscaledAndClipped(Image, Rectangle)
  fullName: Graphics.DrawImageUnscaledAndClipped(Image, Rectangle)
- uid: System.Drawing.Graphics.DrawLine(System.Drawing.Pen,System.Drawing.PointF,System.Drawing.PointF)
  parent: System.Drawing.Graphics
  isExternal: false
  name: DrawLine(Pen, PointF, PointF)
  nameWithType: Graphics.DrawLine(Pen, PointF, PointF)
  fullName: Graphics.DrawLine(Pen, PointF, PointF)
- uid: System.Drawing.Graphics.DrawLine(System.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32)
  parent: System.Drawing.Graphics
  isExternal: false
  name: DrawLine(Pen, Int32, Int32, Int32, Int32)
  nameWithType: Graphics.DrawLine(Pen, Int32, Int32, Int32, Int32)
  fullName: Graphics.DrawLine(Pen, Int32, Int32, Int32, Int32)
- uid: System.Drawing.Graphics.DrawLine(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single)
  parent: System.Drawing.Graphics
  isExternal: false
  name: DrawLine(Pen, Single, Single, Single, Single)
  nameWithType: Graphics.DrawLine(Pen, Single, Single, Single, Single)
  fullName: Graphics.DrawLine(Pen, Single, Single, Single, Single)
- uid: System.Drawing.Graphics.DrawLine(System.Drawing.Pen,System.Drawing.Point,System.Drawing.Point)
  parent: System.Drawing.Graphics
  isExternal: false
  name: DrawLine(Pen, Point, Point)
  nameWithType: Graphics.DrawLine(Pen, Point, Point)
  fullName: Graphics.DrawLine(Pen, Point, Point)
- uid: System.Drawing.Graphics.DrawLines(System.Drawing.Pen,System.Drawing.Point[])
  parent: System.Drawing.Graphics
  isExternal: false
  name: DrawLines(Pen, Point[])
  nameWithType: Graphics.DrawLines(Pen, Point[])
  fullName: Graphics.DrawLines(Pen, Point[])
- uid: System.Drawing.Graphics.DrawLines(System.Drawing.Pen,System.Drawing.PointF[])
  parent: System.Drawing.Graphics
  isExternal: false
  name: DrawLines(Pen, PointF[])
  nameWithType: Graphics.DrawLines(Pen, PointF[])
  fullName: Graphics.DrawLines(Pen, PointF[])
- uid: System.Drawing.Graphics.DrawPath(System.Drawing.Pen,System.Drawing.Drawing2D.GraphicsPath)
  parent: System.Drawing.Graphics
  isExternal: false
  name: DrawPath(Pen, GraphicsPath)
  nameWithType: Graphics.DrawPath(Pen, GraphicsPath)
  fullName: Graphics.DrawPath(Pen, GraphicsPath)
- uid: System.Drawing.Drawing2D.GraphicsPath
  parent: System.Drawing.Drawing2D
  isExternal: false
  name: GraphicsPath
  nameWithType: GraphicsPath
  fullName: System.Drawing.Drawing2D.GraphicsPath
- uid: System.Drawing.Graphics.DrawPie(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)
  parent: System.Drawing.Graphics
  isExternal: false
  name: DrawPie(Pen, Single, Single, Single, Single, Single, Single)
  nameWithType: Graphics.DrawPie(Pen, Single, Single, Single, Single, Single, Single)
  fullName: Graphics.DrawPie(Pen, Single, Single, Single, Single, Single, Single)
- uid: System.Drawing.Graphics.DrawPie(System.Drawing.Pen,System.Drawing.Rectangle,System.Single,System.Single)
  parent: System.Drawing.Graphics
  isExternal: false
  name: DrawPie(Pen, Rectangle, Single, Single)
  nameWithType: Graphics.DrawPie(Pen, Rectangle, Single, Single)
  fullName: Graphics.DrawPie(Pen, Rectangle, Single, Single)
- uid: System.Drawing.Graphics.DrawPie(System.Drawing.Pen,System.Drawing.RectangleF,System.Single,System.Single)
  parent: System.Drawing.Graphics
  isExternal: false
  name: DrawPie(Pen, RectangleF, Single, Single)
  nameWithType: Graphics.DrawPie(Pen, RectangleF, Single, Single)
  fullName: Graphics.DrawPie(Pen, RectangleF, Single, Single)
- uid: System.Drawing.Graphics.DrawPie(System.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  parent: System.Drawing.Graphics
  isExternal: false
  name: DrawPie(Pen, Int32, Int32, Int32, Int32, Int32, Int32)
  nameWithType: Graphics.DrawPie(Pen, Int32, Int32, Int32, Int32, Int32, Int32)
  fullName: Graphics.DrawPie(Pen, Int32, Int32, Int32, Int32, Int32, Int32)
- uid: System.Drawing.Graphics.DrawPolygon(System.Drawing.Pen,System.Drawing.PointF[])
  parent: System.Drawing.Graphics
  isExternal: false
  name: DrawPolygon(Pen, PointF[])
  nameWithType: Graphics.DrawPolygon(Pen, PointF[])
  fullName: Graphics.DrawPolygon(Pen, PointF[])
- uid: System.Drawing.Graphics.DrawPolygon(System.Drawing.Pen,System.Drawing.Point[])
  parent: System.Drawing.Graphics
  isExternal: false
  name: DrawPolygon(Pen, Point[])
  nameWithType: Graphics.DrawPolygon(Pen, Point[])
  fullName: Graphics.DrawPolygon(Pen, Point[])
- uid: System.Drawing.Graphics.DrawRectangle(System.Drawing.Pen,System.Drawing.Rectangle)
  parent: System.Drawing.Graphics
  isExternal: false
  name: DrawRectangle(Pen, Rectangle)
  nameWithType: Graphics.DrawRectangle(Pen, Rectangle)
  fullName: Graphics.DrawRectangle(Pen, Rectangle)
- uid: System.Drawing.Graphics.DrawRectangle(System.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32)
  parent: System.Drawing.Graphics
  isExternal: false
  name: DrawRectangle(Pen, Int32, Int32, Int32, Int32)
  nameWithType: Graphics.DrawRectangle(Pen, Int32, Int32, Int32, Int32)
  fullName: Graphics.DrawRectangle(Pen, Int32, Int32, Int32, Int32)
- uid: System.Drawing.Graphics.DrawRectangle(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single)
  parent: System.Drawing.Graphics
  isExternal: false
  name: DrawRectangle(Pen, Single, Single, Single, Single)
  nameWithType: Graphics.DrawRectangle(Pen, Single, Single, Single, Single)
  fullName: Graphics.DrawRectangle(Pen, Single, Single, Single, Single)
- uid: System.Drawing.Graphics.DrawRectangles(System.Drawing.Pen,System.Drawing.Rectangle[])
  parent: System.Drawing.Graphics
  isExternal: false
  name: DrawRectangles(Pen, Rectangle[])
  nameWithType: Graphics.DrawRectangles(Pen, Rectangle[])
  fullName: Graphics.DrawRectangles(Pen, Rectangle[])
- uid: System.Drawing.Rectangle[]
  parent: System.Drawing
  isExternal: false
  name: Rectangle[]
  nameWithType: Rectangle[]
  fullName: System.Drawing.Rectangle[]
  spec.csharp:
  - uid: System.Drawing.Rectangle
    name: Rectangle
    nameWithType: Rectangle
    fullName: System.Drawing.Rectangle
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Drawing.Graphics.DrawRectangles(System.Drawing.Pen,System.Drawing.RectangleF[])
  parent: System.Drawing.Graphics
  isExternal: false
  name: DrawRectangles(Pen, RectangleF[])
  nameWithType: Graphics.DrawRectangles(Pen, RectangleF[])
  fullName: Graphics.DrawRectangles(Pen, RectangleF[])
- uid: System.Drawing.RectangleF[]
  parent: System.Drawing
  isExternal: false
  name: RectangleF[]
  nameWithType: RectangleF[]
  fullName: System.Drawing.RectangleF[]
  spec.csharp:
  - uid: System.Drawing.RectangleF
    name: RectangleF
    nameWithType: RectangleF
    fullName: System.Drawing.RectangleF
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Drawing.Graphics.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Single,System.Single,System.Drawing.StringFormat)
  parent: System.Drawing.Graphics
  isExternal: false
  name: DrawString(String, Font, Brush, Single, Single, StringFormat)
  nameWithType: Graphics.DrawString(String, Font, Brush, Single, Single, StringFormat)
  fullName: Graphics.DrawString(String, Font, Brush, Single, Single, StringFormat)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Drawing.Font
  parent: System.Drawing
  isExternal: false
  name: Font
  nameWithType: Font
  fullName: System.Drawing.Font
- uid: System.Drawing.Brush
  parent: System.Drawing
  isExternal: false
  name: Brush
  nameWithType: Brush
  fullName: System.Drawing.Brush
- uid: System.Drawing.StringFormat
  parent: System.Drawing
  isExternal: false
  name: StringFormat
  nameWithType: StringFormat
  fullName: System.Drawing.StringFormat
- uid: System.Drawing.Graphics.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.RectangleF,System.Drawing.StringFormat)
  parent: System.Drawing.Graphics
  isExternal: false
  name: DrawString(String, Font, Brush, RectangleF, StringFormat)
  nameWithType: Graphics.DrawString(String, Font, Brush, RectangleF, StringFormat)
  fullName: Graphics.DrawString(String, Font, Brush, RectangleF, StringFormat)
- uid: System.Drawing.Graphics.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Single,System.Single)
  parent: System.Drawing.Graphics
  isExternal: false
  name: DrawString(String, Font, Brush, Single, Single)
  nameWithType: Graphics.DrawString(String, Font, Brush, Single, Single)
  fullName: Graphics.DrawString(String, Font, Brush, Single, Single)
- uid: System.Drawing.Graphics.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.RectangleF)
  parent: System.Drawing.Graphics
  isExternal: false
  name: DrawString(String, Font, Brush, RectangleF)
  nameWithType: Graphics.DrawString(String, Font, Brush, RectangleF)
  fullName: Graphics.DrawString(String, Font, Brush, RectangleF)
- uid: System.Drawing.Graphics.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.PointF)
  parent: System.Drawing.Graphics
  isExternal: false
  name: DrawString(String, Font, Brush, PointF)
  nameWithType: Graphics.DrawString(String, Font, Brush, PointF)
  fullName: Graphics.DrawString(String, Font, Brush, PointF)
- uid: System.Drawing.Graphics.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.PointF,System.Drawing.StringFormat)
  parent: System.Drawing.Graphics
  isExternal: false
  name: DrawString(String, Font, Brush, PointF, StringFormat)
  nameWithType: Graphics.DrawString(String, Font, Brush, PointF, StringFormat)
  fullName: Graphics.DrawString(String, Font, Brush, PointF, StringFormat)
- uid: System.Drawing.Graphics.EndContainer(System.Drawing.Drawing2D.GraphicsContainer)
  parent: System.Drawing.Graphics
  isExternal: false
  name: EndContainer(GraphicsContainer)
  nameWithType: Graphics.EndContainer(GraphicsContainer)
  fullName: Graphics.EndContainer(GraphicsContainer)
- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)
  parent: System.Drawing.Graphics
  isExternal: false
  name: EnumerateMetafile(Metafile, PointF, RectangleF, GraphicsUnit, Graphics+EnumerateMetafileProc, IntPtr)
  nameWithType: Graphics.EnumerateMetafile(Metafile, PointF, RectangleF, GraphicsUnit, Graphics+EnumerateMetafileProc, IntPtr)
  fullName: Graphics.EnumerateMetafile(Metafile, PointF, RectangleF, GraphicsUnit, Graphics+EnumerateMetafileProc, IntPtr)
- uid: System.Drawing.Imaging.Metafile
  parent: System.Drawing.Imaging
  isExternal: false
  name: Metafile
  nameWithType: Metafile
  fullName: System.Drawing.Imaging.Metafile
- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Rectangle,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)
  parent: System.Drawing.Graphics
  isExternal: false
  name: EnumerateMetafile(Metafile, Rectangle, Graphics+EnumerateMetafileProc, IntPtr, ImageAttributes)
  nameWithType: Graphics.EnumerateMetafile(Metafile, Rectangle, Graphics+EnumerateMetafileProc, IntPtr, ImageAttributes)
  fullName: Graphics.EnumerateMetafile(Metafile, Rectangle, Graphics+EnumerateMetafileProc, IntPtr, ImageAttributes)
- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc)
  parent: System.Drawing.Graphics
  isExternal: false
  name: EnumerateMetafile(Metafile, Rectangle, Rectangle, GraphicsUnit, Graphics+EnumerateMetafileProc)
  nameWithType: Graphics.EnumerateMetafile(Metafile, Rectangle, Rectangle, GraphicsUnit, Graphics+EnumerateMetafileProc)
  fullName: Graphics.EnumerateMetafile(Metafile, Rectangle, Rectangle, GraphicsUnit, Graphics+EnumerateMetafileProc)
- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)
  parent: System.Drawing.Graphics
  isExternal: false
  name: EnumerateMetafile(Metafile, RectangleF, Graphics+EnumerateMetafileProc, IntPtr, ImageAttributes)
  nameWithType: Graphics.EnumerateMetafile(Metafile, RectangleF, Graphics+EnumerateMetafileProc, IntPtr, ImageAttributes)
  fullName: Graphics.EnumerateMetafile(Metafile, RectangleF, Graphics+EnumerateMetafileProc, IntPtr, ImageAttributes)
- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc)
  parent: System.Drawing.Graphics
  isExternal: false
  name: EnumerateMetafile(Metafile, RectangleF, RectangleF, GraphicsUnit, Graphics+EnumerateMetafileProc)
  nameWithType: Graphics.EnumerateMetafile(Metafile, RectangleF, RectangleF, GraphicsUnit, Graphics+EnumerateMetafileProc)
  fullName: Graphics.EnumerateMetafile(Metafile, RectangleF, RectangleF, GraphicsUnit, Graphics+EnumerateMetafileProc)
- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)
  parent: System.Drawing.Graphics
  isExternal: false
  name: EnumerateMetafile(Metafile, Point, Rectangle, GraphicsUnit, Graphics+EnumerateMetafileProc, IntPtr)
  nameWithType: Graphics.EnumerateMetafile(Metafile, Point, Rectangle, GraphicsUnit, Graphics+EnumerateMetafileProc, IntPtr)
  fullName: Graphics.EnumerateMetafile(Metafile, Point, Rectangle, GraphicsUnit, Graphics+EnumerateMetafileProc, IntPtr)
- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)
  parent: System.Drawing.Graphics
  isExternal: false
  name: EnumerateMetafile(Metafile, Point[], Rectangle, GraphicsUnit, Graphics+EnumerateMetafileProc, IntPtr)
  nameWithType: Graphics.EnumerateMetafile(Metafile, Point[], Rectangle, GraphicsUnit, Graphics+EnumerateMetafileProc, IntPtr)
  fullName: Graphics.EnumerateMetafile(Metafile, Point[], Rectangle, GraphicsUnit, Graphics+EnumerateMetafileProc, IntPtr)
- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)
  parent: System.Drawing.Graphics
  isExternal: false
  name: EnumerateMetafile(Metafile, PointF[], RectangleF, GraphicsUnit, Graphics+EnumerateMetafileProc, IntPtr)
  nameWithType: Graphics.EnumerateMetafile(Metafile, PointF[], RectangleF, GraphicsUnit, Graphics+EnumerateMetafileProc, IntPtr)
  fullName: Graphics.EnumerateMetafile(Metafile, PointF[], RectangleF, GraphicsUnit, Graphics+EnumerateMetafileProc, IntPtr)
- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)
  parent: System.Drawing.Graphics
  isExternal: false
  name: EnumerateMetafile(Metafile, PointF[], RectangleF, GraphicsUnit, Graphics+EnumerateMetafileProc, IntPtr, ImageAttributes)
  nameWithType: Graphics.EnumerateMetafile(Metafile, PointF[], RectangleF, GraphicsUnit, Graphics+EnumerateMetafileProc, IntPtr, ImageAttributes)
  fullName: Graphics.EnumerateMetafile(Metafile, PointF[], RectangleF, GraphicsUnit, Graphics+EnumerateMetafileProc, IntPtr, ImageAttributes)
- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)
  parent: System.Drawing.Graphics
  isExternal: false
  name: EnumerateMetafile(Metafile, RectangleF, RectangleF, GraphicsUnit, Graphics+EnumerateMetafileProc, IntPtr)
  nameWithType: Graphics.EnumerateMetafile(Metafile, RectangleF, RectangleF, GraphicsUnit, Graphics+EnumerateMetafileProc, IntPtr)
  fullName: Graphics.EnumerateMetafile(Metafile, RectangleF, RectangleF, GraphicsUnit, Graphics+EnumerateMetafileProc, IntPtr)
- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)
  parent: System.Drawing.Graphics
  isExternal: false
  name: EnumerateMetafile(Metafile, Point, Rectangle, GraphicsUnit, Graphics+EnumerateMetafileProc, IntPtr, ImageAttributes)
  nameWithType: Graphics.EnumerateMetafile(Metafile, Point, Rectangle, GraphicsUnit, Graphics+EnumerateMetafileProc, IntPtr, ImageAttributes)
  fullName: Graphics.EnumerateMetafile(Metafile, Point, Rectangle, GraphicsUnit, Graphics+EnumerateMetafileProc, IntPtr, ImageAttributes)
- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)
  parent: System.Drawing.Graphics
  isExternal: false
  name: EnumerateMetafile(Metafile, Point[], Rectangle, GraphicsUnit, Graphics+EnumerateMetafileProc, IntPtr, ImageAttributes)
  nameWithType: Graphics.EnumerateMetafile(Metafile, Point[], Rectangle, GraphicsUnit, Graphics+EnumerateMetafileProc, IntPtr, ImageAttributes)
  fullName: Graphics.EnumerateMetafile(Metafile, Point[], Rectangle, GraphicsUnit, Graphics+EnumerateMetafileProc, IntPtr, ImageAttributes)
- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)
  parent: System.Drawing.Graphics
  isExternal: false
  name: EnumerateMetafile(Metafile, PointF, RectangleF, GraphicsUnit, Graphics+EnumerateMetafileProc, IntPtr, ImageAttributes)
  nameWithType: Graphics.EnumerateMetafile(Metafile, PointF, RectangleF, GraphicsUnit, Graphics+EnumerateMetafileProc, IntPtr, ImageAttributes)
  fullName: Graphics.EnumerateMetafile(Metafile, PointF, RectangleF, GraphicsUnit, Graphics+EnumerateMetafileProc, IntPtr, ImageAttributes)
- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc)
  parent: System.Drawing.Graphics
  isExternal: false
  name: EnumerateMetafile(Metafile, PointF[], RectangleF, GraphicsUnit, Graphics+EnumerateMetafileProc)
  nameWithType: Graphics.EnumerateMetafile(Metafile, PointF[], RectangleF, GraphicsUnit, Graphics+EnumerateMetafileProc)
  fullName: Graphics.EnumerateMetafile(Metafile, PointF[], RectangleF, GraphicsUnit, Graphics+EnumerateMetafileProc)
- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)
  parent: System.Drawing.Graphics
  isExternal: false
  name: EnumerateMetafile(Metafile, Rectangle, Rectangle, GraphicsUnit, Graphics+EnumerateMetafileProc, IntPtr, ImageAttributes)
  nameWithType: Graphics.EnumerateMetafile(Metafile, Rectangle, Rectangle, GraphicsUnit, Graphics+EnumerateMetafileProc, IntPtr, ImageAttributes)
  fullName: Graphics.EnumerateMetafile(Metafile, Rectangle, Rectangle, GraphicsUnit, Graphics+EnumerateMetafileProc, IntPtr, ImageAttributes)
- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)
  parent: System.Drawing.Graphics
  isExternal: false
  name: EnumerateMetafile(Metafile, RectangleF, RectangleF, GraphicsUnit, Graphics+EnumerateMetafileProc, IntPtr, ImageAttributes)
  nameWithType: Graphics.EnumerateMetafile(Metafile, RectangleF, RectangleF, GraphicsUnit, Graphics+EnumerateMetafileProc, IntPtr, ImageAttributes)
  fullName: Graphics.EnumerateMetafile(Metafile, RectangleF, RectangleF, GraphicsUnit, Graphics+EnumerateMetafileProc, IntPtr, ImageAttributes)
- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)
  parent: System.Drawing.Graphics
  isExternal: false
  name: EnumerateMetafile(Metafile, Rectangle, Rectangle, GraphicsUnit, Graphics+EnumerateMetafileProc, IntPtr)
  nameWithType: Graphics.EnumerateMetafile(Metafile, Rectangle, Rectangle, GraphicsUnit, Graphics+EnumerateMetafileProc, IntPtr)
  fullName: Graphics.EnumerateMetafile(Metafile, Rectangle, Rectangle, GraphicsUnit, Graphics+EnumerateMetafileProc, IntPtr)
- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF[],System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)
  parent: System.Drawing.Graphics
  isExternal: false
  name: EnumerateMetafile(Metafile, PointF[], Graphics+EnumerateMetafileProc, IntPtr, ImageAttributes)
  nameWithType: Graphics.EnumerateMetafile(Metafile, PointF[], Graphics+EnumerateMetafileProc, IntPtr, ImageAttributes)
  fullName: Graphics.EnumerateMetafile(Metafile, PointF[], Graphics+EnumerateMetafileProc, IntPtr, ImageAttributes)
- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc)
  parent: System.Drawing.Graphics
  isExternal: false
  name: EnumerateMetafile(Metafile, Point[], Rectangle, GraphicsUnit, Graphics+EnumerateMetafileProc)
  nameWithType: Graphics.EnumerateMetafile(Metafile, Point[], Rectangle, GraphicsUnit, Graphics+EnumerateMetafileProc)
  fullName: Graphics.EnumerateMetafile(Metafile, Point[], Rectangle, GraphicsUnit, Graphics+EnumerateMetafileProc)
- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)
  parent: System.Drawing.Graphics
  isExternal: false
  name: EnumerateMetafile(Metafile, PointF, Graphics+EnumerateMetafileProc, IntPtr, ImageAttributes)
  nameWithType: Graphics.EnumerateMetafile(Metafile, PointF, Graphics+EnumerateMetafileProc, IntPtr, ImageAttributes)
  fullName: Graphics.EnumerateMetafile(Metafile, PointF, Graphics+EnumerateMetafileProc, IntPtr, ImageAttributes)
- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Graphics.EnumerateMetafileProc)
  parent: System.Drawing.Graphics
  isExternal: false
  name: EnumerateMetafile(Metafile, Point, Graphics+EnumerateMetafileProc)
  nameWithType: Graphics.EnumerateMetafile(Metafile, Point, Graphics+EnumerateMetafileProc)
  fullName: Graphics.EnumerateMetafile(Metafile, Point, Graphics+EnumerateMetafileProc)
- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point[],System.Drawing.Graphics.EnumerateMetafileProc)
  parent: System.Drawing.Graphics
  isExternal: false
  name: EnumerateMetafile(Metafile, Point[], Graphics+EnumerateMetafileProc)
  nameWithType: Graphics.EnumerateMetafile(Metafile, Point[], Graphics+EnumerateMetafileProc)
  fullName: Graphics.EnumerateMetafile(Metafile, Point[], Graphics+EnumerateMetafileProc)
- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF,System.Drawing.Graphics.EnumerateMetafileProc)
  parent: System.Drawing.Graphics
  isExternal: false
  name: EnumerateMetafile(Metafile, PointF, Graphics+EnumerateMetafileProc)
  nameWithType: Graphics.EnumerateMetafile(Metafile, PointF, Graphics+EnumerateMetafileProc)
  fullName: Graphics.EnumerateMetafile(Metafile, PointF, Graphics+EnumerateMetafileProc)
- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF[],System.Drawing.Graphics.EnumerateMetafileProc)
  parent: System.Drawing.Graphics
  isExternal: false
  name: EnumerateMetafile(Metafile, PointF[], Graphics+EnumerateMetafileProc)
  nameWithType: Graphics.EnumerateMetafile(Metafile, PointF[], Graphics+EnumerateMetafileProc)
  fullName: Graphics.EnumerateMetafile(Metafile, PointF[], Graphics+EnumerateMetafileProc)
- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF,System.Drawing.Graphics.EnumerateMetafileProc)
  parent: System.Drawing.Graphics
  isExternal: false
  name: EnumerateMetafile(Metafile, RectangleF, Graphics+EnumerateMetafileProc)
  nameWithType: Graphics.EnumerateMetafile(Metafile, RectangleF, Graphics+EnumerateMetafileProc)
  fullName: Graphics.EnumerateMetafile(Metafile, RectangleF, Graphics+EnumerateMetafileProc)
- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)
  parent: System.Drawing.Graphics
  isExternal: false
  name: EnumerateMetafile(Metafile, Point, Graphics+EnumerateMetafileProc, IntPtr)
  nameWithType: Graphics.EnumerateMetafile(Metafile, Point, Graphics+EnumerateMetafileProc, IntPtr)
  fullName: Graphics.EnumerateMetafile(Metafile, Point, Graphics+EnumerateMetafileProc, IntPtr)
- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point[],System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)
  parent: System.Drawing.Graphics
  isExternal: false
  name: EnumerateMetafile(Metafile, Point[], Graphics+EnumerateMetafileProc, IntPtr)
  nameWithType: Graphics.EnumerateMetafile(Metafile, Point[], Graphics+EnumerateMetafileProc, IntPtr)
  fullName: Graphics.EnumerateMetafile(Metafile, Point[], Graphics+EnumerateMetafileProc, IntPtr)
- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Rectangle,System.Drawing.Graphics.EnumerateMetafileProc)
  parent: System.Drawing.Graphics
  isExternal: false
  name: EnumerateMetafile(Metafile, Rectangle, Graphics+EnumerateMetafileProc)
  nameWithType: Graphics.EnumerateMetafile(Metafile, Rectangle, Graphics+EnumerateMetafileProc)
  fullName: Graphics.EnumerateMetafile(Metafile, Rectangle, Graphics+EnumerateMetafileProc)
- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF[],System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)
  parent: System.Drawing.Graphics
  isExternal: false
  name: EnumerateMetafile(Metafile, PointF[], Graphics+EnumerateMetafileProc, IntPtr)
  nameWithType: Graphics.EnumerateMetafile(Metafile, PointF[], Graphics+EnumerateMetafileProc, IntPtr)
  fullName: Graphics.EnumerateMetafile(Metafile, PointF[], Graphics+EnumerateMetafileProc, IntPtr)
- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Rectangle,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)
  parent: System.Drawing.Graphics
  isExternal: false
  name: EnumerateMetafile(Metafile, Rectangle, Graphics+EnumerateMetafileProc, IntPtr)
  nameWithType: Graphics.EnumerateMetafile(Metafile, Rectangle, Graphics+EnumerateMetafileProc, IntPtr)
  fullName: Graphics.EnumerateMetafile(Metafile, Rectangle, Graphics+EnumerateMetafileProc, IntPtr)
- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)
  parent: System.Drawing.Graphics
  isExternal: false
  name: EnumerateMetafile(Metafile, RectangleF, Graphics+EnumerateMetafileProc, IntPtr)
  nameWithType: Graphics.EnumerateMetafile(Metafile, RectangleF, Graphics+EnumerateMetafileProc, IntPtr)
  fullName: Graphics.EnumerateMetafile(Metafile, RectangleF, Graphics+EnumerateMetafileProc, IntPtr)
- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)
  parent: System.Drawing.Graphics
  isExternal: false
  name: EnumerateMetafile(Metafile, Point, Graphics+EnumerateMetafileProc, IntPtr, ImageAttributes)
  nameWithType: Graphics.EnumerateMetafile(Metafile, Point, Graphics+EnumerateMetafileProc, IntPtr, ImageAttributes)
  fullName: Graphics.EnumerateMetafile(Metafile, Point, Graphics+EnumerateMetafileProc, IntPtr, ImageAttributes)
- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc)
  parent: System.Drawing.Graphics
  isExternal: false
  name: EnumerateMetafile(Metafile, Point, Rectangle, GraphicsUnit, Graphics+EnumerateMetafileProc)
  nameWithType: Graphics.EnumerateMetafile(Metafile, Point, Rectangle, GraphicsUnit, Graphics+EnumerateMetafileProc)
  fullName: Graphics.EnumerateMetafile(Metafile, Point, Rectangle, GraphicsUnit, Graphics+EnumerateMetafileProc)
- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point[],System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)
  parent: System.Drawing.Graphics
  isExternal: false
  name: EnumerateMetafile(Metafile, Point[], Graphics+EnumerateMetafileProc, IntPtr, ImageAttributes)
  nameWithType: Graphics.EnumerateMetafile(Metafile, Point[], Graphics+EnumerateMetafileProc, IntPtr, ImageAttributes)
  fullName: Graphics.EnumerateMetafile(Metafile, Point[], Graphics+EnumerateMetafileProc, IntPtr, ImageAttributes)
- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc)
  parent: System.Drawing.Graphics
  isExternal: false
  name: EnumerateMetafile(Metafile, PointF, RectangleF, GraphicsUnit, Graphics+EnumerateMetafileProc)
  nameWithType: Graphics.EnumerateMetafile(Metafile, PointF, RectangleF, GraphicsUnit, Graphics+EnumerateMetafileProc)
  fullName: Graphics.EnumerateMetafile(Metafile, PointF, RectangleF, GraphicsUnit, Graphics+EnumerateMetafileProc)
- uid: System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)
  parent: System.Drawing.Graphics
  isExternal: false
  name: EnumerateMetafile(Metafile, PointF, Graphics+EnumerateMetafileProc, IntPtr)
  nameWithType: Graphics.EnumerateMetafile(Metafile, PointF, Graphics+EnumerateMetafileProc, IntPtr)
  fullName: Graphics.EnumerateMetafile(Metafile, PointF, Graphics+EnumerateMetafileProc, IntPtr)
- uid: System.Drawing.Graphics.ExcludeClip(System.Drawing.Region)
  parent: System.Drawing.Graphics
  isExternal: false
  name: ExcludeClip(Region)
  nameWithType: Graphics.ExcludeClip(Region)
  fullName: Graphics.ExcludeClip(Region)
- uid: System.Drawing.Graphics.ExcludeClip(System.Drawing.Rectangle)
  parent: System.Drawing.Graphics
  isExternal: false
  name: ExcludeClip(Rectangle)
  nameWithType: Graphics.ExcludeClip(Rectangle)
  fullName: Graphics.ExcludeClip(Rectangle)
- uid: System.Drawing.Graphics.FillClosedCurve(System.Drawing.Brush,System.Drawing.Point[])
  parent: System.Drawing.Graphics
  isExternal: false
  name: FillClosedCurve(Brush, Point[])
  nameWithType: Graphics.FillClosedCurve(Brush, Point[])
  fullName: Graphics.FillClosedCurve(Brush, Point[])
- uid: System.Drawing.Graphics.FillClosedCurve(System.Drawing.Brush,System.Drawing.PointF[])
  parent: System.Drawing.Graphics
  isExternal: false
  name: FillClosedCurve(Brush, PointF[])
  nameWithType: Graphics.FillClosedCurve(Brush, PointF[])
  fullName: Graphics.FillClosedCurve(Brush, PointF[])
- uid: System.Drawing.Graphics.FillClosedCurve(System.Drawing.Brush,System.Drawing.Point[],System.Drawing.Drawing2D.FillMode)
  parent: System.Drawing.Graphics
  isExternal: false
  name: FillClosedCurve(Brush, Point[], FillMode)
  nameWithType: Graphics.FillClosedCurve(Brush, Point[], FillMode)
  fullName: Graphics.FillClosedCurve(Brush, Point[], FillMode)
- uid: System.Drawing.Graphics.FillClosedCurve(System.Drawing.Brush,System.Drawing.PointF[],System.Drawing.Drawing2D.FillMode)
  parent: System.Drawing.Graphics
  isExternal: false
  name: FillClosedCurve(Brush, PointF[], FillMode)
  nameWithType: Graphics.FillClosedCurve(Brush, PointF[], FillMode)
  fullName: Graphics.FillClosedCurve(Brush, PointF[], FillMode)
- uid: System.Drawing.Graphics.FillClosedCurve(System.Drawing.Brush,System.Drawing.Point[],System.Drawing.Drawing2D.FillMode,System.Single)
  parent: System.Drawing.Graphics
  isExternal: false
  name: FillClosedCurve(Brush, Point[], FillMode, Single)
  nameWithType: Graphics.FillClosedCurve(Brush, Point[], FillMode, Single)
  fullName: Graphics.FillClosedCurve(Brush, Point[], FillMode, Single)
- uid: System.Drawing.Graphics.FillClosedCurve(System.Drawing.Brush,System.Drawing.PointF[],System.Drawing.Drawing2D.FillMode,System.Single)
  parent: System.Drawing.Graphics
  isExternal: false
  name: FillClosedCurve(Brush, PointF[], FillMode, Single)
  nameWithType: Graphics.FillClosedCurve(Brush, PointF[], FillMode, Single)
  fullName: Graphics.FillClosedCurve(Brush, PointF[], FillMode, Single)
- uid: System.Drawing.Graphics.FillEllipse(System.Drawing.Brush,System.Int32,System.Int32,System.Int32,System.Int32)
  parent: System.Drawing.Graphics
  isExternal: false
  name: FillEllipse(Brush, Int32, Int32, Int32, Int32)
  nameWithType: Graphics.FillEllipse(Brush, Int32, Int32, Int32, Int32)
  fullName: Graphics.FillEllipse(Brush, Int32, Int32, Int32, Int32)
- uid: System.Drawing.Graphics.FillEllipse(System.Drawing.Brush,System.Single,System.Single,System.Single,System.Single)
  parent: System.Drawing.Graphics
  isExternal: false
  name: FillEllipse(Brush, Single, Single, Single, Single)
  nameWithType: Graphics.FillEllipse(Brush, Single, Single, Single, Single)
  fullName: Graphics.FillEllipse(Brush, Single, Single, Single, Single)
- uid: System.Drawing.Graphics.FillEllipse(System.Drawing.Brush,System.Drawing.Rectangle)
  parent: System.Drawing.Graphics
  isExternal: false
  name: FillEllipse(Brush, Rectangle)
  nameWithType: Graphics.FillEllipse(Brush, Rectangle)
  fullName: Graphics.FillEllipse(Brush, Rectangle)
- uid: System.Drawing.Graphics.FillEllipse(System.Drawing.Brush,System.Drawing.RectangleF)
  parent: System.Drawing.Graphics
  isExternal: false
  name: FillEllipse(Brush, RectangleF)
  nameWithType: Graphics.FillEllipse(Brush, RectangleF)
  fullName: Graphics.FillEllipse(Brush, RectangleF)
- uid: System.Drawing.Graphics.FillPath(System.Drawing.Brush,System.Drawing.Drawing2D.GraphicsPath)
  parent: System.Drawing.Graphics
  isExternal: false
  name: FillPath(Brush, GraphicsPath)
  nameWithType: Graphics.FillPath(Brush, GraphicsPath)
  fullName: Graphics.FillPath(Brush, GraphicsPath)
- uid: System.Drawing.Graphics.FillPie(System.Drawing.Brush,System.Drawing.Rectangle,System.Single,System.Single)
  parent: System.Drawing.Graphics
  isExternal: false
  name: FillPie(Brush, Rectangle, Single, Single)
  nameWithType: Graphics.FillPie(Brush, Rectangle, Single, Single)
  fullName: Graphics.FillPie(Brush, Rectangle, Single, Single)
- uid: System.Drawing.Graphics.FillPie(System.Drawing.Brush,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  parent: System.Drawing.Graphics
  isExternal: false
  name: FillPie(Brush, Int32, Int32, Int32, Int32, Int32, Int32)
  nameWithType: Graphics.FillPie(Brush, Int32, Int32, Int32, Int32, Int32, Int32)
  fullName: Graphics.FillPie(Brush, Int32, Int32, Int32, Int32, Int32, Int32)
- uid: System.Drawing.Graphics.FillPie(System.Drawing.Brush,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)
  parent: System.Drawing.Graphics
  isExternal: false
  name: FillPie(Brush, Single, Single, Single, Single, Single, Single)
  nameWithType: Graphics.FillPie(Brush, Single, Single, Single, Single, Single, Single)
  fullName: Graphics.FillPie(Brush, Single, Single, Single, Single, Single, Single)
- uid: System.Drawing.Graphics.FillPolygon(System.Drawing.Brush,System.Drawing.Point[])
  parent: System.Drawing.Graphics
  isExternal: false
  name: FillPolygon(Brush, Point[])
  nameWithType: Graphics.FillPolygon(Brush, Point[])
  fullName: Graphics.FillPolygon(Brush, Point[])
- uid: System.Drawing.Graphics.FillPolygon(System.Drawing.Brush,System.Drawing.PointF[])
  parent: System.Drawing.Graphics
  isExternal: false
  name: FillPolygon(Brush, PointF[])
  nameWithType: Graphics.FillPolygon(Brush, PointF[])
  fullName: Graphics.FillPolygon(Brush, PointF[])
- uid: System.Drawing.Graphics.FillPolygon(System.Drawing.Brush,System.Drawing.Point[],System.Drawing.Drawing2D.FillMode)
  parent: System.Drawing.Graphics
  isExternal: false
  name: FillPolygon(Brush, Point[], FillMode)
  nameWithType: Graphics.FillPolygon(Brush, Point[], FillMode)
  fullName: Graphics.FillPolygon(Brush, Point[], FillMode)
- uid: System.Drawing.Graphics.FillPolygon(System.Drawing.Brush,System.Drawing.PointF[],System.Drawing.Drawing2D.FillMode)
  parent: System.Drawing.Graphics
  isExternal: false
  name: FillPolygon(Brush, PointF[], FillMode)
  nameWithType: Graphics.FillPolygon(Brush, PointF[], FillMode)
  fullName: Graphics.FillPolygon(Brush, PointF[], FillMode)
- uid: System.Drawing.Graphics.FillRectangle(System.Drawing.Brush,System.Drawing.Rectangle)
  parent: System.Drawing.Graphics
  isExternal: false
  name: FillRectangle(Brush, Rectangle)
  nameWithType: Graphics.FillRectangle(Brush, Rectangle)
  fullName: Graphics.FillRectangle(Brush, Rectangle)
- uid: System.Drawing.Graphics.FillRectangle(System.Drawing.Brush,System.Drawing.RectangleF)
  parent: System.Drawing.Graphics
  isExternal: false
  name: FillRectangle(Brush, RectangleF)
  nameWithType: Graphics.FillRectangle(Brush, RectangleF)
  fullName: Graphics.FillRectangle(Brush, RectangleF)
- uid: System.Drawing.Graphics.FillRectangle(System.Drawing.Brush,System.Int32,System.Int32,System.Int32,System.Int32)
  parent: System.Drawing.Graphics
  isExternal: false
  name: FillRectangle(Brush, Int32, Int32, Int32, Int32)
  nameWithType: Graphics.FillRectangle(Brush, Int32, Int32, Int32, Int32)
  fullName: Graphics.FillRectangle(Brush, Int32, Int32, Int32, Int32)
- uid: System.Drawing.Graphics.FillRectangle(System.Drawing.Brush,System.Single,System.Single,System.Single,System.Single)
  parent: System.Drawing.Graphics
  isExternal: false
  name: FillRectangle(Brush, Single, Single, Single, Single)
  nameWithType: Graphics.FillRectangle(Brush, Single, Single, Single, Single)
  fullName: Graphics.FillRectangle(Brush, Single, Single, Single, Single)
- uid: System.Drawing.Graphics.FillRectangles(System.Drawing.Brush,System.Drawing.RectangleF[])
  parent: System.Drawing.Graphics
  isExternal: false
  name: FillRectangles(Brush, RectangleF[])
  nameWithType: Graphics.FillRectangles(Brush, RectangleF[])
  fullName: Graphics.FillRectangles(Brush, RectangleF[])
- uid: System.Drawing.Graphics.FillRectangles(System.Drawing.Brush,System.Drawing.Rectangle[])
  parent: System.Drawing.Graphics
  isExternal: false
  name: FillRectangles(Brush, Rectangle[])
  nameWithType: Graphics.FillRectangles(Brush, Rectangle[])
  fullName: Graphics.FillRectangles(Brush, Rectangle[])
- uid: System.Drawing.Graphics.FillRegion(System.Drawing.Brush,System.Drawing.Region)
  parent: System.Drawing.Graphics
  isExternal: false
  name: FillRegion(Brush, Region)
  nameWithType: Graphics.FillRegion(Brush, Region)
  fullName: Graphics.FillRegion(Brush, Region)
- uid: System.Drawing.Graphics.Finalize
  parent: System.Drawing.Graphics
  isExternal: false
  name: Finalize()
  nameWithType: Graphics.Finalize()
  fullName: Graphics.Finalize()
- uid: System.Drawing.Graphics.Flush
  parent: System.Drawing.Graphics
  isExternal: false
  name: Flush()
  nameWithType: Graphics.Flush()
  fullName: Graphics.Flush()
- uid: System.Drawing.Graphics.Flush(System.Drawing.Drawing2D.FlushIntention)
  parent: System.Drawing.Graphics
  isExternal: false
  name: Flush(FlushIntention)
  nameWithType: Graphics.Flush(FlushIntention)
  fullName: Graphics.Flush(FlushIntention)
- uid: System.Drawing.Drawing2D.FlushIntention
  parent: System.Drawing.Drawing2D
  isExternal: false
  name: FlushIntention
  nameWithType: FlushIntention
  fullName: System.Drawing.Drawing2D.FlushIntention
- uid: System.Drawing.Graphics.FromHdc(System.IntPtr)
  parent: System.Drawing.Graphics
  isExternal: false
  name: FromHdc(IntPtr)
  nameWithType: Graphics.FromHdc(IntPtr)
  fullName: Graphics.FromHdc(IntPtr)
- uid: System.Drawing.Graphics.FromHdc(System.IntPtr,System.IntPtr)
  parent: System.Drawing.Graphics
  isExternal: false
  name: FromHdc(IntPtr, IntPtr)
  nameWithType: Graphics.FromHdc(IntPtr, IntPtr)
  fullName: Graphics.FromHdc(IntPtr, IntPtr)
- uid: System.Drawing.Graphics.FromHdcInternal(System.IntPtr)
  parent: System.Drawing.Graphics
  isExternal: false
  name: FromHdcInternal(IntPtr)
  nameWithType: Graphics.FromHdcInternal(IntPtr)
  fullName: Graphics.FromHdcInternal(IntPtr)
- uid: System.Drawing.Graphics.FromHwnd(System.IntPtr)
  parent: System.Drawing.Graphics
  isExternal: false
  name: FromHwnd(IntPtr)
  nameWithType: Graphics.FromHwnd(IntPtr)
  fullName: Graphics.FromHwnd(IntPtr)
- uid: System.Drawing.Graphics.FromHwndInternal(System.IntPtr)
  parent: System.Drawing.Graphics
  isExternal: false
  name: FromHwndInternal(IntPtr)
  nameWithType: Graphics.FromHwndInternal(IntPtr)
  fullName: Graphics.FromHwndInternal(IntPtr)
- uid: System.Drawing.Graphics.FromImage(System.Drawing.Image)
  parent: System.Drawing.Graphics
  isExternal: false
  name: FromImage(Image)
  nameWithType: Graphics.FromImage(Image)
  fullName: Graphics.FromImage(Image)
- uid: System.Drawing.Graphics.GetContextInfo
  parent: System.Drawing.Graphics
  isExternal: false
  name: GetContextInfo()
  nameWithType: Graphics.GetContextInfo()
  fullName: Graphics.GetContextInfo()
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Drawing.Graphics.GetHalftonePalette
  parent: System.Drawing.Graphics
  isExternal: false
  name: GetHalftonePalette()
  nameWithType: Graphics.GetHalftonePalette()
  fullName: Graphics.GetHalftonePalette()
- uid: System.Drawing.Graphics.GetHdc
  parent: System.Drawing.Graphics
  isExternal: false
  name: GetHdc()
  nameWithType: Graphics.GetHdc()
  fullName: Graphics.GetHdc()
- uid: System.Drawing.Graphics.GetNearestColor(System.Drawing.Color)
  parent: System.Drawing.Graphics
  isExternal: false
  name: GetNearestColor(Color)
  nameWithType: Graphics.GetNearestColor(Color)
  fullName: Graphics.GetNearestColor(Color)
- uid: System.Drawing.Graphics.InterpolationMode
  parent: System.Drawing.Graphics
  isExternal: false
  name: InterpolationMode
  nameWithType: Graphics.InterpolationMode
  fullName: Graphics.InterpolationMode
- uid: System.Drawing.Drawing2D.InterpolationMode
  parent: System.Drawing.Drawing2D
  isExternal: false
  name: InterpolationMode
  nameWithType: InterpolationMode
  fullName: System.Drawing.Drawing2D.InterpolationMode
- uid: System.Drawing.Graphics.IntersectClip(System.Drawing.Rectangle)
  parent: System.Drawing.Graphics
  isExternal: false
  name: IntersectClip(Rectangle)
  nameWithType: Graphics.IntersectClip(Rectangle)
  fullName: Graphics.IntersectClip(Rectangle)
- uid: System.Drawing.Graphics.IntersectClip(System.Drawing.RectangleF)
  parent: System.Drawing.Graphics
  isExternal: false
  name: IntersectClip(RectangleF)
  nameWithType: Graphics.IntersectClip(RectangleF)
  fullName: Graphics.IntersectClip(RectangleF)
- uid: System.Drawing.Graphics.IntersectClip(System.Drawing.Region)
  parent: System.Drawing.Graphics
  isExternal: false
  name: IntersectClip(Region)
  nameWithType: Graphics.IntersectClip(Region)
  fullName: Graphics.IntersectClip(Region)
- uid: System.Drawing.Graphics.IsClipEmpty
  parent: System.Drawing.Graphics
  isExternal: false
  name: IsClipEmpty
  nameWithType: Graphics.IsClipEmpty
  fullName: Graphics.IsClipEmpty
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Drawing.Graphics.IsVisible(System.Drawing.Point)
  parent: System.Drawing.Graphics
  isExternal: false
  name: IsVisible(Point)
  nameWithType: Graphics.IsVisible(Point)
  fullName: Graphics.IsVisible(Point)
- uid: System.Drawing.Graphics.IsVisible(System.Drawing.PointF)
  parent: System.Drawing.Graphics
  isExternal: false
  name: IsVisible(PointF)
  nameWithType: Graphics.IsVisible(PointF)
  fullName: Graphics.IsVisible(PointF)
- uid: System.Drawing.Graphics.IsVisible(System.Drawing.Rectangle)
  parent: System.Drawing.Graphics
  isExternal: false
  name: IsVisible(Rectangle)
  nameWithType: Graphics.IsVisible(Rectangle)
  fullName: Graphics.IsVisible(Rectangle)
- uid: System.Drawing.Graphics.IsVisible(System.Drawing.RectangleF)
  parent: System.Drawing.Graphics
  isExternal: false
  name: IsVisible(RectangleF)
  nameWithType: Graphics.IsVisible(RectangleF)
  fullName: Graphics.IsVisible(RectangleF)
- uid: System.Drawing.Graphics.IsVisible(System.Int32,System.Int32)
  parent: System.Drawing.Graphics
  isExternal: false
  name: IsVisible(Int32, Int32)
  nameWithType: Graphics.IsVisible(Int32, Int32)
  fullName: Graphics.IsVisible(Int32, Int32)
- uid: System.Drawing.Graphics.IsVisible(System.Single,System.Single)
  parent: System.Drawing.Graphics
  isExternal: false
  name: IsVisible(Single, Single)
  nameWithType: Graphics.IsVisible(Single, Single)
  fullName: Graphics.IsVisible(Single, Single)
- uid: System.Drawing.Graphics.IsVisible(System.Int32,System.Int32,System.Int32,System.Int32)
  parent: System.Drawing.Graphics
  isExternal: false
  name: IsVisible(Int32, Int32, Int32, Int32)
  nameWithType: Graphics.IsVisible(Int32, Int32, Int32, Int32)
  fullName: Graphics.IsVisible(Int32, Int32, Int32, Int32)
- uid: System.Drawing.Graphics.IsVisible(System.Single,System.Single,System.Single,System.Single)
  parent: System.Drawing.Graphics
  isExternal: false
  name: IsVisible(Single, Single, Single, Single)
  nameWithType: Graphics.IsVisible(Single, Single, Single, Single)
  fullName: Graphics.IsVisible(Single, Single, Single, Single)
- uid: System.Drawing.Graphics.IsVisibleClipEmpty
  parent: System.Drawing.Graphics
  isExternal: false
  name: IsVisibleClipEmpty
  nameWithType: Graphics.IsVisibleClipEmpty
  fullName: Graphics.IsVisibleClipEmpty
- uid: System.Drawing.Graphics.MeasureCharacterRanges(System.String,System.Drawing.Font,System.Drawing.RectangleF,System.Drawing.StringFormat)
  parent: System.Drawing.Graphics
  isExternal: false
  name: MeasureCharacterRanges(String, Font, RectangleF, StringFormat)
  nameWithType: Graphics.MeasureCharacterRanges(String, Font, RectangleF, StringFormat)
  fullName: Graphics.MeasureCharacterRanges(String, Font, RectangleF, StringFormat)
- uid: System.Drawing.Region[]
  parent: System.Drawing
  isExternal: false
  name: Region[]
  nameWithType: Region[]
  fullName: System.Drawing.Region[]
  spec.csharp:
  - uid: System.Drawing.Region
    name: Region
    nameWithType: Region
    fullName: System.Drawing.Region
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font)
  parent: System.Drawing.Graphics
  isExternal: false
  name: MeasureString(String, Font)
  nameWithType: Graphics.MeasureString(String, Font)
  fullName: Graphics.MeasureString(String, Font)
- uid: System.Drawing.SizeF
  parent: System.Drawing
  isExternal: false
  name: SizeF
  nameWithType: SizeF
  fullName: System.Drawing.SizeF
- uid: System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font,System.Drawing.SizeF)
  parent: System.Drawing.Graphics
  isExternal: false
  name: MeasureString(String, Font, SizeF)
  nameWithType: Graphics.MeasureString(String, Font, SizeF)
  fullName: Graphics.MeasureString(String, Font, SizeF)
- uid: System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font,System.Int32)
  parent: System.Drawing.Graphics
  isExternal: false
  name: MeasureString(String, Font, Int32)
  nameWithType: Graphics.MeasureString(String, Font, Int32)
  fullName: Graphics.MeasureString(String, Font, Int32)
- uid: System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font,System.Drawing.PointF,System.Drawing.StringFormat)
  parent: System.Drawing.Graphics
  isExternal: false
  name: MeasureString(String, Font, PointF, StringFormat)
  nameWithType: Graphics.MeasureString(String, Font, PointF, StringFormat)
  fullName: Graphics.MeasureString(String, Font, PointF, StringFormat)
- uid: System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font,System.Drawing.SizeF,System.Drawing.StringFormat)
  parent: System.Drawing.Graphics
  isExternal: false
  name: MeasureString(String, Font, SizeF, StringFormat)
  nameWithType: Graphics.MeasureString(String, Font, SizeF, StringFormat)
  fullName: Graphics.MeasureString(String, Font, SizeF, StringFormat)
- uid: System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font,System.Int32,System.Drawing.StringFormat)
  parent: System.Drawing.Graphics
  isExternal: false
  name: MeasureString(String, Font, Int32, StringFormat)
  nameWithType: Graphics.MeasureString(String, Font, Int32, StringFormat)
  fullName: Graphics.MeasureString(String, Font, Int32, StringFormat)
- uid: System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font,System.Drawing.SizeF,System.Drawing.StringFormat,System.Int32@,System.Int32@)
  parent: System.Drawing.Graphics
  isExternal: false
  name: MeasureString(String, Font, SizeF, StringFormat, Int32, Int32)
  nameWithType: Graphics.MeasureString(String, Font, SizeF, StringFormat, Int32, Int32)
  fullName: Graphics.MeasureString(String, Font, SizeF, StringFormat, Int32, Int32)
- uid: System.Drawing.Graphics.MultiplyTransform(System.Drawing.Drawing2D.Matrix)
  parent: System.Drawing.Graphics
  isExternal: false
  name: MultiplyTransform(Matrix)
  nameWithType: Graphics.MultiplyTransform(Matrix)
  fullName: Graphics.MultiplyTransform(Matrix)
- uid: System.Drawing.Drawing2D.Matrix
  parent: System.Drawing.Drawing2D
  isExternal: false
  name: Matrix
  nameWithType: Matrix
  fullName: System.Drawing.Drawing2D.Matrix
- uid: System.Drawing.Graphics.MultiplyTransform(System.Drawing.Drawing2D.Matrix,System.Drawing.Drawing2D.MatrixOrder)
  parent: System.Drawing.Graphics
  isExternal: false
  name: MultiplyTransform(Matrix, MatrixOrder)
  nameWithType: Graphics.MultiplyTransform(Matrix, MatrixOrder)
  fullName: Graphics.MultiplyTransform(Matrix, MatrixOrder)
- uid: System.Drawing.Drawing2D.MatrixOrder
  parent: System.Drawing.Drawing2D
  isExternal: false
  name: MatrixOrder
  nameWithType: MatrixOrder
  fullName: System.Drawing.Drawing2D.MatrixOrder
- uid: System.Drawing.Graphics.PageScale
  parent: System.Drawing.Graphics
  isExternal: false
  name: PageScale
  nameWithType: Graphics.PageScale
  fullName: Graphics.PageScale
- uid: System.Drawing.Graphics.PageUnit
  parent: System.Drawing.Graphics
  isExternal: false
  name: PageUnit
  nameWithType: Graphics.PageUnit
  fullName: Graphics.PageUnit
- uid: System.Drawing.Graphics.PixelOffsetMode
  parent: System.Drawing.Graphics
  isExternal: false
  name: PixelOffsetMode
  nameWithType: Graphics.PixelOffsetMode
  fullName: Graphics.PixelOffsetMode
- uid: System.Drawing.Drawing2D.PixelOffsetMode
  parent: System.Drawing.Drawing2D
  isExternal: false
  name: PixelOffsetMode
  nameWithType: PixelOffsetMode
  fullName: System.Drawing.Drawing2D.PixelOffsetMode
- uid: System.Drawing.Graphics.ReleaseHdc
  parent: System.Drawing.Graphics
  isExternal: false
  name: ReleaseHdc()
  nameWithType: Graphics.ReleaseHdc()
  fullName: Graphics.ReleaseHdc()
- uid: System.Drawing.Graphics.ReleaseHdc(System.IntPtr)
  parent: System.Drawing.Graphics
  isExternal: false
  name: ReleaseHdc(IntPtr)
  nameWithType: Graphics.ReleaseHdc(IntPtr)
  fullName: Graphics.ReleaseHdc(IntPtr)
- uid: System.Drawing.Graphics.ReleaseHdcInternal(System.IntPtr)
  parent: System.Drawing.Graphics
  isExternal: false
  name: ReleaseHdcInternal(IntPtr)
  nameWithType: Graphics.ReleaseHdcInternal(IntPtr)
  fullName: Graphics.ReleaseHdcInternal(IntPtr)
- uid: System.Drawing.Graphics.RenderingOrigin
  parent: System.Drawing.Graphics
  isExternal: false
  name: RenderingOrigin
  nameWithType: Graphics.RenderingOrigin
  fullName: Graphics.RenderingOrigin
- uid: System.Drawing.Graphics.ResetClip
  parent: System.Drawing.Graphics
  isExternal: false
  name: ResetClip()
  nameWithType: Graphics.ResetClip()
  fullName: Graphics.ResetClip()
- uid: System.Drawing.Graphics.ResetTransform
  parent: System.Drawing.Graphics
  isExternal: false
  name: ResetTransform()
  nameWithType: Graphics.ResetTransform()
  fullName: Graphics.ResetTransform()
- uid: System.Drawing.Graphics.Restore(System.Drawing.Drawing2D.GraphicsState)
  parent: System.Drawing.Graphics
  isExternal: false
  name: Restore(GraphicsState)
  nameWithType: Graphics.Restore(GraphicsState)
  fullName: Graphics.Restore(GraphicsState)
- uid: System.Drawing.Drawing2D.GraphicsState
  parent: System.Drawing.Drawing2D
  isExternal: false
  name: GraphicsState
  nameWithType: GraphicsState
  fullName: System.Drawing.Drawing2D.GraphicsState
- uid: System.Drawing.Graphics.RotateTransform(System.Single)
  parent: System.Drawing.Graphics
  isExternal: false
  name: RotateTransform(Single)
  nameWithType: Graphics.RotateTransform(Single)
  fullName: Graphics.RotateTransform(Single)
- uid: System.Drawing.Graphics.RotateTransform(System.Single,System.Drawing.Drawing2D.MatrixOrder)
  parent: System.Drawing.Graphics
  isExternal: false
  name: RotateTransform(Single, MatrixOrder)
  nameWithType: Graphics.RotateTransform(Single, MatrixOrder)
  fullName: Graphics.RotateTransform(Single, MatrixOrder)
- uid: System.Drawing.Graphics.Save
  parent: System.Drawing.Graphics
  isExternal: false
  name: Save()
  nameWithType: Graphics.Save()
  fullName: Graphics.Save()
- uid: System.Drawing.Graphics.ScaleTransform(System.Single,System.Single)
  parent: System.Drawing.Graphics
  isExternal: false
  name: ScaleTransform(Single, Single)
  nameWithType: Graphics.ScaleTransform(Single, Single)
  fullName: Graphics.ScaleTransform(Single, Single)
- uid: System.Drawing.Graphics.ScaleTransform(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)
  parent: System.Drawing.Graphics
  isExternal: false
  name: ScaleTransform(Single, Single, MatrixOrder)
  nameWithType: Graphics.ScaleTransform(Single, Single, MatrixOrder)
  fullName: Graphics.ScaleTransform(Single, Single, MatrixOrder)
- uid: System.Drawing.Graphics.SetClip(System.Drawing.Region,System.Drawing.Drawing2D.CombineMode)
  parent: System.Drawing.Graphics
  isExternal: false
  name: SetClip(Region, CombineMode)
  nameWithType: Graphics.SetClip(Region, CombineMode)
  fullName: Graphics.SetClip(Region, CombineMode)
- uid: System.Drawing.Drawing2D.CombineMode
  parent: System.Drawing.Drawing2D
  isExternal: false
  name: CombineMode
  nameWithType: CombineMode
  fullName: System.Drawing.Drawing2D.CombineMode
- uid: System.Drawing.Graphics.SetClip(System.Drawing.RectangleF,System.Drawing.Drawing2D.CombineMode)
  parent: System.Drawing.Graphics
  isExternal: false
  name: SetClip(RectangleF, CombineMode)
  nameWithType: Graphics.SetClip(RectangleF, CombineMode)
  fullName: Graphics.SetClip(RectangleF, CombineMode)
- uid: System.Drawing.Graphics.SetClip(System.Drawing.Rectangle,System.Drawing.Drawing2D.CombineMode)
  parent: System.Drawing.Graphics
  isExternal: false
  name: SetClip(Rectangle, CombineMode)
  nameWithType: Graphics.SetClip(Rectangle, CombineMode)
  fullName: Graphics.SetClip(Rectangle, CombineMode)
- uid: System.Drawing.Graphics.SetClip(System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.CombineMode)
  parent: System.Drawing.Graphics
  isExternal: false
  name: SetClip(GraphicsPath, CombineMode)
  nameWithType: Graphics.SetClip(GraphicsPath, CombineMode)
  fullName: Graphics.SetClip(GraphicsPath, CombineMode)
- uid: System.Drawing.Graphics.SetClip(System.Drawing.Graphics,System.Drawing.Drawing2D.CombineMode)
  parent: System.Drawing.Graphics
  isExternal: false
  name: SetClip(Graphics, CombineMode)
  nameWithType: Graphics.SetClip(Graphics, CombineMode)
  fullName: Graphics.SetClip(Graphics, CombineMode)
- uid: System.Drawing.Graphics.SetClip(System.Drawing.Rectangle)
  parent: System.Drawing.Graphics
  isExternal: false
  name: SetClip(Rectangle)
  nameWithType: Graphics.SetClip(Rectangle)
  fullName: Graphics.SetClip(Rectangle)
- uid: System.Drawing.Graphics.SetClip(System.Drawing.Graphics)
  parent: System.Drawing.Graphics
  isExternal: false
  name: SetClip(Graphics)
  nameWithType: Graphics.SetClip(Graphics)
  fullName: Graphics.SetClip(Graphics)
- uid: System.Drawing.Graphics.SetClip(System.Drawing.Drawing2D.GraphicsPath)
  parent: System.Drawing.Graphics
  isExternal: false
  name: SetClip(GraphicsPath)
  nameWithType: Graphics.SetClip(GraphicsPath)
  fullName: Graphics.SetClip(GraphicsPath)
- uid: System.Drawing.Graphics.SetClip(System.Drawing.RectangleF)
  parent: System.Drawing.Graphics
  isExternal: false
  name: SetClip(RectangleF)
  nameWithType: Graphics.SetClip(RectangleF)
  fullName: Graphics.SetClip(RectangleF)
- uid: System.Drawing.Graphics.SmoothingMode
  parent: System.Drawing.Graphics
  isExternal: false
  name: SmoothingMode
  nameWithType: Graphics.SmoothingMode
  fullName: Graphics.SmoothingMode
- uid: System.Drawing.Drawing2D.SmoothingMode
  parent: System.Drawing.Drawing2D
  isExternal: false
  name: SmoothingMode
  nameWithType: SmoothingMode
  fullName: System.Drawing.Drawing2D.SmoothingMode
- uid: System.Drawing.Graphics.TextContrast
  parent: System.Drawing.Graphics
  isExternal: false
  name: TextContrast
  nameWithType: Graphics.TextContrast
  fullName: Graphics.TextContrast
- uid: System.Drawing.Graphics.TextRenderingHint
  parent: System.Drawing.Graphics
  isExternal: false
  name: TextRenderingHint
  nameWithType: Graphics.TextRenderingHint
  fullName: Graphics.TextRenderingHint
- uid: System.Drawing.Text.TextRenderingHint
  parent: System.Drawing.Text
  isExternal: false
  name: TextRenderingHint
  nameWithType: TextRenderingHint
  fullName: System.Drawing.Text.TextRenderingHint
- uid: System.Drawing.Graphics.Transform
  parent: System.Drawing.Graphics
  isExternal: false
  name: Transform
  nameWithType: Graphics.Transform
  fullName: Graphics.Transform
- uid: System.Drawing.Graphics.TransformPoints(System.Drawing.Drawing2D.CoordinateSpace,System.Drawing.Drawing2D.CoordinateSpace,System.Drawing.Point[])
  parent: System.Drawing.Graphics
  isExternal: false
  name: TransformPoints(CoordinateSpace, CoordinateSpace, Point[])
  nameWithType: Graphics.TransformPoints(CoordinateSpace, CoordinateSpace, Point[])
  fullName: Graphics.TransformPoints(CoordinateSpace, CoordinateSpace, Point[])
- uid: System.Drawing.Drawing2D.CoordinateSpace
  parent: System.Drawing.Drawing2D
  isExternal: false
  name: CoordinateSpace
  nameWithType: CoordinateSpace
  fullName: System.Drawing.Drawing2D.CoordinateSpace
- uid: System.Drawing.Graphics.TransformPoints(System.Drawing.Drawing2D.CoordinateSpace,System.Drawing.Drawing2D.CoordinateSpace,System.Drawing.PointF[])
  parent: System.Drawing.Graphics
  isExternal: false
  name: TransformPoints(CoordinateSpace, CoordinateSpace, PointF[])
  nameWithType: Graphics.TransformPoints(CoordinateSpace, CoordinateSpace, PointF[])
  fullName: Graphics.TransformPoints(CoordinateSpace, CoordinateSpace, PointF[])
- uid: System.Drawing.Graphics.TranslateClip(System.Int32,System.Int32)
  parent: System.Drawing.Graphics
  isExternal: false
  name: TranslateClip(Int32, Int32)
  nameWithType: Graphics.TranslateClip(Int32, Int32)
  fullName: Graphics.TranslateClip(Int32, Int32)
- uid: System.Drawing.Graphics.TranslateClip(System.Single,System.Single)
  parent: System.Drawing.Graphics
  isExternal: false
  name: TranslateClip(Single, Single)
  nameWithType: Graphics.TranslateClip(Single, Single)
  fullName: Graphics.TranslateClip(Single, Single)
- uid: System.Drawing.Graphics.TranslateTransform(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)
  parent: System.Drawing.Graphics
  isExternal: false
  name: TranslateTransform(Single, Single, MatrixOrder)
  nameWithType: Graphics.TranslateTransform(Single, Single, MatrixOrder)
  fullName: Graphics.TranslateTransform(Single, Single, MatrixOrder)
- uid: System.Drawing.Graphics.TranslateTransform(System.Single,System.Single)
  parent: System.Drawing.Graphics
  isExternal: false
  name: TranslateTransform(Single, Single)
  nameWithType: Graphics.TranslateTransform(Single, Single)
  fullName: Graphics.TranslateTransform(Single, Single)
- uid: System.Drawing.Graphics.VisibleClipBounds
  parent: System.Drawing.Graphics
  isExternal: false
  name: VisibleClipBounds
  nameWithType: Graphics.VisibleClipBounds
  fullName: Graphics.VisibleClipBounds
- uid: System.Drawing.Graphics.AddMetafileComment*
  parent: System.Drawing.Graphics
  isExternal: false
  name: AddMetafileComment
  nameWithType: Graphics.AddMetafileComment
  fullName: Graphics.AddMetafileComment
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
- uid: System.Drawing.Graphics.BeginContainer*
  parent: System.Drawing.Graphics
  isExternal: false
  name: BeginContainer
  nameWithType: Graphics.BeginContainer
  fullName: Graphics.BeginContainer
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
- uid: System.Drawing.Graphics.Clear*
  parent: System.Drawing.Graphics
  isExternal: false
  name: Clear
  nameWithType: Graphics.Clear
  fullName: Graphics.Clear
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
- uid: System.Drawing.Graphics.Clip*
  parent: System.Drawing.Graphics
  isExternal: false
  name: Clip
  nameWithType: Graphics.Clip
  fullName: Graphics.Clip
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
- uid: System.Drawing.Graphics.ClipBounds*
  parent: System.Drawing.Graphics
  isExternal: false
  name: ClipBounds
  nameWithType: Graphics.ClipBounds
  fullName: Graphics.ClipBounds
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
- uid: System.Drawing.Graphics.CompositingMode*
  parent: System.Drawing.Graphics
  isExternal: false
  name: CompositingMode
  nameWithType: Graphics.CompositingMode
  fullName: Graphics.CompositingMode
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
- uid: System.Drawing.Graphics.CompositingQuality*
  parent: System.Drawing.Graphics
  isExternal: false
  name: CompositingQuality
  nameWithType: Graphics.CompositingQuality
  fullName: Graphics.CompositingQuality
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
- uid: System.Drawing.Graphics.CopyFromScreen*
  parent: System.Drawing.Graphics
  isExternal: false
  name: CopyFromScreen
  nameWithType: Graphics.CopyFromScreen
  fullName: Graphics.CopyFromScreen
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
- uid: System.Drawing.Graphics.Dispose*
  parent: System.Drawing.Graphics
  isExternal: false
  name: Dispose
  nameWithType: Graphics.Dispose
  fullName: Graphics.Dispose
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
- uid: System.Drawing.Graphics.DpiX*
  parent: System.Drawing.Graphics
  isExternal: false
  name: DpiX
  nameWithType: Graphics.DpiX
  fullName: Graphics.DpiX
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
- uid: System.Drawing.Graphics.DpiY*
  parent: System.Drawing.Graphics
  isExternal: false
  name: DpiY
  nameWithType: Graphics.DpiY
  fullName: Graphics.DpiY
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
- uid: System.Drawing.Graphics.DrawArc*
  parent: System.Drawing.Graphics
  isExternal: false
  name: DrawArc
  nameWithType: Graphics.DrawArc
  fullName: Graphics.DrawArc
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
- uid: System.Drawing.Graphics.DrawBezier*
  parent: System.Drawing.Graphics
  isExternal: false
  name: DrawBezier
  nameWithType: Graphics.DrawBezier
  fullName: Graphics.DrawBezier
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
- uid: System.Drawing.Graphics.DrawBeziers*
  parent: System.Drawing.Graphics
  isExternal: false
  name: DrawBeziers
  nameWithType: Graphics.DrawBeziers
  fullName: Graphics.DrawBeziers
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
- uid: System.Drawing.Graphics.DrawClosedCurve*
  parent: System.Drawing.Graphics
  isExternal: false
  name: DrawClosedCurve
  nameWithType: Graphics.DrawClosedCurve
  fullName: Graphics.DrawClosedCurve
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
- uid: System.Drawing.Graphics.DrawCurve*
  parent: System.Drawing.Graphics
  isExternal: false
  name: DrawCurve
  nameWithType: Graphics.DrawCurve
  fullName: Graphics.DrawCurve
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
- uid: System.Drawing.Graphics.DrawEllipse*
  parent: System.Drawing.Graphics
  isExternal: false
  name: DrawEllipse
  nameWithType: Graphics.DrawEllipse
  fullName: Graphics.DrawEllipse
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
- uid: System.Drawing.Graphics.DrawIcon*
  parent: System.Drawing.Graphics
  isExternal: false
  name: DrawIcon
  nameWithType: Graphics.DrawIcon
  fullName: Graphics.DrawIcon
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
- uid: System.Drawing.Graphics.DrawIconUnstretched*
  parent: System.Drawing.Graphics
  isExternal: false
  name: DrawIconUnstretched
  nameWithType: Graphics.DrawIconUnstretched
  fullName: Graphics.DrawIconUnstretched
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
- uid: System.Drawing.Graphics.DrawImage*
  parent: System.Drawing.Graphics
  isExternal: false
  name: DrawImage
  nameWithType: Graphics.DrawImage
  fullName: Graphics.DrawImage
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
- uid: System.Drawing.Graphics.DrawImageUnscaled*
  parent: System.Drawing.Graphics
  isExternal: false
  name: DrawImageUnscaled
  nameWithType: Graphics.DrawImageUnscaled
  fullName: Graphics.DrawImageUnscaled
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
- uid: System.Drawing.Graphics.DrawImageUnscaledAndClipped*
  parent: System.Drawing.Graphics
  isExternal: false
  name: DrawImageUnscaledAndClipped
  nameWithType: Graphics.DrawImageUnscaledAndClipped
  fullName: Graphics.DrawImageUnscaledAndClipped
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
- uid: System.Drawing.Graphics.DrawLine*
  parent: System.Drawing.Graphics
  isExternal: false
  name: DrawLine
  nameWithType: Graphics.DrawLine
  fullName: Graphics.DrawLine
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
- uid: System.Drawing.Graphics.DrawLines*
  parent: System.Drawing.Graphics
  isExternal: false
  name: DrawLines
  nameWithType: Graphics.DrawLines
  fullName: Graphics.DrawLines
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
- uid: System.Drawing.Graphics.DrawPath*
  parent: System.Drawing.Graphics
  isExternal: false
  name: DrawPath
  nameWithType: Graphics.DrawPath
  fullName: Graphics.DrawPath
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
- uid: System.Drawing.Graphics.DrawPie*
  parent: System.Drawing.Graphics
  isExternal: false
  name: DrawPie
  nameWithType: Graphics.DrawPie
  fullName: Graphics.DrawPie
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
- uid: System.Drawing.Graphics.DrawPolygon*
  parent: System.Drawing.Graphics
  isExternal: false
  name: DrawPolygon
  nameWithType: Graphics.DrawPolygon
  fullName: Graphics.DrawPolygon
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
- uid: System.Drawing.Graphics.DrawRectangle*
  parent: System.Drawing.Graphics
  isExternal: false
  name: DrawRectangle
  nameWithType: Graphics.DrawRectangle
  fullName: Graphics.DrawRectangle
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
- uid: System.Drawing.Graphics.DrawRectangles*
  parent: System.Drawing.Graphics
  isExternal: false
  name: DrawRectangles
  nameWithType: Graphics.DrawRectangles
  fullName: Graphics.DrawRectangles
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
- uid: System.Drawing.Graphics.DrawString*
  parent: System.Drawing.Graphics
  isExternal: false
  name: DrawString
  nameWithType: Graphics.DrawString
  fullName: Graphics.DrawString
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
- uid: System.Drawing.Graphics.EndContainer*
  parent: System.Drawing.Graphics
  isExternal: false
  name: EndContainer
  nameWithType: Graphics.EndContainer
  fullName: Graphics.EndContainer
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
- uid: System.Drawing.Graphics.EnumerateMetafile*
  parent: System.Drawing.Graphics
  isExternal: false
  name: EnumerateMetafile
  nameWithType: Graphics.EnumerateMetafile
  fullName: Graphics.EnumerateMetafile
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
- uid: System.Drawing.Graphics.ExcludeClip*
  parent: System.Drawing.Graphics
  isExternal: false
  name: ExcludeClip
  nameWithType: Graphics.ExcludeClip
  fullName: Graphics.ExcludeClip
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
- uid: System.Drawing.Graphics.FillClosedCurve*
  parent: System.Drawing.Graphics
  isExternal: false
  name: FillClosedCurve
  nameWithType: Graphics.FillClosedCurve
  fullName: Graphics.FillClosedCurve
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
- uid: System.Drawing.Graphics.FillEllipse*
  parent: System.Drawing.Graphics
  isExternal: false
  name: FillEllipse
  nameWithType: Graphics.FillEllipse
  fullName: Graphics.FillEllipse
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
- uid: System.Drawing.Graphics.FillPath*
  parent: System.Drawing.Graphics
  isExternal: false
  name: FillPath
  nameWithType: Graphics.FillPath
  fullName: Graphics.FillPath
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
- uid: System.Drawing.Graphics.FillPie*
  parent: System.Drawing.Graphics
  isExternal: false
  name: FillPie
  nameWithType: Graphics.FillPie
  fullName: Graphics.FillPie
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
- uid: System.Drawing.Graphics.FillPolygon*
  parent: System.Drawing.Graphics
  isExternal: false
  name: FillPolygon
  nameWithType: Graphics.FillPolygon
  fullName: Graphics.FillPolygon
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
- uid: System.Drawing.Graphics.FillRectangle*
  parent: System.Drawing.Graphics
  isExternal: false
  name: FillRectangle
  nameWithType: Graphics.FillRectangle
  fullName: Graphics.FillRectangle
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
- uid: System.Drawing.Graphics.FillRectangles*
  parent: System.Drawing.Graphics
  isExternal: false
  name: FillRectangles
  nameWithType: Graphics.FillRectangles
  fullName: Graphics.FillRectangles
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
- uid: System.Drawing.Graphics.FillRegion*
  parent: System.Drawing.Graphics
  isExternal: false
  name: FillRegion
  nameWithType: Graphics.FillRegion
  fullName: Graphics.FillRegion
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
- uid: System.Drawing.Graphics.Finalize*
  parent: System.Drawing.Graphics
  isExternal: false
  name: Finalize
  nameWithType: Graphics.Finalize
  fullName: Graphics.Finalize
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
- uid: System.Drawing.Graphics.Flush*
  parent: System.Drawing.Graphics
  isExternal: false
  name: Flush
  nameWithType: Graphics.Flush
  fullName: Graphics.Flush
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
- uid: System.Drawing.Graphics.FromHdc*
  parent: System.Drawing.Graphics
  isExternal: false
  name: FromHdc
  nameWithType: Graphics.FromHdc
  fullName: Graphics.FromHdc
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
- uid: System.Drawing.Graphics.FromHdcInternal*
  parent: System.Drawing.Graphics
  isExternal: false
  name: FromHdcInternal
  nameWithType: Graphics.FromHdcInternal
  fullName: Graphics.FromHdcInternal
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
- uid: System.Drawing.Graphics.FromHwnd*
  parent: System.Drawing.Graphics
  isExternal: false
  name: FromHwnd
  nameWithType: Graphics.FromHwnd
  fullName: Graphics.FromHwnd
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
- uid: System.Drawing.Graphics.FromHwndInternal*
  parent: System.Drawing.Graphics
  isExternal: false
  name: FromHwndInternal
  nameWithType: Graphics.FromHwndInternal
  fullName: Graphics.FromHwndInternal
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
- uid: System.Drawing.Graphics.FromImage*
  parent: System.Drawing.Graphics
  isExternal: false
  name: FromImage
  nameWithType: Graphics.FromImage
  fullName: Graphics.FromImage
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
- uid: System.Drawing.Graphics.GetContextInfo*
  parent: System.Drawing.Graphics
  isExternal: false
  name: GetContextInfo
  nameWithType: Graphics.GetContextInfo
  fullName: Graphics.GetContextInfo
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
- uid: System.Drawing.Graphics.GetHalftonePalette*
  parent: System.Drawing.Graphics
  isExternal: false
  name: GetHalftonePalette
  nameWithType: Graphics.GetHalftonePalette
  fullName: Graphics.GetHalftonePalette
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
- uid: System.Drawing.Graphics.GetHdc*
  parent: System.Drawing.Graphics
  isExternal: false
  name: GetHdc
  nameWithType: Graphics.GetHdc
  fullName: Graphics.GetHdc
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
- uid: System.Drawing.Graphics.GetNearestColor*
  parent: System.Drawing.Graphics
  isExternal: false
  name: GetNearestColor
  nameWithType: Graphics.GetNearestColor
  fullName: Graphics.GetNearestColor
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
- uid: System.Drawing.Graphics.InterpolationMode*
  parent: System.Drawing.Graphics
  isExternal: false
  name: InterpolationMode
  nameWithType: Graphics.InterpolationMode
  fullName: Graphics.InterpolationMode
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
- uid: System.Drawing.Graphics.IntersectClip*
  parent: System.Drawing.Graphics
  isExternal: false
  name: IntersectClip
  nameWithType: Graphics.IntersectClip
  fullName: Graphics.IntersectClip
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
- uid: System.Drawing.Graphics.IsClipEmpty*
  parent: System.Drawing.Graphics
  isExternal: false
  name: IsClipEmpty
  nameWithType: Graphics.IsClipEmpty
  fullName: Graphics.IsClipEmpty
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
- uid: System.Drawing.Graphics.IsVisible*
  parent: System.Drawing.Graphics
  isExternal: false
  name: IsVisible
  nameWithType: Graphics.IsVisible
  fullName: Graphics.IsVisible
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
- uid: System.Drawing.Graphics.IsVisibleClipEmpty*
  parent: System.Drawing.Graphics
  isExternal: false
  name: IsVisibleClipEmpty
  nameWithType: Graphics.IsVisibleClipEmpty
  fullName: Graphics.IsVisibleClipEmpty
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
- uid: System.Drawing.Graphics.MeasureCharacterRanges*
  parent: System.Drawing.Graphics
  isExternal: false
  name: MeasureCharacterRanges
  nameWithType: Graphics.MeasureCharacterRanges
  fullName: Graphics.MeasureCharacterRanges
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
- uid: System.Drawing.Graphics.MeasureString*
  parent: System.Drawing.Graphics
  isExternal: false
  name: MeasureString
  nameWithType: Graphics.MeasureString
  fullName: Graphics.MeasureString
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
- uid: System.Drawing.Graphics.MultiplyTransform*
  parent: System.Drawing.Graphics
  isExternal: false
  name: MultiplyTransform
  nameWithType: Graphics.MultiplyTransform
  fullName: Graphics.MultiplyTransform
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
- uid: System.Drawing.Graphics.PageScale*
  parent: System.Drawing.Graphics
  isExternal: false
  name: PageScale
  nameWithType: Graphics.PageScale
  fullName: Graphics.PageScale
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
- uid: System.Drawing.Graphics.PageUnit*
  parent: System.Drawing.Graphics
  isExternal: false
  name: PageUnit
  nameWithType: Graphics.PageUnit
  fullName: Graphics.PageUnit
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
- uid: System.Drawing.Graphics.PixelOffsetMode*
  parent: System.Drawing.Graphics
  isExternal: false
  name: PixelOffsetMode
  nameWithType: Graphics.PixelOffsetMode
  fullName: Graphics.PixelOffsetMode
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
- uid: System.Drawing.Graphics.ReleaseHdc*
  parent: System.Drawing.Graphics
  isExternal: false
  name: ReleaseHdc
  nameWithType: Graphics.ReleaseHdc
  fullName: Graphics.ReleaseHdc
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
- uid: System.Drawing.Graphics.ReleaseHdcInternal*
  parent: System.Drawing.Graphics
  isExternal: false
  name: ReleaseHdcInternal
  nameWithType: Graphics.ReleaseHdcInternal
  fullName: Graphics.ReleaseHdcInternal
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
- uid: System.Drawing.Graphics.RenderingOrigin*
  parent: System.Drawing.Graphics
  isExternal: false
  name: RenderingOrigin
  nameWithType: Graphics.RenderingOrigin
  fullName: Graphics.RenderingOrigin
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
- uid: System.Drawing.Graphics.ResetClip*
  parent: System.Drawing.Graphics
  isExternal: false
  name: ResetClip
  nameWithType: Graphics.ResetClip
  fullName: Graphics.ResetClip
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
- uid: System.Drawing.Graphics.ResetTransform*
  parent: System.Drawing.Graphics
  isExternal: false
  name: ResetTransform
  nameWithType: Graphics.ResetTransform
  fullName: Graphics.ResetTransform
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
- uid: System.Drawing.Graphics.Restore*
  parent: System.Drawing.Graphics
  isExternal: false
  name: Restore
  nameWithType: Graphics.Restore
  fullName: Graphics.Restore
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
- uid: System.Drawing.Graphics.RotateTransform*
  parent: System.Drawing.Graphics
  isExternal: false
  name: RotateTransform
  nameWithType: Graphics.RotateTransform
  fullName: Graphics.RotateTransform
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
- uid: System.Drawing.Graphics.Save*
  parent: System.Drawing.Graphics
  isExternal: false
  name: Save
  nameWithType: Graphics.Save
  fullName: Graphics.Save
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
- uid: System.Drawing.Graphics.ScaleTransform*
  parent: System.Drawing.Graphics
  isExternal: false
  name: ScaleTransform
  nameWithType: Graphics.ScaleTransform
  fullName: Graphics.ScaleTransform
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
- uid: System.Drawing.Graphics.SetClip*
  parent: System.Drawing.Graphics
  isExternal: false
  name: SetClip
  nameWithType: Graphics.SetClip
  fullName: Graphics.SetClip
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
- uid: System.Drawing.Graphics.SmoothingMode*
  parent: System.Drawing.Graphics
  isExternal: false
  name: SmoothingMode
  nameWithType: Graphics.SmoothingMode
  fullName: Graphics.SmoothingMode
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
- uid: System.Drawing.Graphics.TextContrast*
  parent: System.Drawing.Graphics
  isExternal: false
  name: TextContrast
  nameWithType: Graphics.TextContrast
  fullName: Graphics.TextContrast
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
- uid: System.Drawing.Graphics.TextRenderingHint*
  parent: System.Drawing.Graphics
  isExternal: false
  name: TextRenderingHint
  nameWithType: Graphics.TextRenderingHint
  fullName: Graphics.TextRenderingHint
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
- uid: System.Drawing.Graphics.Transform*
  parent: System.Drawing.Graphics
  isExternal: false
  name: Transform
  nameWithType: Graphics.Transform
  fullName: Graphics.Transform
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
- uid: System.Drawing.Graphics.TransformPoints*
  parent: System.Drawing.Graphics
  isExternal: false
  name: TransformPoints
  nameWithType: Graphics.TransformPoints
  fullName: Graphics.TransformPoints
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
- uid: System.Drawing.Graphics.TranslateClip*
  parent: System.Drawing.Graphics
  isExternal: false
  name: TranslateClip
  nameWithType: Graphics.TranslateClip
  fullName: Graphics.TranslateClip
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
- uid: System.Drawing.Graphics.TranslateTransform*
  parent: System.Drawing.Graphics
  isExternal: false
  name: TranslateTransform
  nameWithType: Graphics.TranslateTransform
  fullName: Graphics.TranslateTransform
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
- uid: System.Drawing.Graphics.VisibleClipBounds*
  parent: System.Drawing.Graphics
  isExternal: false
  name: VisibleClipBounds
  nameWithType: Graphics.VisibleClipBounds
  fullName: Graphics.VisibleClipBounds
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Graphics.xml
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: Object.Equals(Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: Object.Equals(Object, Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: false
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: Object.GetHashCode()
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  nameWithType: Object.GetType()
  fullName: Object.GetType()
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: Object.MemberwiseClone()
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: Object.ReferenceEquals(Object, Object)
- uid: System.Object.ToString
  parent: System.Object
  isExternal: false
  name: ToString()
  nameWithType: Object.ToString()
  fullName: Object.ToString()
- uid: System.MarshalByRefObject.CreateObjRef(System.Type)
  parent: System.MarshalByRefObject
  isExternal: false
  name: CreateObjRef(Type)
  nameWithType: MarshalByRefObject.CreateObjRef(Type)
  fullName: MarshalByRefObject.CreateObjRef(Type)
- uid: System.MarshalByRefObject.GetLifetimeService
  parent: System.MarshalByRefObject
  isExternal: false
  name: GetLifetimeService()
  nameWithType: MarshalByRefObject.GetLifetimeService()
  fullName: MarshalByRefObject.GetLifetimeService()
- uid: System.MarshalByRefObject.InitializeLifetimeService
  parent: System.MarshalByRefObject
  isExternal: false
  name: InitializeLifetimeService()
  nameWithType: MarshalByRefObject.InitializeLifetimeService()
  fullName: MarshalByRefObject.InitializeLifetimeService()
- uid: System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  parent: System.MarshalByRefObject
  isExternal: false
  name: MemberwiseClone(Boolean)
  nameWithType: MarshalByRefObject.MemberwiseClone(Boolean)
  fullName: MarshalByRefObject.MemberwiseClone(Boolean)
- uid: System.Drawing.IDeviceContext
  parent: System.Drawing
  isExternal: false
  name: IDeviceContext
  nameWithType: IDeviceContext
  fullName: System.Drawing.IDeviceContext
- uid: System.IDisposable
  parent: System
  isExternal: false
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
