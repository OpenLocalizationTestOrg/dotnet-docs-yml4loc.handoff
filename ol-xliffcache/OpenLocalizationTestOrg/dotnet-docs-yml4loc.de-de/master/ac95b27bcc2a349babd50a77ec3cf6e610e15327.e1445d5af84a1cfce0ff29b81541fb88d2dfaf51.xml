{"nodes":[{"content":"Provides data for the <xref href=\"System.Messaging.MessageQueue.ReceiveCompleted\"></xref> event. When your asynchronous receive operation calls an event handler, an instance of this class is passed to the handler.","nodes":[{"pos":[0,213],"content":"Provides data for the <xref href=\"System.Messaging.MessageQueue.ReceiveCompleted\"></xref> event. When your asynchronous receive operation calls an event handler, an instance of this class is passed to the handler.","nodes":[{"content":"Provides data for the <ph id=\"ph1\">&lt;xref href=\"System.Messaging.MessageQueue.ReceiveCompleted\"&gt;&lt;/xref&gt;</ph> event.","pos":[0,96],"source":"Provides data for the <xref href=\"System.Messaging.MessageQueue.ReceiveCompleted\"></xref> event."},{"content":"When your asynchronous receive operation calls an event handler, an instance of this class is passed to the handler.","pos":[97,213]}]}],"pos":[543,757],"yaml":true},{"content":"When you use event notification to receive messages asynchronously from the queue, you must create a method that handles your message processing. Your code must call <xref:System.Messaging.MessageQueue.BeginReceive%2A> to begin the asynchronous processing. When a message is received, your application is notified through the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event. An instance of <xref:System.Messaging.ReceiveCompletedEventArgs> is passed into the event delegate that calls your event handler. The data associated with the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event is contained in the delegate's <xref:System.Messaging.ReceiveCompletedEventArgs.AsyncResult%2A> parameter.  \n  \n There are two ways to provide notification of event completion: event notification and callbacks. <xref:System.Messaging.ReceiveCompletedEventArgs> is used only with event notification. For information comparing callbacks and event notification, see \"Events vs. Callbacks\" on MSDN.  \n  \n <xref:System.Messaging.ReceiveCompletedEventArgs> provides access to the message that initiated the end of the asynchronous receive operation, through the <xref:System.Messaging.ReceiveCompletedEventArgs.Message%2A> member. This is an alternate access to the message, and behaves much the same as a call to <xref:System.Messaging.MessageQueue.EndReceive%2A?displayProperty=fullName>.","nodes":[{"pos":[0,712],"content":"When you use event notification to receive messages asynchronously from the queue, you must create a method that handles your message processing. Your code must call <xref:System.Messaging.MessageQueue.BeginReceive%2A> to begin the asynchronous processing. When a message is received, your application is notified through the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event. An instance of <xref:System.Messaging.ReceiveCompletedEventArgs> is passed into the event delegate that calls your event handler. The data associated with the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event is contained in the delegate's <xref:System.Messaging.ReceiveCompletedEventArgs.AsyncResult%2A> parameter.","nodes":[{"content":"When you use event notification to receive messages asynchronously from the queue, you must create a method that handles your message processing. Your code must call <xref:System.Messaging.MessageQueue.BeginReceive%2A> to begin the asynchronous processing. When a message is received, your application is notified through the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event. An instance of <xref:System.Messaging.ReceiveCompletedEventArgs> is passed into the event delegate that calls your event handler. The data associated with the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event is contained in the delegate's <xref:System.Messaging.ReceiveCompletedEventArgs.AsyncResult%2A> parameter.","pos":[0,712],"nodes":[{"content":"When you use event notification to receive messages asynchronously from the queue, you must create a method that handles your message processing.","pos":[0,145]},{"content":"Your code must call <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.BeginReceive%2A&gt;</ph> to begin the asynchronous processing.","pos":[146,256],"source":" Your code must call <xref:System.Messaging.MessageQueue.BeginReceive%2A> to begin the asynchronous processing."},{"content":"When a message is received, your application is notified through the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.ReceiveCompleted&gt;</ph> event.","pos":[257,386],"source":" When a message is received, your application is notified through the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event."},{"content":"An instance of <ph id=\"ph1\">&lt;xref:System.Messaging.ReceiveCompletedEventArgs&gt;</ph> is passed into the event delegate that calls your event handler.","pos":[387,516],"source":" An instance of <xref:System.Messaging.ReceiveCompletedEventArgs> is passed into the event delegate that calls your event handler."},{"content":"The data associated with the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.ReceiveCompleted&gt;</ph> event is contained in the delegate's <ph id=\"ph2\">&lt;xref:System.Messaging.ReceiveCompletedEventArgs.AsyncResult%2A&gt;</ph> parameter.","pos":[517,712],"source":" The data associated with the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event is contained in the delegate's <xref:System.Messaging.ReceiveCompletedEventArgs.AsyncResult%2A> parameter."}]}]},{"pos":[719,1000],"content":"There are two ways to provide notification of event completion: event notification and callbacks. <xref:System.Messaging.ReceiveCompletedEventArgs> is used only with event notification. For information comparing callbacks and event notification, see \"Events vs. Callbacks\" on MSDN.","nodes":[{"content":"There are two ways to provide notification of event completion: event notification and callbacks. <xref:System.Messaging.ReceiveCompletedEventArgs> is used only with event notification. For information comparing callbacks and event notification, see \"Events vs. Callbacks\" on MSDN.","pos":[0,281],"nodes":[{"content":"There are two ways to provide notification of event completion: event notification and callbacks.","pos":[0,97]},{"content":"<ph id=\"ph1\">&lt;xref:System.Messaging.ReceiveCompletedEventArgs&gt;</ph> is used only with event notification.","pos":[98,185],"source":" <xref:System.Messaging.ReceiveCompletedEventArgs> is used only with event notification."},{"content":"For information comparing callbacks and event notification, see \"Events vs. Callbacks\" on MSDN.","pos":[186,281]}]}]},{"pos":[1007,1390],"content":"<xref:System.Messaging.ReceiveCompletedEventArgs> provides access to the message that initiated the end of the asynchronous receive operation, through the <xref:System.Messaging.ReceiveCompletedEventArgs.Message%2A> member. This is an alternate access to the message, and behaves much the same as a call to <xref:System.Messaging.MessageQueue.EndReceive%2A?displayProperty=fullName>.","nodes":[{"content":"<xref:System.Messaging.ReceiveCompletedEventArgs> provides access to the message that initiated the end of the asynchronous receive operation, through the <xref:System.Messaging.ReceiveCompletedEventArgs.Message%2A> member. This is an alternate access to the message, and behaves much the same as a call to <xref:System.Messaging.MessageQueue.EndReceive%2A?displayProperty=fullName>.","pos":[0,383],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Messaging.ReceiveCompletedEventArgs&gt;</ph> provides access to the message that initiated the end of the asynchronous receive operation, through the <ph id=\"ph2\">&lt;xref:System.Messaging.ReceiveCompletedEventArgs.Message%2A&gt;</ph> member.","pos":[0,223],"source":"<xref:System.Messaging.ReceiveCompletedEventArgs> provides access to the message that initiated the end of the asynchronous receive operation, through the <xref:System.Messaging.ReceiveCompletedEventArgs.Message%2A> member."},{"content":"This is an alternate access to the message, and behaves much the same as a call to <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.EndReceive%2A?displayProperty=fullName&gt;</ph>.","pos":[224,383],"source":" This is an alternate access to the message, and behaves much the same as a call to <xref:System.Messaging.MessageQueue.EndReceive%2A?displayProperty=fullName>."}]}]}],"pos":[768,2167],"yaml":true,"extradata":"MT"},{"content":"Gets or sets the result of the asynchronous operation requested.","nodes":[{"pos":[0,64],"content":"Gets or sets the result of the asynchronous operation requested.","nodes":[{"content":"Gets or sets the result of the asynchronous operation requested.","pos":[0,64]}]}],"pos":[4472,4537],"yaml":true},{"content":"<xref:System.Messaging.ReceiveCompletedEventArgs.AsyncResult%2A> identifies ongoing or completed asynchronous operations. The property contains data that helps determine which of several potential asynchronous operations to complete, and when passed to the event handler, enables <xref:System.Messaging.MessageQueue.EndReceive%2A> to access the message associated with the completed operation.  \n  \n When you call <xref:System.Messaging.MessageQueue.BeginReceive%2A>, a <xref:System.IAsyncResult> is returned immediately, even though a message, if one exists, has not yet been retrieved because the operation is not completed. The <xref:System.Messaging.ReceiveCompletedEventArgs.AsyncResult%2A> indicates the state of the asynchronous operation. <xref:System.Messaging.MessageQueue.BeginReceive%2A> creates the object, which is modified throughout the operation until <xref:System.Messaging.MessageQueue.EndReceive%2A> completes it.","nodes":[{"pos":[0,393],"content":"<xref:System.Messaging.ReceiveCompletedEventArgs.AsyncResult%2A> identifies ongoing or completed asynchronous operations. The property contains data that helps determine which of several potential asynchronous operations to complete, and when passed to the event handler, enables <xref:System.Messaging.MessageQueue.EndReceive%2A> to access the message associated with the completed operation.","nodes":[{"content":"<xref:System.Messaging.ReceiveCompletedEventArgs.AsyncResult%2A> identifies ongoing or completed asynchronous operations. The property contains data that helps determine which of several potential asynchronous operations to complete, and when passed to the event handler, enables <xref:System.Messaging.MessageQueue.EndReceive%2A> to access the message associated with the completed operation.","pos":[0,393],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Messaging.ReceiveCompletedEventArgs.AsyncResult%2A&gt;</ph> identifies ongoing or completed asynchronous operations.","pos":[0,121],"source":"<xref:System.Messaging.ReceiveCompletedEventArgs.AsyncResult%2A> identifies ongoing or completed asynchronous operations."},{"content":"The property contains data that helps determine which of several potential asynchronous operations to complete, and when passed to the event handler, enables <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.EndReceive%2A&gt;</ph> to access the message associated with the completed operation.","pos":[122,393],"source":" The property contains data that helps determine which of several potential asynchronous operations to complete, and when passed to the event handler, enables <xref:System.Messaging.MessageQueue.EndReceive%2A> to access the message associated with the completed operation."}]}]},{"pos":[400,933],"content":"When you call <xref:System.Messaging.MessageQueue.BeginReceive%2A>, a <xref:System.IAsyncResult> is returned immediately, even though a message, if one exists, has not yet been retrieved because the operation is not completed. The <xref:System.Messaging.ReceiveCompletedEventArgs.AsyncResult%2A> indicates the state of the asynchronous operation. <xref:System.Messaging.MessageQueue.BeginReceive%2A> creates the object, which is modified throughout the operation until <xref:System.Messaging.MessageQueue.EndReceive%2A> completes it.","nodes":[{"content":"When you call <xref:System.Messaging.MessageQueue.BeginReceive%2A>, a <xref:System.IAsyncResult> is returned immediately, even though a message, if one exists, has not yet been retrieved because the operation is not completed. The <xref:System.Messaging.ReceiveCompletedEventArgs.AsyncResult%2A> indicates the state of the asynchronous operation. <xref:System.Messaging.MessageQueue.BeginReceive%2A> creates the object, which is modified throughout the operation until <xref:System.Messaging.MessageQueue.EndReceive%2A> completes it.","pos":[0,533],"nodes":[{"content":"When you call <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.BeginReceive%2A&gt;</ph>, a <ph id=\"ph2\">&lt;xref:System.IAsyncResult&gt;</ph> is returned immediately, even though a message, if one exists, has not yet been retrieved because the operation is not completed.","pos":[0,226],"source":"When you call <xref:System.Messaging.MessageQueue.BeginReceive%2A>, a <xref:System.IAsyncResult> is returned immediately, even though a message, if one exists, has not yet been retrieved because the operation is not completed."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.ReceiveCompletedEventArgs.AsyncResult%2A&gt;</ph> indicates the state of the asynchronous operation.","pos":[227,346],"source":" The <xref:System.Messaging.ReceiveCompletedEventArgs.AsyncResult%2A> indicates the state of the asynchronous operation."},{"content":"<ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.BeginReceive%2A&gt;</ph> creates the object, which is modified throughout the operation until <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.EndReceive%2A&gt;</ph> completes it.","pos":[347,533],"source":" <xref:System.Messaging.MessageQueue.BeginReceive%2A> creates the object, which is modified throughout the operation until <xref:System.Messaging.MessageQueue.EndReceive%2A> completes it."}]}]}],"pos":[4548,5486],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.IAsyncResult\"></xref> that contains the data associated with the receive operation.","nodes":[{"pos":[0,104],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.IAsyncResult\"&gt;&lt;/xref&gt;</ph> that contains the data associated with the receive operation.","source":"A <xref href=\"System.IAsyncResult\"></xref> that contains the data associated with the receive operation."}],"pos":[5618,5723],"yaml":true},{"content":"Gets the message associated with the asynchronous receive operation.","nodes":[{"pos":[0,68],"content":"Gets the message associated with the asynchronous receive operation.","nodes":[{"content":"Gets the message associated with the asynchronous receive operation.","pos":[0,68]}]}],"pos":[6763,6832],"yaml":true},{"content":"The <xref:System.Messaging.ReceiveCompletedEventArgs.Message%2A> property provides a means for retrieving the message that initiated the end of the asynchronous receive operation.  \n  \n <xref:System.Messaging.MessageQueue.EndReceive%2A?displayProperty=fullName> is called the first time the <xref:System.Messaging.ReceiveCompletedEventArgs.Message%2A> property is read, so it is not necessary to call <xref:System.Messaging.MessageQueue.EndReceive%2A> prior to getting the value of this property.","nodes":[{"pos":[0,179],"content":"The <xref:System.Messaging.ReceiveCompletedEventArgs.Message%2A> property provides a means for retrieving the message that initiated the end of the asynchronous receive operation.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.ReceiveCompletedEventArgs.Message%2A&gt;</ph> property provides a means for retrieving the message that initiated the end of the asynchronous receive operation.","pos":[0,179],"source":"The <xref:System.Messaging.ReceiveCompletedEventArgs.Message%2A> property provides a means for retrieving the message that initiated the end of the asynchronous receive operation."}]},{"pos":[186,496],"content":"<xref:System.Messaging.MessageQueue.EndReceive%2A?displayProperty=fullName> is called the first time the <xref:System.Messaging.ReceiveCompletedEventArgs.Message%2A> property is read, so it is not necessary to call <xref:System.Messaging.MessageQueue.EndReceive%2A> prior to getting the value of this property.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.EndReceive%2A?displayProperty=fullName&gt;</ph> is called the first time the <ph id=\"ph2\">&lt;xref:System.Messaging.ReceiveCompletedEventArgs.Message%2A&gt;</ph> property is read, so it is not necessary to call <ph id=\"ph3\">&lt;xref:System.Messaging.MessageQueue.EndReceive%2A&gt;</ph> prior to getting the value of this property.","pos":[0,310],"source":"<xref:System.Messaging.MessageQueue.EndReceive%2A?displayProperty=fullName> is called the first time the <xref:System.Messaging.ReceiveCompletedEventArgs.Message%2A> property is read, so it is not necessary to call <xref:System.Messaging.MessageQueue.EndReceive%2A> prior to getting the value of this property."}]}],"pos":[6843,7344],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Messaging.Message\"></xref> that represents the end result of the asynchronous receive operation.","nodes":[{"pos":[0,117],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Messaging.Message\"&gt;&lt;/xref&gt;</ph> that represents the end result of the asynchronous receive operation.","source":"A <xref href=\"System.Messaging.Message\"></xref> that represents the end result of the asynchronous receive operation."}],"pos":[7484,7602],"yaml":true},{"content":"The <xref href=\"System.Messaging.ReceiveCompletedEventArgs.Message\"></xref> could not be retrieved. The time-out on the asynchronous operation might have expired.","nodes":[{"pos":[0,162],"content":"The <xref href=\"System.Messaging.ReceiveCompletedEventArgs.Message\"></xref> could not be retrieved. The time-out on the asynchronous operation might have expired.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Messaging.ReceiveCompletedEventArgs.Message\"&gt;&lt;/xref&gt;</ph> could not be retrieved.","pos":[0,99],"source":"The <xref href=\"System.Messaging.ReceiveCompletedEventArgs.Message\"></xref> could not be retrieved."},{"content":"The time-out on the asynchronous operation might have expired.","pos":[100,162]}]}],"pos":[7802,7965],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Messaging.ReceiveCompletedEventArgs\n  commentId: T:System.Messaging.ReceiveCompletedEventArgs\n  id: ReceiveCompletedEventArgs\n  children:\n  - System.Messaging.ReceiveCompletedEventArgs.AsyncResult\n  - System.Messaging.ReceiveCompletedEventArgs.Message\n  langs:\n  - csharp\n  name: ReceiveCompletedEventArgs\n  nameWithType: ReceiveCompletedEventArgs\n  fullName: System.Messaging.ReceiveCompletedEventArgs\n  type: Class\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Provides data for the <xref href=\"System.Messaging.MessageQueue.ReceiveCompleted\"></xref> event. When your asynchronous receive operation calls an event handler, an instance of this class is passed to the handler.\n  remarks: \"When you use event notification to receive messages asynchronously from the queue, you must create a method that handles your message processing. Your code must call <xref:System.Messaging.MessageQueue.BeginReceive%2A> to begin the asynchronous processing. When a message is received, your application is notified through the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event. An instance of <xref:System.Messaging.ReceiveCompletedEventArgs> is passed into the event delegate that calls your event handler. The data associated with the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event is contained in the delegate's <xref:System.Messaging.ReceiveCompletedEventArgs.AsyncResult%2A> parameter.  \\n  \\n There are two ways to provide notification of event completion: event notification and callbacks. <xref:System.Messaging.ReceiveCompletedEventArgs> is used only with event notification. For information comparing callbacks and event notification, see \\\"Events vs. Callbacks\\\" on MSDN.  \\n  \\n <xref:System.Messaging.ReceiveCompletedEventArgs> provides access to the message that initiated the end of the asynchronous receive operation, through the <xref:System.Messaging.ReceiveCompletedEventArgs.Message%2A> member. This is an alternate access to the message, and behaves much the same as a call to <xref:System.Messaging.MessageQueue.EndReceive%2A?displayProperty=fullName>.\"\n  example:\n  - \"The following code example creates an event handler for the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event and associates it with the event delegate by using the <xref:System.Messaging.ReceiveCompletedEventHandler>. The event handler, `MyReceiveCompleted`, receives a message from a queue and writes its body to the screen.  \\n  \\n [!code-cpp[MessageQueue.ReceiveCompleted#1](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue.ReceiveCompleted/CPP/mqreceivecompletedeventhandler.cpp#1)]\\n [!code-csharp[MessageQueue.ReceiveCompleted#1](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue.ReceiveCompleted/CS/mqreceivecompletedeventhandler.cs#1)]\\n [!code-vb[MessageQueue.ReceiveCompleted#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/MessageQueue.ReceiveCompleted/VB/mqreceivecompletedeventhandler.vb#1)]\"\n  syntax:\n    content: 'public class ReceiveCompletedEventArgs : EventArgs'\n  inheritance:\n  - System.Object\n  - System.EventArgs\n  implements: []\n  inheritedMembers:\n  - System.EventArgs.Empty\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/ReceiveCompletedEventArgs.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.ReceiveCompletedEventArgs.AsyncResult\n  commentId: P:System.Messaging.ReceiveCompletedEventArgs.AsyncResult\n  id: AsyncResult\n  parent: System.Messaging.ReceiveCompletedEventArgs\n  langs:\n  - csharp\n  name: AsyncResult\n  nameWithType: ReceiveCompletedEventArgs.AsyncResult\n  fullName: ReceiveCompletedEventArgs.AsyncResult\n  type: Property\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Gets or sets the result of the asynchronous operation requested.\n  remarks: \"<xref:System.Messaging.ReceiveCompletedEventArgs.AsyncResult%2A> identifies ongoing or completed asynchronous operations. The property contains data that helps determine which of several potential asynchronous operations to complete, and when passed to the event handler, enables <xref:System.Messaging.MessageQueue.EndReceive%2A> to access the message associated with the completed operation.  \\n  \\n When you call <xref:System.Messaging.MessageQueue.BeginReceive%2A>, a <xref:System.IAsyncResult> is returned immediately, even though a message, if one exists, has not yet been retrieved because the operation is not completed. The <xref:System.Messaging.ReceiveCompletedEventArgs.AsyncResult%2A> indicates the state of the asynchronous operation. <xref:System.Messaging.MessageQueue.BeginReceive%2A> creates the object, which is modified throughout the operation until <xref:System.Messaging.MessageQueue.EndReceive%2A> completes it.\"\n  syntax:\n    content: public IAsyncResult AsyncResult { get; set; }\n    return:\n      type: System.IAsyncResult\n      description: A <xref href=\"System.IAsyncResult\"></xref> that contains the data associated with the receive operation.\n  overload: System.Messaging.ReceiveCompletedEventArgs.AsyncResult*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/ReceiveCompletedEventArgs.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.ReceiveCompletedEventArgs.Message\n  commentId: P:System.Messaging.ReceiveCompletedEventArgs.Message\n  id: Message\n  parent: System.Messaging.ReceiveCompletedEventArgs\n  langs:\n  - csharp\n  name: Message\n  nameWithType: ReceiveCompletedEventArgs.Message\n  fullName: ReceiveCompletedEventArgs.Message\n  type: Property\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Gets the message associated with the asynchronous receive operation.\n  remarks: \"The <xref:System.Messaging.ReceiveCompletedEventArgs.Message%2A> property provides a means for retrieving the message that initiated the end of the asynchronous receive operation.  \\n  \\n <xref:System.Messaging.MessageQueue.EndReceive%2A?displayProperty=fullName> is called the first time the <xref:System.Messaging.ReceiveCompletedEventArgs.Message%2A> property is read, so it is not necessary to call <xref:System.Messaging.MessageQueue.EndReceive%2A> prior to getting the value of this property.\"\n  syntax:\n    content: public System.Messaging.Message Message { get; }\n    return:\n      type: System.Messaging.Message\n      description: A <xref href=\"System.Messaging.Message\"></xref> that represents the end result of the asynchronous receive operation.\n  overload: System.Messaging.ReceiveCompletedEventArgs.Message*\n  exceptions:\n  - type: System.Messaging.MessageQueueException\n    commentId: T:System.Messaging.MessageQueueException\n    description: The <xref href=\"System.Messaging.ReceiveCompletedEventArgs.Message\"></xref> could not be retrieved. The time-out on the asynchronous operation might have expired.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/ReceiveCompletedEventArgs.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\nreferences:\n- uid: System.EventArgs\n  parent: System\n  isExternal: false\n  name: EventArgs\n  nameWithType: EventArgs\n  fullName: System.EventArgs\n- uid: System.Messaging.MessageQueueException\n  parent: System.Messaging\n  isExternal: false\n  name: MessageQueueException\n  nameWithType: MessageQueueException\n  fullName: System.Messaging.MessageQueueException\n- uid: System.Messaging.ReceiveCompletedEventArgs.AsyncResult\n  parent: System.Messaging.ReceiveCompletedEventArgs\n  isExternal: false\n  name: AsyncResult\n  nameWithType: ReceiveCompletedEventArgs.AsyncResult\n  fullName: ReceiveCompletedEventArgs.AsyncResult\n- uid: System.IAsyncResult\n  parent: System\n  isExternal: false\n  name: IAsyncResult\n  nameWithType: IAsyncResult\n  fullName: System.IAsyncResult\n- uid: System.Messaging.ReceiveCompletedEventArgs.Message\n  parent: System.Messaging.ReceiveCompletedEventArgs\n  isExternal: false\n  name: Message\n  nameWithType: ReceiveCompletedEventArgs.Message\n  fullName: ReceiveCompletedEventArgs.Message\n- uid: System.Messaging.Message\n  parent: System.Messaging\n  isExternal: false\n  name: Message\n  nameWithType: Message\n  fullName: System.Messaging.Message\n- uid: System.Messaging.ReceiveCompletedEventArgs.AsyncResult*\n  parent: System.Messaging.ReceiveCompletedEventArgs\n  isExternal: false\n  name: AsyncResult\n  nameWithType: ReceiveCompletedEventArgs.AsyncResult\n  fullName: ReceiveCompletedEventArgs.AsyncResult\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/ReceiveCompletedEventArgs.xml\n- uid: System.Messaging.ReceiveCompletedEventArgs.Message*\n  parent: System.Messaging.ReceiveCompletedEventArgs\n  isExternal: false\n  name: Message\n  nameWithType: ReceiveCompletedEventArgs.Message\n  fullName: ReceiveCompletedEventArgs.Message\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/ReceiveCompletedEventArgs.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.EventArgs.Empty\n  parent: System.EventArgs\n  isExternal: false\n  name: Empty\n  nameWithType: EventArgs.Empty\n  fullName: EventArgs.Empty\n"}