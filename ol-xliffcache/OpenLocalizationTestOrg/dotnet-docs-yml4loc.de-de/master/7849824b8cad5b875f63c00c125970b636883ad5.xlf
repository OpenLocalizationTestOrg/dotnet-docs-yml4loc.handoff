<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7849824b8cad5b875f63c00c125970b636883ad5</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Text.EncoderFallback.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">65c190d68623abda90857f817e0f89ea4db867f1</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">19d50145fea491c67354767421077c1bdd9303cc</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides a failure-handling mechanism, called a fallback, for an input character that cannot be converted to an encoded output byte sequence.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>An encoding maps a Unicode character to an encoded sequence of bytes.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>A particular encoding is represented by a type that is derived from the <ph id="ph1">&lt;xref:System.Text.Encoding&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>Specifically, a character is encoded to a byte sequence by calling the encoding type's <ph id="ph1">&lt;xref:System.Text.Encoding.GetBytes%2A?displayProperty=fullName&gt;</ph> method, and the byte sequence is decoded to a character array or a string by calling the <ph id="ph2">&lt;xref:System.Text.Encoding.GetChars%2A?displayProperty=fullName&gt;</ph> or <ph id="ph3">&lt;xref:System.Text.Encoding.GetString%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>An encoding operation can fail if the input character cannot be represented by the encoding.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, an <ph id="ph1">&lt;xref:System.Text.ASCIIEncoding&gt;</ph> object cannot encode a character whose Unicode code point value is outside the range U+0000 to U+007F.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>When an encoding conversion cannot be performed, the .NET Framework provides a failure-handling mechanism called a fallback.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>Your application can use predefined .NET Framework encoder fallbacks, or it can create a custom encoder fallback derived from the <ph id="ph1">&lt;xref:System.Text.EncoderFallback&gt;</ph> and <ph id="ph2">&lt;xref:System.Text.EncoderFallbackBuffer&gt;</ph> classes.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Text.EncoderFallback&gt;</ph> and <ph id="ph2">&lt;xref:System.Text.EncoderFallbackBuffer&gt;</ph> are the base classes for all encoding fallback handlers in the .NET Framework.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>They support the following three kinds of fallback handling mechanisms:</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>Best-fit fallback, which maps valid Unicode characters that cannot be encoded to an approximate equivalent.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, a best-fit fallback handler for the <ph id="ph1">&lt;xref:System.Text.ASCIIEncoding&gt;</ph> class might map Ã† (U+00C6) to AE (U+0041 + U+0045).</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>A best-fit fallback handler might also be implemented to transliterate one alphabet (such as Cyrillic) to another (such as Latin or Roman).</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>The .NET Framework does not provide any public best-fit fallback implementations.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>Replacement fallback, which replaces each character that cannot be encoded with a predefined string.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>The .NET Framework provides a predefined replacement fallback handler.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Text.EncoderReplacementFallback&gt;</ph> class replaces each byte sequence that cannot be decoded with a question mark character ("?", or U+003F) or a REPLACEMENT CHARACTER (U+FFFD).</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can customize the replacement string by specifying a substitute in the call to the <ph id="ph1">&lt;xref:System.Text.EncoderReplacementFallback.%23ctor%28System.String%29?displayProperty=fullName&gt;</ph> constructor.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>After the substitute string is emitted, the encoding operation continues converting the remainder of the input.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>Exception fallback, which throws an exception when a character cannot be encoded.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>The .NET Framework provides a predefined exception fallback handler.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Text.EncoderExceptionFallback&gt;</ph> class throws an <ph id="ph2">&lt;xref:System.Text.EncoderFallbackException&gt;</ph> when an invalid character is encountered, and the encoding operation terminates.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you choose to implement a custom solution, you must override the following abstract members of the <ph id="ph1">&lt;xref:System.Text.EncoderFallback&gt;</ph> class:</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Text.EncoderFallback.CreateFallbackBuffer%2A&gt;</ph> method, which returns a class instance derived from <ph id="ph2">&lt;xref:System.Text.EncoderFallbackBuffer&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>Depending on the type of fallback handler that you are developing, the <ph id="ph1">&lt;xref:System.Text.EncoderFallbackBuffer&gt;</ph> implementation is responsible for performing the mapping or replacement, or for throwing the exception.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Text.EncoderFallback.MaxCharCount%2A&gt;</ph> property, which returns the maximum number of characters that the fallback implementation can return.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>For an exception fallback handler, its value should be zero.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about encoding, decoding, and fallback strategies, see <bpt id="p1">[</bpt>Character Encoding in the .NET Framework<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Text.EncoderFallback"&gt;&lt;/xref&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, initializes a new instance of the <ph id="ph1">&lt;xref href="System.Text.EncoderFallbackBuffer"&gt;&lt;/xref&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method returns an object derived from <ph id="ph1">&lt;xref:System.Text.EncoderFallbackBuffer&gt;</ph> that is responsible for performing the fallback operation.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, of the predefined <ph id="ph1">&lt;xref:System.Text.EncoderFallback&gt;</ph> implementations in the .NET Framework, the <ph id="ph2">&lt;xref:System.Text.EncoderReplacementFallback.CreateFallbackBuffer%2A?displayProperty=fullName&gt;</ph> method returns an <ph id="ph3">&lt;xref:System.Text.EncoderReplacementFallbackBuffer&gt;</ph> object, and the <ph id="ph4">&lt;xref:System.Text.EncoderExceptionFallback.CreateFallbackBuffer%2A?displayProperty=fullName&gt;</ph> method returns an <ph id="ph5">&lt;xref:System.Text.EncoderExceptionFallbackBuffer&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>The<ph id="ph1">&lt;xref:System.Text.EncoderFallback.CreateFallbackBuffer%2A&gt;</ph> method is called by an encoder when it encounters the first character that it is unable to encode.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Text.EncoderFallbackBuffer&gt;</ph> object returned by this method provides the fallback implementation and is responsible for returning the byte array that replaces the character or characters that could not be encoded.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>An object that provides a fallback buffer for an encoder.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Gets an object that throws an exception when an input character cannot be encoded.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>A type derived from the <ph id="ph1">&lt;xref href="System.Text.EncoderFallback"&gt;&lt;/xref&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The default value is a <ph id="ph1">&lt;xref href="System.Text.EncoderExceptionFallback"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, gets the maximum number of characters the current <ph id="ph1">&lt;xref href="System.Text.EncoderFallback"&gt;&lt;/xref&gt;</ph> object can return.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>For an exception fallback handler, this property should return zero.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The maximum number of characters the current <ph id="ph1">&lt;xref href="System.Text.EncoderFallback"&gt;&lt;/xref&gt;</ph> object can return.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Gets an object that outputs a substitute string in place of an input character that cannot be encoded.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>A type derived from the <ph id="ph1">&lt;xref href="System.Text.EncoderFallback"&gt;&lt;/xref&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The default value is a <ph id="ph1">&lt;xref href="System.Text.EncoderReplacementFallback"&gt;&lt;/xref&gt;</ph> object that replaces unknown input characters with the QUESTION MARK character ("?", U+003F).</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>