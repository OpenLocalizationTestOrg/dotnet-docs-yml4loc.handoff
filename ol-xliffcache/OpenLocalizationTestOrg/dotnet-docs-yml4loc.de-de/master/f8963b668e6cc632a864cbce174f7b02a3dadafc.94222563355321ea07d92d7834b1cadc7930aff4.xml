{"nodes":[{"content":"Provides a set of services that convert a managed assembly to a COM type library and vice versa.","nodes":[{"pos":[0,96],"content":"Provides a set of services that convert a managed assembly to a COM type library and vice versa.","nodes":[{"content":"Provides a set of services that convert a managed assembly to a COM type library and vice versa.","pos":[0,96]}]}],"pos":[1407,1504],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Runtime.InteropServices.TypeLibConverter\"></xref> class.","nodes":[{"pos":[0,109],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Runtime.InteropServices.TypeLibConverter\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.Runtime.InteropServices.TypeLibConverter\"></xref> class."}],"pos":[3549,3659],"yaml":true},{"content":"Converts an assembly to a COM type library.","nodes":[{"pos":[0,43],"content":"Converts an assembly to a COM type library.","nodes":[{"content":"Converts an assembly to a COM type library.","pos":[0,43]}]}],"pos":[5624,5668],"yaml":true},{"content":"For more information on `ITypeLib`, please see its existing documentation in the MSDN library.","nodes":[{"pos":[0,94],"content":"For more information on <ph id=\"ph1\">`ITypeLib`</ph>, please see its existing documentation in the MSDN library.","source":"For more information on `ITypeLib`, please see its existing documentation in the MSDN library."}],"pos":[5679,5774],"yaml":true,"extradata":"MT"},{"content":"The assembly to convert.","nodes":[{"pos":[0,24],"content":"The assembly to convert.","nodes":[{"content":"The assembly to convert.","pos":[0,24]}]}],"pos":[6848,6873],"yaml":true},{"content":"The file name of the resulting type library.","nodes":[{"pos":[0,44],"content":"The file name of the resulting type library.","nodes":[{"content":"The file name of the resulting type library.","pos":[0,44]}]}],"pos":[6943,6988],"yaml":true},{"content":"A <xref href=\"System.Runtime.InteropServices.TypeLibExporterFlags\"></xref> value indicating any special settings.","nodes":[{"pos":[0,113],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Runtime.InteropServices.TypeLibExporterFlags\"&gt;&lt;/xref&gt;</ph> value indicating any special settings.","source":"A <xref href=\"System.Runtime.InteropServices.TypeLibExporterFlags\"></xref> value indicating any special settings."}],"pos":[7087,7201],"yaml":true},{"content":"The <xref href=\"System.Runtime.InteropServices.ITypeLibExporterNotifySink\"></xref> interface implemented by the caller.","nodes":[{"pos":[0,119],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Runtime.InteropServices.ITypeLibExporterNotifySink\"&gt;&lt;/xref&gt;</ph> interface implemented by the caller.","source":"The <xref href=\"System.Runtime.InteropServices.ITypeLibExporterNotifySink\"></xref> interface implemented by the caller."}],"pos":[7311,7431],"yaml":true},{"content":"An object that implements the `ITypeLib` interface.","nodes":[{"pos":[0,51],"content":"An object that implements the <ph id=\"ph1\">`ITypeLib`</ph> interface.","source":"An object that implements the `ITypeLib` interface."}],"pos":[7488,7540],"yaml":true},{"content":"Converts a COM type library to an assembly.","nodes":[{"pos":[0,43],"content":"Converts a COM type library to an assembly.","nodes":[{"content":"Converts a COM type library to an assembly.","pos":[0,43]}]}],"pos":[9550,9594],"yaml":true},{"content":"If you do not want to generate a strong name for your assembly, it is valid for `publicKey` and `keyPair` to be `null`, as long as `flags` does not equal <xref:System.Runtime.InteropServices.TypeLibImporterFlags?displayProperty=fullName>. Otherwise, at least one of these parameters must be specified. If `publicKey` is `null`, the public key in `keyPair` will be set in the target assembly's manifest metadata and a signature will be generated based on the contents of the assembly. If `keyPair` is `null`, `publicKey` will be set in the target assembly's manifest metadata and no signature will be generated. Specifying both parameters is not generally useful, and can result in an invalid signature.  \n  \n For more information on `ITypeLib`, please see its existing documentation in the MSDN library.","nodes":[{"pos":[0,702],"content":"If you do not want to generate a strong name for your assembly, it is valid for `publicKey` and `keyPair` to be `null`, as long as `flags` does not equal <xref:System.Runtime.InteropServices.TypeLibImporterFlags?displayProperty=fullName>. Otherwise, at least one of these parameters must be specified. If `publicKey` is `null`, the public key in `keyPair` will be set in the target assembly's manifest metadata and a signature will be generated based on the contents of the assembly. If `keyPair` is `null`, `publicKey` will be set in the target assembly's manifest metadata and no signature will be generated. Specifying both parameters is not generally useful, and can result in an invalid signature.","nodes":[{"content":"If you do not want to generate a strong name for your assembly, it is valid for <ph id=\"ph1\">`publicKey`</ph> and <ph id=\"ph2\">`keyPair`</ph> to be <ph id=\"ph3\">`null`</ph>, as long as <ph id=\"ph4\">`flags`</ph> does not equal <ph id=\"ph5\">&lt;xref:System.Runtime.InteropServices.TypeLibImporterFlags?displayProperty=fullName&gt;</ph>.","pos":[0,238],"source":"If you do not want to generate a strong name for your assembly, it is valid for `publicKey` and `keyPair` to be `null`, as long as `flags` does not equal <xref:System.Runtime.InteropServices.TypeLibImporterFlags?displayProperty=fullName>."},{"content":"Otherwise, at least one of these parameters must be specified.","pos":[239,301]},{"content":"If <ph id=\"ph1\">`publicKey`</ph> is <ph id=\"ph2\">`null`</ph>, the public key in <ph id=\"ph3\">`keyPair`</ph> will be set in the target assembly's manifest metadata and a signature will be generated based on the contents of the assembly.","pos":[302,483],"source":" If `publicKey` is `null`, the public key in `keyPair` will be set in the target assembly's manifest metadata and a signature will be generated based on the contents of the assembly."},{"content":"If <ph id=\"ph1\">`keyPair`</ph> is <ph id=\"ph2\">`null`</ph>, <ph id=\"ph3\">`publicKey`</ph> will be set in the target assembly's manifest metadata and no signature will be generated.","pos":[484,610],"source":" If `keyPair` is `null`, `publicKey` will be set in the target assembly's manifest metadata and no signature will be generated."},{"content":"Specifying both parameters is not generally useful, and can result in an invalid signature.","pos":[611,702]}]},{"pos":[709,803],"content":"For more information on <ph id=\"ph1\">`ITypeLib`</ph>, please see its existing documentation in the MSDN library.","source":"For more information on `ITypeLib`, please see its existing documentation in the MSDN library."}],"pos":[9605,10413],"yaml":true,"extradata":"MT"},{"content":"The object that implements the `ITypeLib` interface.","nodes":[{"pos":[0,52],"content":"The object that implements the <ph id=\"ph1\">`ITypeLib`</ph> interface.","source":"The object that implements the `ITypeLib` interface."}],"pos":[10791,10844],"yaml":true},{"content":"The file name of the resulting assembly.","nodes":[{"pos":[0,40],"content":"The file name of the resulting assembly.","nodes":[{"content":"The file name of the resulting assembly.","pos":[0,40]}]}],"pos":[10911,10952],"yaml":true},{"content":"A <xref href=\"System.Runtime.InteropServices.TypeLibImporterFlags\"></xref> value indicating any special settings.","nodes":[{"pos":[0,113],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Runtime.InteropServices.TypeLibImporterFlags\"&gt;&lt;/xref&gt;</ph> value indicating any special settings.","source":"A <xref href=\"System.Runtime.InteropServices.TypeLibImporterFlags\"></xref> value indicating any special settings."}],"pos":[11012,11126],"yaml":true},{"content":"<xref href=\"System.Runtime.InteropServices.ITypeLibImporterNotifySink\"></xref> interface implemented by the caller.","nodes":[{"pos":[0,115],"content":"<ph id=\"ph1\">&lt;xref href=\"System.Runtime.InteropServices.ITypeLibImporterNotifySink\"&gt;&lt;/xref&gt;</ph> interface implemented by the caller.","source":"<xref href=\"System.Runtime.InteropServices.ITypeLibImporterNotifySink\"></xref> interface implemented by the caller."}],"pos":[11236,11352],"yaml":true},{"content":"A `byte` array containing the public key.","nodes":[{"pos":[0,41],"content":"A <ph id=\"ph1\">`byte`</ph> array containing the public key.","source":"A `byte` array containing the public key."}],"pos":[11417,11459],"yaml":true},{"content":"A <xref href=\"System.Reflection.StrongNameKeyPair\"></xref> object containing the public and private cryptographic key pair.","nodes":[{"pos":[0,123],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.StrongNameKeyPair\"&gt;&lt;/xref&gt;</ph> object containing the public and private cryptographic key pair.","source":"A <xref href=\"System.Reflection.StrongNameKeyPair\"></xref> object containing the public and private cryptographic key pair."}],"pos":[11544,11668],"yaml":true},{"content":"If `true`, the interfaces require link time checks for <xref href=\"System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode\"></xref> permission. If `false`, the interfaces require run time checks that require a stack walk and are more expensive, but help provide greater protection.","nodes":[{"pos":[0,290],"content":"If `true`, the interfaces require link time checks for <xref href=\"System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode\"></xref> permission. If `false`, the interfaces require run time checks that require a stack walk and are more expensive, but help provide greater protection.","nodes":[{"content":"If <ph id=\"ph1\">`true`</ph>, the interfaces require link time checks for <ph id=\"ph2\">&lt;xref href=\"System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode\"&gt;&lt;/xref&gt;</ph> permission.","pos":[0,152],"source":"If `true`, the interfaces require link time checks for <xref href=\"System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode\"></xref> permission."},{"content":"If <ph id=\"ph1\">`false`</ph>, the interfaces require run time checks that require a stack walk and are more expensive, but help provide greater protection.","pos":[153,290],"source":" If `false`, the interfaces require run time checks that require a stack walk and are more expensive, but help provide greater protection."}]}],"pos":[11741,12032],"yaml":true},{"content":"An <xref href=\"System.Reflection.Emit.AssemblyBuilder\"></xref> object containing the converted type library.","nodes":[{"pos":[0,108],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.AssemblyBuilder\"&gt;&lt;/xref&gt;</ph> object containing the converted type library.","source":"An <xref href=\"System.Reflection.Emit.AssemblyBuilder\"></xref> object containing the converted type library."}],"pos":[12114,12223],"yaml":true},{"content":"<code>typeLib</code> is `null`.  \n  \n -or-  \n  \n <code>asmFileName</code> is `null`.  \n  \n -or-  \n  \n <code>notifySink</code> is `null`.","nodes":[{"pos":[0,31],"content":"<ph id=\"ph1\">&lt;code&gt;typeLib&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>typeLib</code> is `null`."},{"pos":[38,42],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[49,84],"content":"<ph id=\"ph1\">&lt;code&gt;asmFileName&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>asmFileName</code> is `null`."},{"pos":[91,95],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[102,136],"content":"<ph id=\"ph1\">&lt;code&gt;notifySink&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>notifySink</code> is `null`."}],"pos":[12425,12572],"yaml":true},{"content":"<code>asmFileName</code> is an empty string.  \n  \n -or-  \n  \n <code>asmFileName</code> is longer than MAX_PATH.","nodes":[{"pos":[0,44],"content":"<ph id=\"ph1\">&lt;code&gt;asmFileName&lt;/code&gt;</ph> is an empty string.","source":"<code>asmFileName</code> is an empty string."},{"pos":[51,55],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[62,111],"content":"<ph id=\"ph1\">&lt;code&gt;asmFileName&lt;/code&gt;</ph> is longer than MAX_PATH.","source":"<code>asmFileName</code> is longer than MAX_PATH."}],"pos":[12666,12784],"yaml":true},{"content":"<code>flags</code> is not <xref href=\"System.Runtime.InteropServices.TypeLibImporterFlags.PrimaryInteropAssembly\"></xref>.  \n  \n -or-  \n  \n <code>publicKey</code> and <code>keyPair</code> are `null`.","nodes":[{"pos":[0,122],"content":"<ph id=\"ph1\">&lt;code&gt;flags&lt;/code&gt;</ph> is not <ph id=\"ph2\">&lt;xref href=\"System.Runtime.InteropServices.TypeLibImporterFlags.PrimaryInteropAssembly\"&gt;&lt;/xref&gt;</ph>.","source":"<code>flags</code> is not <xref href=\"System.Runtime.InteropServices.TypeLibImporterFlags.PrimaryInteropAssembly\"></xref>."},{"pos":[129,133],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[140,199],"content":"<ph id=\"ph1\">&lt;code&gt;publicKey&lt;/code&gt;</ph> and <ph id=\"ph2\">&lt;code&gt;keyPair&lt;/code&gt;</ph> are <ph id=\"ph3\">`null`</ph>.","source":"<code>publicKey</code> and <code>keyPair</code> are `null`."}],"pos":[12894,13102],"yaml":true},{"content":"The metadata produced has errors preventing any types from loading.","nodes":[{"pos":[0,67],"content":"The metadata produced has errors preventing any types from loading.","nodes":[{"content":"The metadata produced has errors preventing any types from loading.","pos":[0,67]}]}],"pos":[13238,13306],"yaml":true},{"content":"Converts a COM type library to an assembly.","nodes":[{"pos":[0,43],"content":"Converts a COM type library to an assembly.","nodes":[{"content":"Converts a COM type library to an assembly.","pos":[0,43]}]}],"pos":[15441,15485],"yaml":true},{"content":"If you do not want to generate a strong name for your assembly, it is valid for `publicKey` and `keyPair` to be `null`, as long as `flags` does not equal <xref:System.Runtime.InteropServices.TypeLibImporterFlags?displayProperty=fullName>. Otherwise, atleast one of these parameters must be specified. If `publicKey` is `null`, the public key in `keyPair` will be set in the target assembly's manifest metadata and a signature will be generated based on the contents of the assembly. If `keyPair` is `null`, `publicKey` will be set in the target assembly's manifest metadata and no signature will be generated. Specifying both parameters is not generally useful, and can result in an invalid signature.  \n  \n For more information on `ITypeLib`, please see its existing documentation in the MSDN library.","nodes":[{"pos":[0,701],"content":"If you do not want to generate a strong name for your assembly, it is valid for `publicKey` and `keyPair` to be `null`, as long as `flags` does not equal <xref:System.Runtime.InteropServices.TypeLibImporterFlags?displayProperty=fullName>. Otherwise, atleast one of these parameters must be specified. If `publicKey` is `null`, the public key in `keyPair` will be set in the target assembly's manifest metadata and a signature will be generated based on the contents of the assembly. If `keyPair` is `null`, `publicKey` will be set in the target assembly's manifest metadata and no signature will be generated. Specifying both parameters is not generally useful, and can result in an invalid signature.","nodes":[{"content":"If you do not want to generate a strong name for your assembly, it is valid for <ph id=\"ph1\">`publicKey`</ph> and <ph id=\"ph2\">`keyPair`</ph> to be <ph id=\"ph3\">`null`</ph>, as long as <ph id=\"ph4\">`flags`</ph> does not equal <ph id=\"ph5\">&lt;xref:System.Runtime.InteropServices.TypeLibImporterFlags?displayProperty=fullName&gt;</ph>.","pos":[0,238],"source":"If you do not want to generate a strong name for your assembly, it is valid for `publicKey` and `keyPair` to be `null`, as long as `flags` does not equal <xref:System.Runtime.InteropServices.TypeLibImporterFlags?displayProperty=fullName>."},{"content":"Otherwise, atleast one of these parameters must be specified.","pos":[239,300]},{"content":"If <ph id=\"ph1\">`publicKey`</ph> is <ph id=\"ph2\">`null`</ph>, the public key in <ph id=\"ph3\">`keyPair`</ph> will be set in the target assembly's manifest metadata and a signature will be generated based on the contents of the assembly.","pos":[301,482],"source":" If `publicKey` is `null`, the public key in `keyPair` will be set in the target assembly's manifest metadata and a signature will be generated based on the contents of the assembly."},{"content":"If <ph id=\"ph1\">`keyPair`</ph> is <ph id=\"ph2\">`null`</ph>, <ph id=\"ph3\">`publicKey`</ph> will be set in the target assembly's manifest metadata and no signature will be generated.","pos":[483,609],"source":" If `keyPair` is `null`, `publicKey` will be set in the target assembly's manifest metadata and no signature will be generated."},{"content":"Specifying both parameters is not generally useful, and can result in an invalid signature.","pos":[610,701]}]},{"pos":[708,802],"content":"For more information on <ph id=\"ph1\">`ITypeLib`</ph>, please see its existing documentation in the MSDN library.","source":"For more information on `ITypeLib`, please see its existing documentation in the MSDN library."}],"pos":[15496,16303],"yaml":true,"extradata":"MT"},{"content":"The object that implements the `ITypeLib` interface.","nodes":[{"pos":[0,52],"content":"The object that implements the <ph id=\"ph1\">`ITypeLib`</ph> interface.","source":"The object that implements the `ITypeLib` interface."}],"pos":[17367,17420],"yaml":true},{"content":"The file name of the resulting assembly.","nodes":[{"pos":[0,40],"content":"The file name of the resulting assembly.","nodes":[{"content":"The file name of the resulting assembly.","pos":[0,40]}]}],"pos":[17487,17528],"yaml":true},{"content":"A <xref href=\"System.Runtime.InteropServices.TypeLibImporterFlags\"></xref> value indicating any special settings.","nodes":[{"pos":[0,113],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Runtime.InteropServices.TypeLibImporterFlags\"&gt;&lt;/xref&gt;</ph> value indicating any special settings.","source":"A <xref href=\"System.Runtime.InteropServices.TypeLibImporterFlags\"></xref> value indicating any special settings."}],"pos":[17627,17741],"yaml":true},{"content":"<xref href=\"System.Runtime.InteropServices.ITypeLibImporterNotifySink\"></xref> interface implemented by the caller.","nodes":[{"pos":[0,115],"content":"<ph id=\"ph1\">&lt;xref href=\"System.Runtime.InteropServices.ITypeLibImporterNotifySink\"&gt;&lt;/xref&gt;</ph> interface implemented by the caller.","source":"<xref href=\"System.Runtime.InteropServices.ITypeLibImporterNotifySink\"></xref> interface implemented by the caller."}],"pos":[17851,17967],"yaml":true},{"content":"A `byte` array containing the public key.","nodes":[{"pos":[0,41],"content":"A <ph id=\"ph1\">`byte`</ph> array containing the public key.","source":"A `byte` array containing the public key."}],"pos":[18032,18074],"yaml":true},{"content":"A <xref href=\"System.Reflection.StrongNameKeyPair\"></xref> object containing the public and private cryptographic key pair.","nodes":[{"pos":[0,123],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.StrongNameKeyPair\"&gt;&lt;/xref&gt;</ph> object containing the public and private cryptographic key pair.","source":"A <xref href=\"System.Reflection.StrongNameKeyPair\"></xref> object containing the public and private cryptographic key pair."}],"pos":[18159,18283],"yaml":true},{"content":"The namespace for the resulting assembly.","nodes":[{"pos":[0,41],"content":"The namespace for the resulting assembly.","nodes":[{"content":"The namespace for the resulting assembly.","pos":[0,41]}]}],"pos":[18351,18393],"yaml":true},{"content":"The version of the resulting assembly. If `null`, the version of the type library is used.","nodes":[{"pos":[0,90],"content":"The version of the resulting assembly. If `null`, the version of the type library is used.","nodes":[{"content":"The version of the resulting assembly.","pos":[0,38]},{"content":"If <ph id=\"ph1\">`null`</ph>, the version of the type library is used.","pos":[39,90],"source":" If `null`, the version of the type library is used."}]}],"pos":[18460,18551],"yaml":true},{"content":"An <xref href=\"System.Reflection.Emit.AssemblyBuilder\"></xref> object containing the converted type library.","nodes":[{"pos":[0,108],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.AssemblyBuilder\"&gt;&lt;/xref&gt;</ph> object containing the converted type library.","source":"An <xref href=\"System.Reflection.Emit.AssemblyBuilder\"></xref> object containing the converted type library."}],"pos":[18633,18742],"yaml":true},{"content":"<code>typeLib</code> is `null`.  \n  \n -or-  \n  \n <code>asmFileName</code> is `null`.  \n  \n -or-  \n  \n <code>notifySink</code> is `null`.","nodes":[{"pos":[0,31],"content":"<ph id=\"ph1\">&lt;code&gt;typeLib&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>typeLib</code> is `null`."},{"pos":[38,42],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[49,84],"content":"<ph id=\"ph1\">&lt;code&gt;asmFileName&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>asmFileName</code> is `null`."},{"pos":[91,95],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[102,136],"content":"<ph id=\"ph1\">&lt;code&gt;notifySink&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>notifySink</code> is `null`."}],"pos":[18944,19091],"yaml":true},{"content":"<code>asmFileName</code> is an empty string.  \n  \n -or-  \n  \n <code>asmFileName</code> is longer than MAX_PATH.","nodes":[{"pos":[0,44],"content":"<ph id=\"ph1\">&lt;code&gt;asmFileName&lt;/code&gt;</ph> is an empty string.","source":"<code>asmFileName</code> is an empty string."},{"pos":[51,55],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[62,111],"content":"<ph id=\"ph1\">&lt;code&gt;asmFileName&lt;/code&gt;</ph> is longer than MAX_PATH.","source":"<code>asmFileName</code> is longer than MAX_PATH."}],"pos":[19185,19303],"yaml":true},{"content":"<code>flags</code> is not <xref href=\"System.Runtime.InteropServices.TypeLibImporterFlags.PrimaryInteropAssembly\"></xref>.  \n  \n -or-  \n  \n <code>publicKey</code> and <code>keyPair</code> are `null`.","nodes":[{"pos":[0,122],"content":"<ph id=\"ph1\">&lt;code&gt;flags&lt;/code&gt;</ph> is not <ph id=\"ph2\">&lt;xref href=\"System.Runtime.InteropServices.TypeLibImporterFlags.PrimaryInteropAssembly\"&gt;&lt;/xref&gt;</ph>.","source":"<code>flags</code> is not <xref href=\"System.Runtime.InteropServices.TypeLibImporterFlags.PrimaryInteropAssembly\"></xref>."},{"pos":[129,133],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[140,199],"content":"<ph id=\"ph1\">&lt;code&gt;publicKey&lt;/code&gt;</ph> and <ph id=\"ph2\">&lt;code&gt;keyPair&lt;/code&gt;</ph> are <ph id=\"ph3\">`null`</ph>.","source":"<code>publicKey</code> and <code>keyPair</code> are `null`."}],"pos":[19413,19621],"yaml":true},{"content":"The metadata produced has errors preventing any types from loading.","nodes":[{"pos":[0,67],"content":"The metadata produced has errors preventing any types from loading.","nodes":[{"content":"The metadata produced has errors preventing any types from loading.","pos":[0,67]}]}],"pos":[19757,19825],"yaml":true},{"content":"Gets the name and code base of a primary interop assembly for a specified type library.","nodes":[{"pos":[0,87],"content":"Gets the name and code base of a primary interop assembly for a specified type library.","nodes":[{"content":"Gets the name and code base of a primary interop assembly for a specified type library.","pos":[0,87]}]}],"pos":[21357,21445],"yaml":true},{"content":"The GUID of the type library.","nodes":[{"pos":[0,29],"content":"The GUID of the type library.","nodes":[{"content":"The GUID of the type library.","pos":[0,29]}]}],"pos":[21663,21693],"yaml":true},{"content":"The major version number of the type library.","nodes":[{"pos":[0,45],"content":"The major version number of the type library.","nodes":[{"content":"The major version number of the type library.","pos":[0,45]}]}],"pos":[21753,21799],"yaml":true},{"content":"The minor version number of the type library.","nodes":[{"pos":[0,45],"content":"The minor version number of the type library.","nodes":[{"content":"The minor version number of the type library.","pos":[0,45]}]}],"pos":[21859,21905],"yaml":true},{"content":"The LCID of the type library.","nodes":[{"pos":[0,29],"content":"The LCID of the type library.","nodes":[{"content":"The LCID of the type library.","pos":[0,29]}]}],"pos":[21964,21994],"yaml":true},{"content":"On successful return, the name of the primary interop assembly associated with <code>g</code>.","nodes":[{"pos":[0,94],"content":"On successful return, the name of the primary interop assembly associated with <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">g</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"On successful return, the name of the primary interop assembly associated with <code>g</code>."}],"pos":[22057,22152],"yaml":true},{"content":"On successful return, the code base of the primary interop assembly associated with <code>g</code>.","nodes":[{"pos":[0,99],"content":"On successful return, the code base of the primary interop assembly associated with <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">g</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"On successful return, the code base of the primary interop assembly associated with <code>g</code>."}],"pos":[22219,22319],"yaml":true},{"content":"`true` if the primary interop assembly was found in the registry; otherwise `false`.","nodes":[{"pos":[0,84],"content":"<ph id=\"ph1\">`true`</ph> if the primary interop assembly was found in the registry; otherwise <ph id=\"ph2\">`false`</ph>.","source":"`true` if the primary interop assembly was found in the registry; otherwise `false`."}],"pos":[22377,22464],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Runtime.InteropServices.TypeLibConverter\n  commentId: T:System.Runtime.InteropServices.TypeLibConverter\n  id: TypeLibConverter\n  children:\n  - System.Runtime.InteropServices.TypeLibConverter.#ctor\n  - System.Runtime.InteropServices.TypeLibConverter.ConvertAssemblyToTypeLib(System.Reflection.Assembly,System.String,System.Runtime.InteropServices.TypeLibExporterFlags,System.Runtime.InteropServices.ITypeLibExporterNotifySink)\n  - System.Runtime.InteropServices.TypeLibConverter.ConvertTypeLibToAssembly(System.Object,System.String,System.Int32,System.Runtime.InteropServices.ITypeLibImporterNotifySink,System.Byte[],System.Reflection.StrongNameKeyPair,System.Boolean)\n  - System.Runtime.InteropServices.TypeLibConverter.ConvertTypeLibToAssembly(System.Object,System.String,System.Runtime.InteropServices.TypeLibImporterFlags,System.Runtime.InteropServices.ITypeLibImporterNotifySink,System.Byte[],System.Reflection.StrongNameKeyPair,System.String,System.Version)\n  - System.Runtime.InteropServices.TypeLibConverter.GetPrimaryInteropAssembly(System.Guid,System.Int32,System.Int32,System.Int32,System.String@,System.String@)\n  langs:\n  - csharp\n  name: TypeLibConverter\n  nameWithType: TypeLibConverter\n  fullName: System.Runtime.InteropServices.TypeLibConverter\n  type: Class\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.InteropServices\n  summary: Provides a set of services that convert a managed assembly to a COM type library and vice versa.\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)]\n\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      [System.Runtime.InteropServices.Guid(\"f1c3bf79-c3e4-11d3-88e7-00902754c43a\")]\n\n      public sealed class TypeLibConverter : System.Runtime.InteropServices.ITypeLibConverter\n  inheritance:\n  - System.Object\n  implements:\n  - System.Runtime.InteropServices.ITypeLibConverter\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  attributes:\n  - type: System.Runtime.InteropServices.ClassInterfaceAttribute\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  - type: System.Runtime.InteropServices.GuidAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/TypeLibConverter.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.TypeLibConverter.#ctor\n  commentId: M:System.Runtime.InteropServices.TypeLibConverter.#ctor\n  id: '#ctor'\n  parent: System.Runtime.InteropServices.TypeLibConverter\n  langs:\n  - csharp\n  name: TypeLibConverter()\n  nameWithType: TypeLibConverter.TypeLibConverter()\n  fullName: TypeLibConverter.TypeLibConverter()\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.InteropServices\n  summary: Initializes a new instance of the <xref href=\"System.Runtime.InteropServices.TypeLibConverter\"></xref> class.\n  syntax:\n    content: public TypeLibConverter ();\n    parameters: []\n  overload: System.Runtime.InteropServices.TypeLibConverter.#ctor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/TypeLibConverter.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.TypeLibConverter.ConvertAssemblyToTypeLib(System.Reflection.Assembly,System.String,System.Runtime.InteropServices.TypeLibExporterFlags,System.Runtime.InteropServices.ITypeLibExporterNotifySink)\n  commentId: M:System.Runtime.InteropServices.TypeLibConverter.ConvertAssemblyToTypeLib(System.Reflection.Assembly,System.String,System.Runtime.InteropServices.TypeLibExporterFlags,System.Runtime.InteropServices.ITypeLibExporterNotifySink)\n  id: ConvertAssemblyToTypeLib(System.Reflection.Assembly,System.String,System.Runtime.InteropServices.TypeLibExporterFlags,System.Runtime.InteropServices.ITypeLibExporterNotifySink)\n  parent: System.Runtime.InteropServices.TypeLibConverter\n  langs:\n  - csharp\n  name: ConvertAssemblyToTypeLib(Assembly, String, TypeLibExporterFlags, ITypeLibExporterNotifySink)\n  nameWithType: TypeLibConverter.ConvertAssemblyToTypeLib(Assembly, String, TypeLibExporterFlags, ITypeLibExporterNotifySink)\n  fullName: TypeLibConverter.ConvertAssemblyToTypeLib(Assembly, String, TypeLibExporterFlags, ITypeLibExporterNotifySink)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.InteropServices\n  summary: Converts an assembly to a COM type library.\n  remarks: For more information on `ITypeLib`, please see its existing documentation in the MSDN library.\n  example:\n  - >-\n    [!code-cpp[System.Runtime.InteropServices.TypelibConverter.ConvertAssemblyToTypelib1#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Runtime.InteropServices.TypelibConverter.ConvertAssemblyToTypelib1/CPP/convert2.cpp#1)]\n     [!code-csharp[System.Runtime.InteropServices.TypelibConverter.ConvertAssemblyToTypelib1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.InteropServices.TypelibConverter.ConvertAssemblyToTypelib1/CS/convert2.cs#1)]\n     [!code-vb[System.Runtime.InteropServices.TypelibConverter.ConvertAssemblyToTypelib1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.InteropServices.TypelibConverter.ConvertAssemblyToTypelib1/VB/convert2.vb#1)]\n  syntax:\n    content: public object ConvertAssemblyToTypeLib (System.Reflection.Assembly assembly, string strTypeLibName, System.Runtime.InteropServices.TypeLibExporterFlags flags, System.Runtime.InteropServices.ITypeLibExporterNotifySink notifySink);\n    parameters:\n    - id: assembly\n      type: System.Reflection.Assembly\n      description: The assembly to convert.\n    - id: strTypeLibName\n      type: System.String\n      description: The file name of the resulting type library.\n    - id: flags\n      type: System.Runtime.InteropServices.TypeLibExporterFlags\n      description: A <xref href=\"System.Runtime.InteropServices.TypeLibExporterFlags\"></xref> value indicating any special settings.\n    - id: notifySink\n      type: System.Runtime.InteropServices.ITypeLibExporterNotifySink\n      description: The <xref href=\"System.Runtime.InteropServices.ITypeLibExporterNotifySink\"></xref> interface implemented by the caller.\n    return:\n      type: System.Object\n      description: An object that implements the `ITypeLib` interface.\n  overload: System.Runtime.InteropServices.TypeLibConverter.ConvertAssemblyToTypeLib*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/TypeLibConverter.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.TypeLibConverter.ConvertTypeLibToAssembly(System.Object,System.String,System.Int32,System.Runtime.InteropServices.ITypeLibImporterNotifySink,System.Byte[],System.Reflection.StrongNameKeyPair,System.Boolean)\n  commentId: M:System.Runtime.InteropServices.TypeLibConverter.ConvertTypeLibToAssembly(System.Object,System.String,System.Int32,System.Runtime.InteropServices.ITypeLibImporterNotifySink,System.Byte[],System.Reflection.StrongNameKeyPair,System.Boolean)\n  id: ConvertTypeLibToAssembly(System.Object,System.String,System.Int32,System.Runtime.InteropServices.ITypeLibImporterNotifySink,System.Byte[],System.Reflection.StrongNameKeyPair,System.Boolean)\n  parent: System.Runtime.InteropServices.TypeLibConverter\n  langs:\n  - csharp\n  name: ConvertTypeLibToAssembly(Object, String, Int32, ITypeLibImporterNotifySink, Byte[], StrongNameKeyPair, Boolean)\n  nameWithType: TypeLibConverter.ConvertTypeLibToAssembly(Object, String, Int32, ITypeLibImporterNotifySink, Byte[], StrongNameKeyPair, Boolean)\n  fullName: TypeLibConverter.ConvertTypeLibToAssembly(Object, String, Int32, ITypeLibImporterNotifySink, Byte[], StrongNameKeyPair, Boolean)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.InteropServices\n  summary: Converts a COM type library to an assembly.\n  remarks: \"If you do not want to generate a strong name for your assembly, it is valid for `publicKey` and `keyPair` to be `null`, as long as `flags` does not equal <xref:System.Runtime.InteropServices.TypeLibImporterFlags?displayProperty=fullName>. Otherwise, at least one of these parameters must be specified. If `publicKey` is `null`, the public key in `keyPair` will be set in the target assembly's manifest metadata and a signature will be generated based on the contents of the assembly. If `keyPair` is `null`, `publicKey` will be set in the target assembly's manifest metadata and no signature will be generated. Specifying both parameters is not generally useful, and can result in an invalid signature.  \\n  \\n For more information on `ITypeLib`, please see its existing documentation in the MSDN library.\"\n  syntax:\n    content: public System.Reflection.Emit.AssemblyBuilder ConvertTypeLibToAssembly (object typeLib, string asmFileName, int flags, System.Runtime.InteropServices.ITypeLibImporterNotifySink notifySink, byte[] publicKey, System.Reflection.StrongNameKeyPair keyPair, bool unsafeInterfaces);\n    parameters:\n    - id: typeLib\n      type: System.Object\n      description: The object that implements the `ITypeLib` interface.\n    - id: asmFileName\n      type: System.String\n      description: The file name of the resulting assembly.\n    - id: flags\n      type: System.Int32\n      description: A <xref href=\"System.Runtime.InteropServices.TypeLibImporterFlags\"></xref> value indicating any special settings.\n    - id: notifySink\n      type: System.Runtime.InteropServices.ITypeLibImporterNotifySink\n      description: <xref href=\"System.Runtime.InteropServices.ITypeLibImporterNotifySink\"></xref> interface implemented by the caller.\n    - id: publicKey\n      type: System.Byte[]\n      description: A `byte` array containing the public key.\n    - id: keyPair\n      type: System.Reflection.StrongNameKeyPair\n      description: A <xref href=\"System.Reflection.StrongNameKeyPair\"></xref> object containing the public and private cryptographic key pair.\n    - id: unsafeInterfaces\n      type: System.Boolean\n      description: If `true`, the interfaces require link time checks for <xref href=\"System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode\"></xref> permission. If `false`, the interfaces require run time checks that require a stack walk and are more expensive, but help provide greater protection.\n    return:\n      type: System.Reflection.Emit.AssemblyBuilder\n      description: An <xref href=\"System.Reflection.Emit.AssemblyBuilder\"></xref> object containing the converted type library.\n  overload: System.Runtime.InteropServices.TypeLibConverter.ConvertTypeLibToAssembly*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>typeLib</code> is `null`.  \\n  \\n -or-  \\n  \\n <code>asmFileName</code> is `null`.  \\n  \\n -or-  \\n  \\n <code>notifySink</code> is `null`.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>asmFileName</code> is an empty string.  \\n  \\n -or-  \\n  \\n <code>asmFileName</code> is longer than MAX_PATH.\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"<code>flags</code> is not <xref href=\\\"System.Runtime.InteropServices.TypeLibImporterFlags.PrimaryInteropAssembly\\\"></xref>.  \\n  \\n -or-  \\n  \\n <code>publicKey</code> and <code>keyPair</code> are `null`.\"\n  - type: System.Reflection.ReflectionTypeLoadException\n    commentId: T:System.Reflection.ReflectionTypeLoadException\n    description: The metadata produced has errors preventing any types from loading.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/TypeLibConverter.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.TypeLibConverter.ConvertTypeLibToAssembly(System.Object,System.String,System.Runtime.InteropServices.TypeLibImporterFlags,System.Runtime.InteropServices.ITypeLibImporterNotifySink,System.Byte[],System.Reflection.StrongNameKeyPair,System.String,System.Version)\n  commentId: M:System.Runtime.InteropServices.TypeLibConverter.ConvertTypeLibToAssembly(System.Object,System.String,System.Runtime.InteropServices.TypeLibImporterFlags,System.Runtime.InteropServices.ITypeLibImporterNotifySink,System.Byte[],System.Reflection.StrongNameKeyPair,System.String,System.Version)\n  id: ConvertTypeLibToAssembly(System.Object,System.String,System.Runtime.InteropServices.TypeLibImporterFlags,System.Runtime.InteropServices.ITypeLibImporterNotifySink,System.Byte[],System.Reflection.StrongNameKeyPair,System.String,System.Version)\n  parent: System.Runtime.InteropServices.TypeLibConverter\n  langs:\n  - csharp\n  name: ConvertTypeLibToAssembly(Object, String, TypeLibImporterFlags, ITypeLibImporterNotifySink, Byte[], StrongNameKeyPair, String, Version)\n  nameWithType: TypeLibConverter.ConvertTypeLibToAssembly(Object, String, TypeLibImporterFlags, ITypeLibImporterNotifySink, Byte[], StrongNameKeyPair, String, Version)\n  fullName: TypeLibConverter.ConvertTypeLibToAssembly(Object, String, TypeLibImporterFlags, ITypeLibImporterNotifySink, Byte[], StrongNameKeyPair, String, Version)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.InteropServices\n  summary: Converts a COM type library to an assembly.\n  remarks: \"If you do not want to generate a strong name for your assembly, it is valid for `publicKey` and `keyPair` to be `null`, as long as `flags` does not equal <xref:System.Runtime.InteropServices.TypeLibImporterFlags?displayProperty=fullName>. Otherwise, atleast one of these parameters must be specified. If `publicKey` is `null`, the public key in `keyPair` will be set in the target assembly's manifest metadata and a signature will be generated based on the contents of the assembly. If `keyPair` is `null`, `publicKey` will be set in the target assembly's manifest metadata and no signature will be generated. Specifying both parameters is not generally useful, and can result in an invalid signature.  \\n  \\n For more information on `ITypeLib`, please see its existing documentation in the MSDN library.\"\n  example:\n  - >-\n    [!code-cpp[System.Runtime.InteropServices.ConvertTypelibToASSembly#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Runtime.InteropServices.ConvertTypelibToASSembly/CPP/convert1.cpp#1)]\n     [!code-csharp[System.Runtime.InteropServices.ConvertTypelibToASSembly#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.InteropServices.ConvertTypelibToASSembly/CS/convert1.cs#1)]\n     [!code-vb[System.Runtime.InteropServices.ConvertTypelibToASSembly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.InteropServices.ConvertTypelibToASSembly/VB/convert1.vb#1)]\n  syntax:\n    content: public System.Reflection.Emit.AssemblyBuilder ConvertTypeLibToAssembly (object typeLib, string asmFileName, System.Runtime.InteropServices.TypeLibImporterFlags flags, System.Runtime.InteropServices.ITypeLibImporterNotifySink notifySink, byte[] publicKey, System.Reflection.StrongNameKeyPair keyPair, string asmNamespace, Version asmVersion);\n    parameters:\n    - id: typeLib\n      type: System.Object\n      description: The object that implements the `ITypeLib` interface.\n    - id: asmFileName\n      type: System.String\n      description: The file name of the resulting assembly.\n    - id: flags\n      type: System.Runtime.InteropServices.TypeLibImporterFlags\n      description: A <xref href=\"System.Runtime.InteropServices.TypeLibImporterFlags\"></xref> value indicating any special settings.\n    - id: notifySink\n      type: System.Runtime.InteropServices.ITypeLibImporterNotifySink\n      description: <xref href=\"System.Runtime.InteropServices.ITypeLibImporterNotifySink\"></xref> interface implemented by the caller.\n    - id: publicKey\n      type: System.Byte[]\n      description: A `byte` array containing the public key.\n    - id: keyPair\n      type: System.Reflection.StrongNameKeyPair\n      description: A <xref href=\"System.Reflection.StrongNameKeyPair\"></xref> object containing the public and private cryptographic key pair.\n    - id: asmNamespace\n      type: System.String\n      description: The namespace for the resulting assembly.\n    - id: asmVersion\n      type: System.Version\n      description: The version of the resulting assembly. If `null`, the version of the type library is used.\n    return:\n      type: System.Reflection.Emit.AssemblyBuilder\n      description: An <xref href=\"System.Reflection.Emit.AssemblyBuilder\"></xref> object containing the converted type library.\n  overload: System.Runtime.InteropServices.TypeLibConverter.ConvertTypeLibToAssembly*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>typeLib</code> is `null`.  \\n  \\n -or-  \\n  \\n <code>asmFileName</code> is `null`.  \\n  \\n -or-  \\n  \\n <code>notifySink</code> is `null`.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>asmFileName</code> is an empty string.  \\n  \\n -or-  \\n  \\n <code>asmFileName</code> is longer than MAX_PATH.\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"<code>flags</code> is not <xref href=\\\"System.Runtime.InteropServices.TypeLibImporterFlags.PrimaryInteropAssembly\\\"></xref>.  \\n  \\n -or-  \\n  \\n <code>publicKey</code> and <code>keyPair</code> are `null`.\"\n  - type: System.Reflection.ReflectionTypeLoadException\n    commentId: T:System.Reflection.ReflectionTypeLoadException\n    description: The metadata produced has errors preventing any types from loading.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/TypeLibConverter.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.TypeLibConverter.GetPrimaryInteropAssembly(System.Guid,System.Int32,System.Int32,System.Int32,System.String@,System.String@)\n  commentId: M:System.Runtime.InteropServices.TypeLibConverter.GetPrimaryInteropAssembly(System.Guid,System.Int32,System.Int32,System.Int32,System.String@,System.String@)\n  id: GetPrimaryInteropAssembly(System.Guid,System.Int32,System.Int32,System.Int32,System.String@,System.String@)\n  parent: System.Runtime.InteropServices.TypeLibConverter\n  langs:\n  - csharp\n  name: GetPrimaryInteropAssembly(Guid, Int32, Int32, Int32, String, String)\n  nameWithType: TypeLibConverter.GetPrimaryInteropAssembly(Guid, Int32, Int32, Int32, String, String)\n  fullName: TypeLibConverter.GetPrimaryInteropAssembly(Guid, Int32, Int32, Int32, String, String)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.InteropServices\n  summary: Gets the name and code base of a primary interop assembly for a specified type library.\n  syntax:\n    content: public bool GetPrimaryInteropAssembly (Guid g, int major, int minor, int lcid, out string asmName, out string asmCodeBase);\n    parameters:\n    - id: g\n      type: System.Guid\n      description: The GUID of the type library.\n    - id: major\n      type: System.Int32\n      description: The major version number of the type library.\n    - id: minor\n      type: System.Int32\n      description: The minor version number of the type library.\n    - id: lcid\n      type: System.Int32\n      description: The LCID of the type library.\n    - id: asmName\n      type: System.String\n      description: On successful return, the name of the primary interop assembly associated with <code>g</code>.\n    - id: asmCodeBase\n      type: System.String\n      description: On successful return, the code base of the primary interop assembly associated with <code>g</code>.\n    return:\n      type: System.Boolean\n      description: '`true` if the primary interop assembly was found in the registry; otherwise `false`.'\n  overload: System.Runtime.InteropServices.TypeLibConverter.GetPrimaryInteropAssembly*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/TypeLibConverter.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  nameWithType: InvalidOperationException\n  fullName: System.InvalidOperationException\n- uid: System.Reflection.ReflectionTypeLoadException\n  parent: System.Reflection\n  isExternal: false\n  name: ReflectionTypeLoadException\n  nameWithType: ReflectionTypeLoadException\n  fullName: System.Reflection.ReflectionTypeLoadException\n- uid: System.Runtime.InteropServices.TypeLibConverter.#ctor\n  parent: System.Runtime.InteropServices.TypeLibConverter\n  isExternal: false\n  name: TypeLibConverter()\n  nameWithType: TypeLibConverter.TypeLibConverter()\n  fullName: TypeLibConverter.TypeLibConverter()\n- uid: System.Runtime.InteropServices.TypeLibConverter.ConvertAssemblyToTypeLib(System.Reflection.Assembly,System.String,System.Runtime.InteropServices.TypeLibExporterFlags,System.Runtime.InteropServices.ITypeLibExporterNotifySink)\n  parent: System.Runtime.InteropServices.TypeLibConverter\n  isExternal: false\n  name: ConvertAssemblyToTypeLib(Assembly, String, TypeLibExporterFlags, ITypeLibExporterNotifySink)\n  nameWithType: TypeLibConverter.ConvertAssemblyToTypeLib(Assembly, String, TypeLibExporterFlags, ITypeLibExporterNotifySink)\n  fullName: TypeLibConverter.ConvertAssemblyToTypeLib(Assembly, String, TypeLibExporterFlags, ITypeLibExporterNotifySink)\n- uid: System.Reflection.Assembly\n  parent: System.Reflection\n  isExternal: false\n  name: Assembly\n  nameWithType: Assembly\n  fullName: System.Reflection.Assembly\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Runtime.InteropServices.TypeLibExporterFlags\n  parent: System.Runtime.InteropServices\n  isExternal: false\n  name: TypeLibExporterFlags\n  nameWithType: TypeLibExporterFlags\n  fullName: System.Runtime.InteropServices.TypeLibExporterFlags\n- uid: System.Runtime.InteropServices.ITypeLibExporterNotifySink\n  parent: System.Runtime.InteropServices\n  isExternal: false\n  name: ITypeLibExporterNotifySink\n  nameWithType: ITypeLibExporterNotifySink\n  fullName: System.Runtime.InteropServices.ITypeLibExporterNotifySink\n- uid: System.Runtime.InteropServices.TypeLibConverter.ConvertTypeLibToAssembly(System.Object,System.String,System.Int32,System.Runtime.InteropServices.ITypeLibImporterNotifySink,System.Byte[],System.Reflection.StrongNameKeyPair,System.Boolean)\n  parent: System.Runtime.InteropServices.TypeLibConverter\n  isExternal: false\n  name: ConvertTypeLibToAssembly(Object, String, Int32, ITypeLibImporterNotifySink, Byte[], StrongNameKeyPair, Boolean)\n  nameWithType: TypeLibConverter.ConvertTypeLibToAssembly(Object, String, Int32, ITypeLibImporterNotifySink, Byte[], StrongNameKeyPair, Boolean)\n  fullName: TypeLibConverter.ConvertTypeLibToAssembly(Object, String, Int32, ITypeLibImporterNotifySink, Byte[], StrongNameKeyPair, Boolean)\n- uid: System.Reflection.Emit.AssemblyBuilder\n  parent: System.Reflection.Emit\n  isExternal: false\n  name: AssemblyBuilder\n  nameWithType: AssemblyBuilder\n  fullName: System.Reflection.Emit.AssemblyBuilder\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Runtime.InteropServices.ITypeLibImporterNotifySink\n  parent: System.Runtime.InteropServices\n  isExternal: false\n  name: ITypeLibImporterNotifySink\n  nameWithType: ITypeLibImporterNotifySink\n  fullName: System.Runtime.InteropServices.ITypeLibImporterNotifySink\n- uid: System.Byte\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte\n- uid: System.Byte[]\n  parent: System\n  isExternal: false\n  name: Byte[]\n  nameWithType: Byte[]\n  fullName: System.Byte[]\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: System.Byte\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Reflection.StrongNameKeyPair\n  parent: System.Reflection\n  isExternal: false\n  name: StrongNameKeyPair\n  nameWithType: StrongNameKeyPair\n  fullName: System.Reflection.StrongNameKeyPair\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Runtime.InteropServices.TypeLibConverter.ConvertTypeLibToAssembly(System.Object,System.String,System.Runtime.InteropServices.TypeLibImporterFlags,System.Runtime.InteropServices.ITypeLibImporterNotifySink,System.Byte[],System.Reflection.StrongNameKeyPair,System.String,System.Version)\n  parent: System.Runtime.InteropServices.TypeLibConverter\n  isExternal: false\n  name: ConvertTypeLibToAssembly(Object, String, TypeLibImporterFlags, ITypeLibImporterNotifySink, Byte[], StrongNameKeyPair, String, Version)\n  nameWithType: TypeLibConverter.ConvertTypeLibToAssembly(Object, String, TypeLibImporterFlags, ITypeLibImporterNotifySink, Byte[], StrongNameKeyPair, String, Version)\n  fullName: TypeLibConverter.ConvertTypeLibToAssembly(Object, String, TypeLibImporterFlags, ITypeLibImporterNotifySink, Byte[], StrongNameKeyPair, String, Version)\n- uid: System.Runtime.InteropServices.TypeLibImporterFlags\n  parent: System.Runtime.InteropServices\n  isExternal: false\n  name: TypeLibImporterFlags\n  nameWithType: TypeLibImporterFlags\n  fullName: System.Runtime.InteropServices.TypeLibImporterFlags\n- uid: System.Version\n  parent: System\n  isExternal: false\n  name: Version\n  nameWithType: Version\n  fullName: System.Version\n- uid: System.Runtime.InteropServices.TypeLibConverter.GetPrimaryInteropAssembly(System.Guid,System.Int32,System.Int32,System.Int32,System.String@,System.String@)\n  parent: System.Runtime.InteropServices.TypeLibConverter\n  isExternal: false\n  name: GetPrimaryInteropAssembly(Guid, Int32, Int32, Int32, String, String)\n  nameWithType: TypeLibConverter.GetPrimaryInteropAssembly(Guid, Int32, Int32, Int32, String, String)\n  fullName: TypeLibConverter.GetPrimaryInteropAssembly(Guid, Int32, Int32, Int32, String, String)\n- uid: System.Guid\n  parent: System\n  isExternal: false\n  name: Guid\n  nameWithType: Guid\n  fullName: System.Guid\n- uid: System.Runtime.InteropServices.TypeLibConverter.#ctor*\n  parent: System.Runtime.InteropServices.TypeLibConverter\n  isExternal: false\n  name: TypeLibConverter\n  nameWithType: TypeLibConverter.TypeLibConverter\n  fullName: TypeLibConverter.TypeLibConverter\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/TypeLibConverter.xml\n- uid: System.Runtime.InteropServices.TypeLibConverter.ConvertAssemblyToTypeLib*\n  parent: System.Runtime.InteropServices.TypeLibConverter\n  isExternal: false\n  name: ConvertAssemblyToTypeLib\n  nameWithType: TypeLibConverter.ConvertAssemblyToTypeLib\n  fullName: TypeLibConverter.ConvertAssemblyToTypeLib\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/TypeLibConverter.xml\n- uid: System.Runtime.InteropServices.TypeLibConverter.ConvertTypeLibToAssembly*\n  parent: System.Runtime.InteropServices.TypeLibConverter\n  isExternal: false\n  name: ConvertTypeLibToAssembly\n  nameWithType: TypeLibConverter.ConvertTypeLibToAssembly\n  fullName: TypeLibConverter.ConvertTypeLibToAssembly\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/TypeLibConverter.xml\n- uid: System.Runtime.InteropServices.TypeLibConverter.GetPrimaryInteropAssembly*\n  parent: System.Runtime.InteropServices.TypeLibConverter\n  isExternal: false\n  name: GetPrimaryInteropAssembly\n  nameWithType: TypeLibConverter.GetPrimaryInteropAssembly\n  fullName: TypeLibConverter.GetPrimaryInteropAssembly\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/TypeLibConverter.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.Runtime.InteropServices.ITypeLibConverter\n  parent: System.Runtime.InteropServices\n  isExternal: false\n  name: ITypeLibConverter\n  nameWithType: ITypeLibConverter\n  fullName: System.Runtime.InteropServices.ITypeLibConverter\n"}