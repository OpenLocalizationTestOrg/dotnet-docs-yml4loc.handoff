{"nodes":[{"content":"Provides data for the <xref href=\"System.Windows.UIElement.ManipulationDelta\"></xref> event.","nodes":[{"pos":[0,92],"content":"Provides data for the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.ManipulationDelta\"&gt;&lt;/xref&gt;</ph> event.","source":"Provides data for the <xref href=\"System.Windows.UIElement.ManipulationDelta\"></xref> event."}],"pos":[1334,1427],"yaml":true},{"content":"The <xref:System.Windows.Input.ManipulationDeltaEventArgs> class contains data about changes in the position of a manipulation. The <xref:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation%2A> property contains the changes that occurred since the last <xref:System.Windows.UIElement.ManipulationDelta> event occurred. The <xref:System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation%2A> property contains the total changes that occurred for the current manipulation. You use one of those properties to transform the manipulated object.  \n  \n You can end a manipulation by calling the <xref:System.Windows.Input.ManipulationDeltaEventArgs.Complete%2A> method or force the manipulation into inertia by calling the <xref:System.Windows.Input.ManipulationDeltaEventArgs.StartInertia%2A> method.","nodes":[{"pos":[0,566],"content":"The <xref:System.Windows.Input.ManipulationDeltaEventArgs> class contains data about changes in the position of a manipulation. The <xref:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation%2A> property contains the changes that occurred since the last <xref:System.Windows.UIElement.ManipulationDelta> event occurred. The <xref:System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation%2A> property contains the total changes that occurred for the current manipulation. You use one of those properties to transform the manipulated object.","nodes":[{"content":"The <xref:System.Windows.Input.ManipulationDeltaEventArgs> class contains data about changes in the position of a manipulation. The <xref:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation%2A> property contains the changes that occurred since the last <xref:System.Windows.UIElement.ManipulationDelta> event occurred. The <xref:System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation%2A> property contains the total changes that occurred for the current manipulation. You use one of those properties to transform the manipulated object.","pos":[0,566],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Input.ManipulationDeltaEventArgs&gt;</ph> class contains data about changes in the position of a manipulation.","pos":[0,127],"source":"The <xref:System.Windows.Input.ManipulationDeltaEventArgs> class contains data about changes in the position of a manipulation."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation%2A&gt;</ph> property contains the changes that occurred since the last <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.ManipulationDelta&gt;</ph> event occurred.","pos":[128,332],"source":" The <xref:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation%2A> property contains the changes that occurred since the last <xref:System.Windows.UIElement.ManipulationDelta> event occurred."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation%2A&gt;</ph> property contains the total changes that occurred for the current manipulation.","pos":[333,497],"source":" The <xref:System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation%2A> property contains the total changes that occurred for the current manipulation."},{"content":"You use one of those properties to transform the manipulated object.","pos":[498,566]}]}]},{"pos":[573,821],"content":"You can end a manipulation by calling the <xref:System.Windows.Input.ManipulationDeltaEventArgs.Complete%2A> method or force the manipulation into inertia by calling the <xref:System.Windows.Input.ManipulationDeltaEventArgs.StartInertia%2A> method.","nodes":[{"content":"You can end a manipulation by calling the <ph id=\"ph1\">&lt;xref:System.Windows.Input.ManipulationDeltaEventArgs.Complete%2A&gt;</ph> method or force the manipulation into inertia by calling the <ph id=\"ph2\">&lt;xref:System.Windows.Input.ManipulationDeltaEventArgs.StartInertia%2A&gt;</ph> method.","pos":[0,248],"source":"You can end a manipulation by calling the <xref:System.Windows.Input.ManipulationDeltaEventArgs.Complete%2A> method or force the manipulation into inertia by calling the <xref:System.Windows.Input.ManipulationDeltaEventArgs.StartInertia%2A> method."}]}],"pos":[1438,2264],"yaml":true,"extradata":"MT"},{"content":"Cancels the manipulation.","nodes":[{"pos":[0,25],"content":"Cancels the manipulation.","nodes":[{"content":"Cancels the manipulation.","pos":[0,25]}]}],"pos":[5267,5293],"yaml":true},{"content":"If the method succeeds, the default <xref:System.Windows.Input.TouchDevice> sends previous touch events as mouse down or mouse move events to the element and future manipulation events do not occur. Touch cannot be promoted to mouse events if the <xref:System.Windows.UIElement.ManipulationCompleted> event occurs during inertia.","nodes":[{"pos":[0,329],"content":"If the method succeeds, the default <xref:System.Windows.Input.TouchDevice> sends previous touch events as mouse down or mouse move events to the element and future manipulation events do not occur. Touch cannot be promoted to mouse events if the <xref:System.Windows.UIElement.ManipulationCompleted> event occurs during inertia.","nodes":[{"content":"If the method succeeds, the default <xref:System.Windows.Input.TouchDevice> sends previous touch events as mouse down or mouse move events to the element and future manipulation events do not occur. Touch cannot be promoted to mouse events if the <xref:System.Windows.UIElement.ManipulationCompleted> event occurs during inertia.","pos":[0,329],"nodes":[{"content":"If the method succeeds, the default <ph id=\"ph1\">&lt;xref:System.Windows.Input.TouchDevice&gt;</ph> sends previous touch events as mouse down or mouse move events to the element and future manipulation events do not occur.","pos":[0,198],"source":"If the method succeeds, the default <xref:System.Windows.Input.TouchDevice> sends previous touch events as mouse down or mouse move events to the element and future manipulation events do not occur."},{"content":"Touch cannot be promoted to mouse events if the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.ManipulationCompleted&gt;</ph> event occurs during inertia.","pos":[199,329],"source":" Touch cannot be promoted to mouse events if the <xref:System.Windows.UIElement.ManipulationCompleted> event occurs during inertia."}]}]}],"pos":[5304,5634],"yaml":true,"extradata":"MT"},{"content":"`true` if the manipulation was successfully canceled; otherwise, `false`.","nodes":[{"pos":[0,73],"content":"<ph id=\"ph1\">`true`</ph> if the manipulation was successfully canceled; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the manipulation was successfully canceled; otherwise, `false`."}],"pos":[5757,5833],"yaml":true},{"content":"Completes the manipulation without inertia.","nodes":[{"pos":[0,43],"content":"Completes the manipulation without inertia.","nodes":[{"content":"Completes the manipulation without inertia.","pos":[0,43]}]}],"pos":[6907,6951],"yaml":true},{"content":"You can call the <xref:System.Windows.Input.ManipulationDeltaEventArgs.Complete%2A> method to end the manipulation. For example, when an object reaches the edge of a window, you can call <xref:System.Windows.Input.ManipulationDeltaEventArgs.Complete%2A> to prevent the object from going off the screen.","nodes":[{"pos":[0,302],"content":"You can call the <xref:System.Windows.Input.ManipulationDeltaEventArgs.Complete%2A> method to end the manipulation. For example, when an object reaches the edge of a window, you can call <xref:System.Windows.Input.ManipulationDeltaEventArgs.Complete%2A> to prevent the object from going off the screen.","nodes":[{"content":"You can call the <xref:System.Windows.Input.ManipulationDeltaEventArgs.Complete%2A> method to end the manipulation. For example, when an object reaches the edge of a window, you can call <xref:System.Windows.Input.ManipulationDeltaEventArgs.Complete%2A> to prevent the object from going off the screen.","pos":[0,302],"nodes":[{"content":"You can call the <ph id=\"ph1\">&lt;xref:System.Windows.Input.ManipulationDeltaEventArgs.Complete%2A&gt;</ph> method to end the manipulation.","pos":[0,115],"source":"You can call the <xref:System.Windows.Input.ManipulationDeltaEventArgs.Complete%2A> method to end the manipulation."},{"content":"For example, when an object reaches the edge of a window, you can call <ph id=\"ph1\">&lt;xref:System.Windows.Input.ManipulationDeltaEventArgs.Complete%2A&gt;</ph> to prevent the object from going off the screen.","pos":[116,302],"source":" For example, when an object reaches the edge of a window, you can call <xref:System.Windows.Input.ManipulationDeltaEventArgs.Complete%2A> to prevent the object from going off the screen."}]}]}],"pos":[6962,7265],"yaml":true,"extradata":"MT"},{"content":"Gets the cumulated changes of the current manipulation.","nodes":[{"pos":[0,55],"content":"Gets the cumulated changes of the current manipulation.","nodes":[{"content":"Gets the cumulated changes of the current manipulation.","pos":[0,55]}]}],"pos":[9415,9471],"yaml":true},{"content":"The <xref:System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation%2A> property contains the total changes that occurred for the current manipulation. You can use <xref:System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation%2A> to transform the manipulated object.","nodes":[{"pos":[0,294],"content":"The <xref:System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation%2A> property contains the total changes that occurred for the current manipulation. You can use <xref:System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation%2A> to transform the manipulated object.","nodes":[{"content":"The <xref:System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation%2A> property contains the total changes that occurred for the current manipulation. You can use <xref:System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation%2A> to transform the manipulated object.","pos":[0,294],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation%2A&gt;</ph> property contains the total changes that occurred for the current manipulation.","pos":[0,164],"source":"The <xref:System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation%2A> property contains the total changes that occurred for the current manipulation."},{"content":"You can use <ph id=\"ph1\">&lt;xref:System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation%2A&gt;</ph> to transform the manipulated object.","pos":[165,294],"source":" You can use <xref:System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation%2A> to transform the manipulated object."}]}]}],"pos":[9482,9777],"yaml":true,"extradata":"MT"},{"content":"The cumulated changes of the current manipulation.","nodes":[{"pos":[0,50],"content":"The cumulated changes of the current manipulation.","nodes":[{"content":"The cumulated changes of the current manipulation.","pos":[0,50]}]}],"pos":[9960,10011],"yaml":true},{"content":"Gets the most recent changes of the current manipulation.","nodes":[{"pos":[0,57],"content":"Gets the most recent changes of the current manipulation.","nodes":[{"content":"Gets the most recent changes of the current manipulation.","pos":[0,57]}]}],"pos":[11129,11187],"yaml":true},{"content":"The <xref:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation%2A> property contains the changes that occurred since the last <xref:System.Windows.UIElement.ManipulationDelta> event occurred. You can use this property to transform the manipulated object.","nodes":[{"pos":[0,267],"content":"The <xref:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation%2A> property contains the changes that occurred since the last <xref:System.Windows.UIElement.ManipulationDelta> event occurred. You can use this property to transform the manipulated object.","nodes":[{"content":"The <xref:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation%2A> property contains the changes that occurred since the last <xref:System.Windows.UIElement.ManipulationDelta> event occurred. You can use this property to transform the manipulated object.","pos":[0,267],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation%2A&gt;</ph> property contains the changes that occurred since the last <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.ManipulationDelta&gt;</ph> event occurred.","pos":[0,204],"source":"The <xref:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation%2A> property contains the changes that occurred since the last <xref:System.Windows.UIElement.ManipulationDelta> event occurred."},{"content":"You can use this property to transform the manipulated object.","pos":[205,267]}]}]}],"pos":[11198,11466],"yaml":true,"extradata":"MT"},{"content":"The most recent changes of the current manipulation.","nodes":[{"pos":[0,52],"content":"The most recent changes of the current manipulation.","nodes":[{"content":"The most recent changes of the current manipulation.","pos":[0,52]}]}],"pos":[12459,12512],"yaml":true},{"content":"Gets a value that indicates whether the <xref href=\"System.Windows.UIElement.ManipulationDelta\"></xref> event occurs during inertia.","nodes":[{"pos":[0,132],"content":"Gets a value that indicates whether the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.ManipulationDelta\"&gt;&lt;/xref&gt;</ph> event occurs during inertia.","source":"Gets a value that indicates whether the <xref href=\"System.Windows.UIElement.ManipulationDelta\"></xref> event occurs during inertia."}],"pos":[15068,15201],"yaml":true},{"content":"You can use this method to determine whether the <xref:System.Windows.UIElement.ManipulationDelta> event occurs during inertia or while the user has contact with the element that receives the <xref:System.Windows.UIElement.ManipulationDelta> event.","nodes":[{"pos":[0,248],"content":"You can use this method to determine whether the <xref:System.Windows.UIElement.ManipulationDelta> event occurs during inertia or while the user has contact with the element that receives the <xref:System.Windows.UIElement.ManipulationDelta> event.","nodes":[{"content":"You can use this method to determine whether the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.ManipulationDelta&gt;</ph> event occurs during inertia or while the user has contact with the element that receives the <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.ManipulationDelta&gt;</ph> event.","pos":[0,248],"source":"You can use this method to determine whether the <xref:System.Windows.UIElement.ManipulationDelta> event occurs during inertia or while the user has contact with the element that receives the <xref:System.Windows.UIElement.ManipulationDelta> event."}]}],"pos":[15212,15461],"yaml":true,"extradata":"MT"},{"content":"`true` if the <xref href=\"System.Windows.UIElement.ManipulationDelta\"></xref> event occurs during inertia; `false` if the event occurs while the user has contact with the <xref href=\"System.Windows.UIElement\"></xref>.","nodes":[{"pos":[0,217],"content":"<ph id=\"ph1\">`true`</ph> if the <ph id=\"ph2\">&lt;xref href=\"System.Windows.UIElement.ManipulationDelta\"&gt;&lt;/xref&gt;</ph> event occurs during inertia; <ph id=\"ph3\">`false`</ph> if the event occurs while the user has contact with the <ph id=\"ph4\">&lt;xref href=\"System.Windows.UIElement\"&gt;&lt;/xref&gt;</ph>.","source":"`true` if the <xref href=\"System.Windows.UIElement.ManipulationDelta\"></xref> event occurs during inertia; `false` if the event occurs while the user has contact with the <xref href=\"System.Windows.UIElement\"></xref>."}],"pos":[16523,16743],"yaml":true},{"content":"Gets the container that defines the coordinates for the manipulation.","nodes":[{"pos":[0,69],"content":"Gets the container that defines the coordinates for the manipulation.","nodes":[{"content":"Gets the container that defines the coordinates for the manipulation.","pos":[0,69]}]}],"pos":[17895,17965],"yaml":true},{"content":"The container that defines the coordinates for the manipulation.","nodes":[{"pos":[0,64],"content":"The container that defines the coordinates for the manipulation.","nodes":[{"content":"The container that defines the coordinates for the manipulation.","pos":[0,64]}]}],"pos":[18127,18192],"yaml":true},{"content":"Gets the point from which the manipulation originated.","nodes":[{"pos":[0,54],"content":"Gets the point from which the manipulation originated.","nodes":[{"content":"Gets the point from which the manipulation originated.","pos":[0,54]}]}],"pos":[19337,19392],"yaml":true},{"content":"The point from which the manipulation originated.","nodes":[{"pos":[0,49],"content":"The point from which the manipulation originated.","nodes":[{"content":"The point from which the manipulation originated.","pos":[0,49]}]}],"pos":[19535,19585],"yaml":true},{"content":"Gets a collection of objects that represents the touch contacts for the manipulation.","nodes":[{"pos":[0,85],"content":"Gets a collection of objects that represents the touch contacts for the manipulation.","nodes":[{"content":"Gets a collection of objects that represents the touch contacts for the manipulation.","pos":[0,85]}]}],"pos":[20669,20755],"yaml":true},{"content":"A collection of objects that represents the touch contacts for the manipulation.","nodes":[{"pos":[0,80],"content":"A collection of objects that represents the touch contacts for the manipulation.","nodes":[{"content":"A collection of objects that represents the touch contacts for the manipulation.","pos":[0,80]}]}],"pos":[20998,21079],"yaml":true},{"content":"Specifies that the manipulation has gone beyond certain boundaries.","nodes":[{"pos":[0,67],"content":"Specifies that the manipulation has gone beyond certain boundaries.","nodes":[{"content":"Specifies that the manipulation has gone beyond certain boundaries.","pos":[0,67]}]}],"pos":[22414,22482],"yaml":true},{"content":"Use the <xref:System.Windows.Input.ManipulationDeltaEventArgs.ReportBoundaryFeedback%2A> method to indicate that an element has moved beyond a certain boundary.  For example, if a user moves an element outside of the bounds of a <xref:System.Windows.Window>, you can call this method to report that to the window.  When you call <xref:System.Windows.Input.ManipulationDeltaEventArgs.ReportBoundaryFeedback%2A>, the <xref:System.Windows.UIElement.ManipulationBoundaryFeedback> event occurs.  By default, the <xref:System.Windows.Window> subscribes to the <xref:System.Windows.UIElement.ManipulationBoundaryFeedback> event to provide visual feedback to the user that a boundary has been reached.  You can subscribe to <xref:System.Windows.UIElement.ManipulationBoundaryFeedback> to implement custom behavior.","nodes":[{"pos":[0,806],"content":"Use the <xref:System.Windows.Input.ManipulationDeltaEventArgs.ReportBoundaryFeedback%2A> method to indicate that an element has moved beyond a certain boundary.  For example, if a user moves an element outside of the bounds of a <xref:System.Windows.Window>, you can call this method to report that to the window.  When you call <xref:System.Windows.Input.ManipulationDeltaEventArgs.ReportBoundaryFeedback%2A>, the <xref:System.Windows.UIElement.ManipulationBoundaryFeedback> event occurs.  By default, the <xref:System.Windows.Window> subscribes to the <xref:System.Windows.UIElement.ManipulationBoundaryFeedback> event to provide visual feedback to the user that a boundary has been reached.  You can subscribe to <xref:System.Windows.UIElement.ManipulationBoundaryFeedback> to implement custom behavior.","nodes":[{"content":"Use the <xref:System.Windows.Input.ManipulationDeltaEventArgs.ReportBoundaryFeedback%2A> method to indicate that an element has moved beyond a certain boundary.  For example, if a user moves an element outside of the bounds of a <xref:System.Windows.Window>, you can call this method to report that to the window.  When you call <xref:System.Windows.Input.ManipulationDeltaEventArgs.ReportBoundaryFeedback%2A>, the <xref:System.Windows.UIElement.ManipulationBoundaryFeedback> event occurs.  By default, the <xref:System.Windows.Window> subscribes to the <xref:System.Windows.UIElement.ManipulationBoundaryFeedback> event to provide visual feedback to the user that a boundary has been reached.  You can subscribe to <xref:System.Windows.UIElement.ManipulationBoundaryFeedback> to implement custom behavior.","pos":[0,806],"nodes":[{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Windows.Input.ManipulationDeltaEventArgs.ReportBoundaryFeedback%2A&gt;</ph> method to indicate that an element has moved beyond a certain boundary.","pos":[0,160],"source":"Use the <xref:System.Windows.Input.ManipulationDeltaEventArgs.ReportBoundaryFeedback%2A> method to indicate that an element has moved beyond a certain boundary."},{"content":"For example, if a user moves an element outside of the bounds of a <ph id=\"ph1\">&lt;xref:System.Windows.Window&gt;</ph>, you can call this method to report that to the window.","pos":[162,313],"source":"  For example, if a user moves an element outside of the bounds of a <xref:System.Windows.Window>, you can call this method to report that to the window."},{"content":"When you call <ph id=\"ph1\">&lt;xref:System.Windows.Input.ManipulationDeltaEventArgs.ReportBoundaryFeedback%2A&gt;</ph>, the <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.ManipulationBoundaryFeedback&gt;</ph> event occurs.","pos":[315,489],"source":"  When you call <xref:System.Windows.Input.ManipulationDeltaEventArgs.ReportBoundaryFeedback%2A>, the <xref:System.Windows.UIElement.ManipulationBoundaryFeedback> event occurs."},{"content":"By default, the <ph id=\"ph1\">&lt;xref:System.Windows.Window&gt;</ph> subscribes to the <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.ManipulationBoundaryFeedback&gt;</ph> event to provide visual feedback to the user that a boundary has been reached.","pos":[491,693],"source":"  By default, the <xref:System.Windows.Window> subscribes to the <xref:System.Windows.UIElement.ManipulationBoundaryFeedback> event to provide visual feedback to the user that a boundary has been reached."},{"content":"You can subscribe to <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.ManipulationBoundaryFeedback&gt;</ph> to implement custom behavior.","pos":[695,806],"source":"  You can subscribe to <xref:System.Windows.UIElement.ManipulationBoundaryFeedback> to implement custom behavior."}]}]}],"pos":[22493,23300],"yaml":true,"extradata":"MT"},{"content":"The portion of the manipulation that represents moving beyond the boundary.","nodes":[{"pos":[0,75],"content":"The portion of the manipulation that represents moving beyond the boundary.","nodes":[{"content":"The portion of the manipulation that represents moving beyond the boundary.","pos":[0,75]}]}],"pos":[24442,24518],"yaml":true},{"content":"<code>unusedManipulation</code> is `null`.","nodes":[{"pos":[0,42],"content":"<ph id=\"ph1\">&lt;code&gt;unusedManipulation&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>unusedManipulation</code> is `null`."}],"pos":[24718,24761],"yaml":true},{"content":"Starts inertia on the manipulation by ignoring subsequent contact movements and raising the <xref href=\"System.Windows.UIElement.ManipulationInertiaStarting\"></xref> event.","nodes":[{"pos":[0,172],"content":"Starts inertia on the manipulation by ignoring subsequent contact movements and raising the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.ManipulationInertiaStarting\"&gt;&lt;/xref&gt;</ph> event.","source":"Starts inertia on the manipulation by ignoring subsequent contact movements and raising the <xref href=\"System.Windows.UIElement.ManipulationInertiaStarting\"></xref> event."}],"pos":[25774,25947],"yaml":true},{"content":"Gets the rates of the most recent changes to the manipulation.","nodes":[{"pos":[0,62],"content":"Gets the rates of the most recent changes to the manipulation.","nodes":[{"content":"Gets the rates of the most recent changes to the manipulation.","pos":[0,62]}]}],"pos":[27106,27169],"yaml":true},{"content":"The rates of the most recent changes to the manipulation.","nodes":[{"pos":[0,57],"content":"The rates of the most recent changes to the manipulation.","nodes":[{"content":"The rates of the most recent changes to the manipulation.","pos":[0,57]}]}],"pos":[27350,27408],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Windows.Input.ManipulationDeltaEventArgs\n  commentId: T:System.Windows.Input.ManipulationDeltaEventArgs\n  id: ManipulationDeltaEventArgs\n  children:\n  - System.Windows.Input.ManipulationDeltaEventArgs.Cancel\n  - System.Windows.Input.ManipulationDeltaEventArgs.Complete\n  - System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation\n  - System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation\n  - System.Windows.Input.ManipulationDeltaEventArgs.InvokeEventHandler(System.Delegate,System.Object)\n  - System.Windows.Input.ManipulationDeltaEventArgs.IsInertial\n  - System.Windows.Input.ManipulationDeltaEventArgs.ManipulationContainer\n  - System.Windows.Input.ManipulationDeltaEventArgs.ManipulationOrigin\n  - System.Windows.Input.ManipulationDeltaEventArgs.Manipulators\n  - System.Windows.Input.ManipulationDeltaEventArgs.ReportBoundaryFeedback(System.Windows.Input.ManipulationDelta)\n  - System.Windows.Input.ManipulationDeltaEventArgs.StartInertia\n  - System.Windows.Input.ManipulationDeltaEventArgs.Velocities\n  langs:\n  - csharp\n  name: ManipulationDeltaEventArgs\n  nameWithType: ManipulationDeltaEventArgs\n  fullName: System.Windows.Input.ManipulationDeltaEventArgs\n  type: Class\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Provides data for the <xref href=\"System.Windows.UIElement.ManipulationDelta\"></xref> event.\n  remarks: \"The <xref:System.Windows.Input.ManipulationDeltaEventArgs> class contains data about changes in the position of a manipulation. The <xref:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation%2A> property contains the changes that occurred since the last <xref:System.Windows.UIElement.ManipulationDelta> event occurred. The <xref:System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation%2A> property contains the total changes that occurred for the current manipulation. You use one of those properties to transform the manipulated object.  \\n  \\n You can end a manipulation by calling the <xref:System.Windows.Input.ManipulationDeltaEventArgs.Complete%2A> method or force the manipulation into inertia by calling the <xref:System.Windows.Input.ManipulationDeltaEventArgs.StartInertia%2A> method.\"\n  example:\n  - \"The following example shows an event handler for the <xref:System.Windows.UIElement.ManipulationDelta> event. The example uses the <xref:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation%2A> property to move, resize, and rotate a <xref:System.Windows.Shapes.Rectangle>. The example also checks whether the <xref:System.Windows.UIElement.ManipulationDelta> event occurred during inertia and whether the rectangle is touching the edge of a window. If those cases are true, the application stops the manipulation to prevent the rectangle from leaving the visible area of the application. This example is part of a larger example in [Walkthrough: Creating Your First Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).  \\n  \\n [!code-csharp[BasicManipulation#ManipulationDelta](~/samples/snippets/csharp/VS_Snippets_Wpf/basicmanipulation/csharp/mainwindow.xaml.cs#manipulationdelta)]\\n [!code-vb[BasicManipulation#ManipulationDelta](~/samples/snippets/visualbasic/VS_Snippets_Wpf/basicmanipulation/visualbasic/mainwindow.xaml.vb#manipulationdelta)]\"\n  syntax:\n    content: 'public sealed class ManipulationDeltaEventArgs : System.Windows.Input.InputEventArgs'\n  inheritance:\n  - System.Object\n  - System.EventArgs\n  - System.Windows.RoutedEventArgs\n  - System.Windows.Input.InputEventArgs\n  implements: []\n  inheritedMembers:\n  - System.EventArgs.Empty\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  - System.Windows.Input.InputEventArgs.Device\n  - System.Windows.Input.InputEventArgs.Timestamp\n  - System.Windows.RoutedEventArgs.Handled\n  - System.Windows.RoutedEventArgs.OnSetSource(System.Object)\n  - System.Windows.RoutedEventArgs.OriginalSource\n  - System.Windows.RoutedEventArgs.RoutedEvent\n  - System.Windows.RoutedEventArgs.Source\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/ManipulationDeltaEventArgs.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.Input.ManipulationDeltaEventArgs.Cancel\n  commentId: M:System.Windows.Input.ManipulationDeltaEventArgs.Cancel\n  id: Cancel\n  parent: System.Windows.Input.ManipulationDeltaEventArgs\n  langs:\n  - csharp\n  name: Cancel()\n  nameWithType: ManipulationDeltaEventArgs.Cancel()\n  fullName: ManipulationDeltaEventArgs.Cancel()\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Cancels the manipulation.\n  remarks: If the method succeeds, the default <xref:System.Windows.Input.TouchDevice> sends previous touch events as mouse down or mouse move events to the element and future manipulation events do not occur. Touch cannot be promoted to mouse events if the <xref:System.Windows.UIElement.ManipulationCompleted> event occurs during inertia.\n  syntax:\n    content: public bool Cancel ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: '`true` if the manipulation was successfully canceled; otherwise, `false`.'\n  overload: System.Windows.Input.ManipulationDeltaEventArgs.Cancel*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/ManipulationDeltaEventArgs.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Input.ManipulationDeltaEventArgs.Complete\n  commentId: M:System.Windows.Input.ManipulationDeltaEventArgs.Complete\n  id: Complete\n  parent: System.Windows.Input.ManipulationDeltaEventArgs\n  langs:\n  - csharp\n  name: Complete()\n  nameWithType: ManipulationDeltaEventArgs.Complete()\n  fullName: ManipulationDeltaEventArgs.Complete()\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Completes the manipulation without inertia.\n  remarks: You can call the <xref:System.Windows.Input.ManipulationDeltaEventArgs.Complete%2A> method to end the manipulation. For example, when an object reaches the edge of a window, you can call <xref:System.Windows.Input.ManipulationDeltaEventArgs.Complete%2A> to prevent the object from going off the screen.\n  example:\n  - \"The following example shows an event handler for the <xref:System.Windows.UIElement.ManipulationDelta> event. The example checks whether the <xref:System.Windows.UIElement.ManipulationDelta> event occurred during inertia and whether the rectangle is touching the edge of a window. If those cases are true, the application stops the manipulation to prevent the rectangle from leaving the visible area of the application. This example is part of a larger example in [Walkthrough: Creating Your First Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).  \\n  \\n [!code-csharp[BasicManipulation#ManipulationDelta](~/samples/snippets/csharp/VS_Snippets_Wpf/basicmanipulation/csharp/mainwindow.xaml.cs#manipulationdelta)]\\n [!code-vb[BasicManipulation#ManipulationDelta](~/samples/snippets/visualbasic/VS_Snippets_Wpf/basicmanipulation/visualbasic/mainwindow.xaml.vb#manipulationdelta)]\"\n  syntax:\n    content: public void Complete ();\n    parameters: []\n  overload: System.Windows.Input.ManipulationDeltaEventArgs.Complete*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/ManipulationDeltaEventArgs.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation\n  commentId: P:System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation\n  id: CumulativeManipulation\n  parent: System.Windows.Input.ManipulationDeltaEventArgs\n  langs:\n  - csharp\n  name: CumulativeManipulation\n  nameWithType: ManipulationDeltaEventArgs.CumulativeManipulation\n  fullName: ManipulationDeltaEventArgs.CumulativeManipulation\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Gets the cumulated changes of the current manipulation.\n  remarks: The <xref:System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation%2A> property contains the total changes that occurred for the current manipulation. You can use <xref:System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation%2A> to transform the manipulated object.\n  syntax:\n    content: public System.Windows.Input.ManipulationDelta CumulativeManipulation { get; }\n    return:\n      type: System.Windows.Input.ManipulationDelta\n      description: The cumulated changes of the current manipulation.\n  overload: System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/ManipulationDeltaEventArgs.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation\n  commentId: P:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation\n  id: DeltaManipulation\n  parent: System.Windows.Input.ManipulationDeltaEventArgs\n  langs:\n  - csharp\n  name: DeltaManipulation\n  nameWithType: ManipulationDeltaEventArgs.DeltaManipulation\n  fullName: ManipulationDeltaEventArgs.DeltaManipulation\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Gets the most recent changes of the current manipulation.\n  remarks: The <xref:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation%2A> property contains the changes that occurred since the last <xref:System.Windows.UIElement.ManipulationDelta> event occurred. You can use this property to transform the manipulated object.\n  example:\n  - \"The following example shows an event handler for the <xref:System.Windows.UIElement.ManipulationDelta> event. The example uses the <xref:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation%2A> property to move, resize, and rotate a <xref:System.Windows.Shapes.Rectangle>. This example is part of a larger example in [Walkthrough: Creating Your First Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).  \\n  \\n [!code-csharp[BasicManipulation#ManipulationDelta](~/samples/snippets/csharp/VS_Snippets_Wpf/basicmanipulation/csharp/mainwindow.xaml.cs#manipulationdelta)]\\n [!code-vb[BasicManipulation#ManipulationDelta](~/samples/snippets/visualbasic/VS_Snippets_Wpf/basicmanipulation/visualbasic/mainwindow.xaml.vb#manipulationdelta)]\"\n  syntax:\n    content: public System.Windows.Input.ManipulationDelta DeltaManipulation { get; }\n    return:\n      type: System.Windows.Input.ManipulationDelta\n      description: The most recent changes of the current manipulation.\n  overload: System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/ManipulationDeltaEventArgs.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Input.ManipulationDeltaEventArgs.InvokeEventHandler(System.Delegate,System.Object)\n  commentId: M:System.Windows.Input.ManipulationDeltaEventArgs.InvokeEventHandler(System.Delegate,System.Object)\n  id: InvokeEventHandler(System.Delegate,System.Object)\n  parent: System.Windows.Input.ManipulationDeltaEventArgs\n  langs:\n  - csharp\n  name: InvokeEventHandler(Delegate, Object)\n  nameWithType: ManipulationDeltaEventArgs.InvokeEventHandler(Delegate, Object)\n  fullName: ManipulationDeltaEventArgs.InvokeEventHandler(Delegate, Object)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  syntax:\n    content: protected override void InvokeEventHandler (Delegate genericHandler, object genericTarget);\n    parameters:\n    - id: genericHandler\n      type: System.Delegate\n      description: ''\n    - id: genericTarget\n      type: System.Object\n      description: ''\n  overload: System.Windows.Input.ManipulationDeltaEventArgs.InvokeEventHandler*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/ManipulationDeltaEventArgs.xml\n- uid: System.Windows.Input.ManipulationDeltaEventArgs.IsInertial\n  commentId: P:System.Windows.Input.ManipulationDeltaEventArgs.IsInertial\n  id: IsInertial\n  parent: System.Windows.Input.ManipulationDeltaEventArgs\n  langs:\n  - csharp\n  name: IsInertial\n  nameWithType: ManipulationDeltaEventArgs.IsInertial\n  fullName: ManipulationDeltaEventArgs.IsInertial\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Gets a value that indicates whether the <xref href=\"System.Windows.UIElement.ManipulationDelta\"></xref> event occurs during inertia.\n  remarks: You can use this method to determine whether the <xref:System.Windows.UIElement.ManipulationDelta> event occurs during inertia or while the user has contact with the element that receives the <xref:System.Windows.UIElement.ManipulationDelta> event.\n  example:\n  - \"The following example shows an event handler for the <xref:System.Windows.UIElement.ManipulationDelta> event. The example checks whether the <xref:System.Windows.UIElement.ManipulationDelta> event occurred during inertia and whether the rectangle is touching the edge of a window. If those cases are true, the application stops the manipulation to prevent the rectangle from leaving the visible area of the application. This example is part of a larger example in [Walkthrough: Creating Your First Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).  \\n  \\n [!code-csharp[BasicManipulation#ManipulationDelta](~/samples/snippets/csharp/VS_Snippets_Wpf/basicmanipulation/csharp/mainwindow.xaml.cs#manipulationdelta)]\\n [!code-vb[BasicManipulation#ManipulationDelta](~/samples/snippets/visualbasic/VS_Snippets_Wpf/basicmanipulation/visualbasic/mainwindow.xaml.vb#manipulationdelta)]\"\n  syntax:\n    content: public bool IsInertial { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the <xref href=\"System.Windows.UIElement.ManipulationDelta\"></xref> event occurs during inertia; `false` if the event occurs while the user has contact with the <xref href=\"System.Windows.UIElement\"></xref>.'\n  overload: System.Windows.Input.ManipulationDeltaEventArgs.IsInertial*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/ManipulationDeltaEventArgs.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Input.ManipulationDeltaEventArgs.ManipulationContainer\n  commentId: P:System.Windows.Input.ManipulationDeltaEventArgs.ManipulationContainer\n  id: ManipulationContainer\n  parent: System.Windows.Input.ManipulationDeltaEventArgs\n  langs:\n  - csharp\n  name: ManipulationContainer\n  nameWithType: ManipulationDeltaEventArgs.ManipulationContainer\n  fullName: ManipulationDeltaEventArgs.ManipulationContainer\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Gets the container that defines the coordinates for the manipulation.\n  syntax:\n    content: public System.Windows.IInputElement ManipulationContainer { get; }\n    return:\n      type: System.Windows.IInputElement\n      description: The container that defines the coordinates for the manipulation.\n  overload: System.Windows.Input.ManipulationDeltaEventArgs.ManipulationContainer*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/ManipulationDeltaEventArgs.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Input.ManipulationDeltaEventArgs.ManipulationOrigin\n  commentId: P:System.Windows.Input.ManipulationDeltaEventArgs.ManipulationOrigin\n  id: ManipulationOrigin\n  parent: System.Windows.Input.ManipulationDeltaEventArgs\n  langs:\n  - csharp\n  name: ManipulationOrigin\n  nameWithType: ManipulationDeltaEventArgs.ManipulationOrigin\n  fullName: ManipulationDeltaEventArgs.ManipulationOrigin\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Gets the point from which the manipulation originated.\n  syntax:\n    content: public System.Windows.Point ManipulationOrigin { get; }\n    return:\n      type: System.Windows.Point\n      description: The point from which the manipulation originated.\n  overload: System.Windows.Input.ManipulationDeltaEventArgs.ManipulationOrigin*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/ManipulationDeltaEventArgs.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.Input.ManipulationDeltaEventArgs.Manipulators\n  commentId: P:System.Windows.Input.ManipulationDeltaEventArgs.Manipulators\n  id: Manipulators\n  parent: System.Windows.Input.ManipulationDeltaEventArgs\n  langs:\n  - csharp\n  name: Manipulators\n  nameWithType: ManipulationDeltaEventArgs.Manipulators\n  fullName: ManipulationDeltaEventArgs.Manipulators\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Gets a collection of objects that represents the touch contacts for the manipulation.\n  syntax:\n    content: public System.Collections.Generic.IEnumerable<System.Windows.Input.IManipulator> Manipulators { get; }\n    return:\n      type: System.Collections.Generic.IEnumerable{System.Windows.Input.IManipulator}\n      description: A collection of objects that represents the touch contacts for the manipulation.\n  overload: System.Windows.Input.ManipulationDeltaEventArgs.Manipulators*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/ManipulationDeltaEventArgs.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Input.ManipulationDeltaEventArgs.ReportBoundaryFeedback(System.Windows.Input.ManipulationDelta)\n  commentId: M:System.Windows.Input.ManipulationDeltaEventArgs.ReportBoundaryFeedback(System.Windows.Input.ManipulationDelta)\n  id: ReportBoundaryFeedback(System.Windows.Input.ManipulationDelta)\n  parent: System.Windows.Input.ManipulationDeltaEventArgs\n  langs:\n  - csharp\n  name: ReportBoundaryFeedback(ManipulationDelta)\n  nameWithType: ManipulationDeltaEventArgs.ReportBoundaryFeedback(ManipulationDelta)\n  fullName: ManipulationDeltaEventArgs.ReportBoundaryFeedback(ManipulationDelta)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Specifies that the manipulation has gone beyond certain boundaries.\n  remarks: Use the <xref:System.Windows.Input.ManipulationDeltaEventArgs.ReportBoundaryFeedback%2A> method to indicate that an element has moved beyond a certain boundary.  For example, if a user moves an element outside of the bounds of a <xref:System.Windows.Window>, you can call this method to report that to the window.  When you call <xref:System.Windows.Input.ManipulationDeltaEventArgs.ReportBoundaryFeedback%2A>, the <xref:System.Windows.UIElement.ManipulationBoundaryFeedback> event occurs.  By default, the <xref:System.Windows.Window> subscribes to the <xref:System.Windows.UIElement.ManipulationBoundaryFeedback> event to provide visual feedback to the user that a boundary has been reached.  You can subscribe to <xref:System.Windows.UIElement.ManipulationBoundaryFeedback> to implement custom behavior.\n  example:\n  - \"The following example shows an event handler for the <xref:System.Windows.UIElement.ManipulationDelta> event that calls the <xref:System.Windows.Input.ManipulationDeltaEventArgs.ReportBoundaryFeedback%2A> method when the user moves the element over the edge of its container.  To test this example, follow the steps in [Walkthrough: Creating Your First Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md) and replace the code in step 5 with this code.  \\n  \\n [!code-csharp[BasicManipulation#ReportBoundaryFeedback](~/samples/snippets/csharp/VS_Snippets_Wpf/basicmanipulation/csharp/reportboundaryfeedbackexample.xaml.cs#reportboundaryfeedback)]\\n [!code-vb[BasicManipulation#ReportBoundaryFeedback](~/samples/snippets/visualbasic/VS_Snippets_Wpf/basicmanipulation/visualbasic/reportboundaryfeedbackexample.xaml.vb#reportboundaryfeedback)]\"\n  syntax:\n    content: public void ReportBoundaryFeedback (System.Windows.Input.ManipulationDelta unusedManipulation);\n    parameters:\n    - id: unusedManipulation\n      type: System.Windows.Input.ManipulationDelta\n      description: The portion of the manipulation that represents moving beyond the boundary.\n  overload: System.Windows.Input.ManipulationDeltaEventArgs.ReportBoundaryFeedback*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>unusedManipulation</code> is `null`.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/ManipulationDeltaEventArgs.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Input.ManipulationDeltaEventArgs.StartInertia\n  commentId: M:System.Windows.Input.ManipulationDeltaEventArgs.StartInertia\n  id: StartInertia\n  parent: System.Windows.Input.ManipulationDeltaEventArgs\n  langs:\n  - csharp\n  name: StartInertia()\n  nameWithType: ManipulationDeltaEventArgs.StartInertia()\n  fullName: ManipulationDeltaEventArgs.StartInertia()\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Starts inertia on the manipulation by ignoring subsequent contact movements and raising the <xref href=\"System.Windows.UIElement.ManipulationInertiaStarting\"></xref> event.\n  syntax:\n    content: public void StartInertia ();\n    parameters: []\n  overload: System.Windows.Input.ManipulationDeltaEventArgs.StartInertia*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/ManipulationDeltaEventArgs.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Input.ManipulationDeltaEventArgs.Velocities\n  commentId: P:System.Windows.Input.ManipulationDeltaEventArgs.Velocities\n  id: Velocities\n  parent: System.Windows.Input.ManipulationDeltaEventArgs\n  langs:\n  - csharp\n  name: Velocities\n  nameWithType: ManipulationDeltaEventArgs.Velocities\n  fullName: ManipulationDeltaEventArgs.Velocities\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Gets the rates of the most recent changes to the manipulation.\n  syntax:\n    content: public System.Windows.Input.ManipulationVelocities Velocities { get; }\n    return:\n      type: System.Windows.Input.ManipulationVelocities\n      description: The rates of the most recent changes to the manipulation.\n  overload: System.Windows.Input.ManipulationDeltaEventArgs.Velocities*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/ManipulationDeltaEventArgs.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\nreferences:\n- uid: System.Windows.Input.InputEventArgs\n  parent: System.Windows.Input\n  isExternal: false\n  name: InputEventArgs\n  nameWithType: InputEventArgs\n  fullName: System.Windows.Input.InputEventArgs\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.Windows.Input.ManipulationDeltaEventArgs.Cancel\n  parent: System.Windows.Input.ManipulationDeltaEventArgs\n  isExternal: false\n  name: Cancel()\n  nameWithType: ManipulationDeltaEventArgs.Cancel()\n  fullName: ManipulationDeltaEventArgs.Cancel()\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Windows.Input.ManipulationDeltaEventArgs.Complete\n  parent: System.Windows.Input.ManipulationDeltaEventArgs\n  isExternal: false\n  name: Complete()\n  nameWithType: ManipulationDeltaEventArgs.Complete()\n  fullName: ManipulationDeltaEventArgs.Complete()\n- uid: System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation\n  parent: System.Windows.Input.ManipulationDeltaEventArgs\n  isExternal: false\n  name: CumulativeManipulation\n  nameWithType: ManipulationDeltaEventArgs.CumulativeManipulation\n  fullName: ManipulationDeltaEventArgs.CumulativeManipulation\n- uid: System.Windows.Input.ManipulationDelta\n  parent: System.Windows.Input\n  isExternal: false\n  name: ManipulationDelta\n  nameWithType: ManipulationDelta\n  fullName: System.Windows.Input.ManipulationDelta\n- uid: System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation\n  parent: System.Windows.Input.ManipulationDeltaEventArgs\n  isExternal: false\n  name: DeltaManipulation\n  nameWithType: ManipulationDeltaEventArgs.DeltaManipulation\n  fullName: ManipulationDeltaEventArgs.DeltaManipulation\n- uid: System.Windows.Input.ManipulationDeltaEventArgs.InvokeEventHandler(System.Delegate,System.Object)\n  parent: System.Windows.Input.ManipulationDeltaEventArgs\n  isExternal: false\n  name: InvokeEventHandler(Delegate, Object)\n  nameWithType: ManipulationDeltaEventArgs.InvokeEventHandler(Delegate, Object)\n  fullName: ManipulationDeltaEventArgs.InvokeEventHandler(Delegate, Object)\n- uid: System.Delegate\n  parent: System\n  isExternal: false\n  name: Delegate\n  nameWithType: Delegate\n  fullName: System.Delegate\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Windows.Input.ManipulationDeltaEventArgs.IsInertial\n  parent: System.Windows.Input.ManipulationDeltaEventArgs\n  isExternal: false\n  name: IsInertial\n  nameWithType: ManipulationDeltaEventArgs.IsInertial\n  fullName: ManipulationDeltaEventArgs.IsInertial\n- uid: System.Windows.Input.ManipulationDeltaEventArgs.ManipulationContainer\n  parent: System.Windows.Input.ManipulationDeltaEventArgs\n  isExternal: false\n  name: ManipulationContainer\n  nameWithType: ManipulationDeltaEventArgs.ManipulationContainer\n  fullName: ManipulationDeltaEventArgs.ManipulationContainer\n- uid: System.Windows.IInputElement\n  parent: System.Windows\n  isExternal: false\n  name: IInputElement\n  nameWithType: IInputElement\n  fullName: System.Windows.IInputElement\n- uid: System.Windows.Input.ManipulationDeltaEventArgs.ManipulationOrigin\n  parent: System.Windows.Input.ManipulationDeltaEventArgs\n  isExternal: false\n  name: ManipulationOrigin\n  nameWithType: ManipulationDeltaEventArgs.ManipulationOrigin\n  fullName: ManipulationDeltaEventArgs.ManipulationOrigin\n- uid: System.Windows.Point\n  parent: System.Windows\n  isExternal: false\n  name: Point\n  nameWithType: Point\n  fullName: System.Windows.Point\n- uid: System.Windows.Input.ManipulationDeltaEventArgs.Manipulators\n  parent: System.Windows.Input.ManipulationDeltaEventArgs\n  isExternal: false\n  name: Manipulators\n  nameWithType: ManipulationDeltaEventArgs.Manipulators\n  fullName: ManipulationDeltaEventArgs.Manipulators\n- uid: System.Collections.Generic.IEnumerable`1\n  name: IEnumerable<T>\n  nameWithType: IEnumerable<T>\n  fullName: System.Collections.Generic.IEnumerable<T>\n- uid: System.Windows.Input.IManipulator\n  name: IManipulator\n  nameWithType: IManipulator\n  fullName: System.Windows.Input.IManipulator\n- uid: System.Collections.Generic.IEnumerable{System.Windows.Input.IManipulator}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<IManipulator>\n  nameWithType: IEnumerable<IManipulator>\n  fullName: System.Collections.Generic.IEnumerable<System.Windows.Input.IManipulator>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    nameWithType: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Windows.Input.IManipulator\n    name: IManipulator\n    nameWithType: IManipulator\n    fullName: System.Windows.Input.IManipulator\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Windows.Input.ManipulationDeltaEventArgs.ReportBoundaryFeedback(System.Windows.Input.ManipulationDelta)\n  parent: System.Windows.Input.ManipulationDeltaEventArgs\n  isExternal: false\n  name: ReportBoundaryFeedback(ManipulationDelta)\n  nameWithType: ManipulationDeltaEventArgs.ReportBoundaryFeedback(ManipulationDelta)\n  fullName: ManipulationDeltaEventArgs.ReportBoundaryFeedback(ManipulationDelta)\n- uid: System.Windows.Input.ManipulationDeltaEventArgs.StartInertia\n  parent: System.Windows.Input.ManipulationDeltaEventArgs\n  isExternal: false\n  name: StartInertia()\n  nameWithType: ManipulationDeltaEventArgs.StartInertia()\n  fullName: ManipulationDeltaEventArgs.StartInertia()\n- uid: System.Windows.Input.ManipulationDeltaEventArgs.Velocities\n  parent: System.Windows.Input.ManipulationDeltaEventArgs\n  isExternal: false\n  name: Velocities\n  nameWithType: ManipulationDeltaEventArgs.Velocities\n  fullName: ManipulationDeltaEventArgs.Velocities\n- uid: System.Windows.Input.ManipulationVelocities\n  parent: System.Windows.Input\n  isExternal: false\n  name: ManipulationVelocities\n  nameWithType: ManipulationVelocities\n  fullName: System.Windows.Input.ManipulationVelocities\n- uid: System.Windows.Input.ManipulationDeltaEventArgs.Cancel*\n  parent: System.Windows.Input.ManipulationDeltaEventArgs\n  isExternal: false\n  name: Cancel\n  nameWithType: ManipulationDeltaEventArgs.Cancel\n  fullName: ManipulationDeltaEventArgs.Cancel\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/ManipulationDeltaEventArgs.xml\n- uid: System.Windows.Input.ManipulationDeltaEventArgs.Complete*\n  parent: System.Windows.Input.ManipulationDeltaEventArgs\n  isExternal: false\n  name: Complete\n  nameWithType: ManipulationDeltaEventArgs.Complete\n  fullName: ManipulationDeltaEventArgs.Complete\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/ManipulationDeltaEventArgs.xml\n- uid: System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation*\n  parent: System.Windows.Input.ManipulationDeltaEventArgs\n  isExternal: false\n  name: CumulativeManipulation\n  nameWithType: ManipulationDeltaEventArgs.CumulativeManipulation\n  fullName: ManipulationDeltaEventArgs.CumulativeManipulation\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/ManipulationDeltaEventArgs.xml\n- uid: System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation*\n  parent: System.Windows.Input.ManipulationDeltaEventArgs\n  isExternal: false\n  name: DeltaManipulation\n  nameWithType: ManipulationDeltaEventArgs.DeltaManipulation\n  fullName: ManipulationDeltaEventArgs.DeltaManipulation\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/ManipulationDeltaEventArgs.xml\n- uid: System.Windows.Input.ManipulationDeltaEventArgs.InvokeEventHandler*\n  parent: System.Windows.Input.ManipulationDeltaEventArgs\n  isExternal: false\n  name: InvokeEventHandler\n  nameWithType: ManipulationDeltaEventArgs.InvokeEventHandler\n  fullName: ManipulationDeltaEventArgs.InvokeEventHandler\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/ManipulationDeltaEventArgs.xml\n- uid: System.Windows.Input.ManipulationDeltaEventArgs.IsInertial*\n  parent: System.Windows.Input.ManipulationDeltaEventArgs\n  isExternal: false\n  name: IsInertial\n  nameWithType: ManipulationDeltaEventArgs.IsInertial\n  fullName: ManipulationDeltaEventArgs.IsInertial\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/ManipulationDeltaEventArgs.xml\n- uid: System.Windows.Input.ManipulationDeltaEventArgs.ManipulationContainer*\n  parent: System.Windows.Input.ManipulationDeltaEventArgs\n  isExternal: false\n  name: ManipulationContainer\n  nameWithType: ManipulationDeltaEventArgs.ManipulationContainer\n  fullName: ManipulationDeltaEventArgs.ManipulationContainer\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/ManipulationDeltaEventArgs.xml\n- uid: System.Windows.Input.ManipulationDeltaEventArgs.ManipulationOrigin*\n  parent: System.Windows.Input.ManipulationDeltaEventArgs\n  isExternal: false\n  name: ManipulationOrigin\n  nameWithType: ManipulationDeltaEventArgs.ManipulationOrigin\n  fullName: ManipulationDeltaEventArgs.ManipulationOrigin\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/ManipulationDeltaEventArgs.xml\n- uid: System.Windows.Input.ManipulationDeltaEventArgs.Manipulators*\n  parent: System.Windows.Input.ManipulationDeltaEventArgs\n  isExternal: false\n  name: Manipulators\n  nameWithType: ManipulationDeltaEventArgs.Manipulators\n  fullName: ManipulationDeltaEventArgs.Manipulators\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/ManipulationDeltaEventArgs.xml\n- uid: System.Windows.Input.ManipulationDeltaEventArgs.ReportBoundaryFeedback*\n  parent: System.Windows.Input.ManipulationDeltaEventArgs\n  isExternal: false\n  name: ReportBoundaryFeedback\n  nameWithType: ManipulationDeltaEventArgs.ReportBoundaryFeedback\n  fullName: ManipulationDeltaEventArgs.ReportBoundaryFeedback\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/ManipulationDeltaEventArgs.xml\n- uid: System.Windows.Input.ManipulationDeltaEventArgs.StartInertia*\n  parent: System.Windows.Input.ManipulationDeltaEventArgs\n  isExternal: false\n  name: StartInertia\n  nameWithType: ManipulationDeltaEventArgs.StartInertia\n  fullName: ManipulationDeltaEventArgs.StartInertia\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/ManipulationDeltaEventArgs.xml\n- uid: System.Windows.Input.ManipulationDeltaEventArgs.Velocities*\n  parent: System.Windows.Input.ManipulationDeltaEventArgs\n  isExternal: false\n  name: Velocities\n  nameWithType: ManipulationDeltaEventArgs.Velocities\n  fullName: ManipulationDeltaEventArgs.Velocities\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/ManipulationDeltaEventArgs.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.EventArgs.Empty\n  parent: System.EventArgs\n  isExternal: false\n  name: Empty\n  nameWithType: EventArgs.Empty\n  fullName: EventArgs.Empty\n- uid: System.Windows.RoutedEventArgs.Handled\n  parent: System.Windows.RoutedEventArgs\n  isExternal: false\n  name: Handled\n  nameWithType: RoutedEventArgs.Handled\n  fullName: RoutedEventArgs.Handled\n- uid: System.Windows.RoutedEventArgs.OnSetSource(System.Object)\n  parent: System.Windows.RoutedEventArgs\n  isExternal: false\n  name: OnSetSource(Object)\n  nameWithType: RoutedEventArgs.OnSetSource(Object)\n  fullName: RoutedEventArgs.OnSetSource(Object)\n- uid: System.Windows.RoutedEventArgs.OriginalSource\n  parent: System.Windows.RoutedEventArgs\n  isExternal: false\n  name: OriginalSource\n  nameWithType: RoutedEventArgs.OriginalSource\n  fullName: RoutedEventArgs.OriginalSource\n- uid: System.Windows.RoutedEventArgs.RoutedEvent\n  parent: System.Windows.RoutedEventArgs\n  isExternal: false\n  name: RoutedEvent\n  nameWithType: RoutedEventArgs.RoutedEvent\n  fullName: RoutedEventArgs.RoutedEvent\n- uid: System.Windows.RoutedEventArgs.Source\n  parent: System.Windows.RoutedEventArgs\n  isExternal: false\n  name: Source\n  nameWithType: RoutedEventArgs.Source\n  fullName: RoutedEventArgs.Source\n- uid: System.Windows.Input.InputEventArgs.Device\n  parent: System.Windows.Input.InputEventArgs\n  isExternal: false\n  name: Device\n  nameWithType: InputEventArgs.Device\n  fullName: InputEventArgs.Device\n- uid: System.Windows.Input.InputEventArgs.Timestamp\n  parent: System.Windows.Input.InputEventArgs\n  isExternal: false\n  name: Timestamp\n  nameWithType: InputEventArgs.Timestamp\n  fullName: InputEventArgs.Timestamp\n"}