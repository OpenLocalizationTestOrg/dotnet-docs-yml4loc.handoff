{"nodes":[{"content":"Describes a clone of a transaction providing guarantee that the transaction cannot be committed until the application comes to rest regarding work on the transaction. This class cannot be inherited.","nodes":[{"pos":[0,198],"content":"Describes a clone of a transaction providing guarantee that the transaction cannot be committed until the application comes to rest regarding work on the transaction. This class cannot be inherited.","nodes":[{"content":"Describes a clone of a transaction providing guarantee that the transaction cannot be committed until the application comes to rest regarding work on the transaction. This class cannot be inherited.","pos":[0,198],"nodes":[{"content":"Describes a clone of a transaction providing guarantee that the transaction cannot be committed until the application comes to rest regarding work on the transaction.","pos":[0,166]},{"content":"This class cannot be inherited.","pos":[167,198]}]}]}],"pos":[710,909],"yaml":true},{"content":"The <xref:System.Transactions.DependentTransaction> is a clone of a <xref:System.Transactions.Transaction> object created using the <xref:System.Transactions.Transaction.DependentClone%2A> method.  Its sole purpose is to allow the application to come to rest and guarantee that the transaction cannot commit while work is still being performed on the transaction (for example, on a worker thread).  \n  \n When the work done within the cloned transaction is finally complete and ready to be committed, it can inform the creator of the transaction using the <xref:System.Transactions.DependentTransaction.Complete%2A> method. Thus you can preserve the consistency and correctness of data.  \n  \n The <xref:System.Transactions.DependentCloneOption> enumeration is used to determine the behavior on commit.  This behavior control allows an application to come to rest, as well as provides concurrency support. For more information on how this enumeration is used, see [Managing Concurrency with DependentTransaction](http://msdn.microsoft.com/en-us/bdad8468-2a90-4b81-8375-278067120cab).","nodes":[{"pos":[0,397],"content":"The <xref:System.Transactions.DependentTransaction> is a clone of a <xref:System.Transactions.Transaction> object created using the <xref:System.Transactions.Transaction.DependentClone%2A> method.  Its sole purpose is to allow the application to come to rest and guarantee that the transaction cannot commit while work is still being performed on the transaction (for example, on a worker thread).","nodes":[{"content":"The <xref:System.Transactions.DependentTransaction> is a clone of a <xref:System.Transactions.Transaction> object created using the <xref:System.Transactions.Transaction.DependentClone%2A> method.  Its sole purpose is to allow the application to come to rest and guarantee that the transaction cannot commit while work is still being performed on the transaction (for example, on a worker thread).","pos":[0,397],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Transactions.DependentTransaction&gt;</ph> is a clone of a <ph id=\"ph2\">&lt;xref:System.Transactions.Transaction&gt;</ph> object created using the <ph id=\"ph3\">&lt;xref:System.Transactions.Transaction.DependentClone%2A&gt;</ph> method.","pos":[0,196],"source":"The <xref:System.Transactions.DependentTransaction> is a clone of a <xref:System.Transactions.Transaction> object created using the <xref:System.Transactions.Transaction.DependentClone%2A> method."},{"content":"Its sole purpose is to allow the application to come to rest and guarantee that the transaction cannot commit while work is still being performed on the transaction (for example, on a worker thread).","pos":[198,397]}]}]},{"pos":[404,685],"content":"When the work done within the cloned transaction is finally complete and ready to be committed, it can inform the creator of the transaction using the <xref:System.Transactions.DependentTransaction.Complete%2A> method. Thus you can preserve the consistency and correctness of data.","nodes":[{"content":"When the work done within the cloned transaction is finally complete and ready to be committed, it can inform the creator of the transaction using the <xref:System.Transactions.DependentTransaction.Complete%2A> method. Thus you can preserve the consistency and correctness of data.","pos":[0,281],"nodes":[{"content":"When the work done within the cloned transaction is finally complete and ready to be committed, it can inform the creator of the transaction using the <ph id=\"ph1\">&lt;xref:System.Transactions.DependentTransaction.Complete%2A&gt;</ph> method.","pos":[0,218],"source":"When the work done within the cloned transaction is finally complete and ready to be committed, it can inform the creator of the transaction using the <xref:System.Transactions.DependentTransaction.Complete%2A> method."},{"content":"Thus you can preserve the consistency and correctness of data.","pos":[219,281]}]}]},{"pos":[692,1081],"content":"The <xref:System.Transactions.DependentCloneOption> enumeration is used to determine the behavior on commit.  This behavior control allows an application to come to rest, as well as provides concurrency support. For more information on how this enumeration is used, see [Managing Concurrency with DependentTransaction](http://msdn.microsoft.com/en-us/bdad8468-2a90-4b81-8375-278067120cab).","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Transactions.DependentCloneOption&gt;</ph> enumeration is used to determine the behavior on commit.","pos":[0,108],"source":"The <xref:System.Transactions.DependentCloneOption> enumeration is used to determine the behavior on commit."},{"content":"This behavior control allows an application to come to rest, as well as provides concurrency support.","pos":[110,211]},{"content":"For more information on how this enumeration is used, see <bpt id=\"p1\">[</bpt>Managing Concurrency with DependentTransaction<ept id=\"p1\">](http://msdn.microsoft.com/en-us/bdad8468-2a90-4b81-8375-278067120cab)</ept>.","pos":[212,389],"source":" For more information on how this enumeration is used, see [Managing Concurrency with DependentTransaction](http://msdn.microsoft.com/en-us/bdad8468-2a90-4b81-8375-278067120cab)."}]}],"pos":[920,2008],"yaml":true,"extradata":"MT"},{"content":"Attempts to complete the dependent transaction.","nodes":[{"pos":[0,47],"content":"Attempts to complete the dependent transaction.","nodes":[{"content":"Attempts to complete the dependent transaction.","pos":[0,47]}]}],"pos":[6234,6282],"yaml":true},{"content":"Call this method when the dependent clone wants to inform the creator of the transaction that it has finished its work, and the transaction can be committed if the parent is also ready.  \n  \n After this call is invoked, you should not attempt any additional work on the transaction, or an exception is thrown.  \n  \n If the application domain goes down after this method is called, and before the transaction is completed, the transaction might abort.  \n  \n **Note** This method should be called only once during the dependent transaction's lifetime.","nodes":[{"pos":[0,185],"content":"Call this method when the dependent clone wants to inform the creator of the transaction that it has finished its work, and the transaction can be committed if the parent is also ready.","nodes":[{"content":"Call this method when the dependent clone wants to inform the creator of the transaction that it has finished its work, and the transaction can be committed if the parent is also ready.","pos":[0,185]}]},{"pos":[192,309],"content":"After this call is invoked, you should not attempt any additional work on the transaction, or an exception is thrown.","nodes":[{"content":"After this call is invoked, you should not attempt any additional work on the transaction, or an exception is thrown.","pos":[0,117]}]},{"pos":[316,450],"content":"If the application domain goes down after this method is called, and before the transaction is completed, the transaction might abort.","nodes":[{"content":"If the application domain goes down after this method is called, and before the transaction is completed, the transaction might abort.","pos":[0,134]}]},{"pos":[457,549],"content":"<bpt id=\"p1\">**</bpt>Note<ept id=\"p1\">**</ept> This method should be called only once during the dependent transaction's lifetime.","source":"**Note** This method should be called only once during the dependent transaction's lifetime."}],"pos":[6293,6851],"yaml":true,"extradata":"MT"},{"content":"Any attempt for additional work on the transaction after this method is called. These include invoking methods such as <xref href=\"System.Transactions.Transaction.EnlistVolatile*\"></xref>, <xref href=\"System.Transactions.Transaction.EnlistDurable*\"></xref>, <xref href=\"System.Transactions.Transaction.Clone\"></xref>, <xref href=\"System.Transactions.Transaction.DependentClone(System.Transactions.DependentCloneOption)\"></xref> , or any serialization operations on the transaction.","nodes":[{"pos":[0,481],"content":"Any attempt for additional work on the transaction after this method is called. These include invoking methods such as <xref href=\"System.Transactions.Transaction.EnlistVolatile*\"></xref>, <xref href=\"System.Transactions.Transaction.EnlistDurable*\"></xref>, <xref href=\"System.Transactions.Transaction.Clone\"></xref>, <xref href=\"System.Transactions.Transaction.DependentClone(System.Transactions.DependentCloneOption)\"></xref> , or any serialization operations on the transaction.","nodes":[{"content":"Any attempt for additional work on the transaction after this method is called.","pos":[0,79]},{"content":"These include invoking methods such as <ph id=\"ph1\">&lt;xref href=\"System.Transactions.Transaction.EnlistVolatile*\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph2\">&lt;xref href=\"System.Transactions.Transaction.EnlistDurable*\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph3\">&lt;xref href=\"System.Transactions.Transaction.Clone\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph4\">&lt;xref href=\"System.Transactions.Transaction.DependentClone(System.Transactions.DependentCloneOption)\"&gt;&lt;/xref&gt;</ph> , or any serialization operations on the transaction.","pos":[80,481],"source":" These include invoking methods such as <xref href=\"System.Transactions.Transaction.EnlistVolatile*\"></xref>, <xref href=\"System.Transactions.Transaction.EnlistDurable*\"></xref>, <xref href=\"System.Transactions.Transaction.Clone\"></xref>, <xref href=\"System.Transactions.Transaction.DependentClone(System.Transactions.DependentCloneOption)\"></xref> , or any serialization operations on the transaction."}]}],"pos":[7121,7603],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Transactions.DependentTransaction\n  commentId: T:System.Transactions.DependentTransaction\n  id: DependentTransaction\n  children:\n  - System.Transactions.DependentTransaction.Complete\n  - System.Transactions.DependentTransaction.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  langs:\n  - csharp\n  name: DependentTransaction\n  nameWithType: DependentTransaction\n  fullName: System.Transactions.DependentTransaction\n  type: Class\n  assemblies:\n  - System.Transactions\n  - netstandard\n  - System.Transactions.Local\n  namespace: System.Transactions\n  summary: Describes a clone of a transaction providing guarantee that the transaction cannot be committed until the application comes to rest regarding work on the transaction. This class cannot be inherited.\n  remarks: \"The <xref:System.Transactions.DependentTransaction> is a clone of a <xref:System.Transactions.Transaction> object created using the <xref:System.Transactions.Transaction.DependentClone%2A> method.  Its sole purpose is to allow the application to come to rest and guarantee that the transaction cannot commit while work is still being performed on the transaction (for example, on a worker thread).  \\n  \\n When the work done within the cloned transaction is finally complete and ready to be committed, it can inform the creator of the transaction using the <xref:System.Transactions.DependentTransaction.Complete%2A> method. Thus you can preserve the consistency and correctness of data.  \\n  \\n The <xref:System.Transactions.DependentCloneOption> enumeration is used to determine the behavior on commit.  This behavior control allows an application to come to rest, as well as provides concurrency support. For more information on how this enumeration is used, see [Managing Concurrency with DependentTransaction](http://msdn.microsoft.com/en-us/bdad8468-2a90-4b81-8375-278067120cab).\"\n  example:\n  - \"The following example shows you how to create a dependent transaction.  \\n  \\n [!code-csharp[Tx_DependentTx#1](~/samples/snippets/csharp/VS_Snippets_CFX/tx_dependenttx/cs/dependenttx.cs#1)]\\n [!code-vb[Tx_DependentTx#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/tx_dependenttx/vb/dependenttx.vb#1)]\"\n  syntax:\n    content: 'public sealed class DependentTransaction : System.Transactions.Transaction, System.Runtime.Serialization.ISerializable'\n  inheritance:\n  - System.Object\n  - System.Transactions.Transaction\n  implements:\n  - System.Runtime.Serialization.ISerializable\n  inheritedMembers:\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  - System.Transactions.Transaction.BeginCommitInternal(System.AsyncCallback)\n  - System.Transactions.Transaction.Clone\n  - System.Transactions.Transaction.Current\n  - System.Transactions.Transaction.DependentClone(System.Transactions.DependentCloneOption)\n  - System.Transactions.Transaction.Dispose\n  - System.Transactions.Transaction.EndCommitInternal(System.IAsyncResult)\n  - System.Transactions.Transaction.EnlistDurable(System.Guid,System.Transactions.IEnlistmentNotification,System.Transactions.EnlistmentOptions)\n  - System.Transactions.Transaction.EnlistDurable(System.Guid,System.Transactions.ISinglePhaseNotification,System.Transactions.EnlistmentOptions)\n  - System.Transactions.Transaction.EnlistPromotableSinglePhase(System.Transactions.IPromotableSinglePhaseNotification)\n  - System.Transactions.Transaction.EnlistPromotableSinglePhase(System.Transactions.IPromotableSinglePhaseNotification,System.Guid)\n  - System.Transactions.Transaction.EnlistVolatile(System.Transactions.IEnlistmentNotification,System.Transactions.EnlistmentOptions)\n  - System.Transactions.Transaction.EnlistVolatile(System.Transactions.ISinglePhaseNotification,System.Transactions.EnlistmentOptions)\n  - System.Transactions.Transaction.Equals(System.Object)\n  - System.Transactions.Transaction.GetHashCode\n  - System.Transactions.Transaction.GetPromotedToken\n  - System.Transactions.Transaction.IsolationLevel\n  - System.Transactions.Transaction.op_Equality(System.Transactions.Transaction,System.Transactions.Transaction)\n  - System.Transactions.Transaction.op_Inequality(System.Transactions.Transaction,System.Transactions.Transaction)\n  - System.Transactions.Transaction.PromoteAndEnlistDurable(System.Guid,System.Transactions.IPromotableSinglePhaseNotification,System.Transactions.ISinglePhaseNotification,System.Transactions.EnlistmentOptions)\n  - System.Transactions.Transaction.PromoterType\n  - System.Transactions.Transaction.Rollback\n  - System.Transactions.Transaction.Rollback(System.Exception)\n  - System.Transactions.Transaction.SetDistributedTransactionIdentifier(System.Transactions.IPromotableSinglePhaseNotification,System.Guid)\n  - System.Transactions.Transaction.TransactionCompleted\n  - System.Transactions.Transaction.TransactionInformation\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Transactions/DependentTransaction.xml\n  ms.technology:\n  - dotnet-standard\n  manager: ghogen\n- uid: System.Transactions.DependentTransaction.Complete\n  commentId: M:System.Transactions.DependentTransaction.Complete\n  id: Complete\n  parent: System.Transactions.DependentTransaction\n  langs:\n  - csharp\n  name: Complete()\n  nameWithType: DependentTransaction.Complete()\n  fullName: DependentTransaction.Complete()\n  type: Method\n  assemblies:\n  - System.Transactions\n  - netstandard\n  - System.Transactions.Local\n  namespace: System.Transactions\n  summary: Attempts to complete the dependent transaction.\n  remarks: \"Call this method when the dependent clone wants to inform the creator of the transaction that it has finished its work, and the transaction can be committed if the parent is also ready.  \\n  \\n After this call is invoked, you should not attempt any additional work on the transaction, or an exception is thrown.  \\n  \\n If the application domain goes down after this method is called, and before the transaction is completed, the transaction might abort.  \\n  \\n **Note** This method should be called only once during the dependent transaction's lifetime.\"\n  syntax:\n    content: public void Complete ();\n    parameters: []\n  overload: System.Transactions.DependentTransaction.Complete*\n  exceptions:\n  - type: System.Transactions.TransactionException\n    commentId: T:System.Transactions.TransactionException\n    description: Any attempt for additional work on the transaction after this method is called. These include invoking methods such as <xref href=\"System.Transactions.Transaction.EnlistVolatile*\"></xref>, <xref href=\"System.Transactions.Transaction.EnlistDurable*\"></xref>, <xref href=\"System.Transactions.Transaction.Clone\"></xref>, <xref href=\"System.Transactions.Transaction.DependentClone(System.Transactions.DependentCloneOption)\"></xref> , or any serialization operations on the transaction.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Transactions/DependentTransaction.xml\n  ms.technology:\n  - dotnet-standard\n  manager: ghogen\n- uid: System.Transactions.DependentTransaction.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  commentId: M:System.Transactions.DependentTransaction.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  id: System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  isEii: true\n  parent: System.Transactions.DependentTransaction\n  langs:\n  - csharp\n  name: ISerializable.GetObjectData(SerializationInfo, StreamingContext)\n  nameWithType: DependentTransaction.ISerializable.GetObjectData(SerializationInfo, StreamingContext)\n  fullName: DependentTransaction.ISerializable.GetObjectData(SerializationInfo, StreamingContext)\n  type: Method\n  assemblies:\n  - System.Transactions\n  namespace: System.Transactions\n  syntax:\n    content: void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);\n    parameters:\n    - id: info\n      type: System.Runtime.Serialization.SerializationInfo\n      description: ''\n    - id: context\n      type: System.Runtime.Serialization.StreamingContext\n      description: ''\n  overload: System.Transactions.DependentTransaction.System#Runtime#Serialization#ISerializable#GetObjectData*\n  exceptions: []\n  version:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Transactions/DependentTransaction.xml\nreferences:\n- uid: System.Transactions.Transaction\n  parent: System.Transactions\n  isExternal: false\n  name: Transaction\n  nameWithType: Transaction\n  fullName: System.Transactions.Transaction\n- uid: System.Transactions.TransactionException\n  parent: System.Transactions\n  isExternal: false\n  name: TransactionException\n  nameWithType: TransactionException\n  fullName: System.Transactions.TransactionException\n- uid: System.Transactions.DependentTransaction.Complete\n  parent: System.Transactions.DependentTransaction\n  isExternal: false\n  name: Complete()\n  nameWithType: DependentTransaction.Complete()\n  fullName: DependentTransaction.Complete()\n- uid: System.Transactions.DependentTransaction.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  parent: System.Transactions.DependentTransaction\n  isExternal: false\n  name: ISerializable.GetObjectData(SerializationInfo, StreamingContext)\n  nameWithType: DependentTransaction.ISerializable.GetObjectData(SerializationInfo, StreamingContext)\n  fullName: DependentTransaction.ISerializable.GetObjectData(SerializationInfo, StreamingContext)\n- uid: System.Runtime.Serialization.SerializationInfo\n  parent: System.Runtime.Serialization\n  isExternal: false\n  name: SerializationInfo\n  nameWithType: SerializationInfo\n  fullName: System.Runtime.Serialization.SerializationInfo\n- uid: System.Runtime.Serialization.StreamingContext\n  parent: System.Runtime.Serialization\n  isExternal: false\n  name: StreamingContext\n  nameWithType: StreamingContext\n  fullName: System.Runtime.Serialization.StreamingContext\n- uid: System.Transactions.DependentTransaction.Complete*\n  parent: System.Transactions.DependentTransaction\n  isExternal: false\n  name: Complete\n  nameWithType: DependentTransaction.Complete\n  fullName: DependentTransaction.Complete\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Transactions/DependentTransaction.xml\n- uid: System.Transactions.DependentTransaction.System#Runtime#Serialization#ISerializable#GetObjectData*\n  parent: System.Transactions.DependentTransaction\n  isExternal: false\n  name: System.Runtime.Serialization.ISerializable.GetObjectData\n  nameWithType: DependentTransaction.System.Runtime.Serialization.ISerializable.GetObjectData\n  fullName: DependentTransaction.System.Runtime.Serialization.ISerializable.GetObjectData\n  monikers:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Transactions/DependentTransaction.xml\n- uid: System.Transactions.Transaction.Equals(System.Object)\n  parent: System.Transactions.Transaction\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Transaction.Equals(Object)\n  fullName: Transaction.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Transactions.Transaction.GetHashCode\n  parent: System.Transactions.Transaction\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Transaction.GetHashCode()\n  fullName: Transaction.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.Transactions.Transaction.BeginCommitInternal(System.AsyncCallback)\n  parent: System.Transactions.Transaction\n  isExternal: false\n  name: BeginCommitInternal(AsyncCallback)\n  nameWithType: Transaction.BeginCommitInternal(AsyncCallback)\n  fullName: Transaction.BeginCommitInternal(AsyncCallback)\n- uid: System.Transactions.Transaction.Clone\n  parent: System.Transactions.Transaction\n  isExternal: false\n  name: Clone()\n  nameWithType: Transaction.Clone()\n  fullName: Transaction.Clone()\n- uid: System.Transactions.Transaction.Current\n  parent: System.Transactions.Transaction\n  isExternal: false\n  name: Current\n  nameWithType: Transaction.Current\n  fullName: Transaction.Current\n- uid: System.Transactions.Transaction.DependentClone(System.Transactions.DependentCloneOption)\n  parent: System.Transactions.Transaction\n  isExternal: false\n  name: DependentClone(DependentCloneOption)\n  nameWithType: Transaction.DependentClone(DependentCloneOption)\n  fullName: Transaction.DependentClone(DependentCloneOption)\n- uid: System.Transactions.Transaction.Dispose\n  parent: System.Transactions.Transaction\n  isExternal: false\n  name: Dispose()\n  nameWithType: Transaction.Dispose()\n  fullName: Transaction.Dispose()\n- uid: System.Transactions.Transaction.EndCommitInternal(System.IAsyncResult)\n  parent: System.Transactions.Transaction\n  isExternal: false\n  name: EndCommitInternal(IAsyncResult)\n  nameWithType: Transaction.EndCommitInternal(IAsyncResult)\n  fullName: Transaction.EndCommitInternal(IAsyncResult)\n- uid: System.Transactions.Transaction.EnlistDurable(System.Guid,System.Transactions.IEnlistmentNotification,System.Transactions.EnlistmentOptions)\n  parent: System.Transactions.Transaction\n  isExternal: false\n  name: EnlistDurable(Guid, IEnlistmentNotification, EnlistmentOptions)\n  nameWithType: Transaction.EnlistDurable(Guid, IEnlistmentNotification, EnlistmentOptions)\n  fullName: Transaction.EnlistDurable(Guid, IEnlistmentNotification, EnlistmentOptions)\n- uid: System.Transactions.Transaction.EnlistDurable(System.Guid,System.Transactions.ISinglePhaseNotification,System.Transactions.EnlistmentOptions)\n  parent: System.Transactions.Transaction\n  isExternal: false\n  name: EnlistDurable(Guid, ISinglePhaseNotification, EnlistmentOptions)\n  nameWithType: Transaction.EnlistDurable(Guid, ISinglePhaseNotification, EnlistmentOptions)\n  fullName: Transaction.EnlistDurable(Guid, ISinglePhaseNotification, EnlistmentOptions)\n- uid: System.Transactions.Transaction.EnlistPromotableSinglePhase(System.Transactions.IPromotableSinglePhaseNotification)\n  parent: System.Transactions.Transaction\n  isExternal: false\n  name: EnlistPromotableSinglePhase(IPromotableSinglePhaseNotification)\n  nameWithType: Transaction.EnlistPromotableSinglePhase(IPromotableSinglePhaseNotification)\n  fullName: Transaction.EnlistPromotableSinglePhase(IPromotableSinglePhaseNotification)\n- uid: System.Transactions.Transaction.EnlistPromotableSinglePhase(System.Transactions.IPromotableSinglePhaseNotification,System.Guid)\n  parent: System.Transactions.Transaction\n  isExternal: false\n  name: EnlistPromotableSinglePhase(IPromotableSinglePhaseNotification, Guid)\n  nameWithType: Transaction.EnlistPromotableSinglePhase(IPromotableSinglePhaseNotification, Guid)\n  fullName: Transaction.EnlistPromotableSinglePhase(IPromotableSinglePhaseNotification, Guid)\n- uid: System.Transactions.Transaction.EnlistVolatile(System.Transactions.IEnlistmentNotification,System.Transactions.EnlistmentOptions)\n  parent: System.Transactions.Transaction\n  isExternal: false\n  name: EnlistVolatile(IEnlistmentNotification, EnlistmentOptions)\n  nameWithType: Transaction.EnlistVolatile(IEnlistmentNotification, EnlistmentOptions)\n  fullName: Transaction.EnlistVolatile(IEnlistmentNotification, EnlistmentOptions)\n- uid: System.Transactions.Transaction.EnlistVolatile(System.Transactions.ISinglePhaseNotification,System.Transactions.EnlistmentOptions)\n  parent: System.Transactions.Transaction\n  isExternal: false\n  name: EnlistVolatile(ISinglePhaseNotification, EnlistmentOptions)\n  nameWithType: Transaction.EnlistVolatile(ISinglePhaseNotification, EnlistmentOptions)\n  fullName: Transaction.EnlistVolatile(ISinglePhaseNotification, EnlistmentOptions)\n- uid: System.Transactions.Transaction.GetPromotedToken\n  parent: System.Transactions.Transaction\n  isExternal: false\n  name: GetPromotedToken()\n  nameWithType: Transaction.GetPromotedToken()\n  fullName: Transaction.GetPromotedToken()\n- uid: System.Transactions.Transaction.IsolationLevel\n  parent: System.Transactions.Transaction\n  isExternal: false\n  name: IsolationLevel\n  nameWithType: Transaction.IsolationLevel\n  fullName: Transaction.IsolationLevel\n- uid: System.Transactions.Transaction.op_Equality(System.Transactions.Transaction,System.Transactions.Transaction)\n  parent: System.Transactions.Transaction\n  isExternal: false\n  name: op_Equality(Transaction, Transaction)\n  nameWithType: Transaction.op_Equality(Transaction, Transaction)\n  fullName: Transaction.op_Equality(Transaction, Transaction)\n- uid: System.Transactions.Transaction.op_Inequality(System.Transactions.Transaction,System.Transactions.Transaction)\n  parent: System.Transactions.Transaction\n  isExternal: false\n  name: op_Inequality(Transaction, Transaction)\n  nameWithType: Transaction.op_Inequality(Transaction, Transaction)\n  fullName: Transaction.op_Inequality(Transaction, Transaction)\n- uid: System.Transactions.Transaction.PromoteAndEnlistDurable(System.Guid,System.Transactions.IPromotableSinglePhaseNotification,System.Transactions.ISinglePhaseNotification,System.Transactions.EnlistmentOptions)\n  parent: System.Transactions.Transaction\n  isExternal: false\n  name: PromoteAndEnlistDurable(Guid, IPromotableSinglePhaseNotification, ISinglePhaseNotification, EnlistmentOptions)\n  nameWithType: Transaction.PromoteAndEnlistDurable(Guid, IPromotableSinglePhaseNotification, ISinglePhaseNotification, EnlistmentOptions)\n  fullName: Transaction.PromoteAndEnlistDurable(Guid, IPromotableSinglePhaseNotification, ISinglePhaseNotification, EnlistmentOptions)\n- uid: System.Transactions.Transaction.PromoterType\n  parent: System.Transactions.Transaction\n  isExternal: false\n  name: PromoterType\n  nameWithType: Transaction.PromoterType\n  fullName: Transaction.PromoterType\n- uid: System.Transactions.Transaction.Rollback\n  parent: System.Transactions.Transaction\n  isExternal: false\n  name: Rollback()\n  nameWithType: Transaction.Rollback()\n  fullName: Transaction.Rollback()\n- uid: System.Transactions.Transaction.Rollback(System.Exception)\n  parent: System.Transactions.Transaction\n  isExternal: false\n  name: Rollback(Exception)\n  nameWithType: Transaction.Rollback(Exception)\n  fullName: Transaction.Rollback(Exception)\n- uid: System.Transactions.Transaction.SetDistributedTransactionIdentifier(System.Transactions.IPromotableSinglePhaseNotification,System.Guid)\n  parent: System.Transactions.Transaction\n  isExternal: false\n  name: SetDistributedTransactionIdentifier(IPromotableSinglePhaseNotification, Guid)\n  nameWithType: Transaction.SetDistributedTransactionIdentifier(IPromotableSinglePhaseNotification, Guid)\n  fullName: Transaction.SetDistributedTransactionIdentifier(IPromotableSinglePhaseNotification, Guid)\n- uid: System.Transactions.Transaction.TransactionCompleted\n  parent: System.Transactions.Transaction\n  isExternal: false\n  name: TransactionCompleted\n  nameWithType: Transaction.TransactionCompleted\n  fullName: Transaction.TransactionCompleted\n- uid: System.Transactions.Transaction.TransactionInformation\n  parent: System.Transactions.Transaction\n  isExternal: false\n  name: TransactionInformation\n  nameWithType: Transaction.TransactionInformation\n  fullName: Transaction.TransactionInformation\n- uid: System.Runtime.Serialization.ISerializable\n  parent: System.Runtime.Serialization\n  isExternal: false\n  name: ISerializable\n  nameWithType: ISerializable\n  fullName: System.Runtime.Serialization.ISerializable\n"}