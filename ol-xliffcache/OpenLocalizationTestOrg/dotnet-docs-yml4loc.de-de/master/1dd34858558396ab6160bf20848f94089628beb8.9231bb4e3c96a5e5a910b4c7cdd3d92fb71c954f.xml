{"nodes":[{"content":"Provides a simple structure that stores Boolean values and small integers in 32 bits of memory.","nodes":[{"pos":[0,95],"content":"Provides a simple structure that stores Boolean values and small integers in 32 bits of memory.","nodes":[{"content":"Provides a simple structure that stores Boolean values and small integers in 32 bits of memory.","pos":[0,95]}]}],"pos":[1444,1540],"yaml":true},{"content":"<xref:System.Collections.Specialized.BitVector32> is more efficient than <xref:System.Collections.BitArray> for Boolean values and small integers that are used internally. A <xref:System.Collections.BitArray> can grow indefinitely as needed, but it has the memory and performance overhead that a class instance requires. In contrast, a <xref:System.Collections.Specialized.BitVector32> uses only 32 bits.  \n  \n A <xref:System.Collections.Specialized.BitVector32> structure can be set up to contain either sections for small integers or bit flags for Booleans, but not both. A <xref:System.Collections.Specialized.BitVector32.Section> is a window into the <xref:System.Collections.Specialized.BitVector32> and is composed of the smallest number of consecutive bits that can contain the maximum value specified in <xref:System.Collections.Specialized.BitVector32.CreateSection%2A>. For example, a section with a maximum value of 1 is composed of only one bit, whereas a section with a maximum value of 5 is composed of three bits. You can create a <xref:System.Collections.Specialized.BitVector32.Section> with a maximum value of 1 to serve as a Boolean, thereby allowing you to store integers and Booleans in the same <xref:System.Collections.Specialized.BitVector32>.  \n  \n Some members can be used for a <xref:System.Collections.Specialized.BitVector32> that is set up as sections, while other members can be used for one that is set up as bit flags. For example, the <xref:System.Collections.Specialized.BitVector32.Item%2A?displayProperty=fullName> property is the indexer for a <xref:System.Collections.Specialized.BitVector32> that is set up as sections, and the <xref:System.Collections.Specialized.BitVector32.Item%2A?displayProperty=fullName> property is the indexer for a <xref:System.Collections.Specialized.BitVector32> that is set up as bit flags. <xref:System.Collections.Specialized.BitVector32.CreateMask%2A> creates a series of masks that can be used to access individual bits in a <xref:System.Collections.Specialized.BitVector32> that is set up as bit flags.  \n  \n Using a mask on a <xref:System.Collections.Specialized.BitVector32> that is set up as sections might cause unexpected results.","nodes":[{"pos":[0,404],"content":"<xref:System.Collections.Specialized.BitVector32> is more efficient than <xref:System.Collections.BitArray> for Boolean values and small integers that are used internally. A <xref:System.Collections.BitArray> can grow indefinitely as needed, but it has the memory and performance overhead that a class instance requires. In contrast, a <xref:System.Collections.Specialized.BitVector32> uses only 32 bits.","nodes":[{"content":"<xref:System.Collections.Specialized.BitVector32> is more efficient than <xref:System.Collections.BitArray> for Boolean values and small integers that are used internally. A <xref:System.Collections.BitArray> can grow indefinitely as needed, but it has the memory and performance overhead that a class instance requires. In contrast, a <xref:System.Collections.Specialized.BitVector32> uses only 32 bits.","pos":[0,404],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph> is more efficient than <ph id=\"ph2\">&lt;xref:System.Collections.BitArray&gt;</ph> for Boolean values and small integers that are used internally.","pos":[0,171],"source":"<xref:System.Collections.Specialized.BitVector32> is more efficient than <xref:System.Collections.BitArray> for Boolean values and small integers that are used internally."},{"content":"A <ph id=\"ph1\">&lt;xref:System.Collections.BitArray&gt;</ph> can grow indefinitely as needed, but it has the memory and performance overhead that a class instance requires.","pos":[172,320],"source":" A <xref:System.Collections.BitArray> can grow indefinitely as needed, but it has the memory and performance overhead that a class instance requires."},{"content":"In contrast, a <ph id=\"ph1\">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph> uses only 32 bits.","pos":[321,404],"source":" In contrast, a <xref:System.Collections.Specialized.BitVector32> uses only 32 bits."}]}]},{"pos":[411,1267],"content":"A <xref:System.Collections.Specialized.BitVector32> structure can be set up to contain either sections for small integers or bit flags for Booleans, but not both. A <xref:System.Collections.Specialized.BitVector32.Section> is a window into the <xref:System.Collections.Specialized.BitVector32> and is composed of the smallest number of consecutive bits that can contain the maximum value specified in <xref:System.Collections.Specialized.BitVector32.CreateSection%2A>. For example, a section with a maximum value of 1 is composed of only one bit, whereas a section with a maximum value of 5 is composed of three bits. You can create a <xref:System.Collections.Specialized.BitVector32.Section> with a maximum value of 1 to serve as a Boolean, thereby allowing you to store integers and Booleans in the same <xref:System.Collections.Specialized.BitVector32>.","nodes":[{"content":"A <xref:System.Collections.Specialized.BitVector32> structure can be set up to contain either sections for small integers or bit flags for Booleans, but not both. A <xref:System.Collections.Specialized.BitVector32.Section> is a window into the <xref:System.Collections.Specialized.BitVector32> and is composed of the smallest number of consecutive bits that can contain the maximum value specified in <xref:System.Collections.Specialized.BitVector32.CreateSection%2A>. For example, a section with a maximum value of 1 is composed of only one bit, whereas a section with a maximum value of 5 is composed of three bits. You can create a <xref:System.Collections.Specialized.BitVector32.Section> with a maximum value of 1 to serve as a Boolean, thereby allowing you to store integers and Booleans in the same <xref:System.Collections.Specialized.BitVector32>.","pos":[0,856],"nodes":[{"content":"A <ph id=\"ph1\">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph> structure can be set up to contain either sections for small integers or bit flags for Booleans, but not both.","pos":[0,162],"source":"A <xref:System.Collections.Specialized.BitVector32> structure can be set up to contain either sections for small integers or bit flags for Booleans, but not both."},{"content":"A <ph id=\"ph1\">&lt;xref:System.Collections.Specialized.BitVector32.Section&gt;</ph> is a window into the <ph id=\"ph2\">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph> and is composed of the smallest number of consecutive bits that can contain the maximum value specified in <ph id=\"ph3\">&lt;xref:System.Collections.Specialized.BitVector32.CreateSection%2A&gt;</ph>.","pos":[163,468],"source":" A <xref:System.Collections.Specialized.BitVector32.Section> is a window into the <xref:System.Collections.Specialized.BitVector32> and is composed of the smallest number of consecutive bits that can contain the maximum value specified in <xref:System.Collections.Specialized.BitVector32.CreateSection%2A>."},{"content":"For example, a section with a maximum value of 1 is composed of only one bit, whereas a section with a maximum value of 5 is composed of three bits.","pos":[469,617]},{"content":"You can create a <ph id=\"ph1\">&lt;xref:System.Collections.Specialized.BitVector32.Section&gt;</ph> with a maximum value of 1 to serve as a Boolean, thereby allowing you to store integers and Booleans in the same <ph id=\"ph2\">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph>.","pos":[618,856],"source":" You can create a <xref:System.Collections.Specialized.BitVector32.Section> with a maximum value of 1 to serve as a Boolean, thereby allowing you to store integers and Booleans in the same <xref:System.Collections.Specialized.BitVector32>."}]}]},{"pos":[1274,2076],"content":"Some members can be used for a <xref:System.Collections.Specialized.BitVector32> that is set up as sections, while other members can be used for one that is set up as bit flags. For example, the <xref:System.Collections.Specialized.BitVector32.Item%2A?displayProperty=fullName> property is the indexer for a <xref:System.Collections.Specialized.BitVector32> that is set up as sections, and the <xref:System.Collections.Specialized.BitVector32.Item%2A?displayProperty=fullName> property is the indexer for a <xref:System.Collections.Specialized.BitVector32> that is set up as bit flags. <xref:System.Collections.Specialized.BitVector32.CreateMask%2A> creates a series of masks that can be used to access individual bits in a <xref:System.Collections.Specialized.BitVector32> that is set up as bit flags.","nodes":[{"content":"Some members can be used for a <xref:System.Collections.Specialized.BitVector32> that is set up as sections, while other members can be used for one that is set up as bit flags. For example, the <xref:System.Collections.Specialized.BitVector32.Item%2A?displayProperty=fullName> property is the indexer for a <xref:System.Collections.Specialized.BitVector32> that is set up as sections, and the <xref:System.Collections.Specialized.BitVector32.Item%2A?displayProperty=fullName> property is the indexer for a <xref:System.Collections.Specialized.BitVector32> that is set up as bit flags. <xref:System.Collections.Specialized.BitVector32.CreateMask%2A> creates a series of masks that can be used to access individual bits in a <xref:System.Collections.Specialized.BitVector32> that is set up as bit flags.","pos":[0,802],"nodes":[{"content":"Some members can be used for a <ph id=\"ph1\">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph> that is set up as sections, while other members can be used for one that is set up as bit flags.","pos":[0,177],"source":"Some members can be used for a <xref:System.Collections.Specialized.BitVector32> that is set up as sections, while other members can be used for one that is set up as bit flags."},{"content":"For example, the <ph id=\"ph1\">&lt;xref:System.Collections.Specialized.BitVector32.Item%2A?displayProperty=fullName&gt;</ph> property is the indexer for a <ph id=\"ph2\">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph> that is set up as sections, and the <ph id=\"ph3\">&lt;xref:System.Collections.Specialized.BitVector32.Item%2A?displayProperty=fullName&gt;</ph> property is the indexer for a <ph id=\"ph4\">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph> that is set up as bit flags.","pos":[178,585],"source":" For example, the <xref:System.Collections.Specialized.BitVector32.Item%2A?displayProperty=fullName> property is the indexer for a <xref:System.Collections.Specialized.BitVector32> that is set up as sections, and the <xref:System.Collections.Specialized.BitVector32.Item%2A?displayProperty=fullName> property is the indexer for a <xref:System.Collections.Specialized.BitVector32> that is set up as bit flags."},{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.Specialized.BitVector32.CreateMask%2A&gt;</ph> creates a series of masks that can be used to access individual bits in a <ph id=\"ph2\">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph> that is set up as bit flags.","pos":[586,802],"source":" <xref:System.Collections.Specialized.BitVector32.CreateMask%2A> creates a series of masks that can be used to access individual bits in a <xref:System.Collections.Specialized.BitVector32> that is set up as bit flags."}]}]},{"pos":[2083,2209],"content":"Using a mask on a <xref:System.Collections.Specialized.BitVector32> that is set up as sections might cause unexpected results.","nodes":[{"content":"Using a mask on a <ph id=\"ph1\">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph> that is set up as sections might cause unexpected results.","pos":[0,126],"source":"Using a mask on a <xref:System.Collections.Specialized.BitVector32> that is set up as sections might cause unexpected results."}]}],"pos":[1551,3769],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Collections.Specialized.BitVector32\"></xref> structure containing the data represented in an existing <xref href=\"System.Collections.Specialized.BitVector32\"></xref> structure.","nodes":[{"pos":[0,229],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Specialized.BitVector32\"&gt;&lt;/xref&gt;</ph> structure containing the data represented in an existing <ph id=\"ph2\">&lt;xref href=\"System.Collections.Specialized.BitVector32\"&gt;&lt;/xref&gt;</ph> structure.","source":"Initializes a new instance of the <xref href=\"System.Collections.Specialized.BitVector32\"></xref> structure containing the data represented in an existing <xref href=\"System.Collections.Specialized.BitVector32\"></xref> structure."}],"pos":[6790,7020],"yaml":true},{"content":"This constructor is an O(1) operation.","nodes":[{"pos":[0,38],"content":"This constructor is an O(1) operation.","nodes":[{"content":"This constructor is an O(1) operation.","pos":[0,38]}]}],"pos":[7031,7070],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Collections.Specialized.BitVector32\"></xref> structure that contains the data to copy.","nodes":[{"pos":[0,107],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Collections.Specialized.BitVector32\"&gt;&lt;/xref&gt;</ph> structure that contains the data to copy.","source":"A <xref href=\"System.Collections.Specialized.BitVector32\"></xref> structure that contains the data to copy."}],"pos":[7270,7378],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Collections.Specialized.BitVector32\"></xref> structure containing the data represented in an integer.","nodes":[{"pos":[0,154],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Specialized.BitVector32\"&gt;&lt;/xref&gt;</ph> structure containing the data represented in an integer.","source":"Initializes a new instance of the <xref href=\"System.Collections.Specialized.BitVector32\"></xref> structure containing the data represented in an integer."}],"pos":[8774,8929],"yaml":true},{"content":"This constructor is an O(1) operation.","nodes":[{"pos":[0,38],"content":"This constructor is an O(1) operation.","nodes":[{"content":"This constructor is an O(1) operation.","pos":[0,38]}]}],"pos":[8940,8979],"yaml":true,"extradata":"MT"},{"content":"An integer representing the data of the new <xref href=\"System.Collections.Specialized.BitVector32\"></xref>.","nodes":[{"pos":[0,108],"content":"An integer representing the data of the new <ph id=\"ph1\">&lt;xref href=\"System.Collections.Specialized.BitVector32\"&gt;&lt;/xref&gt;</ph>.","source":"An integer representing the data of the new <xref href=\"System.Collections.Specialized.BitVector32\"></xref>."}],"pos":[9108,9217],"yaml":true},{"content":"Creates the first mask in a series of masks that can be used to retrieve individual bits in a <xref href=\"System.Collections.Specialized.BitVector32\"></xref> that is set up as bit flags.","nodes":[{"pos":[0,186],"content":"Creates the first mask in a series of masks that can be used to retrieve individual bits in a <ph id=\"ph1\">&lt;xref href=\"System.Collections.Specialized.BitVector32\"&gt;&lt;/xref&gt;</ph> that is set up as bit flags.","source":"Creates the first mask in a series of masks that can be used to retrieve individual bits in a <xref href=\"System.Collections.Specialized.BitVector32\"></xref> that is set up as bit flags."}],"pos":[10561,10748],"yaml":true},{"content":"Use `CreateMask()` to create the first mask in a series and `CreateMask(int)` for all subsequent masks.  \n  \n Multiple masks can be created to refer to the same bit flag.  \n  \n The resulting mask isolates only one bit flag in the <xref:System.Collections.Specialized.BitVector32>. You can combine masks using the bitwise OR operation to create a mask that isolates multiple bit flags in the <xref:System.Collections.Specialized.BitVector32>.  \n  \n Using a mask on a <xref:System.Collections.Specialized.BitVector32> that is set up as sections might cause unexpected results.  \n  \n This method is an O(1) operation.","nodes":[{"pos":[0,103],"content":"Use <ph id=\"ph1\">`CreateMask()`</ph> to create the first mask in a series and <ph id=\"ph2\">`CreateMask(int)`</ph> for all subsequent masks.","source":"Use `CreateMask()` to create the first mask in a series and `CreateMask(int)` for all subsequent masks."},{"pos":[110,170],"content":"Multiple masks can be created to refer to the same bit flag.","nodes":[{"content":"Multiple masks can be created to refer to the same bit flag.","pos":[0,60]}]},{"pos":[177,441],"content":"The resulting mask isolates only one bit flag in the <xref:System.Collections.Specialized.BitVector32>. You can combine masks using the bitwise OR operation to create a mask that isolates multiple bit flags in the <xref:System.Collections.Specialized.BitVector32>.","nodes":[{"content":"The resulting mask isolates only one bit flag in the <xref:System.Collections.Specialized.BitVector32>. You can combine masks using the bitwise OR operation to create a mask that isolates multiple bit flags in the <xref:System.Collections.Specialized.BitVector32>.","pos":[0,264],"nodes":[{"content":"The resulting mask isolates only one bit flag in the <ph id=\"ph1\">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph>.","pos":[0,103],"source":"The resulting mask isolates only one bit flag in the <xref:System.Collections.Specialized.BitVector32>."},{"content":"You can combine masks using the bitwise OR operation to create a mask that isolates multiple bit flags in the <ph id=\"ph1\">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph>.","pos":[104,264],"source":" You can combine masks using the bitwise OR operation to create a mask that isolates multiple bit flags in the <xref:System.Collections.Specialized.BitVector32>."}]}]},{"pos":[448,574],"content":"Using a mask on a <xref:System.Collections.Specialized.BitVector32> that is set up as sections might cause unexpected results.","nodes":[{"content":"Using a mask on a <ph id=\"ph1\">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph> that is set up as sections might cause unexpected results.","pos":[0,126],"source":"Using a mask on a <xref:System.Collections.Specialized.BitVector32> that is set up as sections might cause unexpected results."}]},{"pos":[581,614],"content":"This method is an O(1) operation.","nodes":[{"content":"This method is an O(1) operation.","pos":[0,33]}]}],"pos":[10759,11384],"yaml":true,"extradata":"MT"},{"content":"A mask that isolates the first bit flag in the <xref href=\"System.Collections.Specialized.BitVector32\"></xref>.","nodes":[{"pos":[0,111],"content":"A mask that isolates the first bit flag in the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Specialized.BitVector32\"&gt;&lt;/xref&gt;</ph>.","source":"A mask that isolates the first bit flag in the <xref href=\"System.Collections.Specialized.BitVector32\"></xref>."}],"pos":[12233,12345],"yaml":true},{"content":"Creates an additional mask following the specified mask in a series of masks that can be used to retrieve individual bits in a <xref href=\"System.Collections.Specialized.BitVector32\"></xref> that is set up as bit flags.","nodes":[{"pos":[0,219],"content":"Creates an additional mask following the specified mask in a series of masks that can be used to retrieve individual bits in a <ph id=\"ph1\">&lt;xref href=\"System.Collections.Specialized.BitVector32\"&gt;&lt;/xref&gt;</ph> that is set up as bit flags.","source":"Creates an additional mask following the specified mask in a series of masks that can be used to retrieve individual bits in a <xref href=\"System.Collections.Specialized.BitVector32\"></xref> that is set up as bit flags."}],"pos":[13751,13971],"yaml":true},{"content":"Use `CreateMask()` to create the first mask in a series and `CreateMask(int)` for all subsequent masks.  \n  \n Multiple masks can be created to refer to the same bit flag.  \n  \n The resulting mask isolates only one bit flag in the <xref:System.Collections.Specialized.BitVector32>. You can combine masks using the bitwise OR operation to create a mask that isolates multiple bit flags in the <xref:System.Collections.Specialized.BitVector32>.  \n  \n Using a mask on a <xref:System.Collections.Specialized.BitVector32> that is set up as sections might cause unexpected results.  \n  \n This method is an O(1) operation.","nodes":[{"pos":[0,103],"content":"Use <ph id=\"ph1\">`CreateMask()`</ph> to create the first mask in a series and <ph id=\"ph2\">`CreateMask(int)`</ph> for all subsequent masks.","source":"Use `CreateMask()` to create the first mask in a series and `CreateMask(int)` for all subsequent masks."},{"pos":[110,170],"content":"Multiple masks can be created to refer to the same bit flag.","nodes":[{"content":"Multiple masks can be created to refer to the same bit flag.","pos":[0,60]}]},{"pos":[177,441],"content":"The resulting mask isolates only one bit flag in the <xref:System.Collections.Specialized.BitVector32>. You can combine masks using the bitwise OR operation to create a mask that isolates multiple bit flags in the <xref:System.Collections.Specialized.BitVector32>.","nodes":[{"content":"The resulting mask isolates only one bit flag in the <xref:System.Collections.Specialized.BitVector32>. You can combine masks using the bitwise OR operation to create a mask that isolates multiple bit flags in the <xref:System.Collections.Specialized.BitVector32>.","pos":[0,264],"nodes":[{"content":"The resulting mask isolates only one bit flag in the <ph id=\"ph1\">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph>.","pos":[0,103],"source":"The resulting mask isolates only one bit flag in the <xref:System.Collections.Specialized.BitVector32>."},{"content":"You can combine masks using the bitwise OR operation to create a mask that isolates multiple bit flags in the <ph id=\"ph1\">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph>.","pos":[104,264],"source":" You can combine masks using the bitwise OR operation to create a mask that isolates multiple bit flags in the <xref:System.Collections.Specialized.BitVector32>."}]}]},{"pos":[448,574],"content":"Using a mask on a <xref:System.Collections.Specialized.BitVector32> that is set up as sections might cause unexpected results.","nodes":[{"content":"Using a mask on a <ph id=\"ph1\">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph> that is set up as sections might cause unexpected results.","pos":[0,126],"source":"Using a mask on a <xref:System.Collections.Specialized.BitVector32> that is set up as sections might cause unexpected results."}]},{"pos":[581,614],"content":"This method is an O(1) operation.","nodes":[{"content":"This method is an O(1) operation.","pos":[0,33]}]}],"pos":[13982,14607],"yaml":true,"extradata":"MT"},{"content":"The mask that indicates the previous bit flag.","nodes":[{"pos":[0,46],"content":"The mask that indicates the previous bit flag.","nodes":[{"content":"The mask that indicates the previous bit flag.","pos":[0,46]}]}],"pos":[15472,15519],"yaml":true},{"content":"A mask that isolates the bit flag following the one that <code>previous</code> points to in <xref href=\"System.Collections.Specialized.BitVector32\"></xref>.","nodes":[{"pos":[0,156],"content":"A mask that isolates the bit flag following the one that <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">previous</ph><ept id=\"p1\">&lt;/code&gt;</ept> points to in <ph id=\"ph2\">&lt;xref href=\"System.Collections.Specialized.BitVector32\"&gt;&lt;/xref&gt;</ph>.","source":"A mask that isolates the bit flag following the one that <code>previous</code> points to in <xref href=\"System.Collections.Specialized.BitVector32\"></xref>."}],"pos":[15575,15732],"yaml":true},{"content":"<code>previous</code> indicates the last bit flag in the <xref href=\"System.Collections.Specialized.BitVector32\"></xref>.","nodes":[{"pos":[0,121],"content":"<ph id=\"ph1\">&lt;code&gt;previous&lt;/code&gt;</ph> indicates the last bit flag in the <ph id=\"ph2\">&lt;xref href=\"System.Collections.Specialized.BitVector32\"&gt;&lt;/xref&gt;</ph>.","source":"<code>previous</code> indicates the last bit flag in the <xref href=\"System.Collections.Specialized.BitVector32\"></xref>."}],"pos":[15923,16045],"yaml":true},{"content":"Creates the first <xref href=\"System.Collections.Specialized.BitVector32.Section\"></xref> in a series of sections that contain small integers.","nodes":[{"pos":[0,142],"content":"Creates the first <ph id=\"ph1\">&lt;xref href=\"System.Collections.Specialized.BitVector32.Section\"&gt;&lt;/xref&gt;</ph> in a series of sections that contain small integers.","source":"Creates the first <xref href=\"System.Collections.Specialized.BitVector32.Section\"></xref> in a series of sections that contain small integers."}],"pos":[17385,17528],"yaml":true},{"content":"A <xref:System.Collections.Specialized.BitVector32.Section> is a window into the <xref:System.Collections.Specialized.BitVector32> and is composed of the smallest number of consecutive bits that can contain the maximum value specified in <xref:System.Collections.Specialized.BitVector32.CreateSection%2A>. For example, a section with a maximum value of 1 is composed of only one bit, whereas a section with a maximum value of 5 is composed of three bits. You can create a <xref:System.Collections.Specialized.BitVector32.Section> with a maximum value of 1 to serve as a Boolean, thereby allowing you to store integers and Booleans in the same <xref:System.Collections.Specialized.BitVector32>.  \n  \n If sections already exist in the <xref:System.Collections.Specialized.BitVector32>, those sections are still accessible; however, overlapping sections might cause unexpected results.  \n  \n This method is an O(1) operation.","nodes":[{"pos":[0,693],"content":"A <xref:System.Collections.Specialized.BitVector32.Section> is a window into the <xref:System.Collections.Specialized.BitVector32> and is composed of the smallest number of consecutive bits that can contain the maximum value specified in <xref:System.Collections.Specialized.BitVector32.CreateSection%2A>. For example, a section with a maximum value of 1 is composed of only one bit, whereas a section with a maximum value of 5 is composed of three bits. You can create a <xref:System.Collections.Specialized.BitVector32.Section> with a maximum value of 1 to serve as a Boolean, thereby allowing you to store integers and Booleans in the same <xref:System.Collections.Specialized.BitVector32>.","nodes":[{"content":"A <xref:System.Collections.Specialized.BitVector32.Section> is a window into the <xref:System.Collections.Specialized.BitVector32> and is composed of the smallest number of consecutive bits that can contain the maximum value specified in <xref:System.Collections.Specialized.BitVector32.CreateSection%2A>. For example, a section with a maximum value of 1 is composed of only one bit, whereas a section with a maximum value of 5 is composed of three bits. You can create a <xref:System.Collections.Specialized.BitVector32.Section> with a maximum value of 1 to serve as a Boolean, thereby allowing you to store integers and Booleans in the same <xref:System.Collections.Specialized.BitVector32>.","pos":[0,693],"nodes":[{"content":"A <ph id=\"ph1\">&lt;xref:System.Collections.Specialized.BitVector32.Section&gt;</ph> is a window into the <ph id=\"ph2\">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph> and is composed of the smallest number of consecutive bits that can contain the maximum value specified in <ph id=\"ph3\">&lt;xref:System.Collections.Specialized.BitVector32.CreateSection%2A&gt;</ph>.","pos":[0,305],"source":"A <xref:System.Collections.Specialized.BitVector32.Section> is a window into the <xref:System.Collections.Specialized.BitVector32> and is composed of the smallest number of consecutive bits that can contain the maximum value specified in <xref:System.Collections.Specialized.BitVector32.CreateSection%2A>."},{"content":"For example, a section with a maximum value of 1 is composed of only one bit, whereas a section with a maximum value of 5 is composed of three bits.","pos":[306,454]},{"content":"You can create a <ph id=\"ph1\">&lt;xref:System.Collections.Specialized.BitVector32.Section&gt;</ph> with a maximum value of 1 to serve as a Boolean, thereby allowing you to store integers and Booleans in the same <ph id=\"ph2\">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph>.","pos":[455,693],"source":" You can create a <xref:System.Collections.Specialized.BitVector32.Section> with a maximum value of 1 to serve as a Boolean, thereby allowing you to store integers and Booleans in the same <xref:System.Collections.Specialized.BitVector32>."}]}]},{"pos":[700,882],"content":"If sections already exist in the <xref:System.Collections.Specialized.BitVector32>, those sections are still accessible; however, overlapping sections might cause unexpected results.","nodes":[{"content":"If sections already exist in the <ph id=\"ph1\">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph>, those sections are still accessible; however, overlapping sections might cause unexpected results.","pos":[0,182],"source":"If sections already exist in the <xref:System.Collections.Specialized.BitVector32>, those sections are still accessible; however, overlapping sections might cause unexpected results."}]},{"pos":[889,922],"content":"This method is an O(1) operation.","nodes":[{"content":"This method is an O(1) operation.","pos":[0,33]}]}],"pos":[17539,18468],"yaml":true,"extradata":"MT"},{"content":"A 16-bit signed integer that specifies the maximum value for the new <xref href=\"System.Collections.Specialized.BitVector32.Section\"></xref>.","nodes":[{"pos":[0,141],"content":"A 16-bit signed integer that specifies the maximum value for the new <ph id=\"ph1\">&lt;xref href=\"System.Collections.Specialized.BitVector32.Section\"&gt;&lt;/xref&gt;</ph>.","source":"A 16-bit signed integer that specifies the maximum value for the new <xref href=\"System.Collections.Specialized.BitVector32.Section\"></xref>."}],"pos":[19409,19551],"yaml":true},{"content":"A <xref href=\"System.Collections.Specialized.BitVector32.Section\"></xref> that can hold a number from zero to <code>maxValue</code>.","nodes":[{"pos":[0,132],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Collections.Specialized.BitVector32.Section\"&gt;&lt;/xref&gt;</ph> that can hold a number from zero to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">maxValue</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A <xref href=\"System.Collections.Specialized.BitVector32.Section\"></xref> that can hold a number from zero to <code>maxValue</code>."}],"pos":[19645,19778],"yaml":true},{"content":"<code>maxValue</code> is less than 1.","nodes":[{"pos":[0,37],"content":"<ph id=\"ph1\">&lt;code&gt;maxValue&lt;/code&gt;</ph> is less than 1.","source":"<code>maxValue</code> is less than 1."}],"pos":[19956,19994],"yaml":true},{"content":"Creates a new <xref href=\"System.Collections.Specialized.BitVector32.Section\"></xref> following the specified <xref href=\"System.Collections.Specialized.BitVector32.Section\"></xref> in a series of sections that contain small integers.","nodes":[{"pos":[0,234],"content":"Creates a new <ph id=\"ph1\">&lt;xref href=\"System.Collections.Specialized.BitVector32.Section\"&gt;&lt;/xref&gt;</ph> following the specified <ph id=\"ph2\">&lt;xref href=\"System.Collections.Specialized.BitVector32.Section\"&gt;&lt;/xref&gt;</ph> in a series of sections that contain small integers.","source":"Creates a new <xref href=\"System.Collections.Specialized.BitVector32.Section\"></xref> following the specified <xref href=\"System.Collections.Specialized.BitVector32.Section\"></xref> in a series of sections that contain small integers."}],"pos":[21550,21785],"yaml":true},{"content":"A <xref:System.Collections.Specialized.BitVector32.Section> is a window into the <xref:System.Collections.Specialized.BitVector32> and is composed of the smallest number of consecutive bits that can contain the maximum value specified in <xref:System.Collections.Specialized.BitVector32.CreateSection%2A>. For example, a section with a maximum value of 1 is composed of only one bit, whereas a section with a maximum value of 5 is composed of three bits. You can create a <xref:System.Collections.Specialized.BitVector32.Section> with a maximum value of 1 to serve as a Boolean, thereby allowing you to store integers and Booleans in the same <xref:System.Collections.Specialized.BitVector32>.  \n  \n If sections already exist after `previous` in the <xref:System.Collections.Specialized.BitVector32>, those sections are still accessible; however, overlapping sections might cause unexpected results.  \n  \n This method is an O(1) operation.","nodes":[{"pos":[0,693],"content":"A <xref:System.Collections.Specialized.BitVector32.Section> is a window into the <xref:System.Collections.Specialized.BitVector32> and is composed of the smallest number of consecutive bits that can contain the maximum value specified in <xref:System.Collections.Specialized.BitVector32.CreateSection%2A>. For example, a section with a maximum value of 1 is composed of only one bit, whereas a section with a maximum value of 5 is composed of three bits. You can create a <xref:System.Collections.Specialized.BitVector32.Section> with a maximum value of 1 to serve as a Boolean, thereby allowing you to store integers and Booleans in the same <xref:System.Collections.Specialized.BitVector32>.","nodes":[{"content":"A <xref:System.Collections.Specialized.BitVector32.Section> is a window into the <xref:System.Collections.Specialized.BitVector32> and is composed of the smallest number of consecutive bits that can contain the maximum value specified in <xref:System.Collections.Specialized.BitVector32.CreateSection%2A>. For example, a section with a maximum value of 1 is composed of only one bit, whereas a section with a maximum value of 5 is composed of three bits. You can create a <xref:System.Collections.Specialized.BitVector32.Section> with a maximum value of 1 to serve as a Boolean, thereby allowing you to store integers and Booleans in the same <xref:System.Collections.Specialized.BitVector32>.","pos":[0,693],"nodes":[{"content":"A <ph id=\"ph1\">&lt;xref:System.Collections.Specialized.BitVector32.Section&gt;</ph> is a window into the <ph id=\"ph2\">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph> and is composed of the smallest number of consecutive bits that can contain the maximum value specified in <ph id=\"ph3\">&lt;xref:System.Collections.Specialized.BitVector32.CreateSection%2A&gt;</ph>.","pos":[0,305],"source":"A <xref:System.Collections.Specialized.BitVector32.Section> is a window into the <xref:System.Collections.Specialized.BitVector32> and is composed of the smallest number of consecutive bits that can contain the maximum value specified in <xref:System.Collections.Specialized.BitVector32.CreateSection%2A>."},{"content":"For example, a section with a maximum value of 1 is composed of only one bit, whereas a section with a maximum value of 5 is composed of three bits.","pos":[306,454]},{"content":"You can create a <ph id=\"ph1\">&lt;xref:System.Collections.Specialized.BitVector32.Section&gt;</ph> with a maximum value of 1 to serve as a Boolean, thereby allowing you to store integers and Booleans in the same <ph id=\"ph2\">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph>.","pos":[455,693],"source":" You can create a <xref:System.Collections.Specialized.BitVector32.Section> with a maximum value of 1 to serve as a Boolean, thereby allowing you to store integers and Booleans in the same <xref:System.Collections.Specialized.BitVector32>."}]}]},{"pos":[700,899],"content":"If sections already exist after <ph id=\"ph1\">`previous`</ph> in the <ph id=\"ph2\">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph>, those sections are still accessible; however, overlapping sections might cause unexpected results.","source":"If sections already exist after `previous` in the <xref:System.Collections.Specialized.BitVector32>, those sections are still accessible; however, overlapping sections might cause unexpected results."},{"pos":[906,939],"content":"This method is an O(1) operation.","nodes":[{"content":"This method is an O(1) operation.","pos":[0,33]}]}],"pos":[21796,22742],"yaml":true,"extradata":"MT"},{"content":"A 16-bit signed integer that specifies the maximum value for the new <xref href=\"System.Collections.Specialized.BitVector32.Section\"></xref>.","nodes":[{"pos":[0,141],"content":"A 16-bit signed integer that specifies the maximum value for the new <ph id=\"ph1\">&lt;xref href=\"System.Collections.Specialized.BitVector32.Section\"&gt;&lt;/xref&gt;</ph>.","source":"A 16-bit signed integer that specifies the maximum value for the new <xref href=\"System.Collections.Specialized.BitVector32.Section\"></xref>."}],"pos":[23744,23886],"yaml":true},{"content":"The previous <xref href=\"System.Collections.Specialized.BitVector32.Section\"></xref> in the <xref href=\"System.Collections.Specialized.BitVector32\"></xref>.","nodes":[{"pos":[0,156],"content":"The previous <ph id=\"ph1\">&lt;xref href=\"System.Collections.Specialized.BitVector32.Section\"&gt;&lt;/xref&gt;</ph> in the <ph id=\"ph2\">&lt;xref href=\"System.Collections.Specialized.BitVector32\"&gt;&lt;/xref&gt;</ph>.","source":"The previous <xref href=\"System.Collections.Specialized.BitVector32.Section\"></xref> in the <xref href=\"System.Collections.Specialized.BitVector32\"></xref>."}],"pos":[23987,24144],"yaml":true},{"content":"A <xref href=\"System.Collections.Specialized.BitVector32.Section\"></xref> that can hold a number from zero to <code>maxValue</code>.","nodes":[{"pos":[0,132],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Collections.Specialized.BitVector32.Section\"&gt;&lt;/xref&gt;</ph> that can hold a number from zero to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">maxValue</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A <xref href=\"System.Collections.Specialized.BitVector32.Section\"></xref> that can hold a number from zero to <code>maxValue</code>."}],"pos":[24238,24371],"yaml":true},{"content":"<code>maxValue</code> is less than 1.","nodes":[{"pos":[0,37],"content":"<ph id=\"ph1\">&lt;code&gt;maxValue&lt;/code&gt;</ph> is less than 1.","source":"<code>maxValue</code> is less than 1."}],"pos":[24549,24587],"yaml":true},{"content":"<code>previous</code> includes the final bit in the <xref href=\"System.Collections.Specialized.BitVector32\"></xref>.  \n  \n -or-  \n  \n <code>maxValue</code> is greater than the highest value that can be represented by the number of bits after <code>previous</code>.","nodes":[{"pos":[0,116],"content":"<ph id=\"ph1\">&lt;code&gt;previous&lt;/code&gt;</ph> includes the final bit in the <ph id=\"ph2\">&lt;xref href=\"System.Collections.Specialized.BitVector32\"&gt;&lt;/xref&gt;</ph>.","source":"<code>previous</code> includes the final bit in the <xref href=\"System.Collections.Specialized.BitVector32\"></xref>."},{"pos":[123,127],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[134,264],"content":"<ph id=\"ph1\">&lt;code&gt;maxValue&lt;/code&gt;</ph> is greater than the highest value that can be represented by the number of bits after <ph id=\"ph2\">&lt;code&gt;previous&lt;/code&gt;</ph>.","source":"<code>maxValue</code> is greater than the highest value that can be represented by the number of bits after <code>previous</code>."}],"pos":[24697,24970],"yaml":true},{"content":"Gets the value of the <xref href=\"System.Collections.Specialized.BitVector32\"></xref> as an integer.","nodes":[{"pos":[0,100],"content":"Gets the value of the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Specialized.BitVector32\"&gt;&lt;/xref&gt;</ph> as an integer.","source":"Gets the value of the <xref href=\"System.Collections.Specialized.BitVector32\"></xref> as an integer."}],"pos":[26195,26296],"yaml":true},{"content":"To access the value of the individual sections or bit flags, use the <xref:System.Collections.Specialized.BitVector32.Item%2A> property.  \n  \n Retrieving the value of this property is an O(1) operation.","nodes":[{"pos":[0,136],"content":"To access the value of the individual sections or bit flags, use the <xref:System.Collections.Specialized.BitVector32.Item%2A> property.","nodes":[{"content":"To access the value of the individual sections or bit flags, use the <ph id=\"ph1\">&lt;xref:System.Collections.Specialized.BitVector32.Item%2A&gt;</ph> property.","pos":[0,136],"source":"To access the value of the individual sections or bit flags, use the <xref:System.Collections.Specialized.BitVector32.Item%2A> property."}]},{"pos":[143,202],"content":"Retrieving the value of this property is an O(1) operation.","nodes":[{"content":"Retrieving the value of this property is an O(1) operation.","pos":[0,59]}]}],"pos":[26307,26514],"yaml":true,"extradata":"MT"},{"content":"The value of the <xref href=\"System.Collections.Specialized.BitVector32\"></xref> as an integer.","nodes":[{"pos":[0,95],"content":"The value of the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Specialized.BitVector32\"&gt;&lt;/xref&gt;</ph> as an integer.","source":"The value of the <xref href=\"System.Collections.Specialized.BitVector32\"></xref> as an integer."}],"pos":[26618,26714],"yaml":true},{"content":"Determines whether the specified object is equal to the <xref href=\"System.Collections.Specialized.BitVector32\"></xref>.","nodes":[{"pos":[0,120],"content":"Determines whether the specified object is equal to the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Specialized.BitVector32\"&gt;&lt;/xref&gt;</ph>.","source":"Determines whether the specified object is equal to the <xref href=\"System.Collections.Specialized.BitVector32\"></xref>."}],"pos":[28096,28217],"yaml":true},{"content":"The object `o` is considered equal to the <xref:System.Collections.Specialized.BitVector32> if the type of `o` is compatible with the <xref:System.Collections.Specialized.BitVector32> type and if the value of `o` is equal to the value of <xref:System.Collections.Specialized.BitVector32.Data%2A>.  \n  \n This method is an O(1) operation.","nodes":[{"pos":[0,296],"content":"The object <ph id=\"ph1\">`o`</ph> is considered equal to the <ph id=\"ph2\">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph> if the type of <ph id=\"ph3\">`o`</ph> is compatible with the <ph id=\"ph4\">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph> type and if the value of <ph id=\"ph5\">`o`</ph> is equal to the value of <ph id=\"ph6\">&lt;xref:System.Collections.Specialized.BitVector32.Data%2A&gt;</ph>.","source":"The object `o` is considered equal to the <xref:System.Collections.Specialized.BitVector32> if the type of `o` is compatible with the <xref:System.Collections.Specialized.BitVector32> type and if the value of `o` is equal to the value of <xref:System.Collections.Specialized.BitVector32.Data%2A>."},{"pos":[303,336],"content":"This method is an O(1) operation.","nodes":[{"content":"This method is an O(1) operation.","pos":[0,33]}]}],"pos":[28228,28569],"yaml":true,"extradata":"MT"},{"content":"The object to compare with the current <xref href=\"System.Collections.Specialized.BitVector32\"></xref>.","nodes":[{"pos":[0,103],"content":"The object to compare with the current <ph id=\"ph1\">&lt;xref href=\"System.Collections.Specialized.BitVector32\"&gt;&lt;/xref&gt;</ph>.","source":"The object to compare with the current <xref href=\"System.Collections.Specialized.BitVector32\"></xref>."}],"pos":[29500,29604],"yaml":true},{"content":"`true` if the specified object is equal to the <xref href=\"System.Collections.Specialized.BitVector32\"></xref>; otherwise, `false`.","nodes":[{"pos":[0,131],"content":"<ph id=\"ph1\">`true`</ph> if the specified object is equal to the <ph id=\"ph2\">&lt;xref href=\"System.Collections.Specialized.BitVector32\"&gt;&lt;/xref&gt;</ph>; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if the specified object is equal to the <xref href=\"System.Collections.Specialized.BitVector32\"></xref>; otherwise, `false`."}],"pos":[29662,29796],"yaml":true},{"content":"Serves as a hash function for the <xref href=\"System.Collections.Specialized.BitVector32\"></xref>.","nodes":[{"pos":[0,98],"content":"Serves as a hash function for the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Specialized.BitVector32\"&gt;&lt;/xref&gt;</ph>.","source":"Serves as a hash function for the <xref href=\"System.Collections.Specialized.BitVector32\"></xref>."}],"pos":[31147,31246],"yaml":true},{"content":"The hash code of a <xref:System.Collections.Specialized.BitVector32> is based on the value of <xref:System.Collections.Specialized.BitVector32.Data%2A>. Two instances of <xref:System.Collections.Specialized.BitVector32> with the same value for <xref:System.Collections.Specialized.BitVector32.Data%2A> will also generate the same hash code.  \n  \n This method is an O(1) operation.","nodes":[{"pos":[0,340],"content":"The hash code of a <xref:System.Collections.Specialized.BitVector32> is based on the value of <xref:System.Collections.Specialized.BitVector32.Data%2A>. Two instances of <xref:System.Collections.Specialized.BitVector32> with the same value for <xref:System.Collections.Specialized.BitVector32.Data%2A> will also generate the same hash code.","nodes":[{"content":"The hash code of a <xref:System.Collections.Specialized.BitVector32> is based on the value of <xref:System.Collections.Specialized.BitVector32.Data%2A>. Two instances of <xref:System.Collections.Specialized.BitVector32> with the same value for <xref:System.Collections.Specialized.BitVector32.Data%2A> will also generate the same hash code.","pos":[0,340],"nodes":[{"content":"The hash code of a <ph id=\"ph1\">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph> is based on the value of <ph id=\"ph2\">&lt;xref:System.Collections.Specialized.BitVector32.Data%2A&gt;</ph>.","pos":[0,152],"source":"The hash code of a <xref:System.Collections.Specialized.BitVector32> is based on the value of <xref:System.Collections.Specialized.BitVector32.Data%2A>."},{"content":"Two instances of <ph id=\"ph1\">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph> with the same value for <ph id=\"ph2\">&lt;xref:System.Collections.Specialized.BitVector32.Data%2A&gt;</ph> will also generate the same hash code.","pos":[153,340],"source":" Two instances of <xref:System.Collections.Specialized.BitVector32> with the same value for <xref:System.Collections.Specialized.BitVector32.Data%2A> will also generate the same hash code."}]}]},{"pos":[347,380],"content":"This method is an O(1) operation.","nodes":[{"content":"This method is an O(1) operation.","pos":[0,33]}]}],"pos":[31257,31642],"yaml":true,"extradata":"MT"},{"content":"A hash code for the <xref href=\"System.Collections.Specialized.BitVector32\"></xref>.","nodes":[{"pos":[0,84],"content":"A hash code for the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Specialized.BitVector32\"&gt;&lt;/xref&gt;</ph>.","source":"A hash code for the <xref href=\"System.Collections.Specialized.BitVector32\"></xref>."}],"pos":[31776,31861],"yaml":true},{"content":"Gets or sets the value stored in the specified <xref href=\"System.Collections.Specialized.BitVector32.Section\"></xref>.","nodes":[{"pos":[0,119],"content":"Gets or sets the value stored in the specified <ph id=\"ph1\">&lt;xref href=\"System.Collections.Specialized.BitVector32.Section\"&gt;&lt;/xref&gt;</ph>.","source":"Gets or sets the value stored in the specified <xref href=\"System.Collections.Specialized.BitVector32.Section\"></xref>."}],"pos":[33390,33510],"yaml":true},{"content":"The <xref:System.Collections.Specialized.BitVector32.Item%2A> [Section] property is the indexer for a <xref:System.Collections.Specialized.BitVector32> that is set up as sections, and the <xref:System.Collections.Specialized.BitVector32.Item%2A> [int] property is the indexer for a <xref:System.Collections.Specialized.BitVector32> that is set up as bit flags.  \n  \n A <xref:System.Collections.Specialized.BitVector32.Section> is a window into the <xref:System.Collections.Specialized.BitVector32> and is composed of the smallest number of consecutive bits that can contain the maximum value specified in <xref:System.Collections.Specialized.BitVector32.CreateSection%2A>. For example, a section with a maximum value of 1 is composed of only one bit, whereas a section with a maximum value of 5 is composed of three bits. You can create a <xref:System.Collections.Specialized.BitVector32.Section> with a maximum value of 1 to serve as a Boolean, thereby allowing you to store integers and Booleans in the same <xref:System.Collections.Specialized.BitVector32>.  \n  \n The C# language uses the  keyword to define the indexers instead of implementing the <xref:System.Collections.Specialized.BitVector32.Item%2A> property. Visual Basic implements <xref:System.Collections.Specialized.BitVector32.Item%2A> as a default property, which provides the same indexing functionality.  \n  \n Retrieving the value of this property is an O(1) operation; setting the property is also an O(1) operation.","nodes":[{"pos":[0,360],"content":"The <xref:System.Collections.Specialized.BitVector32.Item%2A> [Section] property is the indexer for a <xref:System.Collections.Specialized.BitVector32> that is set up as sections, and the <xref:System.Collections.Specialized.BitVector32.Item%2A> [int] property is the indexer for a <xref:System.Collections.Specialized.BitVector32> that is set up as bit flags.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Collections.Specialized.BitVector32.Item%2A&gt;</ph> [Section] property is the indexer for a <ph id=\"ph2\">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph> that is set up as sections, and the <ph id=\"ph3\">&lt;xref:System.Collections.Specialized.BitVector32.Item%2A&gt;</ph> [int] property is the indexer for a <ph id=\"ph4\">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph> that is set up as bit flags.","pos":[0,360],"source":"The <xref:System.Collections.Specialized.BitVector32.Item%2A> [Section] property is the indexer for a <xref:System.Collections.Specialized.BitVector32> that is set up as sections, and the <xref:System.Collections.Specialized.BitVector32.Item%2A> [int] property is the indexer for a <xref:System.Collections.Specialized.BitVector32> that is set up as bit flags."}]},{"pos":[367,1060],"content":"A <xref:System.Collections.Specialized.BitVector32.Section> is a window into the <xref:System.Collections.Specialized.BitVector32> and is composed of the smallest number of consecutive bits that can contain the maximum value specified in <xref:System.Collections.Specialized.BitVector32.CreateSection%2A>. For example, a section with a maximum value of 1 is composed of only one bit, whereas a section with a maximum value of 5 is composed of three bits. You can create a <xref:System.Collections.Specialized.BitVector32.Section> with a maximum value of 1 to serve as a Boolean, thereby allowing you to store integers and Booleans in the same <xref:System.Collections.Specialized.BitVector32>.","nodes":[{"content":"A <xref:System.Collections.Specialized.BitVector32.Section> is a window into the <xref:System.Collections.Specialized.BitVector32> and is composed of the smallest number of consecutive bits that can contain the maximum value specified in <xref:System.Collections.Specialized.BitVector32.CreateSection%2A>. For example, a section with a maximum value of 1 is composed of only one bit, whereas a section with a maximum value of 5 is composed of three bits. You can create a <xref:System.Collections.Specialized.BitVector32.Section> with a maximum value of 1 to serve as a Boolean, thereby allowing you to store integers and Booleans in the same <xref:System.Collections.Specialized.BitVector32>.","pos":[0,693],"nodes":[{"content":"A <ph id=\"ph1\">&lt;xref:System.Collections.Specialized.BitVector32.Section&gt;</ph> is a window into the <ph id=\"ph2\">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph> and is composed of the smallest number of consecutive bits that can contain the maximum value specified in <ph id=\"ph3\">&lt;xref:System.Collections.Specialized.BitVector32.CreateSection%2A&gt;</ph>.","pos":[0,305],"source":"A <xref:System.Collections.Specialized.BitVector32.Section> is a window into the <xref:System.Collections.Specialized.BitVector32> and is composed of the smallest number of consecutive bits that can contain the maximum value specified in <xref:System.Collections.Specialized.BitVector32.CreateSection%2A>."},{"content":"For example, a section with a maximum value of 1 is composed of only one bit, whereas a section with a maximum value of 5 is composed of three bits.","pos":[306,454]},{"content":"You can create a <ph id=\"ph1\">&lt;xref:System.Collections.Specialized.BitVector32.Section&gt;</ph> with a maximum value of 1 to serve as a Boolean, thereby allowing you to store integers and Booleans in the same <ph id=\"ph2\">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph>.","pos":[455,693],"source":" You can create a <xref:System.Collections.Specialized.BitVector32.Section> with a maximum value of 1 to serve as a Boolean, thereby allowing you to store integers and Booleans in the same <xref:System.Collections.Specialized.BitVector32>."}]}]},{"pos":[1067,1372],"content":"The C# language uses the  keyword to define the indexers instead of implementing the <xref:System.Collections.Specialized.BitVector32.Item%2A> property. Visual Basic implements <xref:System.Collections.Specialized.BitVector32.Item%2A> as a default property, which provides the same indexing functionality.","nodes":[{"content":"The C# language uses the  keyword to define the indexers instead of implementing the <xref:System.Collections.Specialized.BitVector32.Item%2A> property. Visual Basic implements <xref:System.Collections.Specialized.BitVector32.Item%2A> as a default property, which provides the same indexing functionality.","pos":[0,305],"nodes":[{"content":"The C# language uses the  keyword to define the indexers instead of implementing the <ph id=\"ph1\">&lt;xref:System.Collections.Specialized.BitVector32.Item%2A&gt;</ph> property.","pos":[0,152],"source":"The C# language uses the  keyword to define the indexers instead of implementing the <xref:System.Collections.Specialized.BitVector32.Item%2A> property."},{"content":"Visual Basic implements <ph id=\"ph1\">&lt;xref:System.Collections.Specialized.BitVector32.Item%2A&gt;</ph> as a default property, which provides the same indexing functionality.","pos":[153,305],"source":" Visual Basic implements <xref:System.Collections.Specialized.BitVector32.Item%2A> as a default property, which provides the same indexing functionality."}]}]},{"pos":[1379,1486],"content":"Retrieving the value of this property is an O(1) operation; setting the property is also an O(1) operation.","nodes":[{"content":"Retrieving the value of this property is an O(1) operation; setting the property is also an O(1) operation.","pos":[0,107]}]}],"pos":[33521,35016],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Collections.Specialized.BitVector32.Section\"></xref> that contains the value to get or set.","nodes":[{"pos":[0,112],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Collections.Specialized.BitVector32.Section\"&gt;&lt;/xref&gt;</ph> that contains the value to get or set.","source":"A <xref href=\"System.Collections.Specialized.BitVector32.Section\"></xref> that contains the value to get or set."}],"pos":[35245,35358],"yaml":true},{"content":"The value stored in the specified <xref href=\"System.Collections.Specialized.BitVector32.Section\"></xref>.","nodes":[{"pos":[0,106],"content":"The value stored in the specified <ph id=\"ph1\">&lt;xref href=\"System.Collections.Specialized.BitVector32.Section\"&gt;&lt;/xref&gt;</ph>.","source":"The value stored in the specified <xref href=\"System.Collections.Specialized.BitVector32.Section\"></xref>."}],"pos":[35414,35521],"yaml":true},{"content":"Gets or sets the state of the bit flag indicated by the specified mask.","nodes":[{"pos":[0,71],"content":"Gets or sets the state of the bit flag indicated by the specified mask.","nodes":[{"content":"Gets or sets the state of the bit flag indicated by the specified mask.","pos":[0,71]}]}],"pos":[36887,36959],"yaml":true},{"content":"The <xref:System.Collections.Specialized.BitVector32.Item%2A> [Section] property is the indexer for a <xref:System.Collections.Specialized.BitVector32> that is set up as sections, and the <xref:System.Collections.Specialized.BitVector32.Item%2A> [int] property is the indexer for a <xref:System.Collections.Specialized.BitVector32> that is set up as bit flags.  \n  \n Using this property on a <xref:System.Collections.Specialized.BitVector32> that is set up as sections might cause unexpected results.  \n  \n The C# language uses the  keyword to define the indexers instead of implementing the <xref:System.Collections.Specialized.BitVector32.Item%2A> property. Visual Basic implements <xref:System.Collections.Specialized.BitVector32.Item%2A> as a default property, which provides the same indexing functionality.  \n  \n Retrieving the value of this property is an O(1) operation; setting the property is also an O(1) operation.","nodes":[{"pos":[0,360],"content":"The <xref:System.Collections.Specialized.BitVector32.Item%2A> [Section] property is the indexer for a <xref:System.Collections.Specialized.BitVector32> that is set up as sections, and the <xref:System.Collections.Specialized.BitVector32.Item%2A> [int] property is the indexer for a <xref:System.Collections.Specialized.BitVector32> that is set up as bit flags.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Collections.Specialized.BitVector32.Item%2A&gt;</ph> [Section] property is the indexer for a <ph id=\"ph2\">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph> that is set up as sections, and the <ph id=\"ph3\">&lt;xref:System.Collections.Specialized.BitVector32.Item%2A&gt;</ph> [int] property is the indexer for a <ph id=\"ph4\">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph> that is set up as bit flags.","pos":[0,360],"source":"The <xref:System.Collections.Specialized.BitVector32.Item%2A> [Section] property is the indexer for a <xref:System.Collections.Specialized.BitVector32> that is set up as sections, and the <xref:System.Collections.Specialized.BitVector32.Item%2A> [int] property is the indexer for a <xref:System.Collections.Specialized.BitVector32> that is set up as bit flags."}]},{"pos":[367,500],"content":"Using this property on a <xref:System.Collections.Specialized.BitVector32> that is set up as sections might cause unexpected results.","nodes":[{"content":"Using this property on a <ph id=\"ph1\">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph> that is set up as sections might cause unexpected results.","pos":[0,133],"source":"Using this property on a <xref:System.Collections.Specialized.BitVector32> that is set up as sections might cause unexpected results."}]},{"pos":[507,812],"content":"The C# language uses the  keyword to define the indexers instead of implementing the <xref:System.Collections.Specialized.BitVector32.Item%2A> property. Visual Basic implements <xref:System.Collections.Specialized.BitVector32.Item%2A> as a default property, which provides the same indexing functionality.","nodes":[{"content":"The C# language uses the  keyword to define the indexers instead of implementing the <xref:System.Collections.Specialized.BitVector32.Item%2A> property. Visual Basic implements <xref:System.Collections.Specialized.BitVector32.Item%2A> as a default property, which provides the same indexing functionality.","pos":[0,305],"nodes":[{"content":"The C# language uses the  keyword to define the indexers instead of implementing the <ph id=\"ph1\">&lt;xref:System.Collections.Specialized.BitVector32.Item%2A&gt;</ph> property.","pos":[0,152],"source":"The C# language uses the  keyword to define the indexers instead of implementing the <xref:System.Collections.Specialized.BitVector32.Item%2A> property."},{"content":"Visual Basic implements <ph id=\"ph1\">&lt;xref:System.Collections.Specialized.BitVector32.Item%2A&gt;</ph> as a default property, which provides the same indexing functionality.","pos":[153,305],"source":" Visual Basic implements <xref:System.Collections.Specialized.BitVector32.Item%2A> as a default property, which provides the same indexing functionality."}]}]},{"pos":[819,926],"content":"Retrieving the value of this property is an O(1) operation; setting the property is also an O(1) operation.","nodes":[{"content":"Retrieving the value of this property is an O(1) operation; setting the property is also an O(1) operation.","pos":[0,107]}]}],"pos":[36970,37905],"yaml":true,"extradata":"MT"},{"content":"A mask that indicates the bit to get or set.","nodes":[{"pos":[0,44],"content":"A mask that indicates the bit to get or set.","nodes":[{"content":"A mask that indicates the bit to get or set.","pos":[0,44]}]}],"pos":[38042,38087],"yaml":true},{"content":"`true` if the specified bit flag is on (1); otherwise, `false`.","nodes":[{"pos":[0,63],"content":"<ph id=\"ph1\">`true`</ph> if the specified bit flag is on (1); otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the specified bit flag is on (1); otherwise, `false`."}],"pos":[38145,38211],"yaml":true},{"content":"Returns a string that represents the current <xref href=\"System.Collections.Specialized.BitVector32\"></xref>.","nodes":[{"pos":[0,109],"content":"Returns a string that represents the current <ph id=\"ph1\">&lt;xref href=\"System.Collections.Specialized.BitVector32\"&gt;&lt;/xref&gt;</ph>.","source":"Returns a string that represents the current <xref href=\"System.Collections.Specialized.BitVector32\"></xref>."}],"pos":[39542,39652],"yaml":true},{"content":"This method overrides <xref:System.Object.ToString%2A?displayProperty=fullName>.  \n  \n This method is an O(1) operation.","nodes":[{"pos":[0,80],"content":"This method overrides <xref:System.Object.ToString%2A?displayProperty=fullName>.","nodes":[{"content":"This method overrides <ph id=\"ph1\">&lt;xref:System.Object.ToString%2A?displayProperty=fullName&gt;</ph>.","pos":[0,80],"source":"This method overrides <xref:System.Object.ToString%2A?displayProperty=fullName>."}]},{"pos":[87,120],"content":"This method is an O(1) operation.","nodes":[{"content":"This method is an O(1) operation.","pos":[0,33]}]}],"pos":[39663,39788],"yaml":true,"extradata":"MT"},{"content":"A string that represents the current <xref href=\"System.Collections.Specialized.BitVector32\"></xref>.","nodes":[{"pos":[0,101],"content":"A string that represents the current <ph id=\"ph1\">&lt;xref href=\"System.Collections.Specialized.BitVector32\"&gt;&lt;/xref&gt;</ph>.","source":"A string that represents the current <xref href=\"System.Collections.Specialized.BitVector32\"></xref>."}],"pos":[39923,40025],"yaml":true},{"content":"Returns a string that represents the specified <xref href=\"System.Collections.Specialized.BitVector32\"></xref>.","nodes":[{"pos":[0,111],"content":"Returns a string that represents the specified <ph id=\"ph1\">&lt;xref href=\"System.Collections.Specialized.BitVector32\"&gt;&lt;/xref&gt;</ph>.","source":"Returns a string that represents the specified <xref href=\"System.Collections.Specialized.BitVector32\"></xref>."}],"pos":[41525,41637],"yaml":true},{"content":"This method is an O(1) operation.","nodes":[{"pos":[0,33],"content":"This method is an O(1) operation.","nodes":[{"content":"This method is an O(1) operation.","pos":[0,33]}]}],"pos":[41648,41682],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Collections.Specialized.BitVector32\"></xref> to represent.","nodes":[{"pos":[0,81],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.Specialized.BitVector32\"&gt;&lt;/xref&gt;</ph> to represent.","source":"The <xref href=\"System.Collections.Specialized.BitVector32\"></xref> to represent."}],"pos":[41893,41975],"yaml":true},{"content":"A string that represents the specified <xref href=\"System.Collections.Specialized.BitVector32\"></xref>.","nodes":[{"pos":[0,103],"content":"A string that represents the specified <ph id=\"ph1\">&lt;xref href=\"System.Collections.Specialized.BitVector32\"&gt;&lt;/xref&gt;</ph>.","source":"A string that represents the specified <xref href=\"System.Collections.Specialized.BitVector32\"></xref>."}],"pos":[42032,42136],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Collections.Specialized.BitVector32\n  commentId: T:System.Collections.Specialized.BitVector32\n  id: BitVector32\n  children:\n  - System.Collections.Specialized.BitVector32.#ctor(System.Collections.Specialized.BitVector32)\n  - System.Collections.Specialized.BitVector32.#ctor(System.Int32)\n  - System.Collections.Specialized.BitVector32.CreateMask\n  - System.Collections.Specialized.BitVector32.CreateMask(System.Int32)\n  - System.Collections.Specialized.BitVector32.CreateSection(System.Int16)\n  - System.Collections.Specialized.BitVector32.CreateSection(System.Int16,System.Collections.Specialized.BitVector32.Section)\n  - System.Collections.Specialized.BitVector32.Data\n  - System.Collections.Specialized.BitVector32.Equals(System.Object)\n  - System.Collections.Specialized.BitVector32.GetHashCode\n  - System.Collections.Specialized.BitVector32.Item(System.Collections.Specialized.BitVector32.Section)\n  - System.Collections.Specialized.BitVector32.Item(System.Int32)\n  - System.Collections.Specialized.BitVector32.ToString\n  - System.Collections.Specialized.BitVector32.ToString(System.Collections.Specialized.BitVector32)\n  langs:\n  - csharp\n  name: BitVector32\n  nameWithType: BitVector32\n  fullName: System.Collections.Specialized.BitVector32\n  type: Struct\n  assemblies:\n  - System.Collections.Specialized\n  - System\n  - netstandard\n  namespace: System.Collections.Specialized\n  summary: Provides a simple structure that stores Boolean values and small integers in 32 bits of memory.\n  remarks: \"<xref:System.Collections.Specialized.BitVector32> is more efficient than <xref:System.Collections.BitArray> for Boolean values and small integers that are used internally. A <xref:System.Collections.BitArray> can grow indefinitely as needed, but it has the memory and performance overhead that a class instance requires. In contrast, a <xref:System.Collections.Specialized.BitVector32> uses only 32 bits.  \\n  \\n A <xref:System.Collections.Specialized.BitVector32> structure can be set up to contain either sections for small integers or bit flags for Booleans, but not both. A <xref:System.Collections.Specialized.BitVector32.Section> is a window into the <xref:System.Collections.Specialized.BitVector32> and is composed of the smallest number of consecutive bits that can contain the maximum value specified in <xref:System.Collections.Specialized.BitVector32.CreateSection%2A>. For example, a section with a maximum value of 1 is composed of only one bit, whereas a section with a maximum value of 5 is composed of three bits. You can create a <xref:System.Collections.Specialized.BitVector32.Section> with a maximum value of 1 to serve as a Boolean, thereby allowing you to store integers and Booleans in the same <xref:System.Collections.Specialized.BitVector32>.  \\n  \\n Some members can be used for a <xref:System.Collections.Specialized.BitVector32> that is set up as sections, while other members can be used for one that is set up as bit flags. For example, the <xref:System.Collections.Specialized.BitVector32.Item%2A?displayProperty=fullName> property is the indexer for a <xref:System.Collections.Specialized.BitVector32> that is set up as sections, and the <xref:System.Collections.Specialized.BitVector32.Item%2A?displayProperty=fullName> property is the indexer for a <xref:System.Collections.Specialized.BitVector32> that is set up as bit flags. <xref:System.Collections.Specialized.BitVector32.CreateMask%2A> creates a series of masks that can be used to access individual bits in a <xref:System.Collections.Specialized.BitVector32> that is set up as bit flags.  \\n  \\n Using a mask on a <xref:System.Collections.Specialized.BitVector32> that is set up as sections might cause unexpected results.\"\n  example:\n  - \"The following code example uses a <xref:System.Collections.Specialized.BitVector32> as a collection of bit flags.  \\n  \\n [!code-cpp[System.Collections.Specialized.BitVector32_BitFlags#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.BitVector32_BitFlags/CPP/bitvector32_bitflags.cpp#1)]\\n [!code-csharp[System.Collections.Specialized.BitVector32_BitFlags#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.BitVector32_BitFlags/CS/bitvector32_bitflags.cs#1)]\\n [!code-vb[System.Collections.Specialized.BitVector32_BitFlags#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.BitVector32_BitFlags/VB/bitvector32_bitflags.vb#1)]  \\n  \\n The following code example uses a <xref:System.Collections.Specialized.BitVector32> as a collection of sections.  \\n  \\n [!code-cpp[System.Collections.Specialized.BitVector32_Sections#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.BitVector32_Sections/CPP/bitvector32_sections.cpp#1)]\\n [!code-csharp[System.Collections.Specialized.BitVector32_Sections#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.BitVector32_Sections/CS/bitvector32_sections.cs#1)]\\n [!code-vb[System.Collections.Specialized.BitVector32_Sections#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.BitVector32_Sections/VB/bitvector32_sections.vb#1)]\"\n  syntax:\n    content: public struct BitVector32\n  inheritance:\n  - System.Object\n  - System.ValueType\n  implements: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Specialized/BitVector32.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Specialized.BitVector32.#ctor(System.Collections.Specialized.BitVector32)\n  commentId: M:System.Collections.Specialized.BitVector32.#ctor(System.Collections.Specialized.BitVector32)\n  id: '#ctor(System.Collections.Specialized.BitVector32)'\n  parent: System.Collections.Specialized.BitVector32\n  langs:\n  - csharp\n  name: BitVector32(BitVector32)\n  nameWithType: BitVector32.BitVector32(BitVector32)\n  fullName: BitVector32.BitVector32(BitVector32)\n  type: Constructor\n  assemblies:\n  - System.Collections.Specialized\n  - System\n  - netstandard\n  namespace: System.Collections.Specialized\n  summary: Initializes a new instance of the <xref href=\"System.Collections.Specialized.BitVector32\"></xref> structure containing the data represented in an existing <xref href=\"System.Collections.Specialized.BitVector32\"></xref> structure.\n  remarks: This constructor is an O(1) operation.\n  syntax:\n    content: public BitVector32 (System.Collections.Specialized.BitVector32 value);\n    parameters:\n    - id: value\n      type: System.Collections.Specialized.BitVector32\n      description: A <xref href=\"System.Collections.Specialized.BitVector32\"></xref> structure that contains the data to copy.\n  overload: System.Collections.Specialized.BitVector32.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Specialized/BitVector32.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Specialized.BitVector32.#ctor(System.Int32)\n  commentId: M:System.Collections.Specialized.BitVector32.#ctor(System.Int32)\n  id: '#ctor(System.Int32)'\n  parent: System.Collections.Specialized.BitVector32\n  langs:\n  - csharp\n  name: BitVector32(Int32)\n  nameWithType: BitVector32.BitVector32(Int32)\n  fullName: BitVector32.BitVector32(Int32)\n  type: Constructor\n  assemblies:\n  - System.Collections.Specialized\n  - System\n  - netstandard\n  namespace: System.Collections.Specialized\n  summary: Initializes a new instance of the <xref href=\"System.Collections.Specialized.BitVector32\"></xref> structure containing the data represented in an integer.\n  remarks: This constructor is an O(1) operation.\n  syntax:\n    content: public BitVector32 (int data);\n    parameters:\n    - id: data\n      type: System.Int32\n      description: An integer representing the data of the new <xref href=\"System.Collections.Specialized.BitVector32\"></xref>.\n  overload: System.Collections.Specialized.BitVector32.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Specialized/BitVector32.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Specialized.BitVector32.CreateMask\n  commentId: M:System.Collections.Specialized.BitVector32.CreateMask\n  id: CreateMask\n  parent: System.Collections.Specialized.BitVector32\n  langs:\n  - csharp\n  name: CreateMask()\n  nameWithType: BitVector32.CreateMask()\n  fullName: BitVector32.CreateMask()\n  type: Method\n  assemblies:\n  - System.Collections.Specialized\n  - System\n  - netstandard\n  namespace: System.Collections.Specialized\n  summary: Creates the first mask in a series of masks that can be used to retrieve individual bits in a <xref href=\"System.Collections.Specialized.BitVector32\"></xref> that is set up as bit flags.\n  remarks: \"Use `CreateMask()` to create the first mask in a series and `CreateMask(int)` for all subsequent masks.  \\n  \\n Multiple masks can be created to refer to the same bit flag.  \\n  \\n The resulting mask isolates only one bit flag in the <xref:System.Collections.Specialized.BitVector32>. You can combine masks using the bitwise OR operation to create a mask that isolates multiple bit flags in the <xref:System.Collections.Specialized.BitVector32>.  \\n  \\n Using a mask on a <xref:System.Collections.Specialized.BitVector32> that is set up as sections might cause unexpected results.  \\n  \\n This method is an O(1) operation.\"\n  example:\n  - \"The following code example shows how to create and use masks.  \\n  \\n [!code-cpp[System.Collections.Specialized.BitVector32.CreateMasks#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.BitVector32.CreateMasks/CPP/bitvector32_createmasks.cpp#1)]\\n [!code-csharp[System.Collections.Specialized.BitVector32.CreateMasks#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.BitVector32.CreateMasks/CS/bitvector32_createmasks.cs#1)]\\n [!code-vb[System.Collections.Specialized.BitVector32.CreateMasks#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.BitVector32.CreateMasks/VB/bitvector32_createmasks.vb#1)]\"\n  syntax:\n    content: public static int CreateMask ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: A mask that isolates the first bit flag in the <xref href=\"System.Collections.Specialized.BitVector32\"></xref>.\n  overload: System.Collections.Specialized.BitVector32.CreateMask*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Specialized/BitVector32.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Specialized.BitVector32.CreateMask(System.Int32)\n  commentId: M:System.Collections.Specialized.BitVector32.CreateMask(System.Int32)\n  id: CreateMask(System.Int32)\n  parent: System.Collections.Specialized.BitVector32\n  langs:\n  - csharp\n  name: CreateMask(Int32)\n  nameWithType: BitVector32.CreateMask(Int32)\n  fullName: BitVector32.CreateMask(Int32)\n  type: Method\n  assemblies:\n  - System.Collections.Specialized\n  - System\n  - netstandard\n  namespace: System.Collections.Specialized\n  summary: Creates an additional mask following the specified mask in a series of masks that can be used to retrieve individual bits in a <xref href=\"System.Collections.Specialized.BitVector32\"></xref> that is set up as bit flags.\n  remarks: \"Use `CreateMask()` to create the first mask in a series and `CreateMask(int)` for all subsequent masks.  \\n  \\n Multiple masks can be created to refer to the same bit flag.  \\n  \\n The resulting mask isolates only one bit flag in the <xref:System.Collections.Specialized.BitVector32>. You can combine masks using the bitwise OR operation to create a mask that isolates multiple bit flags in the <xref:System.Collections.Specialized.BitVector32>.  \\n  \\n Using a mask on a <xref:System.Collections.Specialized.BitVector32> that is set up as sections might cause unexpected results.  \\n  \\n This method is an O(1) operation.\"\n  example:\n  - \"The following code example shows how to create and use masks.  \\n  \\n [!code-cpp[System.Collections.Specialized.BitVector32.CreateMasks#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.BitVector32.CreateMasks/CPP/bitvector32_createmasks.cpp#1)]\\n [!code-csharp[System.Collections.Specialized.BitVector32.CreateMasks#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.BitVector32.CreateMasks/CS/bitvector32_createmasks.cs#1)]\\n [!code-vb[System.Collections.Specialized.BitVector32.CreateMasks#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.BitVector32.CreateMasks/VB/bitvector32_createmasks.vb#1)]\"\n  syntax:\n    content: public static int CreateMask (int previous);\n    parameters:\n    - id: previous\n      type: System.Int32\n      description: The mask that indicates the previous bit flag.\n    return:\n      type: System.Int32\n      description: A mask that isolates the bit flag following the one that <code>previous</code> points to in <xref href=\"System.Collections.Specialized.BitVector32\"></xref>.\n  overload: System.Collections.Specialized.BitVector32.CreateMask*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <code>previous</code> indicates the last bit flag in the <xref href=\"System.Collections.Specialized.BitVector32\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Specialized/BitVector32.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Specialized.BitVector32.CreateSection(System.Int16)\n  commentId: M:System.Collections.Specialized.BitVector32.CreateSection(System.Int16)\n  id: CreateSection(System.Int16)\n  parent: System.Collections.Specialized.BitVector32\n  langs:\n  - csharp\n  name: CreateSection(Int16)\n  nameWithType: BitVector32.CreateSection(Int16)\n  fullName: BitVector32.CreateSection(Int16)\n  type: Method\n  assemblies:\n  - System.Collections.Specialized\n  - System\n  - netstandard\n  namespace: System.Collections.Specialized\n  summary: Creates the first <xref href=\"System.Collections.Specialized.BitVector32.Section\"></xref> in a series of sections that contain small integers.\n  remarks: \"A <xref:System.Collections.Specialized.BitVector32.Section> is a window into the <xref:System.Collections.Specialized.BitVector32> and is composed of the smallest number of consecutive bits that can contain the maximum value specified in <xref:System.Collections.Specialized.BitVector32.CreateSection%2A>. For example, a section with a maximum value of 1 is composed of only one bit, whereas a section with a maximum value of 5 is composed of three bits. You can create a <xref:System.Collections.Specialized.BitVector32.Section> with a maximum value of 1 to serve as a Boolean, thereby allowing you to store integers and Booleans in the same <xref:System.Collections.Specialized.BitVector32>.  \\n  \\n If sections already exist in the <xref:System.Collections.Specialized.BitVector32>, those sections are still accessible; however, overlapping sections might cause unexpected results.  \\n  \\n This method is an O(1) operation.\"\n  example:\n  - \"The following code example uses a <xref:System.Collections.Specialized.BitVector32> as a collection of sections.  \\n  \\n [!code-cpp[System.Collections.Specialized.BitVector32_Sections#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.BitVector32_Sections/CPP/bitvector32_sections.cpp#1)]\\n [!code-csharp[System.Collections.Specialized.BitVector32_Sections#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.BitVector32_Sections/CS/bitvector32_sections.cs#1)]\\n [!code-vb[System.Collections.Specialized.BitVector32_Sections#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.BitVector32_Sections/VB/bitvector32_sections.vb#1)]\"\n  syntax:\n    content: public static System.Collections.Specialized.BitVector32.Section CreateSection (short maxValue);\n    parameters:\n    - id: maxValue\n      type: System.Int16\n      description: A 16-bit signed integer that specifies the maximum value for the new <xref href=\"System.Collections.Specialized.BitVector32.Section\"></xref>.\n    return:\n      type: System.Collections.Specialized.BitVector32+Section\n      description: A <xref href=\"System.Collections.Specialized.BitVector32.Section\"></xref> that can hold a number from zero to <code>maxValue</code>.\n  overload: System.Collections.Specialized.BitVector32.CreateSection*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>maxValue</code> is less than 1.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Specialized/BitVector32.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Specialized.BitVector32.CreateSection(System.Int16,System.Collections.Specialized.BitVector32.Section)\n  commentId: M:System.Collections.Specialized.BitVector32.CreateSection(System.Int16,System.Collections.Specialized.BitVector32.Section)\n  id: CreateSection(System.Int16,System.Collections.Specialized.BitVector32.Section)\n  parent: System.Collections.Specialized.BitVector32\n  langs:\n  - csharp\n  name: CreateSection(Int16, BitVector32+Section)\n  nameWithType: BitVector32.CreateSection(Int16, BitVector32+Section)\n  fullName: BitVector32.CreateSection(Int16, BitVector32+Section)\n  type: Method\n  assemblies:\n  - System.Collections.Specialized\n  - System\n  - netstandard\n  namespace: System.Collections.Specialized\n  summary: Creates a new <xref href=\"System.Collections.Specialized.BitVector32.Section\"></xref> following the specified <xref href=\"System.Collections.Specialized.BitVector32.Section\"></xref> in a series of sections that contain small integers.\n  remarks: \"A <xref:System.Collections.Specialized.BitVector32.Section> is a window into the <xref:System.Collections.Specialized.BitVector32> and is composed of the smallest number of consecutive bits that can contain the maximum value specified in <xref:System.Collections.Specialized.BitVector32.CreateSection%2A>. For example, a section with a maximum value of 1 is composed of only one bit, whereas a section with a maximum value of 5 is composed of three bits. You can create a <xref:System.Collections.Specialized.BitVector32.Section> with a maximum value of 1 to serve as a Boolean, thereby allowing you to store integers and Booleans in the same <xref:System.Collections.Specialized.BitVector32>.  \\n  \\n If sections already exist after `previous` in the <xref:System.Collections.Specialized.BitVector32>, those sections are still accessible; however, overlapping sections might cause unexpected results.  \\n  \\n This method is an O(1) operation.\"\n  example:\n  - \"The following code example uses a <xref:System.Collections.Specialized.BitVector32> as a collection of sections.  \\n  \\n [!code-cpp[System.Collections.Specialized.BitVector32_Sections#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.BitVector32_Sections/CPP/bitvector32_sections.cpp#1)]\\n [!code-csharp[System.Collections.Specialized.BitVector32_Sections#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.BitVector32_Sections/CS/bitvector32_sections.cs#1)]\\n [!code-vb[System.Collections.Specialized.BitVector32_Sections#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.BitVector32_Sections/VB/bitvector32_sections.vb#1)]\"\n  syntax:\n    content: public static System.Collections.Specialized.BitVector32.Section CreateSection (short maxValue, System.Collections.Specialized.BitVector32.Section previous);\n    parameters:\n    - id: maxValue\n      type: System.Int16\n      description: A 16-bit signed integer that specifies the maximum value for the new <xref href=\"System.Collections.Specialized.BitVector32.Section\"></xref>.\n    - id: previous\n      type: System.Collections.Specialized.BitVector32+Section\n      description: The previous <xref href=\"System.Collections.Specialized.BitVector32.Section\"></xref> in the <xref href=\"System.Collections.Specialized.BitVector32\"></xref>.\n    return:\n      type: System.Collections.Specialized.BitVector32+Section\n      description: A <xref href=\"System.Collections.Specialized.BitVector32.Section\"></xref> that can hold a number from zero to <code>maxValue</code>.\n  overload: System.Collections.Specialized.BitVector32.CreateSection*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>maxValue</code> is less than 1.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"<code>previous</code> includes the final bit in the <xref href=\\\"System.Collections.Specialized.BitVector32\\\"></xref>.  \\n  \\n -or-  \\n  \\n <code>maxValue</code> is greater than the highest value that can be represented by the number of bits after <code>previous</code>.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Specialized/BitVector32.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Specialized.BitVector32.Data\n  commentId: P:System.Collections.Specialized.BitVector32.Data\n  id: Data\n  parent: System.Collections.Specialized.BitVector32\n  langs:\n  - csharp\n  name: Data\n  nameWithType: BitVector32.Data\n  fullName: BitVector32.Data\n  type: Property\n  assemblies:\n  - System.Collections.Specialized\n  - System\n  - netstandard\n  namespace: System.Collections.Specialized\n  summary: Gets the value of the <xref href=\"System.Collections.Specialized.BitVector32\"></xref> as an integer.\n  remarks: \"To access the value of the individual sections or bit flags, use the <xref:System.Collections.Specialized.BitVector32.Item%2A> property.  \\n  \\n Retrieving the value of this property is an O(1) operation.\"\n  syntax:\n    content: public int Data { get; }\n    return:\n      type: System.Int32\n      description: The value of the <xref href=\"System.Collections.Specialized.BitVector32\"></xref> as an integer.\n  overload: System.Collections.Specialized.BitVector32.Data*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Specialized/BitVector32.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Specialized.BitVector32.Equals(System.Object)\n  commentId: M:System.Collections.Specialized.BitVector32.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Collections.Specialized.BitVector32\n  langs:\n  - csharp\n  name: Equals(Object)\n  nameWithType: BitVector32.Equals(Object)\n  fullName: BitVector32.Equals(Object)\n  type: Method\n  assemblies:\n  - System.Collections.Specialized\n  - System\n  - netstandard\n  namespace: System.Collections.Specialized\n  summary: Determines whether the specified object is equal to the <xref href=\"System.Collections.Specialized.BitVector32\"></xref>.\n  remarks: \"The object `o` is considered equal to the <xref:System.Collections.Specialized.BitVector32> if the type of `o` is compatible with the <xref:System.Collections.Specialized.BitVector32> type and if the value of `o` is equal to the value of <xref:System.Collections.Specialized.BitVector32.Data%2A>.  \\n  \\n This method is an O(1) operation.\"\n  example:\n  - \"The following code example compares a <xref:System.Collections.Specialized.BitVector32> with another <xref:System.Collections.Specialized.BitVector32> and with an <xref:System.Int32>.  \\n  \\n [!code-cpp[System.Collections.Specialized.BitVector32.Equals#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.BitVector32.Equals/CPP/bitvector32_equals.cpp#1)]\\n [!code-csharp[System.Collections.Specialized.BitVector32.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.BitVector32.Equals/CS/bitvector32_equals.cs#1)]\\n [!code-vb[System.Collections.Specialized.BitVector32.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.BitVector32.Equals/VB/bitvector32_equals.vb#1)]\"\n  syntax:\n    content: public override bool Equals (object o);\n    parameters:\n    - id: o\n      type: System.Object\n      description: The object to compare with the current <xref href=\"System.Collections.Specialized.BitVector32\"></xref>.\n    return:\n      type: System.Boolean\n      description: '`true` if the specified object is equal to the <xref href=\"System.Collections.Specialized.BitVector32\"></xref>; otherwise, `false`.'\n  overload: System.Collections.Specialized.BitVector32.Equals*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Specialized/BitVector32.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Specialized.BitVector32.GetHashCode\n  commentId: M:System.Collections.Specialized.BitVector32.GetHashCode\n  id: GetHashCode\n  parent: System.Collections.Specialized.BitVector32\n  langs:\n  - csharp\n  name: GetHashCode()\n  nameWithType: BitVector32.GetHashCode()\n  fullName: BitVector32.GetHashCode()\n  type: Method\n  assemblies:\n  - System.Collections.Specialized\n  - System\n  - netstandard\n  namespace: System.Collections.Specialized\n  summary: Serves as a hash function for the <xref href=\"System.Collections.Specialized.BitVector32\"></xref>.\n  remarks: \"The hash code of a <xref:System.Collections.Specialized.BitVector32> is based on the value of <xref:System.Collections.Specialized.BitVector32.Data%2A>. Two instances of <xref:System.Collections.Specialized.BitVector32> with the same value for <xref:System.Collections.Specialized.BitVector32.Data%2A> will also generate the same hash code.  \\n  \\n This method is an O(1) operation.\"\n  syntax:\n    content: public override int GetHashCode ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: A hash code for the <xref href=\"System.Collections.Specialized.BitVector32\"></xref>.\n  overload: System.Collections.Specialized.BitVector32.GetHashCode*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Specialized/BitVector32.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Specialized.BitVector32.Item(System.Collections.Specialized.BitVector32.Section)\n  commentId: P:System.Collections.Specialized.BitVector32.Item(System.Collections.Specialized.BitVector32.Section)\n  id: Item(System.Collections.Specialized.BitVector32.Section)\n  parent: System.Collections.Specialized.BitVector32\n  langs:\n  - csharp\n  name: Item(BitVector32+Section)\n  nameWithType: BitVector32.Item(BitVector32+Section)\n  fullName: BitVector32.Item(BitVector32+Section)\n  type: Property\n  assemblies:\n  - System.Collections.Specialized\n  - System\n  - netstandard\n  namespace: System.Collections.Specialized\n  summary: Gets or sets the value stored in the specified <xref href=\"System.Collections.Specialized.BitVector32.Section\"></xref>.\n  remarks: \"The <xref:System.Collections.Specialized.BitVector32.Item%2A> [Section] property is the indexer for a <xref:System.Collections.Specialized.BitVector32> that is set up as sections, and the <xref:System.Collections.Specialized.BitVector32.Item%2A> [int] property is the indexer for a <xref:System.Collections.Specialized.BitVector32> that is set up as bit flags.  \\n  \\n A <xref:System.Collections.Specialized.BitVector32.Section> is a window into the <xref:System.Collections.Specialized.BitVector32> and is composed of the smallest number of consecutive bits that can contain the maximum value specified in <xref:System.Collections.Specialized.BitVector32.CreateSection%2A>. For example, a section with a maximum value of 1 is composed of only one bit, whereas a section with a maximum value of 5 is composed of three bits. You can create a <xref:System.Collections.Specialized.BitVector32.Section> with a maximum value of 1 to serve as a Boolean, thereby allowing you to store integers and Booleans in the same <xref:System.Collections.Specialized.BitVector32>.  \\n  \\n The C# language uses the  keyword to define the indexers instead of implementing the <xref:System.Collections.Specialized.BitVector32.Item%2A> property. Visual Basic implements <xref:System.Collections.Specialized.BitVector32.Item%2A> as a default property, which provides the same indexing functionality.  \\n  \\n Retrieving the value of this property is an O(1) operation; setting the property is also an O(1) operation.\"\n  syntax:\n    content: public int this[System.Collections.Specialized.BitVector32.Section section] { get; set; }\n    parameters:\n    - id: section\n      type: System.Collections.Specialized.BitVector32+Section\n      description: A <xref href=\"System.Collections.Specialized.BitVector32.Section\"></xref> that contains the value to get or set.\n    return:\n      type: System.Int32\n      description: The value stored in the specified <xref href=\"System.Collections.Specialized.BitVector32.Section\"></xref>.\n  overload: System.Collections.Specialized.BitVector32.Item*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Specialized/BitVector32.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Specialized.BitVector32.Item(System.Int32)\n  commentId: P:System.Collections.Specialized.BitVector32.Item(System.Int32)\n  id: Item(System.Int32)\n  parent: System.Collections.Specialized.BitVector32\n  langs:\n  - csharp\n  name: Item(Int32)\n  nameWithType: BitVector32.Item(Int32)\n  fullName: BitVector32.Item(Int32)\n  type: Property\n  assemblies:\n  - System.Collections.Specialized\n  - System\n  - netstandard\n  namespace: System.Collections.Specialized\n  summary: Gets or sets the state of the bit flag indicated by the specified mask.\n  remarks: \"The <xref:System.Collections.Specialized.BitVector32.Item%2A> [Section] property is the indexer for a <xref:System.Collections.Specialized.BitVector32> that is set up as sections, and the <xref:System.Collections.Specialized.BitVector32.Item%2A> [int] property is the indexer for a <xref:System.Collections.Specialized.BitVector32> that is set up as bit flags.  \\n  \\n Using this property on a <xref:System.Collections.Specialized.BitVector32> that is set up as sections might cause unexpected results.  \\n  \\n The C# language uses the  keyword to define the indexers instead of implementing the <xref:System.Collections.Specialized.BitVector32.Item%2A> property. Visual Basic implements <xref:System.Collections.Specialized.BitVector32.Item%2A> as a default property, which provides the same indexing functionality.  \\n  \\n Retrieving the value of this property is an O(1) operation; setting the property is also an O(1) operation.\"\n  syntax:\n    content: public bool this[int bit] { get; set; }\n    parameters:\n    - id: bit\n      type: System.Int32\n      description: A mask that indicates the bit to get or set.\n    return:\n      type: System.Boolean\n      description: '`true` if the specified bit flag is on (1); otherwise, `false`.'\n  overload: System.Collections.Specialized.BitVector32.Item*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Specialized/BitVector32.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Specialized.BitVector32.ToString\n  commentId: M:System.Collections.Specialized.BitVector32.ToString\n  id: ToString\n  parent: System.Collections.Specialized.BitVector32\n  langs:\n  - csharp\n  name: ToString()\n  nameWithType: BitVector32.ToString()\n  fullName: BitVector32.ToString()\n  type: Method\n  assemblies:\n  - System.Collections.Specialized\n  - System\n  - netstandard\n  namespace: System.Collections.Specialized\n  summary: Returns a string that represents the current <xref href=\"System.Collections.Specialized.BitVector32\"></xref>.\n  remarks: \"This method overrides <xref:System.Object.ToString%2A?displayProperty=fullName>.  \\n  \\n This method is an O(1) operation.\"\n  syntax:\n    content: public override string ToString ();\n    parameters: []\n    return:\n      type: System.String\n      description: A string that represents the current <xref href=\"System.Collections.Specialized.BitVector32\"></xref>.\n  overload: System.Collections.Specialized.BitVector32.ToString*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Specialized/BitVector32.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Specialized.BitVector32.ToString(System.Collections.Specialized.BitVector32)\n  commentId: M:System.Collections.Specialized.BitVector32.ToString(System.Collections.Specialized.BitVector32)\n  id: ToString(System.Collections.Specialized.BitVector32)\n  parent: System.Collections.Specialized.BitVector32\n  langs:\n  - csharp\n  name: ToString(BitVector32)\n  nameWithType: BitVector32.ToString(BitVector32)\n  fullName: BitVector32.ToString(BitVector32)\n  type: Method\n  assemblies:\n  - System.Collections.Specialized\n  - System\n  - netstandard\n  namespace: System.Collections.Specialized\n  summary: Returns a string that represents the specified <xref href=\"System.Collections.Specialized.BitVector32\"></xref>.\n  remarks: This method is an O(1) operation.\n  syntax:\n    content: public static string ToString (System.Collections.Specialized.BitVector32 value);\n    parameters:\n    - id: value\n      type: System.Collections.Specialized.BitVector32\n      description: The <xref href=\"System.Collections.Specialized.BitVector32\"></xref> to represent.\n    return:\n      type: System.String\n      description: A string that represents the specified <xref href=\"System.Collections.Specialized.BitVector32\"></xref>.\n  overload: System.Collections.Specialized.BitVector32.ToString*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Specialized/BitVector32.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\nreferences:\n- uid: System.ValueType\n  parent: System\n  isExternal: false\n  name: ValueType\n  nameWithType: ValueType\n  fullName: System.ValueType\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  nameWithType: InvalidOperationException\n  fullName: System.InvalidOperationException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.Collections.Specialized.BitVector32.#ctor(System.Collections.Specialized.BitVector32)\n  parent: System.Collections.Specialized.BitVector32\n  isExternal: false\n  name: BitVector32(BitVector32)\n  nameWithType: BitVector32.BitVector32(BitVector32)\n  fullName: BitVector32.BitVector32(BitVector32)\n- uid: System.Collections.Specialized.BitVector32\n  parent: System.Collections.Specialized\n  isExternal: false\n  name: BitVector32\n  nameWithType: BitVector32\n  fullName: System.Collections.Specialized.BitVector32\n- uid: System.Collections.Specialized.BitVector32.#ctor(System.Int32)\n  parent: System.Collections.Specialized.BitVector32\n  isExternal: false\n  name: BitVector32(Int32)\n  nameWithType: BitVector32.BitVector32(Int32)\n  fullName: BitVector32.BitVector32(Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Collections.Specialized.BitVector32.CreateMask\n  parent: System.Collections.Specialized.BitVector32\n  isExternal: false\n  name: CreateMask()\n  nameWithType: BitVector32.CreateMask()\n  fullName: BitVector32.CreateMask()\n- uid: System.Collections.Specialized.BitVector32.CreateMask(System.Int32)\n  parent: System.Collections.Specialized.BitVector32\n  isExternal: false\n  name: CreateMask(Int32)\n  nameWithType: BitVector32.CreateMask(Int32)\n  fullName: BitVector32.CreateMask(Int32)\n- uid: System.Collections.Specialized.BitVector32.CreateSection(System.Int16)\n  parent: System.Collections.Specialized.BitVector32\n  isExternal: false\n  name: CreateSection(Int16)\n  nameWithType: BitVector32.CreateSection(Int16)\n  fullName: BitVector32.CreateSection(Int16)\n- uid: System.Int16\n  parent: System\n  isExternal: false\n  name: Int16\n  nameWithType: Int16\n  fullName: System.Int16\n- uid: System.Collections.Specialized.BitVector32.CreateSection(System.Int16,System.Collections.Specialized.BitVector32.Section)\n  parent: System.Collections.Specialized.BitVector32\n  isExternal: false\n  name: CreateSection(Int16, BitVector32+Section)\n  nameWithType: BitVector32.CreateSection(Int16, BitVector32+Section)\n  fullName: BitVector32.CreateSection(Int16, BitVector32+Section)\n- uid: System.Collections.Specialized.BitVector32.Data\n  parent: System.Collections.Specialized.BitVector32\n  isExternal: false\n  name: Data\n  nameWithType: BitVector32.Data\n  fullName: BitVector32.Data\n- uid: System.Collections.Specialized.BitVector32.Equals(System.Object)\n  parent: System.Collections.Specialized.BitVector32\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: BitVector32.Equals(Object)\n  fullName: BitVector32.Equals(Object)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Collections.Specialized.BitVector32.GetHashCode\n  parent: System.Collections.Specialized.BitVector32\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: BitVector32.GetHashCode()\n  fullName: BitVector32.GetHashCode()\n- uid: System.Collections.Specialized.BitVector32.Item(System.Collections.Specialized.BitVector32.Section)\n  parent: System.Collections.Specialized.BitVector32\n  isExternal: false\n  name: Item(BitVector32+Section)\n  nameWithType: BitVector32.Item(BitVector32+Section)\n  fullName: BitVector32.Item(BitVector32+Section)\n- uid: System.Collections.Specialized.BitVector32.Item(System.Int32)\n  parent: System.Collections.Specialized.BitVector32\n  isExternal: false\n  name: Item(Int32)\n  nameWithType: BitVector32.Item(Int32)\n  fullName: BitVector32.Item(Int32)\n- uid: System.Collections.Specialized.BitVector32.ToString\n  parent: System.Collections.Specialized.BitVector32\n  isExternal: false\n  name: ToString()\n  nameWithType: BitVector32.ToString()\n  fullName: BitVector32.ToString()\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Collections.Specialized.BitVector32.ToString(System.Collections.Specialized.BitVector32)\n  parent: System.Collections.Specialized.BitVector32\n  isExternal: false\n  name: ToString(BitVector32)\n  nameWithType: BitVector32.ToString(BitVector32)\n  fullName: BitVector32.ToString(BitVector32)\n- uid: System.Collections.Specialized.BitVector32.#ctor*\n  parent: System.Collections.Specialized.BitVector32\n  isExternal: false\n  name: BitVector32\n  nameWithType: BitVector32.BitVector32\n  fullName: BitVector32.BitVector32\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Specialized/BitVector32.xml\n- uid: System.Collections.Specialized.BitVector32.CreateMask*\n  parent: System.Collections.Specialized.BitVector32\n  isExternal: false\n  name: CreateMask\n  nameWithType: BitVector32.CreateMask\n  fullName: BitVector32.CreateMask\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Specialized/BitVector32.xml\n- uid: System.Collections.Specialized.BitVector32.CreateSection*\n  parent: System.Collections.Specialized.BitVector32\n  isExternal: false\n  name: CreateSection\n  nameWithType: BitVector32.CreateSection\n  fullName: BitVector32.CreateSection\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Specialized/BitVector32.xml\n- uid: System.Collections.Specialized.BitVector32.Data*\n  parent: System.Collections.Specialized.BitVector32\n  isExternal: false\n  name: Data\n  nameWithType: BitVector32.Data\n  fullName: BitVector32.Data\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Specialized/BitVector32.xml\n- uid: System.Collections.Specialized.BitVector32.Equals*\n  parent: System.Collections.Specialized.BitVector32\n  isExternal: false\n  name: Equals\n  nameWithType: BitVector32.Equals\n  fullName: BitVector32.Equals\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Specialized/BitVector32.xml\n- uid: System.Collections.Specialized.BitVector32.GetHashCode*\n  parent: System.Collections.Specialized.BitVector32\n  isExternal: false\n  name: GetHashCode\n  nameWithType: BitVector32.GetHashCode\n  fullName: BitVector32.GetHashCode\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Specialized/BitVector32.xml\n- uid: System.Collections.Specialized.BitVector32.Item*\n  parent: System.Collections.Specialized.BitVector32\n  isExternal: false\n  name: Item\n  nameWithType: BitVector32.Item\n  fullName: BitVector32.Item\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Specialized/BitVector32.xml\n- uid: System.Collections.Specialized.BitVector32.ToString*\n  parent: System.Collections.Specialized.BitVector32\n  isExternal: false\n  name: ToString\n  nameWithType: BitVector32.ToString\n  fullName: BitVector32.ToString\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Specialized/BitVector32.xml\n"}