{"nodes":[{"content":"Discovers the attributes of a method and provides access to method metadata.","nodes":[{"pos":[0,76],"content":"Discovers the attributes of a method and provides access to method metadata.","nodes":[{"content":"Discovers the attributes of a method and provides access to method metadata.","pos":[0,76]}]}],"pos":[1982,2059],"yaml":true},{"content":"The <xref:System.Reflection.MethodInfo> class represents a method of a type. You can use a <xref:System.Reflection.MethodInfo> object to obtain information about the method that the object represents and to invoke the method. For example:  \n  \n-   You can determine the method's visibility by retrieving the values of the <xref:System.Reflection.MethodBase.IsFamilyAndAssembly%2A>, <xref:System.Reflection.MethodBase.IsFamilyOrAssembly%2A>, <xref:System.Reflection.MethodBase.IsPrivate%2A>, and <xref:System.Reflection.MethodBase.IsPublic%2A> properties.  \n  \n-   You can discover what attributes are applied to the method by retrieving the value of the <xref:System.Reflection.MethodBase.Attributes%2A> property or calling the <xref:System.Reflection.Assembly.GetCustomAttributes%2A>method.  \n  \n-   You can determine whether the method is a generic method, an open constructed generic method, or a closed constructed generic method, by retrieving the values of the <xref:System.Reflection.MethodInfo.IsGenericMethod%2A> and <xref:System.Reflection.MethodInfo.ContainsGenericParameters%2A> properties.  \n  \n-   You can get information about the method's parameters and return type from the <xref:System.Reflection.MethodBase.GetParameters%2A> method and the <xref:System.Reflection.MethodInfo.ReturnParameter%2A>, <xref:System.Reflection.MethodInfo.ReturnType%2A>, and <xref:System.Reflection.MethodInfo.ReturnTypeCustomAttributes%2A> properties.  \n  \n-   You can execute a method on a class instance by calling the <xref:System.Reflection.MethodBase.Invoke%2A> method.  \n  \n-   You can instantiate a <xref:System.Reflection.MethodInfo> object that represents a constructed generic method from one that represents a generic method definition by calling the <xref:System.Reflection.MethodInfo.MakeGenericMethod%2A> method.  \n  \n You can instantiate a <xref:System.Reflection.MethodInfo> instances by calling the <xref:System.Type.GetMethods%2A?displayProperty=fullName> or <xref:System.Type.GetMethod%2A?displayProperty=fullName> method, or by calling the <xref:System.Reflection.MethodInfo.MakeGenericMethod%2A?displayProperty=fullName> method of a <xref:System.Reflection.MethodInfo> object that represents a generic method definition.  \n  \n For a list of the invariant conditions for terms specific to generic methods, see the <xref:System.Reflection.MethodInfo.IsGenericMethod%2A> property. For a list of the invariant conditions for other terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A> property.","nodes":[{"pos":[0,238],"content":"The <xref:System.Reflection.MethodInfo> class represents a method of a type. You can use a <xref:System.Reflection.MethodInfo> object to obtain information about the method that the object represents and to invoke the method. For example:","nodes":[{"content":"The <xref:System.Reflection.MethodInfo> class represents a method of a type. You can use a <xref:System.Reflection.MethodInfo> object to obtain information about the method that the object represents and to invoke the method. For example:","pos":[0,238],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Reflection.MethodInfo&gt;</ph> class represents a method of a type.","pos":[0,76],"source":"The <xref:System.Reflection.MethodInfo> class represents a method of a type."},{"content":"You can use a <ph id=\"ph1\">&lt;xref:System.Reflection.MethodInfo&gt;</ph> object to obtain information about the method that the object represents and to invoke the method.","pos":[77,225],"source":" You can use a <xref:System.Reflection.MethodInfo> object to obtain information about the method that the object represents and to invoke the method."},{"content":"For example:","pos":[226,238]}]}]},{"pos":[248,554],"content":"You can determine the method's visibility by retrieving the values of the <xref:System.Reflection.MethodBase.IsFamilyAndAssembly%2A>, <xref:System.Reflection.MethodBase.IsFamilyOrAssembly%2A>, <xref:System.Reflection.MethodBase.IsPrivate%2A>, and <xref:System.Reflection.MethodBase.IsPublic%2A> properties.","nodes":[{"content":"You can determine the method's visibility by retrieving the values of the <ph id=\"ph1\">&lt;xref:System.Reflection.MethodBase.IsFamilyAndAssembly%2A&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Reflection.MethodBase.IsFamilyOrAssembly%2A&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Reflection.MethodBase.IsPrivate%2A&gt;</ph>, and <ph id=\"ph4\">&lt;xref:System.Reflection.MethodBase.IsPublic%2A&gt;</ph> properties.","pos":[0,306],"source":"You can determine the method's visibility by retrieving the values of the <xref:System.Reflection.MethodBase.IsFamilyAndAssembly%2A>, <xref:System.Reflection.MethodBase.IsFamilyOrAssembly%2A>, <xref:System.Reflection.MethodBase.IsPrivate%2A>, and <xref:System.Reflection.MethodBase.IsPublic%2A> properties."}]},{"pos":[564,791],"content":"You can discover what attributes are applied to the method by retrieving the value of the <xref:System.Reflection.MethodBase.Attributes%2A> property or calling the <xref:System.Reflection.Assembly.GetCustomAttributes%2A>method.","nodes":[{"content":"You can discover what attributes are applied to the method by retrieving the value of the <ph id=\"ph1\">&lt;xref:System.Reflection.MethodBase.Attributes%2A&gt;</ph> property or calling the <ph id=\"ph2\">&lt;xref:System.Reflection.Assembly.GetCustomAttributes%2A&gt;</ph>method.","pos":[0,227],"source":"You can discover what attributes are applied to the method by retrieving the value of the <xref:System.Reflection.MethodBase.Attributes%2A> property or calling the <xref:System.Reflection.Assembly.GetCustomAttributes%2A>method."}]},{"pos":[801,1102],"content":"You can determine whether the method is a generic method, an open constructed generic method, or a closed constructed generic method, by retrieving the values of the <xref:System.Reflection.MethodInfo.IsGenericMethod%2A> and <xref:System.Reflection.MethodInfo.ContainsGenericParameters%2A> properties.","nodes":[{"content":"You can determine whether the method is a generic method, an open constructed generic method, or a closed constructed generic method, by retrieving the values of the <ph id=\"ph1\">&lt;xref:System.Reflection.MethodInfo.IsGenericMethod%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Reflection.MethodInfo.ContainsGenericParameters%2A&gt;</ph> properties.","pos":[0,301],"source":"You can determine whether the method is a generic method, an open constructed generic method, or a closed constructed generic method, by retrieving the values of the <xref:System.Reflection.MethodInfo.IsGenericMethod%2A> and <xref:System.Reflection.MethodInfo.ContainsGenericParameters%2A> properties."}]},{"pos":[1112,1447],"content":"You can get information about the method's parameters and return type from the <xref:System.Reflection.MethodBase.GetParameters%2A> method and the <xref:System.Reflection.MethodInfo.ReturnParameter%2A>, <xref:System.Reflection.MethodInfo.ReturnType%2A>, and <xref:System.Reflection.MethodInfo.ReturnTypeCustomAttributes%2A> properties.","nodes":[{"content":"You can get information about the method's parameters and return type from the <ph id=\"ph1\">&lt;xref:System.Reflection.MethodBase.GetParameters%2A&gt;</ph> method and the <ph id=\"ph2\">&lt;xref:System.Reflection.MethodInfo.ReturnParameter%2A&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Reflection.MethodInfo.ReturnType%2A&gt;</ph>, and <ph id=\"ph4\">&lt;xref:System.Reflection.MethodInfo.ReturnTypeCustomAttributes%2A&gt;</ph> properties.","pos":[0,335],"source":"You can get information about the method's parameters and return type from the <xref:System.Reflection.MethodBase.GetParameters%2A> method and the <xref:System.Reflection.MethodInfo.ReturnParameter%2A>, <xref:System.Reflection.MethodInfo.ReturnType%2A>, and <xref:System.Reflection.MethodInfo.ReturnTypeCustomAttributes%2A> properties."}]},{"pos":[1457,1570],"content":"You can execute a method on a class instance by calling the <xref:System.Reflection.MethodBase.Invoke%2A> method.","nodes":[{"content":"You can execute a method on a class instance by calling the <ph id=\"ph1\">&lt;xref:System.Reflection.MethodBase.Invoke%2A&gt;</ph> method.","pos":[0,113],"source":"You can execute a method on a class instance by calling the <xref:System.Reflection.MethodBase.Invoke%2A> method."}]},{"pos":[1580,1822],"content":"You can instantiate a <xref:System.Reflection.MethodInfo> object that represents a constructed generic method from one that represents a generic method definition by calling the <xref:System.Reflection.MethodInfo.MakeGenericMethod%2A> method.","nodes":[{"content":"You can instantiate a <ph id=\"ph1\">&lt;xref:System.Reflection.MethodInfo&gt;</ph> object that represents a constructed generic method from one that represents a generic method definition by calling the <ph id=\"ph2\">&lt;xref:System.Reflection.MethodInfo.MakeGenericMethod%2A&gt;</ph> method.","pos":[0,242],"source":"You can instantiate a <xref:System.Reflection.MethodInfo> object that represents a constructed generic method from one that represents a generic method definition by calling the <xref:System.Reflection.MethodInfo.MakeGenericMethod%2A> method."}]},{"pos":[1829,2237],"content":"You can instantiate a <xref:System.Reflection.MethodInfo> instances by calling the <xref:System.Type.GetMethods%2A?displayProperty=fullName> or <xref:System.Type.GetMethod%2A?displayProperty=fullName> method, or by calling the <xref:System.Reflection.MethodInfo.MakeGenericMethod%2A?displayProperty=fullName> method of a <xref:System.Reflection.MethodInfo> object that represents a generic method definition.","nodes":[{"content":"You can instantiate a <ph id=\"ph1\">&lt;xref:System.Reflection.MethodInfo&gt;</ph> instances by calling the <ph id=\"ph2\">&lt;xref:System.Type.GetMethods%2A?displayProperty=fullName&gt;</ph> or <ph id=\"ph3\">&lt;xref:System.Type.GetMethod%2A?displayProperty=fullName&gt;</ph> method, or by calling the <ph id=\"ph4\">&lt;xref:System.Reflection.MethodInfo.MakeGenericMethod%2A?displayProperty=fullName&gt;</ph> method of a <ph id=\"ph5\">&lt;xref:System.Reflection.MethodInfo&gt;</ph> object that represents a generic method definition.","pos":[0,408],"source":"You can instantiate a <xref:System.Reflection.MethodInfo> instances by calling the <xref:System.Type.GetMethods%2A?displayProperty=fullName> or <xref:System.Type.GetMethod%2A?displayProperty=fullName> method, or by calling the <xref:System.Reflection.MethodInfo.MakeGenericMethod%2A?displayProperty=fullName> method of a <xref:System.Reflection.MethodInfo> object that represents a generic method definition."}]},{"pos":[2244,2531],"content":"For a list of the invariant conditions for terms specific to generic methods, see the <xref:System.Reflection.MethodInfo.IsGenericMethod%2A> property. For a list of the invariant conditions for other terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A> property.","nodes":[{"content":"For a list of the invariant conditions for terms specific to generic methods, see the <xref:System.Reflection.MethodInfo.IsGenericMethod%2A> property. For a list of the invariant conditions for other terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A> property.","pos":[0,287],"nodes":[{"content":"For a list of the invariant conditions for terms specific to generic methods, see the <ph id=\"ph1\">&lt;xref:System.Reflection.MethodInfo.IsGenericMethod%2A&gt;</ph> property.","pos":[0,150],"source":"For a list of the invariant conditions for terms specific to generic methods, see the <xref:System.Reflection.MethodInfo.IsGenericMethod%2A> property."},{"content":"For a list of the invariant conditions for other terms used in generic reflection, see the <ph id=\"ph1\">&lt;xref:System.Type.IsGenericType%2A&gt;</ph> property.","pos":[151,287],"source":" For a list of the invariant conditions for other terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A> property."}]}]}],"pos":[2070,4620],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Reflection.MethodInfo\"></xref> class.","nodes":[{"pos":[0,90],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.Reflection.MethodInfo\"></xref> class."}],"pos":[14351,14442],"yaml":true},{"content":"Creates a delegate of the specified type from this method.","nodes":[{"pos":[0,58],"content":"Creates a delegate of the specified type from this method.","nodes":[{"content":"Creates a delegate of the specified type from this method.","pos":[0,58]}]}],"pos":[15790,15849],"yaml":true},{"content":"The type of the delegate to create.","nodes":[{"pos":[0,35],"content":"The type of the delegate to create.","nodes":[{"content":"The type of the delegate to create.","pos":[0,35]}]}],"pos":[16014,16050],"yaml":true},{"content":"The delegate for this method.","nodes":[{"pos":[0,29],"content":"The delegate for this method.","nodes":[{"content":"The delegate for this method.","pos":[0,29]}]}],"pos":[16109,16139],"yaml":true},{"content":"Creates a delegate of the specified type with the specified target from this method.","nodes":[{"pos":[0,84],"content":"Creates a delegate of the specified type with the specified target from this method.","nodes":[{"content":"Creates a delegate of the specified type with the specified target from this method.","pos":[0,84]}]}],"pos":[17839,17924],"yaml":true},{"content":"The type of the delegate to create.","nodes":[{"pos":[0,35],"content":"The type of the delegate to create.","nodes":[{"content":"The type of the delegate to create.","pos":[0,35]}]}],"pos":[18104,18140],"yaml":true},{"content":"The object targeted by the delegate.","nodes":[{"pos":[0,36],"content":"The object targeted by the delegate.","nodes":[{"content":"The object targeted by the delegate.","pos":[0,36]}]}],"pos":[18202,18239],"yaml":true},{"content":"The delegate for this method.","nodes":[{"pos":[0,29],"content":"The delegate for this method.","nodes":[{"content":"The delegate for this method.","pos":[0,29]}]}],"pos":[18298,18328],"yaml":true},{"content":"Returns a value that indicates whether this instance is equal to a specified object.","nodes":[{"pos":[0,84],"content":"Returns a value that indicates whether this instance is equal to a specified object.","nodes":[{"content":"Returns a value that indicates whether this instance is equal to a specified object.","pos":[0,84]}]}],"pos":[19926,20011],"yaml":true},{"content":"An object to compare with this instance, or `null`.","nodes":[{"pos":[0,51],"content":"An object to compare with this instance, or <ph id=\"ph1\">`null`</ph>.","source":"An object to compare with this instance, or `null`."}],"pos":[20151,20203],"yaml":true},{"content":"`true` if <code>obj</code> equals the type and value of this instance; otherwise, `false`.","nodes":[{"pos":[0,90],"content":"<ph id=\"ph1\">`true`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">obj</ph><ept id=\"p1\">&lt;/code&gt;</ept> equals the type and value of this instance; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if <code>obj</code> equals the type and value of this instance; otherwise, `false`."}],"pos":[20261,20354],"yaml":true},{"content":"When overridden in a derived class, returns the <xref href=\"System.Reflection.MethodInfo\"></xref> object for the method on the direct or indirect base class in which the method represented by this instance was first declared.","nodes":[{"pos":[0,225],"content":"When overridden in a derived class, returns the <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph> object for the method on the direct or indirect base class in which the method represented by this instance was first declared.","source":"When overridden in a derived class, returns the <xref href=\"System.Reflection.MethodInfo\"></xref> object for the method on the direct or indirect base class in which the method represented by this instance was first declared."}],"pos":[21947,22173],"yaml":true},{"content":"The <xref:System.Reflection.MethodInfo.GetBaseDefinition%2A> method returns the first definition of the specified method in the class hierarchy. You can determine the type on which the first definition of the method is found by retrieving the value of the <xref:System.Reflection.MemberInfo.DeclaringType%2A> property on the returned <xref:System.Reflection.MethodInfo> object.  \n  \n The <xref:System.Reflection.MethodInfo.GetBaseDefinition%2A> method behaves as follows:  \n  \n-   If the current <xref:System.Reflection.MethodInfo> object represents an interface implementation, the <xref:System.Reflection.MethodInfo.GetBaseDefinition%2A> method returns the current <xref:System.Reflection.MethodInfo> object.  \n  \n-   If the current <xref:System.Reflection.MethodInfo> object represents a method that overrides a virtual definition in a base class, the <xref:System.Reflection.MethodInfo.GetBaseDefinition%2A> method returns a <xref:System.Reflection.MethodInfo> object that represents the virtual definition.  \n  \n-   If the current <xref:System.Reflection.MethodInfo> object represents a method that is specified with the `new` keyword in C# or the `Shadows` keyword in Visual Basic (as in `newslot`, as described in [Common Type System](~/docs/standard/base-types/common-type-system.md)), the <xref:System.Reflection.MethodInfo.GetBaseDefinition%2A> method returns the current <xref:System.Reflection.MethodInfo> object.  \n  \n-   If the current <xref:System.Reflection.MethodInfo> object represents an inherited method (that is, the current method does not provide its own implementation), the <xref:System.Reflection.MethodInfo.GetBaseDefinition%2A> method returns a <xref:System.Reflection.MethodInfo> object that represents the lowest method in the class hierarchy. For example, if `Base.ToString` overrides `Object.ToString`, and `Derived.ToString` overrides `Base.ToString`, calling the <xref:System.Reflection.MethodInfo.GetBaseDefinition%2A> method on a <xref:System.Reflection.MethodInfo> object that represents `Derived.ToString` returns a <xref:System.Reflection.MethodInfo> object that represents `Object.ToString`.  \n  \n-   If the current <xref:System.Reflection.MethodInfo> object represents a method that is not present in any base class, the <xref:System.Reflection.MethodInfo.GetBaseDefinition%2A> method returns the current <xref:System.Reflection.MethodInfo> object.  \n  \n You can determine whether the current method overrides a method in a base class by calling the <xref:System.Reflection.MethodInfo.GetBaseDefinition%2A> method. The following example implements an `IsOverride` method that does this.  \n  \n [!code-csharp[system.reflection.methodinfo.getbasedefinition#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.reflection.methodinfo.getbasedefinition/cs/IsOverride1.cs#2)]\n [!code-vb[system.reflection.methodinfo.getbasedefinition#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.reflection.methodinfo.getbasedefinition/vb/IsOverride1.vb#2)]  \n  \n To call the `GetBaseDefinition` method:  \n  \n1.  Get a <xref:System.Type> object that represents the type (the class or structure) that contains the property. If you are working with an object (an instance of a type), you can call its <xref:System.Object.GetType%2A> method. Otherwise, you can use the C#  operator or the Visual Basic  operator, as the example illustrates.  \n  \n2.  Get a <xref:System.Reflection.MethodInfo> object that represents the method in which you're interested. You can do this by getting an array of all methods from the <xref:System.Type.GetMethods%2A?displayProperty=fullName> method and then iterating the elements in the array, or you can retrieve the <xref:System.Reflection.MethodInfo> object that represents the method directly by calling the <xref:System.Type.GetMethod%28System.String%29?displayProperty=fullName> method and specifying the method name.  \n  \n3.  Call the <xref:System.Reflection.MethodInfo.GetBaseDefinition%2A> method to get the value of the <xref:System.Reflection.MethodInfo> object that represents the base method definition.","nodes":[{"pos":[0,377],"content":"The <xref:System.Reflection.MethodInfo.GetBaseDefinition%2A> method returns the first definition of the specified method in the class hierarchy. You can determine the type on which the first definition of the method is found by retrieving the value of the <xref:System.Reflection.MemberInfo.DeclaringType%2A> property on the returned <xref:System.Reflection.MethodInfo> object.","nodes":[{"content":"The <xref:System.Reflection.MethodInfo.GetBaseDefinition%2A> method returns the first definition of the specified method in the class hierarchy. You can determine the type on which the first definition of the method is found by retrieving the value of the <xref:System.Reflection.MemberInfo.DeclaringType%2A> property on the returned <xref:System.Reflection.MethodInfo> object.","pos":[0,377],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Reflection.MethodInfo.GetBaseDefinition%2A&gt;</ph> method returns the first definition of the specified method in the class hierarchy.","pos":[0,144],"source":"The <xref:System.Reflection.MethodInfo.GetBaseDefinition%2A> method returns the first definition of the specified method in the class hierarchy."},{"content":"You can determine the type on which the first definition of the method is found by retrieving the value of the <ph id=\"ph1\">&lt;xref:System.Reflection.MemberInfo.DeclaringType%2A&gt;</ph> property on the returned <ph id=\"ph2\">&lt;xref:System.Reflection.MethodInfo&gt;</ph> object.","pos":[145,377],"source":" You can determine the type on which the first definition of the method is found by retrieving the value of the <xref:System.Reflection.MemberInfo.DeclaringType%2A> property on the returned <xref:System.Reflection.MethodInfo> object."}]}]},{"pos":[384,471],"content":"The <xref:System.Reflection.MethodInfo.GetBaseDefinition%2A> method behaves as follows:","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Reflection.MethodInfo.GetBaseDefinition%2A&gt;</ph> method behaves as follows:","pos":[0,87],"source":"The <xref:System.Reflection.MethodInfo.GetBaseDefinition%2A> method behaves as follows:"}]},{"pos":[481,710],"content":"If the current <xref:System.Reflection.MethodInfo> object represents an interface implementation, the <xref:System.Reflection.MethodInfo.GetBaseDefinition%2A> method returns the current <xref:System.Reflection.MethodInfo> object.","nodes":[{"content":"If the current <ph id=\"ph1\">&lt;xref:System.Reflection.MethodInfo&gt;</ph> object represents an interface implementation, the <ph id=\"ph2\">&lt;xref:System.Reflection.MethodInfo.GetBaseDefinition%2A&gt;</ph> method returns the current <ph id=\"ph3\">&lt;xref:System.Reflection.MethodInfo&gt;</ph> object.","pos":[0,229],"source":"If the current <xref:System.Reflection.MethodInfo> object represents an interface implementation, the <xref:System.Reflection.MethodInfo.GetBaseDefinition%2A> method returns the current <xref:System.Reflection.MethodInfo> object."}]},{"pos":[720,1011],"content":"If the current <xref:System.Reflection.MethodInfo> object represents a method that overrides a virtual definition in a base class, the <xref:System.Reflection.MethodInfo.GetBaseDefinition%2A> method returns a <xref:System.Reflection.MethodInfo> object that represents the virtual definition.","nodes":[{"content":"If the current <ph id=\"ph1\">&lt;xref:System.Reflection.MethodInfo&gt;</ph> object represents a method that overrides a virtual definition in a base class, the <ph id=\"ph2\">&lt;xref:System.Reflection.MethodInfo.GetBaseDefinition%2A&gt;</ph> method returns a <ph id=\"ph3\">&lt;xref:System.Reflection.MethodInfo&gt;</ph> object that represents the virtual definition.","pos":[0,291],"source":"If the current <xref:System.Reflection.MethodInfo> object represents a method that overrides a virtual definition in a base class, the <xref:System.Reflection.MethodInfo.GetBaseDefinition%2A> method returns a <xref:System.Reflection.MethodInfo> object that represents the virtual definition."}]},{"pos":[1021,1425],"content":"If the current <ph id=\"ph1\">&lt;xref:System.Reflection.MethodInfo&gt;</ph> object represents a method that is specified with the <ph id=\"ph2\">`new`</ph> keyword in C# or the <ph id=\"ph3\">`Shadows`</ph> keyword in Visual Basic (as in <ph id=\"ph4\">`newslot`</ph>, as described in <bpt id=\"p1\">[</bpt>Common Type System<ept id=\"p1\">](~/docs/standard/base-types/common-type-system.md)</ept>), the <ph id=\"ph5\">&lt;xref:System.Reflection.MethodInfo.GetBaseDefinition%2A&gt;</ph> method returns the current <ph id=\"ph6\">&lt;xref:System.Reflection.MethodInfo&gt;</ph> object.","source":"If the current <xref:System.Reflection.MethodInfo> object represents a method that is specified with the `new` keyword in C# or the `Shadows` keyword in Visual Basic (as in `newslot`, as described in [Common Type System](~/docs/standard/base-types/common-type-system.md)), the <xref:System.Reflection.MethodInfo.GetBaseDefinition%2A> method returns the current <xref:System.Reflection.MethodInfo> object."},{"pos":[1435,2131],"content":"If the current <xref:System.Reflection.MethodInfo> object represents an inherited method (that is, the current method does not provide its own implementation), the <xref:System.Reflection.MethodInfo.GetBaseDefinition%2A> method returns a <xref:System.Reflection.MethodInfo> object that represents the lowest method in the class hierarchy. For example, if `Base.ToString` overrides `Object.ToString`, and `Derived.ToString` overrides `Base.ToString`, calling the <xref:System.Reflection.MethodInfo.GetBaseDefinition%2A> method on a <xref:System.Reflection.MethodInfo> object that represents `Derived.ToString` returns a <xref:System.Reflection.MethodInfo> object that represents `Object.ToString`.","nodes":[{"content":"If the current <ph id=\"ph1\">&lt;xref:System.Reflection.MethodInfo&gt;</ph> object represents an inherited method (that is, the current method does not provide its own implementation), the <ph id=\"ph2\">&lt;xref:System.Reflection.MethodInfo.GetBaseDefinition%2A&gt;</ph> method returns a <ph id=\"ph3\">&lt;xref:System.Reflection.MethodInfo&gt;</ph> object that represents the lowest method in the class hierarchy.","pos":[0,338],"source":"If the current <xref:System.Reflection.MethodInfo> object represents an inherited method (that is, the current method does not provide its own implementation), the <xref:System.Reflection.MethodInfo.GetBaseDefinition%2A> method returns a <xref:System.Reflection.MethodInfo> object that represents the lowest method in the class hierarchy."},{"content":"For example, if <ph id=\"ph1\">`Base.ToString`</ph> overrides <ph id=\"ph2\">`Object.ToString`</ph>, and <ph id=\"ph3\">`Derived.ToString`</ph> overrides <ph id=\"ph4\">`Base.ToString`</ph>, calling the <ph id=\"ph5\">&lt;xref:System.Reflection.MethodInfo.GetBaseDefinition%2A&gt;</ph> method on a <ph id=\"ph6\">&lt;xref:System.Reflection.MethodInfo&gt;</ph> object that represents <ph id=\"ph7\">`Derived.ToString`</ph> returns a <ph id=\"ph8\">&lt;xref:System.Reflection.MethodInfo&gt;</ph> object that represents <ph id=\"ph9\">`Object.ToString`</ph>.","pos":[339,696],"source":" For example, if `Base.ToString` overrides `Object.ToString`, and `Derived.ToString` overrides `Base.ToString`, calling the <xref:System.Reflection.MethodInfo.GetBaseDefinition%2A> method on a <xref:System.Reflection.MethodInfo> object that represents `Derived.ToString` returns a <xref:System.Reflection.MethodInfo> object that represents `Object.ToString`."}]},{"pos":[2141,2389],"content":"If the current <xref:System.Reflection.MethodInfo> object represents a method that is not present in any base class, the <xref:System.Reflection.MethodInfo.GetBaseDefinition%2A> method returns the current <xref:System.Reflection.MethodInfo> object.","nodes":[{"content":"If the current <ph id=\"ph1\">&lt;xref:System.Reflection.MethodInfo&gt;</ph> object represents a method that is not present in any base class, the <ph id=\"ph2\">&lt;xref:System.Reflection.MethodInfo.GetBaseDefinition%2A&gt;</ph> method returns the current <ph id=\"ph3\">&lt;xref:System.Reflection.MethodInfo&gt;</ph> object.","pos":[0,248],"source":"If the current <xref:System.Reflection.MethodInfo> object represents a method that is not present in any base class, the <xref:System.Reflection.MethodInfo.GetBaseDefinition%2A> method returns the current <xref:System.Reflection.MethodInfo> object."}]},{"pos":[2396,2627],"content":"You can determine whether the current method overrides a method in a base class by calling the <xref:System.Reflection.MethodInfo.GetBaseDefinition%2A> method. The following example implements an `IsOverride` method that does this.","nodes":[{"content":"You can determine whether the current method overrides a method in a base class by calling the <ph id=\"ph1\">&lt;xref:System.Reflection.MethodInfo.GetBaseDefinition%2A&gt;</ph> method.","pos":[0,159],"source":"You can determine whether the current method overrides a method in a base class by calling the <xref:System.Reflection.MethodInfo.GetBaseDefinition%2A> method."},{"content":"The following example implements an <ph id=\"ph1\">`IsOverride`</ph> method that does this.","pos":[160,231],"source":" The following example implements an `IsOverride` method that does this."}]},{"pos":[2634,2999],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>system.reflection.methodinfo.getbasedefinition#2<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.reflection.methodinfo.getbasedefinition/cs/IsOverride1.cs#2)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>system.reflection.methodinfo.getbasedefinition#2<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.reflection.methodinfo.getbasedefinition/vb/IsOverride1.vb#2)</ept><ept id=\"p3\">]</ept>","leadings":[""," "],"source":"[!code-csharp[system.reflection.methodinfo.getbasedefinition#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.reflection.methodinfo.getbasedefinition/cs/IsOverride1.cs#2)]\n[!code-vb[system.reflection.methodinfo.getbasedefinition#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.reflection.methodinfo.getbasedefinition/vb/IsOverride1.vb#2)]"},{"pos":[3006,3045],"content":"To call the <ph id=\"ph1\">`GetBaseDefinition`</ph> method:","source":"To call the `GetBaseDefinition` method:"},{"pos":[3055,3379],"content":"Get a <xref:System.Type> object that represents the type (the class or structure) that contains the property. If you are working with an object (an instance of a type), you can call its <xref:System.Object.GetType%2A> method. Otherwise, you can use the C#  operator or the Visual Basic  operator, as the example illustrates.","nodes":[{"content":"Get a <xref:System.Type> object that represents the type (the class or structure) that contains the property. If you are working with an object (an instance of a type), you can call its <xref:System.Object.GetType%2A> method. Otherwise, you can use the C#  operator or the Visual Basic  operator, as the example illustrates.","pos":[0,324],"nodes":[{"content":"Get a <ph id=\"ph1\">&lt;xref:System.Type&gt;</ph> object that represents the type (the class or structure) that contains the property.","pos":[0,109],"source":"Get a <xref:System.Type> object that represents the type (the class or structure) that contains the property."},{"content":"If you are working with an object (an instance of a type), you can call its <ph id=\"ph1\">&lt;xref:System.Object.GetType%2A&gt;</ph> method.","pos":[110,225],"source":" If you are working with an object (an instance of a type), you can call its <xref:System.Object.GetType%2A> method."},{"content":"Otherwise, you can use the C#  operator or the Visual Basic  operator, as the example illustrates.","pos":[226,324]}]}]},{"pos":[3389,3893],"content":"Get a <xref:System.Reflection.MethodInfo> object that represents the method in which you're interested. You can do this by getting an array of all methods from the <xref:System.Type.GetMethods%2A?displayProperty=fullName> method and then iterating the elements in the array, or you can retrieve the <xref:System.Reflection.MethodInfo> object that represents the method directly by calling the <xref:System.Type.GetMethod%28System.String%29?displayProperty=fullName> method and specifying the method name.","nodes":[{"content":"Get a <xref:System.Reflection.MethodInfo> object that represents the method in which you're interested. You can do this by getting an array of all methods from the <xref:System.Type.GetMethods%2A?displayProperty=fullName> method and then iterating the elements in the array, or you can retrieve the <xref:System.Reflection.MethodInfo> object that represents the method directly by calling the <xref:System.Type.GetMethod%28System.String%29?displayProperty=fullName> method and specifying the method name.","pos":[0,504],"nodes":[{"content":"Get a <ph id=\"ph1\">&lt;xref:System.Reflection.MethodInfo&gt;</ph> object that represents the method in which you're interested.","pos":[0,103],"source":"Get a <xref:System.Reflection.MethodInfo> object that represents the method in which you're interested."},{"content":"You can do this by getting an array of all methods from the <ph id=\"ph1\">&lt;xref:System.Type.GetMethods%2A?displayProperty=fullName&gt;</ph> method and then iterating the elements in the array, or you can retrieve the <ph id=\"ph2\">&lt;xref:System.Reflection.MethodInfo&gt;</ph> object that represents the method directly by calling the <ph id=\"ph3\">&lt;xref:System.Type.GetMethod%28System.String%29?displayProperty=fullName&gt;</ph> method and specifying the method name.","pos":[104,504],"source":" You can do this by getting an array of all methods from the <xref:System.Type.GetMethods%2A?displayProperty=fullName> method and then iterating the elements in the array, or you can retrieve the <xref:System.Reflection.MethodInfo> object that represents the method directly by calling the <xref:System.Type.GetMethod%28System.String%29?displayProperty=fullName> method and specifying the method name."}]}]},{"pos":[3903,4086],"content":"Call the <xref:System.Reflection.MethodInfo.GetBaseDefinition%2A> method to get the value of the <xref:System.Reflection.MethodInfo> object that represents the base method definition.","nodes":[{"content":"Call the <ph id=\"ph1\">&lt;xref:System.Reflection.MethodInfo.GetBaseDefinition%2A&gt;</ph> method to get the value of the <ph id=\"ph2\">&lt;xref:System.Reflection.MethodInfo&gt;</ph> object that represents the base method definition.","pos":[0,183],"source":"Call the <xref:System.Reflection.MethodInfo.GetBaseDefinition%2A> method to get the value of the <xref:System.Reflection.MethodInfo> object that represents the base method definition."}]}],"pos":[22184,26298],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Reflection.MethodInfo\"></xref> object for the first implementation of this method.","nodes":[{"pos":[0,103],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph> object for the first implementation of this method.","source":"A <xref href=\"System.Reflection.MethodInfo\"></xref> object for the first implementation of this method."}],"pos":[27005,27109],"yaml":true},{"content":"Returns an array of <xref href=\"System.Type\"></xref> objects that represent the type arguments of a generic method or the type parameters of a generic method definition.","nodes":[{"pos":[0,169],"content":"Returns an array of <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> objects that represent the type arguments of a generic method or the type parameters of a generic method definition.","source":"Returns an array of <xref href=\"System.Type\"></xref> objects that represent the type arguments of a generic method or the type parameters of a generic method definition."}],"pos":[28525,28695],"yaml":true},{"content":"The elements of the returned array are in the order in which they appear in the list of type parameters for the generic method.  \n  \n-   If the current method is a closed constructed method (that is, the <xref:System.Reflection.MethodInfo.ContainsGenericParameters%2A> property returns `false`), the array returned by the <xref:System.Reflection.MethodInfo.GetGenericArguments%2A> method contains the types that have been assigned to the generic type parameters of the generic method definition.  \n  \n-   If the current method is a generic method definition, the array contains the type parameters.  \n  \n-   If the current method is an open constructed method (that is, the <xref:System.Reflection.MethodInfo.ContainsGenericParameters%2A> property returns `true`) in which specific types have been assigned to some type parameters and type parameters of enclosing generic types have been assigned to other type parameters, the array contains both types and type parameters. Use the <xref:System.Type.IsGenericParameter%2A> property to tell them apart. For a demonstration of this scenario, see the code example for the <xref:System.Reflection.MethodInfo.ContainsGenericParameters%2A> property.  \n  \n For a list of the invariant conditions for terms specific to generic methods, see the <xref:System.Reflection.MethodInfo.IsGenericMethod%2A> property. For a list of the invariant conditions for other terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A?displayProperty=fullName> property.","nodes":[{"pos":[0,127],"content":"The elements of the returned array are in the order in which they appear in the list of type parameters for the generic method.","nodes":[{"content":"The elements of the returned array are in the order in which they appear in the list of type parameters for the generic method.","pos":[0,127]}]},{"pos":[137,495],"content":"If the current method is a closed constructed method (that is, the <ph id=\"ph1\">&lt;xref:System.Reflection.MethodInfo.ContainsGenericParameters%2A&gt;</ph> property returns <ph id=\"ph2\">`false`</ph>), the array returned by the <ph id=\"ph3\">&lt;xref:System.Reflection.MethodInfo.GetGenericArguments%2A&gt;</ph> method contains the types that have been assigned to the generic type parameters of the generic method definition.","source":"If the current method is a closed constructed method (that is, the <xref:System.Reflection.MethodInfo.ContainsGenericParameters%2A> property returns `false`), the array returned by the <xref:System.Reflection.MethodInfo.GetGenericArguments%2A> method contains the types that have been assigned to the generic type parameters of the generic method definition."},{"pos":[505,598],"content":"If the current method is a generic method definition, the array contains the type parameters.","nodes":[{"content":"If the current method is a generic method definition, the array contains the type parameters.","pos":[0,93]}]},{"pos":[608,1193],"content":"If the current method is an open constructed method (that is, the <xref:System.Reflection.MethodInfo.ContainsGenericParameters%2A> property returns `true`) in which specific types have been assigned to some type parameters and type parameters of enclosing generic types have been assigned to other type parameters, the array contains both types and type parameters. Use the <xref:System.Type.IsGenericParameter%2A> property to tell them apart. For a demonstration of this scenario, see the code example for the <xref:System.Reflection.MethodInfo.ContainsGenericParameters%2A> property.","nodes":[{"content":"If the current method is an open constructed method (that is, the <ph id=\"ph1\">&lt;xref:System.Reflection.MethodInfo.ContainsGenericParameters%2A&gt;</ph> property returns <ph id=\"ph2\">`true`</ph>) in which specific types have been assigned to some type parameters and type parameters of enclosing generic types have been assigned to other type parameters, the array contains both types and type parameters.","pos":[0,365],"source":"If the current method is an open constructed method (that is, the <xref:System.Reflection.MethodInfo.ContainsGenericParameters%2A> property returns `true`) in which specific types have been assigned to some type parameters and type parameters of enclosing generic types have been assigned to other type parameters, the array contains both types and type parameters."},{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Type.IsGenericParameter%2A&gt;</ph> property to tell them apart.","pos":[366,443],"source":" Use the <xref:System.Type.IsGenericParameter%2A> property to tell them apart."},{"content":"For a demonstration of this scenario, see the code example for the <ph id=\"ph1\">&lt;xref:System.Reflection.MethodInfo.ContainsGenericParameters%2A&gt;</ph> property.","pos":[444,585],"source":" For a demonstration of this scenario, see the code example for the <xref:System.Reflection.MethodInfo.ContainsGenericParameters%2A> property."}]},{"pos":[1200,1512],"content":"For a list of the invariant conditions for terms specific to generic methods, see the <xref:System.Reflection.MethodInfo.IsGenericMethod%2A> property. For a list of the invariant conditions for other terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A?displayProperty=fullName> property.","nodes":[{"content":"For a list of the invariant conditions for terms specific to generic methods, see the <xref:System.Reflection.MethodInfo.IsGenericMethod%2A> property. For a list of the invariant conditions for other terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A?displayProperty=fullName> property.","pos":[0,312],"nodes":[{"content":"For a list of the invariant conditions for terms specific to generic methods, see the <ph id=\"ph1\">&lt;xref:System.Reflection.MethodInfo.IsGenericMethod%2A&gt;</ph> property.","pos":[0,150],"source":"For a list of the invariant conditions for terms specific to generic methods, see the <xref:System.Reflection.MethodInfo.IsGenericMethod%2A> property."},{"content":"For a list of the invariant conditions for other terms used in generic reflection, see the <ph id=\"ph1\">&lt;xref:System.Type.IsGenericType%2A?displayProperty=fullName&gt;</ph> property.","pos":[151,312],"source":" For a list of the invariant conditions for other terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A?displayProperty=fullName> property."}]}]}],"pos":[28706,30229],"yaml":true,"extradata":"MT"},{"content":"An array of <xref href=\"System.Type\"></xref> objects that represent the type arguments of a generic method or the type parameters of a generic method definition. Returns an empty array if the current method is not a generic method.","nodes":[{"pos":[0,231],"content":"An array of <xref href=\"System.Type\"></xref> objects that represent the type arguments of a generic method or the type parameters of a generic method definition. Returns an empty array if the current method is not a generic method.","nodes":[{"content":"An array of <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> objects that represent the type arguments of a generic method or the type parameters of a generic method definition.","pos":[0,161],"source":"An array of <xref href=\"System.Type\"></xref> objects that represent the type arguments of a generic method or the type parameters of a generic method definition."},{"content":"Returns an empty array if the current method is not a generic method.","pos":[162,231]}]}],"pos":[31047,31279],"yaml":true},{"content":"This method is not supported.","nodes":[{"pos":[0,29],"content":"This method is not supported.","nodes":[{"content":"This method is not supported.","pos":[0,29]}]}],"pos":[31457,31487],"yaml":true},{"content":"Returns a <xref href=\"System.Reflection.MethodInfo\"></xref> object that represents a generic method definition from which the current method can be constructed.","nodes":[{"pos":[0,160],"content":"Returns a <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph> object that represents a generic method definition from which the current method can be constructed.","source":"Returns a <xref href=\"System.Reflection.MethodInfo\"></xref> object that represents a generic method definition from which the current method can be constructed."}],"pos":[33143,33304],"yaml":true},{"content":"A generic method definition is a template from which methods can be constructed. For example, from the generic method definition `T M<T>(T t)` (expressed in C# syntax; `Function M(Of T)(ByVal tVal As T) As T` in Visual Basic) you can construct and invoke the method `int M<int>(int t)` (`Function M(Of Integer)(ByVal tVal As Integer) As Integer` in Visual Basic). Given a <xref:System.Reflection.MethodInfo> object representing this constructed method, the <xref:System.Reflection.MethodInfo.GetGenericMethodDefinition%2A> method returns the generic method definition.  \n  \n If two constructed methods are created from the same generic method definition, the <xref:System.Reflection.MethodInfo.GetGenericMethodDefinition%2A> method returns the same <xref:System.Reflection.MethodInfo> object for both methods.  \n  \n If you call <xref:System.Reflection.MethodInfo.GetGenericMethodDefinition%2A> on a <xref:System.Reflection.MethodInfo> that already represents a generic method definition, it returns the current <xref:System.Reflection.MethodInfo>.  \n  \n If a generic method definition includes generic parameters of the declaring type, there will be a generic method definition specific to each constructed type. For example, consider the following C#, Visual Basic, and C++ code:  \n  \n```  \nclass B<U,V> {}  \nclass C<T> { public B<T,S> M<S>() {...}}  \n  \nClass B(Of U, V)  \nEnd Class  \nClass C(Of T)  \n    Public Function M(Of S)() As B(Of T, S)  \n        ...  \n    End Function  \nEnd Class   \n  \ngeneric <typename U, typename V> ref class B {};  \ngeneric <typename T> ref class C  \n{  \npublic:  \n    generic <typename S> B<T,S>^ M() {...};  \n};  \n```  \n  \n In the constructed type `C<int>` (`C(Of Integer)` in Visual Basic), the generic method `M` returns `B<int, S>`. In the open type `C<T>`, `M` returns `B<T, S>`. In both cases, the <xref:System.Reflection.MethodInfo.IsGenericMethodDefinition%2A> property returns `true` for the <xref:System.Reflection.MethodInfo> that represents `M`, so <xref:System.Reflection.MethodInfo.MakeGenericMethod%2A> can be called on both <xref:System.Reflection.MethodInfo> objects. In the case of the constructed type, the result of calling <xref:System.Reflection.MethodInfo.MakeGenericMethod%2A> is a <xref:System.Reflection.MethodInfo> that can be invoked. In the case of the open type, the <xref:System.Reflection.MethodInfo> returned by <xref:System.Reflection.MethodInfo.MakeGenericMethod%2A> cannot be invoked.  \n  \n For a list of the invariant conditions for terms specific to generic methods, see the <xref:System.Reflection.MethodInfo.IsGenericMethod%2A> property. For a list of the invariant conditions for other terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A> property.","nodes":[{"pos":[0,568],"content":"A generic method definition is a template from which methods can be constructed. For example, from the generic method definition `T M<T>(T t)` (expressed in C# syntax; `Function M(Of T)(ByVal tVal As T) As T` in Visual Basic) you can construct and invoke the method `int M<int>(int t)` (`Function M(Of Integer)(ByVal tVal As Integer) As Integer` in Visual Basic). Given a <xref:System.Reflection.MethodInfo> object representing this constructed method, the <xref:System.Reflection.MethodInfo.GetGenericMethodDefinition%2A> method returns the generic method definition.","nodes":[{"content":"A generic method definition is a template from which methods can be constructed.","pos":[0,80]},{"content":"For example, from the generic method definition <ph id=\"ph1\">`T M&lt;T&gt;(T t)`</ph> (expressed in C# syntax; <ph id=\"ph2\">`Function M(Of T)(ByVal tVal As T) As T`</ph> in Visual Basic) you can construct and invoke the method <ph id=\"ph3\">`int M&lt;int&gt;(int t)`</ph> (<ph id=\"ph4\">`Function M(Of Integer)(ByVal tVal As Integer) As Integer`</ph> in Visual Basic).","pos":[81,363],"source":" For example, from the generic method definition `T M<T>(T t)` (expressed in C# syntax; `Function M(Of T)(ByVal tVal As T) As T` in Visual Basic) you can construct and invoke the method `int M<int>(int t)` (`Function M(Of Integer)(ByVal tVal As Integer) As Integer` in Visual Basic)."},{"content":"Given a <ph id=\"ph1\">&lt;xref:System.Reflection.MethodInfo&gt;</ph> object representing this constructed method, the <ph id=\"ph2\">&lt;xref:System.Reflection.MethodInfo.GetGenericMethodDefinition%2A&gt;</ph> method returns the generic method definition.","pos":[364,568],"source":" Given a <xref:System.Reflection.MethodInfo> object representing this constructed method, the <xref:System.Reflection.MethodInfo.GetGenericMethodDefinition%2A> method returns the generic method definition."}]},{"pos":[575,809],"content":"If two constructed methods are created from the same generic method definition, the <xref:System.Reflection.MethodInfo.GetGenericMethodDefinition%2A> method returns the same <xref:System.Reflection.MethodInfo> object for both methods.","nodes":[{"content":"If two constructed methods are created from the same generic method definition, the <ph id=\"ph1\">&lt;xref:System.Reflection.MethodInfo.GetGenericMethodDefinition%2A&gt;</ph> method returns the same <ph id=\"ph2\">&lt;xref:System.Reflection.MethodInfo&gt;</ph> object for both methods.","pos":[0,234],"source":"If two constructed methods are created from the same generic method definition, the <xref:System.Reflection.MethodInfo.GetGenericMethodDefinition%2A> method returns the same <xref:System.Reflection.MethodInfo> object for both methods."}]},{"pos":[816,1047],"content":"If you call <xref:System.Reflection.MethodInfo.GetGenericMethodDefinition%2A> on a <xref:System.Reflection.MethodInfo> that already represents a generic method definition, it returns the current <xref:System.Reflection.MethodInfo>.","nodes":[{"content":"If you call <ph id=\"ph1\">&lt;xref:System.Reflection.MethodInfo.GetGenericMethodDefinition%2A&gt;</ph> on a <ph id=\"ph2\">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that already represents a generic method definition, it returns the current <ph id=\"ph3\">&lt;xref:System.Reflection.MethodInfo&gt;</ph>.","pos":[0,231],"source":"If you call <xref:System.Reflection.MethodInfo.GetGenericMethodDefinition%2A> on a <xref:System.Reflection.MethodInfo> that already represents a generic method definition, it returns the current <xref:System.Reflection.MethodInfo>."}]},{"pos":[1054,1280],"content":"If a generic method definition includes generic parameters of the declaring type, there will be a generic method definition specific to each constructed type. For example, consider the following C#, Visual Basic, and C++ code:","nodes":[{"content":"If a generic method definition includes generic parameters of the declaring type, there will be a generic method definition specific to each constructed type. For example, consider the following C#, Visual Basic, and C++ code:","pos":[0,226],"nodes":[{"content":"If a generic method definition includes generic parameters of the declaring type, there will be a generic method definition specific to each constructed type.","pos":[0,158]},{"content":"For example, consider the following C#, Visual Basic, and C++ code:","pos":[159,226]}]}]},{"pos":[1659,2454],"content":"In the constructed type `C<int>` (`C(Of Integer)` in Visual Basic), the generic method `M` returns `B<int, S>`. In the open type `C<T>`, `M` returns `B<T, S>`. In both cases, the <xref:System.Reflection.MethodInfo.IsGenericMethodDefinition%2A> property returns `true` for the <xref:System.Reflection.MethodInfo> that represents `M`, so <xref:System.Reflection.MethodInfo.MakeGenericMethod%2A> can be called on both <xref:System.Reflection.MethodInfo> objects. In the case of the constructed type, the result of calling <xref:System.Reflection.MethodInfo.MakeGenericMethod%2A> is a <xref:System.Reflection.MethodInfo> that can be invoked. In the case of the open type, the <xref:System.Reflection.MethodInfo> returned by <xref:System.Reflection.MethodInfo.MakeGenericMethod%2A> cannot be invoked.","nodes":[{"content":"In the constructed type <ph id=\"ph1\">`C&lt;int&gt;`</ph> (<ph id=\"ph2\">`C(Of Integer)`</ph> in Visual Basic), the generic method <ph id=\"ph3\">`M`</ph> returns <ph id=\"ph4\">`B&lt;int, S&gt;`</ph>.","pos":[0,111],"source":"In the constructed type `C<int>` (`C(Of Integer)` in Visual Basic), the generic method `M` returns `B<int, S>`."},{"content":"In the open type <ph id=\"ph1\">`C&lt;T&gt;`</ph>, <ph id=\"ph2\">`M`</ph> returns <ph id=\"ph3\">`B&lt;T, S&gt;`</ph>.","pos":[112,159],"source":" In the open type `C<T>`, `M` returns `B<T, S>`."},{"content":"In both cases, the <ph id=\"ph1\">&lt;xref:System.Reflection.MethodInfo.IsGenericMethodDefinition%2A&gt;</ph> property returns <ph id=\"ph2\">`true`</ph> for the <ph id=\"ph3\">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that represents <ph id=\"ph4\">`M`</ph>, so <ph id=\"ph5\">&lt;xref:System.Reflection.MethodInfo.MakeGenericMethod%2A&gt;</ph> can be called on both <ph id=\"ph6\">&lt;xref:System.Reflection.MethodInfo&gt;</ph> objects.","pos":[160,459],"source":" In both cases, the <xref:System.Reflection.MethodInfo.IsGenericMethodDefinition%2A> property returns `true` for the <xref:System.Reflection.MethodInfo> that represents `M`, so <xref:System.Reflection.MethodInfo.MakeGenericMethod%2A> can be called on both <xref:System.Reflection.MethodInfo> objects."},{"content":"In the case of the constructed type, the result of calling <ph id=\"ph1\">&lt;xref:System.Reflection.MethodInfo.MakeGenericMethod%2A&gt;</ph> is a <ph id=\"ph2\">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that can be invoked.","pos":[460,637],"source":" In the case of the constructed type, the result of calling <xref:System.Reflection.MethodInfo.MakeGenericMethod%2A> is a <xref:System.Reflection.MethodInfo> that can be invoked."},{"content":"In the case of the open type, the <ph id=\"ph1\">&lt;xref:System.Reflection.MethodInfo&gt;</ph> returned by <ph id=\"ph2\">&lt;xref:System.Reflection.MethodInfo.MakeGenericMethod%2A&gt;</ph> cannot be invoked.","pos":[638,795],"source":" In the case of the open type, the <xref:System.Reflection.MethodInfo> returned by <xref:System.Reflection.MethodInfo.MakeGenericMethod%2A> cannot be invoked."}]},{"pos":[2461,2748],"content":"For a list of the invariant conditions for terms specific to generic methods, see the <xref:System.Reflection.MethodInfo.IsGenericMethod%2A> property. For a list of the invariant conditions for other terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A> property.","nodes":[{"content":"For a list of the invariant conditions for terms specific to generic methods, see the <xref:System.Reflection.MethodInfo.IsGenericMethod%2A> property. For a list of the invariant conditions for other terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A> property.","pos":[0,287],"nodes":[{"content":"For a list of the invariant conditions for terms specific to generic methods, see the <ph id=\"ph1\">&lt;xref:System.Reflection.MethodInfo.IsGenericMethod%2A&gt;</ph> property.","pos":[0,150],"source":"For a list of the invariant conditions for terms specific to generic methods, see the <xref:System.Reflection.MethodInfo.IsGenericMethod%2A> property."},{"content":"For a list of the invariant conditions for other terms used in generic reflection, see the <ph id=\"ph1\">&lt;xref:System.Type.IsGenericType%2A&gt;</ph> property.","pos":[151,287],"source":" For a list of the invariant conditions for other terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A> property."}]}]}],"pos":[33315,36096],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Reflection.MethodInfo\"></xref> object representing a generic method definition from which the current method can be constructed.","nodes":[{"pos":[0,149],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph> object representing a generic method definition from which the current method can be constructed.","source":"A <xref href=\"System.Reflection.MethodInfo\"></xref> object representing a generic method definition from which the current method can be constructed."}],"pos":[37813,37963],"yaml":true},{"content":"The current method is not a generic method. That is, <xref href=\"System.Reflection.MethodInfo.IsGenericMethod\"></xref> returns `false`.","nodes":[{"pos":[0,135],"content":"The current method is not a generic method. That is, <xref href=\"System.Reflection.MethodInfo.IsGenericMethod\"></xref> returns `false`.","nodes":[{"content":"The current method is not a generic method.","pos":[0,43]},{"content":"That is, <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodInfo.IsGenericMethod\"&gt;&lt;/xref&gt;</ph> returns <ph id=\"ph2\">`false`</ph>.","pos":[44,135],"source":" That is, <xref href=\"System.Reflection.MethodInfo.IsGenericMethod\"></xref> returns `false`."}]}],"pos":[38156,38292],"yaml":true},{"content":"This method is not supported.","nodes":[{"pos":[0,29],"content":"This method is not supported.","nodes":[{"content":"This method is not supported.","pos":[0,29]}]}],"pos":[38394,38424],"yaml":true},{"content":"Returns the hash code for this instance.","nodes":[{"pos":[0,40],"content":"Returns the hash code for this instance.","nodes":[{"content":"Returns the hash code for this instance.","pos":[0,40]}]}],"pos":[39990,40031],"yaml":true},{"content":"A 32-bit signed integer hash code.","nodes":[{"pos":[0,34],"content":"A 32-bit signed integer hash code.","nodes":[{"content":"A 32-bit signed integer hash code.","pos":[0,34]}]}],"pos":[40165,40200],"yaml":true},{"content":"Substitutes the elements of an array of types for the type parameters of the current generic method definition, and returns a <xref href=\"System.Reflection.MethodInfo\"></xref> object representing the resulting constructed method.","nodes":[{"pos":[0,229],"content":"Substitutes the elements of an array of types for the type parameters of the current generic method definition, and returns a <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph> object representing the resulting constructed method.","source":"Substitutes the elements of an array of types for the type parameters of the current generic method definition, and returns a <xref href=\"System.Reflection.MethodInfo\"></xref> object representing the resulting constructed method."}],"pos":[41861,42091],"yaml":true},{"content":"The <xref:System.Reflection.MethodInfo.MakeGenericMethod%2A> method allows you to write code that assigns specific types to the type parameters of a generic method definition, thus creating a <xref:System.Reflection.MethodInfo> object that represents a particular constructed method. If the <xref:System.Reflection.MethodInfo.ContainsGenericParameters%2A> property of this <xref:System.Reflection.MethodInfo> object returns `true`, you can use it to invoke the method or to create a delegate to invoke the method.  \n  \n Methods constructed with the <xref:System.Reflection.MethodInfo.MakeGenericMethod%2A> method can be open, that is, some of their type arguments can be type parameters of enclosing generic types. You might use such open constructed methods when you generate dynamic assemblies. For example, consider the following C#, Visual Basic, and C++ code.  \n  \n```  \nclass C  \n{  \n    T N<T,U>(T t, U u) {...}  \n    public V M<V>(V v)  \n    {  \n        return N<V,int>(v, 42);  \n    }  \n}  \n  \nClass C  \n    Public Function N(Of T,U)(ByVal ta As T, ByVal ua As U) As T  \n        ...  \n    End Function  \n    Public Function M(Of V)(ByVal va As V ) As V  \n        Return N(Of V, Integer)(va, 42)  \n    End Function  \nEnd Class  \n  \nref class C  \n{  \nprivate:  \n    generic <typename T, typename U> T N(T t, U u) {...}  \npublic:  \n    generic <typename V> V M(V v)  \n    {  \n        return N<V, int>(v, 42);  \n    }  \n};  \n```  \n  \n The method body of `M` contains a call to method `N`, specifying the type parameter of `M` and the type <xref:System.Int32>. The <xref:System.Reflection.MethodInfo.IsGenericMethodDefinition%2A> property returns `false` for method `N<V,int>`. The <xref:System.Reflection.MethodInfo.ContainsGenericParameters%2A> property returns `true`, so method `N<V,int>` cannot be invoked.  \n  \n For a list of the invariant conditions for terms specific to generic methods, see the <xref:System.Reflection.MethodInfo.IsGenericMethod%2A> property. For a list of the invariant conditions for other terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A> property.","nodes":[{"pos":[0,513],"content":"The <xref:System.Reflection.MethodInfo.MakeGenericMethod%2A> method allows you to write code that assigns specific types to the type parameters of a generic method definition, thus creating a <xref:System.Reflection.MethodInfo> object that represents a particular constructed method. If the <xref:System.Reflection.MethodInfo.ContainsGenericParameters%2A> property of this <xref:System.Reflection.MethodInfo> object returns `true`, you can use it to invoke the method or to create a delegate to invoke the method.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Reflection.MethodInfo.MakeGenericMethod%2A&gt;</ph> method allows you to write code that assigns specific types to the type parameters of a generic method definition, thus creating a <ph id=\"ph2\">&lt;xref:System.Reflection.MethodInfo&gt;</ph> object that represents a particular constructed method.","pos":[0,283],"source":"The <xref:System.Reflection.MethodInfo.MakeGenericMethod%2A> method allows you to write code that assigns specific types to the type parameters of a generic method definition, thus creating a <xref:System.Reflection.MethodInfo> object that represents a particular constructed method."},{"content":"If the <ph id=\"ph1\">&lt;xref:System.Reflection.MethodInfo.ContainsGenericParameters%2A&gt;</ph> property of this <ph id=\"ph2\">&lt;xref:System.Reflection.MethodInfo&gt;</ph> object returns <ph id=\"ph3\">`true`</ph>, you can use it to invoke the method or to create a delegate to invoke the method.","pos":[284,513],"source":" If the <xref:System.Reflection.MethodInfo.ContainsGenericParameters%2A> property of this <xref:System.Reflection.MethodInfo> object returns `true`, you can use it to invoke the method or to create a delegate to invoke the method."}]},{"pos":[520,864],"content":"Methods constructed with the <xref:System.Reflection.MethodInfo.MakeGenericMethod%2A> method can be open, that is, some of their type arguments can be type parameters of enclosing generic types. You might use such open constructed methods when you generate dynamic assemblies. For example, consider the following C#, Visual Basic, and C++ code.","nodes":[{"content":"Methods constructed with the <xref:System.Reflection.MethodInfo.MakeGenericMethod%2A> method can be open, that is, some of their type arguments can be type parameters of enclosing generic types. You might use such open constructed methods when you generate dynamic assemblies. For example, consider the following C#, Visual Basic, and C++ code.","pos":[0,344],"nodes":[{"content":"Methods constructed with the <ph id=\"ph1\">&lt;xref:System.Reflection.MethodInfo.MakeGenericMethod%2A&gt;</ph> method can be open, that is, some of their type arguments can be type parameters of enclosing generic types.","pos":[0,194],"source":"Methods constructed with the <xref:System.Reflection.MethodInfo.MakeGenericMethod%2A> method can be open, that is, some of their type arguments can be type parameters of enclosing generic types."},{"content":"You might use such open constructed methods when you generate dynamic assemblies.","pos":[195,276]},{"content":"For example, consider the following C#, Visual Basic, and C++ code.","pos":[277,344]}]}]},{"pos":[1440,1815],"content":"The method body of `M` contains a call to method `N`, specifying the type parameter of `M` and the type <xref:System.Int32>. The <xref:System.Reflection.MethodInfo.IsGenericMethodDefinition%2A> property returns `false` for method `N<V,int>`. The <xref:System.Reflection.MethodInfo.ContainsGenericParameters%2A> property returns `true`, so method `N<V,int>` cannot be invoked.","nodes":[{"content":"The method body of <ph id=\"ph1\">`M`</ph> contains a call to method <ph id=\"ph2\">`N`</ph>, specifying the type parameter of <ph id=\"ph3\">`M`</ph> and the type <ph id=\"ph4\">&lt;xref:System.Int32&gt;</ph>.","pos":[0,124],"source":"The method body of `M` contains a call to method `N`, specifying the type parameter of `M` and the type <xref:System.Int32>."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Reflection.MethodInfo.IsGenericMethodDefinition%2A&gt;</ph> property returns <ph id=\"ph2\">`false`</ph> for method <ph id=\"ph3\">`N&lt;V,int&gt;`</ph>.","pos":[125,241],"source":" The <xref:System.Reflection.MethodInfo.IsGenericMethodDefinition%2A> property returns `false` for method `N<V,int>`."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Reflection.MethodInfo.ContainsGenericParameters%2A&gt;</ph> property returns <ph id=\"ph2\">`true`</ph>, so method <ph id=\"ph3\">`N&lt;V,int&gt;`</ph> cannot be invoked.","pos":[242,375],"source":" The <xref:System.Reflection.MethodInfo.ContainsGenericParameters%2A> property returns `true`, so method `N<V,int>` cannot be invoked."}]},{"pos":[1822,2109],"content":"For a list of the invariant conditions for terms specific to generic methods, see the <xref:System.Reflection.MethodInfo.IsGenericMethod%2A> property. For a list of the invariant conditions for other terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A> property.","nodes":[{"content":"For a list of the invariant conditions for terms specific to generic methods, see the <xref:System.Reflection.MethodInfo.IsGenericMethod%2A> property. For a list of the invariant conditions for other terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A> property.","pos":[0,287],"nodes":[{"content":"For a list of the invariant conditions for terms specific to generic methods, see the <ph id=\"ph1\">&lt;xref:System.Reflection.MethodInfo.IsGenericMethod%2A&gt;</ph> property.","pos":[0,150],"source":"For a list of the invariant conditions for terms specific to generic methods, see the <xref:System.Reflection.MethodInfo.IsGenericMethod%2A> property."},{"content":"For a list of the invariant conditions for other terms used in generic reflection, see the <ph id=\"ph1\">&lt;xref:System.Type.IsGenericType%2A&gt;</ph> property.","pos":[151,287],"source":" For a list of the invariant conditions for other terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A> property."}]}]}],"pos":[42102,44251],"yaml":true,"extradata":"MT"},{"content":"An array of types to be substituted for the type parameters of the current generic method definition.","nodes":[{"pos":[0,101],"content":"An array of types to be substituted for the type parameters of the current generic method definition.","nodes":[{"content":"An array of types to be substituted for the type parameters of the current generic method definition.","pos":[0,101]}]}],"pos":[45562,45664],"yaml":true},{"content":"A <xref href=\"System.Reflection.MethodInfo\"></xref> object that represents the constructed method formed by substituting the elements of <code>typeArguments</code> for the type parameters of the current generic method definition.","nodes":[{"pos":[0,229],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph> object that represents the constructed method formed by substituting the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">typeArguments</ph><ept id=\"p1\">&lt;/code&gt;</ept> for the type parameters of the current generic method definition.","source":"A <xref href=\"System.Reflection.MethodInfo\"></xref> object that represents the constructed method formed by substituting the elements of <code>typeArguments</code> for the type parameters of the current generic method definition."}],"pos":[45736,45966],"yaml":true},{"content":"The current <xref href=\"System.Reflection.MethodInfo\"></xref> does not represent a generic method definition. That is, <xref href=\"System.Reflection.MethodInfo.IsGenericMethodDefinition\"></xref> returns `false`.","nodes":[{"pos":[0,211],"content":"The current <xref href=\"System.Reflection.MethodInfo\"></xref> does not represent a generic method definition. That is, <xref href=\"System.Reflection.MethodInfo.IsGenericMethodDefinition\"></xref> returns `false`.","nodes":[{"content":"The current <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph> does not represent a generic method definition.","pos":[0,109],"source":"The current <xref href=\"System.Reflection.MethodInfo\"></xref> does not represent a generic method definition."},{"content":"That is, <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodInfo.IsGenericMethodDefinition\"&gt;&lt;/xref&gt;</ph> returns <ph id=\"ph2\">`false`</ph>.","pos":[110,211],"source":" That is, <xref href=\"System.Reflection.MethodInfo.IsGenericMethodDefinition\"></xref> returns `false`."}]}],"pos":[46150,46362],"yaml":true},{"content":"<code>typeArguments</code> is `null`.  \n  \n -or-  \n  \n Any element of <code>typeArguments</code> is `null`.","nodes":[{"pos":[0,37],"content":"<ph id=\"ph1\">&lt;code&gt;typeArguments&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>typeArguments</code> is `null`."},{"pos":[44,48],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[55,107],"content":"Any element of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">typeArguments</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">`null`</ph>.","source":"Any element of <code>typeArguments</code> is `null`."}],"pos":[46464,46578],"yaml":true},{"content":"The number of elements in <code>typeArguments</code> is not the same as the number of type parameters of the current generic method definition.  \n  \n -or-  \n  \n An element of <code>typeArguments</code> does not satisfy the constraints specified for the corresponding type parameter of the current generic method definition.","nodes":[{"pos":[0,143],"content":"The number of elements in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">typeArguments</ph><ept id=\"p1\">&lt;/code&gt;</ept> is not the same as the number of type parameters of the current generic method definition.","source":"The number of elements in <code>typeArguments</code> is not the same as the number of type parameters of the current generic method definition."},{"pos":[150,154],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[161,323],"content":"An element of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">typeArguments</ph><ept id=\"p1\">&lt;/code&gt;</ept> does not satisfy the constraints specified for the corresponding type parameter of the current generic method definition.","source":"An element of <code>typeArguments</code> does not satisfy the constraints specified for the corresponding type parameter of the current generic method definition."}],"pos":[46672,47002],"yaml":true},{"content":"This method is not supported.","nodes":[{"pos":[0,29],"content":"This method is not supported.","nodes":[{"content":"This method is not supported.","pos":[0,29]}]}],"pos":[47104,47134],"yaml":true},{"content":"Gets a <xref href=\"System.Reflection.MemberTypes\"></xref> value indicating that this member is a method.","nodes":[{"pos":[0,104],"content":"Gets a <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MemberTypes\"&gt;&lt;/xref&gt;</ph> value indicating that this member is a method.","source":"Gets a <xref href=\"System.Reflection.MemberTypes\"></xref> value indicating that this member is a method."}],"pos":[48615,48720],"yaml":true},{"content":"This property overrides <xref:System.Reflection.MemberInfo.MemberType%2A?displayProperty=fullName>. Therefore, when you examine a set of <xref:System.Reflection.MemberInfo> objects — for example, the array returned by <xref:System.Type.GetMembers%2A> — the <xref:System.Reflection.MemberInfo.MemberType%2A> property returns <xref:System.Reflection.MemberTypes?displayProperty=fullName> only when a given member is a method.  \n  \n To get the `MemberType` property, first get the class `Type`. From the `Type`, get the `MethodInfo`. From the `MethodInfo`, get the `MemberType`.","nodes":[{"pos":[0,423],"content":"This property overrides <xref:System.Reflection.MemberInfo.MemberType%2A?displayProperty=fullName>. Therefore, when you examine a set of <xref:System.Reflection.MemberInfo> objects — for example, the array returned by <xref:System.Type.GetMembers%2A> — the <xref:System.Reflection.MemberInfo.MemberType%2A> property returns <xref:System.Reflection.MemberTypes?displayProperty=fullName> only when a given member is a method.","nodes":[{"content":"This property overrides <xref:System.Reflection.MemberInfo.MemberType%2A?displayProperty=fullName>. Therefore, when you examine a set of <xref:System.Reflection.MemberInfo> objects — for example, the array returned by <xref:System.Type.GetMembers%2A> — the <xref:System.Reflection.MemberInfo.MemberType%2A> property returns <xref:System.Reflection.MemberTypes?displayProperty=fullName> only when a given member is a method.","pos":[0,423],"nodes":[{"content":"This property overrides <ph id=\"ph1\">&lt;xref:System.Reflection.MemberInfo.MemberType%2A?displayProperty=fullName&gt;</ph>.","pos":[0,99],"source":"This property overrides <xref:System.Reflection.MemberInfo.MemberType%2A?displayProperty=fullName>."},{"content":"Therefore, when you examine a set of <ph id=\"ph1\">&lt;xref:System.Reflection.MemberInfo&gt;</ph> objects — for example, the array returned by <ph id=\"ph2\">&lt;xref:System.Type.GetMembers%2A&gt;</ph> — the <ph id=\"ph3\">&lt;xref:System.Reflection.MemberInfo.MemberType%2A&gt;</ph> property returns <ph id=\"ph4\">&lt;xref:System.Reflection.MemberTypes?displayProperty=fullName&gt;</ph> only when a given member is a method.","pos":[100,423],"source":" Therefore, when you examine a set of <xref:System.Reflection.MemberInfo> objects — for example, the array returned by <xref:System.Type.GetMembers%2A> — the <xref:System.Reflection.MemberInfo.MemberType%2A> property returns <xref:System.Reflection.MemberTypes?displayProperty=fullName> only when a given member is a method."}]}]},{"pos":[430,575],"content":"To get the `MemberType` property, first get the class `Type`. From the `Type`, get the `MethodInfo`. From the `MethodInfo`, get the `MemberType`.","nodes":[{"content":"To get the <ph id=\"ph1\">`MemberType`</ph> property, first get the class <ph id=\"ph2\">`Type`</ph>.","pos":[0,61],"source":"To get the `MemberType` property, first get the class `Type`."},{"content":"From the <ph id=\"ph1\">`Type`</ph>, get the <ph id=\"ph2\">`MethodInfo`</ph>.","pos":[62,100],"source":" From the `Type`, get the `MethodInfo`."},{"content":"From the <ph id=\"ph1\">`MethodInfo`</ph>, get the <ph id=\"ph2\">`MemberType`</ph>.","pos":[101,145],"source":" From the `MethodInfo`, get the `MemberType`."}]}],"pos":[48731,49311],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Reflection.MemberTypes\"></xref> value indicating that this member is a method.","nodes":[{"pos":[0,99],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MemberTypes\"&gt;&lt;/xref&gt;</ph> value indicating that this member is a method.","source":"A <xref href=\"System.Reflection.MemberTypes\"></xref> value indicating that this member is a method."}],"pos":[50044,50144],"yaml":true},{"content":"Indicates whether two <xref href=\"System.Reflection.MethodInfo\"></xref> objects are equal.","nodes":[{"pos":[0,90],"content":"Indicates whether two <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph> objects are equal.","source":"Indicates whether two <xref href=\"System.Reflection.MethodInfo\"></xref> objects are equal."}],"pos":[51728,51819],"yaml":true},{"content":"The first object to compare.","nodes":[{"pos":[0,28],"content":"The first object to compare.","nodes":[{"content":"The first object to compare.","pos":[0,28]}]}],"pos":[52037,52066],"yaml":true},{"content":"The second object to compare.","nodes":[{"pos":[0,29],"content":"The second object to compare.","nodes":[{"content":"The second object to compare.","pos":[0,29]}]}],"pos":[52142,52172],"yaml":true},{"content":"`true` if <code>left</code> is equal to <code>right</code>; otherwise, `false`.","nodes":[{"pos":[0,79],"content":"<ph id=\"ph1\">`true`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">left</ph><ept id=\"p1\">&lt;/code&gt;</ept> is equal to <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">right</ph><ept id=\"p2\">&lt;/code&gt;</ept>; otherwise, <ph id=\"ph4\">`false`</ph>.","source":"`true` if <code>left</code> is equal to <code>right</code>; otherwise, `false`."}],"pos":[52230,52312],"yaml":true},{"content":"Indicates whether two <xref href=\"System.Reflection.MethodInfo\"></xref> objects are not equal.","nodes":[{"pos":[0,94],"content":"Indicates whether two <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph> objects are not equal.","source":"Indicates whether two <xref href=\"System.Reflection.MethodInfo\"></xref> objects are not equal."}],"pos":[53765,53860],"yaml":true},{"content":"The first object to compare.","nodes":[{"pos":[0,28],"content":"The first object to compare.","nodes":[{"content":"The first object to compare.","pos":[0,28]}]}],"pos":[54080,54109],"yaml":true},{"content":"The second object to compare.","nodes":[{"pos":[0,29],"content":"The second object to compare.","nodes":[{"content":"The second object to compare.","pos":[0,29]}]}],"pos":[54185,54215],"yaml":true},{"content":"`true` if <code>left</code> is not equal to <code>right</code>; otherwise, `false`.","nodes":[{"pos":[0,83],"content":"<ph id=\"ph1\">`true`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">left</ph><ept id=\"p1\">&lt;/code&gt;</ept> is not equal to <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">right</ph><ept id=\"p2\">&lt;/code&gt;</ept>; otherwise, <ph id=\"ph4\">`false`</ph>.","source":"`true` if <code>left</code> is not equal to <code>right</code>; otherwise, `false`."}],"pos":[54273,54359],"yaml":true},{"content":"Gets a <xref href=\"System.Reflection.ParameterInfo\"></xref> object that contains information about the return type of the method, such as whether the return type has custom modifiers.","nodes":[{"pos":[0,183],"content":"Gets a <ph id=\"ph1\">&lt;xref href=\"System.Reflection.ParameterInfo\"&gt;&lt;/xref&gt;</ph> object that contains information about the return type of the method, such as whether the return type has custom modifiers.","source":"Gets a <xref href=\"System.Reflection.ParameterInfo\"></xref> object that contains information about the return type of the method, such as whether the return type has custom modifiers."}],"pos":[55599,55783],"yaml":true},{"content":"Compiler designers can use the <xref:System.Reflection.ParameterInfo> object returned by this property to discover whether custom modifiers, such as <xref:Microsoft.VisualC.IsConstModifier>, have been applied to the return type.","nodes":[{"pos":[0,228],"content":"Compiler designers can use the <xref:System.Reflection.ParameterInfo> object returned by this property to discover whether custom modifiers, such as <xref:Microsoft.VisualC.IsConstModifier>, have been applied to the return type.","nodes":[{"content":"Compiler designers can use the <ph id=\"ph1\">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> object returned by this property to discover whether custom modifiers, such as <ph id=\"ph2\">&lt;xref:Microsoft.VisualC.IsConstModifier&gt;</ph>, have been applied to the return type.","pos":[0,228],"source":"Compiler designers can use the <xref:System.Reflection.ParameterInfo> object returned by this property to discover whether custom modifiers, such as <xref:Microsoft.VisualC.IsConstModifier>, have been applied to the return type."}]}],"pos":[55794,56023],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Reflection.ParameterInfo\"></xref> object that contains information about the return type.","nodes":[{"pos":[0,110],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.ParameterInfo\"&gt;&lt;/xref&gt;</ph> object that contains information about the return type.","source":"A <xref href=\"System.Reflection.ParameterInfo\"></xref> object that contains information about the return type."}],"pos":[56193,56304],"yaml":true},{"content":"This method is not implemented.","nodes":[{"pos":[0,31],"content":"This method is not implemented.","nodes":[{"content":"This method is not implemented.","pos":[0,31]}]}],"pos":[56482,56514],"yaml":true},{"content":"Gets the return type of this method.","nodes":[{"pos":[0,36],"content":"Gets the return type of this method.","nodes":[{"content":"Gets the return type of this method.","pos":[0,36]}]}],"pos":[57995,58032],"yaml":true},{"content":"To get the return type property, first get the class `Type`. From the `Type`, get the `MethodInfo`. From the `MethodInfo`, get the `ReturnType`.","nodes":[{"pos":[0,144],"content":"To get the return type property, first get the class `Type`. From the `Type`, get the `MethodInfo`. From the `MethodInfo`, get the `ReturnType`.","nodes":[{"content":"To get the return type property, first get the class <ph id=\"ph1\">`Type`</ph>.","pos":[0,60],"source":"To get the return type property, first get the class `Type`."},{"content":"From the <ph id=\"ph1\">`Type`</ph>, get the <ph id=\"ph2\">`MethodInfo`</ph>.","pos":[61,99],"source":" From the `Type`, get the `MethodInfo`."},{"content":"From the <ph id=\"ph1\">`MethodInfo`</ph>, get the <ph id=\"ph2\">`ReturnType`</ph>.","pos":[100,144],"source":" From the `MethodInfo`, get the `ReturnType`."}]}],"pos":[58043,58188],"yaml":true,"extradata":"MT"},{"content":"The return type of this method.","nodes":[{"pos":[0,31],"content":"The return type of this method.","nodes":[{"content":"The return type of this method.","pos":[0,31]}]}],"pos":[58884,58916],"yaml":true},{"content":"Gets the custom attributes for the return type.","nodes":[{"pos":[0,47],"content":"Gets the custom attributes for the return type.","nodes":[{"content":"Gets the custom attributes for the return type.","pos":[0,47]}]}],"pos":[60563,60611],"yaml":true},{"content":"An `ICustomAttributeProvider` object representing the custom attributes for the return type.","nodes":[{"pos":[0,92],"content":"An <ph id=\"ph1\">`ICustomAttributeProvider`</ph> object representing the custom attributes for the return type.","source":"An `ICustomAttributeProvider` object representing the custom attributes for the return type."}],"pos":[60815,60908],"yaml":true},{"content":"Maps a set of names to a corresponding set of dispatch identifiers.","nodes":[{"pos":[0,67],"content":"Maps a set of names to a corresponding set of dispatch identifiers.","nodes":[{"content":"Maps a set of names to a corresponding set of dispatch identifiers.","pos":[0,67]}]}],"pos":[62737,62805],"yaml":true},{"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library.","nodes":[{"pos":[0,186],"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library.","nodes":[{"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code.","pos":[0,109]},{"content":"For more information about <ph id=\"ph1\">`IDispatch::GetIDsOfNames`</ph>, see the MSDN Library.","pos":[110,186],"source":" For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library."}]}],"pos":[62816,63003],"yaml":true,"extradata":"MT"},{"content":"Reserved for future use. Must be IID_NULL.","nodes":[{"pos":[0,42],"content":"Reserved for future use. Must be IID_NULL.","nodes":[{"content":"Reserved for future use. Must be IID_NULL.","pos":[0,42],"nodes":[{"content":"Reserved for future use.","pos":[0,24]},{"content":"Must be IID_NULL.","pos":[25,42]}]}]}],"pos":[63207,63250],"yaml":true},{"content":"Passed-in array of names to be mapped.","nodes":[{"pos":[0,38],"content":"Passed-in array of names to be mapped.","nodes":[{"content":"Passed-in array of names to be mapped.","pos":[0,38]}]}],"pos":[63315,63354],"yaml":true},{"content":"Count of the names to be mapped.","nodes":[{"pos":[0,32],"content":"Count of the names to be mapped.","nodes":[{"content":"Count of the names to be mapped.","pos":[0,32]}]}],"pos":[63416,63449],"yaml":true},{"content":"The locale context in which to interpret the names.","nodes":[{"pos":[0,51],"content":"The locale context in which to interpret the names.","nodes":[{"content":"The locale context in which to interpret the names.","pos":[0,51]}]}],"pos":[63509,63561],"yaml":true},{"content":"Caller-allocated array that receives the IDs corresponding to the names.","nodes":[{"pos":[0,72],"content":"Caller-allocated array that receives the IDs corresponding to the names.","nodes":[{"content":"Caller-allocated array that receives the IDs corresponding to the names.","pos":[0,72]}]}],"pos":[63625,63698],"yaml":true},{"content":"Late-bound access using the COM <code>IDispatch</code> interface is not supported.","nodes":[{"pos":[0,82],"content":"Late-bound access using the COM <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">IDispatch</ph><ept id=\"p1\">&lt;/code&gt;</ept> interface is not supported.","source":"Late-bound access using the COM <code>IDispatch</code> interface is not supported."}],"pos":[63917,64000],"yaml":true},{"content":"Provides access to the <xref href=\"System.Object.GetType\"></xref> method from COM.","nodes":[{"pos":[0,82],"content":"Provides access to the <ph id=\"ph1\">&lt;xref href=\"System.Object.GetType\"&gt;&lt;/xref&gt;</ph> method from COM.","source":"Provides access to the <xref href=\"System.Object.GetType\"></xref> method from COM."}],"pos":[65087,65170],"yaml":true},{"content":"A <xref href=\"System.Type\"></xref> object representing the <xref href=\"System.Reflection.MethodInfo\"></xref> type.","nodes":[{"pos":[0,114],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> object representing the <ph id=\"ph2\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph> type.","source":"A <xref href=\"System.Type\"></xref> object representing the <xref href=\"System.Reflection.MethodInfo\"></xref> type."}],"pos":[65296,65411],"yaml":true},{"content":"Retrieves the type information for an object, which can be used to get the type information for an interface.","nodes":[{"pos":[0,109],"content":"Retrieves the type information for an object, which can be used to get the type information for an interface.","nodes":[{"content":"Retrieves the type information for an object, which can be used to get the type information for an interface.","pos":[0,109]}]}],"pos":[66827,66937],"yaml":true},{"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetTypeInfo`, see the MSDN Library.","nodes":[{"pos":[0,184],"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetTypeInfo`, see the MSDN Library.","nodes":[{"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code.","pos":[0,109]},{"content":"For more information about <ph id=\"ph1\">`IDispatch::GetTypeInfo`</ph>, see the MSDN Library.","pos":[110,184],"source":" For more information about `IDispatch::GetTypeInfo`, see the MSDN Library."}]}],"pos":[66948,67133],"yaml":true,"extradata":"MT"},{"content":"The type information to return.","nodes":[{"pos":[0,31],"content":"The type information to return.","nodes":[{"content":"The type information to return.","pos":[0,31]}]}],"pos":[67305,67337],"yaml":true},{"content":"The locale identifier for the type information.","nodes":[{"pos":[0,47],"content":"The locale identifier for the type information.","nodes":[{"content":"The locale identifier for the type information.","pos":[0,47]}]}],"pos":[67397,67445],"yaml":true},{"content":"Receives a pointer to the requested type information object.","nodes":[{"pos":[0,60],"content":"Receives a pointer to the requested type information object.","nodes":[{"content":"Receives a pointer to the requested type information object.","pos":[0,60]}]}],"pos":[67508,67569],"yaml":true},{"content":"Late-bound access using the COM <code>IDispatch</code> interface is not supported.","nodes":[{"pos":[0,82],"content":"Late-bound access using the COM <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">IDispatch</ph><ept id=\"p1\">&lt;/code&gt;</ept> interface is not supported.","source":"Late-bound access using the COM <code>IDispatch</code> interface is not supported."}],"pos":[67786,67869],"yaml":true},{"content":"Retrieves the number of type information interfaces that an object provides (either 0 or 1).","nodes":[{"pos":[0,92],"content":"Retrieves the number of type information interfaces that an object provides (either 0 or 1).","nodes":[{"content":"Retrieves the number of type information interfaces that an object provides (either 0 or 1).","pos":[0,92]}]}],"pos":[69076,69169],"yaml":true},{"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library.","nodes":[{"pos":[0,189],"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library.","nodes":[{"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code.","pos":[0,109]},{"content":"For more information about <ph id=\"ph1\">`IDispatch::GetTypeInfoCount`</ph>, see the MSDN Library.","pos":[110,189],"source":" For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library."}]}],"pos":[69180,69370],"yaml":true,"extradata":"MT"},{"content":"Points to a location that receives the number of type information interfaces provided by the object.","nodes":[{"pos":[0,100],"content":"Points to a location that receives the number of type information interfaces provided by the object.","nodes":[{"content":"Points to a location that receives the number of type information interfaces provided by the object.","pos":[0,100]}]}],"pos":[69526,69627],"yaml":true},{"content":"Late-bound access using the COM <code>IDispatch</code> interface is not supported.","nodes":[{"pos":[0,82],"content":"Late-bound access using the COM <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">IDispatch</ph><ept id=\"p1\">&lt;/code&gt;</ept> interface is not supported.","source":"Late-bound access using the COM <code>IDispatch</code> interface is not supported."}],"pos":[69849,69932],"yaml":true},{"content":"Provides access to properties and methods exposed by an object.","nodes":[{"pos":[0,63],"content":"Provides access to properties and methods exposed by an object.","nodes":[{"content":"Provides access to properties and methods exposed by an object.","pos":[0,63]}]}],"pos":[71523,71587],"yaml":true},{"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::Invoke`, see the MSDN Library.","nodes":[{"pos":[0,179],"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::Invoke`, see the MSDN Library.","nodes":[{"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code.","pos":[0,109]},{"content":"For more information about <ph id=\"ph1\">`IDispatch::Invoke`</ph>, see the MSDN Library.","pos":[110,179],"source":" For more information about `IDispatch::Invoke`, see the MSDN Library."}]}],"pos":[71598,71778],"yaml":true,"extradata":"MT"},{"content":"Identifies the member.","nodes":[{"pos":[0,22],"content":"Identifies the member.","nodes":[{"content":"Identifies the member.","pos":[0,22]}]}],"pos":[72045,72068],"yaml":true},{"content":"Reserved for future use. Must be IID_NULL.","nodes":[{"pos":[0,42],"content":"Reserved for future use. Must be IID_NULL.","nodes":[{"content":"Reserved for future use. Must be IID_NULL.","pos":[0,42],"nodes":[{"content":"Reserved for future use.","pos":[0,24]},{"content":"Must be IID_NULL.","pos":[25,42]}]}]}],"pos":[72126,72169],"yaml":true},{"content":"The locale context in which to interpret arguments.","nodes":[{"pos":[0,51],"content":"The locale context in which to interpret arguments.","nodes":[{"content":"The locale context in which to interpret arguments.","pos":[0,51]}]}],"pos":[72229,72281],"yaml":true},{"content":"Flags describing the context of the call.","nodes":[{"pos":[0,41],"content":"Flags describing the context of the call.","nodes":[{"content":"Flags describing the context of the call.","pos":[0,41]}]}],"pos":[72342,72384],"yaml":true},{"content":"Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.","nodes":[{"pos":[0,159],"content":"Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.","nodes":[{"content":"Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.","pos":[0,159]}]}],"pos":[72451,72611],"yaml":true},{"content":"Pointer to the location where the result is to be stored.","nodes":[{"pos":[0,57],"content":"Pointer to the location where the result is to be stored.","nodes":[{"content":"Pointer to the location where the result is to be stored.","pos":[0,57]}]}],"pos":[72677,72735],"yaml":true},{"content":"Pointer to a structure that contains exception information.","nodes":[{"pos":[0,59],"content":"Pointer to a structure that contains exception information.","nodes":[{"content":"Pointer to a structure that contains exception information.","pos":[0,59]}]}],"pos":[72801,72861],"yaml":true},{"content":"The index of the first argument that has an error.","nodes":[{"pos":[0,50],"content":"The index of the first argument that has an error.","nodes":[{"content":"The index of the first argument that has an error.","pos":[0,50]}]}],"pos":[72925,72976],"yaml":true},{"content":"Late-bound access using the COM <code>IDispatch</code> interface is not supported.","nodes":[{"pos":[0,82],"content":"Late-bound access using the COM <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">IDispatch</ph><ept id=\"p1\">&lt;/code&gt;</ept> interface is not supported.","source":"Late-bound access using the COM <code>IDispatch</code> interface is not supported."}],"pos":[73188,73271],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Reflection.MethodInfo\n  commentId: T:System.Reflection.MethodInfo\n  id: MethodInfo\n  children:\n  - System.Reflection.MethodInfo.#ctor\n  - System.Reflection.MethodInfo.CreateDelegate(System.Type)\n  - System.Reflection.MethodInfo.CreateDelegate(System.Type,System.Object)\n  - System.Reflection.MethodInfo.Equals(System.Object)\n  - System.Reflection.MethodInfo.GetBaseDefinition\n  - System.Reflection.MethodInfo.GetGenericArguments\n  - System.Reflection.MethodInfo.GetGenericMethodDefinition\n  - System.Reflection.MethodInfo.GetHashCode\n  - System.Reflection.MethodInfo.MakeGenericMethod(System.Type[])\n  - System.Reflection.MethodInfo.MemberType\n  - System.Reflection.MethodInfo.op_Equality(System.Reflection.MethodInfo,System.Reflection.MethodInfo)\n  - System.Reflection.MethodInfo.op_Inequality(System.Reflection.MethodInfo,System.Reflection.MethodInfo)\n  - System.Reflection.MethodInfo.ReturnParameter\n  - System.Reflection.MethodInfo.ReturnType\n  - System.Reflection.MethodInfo.ReturnTypeCustomAttributes\n  - System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  - System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#GetType\n  - System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  - System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#GetTypeInfoCount(System.UInt32@)\n  - System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  langs:\n  - csharp\n  name: MethodInfo\n  nameWithType: MethodInfo\n  fullName: System.Reflection.MethodInfo\n  type: Class\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Discovers the attributes of a method and provides access to method metadata.\n  remarks: \"The <xref:System.Reflection.MethodInfo> class represents a method of a type. You can use a <xref:System.Reflection.MethodInfo> object to obtain information about the method that the object represents and to invoke the method. For example:  \\n  \\n-   You can determine the method's visibility by retrieving the values of the <xref:System.Reflection.MethodBase.IsFamilyAndAssembly%2A>, <xref:System.Reflection.MethodBase.IsFamilyOrAssembly%2A>, <xref:System.Reflection.MethodBase.IsPrivate%2A>, and <xref:System.Reflection.MethodBase.IsPublic%2A> properties.  \\n  \\n-   You can discover what attributes are applied to the method by retrieving the value of the <xref:System.Reflection.MethodBase.Attributes%2A> property or calling the <xref:System.Reflection.Assembly.GetCustomAttributes%2A>method.  \\n  \\n-   You can determine whether the method is a generic method, an open constructed generic method, or a closed constructed generic method, by retrieving the values of the <xref:System.Reflection.MethodInfo.IsGenericMethod%2A> and <xref:System.Reflection.MethodInfo.ContainsGenericParameters%2A> properties.  \\n  \\n-   You can get information about the method's parameters and return type from the <xref:System.Reflection.MethodBase.GetParameters%2A> method and the <xref:System.Reflection.MethodInfo.ReturnParameter%2A>, <xref:System.Reflection.MethodInfo.ReturnType%2A>, and <xref:System.Reflection.MethodInfo.ReturnTypeCustomAttributes%2A> properties.  \\n  \\n-   You can execute a method on a class instance by calling the <xref:System.Reflection.MethodBase.Invoke%2A> method.  \\n  \\n-   You can instantiate a <xref:System.Reflection.MethodInfo> object that represents a constructed generic method from one that represents a generic method definition by calling the <xref:System.Reflection.MethodInfo.MakeGenericMethod%2A> method.  \\n  \\n You can instantiate a <xref:System.Reflection.MethodInfo> instances by calling the <xref:System.Type.GetMethods%2A?displayProperty=fullName> or <xref:System.Type.GetMethod%2A?displayProperty=fullName> method, or by calling the <xref:System.Reflection.MethodInfo.MakeGenericMethod%2A?displayProperty=fullName> method of a <xref:System.Reflection.MethodInfo> object that represents a generic method definition.  \\n  \\n For a list of the invariant conditions for terms specific to generic methods, see the <xref:System.Reflection.MethodInfo.IsGenericMethod%2A> property. For a list of the invariant conditions for other terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A> property.\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)]\n\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public abstract class MethodInfo : System.Reflection.MethodBase, System.Runtime.InteropServices._MethodInfo\n  inheritance:\n  - System.Object\n  - System.Reflection.MemberInfo\n  - System.Reflection.MethodBase\n  derivedClasses:\n  - Microsoft.JScript.JSMethod\n  - Microsoft.JScript.JSMethodInfo\n  - System.Reflection.Emit.DynamicMethod\n  - System.Reflection.Emit.MethodBuilder\n  implements:\n  - System.Runtime.InteropServices._MethodInfo\n  inheritedMembers:\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  - System.Reflection.MemberInfo.CustomAttributes\n  - System.Reflection.MemberInfo.DeclaringType\n  - System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)\n  - System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)\n  - System.Reflection.MemberInfo.GetCustomAttributesData\n  - System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)\n  - System.Reflection.MemberInfo.MetadataToken\n  - System.Reflection.MemberInfo.Module\n  - System.Reflection.MemberInfo.Name\n  - System.Reflection.MemberInfo.op_Equality(System.Reflection.MemberInfo,System.Reflection.MemberInfo)\n  - System.Reflection.MemberInfo.op_Inequality(System.Reflection.MemberInfo,System.Reflection.MemberInfo)\n  - System.Reflection.MemberInfo.ReflectedType\n  - System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Boolean)\n  - System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Type,System.Boolean)\n  - System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#IsDefined(System.Type,System.Boolean)\n  - System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  - System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetType\n  - System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  - System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfoCount(System.UInt32@)\n  - System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  - System.Reflection.MethodBase.Attributes\n  - System.Reflection.MethodBase.CallingConvention\n  - System.Reflection.MethodBase.ContainsGenericParameters\n  - System.Reflection.MethodBase.GetCurrentMethod\n  - System.Reflection.MethodBase.GetMethodBody\n  - System.Reflection.MethodBase.GetMethodFromHandle(System.RuntimeMethodHandle)\n  - System.Reflection.MethodBase.GetMethodFromHandle(System.RuntimeMethodHandle,System.RuntimeTypeHandle)\n  - System.Reflection.MethodBase.GetMethodImplementationFlags\n  - System.Reflection.MethodBase.GetParameters\n  - System.Reflection.MethodBase.Invoke(System.Object,System.Object[])\n  - System.Reflection.MethodBase.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)\n  - System.Reflection.MethodBase.IsAbstract\n  - System.Reflection.MethodBase.IsAssembly\n  - System.Reflection.MethodBase.IsConstructor\n  - System.Reflection.MethodBase.IsFamily\n  - System.Reflection.MethodBase.IsFamilyAndAssembly\n  - System.Reflection.MethodBase.IsFamilyOrAssembly\n  - System.Reflection.MethodBase.IsFinal\n  - System.Reflection.MethodBase.IsGenericMethod\n  - System.Reflection.MethodBase.IsGenericMethodDefinition\n  - System.Reflection.MethodBase.IsHideBySig\n  - System.Reflection.MethodBase.IsPrivate\n  - System.Reflection.MethodBase.IsPublic\n  - System.Reflection.MethodBase.IsSecurityCritical\n  - System.Reflection.MethodBase.IsSecuritySafeCritical\n  - System.Reflection.MethodBase.IsSecurityTransparent\n  - System.Reflection.MethodBase.IsSpecialName\n  - System.Reflection.MethodBase.IsStatic\n  - System.Reflection.MethodBase.IsVirtual\n  - System.Reflection.MethodBase.MethodHandle\n  - System.Reflection.MethodBase.MethodImplementationFlags\n  - System.Reflection.MethodBase.op_Equality(System.Reflection.MethodBase,System.Reflection.MethodBase)\n  - System.Reflection.MethodBase.op_Inequality(System.Reflection.MethodBase,System.Reflection.MethodBase)\n  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#GetType\n  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#GetTypeInfoCount(System.UInt32@)\n  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsAbstract\n  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsAssembly\n  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsConstructor\n  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsFamily\n  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsFamilyAndAssembly\n  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsFamilyOrAssembly\n  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsFinal\n  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsHideBySig\n  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsPrivate\n  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsPublic\n  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsSpecialName\n  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsStatic\n  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsVirtual\n  extensionMethods:\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.MemberInfo,System.Type)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.MemberInfo)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.MemberInfo,System.Boolean)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo,System.Type)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.MemberInfo)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.MemberInfo,System.Boolean)\n  - System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.MemberInfo,System.Type)\n  - System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  - System.Reflection.MemberInfoExtensions.GetMetadataToken(System.Reflection.MemberInfo)\n  - System.Reflection.MemberInfoExtensions.HasMetadataToken(System.Reflection.MemberInfo)\n  - System.Reflection.MethodInfoExtensions.GetBaseDefinition(System.Reflection.MethodInfo)\n  - System.Reflection.RuntimeReflectionExtensions.GetRuntimeBaseDefinition(System.Reflection.MethodInfo)\n  attributes:\n  - type: System.Runtime.InteropServices.ClassInterfaceAttribute\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.MethodInfo.#ctor\n  commentId: M:System.Reflection.MethodInfo.#ctor\n  id: '#ctor'\n  parent: System.Reflection.MethodInfo\n  langs:\n  - csharp\n  name: MethodInfo()\n  nameWithType: MethodInfo.MethodInfo()\n  fullName: MethodInfo.MethodInfo()\n  type: Constructor\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Initializes a new instance of the <xref href=\"System.Reflection.MethodInfo\"></xref> class.\n  syntax:\n    content: protected MethodInfo ();\n    parameters: []\n  overload: System.Reflection.MethodInfo.#ctor*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.MethodInfo.CreateDelegate(System.Type)\n  commentId: M:System.Reflection.MethodInfo.CreateDelegate(System.Type)\n  id: CreateDelegate(System.Type)\n  parent: System.Reflection.MethodInfo\n  langs:\n  - csharp\n  name: CreateDelegate(Type)\n  nameWithType: MethodInfo.CreateDelegate(Type)\n  fullName: MethodInfo.CreateDelegate(Type)\n  type: Method\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Creates a delegate of the specified type from this method.\n  syntax:\n    content: public virtual Delegate CreateDelegate (Type delegateType);\n    parameters:\n    - id: delegateType\n      type: System.Type\n      description: The type of the delegate to create.\n    return:\n      type: System.Delegate\n      description: The delegate for this method.\n  overload: System.Reflection.MethodInfo.CreateDelegate*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.MethodInfo.CreateDelegate(System.Type,System.Object)\n  commentId: M:System.Reflection.MethodInfo.CreateDelegate(System.Type,System.Object)\n  id: CreateDelegate(System.Type,System.Object)\n  parent: System.Reflection.MethodInfo\n  langs:\n  - csharp\n  name: CreateDelegate(Type, Object)\n  nameWithType: MethodInfo.CreateDelegate(Type, Object)\n  fullName: MethodInfo.CreateDelegate(Type, Object)\n  type: Method\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Creates a delegate of the specified type with the specified target from this method.\n  syntax:\n    content: public virtual Delegate CreateDelegate (Type delegateType, object target);\n    parameters:\n    - id: delegateType\n      type: System.Type\n      description: The type of the delegate to create.\n    - id: target\n      type: System.Object\n      description: The object targeted by the delegate.\n    return:\n      type: System.Delegate\n      description: The delegate for this method.\n  overload: System.Reflection.MethodInfo.CreateDelegate*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.MethodInfo.Equals(System.Object)\n  commentId: M:System.Reflection.MethodInfo.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Reflection.MethodInfo\n  langs:\n  - csharp\n  name: Equals(Object)\n  nameWithType: MethodInfo.Equals(Object)\n  fullName: MethodInfo.Equals(Object)\n  type: Method\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Returns a value that indicates whether this instance is equal to a specified object.\n  syntax:\n    content: public override bool Equals (object obj);\n    parameters:\n    - id: obj\n      type: System.Object\n      description: An object to compare with this instance, or `null`.\n    return:\n      type: System.Boolean\n      description: '`true` if <code>obj</code> equals the type and value of this instance; otherwise, `false`.'\n  overload: System.Reflection.MethodInfo.Equals*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.MethodInfo.GetBaseDefinition\n  commentId: M:System.Reflection.MethodInfo.GetBaseDefinition\n  id: GetBaseDefinition\n  parent: System.Reflection.MethodInfo\n  langs:\n  - csharp\n  name: GetBaseDefinition()\n  nameWithType: MethodInfo.GetBaseDefinition()\n  fullName: MethodInfo.GetBaseDefinition()\n  type: Method\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: When overridden in a derived class, returns the <xref href=\"System.Reflection.MethodInfo\"></xref> object for the method on the direct or indirect base class in which the method represented by this instance was first declared.\n  remarks: \"The <xref:System.Reflection.MethodInfo.GetBaseDefinition%2A> method returns the first definition of the specified method in the class hierarchy. You can determine the type on which the first definition of the method is found by retrieving the value of the <xref:System.Reflection.MemberInfo.DeclaringType%2A> property on the returned <xref:System.Reflection.MethodInfo> object.  \\n  \\n The <xref:System.Reflection.MethodInfo.GetBaseDefinition%2A> method behaves as follows:  \\n  \\n-   If the current <xref:System.Reflection.MethodInfo> object represents an interface implementation, the <xref:System.Reflection.MethodInfo.GetBaseDefinition%2A> method returns the current <xref:System.Reflection.MethodInfo> object.  \\n  \\n-   If the current <xref:System.Reflection.MethodInfo> object represents a method that overrides a virtual definition in a base class, the <xref:System.Reflection.MethodInfo.GetBaseDefinition%2A> method returns a <xref:System.Reflection.MethodInfo> object that represents the virtual definition.  \\n  \\n-   If the current <xref:System.Reflection.MethodInfo> object represents a method that is specified with the `new` keyword in C# or the `Shadows` keyword in Visual Basic (as in `newslot`, as described in [Common Type System](~/docs/standard/base-types/common-type-system.md)), the <xref:System.Reflection.MethodInfo.GetBaseDefinition%2A> method returns the current <xref:System.Reflection.MethodInfo> object.  \\n  \\n-   If the current <xref:System.Reflection.MethodInfo> object represents an inherited method (that is, the current method does not provide its own implementation), the <xref:System.Reflection.MethodInfo.GetBaseDefinition%2A> method returns a <xref:System.Reflection.MethodInfo> object that represents the lowest method in the class hierarchy. For example, if `Base.ToString` overrides `Object.ToString`, and `Derived.ToString` overrides `Base.ToString`, calling the <xref:System.Reflection.MethodInfo.GetBaseDefinition%2A> method on a <xref:System.Reflection.MethodInfo> object that represents `Derived.ToString` returns a <xref:System.Reflection.MethodInfo> object that represents `Object.ToString`.  \\n  \\n-   If the current <xref:System.Reflection.MethodInfo> object represents a method that is not present in any base class, the <xref:System.Reflection.MethodInfo.GetBaseDefinition%2A> method returns the current <xref:System.Reflection.MethodInfo> object.  \\n  \\n You can determine whether the current method overrides a method in a base class by calling the <xref:System.Reflection.MethodInfo.GetBaseDefinition%2A> method. The following example implements an `IsOverride` method that does this.  \\n  \\n [!code-csharp[system.reflection.methodinfo.getbasedefinition#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.reflection.methodinfo.getbasedefinition/cs/IsOverride1.cs#2)]\\n [!code-vb[system.reflection.methodinfo.getbasedefinition#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.reflection.methodinfo.getbasedefinition/vb/IsOverride1.vb#2)]  \\n  \\n To call the `GetBaseDefinition` method:  \\n  \\n1.  Get a <xref:System.Type> object that represents the type (the class or structure) that contains the property. If you are working with an object (an instance of a type), you can call its <xref:System.Object.GetType%2A> method. Otherwise, you can use the C#  operator or the Visual Basic  operator, as the example illustrates.  \\n  \\n2.  Get a <xref:System.Reflection.MethodInfo> object that represents the method in which you're interested. You can do this by getting an array of all methods from the <xref:System.Type.GetMethods%2A?displayProperty=fullName> method and then iterating the elements in the array, or you can retrieve the <xref:System.Reflection.MethodInfo> object that represents the method directly by calling the <xref:System.Type.GetMethod%28System.String%29?displayProperty=fullName> method and specifying the method name.  \\n  \\n3.  Call the <xref:System.Reflection.MethodInfo.GetBaseDefinition%2A> method to get the value of the <xref:System.Reflection.MethodInfo> object that represents the base method definition.\"\n  example:\n  - \"The following example demonstrates the behavior of the <xref:System.Reflection.MethodInfo.GetBaseDefinition%2A> method.  \\n  \\n [!code-csharp[System.Reflection.MethodInfo.GetBaseDefinition#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.reflection.methodinfo.getbasedefinition/cs/getbasedefinition1.cs#1)]\\n [!code-vb[System.Reflection.MethodInfo.GetBaseDefinition#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.reflection.methodinfo.getbasedefinition/vb/getbasedefinition1.vb#1)]\"\n  syntax:\n    content: public abstract System.Reflection.MethodInfo GetBaseDefinition ();\n    parameters: []\n    return:\n      type: System.Reflection.MethodInfo\n      description: A <xref href=\"System.Reflection.MethodInfo\"></xref> object for the first implementation of this method.\n  overload: System.Reflection.MethodInfo.GetBaseDefinition*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.MethodInfo.GetGenericArguments\n  commentId: M:System.Reflection.MethodInfo.GetGenericArguments\n  id: GetGenericArguments\n  parent: System.Reflection.MethodInfo\n  langs:\n  - csharp\n  name: GetGenericArguments()\n  nameWithType: MethodInfo.GetGenericArguments()\n  fullName: MethodInfo.GetGenericArguments()\n  type: Method\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Returns an array of <xref href=\"System.Type\"></xref> objects that represent the type arguments of a generic method or the type parameters of a generic method definition.\n  remarks: \"The elements of the returned array are in the order in which they appear in the list of type parameters for the generic method.  \\n  \\n-   If the current method is a closed constructed method (that is, the <xref:System.Reflection.MethodInfo.ContainsGenericParameters%2A> property returns `false`), the array returned by the <xref:System.Reflection.MethodInfo.GetGenericArguments%2A> method contains the types that have been assigned to the generic type parameters of the generic method definition.  \\n  \\n-   If the current method is a generic method definition, the array contains the type parameters.  \\n  \\n-   If the current method is an open constructed method (that is, the <xref:System.Reflection.MethodInfo.ContainsGenericParameters%2A> property returns `true`) in which specific types have been assigned to some type parameters and type parameters of enclosing generic types have been assigned to other type parameters, the array contains both types and type parameters. Use the <xref:System.Type.IsGenericParameter%2A> property to tell them apart. For a demonstration of this scenario, see the code example for the <xref:System.Reflection.MethodInfo.ContainsGenericParameters%2A> property.  \\n  \\n For a list of the invariant conditions for terms specific to generic methods, see the <xref:System.Reflection.MethodInfo.IsGenericMethod%2A> property. For a list of the invariant conditions for other terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A?displayProperty=fullName> property.\"\n  example:\n  - \"The following code example shows how to get the type arguments of a generic method and display them.  \\n  \\n This example is part of a larger example provided for the <xref:System.Reflection.MethodInfo.MakeGenericMethod%2A> method.  \\n  \\n [!code-cpp[MethodInfo.Generics#8](~/samples/snippets/cpp/VS_Snippets_CLR/MethodInfo.Generics/cpp/source.cpp#8)]\\n [!code-csharp[MethodInfo.Generics#8](~/samples/snippets/csharp/VS_Snippets_CLR/MethodInfo.Generics/CS/source.cs#8)]\\n [!code-vb[MethodInfo.Generics#8](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodInfo.Generics/VB/source.vb#8)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public override Type[] GetGenericArguments ();\n    parameters: []\n    return:\n      type: System.Type[]\n      description: An array of <xref href=\"System.Type\"></xref> objects that represent the type arguments of a generic method or the type parameters of a generic method definition. Returns an empty array if the current method is not a generic method.\n  overload: System.Reflection.MethodInfo.GetGenericArguments*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: This method is not supported.\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.MethodInfo.GetGenericMethodDefinition\n  commentId: M:System.Reflection.MethodInfo.GetGenericMethodDefinition\n  id: GetGenericMethodDefinition\n  parent: System.Reflection.MethodInfo\n  langs:\n  - csharp\n  name: GetGenericMethodDefinition()\n  nameWithType: MethodInfo.GetGenericMethodDefinition()\n  fullName: MethodInfo.GetGenericMethodDefinition()\n  type: Method\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Returns a <xref href=\"System.Reflection.MethodInfo\"></xref> object that represents a generic method definition from which the current method can be constructed.\n  remarks: \"A generic method definition is a template from which methods can be constructed. For example, from the generic method definition `T M<T>(T t)` (expressed in C# syntax; `Function M(Of T)(ByVal tVal As T) As T` in Visual Basic) you can construct and invoke the method `int M<int>(int t)` (`Function M(Of Integer)(ByVal tVal As Integer) As Integer` in Visual Basic). Given a <xref:System.Reflection.MethodInfo> object representing this constructed method, the <xref:System.Reflection.MethodInfo.GetGenericMethodDefinition%2A> method returns the generic method definition.  \\n  \\n If two constructed methods are created from the same generic method definition, the <xref:System.Reflection.MethodInfo.GetGenericMethodDefinition%2A> method returns the same <xref:System.Reflection.MethodInfo> object for both methods.  \\n  \\n If you call <xref:System.Reflection.MethodInfo.GetGenericMethodDefinition%2A> on a <xref:System.Reflection.MethodInfo> that already represents a generic method definition, it returns the current <xref:System.Reflection.MethodInfo>.  \\n  \\n If a generic method definition includes generic parameters of the declaring type, there will be a generic method definition specific to each constructed type. For example, consider the following C#, Visual Basic, and C++ code:  \\n  \\n```  \\nclass B<U,V> {}  \\nclass C<T> { public B<T,S> M<S>() {...}}  \\n  \\nClass B(Of U, V)  \\nEnd Class  \\nClass C(Of T)  \\n    Public Function M(Of S)() As B(Of T, S)  \\n        ...  \\n    End Function  \\nEnd Class   \\n  \\ngeneric <typename U, typename V> ref class B {};  \\ngeneric <typename T> ref class C  \\n{  \\npublic:  \\n    generic <typename S> B<T,S>^ M() {...};  \\n};  \\n```  \\n  \\n In the constructed type `C<int>` (`C(Of Integer)` in Visual Basic), the generic method `M` returns `B<int, S>`. In the open type `C<T>`, `M` returns `B<T, S>`. In both cases, the <xref:System.Reflection.MethodInfo.IsGenericMethodDefinition%2A> property returns `true` for the <xref:System.Reflection.MethodInfo> that represents `M`, so <xref:System.Reflection.MethodInfo.MakeGenericMethod%2A> can be called on both <xref:System.Reflection.MethodInfo> objects. In the case of the constructed type, the result of calling <xref:System.Reflection.MethodInfo.MakeGenericMethod%2A> is a <xref:System.Reflection.MethodInfo> that can be invoked. In the case of the open type, the <xref:System.Reflection.MethodInfo> returned by <xref:System.Reflection.MethodInfo.MakeGenericMethod%2A> cannot be invoked.  \\n  \\n For a list of the invariant conditions for terms specific to generic methods, see the <xref:System.Reflection.MethodInfo.IsGenericMethod%2A> property. For a list of the invariant conditions for other terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A> property.\"\n  example:\n  - \"The following code example shows a class with a generic method and the code required to obtain a <xref:System.Reflection.MethodInfo> for the method, bind the method to type arguments, and get the original generic type definition back from the bound method.  \\n  \\n This example is part of a larger example provided for the <xref:System.Reflection.MethodInfo.MakeGenericMethod%2A> method.  \\n  \\n [!code-cpp[MethodInfo.Generics#2](~/samples/snippets/cpp/VS_Snippets_CLR/MethodInfo.Generics/cpp/source.cpp#2)]\\n [!code-csharp[MethodInfo.Generics#2](~/samples/snippets/csharp/VS_Snippets_CLR/MethodInfo.Generics/CS/source.cs#2)]\\n [!code-vb[MethodInfo.Generics#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodInfo.Generics/VB/source.vb#2)]  \\n[!code-cpp[MethodInfo.Generics#3](~/samples/snippets/cpp/VS_Snippets_CLR/MethodInfo.Generics/cpp/source.cpp#3)]\\n[!code-csharp[MethodInfo.Generics#3](~/samples/snippets/csharp/VS_Snippets_CLR/MethodInfo.Generics/CS/source.cs#3)]\\n[!code-vb[MethodInfo.Generics#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodInfo.Generics/VB/source.vb#3)]  \\n[!code-cpp[MethodInfo.Generics#4](~/samples/snippets/cpp/VS_Snippets_CLR/MethodInfo.Generics/cpp/source.cpp#4)]\\n[!code-csharp[MethodInfo.Generics#4](~/samples/snippets/csharp/VS_Snippets_CLR/MethodInfo.Generics/CS/source.cs#4)]\\n[!code-vb[MethodInfo.Generics#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodInfo.Generics/VB/source.vb#4)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public virtual System.Reflection.MethodInfo GetGenericMethodDefinition ();\n    parameters: []\n    return:\n      type: System.Reflection.MethodInfo\n      description: A <xref href=\"System.Reflection.MethodInfo\"></xref> object representing a generic method definition from which the current method can be constructed.\n  overload: System.Reflection.MethodInfo.GetGenericMethodDefinition*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The current method is not a generic method. That is, <xref href=\"System.Reflection.MethodInfo.IsGenericMethod\"></xref> returns `false`.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: This method is not supported.\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.MethodInfo.GetHashCode\n  commentId: M:System.Reflection.MethodInfo.GetHashCode\n  id: GetHashCode\n  parent: System.Reflection.MethodInfo\n  langs:\n  - csharp\n  name: GetHashCode()\n  nameWithType: MethodInfo.GetHashCode()\n  fullName: MethodInfo.GetHashCode()\n  type: Method\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Returns the hash code for this instance.\n  syntax:\n    content: public override int GetHashCode ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: A 32-bit signed integer hash code.\n  overload: System.Reflection.MethodInfo.GetHashCode*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.MethodInfo.MakeGenericMethod(System.Type[])\n  commentId: M:System.Reflection.MethodInfo.MakeGenericMethod(System.Type[])\n  id: MakeGenericMethod(System.Type[])\n  parent: System.Reflection.MethodInfo\n  langs:\n  - csharp\n  name: MakeGenericMethod(Type[])\n  nameWithType: MethodInfo.MakeGenericMethod(Type[])\n  fullName: MethodInfo.MakeGenericMethod(Type[])\n  type: Method\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Substitutes the elements of an array of types for the type parameters of the current generic method definition, and returns a <xref href=\"System.Reflection.MethodInfo\"></xref> object representing the resulting constructed method.\n  remarks: \"The <xref:System.Reflection.MethodInfo.MakeGenericMethod%2A> method allows you to write code that assigns specific types to the type parameters of a generic method definition, thus creating a <xref:System.Reflection.MethodInfo> object that represents a particular constructed method. If the <xref:System.Reflection.MethodInfo.ContainsGenericParameters%2A> property of this <xref:System.Reflection.MethodInfo> object returns `true`, you can use it to invoke the method or to create a delegate to invoke the method.  \\n  \\n Methods constructed with the <xref:System.Reflection.MethodInfo.MakeGenericMethod%2A> method can be open, that is, some of their type arguments can be type parameters of enclosing generic types. You might use such open constructed methods when you generate dynamic assemblies. For example, consider the following C#, Visual Basic, and C++ code.  \\n  \\n```  \\nclass C  \\n{  \\n    T N<T,U>(T t, U u) {...}  \\n    public V M<V>(V v)  \\n    {  \\n        return N<V,int>(v, 42);  \\n    }  \\n}  \\n  \\nClass C  \\n    Public Function N(Of T,U)(ByVal ta As T, ByVal ua As U) As T  \\n        ...  \\n    End Function  \\n    Public Function M(Of V)(ByVal va As V ) As V  \\n        Return N(Of V, Integer)(va, 42)  \\n    End Function  \\nEnd Class  \\n  \\nref class C  \\n{  \\nprivate:  \\n    generic <typename T, typename U> T N(T t, U u) {...}  \\npublic:  \\n    generic <typename V> V M(V v)  \\n    {  \\n        return N<V, int>(v, 42);  \\n    }  \\n};  \\n```  \\n  \\n The method body of `M` contains a call to method `N`, specifying the type parameter of `M` and the type <xref:System.Int32>. The <xref:System.Reflection.MethodInfo.IsGenericMethodDefinition%2A> property returns `false` for method `N<V,int>`. The <xref:System.Reflection.MethodInfo.ContainsGenericParameters%2A> property returns `true`, so method `N<V,int>` cannot be invoked.  \\n  \\n For a list of the invariant conditions for terms specific to generic methods, see the <xref:System.Reflection.MethodInfo.IsGenericMethod%2A> property. For a list of the invariant conditions for other terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A> property.\"\n  example:\n  - \"The following code example demonstrates the properties and methods of <xref:System.Reflection.MethodInfo> that support the examination of generic methods. The example does the following:  \\n  \\n-   Defines a class that has a generic method.  \\n  \\n-   Creates a <xref:System.Reflection.MethodInfo> that represents the generic method.  \\n  \\n-   Displays properties of the generic method definition.  \\n  \\n-   Assigns type arguments to the type parameters of the <xref:System.Reflection.MethodInfo>, and invokes the resulting constructed generic method.  \\n  \\n-   Displays properties of the constructed generic method.  \\n  \\n-   Retrieves the generic method definition from the constructed method and compares it to the original definition.  \\n  \\n [!code-cpp[MethodInfo.Generics#1](~/samples/snippets/cpp/VS_Snippets_CLR/MethodInfo.Generics/cpp/source.cpp#1)]\\n [!code-csharp[MethodInfo.Generics#1](~/samples/snippets/csharp/VS_Snippets_CLR/MethodInfo.Generics/CS/source.cs#1)]\\n [!code-vb[MethodInfo.Generics#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodInfo.Generics/VB/source.vb#1)]\"\n  syntax:\n    content: public virtual System.Reflection.MethodInfo MakeGenericMethod (Type[] typeArguments);\n    parameters:\n    - id: typeArguments\n      type: System.Type[]\n      description: An array of types to be substituted for the type parameters of the current generic method definition.\n    return:\n      type: System.Reflection.MethodInfo\n      description: A <xref href=\"System.Reflection.MethodInfo\"></xref> object that represents the constructed method formed by substituting the elements of <code>typeArguments</code> for the type parameters of the current generic method definition.\n  overload: System.Reflection.MethodInfo.MakeGenericMethod*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The current <xref href=\"System.Reflection.MethodInfo\"></xref> does not represent a generic method definition. That is, <xref href=\"System.Reflection.MethodInfo.IsGenericMethodDefinition\"></xref> returns `false`.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>typeArguments</code> is `null`.  \\n  \\n -or-  \\n  \\n Any element of <code>typeArguments</code> is `null`.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"The number of elements in <code>typeArguments</code> is not the same as the number of type parameters of the current generic method definition.  \\n  \\n -or-  \\n  \\n An element of <code>typeArguments</code> does not satisfy the constraints specified for the corresponding type parameter of the current generic method definition.\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: This method is not supported.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.MethodInfo.MemberType\n  commentId: P:System.Reflection.MethodInfo.MemberType\n  id: MemberType\n  parent: System.Reflection.MethodInfo\n  langs:\n  - csharp\n  name: MemberType\n  nameWithType: MethodInfo.MemberType\n  fullName: MethodInfo.MemberType\n  type: Property\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets a <xref href=\"System.Reflection.MemberTypes\"></xref> value indicating that this member is a method.\n  remarks: \"This property overrides <xref:System.Reflection.MemberInfo.MemberType%2A?displayProperty=fullName>. Therefore, when you examine a set of <xref:System.Reflection.MemberInfo> objects — for example, the array returned by <xref:System.Type.GetMembers%2A> — the <xref:System.Reflection.MemberInfo.MemberType%2A> property returns <xref:System.Reflection.MemberTypes?displayProperty=fullName> only when a given member is a method.  \\n  \\n To get the `MemberType` property, first get the class `Type`. From the `Type`, get the `MethodInfo`. From the `MethodInfo`, get the `MemberType`.\"\n  example:\n  - \"The following example displays the type of the specified member.  \\n  \\n [!code-cpp[Classic MethodInfo.MemberType Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic MethodInfo.MemberType Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic MethodInfo.MemberType Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic MethodInfo.MemberType Example/CS/source.cs#1)]\\n [!code-vb[Classic MethodInfo.MemberType Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic MethodInfo.MemberType Example/VB/source.vb#1)]\"\n  syntax:\n    content: public override System.Reflection.MemberTypes MemberType { get; }\n    return:\n      type: System.Reflection.MemberTypes\n      description: A <xref href=\"System.Reflection.MemberTypes\"></xref> value indicating that this member is a method.\n  overload: System.Reflection.MethodInfo.MemberType*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.MethodInfo.op_Equality(System.Reflection.MethodInfo,System.Reflection.MethodInfo)\n  commentId: M:System.Reflection.MethodInfo.op_Equality(System.Reflection.MethodInfo,System.Reflection.MethodInfo)\n  id: op_Equality(System.Reflection.MethodInfo,System.Reflection.MethodInfo)\n  parent: System.Reflection.MethodInfo\n  langs:\n  - csharp\n  name: op_Equality(MethodInfo, MethodInfo)\n  nameWithType: MethodInfo.op_Equality(MethodInfo, MethodInfo)\n  fullName: MethodInfo.op_Equality(MethodInfo, MethodInfo)\n  type: Operator\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Indicates whether two <xref href=\"System.Reflection.MethodInfo\"></xref> objects are equal.\n  syntax:\n    content: public static bool op_Equality (System.Reflection.MethodInfo left, System.Reflection.MethodInfo right);\n    parameters:\n    - id: left\n      type: System.Reflection.MethodInfo\n      description: The first object to compare.\n    - id: right\n      type: System.Reflection.MethodInfo\n      description: The second object to compare.\n    return:\n      type: System.Boolean\n      description: '`true` if <code>left</code> is equal to <code>right</code>; otherwise, `false`.'\n  overload: System.Reflection.MethodInfo.op_Equality*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.MethodInfo.op_Inequality(System.Reflection.MethodInfo,System.Reflection.MethodInfo)\n  commentId: M:System.Reflection.MethodInfo.op_Inequality(System.Reflection.MethodInfo,System.Reflection.MethodInfo)\n  id: op_Inequality(System.Reflection.MethodInfo,System.Reflection.MethodInfo)\n  parent: System.Reflection.MethodInfo\n  langs:\n  - csharp\n  name: op_Inequality(MethodInfo, MethodInfo)\n  nameWithType: MethodInfo.op_Inequality(MethodInfo, MethodInfo)\n  fullName: MethodInfo.op_Inequality(MethodInfo, MethodInfo)\n  type: Operator\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Indicates whether two <xref href=\"System.Reflection.MethodInfo\"></xref> objects are not equal.\n  syntax:\n    content: public static bool op_Inequality (System.Reflection.MethodInfo left, System.Reflection.MethodInfo right);\n    parameters:\n    - id: left\n      type: System.Reflection.MethodInfo\n      description: The first object to compare.\n    - id: right\n      type: System.Reflection.MethodInfo\n      description: The second object to compare.\n    return:\n      type: System.Boolean\n      description: '`true` if <code>left</code> is not equal to <code>right</code>; otherwise, `false`.'\n  overload: System.Reflection.MethodInfo.op_Inequality*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.MethodInfo.ReturnParameter\n  commentId: P:System.Reflection.MethodInfo.ReturnParameter\n  id: ReturnParameter\n  parent: System.Reflection.MethodInfo\n  langs:\n  - csharp\n  name: ReturnParameter\n  nameWithType: MethodInfo.ReturnParameter\n  fullName: MethodInfo.ReturnParameter\n  type: Property\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets a <xref href=\"System.Reflection.ParameterInfo\"></xref> object that contains information about the return type of the method, such as whether the return type has custom modifiers.\n  remarks: Compiler designers can use the <xref:System.Reflection.ParameterInfo> object returned by this property to discover whether custom modifiers, such as <xref:Microsoft.VisualC.IsConstModifier>, have been applied to the return type.\n  syntax:\n    content: public virtual System.Reflection.ParameterInfo ReturnParameter { get; }\n    return:\n      type: System.Reflection.ParameterInfo\n      description: A <xref href=\"System.Reflection.ParameterInfo\"></xref> object that contains information about the return type.\n  overload: System.Reflection.MethodInfo.ReturnParameter*\n  exceptions:\n  - type: System.NotImplementedException\n    commentId: T:System.NotImplementedException\n    description: This method is not implemented.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.MethodInfo.ReturnType\n  commentId: P:System.Reflection.MethodInfo.ReturnType\n  id: ReturnType\n  parent: System.Reflection.MethodInfo\n  langs:\n  - csharp\n  name: ReturnType\n  nameWithType: MethodInfo.ReturnType\n  fullName: MethodInfo.ReturnType\n  type: Property\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets the return type of this method.\n  remarks: To get the return type property, first get the class `Type`. From the `Type`, get the `MethodInfo`. From the `MethodInfo`, get the `ReturnType`.\n  example:\n  - \"The following example displays the return type of the specified method.  \\n  \\n [!code-cpp[Classic MethodInfo.ReturnType Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic MethodInfo.ReturnType Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic MethodInfo.ReturnType Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic MethodInfo.ReturnType Example/CS/source.cs#1)]\\n [!code-vb[Classic MethodInfo.ReturnType Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic MethodInfo.ReturnType Example/VB/source.vb#1)]\"\n  syntax:\n    content: public virtual Type ReturnType { get; }\n    return:\n      type: System.Type\n      description: The return type of this method.\n  overload: System.Reflection.MethodInfo.ReturnType*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.MethodInfo.ReturnTypeCustomAttributes\n  commentId: P:System.Reflection.MethodInfo.ReturnTypeCustomAttributes\n  id: ReturnTypeCustomAttributes\n  parent: System.Reflection.MethodInfo\n  langs:\n  - csharp\n  name: ReturnTypeCustomAttributes\n  nameWithType: MethodInfo.ReturnTypeCustomAttributes\n  fullName: MethodInfo.ReturnTypeCustomAttributes\n  type: Property\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets the custom attributes for the return type.\n  syntax:\n    content: public abstract System.Reflection.ICustomAttributeProvider ReturnTypeCustomAttributes { get; }\n    return:\n      type: System.Reflection.ICustomAttributeProvider\n      description: An `ICustomAttributeProvider` object representing the custom attributes for the return type.\n  overload: System.Reflection.MethodInfo.ReturnTypeCustomAttributes*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  commentId: M:System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  id: System#Runtime#InteropServices#_MethodInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  isEii: true\n  parent: System.Reflection.MethodInfo\n  langs:\n  - csharp\n  name: _MethodInfo.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n  nameWithType: MethodInfo._MethodInfo.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n  fullName: MethodInfo._MethodInfo.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection\n  summary: Maps a set of names to a corresponding set of dispatch identifiers.\n  remarks: This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library.\n  syntax:\n    content: void _MethodInfo.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);\n    parameters:\n    - id: riid\n      type: System.Guid\n      description: Reserved for future use. Must be IID_NULL.\n    - id: rgszNames\n      type: System.IntPtr\n      description: Passed-in array of names to be mapped.\n    - id: cNames\n      type: System.UInt32\n      description: Count of the names to be mapped.\n    - id: lcid\n      type: System.UInt32\n      description: The locale context in which to interpret the names.\n    - id: rgDispId\n      type: System.IntPtr\n      description: Caller-allocated array that receives the IDs corresponding to the names.\n  overload: System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#GetIDsOfNames*\n  exceptions:\n  - type: System.NotImplementedException\n    commentId: T:System.NotImplementedException\n    description: Late-bound access using the COM <code>IDispatch</code> interface is not supported.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#GetType\n  commentId: M:System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#GetType\n  id: System#Runtime#InteropServices#_MethodInfo#GetType\n  isEii: true\n  parent: System.Reflection.MethodInfo\n  langs:\n  - csharp\n  name: _MethodInfo.GetType()\n  nameWithType: MethodInfo._MethodInfo.GetType()\n  fullName: MethodInfo._MethodInfo.GetType()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection\n  summary: Provides access to the <xref href=\"System.Object.GetType\"></xref> method from COM.\n  syntax:\n    content: Type _MethodInfo.GetType ();\n    parameters: []\n    return:\n      type: System.Type\n      description: A <xref href=\"System.Type\"></xref> object representing the <xref href=\"System.Reflection.MethodInfo\"></xref> type.\n  overload: System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#GetType*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  commentId: M:System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  id: System#Runtime#InteropServices#_MethodInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  isEii: true\n  parent: System.Reflection.MethodInfo\n  langs:\n  - csharp\n  name: _MethodInfo.GetTypeInfo(UInt32, UInt32, IntPtr)\n  nameWithType: MethodInfo._MethodInfo.GetTypeInfo(UInt32, UInt32, IntPtr)\n  fullName: MethodInfo._MethodInfo.GetTypeInfo(UInt32, UInt32, IntPtr)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection\n  summary: Retrieves the type information for an object, which can be used to get the type information for an interface.\n  remarks: This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetTypeInfo`, see the MSDN Library.\n  syntax:\n    content: void _MethodInfo.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);\n    parameters:\n    - id: iTInfo\n      type: System.UInt32\n      description: The type information to return.\n    - id: lcid\n      type: System.UInt32\n      description: The locale identifier for the type information.\n    - id: ppTInfo\n      type: System.IntPtr\n      description: Receives a pointer to the requested type information object.\n  overload: System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#GetTypeInfo*\n  exceptions:\n  - type: System.NotImplementedException\n    commentId: T:System.NotImplementedException\n    description: Late-bound access using the COM <code>IDispatch</code> interface is not supported.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#GetTypeInfoCount(System.UInt32@)\n  commentId: M:System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#GetTypeInfoCount(System.UInt32@)\n  id: System#Runtime#InteropServices#_MethodInfo#GetTypeInfoCount(System.UInt32@)\n  isEii: true\n  parent: System.Reflection.MethodInfo\n  langs:\n  - csharp\n  name: _MethodInfo.GetTypeInfoCount(UInt32)\n  nameWithType: MethodInfo._MethodInfo.GetTypeInfoCount(UInt32)\n  fullName: MethodInfo._MethodInfo.GetTypeInfoCount(UInt32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection\n  summary: Retrieves the number of type information interfaces that an object provides (either 0 or 1).\n  remarks: This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library.\n  syntax:\n    content: void _MethodInfo.GetTypeInfoCount (out uint pcTInfo);\n    parameters:\n    - id: pcTInfo\n      type: System.UInt32\n      description: Points to a location that receives the number of type information interfaces provided by the object.\n  overload: System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#GetTypeInfoCount*\n  exceptions:\n  - type: System.NotImplementedException\n    commentId: T:System.NotImplementedException\n    description: Late-bound access using the COM <code>IDispatch</code> interface is not supported.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  commentId: M:System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  id: System#Runtime#InteropServices#_MethodInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  isEii: true\n  parent: System.Reflection.MethodInfo\n  langs:\n  - csharp\n  name: _MethodInfo.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n  nameWithType: MethodInfo._MethodInfo.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n  fullName: MethodInfo._MethodInfo.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection\n  summary: Provides access to properties and methods exposed by an object.\n  remarks: This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::Invoke`, see the MSDN Library.\n  syntax:\n    content: void _MethodInfo.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);\n    parameters:\n    - id: dispIdMember\n      type: System.UInt32\n      description: Identifies the member.\n    - id: riid\n      type: System.Guid\n      description: Reserved for future use. Must be IID_NULL.\n    - id: lcid\n      type: System.UInt32\n      description: The locale context in which to interpret arguments.\n    - id: wFlags\n      type: System.Int16\n      description: Flags describing the context of the call.\n    - id: pDispParams\n      type: System.IntPtr\n      description: Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.\n    - id: pVarResult\n      type: System.IntPtr\n      description: Pointer to the location where the result is to be stored.\n    - id: pExcepInfo\n      type: System.IntPtr\n      description: Pointer to a structure that contains exception information.\n    - id: puArgErr\n      type: System.IntPtr\n      description: The index of the first argument that has an error.\n  overload: System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#Invoke*\n  exceptions:\n  - type: System.NotImplementedException\n    commentId: T:System.NotImplementedException\n    description: Late-bound access using the COM <code>IDispatch</code> interface is not supported.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\nreferences:\n- uid: System.Reflection.MethodBase\n  parent: System.Reflection\n  isExternal: false\n  name: MethodBase\n  nameWithType: MethodBase\n  fullName: System.Reflection.MethodBase\n- uid: System.NotSupportedException\n  parent: System\n  isExternal: false\n  name: NotSupportedException\n  nameWithType: NotSupportedException\n  fullName: System.NotSupportedException\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  nameWithType: InvalidOperationException\n  fullName: System.InvalidOperationException\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.NotImplementedException\n  parent: System\n  isExternal: false\n  name: NotImplementedException\n  nameWithType: NotImplementedException\n  fullName: System.NotImplementedException\n- uid: System.Reflection.MethodInfo.#ctor\n  parent: System.Reflection.MethodInfo\n  isExternal: false\n  name: MethodInfo()\n  nameWithType: MethodInfo.MethodInfo()\n  fullName: MethodInfo.MethodInfo()\n- uid: System.Reflection.MethodInfo.CreateDelegate(System.Type)\n  parent: System.Reflection.MethodInfo\n  isExternal: false\n  name: CreateDelegate(Type)\n  nameWithType: MethodInfo.CreateDelegate(Type)\n  fullName: MethodInfo.CreateDelegate(Type)\n- uid: System.Delegate\n  parent: System\n  isExternal: false\n  name: Delegate\n  nameWithType: Delegate\n  fullName: System.Delegate\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Reflection.MethodInfo.CreateDelegate(System.Type,System.Object)\n  parent: System.Reflection.MethodInfo\n  isExternal: false\n  name: CreateDelegate(Type, Object)\n  nameWithType: MethodInfo.CreateDelegate(Type, Object)\n  fullName: MethodInfo.CreateDelegate(Type, Object)\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Reflection.MethodInfo.Equals(System.Object)\n  parent: System.Reflection.MethodInfo\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: MethodInfo.Equals(Object)\n  fullName: MethodInfo.Equals(Object)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Reflection.MethodInfo.GetBaseDefinition\n  parent: System.Reflection.MethodInfo\n  isExternal: false\n  name: GetBaseDefinition()\n  nameWithType: MethodInfo.GetBaseDefinition()\n  fullName: MethodInfo.GetBaseDefinition()\n- uid: System.Reflection.MethodInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MethodInfo\n  nameWithType: MethodInfo\n  fullName: System.Reflection.MethodInfo\n- uid: System.Reflection.MethodInfo.GetGenericArguments\n  parent: System.Reflection.MethodInfo\n  isExternal: false\n  name: GetGenericArguments()\n  nameWithType: MethodInfo.GetGenericArguments()\n  fullName: MethodInfo.GetGenericArguments()\n- uid: System.Type[]\n  parent: System\n  isExternal: false\n  name: Type[]\n  nameWithType: Type[]\n  fullName: System.Type[]\n  spec.csharp:\n  - uid: System.Type\n    name: Type\n    nameWithType: Type\n    fullName: System.Type\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Reflection.MethodInfo.GetGenericMethodDefinition\n  parent: System.Reflection.MethodInfo\n  isExternal: false\n  name: GetGenericMethodDefinition()\n  nameWithType: MethodInfo.GetGenericMethodDefinition()\n  fullName: MethodInfo.GetGenericMethodDefinition()\n- uid: System.Reflection.MethodInfo.GetHashCode\n  parent: System.Reflection.MethodInfo\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: MethodInfo.GetHashCode()\n  fullName: MethodInfo.GetHashCode()\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Reflection.MethodInfo.MakeGenericMethod(System.Type[])\n  parent: System.Reflection.MethodInfo\n  isExternal: false\n  name: MakeGenericMethod(Type[])\n  nameWithType: MethodInfo.MakeGenericMethod(Type[])\n  fullName: MethodInfo.MakeGenericMethod(Type[])\n- uid: System.Reflection.MethodInfo.MemberType\n  parent: System.Reflection.MethodInfo\n  isExternal: false\n  name: MemberType\n  nameWithType: MethodInfo.MemberType\n  fullName: MethodInfo.MemberType\n- uid: System.Reflection.MemberTypes\n  parent: System.Reflection\n  isExternal: false\n  name: MemberTypes\n  nameWithType: MemberTypes\n  fullName: System.Reflection.MemberTypes\n- uid: System.Reflection.MethodInfo.op_Equality(System.Reflection.MethodInfo,System.Reflection.MethodInfo)\n  parent: System.Reflection.MethodInfo\n  isExternal: false\n  name: op_Equality(MethodInfo, MethodInfo)\n  nameWithType: MethodInfo.op_Equality(MethodInfo, MethodInfo)\n  fullName: MethodInfo.op_Equality(MethodInfo, MethodInfo)\n- uid: System.Reflection.MethodInfo.op_Inequality(System.Reflection.MethodInfo,System.Reflection.MethodInfo)\n  parent: System.Reflection.MethodInfo\n  isExternal: false\n  name: op_Inequality(MethodInfo, MethodInfo)\n  nameWithType: MethodInfo.op_Inequality(MethodInfo, MethodInfo)\n  fullName: MethodInfo.op_Inequality(MethodInfo, MethodInfo)\n- uid: System.Reflection.MethodInfo.ReturnParameter\n  parent: System.Reflection.MethodInfo\n  isExternal: false\n  name: ReturnParameter\n  nameWithType: MethodInfo.ReturnParameter\n  fullName: MethodInfo.ReturnParameter\n- uid: System.Reflection.ParameterInfo\n  parent: System.Reflection\n  isExternal: false\n  name: ParameterInfo\n  nameWithType: ParameterInfo\n  fullName: System.Reflection.ParameterInfo\n- uid: System.Reflection.MethodInfo.ReturnType\n  parent: System.Reflection.MethodInfo\n  isExternal: false\n  name: ReturnType\n  nameWithType: MethodInfo.ReturnType\n  fullName: MethodInfo.ReturnType\n- uid: System.Reflection.MethodInfo.ReturnTypeCustomAttributes\n  parent: System.Reflection.MethodInfo\n  isExternal: false\n  name: ReturnTypeCustomAttributes\n  nameWithType: MethodInfo.ReturnTypeCustomAttributes\n  fullName: MethodInfo.ReturnTypeCustomAttributes\n- uid: System.Reflection.ICustomAttributeProvider\n  parent: System.Reflection\n  isExternal: false\n  name: ICustomAttributeProvider\n  nameWithType: ICustomAttributeProvider\n  fullName: System.Reflection.ICustomAttributeProvider\n- uid: System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  parent: System.Reflection.MethodInfo\n  isExternal: false\n  name: _MethodInfo.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n  nameWithType: MethodInfo._MethodInfo.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n  fullName: MethodInfo._MethodInfo.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n- uid: System.Guid\n  parent: System\n  isExternal: false\n  name: Guid\n  nameWithType: Guid\n  fullName: System.Guid\n- uid: System.IntPtr\n  parent: System\n  isExternal: false\n  name: IntPtr\n  nameWithType: IntPtr\n  fullName: System.IntPtr\n- uid: System.UInt32\n  parent: System\n  isExternal: false\n  name: UInt32\n  nameWithType: UInt32\n  fullName: System.UInt32\n- uid: System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#GetType\n  parent: System.Reflection.MethodInfo\n  isExternal: false\n  name: _MethodInfo.GetType()\n  nameWithType: MethodInfo._MethodInfo.GetType()\n  fullName: MethodInfo._MethodInfo.GetType()\n- uid: System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  parent: System.Reflection.MethodInfo\n  isExternal: false\n  name: _MethodInfo.GetTypeInfo(UInt32, UInt32, IntPtr)\n  nameWithType: MethodInfo._MethodInfo.GetTypeInfo(UInt32, UInt32, IntPtr)\n  fullName: MethodInfo._MethodInfo.GetTypeInfo(UInt32, UInt32, IntPtr)\n- uid: System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#GetTypeInfoCount(System.UInt32@)\n  parent: System.Reflection.MethodInfo\n  isExternal: false\n  name: _MethodInfo.GetTypeInfoCount(UInt32)\n  nameWithType: MethodInfo._MethodInfo.GetTypeInfoCount(UInt32)\n  fullName: MethodInfo._MethodInfo.GetTypeInfoCount(UInt32)\n- uid: System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  parent: System.Reflection.MethodInfo\n  isExternal: false\n  name: _MethodInfo.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n  nameWithType: MethodInfo._MethodInfo.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n  fullName: MethodInfo._MethodInfo.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n- uid: System.Int16\n  parent: System\n  isExternal: false\n  name: Int16\n  nameWithType: Int16\n  fullName: System.Int16\n- uid: System.Reflection.MethodInfo.#ctor*\n  parent: System.Reflection.MethodInfo\n  isExternal: false\n  name: MethodInfo\n  nameWithType: MethodInfo.MethodInfo\n  fullName: MethodInfo.MethodInfo\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodInfo.xml\n- uid: System.Reflection.MethodInfo.CreateDelegate*\n  parent: System.Reflection.MethodInfo\n  isExternal: false\n  name: CreateDelegate\n  nameWithType: MethodInfo.CreateDelegate\n  fullName: MethodInfo.CreateDelegate\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodInfo.xml\n- uid: System.Reflection.MethodInfo.Equals*\n  parent: System.Reflection.MethodInfo\n  isExternal: false\n  name: Equals\n  nameWithType: MethodInfo.Equals\n  fullName: MethodInfo.Equals\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodInfo.xml\n- uid: System.Reflection.MethodInfo.GetBaseDefinition*\n  parent: System.Reflection.MethodInfo\n  isExternal: false\n  name: GetBaseDefinition\n  nameWithType: MethodInfo.GetBaseDefinition\n  fullName: MethodInfo.GetBaseDefinition\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodInfo.xml\n- uid: System.Reflection.MethodInfo.GetGenericArguments*\n  parent: System.Reflection.MethodInfo\n  isExternal: false\n  name: GetGenericArguments\n  nameWithType: MethodInfo.GetGenericArguments\n  fullName: MethodInfo.GetGenericArguments\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodInfo.xml\n- uid: System.Reflection.MethodInfo.GetGenericMethodDefinition*\n  parent: System.Reflection.MethodInfo\n  isExternal: false\n  name: GetGenericMethodDefinition\n  nameWithType: MethodInfo.GetGenericMethodDefinition\n  fullName: MethodInfo.GetGenericMethodDefinition\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodInfo.xml\n- uid: System.Reflection.MethodInfo.GetHashCode*\n  parent: System.Reflection.MethodInfo\n  isExternal: false\n  name: GetHashCode\n  nameWithType: MethodInfo.GetHashCode\n  fullName: MethodInfo.GetHashCode\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodInfo.xml\n- uid: System.Reflection.MethodInfo.MakeGenericMethod*\n  parent: System.Reflection.MethodInfo\n  isExternal: false\n  name: MakeGenericMethod\n  nameWithType: MethodInfo.MakeGenericMethod\n  fullName: MethodInfo.MakeGenericMethod\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodInfo.xml\n- uid: System.Reflection.MethodInfo.MemberType*\n  parent: System.Reflection.MethodInfo\n  isExternal: false\n  name: MemberType\n  nameWithType: MethodInfo.MemberType\n  fullName: MethodInfo.MemberType\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodInfo.xml\n- uid: System.Reflection.MethodInfo.op_Equality*\n  parent: System.Reflection.MethodInfo\n  isExternal: false\n  name: op_Equality\n  nameWithType: MethodInfo.op_Equality\n  fullName: MethodInfo.op_Equality\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodInfo.xml\n- uid: System.Reflection.MethodInfo.op_Inequality*\n  parent: System.Reflection.MethodInfo\n  isExternal: false\n  name: op_Inequality\n  nameWithType: MethodInfo.op_Inequality\n  fullName: MethodInfo.op_Inequality\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodInfo.xml\n- uid: System.Reflection.MethodInfo.ReturnParameter*\n  parent: System.Reflection.MethodInfo\n  isExternal: false\n  name: ReturnParameter\n  nameWithType: MethodInfo.ReturnParameter\n  fullName: MethodInfo.ReturnParameter\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodInfo.xml\n- uid: System.Reflection.MethodInfo.ReturnType*\n  parent: System.Reflection.MethodInfo\n  isExternal: false\n  name: ReturnType\n  nameWithType: MethodInfo.ReturnType\n  fullName: MethodInfo.ReturnType\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodInfo.xml\n- uid: System.Reflection.MethodInfo.ReturnTypeCustomAttributes*\n  parent: System.Reflection.MethodInfo\n  isExternal: false\n  name: ReturnTypeCustomAttributes\n  nameWithType: MethodInfo.ReturnTypeCustomAttributes\n  fullName: MethodInfo.ReturnTypeCustomAttributes\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodInfo.xml\n- uid: System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#GetIDsOfNames*\n  parent: System.Reflection.MethodInfo\n  isExternal: false\n  name: System.Runtime.InteropServices._MethodInfo.GetIDsOfNames\n  nameWithType: MethodInfo.System.Runtime.InteropServices._MethodInfo.GetIDsOfNames\n  fullName: MethodInfo.System.Runtime.InteropServices._MethodInfo.GetIDsOfNames\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodInfo.xml\n- uid: System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#GetType*\n  parent: System.Reflection.MethodInfo\n  isExternal: false\n  name: System.Runtime.InteropServices._MethodInfo.GetType\n  nameWithType: MethodInfo.System.Runtime.InteropServices._MethodInfo.GetType\n  fullName: MethodInfo.System.Runtime.InteropServices._MethodInfo.GetType\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodInfo.xml\n- uid: System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#GetTypeInfo*\n  parent: System.Reflection.MethodInfo\n  isExternal: false\n  name: System.Runtime.InteropServices._MethodInfo.GetTypeInfo\n  nameWithType: MethodInfo.System.Runtime.InteropServices._MethodInfo.GetTypeInfo\n  fullName: MethodInfo.System.Runtime.InteropServices._MethodInfo.GetTypeInfo\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodInfo.xml\n- uid: System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#GetTypeInfoCount*\n  parent: System.Reflection.MethodInfo\n  isExternal: false\n  name: System.Runtime.InteropServices._MethodInfo.GetTypeInfoCount\n  nameWithType: MethodInfo.System.Runtime.InteropServices._MethodInfo.GetTypeInfoCount\n  fullName: MethodInfo.System.Runtime.InteropServices._MethodInfo.GetTypeInfoCount\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodInfo.xml\n- uid: System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#Invoke*\n  parent: System.Reflection.MethodInfo\n  isExternal: false\n  name: System.Runtime.InteropServices._MethodInfo.Invoke\n  nameWithType: MethodInfo.System.Runtime.InteropServices._MethodInfo.Invoke\n  fullName: MethodInfo.System.Runtime.InteropServices._MethodInfo.Invoke\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodInfo.xml\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.Reflection.MemberInfo.CustomAttributes\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: CustomAttributes\n  nameWithType: MemberInfo.CustomAttributes\n  fullName: MemberInfo.CustomAttributes\n- uid: System.Reflection.MemberInfo.DeclaringType\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: DeclaringType\n  nameWithType: MemberInfo.DeclaringType\n  fullName: MemberInfo.DeclaringType\n- uid: System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: GetCustomAttributes(Boolean)\n  nameWithType: MemberInfo.GetCustomAttributes(Boolean)\n  fullName: MemberInfo.GetCustomAttributes(Boolean)\n- uid: System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: GetCustomAttributes(Type, Boolean)\n  nameWithType: MemberInfo.GetCustomAttributes(Type, Boolean)\n  fullName: MemberInfo.GetCustomAttributes(Type, Boolean)\n- uid: System.Reflection.MemberInfo.GetCustomAttributesData\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: GetCustomAttributesData()\n  nameWithType: MemberInfo.GetCustomAttributesData()\n  fullName: MemberInfo.GetCustomAttributesData()\n- uid: System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: IsDefined(Type, Boolean)\n  nameWithType: MemberInfo.IsDefined(Type, Boolean)\n  fullName: MemberInfo.IsDefined(Type, Boolean)\n- uid: System.Reflection.MemberInfo.MetadataToken\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: MetadataToken\n  nameWithType: MemberInfo.MetadataToken\n  fullName: MemberInfo.MetadataToken\n- uid: System.Reflection.MemberInfo.Module\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: Module\n  nameWithType: MemberInfo.Module\n  fullName: MemberInfo.Module\n- uid: System.Reflection.MemberInfo.Name\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: Name\n  nameWithType: MemberInfo.Name\n  fullName: MemberInfo.Name\n- uid: System.Reflection.MemberInfo.op_Equality(System.Reflection.MemberInfo,System.Reflection.MemberInfo)\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: op_Equality(MemberInfo, MemberInfo)\n  nameWithType: MemberInfo.op_Equality(MemberInfo, MemberInfo)\n  fullName: MemberInfo.op_Equality(MemberInfo, MemberInfo)\n- uid: System.Reflection.MemberInfo.op_Inequality(System.Reflection.MemberInfo,System.Reflection.MemberInfo)\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: op_Inequality(MemberInfo, MemberInfo)\n  nameWithType: MemberInfo.op_Inequality(MemberInfo, MemberInfo)\n  fullName: MemberInfo.op_Inequality(MemberInfo, MemberInfo)\n- uid: System.Reflection.MemberInfo.ReflectedType\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: ReflectedType\n  nameWithType: MemberInfo.ReflectedType\n  fullName: MemberInfo.ReflectedType\n- uid: System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Boolean)\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: ICustomAttributeProvider.GetCustomAttributes(Boolean)\n  nameWithType: MemberInfo.ICustomAttributeProvider.GetCustomAttributes(Boolean)\n  fullName: MemberInfo.ICustomAttributeProvider.GetCustomAttributes(Boolean)\n- uid: System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Type,System.Boolean)\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)\n  nameWithType: MemberInfo.ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)\n  fullName: MemberInfo.ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)\n- uid: System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#IsDefined(System.Type,System.Boolean)\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: ICustomAttributeProvider.IsDefined(Type, Boolean)\n  nameWithType: MemberInfo.ICustomAttributeProvider.IsDefined(Type, Boolean)\n  fullName: MemberInfo.ICustomAttributeProvider.IsDefined(Type, Boolean)\n- uid: System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: _MemberInfo.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n  nameWithType: MemberInfo._MemberInfo.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n  fullName: MemberInfo._MemberInfo.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n- uid: System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetType\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: _MemberInfo.GetType()\n  nameWithType: MemberInfo._MemberInfo.GetType()\n  fullName: MemberInfo._MemberInfo.GetType()\n- uid: System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: _MemberInfo.GetTypeInfo(UInt32, UInt32, IntPtr)\n  nameWithType: MemberInfo._MemberInfo.GetTypeInfo(UInt32, UInt32, IntPtr)\n  fullName: MemberInfo._MemberInfo.GetTypeInfo(UInt32, UInt32, IntPtr)\n- uid: System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfoCount(System.UInt32@)\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: _MemberInfo.GetTypeInfoCount(UInt32)\n  nameWithType: MemberInfo._MemberInfo.GetTypeInfoCount(UInt32)\n  fullName: MemberInfo._MemberInfo.GetTypeInfoCount(UInt32)\n- uid: System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: _MemberInfo.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n  nameWithType: MemberInfo._MemberInfo.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n  fullName: MemberInfo._MemberInfo.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n- uid: System.Reflection.MethodBase.Attributes\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: Attributes\n  nameWithType: MethodBase.Attributes\n  fullName: MethodBase.Attributes\n- uid: System.Reflection.MethodBase.CallingConvention\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: CallingConvention\n  nameWithType: MethodBase.CallingConvention\n  fullName: MethodBase.CallingConvention\n- uid: System.Reflection.MethodBase.ContainsGenericParameters\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: ContainsGenericParameters\n  nameWithType: MethodBase.ContainsGenericParameters\n  fullName: MethodBase.ContainsGenericParameters\n- uid: System.Reflection.MethodBase.GetCurrentMethod\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: GetCurrentMethod()\n  nameWithType: MethodBase.GetCurrentMethod()\n  fullName: MethodBase.GetCurrentMethod()\n- uid: System.Reflection.MethodBase.GetMethodBody\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: GetMethodBody()\n  nameWithType: MethodBase.GetMethodBody()\n  fullName: MethodBase.GetMethodBody()\n- uid: System.Reflection.MethodBase.GetMethodFromHandle(System.RuntimeMethodHandle)\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: GetMethodFromHandle(RuntimeMethodHandle)\n  nameWithType: MethodBase.GetMethodFromHandle(RuntimeMethodHandle)\n  fullName: MethodBase.GetMethodFromHandle(RuntimeMethodHandle)\n- uid: System.Reflection.MethodBase.GetMethodFromHandle(System.RuntimeMethodHandle,System.RuntimeTypeHandle)\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: GetMethodFromHandle(RuntimeMethodHandle, RuntimeTypeHandle)\n  nameWithType: MethodBase.GetMethodFromHandle(RuntimeMethodHandle, RuntimeTypeHandle)\n  fullName: MethodBase.GetMethodFromHandle(RuntimeMethodHandle, RuntimeTypeHandle)\n- uid: System.Reflection.MethodBase.GetMethodImplementationFlags\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: GetMethodImplementationFlags()\n  nameWithType: MethodBase.GetMethodImplementationFlags()\n  fullName: MethodBase.GetMethodImplementationFlags()\n- uid: System.Reflection.MethodBase.GetParameters\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: GetParameters()\n  nameWithType: MethodBase.GetParameters()\n  fullName: MethodBase.GetParameters()\n- uid: System.Reflection.MethodBase.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: Invoke(Object, BindingFlags, Binder, Object[], CultureInfo)\n  nameWithType: MethodBase.Invoke(Object, BindingFlags, Binder, Object[], CultureInfo)\n  fullName: MethodBase.Invoke(Object, BindingFlags, Binder, Object[], CultureInfo)\n- uid: System.Reflection.MethodBase.Invoke(System.Object,System.Object[])\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: Invoke(Object, Object[])\n  nameWithType: MethodBase.Invoke(Object, Object[])\n  fullName: MethodBase.Invoke(Object, Object[])\n- uid: System.Reflection.MethodBase.IsAbstract\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: IsAbstract\n  nameWithType: MethodBase.IsAbstract\n  fullName: MethodBase.IsAbstract\n- uid: System.Reflection.MethodBase.IsAssembly\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: IsAssembly\n  nameWithType: MethodBase.IsAssembly\n  fullName: MethodBase.IsAssembly\n- uid: System.Reflection.MethodBase.IsConstructor\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: IsConstructor\n  nameWithType: MethodBase.IsConstructor\n  fullName: MethodBase.IsConstructor\n- uid: System.Reflection.MethodBase.IsFamily\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: IsFamily\n  nameWithType: MethodBase.IsFamily\n  fullName: MethodBase.IsFamily\n- uid: System.Reflection.MethodBase.IsFamilyAndAssembly\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: IsFamilyAndAssembly\n  nameWithType: MethodBase.IsFamilyAndAssembly\n  fullName: MethodBase.IsFamilyAndAssembly\n- uid: System.Reflection.MethodBase.IsFamilyOrAssembly\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: IsFamilyOrAssembly\n  nameWithType: MethodBase.IsFamilyOrAssembly\n  fullName: MethodBase.IsFamilyOrAssembly\n- uid: System.Reflection.MethodBase.IsFinal\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: IsFinal\n  nameWithType: MethodBase.IsFinal\n  fullName: MethodBase.IsFinal\n- uid: System.Reflection.MethodBase.IsGenericMethod\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: IsGenericMethod\n  nameWithType: MethodBase.IsGenericMethod\n  fullName: MethodBase.IsGenericMethod\n- uid: System.Reflection.MethodBase.IsGenericMethodDefinition\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: IsGenericMethodDefinition\n  nameWithType: MethodBase.IsGenericMethodDefinition\n  fullName: MethodBase.IsGenericMethodDefinition\n- uid: System.Reflection.MethodBase.IsHideBySig\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: IsHideBySig\n  nameWithType: MethodBase.IsHideBySig\n  fullName: MethodBase.IsHideBySig\n- uid: System.Reflection.MethodBase.IsPrivate\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: IsPrivate\n  nameWithType: MethodBase.IsPrivate\n  fullName: MethodBase.IsPrivate\n- uid: System.Reflection.MethodBase.IsPublic\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: IsPublic\n  nameWithType: MethodBase.IsPublic\n  fullName: MethodBase.IsPublic\n- uid: System.Reflection.MethodBase.IsSecurityCritical\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: IsSecurityCritical\n  nameWithType: MethodBase.IsSecurityCritical\n  fullName: MethodBase.IsSecurityCritical\n- uid: System.Reflection.MethodBase.IsSecuritySafeCritical\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: IsSecuritySafeCritical\n  nameWithType: MethodBase.IsSecuritySafeCritical\n  fullName: MethodBase.IsSecuritySafeCritical\n- uid: System.Reflection.MethodBase.IsSecurityTransparent\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: IsSecurityTransparent\n  nameWithType: MethodBase.IsSecurityTransparent\n  fullName: MethodBase.IsSecurityTransparent\n- uid: System.Reflection.MethodBase.IsSpecialName\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: IsSpecialName\n  nameWithType: MethodBase.IsSpecialName\n  fullName: MethodBase.IsSpecialName\n- uid: System.Reflection.MethodBase.IsStatic\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: IsStatic\n  nameWithType: MethodBase.IsStatic\n  fullName: MethodBase.IsStatic\n- uid: System.Reflection.MethodBase.IsVirtual\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: IsVirtual\n  nameWithType: MethodBase.IsVirtual\n  fullName: MethodBase.IsVirtual\n- uid: System.Reflection.MethodBase.MethodHandle\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: MethodHandle\n  nameWithType: MethodBase.MethodHandle\n  fullName: MethodBase.MethodHandle\n- uid: System.Reflection.MethodBase.MethodImplementationFlags\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: MethodImplementationFlags\n  nameWithType: MethodBase.MethodImplementationFlags\n  fullName: MethodBase.MethodImplementationFlags\n- uid: System.Reflection.MethodBase.op_Equality(System.Reflection.MethodBase,System.Reflection.MethodBase)\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: op_Equality(MethodBase, MethodBase)\n  nameWithType: MethodBase.op_Equality(MethodBase, MethodBase)\n  fullName: MethodBase.op_Equality(MethodBase, MethodBase)\n- uid: System.Reflection.MethodBase.op_Inequality(System.Reflection.MethodBase,System.Reflection.MethodBase)\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: op_Inequality(MethodBase, MethodBase)\n  nameWithType: MethodBase.op_Inequality(MethodBase, MethodBase)\n  fullName: MethodBase.op_Inequality(MethodBase, MethodBase)\n- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: _MethodBase.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n  nameWithType: MethodBase._MethodBase.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n  fullName: MethodBase._MethodBase.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#GetType\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: _MethodBase.GetType()\n  nameWithType: MethodBase._MethodBase.GetType()\n  fullName: MethodBase._MethodBase.GetType()\n- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: _MethodBase.GetTypeInfo(UInt32, UInt32, IntPtr)\n  nameWithType: MethodBase._MethodBase.GetTypeInfo(UInt32, UInt32, IntPtr)\n  fullName: MethodBase._MethodBase.GetTypeInfo(UInt32, UInt32, IntPtr)\n- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#GetTypeInfoCount(System.UInt32@)\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: _MethodBase.GetTypeInfoCount(UInt32)\n  nameWithType: MethodBase._MethodBase.GetTypeInfoCount(UInt32)\n  fullName: MethodBase._MethodBase.GetTypeInfoCount(UInt32)\n- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: _MethodBase.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n  nameWithType: MethodBase._MethodBase.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n  fullName: MethodBase._MethodBase.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsAbstract\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: _MethodBase.IsAbstract\n  nameWithType: MethodBase._MethodBase.IsAbstract\n  fullName: MethodBase._MethodBase.IsAbstract\n- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsAssembly\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: _MethodBase.IsAssembly\n  nameWithType: MethodBase._MethodBase.IsAssembly\n  fullName: MethodBase._MethodBase.IsAssembly\n- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsConstructor\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: _MethodBase.IsConstructor\n  nameWithType: MethodBase._MethodBase.IsConstructor\n  fullName: MethodBase._MethodBase.IsConstructor\n- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsFamily\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: _MethodBase.IsFamily\n  nameWithType: MethodBase._MethodBase.IsFamily\n  fullName: MethodBase._MethodBase.IsFamily\n- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsFamilyAndAssembly\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: _MethodBase.IsFamilyAndAssembly\n  nameWithType: MethodBase._MethodBase.IsFamilyAndAssembly\n  fullName: MethodBase._MethodBase.IsFamilyAndAssembly\n- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsFamilyOrAssembly\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: _MethodBase.IsFamilyOrAssembly\n  nameWithType: MethodBase._MethodBase.IsFamilyOrAssembly\n  fullName: MethodBase._MethodBase.IsFamilyOrAssembly\n- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsFinal\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: _MethodBase.IsFinal\n  nameWithType: MethodBase._MethodBase.IsFinal\n  fullName: MethodBase._MethodBase.IsFinal\n- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsHideBySig\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: _MethodBase.IsHideBySig\n  nameWithType: MethodBase._MethodBase.IsHideBySig\n  fullName: MethodBase._MethodBase.IsHideBySig\n- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsPrivate\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: _MethodBase.IsPrivate\n  nameWithType: MethodBase._MethodBase.IsPrivate\n  fullName: MethodBase._MethodBase.IsPrivate\n- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsPublic\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: _MethodBase.IsPublic\n  nameWithType: MethodBase._MethodBase.IsPublic\n  fullName: MethodBase._MethodBase.IsPublic\n- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsSpecialName\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: _MethodBase.IsSpecialName\n  nameWithType: MethodBase._MethodBase.IsSpecialName\n  fullName: MethodBase._MethodBase.IsSpecialName\n- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsStatic\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: _MethodBase.IsStatic\n  nameWithType: MethodBase._MethodBase.IsStatic\n  fullName: MethodBase._MethodBase.IsStatic\n- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsVirtual\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: _MethodBase.IsVirtual\n  nameWithType: MethodBase._MethodBase.IsVirtual\n  fullName: MethodBase._MethodBase.IsVirtual\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.MemberInfo,System.Type)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: GetCustomAttribute(MemberInfo, Type)\n  nameWithType: CustomAttributeExtensions.GetCustomAttribute(MemberInfo, Type)\n  fullName: CustomAttributeExtensions.GetCustomAttribute(MemberInfo, Type)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: GetCustomAttribute(MemberInfo, Type, Boolean)\n  nameWithType: CustomAttributeExtensions.GetCustomAttribute(MemberInfo, Type, Boolean)\n  fullName: CustomAttributeExtensions.GetCustomAttribute(MemberInfo, Type, Boolean)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.MemberInfo)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: GetCustomAttribute<T>(MemberInfo)\n  nameWithType: CustomAttributeExtensions.GetCustomAttribute<T>(MemberInfo)\n  fullName: CustomAttributeExtensions.GetCustomAttribute<T>(MemberInfo)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.MemberInfo,System.Boolean)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: GetCustomAttribute<T>(MemberInfo, Boolean)\n  nameWithType: CustomAttributeExtensions.GetCustomAttribute<T>(MemberInfo, Boolean)\n  fullName: CustomAttributeExtensions.GetCustomAttribute<T>(MemberInfo, Boolean)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: GetCustomAttributes(MemberInfo)\n  nameWithType: CustomAttributeExtensions.GetCustomAttributes(MemberInfo)\n  fullName: CustomAttributeExtensions.GetCustomAttributes(MemberInfo)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: GetCustomAttributes(MemberInfo, Boolean)\n  nameWithType: CustomAttributeExtensions.GetCustomAttributes(MemberInfo, Boolean)\n  fullName: CustomAttributeExtensions.GetCustomAttributes(MemberInfo, Boolean)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo,System.Type)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: GetCustomAttributes(MemberInfo, Type)\n  nameWithType: CustomAttributeExtensions.GetCustomAttributes(MemberInfo, Type)\n  fullName: CustomAttributeExtensions.GetCustomAttributes(MemberInfo, Type)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: GetCustomAttributes(MemberInfo, Type, Boolean)\n  nameWithType: CustomAttributeExtensions.GetCustomAttributes(MemberInfo, Type, Boolean)\n  fullName: CustomAttributeExtensions.GetCustomAttributes(MemberInfo, Type, Boolean)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.MemberInfo)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: GetCustomAttributes<T>(MemberInfo)\n  nameWithType: CustomAttributeExtensions.GetCustomAttributes<T>(MemberInfo)\n  fullName: CustomAttributeExtensions.GetCustomAttributes<T>(MemberInfo)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.MemberInfo,System.Boolean)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: GetCustomAttributes<T>(MemberInfo, Boolean)\n  nameWithType: CustomAttributeExtensions.GetCustomAttributes<T>(MemberInfo, Boolean)\n  fullName: CustomAttributeExtensions.GetCustomAttributes<T>(MemberInfo, Boolean)\n- uid: System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.MemberInfo,System.Type)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: IsDefined(MemberInfo, Type)\n  nameWithType: CustomAttributeExtensions.IsDefined(MemberInfo, Type)\n  fullName: CustomAttributeExtensions.IsDefined(MemberInfo, Type)\n- uid: System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: IsDefined(MemberInfo, Type, Boolean)\n  nameWithType: CustomAttributeExtensions.IsDefined(MemberInfo, Type, Boolean)\n  fullName: CustomAttributeExtensions.IsDefined(MemberInfo, Type, Boolean)\n- uid: System.Reflection.MemberInfoExtensions.GetMetadataToken(System.Reflection.MemberInfo)\n  parent: System.Reflection.MemberInfoExtensions\n  isExternal: false\n  name: GetMetadataToken(MemberInfo)\n  nameWithType: MemberInfoExtensions.GetMetadataToken(MemberInfo)\n  fullName: MemberInfoExtensions.GetMetadataToken(MemberInfo)\n- uid: System.Reflection.MemberInfoExtensions.HasMetadataToken(System.Reflection.MemberInfo)\n  parent: System.Reflection.MemberInfoExtensions\n  isExternal: false\n  name: HasMetadataToken(MemberInfo)\n  nameWithType: MemberInfoExtensions.HasMetadataToken(MemberInfo)\n  fullName: MemberInfoExtensions.HasMetadataToken(MemberInfo)\n- uid: System.Reflection.MethodInfoExtensions.GetBaseDefinition(System.Reflection.MethodInfo)\n  parent: System.Reflection.MethodInfoExtensions\n  isExternal: false\n  name: GetBaseDefinition(MethodInfo)\n  nameWithType: MethodInfoExtensions.GetBaseDefinition(MethodInfo)\n  fullName: MethodInfoExtensions.GetBaseDefinition(MethodInfo)\n- uid: System.Reflection.RuntimeReflectionExtensions.GetRuntimeBaseDefinition(System.Reflection.MethodInfo)\n  parent: System.Reflection.RuntimeReflectionExtensions\n  isExternal: false\n  name: GetRuntimeBaseDefinition(MethodInfo)\n  nameWithType: RuntimeReflectionExtensions.GetRuntimeBaseDefinition(MethodInfo)\n  fullName: RuntimeReflectionExtensions.GetRuntimeBaseDefinition(MethodInfo)\n- uid: System.Runtime.InteropServices._MethodInfo\n  parent: System.Runtime.InteropServices\n  isExternal: false\n  name: _MethodInfo\n  nameWithType: _MethodInfo\n  fullName: System.Runtime.InteropServices._MethodInfo\n"}