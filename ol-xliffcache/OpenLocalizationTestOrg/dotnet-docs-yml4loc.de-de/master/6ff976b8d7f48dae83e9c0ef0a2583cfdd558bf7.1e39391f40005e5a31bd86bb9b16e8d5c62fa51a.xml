{"nodes":[{"content":"Represents an XML document. For the components and usage of an <xref href=\"System.Xml.Linq.XDocument\"></xref> object, see [XDocument Class Overview](http://msdn.microsoft.com/library/90f78331-1be8-42fb-93e7-bd1325826467).","nodes":[{"pos":[0,221],"content":"Represents an XML document. For the components and usage of an <xref href=\"System.Xml.Linq.XDocument\"></xref> object, see [XDocument Class Overview](http://msdn.microsoft.com/library/90f78331-1be8-42fb-93e7-bd1325826467).","nodes":[{"content":"Represents an XML document.","pos":[0,27]},{"content":"For the components and usage of an <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XDocument\"&gt;&lt;/xref&gt;</ph> object, see <bpt id=\"p1\">[</bpt>XDocument Class Overview<ept id=\"p1\">](http://msdn.microsoft.com/library/90f78331-1be8-42fb-93e7-bd1325826467)</ept>.","pos":[28,221],"source":" For the components and usage of an <xref href=\"System.Xml.Linq.XDocument\"></xref> object, see [XDocument Class Overview](http://msdn.microsoft.com/library/90f78331-1be8-42fb-93e7-bd1325826467)."}]}],"pos":[2773,2995],"yaml":true},{"content":"> [!NOTE]\n>  To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#System.Xml.Linq/XLinq.cs#3354dac0913e417b). You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/).  \n  \n For details about the valid content of an <xref:System.Xml.Linq.XDocument>, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).","nodes":[{"pos":[2,404],"content":"[!NOTE]\n To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#System.Xml.Linq/XLinq.cs#3354dac0913e417b). You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/).","leadings":["","> "],"nodes":[{"content":" To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#System.Xml.Linq/XLinq.cs#3354dac0913e417b). You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/).","pos":[8,400],"nodes":[{"content":"To view the .NET Framework source code for this type, see the <bpt id=\"p1\">[</bpt>Reference Source<ept id=\"p1\">](http://referencesource.microsoft.com/#System.Xml.Linq/XLinq.cs#3354dac0913e417b)</ept>.","pos":[1,163],"source":" To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#System.Xml.Linq/XLinq.cs#3354dac0913e417b)."},{"content":"You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see <bpt id=\"p1\">[</bpt>instructions<ept id=\"p1\">](http://referencesource.microsoft.com/)</ept>.","pos":[164,392],"source":" You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/)."}]}]},{"pos":[411,613],"content":"For details about the valid content of an <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XDocument&gt;</ph>, see <bpt id=\"p1\">[</bpt>Valid Content of XElement and XDocument Objects<ept id=\"p1\">](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)</ept>.","source":"For details about the valid content of an <xref:System.Xml.Linq.XDocument>, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)."}],"pos":[3006,3625],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Xml.Linq.XDocument\"></xref> class.","nodes":[{"pos":[0,87],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XDocument\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.Xml.Linq.XDocument\"></xref> class."}],"pos":[11973,12061],"yaml":true},{"content":"There are not many scenarios that require you to create an <xref:System.Xml.Linq.XDocument>. Instead, you can usually create your XML trees with an <xref:System.Xml.Linq.XElement> root node. Unless you have a specific requirement to create a document (for example, because you have to create processing instructions and comments at the top level, or you have to support document types), it is often more convenient to use <xref:System.Xml.Linq.XElement> as your root node.  \n  \n For details about the valid content of an <xref:System.Xml.Linq.XDocument>, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).","nodes":[{"pos":[0,472],"content":"There are not many scenarios that require you to create an <xref:System.Xml.Linq.XDocument>. Instead, you can usually create your XML trees with an <xref:System.Xml.Linq.XElement> root node. Unless you have a specific requirement to create a document (for example, because you have to create processing instructions and comments at the top level, or you have to support document types), it is often more convenient to use <xref:System.Xml.Linq.XElement> as your root node.","nodes":[{"content":"There are not many scenarios that require you to create an <xref:System.Xml.Linq.XDocument>. Instead, you can usually create your XML trees with an <xref:System.Xml.Linq.XElement> root node. Unless you have a specific requirement to create a document (for example, because you have to create processing instructions and comments at the top level, or you have to support document types), it is often more convenient to use <xref:System.Xml.Linq.XElement> as your root node.","pos":[0,472],"nodes":[{"content":"There are not many scenarios that require you to create an <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XDocument&gt;</ph>.","pos":[0,92],"source":"There are not many scenarios that require you to create an <xref:System.Xml.Linq.XDocument>."},{"content":"Instead, you can usually create your XML trees with an <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XElement&gt;</ph> root node.","pos":[93,190],"source":" Instead, you can usually create your XML trees with an <xref:System.Xml.Linq.XElement> root node."},{"content":"Unless you have a specific requirement to create a document (for example, because you have to create processing instructions and comments at the top level, or you have to support document types), it is often more convenient to use <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XElement&gt;</ph> as your root node.","pos":[191,472],"source":" Unless you have a specific requirement to create a document (for example, because you have to create processing instructions and comments at the top level, or you have to support document types), it is often more convenient to use <xref:System.Xml.Linq.XElement> as your root node."}]}]},{"pos":[479,681],"content":"For details about the valid content of an <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XDocument&gt;</ph>, see <bpt id=\"p1\">[</bpt>Valid Content of XElement and XDocument Objects<ept id=\"p1\">](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)</ept>.","source":"For details about the valid content of an <xref:System.Xml.Linq.XDocument>, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)."}],"pos":[12072,12758],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Xml.Linq.XDocument\"></xref> class with the specified content.","nodes":[{"pos":[0,114],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XDocument\"&gt;&lt;/xref&gt;</ph> class with the specified content.","source":"Initializes a new instance of the <xref href=\"System.Xml.Linq.XDocument\"></xref> class with the specified content."}],"pos":[15005,15120],"yaml":true},{"content":"There are not many scenarios that require you to create an <xref:System.Xml.Linq.XDocument>. Instead, you can usually create your XML trees with an <xref:System.Xml.Linq.XElement> root node. Unless you have a specific requirement to create a document (for example, because you have to create processing instructions and comments at the top level, or you have to support document types), it is often more convenient to use <xref:System.Xml.Linq.XElement> as your root node.  \n  \n For details about the valid content of an <xref:System.Xml.Linq.XDocument>, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).","nodes":[{"pos":[0,472],"content":"There are not many scenarios that require you to create an <xref:System.Xml.Linq.XDocument>. Instead, you can usually create your XML trees with an <xref:System.Xml.Linq.XElement> root node. Unless you have a specific requirement to create a document (for example, because you have to create processing instructions and comments at the top level, or you have to support document types), it is often more convenient to use <xref:System.Xml.Linq.XElement> as your root node.","nodes":[{"content":"There are not many scenarios that require you to create an <xref:System.Xml.Linq.XDocument>. Instead, you can usually create your XML trees with an <xref:System.Xml.Linq.XElement> root node. Unless you have a specific requirement to create a document (for example, because you have to create processing instructions and comments at the top level, or you have to support document types), it is often more convenient to use <xref:System.Xml.Linq.XElement> as your root node.","pos":[0,472],"nodes":[{"content":"There are not many scenarios that require you to create an <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XDocument&gt;</ph>.","pos":[0,92],"source":"There are not many scenarios that require you to create an <xref:System.Xml.Linq.XDocument>."},{"content":"Instead, you can usually create your XML trees with an <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XElement&gt;</ph> root node.","pos":[93,190],"source":" Instead, you can usually create your XML trees with an <xref:System.Xml.Linq.XElement> root node."},{"content":"Unless you have a specific requirement to create a document (for example, because you have to create processing instructions and comments at the top level, or you have to support document types), it is often more convenient to use <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XElement&gt;</ph> as your root node.","pos":[191,472],"source":" Unless you have a specific requirement to create a document (for example, because you have to create processing instructions and comments at the top level, or you have to support document types), it is often more convenient to use <xref:System.Xml.Linq.XElement> as your root node."}]}]},{"pos":[479,681],"content":"For details about the valid content of an <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XDocument&gt;</ph>, see <bpt id=\"p1\">[</bpt>Valid Content of XElement and XDocument Objects<ept id=\"p1\">](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)</ept>.","source":"For details about the valid content of an <xref:System.Xml.Linq.XDocument>, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)."}],"pos":[15131,15817],"yaml":true,"extradata":"MT"},{"content":"A parameter list of content objects to add to this document.","nodes":[{"pos":[0,60],"content":"A parameter list of content objects to add to this document.","nodes":[{"content":"A parameter list of content objects to add to this document.","pos":[0,60]}]}],"pos":[18068,18129],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Xml.Linq.XDocument\"></xref> class from an existing <xref href=\"System.Xml.Linq.XDocument\"></xref> object.","nodes":[{"pos":[0,158],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XDocument\"&gt;&lt;/xref&gt;</ph> class from an existing <ph id=\"ph2\">&lt;xref href=\"System.Xml.Linq.XDocument\"&gt;&lt;/xref&gt;</ph> object.","source":"Initializes a new instance of the <xref href=\"System.Xml.Linq.XDocument\"></xref> class from an existing <xref href=\"System.Xml.Linq.XDocument\"></xref> object."}],"pos":[19705,19864],"yaml":true},{"content":"You use this constructor to make a deep copy of an <xref:System.Xml.Linq.XDocument>.  \n  \n This constructor traverses all nodes and attributes in the document specified in the `other` parameter, and creates copies of all nodes as it assembles the newly initialized <xref:System.Xml.Linq.XDocument>.","nodes":[{"pos":[0,84],"content":"You use this constructor to make a deep copy of an <xref:System.Xml.Linq.XDocument>.","nodes":[{"content":"You use this constructor to make a deep copy of an <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XDocument&gt;</ph>.","pos":[0,84],"source":"You use this constructor to make a deep copy of an <xref:System.Xml.Linq.XDocument>."}]},{"pos":[91,298],"content":"This constructor traverses all nodes and attributes in the document specified in the <ph id=\"ph1\">`other`</ph> parameter, and creates copies of all nodes as it assembles the newly initialized <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XDocument&gt;</ph>.","source":"This constructor traverses all nodes and attributes in the document specified in the `other` parameter, and creates copies of all nodes as it assembles the newly initialized <xref:System.Xml.Linq.XDocument>."}],"pos":[19875,20178],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Xml.Linq.XDocument\"></xref> object that will be copied.","nodes":[{"pos":[0,78],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XDocument\"&gt;&lt;/xref&gt;</ph> object that will be copied.","source":"The <xref href=\"System.Xml.Linq.XDocument\"></xref> object that will be copied."}],"pos":[20342,20421],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Xml.Linq.XDocument\"></xref> class with the specified <xref href=\"System.Xml.Linq.XDeclaration\"></xref> and content.","nodes":[{"pos":[0,168],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XDocument\"&gt;&lt;/xref&gt;</ph> class with the specified <ph id=\"ph2\">&lt;xref href=\"System.Xml.Linq.XDeclaration\"&gt;&lt;/xref&gt;</ph> and content.","source":"Initializes a new instance of the <xref href=\"System.Xml.Linq.XDocument\"></xref> class with the specified <xref href=\"System.Xml.Linq.XDeclaration\"></xref> and content."}],"pos":[22093,22262],"yaml":true},{"content":"There are not many scenarios that require you to create an <xref:System.Xml.Linq.XDocument>. Instead, you can usually create your XML trees with an <xref:System.Xml.Linq.XElement> root node. Unless you have a specific requirement to create a document (for example, because you have to create processing instructions and comments at the top level, or you have to support document types), it is often more convenient to use <xref:System.Xml.Linq.XElement> as your root node.  \n  \n For details about the valid content of an <xref:System.Xml.Linq.XDocument>, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).","nodes":[{"pos":[0,472],"content":"There are not many scenarios that require you to create an <xref:System.Xml.Linq.XDocument>. Instead, you can usually create your XML trees with an <xref:System.Xml.Linq.XElement> root node. Unless you have a specific requirement to create a document (for example, because you have to create processing instructions and comments at the top level, or you have to support document types), it is often more convenient to use <xref:System.Xml.Linq.XElement> as your root node.","nodes":[{"content":"There are not many scenarios that require you to create an <xref:System.Xml.Linq.XDocument>. Instead, you can usually create your XML trees with an <xref:System.Xml.Linq.XElement> root node. Unless you have a specific requirement to create a document (for example, because you have to create processing instructions and comments at the top level, or you have to support document types), it is often more convenient to use <xref:System.Xml.Linq.XElement> as your root node.","pos":[0,472],"nodes":[{"content":"There are not many scenarios that require you to create an <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XDocument&gt;</ph>.","pos":[0,92],"source":"There are not many scenarios that require you to create an <xref:System.Xml.Linq.XDocument>."},{"content":"Instead, you can usually create your XML trees with an <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XElement&gt;</ph> root node.","pos":[93,190],"source":" Instead, you can usually create your XML trees with an <xref:System.Xml.Linq.XElement> root node."},{"content":"Unless you have a specific requirement to create a document (for example, because you have to create processing instructions and comments at the top level, or you have to support document types), it is often more convenient to use <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XElement&gt;</ph> as your root node.","pos":[191,472],"source":" Unless you have a specific requirement to create a document (for example, because you have to create processing instructions and comments at the top level, or you have to support document types), it is often more convenient to use <xref:System.Xml.Linq.XElement> as your root node."}]}]},{"pos":[479,681],"content":"For details about the valid content of an <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XDocument&gt;</ph>, see <bpt id=\"p1\">[</bpt>Valid Content of XElement and XDocument Objects<ept id=\"p1\">](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)</ept>.","source":"For details about the valid content of an <xref:System.Xml.Linq.XDocument>, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)."}],"pos":[22273,22959],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Xml.Linq.XDeclaration\"></xref> for the document.","nodes":[{"pos":[0,70],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XDeclaration\"&gt;&lt;/xref&gt;</ph> for the document.","source":"An <xref href=\"System.Xml.Linq.XDeclaration\"></xref> for the document."}],"pos":[25422,25493],"yaml":true},{"content":"The content of the document.","nodes":[{"pos":[0,28],"content":"The content of the document.","nodes":[{"content":"The content of the document.","pos":[0,28]}]}],"pos":[25558,25587],"yaml":true},{"content":"Gets or sets the XML declaration for this document.","nodes":[{"pos":[0,51],"content":"Gets or sets the XML declaration for this document.","nodes":[{"content":"Gets or sets the XML declaration for this document.","pos":[0,51]}]}],"pos":[27068,27120],"yaml":true},{"content":"Sometimes you have to create an XML declaration for a document. If you want to indicate that a document is standalone, you must use this property. If you want to encode your document with an encoding other than utf-8, you can specify an encoding through the <xref:System.Xml.Linq.XDeclaration>. Another approach for encoding a document is to specify the encoding on an <xref:System.Xml.XmlWriter> that you pass to LINQ to XML for writing.","nodes":[{"pos":[0,438],"content":"Sometimes you have to create an XML declaration for a document. If you want to indicate that a document is standalone, you must use this property. If you want to encode your document with an encoding other than utf-8, you can specify an encoding through the <xref:System.Xml.Linq.XDeclaration>. Another approach for encoding a document is to specify the encoding on an <xref:System.Xml.XmlWriter> that you pass to LINQ to XML for writing.","nodes":[{"content":"Sometimes you have to create an XML declaration for a document. If you want to indicate that a document is standalone, you must use this property. If you want to encode your document with an encoding other than utf-8, you can specify an encoding through the <xref:System.Xml.Linq.XDeclaration>. Another approach for encoding a document is to specify the encoding on an <xref:System.Xml.XmlWriter> that you pass to LINQ to XML for writing.","pos":[0,438],"nodes":[{"content":"Sometimes you have to create an XML declaration for a document.","pos":[0,63]},{"content":"If you want to indicate that a document is standalone, you must use this property.","pos":[64,146]},{"content":"If you want to encode your document with an encoding other than utf-8, you can specify an encoding through the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XDeclaration&gt;</ph>.","pos":[147,294],"source":" If you want to encode your document with an encoding other than utf-8, you can specify an encoding through the <xref:System.Xml.Linq.XDeclaration>."},{"content":"Another approach for encoding a document is to specify the encoding on an <ph id=\"ph1\">&lt;xref:System.Xml.XmlWriter&gt;</ph> that you pass to LINQ to XML for writing.","pos":[295,438],"source":" Another approach for encoding a document is to specify the encoding on an <xref:System.Xml.XmlWriter> that you pass to LINQ to XML for writing."}]}]}],"pos":[27131,27570],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Xml.Linq.XDeclaration\"></xref> that contains the XML declaration for this document.","nodes":[{"pos":[0,105],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XDeclaration\"&gt;&lt;/xref&gt;</ph> that contains the XML declaration for this document.","source":"An <xref href=\"System.Xml.Linq.XDeclaration\"></xref> that contains the XML declaration for this document."}],"pos":[28486,28592],"yaml":true},{"content":"Gets the Document Type Definition (DTD) for this document.","nodes":[{"pos":[0,58],"content":"Gets the Document Type Definition (DTD) for this document.","nodes":[{"content":"Gets the Document Type Definition (DTD) for this document.","pos":[0,58]}]}],"pos":[30085,30144],"yaml":true},{"content":"[!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] provides limited support for DTDs.  \n  \n You can populate an XML tree with an XML document that contains a DTD. The XML tree will then contain a <xref:System.Xml.Linq.XDocument.DocumentType%2A> node. When you serialize or save the tree, the DTD will also be serialized. [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] will expand any entities in the DTD. When you serialize or save the XML tree, the entity references are not saved; instead, the nodes are saved with the entity references replaced by the text of the entity.  \n  \n If the DTD contains default attributes, the attributes are created in the XML tree as ordinary attributes.  \n  \n By default, [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] does not validate a document based on its DTD. To validate a document based on a DTD, create an <xref:System.Xml.XmlReader> that will validate based on a DTD, and then create an XML tree from the <xref:System.Xml.XmlReader>.","nodes":[{"pos":[0,88],"content":"<ph id=\"ph1\">[!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)]</ph> provides limited support for DTDs.","source":"[!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] provides limited support for DTDs."},{"pos":[95,584],"content":"You can populate an XML tree with an XML document that contains a DTD. The XML tree will then contain a <xref:System.Xml.Linq.XDocument.DocumentType%2A> node. When you serialize or save the tree, the DTD will also be serialized. [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] will expand any entities in the DTD. When you serialize or save the XML tree, the entity references are not saved; instead, the nodes are saved with the entity references replaced by the text of the entity.","nodes":[{"content":"You can populate an XML tree with an XML document that contains a DTD.","pos":[0,70]},{"content":"The XML tree will then contain a <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XDocument.DocumentType%2A&gt;</ph> node.","pos":[71,158],"source":" The XML tree will then contain a <xref:System.Xml.Linq.XDocument.DocumentType%2A> node."},{"content":"When you serialize or save the tree, the DTD will also be serialized.","pos":[159,228]},{"content":"<ph id=\"ph1\">[!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)]</ph> will expand any entities in the DTD.","pos":[229,319],"source":"[!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] will expand any entities in the DTD."},{"content":"When you serialize or save the XML tree, the entity references are not saved; instead, the nodes are saved with the entity references replaced by the text of the entity.","pos":[320,489]}]},{"pos":[591,697],"content":"If the DTD contains default attributes, the attributes are created in the XML tree as ordinary attributes.","nodes":[{"content":"If the DTD contains default attributes, the attributes are created in the XML tree as ordinary attributes.","pos":[0,106]}]},{"pos":[704,994],"content":"By default, [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] does not validate a document based on its DTD. To validate a document based on a DTD, create an <xref:System.Xml.XmlReader> that will validate based on a DTD, and then create an XML tree from the <xref:System.Xml.XmlReader>.","nodes":[{"content":"By default, <ph id=\"ph1\">[!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)]</ph> does not validate a document based on its DTD.","pos":[0,112],"source":"By default, [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] does not validate a document based on its DTD."},{"content":"To validate a document based on a DTD, create an <ph id=\"ph1\">&lt;xref:System.Xml.XmlReader&gt;</ph> that will validate based on a DTD, and then create an XML tree from the <ph id=\"ph2\">&lt;xref:System.Xml.XmlReader&gt;</ph>.","pos":[113,290],"source":" To validate a document based on a DTD, create an <xref:System.Xml.XmlReader> that will validate based on a DTD, and then create an XML tree from the <xref:System.Xml.XmlReader>."}]}],"pos":[30155,31158],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Xml.Linq.XDocumentType\"></xref> that contains the DTD for this document.","nodes":[{"pos":[0,93],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XDocumentType\"&gt;&lt;/xref&gt;</ph> that contains the DTD for this document.","source":"A <xref href=\"System.Xml.Linq.XDocumentType\"></xref> that contains the DTD for this document."}],"pos":[34483,34577],"yaml":true},{"content":"Creates a new <xref href=\"System.Xml.Linq.XDocument\"></xref> instance by using the specified stream.","nodes":[{"pos":[0,100],"content":"Creates a new <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XDocument\"&gt;&lt;/xref&gt;</ph> instance by using the specified stream.","source":"Creates a new <xref href=\"System.Xml.Linq.XDocument\"></xref> instance by using the specified stream."}],"pos":[36099,36200],"yaml":true},{"content":"If you want to control load options, use the <xref:System.Xml.Linq.XDocument.Load%2A> overload that takes <xref:System.Xml.Linq.LoadOptions> as a parameter.  \n  \n The loading functionality of LINQ to XML is built upon <xref:System.Xml.XmlReader>. Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.  \n  \n If you have to modify <xref:System.Xml.XmlReaderSettings>, follow these steps:  \n  \n1.  Create an <xref:System.Xml.XmlReader> by calling one of the <xref:System.Xml.XmlReader.Create%2A> overloads that take <xref:System.Xml.XmlReaderSettings> as a parameter.  \n  \n2.  Pass the <xref:System.Xml.XmlReader> to one of the <xref:System.Xml.Linq.XDocument.Load%2A> overloads of <xref:System.Xml.Linq.XDocument> that takes <xref:System.Xml.XmlReader> as a parameter.","nodes":[{"pos":[0,156],"content":"If you want to control load options, use the <xref:System.Xml.Linq.XDocument.Load%2A> overload that takes <xref:System.Xml.Linq.LoadOptions> as a parameter.","nodes":[{"content":"If you want to control load options, use the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XDocument.Load%2A&gt;</ph> overload that takes <ph id=\"ph2\">&lt;xref:System.Xml.Linq.LoadOptions&gt;</ph> as a parameter.","pos":[0,156],"source":"If you want to control load options, use the <xref:System.Xml.Linq.XDocument.Load%2A> overload that takes <xref:System.Xml.Linq.LoadOptions> as a parameter."}]},{"pos":[163,469],"content":"The loading functionality of LINQ to XML is built upon <xref:System.Xml.XmlReader>. Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.","nodes":[{"content":"The loading functionality of LINQ to XML is built upon <xref:System.Xml.XmlReader>. Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.","pos":[0,306],"nodes":[{"content":"The loading functionality of LINQ to XML is built upon <ph id=\"ph1\">&lt;xref:System.Xml.XmlReader&gt;</ph>.","pos":[0,83],"source":"The loading functionality of LINQ to XML is built upon <xref:System.Xml.XmlReader>."},{"content":"Therefore, you might catch any exceptions that are thrown by the <ph id=\"ph1\">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName&gt;</ph> overload methods and the <ph id=\"ph2\">&lt;xref:System.Xml.XmlReader&gt;</ph> methods that read and parse the document.","pos":[84,306],"source":" Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document."}]}]},{"pos":[476,554],"content":"If you have to modify <xref:System.Xml.XmlReaderSettings>, follow these steps:","nodes":[{"content":"If you have to modify <ph id=\"ph1\">&lt;xref:System.Xml.XmlReaderSettings&gt;</ph>, follow these steps:","pos":[0,78],"source":"If you have to modify <xref:System.Xml.XmlReaderSettings>, follow these steps:"}]},{"pos":[564,733],"content":"Create an <xref:System.Xml.XmlReader> by calling one of the <xref:System.Xml.XmlReader.Create%2A> overloads that take <xref:System.Xml.XmlReaderSettings> as a parameter.","nodes":[{"content":"Create an <ph id=\"ph1\">&lt;xref:System.Xml.XmlReader&gt;</ph> by calling one of the <ph id=\"ph2\">&lt;xref:System.Xml.XmlReader.Create%2A&gt;</ph> overloads that take <ph id=\"ph3\">&lt;xref:System.Xml.XmlReaderSettings&gt;</ph> as a parameter.","pos":[0,169],"source":"Create an <xref:System.Xml.XmlReader> by calling one of the <xref:System.Xml.XmlReader.Create%2A> overloads that take <xref:System.Xml.XmlReaderSettings> as a parameter."}]},{"pos":[743,935],"content":"Pass the <xref:System.Xml.XmlReader> to one of the <xref:System.Xml.Linq.XDocument.Load%2A> overloads of <xref:System.Xml.Linq.XDocument> that takes <xref:System.Xml.XmlReader> as a parameter.","nodes":[{"content":"Pass the <ph id=\"ph1\">&lt;xref:System.Xml.XmlReader&gt;</ph> to one of the <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XDocument.Load%2A&gt;</ph> overloads of <ph id=\"ph3\">&lt;xref:System.Xml.Linq.XDocument&gt;</ph> that takes <ph id=\"ph4\">&lt;xref:System.Xml.XmlReader&gt;</ph> as a parameter.","pos":[0,192],"source":"Pass the <xref:System.Xml.XmlReader> to one of the <xref:System.Xml.Linq.XDocument.Load%2A> overloads of <xref:System.Xml.Linq.XDocument> that takes <xref:System.Xml.XmlReader> as a parameter."}]}],"pos":[36211,37157],"yaml":true,"extradata":"MT"},{"content":"The stream that contains the XML data.","nodes":[{"pos":[0,38],"content":"The stream that contains the XML data.","nodes":[{"content":"The stream that contains the XML data.","pos":[0,38]}]}],"pos":[37333,37372],"yaml":true},{"content":"An <xref href=\"System.Xml.Linq.XDocument\"></xref> object that reads the data that is contained in the stream.","nodes":[{"pos":[0,109],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XDocument\"&gt;&lt;/xref&gt;</ph> object that reads the data that is contained in the stream.","source":"An <xref href=\"System.Xml.Linq.XDocument\"></xref> object that reads the data that is contained in the stream."}],"pos":[37441,37551],"yaml":true},{"content":"Creates a new <xref href=\"System.Xml.Linq.XDocument\"></xref> from a <xref href=\"System.IO.TextReader\"></xref>.","nodes":[{"pos":[0,110],"content":"Creates a new <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XDocument\"&gt;&lt;/xref&gt;</ph> from a <ph id=\"ph2\">&lt;xref href=\"System.IO.TextReader\"&gt;&lt;/xref&gt;</ph>.","source":"Creates a new <xref href=\"System.Xml.Linq.XDocument\"></xref> from a <xref href=\"System.IO.TextReader\"></xref>."}],"pos":[39089,39200],"yaml":true},{"content":"LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>. Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.","nodes":[{"pos":[0,301],"content":"LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>. Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.","nodes":[{"content":"LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>. Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.","pos":[0,301],"nodes":[{"content":"LINQ to XML's loading functionality is built upon <ph id=\"ph1\">&lt;xref:System.Xml.XmlReader&gt;</ph>.","pos":[0,78],"source":"LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>."},{"content":"Therefore, you might catch any exceptions that are thrown by the <ph id=\"ph1\">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName&gt;</ph> overload methods and the <ph id=\"ph2\">&lt;xref:System.Xml.XmlReader&gt;</ph> methods that read and parse the document.","pos":[79,301],"source":" Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document."}]}]}],"pos":[39211,39513],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.IO.TextReader\"></xref> that contains the content for the <xref href=\"System.Xml.Linq.XDocument\"></xref>.","nodes":[{"pos":[0,125],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.IO.TextReader\"&gt;&lt;/xref&gt;</ph> that contains the content for the <ph id=\"ph2\">&lt;xref href=\"System.Xml.Linq.XDocument\"&gt;&lt;/xref&gt;</ph>.","source":"A <xref href=\"System.IO.TextReader\"></xref> that contains the content for the <xref href=\"System.Xml.Linq.XDocument\"></xref>."}],"pos":[40259,40385],"yaml":true},{"content":"An <xref href=\"System.Xml.Linq.XDocument\"></xref> that contains the contents of the specified <xref href=\"System.IO.TextReader\"></xref>.","nodes":[{"pos":[0,136],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XDocument\"&gt;&lt;/xref&gt;</ph> that contains the contents of the specified <ph id=\"ph2\">&lt;xref href=\"System.IO.TextReader\"&gt;&lt;/xref&gt;</ph>.","source":"An <xref href=\"System.Xml.Linq.XDocument\"></xref> that contains the contents of the specified <xref href=\"System.IO.TextReader\"></xref>."}],"pos":[40454,40591],"yaml":true},{"content":"Creates a new <xref href=\"System.Xml.Linq.XDocument\"></xref> from a file.","nodes":[{"pos":[0,73],"content":"Creates a new <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XDocument\"&gt;&lt;/xref&gt;</ph> from a file.","source":"Creates a new <xref href=\"System.Xml.Linq.XDocument\"></xref> from a file."}],"pos":[42096,42170],"yaml":true},{"content":"This method uses an underlying <xref:System.Xml.XmlReader> to read the XML into an XML tree.  \n  \n Use <xref:System.Xml.Linq.XDocument.Parse%2A> to create an <xref:System.Xml.Linq.XDocument> from a string that contains XML.  \n  \n LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>. Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.","nodes":[{"pos":[0,92],"content":"This method uses an underlying <xref:System.Xml.XmlReader> to read the XML into an XML tree.","nodes":[{"content":"This method uses an underlying <ph id=\"ph1\">&lt;xref:System.Xml.XmlReader&gt;</ph> to read the XML into an XML tree.","pos":[0,92],"source":"This method uses an underlying <xref:System.Xml.XmlReader> to read the XML into an XML tree."}]},{"pos":[99,223],"content":"Use <xref:System.Xml.Linq.XDocument.Parse%2A> to create an <xref:System.Xml.Linq.XDocument> from a string that contains XML.","nodes":[{"content":"Use <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XDocument.Parse%2A&gt;</ph> to create an <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XDocument&gt;</ph> from a string that contains XML.","pos":[0,124],"source":"Use <xref:System.Xml.Linq.XDocument.Parse%2A> to create an <xref:System.Xml.Linq.XDocument> from a string that contains XML."}]},{"pos":[230,531],"content":"LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>. Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.","nodes":[{"content":"LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>. Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.","pos":[0,301],"nodes":[{"content":"LINQ to XML's loading functionality is built upon <ph id=\"ph1\">&lt;xref:System.Xml.XmlReader&gt;</ph>.","pos":[0,78],"source":"LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>."},{"content":"Therefore, you might catch any exceptions that are thrown by the <ph id=\"ph1\">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName&gt;</ph> overload methods and the <ph id=\"ph2\">&lt;xref:System.Xml.XmlReader&gt;</ph> methods that read and parse the document.","pos":[79,301],"source":" Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document."}]}]}],"pos":[42181,42719],"yaml":true,"extradata":"MT"},{"content":"A URI string that references the file to load into a new <xref href=\"System.Xml.Linq.XDocument\"></xref>.","nodes":[{"pos":[0,104],"content":"A URI string that references the file to load into a new <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XDocument\"&gt;&lt;/xref&gt;</ph>.","source":"A URI string that references the file to load into a new <xref href=\"System.Xml.Linq.XDocument\"></xref>."}],"pos":[44599,44704],"yaml":true},{"content":"An <xref href=\"System.Xml.Linq.XDocument\"></xref> that contains the contents of the specified file.","nodes":[{"pos":[0,99],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XDocument\"&gt;&lt;/xref&gt;</ph> that contains the contents of the specified file.","source":"An <xref href=\"System.Xml.Linq.XDocument\"></xref> that contains the contents of the specified file."}],"pos":[44773,44873],"yaml":true},{"content":"Creates a new <xref href=\"System.Xml.Linq.XDocument\"></xref> from an <xref href=\"System.Xml.XmlReader\"></xref>.","nodes":[{"pos":[0,111],"content":"Creates a new <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XDocument\"&gt;&lt;/xref&gt;</ph> from an <ph id=\"ph2\">&lt;xref href=\"System.Xml.XmlReader\"&gt;&lt;/xref&gt;</ph>.","source":"Creates a new <xref href=\"System.Xml.Linq.XDocument\"></xref> from an <xref href=\"System.Xml.XmlReader\"></xref>."}],"pos":[46408,46520],"yaml":true},{"content":"One possible use for this method is to create a copy of a DOM document in a LINQ to XML tree. To do this, you create an <xref:System.Xml.XmlNodeReader> from a DOM document, and then use the <xref:System.Xml.XmlNodeReader> to create an <xref:System.Xml.Linq.XDocument>.  \n  \n LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>. Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.","nodes":[{"pos":[0,268],"content":"One possible use for this method is to create a copy of a DOM document in a LINQ to XML tree. To do this, you create an <xref:System.Xml.XmlNodeReader> from a DOM document, and then use the <xref:System.Xml.XmlNodeReader> to create an <xref:System.Xml.Linq.XDocument>.","nodes":[{"content":"One possible use for this method is to create a copy of a DOM document in a LINQ to XML tree. To do this, you create an <xref:System.Xml.XmlNodeReader> from a DOM document, and then use the <xref:System.Xml.XmlNodeReader> to create an <xref:System.Xml.Linq.XDocument>.","pos":[0,268],"nodes":[{"content":"One possible use for this method is to create a copy of a DOM document in a LINQ to XML tree.","pos":[0,93]},{"content":"To do this, you create an <ph id=\"ph1\">&lt;xref:System.Xml.XmlNodeReader&gt;</ph> from a DOM document, and then use the <ph id=\"ph2\">&lt;xref:System.Xml.XmlNodeReader&gt;</ph> to create an <ph id=\"ph3\">&lt;xref:System.Xml.Linq.XDocument&gt;</ph>.","pos":[94,268],"source":" To do this, you create an <xref:System.Xml.XmlNodeReader> from a DOM document, and then use the <xref:System.Xml.XmlNodeReader> to create an <xref:System.Xml.Linq.XDocument>."}]}]},{"pos":[275,576],"content":"LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>. Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.","nodes":[{"content":"LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>. Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.","pos":[0,301],"nodes":[{"content":"LINQ to XML's loading functionality is built upon <ph id=\"ph1\">&lt;xref:System.Xml.XmlReader&gt;</ph>.","pos":[0,78],"source":"LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>."},{"content":"Therefore, you might catch any exceptions that are thrown by the <ph id=\"ph1\">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName&gt;</ph> overload methods and the <ph id=\"ph2\">&lt;xref:System.Xml.XmlReader&gt;</ph> methods that read and parse the document.","pos":[79,301],"source":" Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document."}]}]}],"pos":[46531,47112],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Xml.XmlReader\"></xref> that contains the content for the <xref href=\"System.Xml.Linq.XDocument\"></xref>.","nodes":[{"pos":[0,125],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Xml.XmlReader\"&gt;&lt;/xref&gt;</ph> that contains the content for the <ph id=\"ph2\">&lt;xref href=\"System.Xml.Linq.XDocument\"&gt;&lt;/xref&gt;</ph>.","source":"A <xref href=\"System.Xml.XmlReader\"></xref> that contains the content for the <xref href=\"System.Xml.Linq.XDocument\"></xref>."}],"pos":[49010,49136],"yaml":true},{"content":"An <xref href=\"System.Xml.Linq.XDocument\"></xref> that contains the contents of the specified <xref href=\"System.Xml.XmlReader\"></xref>.","nodes":[{"pos":[0,136],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XDocument\"&gt;&lt;/xref&gt;</ph> that contains the contents of the specified <ph id=\"ph2\">&lt;xref href=\"System.Xml.XmlReader\"&gt;&lt;/xref&gt;</ph>.","source":"An <xref href=\"System.Xml.Linq.XDocument\"></xref> that contains the contents of the specified <xref href=\"System.Xml.XmlReader\"></xref>."}],"pos":[49205,49342],"yaml":true},{"content":"Creates a new <xref href=\"System.Xml.Linq.XDocument\"></xref> instance by using the specified stream, optionally preserving white space, setting the base URI, and retaining line information.","nodes":[{"pos":[0,189],"content":"Creates a new <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XDocument\"&gt;&lt;/xref&gt;</ph> instance by using the specified stream, optionally preserving white space, setting the base URI, and retaining line information.","source":"Creates a new <xref href=\"System.Xml.Linq.XDocument\"></xref> instance by using the specified stream, optionally preserving white space, setting the base URI, and retaining line information."}],"pos":[50979,51169],"yaml":true},{"content":"The loading functionality of LINQ to XML is built upon <xref:System.Xml.XmlReader>. Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.  \n  \n If you have to modify <xref:System.Xml.XmlReaderSettings>, follow these steps:  \n  \n1.  Create an <xref:System.Xml.XmlReader> by calling one of the <xref:System.Xml.XmlReader.Create%2A> overloads that takes <xref:System.Xml.XmlReaderSettings> as a parameter.  \n  \n2.  Pass the <xref:System.Xml.XmlReader> to one of the <xref:System.Xml.Linq.XDocument.Load%2A> overloads of <xref:System.Xml.Linq.XDocument> that takes <xref:System.Xml.XmlReader> as a parameter.","nodes":[{"pos":[0,306],"content":"The loading functionality of LINQ to XML is built upon <xref:System.Xml.XmlReader>. Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.","nodes":[{"content":"The loading functionality of LINQ to XML is built upon <xref:System.Xml.XmlReader>. Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.","pos":[0,306],"nodes":[{"content":"The loading functionality of LINQ to XML is built upon <ph id=\"ph1\">&lt;xref:System.Xml.XmlReader&gt;</ph>.","pos":[0,83],"source":"The loading functionality of LINQ to XML is built upon <xref:System.Xml.XmlReader>."},{"content":"Therefore, you might catch any exceptions that are thrown by the <ph id=\"ph1\">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName&gt;</ph> overload methods and the <ph id=\"ph2\">&lt;xref:System.Xml.XmlReader&gt;</ph> methods that read and parse the document.","pos":[84,306],"source":" Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document."}]}]},{"pos":[313,391],"content":"If you have to modify <xref:System.Xml.XmlReaderSettings>, follow these steps:","nodes":[{"content":"If you have to modify <ph id=\"ph1\">&lt;xref:System.Xml.XmlReaderSettings&gt;</ph>, follow these steps:","pos":[0,78],"source":"If you have to modify <xref:System.Xml.XmlReaderSettings>, follow these steps:"}]},{"pos":[401,571],"content":"Create an <xref:System.Xml.XmlReader> by calling one of the <xref:System.Xml.XmlReader.Create%2A> overloads that takes <xref:System.Xml.XmlReaderSettings> as a parameter.","nodes":[{"content":"Create an <ph id=\"ph1\">&lt;xref:System.Xml.XmlReader&gt;</ph> by calling one of the <ph id=\"ph2\">&lt;xref:System.Xml.XmlReader.Create%2A&gt;</ph> overloads that takes <ph id=\"ph3\">&lt;xref:System.Xml.XmlReaderSettings&gt;</ph> as a parameter.","pos":[0,170],"source":"Create an <xref:System.Xml.XmlReader> by calling one of the <xref:System.Xml.XmlReader.Create%2A> overloads that takes <xref:System.Xml.XmlReaderSettings> as a parameter."}]},{"pos":[581,773],"content":"Pass the <xref:System.Xml.XmlReader> to one of the <xref:System.Xml.Linq.XDocument.Load%2A> overloads of <xref:System.Xml.Linq.XDocument> that takes <xref:System.Xml.XmlReader> as a parameter.","nodes":[{"content":"Pass the <ph id=\"ph1\">&lt;xref:System.Xml.XmlReader&gt;</ph> to one of the <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XDocument.Load%2A&gt;</ph> overloads of <ph id=\"ph3\">&lt;xref:System.Xml.Linq.XDocument&gt;</ph> that takes <ph id=\"ph4\">&lt;xref:System.Xml.XmlReader&gt;</ph> as a parameter.","pos":[0,192],"source":"Pass the <xref:System.Xml.XmlReader> to one of the <xref:System.Xml.Linq.XDocument.Load%2A> overloads of <xref:System.Xml.Linq.XDocument> that takes <xref:System.Xml.XmlReader> as a parameter."}]}],"pos":[51180,51962],"yaml":true,"extradata":"MT"},{"content":"The stream containing the XML data.","nodes":[{"pos":[0,35],"content":"The stream containing the XML data.","nodes":[{"content":"The stream containing the XML data.","pos":[0,35]}]}],"pos":[52175,52211],"yaml":true},{"content":"A <xref href=\"System.Xml.Linq.LoadOptions\"></xref> that specifies whether to load base URI and line information.","nodes":[{"pos":[0,112],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.LoadOptions\"&gt;&lt;/xref&gt;</ph> that specifies whether to load base URI and line information.","source":"A <xref href=\"System.Xml.Linq.LoadOptions\"></xref> that specifies whether to load base URI and line information."}],"pos":[52288,52401],"yaml":true},{"content":"An <xref href=\"System.Xml.Linq.XDocument\"></xref> object that reads the data that is contained in the stream.","nodes":[{"pos":[0,109],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XDocument\"&gt;&lt;/xref&gt;</ph> object that reads the data that is contained in the stream.","source":"An <xref href=\"System.Xml.Linq.XDocument\"></xref> object that reads the data that is contained in the stream."}],"pos":[52470,52580],"yaml":true},{"content":"Creates a new <xref href=\"System.Xml.Linq.XDocument\"></xref> from a <xref href=\"System.IO.TextReader\"></xref>, optionally preserving white space, setting the base URI, and retaining line information.","nodes":[{"pos":[0,199],"content":"Creates a new <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XDocument\"&gt;&lt;/xref&gt;</ph> from a <ph id=\"ph2\">&lt;xref href=\"System.IO.TextReader\"&gt;&lt;/xref&gt;</ph>, optionally preserving white space, setting the base URI, and retaining line information.","source":"Creates a new <xref href=\"System.Xml.Linq.XDocument\"></xref> from a <xref href=\"System.IO.TextReader\"></xref>, optionally preserving white space, setting the base URI, and retaining line information."}],"pos":[54241,54441],"yaml":true},{"content":"If the source XML is indented, setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` causes the reader to read all white space in the source XML. Nodes of type <xref:System.Xml.Linq.XText> are created for both significant and insignificant white space.  \n  \n If the source XML is indented, not setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` causes the reader to ignore all of the insignificant white space in the source XML. The XML tree is created without any text nodes for insignificant white space.  \n  \n If the source XML is not indented, setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` has no effect. Significant white space is still preserved, and there are no spans of insignificant white space that could cause the creation of more white space text nodes.  \n  \n For more information, see [Preserving White Space while Loading or Parsing XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).  \n  \n Use <xref:System.Xml.Linq.XDocument.Parse%2A> to create an <xref:System.Xml.Linq.XElement> from a string that contains XML.  \n  \n Setting <xref:System.Xml.Linq.LoadOptions.SetBaseUri> is not valid when loading from a <xref:System.IO.TextReader>.  \n  \n There is a performance penalty if you set the <xref:System.Xml.Linq.LoadOptions.SetLineInfo> flag.  \n  \n The line information is accurate immediately after loading the XML document. If you modify the XML tree after loading the document, the line information may become meaningless.  \n  \n LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>. Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.","nodes":[{"pos":[0,282],"content":"If the source XML is indented, setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` causes the reader to read all white space in the source XML. Nodes of type <xref:System.Xml.Linq.XText> are created for both significant and insignificant white space.","nodes":[{"content":"If the source XML is indented, setting the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.LoadOptions.PreserveWhitespace&gt;</ph> flag in <ph id=\"ph2\">`options`</ph> causes the reader to read all white space in the source XML.","pos":[0,175],"source":"If the source XML is indented, setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` causes the reader to read all white space in the source XML."},{"content":"Nodes of type <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XText&gt;</ph> are created for both significant and insignificant white space.","pos":[176,282],"source":" Nodes of type <xref:System.Xml.Linq.XText> are created for both significant and insignificant white space."}]},{"pos":[289,569],"content":"If the source XML is indented, not setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` causes the reader to ignore all of the insignificant white space in the source XML. The XML tree is created without any text nodes for insignificant white space.","nodes":[{"content":"If the source XML is indented, not setting the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.LoadOptions.PreserveWhitespace&gt;</ph> flag in <ph id=\"ph2\">`options`</ph> causes the reader to ignore all of the insignificant white space in the source XML.","pos":[0,202],"source":"If the source XML is indented, not setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` causes the reader to ignore all of the insignificant white space in the source XML."},{"content":"The XML tree is created without any text nodes for insignificant white space.","pos":[203,280]}]},{"pos":[576,867],"content":"If the source XML is not indented, setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` has no effect. Significant white space is still preserved, and there are no spans of insignificant white space that could cause the creation of more white space text nodes.","nodes":[{"content":"If the source XML is not indented, setting the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.LoadOptions.PreserveWhitespace&gt;</ph> flag in <ph id=\"ph2\">`options`</ph> has no effect.","pos":[0,133],"source":"If the source XML is not indented, setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` has no effect."},{"content":"Significant white space is still preserved, and there are no spans of insignificant white space that could cause the creation of more white space text nodes.","pos":[134,291]}]},{"pos":[874,1145],"content":"For more information, see <bpt id=\"p1\">[</bpt>Preserving White Space while Loading or Parsing XML<ept id=\"p1\">](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d)</ept> and <bpt id=\"p2\">[</bpt>Preserving White Space While Serializing<ept id=\"p2\">](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)</ept>.","source":"For more information, see [Preserving White Space while Loading or Parsing XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)."},{"pos":[1152,1275],"content":"Use <xref:System.Xml.Linq.XDocument.Parse%2A> to create an <xref:System.Xml.Linq.XElement> from a string that contains XML.","nodes":[{"content":"Use <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XDocument.Parse%2A&gt;</ph> to create an <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XElement&gt;</ph> from a string that contains XML.","pos":[0,123],"source":"Use <xref:System.Xml.Linq.XDocument.Parse%2A> to create an <xref:System.Xml.Linq.XElement> from a string that contains XML."}]},{"pos":[1282,1397],"content":"Setting <xref:System.Xml.Linq.LoadOptions.SetBaseUri> is not valid when loading from a <xref:System.IO.TextReader>.","nodes":[{"content":"Setting <ph id=\"ph1\">&lt;xref:System.Xml.Linq.LoadOptions.SetBaseUri&gt;</ph> is not valid when loading from a <ph id=\"ph2\">&lt;xref:System.IO.TextReader&gt;</ph>.","pos":[0,115],"source":"Setting <xref:System.Xml.Linq.LoadOptions.SetBaseUri> is not valid when loading from a <xref:System.IO.TextReader>."}]},{"pos":[1404,1502],"content":"There is a performance penalty if you set the <xref:System.Xml.Linq.LoadOptions.SetLineInfo> flag.","nodes":[{"content":"There is a performance penalty if you set the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.LoadOptions.SetLineInfo&gt;</ph> flag.","pos":[0,98],"source":"There is a performance penalty if you set the <xref:System.Xml.Linq.LoadOptions.SetLineInfo> flag."}]},{"pos":[1509,1685],"content":"The line information is accurate immediately after loading the XML document. If you modify the XML tree after loading the document, the line information may become meaningless.","nodes":[{"content":"The line information is accurate immediately after loading the XML document. If you modify the XML tree after loading the document, the line information may become meaningless.","pos":[0,176],"nodes":[{"content":"The line information is accurate immediately after loading the XML document.","pos":[0,76]},{"content":"If you modify the XML tree after loading the document, the line information may become meaningless.","pos":[77,176]}]}]},{"pos":[1692,1993],"content":"LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>. Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.","nodes":[{"content":"LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>. Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.","pos":[0,301],"nodes":[{"content":"LINQ to XML's loading functionality is built upon <ph id=\"ph1\">&lt;xref:System.Xml.XmlReader&gt;</ph>.","pos":[0,78],"source":"LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>."},{"content":"Therefore, you might catch any exceptions that are thrown by the <ph id=\"ph1\">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName&gt;</ph> overload methods and the <ph id=\"ph2\">&lt;xref:System.Xml.XmlReader&gt;</ph> methods that read and parse the document.","pos":[79,301],"source":" Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document."}]}]}],"pos":[54452,56464],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.IO.TextReader\"></xref> that contains the content for the <xref href=\"System.Xml.Linq.XDocument\"></xref>.","nodes":[{"pos":[0,125],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.IO.TextReader\"&gt;&lt;/xref&gt;</ph> that contains the content for the <ph id=\"ph2\">&lt;xref href=\"System.Xml.Linq.XDocument\"&gt;&lt;/xref&gt;</ph>.","source":"A <xref href=\"System.IO.TextReader\"></xref> that contains the content for the <xref href=\"System.Xml.Linq.XDocument\"></xref>."}],"pos":[59133,59259],"yaml":true},{"content":"A <xref href=\"System.Xml.Linq.LoadOptions\"></xref> that specifies white space behavior, and whether to load base URI and line information.","nodes":[{"pos":[0,138],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.LoadOptions\"&gt;&lt;/xref&gt;</ph> that specifies white space behavior, and whether to load base URI and line information.","source":"A <xref href=\"System.Xml.Linq.LoadOptions\"></xref> that specifies white space behavior, and whether to load base URI and line information."}],"pos":[59336,59475],"yaml":true},{"content":"An <xref href=\"System.Xml.Linq.XDocument\"></xref> that contains the XML that was read from the specified <xref href=\"System.IO.TextReader\"></xref>.","nodes":[{"pos":[0,147],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XDocument\"&gt;&lt;/xref&gt;</ph> that contains the XML that was read from the specified <ph id=\"ph2\">&lt;xref href=\"System.IO.TextReader\"&gt;&lt;/xref&gt;</ph>.","source":"An <xref href=\"System.Xml.Linq.XDocument\"></xref> that contains the XML that was read from the specified <xref href=\"System.IO.TextReader\"></xref>."}],"pos":[59544,59692],"yaml":true},{"content":"Creates a new <xref href=\"System.Xml.Linq.XDocument\"></xref> from a file, optionally preserving white space, setting the base URI, and retaining line information.","nodes":[{"pos":[0,162],"content":"Creates a new <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XDocument\"&gt;&lt;/xref&gt;</ph> from a file, optionally preserving white space, setting the base URI, and retaining line information.","source":"Creates a new <xref href=\"System.Xml.Linq.XDocument\"></xref> from a file, optionally preserving white space, setting the base URI, and retaining line information."}],"pos":[61320,61483],"yaml":true},{"content":"If the source XML is indented, setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` causes the reader to read all white space in the source XML. Nodes of type <xref:System.Xml.Linq.XText> are created for both significant and insignificant white space.  \n  \n If the source XML is indented, not setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` causes the reader to ignore all of the insignificant white space in the source XML. The XML tree is created without any text nodes for insignificant white space.  \n  \n If the source XML is not indented, setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` has no effect. Significant white space is still preserved, and there are no spans of insignificant white space that could cause the creation of more white space text nodes.  \n  \n For more information, see [Preserving White Space while Loading or Parsing XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).  \n  \n Use <xref:System.Xml.Linq.XDocument.Parse%2A> to create an <xref:System.Xml.Linq.XDocument> from a string that contains XML.  \n  \n There is a performance penalty if you set the <xref:System.Xml.Linq.LoadOptions.SetBaseUri> and the <xref:System.Xml.Linq.LoadOptions.SetLineInfo> flags.  \n  \n The base URI and the line information are accurate immediately after loading the XML document. If you modify the XML tree after loading the document, the base URI and line information may become meaningless.  \n  \n LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>. Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.","nodes":[{"pos":[0,282],"content":"If the source XML is indented, setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` causes the reader to read all white space in the source XML. Nodes of type <xref:System.Xml.Linq.XText> are created for both significant and insignificant white space.","nodes":[{"content":"If the source XML is indented, setting the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.LoadOptions.PreserveWhitespace&gt;</ph> flag in <ph id=\"ph2\">`options`</ph> causes the reader to read all white space in the source XML.","pos":[0,175],"source":"If the source XML is indented, setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` causes the reader to read all white space in the source XML."},{"content":"Nodes of type <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XText&gt;</ph> are created for both significant and insignificant white space.","pos":[176,282],"source":" Nodes of type <xref:System.Xml.Linq.XText> are created for both significant and insignificant white space."}]},{"pos":[289,569],"content":"If the source XML is indented, not setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` causes the reader to ignore all of the insignificant white space in the source XML. The XML tree is created without any text nodes for insignificant white space.","nodes":[{"content":"If the source XML is indented, not setting the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.LoadOptions.PreserveWhitespace&gt;</ph> flag in <ph id=\"ph2\">`options`</ph> causes the reader to ignore all of the insignificant white space in the source XML.","pos":[0,202],"source":"If the source XML is indented, not setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` causes the reader to ignore all of the insignificant white space in the source XML."},{"content":"The XML tree is created without any text nodes for insignificant white space.","pos":[203,280]}]},{"pos":[576,867],"content":"If the source XML is not indented, setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` has no effect. Significant white space is still preserved, and there are no spans of insignificant white space that could cause the creation of more white space text nodes.","nodes":[{"content":"If the source XML is not indented, setting the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.LoadOptions.PreserveWhitespace&gt;</ph> flag in <ph id=\"ph2\">`options`</ph> has no effect.","pos":[0,133],"source":"If the source XML is not indented, setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` has no effect."},{"content":"Significant white space is still preserved, and there are no spans of insignificant white space that could cause the creation of more white space text nodes.","pos":[134,291]}]},{"pos":[874,1145],"content":"For more information, see <bpt id=\"p1\">[</bpt>Preserving White Space while Loading or Parsing XML<ept id=\"p1\">](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d)</ept> and <bpt id=\"p2\">[</bpt>Preserving White Space While Serializing<ept id=\"p2\">](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)</ept>.","source":"For more information, see [Preserving White Space while Loading or Parsing XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)."},{"pos":[1152,1276],"content":"Use <xref:System.Xml.Linq.XDocument.Parse%2A> to create an <xref:System.Xml.Linq.XDocument> from a string that contains XML.","nodes":[{"content":"Use <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XDocument.Parse%2A&gt;</ph> to create an <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XDocument&gt;</ph> from a string that contains XML.","pos":[0,124],"source":"Use <xref:System.Xml.Linq.XDocument.Parse%2A> to create an <xref:System.Xml.Linq.XDocument> from a string that contains XML."}]},{"pos":[1283,1436],"content":"There is a performance penalty if you set the <xref:System.Xml.Linq.LoadOptions.SetBaseUri> and the <xref:System.Xml.Linq.LoadOptions.SetLineInfo> flags.","nodes":[{"content":"There is a performance penalty if you set the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.LoadOptions.SetBaseUri&gt;</ph> and the <ph id=\"ph2\">&lt;xref:System.Xml.Linq.LoadOptions.SetLineInfo&gt;</ph> flags.","pos":[0,153],"source":"There is a performance penalty if you set the <xref:System.Xml.Linq.LoadOptions.SetBaseUri> and the <xref:System.Xml.Linq.LoadOptions.SetLineInfo> flags."}]},{"pos":[1443,1650],"content":"The base URI and the line information are accurate immediately after loading the XML document. If you modify the XML tree after loading the document, the base URI and line information may become meaningless.","nodes":[{"content":"The base URI and the line information are accurate immediately after loading the XML document. If you modify the XML tree after loading the document, the base URI and line information may become meaningless.","pos":[0,207],"nodes":[{"content":"The base URI and the line information are accurate immediately after loading the XML document.","pos":[0,94]},{"content":"If you modify the XML tree after loading the document, the base URI and line information may become meaningless.","pos":[95,207]}]}]},{"pos":[1657,1958],"content":"LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>. Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.","nodes":[{"content":"LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>. Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.","pos":[0,301],"nodes":[{"content":"LINQ to XML's loading functionality is built upon <ph id=\"ph1\">&lt;xref:System.Xml.XmlReader&gt;</ph>.","pos":[0,78],"source":"LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>."},{"content":"Therefore, you might catch any exceptions that are thrown by the <ph id=\"ph1\">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName&gt;</ph> overload methods and the <ph id=\"ph2\">&lt;xref:System.Xml.XmlReader&gt;</ph> methods that read and parse the document.","pos":[79,301],"source":" Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document."}]}]}],"pos":[61494,63469],"yaml":true,"extradata":"MT"},{"content":"A URI string that references the file to load into a new <xref href=\"System.Xml.Linq.XDocument\"></xref>.","nodes":[{"pos":[0,104],"content":"A URI string that references the file to load into a new <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XDocument\"&gt;&lt;/xref&gt;</ph>.","source":"A URI string that references the file to load into a new <xref href=\"System.Xml.Linq.XDocument\"></xref>."}],"pos":[64959,65064],"yaml":true},{"content":"A <xref href=\"System.Xml.Linq.LoadOptions\"></xref> that specifies white space behavior, and whether to load base URI and line information.","nodes":[{"pos":[0,138],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.LoadOptions\"&gt;&lt;/xref&gt;</ph> that specifies white space behavior, and whether to load base URI and line information.","source":"A <xref href=\"System.Xml.Linq.LoadOptions\"></xref> that specifies white space behavior, and whether to load base URI and line information."}],"pos":[65141,65280],"yaml":true},{"content":"An <xref href=\"System.Xml.Linq.XDocument\"></xref> that contains the contents of the specified file.","nodes":[{"pos":[0,99],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XDocument\"&gt;&lt;/xref&gt;</ph> that contains the contents of the specified file.","source":"An <xref href=\"System.Xml.Linq.XDocument\"></xref> that contains the contents of the specified file."}],"pos":[65349,65449],"yaml":true},{"content":"Loads an <xref href=\"System.Xml.Linq.XDocument\"></xref> from an <xref href=\"System.Xml.XmlReader\"></xref>, optionally setting the base URI, and retaining line information.","nodes":[{"pos":[0,171],"content":"Loads an <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XDocument\"&gt;&lt;/xref&gt;</ph> from an <ph id=\"ph2\">&lt;xref href=\"System.Xml.XmlReader\"&gt;&lt;/xref&gt;</ph>, optionally setting the base URI, and retaining line information.","source":"Loads an <xref href=\"System.Xml.Linq.XDocument\"></xref> from an <xref href=\"System.Xml.XmlReader\"></xref>, optionally setting the base URI, and retaining line information."}],"pos":[67107,67279],"yaml":true},{"content":"By creating an <xref:System.Xml.XmlNodeReader> from a DOM document, and then using the <xref:System.Xml.XmlNodeReader> to create an <xref:System.Xml.Linq.XElement>, this method can be used to create a copy of a DOM document in a LINQ to XML tree.  \n  \n Use <xref:System.Xml.Linq.XDocument.Parse%2A> to create an <xref:System.Xml.Linq.XDocument> from a string that contains XML.  \n  \n Setting <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> is not valid when loading from a <xref:System.Xml.XmlReader>. The <xref:System.Xml.XmlReader> will be configured to either read whitespace or not. The LINQ to XML tree will be populated with the whitespace nodes that the reader surfaces. This will be the behavior regardless of whether <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> is set or not.  \n  \n The <xref:System.Xml.XmlReader> may have a valid base URI or not. If you set <xref:System.Xml.Linq.LoadOptions.SetBaseUri>, the base URI will be set in the XML tree from the base URI that is reported by the <xref:System.Xml.XmlReader>.  \n  \n The <xref:System.Xml.XmlReader> may have a valid line information or not. If you set <xref:System.Xml.Linq.LoadOptions.SetLineInfo>, the line information will be set in the XML tree from the line information that is reported by the <xref:System.Xml.XmlReader>.  \n  \n There is a performance penalty if you set the <xref:System.Xml.Linq.LoadOptions.SetLineInfo> flag.  \n  \n The line information is accurate immediately after loading the XML document. If you modify the XML tree after loading the document, the line information may become meaningless.  \n  \n LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>. Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.","nodes":[{"pos":[0,246],"content":"By creating an <xref:System.Xml.XmlNodeReader> from a DOM document, and then using the <xref:System.Xml.XmlNodeReader> to create an <xref:System.Xml.Linq.XElement>, this method can be used to create a copy of a DOM document in a LINQ to XML tree.","nodes":[{"content":"By creating an <ph id=\"ph1\">&lt;xref:System.Xml.XmlNodeReader&gt;</ph> from a DOM document, and then using the <ph id=\"ph2\">&lt;xref:System.Xml.XmlNodeReader&gt;</ph> to create an <ph id=\"ph3\">&lt;xref:System.Xml.Linq.XElement&gt;</ph>, this method can be used to create a copy of a DOM document in a LINQ to XML tree.","pos":[0,246],"source":"By creating an <xref:System.Xml.XmlNodeReader> from a DOM document, and then using the <xref:System.Xml.XmlNodeReader> to create an <xref:System.Xml.Linq.XElement>, this method can be used to create a copy of a DOM document in a LINQ to XML tree."}]},{"pos":[253,377],"content":"Use <xref:System.Xml.Linq.XDocument.Parse%2A> to create an <xref:System.Xml.Linq.XDocument> from a string that contains XML.","nodes":[{"content":"Use <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XDocument.Parse%2A&gt;</ph> to create an <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XDocument&gt;</ph> from a string that contains XML.","pos":[0,124],"source":"Use <xref:System.Xml.Linq.XDocument.Parse%2A> to create an <xref:System.Xml.Linq.XDocument> from a string that contains XML."}]},{"pos":[384,800],"content":"Setting <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> is not valid when loading from a <xref:System.Xml.XmlReader>. The <xref:System.Xml.XmlReader> will be configured to either read whitespace or not. The LINQ to XML tree will be populated with the whitespace nodes that the reader surfaces. This will be the behavior regardless of whether <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> is set or not.","nodes":[{"content":"Setting <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> is not valid when loading from a <xref:System.Xml.XmlReader>. The <xref:System.Xml.XmlReader> will be configured to either read whitespace or not. The LINQ to XML tree will be populated with the whitespace nodes that the reader surfaces. This will be the behavior regardless of whether <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> is set or not.","pos":[0,416],"nodes":[{"content":"Setting <ph id=\"ph1\">&lt;xref:System.Xml.Linq.LoadOptions.PreserveWhitespace&gt;</ph> is not valid when loading from a <ph id=\"ph2\">&lt;xref:System.Xml.XmlReader&gt;</ph>.","pos":[0,123],"source":"Setting <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> is not valid when loading from a <xref:System.Xml.XmlReader>."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Xml.XmlReader&gt;</ph> will be configured to either read whitespace or not.","pos":[124,208],"source":" The <xref:System.Xml.XmlReader> will be configured to either read whitespace or not."},{"content":"The LINQ to XML tree will be populated with the whitespace nodes that the reader surfaces.","pos":[209,299]},{"content":"This will be the behavior regardless of whether <ph id=\"ph1\">&lt;xref:System.Xml.Linq.LoadOptions.PreserveWhitespace&gt;</ph> is set or not.","pos":[300,416],"source":" This will be the behavior regardless of whether <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> is set or not."}]}]},{"pos":[807,1042],"content":"The <xref:System.Xml.XmlReader> may have a valid base URI or not. If you set <xref:System.Xml.Linq.LoadOptions.SetBaseUri>, the base URI will be set in the XML tree from the base URI that is reported by the <xref:System.Xml.XmlReader>.","nodes":[{"content":"The <xref:System.Xml.XmlReader> may have a valid base URI or not. If you set <xref:System.Xml.Linq.LoadOptions.SetBaseUri>, the base URI will be set in the XML tree from the base URI that is reported by the <xref:System.Xml.XmlReader>.","pos":[0,235],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Xml.XmlReader&gt;</ph> may have a valid base URI or not.","pos":[0,65],"source":"The <xref:System.Xml.XmlReader> may have a valid base URI or not."},{"content":"If you set <ph id=\"ph1\">&lt;xref:System.Xml.Linq.LoadOptions.SetBaseUri&gt;</ph>, the base URI will be set in the XML tree from the base URI that is reported by the <ph id=\"ph2\">&lt;xref:System.Xml.XmlReader&gt;</ph>.","pos":[66,235],"source":" If you set <xref:System.Xml.Linq.LoadOptions.SetBaseUri>, the base URI will be set in the XML tree from the base URI that is reported by the <xref:System.Xml.XmlReader>."}]}]},{"pos":[1049,1309],"content":"The <xref:System.Xml.XmlReader> may have a valid line information or not. If you set <xref:System.Xml.Linq.LoadOptions.SetLineInfo>, the line information will be set in the XML tree from the line information that is reported by the <xref:System.Xml.XmlReader>.","nodes":[{"content":"The <xref:System.Xml.XmlReader> may have a valid line information or not. If you set <xref:System.Xml.Linq.LoadOptions.SetLineInfo>, the line information will be set in the XML tree from the line information that is reported by the <xref:System.Xml.XmlReader>.","pos":[0,260],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Xml.XmlReader&gt;</ph> may have a valid line information or not.","pos":[0,73],"source":"The <xref:System.Xml.XmlReader> may have a valid line information or not."},{"content":"If you set <ph id=\"ph1\">&lt;xref:System.Xml.Linq.LoadOptions.SetLineInfo&gt;</ph>, the line information will be set in the XML tree from the line information that is reported by the <ph id=\"ph2\">&lt;xref:System.Xml.XmlReader&gt;</ph>.","pos":[74,260],"source":" If you set <xref:System.Xml.Linq.LoadOptions.SetLineInfo>, the line information will be set in the XML tree from the line information that is reported by the <xref:System.Xml.XmlReader>."}]}]},{"pos":[1316,1414],"content":"There is a performance penalty if you set the <xref:System.Xml.Linq.LoadOptions.SetLineInfo> flag.","nodes":[{"content":"There is a performance penalty if you set the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.LoadOptions.SetLineInfo&gt;</ph> flag.","pos":[0,98],"source":"There is a performance penalty if you set the <xref:System.Xml.Linq.LoadOptions.SetLineInfo> flag."}]},{"pos":[1421,1597],"content":"The line information is accurate immediately after loading the XML document. If you modify the XML tree after loading the document, the line information may become meaningless.","nodes":[{"content":"The line information is accurate immediately after loading the XML document. If you modify the XML tree after loading the document, the line information may become meaningless.","pos":[0,176],"nodes":[{"content":"The line information is accurate immediately after loading the XML document.","pos":[0,76]},{"content":"If you modify the XML tree after loading the document, the line information may become meaningless.","pos":[77,176]}]}]},{"pos":[1604,1905],"content":"LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>. Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.","nodes":[{"content":"LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>. Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.","pos":[0,301],"nodes":[{"content":"LINQ to XML's loading functionality is built upon <ph id=\"ph1\">&lt;xref:System.Xml.XmlReader&gt;</ph>.","pos":[0,78],"source":"LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>."},{"content":"Therefore, you might catch any exceptions that are thrown by the <ph id=\"ph1\">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName&gt;</ph> overload methods and the <ph id=\"ph2\">&lt;xref:System.Xml.XmlReader&gt;</ph> methods that read and parse the document.","pos":[79,301],"source":" Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document."}]}]}],"pos":[67290,69212],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Xml.XmlReader\"></xref> that will be read for the content of the <xref href=\"System.Xml.Linq.XDocument\"></xref>.","nodes":[{"pos":[0,132],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Xml.XmlReader\"&gt;&lt;/xref&gt;</ph> that will be read for the content of the <ph id=\"ph2\">&lt;xref href=\"System.Xml.Linq.XDocument\"&gt;&lt;/xref&gt;</ph>.","source":"A <xref href=\"System.Xml.XmlReader\"></xref> that will be read for the content of the <xref href=\"System.Xml.Linq.XDocument\"></xref>."}],"pos":[72284,72417],"yaml":true},{"content":"A <xref href=\"System.Xml.Linq.LoadOptions\"></xref> that specifies whether to load base URI and line information.","nodes":[{"pos":[0,112],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.LoadOptions\"&gt;&lt;/xref&gt;</ph> that specifies whether to load base URI and line information.","source":"A <xref href=\"System.Xml.Linq.LoadOptions\"></xref> that specifies whether to load base URI and line information."}],"pos":[72494,72607],"yaml":true},{"content":"An <xref href=\"System.Xml.Linq.XDocument\"></xref> that contains the XML that was read from the specified <xref href=\"System.Xml.XmlReader\"></xref>.","nodes":[{"pos":[0,147],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XDocument\"&gt;&lt;/xref&gt;</ph> that contains the XML that was read from the specified <ph id=\"ph2\">&lt;xref href=\"System.Xml.XmlReader\"&gt;&lt;/xref&gt;</ph>.","source":"An <xref href=\"System.Xml.Linq.XDocument\"></xref> that contains the XML that was read from the specified <xref href=\"System.Xml.XmlReader\"></xref>."}],"pos":[72676,72824],"yaml":true},{"content":"Gets the node type for this node.","nodes":[{"pos":[0,33],"content":"Gets the node type for this node.","nodes":[{"content":"Gets the node type for this node.","pos":[0,33]}]}],"pos":[78846,78880],"yaml":true},{"content":"Because all classes that derive from <xref:System.Xml.Linq.XObject> contain a <xref:System.Xml.Linq.XObject.NodeType%2A> property, you can write code that operates on collections of objects where the type of each is a subclass of <xref:System.Xml.Linq.XObject>. Your code can then test for the node type of each object in the collection.","nodes":[{"pos":[0,337],"content":"Because all classes that derive from <xref:System.Xml.Linq.XObject> contain a <xref:System.Xml.Linq.XObject.NodeType%2A> property, you can write code that operates on collections of objects where the type of each is a subclass of <xref:System.Xml.Linq.XObject>. Your code can then test for the node type of each object in the collection.","nodes":[{"content":"Because all classes that derive from <xref:System.Xml.Linq.XObject> contain a <xref:System.Xml.Linq.XObject.NodeType%2A> property, you can write code that operates on collections of objects where the type of each is a subclass of <xref:System.Xml.Linq.XObject>. Your code can then test for the node type of each object in the collection.","pos":[0,337],"nodes":[{"content":"Because all classes that derive from <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XObject&gt;</ph> contain a <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XObject.NodeType%2A&gt;</ph> property, you can write code that operates on collections of objects where the type of each is a subclass of <ph id=\"ph3\">&lt;xref:System.Xml.Linq.XObject&gt;</ph>.","pos":[0,261],"source":"Because all classes that derive from <xref:System.Xml.Linq.XObject> contain a <xref:System.Xml.Linq.XObject.NodeType%2A> property, you can write code that operates on collections of objects where the type of each is a subclass of <xref:System.Xml.Linq.XObject>."},{"content":"Your code can then test for the node type of each object in the collection.","pos":[262,337]}]}]}],"pos":[78891,79229],"yaml":true,"extradata":"MT"},{"content":"The node type. For <xref href=\"System.Xml.Linq.XDocument\"></xref> objects, this value is <xref href=\"System.Xml.XmlNodeType.Document\"></xref>.","nodes":[{"pos":[0,142],"content":"The node type. For <xref href=\"System.Xml.Linq.XDocument\"></xref> objects, this value is <xref href=\"System.Xml.XmlNodeType.Document\"></xref>.","nodes":[{"content":"The node type.","pos":[0,14]},{"content":"For <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XDocument\"&gt;&lt;/xref&gt;</ph> objects, this value is <ph id=\"ph2\">&lt;xref href=\"System.Xml.XmlNodeType.Document\"&gt;&lt;/xref&gt;</ph>.","pos":[15,142],"source":" For <xref href=\"System.Xml.Linq.XDocument\"></xref> objects, this value is <xref href=\"System.Xml.XmlNodeType.Document\"></xref>."}]}],"pos":[80143,80286],"yaml":true},{"content":"Creates a new <xref href=\"System.Xml.Linq.XDocument\"></xref> from a string.","nodes":[{"pos":[0,75],"content":"Creates a new <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XDocument\"&gt;&lt;/xref&gt;</ph> from a string.","source":"Creates a new <xref href=\"System.Xml.Linq.XDocument\"></xref> from a string."}],"pos":[81801,81877],"yaml":true},{"content":"This method does not preserve white space. If you want to preserve white space in the XML tree, use the overload of <xref:System.Xml.Linq.XDocument.Parse%2A> that takes <xref:System.Xml.Linq.LoadOptions> as a parameter.  \n  \n For more information, see [Preserving White Space while Loading or Parsing XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).  \n  \n LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>. Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.","nodes":[{"pos":[0,219],"content":"This method does not preserve white space. If you want to preserve white space in the XML tree, use the overload of <xref:System.Xml.Linq.XDocument.Parse%2A> that takes <xref:System.Xml.Linq.LoadOptions> as a parameter.","nodes":[{"content":"This method does not preserve white space. If you want to preserve white space in the XML tree, use the overload of <xref:System.Xml.Linq.XDocument.Parse%2A> that takes <xref:System.Xml.Linq.LoadOptions> as a parameter.","pos":[0,219],"nodes":[{"content":"This method does not preserve white space.","pos":[0,42]},{"content":"If you want to preserve white space in the XML tree, use the overload of <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XDocument.Parse%2A&gt;</ph> that takes <ph id=\"ph2\">&lt;xref:System.Xml.Linq.LoadOptions&gt;</ph> as a parameter.","pos":[43,219],"source":" If you want to preserve white space in the XML tree, use the overload of <xref:System.Xml.Linq.XDocument.Parse%2A> that takes <xref:System.Xml.Linq.LoadOptions> as a parameter."}]}]},{"pos":[226,497],"content":"For more information, see <bpt id=\"p1\">[</bpt>Preserving White Space while Loading or Parsing XML<ept id=\"p1\">](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d)</ept> and <bpt id=\"p2\">[</bpt>Preserving White Space While Serializing<ept id=\"p2\">](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)</ept>.","source":"For more information, see [Preserving White Space while Loading or Parsing XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)."},{"pos":[504,805],"content":"LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>. Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.","nodes":[{"content":"LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>. Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.","pos":[0,301],"nodes":[{"content":"LINQ to XML's loading functionality is built upon <ph id=\"ph1\">&lt;xref:System.Xml.XmlReader&gt;</ph>.","pos":[0,78],"source":"LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>."},{"content":"Therefore, you might catch any exceptions that are thrown by the <ph id=\"ph1\">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName&gt;</ph> overload methods and the <ph id=\"ph2\">&lt;xref:System.Xml.XmlReader&gt;</ph> methods that read and parse the document.","pos":[79,301],"source":" Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document."}]}]}],"pos":[81888,82700],"yaml":true,"extradata":"MT"},{"content":"A string that contains XML.","nodes":[{"pos":[0,27],"content":"A string that contains XML.","nodes":[{"content":"A string that contains XML.","pos":[0,27]}]}],"pos":[83752,83780],"yaml":true},{"content":"An <xref href=\"System.Xml.Linq.XDocument\"></xref> populated from the string that contains XML.","nodes":[{"pos":[0,94],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XDocument\"&gt;&lt;/xref&gt;</ph> populated from the string that contains XML.","source":"An <xref href=\"System.Xml.Linq.XDocument\"></xref> populated from the string that contains XML."}],"pos":[83849,83944],"yaml":true},{"content":"Creates a new <xref href=\"System.Xml.Linq.XDocument\"></xref> from a string, optionally preserving white space, setting the base URI, and retaining line information.","nodes":[{"pos":[0,164],"content":"Creates a new <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XDocument\"&gt;&lt;/xref&gt;</ph> from a string, optionally preserving white space, setting the base URI, and retaining line information.","source":"Creates a new <xref href=\"System.Xml.Linq.XDocument\"></xref> from a string, optionally preserving white space, setting the base URI, and retaining line information."}],"pos":[85579,85744],"yaml":true},{"content":"If the source XML is indented, setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` causes the reader to read all white space in the source XML. Nodes of type <xref:System.Xml.Linq.XText> are created for both significant and insignificant white space.  \n  \n If the source XML is indented, not setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` causes the reader to ignore all of the insignificant white space in the source XML. The XML tree is created without any text nodes for insignificant white space.  \n  \n If the source XML is not indented, setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` has no effect. Significant white space is still preserved, and there are no spans of insignificant white space that could cause the creation of more white space text nodes.  \n  \n For more information, see [Preserving White Space while Loading or Parsing XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).  \n  \n Setting <xref:System.Xml.Linq.LoadOptions.SetBaseUri> is not valid when parsing from a <xref:System.String>.  \n  \n There is a performance penalty if you set the <xref:System.Xml.Linq.LoadOptions.SetLineInfo> flag.  \n  \n The line information is accurate immediately after loading the XML document. If you modify the XML tree after loading the document, the line information may become meaningless.  \n  \n LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>. Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.","nodes":[{"pos":[0,282],"content":"If the source XML is indented, setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` causes the reader to read all white space in the source XML. Nodes of type <xref:System.Xml.Linq.XText> are created for both significant and insignificant white space.","nodes":[{"content":"If the source XML is indented, setting the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.LoadOptions.PreserveWhitespace&gt;</ph> flag in <ph id=\"ph2\">`options`</ph> causes the reader to read all white space in the source XML.","pos":[0,175],"source":"If the source XML is indented, setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` causes the reader to read all white space in the source XML."},{"content":"Nodes of type <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XText&gt;</ph> are created for both significant and insignificant white space.","pos":[176,282],"source":" Nodes of type <xref:System.Xml.Linq.XText> are created for both significant and insignificant white space."}]},{"pos":[289,569],"content":"If the source XML is indented, not setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` causes the reader to ignore all of the insignificant white space in the source XML. The XML tree is created without any text nodes for insignificant white space.","nodes":[{"content":"If the source XML is indented, not setting the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.LoadOptions.PreserveWhitespace&gt;</ph> flag in <ph id=\"ph2\">`options`</ph> causes the reader to ignore all of the insignificant white space in the source XML.","pos":[0,202],"source":"If the source XML is indented, not setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` causes the reader to ignore all of the insignificant white space in the source XML."},{"content":"The XML tree is created without any text nodes for insignificant white space.","pos":[203,280]}]},{"pos":[576,867],"content":"If the source XML is not indented, setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` has no effect. Significant white space is still preserved, and there are no spans of insignificant white space that could cause the creation of more white space text nodes.","nodes":[{"content":"If the source XML is not indented, setting the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.LoadOptions.PreserveWhitespace&gt;</ph> flag in <ph id=\"ph2\">`options`</ph> has no effect.","pos":[0,133],"source":"If the source XML is not indented, setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` has no effect."},{"content":"Significant white space is still preserved, and there are no spans of insignificant white space that could cause the creation of more white space text nodes.","pos":[134,291]}]},{"pos":[874,1145],"content":"For more information, see <bpt id=\"p1\">[</bpt>Preserving White Space while Loading or Parsing XML<ept id=\"p1\">](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d)</ept> and <bpt id=\"p2\">[</bpt>Preserving White Space While Serializing<ept id=\"p2\">](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)</ept>.","source":"For more information, see [Preserving White Space while Loading or Parsing XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)."},{"pos":[1152,1260],"content":"Setting <xref:System.Xml.Linq.LoadOptions.SetBaseUri> is not valid when parsing from a <xref:System.String>.","nodes":[{"content":"Setting <ph id=\"ph1\">&lt;xref:System.Xml.Linq.LoadOptions.SetBaseUri&gt;</ph> is not valid when parsing from a <ph id=\"ph2\">&lt;xref:System.String&gt;</ph>.","pos":[0,108],"source":"Setting <xref:System.Xml.Linq.LoadOptions.SetBaseUri> is not valid when parsing from a <xref:System.String>."}]},{"pos":[1267,1365],"content":"There is a performance penalty if you set the <xref:System.Xml.Linq.LoadOptions.SetLineInfo> flag.","nodes":[{"content":"There is a performance penalty if you set the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.LoadOptions.SetLineInfo&gt;</ph> flag.","pos":[0,98],"source":"There is a performance penalty if you set the <xref:System.Xml.Linq.LoadOptions.SetLineInfo> flag."}]},{"pos":[1372,1548],"content":"The line information is accurate immediately after loading the XML document. If you modify the XML tree after loading the document, the line information may become meaningless.","nodes":[{"content":"The line information is accurate immediately after loading the XML document. If you modify the XML tree after loading the document, the line information may become meaningless.","pos":[0,176],"nodes":[{"content":"The line information is accurate immediately after loading the XML document.","pos":[0,76]},{"content":"If you modify the XML tree after loading the document, the line information may become meaningless.","pos":[77,176]}]}]},{"pos":[1555,1856],"content":"LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>. Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.","nodes":[{"content":"LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>. Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.","pos":[0,301],"nodes":[{"content":"LINQ to XML's loading functionality is built upon <ph id=\"ph1\">&lt;xref:System.Xml.XmlReader&gt;</ph>.","pos":[0,78],"source":"LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>."},{"content":"Therefore, you might catch any exceptions that are thrown by the <ph id=\"ph1\">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName&gt;</ph> overload methods and the <ph id=\"ph2\">&lt;xref:System.Xml.XmlReader&gt;</ph> methods that read and parse the document.","pos":[79,301],"source":" Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document."}]}]}],"pos":[85755,87628],"yaml":true,"extradata":"MT"},{"content":"A string that contains XML.","nodes":[{"pos":[0,27],"content":"A string that contains XML.","nodes":[{"content":"A string that contains XML.","pos":[0,27]}]}],"pos":[89267,89295],"yaml":true},{"content":"A <xref href=\"System.Xml.Linq.LoadOptions\"></xref> that specifies white space behavior, and whether to load base URI and line information.","nodes":[{"pos":[0,138],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.LoadOptions\"&gt;&lt;/xref&gt;</ph> that specifies white space behavior, and whether to load base URI and line information.","source":"A <xref href=\"System.Xml.Linq.LoadOptions\"></xref> that specifies white space behavior, and whether to load base URI and line information."}],"pos":[89372,89511],"yaml":true},{"content":"An <xref href=\"System.Xml.Linq.XDocument\"></xref> populated from the string that contains XML.","nodes":[{"pos":[0,94],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XDocument\"&gt;&lt;/xref&gt;</ph> populated from the string that contains XML.","source":"An <xref href=\"System.Xml.Linq.XDocument\"></xref> populated from the string that contains XML."}],"pos":[89580,89675],"yaml":true},{"content":"Gets the root element of the XML Tree for this document.","nodes":[{"pos":[0,56],"content":"Gets the root element of the XML Tree for this document.","nodes":[{"content":"Gets the root element of the XML Tree for this document.","pos":[0,56]}]}],"pos":[91114,91171],"yaml":true},{"content":"This property is useful when you want to compose [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] queries in the same context as when composing them for a tree rooted in <xref:System.Xml.Linq.XElement>. See [Querying an XDocument vs. Querying an XElement](http://msdn.microsoft.com/library/d266f58d-f2f3-4668-b661-e716e658d13a) for more details.","nodes":[{"pos":[0,350],"content":"This property is useful when you want to compose [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] queries in the same context as when composing them for a tree rooted in <xref:System.Xml.Linq.XElement>. See [Querying an XDocument vs. Querying an XElement](http://msdn.microsoft.com/library/d266f58d-f2f3-4668-b661-e716e658d13a) for more details.","nodes":[{"content":"This property is useful when you want to compose <ph id=\"ph1\">[!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)]</ph> queries in the same context as when composing them for a tree rooted in <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XElement&gt;</ph>.","pos":[0,207],"source":"This property is useful when you want to compose [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] queries in the same context as when composing them for a tree rooted in <xref:System.Xml.Linq.XElement>."},{"content":"See <bpt id=\"p1\">[</bpt>Querying an XDocument vs. Querying an XElement<ept id=\"p1\">](http://msdn.microsoft.com/library/d266f58d-f2f3-4668-b661-e716e658d13a)</ept> for more details.","pos":[208,350],"source":" See [Querying an XDocument vs. Querying an XElement](http://msdn.microsoft.com/library/d266f58d-f2f3-4668-b661-e716e658d13a) for more details."}]}],"pos":[91182,91533],"yaml":true,"extradata":"MT"},{"content":"The root <xref href=\"System.Xml.Linq.XElement\"></xref> of the XML tree.","nodes":[{"pos":[0,71],"content":"The root <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XElement\"&gt;&lt;/xref&gt;</ph> of the XML tree.","source":"The root <xref href=\"System.Xml.Linq.XElement\"></xref> of the XML tree."}],"pos":[93067,93139],"yaml":true},{"content":"Serialize this <xref href=\"System.Xml.Linq.XDocument\"></xref> to an <xref href=\"System.Xml.XmlWriter\"></xref>.","nodes":[{"pos":[0,110],"content":"Serialize this <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XDocument\"&gt;&lt;/xref&gt;</ph> to an <ph id=\"ph2\">&lt;xref href=\"System.Xml.XmlWriter\"&gt;&lt;/xref&gt;</ph>.","source":"Serialize this <xref href=\"System.Xml.Linq.XDocument\"></xref> to an <xref href=\"System.Xml.XmlWriter\"></xref>."}],"pos":[94674,94785],"yaml":true},{"content":"A <xref href=\"System.Xml.XmlWriter\"></xref> that the <xref href=\"System.Xml.Linq.XDocument\"></xref> will be written to.","nodes":[{"pos":[0,119],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Xml.XmlWriter\"&gt;&lt;/xref&gt;</ph> that the <ph id=\"ph2\">&lt;xref href=\"System.Xml.Linq.XDocument\"&gt;&lt;/xref&gt;</ph> will be written to.","source":"A <xref href=\"System.Xml.XmlWriter\"></xref> that the <xref href=\"System.Xml.Linq.XDocument\"></xref> will be written to."}],"pos":[96144,96264],"yaml":true},{"content":"Outputs this <xref href=\"System.Xml.Linq.XDocument\"></xref> to the specified <xref href=\"System.IO.Stream\"></xref>.","nodes":[{"pos":[0,115],"content":"Outputs this <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XDocument\"&gt;&lt;/xref&gt;</ph> to the specified <ph id=\"ph2\">&lt;xref href=\"System.IO.Stream\"&gt;&lt;/xref&gt;</ph>.","source":"Outputs this <xref href=\"System.Xml.Linq.XDocument\"></xref> to the specified <xref href=\"System.IO.Stream\"></xref>."}],"pos":[97778,97894],"yaml":true},{"content":"The serialized XML will be indented. All insignificant white space will be removed, and additional white space will be added so that the XML will be properly indented. The behavior of this method is that insignificant white space will not be preserved.  \n  \n If you want to control white space, use the overload of <xref:System.Xml.Linq.XDocument.Save%2A> that takes <xref:System.Xml.Linq.SaveOptions> as a parameter. Use the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> option to save unindented XML. This will cause the writer to write all white spaces exactly as represented in the XML tree.  \n  \n Use <xref:System.Xml.Linq.SaveOptions.OmitDuplicateNamespaces> option if you want to remove duplicate namespace declarations.","nodes":[{"pos":[0,252],"content":"The serialized XML will be indented. All insignificant white space will be removed, and additional white space will be added so that the XML will be properly indented. The behavior of this method is that insignificant white space will not be preserved.","nodes":[{"content":"The serialized XML will be indented. All insignificant white space will be removed, and additional white space will be added so that the XML will be properly indented. The behavior of this method is that insignificant white space will not be preserved.","pos":[0,252],"nodes":[{"content":"The serialized XML will be indented.","pos":[0,36]},{"content":"All insignificant white space will be removed, and additional white space will be added so that the XML will be properly indented.","pos":[37,167]},{"content":"The behavior of this method is that insignificant white space will not be preserved.","pos":[168,252]}]}]},{"pos":[259,602],"content":"If you want to control white space, use the overload of <xref:System.Xml.Linq.XDocument.Save%2A> that takes <xref:System.Xml.Linq.SaveOptions> as a parameter. Use the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> option to save unindented XML. This will cause the writer to write all white spaces exactly as represented in the XML tree.","nodes":[{"content":"If you want to control white space, use the overload of <xref:System.Xml.Linq.XDocument.Save%2A> that takes <xref:System.Xml.Linq.SaveOptions> as a parameter. Use the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> option to save unindented XML. This will cause the writer to write all white spaces exactly as represented in the XML tree.","pos":[0,343],"nodes":[{"content":"If you want to control white space, use the overload of <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XDocument.Save%2A&gt;</ph> that takes <ph id=\"ph2\">&lt;xref:System.Xml.Linq.SaveOptions&gt;</ph> as a parameter.","pos":[0,158],"source":"If you want to control white space, use the overload of <xref:System.Xml.Linq.XDocument.Save%2A> that takes <xref:System.Xml.Linq.SaveOptions> as a parameter."},{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.SaveOptions.DisableFormatting&gt;</ph> option to save unindented XML.","pos":[159,250],"source":" Use the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> option to save unindented XML."},{"content":"This will cause the writer to write all white spaces exactly as represented in the XML tree.","pos":[251,343]}]}]},{"pos":[609,734],"content":"Use <xref:System.Xml.Linq.SaveOptions.OmitDuplicateNamespaces> option if you want to remove duplicate namespace declarations.","nodes":[{"content":"Use <ph id=\"ph1\">&lt;xref:System.Xml.Linq.SaveOptions.OmitDuplicateNamespaces&gt;</ph> option if you want to remove duplicate namespace declarations.","pos":[0,125],"source":"Use <xref:System.Xml.Linq.SaveOptions.OmitDuplicateNamespaces> option if you want to remove duplicate namespace declarations."}]}],"pos":[97905,98646],"yaml":true,"extradata":"MT"},{"content":"The stream to output this <xref href=\"System.Xml.Linq.XDocument\"></xref> to.","nodes":[{"pos":[0,76],"content":"The stream to output this <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XDocument\"&gt;&lt;/xref&gt;</ph> to.","source":"The stream to output this <xref href=\"System.Xml.Linq.XDocument\"></xref> to."}],"pos":[98794,98871],"yaml":true},{"content":"Serialize this <xref href=\"System.Xml.Linq.XDocument\"></xref> to a <xref href=\"System.IO.TextWriter\"></xref>.","nodes":[{"pos":[0,109],"content":"Serialize this <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XDocument\"&gt;&lt;/xref&gt;</ph> to a <ph id=\"ph2\">&lt;xref href=\"System.IO.TextWriter\"&gt;&lt;/xref&gt;</ph>.","source":"Serialize this <xref href=\"System.Xml.Linq.XDocument\"></xref> to a <xref href=\"System.IO.TextWriter\"></xref>."}],"pos":[100409,100519],"yaml":true},{"content":"The serialized XML will be indented. All insignificant white space will be removed, and additional white space will be added so that the XML will be properly indented. The behavior of this method is that insignificant white space will not be preserved.  \n  \n If you want to control white space, use the overload of <xref:System.Xml.Linq.XDocument.Save%2A> that takes <xref:System.Xml.Linq.SaveOptions> as a parameter. For more information, see [Preserving White Space while Loading or Parsing XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).","nodes":[{"pos":[0,252],"content":"The serialized XML will be indented. All insignificant white space will be removed, and additional white space will be added so that the XML will be properly indented. The behavior of this method is that insignificant white space will not be preserved.","nodes":[{"content":"The serialized XML will be indented. All insignificant white space will be removed, and additional white space will be added so that the XML will be properly indented. The behavior of this method is that insignificant white space will not be preserved.","pos":[0,252],"nodes":[{"content":"The serialized XML will be indented.","pos":[0,36]},{"content":"All insignificant white space will be removed, and additional white space will be added so that the XML will be properly indented.","pos":[37,167]},{"content":"The behavior of this method is that insignificant white space will not be preserved.","pos":[168,252]}]}]},{"pos":[259,689],"content":"If you want to control white space, use the overload of <xref:System.Xml.Linq.XDocument.Save%2A> that takes <xref:System.Xml.Linq.SaveOptions> as a parameter. For more information, see [Preserving White Space while Loading or Parsing XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).","nodes":[{"content":"If you want to control white space, use the overload of <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XDocument.Save%2A&gt;</ph> that takes <ph id=\"ph2\">&lt;xref:System.Xml.Linq.SaveOptions&gt;</ph> as a parameter.","pos":[0,158],"source":"If you want to control white space, use the overload of <xref:System.Xml.Linq.XDocument.Save%2A> that takes <xref:System.Xml.Linq.SaveOptions> as a parameter."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Preserving White Space while Loading or Parsing XML<ept id=\"p1\">](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d)</ept> and <bpt id=\"p2\">[</bpt>Preserving White Space While Serializing<ept id=\"p2\">](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)</ept>.","pos":[159,430],"source":" For more information, see [Preserving White Space while Loading or Parsing XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)."}]}],"pos":[100530,101224],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.IO.TextWriter\"></xref> that the <xref href=\"System.Xml.Linq.XDocument\"></xref> will be written to.","nodes":[{"pos":[0,119],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.IO.TextWriter\"&gt;&lt;/xref&gt;</ph> that the <ph id=\"ph2\">&lt;xref href=\"System.Xml.Linq.XDocument\"&gt;&lt;/xref&gt;</ph> will be written to.","source":"A <xref href=\"System.IO.TextWriter\"></xref> that the <xref href=\"System.Xml.Linq.XDocument\"></xref> will be written to."}],"pos":[102398,102518],"yaml":true},{"content":"Serialize this <xref href=\"System.Xml.Linq.XDocument\"></xref> to a file, overwriting an existing file, if it exists.","nodes":[{"pos":[0,116],"content":"Serialize this <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XDocument\"&gt;&lt;/xref&gt;</ph> to a file, overwriting an existing file, if it exists.","source":"Serialize this <xref href=\"System.Xml.Linq.XDocument\"></xref> to a file, overwriting an existing file, if it exists."}],"pos":[104023,104140],"yaml":true},{"content":"The serialized XML will be indented. All insignificant white space will be removed, and additional white space will be added so that the XML will be properly indented. The behavior of this method is that insignificant white space will not be preserved.  \n  \n If you want to control white space, use the overload of <xref:System.Xml.Linq.XDocument.Save%2A> that takes <xref:System.Xml.Linq.SaveOptions> as a parameter. For more information, see [Preserving White Space while Loading or Parsing XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).","nodes":[{"pos":[0,252],"content":"The serialized XML will be indented. All insignificant white space will be removed, and additional white space will be added so that the XML will be properly indented. The behavior of this method is that insignificant white space will not be preserved.","nodes":[{"content":"The serialized XML will be indented. All insignificant white space will be removed, and additional white space will be added so that the XML will be properly indented. The behavior of this method is that insignificant white space will not be preserved.","pos":[0,252],"nodes":[{"content":"The serialized XML will be indented.","pos":[0,36]},{"content":"All insignificant white space will be removed, and additional white space will be added so that the XML will be properly indented.","pos":[37,167]},{"content":"The behavior of this method is that insignificant white space will not be preserved.","pos":[168,252]}]}]},{"pos":[259,689],"content":"If you want to control white space, use the overload of <xref:System.Xml.Linq.XDocument.Save%2A> that takes <xref:System.Xml.Linq.SaveOptions> as a parameter. For more information, see [Preserving White Space while Loading or Parsing XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).","nodes":[{"content":"If you want to control white space, use the overload of <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XDocument.Save%2A&gt;</ph> that takes <ph id=\"ph2\">&lt;xref:System.Xml.Linq.SaveOptions&gt;</ph> as a parameter.","pos":[0,158],"source":"If you want to control white space, use the overload of <xref:System.Xml.Linq.XDocument.Save%2A> that takes <xref:System.Xml.Linq.SaveOptions> as a parameter."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Preserving White Space while Loading or Parsing XML<ept id=\"p1\">](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d)</ept> and <bpt id=\"p2\">[</bpt>Preserving White Space While Serializing<ept id=\"p2\">](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)</ept>.","pos":[159,430],"source":" For more information, see [Preserving White Space while Loading or Parsing XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)."}]}],"pos":[104151,104845],"yaml":true,"extradata":"MT"},{"content":"A string that contains the name of the file.","nodes":[{"pos":[0,44],"content":"A string that contains the name of the file.","nodes":[{"content":"A string that contains the name of the file.","pos":[0,44]}]}],"pos":[105832,105877],"yaml":true},{"content":"Outputs this <xref href=\"System.Xml.Linq.XDocument\"></xref> to the specified <xref href=\"System.IO.Stream\"></xref>, optionally specifying formatting behavior.","nodes":[{"pos":[0,158],"content":"Outputs this <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XDocument\"&gt;&lt;/xref&gt;</ph> to the specified <ph id=\"ph2\">&lt;xref href=\"System.IO.Stream\"&gt;&lt;/xref&gt;</ph>, optionally specifying formatting behavior.","source":"Outputs this <xref href=\"System.Xml.Linq.XDocument\"></xref> to the specified <xref href=\"System.IO.Stream\"></xref>, optionally specifying formatting behavior."}],"pos":[107210,107369],"yaml":true},{"content":"By default the `options` are set to <xref:System.Xml.Linq.SaveOptions.None>. This option will remove all extraneous insignificant white space, and add appropriate insignificant white space so that the XML is properly indented.  \n  \n If you want to save unindented XML, specify the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> flag for `options`. This will cause the writer to write all white spaces exactly as represented in the XML tree.  \n  \n Use <xref:System.Xml.Linq.SaveOptions.OmitDuplicateNamespaces> option if you want to remove duplicate namespace declarations.","nodes":[{"pos":[0,226],"content":"By default the `options` are set to <xref:System.Xml.Linq.SaveOptions.None>. This option will remove all extraneous insignificant white space, and add appropriate insignificant white space so that the XML is properly indented.","nodes":[{"content":"By default the <ph id=\"ph1\">`options`</ph> are set to <ph id=\"ph2\">&lt;xref:System.Xml.Linq.SaveOptions.None&gt;</ph>.","pos":[0,76],"source":"By default the `options` are set to <xref:System.Xml.Linq.SaveOptions.None>."},{"content":"This option will remove all extraneous insignificant white space, and add appropriate insignificant white space so that the XML is properly indented.","pos":[77,226]}]},{"pos":[233,446],"content":"If you want to save unindented XML, specify the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> flag for `options`. This will cause the writer to write all white spaces exactly as represented in the XML tree.","nodes":[{"content":"If you want to save unindented XML, specify the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.SaveOptions.DisableFormatting&gt;</ph> flag for <ph id=\"ph2\">`options`</ph>.","pos":[0,120],"source":"If you want to save unindented XML, specify the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> flag for `options`."},{"content":"This will cause the writer to write all white spaces exactly as represented in the XML tree.","pos":[121,213]}]},{"pos":[453,578],"content":"Use <xref:System.Xml.Linq.SaveOptions.OmitDuplicateNamespaces> option if you want to remove duplicate namespace declarations.","nodes":[{"content":"Use <ph id=\"ph1\">&lt;xref:System.Xml.Linq.SaveOptions.OmitDuplicateNamespaces&gt;</ph> option if you want to remove duplicate namespace declarations.","pos":[0,125],"source":"Use <xref:System.Xml.Linq.SaveOptions.OmitDuplicateNamespaces> option if you want to remove duplicate namespace declarations."}]}],"pos":[107380,107965],"yaml":true,"extradata":"MT"},{"content":"The stream to output this <xref href=\"System.Xml.Linq.XDocument\"></xref> to.","nodes":[{"pos":[0,76],"content":"The stream to output this <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XDocument\"&gt;&lt;/xref&gt;</ph> to.","source":"The stream to output this <xref href=\"System.Xml.Linq.XDocument\"></xref> to."}],"pos":[108150,108227],"yaml":true},{"content":"A <xref href=\"System.Xml.Linq.SaveOptions\"></xref> that specifies formatting behavior.","nodes":[{"pos":[0,86],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.SaveOptions\"&gt;&lt;/xref&gt;</ph> that specifies formatting behavior.","source":"A <xref href=\"System.Xml.Linq.SaveOptions\"></xref> that specifies formatting behavior."}],"pos":[108304,108391],"yaml":true},{"content":"Serialize this <xref href=\"System.Xml.Linq.XDocument\"></xref> to a <xref href=\"System.IO.TextWriter\"></xref>, optionally disabling formatting.","nodes":[{"pos":[0,142],"content":"Serialize this <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XDocument\"&gt;&lt;/xref&gt;</ph> to a <ph id=\"ph2\">&lt;xref href=\"System.IO.TextWriter\"&gt;&lt;/xref&gt;</ph>, optionally disabling formatting.","source":"Serialize this <xref href=\"System.Xml.Linq.XDocument\"></xref> to a <xref href=\"System.IO.TextWriter\"></xref>, optionally disabling formatting."}],"pos":[110052,110195],"yaml":true},{"content":"If you want to save unindented XML, specify the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> flag for `options`. This will cause the writer to write all white space exactly as represented in the XML tree.  \n  \n If you want to save indented XML, do not specify the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> flag for `options`. This will remove all extraneous insignificant white space, and add appropriate insignificant white space so that the XML is properly indented. This is the default behavior, and the behavior of the overloads of the <xref:System.Xml.Linq.XDocument.Save%2A> methods that do not take `options` as a parameter.  \n  \n For more information, see [Preserving White Space while Loading or Parsing XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).","nodes":[{"pos":[0,212],"content":"If you want to save unindented XML, specify the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> flag for `options`. This will cause the writer to write all white space exactly as represented in the XML tree.","nodes":[{"content":"If you want to save unindented XML, specify the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.SaveOptions.DisableFormatting&gt;</ph> flag for <ph id=\"ph2\">`options`</ph>.","pos":[0,120],"source":"If you want to save unindented XML, specify the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> flag for `options`."},{"content":"This will cause the writer to write all white space exactly as represented in the XML tree.","pos":[121,212]}]},{"pos":[219,650],"content":"If you want to save indented XML, do not specify the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> flag for `options`. This will remove all extraneous insignificant white space, and add appropriate insignificant white space so that the XML is properly indented. This is the default behavior, and the behavior of the overloads of the <xref:System.Xml.Linq.XDocument.Save%2A> methods that do not take `options` as a parameter.","nodes":[{"content":"If you want to save indented XML, do not specify the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.SaveOptions.DisableFormatting&gt;</ph> flag for <ph id=\"ph2\">`options`</ph>.","pos":[0,125],"source":"If you want to save indented XML, do not specify the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> flag for `options`."},{"content":"This will remove all extraneous insignificant white space, and add appropriate insignificant white space so that the XML is properly indented.","pos":[126,268]},{"content":"This is the default behavior, and the behavior of the overloads of the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XDocument.Save%2A&gt;</ph> methods that do not take <ph id=\"ph2\">`options`</ph> as a parameter.","pos":[269,431],"source":" This is the default behavior, and the behavior of the overloads of the <xref:System.Xml.Linq.XDocument.Save%2A> methods that do not take `options` as a parameter."}]},{"pos":[657,928],"content":"For more information, see <bpt id=\"p1\">[</bpt>Preserving White Space while Loading or Parsing XML<ept id=\"p1\">](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d)</ept> and <bpt id=\"p2\">[</bpt>Preserving White Space While Serializing<ept id=\"p2\">](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)</ept>.","source":"For more information, see [Preserving White Space while Loading or Parsing XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)."}],"pos":[110206,111141],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.IO.TextWriter\"></xref> to output the XML to.","nodes":[{"pos":[0,67],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.IO.TextWriter\"&gt;&lt;/xref&gt;</ph> to output the XML to.","source":"The <xref href=\"System.IO.TextWriter\"></xref> to output the XML to."}],"pos":[113034,113102],"yaml":true},{"content":"A <xref href=\"System.Xml.Linq.SaveOptions\"></xref> that specifies formatting behavior.","nodes":[{"pos":[0,86],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.SaveOptions\"&gt;&lt;/xref&gt;</ph> that specifies formatting behavior.","source":"A <xref href=\"System.Xml.Linq.SaveOptions\"></xref> that specifies formatting behavior."}],"pos":[113179,113266],"yaml":true},{"content":"Serialize this <xref href=\"System.Xml.Linq.XDocument\"></xref> to a file, optionally disabling formatting.","nodes":[{"pos":[0,105],"content":"Serialize this <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XDocument\"&gt;&lt;/xref&gt;</ph> to a file, optionally disabling formatting.","source":"Serialize this <xref href=\"System.Xml.Linq.XDocument\"></xref> to a file, optionally disabling formatting."}],"pos":[114894,115000],"yaml":true},{"content":"If you want to save unindented XML, specify the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> flag for `options`. This will cause the writer to write all white space exactly as represented in the XML tree.  \n  \n If you want to save indented XML, do not specify the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> flag for `options`. This will remove all extraneous insignificant white space, and add appropriate insignificant white space so that the XML is properly indented. This is the default behavior, and the behavior of the overloads of the <xref:System.Xml.Linq.XDocument.Save%2A> methods that do not take `options` as a parameter.  \n  \n For more information, see [Preserving White Space while Loading or Parsing XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).","nodes":[{"pos":[0,212],"content":"If you want to save unindented XML, specify the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> flag for `options`. This will cause the writer to write all white space exactly as represented in the XML tree.","nodes":[{"content":"If you want to save unindented XML, specify the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.SaveOptions.DisableFormatting&gt;</ph> flag for <ph id=\"ph2\">`options`</ph>.","pos":[0,120],"source":"If you want to save unindented XML, specify the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> flag for `options`."},{"content":"This will cause the writer to write all white space exactly as represented in the XML tree.","pos":[121,212]}]},{"pos":[219,650],"content":"If you want to save indented XML, do not specify the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> flag for `options`. This will remove all extraneous insignificant white space, and add appropriate insignificant white space so that the XML is properly indented. This is the default behavior, and the behavior of the overloads of the <xref:System.Xml.Linq.XDocument.Save%2A> methods that do not take `options` as a parameter.","nodes":[{"content":"If you want to save indented XML, do not specify the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.SaveOptions.DisableFormatting&gt;</ph> flag for <ph id=\"ph2\">`options`</ph>.","pos":[0,125],"source":"If you want to save indented XML, do not specify the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> flag for `options`."},{"content":"This will remove all extraneous insignificant white space, and add appropriate insignificant white space so that the XML is properly indented.","pos":[126,268]},{"content":"This is the default behavior, and the behavior of the overloads of the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XDocument.Save%2A&gt;</ph> methods that do not take <ph id=\"ph2\">`options`</ph> as a parameter.","pos":[269,431],"source":" This is the default behavior, and the behavior of the overloads of the <xref:System.Xml.Linq.XDocument.Save%2A> methods that do not take `options` as a parameter."}]},{"pos":[657,928],"content":"For more information, see <bpt id=\"p1\">[</bpt>Preserving White Space while Loading or Parsing XML<ept id=\"p1\">](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d)</ept> and <bpt id=\"p2\">[</bpt>Preserving White Space While Serializing<ept id=\"p2\">](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)</ept>.","source":"For more information, see [Preserving White Space while Loading or Parsing XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)."}],"pos":[115011,115946],"yaml":true,"extradata":"MT"},{"content":"A string that contains the name of the file.","nodes":[{"pos":[0,44],"content":"A string that contains the name of the file.","nodes":[{"content":"A string that contains the name of the file.","pos":[0,44]}]}],"pos":[117345,117390],"yaml":true},{"content":"A <xref href=\"System.Xml.Linq.SaveOptions\"></xref> that specifies formatting behavior.","nodes":[{"pos":[0,86],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.SaveOptions\"&gt;&lt;/xref&gt;</ph> that specifies formatting behavior.","source":"A <xref href=\"System.Xml.Linq.SaveOptions\"></xref> that specifies formatting behavior."}],"pos":[117467,117554],"yaml":true},{"content":"Write this document to an <xref href=\"System.Xml.XmlWriter\"></xref>.","nodes":[{"pos":[0,68],"content":"Write this document to an <ph id=\"ph1\">&lt;xref href=\"System.Xml.XmlWriter\"&gt;&lt;/xref&gt;</ph>.","source":"Write this document to an <xref href=\"System.Xml.XmlWriter\"></xref>."}],"pos":[122940,123009],"yaml":true},{"content":"An <xref href=\"System.Xml.XmlWriter\"></xref> into which this method will write.","nodes":[{"pos":[0,79],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Xml.XmlWriter\"&gt;&lt;/xref&gt;</ph> into which this method will write.","source":"An <xref href=\"System.Xml.XmlWriter\"></xref> into which this method will write."}],"pos":[124442,124522],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Xml.Linq.XDocument\n  commentId: T:System.Xml.Linq.XDocument\n  id: XDocument\n  children:\n  - System.Xml.Linq.XDocument.#ctor\n  - System.Xml.Linq.XDocument.#ctor(System.Object[])\n  - System.Xml.Linq.XDocument.#ctor(System.Xml.Linq.XDocument)\n  - System.Xml.Linq.XDocument.#ctor(System.Xml.Linq.XDeclaration,System.Object[])\n  - System.Xml.Linq.XDocument.Declaration\n  - System.Xml.Linq.XDocument.DocumentType\n  - System.Xml.Linq.XDocument.Load(System.IO.Stream)\n  - System.Xml.Linq.XDocument.Load(System.IO.TextReader)\n  - System.Xml.Linq.XDocument.Load(System.String)\n  - System.Xml.Linq.XDocument.Load(System.Xml.XmlReader)\n  - System.Xml.Linq.XDocument.Load(System.IO.Stream,System.Xml.Linq.LoadOptions)\n  - System.Xml.Linq.XDocument.Load(System.IO.TextReader,System.Xml.Linq.LoadOptions)\n  - System.Xml.Linq.XDocument.Load(System.String,System.Xml.Linq.LoadOptions)\n  - System.Xml.Linq.XDocument.Load(System.Xml.XmlReader,System.Xml.Linq.LoadOptions)\n  - System.Xml.Linq.XDocument.LoadAsync(System.IO.TextReader,System.Xml.Linq.LoadOptions,System.Threading.CancellationToken)\n  - System.Xml.Linq.XDocument.LoadAsync(System.Xml.XmlReader,System.Xml.Linq.LoadOptions,System.Threading.CancellationToken)\n  - System.Xml.Linq.XDocument.LoadAsync(System.IO.Stream,System.Xml.Linq.LoadOptions,System.Threading.CancellationToken)\n  - System.Xml.Linq.XDocument.NodeType\n  - System.Xml.Linq.XDocument.Parse(System.String)\n  - System.Xml.Linq.XDocument.Parse(System.String,System.Xml.Linq.LoadOptions)\n  - System.Xml.Linq.XDocument.Root\n  - System.Xml.Linq.XDocument.Save(System.Xml.XmlWriter)\n  - System.Xml.Linq.XDocument.Save(System.IO.Stream)\n  - System.Xml.Linq.XDocument.Save(System.IO.TextWriter)\n  - System.Xml.Linq.XDocument.Save(System.String)\n  - System.Xml.Linq.XDocument.Save(System.IO.Stream,System.Xml.Linq.SaveOptions)\n  - System.Xml.Linq.XDocument.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)\n  - System.Xml.Linq.XDocument.Save(System.String,System.Xml.Linq.SaveOptions)\n  - System.Xml.Linq.XDocument.SaveAsync(System.Xml.XmlWriter,System.Threading.CancellationToken)\n  - System.Xml.Linq.XDocument.SaveAsync(System.IO.Stream,System.Xml.Linq.SaveOptions,System.Threading.CancellationToken)\n  - System.Xml.Linq.XDocument.SaveAsync(System.IO.TextWriter,System.Xml.Linq.SaveOptions,System.Threading.CancellationToken)\n  - System.Xml.Linq.XDocument.WriteTo(System.Xml.XmlWriter)\n  - System.Xml.Linq.XDocument.WriteToAsync(System.Xml.XmlWriter,System.Threading.CancellationToken)\n  langs:\n  - csharp\n  name: XDocument\n  nameWithType: XDocument\n  fullName: System.Xml.Linq.XDocument\n  type: Class\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Represents an XML document. For the components and usage of an <xref href=\"System.Xml.Linq.XDocument\"></xref> object, see [XDocument Class Overview](http://msdn.microsoft.com/library/90f78331-1be8-42fb-93e7-bd1325826467).\n  remarks: \"> [!NOTE]\\n>  To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#System.Xml.Linq/XLinq.cs#3354dac0913e417b). You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/).  \\n  \\n For details about the valid content of an <xref:System.Xml.Linq.XDocument>, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).\"\n  example:\n  - \"The following example creates a document, and then adds a comment and an element to it. It then composes another document using the results of a query.  \\n  \\n```csharp  \\n  \\n                XDocument srcTree = new XDocument(  \\n    new XComment(\\\"This is a comment\\\"),  \\n    new XElement(\\\"Root\\\",  \\n        new XElement(\\\"Child1\\\", \\\"data1\\\"),  \\n        new XElement(\\\"Child2\\\", \\\"data2\\\"),  \\n        new XElement(\\\"Child3\\\", \\\"data3\\\"),  \\n        new XElement(\\\"Child2\\\", \\\"data4\\\"),  \\n        new XElement(\\\"Info5\\\", \\\"info5\\\"),  \\n        new XElement(\\\"Info6\\\", \\\"info6\\\"),  \\n        new XElement(\\\"Info7\\\", \\\"info7\\\"),  \\n        new XElement(\\\"Info8\\\", \\\"info8\\\")  \\n    )  \\n);  \\n  \\nXDocument doc = new XDocument(  \\n    new XComment(\\\"This is a comment\\\"),  \\n    new XElement(\\\"Root\\\",  \\n        from el in srcTree.Element(\\\"Root\\\").Elements()  \\n        where ((string)el).StartsWith(\\\"data\\\")  \\n        select el  \\n    )  \\n);  \\nConsole.WriteLine(doc);  \\n```  \\n  \\n```vb  \\n  \\n                Dim srcTree As XDocument = _   \\n    <?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" standalone=\\\"yes\\\"?>  \\n        <!--This is a comment-->  \\n        <Root>  \\n            <Child1>data1</Child1>  \\n            <Child2>data2</Child2>  \\n            <Child3>data3</Child3>  \\n            <Child2>data4</Child2>  \\n            <Info5>info5</Info5>  \\n            <Info6>info6</Info6>  \\n            <Info7>info7</Info7>  \\n            <Info8>info8</Info8>  \\n        </Root>  \\nDim doc As XDocument = _   \\n    <?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" standalone=\\\"yes\\\"?>  \\n        <!--This is a comment-->  \\n        <Root>  \\n            <%= From el In srcTree.<Root>.Elements _  \\n                Where CStr(el).StartsWith(\\\"data\\\") _  \\n                Select el %>  \\n        </Root>  \\nConsole.WriteLine(doc)  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```xml  \\n  \\n                <!--This is a comment-->  \\n<Root>  \\n  <Child1>data1</Child1>  \\n  <Child2>data2</Child2>  \\n  <Child3>data3</Child3>  \\n  <Child2>data4</Child2>  \\n</Root>  \\n```\"\n  syntax:\n    content: 'public class XDocument : System.Xml.Linq.XContainer'\n  inheritance:\n  - System.Object\n  - System.Xml.Linq.XObject\n  - System.Xml.Linq.XNode\n  - System.Xml.Linq.XContainer\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Xml.Linq.XContainer.Add(System.Object)\n  - System.Xml.Linq.XContainer.Add(System.Object[])\n  - System.Xml.Linq.XContainer.AddFirst(System.Object)\n  - System.Xml.Linq.XContainer.AddFirst(System.Object[])\n  - System.Xml.Linq.XContainer.CreateWriter\n  - System.Xml.Linq.XContainer.DescendantNodes\n  - System.Xml.Linq.XContainer.Descendants\n  - System.Xml.Linq.XContainer.Descendants(System.Xml.Linq.XName)\n  - System.Xml.Linq.XContainer.Element(System.Xml.Linq.XName)\n  - System.Xml.Linq.XContainer.Elements\n  - System.Xml.Linq.XContainer.Elements(System.Xml.Linq.XName)\n  - System.Xml.Linq.XContainer.FirstNode\n  - System.Xml.Linq.XContainer.LastNode\n  - System.Xml.Linq.XContainer.Nodes\n  - System.Xml.Linq.XContainer.RemoveNodes\n  - System.Xml.Linq.XContainer.ReplaceNodes(System.Object)\n  - System.Xml.Linq.XContainer.ReplaceNodes(System.Object[])\n  - System.Xml.Linq.XNode.AddAfterSelf(System.Object)\n  - System.Xml.Linq.XNode.AddAfterSelf(System.Object[])\n  - System.Xml.Linq.XNode.AddBeforeSelf(System.Object)\n  - System.Xml.Linq.XNode.AddBeforeSelf(System.Object[])\n  - System.Xml.Linq.XNode.Ancestors\n  - System.Xml.Linq.XNode.Ancestors(System.Xml.Linq.XName)\n  - System.Xml.Linq.XNode.CompareDocumentOrder(System.Xml.Linq.XNode,System.Xml.Linq.XNode)\n  - System.Xml.Linq.XNode.CreateReader\n  - System.Xml.Linq.XNode.CreateReader(System.Xml.Linq.ReaderOptions)\n  - System.Xml.Linq.XNode.DeepEquals(System.Xml.Linq.XNode,System.Xml.Linq.XNode)\n  - System.Xml.Linq.XNode.DocumentOrderComparer\n  - System.Xml.Linq.XNode.ElementsAfterSelf\n  - System.Xml.Linq.XNode.ElementsAfterSelf(System.Xml.Linq.XName)\n  - System.Xml.Linq.XNode.ElementsBeforeSelf\n  - System.Xml.Linq.XNode.ElementsBeforeSelf(System.Xml.Linq.XName)\n  - System.Xml.Linq.XNode.EqualityComparer\n  - System.Xml.Linq.XNode.IsAfter(System.Xml.Linq.XNode)\n  - System.Xml.Linq.XNode.IsBefore(System.Xml.Linq.XNode)\n  - System.Xml.Linq.XNode.NextNode\n  - System.Xml.Linq.XNode.NodesAfterSelf\n  - System.Xml.Linq.XNode.NodesBeforeSelf\n  - System.Xml.Linq.XNode.PreviousNode\n  - System.Xml.Linq.XNode.ReadFrom(System.Xml.XmlReader)\n  - System.Xml.Linq.XNode.ReadFromAsync(System.Xml.XmlReader,System.Threading.CancellationToken)\n  - System.Xml.Linq.XNode.Remove\n  - System.Xml.Linq.XNode.ReplaceWith(System.Object)\n  - System.Xml.Linq.XNode.ReplaceWith(System.Object[])\n  - System.Xml.Linq.XNode.ToString\n  - System.Xml.Linq.XNode.ToString(System.Xml.Linq.SaveOptions)\n  - System.Xml.Linq.XObject.AddAnnotation(System.Object)\n  - System.Xml.Linq.XObject.Annotation(System.Type)\n  - System.Xml.Linq.XObject.Annotation``1\n  - System.Xml.Linq.XObject.Annotations(System.Type)\n  - System.Xml.Linq.XObject.Annotations``1\n  - System.Xml.Linq.XObject.BaseUri\n  - System.Xml.Linq.XObject.Changed\n  - System.Xml.Linq.XObject.Changing\n  - System.Xml.Linq.XObject.Document\n  - System.Xml.Linq.XObject.Parent\n  - System.Xml.Linq.XObject.RemoveAnnotations(System.Type)\n  - System.Xml.Linq.XObject.RemoveAnnotations``1\n  - System.Xml.Linq.XObject.System#Xml#IXmlLineInfo#HasLineInfo\n  - System.Xml.Linq.XObject.System#Xml#IXmlLineInfo#LineNumber\n  - System.Xml.Linq.XObject.System#Xml#IXmlLineInfo#LinePosition\n  extensionMethods:\n  - System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XDocument,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler)\n  - System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XDocument,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler,System.Boolean)\n  - System.Xml.XPath.Extensions.CreateNavigator(System.Xml.Linq.XNode)\n  - System.Xml.XPath.Extensions.CreateNavigator(System.Xml.Linq.XNode,System.Xml.XmlNameTable)\n  - System.Xml.XPath.Extensions.XPathEvaluate(System.Xml.Linq.XNode,System.String)\n  - System.Xml.XPath.Extensions.XPathEvaluate(System.Xml.Linq.XNode,System.String,System.Xml.IXmlNamespaceResolver)\n  - System.Xml.XPath.Extensions.XPathSelectElement(System.Xml.Linq.XNode,System.String)\n  - System.Xml.XPath.Extensions.XPathSelectElement(System.Xml.Linq.XNode,System.String,System.Xml.IXmlNamespaceResolver)\n  - System.Xml.XPath.Extensions.XPathSelectElements(System.Xml.Linq.XNode,System.String)\n  - System.Xml.XPath.Extensions.XPathSelectElements(System.Xml.Linq.XNode,System.String,System.Xml.IXmlNamespaceResolver)\n  - System.Xml.XPath.XDocumentExtensions.ToXPathNavigable(System.Xml.Linq.XNode)\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XDocument.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XDocument.#ctor\n  commentId: M:System.Xml.Linq.XDocument.#ctor\n  id: '#ctor'\n  parent: System.Xml.Linq.XDocument\n  langs:\n  - csharp\n  name: XDocument()\n  nameWithType: XDocument.XDocument()\n  fullName: XDocument.XDocument()\n  type: Constructor\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Initializes a new instance of the <xref href=\"System.Xml.Linq.XDocument\"></xref> class.\n  remarks: \"There are not many scenarios that require you to create an <xref:System.Xml.Linq.XDocument>. Instead, you can usually create your XML trees with an <xref:System.Xml.Linq.XElement> root node. Unless you have a specific requirement to create a document (for example, because you have to create processing instructions and comments at the top level, or you have to support document types), it is often more convenient to use <xref:System.Xml.Linq.XElement> as your root node.  \\n  \\n For details about the valid content of an <xref:System.Xml.Linq.XDocument>, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).\"\n  example:\n  - \"The following example creates a new document, and then adds a comment and an element to it.  \\n  \\n```csharp  \\n  \\n                XDocument doc = new XDocument();  \\ndoc.Add(new XComment(\\\"This is a comment\\\"));  \\ndoc.Add(new XElement(\\\"Root\\\", \\\"content\\\"));  \\nConsole.WriteLine(doc);  \\n```  \\n  \\n```vb  \\n  \\n                Dim doc As XDocument = New XDocument()  \\ndoc.Add(<!--This is a comment-->)  \\ndoc.Add(<Root>content</Root>)  \\nConsole.WriteLine(doc)  \\n  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```xml  \\n  \\n                <!--This is a comment-->  \\n<Root>content</Root>  \\n```\"\n  syntax:\n    content: public XDocument ();\n    parameters: []\n  overload: System.Xml.Linq.XDocument.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XDocument.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XDocument.#ctor(System.Object[])\n  commentId: M:System.Xml.Linq.XDocument.#ctor(System.Object[])\n  id: '#ctor(System.Object[])'\n  parent: System.Xml.Linq.XDocument\n  langs:\n  - csharp\n  name: XDocument(Object[])\n  nameWithType: XDocument.XDocument(Object[])\n  fullName: XDocument.XDocument(Object[])\n  type: Constructor\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Initializes a new instance of the <xref href=\"System.Xml.Linq.XDocument\"></xref> class with the specified content.\n  remarks: \"There are not many scenarios that require you to create an <xref:System.Xml.Linq.XDocument>. Instead, you can usually create your XML trees with an <xref:System.Xml.Linq.XElement> root node. Unless you have a specific requirement to create a document (for example, because you have to create processing instructions and comments at the top level, or you have to support document types), it is often more convenient to use <xref:System.Xml.Linq.XElement> as your root node.  \\n  \\n For details about the valid content of an <xref:System.Xml.Linq.XDocument>, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).\"\n  example:\n  - \"The following example creates a document, and then adds a comment and an element to it. It then composes another document using the results of a query.  \\n  \\n```csharp  \\n  \\n                XDocument srcTree = new XDocument(  \\n    new XComment(\\\"This is a comment\\\"),  \\n    new XElement(\\\"Root\\\",  \\n        new XElement(\\\"Child1\\\", \\\"data1\\\"),  \\n        new XElement(\\\"Child2\\\", \\\"data2\\\"),  \\n        new XElement(\\\"Child3\\\", \\\"data3\\\"),  \\n        new XElement(\\\"Child2\\\", \\\"data4\\\"),  \\n        new XElement(\\\"Info5\\\", \\\"info5\\\"),  \\n        new XElement(\\\"Info6\\\", \\\"info6\\\"),  \\n        new XElement(\\\"Info7\\\", \\\"info7\\\"),  \\n        new XElement(\\\"Info8\\\", \\\"info8\\\")  \\n    )  \\n);  \\n  \\nXDocument doc = new XDocument(  \\n    new XComment(\\\"This is a comment\\\"),  \\n    new XElement(\\\"Root\\\",  \\n        from el in srcTree.Element(\\\"Root\\\").Elements()  \\n        where ((string)el).StartsWith(\\\"data\\\")  \\n        select el  \\n    )  \\n);  \\nConsole.WriteLine(doc);  \\n```  \\n  \\n```vb  \\n  \\n                Dim srcTree As XDocument = _  \\n    <?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" standalone=\\\"yes\\\"?>  \\n        <!--This is a comment-->  \\n        <Root>  \\n            <Child1>data1</Child1>  \\n            <Child2>data2</Child2>  \\n            <Child3>data3</Child3>  \\n            <Child2>data4</Child2>  \\n            <Info5>info5</Info5>  \\n            <Info6>info6</Info6>  \\n            <Info7>info7</Info7>  \\n            <Info8>info8</Info8>  \\n        </Root>  \\nDim doc As XDocument = _   \\n    <?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" standalone=\\\"yes\\\"?>  \\n        <!--This is a comment-->  \\n        <Root>  \\n            <%= From el In srcTree.<Root>.Elements _  \\n                Where CStr(el).StartsWith(\\\"data\\\") _  \\n                Select el %>  \\n        </Root>  \\nConsole.WriteLine(doc)  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```xml  \\n  \\n                <!--This is a comment-->  \\n<Root>  \\n  <Child1>data1</Child1>  \\n  <Child2>data2</Child2>  \\n  <Child3>data3</Child3>  \\n  <Child2>data4</Child2>  \\n</Root>  \\n```\"\n  syntax:\n    content: public XDocument (object[] content);\n    parameters:\n    - id: content\n      type: System.Object[]\n      description: A parameter list of content objects to add to this document.\n  overload: System.Xml.Linq.XDocument.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XDocument.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XDocument.#ctor(System.Xml.Linq.XDocument)\n  commentId: M:System.Xml.Linq.XDocument.#ctor(System.Xml.Linq.XDocument)\n  id: '#ctor(System.Xml.Linq.XDocument)'\n  parent: System.Xml.Linq.XDocument\n  langs:\n  - csharp\n  name: XDocument(XDocument)\n  nameWithType: XDocument.XDocument(XDocument)\n  fullName: XDocument.XDocument(XDocument)\n  type: Constructor\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Initializes a new instance of the <xref href=\"System.Xml.Linq.XDocument\"></xref> class from an existing <xref href=\"System.Xml.Linq.XDocument\"></xref> object.\n  remarks: \"You use this constructor to make a deep copy of an <xref:System.Xml.Linq.XDocument>.  \\n  \\n This constructor traverses all nodes and attributes in the document specified in the `other` parameter, and creates copies of all nodes as it assembles the newly initialized <xref:System.Xml.Linq.XDocument>.\"\n  syntax:\n    content: public XDocument (System.Xml.Linq.XDocument other);\n    parameters:\n    - id: other\n      type: System.Xml.Linq.XDocument\n      description: The <xref href=\"System.Xml.Linq.XDocument\"></xref> object that will be copied.\n  overload: System.Xml.Linq.XDocument.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XDocument.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XDocument.#ctor(System.Xml.Linq.XDeclaration,System.Object[])\n  commentId: M:System.Xml.Linq.XDocument.#ctor(System.Xml.Linq.XDeclaration,System.Object[])\n  id: '#ctor(System.Xml.Linq.XDeclaration,System.Object[])'\n  parent: System.Xml.Linq.XDocument\n  langs:\n  - csharp\n  name: XDocument(XDeclaration, Object[])\n  nameWithType: XDocument.XDocument(XDeclaration, Object[])\n  fullName: XDocument.XDocument(XDeclaration, Object[])\n  type: Constructor\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Initializes a new instance of the <xref href=\"System.Xml.Linq.XDocument\"></xref> class with the specified <xref href=\"System.Xml.Linq.XDeclaration\"></xref> and content.\n  remarks: \"There are not many scenarios that require you to create an <xref:System.Xml.Linq.XDocument>. Instead, you can usually create your XML trees with an <xref:System.Xml.Linq.XElement> root node. Unless you have a specific requirement to create a document (for example, because you have to create processing instructions and comments at the top level, or you have to support document types), it is often more convenient to use <xref:System.Xml.Linq.XElement> as your root node.  \\n  \\n For details about the valid content of an <xref:System.Xml.Linq.XDocument>, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).\"\n  example:\n  - \"The following example uses this constructor to create a document.  \\n  \\n```csharp  \\n  \\n                XDocument srcTree = new XDocument(  \\n    new XComment(\\\"This is a comment\\\"),  \\n    new XElement(\\\"Root\\\",  \\n        new XElement(\\\"Child1\\\", \\\"data1\\\"),  \\n        new XElement(\\\"Child2\\\", \\\"data2\\\"),  \\n        new XElement(\\\"Child3\\\", \\\"data3\\\"),  \\n        new XElement(\\\"Child2\\\", \\\"data4\\\"),  \\n        new XElement(\\\"Info5\\\", \\\"info5\\\"),  \\n        new XElement(\\\"Info6\\\", \\\"info6\\\"),  \\n        new XElement(\\\"Info7\\\", \\\"info7\\\"),  \\n        new XElement(\\\"Info8\\\", \\\"info8\\\")  \\n    )  \\n);  \\n  \\nXDocument doc = new XDocument(  \\n    new XDeclaration(\\\"1.0\\\", \\\"utf-8\\\", \\\"yes\\\"),  \\n    new XComment(\\\"This is a new comment\\\"),  \\n    new XElement(\\\"Root\\\",  \\n        from el in srcTree.Element(\\\"Root\\\").Elements()  \\n        where ((string)el).StartsWith(\\\"data\\\")  \\n        select el  \\n    )  \\n);  \\ndoc.Save(\\\"Test.xml\\\");  \\nConsole.WriteLine(File.ReadAllText(\\\"Test.xml\\\"));  \\n```  \\n  \\n```vb  \\n  \\n                Dim srcTree As XDocument = _   \\n    <?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" standalone=\\\"yes\\\"?>  \\n        <!--This is a comment-->  \\n        <Root>  \\n            <Child1>data1</Child1>  \\n            <Child2>data2</Child2>  \\n            <Child3>data3</Child3>  \\n            <Child2>data4</Child2>  \\n            <Info5>info5</Info5>  \\n            <Info6>info6</Info6>  \\n            <Info7>info7</Info7>  \\n            <Info8>info8</Info8>  \\n        </Root>  \\nDim doc As XDocument = _   \\n    <?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" standalone=\\\"yes\\\"?>  \\n        <!--This is a new comment-->  \\n        <Root>  \\n            <%= From el In srcTree.<Root>.Elements _  \\n                Where CStr(el).StartsWith(\\\"data\\\") _  \\n                Select el %>  \\n        </Root>  \\ndoc.Save(\\\"Test.xml\\\")  \\nConsole.WriteLine(File.ReadAllText(\\\"Test.xml\\\"))  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```xml  \\n  \\n                <?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" standalone=\\\"yes\\\"?>  \\n<!--This is a new comment-->  \\n<Root>  \\n  <Child1>data1</Child1>  \\n  <Child2>data2</Child2>  \\n  <Child3>data3</Child3>  \\n  <Child2>data4</Child2>  \\n</Root>  \\n```\"\n  syntax:\n    content: public XDocument (System.Xml.Linq.XDeclaration declaration, object[] content);\n    parameters:\n    - id: declaration\n      type: System.Xml.Linq.XDeclaration\n      description: An <xref href=\"System.Xml.Linq.XDeclaration\"></xref> for the document.\n    - id: content\n      type: System.Object[]\n      description: The content of the document.\n  overload: System.Xml.Linq.XDocument.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XDocument.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XDocument.Declaration\n  commentId: P:System.Xml.Linq.XDocument.Declaration\n  id: Declaration\n  parent: System.Xml.Linq.XDocument\n  langs:\n  - csharp\n  name: Declaration\n  nameWithType: XDocument.Declaration\n  fullName: XDocument.Declaration\n  type: Property\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Gets or sets the XML declaration for this document.\n  remarks: Sometimes you have to create an XML declaration for a document. If you want to indicate that a document is standalone, you must use this property. If you want to encode your document with an encoding other than utf-8, you can specify an encoding through the <xref:System.Xml.Linq.XDeclaration>. Another approach for encoding a document is to specify the encoding on an <xref:System.Xml.XmlWriter> that you pass to LINQ to XML for writing.\n  example:\n  - \"The following example uses this property to retrieve the XML declaration of a document.  \\n  \\n```csharp  \\n  \\n                XDocument doc = new XDocument(  \\n    new XDeclaration(\\\"1.0\\\", \\\"utf-8\\\", \\\"yes\\\"),  \\n    new XComment(\\\"This is a comment\\\"),  \\n    new XElement(\\\"Root\\\", \\\"content\\\")  \\n);  \\n  \\nConsole.WriteLine(doc.Declaration);  \\n```  \\n  \\n```vb  \\n  \\n                Dim doc As XDocument = _  \\n    <?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" standalone=\\\"yes\\\"?>  \\n        <!--This is a comment-->  \\n        <Root>content</Root>  \\n  \\nConsole.WriteLine(doc.Declaration)  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```  \\n  \\n<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" standalone=\\\"yes\\\"?>  \\n```\"\n  syntax:\n    content: public System.Xml.Linq.XDeclaration Declaration { get; set; }\n    return:\n      type: System.Xml.Linq.XDeclaration\n      description: An <xref href=\"System.Xml.Linq.XDeclaration\"></xref> that contains the XML declaration for this document.\n  overload: System.Xml.Linq.XDocument.Declaration*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XDocument.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XDocument.DocumentType\n  commentId: P:System.Xml.Linq.XDocument.DocumentType\n  id: DocumentType\n  parent: System.Xml.Linq.XDocument\n  langs:\n  - csharp\n  name: DocumentType\n  nameWithType: XDocument.DocumentType\n  fullName: XDocument.DocumentType\n  type: Property\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Gets the Document Type Definition (DTD) for this document.\n  remarks: \"[!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] provides limited support for DTDs.  \\n  \\n You can populate an XML tree with an XML document that contains a DTD. The XML tree will then contain a <xref:System.Xml.Linq.XDocument.DocumentType%2A> node. When you serialize or save the tree, the DTD will also be serialized. [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] will expand any entities in the DTD. When you serialize or save the XML tree, the entity references are not saved; instead, the nodes are saved with the entity references replaced by the text of the entity.  \\n  \\n If the DTD contains default attributes, the attributes are created in the XML tree as ordinary attributes.  \\n  \\n By default, [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] does not validate a document based on its DTD. To validate a document based on a DTD, create an <xref:System.Xml.XmlReader> that will validate based on a DTD, and then create an XML tree from the <xref:System.Xml.XmlReader>.\"\n  example:\n  - \"The following example creates a document that contains an <xref:System.Xml.Linq.XDocumentType>.  \\n  \\n Visual Basic does not support document types within XML literals. However, it is possible to create a document that contains a document type by first creating the document using XML literals, and then creating and adding an <xref:System.Xml.Linq.XDocumentType> node in the appropriate place in the XML tree.  \\n  \\n```csharp  \\n  \\n                string internalSubset = @\\\"<!ELEMENT Pubs (Book+)>  \\n<!ELEMENT Book (Title, Author)>  \\n<!ELEMENT Title (#PCDATA)>  \\n<!ELEMENT Author (#PCDATA)>\\\";  \\n  \\nstring target = \\\"xml-stylesheet\\\";  \\nstring data = \\\"href='mystyle.css' title='Compact' type='text/css'\\\";  \\n  \\nXDocument doc = new XDocument(  \\n    new XComment(\\\"This is a comment.\\\"),  \\n    new XProcessingInstruction(target, data),  \\n    new XDocumentType(\\\"Pubs\\\", null, null, internalSubset),  \\n    new XElement(\\\"Pubs\\\",   \\n        new XElement(\\\"Book\\\",  \\n            new XElement(\\\"Title\\\", \\\"Artifacts of Roman Civilization\\\"),  \\n            new XElement(\\\"Author\\\", \\\"Moreno, Jordao\\\")  \\n        ),  \\n        new XElement(\\\"Book\\\",  \\n            new XElement(\\\"Title\\\", \\\"Midieval Tools and Implements\\\"),  \\n            new XElement(\\\"Author\\\", \\\"Gazit, Inbar\\\")  \\n        )  \\n    ),  \\n    new XComment(\\\"This is another comment.\\\")  \\n);  \\ndoc.Declaration = new XDeclaration(\\\"1.0\\\", \\\"utf-8\\\", \\\"true\\\");  \\nConsole.WriteLine(doc);  \\n  \\ndoc.Save(\\\"test.xml\\\");  \\n```  \\n  \\n```vb  \\n  \\n                Dim internalSubset = _  \\n        \\\"<!ELEMENT Pubs (Book+)>\\\" & Environment.NewLine & _  \\n        \\\"<!ELEMENT Book (Title, Author)>\\\" & Environment.NewLine & _  \\n        \\\"<!ELEMENT Title (#PCDATA)>\\\" & Environment.NewLine & _  \\n        \\\"<!ELEMENT Author (#PCDATA)>\\\"  \\n  \\nDim doc As XDocument = _  \\n    <?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" standalone=\\\"yes\\\"?>  \\n    <!--This is a comment.-->  \\n    <?xml-stylesheet href='mystyle.css' title='Compact' type='text/css'?>  \\n    <Pubs>  \\n        <Book>  \\n            <Title>Artifacts of Roman Civilization</Title>  \\n            <Author>Moreno, Jordao</Author>  \\n        </Book>  \\n        <Book>  \\n            <Title>Midieval Tools and Implements</Title>  \\n            <Author>Gazit, Inbar</Author>  \\n        </Book>  \\n    </Pubs>  \\n    <!--This is another comment.-->  \\n  \\ndoc.Nodes().Skip(1).First().AddAfterSelf(New XDocumentType(\\\"Pubs\\\", Nothing, Nothing, internalSubset))  \\nConsole.WriteLine(doc)  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```xml  \\n  \\n                <!--This is a comment.-->  \\n<?xml-stylesheet href='mystyle.css' title='Compact' type='text/css'?>  \\n<!DOCTYPE Pubs [<!ELEMENT Pubs (Book+)>  \\n<!ELEMENT Book (Title, Author)>  \\n<!ELEMENT Title (#PCDATA)>  \\n<!ELEMENT Author (#PCDATA)>]>  \\n<Pubs>  \\n  <Book>  \\n    <Title>Artifacts of Roman Civilization</Title>  \\n    <Author>Moreno, Jordao</Author>  \\n  </Book>  \\n  <Book>  \\n    <Title>Midieval Tools and Implements</Title>  \\n    <Author>Gazit, Inbar</Author>  \\n  </Book>  \\n</Pubs>  \\n<!--This is another comment.-->  \\n```\"\n  syntax:\n    content: public System.Xml.Linq.XDocumentType DocumentType { get; }\n    return:\n      type: System.Xml.Linq.XDocumentType\n      description: A <xref href=\"System.Xml.Linq.XDocumentType\"></xref> that contains the DTD for this document.\n  overload: System.Xml.Linq.XDocument.DocumentType*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XDocument.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XDocument.Load(System.IO.Stream)\n  commentId: M:System.Xml.Linq.XDocument.Load(System.IO.Stream)\n  id: Load(System.IO.Stream)\n  parent: System.Xml.Linq.XDocument\n  langs:\n  - csharp\n  name: Load(Stream)\n  nameWithType: XDocument.Load(Stream)\n  fullName: XDocument.Load(Stream)\n  type: Method\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Creates a new <xref href=\"System.Xml.Linq.XDocument\"></xref> instance by using the specified stream.\n  remarks: \"If you want to control load options, use the <xref:System.Xml.Linq.XDocument.Load%2A> overload that takes <xref:System.Xml.Linq.LoadOptions> as a parameter.  \\n  \\n The loading functionality of LINQ to XML is built upon <xref:System.Xml.XmlReader>. Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.  \\n  \\n If you have to modify <xref:System.Xml.XmlReaderSettings>, follow these steps:  \\n  \\n1.  Create an <xref:System.Xml.XmlReader> by calling one of the <xref:System.Xml.XmlReader.Create%2A> overloads that take <xref:System.Xml.XmlReaderSettings> as a parameter.  \\n  \\n2.  Pass the <xref:System.Xml.XmlReader> to one of the <xref:System.Xml.Linq.XDocument.Load%2A> overloads of <xref:System.Xml.Linq.XDocument> that takes <xref:System.Xml.XmlReader> as a parameter.\"\n  syntax:\n    content: public static System.Xml.Linq.XDocument Load (System.IO.Stream stream);\n    parameters:\n    - id: stream\n      type: System.IO.Stream\n      description: The stream that contains the XML data.\n    return:\n      type: System.Xml.Linq.XDocument\n      description: An <xref href=\"System.Xml.Linq.XDocument\"></xref> object that reads the data that is contained in the stream.\n  overload: System.Xml.Linq.XDocument.Load*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XDocument.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XDocument.Load(System.IO.TextReader)\n  commentId: M:System.Xml.Linq.XDocument.Load(System.IO.TextReader)\n  id: Load(System.IO.TextReader)\n  parent: System.Xml.Linq.XDocument\n  langs:\n  - csharp\n  name: Load(TextReader)\n  nameWithType: XDocument.Load(TextReader)\n  fullName: XDocument.Load(TextReader)\n  type: Method\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Creates a new <xref href=\"System.Xml.Linq.XDocument\"></xref> from a <xref href=\"System.IO.TextReader\"></xref>.\n  remarks: LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>. Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.\n  example:\n  - \"The following example creates a document from a <xref:System.IO.StringReader>.  \\n  \\n```csharp  \\n  \\n                TextReader tr = new StringReader(\\\"<Root>Content</Root>\\\");  \\nXDocument doc = XDocument.Load(tr);  \\nConsole.WriteLine(doc);  \\n```  \\n  \\n```vb  \\n  \\n                Dim tr As TextReader = New StringReader(\\\"<Root>Content</Root>\\\")  \\nDim doc As XDocument = XDocument.Load(tr)  \\nConsole.WriteLine(doc)  \\n  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```xml  \\n  \\n<Root>Content</Root>  \\n```\"\n  syntax:\n    content: public static System.Xml.Linq.XDocument Load (System.IO.TextReader textReader);\n    parameters:\n    - id: textReader\n      type: System.IO.TextReader\n      description: A <xref href=\"System.IO.TextReader\"></xref> that contains the content for the <xref href=\"System.Xml.Linq.XDocument\"></xref>.\n    return:\n      type: System.Xml.Linq.XDocument\n      description: An <xref href=\"System.Xml.Linq.XDocument\"></xref> that contains the contents of the specified <xref href=\"System.IO.TextReader\"></xref>.\n  overload: System.Xml.Linq.XDocument.Load*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XDocument.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XDocument.Load(System.String)\n  commentId: M:System.Xml.Linq.XDocument.Load(System.String)\n  id: Load(System.String)\n  parent: System.Xml.Linq.XDocument\n  langs:\n  - csharp\n  name: Load(String)\n  nameWithType: XDocument.Load(String)\n  fullName: XDocument.Load(String)\n  type: Method\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Creates a new <xref href=\"System.Xml.Linq.XDocument\"></xref> from a file.\n  remarks: \"This method uses an underlying <xref:System.Xml.XmlReader> to read the XML into an XML tree.  \\n  \\n Use <xref:System.Xml.Linq.XDocument.Parse%2A> to create an <xref:System.Xml.Linq.XDocument> from a string that contains XML.  \\n  \\n LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>. Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.\"\n  example:\n  - \"The following example shows how to load an <xref:System.Xml.Linq.XDocument> from a file.  \\n  \\n This example uses the following XML document:  \\n  \\n [Sample XML File: Typical Purchase Order (LINQ to XML)](http://msdn.microsoft.com/library/0606c09f-6e43-4f8d-95c8-e8e2e08d2348)  \\n  \\n```csharp  \\n  \\n                XDocument doc = XDocument.Load(\\\"PurchaseOrder.xml\\\");  \\nConsole.WriteLine(doc);  \\n```  \\n  \\n```vb  \\n  \\n                Dim doc As XDocument = XDocument.Load(\\\"PurchaseOrder.xml\\\")  \\nConsole.WriteLine(doc)  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```  \\n  \\n                <PurchaseOrder PurchaseOrderNumber=\\\"99503\\\" OrderDate=\\\"1999-10-20\\\">  \\n  <Address Type=\\\"Shipping\\\">  \\n    <Name>Ellen Adams</Name>  \\n    <Street>123 Maple Street</Street>  \\n    <City>Mill Valley</City>  \\n    <State>CA</State>  \\n    <Zip>10999</Zip>  \\n    <Country>USA</Country>  \\n  </Address>  \\n  <Address Type=\\\"Billing\\\">  \\n    <Name>Tai Yee</Name>  \\n    <Street>8 Oak Avenue</Street>  \\n    <City>Old Town</City>  \\n    <State>PA</State>  \\n    <Zip>95819</Zip>  \\n    <Country>USA</Country>  \\n  </Address>  \\n  <DeliveryNotes>Please leave packages in shed by driveway.</DeliveryNotes>  \\n  <Items>  \\n    <Item PartNumber=\\\"872-AA\\\">  \\n      <ProductName>Lawnmower</ProductName>  \\n      <Quantity>1</Quantity>  \\n      <USPrice>148.95</USPrice>  \\n      <Comment>Confirm this is electric</Comment>  \\n    </Item>  \\n    <Item PartNumber=\\\"926-AA\\\">  \\n      <ProductName>Baby Monitor</ProductName>  \\n      <Quantity>2</Quantity>  \\n      <USPrice>39.98</USPrice>  \\n      <ShipDate>1999-05-21</ShipDate>  \\n    </Item>  \\n  </Items>  \\n</PurchaseOrder>  \\n```\"\n  syntax:\n    content: public static System.Xml.Linq.XDocument Load (string uri);\n    parameters:\n    - id: uri\n      type: System.String\n      description: A URI string that references the file to load into a new <xref href=\"System.Xml.Linq.XDocument\"></xref>.\n    return:\n      type: System.Xml.Linq.XDocument\n      description: An <xref href=\"System.Xml.Linq.XDocument\"></xref> that contains the contents of the specified file.\n  overload: System.Xml.Linq.XDocument.Load*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XDocument.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XDocument.Load(System.Xml.XmlReader)\n  commentId: M:System.Xml.Linq.XDocument.Load(System.Xml.XmlReader)\n  id: Load(System.Xml.XmlReader)\n  parent: System.Xml.Linq.XDocument\n  langs:\n  - csharp\n  name: Load(XmlReader)\n  nameWithType: XDocument.Load(XmlReader)\n  fullName: XDocument.Load(XmlReader)\n  type: Method\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Creates a new <xref href=\"System.Xml.Linq.XDocument\"></xref> from an <xref href=\"System.Xml.XmlReader\"></xref>.\n  remarks: \"One possible use for this method is to create a copy of a DOM document in a LINQ to XML tree. To do this, you create an <xref:System.Xml.XmlNodeReader> from a DOM document, and then use the <xref:System.Xml.XmlNodeReader> to create an <xref:System.Xml.Linq.XDocument>.  \\n  \\n LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>. Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.\"\n  example:\n  - \"The following example creates a DOM document, creates an <xref:System.Xml.XmlNodeReader> from the DOM document, creates an <xref:System.Xml.Linq.XDocument> using the <xref:System.Xml.XmlNodeReader>.  \\n  \\n```csharp  \\n  \\n                // Create a DOM document with some content.  \\nXmlDocument doc = new XmlDocument();  \\nXmlElement child = doc.CreateElement(\\\"Child\\\");  \\nchild.InnerText = \\\"child contents\\\";  \\nXmlElement root = doc.CreateElement(\\\"Root\\\");  \\nroot.AppendChild(child);  \\ndoc.AppendChild(root);  \\n  \\n// create a reader and move to the content  \\nusing (XmlNodeReader nodeReader = new XmlNodeReader(doc)) {  \\n    // the reader must be in the Interactive state in order to  \\n    // create a LINQ to XML tree from it.  \\n    nodeReader.MoveToContent();  \\n  \\n    XDocument xRoot = XDocument.Load(nodeReader);  \\n    Console.WriteLine(xRoot);  \\n}  \\n```  \\n  \\n```vb  \\n' Create a DOM document with some content.  \\nDim doc As XmlDocument = New XmlDocument()  \\nDim child As XmlElement = doc.CreateElement(\\\"Child\\\")  \\nchild.InnerText = \\\"child contents\\\"  \\nDim root As XmlElement = doc.CreateElement(\\\"Root\\\")  \\nroot.AppendChild(child)  \\ndoc.AppendChild(root)  \\n  \\n' create a reader and move to the content  \\nUsing nodeReader = New XmlNodeReader(doc)  \\n    ' the reader must be in the Interactive state in order to  \\n    ' create a LINQ to XML tree from it.  \\n    nodeReader.MoveToContent()  \\n  \\n    Dim xRoot As XDocument = XDocument.Load(nodeReader)  \\n    Console.WriteLine(xRoot)  \\nEnd Using  \\n  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```xml  \\n  \\n                <Root>  \\n  <Child>child contents</Child>  \\n</Root>  \\n```\"\n  syntax:\n    content: public static System.Xml.Linq.XDocument Load (System.Xml.XmlReader reader);\n    parameters:\n    - id: reader\n      type: System.Xml.XmlReader\n      description: A <xref href=\"System.Xml.XmlReader\"></xref> that contains the content for the <xref href=\"System.Xml.Linq.XDocument\"></xref>.\n    return:\n      type: System.Xml.Linq.XDocument\n      description: An <xref href=\"System.Xml.Linq.XDocument\"></xref> that contains the contents of the specified <xref href=\"System.Xml.XmlReader\"></xref>.\n  overload: System.Xml.Linq.XDocument.Load*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XDocument.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XDocument.Load(System.IO.Stream,System.Xml.Linq.LoadOptions)\n  commentId: M:System.Xml.Linq.XDocument.Load(System.IO.Stream,System.Xml.Linq.LoadOptions)\n  id: Load(System.IO.Stream,System.Xml.Linq.LoadOptions)\n  parent: System.Xml.Linq.XDocument\n  langs:\n  - csharp\n  name: Load(Stream, LoadOptions)\n  nameWithType: XDocument.Load(Stream, LoadOptions)\n  fullName: XDocument.Load(Stream, LoadOptions)\n  type: Method\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Creates a new <xref href=\"System.Xml.Linq.XDocument\"></xref> instance by using the specified stream, optionally preserving white space, setting the base URI, and retaining line information.\n  remarks: \"The loading functionality of LINQ to XML is built upon <xref:System.Xml.XmlReader>. Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.  \\n  \\n If you have to modify <xref:System.Xml.XmlReaderSettings>, follow these steps:  \\n  \\n1.  Create an <xref:System.Xml.XmlReader> by calling one of the <xref:System.Xml.XmlReader.Create%2A> overloads that takes <xref:System.Xml.XmlReaderSettings> as a parameter.  \\n  \\n2.  Pass the <xref:System.Xml.XmlReader> to one of the <xref:System.Xml.Linq.XDocument.Load%2A> overloads of <xref:System.Xml.Linq.XDocument> that takes <xref:System.Xml.XmlReader> as a parameter.\"\n  syntax:\n    content: public static System.Xml.Linq.XDocument Load (System.IO.Stream stream, System.Xml.Linq.LoadOptions options);\n    parameters:\n    - id: stream\n      type: System.IO.Stream\n      description: The stream containing the XML data.\n    - id: options\n      type: System.Xml.Linq.LoadOptions\n      description: A <xref href=\"System.Xml.Linq.LoadOptions\"></xref> that specifies whether to load base URI and line information.\n    return:\n      type: System.Xml.Linq.XDocument\n      description: An <xref href=\"System.Xml.Linq.XDocument\"></xref> object that reads the data that is contained in the stream.\n  overload: System.Xml.Linq.XDocument.Load*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XDocument.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XDocument.Load(System.IO.TextReader,System.Xml.Linq.LoadOptions)\n  commentId: M:System.Xml.Linq.XDocument.Load(System.IO.TextReader,System.Xml.Linq.LoadOptions)\n  id: Load(System.IO.TextReader,System.Xml.Linq.LoadOptions)\n  parent: System.Xml.Linq.XDocument\n  langs:\n  - csharp\n  name: Load(TextReader, LoadOptions)\n  nameWithType: XDocument.Load(TextReader, LoadOptions)\n  fullName: XDocument.Load(TextReader, LoadOptions)\n  type: Method\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Creates a new <xref href=\"System.Xml.Linq.XDocument\"></xref> from a <xref href=\"System.IO.TextReader\"></xref>, optionally preserving white space, setting the base URI, and retaining line information.\n  remarks: \"If the source XML is indented, setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` causes the reader to read all white space in the source XML. Nodes of type <xref:System.Xml.Linq.XText> are created for both significant and insignificant white space.  \\n  \\n If the source XML is indented, not setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` causes the reader to ignore all of the insignificant white space in the source XML. The XML tree is created without any text nodes for insignificant white space.  \\n  \\n If the source XML is not indented, setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` has no effect. Significant white space is still preserved, and there are no spans of insignificant white space that could cause the creation of more white space text nodes.  \\n  \\n For more information, see [Preserving White Space while Loading or Parsing XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).  \\n  \\n Use <xref:System.Xml.Linq.XDocument.Parse%2A> to create an <xref:System.Xml.Linq.XElement> from a string that contains XML.  \\n  \\n Setting <xref:System.Xml.Linq.LoadOptions.SetBaseUri> is not valid when loading from a <xref:System.IO.TextReader>.  \\n  \\n There is a performance penalty if you set the <xref:System.Xml.Linq.LoadOptions.SetLineInfo> flag.  \\n  \\n The line information is accurate immediately after loading the XML document. If you modify the XML tree after loading the document, the line information may become meaningless.  \\n  \\n LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>. Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.\"\n  example:\n  - \"The following example creates a document from a <xref:System.IO.StringReader>.  \\n  \\n```csharp  \\n  \\n                TextReader sr;  \\nint whiteSpaceNodes;  \\n  \\nsr = new StringReader(\\\"<Root> <Child> </Child> </Root>\\\");  \\nXDocument xmlTree1 = XDocument.Load(sr, LoadOptions.None);  \\nsr.Close();  \\nwhiteSpaceNodes = xmlTree1  \\n    .Element(\\\"Root\\\")  \\n    .DescendantNodesAndSelf()  \\n    .OfType<XText>()  \\n    .Where(tNode => tNode.ToString().Trim().Length == 0)  \\n    .Count();  \\nConsole.WriteLine(\\\"Count of white space nodes (not preserving whitespace): {0}\\\", whiteSpaceNodes);  \\n  \\nsr = new StringReader(\\\"<Root> <Child> </Child> </Root>\\\");  \\nXDocument xmlTree2 = XDocument.Load(sr, LoadOptions.PreserveWhitespace);  \\nsr.Close();  \\nwhiteSpaceNodes = xmlTree2  \\n    .Element(\\\"Root\\\")  \\n    .DescendantNodesAndSelf()  \\n    .OfType<XText>()  \\n    .Where(tNode => tNode.ToString().Trim().Length == 0)  \\n    .Count();  \\nConsole.WriteLine(\\\"Count of white space nodes (preserving whitespace): {0}\\\", whiteSpaceNodes);  \\n```  \\n  \\n```vb  \\n  \\n                Dim sr As TextReader  \\nDim whiteSpaceNodes As Integer  \\n  \\nsr = New StringReader(\\\"<Root> <Child> </Child> </Root>\\\")  \\nDim xmlTree1 As XDocument = XDocument.Load(sr, LoadOptions.None)  \\nsr.Close()  \\nwhiteSpaceNodes = xmlTree1 _  \\n              .Element(\\\"Root\\\") _  \\n              .DescendantNodesAndSelf() _  \\n              .OfType(Of XText)() _  \\n              .Where(Function(ByVal tNode As XNode) tNode. _  \\n                  ToString().Trim().Length = 0).Count()  \\nConsole.WriteLine(\\\"Count of white space nodes (not preserving whitespace): {0}\\\", whiteSpaceNodes)  \\n  \\nsr = New StringReader(\\\"<Root> <Child> </Child> </Root>\\\")  \\nDim xmlTree2 As XDocument = XDocument.Load(sr, LoadOptions.PreserveWhitespace)  \\nsr.Close()  \\nwhiteSpaceNodes = xmlTree2 _  \\n              .Element(\\\"Root\\\") _  \\n              .DescendantNodesAndSelf() _  \\n              .OfType(Of XText)() _  \\n              .Where(Function(ByVal tNode As XNode) tNode. _  \\n                  ToString().Trim().Length = 0).Count()  \\nConsole.WriteLine(\\\"Count of white space nodes (preserving whitespace): {0}\\\", whiteSpaceNodes)  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```  \\n  \\n                Count of white space nodes (not preserving whitespace): 0  \\nCount of white space nodes (preserving whitespace): 3  \\n```\"\n  syntax:\n    content: public static System.Xml.Linq.XDocument Load (System.IO.TextReader textReader, System.Xml.Linq.LoadOptions options);\n    parameters:\n    - id: textReader\n      type: System.IO.TextReader\n      description: A <xref href=\"System.IO.TextReader\"></xref> that contains the content for the <xref href=\"System.Xml.Linq.XDocument\"></xref>.\n    - id: options\n      type: System.Xml.Linq.LoadOptions\n      description: A <xref href=\"System.Xml.Linq.LoadOptions\"></xref> that specifies white space behavior, and whether to load base URI and line information.\n    return:\n      type: System.Xml.Linq.XDocument\n      description: An <xref href=\"System.Xml.Linq.XDocument\"></xref> that contains the XML that was read from the specified <xref href=\"System.IO.TextReader\"></xref>.\n  overload: System.Xml.Linq.XDocument.Load*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XDocument.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XDocument.Load(System.String,System.Xml.Linq.LoadOptions)\n  commentId: M:System.Xml.Linq.XDocument.Load(System.String,System.Xml.Linq.LoadOptions)\n  id: Load(System.String,System.Xml.Linq.LoadOptions)\n  parent: System.Xml.Linq.XDocument\n  langs:\n  - csharp\n  name: Load(String, LoadOptions)\n  nameWithType: XDocument.Load(String, LoadOptions)\n  fullName: XDocument.Load(String, LoadOptions)\n  type: Method\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Creates a new <xref href=\"System.Xml.Linq.XDocument\"></xref> from a file, optionally preserving white space, setting the base URI, and retaining line information.\n  remarks: \"If the source XML is indented, setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` causes the reader to read all white space in the source XML. Nodes of type <xref:System.Xml.Linq.XText> are created for both significant and insignificant white space.  \\n  \\n If the source XML is indented, not setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` causes the reader to ignore all of the insignificant white space in the source XML. The XML tree is created without any text nodes for insignificant white space.  \\n  \\n If the source XML is not indented, setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` has no effect. Significant white space is still preserved, and there are no spans of insignificant white space that could cause the creation of more white space text nodes.  \\n  \\n For more information, see [Preserving White Space while Loading or Parsing XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).  \\n  \\n Use <xref:System.Xml.Linq.XDocument.Parse%2A> to create an <xref:System.Xml.Linq.XDocument> from a string that contains XML.  \\n  \\n There is a performance penalty if you set the <xref:System.Xml.Linq.LoadOptions.SetBaseUri> and the <xref:System.Xml.Linq.LoadOptions.SetLineInfo> flags.  \\n  \\n The base URI and the line information are accurate immediately after loading the XML document. If you modify the XML tree after loading the document, the base URI and line information may become meaningless.  \\n  \\n LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>. Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.\"\n  example:\n  - \"The following example shows how to load an <xref:System.Xml.Linq.XDocument> from a file.  \\n  \\n This example uses the following XML document:  \\n  \\n [Sample XML File: Typical Purchase Order (LINQ to XML)](http://msdn.microsoft.com/library/0606c09f-6e43-4f8d-95c8-e8e2e08d2348)  \\n  \\n```csharp  \\n  \\n                XDocument doc1 = XDocument.Load(\\\"PurchaseOrder.xml\\\", LoadOptions.None);  \\nConsole.WriteLine(\\\"nodes if not preserving whitespace: {0}\\\", doc1.DescendantNodes().Count());  \\n  \\nXDocument doc2 = XDocument.Load(\\\"PurchaseOrder.xml\\\", LoadOptions.PreserveWhitespace);  \\nConsole.WriteLine(\\\"nodes if preserving whitespace: {0}\\\", doc2.DescendantNodes().Count());  \\n```  \\n  \\n```vb  \\n  \\n                Dim doc1 As XDocument = XDocument.Load(\\\"PurchaseOrder.xml\\\", LoadOptions.None)  \\nConsole.WriteLine(\\\"nodes if not preserving whitespace: {0}\\\", doc1.DescendantNodes().Count())  \\n  \\nDim doc2 As XDocument = XDocument.Load(\\\"PurchaseOrder.xml\\\", LoadOptions.PreserveWhitespace)  \\nConsole.WriteLine(\\\"nodes if preserving whitespace: {0}\\\", doc2.DescendantNodes().Count())  \\n  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```  \\n  \\n                nodes if not preserving whitespace: 48  \\nnodes if preserving whitespace: 82  \\n```\"\n  syntax:\n    content: public static System.Xml.Linq.XDocument Load (string uri, System.Xml.Linq.LoadOptions options);\n    parameters:\n    - id: uri\n      type: System.String\n      description: A URI string that references the file to load into a new <xref href=\"System.Xml.Linq.XDocument\"></xref>.\n    - id: options\n      type: System.Xml.Linq.LoadOptions\n      description: A <xref href=\"System.Xml.Linq.LoadOptions\"></xref> that specifies white space behavior, and whether to load base URI and line information.\n    return:\n      type: System.Xml.Linq.XDocument\n      description: An <xref href=\"System.Xml.Linq.XDocument\"></xref> that contains the contents of the specified file.\n  overload: System.Xml.Linq.XDocument.Load*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XDocument.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XDocument.Load(System.Xml.XmlReader,System.Xml.Linq.LoadOptions)\n  commentId: M:System.Xml.Linq.XDocument.Load(System.Xml.XmlReader,System.Xml.Linq.LoadOptions)\n  id: Load(System.Xml.XmlReader,System.Xml.Linq.LoadOptions)\n  parent: System.Xml.Linq.XDocument\n  langs:\n  - csharp\n  name: Load(XmlReader, LoadOptions)\n  nameWithType: XDocument.Load(XmlReader, LoadOptions)\n  fullName: XDocument.Load(XmlReader, LoadOptions)\n  type: Method\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Loads an <xref href=\"System.Xml.Linq.XDocument\"></xref> from an <xref href=\"System.Xml.XmlReader\"></xref>, optionally setting the base URI, and retaining line information.\n  remarks: \"By creating an <xref:System.Xml.XmlNodeReader> from a DOM document, and then using the <xref:System.Xml.XmlNodeReader> to create an <xref:System.Xml.Linq.XElement>, this method can be used to create a copy of a DOM document in a LINQ to XML tree.  \\n  \\n Use <xref:System.Xml.Linq.XDocument.Parse%2A> to create an <xref:System.Xml.Linq.XDocument> from a string that contains XML.  \\n  \\n Setting <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> is not valid when loading from a <xref:System.Xml.XmlReader>. The <xref:System.Xml.XmlReader> will be configured to either read whitespace or not. The LINQ to XML tree will be populated with the whitespace nodes that the reader surfaces. This will be the behavior regardless of whether <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> is set or not.  \\n  \\n The <xref:System.Xml.XmlReader> may have a valid base URI or not. If you set <xref:System.Xml.Linq.LoadOptions.SetBaseUri>, the base URI will be set in the XML tree from the base URI that is reported by the <xref:System.Xml.XmlReader>.  \\n  \\n The <xref:System.Xml.XmlReader> may have a valid line information or not. If you set <xref:System.Xml.Linq.LoadOptions.SetLineInfo>, the line information will be set in the XML tree from the line information that is reported by the <xref:System.Xml.XmlReader>.  \\n  \\n There is a performance penalty if you set the <xref:System.Xml.Linq.LoadOptions.SetLineInfo> flag.  \\n  \\n The line information is accurate immediately after loading the XML document. If you modify the XML tree after loading the document, the line information may become meaningless.  \\n  \\n LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>. Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.\"\n  example:\n  - \"The following example loads the line information that it loads from the <xref:System.Xml.XmlReader>. It then prints the line information.  \\n  \\n```csharp  \\n  \\n                string markup =  \\n@\\\"<Root>  \\n    <Child>  \\n        <GrandChild/>  \\n    </Child>  \\n</Root>\\\";  \\n  \\n// Create a reader and move to the content.  \\nusing (XmlReader nodeReader = XmlReader.Create(new StringReader(markup)))  \\n{  \\n    // the reader must be in the Interactive state in order to  \\n    // Create a LINQ to XML tree from it.  \\n    nodeReader.MoveToContent();  \\n  \\n    XDocument xRoot = XDocument.Load(nodeReader, LoadOptions.SetLineInfo);  \\n    Console.WriteLine(\\\"{0}{1}{2}\\\",  \\n        \\\"Element Name\\\".PadRight(20),  \\n        \\\"Line\\\".PadRight(5),  \\n        \\\"Position\\\");  \\n    Console.WriteLine(\\\"{0}{1}{2}\\\",  \\n        \\\"------------\\\".PadRight(20),  \\n        \\\"----\\\".PadRight(5),  \\n        \\\"--------\\\");  \\n    foreach (XElement e in xRoot.Elements(\\\"Root\\\").DescendantsAndSelf())  \\n        Console.WriteLine(\\\"{0}{1}{2}\\\",  \\n            (\\\"\\\".PadRight(e.Ancestors().Count() * 2) + e.Name).PadRight(20),  \\n            ((IXmlLineInfo)e).LineNumber.ToString().PadRight(5),  \\n            ((IXmlLineInfo)e).LinePosition);  \\n}  \\n```  \\n  \\n```vb  \\n  \\n                Dim markup As String = _  \\n    \\\"<Root>\\\" & Environment.NewLine & _  \\n    \\\"    <Child>\\\" & Environment.NewLine & _  \\n    \\\"        <GrandChild/>\\\" & Environment.NewLine & _  \\n    \\\"    </Child>\\\" & Environment.NewLine & _  \\n    \\\"</Root>\\\"  \\n  \\n' Create a reader and move to the content.  \\nUsing nodeReader As XmlReader = XmlReader.Create(New StringReader(markup))  \\n  \\n    ' The reader must be in the Interactive state in order to  \\n    ' create a LINQ to XML tree from it.  \\n    nodeReader.MoveToContent()  \\n  \\n    Dim xRoot As XDocument = XDocument.Load(nodeReader, LoadOptions.SetLineInfo)  \\n    Console.WriteLine(\\\"{0}{1}{2}\\\", _  \\n        \\\"Element Name\\\".PadRight(20), _  \\n        \\\"Line\\\".PadRight(5), _  \\n        \\\"Position\\\")  \\n    Console.WriteLine(\\\"{0}{1}{2}\\\", _  \\n        \\\"------------\\\".PadRight(20), _  \\n        \\\"----\\\".PadRight(5), _  \\n        \\\"--------\\\")  \\n    For Each e As XElement In xRoot.Elements(\\\"Root\\\").DescendantsAndSelf()  \\n        Console.WriteLine(\\\"{0}{1}{2}\\\", _  \\n            (\\\"\\\".PadRight(e.Ancestors().Count() * 2) & e.Name.ToString()).PadRight(20), _  \\n            (DirectCast(e, IXmlLineInfo)).LineNumber.ToString().PadRight(5), _  \\n            (DirectCast(e, IXmlLineInfo)).LinePosition)  \\n    Next  \\nEnd Using  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```  \\n  \\n                Element Name        Line Position  \\n------------        ---- --------  \\nRoot                1    2  \\n  Child             2    6  \\n    GrandChild      3    10  \\n```\"\n  syntax:\n    content: public static System.Xml.Linq.XDocument Load (System.Xml.XmlReader reader, System.Xml.Linq.LoadOptions options);\n    parameters:\n    - id: reader\n      type: System.Xml.XmlReader\n      description: A <xref href=\"System.Xml.XmlReader\"></xref> that will be read for the content of the <xref href=\"System.Xml.Linq.XDocument\"></xref>.\n    - id: options\n      type: System.Xml.Linq.LoadOptions\n      description: A <xref href=\"System.Xml.Linq.LoadOptions\"></xref> that specifies whether to load base URI and line information.\n    return:\n      type: System.Xml.Linq.XDocument\n      description: An <xref href=\"System.Xml.Linq.XDocument\"></xref> that contains the XML that was read from the specified <xref href=\"System.Xml.XmlReader\"></xref>.\n  overload: System.Xml.Linq.XDocument.Load*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XDocument.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XDocument.LoadAsync(System.IO.TextReader,System.Xml.Linq.LoadOptions,System.Threading.CancellationToken)\n  commentId: M:System.Xml.Linq.XDocument.LoadAsync(System.IO.TextReader,System.Xml.Linq.LoadOptions,System.Threading.CancellationToken)\n  id: LoadAsync(System.IO.TextReader,System.Xml.Linq.LoadOptions,System.Threading.CancellationToken)\n  parent: System.Xml.Linq.XDocument\n  langs:\n  - csharp\n  name: LoadAsync(TextReader, LoadOptions, CancellationToken)\n  nameWithType: XDocument.LoadAsync(TextReader, LoadOptions, CancellationToken)\n  fullName: XDocument.LoadAsync(TextReader, LoadOptions, CancellationToken)\n  type: Method\n  assemblies:\n  - System.Xml.XDocument\n  namespace: System.Xml.Linq\n  syntax:\n    content: public static System.Threading.Tasks.Task<System.Xml.Linq.XDocument> LoadAsync (System.IO.TextReader textReader, System.Xml.Linq.LoadOptions options, System.Threading.CancellationToken cancellationToken);\n    parameters:\n    - id: textReader\n      type: System.IO.TextReader\n      description: ''\n    - id: options\n      type: System.Xml.Linq.LoadOptions\n      description: ''\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: ''\n    return:\n      type: System.Threading.Tasks.Task{System.Xml.Linq.XDocument}\n      description: ''\n  overload: System.Xml.Linq.XDocument.LoadAsync*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XDocument.xml\n- uid: System.Xml.Linq.XDocument.LoadAsync(System.Xml.XmlReader,System.Xml.Linq.LoadOptions,System.Threading.CancellationToken)\n  commentId: M:System.Xml.Linq.XDocument.LoadAsync(System.Xml.XmlReader,System.Xml.Linq.LoadOptions,System.Threading.CancellationToken)\n  id: LoadAsync(System.Xml.XmlReader,System.Xml.Linq.LoadOptions,System.Threading.CancellationToken)\n  parent: System.Xml.Linq.XDocument\n  langs:\n  - csharp\n  name: LoadAsync(XmlReader, LoadOptions, CancellationToken)\n  nameWithType: XDocument.LoadAsync(XmlReader, LoadOptions, CancellationToken)\n  fullName: XDocument.LoadAsync(XmlReader, LoadOptions, CancellationToken)\n  type: Method\n  assemblies:\n  - System.Xml.XDocument\n  namespace: System.Xml.Linq\n  syntax:\n    content: public static System.Threading.Tasks.Task<System.Xml.Linq.XDocument> LoadAsync (System.Xml.XmlReader reader, System.Xml.Linq.LoadOptions options, System.Threading.CancellationToken cancellationToken);\n    parameters:\n    - id: reader\n      type: System.Xml.XmlReader\n      description: ''\n    - id: options\n      type: System.Xml.Linq.LoadOptions\n      description: ''\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: ''\n    return:\n      type: System.Threading.Tasks.Task{System.Xml.Linq.XDocument}\n      description: ''\n  overload: System.Xml.Linq.XDocument.LoadAsync*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XDocument.xml\n- uid: System.Xml.Linq.XDocument.LoadAsync(System.IO.Stream,System.Xml.Linq.LoadOptions,System.Threading.CancellationToken)\n  commentId: M:System.Xml.Linq.XDocument.LoadAsync(System.IO.Stream,System.Xml.Linq.LoadOptions,System.Threading.CancellationToken)\n  id: LoadAsync(System.IO.Stream,System.Xml.Linq.LoadOptions,System.Threading.CancellationToken)\n  parent: System.Xml.Linq.XDocument\n  langs:\n  - csharp\n  name: LoadAsync(Stream, LoadOptions, CancellationToken)\n  nameWithType: XDocument.LoadAsync(Stream, LoadOptions, CancellationToken)\n  fullName: XDocument.LoadAsync(Stream, LoadOptions, CancellationToken)\n  type: Method\n  assemblies:\n  - System.Xml.XDocument\n  namespace: System.Xml.Linq\n  syntax:\n    content: public static System.Threading.Tasks.Task<System.Xml.Linq.XDocument> LoadAsync (System.IO.Stream stream, System.Xml.Linq.LoadOptions options, System.Threading.CancellationToken cancellationToken);\n    parameters:\n    - id: stream\n      type: System.IO.Stream\n      description: ''\n    - id: options\n      type: System.Xml.Linq.LoadOptions\n      description: ''\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: ''\n    return:\n      type: System.Threading.Tasks.Task{System.Xml.Linq.XDocument}\n      description: ''\n  overload: System.Xml.Linq.XDocument.LoadAsync*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XDocument.xml\n- uid: System.Xml.Linq.XDocument.NodeType\n  commentId: P:System.Xml.Linq.XDocument.NodeType\n  id: NodeType\n  parent: System.Xml.Linq.XDocument\n  langs:\n  - csharp\n  name: NodeType\n  nameWithType: XDocument.NodeType\n  fullName: XDocument.NodeType\n  type: Property\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Gets the node type for this node.\n  remarks: Because all classes that derive from <xref:System.Xml.Linq.XObject> contain a <xref:System.Xml.Linq.XObject.NodeType%2A> property, you can write code that operates on collections of objects where the type of each is a subclass of <xref:System.Xml.Linq.XObject>. Your code can then test for the node type of each object in the collection.\n  example:\n  - \"The following example shows the use of this property.  \\n  \\n```csharp  \\n  \\n                // Note that this property uses XmlNodeType, which is in the System.Xml namespace.  \\nXDocument xmlTree = new XDocument(  \\n    new XDeclaration(\\\"1.0\\\", \\\"utf-8\\\", \\\"yes\\\"),  \\n    new XElement(\\\"Root\\\", \\\"content\\\")  \\n);  \\nConsole.WriteLine(xmlTree.NodeType);  \\n```  \\n  \\n```vb  \\n  \\n                ' Note that this property uses XmlNodeType, which is in the System.Xml namespace.  \\nDim xmlTree As XDocument = _  \\n    <?xml version='1.0' encoding='utf-8' standalone='yes'?>  \\n        <Root>content</Root>  \\nConsole.WriteLine(\\\"{0}\\\", xmlTree.NodeType)  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```  \\n  \\nDocument  \\n```\"\n  syntax:\n    content: public override System.Xml.XmlNodeType NodeType { get; }\n    return:\n      type: System.Xml.XmlNodeType\n      description: The node type. For <xref href=\"System.Xml.Linq.XDocument\"></xref> objects, this value is <xref href=\"System.Xml.XmlNodeType.Document\"></xref>.\n  overload: System.Xml.Linq.XDocument.NodeType*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XDocument.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XDocument.Parse(System.String)\n  commentId: M:System.Xml.Linq.XDocument.Parse(System.String)\n  id: Parse(System.String)\n  parent: System.Xml.Linq.XDocument\n  langs:\n  - csharp\n  name: Parse(String)\n  nameWithType: XDocument.Parse(String)\n  fullName: XDocument.Parse(String)\n  type: Method\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Creates a new <xref href=\"System.Xml.Linq.XDocument\"></xref> from a string.\n  remarks: \"This method does not preserve white space. If you want to preserve white space in the XML tree, use the overload of <xref:System.Xml.Linq.XDocument.Parse%2A> that takes <xref:System.Xml.Linq.LoadOptions> as a parameter.  \\n  \\n For more information, see [Preserving White Space while Loading or Parsing XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).  \\n  \\n LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>. Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.\"\n  example:\n  - \"The following example creates a string that contains XML. It then parses the string into an <xref:System.Xml.Linq.XDocument>.  \\n  \\n```csharp  \\n  \\n                string str =  \\n@\\\"<?xml version=\\\"\\\"1.0\\\"\\\"?>  \\n<!-- comment at the root level -->  \\n<Root>  \\n    <Child>Content</Child>  \\n</Root>\\\";  \\nXDocument doc = XDocument.Parse(str);  \\nConsole.WriteLine(doc);  \\n```  \\n  \\n```vb  \\n  \\n                Dim str As String = _  \\n    \\\"<?xml version= '1.0'?>\\\" & _  \\n    \\\"<!-- comment at the root level -->\\\" & _  \\n    \\\"<Root>\\\" & _  \\n    \\\"  <Child>Content</Child>\\\" & _  \\n    \\\"</Root>\\\"  \\n  \\nDim doc As XDocument = XDocument.Parse(str)  \\nConsole.WriteLine(doc)  \\n  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```xml  \\n  \\n                <!-- comment at the root level -->  \\n<Root>  \\n  <Child>Content</Child>  \\n</Root>  \\n```\"\n  syntax:\n    content: public static System.Xml.Linq.XDocument Parse (string text);\n    parameters:\n    - id: text\n      type: System.String\n      description: A string that contains XML.\n    return:\n      type: System.Xml.Linq.XDocument\n      description: An <xref href=\"System.Xml.Linq.XDocument\"></xref> populated from the string that contains XML.\n  overload: System.Xml.Linq.XDocument.Parse*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XDocument.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XDocument.Parse(System.String,System.Xml.Linq.LoadOptions)\n  commentId: M:System.Xml.Linq.XDocument.Parse(System.String,System.Xml.Linq.LoadOptions)\n  id: Parse(System.String,System.Xml.Linq.LoadOptions)\n  parent: System.Xml.Linq.XDocument\n  langs:\n  - csharp\n  name: Parse(String, LoadOptions)\n  nameWithType: XDocument.Parse(String, LoadOptions)\n  fullName: XDocument.Parse(String, LoadOptions)\n  type: Method\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Creates a new <xref href=\"System.Xml.Linq.XDocument\"></xref> from a string, optionally preserving white space, setting the base URI, and retaining line information.\n  remarks: \"If the source XML is indented, setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` causes the reader to read all white space in the source XML. Nodes of type <xref:System.Xml.Linq.XText> are created for both significant and insignificant white space.  \\n  \\n If the source XML is indented, not setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` causes the reader to ignore all of the insignificant white space in the source XML. The XML tree is created without any text nodes for insignificant white space.  \\n  \\n If the source XML is not indented, setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` has no effect. Significant white space is still preserved, and there are no spans of insignificant white space that could cause the creation of more white space text nodes.  \\n  \\n For more information, see [Preserving White Space while Loading or Parsing XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).  \\n  \\n Setting <xref:System.Xml.Linq.LoadOptions.SetBaseUri> is not valid when parsing from a <xref:System.String>.  \\n  \\n There is a performance penalty if you set the <xref:System.Xml.Linq.LoadOptions.SetLineInfo> flag.  \\n  \\n The line information is accurate immediately after loading the XML document. If you modify the XML tree after loading the document, the line information may become meaningless.  \\n  \\n LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>. Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.\"\n  example:\n  - \"The following example parses a string into an <xref:System.Xml.Linq.XDocument>.  \\n  \\n```csharp  \\n  \\n                string str =  \\n@\\\"<?xml version=\\\"\\\"1.0\\\"\\\"?>  \\n<!-- comment at the root level -->  \\n<Root>  \\n    <Child>Content</Child>  \\n</Root>\\\";  \\nXDocument doc1 = XDocument.Parse(str, LoadOptions.PreserveWhitespace);  \\nConsole.WriteLine(\\\"nodes when preserving whitespace: {0}\\\", doc1.DescendantNodes().Count());  \\nXDocument doc2 = XDocument.Parse(str, LoadOptions.None);  \\nConsole.WriteLine(\\\"nodes when not preserving whitespace: {0}\\\", doc2.DescendantNodes().Count());  \\n```  \\n  \\n```vb  \\n  \\n                Dim str As String = _  \\n\\\"<?xml version= '1.0'?>\\\" & Environment.NewLine & _  \\n\\\"<!-- comment at the root level -->\\\" & Environment.NewLine & _  \\n\\\"<Root>\\\" & Environment.NewLine & _  \\n\\\"    <Child>Content</Child>\\\"  & Environment.NewLine & _  \\n\\\"</Root>\\\"  \\n  \\nDim doc1 As XDocument = XDocument.Parse(str, LoadOptions.PreserveWhitespace)  \\nConsole.WriteLine(\\\"nodes when preserving whitespace: {0}\\\", doc1.DescendantNodes().Count())  \\nDim doc2 As XDocument = XDocument.Parse(str, LoadOptions.None)  \\nConsole.WriteLine(\\\"nodes when not preserving whitespace: {0}\\\", doc2.DescendantNodes().Count())  \\n  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```  \\n  \\n                nodes when preserving whitespace: 8  \\nnodes when not preserving whitespace: 4  \\n```\"\n  syntax:\n    content: public static System.Xml.Linq.XDocument Parse (string text, System.Xml.Linq.LoadOptions options);\n    parameters:\n    - id: text\n      type: System.String\n      description: A string that contains XML.\n    - id: options\n      type: System.Xml.Linq.LoadOptions\n      description: A <xref href=\"System.Xml.Linq.LoadOptions\"></xref> that specifies white space behavior, and whether to load base URI and line information.\n    return:\n      type: System.Xml.Linq.XDocument\n      description: An <xref href=\"System.Xml.Linq.XDocument\"></xref> populated from the string that contains XML.\n  overload: System.Xml.Linq.XDocument.Parse*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XDocument.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XDocument.Root\n  commentId: P:System.Xml.Linq.XDocument.Root\n  id: Root\n  parent: System.Xml.Linq.XDocument\n  langs:\n  - csharp\n  name: Root\n  nameWithType: XDocument.Root\n  fullName: XDocument.Root\n  type: Property\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Gets the root element of the XML Tree for this document.\n  remarks: This property is useful when you want to compose [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] queries in the same context as when composing them for a tree rooted in <xref:System.Xml.Linq.XElement>. See [Querying an XDocument vs. Querying an XElement](http://msdn.microsoft.com/library/d266f58d-f2f3-4668-b661-e716e658d13a) for more details.\n  example:\n  - \"The following example uses this property to get the root element of a document.  \\n  \\n```csharp  \\n  \\n                XDocument doc = new XDocument(  \\n    new XComment(\\\"This is a comment.\\\"),  \\n    new XElement(\\\"Pubs\\\",   \\n        new XElement(\\\"Book\\\",  \\n            new XElement(\\\"Title\\\", \\\"Artifacts of Roman Civilization\\\"),  \\n            new XElement(\\\"Author\\\", \\\"Moreno, Jordao\\\")  \\n        ),  \\n        new XElement(\\\"Book\\\",  \\n            new XElement(\\\"Title\\\", \\\"Midieval Tools and Implements\\\"),  \\n            new XElement(\\\"Author\\\", \\\"Gazit, Inbar\\\")  \\n        )  \\n    ),  \\n    new XComment(\\\"This is another comment.\\\")  \\n);  \\nConsole.WriteLine(doc.Root.Name.ToString());  \\n```  \\n  \\n```vb  \\n  \\n                Dim doc As XDocument = _  \\n    <?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" standalone=\\\"yes\\\"?>  \\n    <!--This is a comment.-->  \\n    <Pubs>  \\n        <Book>  \\n            <Title>Artifacts of Roman Civilization</Title>  \\n            <Author>Moreno, Jordao</Author>  \\n        </Book>  \\n        <Book>  \\n            <Title>Midieval Tools and Implements</Title>  \\n            <Author>Gazit, Inbar</Author>  \\n        </Book>  \\n        <!--This is another comment.-->  \\n    </Pubs>  \\n  \\nConsole.WriteLine(doc.Root.Name.ToString())  \\n  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```  \\n  \\nPubs  \\n```\"\n  syntax:\n    content: public System.Xml.Linq.XElement Root { get; }\n    return:\n      type: System.Xml.Linq.XElement\n      description: The root <xref href=\"System.Xml.Linq.XElement\"></xref> of the XML tree.\n  overload: System.Xml.Linq.XDocument.Root*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XDocument.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XDocument.Save(System.Xml.XmlWriter)\n  commentId: M:System.Xml.Linq.XDocument.Save(System.Xml.XmlWriter)\n  id: Save(System.Xml.XmlWriter)\n  parent: System.Xml.Linq.XDocument\n  langs:\n  - csharp\n  name: Save(XmlWriter)\n  nameWithType: XDocument.Save(XmlWriter)\n  fullName: XDocument.Save(XmlWriter)\n  type: Method\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Serialize this <xref href=\"System.Xml.Linq.XDocument\"></xref> to an <xref href=\"System.Xml.XmlWriter\"></xref>.\n  remarks: ''\n  example:\n  - \"The following example shows how to save an <xref:System.Xml.Linq.XDocument> to an <xref:System.Xml.XmlWriter>.  \\n  \\n```csharp  \\n  \\n                StringBuilder sb = new StringBuilder();  \\nXmlWriterSettings xws = new XmlWriterSettings();  \\nxws.OmitXmlDeclaration = true;  \\nxws.Indent = true;  \\n  \\nusing (XmlWriter xw = XmlWriter.Create(sb, xws)) {  \\n    XDocument doc = new XDocument(  \\n        new XElement(\\\"Child\\\",  \\n            new XElement(\\\"GrandChild\\\", \\\"some content\\\")  \\n        )  \\n    );  \\n    doc.Save(xw);  \\n}  \\n  \\nConsole.WriteLine(sb.ToString());  \\n```  \\n  \\n```vb  \\n  \\n                Dim sb As StringBuilder = New StringBuilder()  \\nDim xws As XmlWriterSettings = New XmlWriterSettings()  \\nxws.OmitXmlDeclaration = True  \\nxws.Indent = True  \\n  \\nUsing xw = XmlWriter.Create(sb, xws)  \\n    Dim doc As XDocument = New XDocument(<Child><GrandChild>some content</GrandChild></Child>)  \\n    doc.Save(xw)  \\n  \\nEnd Using  \\n  \\nConsole.WriteLine(sb.ToString())  \\n  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```xml  \\n  \\n                <Child>  \\n  <GrandChild>some content</GrandChild>  \\n</Child>  \\n```\"\n  syntax:\n    content: public void Save (System.Xml.XmlWriter writer);\n    parameters:\n    - id: writer\n      type: System.Xml.XmlWriter\n      description: A <xref href=\"System.Xml.XmlWriter\"></xref> that the <xref href=\"System.Xml.Linq.XDocument\"></xref> will be written to.\n  overload: System.Xml.Linq.XDocument.Save*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XDocument.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XDocument.Save(System.IO.Stream)\n  commentId: M:System.Xml.Linq.XDocument.Save(System.IO.Stream)\n  id: Save(System.IO.Stream)\n  parent: System.Xml.Linq.XDocument\n  langs:\n  - csharp\n  name: Save(Stream)\n  nameWithType: XDocument.Save(Stream)\n  fullName: XDocument.Save(Stream)\n  type: Method\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Outputs this <xref href=\"System.Xml.Linq.XDocument\"></xref> to the specified <xref href=\"System.IO.Stream\"></xref>.\n  remarks: \"The serialized XML will be indented. All insignificant white space will be removed, and additional white space will be added so that the XML will be properly indented. The behavior of this method is that insignificant white space will not be preserved.  \\n  \\n If you want to control white space, use the overload of <xref:System.Xml.Linq.XDocument.Save%2A> that takes <xref:System.Xml.Linq.SaveOptions> as a parameter. Use the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> option to save unindented XML. This will cause the writer to write all white spaces exactly as represented in the XML tree.  \\n  \\n Use <xref:System.Xml.Linq.SaveOptions.OmitDuplicateNamespaces> option if you want to remove duplicate namespace declarations.\"\n  syntax:\n    content: public void Save (System.IO.Stream stream);\n    parameters:\n    - id: stream\n      type: System.IO.Stream\n      description: The stream to output this <xref href=\"System.Xml.Linq.XDocument\"></xref> to.\n  overload: System.Xml.Linq.XDocument.Save*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XDocument.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XDocument.Save(System.IO.TextWriter)\n  commentId: M:System.Xml.Linq.XDocument.Save(System.IO.TextWriter)\n  id: Save(System.IO.TextWriter)\n  parent: System.Xml.Linq.XDocument\n  langs:\n  - csharp\n  name: Save(TextWriter)\n  nameWithType: XDocument.Save(TextWriter)\n  fullName: XDocument.Save(TextWriter)\n  type: Method\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Serialize this <xref href=\"System.Xml.Linq.XDocument\"></xref> to a <xref href=\"System.IO.TextWriter\"></xref>.\n  remarks: \"The serialized XML will be indented. All insignificant white space will be removed, and additional white space will be added so that the XML will be properly indented. The behavior of this method is that insignificant white space will not be preserved.  \\n  \\n If you want to control white space, use the overload of <xref:System.Xml.Linq.XDocument.Save%2A> that takes <xref:System.Xml.Linq.SaveOptions> as a parameter. For more information, see [Preserving White Space while Loading or Parsing XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).\"\n  example:\n  - \"The following example creates an <xref:System.Xml.Linq.XDocument>, saves the document to a <xref:System.IO.StringWriter>, and then prints the string to the console.  \\n  \\n```csharp  \\n  \\n                StringBuilder sb = new StringBuilder();  \\n  \\nXDocument doc = new XDocument(  \\n    new XElement(\\\"Root\\\",  \\n        new XElement(\\\"Child\\\", \\\"content\\\")  \\n    )  \\n);  \\nTextWriter tr = new StringWriter(sb);  \\ndoc.Save(tr);  \\nConsole.WriteLine(sb.ToString());  \\n```  \\n  \\n```vb  \\n  \\n                Dim sb As StringBuilder = New StringBuilder()  \\n  \\nDim doc As XDocument = _   \\n    <?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>  \\n        <Root><Child>content</Child></Root>  \\n  \\nDim tr As TextWriter = New StringWriter(sb)  \\ndoc.Save(tr)  \\nConsole.WriteLine(sb.ToString())  \\n  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```xml  \\n  \\n                <?xml version=\\\"1.0\\\" encoding=\\\"utf-16\\\"?>  \\n<Root>  \\n  <Child>content</Child>  \\n</Root>  \\n```\"\n  syntax:\n    content: public void Save (System.IO.TextWriter textWriter);\n    parameters:\n    - id: textWriter\n      type: System.IO.TextWriter\n      description: A <xref href=\"System.IO.TextWriter\"></xref> that the <xref href=\"System.Xml.Linq.XDocument\"></xref> will be written to.\n  overload: System.Xml.Linq.XDocument.Save*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XDocument.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XDocument.Save(System.String)\n  commentId: M:System.Xml.Linq.XDocument.Save(System.String)\n  id: Save(System.String)\n  parent: System.Xml.Linq.XDocument\n  langs:\n  - csharp\n  name: Save(String)\n  nameWithType: XDocument.Save(String)\n  fullName: XDocument.Save(String)\n  type: Method\n  assemblies:\n  - System.Xml.Linq\n  - netstandard\n  - System.Xml.XDocument\n  namespace: System.Xml.Linq\n  summary: Serialize this <xref href=\"System.Xml.Linq.XDocument\"></xref> to a file, overwriting an existing file, if it exists.\n  remarks: \"The serialized XML will be indented. All insignificant white space will be removed, and additional white space will be added so that the XML will be properly indented. The behavior of this method is that insignificant white space will not be preserved.  \\n  \\n If you want to control white space, use the overload of <xref:System.Xml.Linq.XDocument.Save%2A> that takes <xref:System.Xml.Linq.SaveOptions> as a parameter. For more information, see [Preserving White Space while Loading or Parsing XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).\"\n  example:\n  - \"The following example creates an <xref:System.Xml.Linq.XDocument>, saves the document to a file, and then prints the file to the console.  \\n  \\n```csharp  \\n  \\n                XDocument doc = new XDocument(  \\n    new XElement(\\\"Root\\\",  \\n        new XElement(\\\"Child\\\", \\\"content\\\")  \\n    )  \\n);  \\ndoc.Save(\\\"Root.xml\\\");  \\nConsole.WriteLine(File.ReadAllText(\\\"Root.xml\\\"));  \\n```  \\n  \\n```vb  \\n  \\n                Dim doc As XDocument = _   \\n    <?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>  \\n        <Root><Child>content</Child></Root>  \\n  \\ndoc.Save(\\\"Root.xml\\\")  \\nConsole.WriteLine(File.ReadAllText(\\\"Root.xml\\\"))  \\n  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```xml  \\n  \\n                <?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>  \\n<Root>  \\n  <Child>content</Child>  \\n</Root>  \\n```\"\n  syntax:\n    content: public void Save (string fileName);\n    parameters:\n    - id: fileName\n      type: System.String\n      description: A string that contains the name of the file.\n  overload: System.Xml.Linq.XDocument.Save*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XDocument.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XDocument.Save(System.IO.Stream,System.Xml.Linq.SaveOptions)\n  commentId: M:System.Xml.Linq.XDocument.Save(System.IO.Stream,System.Xml.Linq.SaveOptions)\n  id: Save(System.IO.Stream,System.Xml.Linq.SaveOptions)\n  parent: System.Xml.Linq.XDocument\n  langs:\n  - csharp\n  name: Save(Stream, SaveOptions)\n  nameWithType: XDocument.Save(Stream, SaveOptions)\n  fullName: XDocument.Save(Stream, SaveOptions)\n  type: Method\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Outputs this <xref href=\"System.Xml.Linq.XDocument\"></xref> to the specified <xref href=\"System.IO.Stream\"></xref>, optionally specifying formatting behavior.\n  remarks: \"By default the `options` are set to <xref:System.Xml.Linq.SaveOptions.None>. This option will remove all extraneous insignificant white space, and add appropriate insignificant white space so that the XML is properly indented.  \\n  \\n If you want to save unindented XML, specify the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> flag for `options`. This will cause the writer to write all white spaces exactly as represented in the XML tree.  \\n  \\n Use <xref:System.Xml.Linq.SaveOptions.OmitDuplicateNamespaces> option if you want to remove duplicate namespace declarations.\"\n  syntax:\n    content: public void Save (System.IO.Stream stream, System.Xml.Linq.SaveOptions options);\n    parameters:\n    - id: stream\n      type: System.IO.Stream\n      description: The stream to output this <xref href=\"System.Xml.Linq.XDocument\"></xref> to.\n    - id: options\n      type: System.Xml.Linq.SaveOptions\n      description: A <xref href=\"System.Xml.Linq.SaveOptions\"></xref> that specifies formatting behavior.\n  overload: System.Xml.Linq.XDocument.Save*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XDocument.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XDocument.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)\n  commentId: M:System.Xml.Linq.XDocument.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)\n  id: Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)\n  parent: System.Xml.Linq.XDocument\n  langs:\n  - csharp\n  name: Save(TextWriter, SaveOptions)\n  nameWithType: XDocument.Save(TextWriter, SaveOptions)\n  fullName: XDocument.Save(TextWriter, SaveOptions)\n  type: Method\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Serialize this <xref href=\"System.Xml.Linq.XDocument\"></xref> to a <xref href=\"System.IO.TextWriter\"></xref>, optionally disabling formatting.\n  remarks: \"If you want to save unindented XML, specify the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> flag for `options`. This will cause the writer to write all white space exactly as represented in the XML tree.  \\n  \\n If you want to save indented XML, do not specify the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> flag for `options`. This will remove all extraneous insignificant white space, and add appropriate insignificant white space so that the XML is properly indented. This is the default behavior, and the behavior of the overloads of the <xref:System.Xml.Linq.XDocument.Save%2A> methods that do not take `options` as a parameter.  \\n  \\n For more information, see [Preserving White Space while Loading or Parsing XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).\"\n  example:\n  - \"The following example shows two uses of this method. The first use serializes the <xref:System.Xml.Linq.XDocument> with formatting. The second preserves white space. Because the document has no white space in it as constructed, preserving white space outputs the XML without any indenting.  \\n  \\n```csharp  \\n  \\n                XDocument doc = new XDocument(  \\n    new XElement(\\\"Root\\\",  \\n        new XElement(\\\"Child\\\", \\\"content\\\")  \\n    )  \\n);  \\nStringBuilder sb1 = new StringBuilder();  \\nusing (StringWriter sr1 = new StringWriter(sb1)) {  \\n    doc.Save(sr1, SaveOptions.None);  \\n    Console.WriteLine(sb1.ToString());  \\n}  \\n  \\nStringBuilder sb2 = new StringBuilder();  \\nusing (StringWriter sr2 = new StringWriter(sb2)) {  \\n    doc.Save(sr2, SaveOptions.DisableFormatting);  \\n    Console.WriteLine(sb2.ToString());  \\n}  \\n```  \\n  \\n```vb  \\n  \\n                Dim doc As XDocument = _   \\n    <?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>  \\n        <Root><Child>content</Child></Root>  \\n  \\nDim sb1 As StringBuilder = New StringBuilder()  \\n  \\nUsing sr1 = New StringWriter(sb1)  \\n    doc.Save(sr1, SaveOptions.None)  \\n    Console.WriteLine(sb1.ToString())  \\nEnd Using  \\n  \\nDim sb2 As StringBuilder = New StringBuilder()  \\n  \\nUsing sr2 = New StringWriter(sb2)  \\n    doc.Save(sr2, SaveOptions.DisableFormatting)  \\n    Console.WriteLine(sb2.ToString())  \\nEnd Using  \\n  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```  \\n  \\n                <?xml version=\\\"1.0\\\" encoding=\\\"utf-16\\\"?>  \\n<Root>  \\n  <Child>content</Child>  \\n</Root>  \\n<?xml version=\\\"1.0\\\" encoding=\\\"utf-16\\\"?><Root><Child>content</Child></Root>  \\n```\"\n  syntax:\n    content: public void Save (System.IO.TextWriter textWriter, System.Xml.Linq.SaveOptions options);\n    parameters:\n    - id: textWriter\n      type: System.IO.TextWriter\n      description: The <xref href=\"System.IO.TextWriter\"></xref> to output the XML to.\n    - id: options\n      type: System.Xml.Linq.SaveOptions\n      description: A <xref href=\"System.Xml.Linq.SaveOptions\"></xref> that specifies formatting behavior.\n  overload: System.Xml.Linq.XDocument.Save*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XDocument.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XDocument.Save(System.String,System.Xml.Linq.SaveOptions)\n  commentId: M:System.Xml.Linq.XDocument.Save(System.String,System.Xml.Linq.SaveOptions)\n  id: Save(System.String,System.Xml.Linq.SaveOptions)\n  parent: System.Xml.Linq.XDocument\n  langs:\n  - csharp\n  name: Save(String, SaveOptions)\n  nameWithType: XDocument.Save(String, SaveOptions)\n  fullName: XDocument.Save(String, SaveOptions)\n  type: Method\n  assemblies:\n  - System.Xml.Linq\n  - netstandard\n  - System.Xml.XDocument\n  namespace: System.Xml.Linq\n  summary: Serialize this <xref href=\"System.Xml.Linq.XDocument\"></xref> to a file, optionally disabling formatting.\n  remarks: \"If you want to save unindented XML, specify the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> flag for `options`. This will cause the writer to write all white space exactly as represented in the XML tree.  \\n  \\n If you want to save indented XML, do not specify the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> flag for `options`. This will remove all extraneous insignificant white space, and add appropriate insignificant white space so that the XML is properly indented. This is the default behavior, and the behavior of the overloads of the <xref:System.Xml.Linq.XDocument.Save%2A> methods that do not take `options` as a parameter.  \\n  \\n For more information, see [Preserving White Space while Loading or Parsing XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).\"\n  example:\n  - \"The following example shows two uses of this method. The first use preserves white space. The second one serializes the <xref:System.Xml.Linq.XDocument> with indenting.  \\n  \\n```csharp  \\n  \\n                XDocument doc = new XDocument(  \\n    new XElement(\\\"Root\\\",  \\n        new XElement(\\\"Child\\\", \\\"content\\\")  \\n    )  \\n);  \\ndoc.Save(\\\"Root1.xml\\\", SaveOptions.DisableFormatting);  \\nConsole.WriteLine(File.ReadAllText(\\\"Root1.xml\\\"));  \\ndoc.Save(\\\"Root2.xml\\\", SaveOptions.None);  \\nConsole.WriteLine(File.ReadAllText(\\\"Root2.xml\\\"));  \\n```  \\n  \\n```vb  \\n  \\n                Dim doc As XDocument = _   \\n    <?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>  \\n        <Root><Child>content</Child></Root>  \\n  \\ndoc.Save(\\\"Root1.xml\\\", SaveOptions.DisableFormatting)  \\nConsole.WriteLine(File.ReadAllText(\\\"Root1.xml\\\"))  \\ndoc.Save(\\\"Root2.xml\\\", SaveOptions.None)  \\nConsole.WriteLine(File.ReadAllText(\\\"Root2.xml\\\"))  \\n  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```  \\n  \\n                <?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?><Root><Child>content</Child></Root>  \\n<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>  \\n<Root>  \\n  <Child>content</Child>  \\n</Root>  \\n```\"\n  syntax:\n    content: public void Save (string fileName, System.Xml.Linq.SaveOptions options);\n    parameters:\n    - id: fileName\n      type: System.String\n      description: A string that contains the name of the file.\n    - id: options\n      type: System.Xml.Linq.SaveOptions\n      description: A <xref href=\"System.Xml.Linq.SaveOptions\"></xref> that specifies formatting behavior.\n  overload: System.Xml.Linq.XDocument.Save*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XDocument.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XDocument.SaveAsync(System.Xml.XmlWriter,System.Threading.CancellationToken)\n  commentId: M:System.Xml.Linq.XDocument.SaveAsync(System.Xml.XmlWriter,System.Threading.CancellationToken)\n  id: SaveAsync(System.Xml.XmlWriter,System.Threading.CancellationToken)\n  parent: System.Xml.Linq.XDocument\n  langs:\n  - csharp\n  name: SaveAsync(XmlWriter, CancellationToken)\n  nameWithType: XDocument.SaveAsync(XmlWriter, CancellationToken)\n  fullName: XDocument.SaveAsync(XmlWriter, CancellationToken)\n  type: Method\n  assemblies:\n  - System.Xml.XDocument\n  namespace: System.Xml.Linq\n  syntax:\n    content: public System.Threading.Tasks.Task SaveAsync (System.Xml.XmlWriter writer, System.Threading.CancellationToken cancellationToken);\n    parameters:\n    - id: writer\n      type: System.Xml.XmlWriter\n      description: ''\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: ''\n    return:\n      type: System.Threading.Tasks.Task\n      description: ''\n  overload: System.Xml.Linq.XDocument.SaveAsync*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XDocument.xml\n- uid: System.Xml.Linq.XDocument.SaveAsync(System.IO.Stream,System.Xml.Linq.SaveOptions,System.Threading.CancellationToken)\n  commentId: M:System.Xml.Linq.XDocument.SaveAsync(System.IO.Stream,System.Xml.Linq.SaveOptions,System.Threading.CancellationToken)\n  id: SaveAsync(System.IO.Stream,System.Xml.Linq.SaveOptions,System.Threading.CancellationToken)\n  parent: System.Xml.Linq.XDocument\n  langs:\n  - csharp\n  name: SaveAsync(Stream, SaveOptions, CancellationToken)\n  nameWithType: XDocument.SaveAsync(Stream, SaveOptions, CancellationToken)\n  fullName: XDocument.SaveAsync(Stream, SaveOptions, CancellationToken)\n  type: Method\n  assemblies:\n  - System.Xml.XDocument\n  namespace: System.Xml.Linq\n  syntax:\n    content: public System.Threading.Tasks.Task SaveAsync (System.IO.Stream stream, System.Xml.Linq.SaveOptions options, System.Threading.CancellationToken cancellationToken);\n    parameters:\n    - id: stream\n      type: System.IO.Stream\n      description: ''\n    - id: options\n      type: System.Xml.Linq.SaveOptions\n      description: ''\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: ''\n    return:\n      type: System.Threading.Tasks.Task\n      description: ''\n  overload: System.Xml.Linq.XDocument.SaveAsync*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XDocument.xml\n- uid: System.Xml.Linq.XDocument.SaveAsync(System.IO.TextWriter,System.Xml.Linq.SaveOptions,System.Threading.CancellationToken)\n  commentId: M:System.Xml.Linq.XDocument.SaveAsync(System.IO.TextWriter,System.Xml.Linq.SaveOptions,System.Threading.CancellationToken)\n  id: SaveAsync(System.IO.TextWriter,System.Xml.Linq.SaveOptions,System.Threading.CancellationToken)\n  parent: System.Xml.Linq.XDocument\n  langs:\n  - csharp\n  name: SaveAsync(TextWriter, SaveOptions, CancellationToken)\n  nameWithType: XDocument.SaveAsync(TextWriter, SaveOptions, CancellationToken)\n  fullName: XDocument.SaveAsync(TextWriter, SaveOptions, CancellationToken)\n  type: Method\n  assemblies:\n  - System.Xml.XDocument\n  namespace: System.Xml.Linq\n  syntax:\n    content: public System.Threading.Tasks.Task SaveAsync (System.IO.TextWriter textWriter, System.Xml.Linq.SaveOptions options, System.Threading.CancellationToken cancellationToken);\n    parameters:\n    - id: textWriter\n      type: System.IO.TextWriter\n      description: ''\n    - id: options\n      type: System.Xml.Linq.SaveOptions\n      description: ''\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: ''\n    return:\n      type: System.Threading.Tasks.Task\n      description: ''\n  overload: System.Xml.Linq.XDocument.SaveAsync*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XDocument.xml\n- uid: System.Xml.Linq.XDocument.WriteTo(System.Xml.XmlWriter)\n  commentId: M:System.Xml.Linq.XDocument.WriteTo(System.Xml.XmlWriter)\n  id: WriteTo(System.Xml.XmlWriter)\n  parent: System.Xml.Linq.XDocument\n  langs:\n  - csharp\n  name: WriteTo(XmlWriter)\n  nameWithType: XDocument.WriteTo(XmlWriter)\n  fullName: XDocument.WriteTo(XmlWriter)\n  type: Method\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Write this document to an <xref href=\"System.Xml.XmlWriter\"></xref>.\n  remarks: ''\n  example:\n  - \"The following example shows how to write an <xref:System.Xml.Linq.XDocument> to an <xref:System.Xml.XmlWriter>. Note that the example did not write an XML declaration.  \\n  \\n```csharp  \\n  \\n                StringBuilder sb = new StringBuilder();  \\nXmlWriterSettings xws = new XmlWriterSettings();  \\nxws.OmitXmlDeclaration = true;  \\nxws.Indent = true;  \\n  \\nusing (XmlWriter xw = XmlWriter.Create(sb, xws))  \\n{  \\n    XDocument doc = new XDocument(  \\n        new XElement(\\\"Child\\\",  \\n            new XElement(\\\"GrandChild\\\", \\\"some content\\\")  \\n        )  \\n    );  \\n    doc.WriteTo(xw);  \\n}  \\n  \\nConsole.WriteLine(sb.ToString());  \\n```  \\n  \\n```vb  \\n  \\n                Dim sb As StringBuilder = New StringBuilder()  \\nDim xws As XmlWriterSettings = New XmlWriterSettings()  \\nxws.OmitXmlDeclaration = True  \\nxws.Indent = True  \\n  \\nUsing xw = XmlWriter.Create(sb, xws)  \\n    Dim doc As XDocument = New XDocument(<Child><GrandChild>some content</GrandChild></Child>)  \\n    doc.WriteTo(xw)  \\nEnd Using  \\n  \\nConsole.WriteLine(sb.ToString())  \\n  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```xml  \\n  \\n                <Child>  \\n  <GrandChild>some content</GrandChild>  \\n</Child>  \\n```\"\n  syntax:\n    content: public override void WriteTo (System.Xml.XmlWriter writer);\n    parameters:\n    - id: writer\n      type: System.Xml.XmlWriter\n      description: An <xref href=\"System.Xml.XmlWriter\"></xref> into which this method will write.\n  overload: System.Xml.Linq.XDocument.WriteTo*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XDocument.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XDocument.WriteToAsync(System.Xml.XmlWriter,System.Threading.CancellationToken)\n  commentId: M:System.Xml.Linq.XDocument.WriteToAsync(System.Xml.XmlWriter,System.Threading.CancellationToken)\n  id: WriteToAsync(System.Xml.XmlWriter,System.Threading.CancellationToken)\n  parent: System.Xml.Linq.XDocument\n  langs:\n  - csharp\n  name: WriteToAsync(XmlWriter, CancellationToken)\n  nameWithType: XDocument.WriteToAsync(XmlWriter, CancellationToken)\n  fullName: XDocument.WriteToAsync(XmlWriter, CancellationToken)\n  type: Method\n  assemblies:\n  - System.Xml.XDocument\n  namespace: System.Xml.Linq\n  syntax:\n    content: public override System.Threading.Tasks.Task WriteToAsync (System.Xml.XmlWriter writer, System.Threading.CancellationToken cancellationToken);\n    parameters:\n    - id: writer\n      type: System.Xml.XmlWriter\n      description: ''\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: ''\n    return:\n      type: System.Threading.Tasks.Task\n      description: ''\n  overload: System.Xml.Linq.XDocument.WriteToAsync*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XDocument.xml\nreferences:\n- uid: System.Xml.Linq.XContainer\n  parent: System.Xml.Linq\n  isExternal: false\n  name: XContainer\n  nameWithType: XContainer\n  fullName: System.Xml.Linq.XContainer\n- uid: System.Xml.Linq.XDocument.#ctor\n  parent: System.Xml.Linq.XDocument\n  isExternal: false\n  name: XDocument()\n  nameWithType: XDocument.XDocument()\n  fullName: XDocument.XDocument()\n- uid: System.Xml.Linq.XDocument.#ctor(System.Object[])\n  parent: System.Xml.Linq.XDocument\n  isExternal: false\n  name: XDocument(Object[])\n  nameWithType: XDocument.XDocument(Object[])\n  fullName: XDocument.XDocument(Object[])\n- uid: System.Object\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Object[]\n  parent: System\n  isExternal: false\n  name: Object[]\n  nameWithType: Object[]\n  fullName: System.Object[]\n  spec.csharp:\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Xml.Linq.XDocument.#ctor(System.Xml.Linq.XDocument)\n  parent: System.Xml.Linq.XDocument\n  isExternal: false\n  name: XDocument(XDocument)\n  nameWithType: XDocument.XDocument(XDocument)\n  fullName: XDocument.XDocument(XDocument)\n- uid: System.Xml.Linq.XDocument\n  parent: System.Xml.Linq\n  isExternal: false\n  name: XDocument\n  nameWithType: XDocument\n  fullName: System.Xml.Linq.XDocument\n- uid: System.Xml.Linq.XDocument.#ctor(System.Xml.Linq.XDeclaration,System.Object[])\n  parent: System.Xml.Linq.XDocument\n  isExternal: false\n  name: XDocument(XDeclaration, Object[])\n  nameWithType: XDocument.XDocument(XDeclaration, Object[])\n  fullName: XDocument.XDocument(XDeclaration, Object[])\n- uid: System.Xml.Linq.XDeclaration\n  parent: System.Xml.Linq\n  isExternal: false\n  name: XDeclaration\n  nameWithType: XDeclaration\n  fullName: System.Xml.Linq.XDeclaration\n- uid: System.Xml.Linq.XDocument.Declaration\n  parent: System.Xml.Linq.XDocument\n  isExternal: false\n  name: Declaration\n  nameWithType: XDocument.Declaration\n  fullName: XDocument.Declaration\n- uid: System.Xml.Linq.XDocument.DocumentType\n  parent: System.Xml.Linq.XDocument\n  isExternal: false\n  name: DocumentType\n  nameWithType: XDocument.DocumentType\n  fullName: XDocument.DocumentType\n- uid: System.Xml.Linq.XDocumentType\n  parent: System.Xml.Linq\n  isExternal: false\n  name: XDocumentType\n  nameWithType: XDocumentType\n  fullName: System.Xml.Linq.XDocumentType\n- uid: System.Xml.Linq.XDocument.Load(System.IO.Stream)\n  parent: System.Xml.Linq.XDocument\n  isExternal: false\n  name: Load(Stream)\n  nameWithType: XDocument.Load(Stream)\n  fullName: XDocument.Load(Stream)\n- uid: System.IO.Stream\n  parent: System.IO\n  isExternal: false\n  name: Stream\n  nameWithType: Stream\n  fullName: System.IO.Stream\n- uid: System.Xml.Linq.XDocument.Load(System.IO.TextReader)\n  parent: System.Xml.Linq.XDocument\n  isExternal: false\n  name: Load(TextReader)\n  nameWithType: XDocument.Load(TextReader)\n  fullName: XDocument.Load(TextReader)\n- uid: System.IO.TextReader\n  parent: System.IO\n  isExternal: false\n  name: TextReader\n  nameWithType: TextReader\n  fullName: System.IO.TextReader\n- uid: System.Xml.Linq.XDocument.Load(System.String)\n  parent: System.Xml.Linq.XDocument\n  isExternal: false\n  name: Load(String)\n  nameWithType: XDocument.Load(String)\n  fullName: XDocument.Load(String)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Xml.Linq.XDocument.Load(System.Xml.XmlReader)\n  parent: System.Xml.Linq.XDocument\n  isExternal: false\n  name: Load(XmlReader)\n  nameWithType: XDocument.Load(XmlReader)\n  fullName: XDocument.Load(XmlReader)\n- uid: System.Xml.XmlReader\n  parent: System.Xml\n  isExternal: false\n  name: XmlReader\n  nameWithType: XmlReader\n  fullName: System.Xml.XmlReader\n- uid: System.Xml.Linq.XDocument.Load(System.IO.Stream,System.Xml.Linq.LoadOptions)\n  parent: System.Xml.Linq.XDocument\n  isExternal: false\n  name: Load(Stream, LoadOptions)\n  nameWithType: XDocument.Load(Stream, LoadOptions)\n  fullName: XDocument.Load(Stream, LoadOptions)\n- uid: System.Xml.Linq.LoadOptions\n  parent: System.Xml.Linq\n  isExternal: false\n  name: LoadOptions\n  nameWithType: LoadOptions\n  fullName: System.Xml.Linq.LoadOptions\n- uid: System.Xml.Linq.XDocument.Load(System.IO.TextReader,System.Xml.Linq.LoadOptions)\n  parent: System.Xml.Linq.XDocument\n  isExternal: false\n  name: Load(TextReader, LoadOptions)\n  nameWithType: XDocument.Load(TextReader, LoadOptions)\n  fullName: XDocument.Load(TextReader, LoadOptions)\n- uid: System.Xml.Linq.XDocument.Load(System.String,System.Xml.Linq.LoadOptions)\n  parent: System.Xml.Linq.XDocument\n  isExternal: false\n  name: Load(String, LoadOptions)\n  nameWithType: XDocument.Load(String, LoadOptions)\n  fullName: XDocument.Load(String, LoadOptions)\n- uid: System.Xml.Linq.XDocument.Load(System.Xml.XmlReader,System.Xml.Linq.LoadOptions)\n  parent: System.Xml.Linq.XDocument\n  isExternal: false\n  name: Load(XmlReader, LoadOptions)\n  nameWithType: XDocument.Load(XmlReader, LoadOptions)\n  fullName: XDocument.Load(XmlReader, LoadOptions)\n- uid: System.Xml.Linq.XDocument.LoadAsync(System.IO.TextReader,System.Xml.Linq.LoadOptions,System.Threading.CancellationToken)\n  parent: System.Xml.Linq.XDocument\n  isExternal: false\n  name: LoadAsync(TextReader, LoadOptions, CancellationToken)\n  nameWithType: XDocument.LoadAsync(TextReader, LoadOptions, CancellationToken)\n  fullName: XDocument.LoadAsync(TextReader, LoadOptions, CancellationToken)\n- uid: System.Threading.Tasks.Task`1\n  name: Task<TResult>\n  nameWithType: Task<TResult>\n  fullName: System.Threading.Tasks.Task<TResult>\n- uid: System.Threading.Tasks.Task{System.Xml.Linq.XDocument}\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: Task<XDocument>\n  nameWithType: Task<XDocument>\n  fullName: System.Threading.Tasks.Task<System.Xml.Linq.XDocument>\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    nameWithType: Task\n    fullName: System.Threading.Tasks.Task\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Xml.Linq.XDocument\n    name: XDocument\n    nameWithType: XDocument\n    fullName: System.Xml.Linq.XDocument\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Threading.CancellationToken\n  parent: System.Threading\n  isExternal: false\n  name: CancellationToken\n  nameWithType: CancellationToken\n  fullName: System.Threading.CancellationToken\n- uid: System.Xml.Linq.XDocument.LoadAsync(System.Xml.XmlReader,System.Xml.Linq.LoadOptions,System.Threading.CancellationToken)\n  parent: System.Xml.Linq.XDocument\n  isExternal: false\n  name: LoadAsync(XmlReader, LoadOptions, CancellationToken)\n  nameWithType: XDocument.LoadAsync(XmlReader, LoadOptions, CancellationToken)\n  fullName: XDocument.LoadAsync(XmlReader, LoadOptions, CancellationToken)\n- uid: System.Xml.Linq.XDocument.LoadAsync(System.IO.Stream,System.Xml.Linq.LoadOptions,System.Threading.CancellationToken)\n  parent: System.Xml.Linq.XDocument\n  isExternal: false\n  name: LoadAsync(Stream, LoadOptions, CancellationToken)\n  nameWithType: XDocument.LoadAsync(Stream, LoadOptions, CancellationToken)\n  fullName: XDocument.LoadAsync(Stream, LoadOptions, CancellationToken)\n- uid: System.Xml.Linq.XDocument.NodeType\n  parent: System.Xml.Linq.XDocument\n  isExternal: false\n  name: NodeType\n  nameWithType: XDocument.NodeType\n  fullName: XDocument.NodeType\n- uid: System.Xml.XmlNodeType\n  parent: System.Xml\n  isExternal: false\n  name: XmlNodeType\n  nameWithType: XmlNodeType\n  fullName: System.Xml.XmlNodeType\n- uid: System.Xml.Linq.XDocument.Parse(System.String)\n  parent: System.Xml.Linq.XDocument\n  isExternal: false\n  name: Parse(String)\n  nameWithType: XDocument.Parse(String)\n  fullName: XDocument.Parse(String)\n- uid: System.Xml.Linq.XDocument.Parse(System.String,System.Xml.Linq.LoadOptions)\n  parent: System.Xml.Linq.XDocument\n  isExternal: false\n  name: Parse(String, LoadOptions)\n  nameWithType: XDocument.Parse(String, LoadOptions)\n  fullName: XDocument.Parse(String, LoadOptions)\n- uid: System.Xml.Linq.XDocument.Root\n  parent: System.Xml.Linq.XDocument\n  isExternal: false\n  name: Root\n  nameWithType: XDocument.Root\n  fullName: XDocument.Root\n- uid: System.Xml.Linq.XElement\n  parent: System.Xml.Linq\n  isExternal: false\n  name: XElement\n  nameWithType: XElement\n  fullName: System.Xml.Linq.XElement\n- uid: System.Xml.Linq.XDocument.Save(System.Xml.XmlWriter)\n  parent: System.Xml.Linq.XDocument\n  isExternal: false\n  name: Save(XmlWriter)\n  nameWithType: XDocument.Save(XmlWriter)\n  fullName: XDocument.Save(XmlWriter)\n- uid: System.Xml.XmlWriter\n  parent: System.Xml\n  isExternal: false\n  name: XmlWriter\n  nameWithType: XmlWriter\n  fullName: System.Xml.XmlWriter\n- uid: System.Xml.Linq.XDocument.Save(System.IO.Stream)\n  parent: System.Xml.Linq.XDocument\n  isExternal: false\n  name: Save(Stream)\n  nameWithType: XDocument.Save(Stream)\n  fullName: XDocument.Save(Stream)\n- uid: System.Xml.Linq.XDocument.Save(System.IO.TextWriter)\n  parent: System.Xml.Linq.XDocument\n  isExternal: false\n  name: Save(TextWriter)\n  nameWithType: XDocument.Save(TextWriter)\n  fullName: XDocument.Save(TextWriter)\n- uid: System.IO.TextWriter\n  parent: System.IO\n  isExternal: false\n  name: TextWriter\n  nameWithType: TextWriter\n  fullName: System.IO.TextWriter\n- uid: System.Xml.Linq.XDocument.Save(System.String)\n  parent: System.Xml.Linq.XDocument\n  isExternal: false\n  name: Save(String)\n  nameWithType: XDocument.Save(String)\n  fullName: XDocument.Save(String)\n- uid: System.Xml.Linq.XDocument.Save(System.IO.Stream,System.Xml.Linq.SaveOptions)\n  parent: System.Xml.Linq.XDocument\n  isExternal: false\n  name: Save(Stream, SaveOptions)\n  nameWithType: XDocument.Save(Stream, SaveOptions)\n  fullName: XDocument.Save(Stream, SaveOptions)\n- uid: System.Xml.Linq.SaveOptions\n  parent: System.Xml.Linq\n  isExternal: false\n  name: SaveOptions\n  nameWithType: SaveOptions\n  fullName: System.Xml.Linq.SaveOptions\n- uid: System.Xml.Linq.XDocument.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)\n  parent: System.Xml.Linq.XDocument\n  isExternal: false\n  name: Save(TextWriter, SaveOptions)\n  nameWithType: XDocument.Save(TextWriter, SaveOptions)\n  fullName: XDocument.Save(TextWriter, SaveOptions)\n- uid: System.Xml.Linq.XDocument.Save(System.String,System.Xml.Linq.SaveOptions)\n  parent: System.Xml.Linq.XDocument\n  isExternal: false\n  name: Save(String, SaveOptions)\n  nameWithType: XDocument.Save(String, SaveOptions)\n  fullName: XDocument.Save(String, SaveOptions)\n- uid: System.Xml.Linq.XDocument.SaveAsync(System.Xml.XmlWriter,System.Threading.CancellationToken)\n  parent: System.Xml.Linq.XDocument\n  isExternal: false\n  name: SaveAsync(XmlWriter, CancellationToken)\n  nameWithType: XDocument.SaveAsync(XmlWriter, CancellationToken)\n  fullName: XDocument.SaveAsync(XmlWriter, CancellationToken)\n- uid: System.Threading.Tasks.Task\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: Task\n  nameWithType: Task\n  fullName: System.Threading.Tasks.Task\n- uid: System.Xml.Linq.XDocument.SaveAsync(System.IO.Stream,System.Xml.Linq.SaveOptions,System.Threading.CancellationToken)\n  parent: System.Xml.Linq.XDocument\n  isExternal: false\n  name: SaveAsync(Stream, SaveOptions, CancellationToken)\n  nameWithType: XDocument.SaveAsync(Stream, SaveOptions, CancellationToken)\n  fullName: XDocument.SaveAsync(Stream, SaveOptions, CancellationToken)\n- uid: System.Xml.Linq.XDocument.SaveAsync(System.IO.TextWriter,System.Xml.Linq.SaveOptions,System.Threading.CancellationToken)\n  parent: System.Xml.Linq.XDocument\n  isExternal: false\n  name: SaveAsync(TextWriter, SaveOptions, CancellationToken)\n  nameWithType: XDocument.SaveAsync(TextWriter, SaveOptions, CancellationToken)\n  fullName: XDocument.SaveAsync(TextWriter, SaveOptions, CancellationToken)\n- uid: System.Xml.Linq.XDocument.WriteTo(System.Xml.XmlWriter)\n  parent: System.Xml.Linq.XDocument\n  isExternal: false\n  name: WriteTo(XmlWriter)\n  nameWithType: XDocument.WriteTo(XmlWriter)\n  fullName: XDocument.WriteTo(XmlWriter)\n- uid: System.Xml.Linq.XDocument.WriteToAsync(System.Xml.XmlWriter,System.Threading.CancellationToken)\n  parent: System.Xml.Linq.XDocument\n  isExternal: false\n  name: WriteToAsync(XmlWriter, CancellationToken)\n  nameWithType: XDocument.WriteToAsync(XmlWriter, CancellationToken)\n  fullName: XDocument.WriteToAsync(XmlWriter, CancellationToken)\n- uid: System.Xml.Linq.XDocument.#ctor*\n  parent: System.Xml.Linq.XDocument\n  isExternal: false\n  name: XDocument\n  nameWithType: XDocument.XDocument\n  fullName: XDocument.XDocument\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XDocument.xml\n- uid: System.Xml.Linq.XDocument.Load*\n  parent: System.Xml.Linq.XDocument\n  isExternal: false\n  name: Load\n  nameWithType: XDocument.Load\n  fullName: XDocument.Load\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XDocument.xml\n- uid: System.Xml.Linq.XDocument.Parse*\n  parent: System.Xml.Linq.XDocument\n  isExternal: false\n  name: Parse\n  nameWithType: XDocument.Parse\n  fullName: XDocument.Parse\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XDocument.xml\n- uid: System.Xml.Linq.XDocument.Declaration*\n  parent: System.Xml.Linq.XDocument\n  isExternal: false\n  name: Declaration\n  nameWithType: XDocument.Declaration\n  fullName: XDocument.Declaration\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XDocument.xml\n- uid: System.Xml.Linq.XDocument.DocumentType*\n  parent: System.Xml.Linq.XDocument\n  isExternal: false\n  name: DocumentType\n  nameWithType: XDocument.DocumentType\n  fullName: XDocument.DocumentType\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XDocument.xml\n- uid: System.Xml.Linq.XDocument.LoadAsync*\n  parent: System.Xml.Linq.XDocument\n  isExternal: false\n  name: LoadAsync\n  nameWithType: XDocument.LoadAsync\n  fullName: XDocument.LoadAsync\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XDocument.xml\n- uid: System.Xml.Linq.XDocument.NodeType*\n  parent: System.Xml.Linq.XDocument\n  isExternal: false\n  name: NodeType\n  nameWithType: XDocument.NodeType\n  fullName: XDocument.NodeType\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XDocument.xml\n- uid: System.Xml.Linq.XDocument.Root*\n  parent: System.Xml.Linq.XDocument\n  isExternal: false\n  name: Root\n  nameWithType: XDocument.Root\n  fullName: XDocument.Root\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XDocument.xml\n- uid: System.Xml.Linq.XDocument.Save*\n  parent: System.Xml.Linq.XDocument\n  isExternal: false\n  name: Save\n  nameWithType: XDocument.Save\n  fullName: XDocument.Save\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XDocument.xml\n- uid: System.Xml.Linq.XDocument.SaveAsync*\n  parent: System.Xml.Linq.XDocument\n  isExternal: false\n  name: SaveAsync\n  nameWithType: XDocument.SaveAsync\n  fullName: XDocument.SaveAsync\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XDocument.xml\n- uid: System.Xml.Linq.XDocument.WriteTo*\n  parent: System.Xml.Linq.XDocument\n  isExternal: false\n  name: WriteTo\n  nameWithType: XDocument.WriteTo\n  fullName: XDocument.WriteTo\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XDocument.xml\n- uid: System.Xml.Linq.XDocument.WriteToAsync*\n  parent: System.Xml.Linq.XDocument\n  isExternal: false\n  name: WriteToAsync\n  nameWithType: XDocument.WriteToAsync\n  fullName: XDocument.WriteToAsync\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XDocument.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Xml.Linq.XNode.ToString\n  parent: System.Xml.Linq.XNode\n  isExternal: false\n  name: ToString()\n  nameWithType: XNode.ToString()\n  fullName: XNode.ToString()\n- uid: System.Xml.Linq.XObject.AddAnnotation(System.Object)\n  parent: System.Xml.Linq.XObject\n  isExternal: false\n  name: AddAnnotation(Object)\n  nameWithType: XObject.AddAnnotation(Object)\n  fullName: XObject.AddAnnotation(Object)\n- uid: System.Xml.Linq.XObject.Annotation(System.Type)\n  parent: System.Xml.Linq.XObject\n  isExternal: false\n  name: Annotation(Type)\n  nameWithType: XObject.Annotation(Type)\n  fullName: XObject.Annotation(Type)\n- uid: System.Xml.Linq.XObject.Annotation``1\n  parent: System.Xml.Linq.XObject\n  isExternal: false\n  name: Annotation<T>()\n  nameWithType: XObject.Annotation<T>()\n  fullName: XObject.Annotation<T>()\n- uid: System.Xml.Linq.XObject.Annotations(System.Type)\n  parent: System.Xml.Linq.XObject\n  isExternal: false\n  name: Annotations(Type)\n  nameWithType: XObject.Annotations(Type)\n  fullName: XObject.Annotations(Type)\n- uid: System.Xml.Linq.XObject.Annotations``1\n  parent: System.Xml.Linq.XObject\n  isExternal: false\n  name: Annotations<T>()\n  nameWithType: XObject.Annotations<T>()\n  fullName: XObject.Annotations<T>()\n- uid: System.Xml.Linq.XObject.BaseUri\n  parent: System.Xml.Linq.XObject\n  isExternal: false\n  name: BaseUri\n  nameWithType: XObject.BaseUri\n  fullName: XObject.BaseUri\n- uid: System.Xml.Linq.XObject.Changed\n  parent: System.Xml.Linq.XObject\n  isExternal: false\n  name: Changed\n  nameWithType: XObject.Changed\n  fullName: XObject.Changed\n- uid: System.Xml.Linq.XObject.Changing\n  parent: System.Xml.Linq.XObject\n  isExternal: false\n  name: Changing\n  nameWithType: XObject.Changing\n  fullName: XObject.Changing\n- uid: System.Xml.Linq.XObject.Document\n  parent: System.Xml.Linq.XObject\n  isExternal: false\n  name: Document\n  nameWithType: XObject.Document\n  fullName: XObject.Document\n- uid: System.Xml.Linq.XObject.Parent\n  parent: System.Xml.Linq.XObject\n  isExternal: false\n  name: Parent\n  nameWithType: XObject.Parent\n  fullName: XObject.Parent\n- uid: System.Xml.Linq.XObject.RemoveAnnotations(System.Type)\n  parent: System.Xml.Linq.XObject\n  isExternal: false\n  name: RemoveAnnotations(Type)\n  nameWithType: XObject.RemoveAnnotations(Type)\n  fullName: XObject.RemoveAnnotations(Type)\n- uid: System.Xml.Linq.XObject.RemoveAnnotations``1\n  parent: System.Xml.Linq.XObject\n  isExternal: false\n  name: RemoveAnnotations<T>()\n  nameWithType: XObject.RemoveAnnotations<T>()\n  fullName: XObject.RemoveAnnotations<T>()\n- uid: System.Xml.Linq.XObject.System#Xml#IXmlLineInfo#HasLineInfo\n  parent: System.Xml.Linq.XObject\n  isExternal: false\n  name: IXmlLineInfo.HasLineInfo()\n  nameWithType: XObject.IXmlLineInfo.HasLineInfo()\n  fullName: XObject.IXmlLineInfo.HasLineInfo()\n- uid: System.Xml.Linq.XObject.System#Xml#IXmlLineInfo#LineNumber\n  parent: System.Xml.Linq.XObject\n  isExternal: false\n  name: IXmlLineInfo.LineNumber\n  nameWithType: XObject.IXmlLineInfo.LineNumber\n  fullName: XObject.IXmlLineInfo.LineNumber\n- uid: System.Xml.Linq.XObject.System#Xml#IXmlLineInfo#LinePosition\n  parent: System.Xml.Linq.XObject\n  isExternal: false\n  name: IXmlLineInfo.LinePosition\n  nameWithType: XObject.IXmlLineInfo.LinePosition\n  fullName: XObject.IXmlLineInfo.LinePosition\n- uid: System.Xml.Linq.XNode.AddAfterSelf(System.Object)\n  parent: System.Xml.Linq.XNode\n  isExternal: false\n  name: AddAfterSelf(Object)\n  nameWithType: XNode.AddAfterSelf(Object)\n  fullName: XNode.AddAfterSelf(Object)\n- uid: System.Xml.Linq.XNode.AddAfterSelf(System.Object[])\n  parent: System.Xml.Linq.XNode\n  isExternal: false\n  name: AddAfterSelf(Object[])\n  nameWithType: XNode.AddAfterSelf(Object[])\n  fullName: XNode.AddAfterSelf(Object[])\n- uid: System.Xml.Linq.XNode.AddBeforeSelf(System.Object)\n  parent: System.Xml.Linq.XNode\n  isExternal: false\n  name: AddBeforeSelf(Object)\n  nameWithType: XNode.AddBeforeSelf(Object)\n  fullName: XNode.AddBeforeSelf(Object)\n- uid: System.Xml.Linq.XNode.AddBeforeSelf(System.Object[])\n  parent: System.Xml.Linq.XNode\n  isExternal: false\n  name: AddBeforeSelf(Object[])\n  nameWithType: XNode.AddBeforeSelf(Object[])\n  fullName: XNode.AddBeforeSelf(Object[])\n- uid: System.Xml.Linq.XNode.Ancestors\n  parent: System.Xml.Linq.XNode\n  isExternal: false\n  name: Ancestors()\n  nameWithType: XNode.Ancestors()\n  fullName: XNode.Ancestors()\n- uid: System.Xml.Linq.XNode.Ancestors(System.Xml.Linq.XName)\n  parent: System.Xml.Linq.XNode\n  isExternal: false\n  name: Ancestors(XName)\n  nameWithType: XNode.Ancestors(XName)\n  fullName: XNode.Ancestors(XName)\n- uid: System.Xml.Linq.XNode.CompareDocumentOrder(System.Xml.Linq.XNode,System.Xml.Linq.XNode)\n  parent: System.Xml.Linq.XNode\n  isExternal: false\n  name: CompareDocumentOrder(XNode, XNode)\n  nameWithType: XNode.CompareDocumentOrder(XNode, XNode)\n  fullName: XNode.CompareDocumentOrder(XNode, XNode)\n- uid: System.Xml.Linq.XNode.CreateReader\n  parent: System.Xml.Linq.XNode\n  isExternal: false\n  name: CreateReader()\n  nameWithType: XNode.CreateReader()\n  fullName: XNode.CreateReader()\n- uid: System.Xml.Linq.XNode.CreateReader(System.Xml.Linq.ReaderOptions)\n  parent: System.Xml.Linq.XNode\n  isExternal: false\n  name: CreateReader(ReaderOptions)\n  nameWithType: XNode.CreateReader(ReaderOptions)\n  fullName: XNode.CreateReader(ReaderOptions)\n- uid: System.Xml.Linq.XNode.DeepEquals(System.Xml.Linq.XNode,System.Xml.Linq.XNode)\n  parent: System.Xml.Linq.XNode\n  isExternal: false\n  name: DeepEquals(XNode, XNode)\n  nameWithType: XNode.DeepEquals(XNode, XNode)\n  fullName: XNode.DeepEquals(XNode, XNode)\n- uid: System.Xml.Linq.XNode.DocumentOrderComparer\n  parent: System.Xml.Linq.XNode\n  isExternal: false\n  name: DocumentOrderComparer\n  nameWithType: XNode.DocumentOrderComparer\n  fullName: XNode.DocumentOrderComparer\n- uid: System.Xml.Linq.XNode.ElementsAfterSelf\n  parent: System.Xml.Linq.XNode\n  isExternal: false\n  name: ElementsAfterSelf()\n  nameWithType: XNode.ElementsAfterSelf()\n  fullName: XNode.ElementsAfterSelf()\n- uid: System.Xml.Linq.XNode.ElementsAfterSelf(System.Xml.Linq.XName)\n  parent: System.Xml.Linq.XNode\n  isExternal: false\n  name: ElementsAfterSelf(XName)\n  nameWithType: XNode.ElementsAfterSelf(XName)\n  fullName: XNode.ElementsAfterSelf(XName)\n- uid: System.Xml.Linq.XNode.ElementsBeforeSelf\n  parent: System.Xml.Linq.XNode\n  isExternal: false\n  name: ElementsBeforeSelf()\n  nameWithType: XNode.ElementsBeforeSelf()\n  fullName: XNode.ElementsBeforeSelf()\n- uid: System.Xml.Linq.XNode.ElementsBeforeSelf(System.Xml.Linq.XName)\n  parent: System.Xml.Linq.XNode\n  isExternal: false\n  name: ElementsBeforeSelf(XName)\n  nameWithType: XNode.ElementsBeforeSelf(XName)\n  fullName: XNode.ElementsBeforeSelf(XName)\n- uid: System.Xml.Linq.XNode.EqualityComparer\n  parent: System.Xml.Linq.XNode\n  isExternal: false\n  name: EqualityComparer\n  nameWithType: XNode.EqualityComparer\n  fullName: XNode.EqualityComparer\n- uid: System.Xml.Linq.XNode.IsAfter(System.Xml.Linq.XNode)\n  parent: System.Xml.Linq.XNode\n  isExternal: false\n  name: IsAfter(XNode)\n  nameWithType: XNode.IsAfter(XNode)\n  fullName: XNode.IsAfter(XNode)\n- uid: System.Xml.Linq.XNode.IsBefore(System.Xml.Linq.XNode)\n  parent: System.Xml.Linq.XNode\n  isExternal: false\n  name: IsBefore(XNode)\n  nameWithType: XNode.IsBefore(XNode)\n  fullName: XNode.IsBefore(XNode)\n- uid: System.Xml.Linq.XNode.NextNode\n  parent: System.Xml.Linq.XNode\n  isExternal: false\n  name: NextNode\n  nameWithType: XNode.NextNode\n  fullName: XNode.NextNode\n- uid: System.Xml.Linq.XNode.NodesAfterSelf\n  parent: System.Xml.Linq.XNode\n  isExternal: false\n  name: NodesAfterSelf()\n  nameWithType: XNode.NodesAfterSelf()\n  fullName: XNode.NodesAfterSelf()\n- uid: System.Xml.Linq.XNode.NodesBeforeSelf\n  parent: System.Xml.Linq.XNode\n  isExternal: false\n  name: NodesBeforeSelf()\n  nameWithType: XNode.NodesBeforeSelf()\n  fullName: XNode.NodesBeforeSelf()\n- uid: System.Xml.Linq.XNode.PreviousNode\n  parent: System.Xml.Linq.XNode\n  isExternal: false\n  name: PreviousNode\n  nameWithType: XNode.PreviousNode\n  fullName: XNode.PreviousNode\n- uid: System.Xml.Linq.XNode.ReadFrom(System.Xml.XmlReader)\n  parent: System.Xml.Linq.XNode\n  isExternal: false\n  name: ReadFrom(XmlReader)\n  nameWithType: XNode.ReadFrom(XmlReader)\n  fullName: XNode.ReadFrom(XmlReader)\n- uid: System.Xml.Linq.XNode.ReadFromAsync(System.Xml.XmlReader,System.Threading.CancellationToken)\n  parent: System.Xml.Linq.XNode\n  isExternal: false\n  name: ReadFromAsync(XmlReader, CancellationToken)\n  nameWithType: XNode.ReadFromAsync(XmlReader, CancellationToken)\n  fullName: XNode.ReadFromAsync(XmlReader, CancellationToken)\n- uid: System.Xml.Linq.XNode.Remove\n  parent: System.Xml.Linq.XNode\n  isExternal: false\n  name: Remove()\n  nameWithType: XNode.Remove()\n  fullName: XNode.Remove()\n- uid: System.Xml.Linq.XNode.ReplaceWith(System.Object)\n  parent: System.Xml.Linq.XNode\n  isExternal: false\n  name: ReplaceWith(Object)\n  nameWithType: XNode.ReplaceWith(Object)\n  fullName: XNode.ReplaceWith(Object)\n- uid: System.Xml.Linq.XNode.ReplaceWith(System.Object[])\n  parent: System.Xml.Linq.XNode\n  isExternal: false\n  name: ReplaceWith(Object[])\n  nameWithType: XNode.ReplaceWith(Object[])\n  fullName: XNode.ReplaceWith(Object[])\n- uid: System.Xml.Linq.XNode.ToString(System.Xml.Linq.SaveOptions)\n  parent: System.Xml.Linq.XNode\n  isExternal: false\n  name: ToString(SaveOptions)\n  nameWithType: XNode.ToString(SaveOptions)\n  fullName: XNode.ToString(SaveOptions)\n- uid: System.Xml.Linq.XContainer.Add(System.Object)\n  parent: System.Xml.Linq.XContainer\n  isExternal: false\n  name: Add(Object)\n  nameWithType: XContainer.Add(Object)\n  fullName: XContainer.Add(Object)\n- uid: System.Xml.Linq.XContainer.Add(System.Object[])\n  parent: System.Xml.Linq.XContainer\n  isExternal: false\n  name: Add(Object[])\n  nameWithType: XContainer.Add(Object[])\n  fullName: XContainer.Add(Object[])\n- uid: System.Xml.Linq.XContainer.AddFirst(System.Object)\n  parent: System.Xml.Linq.XContainer\n  isExternal: false\n  name: AddFirst(Object)\n  nameWithType: XContainer.AddFirst(Object)\n  fullName: XContainer.AddFirst(Object)\n- uid: System.Xml.Linq.XContainer.AddFirst(System.Object[])\n  parent: System.Xml.Linq.XContainer\n  isExternal: false\n  name: AddFirst(Object[])\n  nameWithType: XContainer.AddFirst(Object[])\n  fullName: XContainer.AddFirst(Object[])\n- uid: System.Xml.Linq.XContainer.CreateWriter\n  parent: System.Xml.Linq.XContainer\n  isExternal: false\n  name: CreateWriter()\n  nameWithType: XContainer.CreateWriter()\n  fullName: XContainer.CreateWriter()\n- uid: System.Xml.Linq.XContainer.DescendantNodes\n  parent: System.Xml.Linq.XContainer\n  isExternal: false\n  name: DescendantNodes()\n  nameWithType: XContainer.DescendantNodes()\n  fullName: XContainer.DescendantNodes()\n- uid: System.Xml.Linq.XContainer.Descendants\n  parent: System.Xml.Linq.XContainer\n  isExternal: false\n  name: Descendants()\n  nameWithType: XContainer.Descendants()\n  fullName: XContainer.Descendants()\n- uid: System.Xml.Linq.XContainer.Descendants(System.Xml.Linq.XName)\n  parent: System.Xml.Linq.XContainer\n  isExternal: false\n  name: Descendants(XName)\n  nameWithType: XContainer.Descendants(XName)\n  fullName: XContainer.Descendants(XName)\n- uid: System.Xml.Linq.XContainer.Element(System.Xml.Linq.XName)\n  parent: System.Xml.Linq.XContainer\n  isExternal: false\n  name: Element(XName)\n  nameWithType: XContainer.Element(XName)\n  fullName: XContainer.Element(XName)\n- uid: System.Xml.Linq.XContainer.Elements\n  parent: System.Xml.Linq.XContainer\n  isExternal: false\n  name: Elements()\n  nameWithType: XContainer.Elements()\n  fullName: XContainer.Elements()\n- uid: System.Xml.Linq.XContainer.Elements(System.Xml.Linq.XName)\n  parent: System.Xml.Linq.XContainer\n  isExternal: false\n  name: Elements(XName)\n  nameWithType: XContainer.Elements(XName)\n  fullName: XContainer.Elements(XName)\n- uid: System.Xml.Linq.XContainer.FirstNode\n  parent: System.Xml.Linq.XContainer\n  isExternal: false\n  name: FirstNode\n  nameWithType: XContainer.FirstNode\n  fullName: XContainer.FirstNode\n- uid: System.Xml.Linq.XContainer.LastNode\n  parent: System.Xml.Linq.XContainer\n  isExternal: false\n  name: LastNode\n  nameWithType: XContainer.LastNode\n  fullName: XContainer.LastNode\n- uid: System.Xml.Linq.XContainer.Nodes\n  parent: System.Xml.Linq.XContainer\n  isExternal: false\n  name: Nodes()\n  nameWithType: XContainer.Nodes()\n  fullName: XContainer.Nodes()\n- uid: System.Xml.Linq.XContainer.RemoveNodes\n  parent: System.Xml.Linq.XContainer\n  isExternal: false\n  name: RemoveNodes()\n  nameWithType: XContainer.RemoveNodes()\n  fullName: XContainer.RemoveNodes()\n- uid: System.Xml.Linq.XContainer.ReplaceNodes(System.Object)\n  parent: System.Xml.Linq.XContainer\n  isExternal: false\n  name: ReplaceNodes(Object)\n  nameWithType: XContainer.ReplaceNodes(Object)\n  fullName: XContainer.ReplaceNodes(Object)\n- uid: System.Xml.Linq.XContainer.ReplaceNodes(System.Object[])\n  parent: System.Xml.Linq.XContainer\n  isExternal: false\n  name: ReplaceNodes(Object[])\n  nameWithType: XContainer.ReplaceNodes(Object[])\n  fullName: XContainer.ReplaceNodes(Object[])\n- uid: System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XDocument,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler)\n  parent: System.Xml.Schema.Extensions\n  isExternal: false\n  name: Validate(XDocument, XmlSchemaSet, ValidationEventHandler)\n  nameWithType: Extensions.Validate(XDocument, XmlSchemaSet, ValidationEventHandler)\n  fullName: Extensions.Validate(XDocument, XmlSchemaSet, ValidationEventHandler)\n- uid: System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XDocument,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler,System.Boolean)\n  parent: System.Xml.Schema.Extensions\n  isExternal: false\n  name: Validate(XDocument, XmlSchemaSet, ValidationEventHandler, Boolean)\n  nameWithType: Extensions.Validate(XDocument, XmlSchemaSet, ValidationEventHandler, Boolean)\n  fullName: Extensions.Validate(XDocument, XmlSchemaSet, ValidationEventHandler, Boolean)\n- uid: System.Xml.XPath.Extensions.CreateNavigator(System.Xml.Linq.XNode)\n  parent: System.Xml.XPath.Extensions\n  isExternal: false\n  name: CreateNavigator(XNode)\n  nameWithType: Extensions.CreateNavigator(XNode)\n  fullName: Extensions.CreateNavigator(XNode)\n- uid: System.Xml.XPath.Extensions.CreateNavigator(System.Xml.Linq.XNode,System.Xml.XmlNameTable)\n  parent: System.Xml.XPath.Extensions\n  isExternal: false\n  name: CreateNavigator(XNode, XmlNameTable)\n  nameWithType: Extensions.CreateNavigator(XNode, XmlNameTable)\n  fullName: Extensions.CreateNavigator(XNode, XmlNameTable)\n- uid: System.Xml.XPath.Extensions.XPathEvaluate(System.Xml.Linq.XNode,System.String)\n  parent: System.Xml.XPath.Extensions\n  isExternal: false\n  name: XPathEvaluate(XNode, String)\n  nameWithType: Extensions.XPathEvaluate(XNode, String)\n  fullName: Extensions.XPathEvaluate(XNode, String)\n- uid: System.Xml.XPath.Extensions.XPathEvaluate(System.Xml.Linq.XNode,System.String,System.Xml.IXmlNamespaceResolver)\n  parent: System.Xml.XPath.Extensions\n  isExternal: false\n  name: XPathEvaluate(XNode, String, IXmlNamespaceResolver)\n  nameWithType: Extensions.XPathEvaluate(XNode, String, IXmlNamespaceResolver)\n  fullName: Extensions.XPathEvaluate(XNode, String, IXmlNamespaceResolver)\n- uid: System.Xml.XPath.Extensions.XPathSelectElement(System.Xml.Linq.XNode,System.String)\n  parent: System.Xml.XPath.Extensions\n  isExternal: false\n  name: XPathSelectElement(XNode, String)\n  nameWithType: Extensions.XPathSelectElement(XNode, String)\n  fullName: Extensions.XPathSelectElement(XNode, String)\n- uid: System.Xml.XPath.Extensions.XPathSelectElement(System.Xml.Linq.XNode,System.String,System.Xml.IXmlNamespaceResolver)\n  parent: System.Xml.XPath.Extensions\n  isExternal: false\n  name: XPathSelectElement(XNode, String, IXmlNamespaceResolver)\n  nameWithType: Extensions.XPathSelectElement(XNode, String, IXmlNamespaceResolver)\n  fullName: Extensions.XPathSelectElement(XNode, String, IXmlNamespaceResolver)\n- uid: System.Xml.XPath.Extensions.XPathSelectElements(System.Xml.Linq.XNode,System.String)\n  parent: System.Xml.XPath.Extensions\n  isExternal: false\n  name: XPathSelectElements(XNode, String)\n  nameWithType: Extensions.XPathSelectElements(XNode, String)\n  fullName: Extensions.XPathSelectElements(XNode, String)\n- uid: System.Xml.XPath.Extensions.XPathSelectElements(System.Xml.Linq.XNode,System.String,System.Xml.IXmlNamespaceResolver)\n  parent: System.Xml.XPath.Extensions\n  isExternal: false\n  name: XPathSelectElements(XNode, String, IXmlNamespaceResolver)\n  nameWithType: Extensions.XPathSelectElements(XNode, String, IXmlNamespaceResolver)\n  fullName: Extensions.XPathSelectElements(XNode, String, IXmlNamespaceResolver)\n- uid: System.Xml.XPath.XDocumentExtensions.ToXPathNavigable(System.Xml.Linq.XNode)\n  parent: System.Xml.XPath.XDocumentExtensions\n  isExternal: false\n  name: ToXPathNavigable(XNode)\n  nameWithType: XDocumentExtensions.ToXPathNavigable(XNode)\n  fullName: XDocumentExtensions.ToXPathNavigable(XNode)\n"}