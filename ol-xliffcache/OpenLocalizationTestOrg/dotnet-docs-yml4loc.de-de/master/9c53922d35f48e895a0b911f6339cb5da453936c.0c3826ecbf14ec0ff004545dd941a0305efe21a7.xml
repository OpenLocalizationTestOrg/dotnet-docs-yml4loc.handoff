{"nodes":[{"content":"Discovers the attributes of a property and provides access to property metadata.","nodes":[{"pos":[0,80],"content":"Discovers the attributes of a property and provides access to property metadata.","nodes":[{"content":"Discovers the attributes of a property and provides access to property metadata.","pos":[0,80]}]}],"pos":[3094,3175],"yaml":true},{"content":"Properties are logically the same as fields. A property is a named aspect of an object's state whose value is typically accessible through `get` and `set` accessors. Properties may be read-only, in which case a set routine is not supported.  \n  \n> [!NOTE]\n>  To determine whether a property is `static`, you must obtain the <xref:System.Reflection.MethodInfo> for the `get` or `set` accessor, by calling the <xref:System.Reflection.PropertyInfo.GetGetMethod%2A> or the <xref:System.Reflection.PropertyInfo.GetSetMethod%2A> method, and examine its <xref:System.Reflection.MethodBase.IsStatic%2A> property.  \n  \n Several methods in this class assume that the `get` accessor and `set` accessor methods of a property have certain formats. The signatures of the `get` and `set` methods must match the following convention:  \n  \n-   The return type of the `get` method and the last argument of the `set` method must be identical. This is the type of the property.  \n  \n-   The `get` and `set` methods must have the same number, type, and order of indices.  \n  \n If this format is not followed, the behavior of the `GetValue` and `SetValue` methods is undefined.  \n  \n Calling <xref:System.Reflection.ICustomAttributeProvider.GetCustomAttributes%2A?displayProperty=fullName> on `PropertyInfo` when the `inherit` parameter of `GetCustomAttributes` is `true` does not walk the type hierarchy. Use <xref:System.Attribute?displayProperty=fullName> to inherit custom attributes.","nodes":[{"pos":[0,240],"content":"Properties are logically the same as fields. A property is a named aspect of an object's state whose value is typically accessible through `get` and `set` accessors. Properties may be read-only, in which case a set routine is not supported.","nodes":[{"content":"Properties are logically the same as fields.","pos":[0,44]},{"content":"A property is a named aspect of an object's state whose value is typically accessible through <ph id=\"ph1\">`get`</ph> and <ph id=\"ph2\">`set`</ph> accessors.","pos":[45,165],"source":" A property is a named aspect of an object's state whose value is typically accessible through `get` and `set` accessors."},{"content":"Properties may be read-only, in which case a set routine is not supported.","pos":[166,240]}]},{"pos":[248,604],"content":"[!NOTE]\n To determine whether a property is `static`, you must obtain the <xref:System.Reflection.MethodInfo> for the `get` or `set` accessor, by calling the <xref:System.Reflection.PropertyInfo.GetGetMethod%2A> or the <xref:System.Reflection.PropertyInfo.GetSetMethod%2A> method, and examine its <xref:System.Reflection.MethodBase.IsStatic%2A> property.","leadings":["","> "],"nodes":[{"content":"To determine whether a property is <ph id=\"ph1\">`static`</ph>, you must obtain the <ph id=\"ph2\">&lt;xref:System.Reflection.MethodInfo&gt;</ph> for the <ph id=\"ph3\">`get`</ph> or <ph id=\"ph4\">`set`</ph> accessor, by calling the <ph id=\"ph5\">&lt;xref:System.Reflection.PropertyInfo.GetGetMethod%2A&gt;</ph> or the <ph id=\"ph6\">&lt;xref:System.Reflection.PropertyInfo.GetSetMethod%2A&gt;</ph> method, and examine its <ph id=\"ph7\">&lt;xref:System.Reflection.MethodBase.IsStatic%2A&gt;</ph> property.","pos":[9,354],"source":" To determine whether a property is `static`, you must obtain the <xref:System.Reflection.MethodInfo> for the `get` or `set` accessor, by calling the <xref:System.Reflection.PropertyInfo.GetGetMethod%2A> or the <xref:System.Reflection.PropertyInfo.GetSetMethod%2A> method, and examine its <xref:System.Reflection.MethodBase.IsStatic%2A> property."}]},{"pos":[611,817],"content":"Several methods in this class assume that the `get` accessor and `set` accessor methods of a property have certain formats. The signatures of the `get` and `set` methods must match the following convention:","nodes":[{"content":"Several methods in this class assume that the <ph id=\"ph1\">`get`</ph> accessor and <ph id=\"ph2\">`set`</ph> accessor methods of a property have certain formats.","pos":[0,123],"source":"Several methods in this class assume that the `get` accessor and `set` accessor methods of a property have certain formats."},{"content":"The signatures of the <ph id=\"ph1\">`get`</ph> and <ph id=\"ph2\">`set`</ph> methods must match the following convention:","pos":[124,206],"source":" The signatures of the `get` and `set` methods must match the following convention:"}]},{"pos":[827,957],"content":"The return type of the `get` method and the last argument of the `set` method must be identical. This is the type of the property.","nodes":[{"content":"The return type of the <ph id=\"ph1\">`get`</ph> method and the last argument of the <ph id=\"ph2\">`set`</ph> method must be identical.","pos":[0,96],"source":"The return type of the `get` method and the last argument of the `set` method must be identical."},{"content":"This is the type of the property.","pos":[97,130]}]},{"pos":[967,1049],"content":"The <ph id=\"ph1\">`get`</ph> and <ph id=\"ph2\">`set`</ph> methods must have the same number, type, and order of indices.","source":"The `get` and `set` methods must have the same number, type, and order of indices."},{"pos":[1056,1155],"content":"If this format is not followed, the behavior of the <ph id=\"ph1\">`GetValue`</ph> and <ph id=\"ph2\">`SetValue`</ph> methods is undefined.","source":"If this format is not followed, the behavior of the `GetValue` and `SetValue` methods is undefined."},{"pos":[1162,1466],"content":"Calling <xref:System.Reflection.ICustomAttributeProvider.GetCustomAttributes%2A?displayProperty=fullName> on `PropertyInfo` when the `inherit` parameter of `GetCustomAttributes` is `true` does not walk the type hierarchy. Use <xref:System.Attribute?displayProperty=fullName> to inherit custom attributes.","nodes":[{"content":"Calling <ph id=\"ph1\">&lt;xref:System.Reflection.ICustomAttributeProvider.GetCustomAttributes%2A?displayProperty=fullName&gt;</ph> on <ph id=\"ph2\">`PropertyInfo`</ph> when the <ph id=\"ph3\">`inherit`</ph> parameter of <ph id=\"ph4\">`GetCustomAttributes`</ph> is <ph id=\"ph5\">`true`</ph> does not walk the type hierarchy.","pos":[0,221],"source":"Calling <xref:System.Reflection.ICustomAttributeProvider.GetCustomAttributes%2A?displayProperty=fullName> on `PropertyInfo` when the `inherit` parameter of `GetCustomAttributes` is `true` does not walk the type hierarchy."},{"content":"Use <ph id=\"ph1\">&lt;xref:System.Attribute?displayProperty=fullName&gt;</ph> to inherit custom attributes.","pos":[222,304],"source":" Use <xref:System.Attribute?displayProperty=fullName> to inherit custom attributes."}]}],"pos":[3186,4668],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Reflection.PropertyInfo\"></xref> class.","nodes":[{"pos":[0,92],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Reflection.PropertyInfo\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.Reflection.PropertyInfo\"></xref> class."}],"pos":[11560,11653],"yaml":true},{"content":"Gets the attributes for this property.","nodes":[{"pos":[0,38],"content":"Gets the attributes for this property.","nodes":[{"content":"Gets the attributes for this property.","pos":[0,38]}]}],"pos":[12938,12977],"yaml":true},{"content":"The <xref:System.Reflection.PropertyInfo.Attributes%2A> property returns the attributes associated with the property represented by this <xref:System.Reflection.PropertyInfo> object.  The attributes are primarily modifiers applied by a compiler when creating a property; they indicate whether a property is the default property, a `SpecialName` property, and so on. Note that, for almost all properties found in types in the .NET Framework class library, the value of the <xref:System.Reflection.PropertyInfo.Attributes%2A> property is <xref:System.Reflection.PropertyAttributes?displayProperty=fullName>.  \n  \n> [!TIP]\n>  In most cases, you probably want to retrieve the custom attributes associated with a property. To do this, retrieve the value of the <xref:System.Reflection.MemberInfo.CustomAttributes%2A> property, or call one of the overloads of the <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A> method.  \n  \n To get the <xref:System.Reflection.PropertyInfo.Attributes%2A> property:  \n  \n1.  Get a <xref:System.Type> object that represents the type to which the property belongs.  \n  \n2.  Get the <xref:System.Reflection.PropertyInfo> object by calling an overload of the <xref:System.Type.GetProperty%2A?displayProperty=fullName> method.  \n  \n3.  Retrieve the property's attributes from the <xref:System.Reflection.PropertyInfo.Attributes%2A> property.  \n  \n You can define the attributes of a property for a type created dynamically using reflection emit by calling an overload of the <xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A> method and supplying a value for the `attributes` argument.","nodes":[{"pos":[0,605],"content":"The <xref:System.Reflection.PropertyInfo.Attributes%2A> property returns the attributes associated with the property represented by this <xref:System.Reflection.PropertyInfo> object.  The attributes are primarily modifiers applied by a compiler when creating a property; they indicate whether a property is the default property, a `SpecialName` property, and so on. Note that, for almost all properties found in types in the .NET Framework class library, the value of the <xref:System.Reflection.PropertyInfo.Attributes%2A> property is <xref:System.Reflection.PropertyAttributes?displayProperty=fullName>.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Reflection.PropertyInfo.Attributes%2A&gt;</ph> property returns the attributes associated with the property represented by this <ph id=\"ph2\">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> object.","pos":[0,182],"source":"The <xref:System.Reflection.PropertyInfo.Attributes%2A> property returns the attributes associated with the property represented by this <xref:System.Reflection.PropertyInfo> object."},{"content":"The attributes are primarily modifiers applied by a compiler when creating a property; they indicate whether a property is the default property, a <ph id=\"ph1\">`SpecialName`</ph> property, and so on.","pos":[184,365],"source":"  The attributes are primarily modifiers applied by a compiler when creating a property; they indicate whether a property is the default property, a `SpecialName` property, and so on."},{"content":"Note that, for almost all properties found in types in the .NET Framework class library, the value of the <ph id=\"ph1\">&lt;xref:System.Reflection.PropertyInfo.Attributes%2A&gt;</ph> property is <ph id=\"ph2\">&lt;xref:System.Reflection.PropertyAttributes?displayProperty=fullName&gt;</ph>.","pos":[366,605],"source":" Note that, for almost all properties found in types in the .NET Framework class library, the value of the <xref:System.Reflection.PropertyInfo.Attributes%2A> property is <xref:System.Reflection.PropertyAttributes?displayProperty=fullName>."}]},{"pos":[613,924],"content":"[!TIP]\n In most cases, you probably want to retrieve the custom attributes associated with a property. To do this, retrieve the value of the <xref:System.Reflection.MemberInfo.CustomAttributes%2A> property, or call one of the overloads of the <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A> method.","leadings":["","> "],"nodes":[{"content":" In most cases, you probably want to retrieve the custom attributes associated with a property. To do this, retrieve the value of the <xref:System.Reflection.MemberInfo.CustomAttributes%2A> property, or call one of the overloads of the <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A> method.","pos":[7,309],"nodes":[{"content":"In most cases, you probably want to retrieve the custom attributes associated with a property.","pos":[1,95]},{"content":"To do this, retrieve the value of the <ph id=\"ph1\">&lt;xref:System.Reflection.MemberInfo.CustomAttributes%2A&gt;</ph> property, or call one of the overloads of the <ph id=\"ph2\">&lt;xref:System.Reflection.MemberInfo.GetCustomAttributes%2A&gt;</ph> method.","pos":[96,302],"source":" To do this, retrieve the value of the <xref:System.Reflection.MemberInfo.CustomAttributes%2A> property, or call one of the overloads of the <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A> method."}]}]},{"pos":[931,1003],"content":"To get the <xref:System.Reflection.PropertyInfo.Attributes%2A> property:","nodes":[{"content":"To get the <ph id=\"ph1\">&lt;xref:System.Reflection.PropertyInfo.Attributes%2A&gt;</ph> property:","pos":[0,72],"source":"To get the <xref:System.Reflection.PropertyInfo.Attributes%2A> property:"}]},{"pos":[1013,1100],"content":"Get a <xref:System.Type> object that represents the type to which the property belongs.","nodes":[{"content":"Get a <ph id=\"ph1\">&lt;xref:System.Type&gt;</ph> object that represents the type to which the property belongs.","pos":[0,87],"source":"Get a <xref:System.Type> object that represents the type to which the property belongs."}]},{"pos":[1110,1259],"content":"Get the <xref:System.Reflection.PropertyInfo> object by calling an overload of the <xref:System.Type.GetProperty%2A?displayProperty=fullName> method.","nodes":[{"content":"Get the <ph id=\"ph1\">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> object by calling an overload of the <ph id=\"ph2\">&lt;xref:System.Type.GetProperty%2A?displayProperty=fullName&gt;</ph> method.","pos":[0,149],"source":"Get the <xref:System.Reflection.PropertyInfo> object by calling an overload of the <xref:System.Type.GetProperty%2A?displayProperty=fullName> method."}]},{"pos":[1269,1374],"content":"Retrieve the property's attributes from the <xref:System.Reflection.PropertyInfo.Attributes%2A> property.","nodes":[{"content":"Retrieve the property's attributes from the <ph id=\"ph1\">&lt;xref:System.Reflection.PropertyInfo.Attributes%2A&gt;</ph> property.","pos":[0,105],"source":"Retrieve the property's attributes from the <xref:System.Reflection.PropertyInfo.Attributes%2A> property."}]},{"pos":[1381,1627],"content":"You can define the attributes of a property for a type created dynamically using reflection emit by calling an overload of the <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A&gt;</ph> method and supplying a value for the <ph id=\"ph2\">`attributes`</ph> argument.","source":"You can define the attributes of a property for a type created dynamically using reflection emit by calling an overload of the <xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A> method and supplying a value for the `attributes` argument."}],"pos":[12988,14631],"yaml":true,"extradata":"MT"},{"content":"The attributes of this property.","nodes":[{"pos":[0,32],"content":"The attributes of this property.","nodes":[{"content":"The attributes of this property.","pos":[0,32]}]}],"pos":[14807,14840],"yaml":true},{"content":"Gets a value indicating whether the property can be read.","nodes":[{"pos":[0,57],"content":"Gets a value indicating whether the property can be read.","nodes":[{"content":"Gets a value indicating whether the property can be read.","pos":[0,57]}]}],"pos":[16387,16445],"yaml":true},{"content":"If the property does not have a `get` accessor, it cannot be read.  \n  \n To get the `CanRead` property, first get the class `Type`. From the `Type`, get the `PropertyInfo`. From the `PropertyInfo`, get the `CanRead` value.","nodes":[{"pos":[0,66],"content":"If the property does not have a <ph id=\"ph1\">`get`</ph> accessor, it cannot be read.","source":"If the property does not have a `get` accessor, it cannot be read."},{"pos":[73,222],"content":"To get the `CanRead` property, first get the class `Type`. From the `Type`, get the `PropertyInfo`. From the `PropertyInfo`, get the `CanRead` value.","nodes":[{"content":"To get the <ph id=\"ph1\">`CanRead`</ph> property, first get the class <ph id=\"ph2\">`Type`</ph>.","pos":[0,58],"source":"To get the `CanRead` property, first get the class `Type`."},{"content":"From the <ph id=\"ph1\">`Type`</ph>, get the <ph id=\"ph2\">`PropertyInfo`</ph>.","pos":[59,99],"source":" From the `Type`, get the `PropertyInfo`."},{"content":"From the <ph id=\"ph1\">`PropertyInfo`</ph>, get the <ph id=\"ph2\">`CanRead`</ph> value.","pos":[100,149],"source":" From the `PropertyInfo`, get the `CanRead` value."}]}],"pos":[16456,16683],"yaml":true,"extradata":"MT"},{"content":"`true` if this property can be read; otherwise, `false`.","nodes":[{"pos":[0,56],"content":"<ph id=\"ph1\">`true`</ph> if this property can be read; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if this property can be read; otherwise, `false`."}],"pos":[17520,17579],"yaml":true},{"content":"Gets a value indicating whether the property can be written to.","nodes":[{"pos":[0,63],"content":"Gets a value indicating whether the property can be written to.","nodes":[{"content":"Gets a value indicating whether the property can be written to.","pos":[0,63]}]}],"pos":[19129,19193],"yaml":true},{"content":"<xref:System.Reflection.PropertyInfo.CanWrite%2A> returns `true` if the property has a `set` accessor, even if the accessor is `private`, `internal` (or `Friend` in Visual Basic), or `protected`.   If the property does not have a `set` accessor, the method returns `false`.  \n  \n To get the value of the <xref:System.Reflection.PropertyInfo.CanWrite%2A> property:  \n  \n1.  Get the <xref:System.Type> object of the type that includes the property.  \n  \n2.  Call the <xref:System.Type.GetProperty%2A?displayProperty=fullName> to get the <xref:System.Reflection.PropertyInfo> object that represents the property.  \n  \n3.  Retrieve the value of the <xref:System.Reflection.PropertyInfo.CanWrite%2A> property.","nodes":[{"pos":[0,273],"content":"<xref:System.Reflection.PropertyInfo.CanWrite%2A> returns `true` if the property has a `set` accessor, even if the accessor is `private`, `internal` (or `Friend` in Visual Basic), or `protected`.   If the property does not have a `set` accessor, the method returns `false`.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Reflection.PropertyInfo.CanWrite%2A&gt;</ph> returns <ph id=\"ph2\">`true`</ph> if the property has a <ph id=\"ph3\">`set`</ph> accessor, even if the accessor is <ph id=\"ph4\">`private`</ph>, <ph id=\"ph5\">`internal`</ph> (or <ph id=\"ph6\">`Friend`</ph> in Visual Basic), or <ph id=\"ph7\">`protected`</ph>.","pos":[0,195],"source":"<xref:System.Reflection.PropertyInfo.CanWrite%2A> returns `true` if the property has a `set` accessor, even if the accessor is `private`, `internal` (or `Friend` in Visual Basic), or `protected`."},{"content":"If the property does not have a <ph id=\"ph1\">`set`</ph> accessor, the method returns <ph id=\"ph2\">`false`</ph>.","pos":[198,273],"source":"   If the property does not have a `set` accessor, the method returns `false`."}]},{"pos":[280,363],"content":"To get the value of the <xref:System.Reflection.PropertyInfo.CanWrite%2A> property:","nodes":[{"content":"To get the value of the <ph id=\"ph1\">&lt;xref:System.Reflection.PropertyInfo.CanWrite%2A&gt;</ph> property:","pos":[0,83],"source":"To get the value of the <xref:System.Reflection.PropertyInfo.CanWrite%2A> property:"}]},{"pos":[373,446],"content":"Get the <xref:System.Type> object of the type that includes the property.","nodes":[{"content":"Get the <ph id=\"ph1\">&lt;xref:System.Type&gt;</ph> object of the type that includes the property.","pos":[0,73],"source":"Get the <xref:System.Type> object of the type that includes the property."}]},{"pos":[456,609],"content":"Call the <xref:System.Type.GetProperty%2A?displayProperty=fullName> to get the <xref:System.Reflection.PropertyInfo> object that represents the property.","nodes":[{"content":"Call the <ph id=\"ph1\">&lt;xref:System.Type.GetProperty%2A?displayProperty=fullName&gt;</ph> to get the <ph id=\"ph2\">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> object that represents the property.","pos":[0,153],"source":"Call the <xref:System.Type.GetProperty%2A?displayProperty=fullName> to get the <xref:System.Reflection.PropertyInfo> object that represents the property."}]},{"pos":[619,704],"content":"Retrieve the value of the <xref:System.Reflection.PropertyInfo.CanWrite%2A> property.","nodes":[{"content":"Retrieve the value of the <ph id=\"ph1\">&lt;xref:System.Reflection.PropertyInfo.CanWrite%2A&gt;</ph> property.","pos":[0,85],"source":"Retrieve the value of the <xref:System.Reflection.PropertyInfo.CanWrite%2A> property."}]}],"pos":[19204,19919],"yaml":true,"extradata":"MT"},{"content":"`true` if this property can be written to; otherwise, `false`.","nodes":[{"pos":[0,62],"content":"<ph id=\"ph1\">`true`</ph> if this property can be written to; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if this property can be written to; otherwise, `false`."}],"pos":[20767,20832],"yaml":true},{"content":"Returns a value that indicates whether this instance is equal to a specified object.","nodes":[{"pos":[0,84],"content":"Returns a value that indicates whether this instance is equal to a specified object.","nodes":[{"content":"Returns a value that indicates whether this instance is equal to a specified object.","pos":[0,84]}]}],"pos":[22438,22523],"yaml":true},{"content":"An object to compare with this instance, or `null`.","nodes":[{"pos":[0,51],"content":"An object to compare with this instance, or <ph id=\"ph1\">`null`</ph>.","source":"An object to compare with this instance, or `null`."}],"pos":[22663,22715],"yaml":true},{"content":"`true` if <code>obj</code> equals the type and value of this instance; otherwise, `false`.","nodes":[{"pos":[0,90],"content":"<ph id=\"ph1\">`true`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">obj</ph><ept id=\"p1\">&lt;/code&gt;</ept> equals the type and value of this instance; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if <code>obj</code> equals the type and value of this instance; otherwise, `false`."}],"pos":[22773,22866],"yaml":true},{"content":"Returns an array whose elements reflect the public `get` and `set` accessors of the property reflected by the current instance.","nodes":[{"pos":[0,127],"content":"Returns an array whose elements reflect the public <ph id=\"ph1\">`get`</ph> and <ph id=\"ph2\">`set`</ph> accessors of the property reflected by the current instance.","source":"Returns an array whose elements reflect the public `get` and `set` accessors of the property reflected by the current instance."}],"pos":[24443,24571],"yaml":true},{"content":"To call the <xref:System.Reflection.PropertyInfo.GetAccessors%2A> method:  \n  \n1.  Get a <xref:System.Type> object that represents the class.  \n  \n2.  From the <xref:System.Type> object, get the <xref:System.Reflection.PropertyInfo> object.  \n  \n3.  From the <xref:System.Reflection.PropertyInfo> object, call the <xref:System.Reflection.PropertyInfo.GetAccessors%2A> method.","nodes":[{"pos":[0,73],"content":"To call the <xref:System.Reflection.PropertyInfo.GetAccessors%2A> method:","nodes":[{"content":"To call the <ph id=\"ph1\">&lt;xref:System.Reflection.PropertyInfo.GetAccessors%2A&gt;</ph> method:","pos":[0,73],"source":"To call the <xref:System.Reflection.PropertyInfo.GetAccessors%2A> method:"}]},{"pos":[83,141],"content":"Get a <xref:System.Type> object that represents the class.","nodes":[{"content":"Get a <ph id=\"ph1\">&lt;xref:System.Type&gt;</ph> object that represents the class.","pos":[0,58],"source":"Get a <xref:System.Type> object that represents the class."}]},{"pos":[151,240],"content":"From the <xref:System.Type> object, get the <xref:System.Reflection.PropertyInfo> object.","nodes":[{"content":"From the <ph id=\"ph1\">&lt;xref:System.Type&gt;</ph> object, get the <ph id=\"ph2\">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> object.","pos":[0,89],"source":"From the <xref:System.Type> object, get the <xref:System.Reflection.PropertyInfo> object."}]},{"pos":[250,375],"content":"From the <xref:System.Reflection.PropertyInfo> object, call the <xref:System.Reflection.PropertyInfo.GetAccessors%2A> method.","nodes":[{"content":"From the <ph id=\"ph1\">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> object, call the <ph id=\"ph2\">&lt;xref:System.Reflection.PropertyInfo.GetAccessors%2A&gt;</ph> method.","pos":[0,125],"source":"From the <xref:System.Reflection.PropertyInfo> object, call the <xref:System.Reflection.PropertyInfo.GetAccessors%2A> method."}]}],"pos":[24582,24966],"yaml":true,"extradata":"MT"},{"content":"An array of <xref href=\"System.Reflection.MethodInfo\"></xref> objects that reflect the public `get` and `set` accessors of the property reflected by the current instance, if found; otherwise, this method returns an array with zero (0) elements.","nodes":[{"pos":[0,244],"content":"An array of <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph> objects that reflect the public <ph id=\"ph2\">`get`</ph> and <ph id=\"ph3\">`set`</ph> accessors of the property reflected by the current instance, if found; otherwise, this method returns an array with zero (0) elements.","source":"An array of <xref href=\"System.Reflection.MethodInfo\"></xref> objects that reflect the public `get` and `set` accessors of the property reflected by the current instance, if found; otherwise, this method returns an array with zero (0) elements."}],"pos":[25802,26047],"yaml":true},{"content":"Returns an array whose elements reflect the public and, if specified, non-public `get` and `set` accessors of the property reflected by the current instance.","nodes":[{"pos":[0,157],"content":"Returns an array whose elements reflect the public and, if specified, non-public <ph id=\"ph1\">`get`</ph> and <ph id=\"ph2\">`set`</ph> accessors of the property reflected by the current instance.","source":"Returns an array whose elements reflect the public and, if specified, non-public `get` and `set` accessors of the property reflected by the current instance."}],"pos":[27499,27657],"yaml":true},{"content":"To call the <xref:System.Reflection.PropertyInfo.GetAccessors%2A> method:  \n  \n1.  Get a <xref:System.Type> object that represents the class.  \n  \n2.  From the <xref:System.Type> object, get the <xref:System.Reflection.PropertyInfo> object.  \n  \n3.  From the <xref:System.Reflection.PropertyInfo> object, call the <xref:System.Reflection.PropertyInfo.GetAccessors%2A> method.","nodes":[{"pos":[0,73],"content":"To call the <xref:System.Reflection.PropertyInfo.GetAccessors%2A> method:","nodes":[{"content":"To call the <ph id=\"ph1\">&lt;xref:System.Reflection.PropertyInfo.GetAccessors%2A&gt;</ph> method:","pos":[0,73],"source":"To call the <xref:System.Reflection.PropertyInfo.GetAccessors%2A> method:"}]},{"pos":[83,141],"content":"Get a <xref:System.Type> object that represents the class.","nodes":[{"content":"Get a <ph id=\"ph1\">&lt;xref:System.Type&gt;</ph> object that represents the class.","pos":[0,58],"source":"Get a <xref:System.Type> object that represents the class."}]},{"pos":[151,240],"content":"From the <xref:System.Type> object, get the <xref:System.Reflection.PropertyInfo> object.","nodes":[{"content":"From the <ph id=\"ph1\">&lt;xref:System.Type&gt;</ph> object, get the <ph id=\"ph2\">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> object.","pos":[0,89],"source":"From the <xref:System.Type> object, get the <xref:System.Reflection.PropertyInfo> object."}]},{"pos":[250,375],"content":"From the <xref:System.Reflection.PropertyInfo> object, call the <xref:System.Reflection.PropertyInfo.GetAccessors%2A> method.","nodes":[{"content":"From the <ph id=\"ph1\">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> object, call the <ph id=\"ph2\">&lt;xref:System.Reflection.PropertyInfo.GetAccessors%2A&gt;</ph> method.","pos":[0,125],"source":"From the <xref:System.Reflection.PropertyInfo> object, call the <xref:System.Reflection.PropertyInfo.GetAccessors%2A> method."}]}],"pos":[27668,28052],"yaml":true,"extradata":"MT"},{"content":"Indicates whether non-public methods should be returned in the returned array. `true` if non-public methods are to be included; otherwise, `false`.","nodes":[{"pos":[0,147],"content":"Indicates whether non-public methods should be returned in the returned array. `true` if non-public methods are to be included; otherwise, `false`.","nodes":[{"content":"Indicates whether non-public methods should be returned in the returned array.","pos":[0,78]},{"content":"<ph id=\"ph1\">`true`</ph> if non-public methods are to be included; otherwise, <ph id=\"ph2\">`false`</ph>.","pos":[79,147],"source":"`true` if non-public methods are to be included; otherwise, `false`."}]}],"pos":[28891,29039],"yaml":true},{"content":"An array whose elements reflect the `get` and `set` accessors of the property reflected by the current instance. If <code>nonPublic</code> is `true`, this array contains public and non-public `get` and `set` accessors. If <code>nonPublic</code> is `false`, this array contains only public `get` and `set` accessors. If no accessors with the specified visibility are found, this method returns an array with zero (0) elements.","nodes":[{"pos":[0,425],"content":"An array whose elements reflect the `get` and `set` accessors of the property reflected by the current instance. If <code>nonPublic</code> is `true`, this array contains public and non-public `get` and `set` accessors. If <code>nonPublic</code> is `false`, this array contains only public `get` and `set` accessors. If no accessors with the specified visibility are found, this method returns an array with zero (0) elements.","nodes":[{"content":"An array whose elements reflect the <ph id=\"ph1\">`get`</ph> and <ph id=\"ph2\">`set`</ph> accessors of the property reflected by the current instance.","pos":[0,112],"source":"An array whose elements reflect the `get` and `set` accessors of the property reflected by the current instance."},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">nonPublic</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">`true`</ph>, this array contains public and non-public <ph id=\"ph3\">`get`</ph> and <ph id=\"ph4\">`set`</ph> accessors.","pos":[113,218],"source":" If <code>nonPublic</code> is `true`, this array contains public and non-public `get` and `set` accessors."},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">nonPublic</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">`false`</ph>, this array contains only public <ph id=\"ph3\">`get`</ph> and <ph id=\"ph4\">`set`</ph> accessors.","pos":[219,315],"source":" If <code>nonPublic</code> is `false`, this array contains only public `get` and `set` accessors."},{"content":"If no accessors with the specified visibility are found, this method returns an array with zero (0) elements.","pos":[316,425]}]}],"pos":[29113,29539],"yaml":true},{"content":"Returns a literal value associated with the property by a compiler.","nodes":[{"pos":[0,67],"content":"Returns a literal value associated with the property by a compiler.","nodes":[{"content":"Returns a literal value associated with the property by a compiler.","pos":[0,67]}]}],"pos":[30946,31014],"yaml":true},{"content":"This method is provided for designers of managed compilers and code analyzers.  \n  \n> [!NOTE]\n>  Do not use this method in the reflection-only context, because it might cause code to execute. Use the <xref:System.Reflection.PropertyInfo.GetRawConstantValue%2A> method instead.  \n  \n In unmanaged metadata, the Constant table is used to store constant values for fields, parameters, and properties. Constant information does not directly influence runtime behavior. Compilers inspect this information, at compile time, when importing metadata. If used, the value of a constant is embedded in the Microsoft intermediate language (MSIL) stream the compiler emits. There are no MSIL instructions that can be used to access the Constant table at run time.  \n  \n> [!NOTE]\n>  For more information on constant values and the Constant table, see the ECMA Partition II documentation. The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.","nodes":[{"pos":[0,78],"content":"This method is provided for designers of managed compilers and code analyzers.","nodes":[{"content":"This method is provided for designers of managed compilers and code analyzers.","pos":[0,78]}]},{"pos":[86,276],"content":"[!NOTE]\n Do not use this method in the reflection-only context, because it might cause code to execute. Use the <xref:System.Reflection.PropertyInfo.GetRawConstantValue%2A> method instead.","leadings":["","> "],"nodes":[{"content":" Do not use this method in the reflection-only context, because it might cause code to execute. Use the <xref:System.Reflection.PropertyInfo.GetRawConstantValue%2A> method instead.","pos":[8,188],"nodes":[{"content":"Do not use this method in the reflection-only context, because it might cause code to execute.","pos":[1,95]},{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Reflection.PropertyInfo.GetRawConstantValue%2A&gt;</ph> method instead.","pos":[96,180],"source":" Use the <xref:System.Reflection.PropertyInfo.GetRawConstantValue%2A> method instead."}]}]},{"pos":[283,750],"content":"In unmanaged metadata, the Constant table is used to store constant values for fields, parameters, and properties. Constant information does not directly influence runtime behavior. Compilers inspect this information, at compile time, when importing metadata. If used, the value of a constant is embedded in the Microsoft intermediate language (MSIL) stream the compiler emits. There are no MSIL instructions that can be used to access the Constant table at run time.","nodes":[{"content":"In unmanaged metadata, the Constant table is used to store constant values for fields, parameters, and properties. Constant information does not directly influence runtime behavior. Compilers inspect this information, at compile time, when importing metadata. If used, the value of a constant is embedded in the Microsoft intermediate language (MSIL) stream the compiler emits. There are no MSIL instructions that can be used to access the Constant table at run time.","pos":[0,467],"nodes":[{"content":"In unmanaged metadata, the Constant table is used to store constant values for fields, parameters, and properties.","pos":[0,114]},{"content":"Constant information does not directly influence runtime behavior.","pos":[115,181]},{"content":"Compilers inspect this information, at compile time, when importing metadata.","pos":[182,259]},{"content":"If used, the value of a constant is embedded in the Microsoft intermediate language (MSIL) stream the compiler emits.","pos":[260,377]},{"content":"There are no MSIL instructions that can be used to access the Constant table at run time.","pos":[378,467]}]}]},{"pos":[758,1170],"content":"[!NOTE]\n For more information on constant values and the Constant table, see the ECMA Partition II documentation. The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.","leadings":["","> "],"nodes":[{"content":" For more information on constant values and the Constant table, see the ECMA Partition II documentation. The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.","pos":[8,410],"nodes":[{"content":"For more information on constant values and the Constant table, see the ECMA Partition II documentation.","pos":[1,105]},{"content":"The documentation is available online; see <bpt id=\"p1\">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id=\"p2\">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id=\"p2\">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.","pos":[106,402],"source":" The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site."}]}]}],"pos":[31025,32206],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Object\"></xref> that contains the literal value associated with the property. If the literal value is a class type with an element value of zero, the return value is `null`.","nodes":[{"pos":[0,195],"content":"An <xref href=\"System.Object\"></xref> that contains the literal value associated with the property. If the literal value is a class type with an element value of zero, the return value is `null`.","nodes":[{"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Object\"&gt;&lt;/xref&gt;</ph> that contains the literal value associated with the property.","pos":[0,99],"source":"An <xref href=\"System.Object\"></xref> that contains the literal value associated with the property."},{"content":"If the literal value is a class type with an element value of zero, the return value is <ph id=\"ph1\">`null`</ph>.","pos":[100,195],"source":" If the literal value is a class type with an element value of zero, the return value is `null`."}]}],"pos":[32348,32544],"yaml":true},{"content":"The Constant table in unmanaged metadata does not contain a constant value for the current property.","nodes":[{"pos":[0,100],"content":"The Constant table in unmanaged metadata does not contain a constant value for the current property.","nodes":[{"content":"The Constant table in unmanaged metadata does not contain a constant value for the current property.","pos":[0,100]}]}],"pos":[32729,32830],"yaml":true},{"content":"The type of the value is not one of the types permitted by the Common Language Specification (CLS). See the ECMA Partition II specification, Metadata.","nodes":[{"pos":[0,150],"content":"The type of the value is not one of the types permitted by the Common Language Specification (CLS). See the ECMA Partition II specification, Metadata.","nodes":[{"content":"The type of the value is not one of the types permitted by the Common Language Specification (CLS). See the ECMA Partition II specification, Metadata.","pos":[0,150],"nodes":[{"content":"The type of the value is not one of the types permitted by the Common Language Specification (CLS).","pos":[0,99]},{"content":"See the ECMA Partition II specification, Metadata.","pos":[100,150]}]}]}],"pos":[32920,33071],"yaml":true},{"content":"Returns the public `get` accessor for this property.","nodes":[{"pos":[0,52],"content":"Returns the public <ph id=\"ph1\">`get`</ph> accessor for this property.","source":"Returns the public `get` accessor for this property."}],"pos":[34580,34633],"yaml":true},{"content":"This is a convenience method that provides an implementation for the abstract `GetGetMethod` method with the `nonPublic` parameter set to `false`.  \n  \n To use the `GetGetMethod` method, first get the class `Type`. From the `Type`, get the <xref:System.Reflection.PropertyInfo>. From the <xref:System.Reflection.PropertyInfo>, use the `GetGetMethod` method.","nodes":[{"pos":[0,146],"content":"This is a convenience method that provides an implementation for the abstract <ph id=\"ph1\">`GetGetMethod`</ph> method with the <ph id=\"ph2\">`nonPublic`</ph> parameter set to <ph id=\"ph3\">`false`</ph>.","source":"This is a convenience method that provides an implementation for the abstract `GetGetMethod` method with the `nonPublic` parameter set to `false`."},{"pos":[153,357],"content":"To use the `GetGetMethod` method, first get the class `Type`. From the `Type`, get the <xref:System.Reflection.PropertyInfo>. From the <xref:System.Reflection.PropertyInfo>, use the `GetGetMethod` method.","nodes":[{"content":"To use the <ph id=\"ph1\">`GetGetMethod`</ph> method, first get the class <ph id=\"ph2\">`Type`</ph>.","pos":[0,61],"source":"To use the `GetGetMethod` method, first get the class `Type`."},{"content":"From the <ph id=\"ph1\">`Type`</ph>, get the <ph id=\"ph2\">&lt;xref:System.Reflection.PropertyInfo&gt;</ph>.","pos":[62,125],"source":" From the `Type`, get the <xref:System.Reflection.PropertyInfo>."},{"content":"From the <ph id=\"ph1\">&lt;xref:System.Reflection.PropertyInfo&gt;</ph>, use the <ph id=\"ph2\">`GetGetMethod`</ph> method.","pos":[126,204],"source":" From the <xref:System.Reflection.PropertyInfo>, use the `GetGetMethod` method."}]}],"pos":[34644,35006],"yaml":true,"extradata":"MT"},{"content":"A `MethodInfo` object representing the public `get` accessor for this property, or `null` if the `get` accessor is non-public or does not exist.","nodes":[{"pos":[0,144],"content":"A <ph id=\"ph1\">`MethodInfo`</ph> object representing the public <ph id=\"ph2\">`get`</ph> accessor for this property, or <ph id=\"ph3\">`null`</ph> if the <ph id=\"ph4\">`get`</ph> accessor is non-public or does not exist.","source":"A `MethodInfo` object representing the public `get` accessor for this property, or `null` if the `get` accessor is non-public or does not exist."}],"pos":[35173,35318],"yaml":true},{"content":"When overridden in a derived class, returns the public or non-public `get` accessor for this property.","nodes":[{"pos":[0,102],"content":"When overridden in a derived class, returns the public or non-public <ph id=\"ph1\">`get`</ph> accessor for this property.","source":"When overridden in a derived class, returns the public or non-public `get` accessor for this property."}],"pos":[36770,36873],"yaml":true},{"content":"This property is the <xref:System.Reflection.MethodInfo> representing the get accessor.  \n  \n To use the `GetGetMethod` method, first get the class `Type`. From the `Type`, get the <xref:System.Reflection.PropertyInfo>. From the <xref:System.Reflection.PropertyInfo>, use the `GetGetMethod` method.","nodes":[{"pos":[0,87],"content":"This property is the <xref:System.Reflection.MethodInfo> representing the get accessor.","nodes":[{"content":"This property is the <ph id=\"ph1\">&lt;xref:System.Reflection.MethodInfo&gt;</ph> representing the get accessor.","pos":[0,87],"source":"This property is the <xref:System.Reflection.MethodInfo> representing the get accessor."}]},{"pos":[94,298],"content":"To use the `GetGetMethod` method, first get the class `Type`. From the `Type`, get the <xref:System.Reflection.PropertyInfo>. From the <xref:System.Reflection.PropertyInfo>, use the `GetGetMethod` method.","nodes":[{"content":"To use the <ph id=\"ph1\">`GetGetMethod`</ph> method, first get the class <ph id=\"ph2\">`Type`</ph>.","pos":[0,61],"source":"To use the `GetGetMethod` method, first get the class `Type`."},{"content":"From the <ph id=\"ph1\">`Type`</ph>, get the <ph id=\"ph2\">&lt;xref:System.Reflection.PropertyInfo&gt;</ph>.","pos":[62,125],"source":" From the `Type`, get the <xref:System.Reflection.PropertyInfo>."},{"content":"From the <ph id=\"ph1\">&lt;xref:System.Reflection.PropertyInfo&gt;</ph>, use the <ph id=\"ph2\">`GetGetMethod`</ph> method.","pos":[126,204],"source":" From the <xref:System.Reflection.PropertyInfo>, use the `GetGetMethod` method."}]}],"pos":[36884,37187],"yaml":true,"extradata":"MT"},{"content":"Indicates whether a non-public `get` accessor should be returned. `true` if a non-public accessor is to be returned; otherwise, `false`.","nodes":[{"pos":[0,136],"content":"Indicates whether a non-public `get` accessor should be returned. `true` if a non-public accessor is to be returned; otherwise, `false`.","nodes":[{"content":"Indicates whether a non-public <ph id=\"ph1\">`get`</ph> accessor should be returned.","pos":[0,65],"source":"Indicates whether a non-public `get` accessor should be returned."},{"content":"<ph id=\"ph1\">`true`</ph> if a non-public accessor is to be returned; otherwise, <ph id=\"ph2\">`false`</ph>.","pos":[66,136],"source":"`true` if a non-public accessor is to be returned; otherwise, `false`."}]}],"pos":[38003,38140],"yaml":true},{"content":"A `MethodInfo` object representing the `get` accessor for this property, if <code>nonPublic</code> is `true`. Returns `null` if <code>nonPublic</code> is `false` and the `get` accessor is non-public, or if <code>nonPublic</code> is `true` but no `get` accessors exist.","nodes":[{"pos":[0,268],"content":"A `MethodInfo` object representing the `get` accessor for this property, if <code>nonPublic</code> is `true`. Returns `null` if <code>nonPublic</code> is `false` and the `get` accessor is non-public, or if <code>nonPublic</code> is `true` but no `get` accessors exist.","nodes":[{"content":"A <ph id=\"ph1\">`MethodInfo`</ph> object representing the <ph id=\"ph2\">`get`</ph> accessor for this property, if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph3\">nonPublic</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph4\">`true`</ph>.","pos":[0,109],"source":"A `MethodInfo` object representing the `get` accessor for this property, if <code>nonPublic</code> is `true`."},{"content":"Returns <ph id=\"ph1\">`null`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">nonPublic</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph3\">`false`</ph> and the <ph id=\"ph4\">`get`</ph> accessor is non-public, or if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph5\">nonPublic</ph><ept id=\"p2\">&lt;/code&gt;</ept> is <ph id=\"ph6\">`true`</ph> but no <ph id=\"ph7\">`get`</ph> accessors exist.","pos":[110,268],"source":" Returns `null` if <code>nonPublic</code> is `false` and the `get` accessor is non-public, or if <code>nonPublic</code> is `true` but no `get` accessors exist."}]}],"pos":[38212,38481],"yaml":true},{"content":"The requested method is non-public and the caller does not have <xref href=\"System.Security.Permissions.ReflectionPermission\"></xref> to reflect on this non-public method.","nodes":[{"pos":[0,171],"content":"The requested method is non-public and the caller does not have <ph id=\"ph1\">&lt;xref href=\"System.Security.Permissions.ReflectionPermission\"&gt;&lt;/xref&gt;</ph> to reflect on this non-public method.","source":"The requested method is non-public and the caller does not have <xref href=\"System.Security.Permissions.ReflectionPermission\"></xref> to reflect on this non-public method."}],"pos":[38664,38836],"yaml":true},{"content":"Returns the hash code for this instance.","nodes":[{"pos":[0,40],"content":"Returns the hash code for this instance.","nodes":[{"content":"Returns the hash code for this instance.","pos":[0,40]}]}],"pos":[40139,40180],"yaml":true},{"content":"A 32-bit signed integer hash code.","nodes":[{"pos":[0,34],"content":"A 32-bit signed integer hash code.","nodes":[{"content":"A 32-bit signed integer hash code.","pos":[0,34]}]}],"pos":[40314,40349],"yaml":true},{"content":"When overridden in a derived class, returns an array of all the index parameters for the property.","nodes":[{"pos":[0,98],"content":"When overridden in a derived class, returns an array of all the index parameters for the property.","nodes":[{"content":"When overridden in a derived class, returns an array of all the index parameters for the property.","pos":[0,98]}]}],"pos":[41967,42066],"yaml":true},{"content":"Extract any required parameter information from the returned array.  \n  \n To use the `GetIndexParameters` method, first get the class `Type`. From the `Type`, get the `PropertyInfo`. From the `PropertyInfo`, use the `GetIndexParameters` method.","nodes":[{"pos":[0,67],"content":"Extract any required parameter information from the returned array.","nodes":[{"content":"Extract any required parameter information from the returned array.","pos":[0,67]}]},{"pos":[74,244],"content":"To use the `GetIndexParameters` method, first get the class `Type`. From the `Type`, get the `PropertyInfo`. From the `PropertyInfo`, use the `GetIndexParameters` method.","nodes":[{"content":"To use the <ph id=\"ph1\">`GetIndexParameters`</ph> method, first get the class <ph id=\"ph2\">`Type`</ph>.","pos":[0,67],"source":"To use the `GetIndexParameters` method, first get the class `Type`."},{"content":"From the <ph id=\"ph1\">`Type`</ph>, get the <ph id=\"ph2\">`PropertyInfo`</ph>.","pos":[68,108],"source":" From the `Type`, get the `PropertyInfo`."},{"content":"From the <ph id=\"ph1\">`PropertyInfo`</ph>, use the <ph id=\"ph2\">`GetIndexParameters`</ph> method.","pos":[109,170],"source":" From the `PropertyInfo`, use the `GetIndexParameters` method."}]}],"pos":[42077,42326],"yaml":true,"extradata":"MT"},{"content":"An array of type `ParameterInfo` containing the parameters for the indexes. If the property is not indexed, the array has 0 (zero) elements.","nodes":[{"pos":[0,140],"content":"An array of type `ParameterInfo` containing the parameters for the indexes. If the property is not indexed, the array has 0 (zero) elements.","nodes":[{"content":"An array of type <ph id=\"ph1\">`ParameterInfo`</ph> containing the parameters for the indexes.","pos":[0,75],"source":"An array of type `ParameterInfo` containing the parameters for the indexes."},{"content":"If the property is not indexed, the array has 0 (zero) elements.","pos":[76,140]}]}],"pos":[43163,43304],"yaml":true},{"content":"Gets the `get` accessor for this property.","nodes":[{"pos":[0,42],"content":"Gets the <ph id=\"ph1\">`get`</ph> accessor for this property.","source":"Gets the `get` accessor for this property."}],"pos":[44871,44914],"yaml":true},{"content":"The `get` accessor for this property.","nodes":[{"pos":[0,37],"content":"The <ph id=\"ph1\">`get`</ph> accessor for this property.","source":"The `get` accessor for this property."}],"pos":[45072,45110],"yaml":true},{"content":"Returns an array of types representing the optional custom modifiers of the property.","nodes":[{"pos":[0,85],"content":"Returns an array of types representing the optional custom modifiers of the property.","nodes":[{"content":"Returns an array of types representing the optional custom modifiers of the property.","pos":[0,85]}]}],"pos":[46774,46860],"yaml":true},{"content":"The <xref:System.Reflection.PropertyInfo.GetOptionalCustomModifiers%2A> and <xref:System.Reflection.PropertyInfo.GetRequiredCustomModifiers%2A> methods are provided for designers of managed compilers. For more information on custom modifiers, see <xref:System.Runtime.CompilerServices.IsBoxed> and related classes in the <xref:System.Runtime.CompilerServices> namespace and the metadata specification in the ECMA Partition II documentation. The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.","nodes":[{"pos":[0,737],"content":"The <xref:System.Reflection.PropertyInfo.GetOptionalCustomModifiers%2A> and <xref:System.Reflection.PropertyInfo.GetRequiredCustomModifiers%2A> methods are provided for designers of managed compilers. For more information on custom modifiers, see <xref:System.Runtime.CompilerServices.IsBoxed> and related classes in the <xref:System.Runtime.CompilerServices> namespace and the metadata specification in the ECMA Partition II documentation. The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Reflection.PropertyInfo.GetOptionalCustomModifiers%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Reflection.PropertyInfo.GetRequiredCustomModifiers%2A&gt;</ph> methods are provided for designers of managed compilers.","pos":[0,200],"source":"The <xref:System.Reflection.PropertyInfo.GetOptionalCustomModifiers%2A> and <xref:System.Reflection.PropertyInfo.GetRequiredCustomModifiers%2A> methods are provided for designers of managed compilers."},{"content":"For more information on custom modifiers, see <ph id=\"ph1\">&lt;xref:System.Runtime.CompilerServices.IsBoxed&gt;</ph> and related classes in the <ph id=\"ph2\">&lt;xref:System.Runtime.CompilerServices&gt;</ph> namespace and the metadata specification in the ECMA Partition II documentation.","pos":[201,440],"source":" For more information on custom modifiers, see <xref:System.Runtime.CompilerServices.IsBoxed> and related classes in the <xref:System.Runtime.CompilerServices> namespace and the metadata specification in the ECMA Partition II documentation."},{"content":"The documentation is available online; see <bpt id=\"p1\">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id=\"p2\">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id=\"p2\">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.","pos":[441,737],"source":" The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site."}]}],"pos":[46871,47609],"yaml":true,"extradata":"MT"},{"content":"An array of <xref href=\"System.Type\"></xref> objects that identify the optional custom modifiers of the current property, such as <xref href=\"System.Runtime.CompilerServices.IsConst\"></xref> or <xref href=\"System.Runtime.CompilerServices.IsImplicitlyDereferenced\"></xref>.","nodes":[{"pos":[0,272],"content":"An array of <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> objects that identify the optional custom modifiers of the current property, such as <ph id=\"ph2\">&lt;xref href=\"System.Runtime.CompilerServices.IsConst\"&gt;&lt;/xref&gt;</ph> or <ph id=\"ph3\">&lt;xref href=\"System.Runtime.CompilerServices.IsImplicitlyDereferenced\"&gt;&lt;/xref&gt;</ph>.","source":"An array of <xref href=\"System.Type\"></xref> objects that identify the optional custom modifiers of the current property, such as <xref href=\"System.Runtime.CompilerServices.IsConst\"></xref> or <xref href=\"System.Runtime.CompilerServices.IsImplicitlyDereferenced\"></xref>."}],"pos":[47761,48034],"yaml":true},{"content":"Returns a literal value associated with the property by a compiler.","nodes":[{"pos":[0,67],"content":"Returns a literal value associated with the property by a compiler.","nodes":[{"content":"Returns a literal value associated with the property by a compiler.","pos":[0,67]}]}],"pos":[49473,49541],"yaml":true},{"content":"This method is provided for designers of managed compilers and code analyzers.  \n  \n This method can be used in both the execution context and the reflection-only context.  \n  \n In unmanaged metadata, the Constant table is used to store constant values for fields, parameters, and properties. Constant information does not directly influence runtime behavior. Compilers inspect this information, at compile time, when importing metadata. If used, the value of a constant is embedded in the Microsoft intermediate language (MSIL) stream the compiler emits. There are no MSIL instructions that can be used to access the Constant table at run time.  \n  \n> [!NOTE]\n>  For more information on constant values and the Constant table, see the ECMA Partition II documentation. The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.","nodes":[{"pos":[0,78],"content":"This method is provided for designers of managed compilers and code analyzers.","nodes":[{"content":"This method is provided for designers of managed compilers and code analyzers.","pos":[0,78]}]},{"pos":[85,171],"content":"This method can be used in both the execution context and the reflection-only context.","nodes":[{"content":"This method can be used in both the execution context and the reflection-only context.","pos":[0,86]}]},{"pos":[178,645],"content":"In unmanaged metadata, the Constant table is used to store constant values for fields, parameters, and properties. Constant information does not directly influence runtime behavior. Compilers inspect this information, at compile time, when importing metadata. If used, the value of a constant is embedded in the Microsoft intermediate language (MSIL) stream the compiler emits. There are no MSIL instructions that can be used to access the Constant table at run time.","nodes":[{"content":"In unmanaged metadata, the Constant table is used to store constant values for fields, parameters, and properties. Constant information does not directly influence runtime behavior. Compilers inspect this information, at compile time, when importing metadata. If used, the value of a constant is embedded in the Microsoft intermediate language (MSIL) stream the compiler emits. There are no MSIL instructions that can be used to access the Constant table at run time.","pos":[0,467],"nodes":[{"content":"In unmanaged metadata, the Constant table is used to store constant values for fields, parameters, and properties.","pos":[0,114]},{"content":"Constant information does not directly influence runtime behavior.","pos":[115,181]},{"content":"Compilers inspect this information, at compile time, when importing metadata.","pos":[182,259]},{"content":"If used, the value of a constant is embedded in the Microsoft intermediate language (MSIL) stream the compiler emits.","pos":[260,377]},{"content":"There are no MSIL instructions that can be used to access the Constant table at run time.","pos":[378,467]}]}]},{"pos":[653,1065],"content":"[!NOTE]\n For more information on constant values and the Constant table, see the ECMA Partition II documentation. The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.","leadings":["","> "],"nodes":[{"content":" For more information on constant values and the Constant table, see the ECMA Partition II documentation. The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.","pos":[8,410],"nodes":[{"content":"For more information on constant values and the Constant table, see the ECMA Partition II documentation.","pos":[1,105]},{"content":"The documentation is available online; see <bpt id=\"p1\">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id=\"p2\">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id=\"p2\">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.","pos":[106,402],"source":" The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site."}]}]}],"pos":[49552,50627],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Object\"></xref> that contains the literal value associated with the property. If the literal value is a class type with an element value of zero, the return value is `null`.","nodes":[{"pos":[0,195],"content":"An <xref href=\"System.Object\"></xref> that contains the literal value associated with the property. If the literal value is a class type with an element value of zero, the return value is `null`.","nodes":[{"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Object\"&gt;&lt;/xref&gt;</ph> that contains the literal value associated with the property.","pos":[0,99],"source":"An <xref href=\"System.Object\"></xref> that contains the literal value associated with the property."},{"content":"If the literal value is a class type with an element value of zero, the return value is <ph id=\"ph1\">`null`</ph>.","pos":[100,195],"source":" If the literal value is a class type with an element value of zero, the return value is `null`."}]}],"pos":[50772,50968],"yaml":true},{"content":"The Constant table in unmanaged metadata does not contain a constant value for the current property.","nodes":[{"pos":[0,100],"content":"The Constant table in unmanaged metadata does not contain a constant value for the current property.","nodes":[{"content":"The Constant table in unmanaged metadata does not contain a constant value for the current property.","pos":[0,100]}]}],"pos":[51156,51257],"yaml":true},{"content":"The type of the value is not one of the types permitted by the Common Language Specification (CLS). See the ECMA Partition II specification, Metadata Logical Format: Other Structures, Element Types used in Signatures.","nodes":[{"pos":[0,217],"content":"The type of the value is not one of the types permitted by the Common Language Specification (CLS). See the ECMA Partition II specification, Metadata Logical Format: Other Structures, Element Types used in Signatures.","nodes":[{"content":"The type of the value is not one of the types permitted by the Common Language Specification (CLS). See the ECMA Partition II specification, Metadata Logical Format: Other Structures, Element Types used in Signatures.","pos":[0,217],"nodes":[{"content":"The type of the value is not one of the types permitted by the Common Language Specification (CLS).","pos":[0,99]},{"content":"See the ECMA Partition II specification, Metadata Logical Format: Other Structures, Element Types used in Signatures.","pos":[100,217]}]}]}],"pos":[51347,51567],"yaml":true},{"content":"Returns an array of types representing the required custom modifiers of the property.","nodes":[{"pos":[0,85],"content":"Returns an array of types representing the required custom modifiers of the property.","nodes":[{"content":"Returns an array of types representing the required custom modifiers of the property.","pos":[0,85]}]}],"pos":[52960,53046],"yaml":true},{"content":"The <xref:System.Reflection.PropertyInfo.GetOptionalCustomModifiers%2A> and <xref:System.Reflection.PropertyInfo.GetRequiredCustomModifiers%2A> methods are provided for designers of managed compilers. For more information on custom modifiers, see <xref:System.Runtime.CompilerServices.IsBoxed> and related classes in the <xref:System.Runtime.CompilerServices> namespace and the metadata specification in the ECMA Partition II documentation. The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.","nodes":[{"pos":[0,737],"content":"The <xref:System.Reflection.PropertyInfo.GetOptionalCustomModifiers%2A> and <xref:System.Reflection.PropertyInfo.GetRequiredCustomModifiers%2A> methods are provided for designers of managed compilers. For more information on custom modifiers, see <xref:System.Runtime.CompilerServices.IsBoxed> and related classes in the <xref:System.Runtime.CompilerServices> namespace and the metadata specification in the ECMA Partition II documentation. The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Reflection.PropertyInfo.GetOptionalCustomModifiers%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Reflection.PropertyInfo.GetRequiredCustomModifiers%2A&gt;</ph> methods are provided for designers of managed compilers.","pos":[0,200],"source":"The <xref:System.Reflection.PropertyInfo.GetOptionalCustomModifiers%2A> and <xref:System.Reflection.PropertyInfo.GetRequiredCustomModifiers%2A> methods are provided for designers of managed compilers."},{"content":"For more information on custom modifiers, see <ph id=\"ph1\">&lt;xref:System.Runtime.CompilerServices.IsBoxed&gt;</ph> and related classes in the <ph id=\"ph2\">&lt;xref:System.Runtime.CompilerServices&gt;</ph> namespace and the metadata specification in the ECMA Partition II documentation.","pos":[201,440],"source":" For more information on custom modifiers, see <xref:System.Runtime.CompilerServices.IsBoxed> and related classes in the <xref:System.Runtime.CompilerServices> namespace and the metadata specification in the ECMA Partition II documentation."},{"content":"The documentation is available online; see <bpt id=\"p1\">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id=\"p2\">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id=\"p2\">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.","pos":[441,737],"source":" The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site."}]}],"pos":[53057,53795],"yaml":true,"extradata":"MT"},{"content":"An array of <xref href=\"System.Type\"></xref> objects that identify the required custom modifiers of the current property, such as <xref href=\"System.Runtime.CompilerServices.IsConst\"></xref> or <xref href=\"System.Runtime.CompilerServices.IsImplicitlyDereferenced\"></xref>.","nodes":[{"pos":[0,272],"content":"An array of <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> objects that identify the required custom modifiers of the current property, such as <ph id=\"ph2\">&lt;xref href=\"System.Runtime.CompilerServices.IsConst\"&gt;&lt;/xref&gt;</ph> or <ph id=\"ph3\">&lt;xref href=\"System.Runtime.CompilerServices.IsImplicitlyDereferenced\"&gt;&lt;/xref&gt;</ph>.","source":"An array of <xref href=\"System.Type\"></xref> objects that identify the required custom modifiers of the current property, such as <xref href=\"System.Runtime.CompilerServices.IsConst\"></xref> or <xref href=\"System.Runtime.CompilerServices.IsImplicitlyDereferenced\"></xref>."}],"pos":[53947,54220],"yaml":true},{"content":"When overridden in a derived class, returns the `set` accessor for this property.","nodes":[{"pos":[0,81],"content":"When overridden in a derived class, returns the <ph id=\"ph1\">`set`</ph> accessor for this property.","source":"When overridden in a derived class, returns the `set` accessor for this property."}],"pos":[55686,55768],"yaml":true},{"content":"To use the `GetSetMethod` method, first get the class `Type`. From the `Type`, get the <xref:System.Reflection.PropertyInfo>. From the `PropertyInfo`, use the `GetSetMethod` method.","nodes":[{"pos":[0,181],"content":"To use the `GetSetMethod` method, first get the class `Type`. From the `Type`, get the <xref:System.Reflection.PropertyInfo>. From the `PropertyInfo`, use the `GetSetMethod` method.","nodes":[{"content":"To use the <ph id=\"ph1\">`GetSetMethod`</ph> method, first get the class <ph id=\"ph2\">`Type`</ph>.","pos":[0,61],"source":"To use the `GetSetMethod` method, first get the class `Type`."},{"content":"From the <ph id=\"ph1\">`Type`</ph>, get the <ph id=\"ph2\">&lt;xref:System.Reflection.PropertyInfo&gt;</ph>.","pos":[62,125],"source":" From the `Type`, get the <xref:System.Reflection.PropertyInfo>."},{"content":"From the <ph id=\"ph1\">`PropertyInfo`</ph>, use the <ph id=\"ph2\">`GetSetMethod`</ph> method.","pos":[126,181],"source":" From the `PropertyInfo`, use the `GetSetMethod` method."}]}],"pos":[55779,55961],"yaml":true,"extradata":"MT"},{"content":"Indicates whether the accessor should be returned if it is non-public. `true` if a non-public accessor is to be returned; otherwise, `false`.","nodes":[{"pos":[0,141],"content":"Indicates whether the accessor should be returned if it is non-public. `true` if a non-public accessor is to be returned; otherwise, `false`.","nodes":[{"content":"Indicates whether the accessor should be returned if it is non-public.","pos":[0,70]},{"content":"<ph id=\"ph1\">`true`</ph> if a non-public accessor is to be returned; otherwise, <ph id=\"ph2\">`false`</ph>.","pos":[71,141],"source":"`true` if a non-public accessor is to be returned; otherwise, `false`."}]}],"pos":[56756,56898],"yaml":true},{"content":"This property's `Set` method, or `null`, as shown in the following table.  \n  \n <table><thead><tr><th> Value  \n  \n </th><th> Condition  \n  \n </th></tr></thead><tbody><tr><td> The `Set` method for this property.  \n  \n </td><td> The `set` accessor is public.  \n  \n -or-  \n  \n <code>nonPublic</code> is `true` and the `set` accessor is non-public.  \n  \n </td></tr><tr><td>`null`</td><td><code>nonPublic</code> is `true`, but the property is read-only.  \n  \n -or-  \n  \n <code>nonPublic</code> is `false` and the `set` accessor is non-public.  \n  \n -or-  \n  \n There is no `set` accessor.  \n  \n </td></tr></tbody></table>","nodes":[{"pos":[0,73],"content":"This property's <ph id=\"ph1\">`Set`</ph> method, or <ph id=\"ph2\">`null`</ph>, as shown in the following table.","source":"This property's `Set` method, or `null`, as shown in the following table."},{"pos":[80,256],"content":"<table><thead><tr><th> Value  \n  \n </th><th> Condition  \n  \n </th></tr></thead><tbody><tr><td> The `Set` method for this property.  \n  \n </td><td> The `set` accessor is public.","nodes":[{"content":"Value","pos":[23,33],"source":" Value  \n  \n "},{"content":"Condition","pos":[45,59],"source":" Condition  \n  \n "},{"content":" The `Set` method for this property.  \n  \n ","pos":[94,137],"nodes":[{"content":"The <ph id=\"ph1\">`Set`</ph> method for this property.","pos":[1,36],"source":" The `Set` method for this property."}]},{"content":"The <ph id=\"ph1\">`set`</ph> accessor is public.","pos":[147,176],"source":" The `set` accessor is public."}]},{"pos":[263,267],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[274,448],"content":"<code>nonPublic</code> is `true` and the `set` accessor is non-public.  \n  \n </td></tr><tr><td>`null`</td><td><code>nonPublic</code> is `true`, but the property is read-only.","nodes":[{"content":"<code>nonPublic</code> is `true` and the `set` accessor is non-public.  \n  \n ","pos":[0,77],"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;nonPublic&lt;/code&gt;</ph> is <ph id=\"ph2\">`true`</ph> and the <ph id=\"ph3\">`set`</ph> accessor is non-public.","pos":[0,70],"source":"<code>nonPublic</code> is `true` and the `set` accessor is non-public."}]},{"content":"<ph id=\"ph1\">&lt;code&gt;nonPublic&lt;/code&gt;</ph> is <ph id=\"ph2\">`true`</ph>, but the property is read-only.","pos":[110,174],"source":"<code>nonPublic</code> is `true`, but the property is read-only."}]},{"pos":[455,459],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[466,537],"content":"<ph id=\"ph1\">&lt;code&gt;nonPublic&lt;/code&gt;</ph> is <ph id=\"ph2\">`false`</ph> and the <ph id=\"ph3\">`set`</ph> accessor is non-public.","source":"<code>nonPublic</code> is `false` and the `set` accessor is non-public."},{"pos":[544,548],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[555,582],"content":"There is no <ph id=\"ph1\">`set`</ph> accessor.","source":"There is no `set` accessor."}],"pos":[56970,57612],"yaml":true},{"content":"The requested method is non-public and the caller does not have <xref href=\"System.Security.Permissions.ReflectionPermission\"></xref> to reflect on this non-public method.","nodes":[{"pos":[0,171],"content":"The requested method is non-public and the caller does not have <ph id=\"ph1\">&lt;xref href=\"System.Security.Permissions.ReflectionPermission\"&gt;&lt;/xref&gt;</ph> to reflect on this non-public method.","source":"The requested method is non-public and the caller does not have <xref href=\"System.Security.Permissions.ReflectionPermission\"></xref> to reflect on this non-public method."}],"pos":[57795,57967],"yaml":true},{"content":"Returns the public `set` accessor for this property.","nodes":[{"pos":[0,52],"content":"Returns the public <ph id=\"ph1\">`set`</ph> accessor for this property.","source":"Returns the public `set` accessor for this property."}],"pos":[59276,59329],"yaml":true},{"content":"This is a convenience method that provides an implementation for the abstract `GetSetMethod` method with the `nonPublic` parameter set to `false`.  \n  \n To use the `GetSetMethod` method, first get the class `Type`. From the `Type`, get the <xref:System.Reflection.PropertyInfo>. From the `PropertyInfo`, use the `GetSetMethod` method.","nodes":[{"pos":[0,146],"content":"This is a convenience method that provides an implementation for the abstract <ph id=\"ph1\">`GetSetMethod`</ph> method with the <ph id=\"ph2\">`nonPublic`</ph> parameter set to <ph id=\"ph3\">`false`</ph>.","source":"This is a convenience method that provides an implementation for the abstract `GetSetMethod` method with the `nonPublic` parameter set to `false`."},{"pos":[153,334],"content":"To use the `GetSetMethod` method, first get the class `Type`. From the `Type`, get the <xref:System.Reflection.PropertyInfo>. From the `PropertyInfo`, use the `GetSetMethod` method.","nodes":[{"content":"To use the <ph id=\"ph1\">`GetSetMethod`</ph> method, first get the class <ph id=\"ph2\">`Type`</ph>.","pos":[0,61],"source":"To use the `GetSetMethod` method, first get the class `Type`."},{"content":"From the <ph id=\"ph1\">`Type`</ph>, get the <ph id=\"ph2\">&lt;xref:System.Reflection.PropertyInfo&gt;</ph>.","pos":[62,125],"source":" From the `Type`, get the <xref:System.Reflection.PropertyInfo>."},{"content":"From the <ph id=\"ph1\">`PropertyInfo`</ph>, use the <ph id=\"ph2\">`GetSetMethod`</ph> method.","pos":[126,181],"source":" From the `PropertyInfo`, use the `GetSetMethod` method."}]}],"pos":[59340,59679],"yaml":true,"extradata":"MT"},{"content":"The `MethodInfo` object representing the `Set` method for this property if the `set` accessor is public, or `null` if the `set` accessor is not public.","nodes":[{"pos":[0,151],"content":"The <ph id=\"ph1\">`MethodInfo`</ph> object representing the <ph id=\"ph2\">`Set`</ph> method for this property if the <ph id=\"ph3\">`set`</ph> accessor is public, or <ph id=\"ph4\">`null`</ph> if the <ph id=\"ph5\">`set`</ph> accessor is not public.","source":"The `MethodInfo` object representing the `Set` method for this property if the `set` accessor is public, or `null` if the `set` accessor is not public."}],"pos":[59846,59998],"yaml":true},{"content":"Returns the property value of a specified object.","nodes":[{"pos":[0,49],"content":"Returns the property value of a specified object.","nodes":[{"content":"Returns the property value of a specified object.","pos":[0,49]}]}],"pos":[61420,61470],"yaml":true},{"content":"You call the <xref:System.Reflection.PropertyInfo.GetValue%28System.Object%29> overload to retrieve the value of a non-indexed property; if you try to retrieve the value of an indexed property, the method throws a <xref:System.Reflection.TargetParameterCountException> exception. You can determine whether a property is indexed or not by calling the <xref:System.Reflection.PropertyInfo.GetIndexParameters%2A> method. If the length of the returned <xref:System.Reflection.ParameterInfo> array is zero, the property is not indexed.  \n  \n This is a convenience method that provides an implementation for the abstract <xref:System.Reflection.PropertyInfo.GetValue%28System.Object%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29> method with the <xref:System.Reflection.BindingFlags> parameter set to <xref:System.Reflection.BindingFlags?displayProperty=fullName>, the <xref:System.Reflection.Binder> set to `null`, the object array of index values set to `null`, and the <xref:System.Globalization.CultureInfo> set to `null`.","nodes":[{"pos":[0,530],"content":"You call the <xref:System.Reflection.PropertyInfo.GetValue%28System.Object%29> overload to retrieve the value of a non-indexed property; if you try to retrieve the value of an indexed property, the method throws a <xref:System.Reflection.TargetParameterCountException> exception. You can determine whether a property is indexed or not by calling the <xref:System.Reflection.PropertyInfo.GetIndexParameters%2A> method. If the length of the returned <xref:System.Reflection.ParameterInfo> array is zero, the property is not indexed.","nodes":[{"content":"You call the <xref:System.Reflection.PropertyInfo.GetValue%28System.Object%29> overload to retrieve the value of a non-indexed property; if you try to retrieve the value of an indexed property, the method throws a <xref:System.Reflection.TargetParameterCountException> exception. You can determine whether a property is indexed or not by calling the <xref:System.Reflection.PropertyInfo.GetIndexParameters%2A> method. If the length of the returned <xref:System.Reflection.ParameterInfo> array is zero, the property is not indexed.","pos":[0,530],"nodes":[{"content":"You call the <ph id=\"ph1\">&lt;xref:System.Reflection.PropertyInfo.GetValue%28System.Object%29&gt;</ph> overload to retrieve the value of a non-indexed property; if you try to retrieve the value of an indexed property, the method throws a <ph id=\"ph2\">&lt;xref:System.Reflection.TargetParameterCountException&gt;</ph> exception.","pos":[0,279],"source":"You call the <xref:System.Reflection.PropertyInfo.GetValue%28System.Object%29> overload to retrieve the value of a non-indexed property; if you try to retrieve the value of an indexed property, the method throws a <xref:System.Reflection.TargetParameterCountException> exception."},{"content":"You can determine whether a property is indexed or not by calling the <ph id=\"ph1\">&lt;xref:System.Reflection.PropertyInfo.GetIndexParameters%2A&gt;</ph> method.","pos":[280,417],"source":" You can determine whether a property is indexed or not by calling the <xref:System.Reflection.PropertyInfo.GetIndexParameters%2A> method."},{"content":"If the length of the returned <ph id=\"ph1\">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> array is zero, the property is not indexed.","pos":[418,530],"source":" If the length of the returned <xref:System.Reflection.ParameterInfo> array is zero, the property is not indexed."}]}]},{"pos":[537,1094],"content":"This is a convenience method that provides an implementation for the abstract <ph id=\"ph1\">&lt;xref:System.Reflection.PropertyInfo.GetValue%28System.Object%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29&gt;</ph> method with the <ph id=\"ph2\">&lt;xref:System.Reflection.BindingFlags&gt;</ph> parameter set to <ph id=\"ph3\">&lt;xref:System.Reflection.BindingFlags?displayProperty=fullName&gt;</ph>, the <ph id=\"ph4\">&lt;xref:System.Reflection.Binder&gt;</ph> set to <ph id=\"ph5\">`null`</ph>, the object array of index values set to <ph id=\"ph6\">`null`</ph>, and the <ph id=\"ph7\">&lt;xref:System.Globalization.CultureInfo&gt;</ph> set to <ph id=\"ph8\">`null`</ph>.","source":"This is a convenience method that provides an implementation for the abstract <xref:System.Reflection.PropertyInfo.GetValue%28System.Object%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29> method with the <xref:System.Reflection.BindingFlags> parameter set to <xref:System.Reflection.BindingFlags?displayProperty=fullName>, the <xref:System.Reflection.Binder> set to `null`, the object array of index values set to `null`, and the <xref:System.Globalization.CultureInfo> set to `null`."}],"pos":[61481,62580],"yaml":true,"extradata":"MT"},{"content":"The object whose property value will be returned.","nodes":[{"pos":[0,49],"content":"The object whose property value will be returned.","nodes":[{"content":"The object whose property value will be returned.","pos":[0,49]}]}],"pos":[63514,63564],"yaml":true},{"content":"The property value of the specified object.","nodes":[{"pos":[0,43],"content":"The property value of the specified object.","nodes":[{"content":"The property value of the specified object.","pos":[0,43]}]}],"pos":[63621,63665],"yaml":true},{"content":"Returns the property value of a specified object with optional index values for indexed properties.","nodes":[{"pos":[0,99],"content":"Returns the property value of a specified object with optional index values for indexed properties.","nodes":[{"content":"Returns the property value of a specified object with optional index values for indexed properties.","pos":[0,99]}]}],"pos":[65378,65478],"yaml":true},{"content":"To determine whether a property is indexed, use the <xref:System.Reflection.PropertyInfo.GetIndexParameters%2A> method. If the resulting array has 0 (zero) elements, the property is not indexed.  \n  \n This is a convenience method that provides an implementation for the abstract `GetValue` method with a `BindingFlags` parameter of `Default`, the `Binder` set to `null`, and the `CultureInfo` set to `null`.  \n  \n Because static properties belong to the type, not individual objects, get static properties by passing `null` as the object argument. For example, use the following code to get the static `CurrentCulture` property of `CultureInfo` :  \n  \n```  \nPropertyInfo CurCultProp =   \n    (typeof(CultureInfo)).GetProperty(\"CurrentCulture\");   \nConsole.WriteLine(\"CurrCult: \" +  \n    CurCultProp.GetValue(null,null));  \n```  \n  \n To use the `GetValue` method, first get the class `Type`. From the `Type`, get the `PropertyInfo`. From the `PropertyInfo`, use the `GetValue` method.  \n  \n> [!NOTE]\n>  Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof. (See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)  \n>   \n>  To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.","nodes":[{"pos":[0,194],"content":"To determine whether a property is indexed, use the <xref:System.Reflection.PropertyInfo.GetIndexParameters%2A> method. If the resulting array has 0 (zero) elements, the property is not indexed.","nodes":[{"content":"To determine whether a property is indexed, use the <xref:System.Reflection.PropertyInfo.GetIndexParameters%2A> method. If the resulting array has 0 (zero) elements, the property is not indexed.","pos":[0,194],"nodes":[{"content":"To determine whether a property is indexed, use the <ph id=\"ph1\">&lt;xref:System.Reflection.PropertyInfo.GetIndexParameters%2A&gt;</ph> method.","pos":[0,119],"source":"To determine whether a property is indexed, use the <xref:System.Reflection.PropertyInfo.GetIndexParameters%2A> method."},{"content":"If the resulting array has 0 (zero) elements, the property is not indexed.","pos":[120,194]}]}]},{"pos":[201,407],"content":"This is a convenience method that provides an implementation for the abstract <ph id=\"ph1\">`GetValue`</ph> method with a <ph id=\"ph2\">`BindingFlags`</ph> parameter of <ph id=\"ph3\">`Default`</ph>, the <ph id=\"ph4\">`Binder`</ph> set to <ph id=\"ph5\">`null`</ph>, and the <ph id=\"ph6\">`CultureInfo`</ph> set to <ph id=\"ph7\">`null`</ph>.","source":"This is a convenience method that provides an implementation for the abstract `GetValue` method with a `BindingFlags` parameter of `Default`, the `Binder` set to `null`, and the `CultureInfo` set to `null`."},{"pos":[414,646],"content":"Because static properties belong to the type, not individual objects, get static properties by passing `null` as the object argument. For example, use the following code to get the static `CurrentCulture` property of `CultureInfo` :","nodes":[{"content":"Because static properties belong to the type, not individual objects, get static properties by passing <ph id=\"ph1\">`null`</ph> as the object argument.","pos":[0,133],"source":"Because static properties belong to the type, not individual objects, get static properties by passing `null` as the object argument."},{"content":"For example, use the following code to get the static <ph id=\"ph1\">`CurrentCulture`</ph> property of <ph id=\"ph2\">`CultureInfo`</ph> :","pos":[134,232],"source":" For example, use the following code to get the static `CurrentCulture` property of `CultureInfo` :"}]},{"pos":[833,983],"content":"To use the `GetValue` method, first get the class `Type`. From the `Type`, get the `PropertyInfo`. From the `PropertyInfo`, use the `GetValue` method.","nodes":[{"content":"To use the <ph id=\"ph1\">`GetValue`</ph> method, first get the class <ph id=\"ph2\">`Type`</ph>.","pos":[0,57],"source":"To use the `GetValue` method, first get the class `Type`."},{"content":"From the <ph id=\"ph1\">`Type`</ph>, get the <ph id=\"ph2\">`PropertyInfo`</ph>.","pos":[58,98],"source":" From the `Type`, get the `PropertyInfo`."},{"content":"From the <ph id=\"ph1\">`PropertyInfo`</ph>, use the <ph id=\"ph2\">`GetValue`</ph> method.","pos":[99,150],"source":" From the `PropertyInfo`, use the `GetValue` method."}]},{"pos":[991,1561],"content":"[!NOTE]\n Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof. (See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)","leadings":["","> "],"nodes":[{"content":" Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof. (See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)","pos":[8,568],"nodes":[{"content":"Starting with the <ph id=\"ph1\">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>, this method can be used to access non-public members if the caller has been granted <ph id=\"ph2\">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> with the <ph id=\"ph3\">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName&gt;</ph> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof.","pos":[1,429],"source":" Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof."},{"content":"(See <bpt id=\"p1\">[</bpt>Security Considerations for Reflection<ept id=\"p1\">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>.)","pos":[430,560],"source":" (See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)"}]}]},{"pos":[1572,1699],"content":"To use this functionality, your application should target the <ph id=\"ph1\">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> or later.","source":"To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later."}],"pos":[65489,67213],"yaml":true,"extradata":"MT"},{"content":"The object whose property value will be returned.","nodes":[{"pos":[0,49],"content":"The object whose property value will be returned.","nodes":[{"content":"The object whose property value will be returned.","pos":[0,49]}]}],"pos":[67978,68028],"yaml":true},{"content":"Optional index values for indexed properties. The indexes of indexed properties are zero-based. This value should be `null` for non-indexed properties.","nodes":[{"pos":[0,151],"content":"Optional index values for indexed properties. The indexes of indexed properties are zero-based. This value should be `null` for non-indexed properties.","nodes":[{"content":"Optional index values for indexed properties.","pos":[0,45]},{"content":"The indexes of indexed properties are zero-based.","pos":[46,95]},{"content":"This value should be <ph id=\"ph1\">`null`</ph> for non-indexed properties.","pos":[96,151],"source":" This value should be `null` for non-indexed properties."}]}],"pos":[68091,68243],"yaml":true},{"content":"The property value of the specified object.","nodes":[{"pos":[0,43],"content":"The property value of the specified object.","nodes":[{"content":"The property value of the specified object.","pos":[0,43]}]}],"pos":[68300,68344],"yaml":true},{"content":"The <code>index</code> array does not contain the type of arguments needed.  \n  \n -or-  \n  \n The property's `get` accessor is not found.","nodes":[{"pos":[0,75],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">index</ph><ept id=\"p1\">&lt;/code&gt;</ept> array does not contain the type of arguments needed.","source":"The <code>index</code> array does not contain the type of arguments needed."},{"pos":[82,86],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[93,136],"content":"The property's <ph id=\"ph1\">`get`</ph> accessor is not found.","source":"The property's `get` accessor is not found."}],"pos":[68505,68648],"yaml":true},{"content":"<block subset=\"none\" type=\"note\">\n      <p>  \n In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch <xref href=\"System.Exception\"></xref> instead.  \n  \n</p>\n    </block>  \n  \n The object does not match the target type, or a property is an instance property but <code>obj</code> is `null`.","nodes":[{"pos":[0,310],"content":"<block subset=\"none\" type=\"note\">\n      <p>  \n In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch <xref href=\"System.Exception\"></xref> instead.","nodes":[{"content":"In the <bpt id=\"p1\">[</bpt>.NET for Windows Store apps<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> or the <bpt id=\"p2\">[</bpt>Portable Class Library<ept id=\"p2\">](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)</ept>, catch <ph id=\"ph1\">&lt;xref href=\"System.Exception\"&gt;&lt;/xref&gt;</ph> instead.","pos":[47,310],"source":" In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch <xref href=\"System.Exception\"></xref> instead."}]},{"pos":[316,333],"content":"</p>\n    </block>","nodes":[]},{"pos":[340,452],"content":"The object does not match the target type, or a property is an instance property but <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">obj</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">`null`</ph>.","source":"The object does not match the target type, or a property is an instance property but <code>obj</code> is `null`."}],"pos":[68760,69228],"yaml":true},{"content":"The number of parameters in <code>index</code> does not match the number of parameters the indexed property takes.","nodes":[{"pos":[0,114],"content":"The number of parameters in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">index</ph><ept id=\"p1\">&lt;/code&gt;</ept> does not match the number of parameters the indexed property takes.","source":"The number of parameters in <code>index</code> does not match the number of parameters the indexed property takes."}],"pos":[69368,69483],"yaml":true},{"content":"<block subset=\"none\" type=\"note\">\n      <p>  \n In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch the base class exception, <xref href=\"System.MemberAccessException\"></xref>, instead.  \n  \n</p>\n    </block>  \n  \n There was an illegal attempt to access a private or protected method inside a class.","nodes":[{"pos":[0,349],"content":"<block subset=\"none\" type=\"note\">\n      <p>  \n In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch the base class exception, <xref href=\"System.MemberAccessException\"></xref>, instead.","nodes":[{"content":"In the <bpt id=\"p1\">[</bpt>.NET for Windows Store apps<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> or the <bpt id=\"p2\">[</bpt>Portable Class Library<ept id=\"p2\">](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)</ept>, catch the base class exception, <ph id=\"ph1\">&lt;xref href=\"System.MemberAccessException\"&gt;&lt;/xref&gt;</ph>, instead.","pos":[47,349],"source":" In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch the base class exception, <xref href=\"System.MemberAccessException\"></xref>, instead."}]},{"pos":[355,372],"content":"</p>\n    </block>","nodes":[]},{"pos":[379,463],"content":"There was an illegal attempt to access a private or protected method inside a class.","nodes":[{"content":"There was an illegal attempt to access a private or protected method inside a class.","pos":[0,84]}]}],"pos":[69585,70064],"yaml":true},{"content":"An error occurred while retrieving the property value. For example, an index value specified for an indexed property is out of range. The <xref href=\"System.Exception.InnerException\"></xref> property indicates the reason for the error.","nodes":[{"pos":[0,235],"content":"An error occurred while retrieving the property value. For example, an index value specified for an indexed property is out of range. The <xref href=\"System.Exception.InnerException\"></xref> property indicates the reason for the error.","nodes":[{"content":"An error occurred while retrieving the property value.","pos":[0,54]},{"content":"For example, an index value specified for an indexed property is out of range.","pos":[55,133]},{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Exception.InnerException\"&gt;&lt;/xref&gt;</ph> property indicates the reason for the error.","pos":[134,235],"source":" The <xref href=\"System.Exception.InnerException\"></xref> property indicates the reason for the error."}]}],"pos":[70196,70432],"yaml":true},{"content":"When overridden in a derived class, returns the property value of a specified object that has the specified binding, index, and culture-specific information.","nodes":[{"pos":[0,157],"content":"When overridden in a derived class, returns the property value of a specified object that has the specified binding, index, and culture-specific information.","nodes":[{"content":"When overridden in a derived class, returns the property value of a specified object that has the specified binding, index, and culture-specific information.","pos":[0,157]}]}],"pos":[72425,72583],"yaml":true},{"content":"To determine whether a property is indexed, use the <xref:System.Reflection.PropertyInfo.GetIndexParameters%2A> method. If the resulting array has 0 (zero) elements, the property is not indexed.  \n  \n Because static properties belong to the type, not individual objects, get static properties by passing `null` as the object argument. For example, use the following code to get the static `CurrentCulture` property of `CultureInfo` :  \n  \n```  \nPropertyInfo CurCultProp =   \n       (typeof(CultureInfo)).GetProperty(\"CurrentCulture\");   \nConsole.WriteLine(\"CurrCult: \" +  \n       CurCultProp.GetValue(null,null));  \n```  \n  \n To use the `GetValue` method, first get the class `Type`. From the `Type`, get the `PropertyInfo`. From the `PropertyInfo`, use the `GetValue` method.  \n  \n> [!NOTE]\n>  Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof. (See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)  \n>   \n>  To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.","nodes":[{"pos":[0,194],"content":"To determine whether a property is indexed, use the <xref:System.Reflection.PropertyInfo.GetIndexParameters%2A> method. If the resulting array has 0 (zero) elements, the property is not indexed.","nodes":[{"content":"To determine whether a property is indexed, use the <xref:System.Reflection.PropertyInfo.GetIndexParameters%2A> method. If the resulting array has 0 (zero) elements, the property is not indexed.","pos":[0,194],"nodes":[{"content":"To determine whether a property is indexed, use the <ph id=\"ph1\">&lt;xref:System.Reflection.PropertyInfo.GetIndexParameters%2A&gt;</ph> method.","pos":[0,119],"source":"To determine whether a property is indexed, use the <xref:System.Reflection.PropertyInfo.GetIndexParameters%2A> method."},{"content":"If the resulting array has 0 (zero) elements, the property is not indexed.","pos":[120,194]}]}]},{"pos":[201,433],"content":"Because static properties belong to the type, not individual objects, get static properties by passing `null` as the object argument. For example, use the following code to get the static `CurrentCulture` property of `CultureInfo` :","nodes":[{"content":"Because static properties belong to the type, not individual objects, get static properties by passing <ph id=\"ph1\">`null`</ph> as the object argument.","pos":[0,133],"source":"Because static properties belong to the type, not individual objects, get static properties by passing `null` as the object argument."},{"content":"For example, use the following code to get the static <ph id=\"ph1\">`CurrentCulture`</ph> property of <ph id=\"ph2\">`CultureInfo`</ph> :","pos":[134,232],"source":" For example, use the following code to get the static `CurrentCulture` property of `CultureInfo` :"}]},{"pos":[626,776],"content":"To use the `GetValue` method, first get the class `Type`. From the `Type`, get the `PropertyInfo`. From the `PropertyInfo`, use the `GetValue` method.","nodes":[{"content":"To use the <ph id=\"ph1\">`GetValue`</ph> method, first get the class <ph id=\"ph2\">`Type`</ph>.","pos":[0,57],"source":"To use the `GetValue` method, first get the class `Type`."},{"content":"From the <ph id=\"ph1\">`Type`</ph>, get the <ph id=\"ph2\">`PropertyInfo`</ph>.","pos":[58,98],"source":" From the `Type`, get the `PropertyInfo`."},{"content":"From the <ph id=\"ph1\">`PropertyInfo`</ph>, use the <ph id=\"ph2\">`GetValue`</ph> method.","pos":[99,150],"source":" From the `PropertyInfo`, use the `GetValue` method."}]},{"pos":[784,1354],"content":"[!NOTE]\n Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof. (See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)","leadings":["","> "],"nodes":[{"content":" Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof. (See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)","pos":[8,568],"nodes":[{"content":"Starting with the <ph id=\"ph1\">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>, this method can be used to access non-public members if the caller has been granted <ph id=\"ph2\">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> with the <ph id=\"ph3\">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName&gt;</ph> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof.","pos":[1,429],"source":" Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof."},{"content":"(See <bpt id=\"p1\">[</bpt>Security Considerations for Reflection<ept id=\"p1\">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>.)","pos":[430,560],"source":" (See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)"}]}]},{"pos":[1365,1492],"content":"To use this functionality, your application should target the <ph id=\"ph1\">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> or later.","source":"To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later."}],"pos":[72594,74109],"yaml":true,"extradata":"MT"},{"content":"The object whose property value will be returned.","nodes":[{"pos":[0,49],"content":"The object whose property value will be returned.","nodes":[{"content":"The object whose property value will be returned.","pos":[0,49]}]}],"pos":[74387,74437],"yaml":true},{"content":"A bitwise combination of the following enumeration members that specify the invocation attribute: `InvokeMethod`, `CreateInstance`, `Static`, `GetField`, `SetField`, `GetProperty`, and `SetProperty`. You must specify a suitable invocation attribute. For example, to invoke a static member, set the `Static` flag.","nodes":[{"pos":[0,312],"content":"A bitwise combination of the following enumeration members that specify the invocation attribute: `InvokeMethod`, `CreateInstance`, `Static`, `GetField`, `SetField`, `GetProperty`, and `SetProperty`. You must specify a suitable invocation attribute. For example, to invoke a static member, set the `Static` flag.","nodes":[{"content":"A bitwise combination of the following enumeration members that specify the invocation attribute: <ph id=\"ph1\">`InvokeMethod`</ph>, <ph id=\"ph2\">`CreateInstance`</ph>, <ph id=\"ph3\">`Static`</ph>, <ph id=\"ph4\">`GetField`</ph>, <ph id=\"ph5\">`SetField`</ph>, <ph id=\"ph6\">`GetProperty`</ph>, and <ph id=\"ph7\">`SetProperty`</ph>.","pos":[0,199],"source":"A bitwise combination of the following enumeration members that specify the invocation attribute: `InvokeMethod`, `CreateInstance`, `Static`, `GetField`, `SetField`, `GetProperty`, and `SetProperty`."},{"content":"You must specify a suitable invocation attribute.","pos":[200,249]},{"content":"For example, to invoke a static member, set the <ph id=\"ph1\">`Static`</ph> flag.","pos":[250,312],"source":" For example, to invoke a static member, set the `Static` flag."}]}],"pos":[74520,74835],"yaml":true},{"content":"An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <xref href=\"System.Reflection.MemberInfo\"></xref> objects through reflection. If <code>binder</code> is `null`, the default binder is used.","nodes":[{"pos":[0,243],"content":"An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <xref href=\"System.Reflection.MemberInfo\"></xref> objects through reflection. If <code>binder</code> is `null`, the default binder is used.","nodes":[{"content":"An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MemberInfo\"&gt;&lt;/xref&gt;</ph> objects through reflection.","pos":[0,181],"source":"An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <xref href=\"System.Reflection.MemberInfo\"></xref> objects through reflection."},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">binder</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">`null`</ph>, the default binder is used.","pos":[182,243],"source":" If <code>binder</code> is `null`, the default binder is used."}]}],"pos":[74908,75152],"yaml":true},{"content":"Optional index values for indexed properties. This value should be `null` for non-indexed properties.","nodes":[{"pos":[0,101],"content":"Optional index values for indexed properties. This value should be `null` for non-indexed properties.","nodes":[{"content":"Optional index values for indexed properties.","pos":[0,45]},{"content":"This value should be <ph id=\"ph1\">`null`</ph> for non-indexed properties.","pos":[46,101],"source":" This value should be `null` for non-indexed properties."}]}],"pos":[75215,75317],"yaml":true},{"content":"The culture for which the resource is to be localized. If the resource is not localized for this culture, the <xref href=\"System.Globalization.CultureInfo.Parent\"></xref> property will be called successively in search of a match. If this value is `null`, the culture-specific information is obtained from the <xref href=\"System.Globalization.CultureInfo.CurrentUICulture\"></xref> property.","nodes":[{"pos":[0,389],"content":"The culture for which the resource is to be localized. If the resource is not localized for this culture, the <xref href=\"System.Globalization.CultureInfo.Parent\"></xref> property will be called successively in search of a match. If this value is `null`, the culture-specific information is obtained from the <xref href=\"System.Globalization.CultureInfo.CurrentUICulture\"></xref> property.","nodes":[{"content":"The culture for which the resource is to be localized.","pos":[0,54]},{"content":"If the resource is not localized for this culture, the <ph id=\"ph1\">&lt;xref href=\"System.Globalization.CultureInfo.Parent\"&gt;&lt;/xref&gt;</ph> property will be called successively in search of a match.","pos":[55,229],"source":" If the resource is not localized for this culture, the <xref href=\"System.Globalization.CultureInfo.Parent\"></xref> property will be called successively in search of a match."},{"content":"If this value is <ph id=\"ph1\">`null`</ph>, the culture-specific information is obtained from the <ph id=\"ph2\">&lt;xref href=\"System.Globalization.CultureInfo.CurrentUICulture\"&gt;&lt;/xref&gt;</ph> property.","pos":[230,389],"source":" If this value is `null`, the culture-specific information is obtained from the <xref href=\"System.Globalization.CultureInfo.CurrentUICulture\"></xref> property."}]}],"pos":[75399,75789],"yaml":true},{"content":"The property value of the specified object.","nodes":[{"pos":[0,43],"content":"The property value of the specified object.","nodes":[{"content":"The property value of the specified object.","pos":[0,43]}]}],"pos":[75846,75890],"yaml":true},{"content":"The <code>index</code> array does not contain the type of arguments needed.  \n  \n -or-  \n  \n The property's `get` accessor is not found.","nodes":[{"pos":[0,75],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">index</ph><ept id=\"p1\">&lt;/code&gt;</ept> array does not contain the type of arguments needed.","source":"The <code>index</code> array does not contain the type of arguments needed."},{"pos":[82,86],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[93,136],"content":"The property's <ph id=\"ph1\">`get`</ph> accessor is not found.","source":"The property's `get` accessor is not found."}],"pos":[76051,76194],"yaml":true},{"content":"The object does not match the target type, or a property is an instance property but <code>obj</code> is `null`.","nodes":[{"pos":[0,112],"content":"The object does not match the target type, or a property is an instance property but <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">obj</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">`null`</ph>.","source":"The object does not match the target type, or a property is an instance property but <code>obj</code> is `null`."}],"pos":[76306,76419],"yaml":true},{"content":"The number of parameters in <code>index</code> does not match the number of parameters the indexed property takes.","nodes":[{"pos":[0,114],"content":"The number of parameters in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">index</ph><ept id=\"p1\">&lt;/code&gt;</ept> does not match the number of parameters the indexed property takes.","source":"The number of parameters in <code>index</code> does not match the number of parameters the indexed property takes."}],"pos":[76559,76674],"yaml":true},{"content":"There was an illegal attempt to access a private or protected method inside a class.","nodes":[{"pos":[0,84],"content":"There was an illegal attempt to access a private or protected method inside a class.","nodes":[{"content":"There was an illegal attempt to access a private or protected method inside a class.","pos":[0,84]}]}],"pos":[76776,76861],"yaml":true},{"content":"An error occurred while retrieving the property value. For example, an index value specified for an indexed property is out of range. The <xref href=\"System.Exception.InnerException\"></xref> property indicates the reason for the error.","nodes":[{"pos":[0,235],"content":"An error occurred while retrieving the property value. For example, an index value specified for an indexed property is out of range. The <xref href=\"System.Exception.InnerException\"></xref> property indicates the reason for the error.","nodes":[{"content":"An error occurred while retrieving the property value.","pos":[0,54]},{"content":"For example, an index value specified for an indexed property is out of range.","pos":[55,133]},{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Exception.InnerException\"&gt;&lt;/xref&gt;</ph> property indicates the reason for the error.","pos":[134,235],"source":" The <xref href=\"System.Exception.InnerException\"></xref> property indicates the reason for the error."}]}],"pos":[76993,77229],"yaml":true},{"content":"Gets a value indicating whether the property is the special name.","nodes":[{"pos":[0,65],"content":"Gets a value indicating whether the property is the special name.","nodes":[{"content":"Gets a value indicating whether the property is the special name.","pos":[0,65]}]}],"pos":[78396,78462],"yaml":true},{"content":"The `SpecialName` bit is set to flag members that are treated in a special way by some compilers (such as property accessors and operator overloading methods).  \n  \n To get the `IsSpecialName` property, first get the class `Type`. From the `Type`, get the `PropertyInfo`. From the `PropertyInfo`, get the `IsSpecialName` value.","nodes":[{"pos":[0,159],"content":"The <ph id=\"ph1\">`SpecialName`</ph> bit is set to flag members that are treated in a special way by some compilers (such as property accessors and operator overloading methods).","source":"The `SpecialName` bit is set to flag members that are treated in a special way by some compilers (such as property accessors and operator overloading methods)."},{"pos":[166,327],"content":"To get the `IsSpecialName` property, first get the class `Type`. From the `Type`, get the `PropertyInfo`. From the `PropertyInfo`, get the `IsSpecialName` value.","nodes":[{"content":"To get the <ph id=\"ph1\">`IsSpecialName`</ph> property, first get the class <ph id=\"ph2\">`Type`</ph>.","pos":[0,64],"source":"To get the `IsSpecialName` property, first get the class `Type`."},{"content":"From the <ph id=\"ph1\">`Type`</ph>, get the <ph id=\"ph2\">`PropertyInfo`</ph>.","pos":[65,105],"source":" From the `Type`, get the `PropertyInfo`."},{"content":"From the <ph id=\"ph1\">`PropertyInfo`</ph>, get the <ph id=\"ph2\">`IsSpecialName`</ph> value.","pos":[106,161],"source":" From the `PropertyInfo`, get the `IsSpecialName` value."}]}],"pos":[78473,78805],"yaml":true,"extradata":"MT"},{"content":"`true` if this property is the special name; otherwise, `false`.","nodes":[{"pos":[0,64],"content":"<ph id=\"ph1\">`true`</ph> if this property is the special name; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if this property is the special name; otherwise, `false`."}],"pos":[78921,78988],"yaml":true},{"content":"Gets a <xref href=\"System.Reflection.MemberTypes\"></xref> value indicating that this member is a property.","nodes":[{"pos":[0,106],"content":"Gets a <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MemberTypes\"&gt;&lt;/xref&gt;</ph> value indicating that this member is a property.","source":"Gets a <xref href=\"System.Reflection.MemberTypes\"></xref> value indicating that this member is a property."}],"pos":[80556,80663],"yaml":true},{"content":"This property overrides <xref:System.Reflection.MemberInfo.MemberType%2A>. Therefore, when you examine a set of <xref:System.Reflection.MemberInfo> objects — for example, the array returned by <xref:System.Type.GetMembers%2A> — the <xref:System.Reflection.MemberInfo.MemberType%2A> property returns <xref:System.Reflection.MemberTypes.Property> only when a given member is a property.  \n  \n `MemberType` is a derived class of `MemberInfo` and specifies the type of member this is. Member types are constructors, properties, fields, and methods. Since this is a `PropertyInfo` property, the returned type is a property.  \n  \n To get the `MemberType` property, first get the class `Type`. From the `Type`, get the `PropertyInfo`. From the `PropertyInfo`, get the `MemberType` value.","nodes":[{"pos":[0,384],"content":"This property overrides <xref:System.Reflection.MemberInfo.MemberType%2A>. Therefore, when you examine a set of <xref:System.Reflection.MemberInfo> objects — for example, the array returned by <xref:System.Type.GetMembers%2A> — the <xref:System.Reflection.MemberInfo.MemberType%2A> property returns <xref:System.Reflection.MemberTypes.Property> only when a given member is a property.","nodes":[{"content":"This property overrides <xref:System.Reflection.MemberInfo.MemberType%2A>. Therefore, when you examine a set of <xref:System.Reflection.MemberInfo> objects — for example, the array returned by <xref:System.Type.GetMembers%2A> — the <xref:System.Reflection.MemberInfo.MemberType%2A> property returns <xref:System.Reflection.MemberTypes.Property> only when a given member is a property.","pos":[0,384],"nodes":[{"content":"This property overrides <ph id=\"ph1\">&lt;xref:System.Reflection.MemberInfo.MemberType%2A&gt;</ph>.","pos":[0,74],"source":"This property overrides <xref:System.Reflection.MemberInfo.MemberType%2A>."},{"content":"Therefore, when you examine a set of <ph id=\"ph1\">&lt;xref:System.Reflection.MemberInfo&gt;</ph> objects — for example, the array returned by <ph id=\"ph2\">&lt;xref:System.Type.GetMembers%2A&gt;</ph> — the <ph id=\"ph3\">&lt;xref:System.Reflection.MemberInfo.MemberType%2A&gt;</ph> property returns <ph id=\"ph4\">&lt;xref:System.Reflection.MemberTypes.Property&gt;</ph> only when a given member is a property.","pos":[75,384],"source":" Therefore, when you examine a set of <xref:System.Reflection.MemberInfo> objects — for example, the array returned by <xref:System.Type.GetMembers%2A> — the <xref:System.Reflection.MemberInfo.MemberType%2A> property returns <xref:System.Reflection.MemberTypes.Property> only when a given member is a property."}]}]},{"pos":[391,618],"content":"`MemberType` is a derived class of `MemberInfo` and specifies the type of member this is. Member types are constructors, properties, fields, and methods. Since this is a `PropertyInfo` property, the returned type is a property.","nodes":[{"content":"<ph id=\"ph1\">`MemberType`</ph> is a derived class of <ph id=\"ph2\">`MemberInfo`</ph> and specifies the type of member this is.","pos":[0,89],"source":"`MemberType` is a derived class of `MemberInfo` and specifies the type of member this is."},{"content":"Member types are constructors, properties, fields, and methods.","pos":[90,153]},{"content":"Since this is a <ph id=\"ph1\">`PropertyInfo`</ph> property, the returned type is a property.","pos":[154,227],"source":" Since this is a `PropertyInfo` property, the returned type is a property."}]},{"pos":[625,780],"content":"To get the `MemberType` property, first get the class `Type`. From the `Type`, get the `PropertyInfo`. From the `PropertyInfo`, get the `MemberType` value.","nodes":[{"content":"To get the <ph id=\"ph1\">`MemberType`</ph> property, first get the class <ph id=\"ph2\">`Type`</ph>.","pos":[0,61],"source":"To get the `MemberType` property, first get the class `Type`."},{"content":"From the <ph id=\"ph1\">`Type`</ph>, get the <ph id=\"ph2\">`PropertyInfo`</ph>.","pos":[62,102],"source":" From the `Type`, get the `PropertyInfo`."},{"content":"From the <ph id=\"ph1\">`PropertyInfo`</ph>, get the <ph id=\"ph2\">`MemberType`</ph> value.","pos":[103,155],"source":" From the `PropertyInfo`, get the `MemberType` value."}]}],"pos":[80674,81461],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Reflection.MemberTypes\"></xref> value indicating that this member is a property.","nodes":[{"pos":[0,101],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MemberTypes\"&gt;&lt;/xref&gt;</ph> value indicating that this member is a property.","source":"A <xref href=\"System.Reflection.MemberTypes\"></xref> value indicating that this member is a property."}],"pos":[82206,82308],"yaml":true},{"content":"Indicates whether two <xref href=\"System.Reflection.PropertyInfo\"></xref> objects are equal.","nodes":[{"pos":[0,92],"content":"Indicates whether two <ph id=\"ph1\">&lt;xref href=\"System.Reflection.PropertyInfo\"&gt;&lt;/xref&gt;</ph> objects are equal.","source":"Indicates whether two <xref href=\"System.Reflection.PropertyInfo\"></xref> objects are equal."}],"pos":[83930,84023],"yaml":true},{"content":"The first object to compare.","nodes":[{"pos":[0,28],"content":"The first object to compare.","nodes":[{"content":"The first object to compare.","pos":[0,28]}]}],"pos":[84247,84276],"yaml":true},{"content":"The second object to compare.","nodes":[{"pos":[0,29],"content":"The second object to compare.","nodes":[{"content":"The second object to compare.","pos":[0,29]}]}],"pos":[84354,84384],"yaml":true},{"content":"`true` if <code>left</code> is equal to <code>right</code>; otherwise, `false`.","nodes":[{"pos":[0,79],"content":"<ph id=\"ph1\">`true`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">left</ph><ept id=\"p1\">&lt;/code&gt;</ept> is equal to <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">right</ph><ept id=\"p2\">&lt;/code&gt;</ept>; otherwise, <ph id=\"ph4\">`false`</ph>.","source":"`true` if <code>left</code> is equal to <code>right</code>; otherwise, `false`."}],"pos":[84442,84524],"yaml":true},{"content":"Indicates whether two <xref href=\"System.Reflection.PropertyInfo\"></xref> objects are not equal.","nodes":[{"pos":[0,96],"content":"Indicates whether two <ph id=\"ph1\">&lt;xref href=\"System.Reflection.PropertyInfo\"&gt;&lt;/xref&gt;</ph> objects are not equal.","source":"Indicates whether two <xref href=\"System.Reflection.PropertyInfo\"></xref> objects are not equal."}],"pos":[86015,86112],"yaml":true},{"content":"The first object to compare.","nodes":[{"pos":[0,28],"content":"The first object to compare.","nodes":[{"content":"The first object to compare.","pos":[0,28]}]}],"pos":[86338,86367],"yaml":true},{"content":"The second object to compare.","nodes":[{"pos":[0,29],"content":"The second object to compare.","nodes":[{"content":"The second object to compare.","pos":[0,29]}]}],"pos":[86445,86475],"yaml":true},{"content":"`true` if <code>left</code> is not equal to <code>right</code>; otherwise, `false`.","nodes":[{"pos":[0,83],"content":"<ph id=\"ph1\">`true`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">left</ph><ept id=\"p1\">&lt;/code&gt;</ept> is not equal to <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">right</ph><ept id=\"p2\">&lt;/code&gt;</ept>; otherwise, <ph id=\"ph4\">`false`</ph>.","source":"`true` if <code>left</code> is not equal to <code>right</code>; otherwise, `false`."}],"pos":[86533,86619],"yaml":true},{"content":"Gets the type of this property.","nodes":[{"pos":[0,31],"content":"Gets the type of this property.","nodes":[{"content":"Gets the type of this property.","pos":[0,31]}]}],"pos":[87855,87887],"yaml":true},{"content":"To determine the type of a particular property, do the following:  \n  \n1.  Get a <xref:System.Type> object that represents the type (the class or structure) that contains the property. If you are working with an object (an instance of a type), you can call its <xref:System.Object.GetType%2A> method. Otherwise, you can use the C#  operator or the Visual Basic  operator, as the example illustrates.  \n  \n2.  Get a <xref:System.Reflection.PropertyInfo> object that represents the property in which you're interested. You can do this by getting an array of all properties from the <xref:System.Type.GetProperties%2A?displayProperty=fullName> method and then iterating the elements in the array, or you can retrieve the <xref:System.Reflection.PropertyInfo> object that represents the property directly by calling the <xref:System.Type.GetProperty%2A?displayProperty=fullName> method and specifying the property name.  \n  \n3.  Retrieve the value of the <xref:System.Reflection.PropertyInfo.PropertyType%2A> property from the <xref:System.Reflection.PropertyInfo> object.","nodes":[{"pos":[0,65],"content":"To determine the type of a particular property, do the following:","nodes":[{"content":"To determine the type of a particular property, do the following:","pos":[0,65]}]},{"pos":[75,399],"content":"Get a <xref:System.Type> object that represents the type (the class or structure) that contains the property. If you are working with an object (an instance of a type), you can call its <xref:System.Object.GetType%2A> method. Otherwise, you can use the C#  operator or the Visual Basic  operator, as the example illustrates.","nodes":[{"content":"Get a <xref:System.Type> object that represents the type (the class or structure) that contains the property. If you are working with an object (an instance of a type), you can call its <xref:System.Object.GetType%2A> method. Otherwise, you can use the C#  operator or the Visual Basic  operator, as the example illustrates.","pos":[0,324],"nodes":[{"content":"Get a <ph id=\"ph1\">&lt;xref:System.Type&gt;</ph> object that represents the type (the class or structure) that contains the property.","pos":[0,109],"source":"Get a <xref:System.Type> object that represents the type (the class or structure) that contains the property."},{"content":"If you are working with an object (an instance of a type), you can call its <ph id=\"ph1\">&lt;xref:System.Object.GetType%2A&gt;</ph> method.","pos":[110,225],"source":" If you are working with an object (an instance of a type), you can call its <xref:System.Object.GetType%2A> method."},{"content":"Otherwise, you can use the C#  operator or the Visual Basic  operator, as the example illustrates.","pos":[226,324]}]}]},{"pos":[409,915],"content":"Get a <xref:System.Reflection.PropertyInfo> object that represents the property in which you're interested. You can do this by getting an array of all properties from the <xref:System.Type.GetProperties%2A?displayProperty=fullName> method and then iterating the elements in the array, or you can retrieve the <xref:System.Reflection.PropertyInfo> object that represents the property directly by calling the <xref:System.Type.GetProperty%2A?displayProperty=fullName> method and specifying the property name.","nodes":[{"content":"Get a <xref:System.Reflection.PropertyInfo> object that represents the property in which you're interested. You can do this by getting an array of all properties from the <xref:System.Type.GetProperties%2A?displayProperty=fullName> method and then iterating the elements in the array, or you can retrieve the <xref:System.Reflection.PropertyInfo> object that represents the property directly by calling the <xref:System.Type.GetProperty%2A?displayProperty=fullName> method and specifying the property name.","pos":[0,506],"nodes":[{"content":"Get a <ph id=\"ph1\">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> object that represents the property in which you're interested.","pos":[0,107],"source":"Get a <xref:System.Reflection.PropertyInfo> object that represents the property in which you're interested."},{"content":"You can do this by getting an array of all properties from the <ph id=\"ph1\">&lt;xref:System.Type.GetProperties%2A?displayProperty=fullName&gt;</ph> method and then iterating the elements in the array, or you can retrieve the <ph id=\"ph2\">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> object that represents the property directly by calling the <ph id=\"ph3\">&lt;xref:System.Type.GetProperty%2A?displayProperty=fullName&gt;</ph> method and specifying the property name.","pos":[108,506],"source":" You can do this by getting an array of all properties from the <xref:System.Type.GetProperties%2A?displayProperty=fullName> method and then iterating the elements in the array, or you can retrieve the <xref:System.Reflection.PropertyInfo> object that represents the property directly by calling the <xref:System.Type.GetProperty%2A?displayProperty=fullName> method and specifying the property name."}]}]},{"pos":[925,1068],"content":"Retrieve the value of the <xref:System.Reflection.PropertyInfo.PropertyType%2A> property from the <xref:System.Reflection.PropertyInfo> object.","nodes":[{"content":"Retrieve the value of the <ph id=\"ph1\">&lt;xref:System.Reflection.PropertyInfo.PropertyType%2A&gt;</ph> property from the <ph id=\"ph2\">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> object.","pos":[0,143],"source":"Retrieve the value of the <xref:System.Reflection.PropertyInfo.PropertyType%2A> property from the <xref:System.Reflection.PropertyInfo> object."}]}],"pos":[87898,88975],"yaml":true,"extradata":"MT"},{"content":"The type of this property.","nodes":[{"pos":[0,26],"content":"The type of this property.","nodes":[{"content":"The type of this property.","pos":[0,26]}]}],"pos":[89709,89736],"yaml":true},{"content":"Gets the `set` accessor for this property.","nodes":[{"pos":[0,42],"content":"Gets the <ph id=\"ph1\">`set`</ph> accessor for this property.","source":"Gets the `set` accessor for this property."}],"pos":[91297,91340],"yaml":true},{"content":"Retrieving the value of the <xref:System.Reflection.PropertyInfo.SetMethod%2A> property is equivalent to calling the <xref:System.Reflection.PropertyInfo.GetSetMethod%28System.Boolean%29> method with a value of `true` for the `nonPublic` argument.","nodes":[{"pos":[0,247],"content":"Retrieving the value of the <ph id=\"ph1\">&lt;xref:System.Reflection.PropertyInfo.SetMethod%2A&gt;</ph> property is equivalent to calling the <ph id=\"ph2\">&lt;xref:System.Reflection.PropertyInfo.GetSetMethod%28System.Boolean%29&gt;</ph> method with a value of <ph id=\"ph3\">`true`</ph> for the <ph id=\"ph4\">`nonPublic`</ph> argument.","source":"Retrieving the value of the <xref:System.Reflection.PropertyInfo.SetMethod%2A> property is equivalent to calling the <xref:System.Reflection.PropertyInfo.GetSetMethod%28System.Boolean%29> method with a value of `true` for the `nonPublic` argument."}],"pos":[91351,91599],"yaml":true,"extradata":"MT"},{"content":"The `set` accessor for this property, or `null` if the property is read-only.","nodes":[{"pos":[0,77],"content":"The <ph id=\"ph1\">`set`</ph> accessor for this property, or <ph id=\"ph2\">`null`</ph> if the property is read-only.","source":"The `set` accessor for this property, or `null` if the property is read-only."}],"pos":[91757,91835],"yaml":true},{"content":"Sets the property value of a specified object.","nodes":[{"pos":[0,46],"content":"Sets the property value of a specified object.","nodes":[{"content":"Sets the property value of a specified object.","pos":[0,46]}]}],"pos":[93520,93567],"yaml":true},{"content":"The <xref:System.Reflection.PropertyInfo.SetValue%28System.Object%2CSystem.Object%29> overload sets the value of a non-indexed property. To determine whether a property is indexed, call the <xref:System.Reflection.PropertyInfo.GetIndexParameters%2A> method. If the resulting array has 0 (zero) elements, the property is not indexed. To set the value of an indexed property, call the <xref:System.Reflection.PropertyInfo.SetValue%28System.Object%2CSystem.Object%2CSystem.Object%5B%5D%29> overload.  \n  \n If the property type of this <xref:System.Reflection.PropertyInfo> object is a value type and `value` is `null`, the property will be set to the default value for that type.  \n  \n This is a convenience method that calls the runtime implementation of the abstract <xref:System.Reflection.PropertyInfo.SetValue%28System.Object%2CSystem.Object%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29> method, specifying <xref:System.Reflection.BindingFlags?displayProperty=fullName> for the `BindingFlags` parameter, `null` for `Binder`, `null` for `Object[]`, and `null` for `CultureInfo`.  \n  \n To use the <xref:System.Reflection.PropertyInfo.SetValue%2A> method, first get a <xref:System.Type> object that represents the class. From the <xref:System.Type>, get the <xref:System.Reflection.PropertyInfo> object. From the <xref:System.Reflection.PropertyInfo> object, call the <xref:System.Reflection.PropertyInfo.SetValue%2A> method.  \n  \n> [!NOTE]\n>  Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof. (See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)  \n>   \n>  To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.","nodes":[{"pos":[0,496],"content":"The <xref:System.Reflection.PropertyInfo.SetValue%28System.Object%2CSystem.Object%29> overload sets the value of a non-indexed property. To determine whether a property is indexed, call the <xref:System.Reflection.PropertyInfo.GetIndexParameters%2A> method. If the resulting array has 0 (zero) elements, the property is not indexed. To set the value of an indexed property, call the <xref:System.Reflection.PropertyInfo.SetValue%28System.Object%2CSystem.Object%2CSystem.Object%5B%5D%29> overload.","nodes":[{"content":"The <xref:System.Reflection.PropertyInfo.SetValue%28System.Object%2CSystem.Object%29> overload sets the value of a non-indexed property. To determine whether a property is indexed, call the <xref:System.Reflection.PropertyInfo.GetIndexParameters%2A> method. If the resulting array has 0 (zero) elements, the property is not indexed. To set the value of an indexed property, call the <xref:System.Reflection.PropertyInfo.SetValue%28System.Object%2CSystem.Object%2CSystem.Object%5B%5D%29> overload.","pos":[0,496],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Reflection.PropertyInfo.SetValue%28System.Object%2CSystem.Object%29&gt;</ph> overload sets the value of a non-indexed property.","pos":[0,136],"source":"The <xref:System.Reflection.PropertyInfo.SetValue%28System.Object%2CSystem.Object%29> overload sets the value of a non-indexed property."},{"content":"To determine whether a property is indexed, call the <ph id=\"ph1\">&lt;xref:System.Reflection.PropertyInfo.GetIndexParameters%2A&gt;</ph> method.","pos":[137,257],"source":" To determine whether a property is indexed, call the <xref:System.Reflection.PropertyInfo.GetIndexParameters%2A> method."},{"content":"If the resulting array has 0 (zero) elements, the property is not indexed.","pos":[258,332]},{"content":"To set the value of an indexed property, call the <ph id=\"ph1\">&lt;xref:System.Reflection.PropertyInfo.SetValue%28System.Object%2CSystem.Object%2CSystem.Object%5B%5D%29&gt;</ph> overload.","pos":[333,496],"source":" To set the value of an indexed property, call the <xref:System.Reflection.PropertyInfo.SetValue%28System.Object%2CSystem.Object%2CSystem.Object%5B%5D%29> overload."}]}]},{"pos":[503,676],"content":"If the property type of this <ph id=\"ph1\">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> object is a value type and <ph id=\"ph2\">`value`</ph> is <ph id=\"ph3\">`null`</ph>, the property will be set to the default value for that type.","source":"If the property type of this <xref:System.Reflection.PropertyInfo> object is a value type and `value` is `null`, the property will be set to the default value for that type."},{"pos":[683,1154],"content":"This is a convenience method that calls the runtime implementation of the abstract <ph id=\"ph1\">&lt;xref:System.Reflection.PropertyInfo.SetValue%28System.Object%2CSystem.Object%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29&gt;</ph> method, specifying <ph id=\"ph2\">&lt;xref:System.Reflection.BindingFlags?displayProperty=fullName&gt;</ph> for the <ph id=\"ph3\">`BindingFlags`</ph> parameter, <ph id=\"ph4\">`null`</ph> for <ph id=\"ph5\">`Binder`</ph>, <ph id=\"ph6\">`null`</ph> for <ph id=\"ph7\">`Object[]`</ph>, and <ph id=\"ph8\">`null`</ph> for <ph id=\"ph9\">`CultureInfo`</ph>.","source":"This is a convenience method that calls the runtime implementation of the abstract <xref:System.Reflection.PropertyInfo.SetValue%28System.Object%2CSystem.Object%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29> method, specifying <xref:System.Reflection.BindingFlags?displayProperty=fullName> for the `BindingFlags` parameter, `null` for `Binder`, `null` for `Object[]`, and `null` for `CultureInfo`."},{"pos":[1161,1499],"content":"To use the <xref:System.Reflection.PropertyInfo.SetValue%2A> method, first get a <xref:System.Type> object that represents the class. From the <xref:System.Type>, get the <xref:System.Reflection.PropertyInfo> object. From the <xref:System.Reflection.PropertyInfo> object, call the <xref:System.Reflection.PropertyInfo.SetValue%2A> method.","nodes":[{"content":"To use the <xref:System.Reflection.PropertyInfo.SetValue%2A> method, first get a <xref:System.Type> object that represents the class. From the <xref:System.Type>, get the <xref:System.Reflection.PropertyInfo> object. From the <xref:System.Reflection.PropertyInfo> object, call the <xref:System.Reflection.PropertyInfo.SetValue%2A> method.","pos":[0,338],"nodes":[{"content":"To use the <ph id=\"ph1\">&lt;xref:System.Reflection.PropertyInfo.SetValue%2A&gt;</ph> method, first get a <ph id=\"ph2\">&lt;xref:System.Type&gt;</ph> object that represents the class.","pos":[0,133],"source":"To use the <xref:System.Reflection.PropertyInfo.SetValue%2A> method, first get a <xref:System.Type> object that represents the class."},{"content":"From the <ph id=\"ph1\">&lt;xref:System.Type&gt;</ph>, get the <ph id=\"ph2\">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> object.","pos":[134,216],"source":" From the <xref:System.Type>, get the <xref:System.Reflection.PropertyInfo> object."},{"content":"From the <ph id=\"ph1\">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> object, call the <ph id=\"ph2\">&lt;xref:System.Reflection.PropertyInfo.SetValue%2A&gt;</ph> method.","pos":[217,338],"source":" From the <xref:System.Reflection.PropertyInfo> object, call the <xref:System.Reflection.PropertyInfo.SetValue%2A> method."}]}]},{"pos":[1507,2077],"content":"[!NOTE]\n Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof. (See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)","leadings":["","> "],"nodes":[{"content":" Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof. (See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)","pos":[8,568],"nodes":[{"content":"Starting with the <ph id=\"ph1\">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>, this method can be used to access non-public members if the caller has been granted <ph id=\"ph2\">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> with the <ph id=\"ph3\">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName&gt;</ph> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof.","pos":[1,429],"source":" Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof."},{"content":"(See <bpt id=\"p1\">[</bpt>Security Considerations for Reflection<ept id=\"p1\">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>.)","pos":[430,560],"source":" (See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)"}]}]},{"pos":[2088,2215],"content":"To use this functionality, your application should target the <ph id=\"ph1\">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> or later.","source":"To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later."}],"pos":[93578,95807],"yaml":true,"extradata":"MT"},{"content":"The object whose property value will be set.","nodes":[{"pos":[0,44],"content":"The object whose property value will be set.","nodes":[{"content":"The object whose property value will be set.","pos":[0,44]}]}],"pos":[96666,96711],"yaml":true},{"content":"The new property value.","nodes":[{"pos":[0,23],"content":"The new property value.","nodes":[{"content":"The new property value.","pos":[0,23]}]}],"pos":[96772,96796],"yaml":true},{"content":"The property's `set` accessor is not found.  \n  \n -or-  \n  \n <code>value</code> cannot be converted to the type of <xref href=\"System.Reflection.PropertyInfo.PropertyType\"></xref>.","nodes":[{"pos":[0,43],"content":"The property's <ph id=\"ph1\">`set`</ph> accessor is not found.","source":"The property's `set` accessor is not found."},{"pos":[50,54],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[61,180],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> cannot be converted to the type of <ph id=\"ph2\">&lt;xref href=\"System.Reflection.PropertyInfo.PropertyType\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> cannot be converted to the type of <xref href=\"System.Reflection.PropertyInfo.PropertyType\"></xref>."}],"pos":[96957,97146],"yaml":true},{"content":"<block subset=\"none\" type=\"note\">\n      <p>  \n In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch <xref href=\"System.Exception\"></xref> instead.  \n  \n</p>\n    </block>  \n  \n The type of <code>obj</code> does not match the target type, or a property is an instance property but <code>obj</code> is `null`.","nodes":[{"pos":[0,310],"content":"<block subset=\"none\" type=\"note\">\n      <p>  \n In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch <xref href=\"System.Exception\"></xref> instead.","nodes":[{"content":"In the <bpt id=\"p1\">[</bpt>.NET for Windows Store apps<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> or the <bpt id=\"p2\">[</bpt>Portable Class Library<ept id=\"p2\">](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)</ept>, catch <ph id=\"ph1\">&lt;xref href=\"System.Exception\"&gt;&lt;/xref&gt;</ph> instead.","pos":[47,310],"source":" In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch <xref href=\"System.Exception\"></xref> instead."}]},{"pos":[316,333],"content":"</p>\n    </block>","nodes":[]},{"pos":[340,470],"content":"The type of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">obj</ph><ept id=\"p1\">&lt;/code&gt;</ept> does not match the target type, or a property is an instance property but <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">obj</ph><ept id=\"p2\">&lt;/code&gt;</ept> is <ph id=\"ph3\">`null`</ph>.","source":"The type of <code>obj</code> does not match the target type, or a property is an instance property but <code>obj</code> is `null`."}],"pos":[97258,97744],"yaml":true},{"content":"<block subset=\"none\" type=\"note\">\n      <p>  \n In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch the base class exception, <xref href=\"System.MemberAccessException\"></xref>, instead.  \n  \n</p>\n    </block>  \n  \n There was an illegal attempt to access a private or protected method inside a class.","nodes":[{"pos":[0,349],"content":"<block subset=\"none\" type=\"note\">\n      <p>  \n In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch the base class exception, <xref href=\"System.MemberAccessException\"></xref>, instead.","nodes":[{"content":"In the <bpt id=\"p1\">[</bpt>.NET for Windows Store apps<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> or the <bpt id=\"p2\">[</bpt>Portable Class Library<ept id=\"p2\">](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)</ept>, catch the base class exception, <ph id=\"ph1\">&lt;xref href=\"System.MemberAccessException\"&gt;&lt;/xref&gt;</ph>, instead.","pos":[47,349],"source":" In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch the base class exception, <xref href=\"System.MemberAccessException\"></xref>, instead."}]},{"pos":[355,372],"content":"</p>\n    </block>","nodes":[]},{"pos":[379,463],"content":"There was an illegal attempt to access a private or protected method inside a class.","nodes":[{"content":"There was an illegal attempt to access a private or protected method inside a class.","pos":[0,84]}]}],"pos":[97846,98325],"yaml":true},{"content":"An error occurred while setting the property value. The <xref href=\"System.Exception.InnerException\"></xref> property indicates the reason for the error.","nodes":[{"pos":[0,153],"content":"An error occurred while setting the property value. The <xref href=\"System.Exception.InnerException\"></xref> property indicates the reason for the error.","nodes":[{"content":"An error occurred while setting the property value.","pos":[0,51]},{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Exception.InnerException\"&gt;&lt;/xref&gt;</ph> property indicates the reason for the error.","pos":[52,153],"source":" The <xref href=\"System.Exception.InnerException\"></xref> property indicates the reason for the error."}]}],"pos":[98457,98611],"yaml":true},{"content":"Sets the property value of a specified object with optional index values for index properties.","nodes":[{"pos":[0,94],"content":"Sets the property value of a specified object with optional index values for index properties.","nodes":[{"content":"Sets the property value of a specified object with optional index values for index properties.","pos":[0,94]}]}],"pos":[100320,100415],"yaml":true},{"content":"If this <xref:System.Reflection.PropertyInfo> object is a value type and `value` is `null`, then the property will be set to the default value for that type.  \n  \n To determine whether a property is indexed, use the <xref:System.Reflection.PropertyInfo.GetIndexParameters%2A> method. If the resulting array has 0 (zero) elements, the property is not indexed.  \n  \n This is a convenience method that calls the runtime implementation of the abstract <xref:System.Reflection.PropertyInfo.SetValue%28System.Object%2CSystem.Object%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29> method, specifying <xref:System.Reflection.BindingFlags?displayProperty=fullName> for the `BindingFlags` parameter, `null` for `Binder`, and `null` for `CultureInfo`.  \n  \n To use the <xref:System.Reflection.PropertyInfo.SetValue%2A> method, first get a <xref:System.Type> object that represents the class. From the <xref:System.Type>, get the <xref:System.Reflection.PropertyInfo>. From the <xref:System.Reflection.PropertyInfo>, use the <xref:System.Reflection.PropertyInfo.SetValue%2A> method.  \n  \n> [!NOTE]\n>  Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof. (See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)  \n>   \n>  To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.","nodes":[{"pos":[0,157],"content":"If this <ph id=\"ph1\">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> object is a value type and <ph id=\"ph2\">`value`</ph> is <ph id=\"ph3\">`null`</ph>, then the property will be set to the default value for that type.","source":"If this <xref:System.Reflection.PropertyInfo> object is a value type and `value` is `null`, then the property will be set to the default value for that type."},{"pos":[164,358],"content":"To determine whether a property is indexed, use the <xref:System.Reflection.PropertyInfo.GetIndexParameters%2A> method. If the resulting array has 0 (zero) elements, the property is not indexed.","nodes":[{"content":"To determine whether a property is indexed, use the <xref:System.Reflection.PropertyInfo.GetIndexParameters%2A> method. If the resulting array has 0 (zero) elements, the property is not indexed.","pos":[0,194],"nodes":[{"content":"To determine whether a property is indexed, use the <ph id=\"ph1\">&lt;xref:System.Reflection.PropertyInfo.GetIndexParameters%2A&gt;</ph> method.","pos":[0,119],"source":"To determine whether a property is indexed, use the <xref:System.Reflection.PropertyInfo.GetIndexParameters%2A> method."},{"content":"If the resulting array has 0 (zero) elements, the property is not indexed.","pos":[120,194]}]}]},{"pos":[365,813],"content":"This is a convenience method that calls the runtime implementation of the abstract <ph id=\"ph1\">&lt;xref:System.Reflection.PropertyInfo.SetValue%28System.Object%2CSystem.Object%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29&gt;</ph> method, specifying <ph id=\"ph2\">&lt;xref:System.Reflection.BindingFlags?displayProperty=fullName&gt;</ph> for the <ph id=\"ph3\">`BindingFlags`</ph> parameter, <ph id=\"ph4\">`null`</ph> for <ph id=\"ph5\">`Binder`</ph>, and <ph id=\"ph6\">`null`</ph> for <ph id=\"ph7\">`CultureInfo`</ph>.","source":"This is a convenience method that calls the runtime implementation of the abstract <xref:System.Reflection.PropertyInfo.SetValue%28System.Object%2CSystem.Object%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29> method, specifying <xref:System.Reflection.BindingFlags?displayProperty=fullName> for the `BindingFlags` parameter, `null` for `Binder`, and `null` for `CultureInfo`."},{"pos":[820,1143],"content":"To use the <xref:System.Reflection.PropertyInfo.SetValue%2A> method, first get a <xref:System.Type> object that represents the class. From the <xref:System.Type>, get the <xref:System.Reflection.PropertyInfo>. From the <xref:System.Reflection.PropertyInfo>, use the <xref:System.Reflection.PropertyInfo.SetValue%2A> method.","nodes":[{"content":"To use the <xref:System.Reflection.PropertyInfo.SetValue%2A> method, first get a <xref:System.Type> object that represents the class. From the <xref:System.Type>, get the <xref:System.Reflection.PropertyInfo>. From the <xref:System.Reflection.PropertyInfo>, use the <xref:System.Reflection.PropertyInfo.SetValue%2A> method.","pos":[0,323],"nodes":[{"content":"To use the <ph id=\"ph1\">&lt;xref:System.Reflection.PropertyInfo.SetValue%2A&gt;</ph> method, first get a <ph id=\"ph2\">&lt;xref:System.Type&gt;</ph> object that represents the class.","pos":[0,133],"source":"To use the <xref:System.Reflection.PropertyInfo.SetValue%2A> method, first get a <xref:System.Type> object that represents the class."},{"content":"From the <ph id=\"ph1\">&lt;xref:System.Type&gt;</ph>, get the <ph id=\"ph2\">&lt;xref:System.Reflection.PropertyInfo&gt;</ph>.","pos":[134,209],"source":" From the <xref:System.Type>, get the <xref:System.Reflection.PropertyInfo>."},{"content":"From the <ph id=\"ph1\">&lt;xref:System.Reflection.PropertyInfo&gt;</ph>, use the <ph id=\"ph2\">&lt;xref:System.Reflection.PropertyInfo.SetValue%2A&gt;</ph> method.","pos":[210,323],"source":" From the <xref:System.Reflection.PropertyInfo>, use the <xref:System.Reflection.PropertyInfo.SetValue%2A> method."}]}]},{"pos":[1151,1721],"content":"[!NOTE]\n Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof. (See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)","leadings":["","> "],"nodes":[{"content":" Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof. (See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)","pos":[8,568],"nodes":[{"content":"Starting with the <ph id=\"ph1\">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>, this method can be used to access non-public members if the caller has been granted <ph id=\"ph2\">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> with the <ph id=\"ph3\">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName&gt;</ph> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof.","pos":[1,429],"source":" Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof."},{"content":"(See <bpt id=\"p1\">[</bpt>Security Considerations for Reflection<ept id=\"p1\">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>.)","pos":[430,560],"source":" (See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)"}]}]},{"pos":[1732,1859],"content":"To use this functionality, your application should target the <ph id=\"ph1\">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> or later.","source":"To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later."}],"pos":[100426,102299],"yaml":true,"extradata":"MT"},{"content":"The object whose property value will be set.","nodes":[{"pos":[0,44],"content":"The object whose property value will be set.","nodes":[{"content":"The object whose property value will be set.","pos":[0,44]}]}],"pos":[105641,105686],"yaml":true},{"content":"The new property value.","nodes":[{"pos":[0,23],"content":"The new property value.","nodes":[{"content":"The new property value.","pos":[0,23]}]}],"pos":[105747,105771],"yaml":true},{"content":"Optional index values for indexed properties. This value should be `null` for non-indexed properties.","nodes":[{"pos":[0,101],"content":"Optional index values for indexed properties. This value should be `null` for non-indexed properties.","nodes":[{"content":"Optional index values for indexed properties.","pos":[0,45]},{"content":"This value should be <ph id=\"ph1\">`null`</ph> for non-indexed properties.","pos":[46,101],"source":" This value should be `null` for non-indexed properties."}]}],"pos":[105834,105936],"yaml":true},{"content":"The <code>index</code> array does not contain the type of arguments needed.  \n  \n -or-  \n  \n The property's `set` accessor is not found.  \n  \n -or-  \n  \n <code>value</code> cannot be converted to the type of <xref href=\"System.Reflection.PropertyInfo.PropertyType\"></xref>.","nodes":[{"pos":[0,75],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">index</ph><ept id=\"p1\">&lt;/code&gt;</ept> array does not contain the type of arguments needed.","source":"The <code>index</code> array does not contain the type of arguments needed."},{"pos":[82,86],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[93,136],"content":"The property's <ph id=\"ph1\">`set`</ph> accessor is not found.","source":"The property's `set` accessor is not found."},{"pos":[143,147],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[154,273],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> cannot be converted to the type of <ph id=\"ph2\">&lt;xref href=\"System.Reflection.PropertyInfo.PropertyType\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> cannot be converted to the type of <xref href=\"System.Reflection.PropertyInfo.PropertyType\"></xref>."}],"pos":[106097,106383],"yaml":true},{"content":"<block subset=\"none\" type=\"note\">\n      <p>  \n In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch <xref href=\"System.Exception\"></xref> instead.  \n  \n</p>\n    </block>  \n  \n The object does not match the target type, or a property is an instance property but <code>obj</code> is `null`.","nodes":[{"pos":[0,310],"content":"<block subset=\"none\" type=\"note\">\n      <p>  \n In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch <xref href=\"System.Exception\"></xref> instead.","nodes":[{"content":"In the <bpt id=\"p1\">[</bpt>.NET for Windows Store apps<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> or the <bpt id=\"p2\">[</bpt>Portable Class Library<ept id=\"p2\">](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)</ept>, catch <ph id=\"ph1\">&lt;xref href=\"System.Exception\"&gt;&lt;/xref&gt;</ph> instead.","pos":[47,310],"source":" In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch <xref href=\"System.Exception\"></xref> instead."}]},{"pos":[316,333],"content":"</p>\n    </block>","nodes":[]},{"pos":[340,452],"content":"The object does not match the target type, or a property is an instance property but <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">obj</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">`null`</ph>.","source":"The object does not match the target type, or a property is an instance property but <code>obj</code> is `null`."}],"pos":[106495,106963],"yaml":true},{"content":"The number of parameters in <code>index</code> does not match the number of parameters the indexed property takes.","nodes":[{"pos":[0,114],"content":"The number of parameters in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">index</ph><ept id=\"p1\">&lt;/code&gt;</ept> does not match the number of parameters the indexed property takes.","source":"The number of parameters in <code>index</code> does not match the number of parameters the indexed property takes."}],"pos":[107103,107218],"yaml":true},{"content":"<block subset=\"none\" type=\"note\">\n      <p>  \n In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch the base class exception, <xref href=\"System.MemberAccessException\"></xref>, instead.  \n  \n</p>\n    </block>  \n  \n There was an illegal attempt to access a private or protected method inside a class.","nodes":[{"pos":[0,349],"content":"<block subset=\"none\" type=\"note\">\n      <p>  \n In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch the base class exception, <xref href=\"System.MemberAccessException\"></xref>, instead.","nodes":[{"content":"In the <bpt id=\"p1\">[</bpt>.NET for Windows Store apps<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> or the <bpt id=\"p2\">[</bpt>Portable Class Library<ept id=\"p2\">](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)</ept>, catch the base class exception, <ph id=\"ph1\">&lt;xref href=\"System.MemberAccessException\"&gt;&lt;/xref&gt;</ph>, instead.","pos":[47,349],"source":" In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch the base class exception, <xref href=\"System.MemberAccessException\"></xref>, instead."}]},{"pos":[355,372],"content":"</p>\n    </block>","nodes":[]},{"pos":[379,463],"content":"There was an illegal attempt to access a private or protected method inside a class.","nodes":[{"content":"There was an illegal attempt to access a private or protected method inside a class.","pos":[0,84]}]}],"pos":[107320,107799],"yaml":true},{"content":"An error occurred while setting the property value. For example, an index value specified for an indexed property is out of range. The <xref href=\"System.Exception.InnerException\"></xref> property indicates the reason for the error.","nodes":[{"pos":[0,232],"content":"An error occurred while setting the property value. For example, an index value specified for an indexed property is out of range. The <xref href=\"System.Exception.InnerException\"></xref> property indicates the reason for the error.","nodes":[{"content":"An error occurred while setting the property value.","pos":[0,51]},{"content":"For example, an index value specified for an indexed property is out of range.","pos":[52,130]},{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Exception.InnerException\"&gt;&lt;/xref&gt;</ph> property indicates the reason for the error.","pos":[131,232],"source":" The <xref href=\"System.Exception.InnerException\"></xref> property indicates the reason for the error."}]}],"pos":[107931,108164],"yaml":true},{"content":"When overridden in a derived class, sets the property value for a specified object that has the specified binding, index, and culture-specific information.","nodes":[{"pos":[0,155],"content":"When overridden in a derived class, sets the property value for a specified object that has the specified binding, index, and culture-specific information.","nodes":[{"content":"When overridden in a derived class, sets the property value for a specified object that has the specified binding, index, and culture-specific information.","pos":[0,155]}]}],"pos":[110223,110379],"yaml":true},{"content":"If this <xref:System.Reflection.PropertyInfo> object is a value type and `value` is `null`, then the property will be set to the default value for that type.  \n  \n To determine whether a property is indexed, use the <xref:System.Reflection.PropertyInfo.GetIndexParameters%2A> method. If the resulting array has 0 (zero) elements, the property is not indexed.  \n  \n Access restrictions are ignored for fully trusted code. That is, private constructors, methods, fields, and properties can be accessed and invoked via Reflection whenever the code is fully trusted.  \n  \n To use the `SetValue` method, first get the class `Type`. From the `Type`, get the `PropertyInfo`. From the `PropertyInfo`, use the `SetValue` method.  \n  \n> [!NOTE]\n>  Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof. (See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)  \n>   \n>  To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.","nodes":[{"pos":[0,157],"content":"If this <ph id=\"ph1\">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> object is a value type and <ph id=\"ph2\">`value`</ph> is <ph id=\"ph3\">`null`</ph>, then the property will be set to the default value for that type.","source":"If this <xref:System.Reflection.PropertyInfo> object is a value type and `value` is `null`, then the property will be set to the default value for that type."},{"pos":[164,358],"content":"To determine whether a property is indexed, use the <xref:System.Reflection.PropertyInfo.GetIndexParameters%2A> method. If the resulting array has 0 (zero) elements, the property is not indexed.","nodes":[{"content":"To determine whether a property is indexed, use the <xref:System.Reflection.PropertyInfo.GetIndexParameters%2A> method. If the resulting array has 0 (zero) elements, the property is not indexed.","pos":[0,194],"nodes":[{"content":"To determine whether a property is indexed, use the <ph id=\"ph1\">&lt;xref:System.Reflection.PropertyInfo.GetIndexParameters%2A&gt;</ph> method.","pos":[0,119],"source":"To determine whether a property is indexed, use the <xref:System.Reflection.PropertyInfo.GetIndexParameters%2A> method."},{"content":"If the resulting array has 0 (zero) elements, the property is not indexed.","pos":[120,194]}]}]},{"pos":[365,562],"content":"Access restrictions are ignored for fully trusted code. That is, private constructors, methods, fields, and properties can be accessed and invoked via Reflection whenever the code is fully trusted.","nodes":[{"content":"Access restrictions are ignored for fully trusted code. That is, private constructors, methods, fields, and properties can be accessed and invoked via Reflection whenever the code is fully trusted.","pos":[0,197],"nodes":[{"content":"Access restrictions are ignored for fully trusted code.","pos":[0,55]},{"content":"That is, private constructors, methods, fields, and properties can be accessed and invoked via Reflection whenever the code is fully trusted.","pos":[56,197]}]}]},{"pos":[569,719],"content":"To use the `SetValue` method, first get the class `Type`. From the `Type`, get the `PropertyInfo`. From the `PropertyInfo`, use the `SetValue` method.","nodes":[{"content":"To use the <ph id=\"ph1\">`SetValue`</ph> method, first get the class <ph id=\"ph2\">`Type`</ph>.","pos":[0,57],"source":"To use the `SetValue` method, first get the class `Type`."},{"content":"From the <ph id=\"ph1\">`Type`</ph>, get the <ph id=\"ph2\">`PropertyInfo`</ph>.","pos":[58,98],"source":" From the `Type`, get the `PropertyInfo`."},{"content":"From the <ph id=\"ph1\">`PropertyInfo`</ph>, use the <ph id=\"ph2\">`SetValue`</ph> method.","pos":[99,150],"source":" From the `PropertyInfo`, use the `SetValue` method."}]},{"pos":[727,1297],"content":"[!NOTE]\n Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof. (See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)","leadings":["","> "],"nodes":[{"content":" Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof. (See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)","pos":[8,568],"nodes":[{"content":"Starting with the <ph id=\"ph1\">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>, this method can be used to access non-public members if the caller has been granted <ph id=\"ph2\">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> with the <ph id=\"ph3\">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName&gt;</ph> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof.","pos":[1,429],"source":" Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof."},{"content":"(See <bpt id=\"p1\">[</bpt>Security Considerations for Reflection<ept id=\"p1\">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>.)","pos":[430,560],"source":" (See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)"}]}]},{"pos":[1308,1435],"content":"To use this functionality, your application should target the <ph id=\"ph1\">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> or later.","source":"To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later."}],"pos":[110390,111839],"yaml":true,"extradata":"MT"},{"content":"The object whose property value will be set.","nodes":[{"pos":[0,44],"content":"The object whose property value will be set.","nodes":[{"content":"The object whose property value will be set.","pos":[0,44]}]}],"pos":[112129,112174],"yaml":true},{"content":"The new property value.","nodes":[{"pos":[0,23],"content":"The new property value.","nodes":[{"content":"The new property value.","pos":[0,23]}]}],"pos":[112235,112259],"yaml":true},{"content":"A bitwise combination of the following enumeration members that specify the invocation attribute: `InvokeMethod`, `CreateInstance`, `Static`, `GetField`, `SetField`, `GetProperty`, or `SetProperty`. You must specify a suitable invocation attribute. For example, to invoke a static member, set the `Static` flag.","nodes":[{"pos":[0,311],"content":"A bitwise combination of the following enumeration members that specify the invocation attribute: `InvokeMethod`, `CreateInstance`, `Static`, `GetField`, `SetField`, `GetProperty`, or `SetProperty`. You must specify a suitable invocation attribute. For example, to invoke a static member, set the `Static` flag.","nodes":[{"content":"A bitwise combination of the following enumeration members that specify the invocation attribute: <ph id=\"ph1\">`InvokeMethod`</ph>, <ph id=\"ph2\">`CreateInstance`</ph>, <ph id=\"ph3\">`Static`</ph>, <ph id=\"ph4\">`GetField`</ph>, <ph id=\"ph5\">`SetField`</ph>, <ph id=\"ph6\">`GetProperty`</ph>, or <ph id=\"ph7\">`SetProperty`</ph>.","pos":[0,198],"source":"A bitwise combination of the following enumeration members that specify the invocation attribute: `InvokeMethod`, `CreateInstance`, `Static`, `GetField`, `SetField`, `GetProperty`, or `SetProperty`."},{"content":"You must specify a suitable invocation attribute.","pos":[199,248]},{"content":"For example, to invoke a static member, set the <ph id=\"ph1\">`Static`</ph> flag.","pos":[249,311],"source":" For example, to invoke a static member, set the `Static` flag."}]}],"pos":[112342,112656],"yaml":true},{"content":"An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <xref href=\"System.Reflection.MemberInfo\"></xref> objects through reflection. If <code>binder</code> is `null`, the default binder is used.","nodes":[{"pos":[0,243],"content":"An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <xref href=\"System.Reflection.MemberInfo\"></xref> objects through reflection. If <code>binder</code> is `null`, the default binder is used.","nodes":[{"content":"An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MemberInfo\"&gt;&lt;/xref&gt;</ph> objects through reflection.","pos":[0,181],"source":"An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <xref href=\"System.Reflection.MemberInfo\"></xref> objects through reflection."},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">binder</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">`null`</ph>, the default binder is used.","pos":[182,243],"source":" If <code>binder</code> is `null`, the default binder is used."}]}],"pos":[112729,112973],"yaml":true},{"content":"Optional index values for indexed properties. This value should be `null` for non-indexed properties.","nodes":[{"pos":[0,101],"content":"Optional index values for indexed properties. This value should be `null` for non-indexed properties.","nodes":[{"content":"Optional index values for indexed properties.","pos":[0,45]},{"content":"This value should be <ph id=\"ph1\">`null`</ph> for non-indexed properties.","pos":[46,101],"source":" This value should be `null` for non-indexed properties."}]}],"pos":[113036,113138],"yaml":true},{"content":"The culture for which the resource is to be localized. If the resource is not localized for this culture, the <xref href=\"System.Globalization.CultureInfo.Parent\"></xref> property will be called successively in search of a match. If this value is `null`, the culture-specific information is obtained from the <xref href=\"System.Globalization.CultureInfo.CurrentUICulture\"></xref> property.","nodes":[{"pos":[0,389],"content":"The culture for which the resource is to be localized. If the resource is not localized for this culture, the <xref href=\"System.Globalization.CultureInfo.Parent\"></xref> property will be called successively in search of a match. If this value is `null`, the culture-specific information is obtained from the <xref href=\"System.Globalization.CultureInfo.CurrentUICulture\"></xref> property.","nodes":[{"content":"The culture for which the resource is to be localized.","pos":[0,54]},{"content":"If the resource is not localized for this culture, the <ph id=\"ph1\">&lt;xref href=\"System.Globalization.CultureInfo.Parent\"&gt;&lt;/xref&gt;</ph> property will be called successively in search of a match.","pos":[55,229],"source":" If the resource is not localized for this culture, the <xref href=\"System.Globalization.CultureInfo.Parent\"></xref> property will be called successively in search of a match."},{"content":"If this value is <ph id=\"ph1\">`null`</ph>, the culture-specific information is obtained from the <ph id=\"ph2\">&lt;xref href=\"System.Globalization.CultureInfo.CurrentUICulture\"&gt;&lt;/xref&gt;</ph> property.","pos":[230,389],"source":" If this value is `null`, the culture-specific information is obtained from the <xref href=\"System.Globalization.CultureInfo.CurrentUICulture\"></xref> property."}]}],"pos":[113220,113610],"yaml":true},{"content":"The <code>index</code> array does not contain the type of arguments needed.  \n  \n -or-  \n  \n The property's `set` accessor is not found.  \n  \n -or-  \n  \n <code>value</code> cannot be converted to the type of <xref href=\"System.Reflection.PropertyInfo.PropertyType\"></xref>.","nodes":[{"pos":[0,75],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">index</ph><ept id=\"p1\">&lt;/code&gt;</ept> array does not contain the type of arguments needed.","source":"The <code>index</code> array does not contain the type of arguments needed."},{"pos":[82,86],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[93,136],"content":"The property's <ph id=\"ph1\">`set`</ph> accessor is not found.","source":"The property's `set` accessor is not found."},{"pos":[143,147],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[154,273],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> cannot be converted to the type of <ph id=\"ph2\">&lt;xref href=\"System.Reflection.PropertyInfo.PropertyType\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> cannot be converted to the type of <xref href=\"System.Reflection.PropertyInfo.PropertyType\"></xref>."}],"pos":[113771,114057],"yaml":true},{"content":"The object does not match the target type, or a property is an instance property but <code>obj</code> is `null`.","nodes":[{"pos":[0,112],"content":"The object does not match the target type, or a property is an instance property but <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">obj</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">`null`</ph>.","source":"The object does not match the target type, or a property is an instance property but <code>obj</code> is `null`."}],"pos":[114169,114282],"yaml":true},{"content":"The number of parameters in <code>index</code> does not match the number of parameters the indexed property takes.","nodes":[{"pos":[0,114],"content":"The number of parameters in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">index</ph><ept id=\"p1\">&lt;/code&gt;</ept> does not match the number of parameters the indexed property takes.","source":"The number of parameters in <code>index</code> does not match the number of parameters the indexed property takes."}],"pos":[114422,114537],"yaml":true},{"content":"There was an illegal attempt to access a private or protected method inside a class.","nodes":[{"pos":[0,84],"content":"There was an illegal attempt to access a private or protected method inside a class.","nodes":[{"content":"There was an illegal attempt to access a private or protected method inside a class.","pos":[0,84]}]}],"pos":[114639,114724],"yaml":true},{"content":"An error occurred while setting the property value. For example, an index value specified for an indexed property is out of range. The <xref href=\"System.Exception.InnerException\"></xref> property indicates the reason for the error.","nodes":[{"pos":[0,232],"content":"An error occurred while setting the property value. For example, an index value specified for an indexed property is out of range. The <xref href=\"System.Exception.InnerException\"></xref> property indicates the reason for the error.","nodes":[{"content":"An error occurred while setting the property value.","pos":[0,51]},{"content":"For example, an index value specified for an indexed property is out of range.","pos":[52,130]},{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Exception.InnerException\"&gt;&lt;/xref&gt;</ph> property indicates the reason for the error.","pos":[131,232],"source":" The <xref href=\"System.Exception.InnerException\"></xref> property indicates the reason for the error."}]}],"pos":[114856,115089],"yaml":true},{"content":"Maps a set of names to a corresponding set of dispatch identifiers.","nodes":[{"pos":[0,67],"content":"Maps a set of names to a corresponding set of dispatch identifiers.","nodes":[{"content":"Maps a set of names to a corresponding set of dispatch identifiers.","pos":[0,67]}]}],"pos":[116712,116780],"yaml":true},{"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library.","nodes":[{"pos":[0,186],"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library.","nodes":[{"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code.","pos":[0,109]},{"content":"For more information about <ph id=\"ph1\">`IDispatch::GetIDsOfNames`</ph>, see the MSDN Library.","pos":[110,186],"source":" For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library."}]}],"pos":[116791,116978],"yaml":true,"extradata":"MT"},{"content":"Reserved for future use. Must be IID_NULL.","nodes":[{"pos":[0,42],"content":"Reserved for future use. Must be IID_NULL.","nodes":[{"content":"Reserved for future use. Must be IID_NULL.","pos":[0,42],"nodes":[{"content":"Reserved for future use.","pos":[0,24]},{"content":"Must be IID_NULL.","pos":[25,42]}]}]}],"pos":[117184,117227],"yaml":true},{"content":"Passed-in array of names to be mapped.","nodes":[{"pos":[0,38],"content":"Passed-in array of names to be mapped.","nodes":[{"content":"Passed-in array of names to be mapped.","pos":[0,38]}]}],"pos":[117292,117331],"yaml":true},{"content":"Count of the names to be mapped.","nodes":[{"pos":[0,32],"content":"Count of the names to be mapped.","nodes":[{"content":"Count of the names to be mapped.","pos":[0,32]}]}],"pos":[117393,117426],"yaml":true},{"content":"The locale context in which to interpret the names.","nodes":[{"pos":[0,51],"content":"The locale context in which to interpret the names.","nodes":[{"content":"The locale context in which to interpret the names.","pos":[0,51]}]}],"pos":[117486,117538],"yaml":true},{"content":"Caller-allocated array which receives the IDs corresponding to the names.","nodes":[{"pos":[0,73],"content":"Caller-allocated array which receives the IDs corresponding to the names.","nodes":[{"content":"Caller-allocated array which receives the IDs corresponding to the names.","pos":[0,73]}]}],"pos":[117602,117676],"yaml":true},{"content":"Late-bound access using the COM <code>IDispatch</code> interface is not supported.","nodes":[{"pos":[0,82],"content":"Late-bound access using the COM <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">IDispatch</ph><ept id=\"p1\">&lt;/code&gt;</ept> interface is not supported.","source":"Late-bound access using the COM <code>IDispatch</code> interface is not supported."}],"pos":[117899,117982],"yaml":true},{"content":"Gets a <xref href=\"System.Type\"></xref> object representing the <xref href=\"System.Reflection.PropertyInfo\"></xref> type.","nodes":[{"pos":[0,121],"content":"Gets a <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> object representing the <ph id=\"ph2\">&lt;xref href=\"System.Reflection.PropertyInfo\"&gt;&lt;/xref&gt;</ph> type.","source":"Gets a <xref href=\"System.Type\"></xref> object representing the <xref href=\"System.Reflection.PropertyInfo\"></xref> type."}],"pos":[119093,119215],"yaml":true},{"content":"A <xref href=\"System.Type\"></xref> object representing the <xref href=\"System.Reflection.PropertyInfo\"></xref> type.","nodes":[{"pos":[0,116],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> object representing the <ph id=\"ph2\">&lt;xref href=\"System.Reflection.PropertyInfo\"&gt;&lt;/xref&gt;</ph> type.","source":"A <xref href=\"System.Type\"></xref> object representing the <xref href=\"System.Reflection.PropertyInfo\"></xref> type."}],"pos":[119343,119460],"yaml":true},{"content":"Retrieves the type information for an object, which can then be used to get the type information for an interface.","nodes":[{"pos":[0,114],"content":"Retrieves the type information for an object, which can then be used to get the type information for an interface.","nodes":[{"content":"Retrieves the type information for an object, which can then be used to get the type information for an interface.","pos":[0,114]}]}],"pos":[120904,121019],"yaml":true},{"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetTypeInfo`, see the MSDN Library.","nodes":[{"pos":[0,184],"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetTypeInfo`, see the MSDN Library.","nodes":[{"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code.","pos":[0,109]},{"content":"For more information about <ph id=\"ph1\">`IDispatch::GetTypeInfo`</ph>, see the MSDN Library.","pos":[110,184],"source":" For more information about `IDispatch::GetTypeInfo`, see the MSDN Library."}]}],"pos":[121030,121215],"yaml":true,"extradata":"MT"},{"content":"The type information to return.","nodes":[{"pos":[0,31],"content":"The type information to return.","nodes":[{"content":"The type information to return.","pos":[0,31]}]}],"pos":[121389,121421],"yaml":true},{"content":"The locale identifier for the type information.","nodes":[{"pos":[0,47],"content":"The locale identifier for the type information.","nodes":[{"content":"The locale identifier for the type information.","pos":[0,47]}]}],"pos":[121481,121529],"yaml":true},{"content":"Receives a pointer to the requested type information object.","nodes":[{"pos":[0,60],"content":"Receives a pointer to the requested type information object.","nodes":[{"content":"Receives a pointer to the requested type information object.","pos":[0,60]}]}],"pos":[121592,121653],"yaml":true},{"content":"Late-bound access using the COM <code>IDispatch</code> interface is not supported.","nodes":[{"pos":[0,82],"content":"Late-bound access using the COM <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">IDispatch</ph><ept id=\"p1\">&lt;/code&gt;</ept> interface is not supported.","source":"Late-bound access using the COM <code>IDispatch</code> interface is not supported."}],"pos":[121874,121957],"yaml":true},{"content":"Retrieves the number of type information interfaces that an object provides (either 0 or 1).","nodes":[{"pos":[0,92],"content":"Retrieves the number of type information interfaces that an object provides (either 0 or 1).","nodes":[{"content":"Retrieves the number of type information interfaces that an object provides (either 0 or 1).","pos":[0,92]}]}],"pos":[123188,123281],"yaml":true},{"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library.","nodes":[{"pos":[0,189],"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library.","nodes":[{"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code.","pos":[0,109]},{"content":"For more information about <ph id=\"ph1\">`IDispatch::GetTypeInfoCount`</ph>, see the MSDN Library.","pos":[110,189],"source":" For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library."}]}],"pos":[123292,123482],"yaml":true,"extradata":"MT"},{"content":"Points to a location that receives the number of type information interfaces provided by the object.","nodes":[{"pos":[0,100],"content":"Points to a location that receives the number of type information interfaces provided by the object.","nodes":[{"content":"Points to a location that receives the number of type information interfaces provided by the object.","pos":[0,100]}]}],"pos":[123640,123741],"yaml":true},{"content":"Late-bound access using the COM <code>IDispatch</code> interface is not supported.","nodes":[{"pos":[0,82],"content":"Late-bound access using the COM <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">IDispatch</ph><ept id=\"p1\">&lt;/code&gt;</ept> interface is not supported.","source":"Late-bound access using the COM <code>IDispatch</code> interface is not supported."}],"pos":[123967,124050],"yaml":true},{"content":"Provides access to properties and methods exposed by an object.","nodes":[{"pos":[0,63],"content":"Provides access to properties and methods exposed by an object.","nodes":[{"content":"Provides access to properties and methods exposed by an object.","pos":[0,63]}]}],"pos":[125665,125729],"yaml":true},{"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::Invoke`, see the MSDN Library.","nodes":[{"pos":[0,179],"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::Invoke`, see the MSDN Library.","nodes":[{"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code.","pos":[0,109]},{"content":"For more information about <ph id=\"ph1\">`IDispatch::Invoke`</ph>, see the MSDN Library.","pos":[110,179],"source":" For more information about `IDispatch::Invoke`, see the MSDN Library."}]}],"pos":[125740,125920],"yaml":true,"extradata":"MT"},{"content":"Identifies the member.","nodes":[{"pos":[0,22],"content":"Identifies the member.","nodes":[{"content":"Identifies the member.","pos":[0,22]}]}],"pos":[126189,126212],"yaml":true},{"content":"Reserved for future use. Must be IID_NULL.","nodes":[{"pos":[0,42],"content":"Reserved for future use. Must be IID_NULL.","nodes":[{"content":"Reserved for future use. Must be IID_NULL.","pos":[0,42],"nodes":[{"content":"Reserved for future use.","pos":[0,24]},{"content":"Must be IID_NULL.","pos":[25,42]}]}]}],"pos":[126270,126313],"yaml":true},{"content":"The locale context in which to interpret arguments.","nodes":[{"pos":[0,51],"content":"The locale context in which to interpret arguments.","nodes":[{"content":"The locale context in which to interpret arguments.","pos":[0,51]}]}],"pos":[126373,126425],"yaml":true},{"content":"Flags describing the context of the call.","nodes":[{"pos":[0,41],"content":"Flags describing the context of the call.","nodes":[{"content":"Flags describing the context of the call.","pos":[0,41]}]}],"pos":[126486,126528],"yaml":true},{"content":"Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.","nodes":[{"pos":[0,159],"content":"Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.","nodes":[{"content":"Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.","pos":[0,159]}]}],"pos":[126595,126755],"yaml":true},{"content":"Pointer to the location where the result is to be stored.","nodes":[{"pos":[0,57],"content":"Pointer to the location where the result is to be stored.","nodes":[{"content":"Pointer to the location where the result is to be stored.","pos":[0,57]}]}],"pos":[126821,126879],"yaml":true},{"content":"Pointer to a structure that contains exception information.","nodes":[{"pos":[0,59],"content":"Pointer to a structure that contains exception information.","nodes":[{"content":"Pointer to a structure that contains exception information.","pos":[0,59]}]}],"pos":[126945,127005],"yaml":true},{"content":"The index of the first argument that has an error.","nodes":[{"pos":[0,50],"content":"The index of the first argument that has an error.","nodes":[{"content":"The index of the first argument that has an error.","pos":[0,50]}]}],"pos":[127069,127120],"yaml":true},{"content":"Late-bound access using the COM <code>IDispatch</code> interface is not supported.","nodes":[{"pos":[0,82],"content":"Late-bound access using the COM <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">IDispatch</ph><ept id=\"p1\">&lt;/code&gt;</ept> interface is not supported.","source":"Late-bound access using the COM <code>IDispatch</code> interface is not supported."}],"pos":[127336,127419],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Reflection.PropertyInfo\n  commentId: T:System.Reflection.PropertyInfo\n  id: PropertyInfo\n  children:\n  - System.Reflection.PropertyInfo.#ctor\n  - System.Reflection.PropertyInfo.Attributes\n  - System.Reflection.PropertyInfo.CanRead\n  - System.Reflection.PropertyInfo.CanWrite\n  - System.Reflection.PropertyInfo.Equals(System.Object)\n  - System.Reflection.PropertyInfo.GetAccessors\n  - System.Reflection.PropertyInfo.GetAccessors(System.Boolean)\n  - System.Reflection.PropertyInfo.GetConstantValue\n  - System.Reflection.PropertyInfo.GetGetMethod\n  - System.Reflection.PropertyInfo.GetGetMethod(System.Boolean)\n  - System.Reflection.PropertyInfo.GetHashCode\n  - System.Reflection.PropertyInfo.GetIndexParameters\n  - System.Reflection.PropertyInfo.GetMethod\n  - System.Reflection.PropertyInfo.GetOptionalCustomModifiers\n  - System.Reflection.PropertyInfo.GetRawConstantValue\n  - System.Reflection.PropertyInfo.GetRequiredCustomModifiers\n  - System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)\n  - System.Reflection.PropertyInfo.GetSetMethod\n  - System.Reflection.PropertyInfo.GetValue(System.Object)\n  - System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])\n  - System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)\n  - System.Reflection.PropertyInfo.IsSpecialName\n  - System.Reflection.PropertyInfo.MemberType\n  - System.Reflection.PropertyInfo.op_Equality(System.Reflection.PropertyInfo,System.Reflection.PropertyInfo)\n  - System.Reflection.PropertyInfo.op_Inequality(System.Reflection.PropertyInfo,System.Reflection.PropertyInfo)\n  - System.Reflection.PropertyInfo.PropertyType\n  - System.Reflection.PropertyInfo.SetMethod\n  - System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)\n  - System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])\n  - System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)\n  - System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  - System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetType\n  - System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  - System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetTypeInfoCount(System.UInt32@)\n  - System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  langs:\n  - csharp\n  name: PropertyInfo\n  nameWithType: PropertyInfo\n  fullName: System.Reflection.PropertyInfo\n  type: Class\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Discovers the attributes of a property and provides access to property metadata.\n  remarks: \"Properties are logically the same as fields. A property is a named aspect of an object's state whose value is typically accessible through `get` and `set` accessors. Properties may be read-only, in which case a set routine is not supported.  \\n  \\n> [!NOTE]\\n>  To determine whether a property is `static`, you must obtain the <xref:System.Reflection.MethodInfo> for the `get` or `set` accessor, by calling the <xref:System.Reflection.PropertyInfo.GetGetMethod%2A> or the <xref:System.Reflection.PropertyInfo.GetSetMethod%2A> method, and examine its <xref:System.Reflection.MethodBase.IsStatic%2A> property.  \\n  \\n Several methods in this class assume that the `get` accessor and `set` accessor methods of a property have certain formats. The signatures of the `get` and `set` methods must match the following convention:  \\n  \\n-   The return type of the `get` method and the last argument of the `set` method must be identical. This is the type of the property.  \\n  \\n-   The `get` and `set` methods must have the same number, type, and order of indices.  \\n  \\n If this format is not followed, the behavior of the `GetValue` and `SetValue` methods is undefined.  \\n  \\n Calling <xref:System.Reflection.ICustomAttributeProvider.GetCustomAttributes%2A?displayProperty=fullName> on `PropertyInfo` when the `inherit` parameter of `GetCustomAttributes` is `true` does not walk the type hierarchy. Use <xref:System.Attribute?displayProperty=fullName> to inherit custom attributes.\"\n  example:\n  - \"This example shows how to use various reflection classes to analyze the metadata contained in an assembly.  \\n  \\n> [!NOTE]\\n>  This example generates about 55,000 lines of data, which you can redirect to a text file at the command prompt, as follows: **example.exe > propertyinfo.txt**  \\n  \\n [!code-cpp[Reflection#1](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection/CPP/reflection.cpp#1)]\\n [!code-csharp[Reflection#1](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection/CS/Reflection.cs#1)]\\n [!code-vb[Reflection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection/VB/Reflection.vb#1)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)]\n\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public abstract class PropertyInfo : System.Reflection.MemberInfo, System.Runtime.InteropServices._PropertyInfo\n  inheritance:\n  - System.Object\n  - System.Reflection.MemberInfo\n  derivedClasses:\n  - Microsoft.JScript.COMPropertyInfo\n  - System.Reflection.Emit.PropertyBuilder\n  implements:\n  - System.Runtime.InteropServices._PropertyInfo\n  inheritedMembers:\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  - System.Reflection.MemberInfo.CustomAttributes\n  - System.Reflection.MemberInfo.DeclaringType\n  - System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)\n  - System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)\n  - System.Reflection.MemberInfo.GetCustomAttributesData\n  - System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)\n  - System.Reflection.MemberInfo.MetadataToken\n  - System.Reflection.MemberInfo.Module\n  - System.Reflection.MemberInfo.Name\n  - System.Reflection.MemberInfo.op_Equality(System.Reflection.MemberInfo,System.Reflection.MemberInfo)\n  - System.Reflection.MemberInfo.op_Inequality(System.Reflection.MemberInfo,System.Reflection.MemberInfo)\n  - System.Reflection.MemberInfo.ReflectedType\n  - System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Boolean)\n  - System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Type,System.Boolean)\n  - System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#IsDefined(System.Type,System.Boolean)\n  - System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  - System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetType\n  - System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  - System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfoCount(System.UInt32@)\n  - System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  extensionMethods:\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.MemberInfo,System.Type)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.MemberInfo)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.MemberInfo,System.Boolean)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo,System.Type)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.MemberInfo)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.MemberInfo,System.Boolean)\n  - System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.MemberInfo,System.Type)\n  - System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  - System.Reflection.MemberInfoExtensions.GetMetadataToken(System.Reflection.MemberInfo)\n  - System.Reflection.MemberInfoExtensions.HasMetadataToken(System.Reflection.MemberInfo)\n  - System.Reflection.PropertyInfoExtensions.GetAccessors(System.Reflection.PropertyInfo)\n  - System.Reflection.PropertyInfoExtensions.GetAccessors(System.Reflection.PropertyInfo,System.Boolean)\n  - System.Reflection.PropertyInfoExtensions.GetGetMethod(System.Reflection.PropertyInfo)\n  - System.Reflection.PropertyInfoExtensions.GetGetMethod(System.Reflection.PropertyInfo,System.Boolean)\n  - System.Reflection.PropertyInfoExtensions.GetSetMethod(System.Reflection.PropertyInfo)\n  - System.Reflection.PropertyInfoExtensions.GetSetMethod(System.Reflection.PropertyInfo,System.Boolean)\n  attributes:\n  - type: System.Runtime.InteropServices.ClassInterfaceAttribute\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/PropertyInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.PropertyInfo.#ctor\n  commentId: M:System.Reflection.PropertyInfo.#ctor\n  id: '#ctor'\n  parent: System.Reflection.PropertyInfo\n  langs:\n  - csharp\n  name: PropertyInfo()\n  nameWithType: PropertyInfo.PropertyInfo()\n  fullName: PropertyInfo.PropertyInfo()\n  type: Constructor\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Initializes a new instance of the <xref href=\"System.Reflection.PropertyInfo\"></xref> class.\n  syntax:\n    content: protected PropertyInfo ();\n    parameters: []\n  overload: System.Reflection.PropertyInfo.#ctor*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/PropertyInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.PropertyInfo.Attributes\n  commentId: P:System.Reflection.PropertyInfo.Attributes\n  id: Attributes\n  parent: System.Reflection.PropertyInfo\n  langs:\n  - csharp\n  name: Attributes\n  nameWithType: PropertyInfo.Attributes\n  fullName: PropertyInfo.Attributes\n  type: Property\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets the attributes for this property.\n  remarks: \"The <xref:System.Reflection.PropertyInfo.Attributes%2A> property returns the attributes associated with the property represented by this <xref:System.Reflection.PropertyInfo> object.  The attributes are primarily modifiers applied by a compiler when creating a property; they indicate whether a property is the default property, a `SpecialName` property, and so on. Note that, for almost all properties found in types in the .NET Framework class library, the value of the <xref:System.Reflection.PropertyInfo.Attributes%2A> property is <xref:System.Reflection.PropertyAttributes?displayProperty=fullName>.  \\n  \\n> [!TIP]\\n>  In most cases, you probably want to retrieve the custom attributes associated with a property. To do this, retrieve the value of the <xref:System.Reflection.MemberInfo.CustomAttributes%2A> property, or call one of the overloads of the <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A> method.  \\n  \\n To get the <xref:System.Reflection.PropertyInfo.Attributes%2A> property:  \\n  \\n1.  Get a <xref:System.Type> object that represents the type to which the property belongs.  \\n  \\n2.  Get the <xref:System.Reflection.PropertyInfo> object by calling an overload of the <xref:System.Type.GetProperty%2A?displayProperty=fullName> method.  \\n  \\n3.  Retrieve the property's attributes from the <xref:System.Reflection.PropertyInfo.Attributes%2A> property.  \\n  \\n You can define the attributes of a property for a type created dynamically using reflection emit by calling an overload of the <xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A> method and supplying a value for the `attributes` argument.\"\n  syntax:\n    content: public abstract System.Reflection.PropertyAttributes Attributes { get; }\n    return:\n      type: System.Reflection.PropertyAttributes\n      description: The attributes of this property.\n  overload: System.Reflection.PropertyInfo.Attributes*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/PropertyInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.PropertyInfo.CanRead\n  commentId: P:System.Reflection.PropertyInfo.CanRead\n  id: CanRead\n  parent: System.Reflection.PropertyInfo\n  langs:\n  - csharp\n  name: CanRead\n  nameWithType: PropertyInfo.CanRead\n  fullName: PropertyInfo.CanRead\n  type: Property\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets a value indicating whether the property can be read.\n  remarks: \"If the property does not have a `get` accessor, it cannot be read.  \\n  \\n To get the `CanRead` property, first get the class `Type`. From the `Type`, get the `PropertyInfo`. From the `PropertyInfo`, get the `CanRead` value.\"\n  example:\n  - \"The following example defines two properties. The first property is readable and the `CanRead` property is `true`. The second property is not readable (there is no get accessor), and the `CanRead` property is `false`.  \\n  \\n [!code-cpp[Classic PropertyInfo.CanRead Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic PropertyInfo.CanRead Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic PropertyInfo.CanRead Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic PropertyInfo.CanRead Example/CS/source.cs#1)]\\n [!code-vb[Classic PropertyInfo.CanRead Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic PropertyInfo.CanRead Example/VB/source.vb#1)]\"\n  syntax:\n    content: public abstract bool CanRead { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if this property can be read; otherwise, `false`.'\n  overload: System.Reflection.PropertyInfo.CanRead*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/PropertyInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.PropertyInfo.CanWrite\n  commentId: P:System.Reflection.PropertyInfo.CanWrite\n  id: CanWrite\n  parent: System.Reflection.PropertyInfo\n  langs:\n  - csharp\n  name: CanWrite\n  nameWithType: PropertyInfo.CanWrite\n  fullName: PropertyInfo.CanWrite\n  type: Property\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets a value indicating whether the property can be written to.\n  remarks: \"<xref:System.Reflection.PropertyInfo.CanWrite%2A> returns `true` if the property has a `set` accessor, even if the accessor is `private`, `internal` (or `Friend` in Visual Basic), or `protected`.   If the property does not have a `set` accessor, the method returns `false`.  \\n  \\n To get the value of the <xref:System.Reflection.PropertyInfo.CanWrite%2A> property:  \\n  \\n1.  Get the <xref:System.Type> object of the type that includes the property.  \\n  \\n2.  Call the <xref:System.Type.GetProperty%2A?displayProperty=fullName> to get the <xref:System.Reflection.PropertyInfo> object that represents the property.  \\n  \\n3.  Retrieve the value of the <xref:System.Reflection.PropertyInfo.CanWrite%2A> property.\"\n  example:\n  - \"The following example defines two properties. The first property is writable and the `CanWrite` property is `true`. The second property is not writable (there is no `set` accessor), and the `CanWrite` property is `false`.  \\n  \\n [!code-cpp[Classic PropertyInfo.CanWrite Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic PropertyInfo.CanWrite Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic PropertyInfo.CanWrite Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic PropertyInfo.CanWrite Example/CS/source.cs#1)]\\n [!code-vb[Classic PropertyInfo.CanWrite Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic PropertyInfo.CanWrite Example/VB/source.vb#1)]\"\n  syntax:\n    content: public abstract bool CanWrite { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if this property can be written to; otherwise, `false`.'\n  overload: System.Reflection.PropertyInfo.CanWrite*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/PropertyInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.PropertyInfo.Equals(System.Object)\n  commentId: M:System.Reflection.PropertyInfo.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Reflection.PropertyInfo\n  langs:\n  - csharp\n  name: Equals(Object)\n  nameWithType: PropertyInfo.Equals(Object)\n  fullName: PropertyInfo.Equals(Object)\n  type: Method\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Returns a value that indicates whether this instance is equal to a specified object.\n  syntax:\n    content: public override bool Equals (object obj);\n    parameters:\n    - id: obj\n      type: System.Object\n      description: An object to compare with this instance, or `null`.\n    return:\n      type: System.Boolean\n      description: '`true` if <code>obj</code> equals the type and value of this instance; otherwise, `false`.'\n  overload: System.Reflection.PropertyInfo.Equals*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/PropertyInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.PropertyInfo.GetAccessors\n  commentId: M:System.Reflection.PropertyInfo.GetAccessors\n  id: GetAccessors\n  parent: System.Reflection.PropertyInfo\n  langs:\n  - csharp\n  name: GetAccessors()\n  nameWithType: PropertyInfo.GetAccessors()\n  fullName: PropertyInfo.GetAccessors()\n  type: Method\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Returns an array whose elements reflect the public `get` and `set` accessors of the property reflected by the current instance.\n  remarks: \"To call the <xref:System.Reflection.PropertyInfo.GetAccessors%2A> method:  \\n  \\n1.  Get a <xref:System.Type> object that represents the class.  \\n  \\n2.  From the <xref:System.Type> object, get the <xref:System.Reflection.PropertyInfo> object.  \\n  \\n3.  From the <xref:System.Reflection.PropertyInfo> object, call the <xref:System.Reflection.PropertyInfo.GetAccessors%2A> method.\"\n  example:\n  - \"The following example retrieves the public accessors of the `ClassWithProperty.Caption` property and displays information about them. It also calls the <xref:System.Reflection.MethodBase.Invoke%2A> method of the setter to set the property value and of the getter to retrieve the property value.  \\n  \\n [!code-csharp[System.Reflection.PropertyInfo.GetAccessors#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.reflection.propertyinfo.getaccessors/cs/source.cs#1)]\\n [!code-vb[System.Reflection.PropertyInfo.GetAccessors#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.reflection.propertyinfo.getaccessors/vb/source.vb#1)]\"\n  syntax:\n    content: public System.Reflection.MethodInfo[] GetAccessors ();\n    parameters: []\n    return:\n      type: System.Reflection.MethodInfo[]\n      description: An array of <xref href=\"System.Reflection.MethodInfo\"></xref> objects that reflect the public `get` and `set` accessors of the property reflected by the current instance, if found; otherwise, this method returns an array with zero (0) elements.\n  overload: System.Reflection.PropertyInfo.GetAccessors*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/PropertyInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.PropertyInfo.GetAccessors(System.Boolean)\n  commentId: M:System.Reflection.PropertyInfo.GetAccessors(System.Boolean)\n  id: GetAccessors(System.Boolean)\n  parent: System.Reflection.PropertyInfo\n  langs:\n  - csharp\n  name: GetAccessors(Boolean)\n  nameWithType: PropertyInfo.GetAccessors(Boolean)\n  fullName: PropertyInfo.GetAccessors(Boolean)\n  type: Method\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Returns an array whose elements reflect the public and, if specified, non-public `get` and `set` accessors of the property reflected by the current instance.\n  remarks: \"To call the <xref:System.Reflection.PropertyInfo.GetAccessors%2A> method:  \\n  \\n1.  Get a <xref:System.Type> object that represents the class.  \\n  \\n2.  From the <xref:System.Type> object, get the <xref:System.Reflection.PropertyInfo> object.  \\n  \\n3.  From the <xref:System.Reflection.PropertyInfo> object, call the <xref:System.Reflection.PropertyInfo.GetAccessors%2A> method.\"\n  example:\n  - \"The following example retrieves the accessors of the `ClassWithProperty.Caption` property and displays information about them. It also calls the <xref:System.Reflection.MethodBase.Invoke%2A> method of the setter to set the property value and of the getter to retrieve the property value.  \\n  \\n [!code-csharp[Classic PropertyInfo.GetAccessors1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic PropertyInfo.GetAccessors1 Example/CS/source.cs#1)]\\n [!code-vb[Classic PropertyInfo.GetAccessors1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic PropertyInfo.GetAccessors1 Example/VB/source.vb#1)]\"\n  syntax:\n    content: public abstract System.Reflection.MethodInfo[] GetAccessors (bool nonPublic);\n    parameters:\n    - id: nonPublic\n      type: System.Boolean\n      description: Indicates whether non-public methods should be returned in the returned array. `true` if non-public methods are to be included; otherwise, `false`.\n    return:\n      type: System.Reflection.MethodInfo[]\n      description: An array whose elements reflect the `get` and `set` accessors of the property reflected by the current instance. If <code>nonPublic</code> is `true`, this array contains public and non-public `get` and `set` accessors. If <code>nonPublic</code> is `false`, this array contains only public `get` and `set` accessors. If no accessors with the specified visibility are found, this method returns an array with zero (0) elements.\n  overload: System.Reflection.PropertyInfo.GetAccessors*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/PropertyInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.PropertyInfo.GetConstantValue\n  commentId: M:System.Reflection.PropertyInfo.GetConstantValue\n  id: GetConstantValue\n  parent: System.Reflection.PropertyInfo\n  langs:\n  - csharp\n  name: GetConstantValue()\n  nameWithType: PropertyInfo.GetConstantValue()\n  fullName: PropertyInfo.GetConstantValue()\n  type: Method\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Returns a literal value associated with the property by a compiler.\n  remarks: \"This method is provided for designers of managed compilers and code analyzers.  \\n  \\n> [!NOTE]\\n>  Do not use this method in the reflection-only context, because it might cause code to execute. Use the <xref:System.Reflection.PropertyInfo.GetRawConstantValue%2A> method instead.  \\n  \\n In unmanaged metadata, the Constant table is used to store constant values for fields, parameters, and properties. Constant information does not directly influence runtime behavior. Compilers inspect this information, at compile time, when importing metadata. If used, the value of a constant is embedded in the Microsoft intermediate language (MSIL) stream the compiler emits. There are no MSIL instructions that can be used to access the Constant table at run time.  \\n  \\n> [!NOTE]\\n>  For more information on constant values and the Constant table, see the ECMA Partition II documentation. The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.\"\n  syntax:\n    content: public virtual object GetConstantValue ();\n    parameters: []\n    return:\n      type: System.Object\n      description: An <xref href=\"System.Object\"></xref> that contains the literal value associated with the property. If the literal value is a class type with an element value of zero, the return value is `null`.\n  overload: System.Reflection.PropertyInfo.GetConstantValue*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The Constant table in unmanaged metadata does not contain a constant value for the current property.\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: The type of the value is not one of the types permitted by the Common Language Specification (CLS). See the ECMA Partition II specification, Metadata.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/PropertyInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.PropertyInfo.GetGetMethod\n  commentId: M:System.Reflection.PropertyInfo.GetGetMethod\n  id: GetGetMethod\n  parent: System.Reflection.PropertyInfo\n  langs:\n  - csharp\n  name: GetGetMethod()\n  nameWithType: PropertyInfo.GetGetMethod()\n  fullName: PropertyInfo.GetGetMethod()\n  type: Method\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Returns the public `get` accessor for this property.\n  remarks: \"This is a convenience method that provides an implementation for the abstract `GetGetMethod` method with the `nonPublic` parameter set to `false`.  \\n  \\n To use the `GetGetMethod` method, first get the class `Type`. From the `Type`, get the <xref:System.Reflection.PropertyInfo>. From the <xref:System.Reflection.PropertyInfo>, use the `GetGetMethod` method.\"\n  syntax:\n    content: public System.Reflection.MethodInfo GetGetMethod ();\n    parameters: []\n    return:\n      type: System.Reflection.MethodInfo\n      description: A `MethodInfo` object representing the public `get` accessor for this property, or `null` if the `get` accessor is non-public or does not exist.\n  overload: System.Reflection.PropertyInfo.GetGetMethod*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/PropertyInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.PropertyInfo.GetGetMethod(System.Boolean)\n  commentId: M:System.Reflection.PropertyInfo.GetGetMethod(System.Boolean)\n  id: GetGetMethod(System.Boolean)\n  parent: System.Reflection.PropertyInfo\n  langs:\n  - csharp\n  name: GetGetMethod(Boolean)\n  nameWithType: PropertyInfo.GetGetMethod(Boolean)\n  fullName: PropertyInfo.GetGetMethod(Boolean)\n  type: Method\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: When overridden in a derived class, returns the public or non-public `get` accessor for this property.\n  remarks: \"This property is the <xref:System.Reflection.MethodInfo> representing the get accessor.  \\n  \\n To use the `GetGetMethod` method, first get the class `Type`. From the `Type`, get the <xref:System.Reflection.PropertyInfo>. From the <xref:System.Reflection.PropertyInfo>, use the `GetGetMethod` method.\"\n  example:\n  - \"The following example displays the public or non-public `get` accessor for the specified property.  \\n  \\n [!code-cpp[Classic PropertyInfo.GetGetMethod1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic PropertyInfo.GetGetMethod1 Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic PropertyInfo.GetGetMethod1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic PropertyInfo.GetGetMethod1 Example/CS/source.cs#1)]\\n [!code-vb[Classic PropertyInfo.GetGetMethod1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic PropertyInfo.GetGetMethod1 Example/VB/source.vb#1)]\"\n  syntax:\n    content: public abstract System.Reflection.MethodInfo GetGetMethod (bool nonPublic);\n    parameters:\n    - id: nonPublic\n      type: System.Boolean\n      description: Indicates whether a non-public `get` accessor should be returned. `true` if a non-public accessor is to be returned; otherwise, `false`.\n    return:\n      type: System.Reflection.MethodInfo\n      description: A `MethodInfo` object representing the `get` accessor for this property, if <code>nonPublic</code> is `true`. Returns `null` if <code>nonPublic</code> is `false` and the `get` accessor is non-public, or if <code>nonPublic</code> is `true` but no `get` accessors exist.\n  overload: System.Reflection.PropertyInfo.GetGetMethod*\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The requested method is non-public and the caller does not have <xref href=\"System.Security.Permissions.ReflectionPermission\"></xref> to reflect on this non-public method.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/PropertyInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.PropertyInfo.GetHashCode\n  commentId: M:System.Reflection.PropertyInfo.GetHashCode\n  id: GetHashCode\n  parent: System.Reflection.PropertyInfo\n  langs:\n  - csharp\n  name: GetHashCode()\n  nameWithType: PropertyInfo.GetHashCode()\n  fullName: PropertyInfo.GetHashCode()\n  type: Method\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Returns the hash code for this instance.\n  syntax:\n    content: public override int GetHashCode ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: A 32-bit signed integer hash code.\n  overload: System.Reflection.PropertyInfo.GetHashCode*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/PropertyInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.PropertyInfo.GetIndexParameters\n  commentId: M:System.Reflection.PropertyInfo.GetIndexParameters\n  id: GetIndexParameters\n  parent: System.Reflection.PropertyInfo\n  langs:\n  - csharp\n  name: GetIndexParameters()\n  nameWithType: PropertyInfo.GetIndexParameters()\n  fullName: PropertyInfo.GetIndexParameters()\n  type: Method\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: When overridden in a derived class, returns an array of all the index parameters for the property.\n  remarks: \"Extract any required parameter information from the returned array.  \\n  \\n To use the `GetIndexParameters` method, first get the class `Type`. From the `Type`, get the `PropertyInfo`. From the `PropertyInfo`, use the `GetIndexParameters` method.\"\n  example:\n  - \"The following example displays the index parameters of the specified property.  \\n  \\n [!code-cpp[Classic PropertyInfo.GetIndexParameters Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic PropertyInfo.GetIndexParameters Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic PropertyInfo.GetIndexParameters Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic PropertyInfo.GetIndexParameters Example/CS/source.cs#1)]\\n [!code-vb[Classic PropertyInfo.GetIndexParameters Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic PropertyInfo.GetIndexParameters Example/VB/source.vb#1)]\"\n  syntax:\n    content: public abstract System.Reflection.ParameterInfo[] GetIndexParameters ();\n    parameters: []\n    return:\n      type: System.Reflection.ParameterInfo[]\n      description: An array of type `ParameterInfo` containing the parameters for the indexes. If the property is not indexed, the array has 0 (zero) elements.\n  overload: System.Reflection.PropertyInfo.GetIndexParameters*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/PropertyInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.PropertyInfo.GetMethod\n  commentId: P:System.Reflection.PropertyInfo.GetMethod\n  id: GetMethod\n  parent: System.Reflection.PropertyInfo\n  langs:\n  - csharp\n  name: GetMethod\n  nameWithType: PropertyInfo.GetMethod\n  fullName: PropertyInfo.GetMethod\n  type: Property\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets the `get` accessor for this property.\n  syntax:\n    content: public virtual System.Reflection.MethodInfo GetMethod { get; }\n    return:\n      type: System.Reflection.MethodInfo\n      description: The `get` accessor for this property.\n  overload: System.Reflection.PropertyInfo.GetMethod*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/PropertyInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.PropertyInfo.GetOptionalCustomModifiers\n  commentId: M:System.Reflection.PropertyInfo.GetOptionalCustomModifiers\n  id: GetOptionalCustomModifiers\n  parent: System.Reflection.PropertyInfo\n  langs:\n  - csharp\n  name: GetOptionalCustomModifiers()\n  nameWithType: PropertyInfo.GetOptionalCustomModifiers()\n  fullName: PropertyInfo.GetOptionalCustomModifiers()\n  type: Method\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Returns an array of types representing the optional custom modifiers of the property.\n  remarks: The <xref:System.Reflection.PropertyInfo.GetOptionalCustomModifiers%2A> and <xref:System.Reflection.PropertyInfo.GetRequiredCustomModifiers%2A> methods are provided for designers of managed compilers. For more information on custom modifiers, see <xref:System.Runtime.CompilerServices.IsBoxed> and related classes in the <xref:System.Runtime.CompilerServices> namespace and the metadata specification in the ECMA Partition II documentation. The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.\n  syntax:\n    content: public virtual Type[] GetOptionalCustomModifiers ();\n    parameters: []\n    return:\n      type: System.Type[]\n      description: An array of <xref href=\"System.Type\"></xref> objects that identify the optional custom modifiers of the current property, such as <xref href=\"System.Runtime.CompilerServices.IsConst\"></xref> or <xref href=\"System.Runtime.CompilerServices.IsImplicitlyDereferenced\"></xref>.\n  overload: System.Reflection.PropertyInfo.GetOptionalCustomModifiers*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/PropertyInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.PropertyInfo.GetRawConstantValue\n  commentId: M:System.Reflection.PropertyInfo.GetRawConstantValue\n  id: GetRawConstantValue\n  parent: System.Reflection.PropertyInfo\n  langs:\n  - csharp\n  name: GetRawConstantValue()\n  nameWithType: PropertyInfo.GetRawConstantValue()\n  fullName: PropertyInfo.GetRawConstantValue()\n  type: Method\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Returns a literal value associated with the property by a compiler.\n  remarks: \"This method is provided for designers of managed compilers and code analyzers.  \\n  \\n This method can be used in both the execution context and the reflection-only context.  \\n  \\n In unmanaged metadata, the Constant table is used to store constant values for fields, parameters, and properties. Constant information does not directly influence runtime behavior. Compilers inspect this information, at compile time, when importing metadata. If used, the value of a constant is embedded in the Microsoft intermediate language (MSIL) stream the compiler emits. There are no MSIL instructions that can be used to access the Constant table at run time.  \\n  \\n> [!NOTE]\\n>  For more information on constant values and the Constant table, see the ECMA Partition II documentation. The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.\"\n  syntax:\n    content: public virtual object GetRawConstantValue ();\n    parameters: []\n    return:\n      type: System.Object\n      description: An <xref href=\"System.Object\"></xref> that contains the literal value associated with the property. If the literal value is a class type with an element value of zero, the return value is `null`.\n  overload: System.Reflection.PropertyInfo.GetRawConstantValue*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The Constant table in unmanaged metadata does not contain a constant value for the current property.\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: 'The type of the value is not one of the types permitted by the Common Language Specification (CLS). See the ECMA Partition II specification, Metadata Logical Format: Other Structures, Element Types used in Signatures.'\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/PropertyInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.PropertyInfo.GetRequiredCustomModifiers\n  commentId: M:System.Reflection.PropertyInfo.GetRequiredCustomModifiers\n  id: GetRequiredCustomModifiers\n  parent: System.Reflection.PropertyInfo\n  langs:\n  - csharp\n  name: GetRequiredCustomModifiers()\n  nameWithType: PropertyInfo.GetRequiredCustomModifiers()\n  fullName: PropertyInfo.GetRequiredCustomModifiers()\n  type: Method\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Returns an array of types representing the required custom modifiers of the property.\n  remarks: The <xref:System.Reflection.PropertyInfo.GetOptionalCustomModifiers%2A> and <xref:System.Reflection.PropertyInfo.GetRequiredCustomModifiers%2A> methods are provided for designers of managed compilers. For more information on custom modifiers, see <xref:System.Runtime.CompilerServices.IsBoxed> and related classes in the <xref:System.Runtime.CompilerServices> namespace and the metadata specification in the ECMA Partition II documentation. The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.\n  syntax:\n    content: public virtual Type[] GetRequiredCustomModifiers ();\n    parameters: []\n    return:\n      type: System.Type[]\n      description: An array of <xref href=\"System.Type\"></xref> objects that identify the required custom modifiers of the current property, such as <xref href=\"System.Runtime.CompilerServices.IsConst\"></xref> or <xref href=\"System.Runtime.CompilerServices.IsImplicitlyDereferenced\"></xref>.\n  overload: System.Reflection.PropertyInfo.GetRequiredCustomModifiers*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/PropertyInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)\n  commentId: M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)\n  id: GetSetMethod(System.Boolean)\n  parent: System.Reflection.PropertyInfo\n  langs:\n  - csharp\n  name: GetSetMethod(Boolean)\n  nameWithType: PropertyInfo.GetSetMethod(Boolean)\n  fullName: PropertyInfo.GetSetMethod(Boolean)\n  type: Method\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: When overridden in a derived class, returns the `set` accessor for this property.\n  remarks: To use the `GetSetMethod` method, first get the class `Type`. From the `Type`, get the <xref:System.Reflection.PropertyInfo>. From the `PropertyInfo`, use the `GetSetMethod` method.\n  example:\n  - \"The following example displays the `set` accessor for the specified property.  \\n  \\n [!code-cpp[Classic PropertyInfo.GetSetMethod1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic PropertyInfo.GetSetMethod1 Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic PropertyInfo.GetSetMethod1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic PropertyInfo.GetSetMethod1 Example/CS/source.cs#1)]\\n [!code-vb[Classic PropertyInfo.GetSetMethod1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic PropertyInfo.GetSetMethod1 Example/VB/source.vb#1)]\"\n  syntax:\n    content: public abstract System.Reflection.MethodInfo GetSetMethod (bool nonPublic);\n    parameters:\n    - id: nonPublic\n      type: System.Boolean\n      description: Indicates whether the accessor should be returned if it is non-public. `true` if a non-public accessor is to be returned; otherwise, `false`.\n    return:\n      type: System.Reflection.MethodInfo\n      description: \"This property's `Set` method, or `null`, as shown in the following table.  \\n  \\n <table><thead><tr><th> Value  \\n  \\n </th><th> Condition  \\n  \\n </th></tr></thead><tbody><tr><td> The `Set` method for this property.  \\n  \\n </td><td> The `set` accessor is public.  \\n  \\n -or-  \\n  \\n <code>nonPublic</code> is `true` and the `set` accessor is non-public.  \\n  \\n </td></tr><tr><td>`null`</td><td><code>nonPublic</code> is `true`, but the property is read-only.  \\n  \\n -or-  \\n  \\n <code>nonPublic</code> is `false` and the `set` accessor is non-public.  \\n  \\n -or-  \\n  \\n There is no `set` accessor.  \\n  \\n </td></tr></tbody></table>\"\n  overload: System.Reflection.PropertyInfo.GetSetMethod*\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The requested method is non-public and the caller does not have <xref href=\"System.Security.Permissions.ReflectionPermission\"></xref> to reflect on this non-public method.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/PropertyInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.PropertyInfo.GetSetMethod\n  commentId: M:System.Reflection.PropertyInfo.GetSetMethod\n  id: GetSetMethod\n  parent: System.Reflection.PropertyInfo\n  langs:\n  - csharp\n  name: GetSetMethod()\n  nameWithType: PropertyInfo.GetSetMethod()\n  fullName: PropertyInfo.GetSetMethod()\n  type: Method\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Returns the public `set` accessor for this property.\n  remarks: \"This is a convenience method that provides an implementation for the abstract `GetSetMethod` method with the `nonPublic` parameter set to `false`.  \\n  \\n To use the `GetSetMethod` method, first get the class `Type`. From the `Type`, get the <xref:System.Reflection.PropertyInfo>. From the `PropertyInfo`, use the `GetSetMethod` method.\"\n  syntax:\n    content: public System.Reflection.MethodInfo GetSetMethod ();\n    parameters: []\n    return:\n      type: System.Reflection.MethodInfo\n      description: The `MethodInfo` object representing the `Set` method for this property if the `set` accessor is public, or `null` if the `set` accessor is not public.\n  overload: System.Reflection.PropertyInfo.GetSetMethod*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/PropertyInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.PropertyInfo.GetValue(System.Object)\n  commentId: M:System.Reflection.PropertyInfo.GetValue(System.Object)\n  id: GetValue(System.Object)\n  parent: System.Reflection.PropertyInfo\n  langs:\n  - csharp\n  name: GetValue(Object)\n  nameWithType: PropertyInfo.GetValue(Object)\n  fullName: PropertyInfo.GetValue(Object)\n  type: Method\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Returns the property value of a specified object.\n  remarks: \"You call the <xref:System.Reflection.PropertyInfo.GetValue%28System.Object%29> overload to retrieve the value of a non-indexed property; if you try to retrieve the value of an indexed property, the method throws a <xref:System.Reflection.TargetParameterCountException> exception. You can determine whether a property is indexed or not by calling the <xref:System.Reflection.PropertyInfo.GetIndexParameters%2A> method. If the length of the returned <xref:System.Reflection.ParameterInfo> array is zero, the property is not indexed.  \\n  \\n This is a convenience method that provides an implementation for the abstract <xref:System.Reflection.PropertyInfo.GetValue%28System.Object%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29> method with the <xref:System.Reflection.BindingFlags> parameter set to <xref:System.Reflection.BindingFlags?displayProperty=fullName>, the <xref:System.Reflection.Binder> set to `null`, the object array of index values set to `null`, and the <xref:System.Globalization.CultureInfo> set to `null`.\"\n  example:\n  - \"The following example defines a `Planet` class that has two properties: `Name`, the name of the planet; and `Distance`, the planet's distance from Earth. The example instantiates a `Planet` object that represents the planet Jupiter and passes it to a `GetPropertyValues` method that displays information about the properties and uses the <xref:System.Reflection.PropertyInfo.GetValue%2A> method to get the value of each `Planet` property.  \\n  \\n [!code-csharp[System.Reflection.PropertyInfo.GetValue#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.reflection.propertyinfo.getvalue/cs/getvalue1.cs#1)]\\n [!code-vb[System.Reflection.PropertyInfo.GetValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.reflection.propertyinfo.getvalue/vb/getvalue1.vb#1)]\"\n  syntax:\n    content: public object GetValue (object obj);\n    parameters:\n    - id: obj\n      type: System.Object\n      description: The object whose property value will be returned.\n    return:\n      type: System.Object\n      description: The property value of the specified object.\n  overload: System.Reflection.PropertyInfo.GetValue*\n  exceptions: []\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/PropertyInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])\n  commentId: M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])\n  id: GetValue(System.Object,System.Object[])\n  parent: System.Reflection.PropertyInfo\n  langs:\n  - csharp\n  name: GetValue(Object, Object[])\n  nameWithType: PropertyInfo.GetValue(Object, Object[])\n  fullName: PropertyInfo.GetValue(Object, Object[])\n  type: Method\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Returns the property value of a specified object with optional index values for indexed properties.\n  remarks: \"To determine whether a property is indexed, use the <xref:System.Reflection.PropertyInfo.GetIndexParameters%2A> method. If the resulting array has 0 (zero) elements, the property is not indexed.  \\n  \\n This is a convenience method that provides an implementation for the abstract `GetValue` method with a `BindingFlags` parameter of `Default`, the `Binder` set to `null`, and the `CultureInfo` set to `null`.  \\n  \\n Because static properties belong to the type, not individual objects, get static properties by passing `null` as the object argument. For example, use the following code to get the static `CurrentCulture` property of `CultureInfo` :  \\n  \\n```  \\nPropertyInfo CurCultProp =   \\n    (typeof(CultureInfo)).GetProperty(\\\"CurrentCulture\\\");   \\nConsole.WriteLine(\\\"CurrCult: \\\" +  \\n    CurCultProp.GetValue(null,null));  \\n```  \\n  \\n To use the `GetValue` method, first get the class `Type`. From the `Type`, get the `PropertyInfo`. From the `PropertyInfo`, use the `GetValue` method.  \\n  \\n> [!NOTE]\\n>  Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof. (See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)  \\n>   \\n>  To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.\"\n  example:\n  - \"The following example shows how to get the value of an indexed property. The <xref:System.String.Chars%2A?displayProperty=fullName> property is the default property (the indexer in C#) of the <xref:System.String> class.  \\n  \\n [!code-csharp[System.Reflection.PropertyInfo.GetValue Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.reflection.PropertyInfo.GetValue Example/CS/source.cs#1)]\\n [!code-vb[System.Reflection.PropertyInfo.GetValue Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.reflection.PropertyInfo.GetValue Example/VB/source.vb#1)]\"\n  syntax:\n    content: public virtual object GetValue (object obj, object[] index);\n    parameters:\n    - id: obj\n      type: System.Object\n      description: The object whose property value will be returned.\n    - id: index\n      type: System.Object[]\n      description: Optional index values for indexed properties. The indexes of indexed properties are zero-based. This value should be `null` for non-indexed properties.\n    return:\n      type: System.Object\n      description: The property value of the specified object.\n  overload: System.Reflection.PropertyInfo.GetValue*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"The <code>index</code> array does not contain the type of arguments needed.  \\n  \\n -or-  \\n  \\n The property's `get` accessor is not found.\"\n  - type: System.Reflection.TargetException\n    commentId: T:System.Reflection.TargetException\n    description: \"<block subset=\\\"none\\\" type=\\\"note\\\">\\n      <p>  \\n In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch <xref href=\\\"System.Exception\\\"></xref> instead.  \\n  \\n</p>\\n    </block>  \\n  \\n The object does not match the target type, or a property is an instance property but <code>obj</code> is `null`.\"\n  - type: System.Reflection.TargetParameterCountException\n    commentId: T:System.Reflection.TargetParameterCountException\n    description: The number of parameters in <code>index</code> does not match the number of parameters the indexed property takes.\n  - type: System.MethodAccessException\n    commentId: T:System.MethodAccessException\n    description: \"<block subset=\\\"none\\\" type=\\\"note\\\">\\n      <p>  \\n In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch the base class exception, <xref href=\\\"System.MemberAccessException\\\"></xref>, instead.  \\n  \\n</p>\\n    </block>  \\n  \\n There was an illegal attempt to access a private or protected method inside a class.\"\n  - type: System.Reflection.TargetInvocationException\n    commentId: T:System.Reflection.TargetInvocationException\n    description: An error occurred while retrieving the property value. For example, an index value specified for an indexed property is out of range. The <xref href=\"System.Exception.InnerException\"></xref> property indicates the reason for the error.\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/PropertyInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)\n  commentId: M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)\n  id: GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)\n  parent: System.Reflection.PropertyInfo\n  langs:\n  - csharp\n  name: GetValue(Object, BindingFlags, Binder, Object[], CultureInfo)\n  nameWithType: PropertyInfo.GetValue(Object, BindingFlags, Binder, Object[], CultureInfo)\n  fullName: PropertyInfo.GetValue(Object, BindingFlags, Binder, Object[], CultureInfo)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: When overridden in a derived class, returns the property value of a specified object that has the specified binding, index, and culture-specific information.\n  remarks: \"To determine whether a property is indexed, use the <xref:System.Reflection.PropertyInfo.GetIndexParameters%2A> method. If the resulting array has 0 (zero) elements, the property is not indexed.  \\n  \\n Because static properties belong to the type, not individual objects, get static properties by passing `null` as the object argument. For example, use the following code to get the static `CurrentCulture` property of `CultureInfo` :  \\n  \\n```  \\nPropertyInfo CurCultProp =   \\n       (typeof(CultureInfo)).GetProperty(\\\"CurrentCulture\\\");   \\nConsole.WriteLine(\\\"CurrCult: \\\" +  \\n       CurCultProp.GetValue(null,null));  \\n```  \\n  \\n To use the `GetValue` method, first get the class `Type`. From the `Type`, get the `PropertyInfo`. From the `PropertyInfo`, use the `GetValue` method.  \\n  \\n> [!NOTE]\\n>  Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof. (See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)  \\n>   \\n>  To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.\"\n  syntax:\n    content: public abstract object GetValue (object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] index, System.Globalization.CultureInfo culture);\n    parameters:\n    - id: obj\n      type: System.Object\n      description: The object whose property value will be returned.\n    - id: invokeAttr\n      type: System.Reflection.BindingFlags\n      description: 'A bitwise combination of the following enumeration members that specify the invocation attribute: `InvokeMethod`, `CreateInstance`, `Static`, `GetField`, `SetField`, `GetProperty`, and `SetProperty`. You must specify a suitable invocation attribute. For example, to invoke a static member, set the `Static` flag.'\n    - id: binder\n      type: System.Reflection.Binder\n      description: An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <xref href=\"System.Reflection.MemberInfo\"></xref> objects through reflection. If <code>binder</code> is `null`, the default binder is used.\n    - id: index\n      type: System.Object[]\n      description: Optional index values for indexed properties. This value should be `null` for non-indexed properties.\n    - id: culture\n      type: System.Globalization.CultureInfo\n      description: The culture for which the resource is to be localized. If the resource is not localized for this culture, the <xref href=\"System.Globalization.CultureInfo.Parent\"></xref> property will be called successively in search of a match. If this value is `null`, the culture-specific information is obtained from the <xref href=\"System.Globalization.CultureInfo.CurrentUICulture\"></xref> property.\n    return:\n      type: System.Object\n      description: The property value of the specified object.\n  overload: System.Reflection.PropertyInfo.GetValue*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"The <code>index</code> array does not contain the type of arguments needed.  \\n  \\n -or-  \\n  \\n The property's `get` accessor is not found.\"\n  - type: System.Reflection.TargetException\n    commentId: T:System.Reflection.TargetException\n    description: The object does not match the target type, or a property is an instance property but <code>obj</code> is `null`.\n  - type: System.Reflection.TargetParameterCountException\n    commentId: T:System.Reflection.TargetParameterCountException\n    description: The number of parameters in <code>index</code> does not match the number of parameters the indexed property takes.\n  - type: System.MethodAccessException\n    commentId: T:System.MethodAccessException\n    description: There was an illegal attempt to access a private or protected method inside a class.\n  - type: System.Reflection.TargetInvocationException\n    commentId: T:System.Reflection.TargetInvocationException\n    description: An error occurred while retrieving the property value. For example, an index value specified for an indexed property is out of range. The <xref href=\"System.Exception.InnerException\"></xref> property indicates the reason for the error.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/PropertyInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.PropertyInfo.IsSpecialName\n  commentId: P:System.Reflection.PropertyInfo.IsSpecialName\n  id: IsSpecialName\n  parent: System.Reflection.PropertyInfo\n  langs:\n  - csharp\n  name: IsSpecialName\n  nameWithType: PropertyInfo.IsSpecialName\n  fullName: PropertyInfo.IsSpecialName\n  type: Property\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets a value indicating whether the property is the special name.\n  remarks: \"The `SpecialName` bit is set to flag members that are treated in a special way by some compilers (such as property accessors and operator overloading methods).  \\n  \\n To get the `IsSpecialName` property, first get the class `Type`. From the `Type`, get the `PropertyInfo`. From the `PropertyInfo`, get the `IsSpecialName` value.\"\n  syntax:\n    content: public bool IsSpecialName { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if this property is the special name; otherwise, `false`.'\n  overload: System.Reflection.PropertyInfo.IsSpecialName*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/PropertyInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.PropertyInfo.MemberType\n  commentId: P:System.Reflection.PropertyInfo.MemberType\n  id: MemberType\n  parent: System.Reflection.PropertyInfo\n  langs:\n  - csharp\n  name: MemberType\n  nameWithType: PropertyInfo.MemberType\n  fullName: PropertyInfo.MemberType\n  type: Property\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets a <xref href=\"System.Reflection.MemberTypes\"></xref> value indicating that this member is a property.\n  remarks: \"This property overrides <xref:System.Reflection.MemberInfo.MemberType%2A>. Therefore, when you examine a set of <xref:System.Reflection.MemberInfo> objects — for example, the array returned by <xref:System.Type.GetMembers%2A> — the <xref:System.Reflection.MemberInfo.MemberType%2A> property returns <xref:System.Reflection.MemberTypes.Property> only when a given member is a property.  \\n  \\n `MemberType` is a derived class of `MemberInfo` and specifies the type of member this is. Member types are constructors, properties, fields, and methods. Since this is a `PropertyInfo` property, the returned type is a property.  \\n  \\n To get the `MemberType` property, first get the class `Type`. From the `Type`, get the `PropertyInfo`. From the `PropertyInfo`, get the `MemberType` value.\"\n  example:\n  - \"The following example displays the type of the specified member.  \\n  \\n [!code-cpp[Classic PropertyInfo.MemberType Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic PropertyInfo.MemberType Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic PropertyInfo.MemberType Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic PropertyInfo.MemberType Example/CS/source.cs#1)]\\n [!code-vb[Classic PropertyInfo.MemberType Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic PropertyInfo.MemberType Example/VB/source.vb#1)]\"\n  syntax:\n    content: public override System.Reflection.MemberTypes MemberType { get; }\n    return:\n      type: System.Reflection.MemberTypes\n      description: A <xref href=\"System.Reflection.MemberTypes\"></xref> value indicating that this member is a property.\n  overload: System.Reflection.PropertyInfo.MemberType*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/PropertyInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.PropertyInfo.op_Equality(System.Reflection.PropertyInfo,System.Reflection.PropertyInfo)\n  commentId: M:System.Reflection.PropertyInfo.op_Equality(System.Reflection.PropertyInfo,System.Reflection.PropertyInfo)\n  id: op_Equality(System.Reflection.PropertyInfo,System.Reflection.PropertyInfo)\n  parent: System.Reflection.PropertyInfo\n  langs:\n  - csharp\n  name: op_Equality(PropertyInfo, PropertyInfo)\n  nameWithType: PropertyInfo.op_Equality(PropertyInfo, PropertyInfo)\n  fullName: PropertyInfo.op_Equality(PropertyInfo, PropertyInfo)\n  type: Operator\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Indicates whether two <xref href=\"System.Reflection.PropertyInfo\"></xref> objects are equal.\n  syntax:\n    content: public static bool op_Equality (System.Reflection.PropertyInfo left, System.Reflection.PropertyInfo right);\n    parameters:\n    - id: left\n      type: System.Reflection.PropertyInfo\n      description: The first object to compare.\n    - id: right\n      type: System.Reflection.PropertyInfo\n      description: The second object to compare.\n    return:\n      type: System.Boolean\n      description: '`true` if <code>left</code> is equal to <code>right</code>; otherwise, `false`.'\n  overload: System.Reflection.PropertyInfo.op_Equality*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/PropertyInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.PropertyInfo.op_Inequality(System.Reflection.PropertyInfo,System.Reflection.PropertyInfo)\n  commentId: M:System.Reflection.PropertyInfo.op_Inequality(System.Reflection.PropertyInfo,System.Reflection.PropertyInfo)\n  id: op_Inequality(System.Reflection.PropertyInfo,System.Reflection.PropertyInfo)\n  parent: System.Reflection.PropertyInfo\n  langs:\n  - csharp\n  name: op_Inequality(PropertyInfo, PropertyInfo)\n  nameWithType: PropertyInfo.op_Inequality(PropertyInfo, PropertyInfo)\n  fullName: PropertyInfo.op_Inequality(PropertyInfo, PropertyInfo)\n  type: Operator\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Indicates whether two <xref href=\"System.Reflection.PropertyInfo\"></xref> objects are not equal.\n  syntax:\n    content: public static bool op_Inequality (System.Reflection.PropertyInfo left, System.Reflection.PropertyInfo right);\n    parameters:\n    - id: left\n      type: System.Reflection.PropertyInfo\n      description: The first object to compare.\n    - id: right\n      type: System.Reflection.PropertyInfo\n      description: The second object to compare.\n    return:\n      type: System.Boolean\n      description: '`true` if <code>left</code> is not equal to <code>right</code>; otherwise, `false`.'\n  overload: System.Reflection.PropertyInfo.op_Inequality*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/PropertyInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.PropertyInfo.PropertyType\n  commentId: P:System.Reflection.PropertyInfo.PropertyType\n  id: PropertyType\n  parent: System.Reflection.PropertyInfo\n  langs:\n  - csharp\n  name: PropertyType\n  nameWithType: PropertyInfo.PropertyType\n  fullName: PropertyInfo.PropertyType\n  type: Property\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets the type of this property.\n  remarks: \"To determine the type of a particular property, do the following:  \\n  \\n1.  Get a <xref:System.Type> object that represents the type (the class or structure) that contains the property. If you are working with an object (an instance of a type), you can call its <xref:System.Object.GetType%2A> method. Otherwise, you can use the C#  operator or the Visual Basic  operator, as the example illustrates.  \\n  \\n2.  Get a <xref:System.Reflection.PropertyInfo> object that represents the property in which you're interested. You can do this by getting an array of all properties from the <xref:System.Type.GetProperties%2A?displayProperty=fullName> method and then iterating the elements in the array, or you can retrieve the <xref:System.Reflection.PropertyInfo> object that represents the property directly by calling the <xref:System.Type.GetProperty%2A?displayProperty=fullName> method and specifying the property name.  \\n  \\n3.  Retrieve the value of the <xref:System.Reflection.PropertyInfo.PropertyType%2A> property from the <xref:System.Reflection.PropertyInfo> object.\"\n  example:\n  - \"The following example defines an `Employee` class that has five properties. It then uses retrieves an array of <xref:System.Reflection.PropertyInfo> objects that represent those properties and displays the name and type of each.  \\n  \\n [!code-csharp[System.Reflection.PropertyInfo.PropertyType#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.reflection.propertyinfo.propertytype/cs/propertytype1.cs#1)]\\n [!code-vb[System.Reflection.PropertyInfo.PropertyType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.reflection.propertyinfo.propertytype/vb/propertytype1.vb#1)]\"\n  syntax:\n    content: public abstract Type PropertyType { get; }\n    return:\n      type: System.Type\n      description: The type of this property.\n  overload: System.Reflection.PropertyInfo.PropertyType*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/PropertyInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.PropertyInfo.SetMethod\n  commentId: P:System.Reflection.PropertyInfo.SetMethod\n  id: SetMethod\n  parent: System.Reflection.PropertyInfo\n  langs:\n  - csharp\n  name: SetMethod\n  nameWithType: PropertyInfo.SetMethod\n  fullName: PropertyInfo.SetMethod\n  type: Property\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets the `set` accessor for this property.\n  remarks: Retrieving the value of the <xref:System.Reflection.PropertyInfo.SetMethod%2A> property is equivalent to calling the <xref:System.Reflection.PropertyInfo.GetSetMethod%28System.Boolean%29> method with a value of `true` for the `nonPublic` argument.\n  syntax:\n    content: public virtual System.Reflection.MethodInfo SetMethod { get; }\n    return:\n      type: System.Reflection.MethodInfo\n      description: The `set` accessor for this property, or `null` if the property is read-only.\n  overload: System.Reflection.PropertyInfo.SetMethod*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/PropertyInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)\n  commentId: M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)\n  id: SetValue(System.Object,System.Object)\n  parent: System.Reflection.PropertyInfo\n  langs:\n  - csharp\n  name: SetValue(Object, Object)\n  nameWithType: PropertyInfo.SetValue(Object, Object)\n  fullName: PropertyInfo.SetValue(Object, Object)\n  type: Method\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Sets the property value of a specified object.\n  remarks: \"The <xref:System.Reflection.PropertyInfo.SetValue%28System.Object%2CSystem.Object%29> overload sets the value of a non-indexed property. To determine whether a property is indexed, call the <xref:System.Reflection.PropertyInfo.GetIndexParameters%2A> method. If the resulting array has 0 (zero) elements, the property is not indexed. To set the value of an indexed property, call the <xref:System.Reflection.PropertyInfo.SetValue%28System.Object%2CSystem.Object%2CSystem.Object%5B%5D%29> overload.  \\n  \\n If the property type of this <xref:System.Reflection.PropertyInfo> object is a value type and `value` is `null`, the property will be set to the default value for that type.  \\n  \\n This is a convenience method that calls the runtime implementation of the abstract <xref:System.Reflection.PropertyInfo.SetValue%28System.Object%2CSystem.Object%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29> method, specifying <xref:System.Reflection.BindingFlags?displayProperty=fullName> for the `BindingFlags` parameter, `null` for `Binder`, `null` for `Object[]`, and `null` for `CultureInfo`.  \\n  \\n To use the <xref:System.Reflection.PropertyInfo.SetValue%2A> method, first get a <xref:System.Type> object that represents the class. From the <xref:System.Type>, get the <xref:System.Reflection.PropertyInfo> object. From the <xref:System.Reflection.PropertyInfo> object, call the <xref:System.Reflection.PropertyInfo.SetValue%2A> method.  \\n  \\n> [!NOTE]\\n>  Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof. (See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)  \\n>   \\n>  To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.\"\n  example:\n  - \"The following example declares a class named `Example` with one `static` (`Shared` in Visual Basic) and one instance property. The example uses the <xref:System.Reflection.PropertyInfo.SetValue%28System.Object%2CSystem.Object%29> method to change the original property values and displays the original and final values.  \\n  \\n [!code-cpp[PropertyInfo.SetValue#2](~/samples/snippets/cpp/VS_Snippets_CLR/PropertyInfo.SetValue/cpp/example2.cpp#2)]\\n [!code-csharp[PropertyInfo.SetValue#2](~/samples/snippets/csharp/VS_Snippets_CLR/PropertyInfo.SetValue/cs/example2.cs#2)]\\n [!code-vb[PropertyInfo.SetValue#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/PropertyInfo.SetValue/vb/example2.vb#2)]\"\n  syntax:\n    content: public void SetValue (object obj, object value);\n    parameters:\n    - id: obj\n      type: System.Object\n      description: The object whose property value will be set.\n    - id: value\n      type: System.Object\n      description: The new property value.\n  overload: System.Reflection.PropertyInfo.SetValue*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"The property's `set` accessor is not found.  \\n  \\n -or-  \\n  \\n <code>value</code> cannot be converted to the type of <xref href=\\\"System.Reflection.PropertyInfo.PropertyType\\\"></xref>.\"\n  - type: System.Reflection.TargetException\n    commentId: T:System.Reflection.TargetException\n    description: \"<block subset=\\\"none\\\" type=\\\"note\\\">\\n      <p>  \\n In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch <xref href=\\\"System.Exception\\\"></xref> instead.  \\n  \\n</p>\\n    </block>  \\n  \\n The type of <code>obj</code> does not match the target type, or a property is an instance property but <code>obj</code> is `null`.\"\n  - type: System.MethodAccessException\n    commentId: T:System.MethodAccessException\n    description: \"<block subset=\\\"none\\\" type=\\\"note\\\">\\n      <p>  \\n In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch the base class exception, <xref href=\\\"System.MemberAccessException\\\"></xref>, instead.  \\n  \\n</p>\\n    </block>  \\n  \\n There was an illegal attempt to access a private or protected method inside a class.\"\n  - type: System.Reflection.TargetInvocationException\n    commentId: T:System.Reflection.TargetInvocationException\n    description: An error occurred while setting the property value. The <xref href=\"System.Exception.InnerException\"></xref> property indicates the reason for the error.\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/PropertyInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])\n  commentId: M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])\n  id: SetValue(System.Object,System.Object,System.Object[])\n  parent: System.Reflection.PropertyInfo\n  langs:\n  - csharp\n  name: SetValue(Object, Object, Object[])\n  nameWithType: PropertyInfo.SetValue(Object, Object, Object[])\n  fullName: PropertyInfo.SetValue(Object, Object, Object[])\n  type: Method\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Sets the property value of a specified object with optional index values for index properties.\n  remarks: \"If this <xref:System.Reflection.PropertyInfo> object is a value type and `value` is `null`, then the property will be set to the default value for that type.  \\n  \\n To determine whether a property is indexed, use the <xref:System.Reflection.PropertyInfo.GetIndexParameters%2A> method. If the resulting array has 0 (zero) elements, the property is not indexed.  \\n  \\n This is a convenience method that calls the runtime implementation of the abstract <xref:System.Reflection.PropertyInfo.SetValue%28System.Object%2CSystem.Object%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29> method, specifying <xref:System.Reflection.BindingFlags?displayProperty=fullName> for the `BindingFlags` parameter, `null` for `Binder`, and `null` for `CultureInfo`.  \\n  \\n To use the <xref:System.Reflection.PropertyInfo.SetValue%2A> method, first get a <xref:System.Type> object that represents the class. From the <xref:System.Type>, get the <xref:System.Reflection.PropertyInfo>. From the <xref:System.Reflection.PropertyInfo>, use the <xref:System.Reflection.PropertyInfo.SetValue%2A> method.  \\n  \\n> [!NOTE]\\n>  Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof. (See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)  \\n>   \\n>  To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.\"\n  example:\n  - \"The following example defines a class named `TestClass` that has a read-write property named `Caption`. It  displays the default value of the `Caption` property, calls the <xref:System.Reflection.PropertyInfo.SetValue%2A> method to change the property value, and displays the result.  \\n  \\n [!code-cpp[Classic PropertyInfo.SetValue1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic PropertyInfo.SetValue1 Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic PropertyInfo.SetValue1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic PropertyInfo.SetValue1 Example/CS/source.cs#1)]\\n [!code-vb[Classic PropertyInfo.SetValue1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic PropertyInfo.SetValue1 Example/VB/source.vb#1)]  \\n  \\n Note that, because the `Caption` property is not a parameter array, the `index` argument is `null`.  \\n  \\n The following example declares a class named `Example` with three properties: a `static` property (`Shared` in Visual Basic), an instance property, and an indexed instance property. The example uses the <xref:System.Reflection.PropertyInfo.SetValue%2A> method to change the default values of the properties and displays the original and final values.  \\n  \\n The name that is used to search for an indexed instance property with reflection is different depending on the language and on attributes applied to the property.  \\n  \\n-   In Visual Basic, the property name is always used to search for the property with reflection. You can use the `Default` keyword to make the property a default indexed property, in which case you can omit the name when accessing the property, as in this example. You can also use the property name.  \\n  \\n-   In C#, the indexed instance property is a default property called an indexer, and the name is never used when accessing the property in code. By default, the name of the property is `Item`, and you must use that name when you search for the property with reflection. You can use the <xref:System.Runtime.CompilerServices.IndexerNameAttribute> attribute to give the indexer a different name. In this example, the name is `IndexedInstanceProperty`.  \\n  \\n-   In C++, the `default` specifier can be used to make an indexed property a default indexed property (class indexer). In that case, the name of the property by default is `Item`, and you must use that name when you search for the property with reflection, as in this example. You can use the <xref:System.Runtime.CompilerServices.IndexerNameAttribute> attribute to give the class indexer a different name in reflection, but you cannot use that name to access the property in code. An indexed property that is not a class indexer is accessed using its name, both in code and in reflection.  \\n  \\n [!code-cpp[PropertyInfo.SetValue#1](~/samples/snippets/cpp/VS_Snippets_CLR/PropertyInfo.SetValue/cpp/Example.cpp#1)]\\n [!code-csharp[PropertyInfo.SetValue#1](~/samples/snippets/csharp/VS_Snippets_CLR/PropertyInfo.SetValue/cs/Example.cs#1)]\\n [!code-vb[PropertyInfo.SetValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/PropertyInfo.SetValue/vb/Example.vb#1)]\"\n  syntax:\n    content: public virtual void SetValue (object obj, object value, object[] index);\n    parameters:\n    - id: obj\n      type: System.Object\n      description: The object whose property value will be set.\n    - id: value\n      type: System.Object\n      description: The new property value.\n    - id: index\n      type: System.Object[]\n      description: Optional index values for indexed properties. This value should be `null` for non-indexed properties.\n  overload: System.Reflection.PropertyInfo.SetValue*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"The <code>index</code> array does not contain the type of arguments needed.  \\n  \\n -or-  \\n  \\n The property's `set` accessor is not found.  \\n  \\n -or-  \\n  \\n <code>value</code> cannot be converted to the type of <xref href=\\\"System.Reflection.PropertyInfo.PropertyType\\\"></xref>.\"\n  - type: System.Reflection.TargetException\n    commentId: T:System.Reflection.TargetException\n    description: \"<block subset=\\\"none\\\" type=\\\"note\\\">\\n      <p>  \\n In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch <xref href=\\\"System.Exception\\\"></xref> instead.  \\n  \\n</p>\\n    </block>  \\n  \\n The object does not match the target type, or a property is an instance property but <code>obj</code> is `null`.\"\n  - type: System.Reflection.TargetParameterCountException\n    commentId: T:System.Reflection.TargetParameterCountException\n    description: The number of parameters in <code>index</code> does not match the number of parameters the indexed property takes.\n  - type: System.MethodAccessException\n    commentId: T:System.MethodAccessException\n    description: \"<block subset=\\\"none\\\" type=\\\"note\\\">\\n      <p>  \\n In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch the base class exception, <xref href=\\\"System.MemberAccessException\\\"></xref>, instead.  \\n  \\n</p>\\n    </block>  \\n  \\n There was an illegal attempt to access a private or protected method inside a class.\"\n  - type: System.Reflection.TargetInvocationException\n    commentId: T:System.Reflection.TargetInvocationException\n    description: An error occurred while setting the property value. For example, an index value specified for an indexed property is out of range. The <xref href=\"System.Exception.InnerException\"></xref> property indicates the reason for the error.\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/PropertyInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)\n  commentId: M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)\n  id: SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)\n  parent: System.Reflection.PropertyInfo\n  langs:\n  - csharp\n  name: SetValue(Object, Object, BindingFlags, Binder, Object[], CultureInfo)\n  nameWithType: PropertyInfo.SetValue(Object, Object, BindingFlags, Binder, Object[], CultureInfo)\n  fullName: PropertyInfo.SetValue(Object, Object, BindingFlags, Binder, Object[], CultureInfo)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: When overridden in a derived class, sets the property value for a specified object that has the specified binding, index, and culture-specific information.\n  remarks: \"If this <xref:System.Reflection.PropertyInfo> object is a value type and `value` is `null`, then the property will be set to the default value for that type.  \\n  \\n To determine whether a property is indexed, use the <xref:System.Reflection.PropertyInfo.GetIndexParameters%2A> method. If the resulting array has 0 (zero) elements, the property is not indexed.  \\n  \\n Access restrictions are ignored for fully trusted code. That is, private constructors, methods, fields, and properties can be accessed and invoked via Reflection whenever the code is fully trusted.  \\n  \\n To use the `SetValue` method, first get the class `Type`. From the `Type`, get the `PropertyInfo`. From the `PropertyInfo`, use the `SetValue` method.  \\n  \\n> [!NOTE]\\n>  Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof. (See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)  \\n>   \\n>  To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.\"\n  syntax:\n    content: public abstract void SetValue (object obj, object value, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] index, System.Globalization.CultureInfo culture);\n    parameters:\n    - id: obj\n      type: System.Object\n      description: The object whose property value will be set.\n    - id: value\n      type: System.Object\n      description: The new property value.\n    - id: invokeAttr\n      type: System.Reflection.BindingFlags\n      description: 'A bitwise combination of the following enumeration members that specify the invocation attribute: `InvokeMethod`, `CreateInstance`, `Static`, `GetField`, `SetField`, `GetProperty`, or `SetProperty`. You must specify a suitable invocation attribute. For example, to invoke a static member, set the `Static` flag.'\n    - id: binder\n      type: System.Reflection.Binder\n      description: An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <xref href=\"System.Reflection.MemberInfo\"></xref> objects through reflection. If <code>binder</code> is `null`, the default binder is used.\n    - id: index\n      type: System.Object[]\n      description: Optional index values for indexed properties. This value should be `null` for non-indexed properties.\n    - id: culture\n      type: System.Globalization.CultureInfo\n      description: The culture for which the resource is to be localized. If the resource is not localized for this culture, the <xref href=\"System.Globalization.CultureInfo.Parent\"></xref> property will be called successively in search of a match. If this value is `null`, the culture-specific information is obtained from the <xref href=\"System.Globalization.CultureInfo.CurrentUICulture\"></xref> property.\n  overload: System.Reflection.PropertyInfo.SetValue*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"The <code>index</code> array does not contain the type of arguments needed.  \\n  \\n -or-  \\n  \\n The property's `set` accessor is not found.  \\n  \\n -or-  \\n  \\n <code>value</code> cannot be converted to the type of <xref href=\\\"System.Reflection.PropertyInfo.PropertyType\\\"></xref>.\"\n  - type: System.Reflection.TargetException\n    commentId: T:System.Reflection.TargetException\n    description: The object does not match the target type, or a property is an instance property but <code>obj</code> is `null`.\n  - type: System.Reflection.TargetParameterCountException\n    commentId: T:System.Reflection.TargetParameterCountException\n    description: The number of parameters in <code>index</code> does not match the number of parameters the indexed property takes.\n  - type: System.MethodAccessException\n    commentId: T:System.MethodAccessException\n    description: There was an illegal attempt to access a private or protected method inside a class.\n  - type: System.Reflection.TargetInvocationException\n    commentId: T:System.Reflection.TargetInvocationException\n    description: An error occurred while setting the property value. For example, an index value specified for an indexed property is out of range. The <xref href=\"System.Exception.InnerException\"></xref> property indicates the reason for the error.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/PropertyInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  commentId: M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  id: System#Runtime#InteropServices#_PropertyInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  isEii: true\n  parent: System.Reflection.PropertyInfo\n  langs:\n  - csharp\n  name: _PropertyInfo.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n  nameWithType: PropertyInfo._PropertyInfo.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n  fullName: PropertyInfo._PropertyInfo.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection\n  summary: Maps a set of names to a corresponding set of dispatch identifiers.\n  remarks: This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library.\n  syntax:\n    content: void _PropertyInfo.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);\n    parameters:\n    - id: riid\n      type: System.Guid\n      description: Reserved for future use. Must be IID_NULL.\n    - id: rgszNames\n      type: System.IntPtr\n      description: Passed-in array of names to be mapped.\n    - id: cNames\n      type: System.UInt32\n      description: Count of the names to be mapped.\n    - id: lcid\n      type: System.UInt32\n      description: The locale context in which to interpret the names.\n    - id: rgDispId\n      type: System.IntPtr\n      description: Caller-allocated array which receives the IDs corresponding to the names.\n  overload: System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetIDsOfNames*\n  exceptions:\n  - type: System.NotImplementedException\n    commentId: T:System.NotImplementedException\n    description: Late-bound access using the COM <code>IDispatch</code> interface is not supported.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/PropertyInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetType\n  commentId: M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetType\n  id: System#Runtime#InteropServices#_PropertyInfo#GetType\n  isEii: true\n  parent: System.Reflection.PropertyInfo\n  langs:\n  - csharp\n  name: _PropertyInfo.GetType()\n  nameWithType: PropertyInfo._PropertyInfo.GetType()\n  fullName: PropertyInfo._PropertyInfo.GetType()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection\n  summary: Gets a <xref href=\"System.Type\"></xref> object representing the <xref href=\"System.Reflection.PropertyInfo\"></xref> type.\n  syntax:\n    content: Type _PropertyInfo.GetType ();\n    parameters: []\n    return:\n      type: System.Type\n      description: A <xref href=\"System.Type\"></xref> object representing the <xref href=\"System.Reflection.PropertyInfo\"></xref> type.\n  overload: System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetType*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/PropertyInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  commentId: M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  id: System#Runtime#InteropServices#_PropertyInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  isEii: true\n  parent: System.Reflection.PropertyInfo\n  langs:\n  - csharp\n  name: _PropertyInfo.GetTypeInfo(UInt32, UInt32, IntPtr)\n  nameWithType: PropertyInfo._PropertyInfo.GetTypeInfo(UInt32, UInt32, IntPtr)\n  fullName: PropertyInfo._PropertyInfo.GetTypeInfo(UInt32, UInt32, IntPtr)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection\n  summary: Retrieves the type information for an object, which can then be used to get the type information for an interface.\n  remarks: This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetTypeInfo`, see the MSDN Library.\n  syntax:\n    content: void _PropertyInfo.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);\n    parameters:\n    - id: iTInfo\n      type: System.UInt32\n      description: The type information to return.\n    - id: lcid\n      type: System.UInt32\n      description: The locale identifier for the type information.\n    - id: ppTInfo\n      type: System.IntPtr\n      description: Receives a pointer to the requested type information object.\n  overload: System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetTypeInfo*\n  exceptions:\n  - type: System.NotImplementedException\n    commentId: T:System.NotImplementedException\n    description: Late-bound access using the COM <code>IDispatch</code> interface is not supported.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/PropertyInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetTypeInfoCount(System.UInt32@)\n  commentId: M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetTypeInfoCount(System.UInt32@)\n  id: System#Runtime#InteropServices#_PropertyInfo#GetTypeInfoCount(System.UInt32@)\n  isEii: true\n  parent: System.Reflection.PropertyInfo\n  langs:\n  - csharp\n  name: _PropertyInfo.GetTypeInfoCount(UInt32)\n  nameWithType: PropertyInfo._PropertyInfo.GetTypeInfoCount(UInt32)\n  fullName: PropertyInfo._PropertyInfo.GetTypeInfoCount(UInt32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection\n  summary: Retrieves the number of type information interfaces that an object provides (either 0 or 1).\n  remarks: This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library.\n  syntax:\n    content: void _PropertyInfo.GetTypeInfoCount (out uint pcTInfo);\n    parameters:\n    - id: pcTInfo\n      type: System.UInt32\n      description: Points to a location that receives the number of type information interfaces provided by the object.\n  overload: System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetTypeInfoCount*\n  exceptions:\n  - type: System.NotImplementedException\n    commentId: T:System.NotImplementedException\n    description: Late-bound access using the COM <code>IDispatch</code> interface is not supported.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/PropertyInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  commentId: M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  id: System#Runtime#InteropServices#_PropertyInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  isEii: true\n  parent: System.Reflection.PropertyInfo\n  langs:\n  - csharp\n  name: _PropertyInfo.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n  nameWithType: PropertyInfo._PropertyInfo.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n  fullName: PropertyInfo._PropertyInfo.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection\n  summary: Provides access to properties and methods exposed by an object.\n  remarks: This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::Invoke`, see the MSDN Library.\n  syntax:\n    content: void _PropertyInfo.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);\n    parameters:\n    - id: dispIdMember\n      type: System.UInt32\n      description: Identifies the member.\n    - id: riid\n      type: System.Guid\n      description: Reserved for future use. Must be IID_NULL.\n    - id: lcid\n      type: System.UInt32\n      description: The locale context in which to interpret arguments.\n    - id: wFlags\n      type: System.Int16\n      description: Flags describing the context of the call.\n    - id: pDispParams\n      type: System.IntPtr\n      description: Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.\n    - id: pVarResult\n      type: System.IntPtr\n      description: Pointer to the location where the result is to be stored.\n    - id: pExcepInfo\n      type: System.IntPtr\n      description: Pointer to a structure that contains exception information.\n    - id: puArgErr\n      type: System.IntPtr\n      description: The index of the first argument that has an error.\n  overload: System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#Invoke*\n  exceptions:\n  - type: System.NotImplementedException\n    commentId: T:System.NotImplementedException\n    description: Late-bound access using the COM <code>IDispatch</code> interface is not supported.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/PropertyInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\nreferences:\n- uid: System.Reflection.MemberInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MemberInfo\n  nameWithType: MemberInfo\n  fullName: System.Reflection.MemberInfo\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  nameWithType: InvalidOperationException\n  fullName: System.InvalidOperationException\n- uid: System.FormatException\n  parent: System\n  isExternal: false\n  name: FormatException\n  nameWithType: FormatException\n  fullName: System.FormatException\n- uid: System.Security.SecurityException\n  parent: System.Security\n  isExternal: false\n  name: SecurityException\n  nameWithType: SecurityException\n  fullName: System.Security.SecurityException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.Reflection.TargetException\n  parent: System.Reflection\n  isExternal: false\n  name: TargetException\n  nameWithType: TargetException\n  fullName: System.Reflection.TargetException\n- uid: System.Reflection.TargetParameterCountException\n  parent: System.Reflection\n  isExternal: false\n  name: TargetParameterCountException\n  nameWithType: TargetParameterCountException\n  fullName: System.Reflection.TargetParameterCountException\n- uid: System.MethodAccessException\n  parent: System\n  isExternal: false\n  name: MethodAccessException\n  nameWithType: MethodAccessException\n  fullName: System.MethodAccessException\n- uid: System.Reflection.TargetInvocationException\n  parent: System.Reflection\n  isExternal: false\n  name: TargetInvocationException\n  nameWithType: TargetInvocationException\n  fullName: System.Reflection.TargetInvocationException\n- uid: System.NotImplementedException\n  parent: System\n  isExternal: false\n  name: NotImplementedException\n  nameWithType: NotImplementedException\n  fullName: System.NotImplementedException\n- uid: System.Reflection.PropertyInfo.#ctor\n  parent: System.Reflection.PropertyInfo\n  isExternal: false\n  name: PropertyInfo()\n  nameWithType: PropertyInfo.PropertyInfo()\n  fullName: PropertyInfo.PropertyInfo()\n- uid: System.Reflection.PropertyInfo.Attributes\n  parent: System.Reflection.PropertyInfo\n  isExternal: false\n  name: Attributes\n  nameWithType: PropertyInfo.Attributes\n  fullName: PropertyInfo.Attributes\n- uid: System.Reflection.PropertyAttributes\n  parent: System.Reflection\n  isExternal: false\n  name: PropertyAttributes\n  nameWithType: PropertyAttributes\n  fullName: System.Reflection.PropertyAttributes\n- uid: System.Reflection.PropertyInfo.CanRead\n  parent: System.Reflection.PropertyInfo\n  isExternal: false\n  name: CanRead\n  nameWithType: PropertyInfo.CanRead\n  fullName: PropertyInfo.CanRead\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Reflection.PropertyInfo.CanWrite\n  parent: System.Reflection.PropertyInfo\n  isExternal: false\n  name: CanWrite\n  nameWithType: PropertyInfo.CanWrite\n  fullName: PropertyInfo.CanWrite\n- uid: System.Reflection.PropertyInfo.Equals(System.Object)\n  parent: System.Reflection.PropertyInfo\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: PropertyInfo.Equals(Object)\n  fullName: PropertyInfo.Equals(Object)\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Reflection.PropertyInfo.GetAccessors\n  parent: System.Reflection.PropertyInfo\n  isExternal: false\n  name: GetAccessors()\n  nameWithType: PropertyInfo.GetAccessors()\n  fullName: PropertyInfo.GetAccessors()\n- uid: System.Reflection.MethodInfo\n  name: MethodInfo\n  nameWithType: MethodInfo\n  fullName: System.Reflection.MethodInfo\n- uid: System.Reflection.MethodInfo[]\n  parent: System.Reflection\n  isExternal: false\n  name: MethodInfo[]\n  nameWithType: MethodInfo[]\n  fullName: System.Reflection.MethodInfo[]\n  spec.csharp:\n  - uid: System.Reflection.MethodInfo\n    name: MethodInfo\n    nameWithType: MethodInfo\n    fullName: System.Reflection.MethodInfo\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Reflection.PropertyInfo.GetAccessors(System.Boolean)\n  parent: System.Reflection.PropertyInfo\n  isExternal: false\n  name: GetAccessors(Boolean)\n  nameWithType: PropertyInfo.GetAccessors(Boolean)\n  fullName: PropertyInfo.GetAccessors(Boolean)\n- uid: System.Reflection.PropertyInfo.GetConstantValue\n  parent: System.Reflection.PropertyInfo\n  isExternal: false\n  name: GetConstantValue()\n  nameWithType: PropertyInfo.GetConstantValue()\n  fullName: PropertyInfo.GetConstantValue()\n- uid: System.Reflection.PropertyInfo.GetGetMethod\n  parent: System.Reflection.PropertyInfo\n  isExternal: false\n  name: GetGetMethod()\n  nameWithType: PropertyInfo.GetGetMethod()\n  fullName: PropertyInfo.GetGetMethod()\n- uid: System.Reflection.PropertyInfo.GetGetMethod(System.Boolean)\n  parent: System.Reflection.PropertyInfo\n  isExternal: false\n  name: GetGetMethod(Boolean)\n  nameWithType: PropertyInfo.GetGetMethod(Boolean)\n  fullName: PropertyInfo.GetGetMethod(Boolean)\n- uid: System.Reflection.PropertyInfo.GetHashCode\n  parent: System.Reflection.PropertyInfo\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: PropertyInfo.GetHashCode()\n  fullName: PropertyInfo.GetHashCode()\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Reflection.PropertyInfo.GetIndexParameters\n  parent: System.Reflection.PropertyInfo\n  isExternal: false\n  name: GetIndexParameters()\n  nameWithType: PropertyInfo.GetIndexParameters()\n  fullName: PropertyInfo.GetIndexParameters()\n- uid: System.Reflection.ParameterInfo\n  name: ParameterInfo\n  nameWithType: ParameterInfo\n  fullName: System.Reflection.ParameterInfo\n- uid: System.Reflection.ParameterInfo[]\n  parent: System.Reflection\n  isExternal: false\n  name: ParameterInfo[]\n  nameWithType: ParameterInfo[]\n  fullName: System.Reflection.ParameterInfo[]\n  spec.csharp:\n  - uid: System.Reflection.ParameterInfo\n    name: ParameterInfo\n    nameWithType: ParameterInfo\n    fullName: System.Reflection.ParameterInfo\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Reflection.PropertyInfo.GetMethod\n  parent: System.Reflection.PropertyInfo\n  isExternal: false\n  name: GetMethod\n  nameWithType: PropertyInfo.GetMethod\n  fullName: PropertyInfo.GetMethod\n- uid: System.Reflection.PropertyInfo.GetOptionalCustomModifiers\n  parent: System.Reflection.PropertyInfo\n  isExternal: false\n  name: GetOptionalCustomModifiers()\n  nameWithType: PropertyInfo.GetOptionalCustomModifiers()\n  fullName: PropertyInfo.GetOptionalCustomModifiers()\n- uid: System.Type\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Type[]\n  parent: System\n  isExternal: false\n  name: Type[]\n  nameWithType: Type[]\n  fullName: System.Type[]\n  spec.csharp:\n  - uid: System.Type\n    name: Type\n    nameWithType: Type\n    fullName: System.Type\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Reflection.PropertyInfo.GetRawConstantValue\n  parent: System.Reflection.PropertyInfo\n  isExternal: false\n  name: GetRawConstantValue()\n  nameWithType: PropertyInfo.GetRawConstantValue()\n  fullName: PropertyInfo.GetRawConstantValue()\n- uid: System.Reflection.PropertyInfo.GetRequiredCustomModifiers\n  parent: System.Reflection.PropertyInfo\n  isExternal: false\n  name: GetRequiredCustomModifiers()\n  nameWithType: PropertyInfo.GetRequiredCustomModifiers()\n  fullName: PropertyInfo.GetRequiredCustomModifiers()\n- uid: System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)\n  parent: System.Reflection.PropertyInfo\n  isExternal: false\n  name: GetSetMethod(Boolean)\n  nameWithType: PropertyInfo.GetSetMethod(Boolean)\n  fullName: PropertyInfo.GetSetMethod(Boolean)\n- uid: System.Reflection.PropertyInfo.GetSetMethod\n  parent: System.Reflection.PropertyInfo\n  isExternal: false\n  name: GetSetMethod()\n  nameWithType: PropertyInfo.GetSetMethod()\n  fullName: PropertyInfo.GetSetMethod()\n- uid: System.Reflection.PropertyInfo.GetValue(System.Object)\n  parent: System.Reflection.PropertyInfo\n  isExternal: false\n  name: GetValue(Object)\n  nameWithType: PropertyInfo.GetValue(Object)\n  fullName: PropertyInfo.GetValue(Object)\n- uid: System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])\n  parent: System.Reflection.PropertyInfo\n  isExternal: false\n  name: GetValue(Object, Object[])\n  nameWithType: PropertyInfo.GetValue(Object, Object[])\n  fullName: PropertyInfo.GetValue(Object, Object[])\n- uid: System.Object[]\n  parent: System\n  isExternal: false\n  name: Object[]\n  nameWithType: Object[]\n  fullName: System.Object[]\n  spec.csharp:\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)\n  parent: System.Reflection.PropertyInfo\n  isExternal: false\n  name: GetValue(Object, BindingFlags, Binder, Object[], CultureInfo)\n  nameWithType: PropertyInfo.GetValue(Object, BindingFlags, Binder, Object[], CultureInfo)\n  fullName: PropertyInfo.GetValue(Object, BindingFlags, Binder, Object[], CultureInfo)\n- uid: System.Reflection.BindingFlags\n  parent: System.Reflection\n  isExternal: false\n  name: BindingFlags\n  nameWithType: BindingFlags\n  fullName: System.Reflection.BindingFlags\n- uid: System.Reflection.Binder\n  parent: System.Reflection\n  isExternal: false\n  name: Binder\n  nameWithType: Binder\n  fullName: System.Reflection.Binder\n- uid: System.Globalization.CultureInfo\n  parent: System.Globalization\n  isExternal: false\n  name: CultureInfo\n  nameWithType: CultureInfo\n  fullName: System.Globalization.CultureInfo\n- uid: System.Reflection.PropertyInfo.IsSpecialName\n  parent: System.Reflection.PropertyInfo\n  isExternal: false\n  name: IsSpecialName\n  nameWithType: PropertyInfo.IsSpecialName\n  fullName: PropertyInfo.IsSpecialName\n- uid: System.Reflection.PropertyInfo.MemberType\n  parent: System.Reflection.PropertyInfo\n  isExternal: false\n  name: MemberType\n  nameWithType: PropertyInfo.MemberType\n  fullName: PropertyInfo.MemberType\n- uid: System.Reflection.MemberTypes\n  parent: System.Reflection\n  isExternal: false\n  name: MemberTypes\n  nameWithType: MemberTypes\n  fullName: System.Reflection.MemberTypes\n- uid: System.Reflection.PropertyInfo.op_Equality(System.Reflection.PropertyInfo,System.Reflection.PropertyInfo)\n  parent: System.Reflection.PropertyInfo\n  isExternal: false\n  name: op_Equality(PropertyInfo, PropertyInfo)\n  nameWithType: PropertyInfo.op_Equality(PropertyInfo, PropertyInfo)\n  fullName: PropertyInfo.op_Equality(PropertyInfo, PropertyInfo)\n- uid: System.Reflection.PropertyInfo\n  parent: System.Reflection\n  isExternal: false\n  name: PropertyInfo\n  nameWithType: PropertyInfo\n  fullName: System.Reflection.PropertyInfo\n- uid: System.Reflection.PropertyInfo.op_Inequality(System.Reflection.PropertyInfo,System.Reflection.PropertyInfo)\n  parent: System.Reflection.PropertyInfo\n  isExternal: false\n  name: op_Inequality(PropertyInfo, PropertyInfo)\n  nameWithType: PropertyInfo.op_Inequality(PropertyInfo, PropertyInfo)\n  fullName: PropertyInfo.op_Inequality(PropertyInfo, PropertyInfo)\n- uid: System.Reflection.PropertyInfo.PropertyType\n  parent: System.Reflection.PropertyInfo\n  isExternal: false\n  name: PropertyType\n  nameWithType: PropertyInfo.PropertyType\n  fullName: PropertyInfo.PropertyType\n- uid: System.Reflection.PropertyInfo.SetMethod\n  parent: System.Reflection.PropertyInfo\n  isExternal: false\n  name: SetMethod\n  nameWithType: PropertyInfo.SetMethod\n  fullName: PropertyInfo.SetMethod\n- uid: System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)\n  parent: System.Reflection.PropertyInfo\n  isExternal: false\n  name: SetValue(Object, Object)\n  nameWithType: PropertyInfo.SetValue(Object, Object)\n  fullName: PropertyInfo.SetValue(Object, Object)\n- uid: System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])\n  parent: System.Reflection.PropertyInfo\n  isExternal: false\n  name: SetValue(Object, Object, Object[])\n  nameWithType: PropertyInfo.SetValue(Object, Object, Object[])\n  fullName: PropertyInfo.SetValue(Object, Object, Object[])\n- uid: System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)\n  parent: System.Reflection.PropertyInfo\n  isExternal: false\n  name: SetValue(Object, Object, BindingFlags, Binder, Object[], CultureInfo)\n  nameWithType: PropertyInfo.SetValue(Object, Object, BindingFlags, Binder, Object[], CultureInfo)\n  fullName: PropertyInfo.SetValue(Object, Object, BindingFlags, Binder, Object[], CultureInfo)\n- uid: System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  parent: System.Reflection.PropertyInfo\n  isExternal: false\n  name: _PropertyInfo.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n  nameWithType: PropertyInfo._PropertyInfo.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n  fullName: PropertyInfo._PropertyInfo.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n- uid: System.Guid\n  parent: System\n  isExternal: false\n  name: Guid\n  nameWithType: Guid\n  fullName: System.Guid\n- uid: System.IntPtr\n  parent: System\n  isExternal: false\n  name: IntPtr\n  nameWithType: IntPtr\n  fullName: System.IntPtr\n- uid: System.UInt32\n  parent: System\n  isExternal: false\n  name: UInt32\n  nameWithType: UInt32\n  fullName: System.UInt32\n- uid: System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetType\n  parent: System.Reflection.PropertyInfo\n  isExternal: false\n  name: _PropertyInfo.GetType()\n  nameWithType: PropertyInfo._PropertyInfo.GetType()\n  fullName: PropertyInfo._PropertyInfo.GetType()\n- uid: System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  parent: System.Reflection.PropertyInfo\n  isExternal: false\n  name: _PropertyInfo.GetTypeInfo(UInt32, UInt32, IntPtr)\n  nameWithType: PropertyInfo._PropertyInfo.GetTypeInfo(UInt32, UInt32, IntPtr)\n  fullName: PropertyInfo._PropertyInfo.GetTypeInfo(UInt32, UInt32, IntPtr)\n- uid: System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetTypeInfoCount(System.UInt32@)\n  parent: System.Reflection.PropertyInfo\n  isExternal: false\n  name: _PropertyInfo.GetTypeInfoCount(UInt32)\n  nameWithType: PropertyInfo._PropertyInfo.GetTypeInfoCount(UInt32)\n  fullName: PropertyInfo._PropertyInfo.GetTypeInfoCount(UInt32)\n- uid: System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  parent: System.Reflection.PropertyInfo\n  isExternal: false\n  name: _PropertyInfo.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n  nameWithType: PropertyInfo._PropertyInfo.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n  fullName: PropertyInfo._PropertyInfo.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n- uid: System.Int16\n  parent: System\n  isExternal: false\n  name: Int16\n  nameWithType: Int16\n  fullName: System.Int16\n- uid: System.Reflection.PropertyInfo.#ctor*\n  parent: System.Reflection.PropertyInfo\n  isExternal: false\n  name: PropertyInfo\n  nameWithType: PropertyInfo.PropertyInfo\n  fullName: PropertyInfo.PropertyInfo\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/PropertyInfo.xml\n- uid: System.Reflection.PropertyInfo.Attributes*\n  parent: System.Reflection.PropertyInfo\n  isExternal: false\n  name: Attributes\n  nameWithType: PropertyInfo.Attributes\n  fullName: PropertyInfo.Attributes\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/PropertyInfo.xml\n- uid: System.Reflection.PropertyInfo.CanRead*\n  parent: System.Reflection.PropertyInfo\n  isExternal: false\n  name: CanRead\n  nameWithType: PropertyInfo.CanRead\n  fullName: PropertyInfo.CanRead\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/PropertyInfo.xml\n- uid: System.Reflection.PropertyInfo.CanWrite*\n  parent: System.Reflection.PropertyInfo\n  isExternal: false\n  name: CanWrite\n  nameWithType: PropertyInfo.CanWrite\n  fullName: PropertyInfo.CanWrite\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/PropertyInfo.xml\n- uid: System.Reflection.PropertyInfo.Equals*\n  parent: System.Reflection.PropertyInfo\n  isExternal: false\n  name: Equals\n  nameWithType: PropertyInfo.Equals\n  fullName: PropertyInfo.Equals\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/PropertyInfo.xml\n- uid: System.Reflection.PropertyInfo.GetAccessors*\n  parent: System.Reflection.PropertyInfo\n  isExternal: false\n  name: GetAccessors\n  nameWithType: PropertyInfo.GetAccessors\n  fullName: PropertyInfo.GetAccessors\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/PropertyInfo.xml\n- uid: System.Reflection.PropertyInfo.GetConstantValue*\n  parent: System.Reflection.PropertyInfo\n  isExternal: false\n  name: GetConstantValue\n  nameWithType: PropertyInfo.GetConstantValue\n  fullName: PropertyInfo.GetConstantValue\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/PropertyInfo.xml\n- uid: System.Reflection.PropertyInfo.GetGetMethod*\n  parent: System.Reflection.PropertyInfo\n  isExternal: false\n  name: GetGetMethod\n  nameWithType: PropertyInfo.GetGetMethod\n  fullName: PropertyInfo.GetGetMethod\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/PropertyInfo.xml\n- uid: System.Reflection.PropertyInfo.GetHashCode*\n  parent: System.Reflection.PropertyInfo\n  isExternal: false\n  name: GetHashCode\n  nameWithType: PropertyInfo.GetHashCode\n  fullName: PropertyInfo.GetHashCode\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/PropertyInfo.xml\n- uid: System.Reflection.PropertyInfo.GetIndexParameters*\n  parent: System.Reflection.PropertyInfo\n  isExternal: false\n  name: GetIndexParameters\n  nameWithType: PropertyInfo.GetIndexParameters\n  fullName: PropertyInfo.GetIndexParameters\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/PropertyInfo.xml\n- uid: System.Reflection.PropertyInfo.GetMethod*\n  parent: System.Reflection.PropertyInfo\n  isExternal: false\n  name: GetMethod\n  nameWithType: PropertyInfo.GetMethod\n  fullName: PropertyInfo.GetMethod\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/PropertyInfo.xml\n- uid: System.Reflection.PropertyInfo.GetOptionalCustomModifiers*\n  parent: System.Reflection.PropertyInfo\n  isExternal: false\n  name: GetOptionalCustomModifiers\n  nameWithType: PropertyInfo.GetOptionalCustomModifiers\n  fullName: PropertyInfo.GetOptionalCustomModifiers\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/PropertyInfo.xml\n- uid: System.Reflection.PropertyInfo.GetRawConstantValue*\n  parent: System.Reflection.PropertyInfo\n  isExternal: false\n  name: GetRawConstantValue\n  nameWithType: PropertyInfo.GetRawConstantValue\n  fullName: PropertyInfo.GetRawConstantValue\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/PropertyInfo.xml\n- uid: System.Reflection.PropertyInfo.GetRequiredCustomModifiers*\n  parent: System.Reflection.PropertyInfo\n  isExternal: false\n  name: GetRequiredCustomModifiers\n  nameWithType: PropertyInfo.GetRequiredCustomModifiers\n  fullName: PropertyInfo.GetRequiredCustomModifiers\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/PropertyInfo.xml\n- uid: System.Reflection.PropertyInfo.GetSetMethod*\n  parent: System.Reflection.PropertyInfo\n  isExternal: false\n  name: GetSetMethod\n  nameWithType: PropertyInfo.GetSetMethod\n  fullName: PropertyInfo.GetSetMethod\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/PropertyInfo.xml\n- uid: System.Reflection.PropertyInfo.GetValue*\n  parent: System.Reflection.PropertyInfo\n  isExternal: false\n  name: GetValue\n  nameWithType: PropertyInfo.GetValue\n  fullName: PropertyInfo.GetValue\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/PropertyInfo.xml\n- uid: System.Reflection.PropertyInfo.IsSpecialName*\n  parent: System.Reflection.PropertyInfo\n  isExternal: false\n  name: IsSpecialName\n  nameWithType: PropertyInfo.IsSpecialName\n  fullName: PropertyInfo.IsSpecialName\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/PropertyInfo.xml\n- uid: System.Reflection.PropertyInfo.MemberType*\n  parent: System.Reflection.PropertyInfo\n  isExternal: false\n  name: MemberType\n  nameWithType: PropertyInfo.MemberType\n  fullName: PropertyInfo.MemberType\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/PropertyInfo.xml\n- uid: System.Reflection.PropertyInfo.op_Equality*\n  parent: System.Reflection.PropertyInfo\n  isExternal: false\n  name: op_Equality\n  nameWithType: PropertyInfo.op_Equality\n  fullName: PropertyInfo.op_Equality\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/PropertyInfo.xml\n- uid: System.Reflection.PropertyInfo.op_Inequality*\n  parent: System.Reflection.PropertyInfo\n  isExternal: false\n  name: op_Inequality\n  nameWithType: PropertyInfo.op_Inequality\n  fullName: PropertyInfo.op_Inequality\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/PropertyInfo.xml\n- uid: System.Reflection.PropertyInfo.PropertyType*\n  parent: System.Reflection.PropertyInfo\n  isExternal: false\n  name: PropertyType\n  nameWithType: PropertyInfo.PropertyType\n  fullName: PropertyInfo.PropertyType\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/PropertyInfo.xml\n- uid: System.Reflection.PropertyInfo.SetMethod*\n  parent: System.Reflection.PropertyInfo\n  isExternal: false\n  name: SetMethod\n  nameWithType: PropertyInfo.SetMethod\n  fullName: PropertyInfo.SetMethod\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/PropertyInfo.xml\n- uid: System.Reflection.PropertyInfo.SetValue*\n  parent: System.Reflection.PropertyInfo\n  isExternal: false\n  name: SetValue\n  nameWithType: PropertyInfo.SetValue\n  fullName: PropertyInfo.SetValue\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/PropertyInfo.xml\n- uid: System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetIDsOfNames*\n  parent: System.Reflection.PropertyInfo\n  isExternal: false\n  name: System.Runtime.InteropServices._PropertyInfo.GetIDsOfNames\n  nameWithType: PropertyInfo.System.Runtime.InteropServices._PropertyInfo.GetIDsOfNames\n  fullName: PropertyInfo.System.Runtime.InteropServices._PropertyInfo.GetIDsOfNames\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/PropertyInfo.xml\n- uid: System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetType*\n  parent: System.Reflection.PropertyInfo\n  isExternal: false\n  name: System.Runtime.InteropServices._PropertyInfo.GetType\n  nameWithType: PropertyInfo.System.Runtime.InteropServices._PropertyInfo.GetType\n  fullName: PropertyInfo.System.Runtime.InteropServices._PropertyInfo.GetType\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/PropertyInfo.xml\n- uid: System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetTypeInfo*\n  parent: System.Reflection.PropertyInfo\n  isExternal: false\n  name: System.Runtime.InteropServices._PropertyInfo.GetTypeInfo\n  nameWithType: PropertyInfo.System.Runtime.InteropServices._PropertyInfo.GetTypeInfo\n  fullName: PropertyInfo.System.Runtime.InteropServices._PropertyInfo.GetTypeInfo\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/PropertyInfo.xml\n- uid: System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetTypeInfoCount*\n  parent: System.Reflection.PropertyInfo\n  isExternal: false\n  name: System.Runtime.InteropServices._PropertyInfo.GetTypeInfoCount\n  nameWithType: PropertyInfo.System.Runtime.InteropServices._PropertyInfo.GetTypeInfoCount\n  fullName: PropertyInfo.System.Runtime.InteropServices._PropertyInfo.GetTypeInfoCount\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/PropertyInfo.xml\n- uid: System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#Invoke*\n  parent: System.Reflection.PropertyInfo\n  isExternal: false\n  name: System.Runtime.InteropServices._PropertyInfo.Invoke\n  nameWithType: PropertyInfo.System.Runtime.InteropServices._PropertyInfo.Invoke\n  fullName: PropertyInfo.System.Runtime.InteropServices._PropertyInfo.Invoke\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/PropertyInfo.xml\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.Reflection.MemberInfo.CustomAttributes\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: CustomAttributes\n  nameWithType: MemberInfo.CustomAttributes\n  fullName: MemberInfo.CustomAttributes\n- uid: System.Reflection.MemberInfo.DeclaringType\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: DeclaringType\n  nameWithType: MemberInfo.DeclaringType\n  fullName: MemberInfo.DeclaringType\n- uid: System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: GetCustomAttributes(Boolean)\n  nameWithType: MemberInfo.GetCustomAttributes(Boolean)\n  fullName: MemberInfo.GetCustomAttributes(Boolean)\n- uid: System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: GetCustomAttributes(Type, Boolean)\n  nameWithType: MemberInfo.GetCustomAttributes(Type, Boolean)\n  fullName: MemberInfo.GetCustomAttributes(Type, Boolean)\n- uid: System.Reflection.MemberInfo.GetCustomAttributesData\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: GetCustomAttributesData()\n  nameWithType: MemberInfo.GetCustomAttributesData()\n  fullName: MemberInfo.GetCustomAttributesData()\n- uid: System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: IsDefined(Type, Boolean)\n  nameWithType: MemberInfo.IsDefined(Type, Boolean)\n  fullName: MemberInfo.IsDefined(Type, Boolean)\n- uid: System.Reflection.MemberInfo.MetadataToken\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: MetadataToken\n  nameWithType: MemberInfo.MetadataToken\n  fullName: MemberInfo.MetadataToken\n- uid: System.Reflection.MemberInfo.Module\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: Module\n  nameWithType: MemberInfo.Module\n  fullName: MemberInfo.Module\n- uid: System.Reflection.MemberInfo.Name\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: Name\n  nameWithType: MemberInfo.Name\n  fullName: MemberInfo.Name\n- uid: System.Reflection.MemberInfo.op_Equality(System.Reflection.MemberInfo,System.Reflection.MemberInfo)\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: op_Equality(MemberInfo, MemberInfo)\n  nameWithType: MemberInfo.op_Equality(MemberInfo, MemberInfo)\n  fullName: MemberInfo.op_Equality(MemberInfo, MemberInfo)\n- uid: System.Reflection.MemberInfo.op_Inequality(System.Reflection.MemberInfo,System.Reflection.MemberInfo)\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: op_Inequality(MemberInfo, MemberInfo)\n  nameWithType: MemberInfo.op_Inequality(MemberInfo, MemberInfo)\n  fullName: MemberInfo.op_Inequality(MemberInfo, MemberInfo)\n- uid: System.Reflection.MemberInfo.ReflectedType\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: ReflectedType\n  nameWithType: MemberInfo.ReflectedType\n  fullName: MemberInfo.ReflectedType\n- uid: System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Boolean)\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: ICustomAttributeProvider.GetCustomAttributes(Boolean)\n  nameWithType: MemberInfo.ICustomAttributeProvider.GetCustomAttributes(Boolean)\n  fullName: MemberInfo.ICustomAttributeProvider.GetCustomAttributes(Boolean)\n- uid: System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Type,System.Boolean)\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)\n  nameWithType: MemberInfo.ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)\n  fullName: MemberInfo.ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)\n- uid: System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#IsDefined(System.Type,System.Boolean)\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: ICustomAttributeProvider.IsDefined(Type, Boolean)\n  nameWithType: MemberInfo.ICustomAttributeProvider.IsDefined(Type, Boolean)\n  fullName: MemberInfo.ICustomAttributeProvider.IsDefined(Type, Boolean)\n- uid: System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: _MemberInfo.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n  nameWithType: MemberInfo._MemberInfo.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n  fullName: MemberInfo._MemberInfo.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n- uid: System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetType\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: _MemberInfo.GetType()\n  nameWithType: MemberInfo._MemberInfo.GetType()\n  fullName: MemberInfo._MemberInfo.GetType()\n- uid: System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: _MemberInfo.GetTypeInfo(UInt32, UInt32, IntPtr)\n  nameWithType: MemberInfo._MemberInfo.GetTypeInfo(UInt32, UInt32, IntPtr)\n  fullName: MemberInfo._MemberInfo.GetTypeInfo(UInt32, UInt32, IntPtr)\n- uid: System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfoCount(System.UInt32@)\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: _MemberInfo.GetTypeInfoCount(UInt32)\n  nameWithType: MemberInfo._MemberInfo.GetTypeInfoCount(UInt32)\n  fullName: MemberInfo._MemberInfo.GetTypeInfoCount(UInt32)\n- uid: System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: _MemberInfo.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n  nameWithType: MemberInfo._MemberInfo.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n  fullName: MemberInfo._MemberInfo.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.MemberInfo,System.Type)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: GetCustomAttribute(MemberInfo, Type)\n  nameWithType: CustomAttributeExtensions.GetCustomAttribute(MemberInfo, Type)\n  fullName: CustomAttributeExtensions.GetCustomAttribute(MemberInfo, Type)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: GetCustomAttribute(MemberInfo, Type, Boolean)\n  nameWithType: CustomAttributeExtensions.GetCustomAttribute(MemberInfo, Type, Boolean)\n  fullName: CustomAttributeExtensions.GetCustomAttribute(MemberInfo, Type, Boolean)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.MemberInfo)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: GetCustomAttribute<T>(MemberInfo)\n  nameWithType: CustomAttributeExtensions.GetCustomAttribute<T>(MemberInfo)\n  fullName: CustomAttributeExtensions.GetCustomAttribute<T>(MemberInfo)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.MemberInfo,System.Boolean)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: GetCustomAttribute<T>(MemberInfo, Boolean)\n  nameWithType: CustomAttributeExtensions.GetCustomAttribute<T>(MemberInfo, Boolean)\n  fullName: CustomAttributeExtensions.GetCustomAttribute<T>(MemberInfo, Boolean)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: GetCustomAttributes(MemberInfo)\n  nameWithType: CustomAttributeExtensions.GetCustomAttributes(MemberInfo)\n  fullName: CustomAttributeExtensions.GetCustomAttributes(MemberInfo)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: GetCustomAttributes(MemberInfo, Boolean)\n  nameWithType: CustomAttributeExtensions.GetCustomAttributes(MemberInfo, Boolean)\n  fullName: CustomAttributeExtensions.GetCustomAttributes(MemberInfo, Boolean)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo,System.Type)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: GetCustomAttributes(MemberInfo, Type)\n  nameWithType: CustomAttributeExtensions.GetCustomAttributes(MemberInfo, Type)\n  fullName: CustomAttributeExtensions.GetCustomAttributes(MemberInfo, Type)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: GetCustomAttributes(MemberInfo, Type, Boolean)\n  nameWithType: CustomAttributeExtensions.GetCustomAttributes(MemberInfo, Type, Boolean)\n  fullName: CustomAttributeExtensions.GetCustomAttributes(MemberInfo, Type, Boolean)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.MemberInfo)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: GetCustomAttributes<T>(MemberInfo)\n  nameWithType: CustomAttributeExtensions.GetCustomAttributes<T>(MemberInfo)\n  fullName: CustomAttributeExtensions.GetCustomAttributes<T>(MemberInfo)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.MemberInfo,System.Boolean)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: GetCustomAttributes<T>(MemberInfo, Boolean)\n  nameWithType: CustomAttributeExtensions.GetCustomAttributes<T>(MemberInfo, Boolean)\n  fullName: CustomAttributeExtensions.GetCustomAttributes<T>(MemberInfo, Boolean)\n- uid: System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.MemberInfo,System.Type)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: IsDefined(MemberInfo, Type)\n  nameWithType: CustomAttributeExtensions.IsDefined(MemberInfo, Type)\n  fullName: CustomAttributeExtensions.IsDefined(MemberInfo, Type)\n- uid: System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: IsDefined(MemberInfo, Type, Boolean)\n  nameWithType: CustomAttributeExtensions.IsDefined(MemberInfo, Type, Boolean)\n  fullName: CustomAttributeExtensions.IsDefined(MemberInfo, Type, Boolean)\n- uid: System.Reflection.MemberInfoExtensions.GetMetadataToken(System.Reflection.MemberInfo)\n  parent: System.Reflection.MemberInfoExtensions\n  isExternal: false\n  name: GetMetadataToken(MemberInfo)\n  nameWithType: MemberInfoExtensions.GetMetadataToken(MemberInfo)\n  fullName: MemberInfoExtensions.GetMetadataToken(MemberInfo)\n- uid: System.Reflection.MemberInfoExtensions.HasMetadataToken(System.Reflection.MemberInfo)\n  parent: System.Reflection.MemberInfoExtensions\n  isExternal: false\n  name: HasMetadataToken(MemberInfo)\n  nameWithType: MemberInfoExtensions.HasMetadataToken(MemberInfo)\n  fullName: MemberInfoExtensions.HasMetadataToken(MemberInfo)\n- uid: System.Reflection.PropertyInfoExtensions.GetAccessors(System.Reflection.PropertyInfo)\n  parent: System.Reflection.PropertyInfoExtensions\n  isExternal: false\n  name: GetAccessors(PropertyInfo)\n  nameWithType: PropertyInfoExtensions.GetAccessors(PropertyInfo)\n  fullName: PropertyInfoExtensions.GetAccessors(PropertyInfo)\n- uid: System.Reflection.PropertyInfoExtensions.GetAccessors(System.Reflection.PropertyInfo,System.Boolean)\n  parent: System.Reflection.PropertyInfoExtensions\n  isExternal: false\n  name: GetAccessors(PropertyInfo, Boolean)\n  nameWithType: PropertyInfoExtensions.GetAccessors(PropertyInfo, Boolean)\n  fullName: PropertyInfoExtensions.GetAccessors(PropertyInfo, Boolean)\n- uid: System.Reflection.PropertyInfoExtensions.GetGetMethod(System.Reflection.PropertyInfo)\n  parent: System.Reflection.PropertyInfoExtensions\n  isExternal: false\n  name: GetGetMethod(PropertyInfo)\n  nameWithType: PropertyInfoExtensions.GetGetMethod(PropertyInfo)\n  fullName: PropertyInfoExtensions.GetGetMethod(PropertyInfo)\n- uid: System.Reflection.PropertyInfoExtensions.GetGetMethod(System.Reflection.PropertyInfo,System.Boolean)\n  parent: System.Reflection.PropertyInfoExtensions\n  isExternal: false\n  name: GetGetMethod(PropertyInfo, Boolean)\n  nameWithType: PropertyInfoExtensions.GetGetMethod(PropertyInfo, Boolean)\n  fullName: PropertyInfoExtensions.GetGetMethod(PropertyInfo, Boolean)\n- uid: System.Reflection.PropertyInfoExtensions.GetSetMethod(System.Reflection.PropertyInfo)\n  parent: System.Reflection.PropertyInfoExtensions\n  isExternal: false\n  name: GetSetMethod(PropertyInfo)\n  nameWithType: PropertyInfoExtensions.GetSetMethod(PropertyInfo)\n  fullName: PropertyInfoExtensions.GetSetMethod(PropertyInfo)\n- uid: System.Reflection.PropertyInfoExtensions.GetSetMethod(System.Reflection.PropertyInfo,System.Boolean)\n  parent: System.Reflection.PropertyInfoExtensions\n  isExternal: false\n  name: GetSetMethod(PropertyInfo, Boolean)\n  nameWithType: PropertyInfoExtensions.GetSetMethod(PropertyInfo, Boolean)\n  fullName: PropertyInfoExtensions.GetSetMethod(PropertyInfo, Boolean)\n- uid: System.Runtime.InteropServices._PropertyInfo\n  parent: System.Runtime.InteropServices\n  isExternal: false\n  name: _PropertyInfo\n  nameWithType: _PropertyInfo\n  fullName: System.Runtime.InteropServices._PropertyInfo\n"}