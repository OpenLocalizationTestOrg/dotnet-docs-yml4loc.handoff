{"nodes":[{"content":"Specifies what type to use as a converter for the object this attribute is bound to.","nodes":[{"pos":[0,84],"content":"Specifies what type to use as a converter for the object this attribute is bound to.","nodes":[{"content":"Specifies what type to use as a converter for the object this attribute is bound to.","pos":[0,84]}]}],"pos":[926,1011],"yaml":true},{"content":"The class you use for conversion must inherit from <xref:System.ComponentModel.TypeConverter>. Use the <xref:System.ComponentModel.TypeConverterAttribute.ConverterTypeName%2A> property to get the name of the class that provides the data conversion for the object this attribute is bound to.  \n  \n For more information about attributes, see [Attributes](http://msdn.microsoft.com/library/30386922-1e00-4602-9ebf-526b271a8b87). For more information about type converters, see the <xref:System.ComponentModel.TypeConverter> base class and [How to: Implement a Type Converter](http://msdn.microsoft.com/library/90373a3f-d8c8-492d-841c-945d62393c56).  \n  \n In order to establish a type converter on a custom class that provides type conversion behavior for XAML, you apply the <xref:System.ComponentModel.TypeConverterAttribute> attribute to your type. The argument of the attribute references your type converter implementation. Your type converter should be able to accept values from a string that is used for attributes or initialization text in XAML markup, and convert that string into your intended destination type. For more information, see[TypeConverters and XAML](~/docs/framework/wpf/advanced/typeconverters-and-xaml.md).  \n  \n Rather than applying to all values of a type, a type converter behavior for XAML can also be established on a specific property. In this case, you apply <xref:System.ComponentModel.TypeConverterAttribute> to the property definition (the outer definition, not the specific `get` and `set` definitions).  \n  \n A type converter behavior for XAML usage of a custom attachable member can be assigned by applying <xref:System.ComponentModel.TypeConverterAttribute> to the `get` method accessor that supports the XAML usage. For more information, see [Attached Properties Overview](~/docs/framework/wpf/advanced/attached-properties-overview.md).  \n  \n For complex XAML serialization cases that require additional state from the object runtime, consider defining a value serializer in addition to a type converter, and attribute both support classes on your custom types or custom members. For more information, see <xref:System.Windows.Markup.ValueSerializer>.","nodes":[{"pos":[0,290],"content":"The class you use for conversion must inherit from <xref:System.ComponentModel.TypeConverter>. Use the <xref:System.ComponentModel.TypeConverterAttribute.ConverterTypeName%2A> property to get the name of the class that provides the data conversion for the object this attribute is bound to.","nodes":[{"content":"The class you use for conversion must inherit from <xref:System.ComponentModel.TypeConverter>. Use the <xref:System.ComponentModel.TypeConverterAttribute.ConverterTypeName%2A> property to get the name of the class that provides the data conversion for the object this attribute is bound to.","pos":[0,290],"nodes":[{"content":"The class you use for conversion must inherit from <ph id=\"ph1\">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph>.","pos":[0,94],"source":"The class you use for conversion must inherit from <xref:System.ComponentModel.TypeConverter>."},{"content":"Use the <ph id=\"ph1\">&lt;xref:System.ComponentModel.TypeConverterAttribute.ConverterTypeName%2A&gt;</ph> property to get the name of the class that provides the data conversion for the object this attribute is bound to.","pos":[95,290],"source":" Use the <xref:System.ComponentModel.TypeConverterAttribute.ConverterTypeName%2A> property to get the name of the class that provides the data conversion for the object this attribute is bound to."}]}]},{"pos":[297,645],"content":"For more information about attributes, see [Attributes](http://msdn.microsoft.com/library/30386922-1e00-4602-9ebf-526b271a8b87). For more information about type converters, see the <xref:System.ComponentModel.TypeConverter> base class and [How to: Implement a Type Converter](http://msdn.microsoft.com/library/90373a3f-d8c8-492d-841c-945d62393c56).","nodes":[{"content":"For more information about attributes, see <bpt id=\"p1\">[</bpt>Attributes<ept id=\"p1\">](http://msdn.microsoft.com/library/30386922-1e00-4602-9ebf-526b271a8b87)</ept>.","pos":[0,128],"source":"For more information about attributes, see [Attributes](http://msdn.microsoft.com/library/30386922-1e00-4602-9ebf-526b271a8b87)."},{"content":"For more information about type converters, see the <ph id=\"ph1\">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph> base class and <bpt id=\"p1\">[</bpt>How to: Implement a Type Converter<ept id=\"p1\">](http://msdn.microsoft.com/library/90373a3f-d8c8-492d-841c-945d62393c56)</ept>.","pos":[129,348],"source":" For more information about type converters, see the <xref:System.ComponentModel.TypeConverter> base class and [How to: Implement a Type Converter](http://msdn.microsoft.com/library/90373a3f-d8c8-492d-841c-945d62393c56)."}]},{"pos":[652,1228],"content":"In order to establish a type converter on a custom class that provides type conversion behavior for XAML, you apply the <xref:System.ComponentModel.TypeConverterAttribute> attribute to your type. The argument of the attribute references your type converter implementation. Your type converter should be able to accept values from a string that is used for attributes or initialization text in XAML markup, and convert that string into your intended destination type. For more information, see[TypeConverters and XAML](~/docs/framework/wpf/advanced/typeconverters-and-xaml.md).","nodes":[{"content":"In order to establish a type converter on a custom class that provides type conversion behavior for XAML, you apply the <ph id=\"ph1\">&lt;xref:System.ComponentModel.TypeConverterAttribute&gt;</ph> attribute to your type.","pos":[0,195],"source":"In order to establish a type converter on a custom class that provides type conversion behavior for XAML, you apply the <xref:System.ComponentModel.TypeConverterAttribute> attribute to your type."},{"content":"The argument of the attribute references your type converter implementation.","pos":[196,272]},{"content":"Your type converter should be able to accept values from a string that is used for attributes or initialization text in XAML markup, and convert that string into your intended destination type.","pos":[273,466]},{"content":"For more information, see<bpt id=\"p1\">[</bpt>TypeConverters and XAML<ept id=\"p1\">](~/docs/framework/wpf/advanced/typeconverters-and-xaml.md)</ept>.","pos":[467,576],"source":" For more information, see[TypeConverters and XAML](~/docs/framework/wpf/advanced/typeconverters-and-xaml.md)."}]},{"pos":[1235,1536],"content":"Rather than applying to all values of a type, a type converter behavior for XAML can also be established on a specific property. In this case, you apply <xref:System.ComponentModel.TypeConverterAttribute> to the property definition (the outer definition, not the specific `get` and `set` definitions).","nodes":[{"content":"Rather than applying to all values of a type, a type converter behavior for XAML can also be established on a specific property.","pos":[0,128]},{"content":"In this case, you apply <ph id=\"ph1\">&lt;xref:System.ComponentModel.TypeConverterAttribute&gt;</ph> to the property definition (the outer definition, not the specific <ph id=\"ph2\">`get`</ph> and <ph id=\"ph3\">`set`</ph> definitions).","pos":[129,301],"source":" In this case, you apply <xref:System.ComponentModel.TypeConverterAttribute> to the property definition (the outer definition, not the specific `get` and `set` definitions)."}]},{"pos":[1543,1873],"content":"A type converter behavior for XAML usage of a custom attachable member can be assigned by applying <xref:System.ComponentModel.TypeConverterAttribute> to the `get` method accessor that supports the XAML usage. For more information, see [Attached Properties Overview](~/docs/framework/wpf/advanced/attached-properties-overview.md).","nodes":[{"content":"A type converter behavior for XAML usage of a custom attachable member can be assigned by applying <ph id=\"ph1\">&lt;xref:System.ComponentModel.TypeConverterAttribute&gt;</ph> to the <ph id=\"ph2\">`get`</ph> method accessor that supports the XAML usage.","pos":[0,209],"source":"A type converter behavior for XAML usage of a custom attachable member can be assigned by applying <xref:System.ComponentModel.TypeConverterAttribute> to the `get` method accessor that supports the XAML usage."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Attached Properties Overview<ept id=\"p1\">](~/docs/framework/wpf/advanced/attached-properties-overview.md)</ept>.","pos":[210,330],"source":" For more information, see [Attached Properties Overview](~/docs/framework/wpf/advanced/attached-properties-overview.md)."}]},{"pos":[1880,2188],"content":"For complex XAML serialization cases that require additional state from the object runtime, consider defining a value serializer in addition to a type converter, and attribute both support classes on your custom types or custom members. For more information, see <xref:System.Windows.Markup.ValueSerializer>.","nodes":[{"content":"For complex XAML serialization cases that require additional state from the object runtime, consider defining a value serializer in addition to a type converter, and attribute both support classes on your custom types or custom members. For more information, see <xref:System.Windows.Markup.ValueSerializer>.","pos":[0,308],"nodes":[{"content":"For complex XAML serialization cases that require additional state from the object runtime, consider defining a value serializer in addition to a type converter, and attribute both support classes on your custom types or custom members.","pos":[0,236]},{"content":"For more information, see <ph id=\"ph1\">&lt;xref:System.Windows.Markup.ValueSerializer&gt;</ph>.","pos":[237,308],"source":" For more information, see <xref:System.Windows.Markup.ValueSerializer>."}]}]}],"pos":[1022,3223],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.ComponentModel.TypeConverterAttribute\"></xref> class with the default type converter, which is an empty string (\"\").","nodes":[{"pos":[0,169],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.ComponentModel.TypeConverterAttribute\"&gt;&lt;/xref&gt;</ph> class with the default type converter, which is an empty string (\"\").","source":"Initializes a new instance of the <xref href=\"System.ComponentModel.TypeConverterAttribute\"></xref> class with the default type converter, which is an empty string (\"\")."}],"pos":[9834,10004],"yaml":true},{"content":"The class that provides the data conversion must inherit from <xref:System.ComponentModel.TypeConverter>.","nodes":[{"pos":[0,105],"content":"The class that provides the data conversion must inherit from <xref:System.ComponentModel.TypeConverter>.","nodes":[{"content":"The class that provides the data conversion must inherit from <ph id=\"ph1\">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph>.","pos":[0,105],"source":"The class that provides the data conversion must inherit from <xref:System.ComponentModel.TypeConverter>."}]}],"pos":[10015,10121],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.ComponentModel.TypeConverterAttribute\"></xref> class, using the specified type name as the data converter for the object this attribute is bound to.","nodes":[{"pos":[0,201],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.ComponentModel.TypeConverterAttribute\"&gt;&lt;/xref&gt;</ph> class, using the specified type name as the data converter for the object this attribute is bound to.","source":"Initializes a new instance of the <xref href=\"System.ComponentModel.TypeConverterAttribute\"></xref> class, using the specified type name as the data converter for the object this attribute is bound to."}],"pos":[11662,11864],"yaml":true},{"content":"The class that provides the data conversion must inherit from <xref:System.ComponentModel.TypeConverter>.","nodes":[{"pos":[0,105],"content":"The class that provides the data conversion must inherit from <xref:System.ComponentModel.TypeConverter>.","nodes":[{"content":"The class that provides the data conversion must inherit from <ph id=\"ph1\">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph>.","pos":[0,105],"source":"The class that provides the data conversion must inherit from <xref:System.ComponentModel.TypeConverter>."}]}],"pos":[11875,11981],"yaml":true,"extradata":"MT"},{"content":"The fully qualified name of the class to use for data conversion for the object this attribute is bound to.","nodes":[{"pos":[0,107],"content":"The fully qualified name of the class to use for data conversion for the object this attribute is bound to.","nodes":[{"content":"The fully qualified name of the class to use for data conversion for the object this attribute is bound to.","pos":[0,107]}]}],"pos":[12133,12241],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.ComponentModel.TypeConverterAttribute\"></xref> class, using the specified type as the data converter for the object this attribute is bound to.","nodes":[{"pos":[0,196],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.ComponentModel.TypeConverterAttribute\"&gt;&lt;/xref&gt;</ph> class, using the specified type as the data converter for the object this attribute is bound to.","source":"Initializes a new instance of the <xref href=\"System.ComponentModel.TypeConverterAttribute\"></xref> class, using the specified type as the data converter for the object this attribute is bound to."}],"pos":[13694,13891],"yaml":true},{"content":"The class that provides the data conversion must inherit from <xref:System.ComponentModel.TypeConverter>.","nodes":[{"pos":[0,105],"content":"The class that provides the data conversion must inherit from <xref:System.ComponentModel.TypeConverter>.","nodes":[{"content":"The class that provides the data conversion must inherit from <ph id=\"ph1\">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph>.","pos":[0,105],"source":"The class that provides the data conversion must inherit from <xref:System.ComponentModel.TypeConverter>."}]}],"pos":[13902,14008],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Type\"></xref> that represents the type of the converter class to use for data conversion for the object this attribute is bound to.","nodes":[{"pos":[0,152],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> that represents the type of the converter class to use for data conversion for the object this attribute is bound to.","source":"A <xref href=\"System.Type\"></xref> that represents the type of the converter class to use for data conversion for the object this attribute is bound to."}],"pos":[14148,14301],"yaml":true},{"content":"Gets the fully qualified type name of the <xref href=\"System.Type\"></xref> to use as a converter for the object this attribute is bound to.","nodes":[{"pos":[0,139],"content":"Gets the fully qualified type name of the <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> to use as a converter for the object this attribute is bound to.","source":"Gets the fully qualified type name of the <xref href=\"System.Type\"></xref> to use as a converter for the object this attribute is bound to."}],"pos":[15713,15853],"yaml":true},{"content":"The fully qualified type name of the <xref href=\"System.Type\"></xref> to use as a converter for the object this attribute is bound to, or an empty string (\"\") if none exists. The default value is an empty string (\"\").","nodes":[{"pos":[0,217],"content":"The fully qualified type name of the <xref href=\"System.Type\"></xref> to use as a converter for the object this attribute is bound to, or an empty string (\"\") if none exists. The default value is an empty string (\"\").","nodes":[{"content":"The fully qualified type name of the <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> to use as a converter for the object this attribute is bound to, or an empty string (\"\") if none exists.","pos":[0,174],"source":"The fully qualified type name of the <xref href=\"System.Type\"></xref> to use as a converter for the object this attribute is bound to, or an empty string (\"\") if none exists."},{"content":"The default value is an empty string (\"\").","pos":[175,217]}]}],"pos":[15974,16192],"yaml":true},{"content":"Specifies the type to use as a converter for the object this attribute is bound to.","nodes":[{"pos":[0,83],"content":"Specifies the type to use as a converter for the object this attribute is bound to.","nodes":[{"content":"Specifies the type to use as a converter for the object this attribute is bound to.","pos":[0,83]}]}],"pos":[17553,17637],"yaml":true},{"content":"Returns whether the value of the given object is equal to the current <xref href=\"System.ComponentModel.TypeConverterAttribute\"></xref>.","nodes":[{"pos":[0,136],"content":"Returns whether the value of the given object is equal to the current <ph id=\"ph1\">&lt;xref href=\"System.ComponentModel.TypeConverterAttribute\"&gt;&lt;/xref&gt;</ph>.","source":"Returns whether the value of the given object is equal to the current <xref href=\"System.ComponentModel.TypeConverterAttribute\"></xref>."}],"pos":[19177,19314],"yaml":true},{"content":"The object to test the value equality of.","nodes":[{"pos":[0,41],"content":"The object to test the value equality of.","nodes":[{"content":"The object to test the value equality of.","pos":[0,41]}]}],"pos":[19454,19496],"yaml":true},{"content":"`true` if the value of the given object is equal to that of the current <xref href=\"System.ComponentModel.TypeConverterAttribute\"></xref>; otherwise, `false`.","nodes":[{"pos":[0,158],"content":"<ph id=\"ph1\">`true`</ph> if the value of the given object is equal to that of the current <ph id=\"ph2\">&lt;xref href=\"System.ComponentModel.TypeConverterAttribute\"&gt;&lt;/xref&gt;</ph>; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if the value of the given object is equal to that of the current <xref href=\"System.ComponentModel.TypeConverterAttribute\"></xref>; otherwise, `false`."}],"pos":[19554,19715],"yaml":true},{"content":"Returns the hash code for this instance.","nodes":[{"pos":[0,40],"content":"Returns the hash code for this instance.","nodes":[{"content":"Returns the hash code for this instance.","pos":[0,40]}]}],"pos":[21096,21137],"yaml":true},{"content":"A hash code for the current <xref href=\"System.ComponentModel.TypeConverterAttribute\"></xref>.","nodes":[{"pos":[0,94],"content":"A hash code for the current <ph id=\"ph1\">&lt;xref href=\"System.ComponentModel.TypeConverterAttribute\"&gt;&lt;/xref&gt;</ph>.","source":"A hash code for the current <xref href=\"System.ComponentModel.TypeConverterAttribute\"></xref>."}],"pos":[21271,21366],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.ComponentModel.TypeConverterAttribute\n  commentId: T:System.ComponentModel.TypeConverterAttribute\n  id: TypeConverterAttribute\n  children:\n  - System.ComponentModel.TypeConverterAttribute.#ctor\n  - System.ComponentModel.TypeConverterAttribute.#ctor(System.String)\n  - System.ComponentModel.TypeConverterAttribute.#ctor(System.Type)\n  - System.ComponentModel.TypeConverterAttribute.ConverterTypeName\n  - System.ComponentModel.TypeConverterAttribute.Default\n  - System.ComponentModel.TypeConverterAttribute.Equals(System.Object)\n  - System.ComponentModel.TypeConverterAttribute.GetHashCode\n  langs:\n  - csharp\n  name: TypeConverterAttribute\n  nameWithType: TypeConverterAttribute\n  fullName: System.ComponentModel.TypeConverterAttribute\n  type: Class\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  - System\n  - netstandard\n  namespace: System.ComponentModel\n  summary: Specifies what type to use as a converter for the object this attribute is bound to.\n  remarks: \"The class you use for conversion must inherit from <xref:System.ComponentModel.TypeConverter>. Use the <xref:System.ComponentModel.TypeConverterAttribute.ConverterTypeName%2A> property to get the name of the class that provides the data conversion for the object this attribute is bound to.  \\n  \\n For more information about attributes, see [Attributes](http://msdn.microsoft.com/library/30386922-1e00-4602-9ebf-526b271a8b87). For more information about type converters, see the <xref:System.ComponentModel.TypeConverter> base class and [How to: Implement a Type Converter](http://msdn.microsoft.com/library/90373a3f-d8c8-492d-841c-945d62393c56).  \\n  \\n In order to establish a type converter on a custom class that provides type conversion behavior for XAML, you apply the <xref:System.ComponentModel.TypeConverterAttribute> attribute to your type. The argument of the attribute references your type converter implementation. Your type converter should be able to accept values from a string that is used for attributes or initialization text in XAML markup, and convert that string into your intended destination type. For more information, see[TypeConverters and XAML](~/docs/framework/wpf/advanced/typeconverters-and-xaml.md).  \\n  \\n Rather than applying to all values of a type, a type converter behavior for XAML can also be established on a specific property. In this case, you apply <xref:System.ComponentModel.TypeConverterAttribute> to the property definition (the outer definition, not the specific `get` and `set` definitions).  \\n  \\n A type converter behavior for XAML usage of a custom attachable member can be assigned by applying <xref:System.ComponentModel.TypeConverterAttribute> to the `get` method accessor that supports the XAML usage. For more information, see [Attached Properties Overview](~/docs/framework/wpf/advanced/attached-properties-overview.md).  \\n  \\n For complex XAML serialization cases that require additional state from the object runtime, consider defining a value serializer in addition to a type converter, and attribute both support classes on your custom types or custom members. For more information, see <xref:System.Windows.Markup.ValueSerializer>.\"\n  example:\n  - \"The following example declares `MyClass` to use the type converter called `MyClassConverter`. This example assumes that `MyClassConverter` has been implemented elsewhere. The class implementing the converter (`MyClassConverter`) must inherit from the <xref:System.ComponentModel.TypeConverter> class.  \\n  \\n [!code-cpp[Classic TypeConverterAttribute Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic TypeConverterAttribute Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic TypeConverterAttribute Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic TypeConverterAttribute Example/CS/source.cs#1)]\\n [!code-vb[Classic TypeConverterAttribute Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic TypeConverterAttribute Example/VB/source.vb#1)]  \\n  \\n The next example creates an instance of `MyClass`. Then it gets the attributes for the class, and prints the name of the type converter used by `MyClass`.  \\n  \\n [!code-cpp[Classic TypeConverterAttribute Example#2](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic TypeConverterAttribute Example/CPP/source.cpp#2)]\\n [!code-csharp[Classic TypeConverterAttribute Example#2](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic TypeConverterAttribute Example/CS/source.cs#2)]\\n [!code-vb[Classic TypeConverterAttribute Example#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic TypeConverterAttribute Example/VB/source.vb#2)]\"\n  syntax:\n    content: >-\n      [System.AttributeUsage(System.AttributeTargets.All)]\n\n      public sealed class TypeConverterAttribute : Attribute\n  inheritance:\n  - System.Object\n  - System.Attribute\n  implements: []\n  inheritedMembers:\n  - System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type)\n  - System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type,System.Boolean)\n  - System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type)\n  - System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  - System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type)\n  - System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type,System.Boolean)\n  - System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type)\n  - System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type,System.Boolean)\n  - System.Attribute.GetCustomAttributes(System.Reflection.Assembly)\n  - System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Boolean)\n  - System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type)\n  - System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type,System.Boolean)\n  - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo)\n  - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)\n  - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type)\n  - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  - System.Attribute.GetCustomAttributes(System.Reflection.Module)\n  - System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Boolean)\n  - System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type)\n  - System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type,System.Boolean)\n  - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo)\n  - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Boolean)\n  - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type)\n  - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type,System.Boolean)\n  - System.Attribute.IsDefaultAttribute\n  - System.Attribute.IsDefined(System.Reflection.Assembly,System.Type)\n  - System.Attribute.IsDefined(System.Reflection.Assembly,System.Type,System.Boolean)\n  - System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type)\n  - System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  - System.Attribute.IsDefined(System.Reflection.Module,System.Type)\n  - System.Attribute.IsDefined(System.Reflection.Module,System.Type,System.Boolean)\n  - System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type)\n  - System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type,System.Boolean)\n  - System.Attribute.Match(System.Object)\n  - System.Attribute.System#Runtime#InteropServices#_Attribute#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  - System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  - System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfoCount(System.UInt32@)\n  - System.Attribute.System#Runtime#InteropServices#_Attribute#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  - System.Attribute.TypeId\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  attributes:\n  - type: System.AttributeUsageAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/TypeConverterAttribute.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.ComponentModel.TypeConverterAttribute.#ctor\n  commentId: M:System.ComponentModel.TypeConverterAttribute.#ctor\n  id: '#ctor'\n  parent: System.ComponentModel.TypeConverterAttribute\n  langs:\n  - csharp\n  name: TypeConverterAttribute()\n  nameWithType: TypeConverterAttribute.TypeConverterAttribute()\n  fullName: TypeConverterAttribute.TypeConverterAttribute()\n  type: Constructor\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  - System\n  - netstandard\n  namespace: System.ComponentModel\n  summary: Initializes a new instance of the <xref href=\"System.ComponentModel.TypeConverterAttribute\"></xref> class with the default type converter, which is an empty string (\"\").\n  remarks: The class that provides the data conversion must inherit from <xref:System.ComponentModel.TypeConverter>.\n  syntax:\n    content: public TypeConverterAttribute ();\n    parameters: []\n  overload: System.ComponentModel.TypeConverterAttribute.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/TypeConverterAttribute.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.ComponentModel.TypeConverterAttribute.#ctor(System.String)\n  commentId: M:System.ComponentModel.TypeConverterAttribute.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.ComponentModel.TypeConverterAttribute\n  langs:\n  - csharp\n  name: TypeConverterAttribute(String)\n  nameWithType: TypeConverterAttribute.TypeConverterAttribute(String)\n  fullName: TypeConverterAttribute.TypeConverterAttribute(String)\n  type: Constructor\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  - System\n  - netstandard\n  namespace: System.ComponentModel\n  summary: Initializes a new instance of the <xref href=\"System.ComponentModel.TypeConverterAttribute\"></xref> class, using the specified type name as the data converter for the object this attribute is bound to.\n  remarks: The class that provides the data conversion must inherit from <xref:System.ComponentModel.TypeConverter>.\n  syntax:\n    content: public TypeConverterAttribute (string typeName);\n    parameters:\n    - id: typeName\n      type: System.String\n      description: The fully qualified name of the class to use for data conversion for the object this attribute is bound to.\n  overload: System.ComponentModel.TypeConverterAttribute.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/TypeConverterAttribute.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.ComponentModel.TypeConverterAttribute.#ctor(System.Type)\n  commentId: M:System.ComponentModel.TypeConverterAttribute.#ctor(System.Type)\n  id: '#ctor(System.Type)'\n  parent: System.ComponentModel.TypeConverterAttribute\n  langs:\n  - csharp\n  name: TypeConverterAttribute(Type)\n  nameWithType: TypeConverterAttribute.TypeConverterAttribute(Type)\n  fullName: TypeConverterAttribute.TypeConverterAttribute(Type)\n  type: Constructor\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  - System\n  - netstandard\n  namespace: System.ComponentModel\n  summary: Initializes a new instance of the <xref href=\"System.ComponentModel.TypeConverterAttribute\"></xref> class, using the specified type as the data converter for the object this attribute is bound to.\n  remarks: The class that provides the data conversion must inherit from <xref:System.ComponentModel.TypeConverter>.\n  syntax:\n    content: public TypeConverterAttribute (Type type);\n    parameters:\n    - id: type\n      type: System.Type\n      description: A <xref href=\"System.Type\"></xref> that represents the type of the converter class to use for data conversion for the object this attribute is bound to.\n  overload: System.ComponentModel.TypeConverterAttribute.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/TypeConverterAttribute.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.ComponentModel.TypeConverterAttribute.ConverterTypeName\n  commentId: P:System.ComponentModel.TypeConverterAttribute.ConverterTypeName\n  id: ConverterTypeName\n  parent: System.ComponentModel.TypeConverterAttribute\n  langs:\n  - csharp\n  name: ConverterTypeName\n  nameWithType: TypeConverterAttribute.ConverterTypeName\n  fullName: TypeConverterAttribute.ConverterTypeName\n  type: Property\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  - System\n  - netstandard\n  namespace: System.ComponentModel\n  summary: Gets the fully qualified type name of the <xref href=\"System.Type\"></xref> to use as a converter for the object this attribute is bound to.\n  syntax:\n    content: public string ConverterTypeName { get; }\n    return:\n      type: System.String\n      description: The fully qualified type name of the <xref href=\"System.Type\"></xref> to use as a converter for the object this attribute is bound to, or an empty string (\"\") if none exists. The default value is an empty string (\"\").\n  overload: System.ComponentModel.TypeConverterAttribute.ConverterTypeName*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/TypeConverterAttribute.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.ComponentModel.TypeConverterAttribute.Default\n  commentId: F:System.ComponentModel.TypeConverterAttribute.Default\n  id: Default\n  parent: System.ComponentModel.TypeConverterAttribute\n  langs:\n  - csharp\n  name: Default\n  nameWithType: TypeConverterAttribute.Default\n  fullName: TypeConverterAttribute.Default\n  type: Field\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  - System\n  - netstandard\n  namespace: System.ComponentModel\n  summary: Specifies the type to use as a converter for the object this attribute is bound to.\n  syntax:\n    content: public static readonly System.ComponentModel.TypeConverterAttribute Default;\n    return:\n      type: System.ComponentModel.TypeConverterAttribute\n      description: ''\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/TypeConverterAttribute.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.ComponentModel.TypeConverterAttribute.Equals(System.Object)\n  commentId: M:System.ComponentModel.TypeConverterAttribute.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.ComponentModel.TypeConverterAttribute\n  langs:\n  - csharp\n  name: Equals(Object)\n  nameWithType: TypeConverterAttribute.Equals(Object)\n  fullName: TypeConverterAttribute.Equals(Object)\n  type: Method\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  - System\n  - netstandard\n  namespace: System.ComponentModel\n  summary: Returns whether the value of the given object is equal to the current <xref href=\"System.ComponentModel.TypeConverterAttribute\"></xref>.\n  syntax:\n    content: public override bool Equals (object obj);\n    parameters:\n    - id: obj\n      type: System.Object\n      description: The object to test the value equality of.\n    return:\n      type: System.Boolean\n      description: '`true` if the value of the given object is equal to that of the current <xref href=\"System.ComponentModel.TypeConverterAttribute\"></xref>; otherwise, `false`.'\n  overload: System.ComponentModel.TypeConverterAttribute.Equals*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/TypeConverterAttribute.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.ComponentModel.TypeConverterAttribute.GetHashCode\n  commentId: M:System.ComponentModel.TypeConverterAttribute.GetHashCode\n  id: GetHashCode\n  parent: System.ComponentModel.TypeConverterAttribute\n  langs:\n  - csharp\n  name: GetHashCode()\n  nameWithType: TypeConverterAttribute.GetHashCode()\n  fullName: TypeConverterAttribute.GetHashCode()\n  type: Method\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  - System\n  - netstandard\n  namespace: System.ComponentModel\n  summary: Returns the hash code for this instance.\n  syntax:\n    content: public override int GetHashCode ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: A hash code for the current <xref href=\"System.ComponentModel.TypeConverterAttribute\"></xref>.\n  overload: System.ComponentModel.TypeConverterAttribute.GetHashCode*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/TypeConverterAttribute.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\nreferences:\n- uid: System.Attribute\n  parent: System\n  isExternal: false\n  name: Attribute\n  nameWithType: Attribute\n  fullName: System.Attribute\n- uid: System.ComponentModel.TypeConverterAttribute.#ctor\n  parent: System.ComponentModel.TypeConverterAttribute\n  isExternal: false\n  name: TypeConverterAttribute()\n  nameWithType: TypeConverterAttribute.TypeConverterAttribute()\n  fullName: TypeConverterAttribute.TypeConverterAttribute()\n- uid: System.ComponentModel.TypeConverterAttribute.#ctor(System.String)\n  parent: System.ComponentModel.TypeConverterAttribute\n  isExternal: false\n  name: TypeConverterAttribute(String)\n  nameWithType: TypeConverterAttribute.TypeConverterAttribute(String)\n  fullName: TypeConverterAttribute.TypeConverterAttribute(String)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.ComponentModel.TypeConverterAttribute.#ctor(System.Type)\n  parent: System.ComponentModel.TypeConverterAttribute\n  isExternal: false\n  name: TypeConverterAttribute(Type)\n  nameWithType: TypeConverterAttribute.TypeConverterAttribute(Type)\n  fullName: TypeConverterAttribute.TypeConverterAttribute(Type)\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.ComponentModel.TypeConverterAttribute.ConverterTypeName\n  parent: System.ComponentModel.TypeConverterAttribute\n  isExternal: false\n  name: ConverterTypeName\n  nameWithType: TypeConverterAttribute.ConverterTypeName\n  fullName: TypeConverterAttribute.ConverterTypeName\n- uid: System.ComponentModel.TypeConverterAttribute.Default\n  parent: System.ComponentModel.TypeConverterAttribute\n  isExternal: false\n  name: Default\n  nameWithType: TypeConverterAttribute.Default\n  fullName: TypeConverterAttribute.Default\n- uid: System.ComponentModel.TypeConverterAttribute\n  parent: System.ComponentModel\n  isExternal: false\n  name: TypeConverterAttribute\n  nameWithType: TypeConverterAttribute\n  fullName: System.ComponentModel.TypeConverterAttribute\n- uid: System.ComponentModel.TypeConverterAttribute.Equals(System.Object)\n  parent: System.ComponentModel.TypeConverterAttribute\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: TypeConverterAttribute.Equals(Object)\n  fullName: TypeConverterAttribute.Equals(Object)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.ComponentModel.TypeConverterAttribute.GetHashCode\n  parent: System.ComponentModel.TypeConverterAttribute\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: TypeConverterAttribute.GetHashCode()\n  fullName: TypeConverterAttribute.GetHashCode()\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.ComponentModel.TypeConverterAttribute.#ctor*\n  parent: System.ComponentModel.TypeConverterAttribute\n  isExternal: false\n  name: TypeConverterAttribute\n  nameWithType: TypeConverterAttribute.TypeConverterAttribute\n  fullName: TypeConverterAttribute.TypeConverterAttribute\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/TypeConverterAttribute.xml\n- uid: System.ComponentModel.TypeConverterAttribute.ConverterTypeName*\n  parent: System.ComponentModel.TypeConverterAttribute\n  isExternal: false\n  name: ConverterTypeName\n  nameWithType: TypeConverterAttribute.ConverterTypeName\n  fullName: TypeConverterAttribute.ConverterTypeName\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/TypeConverterAttribute.xml\n- uid: System.ComponentModel.TypeConverterAttribute.Equals*\n  parent: System.ComponentModel.TypeConverterAttribute\n  isExternal: false\n  name: Equals\n  nameWithType: TypeConverterAttribute.Equals\n  fullName: TypeConverterAttribute.Equals\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/TypeConverterAttribute.xml\n- uid: System.ComponentModel.TypeConverterAttribute.GetHashCode*\n  parent: System.ComponentModel.TypeConverterAttribute\n  isExternal: false\n  name: GetHashCode\n  nameWithType: TypeConverterAttribute.GetHashCode\n  fullName: TypeConverterAttribute.GetHashCode\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/TypeConverterAttribute.xml\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttribute(ParameterInfo, Type, Boolean)\n  nameWithType: Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean)\n  fullName: Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean)\n- uid: System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttribute(MemberInfo, Type, Boolean)\n  nameWithType: Attribute.GetCustomAttribute(MemberInfo, Type, Boolean)\n  fullName: Attribute.GetCustomAttribute(MemberInfo, Type, Boolean)\n- uid: System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttribute(Assembly, Type, Boolean)\n  nameWithType: Attribute.GetCustomAttribute(Assembly, Type, Boolean)\n  fullName: Attribute.GetCustomAttribute(Assembly, Type, Boolean)\n- uid: System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttribute(Module, Type, Boolean)\n  nameWithType: Attribute.GetCustomAttribute(Module, Type, Boolean)\n  fullName: Attribute.GetCustomAttribute(Module, Type, Boolean)\n- uid: System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttribute(Module, Type)\n  nameWithType: Attribute.GetCustomAttribute(Module, Type)\n  fullName: Attribute.GetCustomAttribute(Module, Type)\n- uid: System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttribute(MemberInfo, Type)\n  nameWithType: Attribute.GetCustomAttribute(MemberInfo, Type)\n  fullName: Attribute.GetCustomAttribute(MemberInfo, Type)\n- uid: System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttribute(Assembly, Type)\n  nameWithType: Attribute.GetCustomAttribute(Assembly, Type)\n  fullName: Attribute.GetCustomAttribute(Assembly, Type)\n- uid: System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttribute(ParameterInfo, Type)\n  nameWithType: Attribute.GetCustomAttribute(ParameterInfo, Type)\n  fullName: Attribute.GetCustomAttribute(ParameterInfo, Type)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(Module, Type)\n  nameWithType: Attribute.GetCustomAttributes(Module, Type)\n  fullName: Attribute.GetCustomAttributes(Module, Type)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(ParameterInfo, Type, Boolean)\n  nameWithType: Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean)\n  fullName: Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(Module, Type, Boolean)\n  nameWithType: Attribute.GetCustomAttributes(Module, Type, Boolean)\n  fullName: Attribute.GetCustomAttributes(Module, Type, Boolean)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(MemberInfo, Type, Boolean)\n  nameWithType: Attribute.GetCustomAttributes(MemberInfo, Type, Boolean)\n  fullName: Attribute.GetCustomAttributes(MemberInfo, Type, Boolean)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(Assembly, Type, Boolean)\n  nameWithType: Attribute.GetCustomAttributes(Assembly, Type, Boolean)\n  fullName: Attribute.GetCustomAttributes(Assembly, Type, Boolean)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(ParameterInfo, Type)\n  nameWithType: Attribute.GetCustomAttributes(ParameterInfo, Type)\n  fullName: Attribute.GetCustomAttributes(ParameterInfo, Type)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(Module, Boolean)\n  nameWithType: Attribute.GetCustomAttributes(Module, Boolean)\n  fullName: Attribute.GetCustomAttributes(Module, Boolean)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(ParameterInfo, Boolean)\n  nameWithType: Attribute.GetCustomAttributes(ParameterInfo, Boolean)\n  fullName: Attribute.GetCustomAttributes(ParameterInfo, Boolean)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(MemberInfo, Boolean)\n  nameWithType: Attribute.GetCustomAttributes(MemberInfo, Boolean)\n  fullName: Attribute.GetCustomAttributes(MemberInfo, Boolean)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(Assembly, Type)\n  nameWithType: Attribute.GetCustomAttributes(Assembly, Type)\n  fullName: Attribute.GetCustomAttributes(Assembly, Type)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(Assembly, Boolean)\n  nameWithType: Attribute.GetCustomAttributes(Assembly, Boolean)\n  fullName: Attribute.GetCustomAttributes(Assembly, Boolean)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(ParameterInfo)\n  nameWithType: Attribute.GetCustomAttributes(ParameterInfo)\n  fullName: Attribute.GetCustomAttributes(ParameterInfo)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.Module)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(Module)\n  nameWithType: Attribute.GetCustomAttributes(Module)\n  fullName: Attribute.GetCustomAttributes(Module)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(MemberInfo)\n  nameWithType: Attribute.GetCustomAttributes(MemberInfo)\n  fullName: Attribute.GetCustomAttributes(MemberInfo)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.Assembly)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(Assembly)\n  nameWithType: Attribute.GetCustomAttributes(Assembly)\n  fullName: Attribute.GetCustomAttributes(Assembly)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(MemberInfo, Type)\n  nameWithType: Attribute.GetCustomAttributes(MemberInfo, Type)\n  fullName: Attribute.GetCustomAttributes(MemberInfo, Type)\n- uid: System.Attribute.IsDefaultAttribute\n  parent: System.Attribute\n  isExternal: false\n  name: IsDefaultAttribute()\n  nameWithType: Attribute.IsDefaultAttribute()\n  fullName: Attribute.IsDefaultAttribute()\n- uid: System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: IsDefined(ParameterInfo, Type, Boolean)\n  nameWithType: Attribute.IsDefined(ParameterInfo, Type, Boolean)\n  fullName: Attribute.IsDefined(ParameterInfo, Type, Boolean)\n- uid: System.Attribute.IsDefined(System.Reflection.Module,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: IsDefined(Module, Type, Boolean)\n  nameWithType: Attribute.IsDefined(Module, Type, Boolean)\n  fullName: Attribute.IsDefined(Module, Type, Boolean)\n- uid: System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: IsDefined(MemberInfo, Type, Boolean)\n  nameWithType: Attribute.IsDefined(MemberInfo, Type, Boolean)\n  fullName: Attribute.IsDefined(MemberInfo, Type, Boolean)\n- uid: System.Attribute.IsDefined(System.Reflection.Assembly,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: IsDefined(Assembly, Type, Boolean)\n  nameWithType: Attribute.IsDefined(Assembly, Type, Boolean)\n  fullName: Attribute.IsDefined(Assembly, Type, Boolean)\n- uid: System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: IsDefined(MemberInfo, Type)\n  nameWithType: Attribute.IsDefined(MemberInfo, Type)\n  fullName: Attribute.IsDefined(MemberInfo, Type)\n- uid: System.Attribute.IsDefined(System.Reflection.Module,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: IsDefined(Module, Type)\n  nameWithType: Attribute.IsDefined(Module, Type)\n  fullName: Attribute.IsDefined(Module, Type)\n- uid: System.Attribute.IsDefined(System.Reflection.Assembly,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: IsDefined(Assembly, Type)\n  nameWithType: Attribute.IsDefined(Assembly, Type)\n  fullName: Attribute.IsDefined(Assembly, Type)\n- uid: System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: IsDefined(ParameterInfo, Type)\n  nameWithType: Attribute.IsDefined(ParameterInfo, Type)\n  fullName: Attribute.IsDefined(ParameterInfo, Type)\n- uid: System.Attribute.Match(System.Object)\n  parent: System.Attribute\n  isExternal: false\n  name: Match(Object)\n  nameWithType: Attribute.Match(Object)\n  fullName: Attribute.Match(Object)\n- uid: System.Attribute.TypeId\n  parent: System.Attribute\n  isExternal: false\n  name: TypeId\n  nameWithType: Attribute.TypeId\n  fullName: Attribute.TypeId\n- uid: System.Attribute.System#Runtime#InteropServices#_Attribute#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  parent: System.Attribute\n  isExternal: false\n  name: _Attribute.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n  nameWithType: Attribute._Attribute.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n  fullName: Attribute._Attribute.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n- uid: System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  parent: System.Attribute\n  isExternal: false\n  name: _Attribute.GetTypeInfo(UInt32, UInt32, IntPtr)\n  nameWithType: Attribute._Attribute.GetTypeInfo(UInt32, UInt32, IntPtr)\n  fullName: Attribute._Attribute.GetTypeInfo(UInt32, UInt32, IntPtr)\n- uid: System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfoCount(System.UInt32@)\n  parent: System.Attribute\n  isExternal: false\n  name: _Attribute.GetTypeInfoCount(UInt32)\n  nameWithType: Attribute._Attribute.GetTypeInfoCount(UInt32)\n  fullName: Attribute._Attribute.GetTypeInfoCount(UInt32)\n- uid: System.Attribute.System#Runtime#InteropServices#_Attribute#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  parent: System.Attribute\n  isExternal: false\n  name: _Attribute.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n  nameWithType: Attribute._Attribute.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n  fullName: Attribute._Attribute.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n"}