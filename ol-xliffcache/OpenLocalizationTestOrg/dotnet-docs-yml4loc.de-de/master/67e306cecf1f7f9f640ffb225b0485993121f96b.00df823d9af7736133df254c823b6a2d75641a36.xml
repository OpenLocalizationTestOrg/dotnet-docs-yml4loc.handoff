{"nodes":[{"content":"Represents an XML element.  See [XElement Class Overview](http://msdn.microsoft.com/library/d35180fe-7016-4895-9bfc-ba1e3f7875ec) and the Remarks section on this page for usage information and examples.","nodes":[{"pos":[0,202],"content":"Represents an XML element.  See [XElement Class Overview](http://msdn.microsoft.com/library/d35180fe-7016-4895-9bfc-ba1e3f7875ec) and the Remarks section on this page for usage information and examples.","nodes":[{"content":"Represents an XML element.","pos":[0,26]},{"content":"See <bpt id=\"p1\">[</bpt>XElement Class Overview<ept id=\"p1\">](http://msdn.microsoft.com/library/d35180fe-7016-4895-9bfc-ba1e3f7875ec)</ept> and the Remarks section on this page for usage information and examples.","pos":[28,202],"source":"  See [XElement Class Overview](http://msdn.microsoft.com/library/d35180fe-7016-4895-9bfc-ba1e3f7875ec) and the Remarks section on this page for usage information and examples."}]}],"pos":[6835,7038],"yaml":true},{"content":"> [!NOTE]\n>  To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#System.Xml.Linq/XLinq.cs#3367036406d1344a). You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/).  \n  \n This class represents an XML element, the fundamental XML construct.  See [XElement Class Overview](http://msdn.microsoft.com/library/d35180fe-7016-4895-9bfc-ba1e3f7875ec) for other usage information.  \n  \n An element has an <xref:System.Xml.Linq.XName>, optionally one or more attributes, and can optionally contain content (for more information, see <xref:System.Xml.Linq.XContainer.Nodes%2A>).  \n  \n An <xref:System.Xml.Linq.XElement> can contain the following types of content:  \n  \n-   <xref:System.Xml.Linq.XElement>  \n  \n-   <xref:System.Xml.Linq.XComment>  \n  \n-   <xref:System.Xml.Linq.XProcessingInstruction>  \n  \n-   <xref:System.Xml.Linq.XText>  \n  \n For details about the valid content of an <xref:System.Xml.Linq.XElement>, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).  \n  \n <xref:System.Xml.Linq.XElement> derives from <xref:System.Xml.Linq.XContainer>, which derives from <xref:System.Xml.Linq.XNode>.  \n  \n Some <xref:System.Xml.Linq.XElement> methods can be used from XAML. For more information, see [LINQ to XML Dynamic Properties](http://msdn.microsoft.com/library/0455f47c-4a68-4f2e-a3f8-dd1d85b99012).","nodes":[{"pos":[2,404],"content":"[!NOTE]\n To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#System.Xml.Linq/XLinq.cs#3367036406d1344a). You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/).","leadings":["","> "],"nodes":[{"content":" To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#System.Xml.Linq/XLinq.cs#3367036406d1344a). You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/).","pos":[8,400],"nodes":[{"content":"To view the .NET Framework source code for this type, see the <bpt id=\"p1\">[</bpt>Reference Source<ept id=\"p1\">](http://referencesource.microsoft.com/#System.Xml.Linq/XLinq.cs#3367036406d1344a)</ept>.","pos":[1,163],"source":" To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#System.Xml.Linq/XLinq.cs#3367036406d1344a)."},{"content":"You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see <bpt id=\"p1\">[</bpt>instructions<ept id=\"p1\">](http://referencesource.microsoft.com/)</ept>.","pos":[164,392],"source":" You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/)."}]}]},{"pos":[411,611],"content":"This class represents an XML element, the fundamental XML construct.  See [XElement Class Overview](http://msdn.microsoft.com/library/d35180fe-7016-4895-9bfc-ba1e3f7875ec) for other usage information.","nodes":[{"content":"This class represents an XML element, the fundamental XML construct.","pos":[0,68]},{"content":"See <bpt id=\"p1\">[</bpt>XElement Class Overview<ept id=\"p1\">](http://msdn.microsoft.com/library/d35180fe-7016-4895-9bfc-ba1e3f7875ec)</ept> for other usage information.","pos":[70,200],"source":"  See [XElement Class Overview](http://msdn.microsoft.com/library/d35180fe-7016-4895-9bfc-ba1e3f7875ec) for other usage information."}]},{"pos":[618,807],"content":"An element has an <xref:System.Xml.Linq.XName>, optionally one or more attributes, and can optionally contain content (for more information, see <xref:System.Xml.Linq.XContainer.Nodes%2A>).","nodes":[{"content":"An element has an <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XName&gt;</ph>, optionally one or more attributes, and can optionally contain content (for more information, see <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XContainer.Nodes%2A&gt;</ph>).","pos":[0,189],"source":"An element has an <xref:System.Xml.Linq.XName>, optionally one or more attributes, and can optionally contain content (for more information, see <xref:System.Xml.Linq.XContainer.Nodes%2A>)."}]},{"pos":[814,892],"content":"An <xref:System.Xml.Linq.XElement> can contain the following types of content:","nodes":[{"content":"An <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XElement&gt;</ph> can contain the following types of content:","pos":[0,78],"source":"An <xref:System.Xml.Linq.XElement> can contain the following types of content:"}]},{"pos":[902,933],"content":"<xref:System.Xml.Linq.XElement>","nodes":[]},{"pos":[943,974],"content":"<xref:System.Xml.Linq.XComment>","nodes":[]},{"pos":[984,1029],"content":"<xref:System.Xml.Linq.XProcessingInstruction>","nodes":[]},{"pos":[1039,1067],"content":"<xref:System.Xml.Linq.XText>","nodes":[]},{"pos":[1074,1275],"content":"For details about the valid content of an <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XElement&gt;</ph>, see <bpt id=\"p1\">[</bpt>Valid Content of XElement and XDocument Objects<ept id=\"p1\">](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)</ept>.","source":"For details about the valid content of an <xref:System.Xml.Linq.XElement>, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)."},{"pos":[1282,1410],"content":"<xref:System.Xml.Linq.XElement> derives from <xref:System.Xml.Linq.XContainer>, which derives from <xref:System.Xml.Linq.XNode>.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Xml.Linq.XElement&gt;</ph> derives from <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XContainer&gt;</ph>, which derives from <ph id=\"ph3\">&lt;xref:System.Xml.Linq.XNode&gt;</ph>.","pos":[0,128],"source":"<xref:System.Xml.Linq.XElement> derives from <xref:System.Xml.Linq.XContainer>, which derives from <xref:System.Xml.Linq.XNode>."}]},{"pos":[1417,1616],"content":"Some <xref:System.Xml.Linq.XElement> methods can be used from XAML. For more information, see [LINQ to XML Dynamic Properties](http://msdn.microsoft.com/library/0455f47c-4a68-4f2e-a3f8-dd1d85b99012).","nodes":[{"content":"Some <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XElement&gt;</ph> methods can be used from XAML.","pos":[0,67],"source":"Some <xref:System.Xml.Linq.XElement> methods can be used from XAML."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>LINQ to XML Dynamic Properties<ept id=\"p1\">](http://msdn.microsoft.com/library/0455f47c-4a68-4f2e-a3f8-dd1d85b99012)</ept>.","pos":[68,199],"source":" For more information, see [LINQ to XML Dynamic Properties](http://msdn.microsoft.com/library/0455f47c-4a68-4f2e-a3f8-dd1d85b99012)."}]}],"pos":[7049,8689],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Xml.Linq.XElement\"></xref> class from another <xref href=\"System.Xml.Linq.XElement\"></xref> object.","nodes":[{"pos":[0,152],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XElement\"&gt;&lt;/xref&gt;</ph> class from another <ph id=\"ph2\">&lt;xref href=\"System.Xml.Linq.XElement\"&gt;&lt;/xref&gt;</ph> object.","source":"Initializes a new instance of the <xref href=\"System.Xml.Linq.XElement\"></xref> class from another <xref href=\"System.Xml.Linq.XElement\"></xref> object."}],"pos":[18407,18560],"yaml":true},{"content":"This constructor makes a deep copy of an element.","nodes":[{"pos":[0,49],"content":"This constructor makes a deep copy of an element.","nodes":[{"content":"This constructor makes a deep copy of an element.","pos":[0,49]}]}],"pos":[18571,18621],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Xml.Linq.XElement\"></xref> object to copy from.","nodes":[{"pos":[0,69],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XElement\"&gt;&lt;/xref&gt;</ph> object to copy from.","source":"An <xref href=\"System.Xml.Linq.XElement\"></xref> object to copy from."}],"pos":[20300,20370],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Xml.Linq.XElement\"></xref> class with the specified name.","nodes":[{"pos":[0,110],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XElement\"&gt;&lt;/xref&gt;</ph> class with the specified name.","source":"Initializes a new instance of the <xref href=\"System.Xml.Linq.XElement\"></xref> class with the specified name."}],"pos":[21912,22023],"yaml":true},{"content":"This constructor creates an element with no content and no attributes.  \n  \n There is an implicit conversion from string to <xref:System.Xml.Linq.XName>. Typical use of this constructor is to specify a string as the parameter instead of creating a new <xref:System.Xml.Linq.XName>. When creating an element in a namespace, typical use is to use the addition operator overload with an <xref:System.Xml.Linq.XNamespace> and a string to create an <xref:System.Xml.Linq.XName>. For more information, see [Working with XML Namespaces](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).","nodes":[{"pos":[0,70],"content":"This constructor creates an element with no content and no attributes.","nodes":[{"content":"This constructor creates an element with no content and no attributes.","pos":[0,70]}]},{"pos":[77,602],"content":"There is an implicit conversion from string to <xref:System.Xml.Linq.XName>. Typical use of this constructor is to specify a string as the parameter instead of creating a new <xref:System.Xml.Linq.XName>. When creating an element in a namespace, typical use is to use the addition operator overload with an <xref:System.Xml.Linq.XNamespace> and a string to create an <xref:System.Xml.Linq.XName>. For more information, see [Working with XML Namespaces](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).","nodes":[{"content":"There is an implicit conversion from string to <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XName&gt;</ph>.","pos":[0,76],"source":"There is an implicit conversion from string to <xref:System.Xml.Linq.XName>."},{"content":"Typical use of this constructor is to specify a string as the parameter instead of creating a new <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XName&gt;</ph>.","pos":[77,204],"source":" Typical use of this constructor is to specify a string as the parameter instead of creating a new <xref:System.Xml.Linq.XName>."},{"content":"When creating an element in a namespace, typical use is to use the addition operator overload with an <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph> and a string to create an <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XName&gt;</ph>.","pos":[205,396],"source":" When creating an element in a namespace, typical use is to use the addition operator overload with an <xref:System.Xml.Linq.XNamespace> and a string to create an <xref:System.Xml.Linq.XName>."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Working with XML Namespaces<ept id=\"p1\">](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430)</ept>.","pos":[397,525],"source":" For more information, see [Working with XML Namespaces](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430)."}]}],"pos":[22034,22641],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Xml.Linq.XName\"></xref> that contains the name of the element.","nodes":[{"pos":[0,84],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XName\"&gt;&lt;/xref&gt;</ph> that contains the name of the element.","source":"An <xref href=\"System.Xml.Linq.XName\"></xref> that contains the name of the element."}],"pos":[23903,23988],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Xml.Linq.XElement\"></xref> class from an <xref href=\"System.Xml.Linq.XStreamingElement\"></xref> object.","nodes":[{"pos":[0,156],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XElement\"&gt;&lt;/xref&gt;</ph> class from an <ph id=\"ph2\">&lt;xref href=\"System.Xml.Linq.XStreamingElement\"&gt;&lt;/xref&gt;</ph> object.","source":"Initializes a new instance of the <xref href=\"System.Xml.Linq.XElement\"></xref> class from an <xref href=\"System.Xml.Linq.XStreamingElement\"></xref> object."}],"pos":[25602,25759],"yaml":true},{"content":"This constructor iterates through the contents of the specified <xref:System.Xml.Linq.XStreamingElement>, and creates an element with its contents.","nodes":[{"pos":[0,147],"content":"This constructor iterates through the contents of the specified <xref:System.Xml.Linq.XStreamingElement>, and creates an element with its contents.","nodes":[{"content":"This constructor iterates through the contents of the specified <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph>, and creates an element with its contents.","pos":[0,147],"source":"This constructor iterates through the contents of the specified <xref:System.Xml.Linq.XStreamingElement>, and creates an element with its contents."}]}],"pos":[25770,25918],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Xml.Linq.XStreamingElement\"></xref> that contains unevaluated queries that will be iterated for the contents of this <xref href=\"System.Xml.Linq.XElement\"></xref>.","nodes":[{"pos":[0,185],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XStreamingElement\"&gt;&lt;/xref&gt;</ph> that contains unevaluated queries that will be iterated for the contents of this <ph id=\"ph2\">&lt;xref href=\"System.Xml.Linq.XElement\"&gt;&lt;/xref&gt;</ph>.","source":"An <xref href=\"System.Xml.Linq.XStreamingElement\"></xref> that contains unevaluated queries that will be iterated for the contents of this <xref href=\"System.Xml.Linq.XElement\"></xref>."}],"pos":[27991,28177],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Xml.Linq.XElement\"></xref> class with the specified name and content.","nodes":[{"pos":[0,122],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XElement\"&gt;&lt;/xref&gt;</ph> class with the specified name and content.","source":"Initializes a new instance of the <xref href=\"System.Xml.Linq.XElement\"></xref> class with the specified name and content."}],"pos":[29785,29908],"yaml":true},{"content":"This constructor creates an element with the specified content and attributes.  \n  \n There is an implicit conversion from string to <xref:System.Xml.Linq.XName>. Typical use of this constructor is to specify a string as the parameter instead of creating a new <xref:System.Xml.Linq.XName>.  \n  \n When creating an element in a namespace, typical use is to use the addition operator overload with an <xref:System.Xml.Linq.XNamespace> and a string to create an <xref:System.Xml.Linq.XName>. For more information, see [Working with XML Namespaces](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).  \n  \n For details about the valid content that can be passed to this constructor, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).","nodes":[{"pos":[0,78],"content":"This constructor creates an element with the specified content and attributes.","nodes":[{"content":"This constructor creates an element with the specified content and attributes.","pos":[0,78]}]},{"pos":[85,289],"content":"There is an implicit conversion from string to <xref:System.Xml.Linq.XName>. Typical use of this constructor is to specify a string as the parameter instead of creating a new <xref:System.Xml.Linq.XName>.","nodes":[{"content":"There is an implicit conversion from string to <xref:System.Xml.Linq.XName>. Typical use of this constructor is to specify a string as the parameter instead of creating a new <xref:System.Xml.Linq.XName>.","pos":[0,204],"nodes":[{"content":"There is an implicit conversion from string to <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XName&gt;</ph>.","pos":[0,76],"source":"There is an implicit conversion from string to <xref:System.Xml.Linq.XName>."},{"content":"Typical use of this constructor is to specify a string as the parameter instead of creating a new <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XName&gt;</ph>.","pos":[77,204],"source":" Typical use of this constructor is to specify a string as the parameter instead of creating a new <xref:System.Xml.Linq.XName>."}]}]},{"pos":[296,616],"content":"When creating an element in a namespace, typical use is to use the addition operator overload with an <xref:System.Xml.Linq.XNamespace> and a string to create an <xref:System.Xml.Linq.XName>. For more information, see [Working with XML Namespaces](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).","nodes":[{"content":"When creating an element in a namespace, typical use is to use the addition operator overload with an <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph> and a string to create an <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XName&gt;</ph>.","pos":[0,191],"source":"When creating an element in a namespace, typical use is to use the addition operator overload with an <xref:System.Xml.Linq.XNamespace> and a string to create an <xref:System.Xml.Linq.XName>."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Working with XML Namespaces<ept id=\"p1\">](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430)</ept>.","pos":[192,320],"source":" For more information, see [Working with XML Namespaces](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430)."}]},{"pos":[623,825],"content":"For details about the valid content that can be passed to this constructor, see <bpt id=\"p1\">[</bpt>Valid Content of XElement and XDocument Objects<ept id=\"p1\">](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)</ept>.","source":"For details about the valid content that can be passed to this constructor, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)."}],"pos":[29919,30753],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Xml.Linq.XName\"></xref> that contains the element name.","nodes":[{"pos":[0,77],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XName\"&gt;&lt;/xref&gt;</ph> that contains the element name.","source":"An <xref href=\"System.Xml.Linq.XName\"></xref> that contains the element name."}],"pos":[37971,38049],"yaml":true},{"content":"The contents of the element.","nodes":[{"pos":[0,28],"content":"The contents of the element.","nodes":[{"content":"The contents of the element.","pos":[0,28]}]}],"pos":[38112,38141],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Xml.Linq.XElement\"></xref> class with the specified name and content.","nodes":[{"pos":[0,122],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XElement\"&gt;&lt;/xref&gt;</ph> class with the specified name and content.","source":"Initializes a new instance of the <xref href=\"System.Xml.Linq.XElement\"></xref> class with the specified name and content."}],"pos":[39761,39884],"yaml":true},{"content":"This constructor creates an element with the specified content and attributes.  \n  \n There is an implicit conversion from string to <xref:System.Xml.Linq.XName>. Typical use of this constructor is to specify a string as the parameter instead of creating a new <xref:System.Xml.Linq.XName>.  \n  \n When creating an element in a namespace, typical use is to use the addition operator overload with an <xref:System.Xml.Linq.XNamespace> and a string to create an <xref:System.Xml.Linq.XName>. For more information, see [Working with XML Namespaces](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).  \n  \n For details about the valid content that can be passed to this constructor, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).","nodes":[{"pos":[0,78],"content":"This constructor creates an element with the specified content and attributes.","nodes":[{"content":"This constructor creates an element with the specified content and attributes.","pos":[0,78]}]},{"pos":[85,289],"content":"There is an implicit conversion from string to <xref:System.Xml.Linq.XName>. Typical use of this constructor is to specify a string as the parameter instead of creating a new <xref:System.Xml.Linq.XName>.","nodes":[{"content":"There is an implicit conversion from string to <xref:System.Xml.Linq.XName>. Typical use of this constructor is to specify a string as the parameter instead of creating a new <xref:System.Xml.Linq.XName>.","pos":[0,204],"nodes":[{"content":"There is an implicit conversion from string to <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XName&gt;</ph>.","pos":[0,76],"source":"There is an implicit conversion from string to <xref:System.Xml.Linq.XName>."},{"content":"Typical use of this constructor is to specify a string as the parameter instead of creating a new <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XName&gt;</ph>.","pos":[77,204],"source":" Typical use of this constructor is to specify a string as the parameter instead of creating a new <xref:System.Xml.Linq.XName>."}]}]},{"pos":[296,616],"content":"When creating an element in a namespace, typical use is to use the addition operator overload with an <xref:System.Xml.Linq.XNamespace> and a string to create an <xref:System.Xml.Linq.XName>. For more information, see [Working with XML Namespaces](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).","nodes":[{"content":"When creating an element in a namespace, typical use is to use the addition operator overload with an <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph> and a string to create an <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XName&gt;</ph>.","pos":[0,191],"source":"When creating an element in a namespace, typical use is to use the addition operator overload with an <xref:System.Xml.Linq.XNamespace> and a string to create an <xref:System.Xml.Linq.XName>."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Working with XML Namespaces<ept id=\"p1\">](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430)</ept>.","pos":[192,320],"source":" For more information, see [Working with XML Namespaces](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430)."}]},{"pos":[623,825],"content":"For details about the valid content that can be passed to this constructor, see <bpt id=\"p1\">[</bpt>Valid Content of XElement and XDocument Objects<ept id=\"p1\">](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)</ept>.","source":"For details about the valid content that can be passed to this constructor, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)."}],"pos":[39895,40729],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Xml.Linq.XName\"></xref> that contains the element name.","nodes":[{"pos":[0,77],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XName\"&gt;&lt;/xref&gt;</ph> that contains the element name.","source":"An <xref href=\"System.Xml.Linq.XName\"></xref> that contains the element name."}],"pos":[47860,47938],"yaml":true},{"content":"The initial content of the element.","nodes":[{"pos":[0,35],"content":"The initial content of the element.","nodes":[{"content":"The initial content of the element.","pos":[0,35]}]}],"pos":[48003,48039],"yaml":true},{"content":"Returns a collection of elements that contain this element, and the ancestors of this element.","nodes":[{"pos":[0,94],"content":"Returns a collection of elements that contain this element, and the ancestors of this element.","nodes":[{"content":"Returns a collection of elements that contain this element, and the ancestors of this element.","pos":[0,94]}]}],"pos":[49547,49642],"yaml":true},{"content":"The elements in the returned collection are in reverse document order.  \n  \n This method uses deferred execution.","nodes":[{"pos":[0,70],"content":"The elements in the returned collection are in reverse document order.","nodes":[{"content":"The elements in the returned collection are in reverse document order.","pos":[0,70]}]},{"pos":[77,113],"content":"This method uses deferred execution.","nodes":[{"content":"This method uses deferred execution.","pos":[0,36]}]}],"pos":[49653,49771],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> of <xref href=\"System.Xml.Linq.XElement\"></xref> of elements that contain this element, and the ancestors of this element.","nodes":[{"pos":[0,187],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> of <ph id=\"ph2\">&lt;xref href=\"System.Xml.Linq.XElement\"&gt;&lt;/xref&gt;</ph> of elements that contain this element, and the ancestors of this element.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> of <xref href=\"System.Xml.Linq.XElement\"></xref> of elements that contain this element, and the ancestors of this element."}],"pos":[51127,51315],"yaml":true},{"content":"Returns a filtered collection of elements that contain this element, and the ancestors of this element. Only elements that have a matching <xref href=\"System.Xml.Linq.XName\"></xref> are included in the collection.","nodes":[{"pos":[0,213],"content":"Returns a filtered collection of elements that contain this element, and the ancestors of this element. Only elements that have a matching <xref href=\"System.Xml.Linq.XName\"></xref> are included in the collection.","nodes":[{"content":"Returns a filtered collection of elements that contain this element, and the ancestors of this element.","pos":[0,103]},{"content":"Only elements that have a matching <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XName\"&gt;&lt;/xref&gt;</ph> are included in the collection.","pos":[104,213],"source":" Only elements that have a matching <xref href=\"System.Xml.Linq.XName\"></xref> are included in the collection."}]}],"pos":[52918,53132],"yaml":true},{"content":"The elements in the returned collection are in reverse document order.  \n  \n This method uses deferred execution.","nodes":[{"pos":[0,70],"content":"The elements in the returned collection are in reverse document order.","nodes":[{"content":"The elements in the returned collection are in reverse document order.","pos":[0,70]}]},{"pos":[77,113],"content":"This method uses deferred execution.","nodes":[{"content":"This method uses deferred execution.","pos":[0,36]}]}],"pos":[53143,53261],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Xml.Linq.XName\"></xref> to match.","nodes":[{"pos":[0,56],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XName\"&gt;&lt;/xref&gt;</ph> to match.","source":"The <xref href=\"System.Xml.Linq.XName\"></xref> to match."}],"pos":[54412,54469],"yaml":true},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> of <xref href=\"System.Xml.Linq.XElement\"></xref> that contain this element, and the ancestors of this element. Only elements that have a matching <xref href=\"System.Xml.Linq.XName\"></xref> are included in the collection.","nodes":[{"pos":[0,285],"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> of <xref href=\"System.Xml.Linq.XElement\"></xref> that contain this element, and the ancestors of this element. Only elements that have a matching <xref href=\"System.Xml.Linq.XName\"></xref> are included in the collection.","nodes":[{"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> of <ph id=\"ph2\">&lt;xref href=\"System.Xml.Linq.XElement\"&gt;&lt;/xref&gt;</ph> that contain this element, and the ancestors of this element.","pos":[0,175],"source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> of <xref href=\"System.Xml.Linq.XElement\"></xref> that contain this element, and the ancestors of this element."},{"content":"Only elements that have a matching <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XName\"&gt;&lt;/xref&gt;</ph> are included in the collection.","pos":[176,285],"source":" Only elements that have a matching <xref href=\"System.Xml.Linq.XName\"></xref> are included in the collection."}]}],"pos":[54577,54863],"yaml":true},{"content":"Returns the <xref href=\"System.Xml.Linq.XAttribute\"></xref> of this <xref href=\"System.Xml.Linq.XElement\"></xref> that has the specified <xref href=\"System.Xml.Linq.XName\"></xref>.","nodes":[{"pos":[0,180],"content":"Returns the <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XAttribute\"&gt;&lt;/xref&gt;</ph> of this <ph id=\"ph2\">&lt;xref href=\"System.Xml.Linq.XElement\"&gt;&lt;/xref&gt;</ph> that has the specified <ph id=\"ph3\">&lt;xref href=\"System.Xml.Linq.XName\"&gt;&lt;/xref&gt;</ph>.","source":"Returns the <xref href=\"System.Xml.Linq.XAttribute\"></xref> of this <xref href=\"System.Xml.Linq.XElement\"></xref> that has the specified <xref href=\"System.Xml.Linq.XName\"></xref>."}],"pos":[56424,56605],"yaml":true},{"content":"Some  return collections of elements or attributes. This method returns only a single attribute. Sometimes this is referred to as a *singleton* (in contrast to a *collection*).  \n  \n Visual Basic users can use the integrated attribute axis to retrieve the value of an attribute with a specified name.","nodes":[{"pos":[0,176],"content":"Some  return collections of elements or attributes. This method returns only a single attribute. Sometimes this is referred to as a *singleton* (in contrast to a *collection*).","nodes":[{"content":"Some  return collections of elements or attributes.","pos":[0,51]},{"content":"This method returns only a single attribute.","pos":[52,96]},{"content":"Sometimes this is referred to as a <bpt id=\"p1\">*</bpt>singleton<ept id=\"p1\">*</ept> (in contrast to a <bpt id=\"p2\">*</bpt>collection<ept id=\"p2\">*</ept>).","pos":[97,176],"source":" Sometimes this is referred to as a *singleton* (in contrast to a *collection*)."}]},{"pos":[183,300],"content":"Visual Basic users can use the integrated attribute axis to retrieve the value of an attribute with a specified name.","nodes":[{"content":"Visual Basic users can use the integrated attribute axis to retrieve the value of an attribute with a specified name.","pos":[0,117]}]}],"pos":[56616,56921],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Xml.Linq.XName\"></xref> of the <xref href=\"System.Xml.Linq.XAttribute\"></xref> to get.","nodes":[{"pos":[0,109],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XName\"&gt;&lt;/xref&gt;</ph> of the <ph id=\"ph2\">&lt;xref href=\"System.Xml.Linq.XAttribute\"&gt;&lt;/xref&gt;</ph> to get.","source":"The <xref href=\"System.Xml.Linq.XName\"></xref> of the <xref href=\"System.Xml.Linq.XAttribute\"></xref> to get."}],"pos":[58815,58925],"yaml":true},{"content":"An <xref href=\"System.Xml.Linq.XAttribute\"></xref> that has the specified <xref href=\"System.Xml.Linq.XName\"></xref>; `null` if there is no attribute with the specified name.","nodes":[{"pos":[0,174],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XAttribute\"&gt;&lt;/xref&gt;</ph> that has the specified <ph id=\"ph2\">&lt;xref href=\"System.Xml.Linq.XName\"&gt;&lt;/xref&gt;</ph>; <ph id=\"ph3\">`null`</ph> if there is no attribute with the specified name.","source":"An <xref href=\"System.Xml.Linq.XAttribute\"></xref> that has the specified <xref href=\"System.Xml.Linq.XName\"></xref>; `null` if there is no attribute with the specified name."}],"pos":[58995,59170],"yaml":true},{"content":"Returns a collection of attributes of this element.","nodes":[{"pos":[0,51],"content":"Returns a collection of attributes of this element.","nodes":[{"content":"Returns a collection of attributes of this element.","pos":[0,51]}]}],"pos":[60646,60698],"yaml":true},{"content":"The attributes in the returned collection are in the order that they were added to the element. If the XML tree was parsed from XML, the attributes are returned in document order.  \n  \n This method uses deferred execution.","nodes":[{"pos":[0,179],"content":"The attributes in the returned collection are in the order that they were added to the element. If the XML tree was parsed from XML, the attributes are returned in document order.","nodes":[{"content":"The attributes in the returned collection are in the order that they were added to the element. If the XML tree was parsed from XML, the attributes are returned in document order.","pos":[0,179],"nodes":[{"content":"The attributes in the returned collection are in the order that they were added to the element.","pos":[0,95]},{"content":"If the XML tree was parsed from XML, the attributes are returned in document order.","pos":[96,179]}]}]},{"pos":[186,222],"content":"This method uses deferred execution.","nodes":[{"content":"This method uses deferred execution.","pos":[0,36]}]}],"pos":[60709,60936],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> of <xref href=\"System.Xml.Linq.XAttribute\"></xref> of attributes of this element.","nodes":[{"pos":[0,146],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> of <ph id=\"ph2\">&lt;xref href=\"System.Xml.Linq.XAttribute\"&gt;&lt;/xref&gt;</ph> of attributes of this element.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> of <xref href=\"System.Xml.Linq.XAttribute\"></xref> of attributes of this element."}],"pos":[63484,63631],"yaml":true},{"content":"Returns a filtered collection of attributes of this element. Only elements that have a matching <xref href=\"System.Xml.Linq.XName\"></xref> are included in the collection.","nodes":[{"pos":[0,170],"content":"Returns a filtered collection of attributes of this element. Only elements that have a matching <xref href=\"System.Xml.Linq.XName\"></xref> are included in the collection.","nodes":[{"content":"Returns a filtered collection of attributes of this element.","pos":[0,60]},{"content":"Only elements that have a matching <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XName\"&gt;&lt;/xref&gt;</ph> are included in the collection.","pos":[61,170],"source":" Only elements that have a matching <xref href=\"System.Xml.Linq.XName\"></xref> are included in the collection."}]}],"pos":[65192,65363],"yaml":true},{"content":"Attribute names must be unique within an element. Therefore, this  can return either a collection that contains only one attribute, or it can return an empty collection.  \n  \n This method uses deferred execution.","nodes":[{"pos":[0,169],"content":"Attribute names must be unique within an element. Therefore, this  can return either a collection that contains only one attribute, or it can return an empty collection.","nodes":[{"content":"Attribute names must be unique within an element. Therefore, this  can return either a collection that contains only one attribute, or it can return an empty collection.","pos":[0,169],"nodes":[{"content":"Attribute names must be unique within an element.","pos":[0,49]},{"content":"Therefore, this  can return either a collection that contains only one attribute, or it can return an empty collection.","pos":[50,169]}]}]},{"pos":[176,212],"content":"This method uses deferred execution.","nodes":[{"content":"This method uses deferred execution.","pos":[0,36]}]}],"pos":[65374,65591],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Xml.Linq.XName\"></xref> to match.","nodes":[{"pos":[0,56],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XName\"&gt;&lt;/xref&gt;</ph> to match.","source":"The <xref href=\"System.Xml.Linq.XName\"></xref> to match."}],"pos":[67809,67866],"yaml":true},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> of <xref href=\"System.Xml.Linq.XAttribute\"></xref> that contains the attributes of this element. Only elements that have a matching <xref href=\"System.Xml.Linq.XName\"></xref> are included in the collection.","nodes":[{"pos":[0,271],"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> of <xref href=\"System.Xml.Linq.XAttribute\"></xref> that contains the attributes of this element. Only elements that have a matching <xref href=\"System.Xml.Linq.XName\"></xref> are included in the collection.","nodes":[{"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> of <ph id=\"ph2\">&lt;xref href=\"System.Xml.Linq.XAttribute\"&gt;&lt;/xref&gt;</ph> that contains the attributes of this element.","pos":[0,161],"source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> of <xref href=\"System.Xml.Linq.XAttribute\"></xref> that contains the attributes of this element."},{"content":"Only elements that have a matching <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XName\"&gt;&lt;/xref&gt;</ph> are included in the collection.","pos":[162,271],"source":" Only elements that have a matching <xref href=\"System.Xml.Linq.XName\"></xref> are included in the collection."}]}],"pos":[67976,68248],"yaml":true},{"content":"Returns a collection of nodes that contain this element, and all descendant nodes of this element, in document order.","nodes":[{"pos":[0,117],"content":"Returns a collection of nodes that contain this element, and all descendant nodes of this element, in document order.","nodes":[{"content":"Returns a collection of nodes that contain this element, and all descendant nodes of this element, in document order.","pos":[0,117]}]}],"pos":[69797,69915],"yaml":true},{"content":"This method uses deferred execution.","nodes":[{"pos":[0,36],"content":"This method uses deferred execution.","nodes":[{"content":"This method uses deferred execution.","pos":[0,36]}]}],"pos":[69926,69963],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> of <xref href=\"System.Xml.Linq.XNode\"></xref> that contain this element, and all descendant nodes of this element, in document order.","nodes":[{"pos":[0,198],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> of <ph id=\"ph2\">&lt;xref href=\"System.Xml.Linq.XNode\"&gt;&lt;/xref&gt;</ph> that contain this element, and all descendant nodes of this element, in document order.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> of <xref href=\"System.Xml.Linq.XNode\"></xref> that contain this element, and all descendant nodes of this element, in document order."}],"pos":[71627,71826],"yaml":true},{"content":"Returns a filtered collection of elements that contain this element, and all descendant elements of this element, in document order. Only elements that have a matching <xref href=\"System.Xml.Linq.XName\"></xref> are included in the collection.","nodes":[{"pos":[0,242],"content":"Returns a filtered collection of elements that contain this element, and all descendant elements of this element, in document order. Only elements that have a matching <xref href=\"System.Xml.Linq.XName\"></xref> are included in the collection.","nodes":[{"content":"Returns a filtered collection of elements that contain this element, and all descendant elements of this element, in document order.","pos":[0,132]},{"content":"Only elements that have a matching <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XName\"&gt;&lt;/xref&gt;</ph> are included in the collection.","pos":[133,242],"source":" Only elements that have a matching <xref href=\"System.Xml.Linq.XName\"></xref> are included in the collection."}]}],"pos":[73447,73690],"yaml":true},{"content":"This method uses deferred execution.","nodes":[{"pos":[0,36],"content":"This method uses deferred execution.","nodes":[{"content":"This method uses deferred execution.","pos":[0,36]}]}],"pos":[73701,73738],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Xml.Linq.XName\"></xref> to match.","nodes":[{"pos":[0,56],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XName\"&gt;&lt;/xref&gt;</ph> to match.","source":"The <xref href=\"System.Xml.Linq.XName\"></xref> to match."}],"pos":[74940,74997],"yaml":true},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> of <xref href=\"System.Xml.Linq.XElement\"></xref> that contain this element, and all descendant elements of this element, in document order. Only elements that have a matching <xref href=\"System.Xml.Linq.XName\"></xref> are included in the collection.","nodes":[{"pos":[0,314],"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> of <xref href=\"System.Xml.Linq.XElement\"></xref> that contain this element, and all descendant elements of this element, in document order. Only elements that have a matching <xref href=\"System.Xml.Linq.XName\"></xref> are included in the collection.","nodes":[{"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> of <ph id=\"ph2\">&lt;xref href=\"System.Xml.Linq.XElement\"&gt;&lt;/xref&gt;</ph> that contain this element, and all descendant elements of this element, in document order.","pos":[0,204],"source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> of <xref href=\"System.Xml.Linq.XElement\"></xref> that contain this element, and all descendant elements of this element, in document order."},{"content":"Only elements that have a matching <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XName\"&gt;&lt;/xref&gt;</ph> are included in the collection.","pos":[205,314],"source":" Only elements that have a matching <xref href=\"System.Xml.Linq.XName\"></xref> are included in the collection."}]}],"pos":[75105,75420],"yaml":true},{"content":"Returns a collection of elements that contain this element, and all descendant elements of this element, in document order.","nodes":[{"pos":[0,123],"content":"Returns a collection of elements that contain this element, and all descendant elements of this element, in document order.","nodes":[{"content":"Returns a collection of elements that contain this element, and all descendant elements of this element, in document order.","pos":[0,123]}]}],"pos":[76953,77077],"yaml":true},{"content":"This method uses deferred execution.","nodes":[{"pos":[0,36],"content":"This method uses deferred execution.","nodes":[{"content":"This method uses deferred execution.","pos":[0,36]}]}],"pos":[77088,77125],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> of <xref href=\"System.Xml.Linq.XElement\"></xref> of elements that contain this element, and all descendant elements of this element, in document order.","nodes":[{"pos":[0,216],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> of <ph id=\"ph2\">&lt;xref href=\"System.Xml.Linq.XElement\"&gt;&lt;/xref&gt;</ph> of elements that contain this element, and all descendant elements of this element, in document order.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> of <xref href=\"System.Xml.Linq.XElement\"></xref> of elements that contain this element, and all descendant elements of this element, in document order."}],"pos":[78438,78655],"yaml":true},{"content":"Gets an empty collection of elements.","nodes":[{"pos":[0,37],"content":"Gets an empty collection of elements.","nodes":[{"content":"Gets an empty collection of elements.","pos":[0,37]}]}],"pos":[80154,80192],"yaml":true},{"content":"This property is typically used by class implementers when writing a method that returns a collection of elements. If the method must return no elements, it can use this property to get an empty collection of <xref:System.Xml.Linq.XElement> objects.","nodes":[{"pos":[0,249],"content":"This property is typically used by class implementers when writing a method that returns a collection of elements. If the method must return no elements, it can use this property to get an empty collection of <xref:System.Xml.Linq.XElement> objects.","nodes":[{"content":"This property is typically used by class implementers when writing a method that returns a collection of elements. If the method must return no elements, it can use this property to get an empty collection of <xref:System.Xml.Linq.XElement> objects.","pos":[0,249],"nodes":[{"content":"This property is typically used by class implementers when writing a method that returns a collection of elements.","pos":[0,114]},{"content":"If the method must return no elements, it can use this property to get an empty collection of <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XElement&gt;</ph> objects.","pos":[115,249],"source":" If the method must return no elements, it can use this property to get an empty collection of <xref:System.Xml.Linq.XElement> objects."}]}]}],"pos":[80203,80453],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> of <xref href=\"System.Xml.Linq.XElement\"></xref> that contains an empty collection.","nodes":[{"pos":[0,148],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> of <ph id=\"ph2\">&lt;xref href=\"System.Xml.Linq.XElement\"&gt;&lt;/xref&gt;</ph> that contains an empty collection.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> of <xref href=\"System.Xml.Linq.XElement\"></xref> that contains an empty collection."}],"pos":[80686,80835],"yaml":true},{"content":"Gets the first attribute of this element.","nodes":[{"pos":[0,41],"content":"Gets the first attribute of this element.","nodes":[{"content":"Gets the first attribute of this element.","pos":[0,41]}]}],"pos":[82335,82377],"yaml":true},{"content":"Attributes are stored in the element in the order that they were added to the element.","nodes":[{"pos":[0,86],"content":"Attributes are stored in the element in the order that they were added to the element.","nodes":[{"content":"Attributes are stored in the element in the order that they were added to the element.","pos":[0,86]}]}],"pos":[82388,82475],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Xml.Linq.XAttribute\"></xref> that contains the first attribute of this element.","nodes":[{"pos":[0,101],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XAttribute\"&gt;&lt;/xref&gt;</ph> that contains the first attribute of this element.","source":"An <xref href=\"System.Xml.Linq.XAttribute\"></xref> that contains the first attribute of this element."}],"pos":[83180,83282],"yaml":true},{"content":"Gets the default <xref href=\"System.Xml.Linq.XNamespace\"></xref> of this <xref href=\"System.Xml.Linq.XElement\"></xref>.","nodes":[{"pos":[0,119],"content":"Gets the default <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XNamespace\"&gt;&lt;/xref&gt;</ph> of this <ph id=\"ph2\">&lt;xref href=\"System.Xml.Linq.XElement\"&gt;&lt;/xref&gt;</ph>.","source":"Gets the default <xref href=\"System.Xml.Linq.XNamespace\"></xref> of this <xref href=\"System.Xml.Linq.XElement\"></xref>."}],"pos":[84817,84937],"yaml":true},{"content":"Namespace declarations may be persisted as attributes in the XML tree. These special attributes declare namespaces, including default namespaces. This method finds the namespace declaration that declares the default namespace, if there is one, and returns the <xref:System.Xml.Linq.XNamespace> for the default namespace.  \n  \n If there is no attribute that declares the default namespace, then this method returns <xref:System.Xml.Linq.XNamespace.None%2A?displayProperty=fullName>.  \n  \n When creating XML trees using C#, even if an XML tree would be serialized with a default namespace, if the namespace is not persisted in the XML tree as an attribute, this method will not report the namespace as the default namespace.  \n  \n When creating XML trees using Visual Basic and XML literals, if you create the XML in a default namespace using the Imports statement, then a namespace attribute will be created in the tree by the Visual Basic compiler, and this method will report that namespace.","nodes":[{"pos":[0,320],"content":"Namespace declarations may be persisted as attributes in the XML tree. These special attributes declare namespaces, including default namespaces. This method finds the namespace declaration that declares the default namespace, if there is one, and returns the <xref:System.Xml.Linq.XNamespace> for the default namespace.","nodes":[{"content":"Namespace declarations may be persisted as attributes in the XML tree. These special attributes declare namespaces, including default namespaces. This method finds the namespace declaration that declares the default namespace, if there is one, and returns the <xref:System.Xml.Linq.XNamespace> for the default namespace.","pos":[0,320],"nodes":[{"content":"Namespace declarations may be persisted as attributes in the XML tree.","pos":[0,70]},{"content":"These special attributes declare namespaces, including default namespaces.","pos":[71,145]},{"content":"This method finds the namespace declaration that declares the default namespace, if there is one, and returns the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph> for the default namespace.","pos":[146,320],"source":" This method finds the namespace declaration that declares the default namespace, if there is one, and returns the <xref:System.Xml.Linq.XNamespace> for the default namespace."}]}]},{"pos":[327,481],"content":"If there is no attribute that declares the default namespace, then this method returns <xref:System.Xml.Linq.XNamespace.None%2A?displayProperty=fullName>.","nodes":[{"content":"If there is no attribute that declares the default namespace, then this method returns <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XNamespace.None%2A?displayProperty=fullName&gt;</ph>.","pos":[0,154],"source":"If there is no attribute that declares the default namespace, then this method returns <xref:System.Xml.Linq.XNamespace.None%2A?displayProperty=fullName>."}]},{"pos":[488,722],"content":"When creating XML trees using C#, even if an XML tree would be serialized with a default namespace, if the namespace is not persisted in the XML tree as an attribute, this method will not report the namespace as the default namespace.","nodes":[{"content":"When creating XML trees using C#, even if an XML tree would be serialized with a default namespace, if the namespace is not persisted in the XML tree as an attribute, this method will not report the namespace as the default namespace.","pos":[0,234]}]},{"pos":[729,992],"content":"When creating XML trees using Visual Basic and XML literals, if you create the XML in a default namespace using the Imports statement, then a namespace attribute will be created in the tree by the Visual Basic compiler, and this method will report that namespace.","nodes":[{"content":"When creating XML trees using Visual Basic and XML literals, if you create the XML in a default namespace using the Imports statement, then a namespace attribute will be created in the tree by the Visual Basic compiler, and this method will report that namespace.","pos":[0,263]}]}],"pos":[84948,85949],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Xml.Linq.XNamespace\"></xref> that contains the default namespace of this <xref href=\"System.Xml.Linq.XElement\"></xref>.","nodes":[{"pos":[0,141],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XNamespace\"&gt;&lt;/xref&gt;</ph> that contains the default namespace of this <ph id=\"ph2\">&lt;xref href=\"System.Xml.Linq.XElement\"&gt;&lt;/xref&gt;</ph>.","source":"An <xref href=\"System.Xml.Linq.XNamespace\"></xref> that contains the default namespace of this <xref href=\"System.Xml.Linq.XElement\"></xref>."}],"pos":[86903,87045],"yaml":true},{"content":"Gets the namespace associated with a particular prefix for this <xref href=\"System.Xml.Linq.XElement\"></xref>.","nodes":[{"pos":[0,110],"content":"Gets the namespace associated with a particular prefix for this <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XElement\"&gt;&lt;/xref&gt;</ph>.","source":"Gets the namespace associated with a particular prefix for this <xref href=\"System.Xml.Linq.XElement\"></xref>."}],"pos":[88654,88765],"yaml":true},{"content":"This method looks through the XML tree for namespace attributes that are in scope for this element. Namespace prefixes are specified in namespace attributes that are in the XML tree.","nodes":[{"pos":[0,182],"content":"This method looks through the XML tree for namespace attributes that are in scope for this element. Namespace prefixes are specified in namespace attributes that are in the XML tree.","nodes":[{"content":"This method looks through the XML tree for namespace attributes that are in scope for this element. Namespace prefixes are specified in namespace attributes that are in the XML tree.","pos":[0,182],"nodes":[{"content":"This method looks through the XML tree for namespace attributes that are in scope for this element.","pos":[0,99]},{"content":"Namespace prefixes are specified in namespace attributes that are in the XML tree.","pos":[100,182]}]}]}],"pos":[88776,88959],"yaml":true,"extradata":"MT"},{"content":"A string that contains the namespace prefix to look up.","nodes":[{"pos":[0,55],"content":"A string that contains the namespace prefix to look up.","nodes":[{"content":"A string that contains the namespace prefix to look up.","pos":[0,55]}]}],"pos":[90237,90293],"yaml":true},{"content":"An <xref href=\"System.Xml.Linq.XNamespace\"></xref> for the namespace associated with the prefix for this <xref href=\"System.Xml.Linq.XElement\"></xref>.","nodes":[{"pos":[0,151],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XNamespace\"&gt;&lt;/xref&gt;</ph> for the namespace associated with the prefix for this <ph id=\"ph2\">&lt;xref href=\"System.Xml.Linq.XElement\"&gt;&lt;/xref&gt;</ph>.","source":"An <xref href=\"System.Xml.Linq.XNamespace\"></xref> for the namespace associated with the prefix for this <xref href=\"System.Xml.Linq.XElement\"></xref>."}],"pos":[90363,90515],"yaml":true},{"content":"Gets the prefix associated with a namespace for this <xref href=\"System.Xml.Linq.XElement\"></xref>.","nodes":[{"pos":[0,99],"content":"Gets the prefix associated with a namespace for this <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XElement\"&gt;&lt;/xref&gt;</ph>.","source":"Gets the prefix associated with a namespace for this <xref href=\"System.Xml.Linq.XElement\"></xref>."}],"pos":[92176,92276],"yaml":true},{"content":"This method looks through the XML tree for namespace attributes that are in scope for this element. Namespace prefixes are specified in namespace attributes that are in the XML tree.  \n  \n If the namespace is the default namespace, and there is no prefix for the namespace, then this method returns null.","nodes":[{"pos":[0,182],"content":"This method looks through the XML tree for namespace attributes that are in scope for this element. Namespace prefixes are specified in namespace attributes that are in the XML tree.","nodes":[{"content":"This method looks through the XML tree for namespace attributes that are in scope for this element. Namespace prefixes are specified in namespace attributes that are in the XML tree.","pos":[0,182],"nodes":[{"content":"This method looks through the XML tree for namespace attributes that are in scope for this element.","pos":[0,99]},{"content":"Namespace prefixes are specified in namespace attributes that are in the XML tree.","pos":[100,182]}]}]},{"pos":[189,304],"content":"If the namespace is the default namespace, and there is no prefix for the namespace, then this method returns null.","nodes":[{"content":"If the namespace is the default namespace, and there is no prefix for the namespace, then this method returns null.","pos":[0,115]}]}],"pos":[92287,92596],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Xml.Linq.XNamespace\"></xref> to look up.","nodes":[{"pos":[0,62],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XNamespace\"&gt;&lt;/xref&gt;</ph> to look up.","source":"An <xref href=\"System.Xml.Linq.XNamespace\"></xref> to look up."}],"pos":[93794,93857],"yaml":true},{"content":"A <xref href=\"System.String\"></xref> that contains the namespace prefix.","nodes":[{"pos":[0,72],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> that contains the namespace prefix.","source":"A <xref href=\"System.String\"></xref> that contains the namespace prefix."}],"pos":[93914,93987],"yaml":true},{"content":"Gets a value indicating whether this element has at least one attribute.","nodes":[{"pos":[0,72],"content":"Gets a value indicating whether this element has at least one attribute.","nodes":[{"content":"Gets a value indicating whether this element has at least one attribute.","pos":[0,72]}]}],"pos":[95488,95561],"yaml":true},{"content":"`true` if this element has at least one attribute; otherwise `false`.","nodes":[{"pos":[0,69],"content":"<ph id=\"ph1\">`true`</ph> if this element has at least one attribute; otherwise <ph id=\"ph2\">`false`</ph>.","source":"`true` if this element has at least one attribute; otherwise `false`."}],"pos":[96332,96404],"yaml":true},{"content":"Gets a value indicating whether this element has at least one child element.","nodes":[{"pos":[0,76],"content":"Gets a value indicating whether this element has at least one child element.","nodes":[{"content":"Gets a value indicating whether this element has at least one child element.","pos":[0,76]}]}],"pos":[97886,97963],"yaml":true},{"content":"`true` if this element has at least one child element; otherwise `false`.","nodes":[{"pos":[0,73],"content":"<ph id=\"ph1\">`true`</ph> if this element has at least one child element; otherwise <ph id=\"ph2\">`false`</ph>.","source":"`true` if this element has at least one child element; otherwise `false`."}],"pos":[98824,98900],"yaml":true},{"content":"Gets a value indicating whether this element contains no content.","nodes":[{"pos":[0,65],"content":"Gets a value indicating whether this element contains no content.","nodes":[{"content":"Gets a value indicating whether this element contains no content.","pos":[0,65]}]}],"pos":[100356,100422],"yaml":true},{"content":"Note that an element that contains a start and end tag with no content between the tags is not considered to be an empty element. It has content with no length. Only an element that contains only a start tag, and is expressed as a terminated empty element, is considered to be empty.","nodes":[{"pos":[0,283],"content":"Note that an element that contains a start and end tag with no content between the tags is not considered to be an empty element. It has content with no length. Only an element that contains only a start tag, and is expressed as a terminated empty element, is considered to be empty.","nodes":[{"content":"Note that an element that contains a start and end tag with no content between the tags is not considered to be an empty element. It has content with no length. Only an element that contains only a start tag, and is expressed as a terminated empty element, is considered to be empty.","pos":[0,283],"nodes":[{"content":"Note that an element that contains a start and end tag with no content between the tags is not considered to be an empty element.","pos":[0,129]},{"content":"It has content with no length.","pos":[130,160]},{"content":"Only an element that contains only a start tag, and is expressed as a terminated empty element, is considered to be empty.","pos":[161,283]}]}]}],"pos":[100433,100717],"yaml":true,"extradata":"MT"},{"content":"`true` if this element contains no content; otherwise `false`.","nodes":[{"pos":[0,62],"content":"<ph id=\"ph1\">`true`</ph> if this element contains no content; otherwise <ph id=\"ph2\">`false`</ph>.","source":"`true` if this element contains no content; otherwise `false`."}],"pos":[102184,102249],"yaml":true},{"content":"Gets the last attribute of this element.","nodes":[{"pos":[0,40],"content":"Gets the last attribute of this element.","nodes":[{"content":"Gets the last attribute of this element.","pos":[0,40]}]}],"pos":[103737,103778],"yaml":true},{"content":"Attributes are stored in the element in the order that they were added to the element.","nodes":[{"pos":[0,86],"content":"Attributes are stored in the element in the order that they were added to the element.","nodes":[{"content":"Attributes are stored in the element in the order that they were added to the element.","pos":[0,86]}]}],"pos":[103789,103876],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Xml.Linq.XAttribute\"></xref> that contains the last attribute of this element.","nodes":[{"pos":[0,100],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XAttribute\"&gt;&lt;/xref&gt;</ph> that contains the last attribute of this element.","source":"An <xref href=\"System.Xml.Linq.XAttribute\"></xref> that contains the last attribute of this element."}],"pos":[104646,104747],"yaml":true},{"content":"Loads an <xref href=\"System.Xml.Linq.XElement\"></xref> from a <xref href=\"System.IO.TextReader\"></xref>, optionally preserving white space and retaining line information.","nodes":[{"pos":[0,170],"content":"Loads an <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XElement\"&gt;&lt;/xref&gt;</ph> from a <ph id=\"ph2\">&lt;xref href=\"System.IO.TextReader\"&gt;&lt;/xref&gt;</ph>, optionally preserving white space and retaining line information.","source":"Loads an <xref href=\"System.Xml.Linq.XElement\"></xref> from a <xref href=\"System.IO.TextReader\"></xref>, optionally preserving white space and retaining line information."}],"pos":[106410,106581],"yaml":true},{"content":"If the source XML is indented, setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` causes the reader to read all white space in the source XML. Nodes of type <xref:System.Xml.Linq.XText> are created for both significant and insignificant white space.  \n  \n If the source XML is indented, not setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` causes the reader to ignore all of the insignificant white space in the source XML. The XML tree is created without any text nodes for insignificant white space.  \n  \n If the source XML is not indented, setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` has no effect. Significant white space is still preserved, and there are no spans of insignificant white space that could cause the creation of more white space text nodes.  \n  \n For more information, see [Preserving White Space while Loading or Parsing XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).  \n  \n Use <xref:System.Xml.Linq.XElement.Parse%2A> to create an <xref:System.Xml.Linq.XElement> from a string that contains XML.  \n  \n Setting <xref:System.Xml.Linq.LoadOptions.SetBaseUri> will have no effect when loading from a <xref:System.IO.TextReader>.  \n  \n There is a performance penalty if you set the <xref:System.Xml.Linq.LoadOptions.SetLineInfo> flag.  \n  \n The line information is accurate immediately after loading the XML document. If you modify the XML tree after loading the document, the line information may become meaningless.  \n  \n LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>. Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.","nodes":[{"pos":[0,282],"content":"If the source XML is indented, setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` causes the reader to read all white space in the source XML. Nodes of type <xref:System.Xml.Linq.XText> are created for both significant and insignificant white space.","nodes":[{"content":"If the source XML is indented, setting the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.LoadOptions.PreserveWhitespace&gt;</ph> flag in <ph id=\"ph2\">`options`</ph> causes the reader to read all white space in the source XML.","pos":[0,175],"source":"If the source XML is indented, setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` causes the reader to read all white space in the source XML."},{"content":"Nodes of type <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XText&gt;</ph> are created for both significant and insignificant white space.","pos":[176,282],"source":" Nodes of type <xref:System.Xml.Linq.XText> are created for both significant and insignificant white space."}]},{"pos":[289,569],"content":"If the source XML is indented, not setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` causes the reader to ignore all of the insignificant white space in the source XML. The XML tree is created without any text nodes for insignificant white space.","nodes":[{"content":"If the source XML is indented, not setting the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.LoadOptions.PreserveWhitespace&gt;</ph> flag in <ph id=\"ph2\">`options`</ph> causes the reader to ignore all of the insignificant white space in the source XML.","pos":[0,202],"source":"If the source XML is indented, not setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` causes the reader to ignore all of the insignificant white space in the source XML."},{"content":"The XML tree is created without any text nodes for insignificant white space.","pos":[203,280]}]},{"pos":[576,867],"content":"If the source XML is not indented, setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` has no effect. Significant white space is still preserved, and there are no spans of insignificant white space that could cause the creation of more white space text nodes.","nodes":[{"content":"If the source XML is not indented, setting the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.LoadOptions.PreserveWhitespace&gt;</ph> flag in <ph id=\"ph2\">`options`</ph> has no effect.","pos":[0,133],"source":"If the source XML is not indented, setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` has no effect."},{"content":"Significant white space is still preserved, and there are no spans of insignificant white space that could cause the creation of more white space text nodes.","pos":[134,291]}]},{"pos":[874,1145],"content":"For more information, see <bpt id=\"p1\">[</bpt>Preserving White Space while Loading or Parsing XML<ept id=\"p1\">](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d)</ept> and <bpt id=\"p2\">[</bpt>Preserving White Space While Serializing<ept id=\"p2\">](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)</ept>.","source":"For more information, see [Preserving White Space while Loading or Parsing XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)."},{"pos":[1152,1274],"content":"Use <xref:System.Xml.Linq.XElement.Parse%2A> to create an <xref:System.Xml.Linq.XElement> from a string that contains XML.","nodes":[{"content":"Use <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XElement.Parse%2A&gt;</ph> to create an <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XElement&gt;</ph> from a string that contains XML.","pos":[0,122],"source":"Use <xref:System.Xml.Linq.XElement.Parse%2A> to create an <xref:System.Xml.Linq.XElement> from a string that contains XML."}]},{"pos":[1281,1403],"content":"Setting <xref:System.Xml.Linq.LoadOptions.SetBaseUri> will have no effect when loading from a <xref:System.IO.TextReader>.","nodes":[{"content":"Setting <ph id=\"ph1\">&lt;xref:System.Xml.Linq.LoadOptions.SetBaseUri&gt;</ph> will have no effect when loading from a <ph id=\"ph2\">&lt;xref:System.IO.TextReader&gt;</ph>.","pos":[0,122],"source":"Setting <xref:System.Xml.Linq.LoadOptions.SetBaseUri> will have no effect when loading from a <xref:System.IO.TextReader>."}]},{"pos":[1410,1508],"content":"There is a performance penalty if you set the <xref:System.Xml.Linq.LoadOptions.SetLineInfo> flag.","nodes":[{"content":"There is a performance penalty if you set the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.LoadOptions.SetLineInfo&gt;</ph> flag.","pos":[0,98],"source":"There is a performance penalty if you set the <xref:System.Xml.Linq.LoadOptions.SetLineInfo> flag."}]},{"pos":[1515,1691],"content":"The line information is accurate immediately after loading the XML document. If you modify the XML tree after loading the document, the line information may become meaningless.","nodes":[{"content":"The line information is accurate immediately after loading the XML document. If you modify the XML tree after loading the document, the line information may become meaningless.","pos":[0,176],"nodes":[{"content":"The line information is accurate immediately after loading the XML document.","pos":[0,76]},{"content":"If you modify the XML tree after loading the document, the line information may become meaningless.","pos":[77,176]}]}]},{"pos":[1698,1999],"content":"LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>. Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.","nodes":[{"content":"LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>. Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.","pos":[0,301],"nodes":[{"content":"LINQ to XML's loading functionality is built upon <ph id=\"ph1\">&lt;xref:System.Xml.XmlReader&gt;</ph>.","pos":[0,78],"source":"LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>."},{"content":"Therefore, you might catch any exceptions that are thrown by the <ph id=\"ph1\">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName&gt;</ph> overload methods and the <ph id=\"ph2\">&lt;xref:System.Xml.XmlReader&gt;</ph> methods that read and parse the document.","pos":[79,301],"source":" Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document."}]}]}],"pos":[106592,108610],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.IO.TextReader\"></xref> that will be read for the <xref href=\"System.Xml.Linq.XElement\"></xref> content.","nodes":[{"pos":[0,124],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.IO.TextReader\"&gt;&lt;/xref&gt;</ph> that will be read for the <ph id=\"ph2\">&lt;xref href=\"System.Xml.Linq.XElement\"&gt;&lt;/xref&gt;</ph> content.","source":"A <xref href=\"System.IO.TextReader\"></xref> that will be read for the <xref href=\"System.Xml.Linq.XElement\"></xref> content."}],"pos":[113457,113582],"yaml":true},{"content":"A <xref href=\"System.Xml.Linq.LoadOptions\"></xref> that specifies white space behavior, and whether to load base URI and line information.","nodes":[{"pos":[0,138],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.LoadOptions\"&gt;&lt;/xref&gt;</ph> that specifies white space behavior, and whether to load base URI and line information.","source":"A <xref href=\"System.Xml.Linq.LoadOptions\"></xref> that specifies white space behavior, and whether to load base URI and line information."}],"pos":[113659,113798],"yaml":true},{"content":"An <xref href=\"System.Xml.Linq.XElement\"></xref> that contains the XML that was read from the specified <xref href=\"System.IO.TextReader\"></xref>.","nodes":[{"pos":[0,146],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XElement\"&gt;&lt;/xref&gt;</ph> that contains the XML that was read from the specified <ph id=\"ph2\">&lt;xref href=\"System.IO.TextReader\"&gt;&lt;/xref&gt;</ph>.","source":"An <xref href=\"System.Xml.Linq.XElement\"></xref> that contains the XML that was read from the specified <xref href=\"System.IO.TextReader\"></xref>."}],"pos":[113866,114013],"yaml":true},{"content":"Loads an <xref href=\"System.Xml.Linq.XElement\"></xref> from an <xref href=\"System.Xml.XmlReader\"></xref>, optionally preserving white space, setting the base URI, and retaining line information.","nodes":[{"pos":[0,194],"content":"Loads an <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XElement\"&gt;&lt;/xref&gt;</ph> from an <ph id=\"ph2\">&lt;xref href=\"System.Xml.XmlReader\"&gt;&lt;/xref&gt;</ph>, optionally preserving white space, setting the base URI, and retaining line information.","source":"Loads an <xref href=\"System.Xml.Linq.XElement\"></xref> from an <xref href=\"System.Xml.XmlReader\"></xref>, optionally preserving white space, setting the base URI, and retaining line information."}],"pos":[115664,115859],"yaml":true},{"content":"By creating an <xref:System.Xml.XmlNodeReader> from a DOM document, and then using the <xref:System.Xml.XmlNodeReader> to create an <xref:System.Xml.Linq.XElement>, this method can be used to create a copy of a DOM document in a LINQ to XML tree.  \n  \n Use <xref:System.Xml.Linq.XElement.Parse%2A> to create an <xref:System.Xml.Linq.XElement> from a string that contains XML.  \n  \n Setting <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> is not valid when loading from a <xref:System.Xml.XmlReader>. The <xref:System.Xml.XmlReader> will be configured to either read whitespace or not. The LINQ to XML tree will be populated with the whitespace nodes that the reader surfaces. This will be the behavior regardless of whether <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> is set or not.  \n  \n The <xref:System.Xml.XmlReader> may have a valid base URI or not. If you set <xref:System.Xml.Linq.LoadOptions.SetBaseUri>, the base URI will be set in the XML tree from the base URI that is reported by the <xref:System.Xml.XmlReader>.  \n  \n The <xref:System.Xml.XmlReader> may have a valid line information or not. If you set <xref:System.Xml.Linq.LoadOptions.SetLineInfo>, the line information will be set in the XML tree from the line information that is reported by the <xref:System.Xml.XmlReader>.  \n  \n There is a performance penalty if you set the <xref:System.Xml.Linq.LoadOptions.SetLineInfo> flag.  \n  \n The line information is accurate immediately after loading the XML document. If you modify the XML tree after loading the document, the line information may become meaningless.  \n  \n LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>. Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.","nodes":[{"pos":[0,246],"content":"By creating an <xref:System.Xml.XmlNodeReader> from a DOM document, and then using the <xref:System.Xml.XmlNodeReader> to create an <xref:System.Xml.Linq.XElement>, this method can be used to create a copy of a DOM document in a LINQ to XML tree.","nodes":[{"content":"By creating an <ph id=\"ph1\">&lt;xref:System.Xml.XmlNodeReader&gt;</ph> from a DOM document, and then using the <ph id=\"ph2\">&lt;xref:System.Xml.XmlNodeReader&gt;</ph> to create an <ph id=\"ph3\">&lt;xref:System.Xml.Linq.XElement&gt;</ph>, this method can be used to create a copy of a DOM document in a LINQ to XML tree.","pos":[0,246],"source":"By creating an <xref:System.Xml.XmlNodeReader> from a DOM document, and then using the <xref:System.Xml.XmlNodeReader> to create an <xref:System.Xml.Linq.XElement>, this method can be used to create a copy of a DOM document in a LINQ to XML tree."}]},{"pos":[253,375],"content":"Use <xref:System.Xml.Linq.XElement.Parse%2A> to create an <xref:System.Xml.Linq.XElement> from a string that contains XML.","nodes":[{"content":"Use <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XElement.Parse%2A&gt;</ph> to create an <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XElement&gt;</ph> from a string that contains XML.","pos":[0,122],"source":"Use <xref:System.Xml.Linq.XElement.Parse%2A> to create an <xref:System.Xml.Linq.XElement> from a string that contains XML."}]},{"pos":[382,798],"content":"Setting <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> is not valid when loading from a <xref:System.Xml.XmlReader>. The <xref:System.Xml.XmlReader> will be configured to either read whitespace or not. The LINQ to XML tree will be populated with the whitespace nodes that the reader surfaces. This will be the behavior regardless of whether <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> is set or not.","nodes":[{"content":"Setting <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> is not valid when loading from a <xref:System.Xml.XmlReader>. The <xref:System.Xml.XmlReader> will be configured to either read whitespace or not. The LINQ to XML tree will be populated with the whitespace nodes that the reader surfaces. This will be the behavior regardless of whether <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> is set or not.","pos":[0,416],"nodes":[{"content":"Setting <ph id=\"ph1\">&lt;xref:System.Xml.Linq.LoadOptions.PreserveWhitespace&gt;</ph> is not valid when loading from a <ph id=\"ph2\">&lt;xref:System.Xml.XmlReader&gt;</ph>.","pos":[0,123],"source":"Setting <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> is not valid when loading from a <xref:System.Xml.XmlReader>."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Xml.XmlReader&gt;</ph> will be configured to either read whitespace or not.","pos":[124,208],"source":" The <xref:System.Xml.XmlReader> will be configured to either read whitespace or not."},{"content":"The LINQ to XML tree will be populated with the whitespace nodes that the reader surfaces.","pos":[209,299]},{"content":"This will be the behavior regardless of whether <ph id=\"ph1\">&lt;xref:System.Xml.Linq.LoadOptions.PreserveWhitespace&gt;</ph> is set or not.","pos":[300,416],"source":" This will be the behavior regardless of whether <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> is set or not."}]}]},{"pos":[805,1040],"content":"The <xref:System.Xml.XmlReader> may have a valid base URI or not. If you set <xref:System.Xml.Linq.LoadOptions.SetBaseUri>, the base URI will be set in the XML tree from the base URI that is reported by the <xref:System.Xml.XmlReader>.","nodes":[{"content":"The <xref:System.Xml.XmlReader> may have a valid base URI or not. If you set <xref:System.Xml.Linq.LoadOptions.SetBaseUri>, the base URI will be set in the XML tree from the base URI that is reported by the <xref:System.Xml.XmlReader>.","pos":[0,235],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Xml.XmlReader&gt;</ph> may have a valid base URI or not.","pos":[0,65],"source":"The <xref:System.Xml.XmlReader> may have a valid base URI or not."},{"content":"If you set <ph id=\"ph1\">&lt;xref:System.Xml.Linq.LoadOptions.SetBaseUri&gt;</ph>, the base URI will be set in the XML tree from the base URI that is reported by the <ph id=\"ph2\">&lt;xref:System.Xml.XmlReader&gt;</ph>.","pos":[66,235],"source":" If you set <xref:System.Xml.Linq.LoadOptions.SetBaseUri>, the base URI will be set in the XML tree from the base URI that is reported by the <xref:System.Xml.XmlReader>."}]}]},{"pos":[1047,1307],"content":"The <xref:System.Xml.XmlReader> may have a valid line information or not. If you set <xref:System.Xml.Linq.LoadOptions.SetLineInfo>, the line information will be set in the XML tree from the line information that is reported by the <xref:System.Xml.XmlReader>.","nodes":[{"content":"The <xref:System.Xml.XmlReader> may have a valid line information or not. If you set <xref:System.Xml.Linq.LoadOptions.SetLineInfo>, the line information will be set in the XML tree from the line information that is reported by the <xref:System.Xml.XmlReader>.","pos":[0,260],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Xml.XmlReader&gt;</ph> may have a valid line information or not.","pos":[0,73],"source":"The <xref:System.Xml.XmlReader> may have a valid line information or not."},{"content":"If you set <ph id=\"ph1\">&lt;xref:System.Xml.Linq.LoadOptions.SetLineInfo&gt;</ph>, the line information will be set in the XML tree from the line information that is reported by the <ph id=\"ph2\">&lt;xref:System.Xml.XmlReader&gt;</ph>.","pos":[74,260],"source":" If you set <xref:System.Xml.Linq.LoadOptions.SetLineInfo>, the line information will be set in the XML tree from the line information that is reported by the <xref:System.Xml.XmlReader>."}]}]},{"pos":[1314,1412],"content":"There is a performance penalty if you set the <xref:System.Xml.Linq.LoadOptions.SetLineInfo> flag.","nodes":[{"content":"There is a performance penalty if you set the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.LoadOptions.SetLineInfo&gt;</ph> flag.","pos":[0,98],"source":"There is a performance penalty if you set the <xref:System.Xml.Linq.LoadOptions.SetLineInfo> flag."}]},{"pos":[1419,1595],"content":"The line information is accurate immediately after loading the XML document. If you modify the XML tree after loading the document, the line information may become meaningless.","nodes":[{"content":"The line information is accurate immediately after loading the XML document. If you modify the XML tree after loading the document, the line information may become meaningless.","pos":[0,176],"nodes":[{"content":"The line information is accurate immediately after loading the XML document.","pos":[0,76]},{"content":"If you modify the XML tree after loading the document, the line information may become meaningless.","pos":[77,176]}]}]},{"pos":[1602,1903],"content":"LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>. Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.","nodes":[{"content":"LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>. Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.","pos":[0,301],"nodes":[{"content":"LINQ to XML's loading functionality is built upon <ph id=\"ph1\">&lt;xref:System.Xml.XmlReader&gt;</ph>.","pos":[0,78],"source":"LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>."},{"content":"Therefore, you might catch any exceptions that are thrown by the <ph id=\"ph1\">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName&gt;</ph> overload methods and the <ph id=\"ph2\">&lt;xref:System.Xml.XmlReader&gt;</ph> methods that read and parse the document.","pos":[79,301],"source":" Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document."}]}]}],"pos":[115870,117790],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Xml.XmlReader\"></xref> that will be read for the content of the <xref href=\"System.Xml.Linq.XElement\"></xref>.","nodes":[{"pos":[0,131],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Xml.XmlReader\"&gt;&lt;/xref&gt;</ph> that will be read for the content of the <ph id=\"ph2\">&lt;xref href=\"System.Xml.Linq.XElement\"&gt;&lt;/xref&gt;</ph>.","source":"A <xref href=\"System.Xml.XmlReader\"></xref> that will be read for the content of the <xref href=\"System.Xml.Linq.XElement\"></xref>."}],"pos":[120817,120949],"yaml":true},{"content":"A <xref href=\"System.Xml.Linq.LoadOptions\"></xref> that specifies white space behavior, and whether to load base URI and line information.","nodes":[{"pos":[0,138],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.LoadOptions\"&gt;&lt;/xref&gt;</ph> that specifies white space behavior, and whether to load base URI and line information.","source":"A <xref href=\"System.Xml.Linq.LoadOptions\"></xref> that specifies white space behavior, and whether to load base URI and line information."}],"pos":[121026,121165],"yaml":true},{"content":"An <xref href=\"System.Xml.Linq.XElement\"></xref> that contains the XML that was read from the specified <xref href=\"System.Xml.XmlReader\"></xref>.","nodes":[{"pos":[0,146],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XElement\"&gt;&lt;/xref&gt;</ph> that contains the XML that was read from the specified <ph id=\"ph2\">&lt;xref href=\"System.Xml.XmlReader\"&gt;&lt;/xref&gt;</ph>.","source":"An <xref href=\"System.Xml.Linq.XElement\"></xref> that contains the XML that was read from the specified <xref href=\"System.Xml.XmlReader\"></xref>."}],"pos":[121233,121380],"yaml":true},{"content":"Loads an <xref href=\"System.Xml.Linq.XElement\"></xref> from a file, optionally preserving white space, setting the base URI, and retaining line information.","nodes":[{"pos":[0,156],"content":"Loads an <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XElement\"&gt;&lt;/xref&gt;</ph> from a file, optionally preserving white space, setting the base URI, and retaining line information.","source":"Loads an <xref href=\"System.Xml.Linq.XElement\"></xref> from a file, optionally preserving white space, setting the base URI, and retaining line information."}],"pos":[123001,123158],"yaml":true},{"content":"If the source XML is indented, setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` causes the reader to read all white space in the source XML. Nodes of type <xref:System.Xml.Linq.XText> are created for both significant and insignificant white space.  \n  \n If the source XML is indented, not setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` causes the reader to ignore all of the insignificant white space in the source XML. The XML tree is created without any text nodes for insignificant white space.  \n  \n If the source XML is not indented, setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` has no effect. Significant white space is still preserved, and there are no spans of insignificant white space that could cause the creation of more white space text nodes.  \n  \n For more information, see [Preserving White Space while Loading or Parsing XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).  \n  \n Use <xref:System.Xml.Linq.XElement.Parse%2A> to create an <xref:System.Xml.Linq.XElement> from a string that contains XML.  \n  \n There is a performance penalty if you set the <xref:System.Xml.Linq.LoadOptions.SetBaseUri> and the <xref:System.Xml.Linq.LoadOptions.SetLineInfo> flags.  \n  \n The base URI and the line information are accurate immediately after loading the XML document. If you modify the XML tree after loading the document, the base URI and line information may become meaningless.  \n  \n LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>. Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.","nodes":[{"pos":[0,282],"content":"If the source XML is indented, setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` causes the reader to read all white space in the source XML. Nodes of type <xref:System.Xml.Linq.XText> are created for both significant and insignificant white space.","nodes":[{"content":"If the source XML is indented, setting the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.LoadOptions.PreserveWhitespace&gt;</ph> flag in <ph id=\"ph2\">`options`</ph> causes the reader to read all white space in the source XML.","pos":[0,175],"source":"If the source XML is indented, setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` causes the reader to read all white space in the source XML."},{"content":"Nodes of type <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XText&gt;</ph> are created for both significant and insignificant white space.","pos":[176,282],"source":" Nodes of type <xref:System.Xml.Linq.XText> are created for both significant and insignificant white space."}]},{"pos":[289,569],"content":"If the source XML is indented, not setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` causes the reader to ignore all of the insignificant white space in the source XML. The XML tree is created without any text nodes for insignificant white space.","nodes":[{"content":"If the source XML is indented, not setting the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.LoadOptions.PreserveWhitespace&gt;</ph> flag in <ph id=\"ph2\">`options`</ph> causes the reader to ignore all of the insignificant white space in the source XML.","pos":[0,202],"source":"If the source XML is indented, not setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` causes the reader to ignore all of the insignificant white space in the source XML."},{"content":"The XML tree is created without any text nodes for insignificant white space.","pos":[203,280]}]},{"pos":[576,867],"content":"If the source XML is not indented, setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` has no effect. Significant white space is still preserved, and there are no spans of insignificant white space that could cause the creation of more white space text nodes.","nodes":[{"content":"If the source XML is not indented, setting the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.LoadOptions.PreserveWhitespace&gt;</ph> flag in <ph id=\"ph2\">`options`</ph> has no effect.","pos":[0,133],"source":"If the source XML is not indented, setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` has no effect."},{"content":"Significant white space is still preserved, and there are no spans of insignificant white space that could cause the creation of more white space text nodes.","pos":[134,291]}]},{"pos":[874,1145],"content":"For more information, see <bpt id=\"p1\">[</bpt>Preserving White Space while Loading or Parsing XML<ept id=\"p1\">](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d)</ept> and <bpt id=\"p2\">[</bpt>Preserving White Space While Serializing<ept id=\"p2\">](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)</ept>.","source":"For more information, see [Preserving White Space while Loading or Parsing XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)."},{"pos":[1152,1274],"content":"Use <xref:System.Xml.Linq.XElement.Parse%2A> to create an <xref:System.Xml.Linq.XElement> from a string that contains XML.","nodes":[{"content":"Use <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XElement.Parse%2A&gt;</ph> to create an <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XElement&gt;</ph> from a string that contains XML.","pos":[0,122],"source":"Use <xref:System.Xml.Linq.XElement.Parse%2A> to create an <xref:System.Xml.Linq.XElement> from a string that contains XML."}]},{"pos":[1281,1434],"content":"There is a performance penalty if you set the <xref:System.Xml.Linq.LoadOptions.SetBaseUri> and the <xref:System.Xml.Linq.LoadOptions.SetLineInfo> flags.","nodes":[{"content":"There is a performance penalty if you set the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.LoadOptions.SetBaseUri&gt;</ph> and the <ph id=\"ph2\">&lt;xref:System.Xml.Linq.LoadOptions.SetLineInfo&gt;</ph> flags.","pos":[0,153],"source":"There is a performance penalty if you set the <xref:System.Xml.Linq.LoadOptions.SetBaseUri> and the <xref:System.Xml.Linq.LoadOptions.SetLineInfo> flags."}]},{"pos":[1441,1648],"content":"The base URI and the line information are accurate immediately after loading the XML document. If you modify the XML tree after loading the document, the base URI and line information may become meaningless.","nodes":[{"content":"The base URI and the line information are accurate immediately after loading the XML document. If you modify the XML tree after loading the document, the base URI and line information may become meaningless.","pos":[0,207],"nodes":[{"content":"The base URI and the line information are accurate immediately after loading the XML document.","pos":[0,94]},{"content":"If you modify the XML tree after loading the document, the base URI and line information may become meaningless.","pos":[95,207]}]}]},{"pos":[1655,1956],"content":"LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>. Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.","nodes":[{"content":"LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>. Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.","pos":[0,301],"nodes":[{"content":"LINQ to XML's loading functionality is built upon <ph id=\"ph1\">&lt;xref:System.Xml.XmlReader&gt;</ph>.","pos":[0,78],"source":"LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>."},{"content":"Therefore, you might catch any exceptions that are thrown by the <ph id=\"ph1\">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName&gt;</ph> overload methods and the <ph id=\"ph2\">&lt;xref:System.Xml.XmlReader&gt;</ph> methods that read and parse the document.","pos":[79,301],"source":" Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document."}]}]}],"pos":[123169,125142],"yaml":true,"extradata":"MT"},{"content":"A URI string referencing the file to load into an <xref href=\"System.Xml.Linq.XElement\"></xref>.","nodes":[{"pos":[0,96],"content":"A URI string referencing the file to load into an <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XElement\"&gt;&lt;/xref&gt;</ph>.","source":"A URI string referencing the file to load into an <xref href=\"System.Xml.Linq.XElement\"></xref>."}],"pos":[130959,131056],"yaml":true},{"content":"A <xref href=\"System.Xml.Linq.LoadOptions\"></xref> that specifies white space behavior, and whether to load base URI and line information.","nodes":[{"pos":[0,138],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.LoadOptions\"&gt;&lt;/xref&gt;</ph> that specifies white space behavior, and whether to load base URI and line information.","source":"A <xref href=\"System.Xml.Linq.LoadOptions\"></xref> that specifies white space behavior, and whether to load base URI and line information."}],"pos":[131133,131272],"yaml":true},{"content":"An <xref href=\"System.Xml.Linq.XElement\"></xref> that contains the contents of the specified file.","nodes":[{"pos":[0,98],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XElement\"&gt;&lt;/xref&gt;</ph> that contains the contents of the specified file.","source":"An <xref href=\"System.Xml.Linq.XElement\"></xref> that contains the contents of the specified file."}],"pos":[131340,131439],"yaml":true},{"content":"Creates a new <xref href=\"System.Xml.Linq.XElement\"></xref> instance by using the specified stream, optionally preserving white space, setting the base URI, and retaining line information.","nodes":[{"pos":[0,188],"content":"Creates a new <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XElement\"&gt;&lt;/xref&gt;</ph> instance by using the specified stream, optionally preserving white space, setting the base URI, and retaining line information.","source":"Creates a new <xref href=\"System.Xml.Linq.XElement\"></xref> instance by using the specified stream, optionally preserving white space, setting the base URI, and retaining line information."}],"pos":[133069,133258],"yaml":true},{"content":"LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>. Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.  \n  \n If you have to modify <xref:System.Xml.XmlReaderSettings>, following these steps:  \n  \n1.  Create an <xref:System.Xml.XmlReader> by calling one of the <xref:System.Xml.XmlReader.Create%2A> overloads that take <xref:System.Xml.XmlReaderSettings> as a parameter.  \n  \n2.  Pass the <xref:System.Xml.XmlReader> to one of the <xref:System.Xml.Linq.XElement>'s <xref:System.Xml.Linq.XElement.Load%2A> overloads that takes <xref:System.Xml.XmlReader> as a parameter.","nodes":[{"pos":[0,301],"content":"LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>. Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.","nodes":[{"content":"LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>. Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.","pos":[0,301],"nodes":[{"content":"LINQ to XML's loading functionality is built upon <ph id=\"ph1\">&lt;xref:System.Xml.XmlReader&gt;</ph>.","pos":[0,78],"source":"LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>."},{"content":"Therefore, you might catch any exceptions that are thrown by the <ph id=\"ph1\">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName&gt;</ph> overload methods and the <ph id=\"ph2\">&lt;xref:System.Xml.XmlReader&gt;</ph> methods that read and parse the document.","pos":[79,301],"source":" Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document."}]}]},{"pos":[308,389],"content":"If you have to modify <xref:System.Xml.XmlReaderSettings>, following these steps:","nodes":[{"content":"If you have to modify <ph id=\"ph1\">&lt;xref:System.Xml.XmlReaderSettings&gt;</ph>, following these steps:","pos":[0,81],"source":"If you have to modify <xref:System.Xml.XmlReaderSettings>, following these steps:"}]},{"pos":[399,568],"content":"Create an <xref:System.Xml.XmlReader> by calling one of the <xref:System.Xml.XmlReader.Create%2A> overloads that take <xref:System.Xml.XmlReaderSettings> as a parameter.","nodes":[{"content":"Create an <ph id=\"ph1\">&lt;xref:System.Xml.XmlReader&gt;</ph> by calling one of the <ph id=\"ph2\">&lt;xref:System.Xml.XmlReader.Create%2A&gt;</ph> overloads that take <ph id=\"ph3\">&lt;xref:System.Xml.XmlReaderSettings&gt;</ph> as a parameter.","pos":[0,169],"source":"Create an <xref:System.Xml.XmlReader> by calling one of the <xref:System.Xml.XmlReader.Create%2A> overloads that take <xref:System.Xml.XmlReaderSettings> as a parameter."}]},{"pos":[578,767],"content":"Pass the <xref:System.Xml.XmlReader> to one of the <xref:System.Xml.Linq.XElement>'s <xref:System.Xml.Linq.XElement.Load%2A> overloads that takes <xref:System.Xml.XmlReader> as a parameter.","nodes":[{"content":"Pass the <ph id=\"ph1\">&lt;xref:System.Xml.XmlReader&gt;</ph> to one of the <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XElement&gt;</ph>'s <ph id=\"ph3\">&lt;xref:System.Xml.Linq.XElement.Load%2A&gt;</ph> overloads that takes <ph id=\"ph4\">&lt;xref:System.Xml.XmlReader&gt;</ph> as a parameter.","pos":[0,189],"source":"Pass the <xref:System.Xml.XmlReader> to one of the <xref:System.Xml.Linq.XElement>'s <xref:System.Xml.Linq.XElement.Load%2A> overloads that takes <xref:System.Xml.XmlReader> as a parameter."}]}],"pos":[133269,134045],"yaml":true,"extradata":"MT"},{"content":"The stream containing the XML data.","nodes":[{"pos":[0,35],"content":"The stream containing the XML data.","nodes":[{"content":"The stream containing the XML data.","pos":[0,35]}]}],"pos":[134257,134293],"yaml":true},{"content":"A <xref href=\"System.Xml.Linq.LoadOptions\"></xref> object that specifies whether to load base URI and line information.","nodes":[{"pos":[0,119],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.LoadOptions\"&gt;&lt;/xref&gt;</ph> object that specifies whether to load base URI and line information.","source":"A <xref href=\"System.Xml.Linq.LoadOptions\"></xref> object that specifies whether to load base URI and line information."}],"pos":[134370,134490],"yaml":true},{"content":"An <xref href=\"System.Xml.Linq.XElement\"></xref> object used to read the data that the stream contains.","nodes":[{"pos":[0,103],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XElement\"&gt;&lt;/xref&gt;</ph> object used to read the data that the stream contains.","source":"An <xref href=\"System.Xml.Linq.XElement\"></xref> object used to read the data that the stream contains."}],"pos":[134558,134662],"yaml":true},{"content":"Loads an <xref href=\"System.Xml.Linq.XElement\"></xref> from a <xref href=\"System.IO.TextReader\"></xref>.","nodes":[{"pos":[0,104],"content":"Loads an <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XElement\"&gt;&lt;/xref&gt;</ph> from a <ph id=\"ph2\">&lt;xref href=\"System.IO.TextReader\"&gt;&lt;/xref&gt;</ph>.","source":"Loads an <xref href=\"System.Xml.Linq.XElement\"></xref> from a <xref href=\"System.IO.TextReader\"></xref>."}],"pos":[136193,136298],"yaml":true},{"content":"This method reads the raw XML into the XML tree. It discards all insignificant white space in the file.  \n  \n LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>. Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.","nodes":[{"pos":[0,103],"content":"This method reads the raw XML into the XML tree. It discards all insignificant white space in the file.","nodes":[{"content":"This method reads the raw XML into the XML tree. It discards all insignificant white space in the file.","pos":[0,103],"nodes":[{"content":"This method reads the raw XML into the XML tree.","pos":[0,48]},{"content":"It discards all insignificant white space in the file.","pos":[49,103]}]}]},{"pos":[110,411],"content":"LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>. Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.","nodes":[{"content":"LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>. Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.","pos":[0,301],"nodes":[{"content":"LINQ to XML's loading functionality is built upon <ph id=\"ph1\">&lt;xref:System.Xml.XmlReader&gt;</ph>.","pos":[0,78],"source":"LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>."},{"content":"Therefore, you might catch any exceptions that are thrown by the <ph id=\"ph1\">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName&gt;</ph> overload methods and the <ph id=\"ph2\">&lt;xref:System.Xml.XmlReader&gt;</ph> methods that read and parse the document.","pos":[79,301],"source":" Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document."}]}]}],"pos":[136309,136725],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.IO.TextReader\"></xref> that will be read for the <xref href=\"System.Xml.Linq.XElement\"></xref> content.","nodes":[{"pos":[0,124],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.IO.TextReader\"&gt;&lt;/xref&gt;</ph> that will be read for the <ph id=\"ph2\">&lt;xref href=\"System.Xml.Linq.XElement\"&gt;&lt;/xref&gt;</ph> content.","source":"A <xref href=\"System.IO.TextReader\"></xref> that will be read for the <xref href=\"System.Xml.Linq.XElement\"></xref> content."}],"pos":[137539,137664],"yaml":true},{"content":"An <xref href=\"System.Xml.Linq.XElement\"></xref> that contains the XML that was read from the specified <xref href=\"System.IO.TextReader\"></xref>.","nodes":[{"pos":[0,146],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XElement\"&gt;&lt;/xref&gt;</ph> that contains the XML that was read from the specified <ph id=\"ph2\">&lt;xref href=\"System.IO.TextReader\"&gt;&lt;/xref&gt;</ph>.","source":"An <xref href=\"System.Xml.Linq.XElement\"></xref> that contains the XML that was read from the specified <xref href=\"System.IO.TextReader\"></xref>."}],"pos":[137732,137879],"yaml":true},{"content":"Loads an <xref href=\"System.Xml.Linq.XElement\"></xref> from a file.","nodes":[{"pos":[0,67],"content":"Loads an <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XElement\"&gt;&lt;/xref&gt;</ph> from a file.","source":"Loads an <xref href=\"System.Xml.Linq.XElement\"></xref> from a file."}],"pos":[139377,139445],"yaml":true},{"content":"This method reads the raw XML into the XML tree. It discards all insignificant white space in the file.  \n  \n LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>. Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.","nodes":[{"pos":[0,103],"content":"This method reads the raw XML into the XML tree. It discards all insignificant white space in the file.","nodes":[{"content":"This method reads the raw XML into the XML tree. It discards all insignificant white space in the file.","pos":[0,103],"nodes":[{"content":"This method reads the raw XML into the XML tree.","pos":[0,48]},{"content":"It discards all insignificant white space in the file.","pos":[49,103]}]}]},{"pos":[110,411],"content":"LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>. Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.","nodes":[{"content":"LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>. Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.","pos":[0,301],"nodes":[{"content":"LINQ to XML's loading functionality is built upon <ph id=\"ph1\">&lt;xref:System.Xml.XmlReader&gt;</ph>.","pos":[0,78],"source":"LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>."},{"content":"Therefore, you might catch any exceptions that are thrown by the <ph id=\"ph1\">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName&gt;</ph> overload methods and the <ph id=\"ph2\">&lt;xref:System.Xml.XmlReader&gt;</ph> methods that read and parse the document.","pos":[79,301],"source":" Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document."}]}]}],"pos":[139456,139872],"yaml":true,"extradata":"MT"},{"content":"A URI string referencing the file to load into a new <xref href=\"System.Xml.Linq.XElement\"></xref>.","nodes":[{"pos":[0,99],"content":"A URI string referencing the file to load into a new <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XElement\"&gt;&lt;/xref&gt;</ph>.","source":"A URI string referencing the file to load into a new <xref href=\"System.Xml.Linq.XElement\"></xref>."}],"pos":[140821,140921],"yaml":true},{"content":"An <xref href=\"System.Xml.Linq.XElement\"></xref> that contains the contents of the specified file.","nodes":[{"pos":[0,98],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XElement\"&gt;&lt;/xref&gt;</ph> that contains the contents of the specified file.","source":"An <xref href=\"System.Xml.Linq.XElement\"></xref> that contains the contents of the specified file."}],"pos":[140989,141088],"yaml":true},{"content":"Creates a new <xref href=\"System.Xml.Linq.XElement\"></xref> instance by using the specified stream.","nodes":[{"pos":[0,99],"content":"Creates a new <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XElement\"&gt;&lt;/xref&gt;</ph> instance by using the specified stream.","source":"Creates a new <xref href=\"System.Xml.Linq.XElement\"></xref> instance by using the specified stream."}],"pos":[142595,142695],"yaml":true},{"content":"If you want to control load options, use the <xref:System.Xml.Linq.XElement.Load%2A> overload that takes <xref:System.Xml.Linq.LoadOptions> as a parameter.  \n  \n LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>. Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.  \n  \n If you have to modify <xref:System.Xml.XmlReaderSettings>, following these steps:  \n  \n1.  Create an <xref:System.Xml.XmlReader> by calling one of the <xref:System.Xml.XmlReader.Create%2A> overloads that take <xref:System.Xml.XmlReaderSettings> as a parameter.  \n  \n2.  Pass the <xref:System.Xml.XmlReader> to one of the <xref:System.Xml.Linq.XElement>'s <xref:System.Xml.Linq.XElement.Load%2A> overloads that takes <xref:System.Xml.XmlReader> as a parameter.","nodes":[{"pos":[0,155],"content":"If you want to control load options, use the <xref:System.Xml.Linq.XElement.Load%2A> overload that takes <xref:System.Xml.Linq.LoadOptions> as a parameter.","nodes":[{"content":"If you want to control load options, use the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XElement.Load%2A&gt;</ph> overload that takes <ph id=\"ph2\">&lt;xref:System.Xml.Linq.LoadOptions&gt;</ph> as a parameter.","pos":[0,155],"source":"If you want to control load options, use the <xref:System.Xml.Linq.XElement.Load%2A> overload that takes <xref:System.Xml.Linq.LoadOptions> as a parameter."}]},{"pos":[162,463],"content":"LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>. Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.","nodes":[{"content":"LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>. Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.","pos":[0,301],"nodes":[{"content":"LINQ to XML's loading functionality is built upon <ph id=\"ph1\">&lt;xref:System.Xml.XmlReader&gt;</ph>.","pos":[0,78],"source":"LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>."},{"content":"Therefore, you might catch any exceptions that are thrown by the <ph id=\"ph1\">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName&gt;</ph> overload methods and the <ph id=\"ph2\">&lt;xref:System.Xml.XmlReader&gt;</ph> methods that read and parse the document.","pos":[79,301],"source":" Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document."}]}]},{"pos":[470,551],"content":"If you have to modify <xref:System.Xml.XmlReaderSettings>, following these steps:","nodes":[{"content":"If you have to modify <ph id=\"ph1\">&lt;xref:System.Xml.XmlReaderSettings&gt;</ph>, following these steps:","pos":[0,81],"source":"If you have to modify <xref:System.Xml.XmlReaderSettings>, following these steps:"}]},{"pos":[561,730],"content":"Create an <xref:System.Xml.XmlReader> by calling one of the <xref:System.Xml.XmlReader.Create%2A> overloads that take <xref:System.Xml.XmlReaderSettings> as a parameter.","nodes":[{"content":"Create an <ph id=\"ph1\">&lt;xref:System.Xml.XmlReader&gt;</ph> by calling one of the <ph id=\"ph2\">&lt;xref:System.Xml.XmlReader.Create%2A&gt;</ph> overloads that take <ph id=\"ph3\">&lt;xref:System.Xml.XmlReaderSettings&gt;</ph> as a parameter.","pos":[0,169],"source":"Create an <xref:System.Xml.XmlReader> by calling one of the <xref:System.Xml.XmlReader.Create%2A> overloads that take <xref:System.Xml.XmlReaderSettings> as a parameter."}]},{"pos":[740,929],"content":"Pass the <xref:System.Xml.XmlReader> to one of the <xref:System.Xml.Linq.XElement>'s <xref:System.Xml.Linq.XElement.Load%2A> overloads that takes <xref:System.Xml.XmlReader> as a parameter.","nodes":[{"content":"Pass the <ph id=\"ph1\">&lt;xref:System.Xml.XmlReader&gt;</ph> to one of the <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XElement&gt;</ph>'s <ph id=\"ph3\">&lt;xref:System.Xml.Linq.XElement.Load%2A&gt;</ph> overloads that takes <ph id=\"ph4\">&lt;xref:System.Xml.XmlReader&gt;</ph> as a parameter.","pos":[0,189],"source":"Pass the <xref:System.Xml.XmlReader> to one of the <xref:System.Xml.Linq.XElement>'s <xref:System.Xml.Linq.XElement.Load%2A> overloads that takes <xref:System.Xml.XmlReader> as a parameter."}]}],"pos":[142706,143646],"yaml":true,"extradata":"MT"},{"content":"The stream that contains the XML data.","nodes":[{"pos":[0,38],"content":"The stream that contains the XML data.","nodes":[{"content":"The stream that contains the XML data.","pos":[0,38]}]}],"pos":[143821,143860],"yaml":true},{"content":"An <xref href=\"System.Xml.Linq.XElement\"></xref> object used to read the data that is contained in the stream.","nodes":[{"pos":[0,110],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XElement\"&gt;&lt;/xref&gt;</ph> object used to read the data that is contained in the stream.","source":"An <xref href=\"System.Xml.Linq.XElement\"></xref> object used to read the data that is contained in the stream."}],"pos":[143928,144039],"yaml":true},{"content":"Loads an <xref href=\"System.Xml.Linq.XElement\"></xref> from an <xref href=\"System.Xml.XmlReader\"></xref>.","nodes":[{"pos":[0,105],"content":"Loads an <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XElement\"&gt;&lt;/xref&gt;</ph> from an <ph id=\"ph2\">&lt;xref href=\"System.Xml.XmlReader\"&gt;&lt;/xref&gt;</ph>.","source":"Loads an <xref href=\"System.Xml.Linq.XElement\"></xref> from an <xref href=\"System.Xml.XmlReader\"></xref>."}],"pos":[145567,145673],"yaml":true},{"content":"By creating an <xref:System.Xml.XmlNodeReader> from a DOM document, and then using the <xref:System.Xml.XmlNodeReader> to create an <xref:System.Xml.Linq.XElement>, this method can be used to create a copy of a DOM document in a LINQ to XML tree.  \n  \n LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>. Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.","nodes":[{"pos":[0,246],"content":"By creating an <xref:System.Xml.XmlNodeReader> from a DOM document, and then using the <xref:System.Xml.XmlNodeReader> to create an <xref:System.Xml.Linq.XElement>, this method can be used to create a copy of a DOM document in a LINQ to XML tree.","nodes":[{"content":"By creating an <ph id=\"ph1\">&lt;xref:System.Xml.XmlNodeReader&gt;</ph> from a DOM document, and then using the <ph id=\"ph2\">&lt;xref:System.Xml.XmlNodeReader&gt;</ph> to create an <ph id=\"ph3\">&lt;xref:System.Xml.Linq.XElement&gt;</ph>, this method can be used to create a copy of a DOM document in a LINQ to XML tree.","pos":[0,246],"source":"By creating an <xref:System.Xml.XmlNodeReader> from a DOM document, and then using the <xref:System.Xml.XmlNodeReader> to create an <xref:System.Xml.Linq.XElement>, this method can be used to create a copy of a DOM document in a LINQ to XML tree."}]},{"pos":[253,554],"content":"LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>. Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.","nodes":[{"content":"LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>. Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.","pos":[0,301],"nodes":[{"content":"LINQ to XML's loading functionality is built upon <ph id=\"ph1\">&lt;xref:System.Xml.XmlReader&gt;</ph>.","pos":[0,78],"source":"LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>."},{"content":"Therefore, you might catch any exceptions that are thrown by the <ph id=\"ph1\">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName&gt;</ph> overload methods and the <ph id=\"ph2\">&lt;xref:System.Xml.XmlReader&gt;</ph> methods that read and parse the document.","pos":[79,301],"source":" Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document."}]}]}],"pos":[145684,146243],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Xml.XmlReader\"></xref> that will be read for the content of the <xref href=\"System.Xml.Linq.XElement\"></xref>.","nodes":[{"pos":[0,131],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Xml.XmlReader\"&gt;&lt;/xref&gt;</ph> that will be read for the content of the <ph id=\"ph2\">&lt;xref href=\"System.Xml.Linq.XElement\"&gt;&lt;/xref&gt;</ph>.","source":"A <xref href=\"System.Xml.XmlReader\"></xref> that will be read for the content of the <xref href=\"System.Xml.Linq.XElement\"></xref>."}],"pos":[148137,148269],"yaml":true},{"content":"An <xref href=\"System.Xml.Linq.XElement\"></xref> that contains the XML that was read from the specified <xref href=\"System.Xml.XmlReader\"></xref>.","nodes":[{"pos":[0,146],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XElement\"&gt;&lt;/xref&gt;</ph> that contains the XML that was read from the specified <ph id=\"ph2\">&lt;xref href=\"System.Xml.XmlReader\"&gt;&lt;/xref&gt;</ph>.","source":"An <xref href=\"System.Xml.Linq.XElement\"></xref> that contains the XML that was read from the specified <xref href=\"System.Xml.XmlReader\"></xref>."}],"pos":[148337,148484],"yaml":true},{"content":"Gets or sets the name of this element.","nodes":[{"pos":[0,38],"content":"Gets or sets the name of this element.","nodes":[{"content":"Gets or sets the name of this element.","pos":[0,38]}]}],"pos":[154448,154487],"yaml":true},{"content":"Setting this property will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.","nodes":[{"pos":[0,131],"content":"Setting this property will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.","nodes":[{"content":"Setting this property will raise the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XObject.Changed&gt;</ph> and the <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XObject.Changing&gt;</ph> events.","pos":[0,131],"source":"Setting this property will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events."}]}],"pos":[154498,154630],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Xml.Linq.XName\"></xref> that contains the name of this element.","nodes":[{"pos":[0,85],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XName\"&gt;&lt;/xref&gt;</ph> that contains the name of this element.","source":"An <xref href=\"System.Xml.Linq.XName\"></xref> that contains the name of this element."}],"pos":[156106,156192],"yaml":true},{"content":"Gets the node type for this node.","nodes":[{"pos":[0,33],"content":"Gets the node type for this node.","nodes":[{"content":"Gets the node type for this node.","pos":[0,33]}]}],"pos":[157647,157681],"yaml":true},{"content":"Because all classes that derive from <xref:System.Xml.Linq.XObject> contain a <xref:System.Xml.Linq.XObject.NodeType%2A> property, you can write code that operates on collections of concrete subclass of <xref:System.Xml.Linq.XObject>. Your code can then test for the node type of each node in the collection.","nodes":[{"pos":[0,308],"content":"Because all classes that derive from <xref:System.Xml.Linq.XObject> contain a <xref:System.Xml.Linq.XObject.NodeType%2A> property, you can write code that operates on collections of concrete subclass of <xref:System.Xml.Linq.XObject>. Your code can then test for the node type of each node in the collection.","nodes":[{"content":"Because all classes that derive from <xref:System.Xml.Linq.XObject> contain a <xref:System.Xml.Linq.XObject.NodeType%2A> property, you can write code that operates on collections of concrete subclass of <xref:System.Xml.Linq.XObject>. Your code can then test for the node type of each node in the collection.","pos":[0,308],"nodes":[{"content":"Because all classes that derive from <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XObject&gt;</ph> contain a <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XObject.NodeType%2A&gt;</ph> property, you can write code that operates on collections of concrete subclass of <ph id=\"ph3\">&lt;xref:System.Xml.Linq.XObject&gt;</ph>.","pos":[0,234],"source":"Because all classes that derive from <xref:System.Xml.Linq.XObject> contain a <xref:System.Xml.Linq.XObject.NodeType%2A> property, you can write code that operates on collections of concrete subclass of <xref:System.Xml.Linq.XObject>."},{"content":"Your code can then test for the node type of each node in the collection.","pos":[235,308]}]}]}],"pos":[157692,158001],"yaml":true,"extradata":"MT"},{"content":"The node type. For <xref href=\"System.Xml.Linq.XElement\"></xref> objects, this value is <xref href=\"System.Xml.XmlNodeType.Element\"></xref>.","nodes":[{"pos":[0,140],"content":"The node type. For <xref href=\"System.Xml.Linq.XElement\"></xref> objects, this value is <xref href=\"System.Xml.XmlNodeType.Element\"></xref>.","nodes":[{"content":"The node type.","pos":[0,14]},{"content":"For <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XElement\"&gt;&lt;/xref&gt;</ph> objects, this value is <ph id=\"ph2\">&lt;xref href=\"System.Xml.XmlNodeType.Element\"&gt;&lt;/xref&gt;</ph>.","pos":[15,140],"source":" For <xref href=\"System.Xml.Linq.XElement\"></xref> objects, this value is <xref href=\"System.Xml.XmlNodeType.Element\"></xref>."}]}],"pos":[158646,158787],"yaml":true},{"content":"Load an <xref href=\"System.Xml.Linq.XElement\"></xref> from a string that contains XML.","nodes":[{"pos":[0,86],"content":"Load an <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XElement\"&gt;&lt;/xref&gt;</ph> from a string that contains XML.","source":"Load an <xref href=\"System.Xml.Linq.XElement\"></xref> from a string that contains XML."}],"pos":[209331,209418],"yaml":true},{"content":"This method does not preserve white space. If you want to preserve white space in the XML tree, use the overload of the <xref:System.Xml.Linq.XElement.Parse%2A> method that takes <xref:System.Xml.Linq.LoadOptions> as a parameter. For more information, see [Preserving White Space while Loading or Parsing XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).  \n  \n LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>. Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.","nodes":[{"pos":[0,501],"content":"This method does not preserve white space. If you want to preserve white space in the XML tree, use the overload of the <xref:System.Xml.Linq.XElement.Parse%2A> method that takes <xref:System.Xml.Linq.LoadOptions> as a parameter. For more information, see [Preserving White Space while Loading or Parsing XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).","nodes":[{"content":"This method does not preserve white space.","pos":[0,42]},{"content":"If you want to preserve white space in the XML tree, use the overload of the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XElement.Parse%2A&gt;</ph> method that takes <ph id=\"ph2\">&lt;xref:System.Xml.Linq.LoadOptions&gt;</ph> as a parameter.","pos":[43,229],"source":" If you want to preserve white space in the XML tree, use the overload of the <xref:System.Xml.Linq.XElement.Parse%2A> method that takes <xref:System.Xml.Linq.LoadOptions> as a parameter."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Preserving White Space while Loading or Parsing XML<ept id=\"p1\">](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d)</ept> and <bpt id=\"p2\">[</bpt>Preserving White Space While Serializing<ept id=\"p2\">](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)</ept>.","pos":[230,501],"source":" For more information, see [Preserving White Space while Loading or Parsing XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)."}]},{"pos":[508,809],"content":"LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>. Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.","nodes":[{"content":"LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>. Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.","pos":[0,301],"nodes":[{"content":"LINQ to XML's loading functionality is built upon <ph id=\"ph1\">&lt;xref:System.Xml.XmlReader&gt;</ph>.","pos":[0,78],"source":"LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>."},{"content":"Therefore, you might catch any exceptions that are thrown by the <ph id=\"ph1\">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName&gt;</ph> overload methods and the <ph id=\"ph2\">&lt;xref:System.Xml.XmlReader&gt;</ph> methods that read and parse the document.","pos":[79,301],"source":" Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document."}]}]}],"pos":[209429,210243],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.String\"></xref> that contains XML.","nodes":[{"pos":[0,55],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> that contains XML.","source":"A <xref href=\"System.String\"></xref> that contains XML."}],"pos":[210957,211013],"yaml":true},{"content":"An <xref href=\"System.Xml.Linq.XElement\"></xref> populated from the string that contains XML.","nodes":[{"pos":[0,93],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XElement\"&gt;&lt;/xref&gt;</ph> populated from the string that contains XML.","source":"An <xref href=\"System.Xml.Linq.XElement\"></xref> populated from the string that contains XML."}],"pos":[211081,211175],"yaml":true},{"content":"Load an <xref href=\"System.Xml.Linq.XElement\"></xref> from a string that contains XML, optionally preserving white space and retaining line information.","nodes":[{"pos":[0,152],"content":"Load an <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XElement\"&gt;&lt;/xref&gt;</ph> from a string that contains XML, optionally preserving white space and retaining line information.","source":"Load an <xref href=\"System.Xml.Linq.XElement\"></xref> from a string that contains XML, optionally preserving white space and retaining line information."}],"pos":[212803,212956],"yaml":true},{"content":"If the source XML is indented, setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` causes the reader to read all white space in the source XML. Nodes of type <xref:System.Xml.Linq.XText> are created for both significant and insignificant white space.  \n  \n If the source XML is indented, not setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` causes the reader to ignore all of the insignificant white space in the source XML. The XML tree is created without any text nodes for insignificant white space.  \n  \n If the source XML is not indented, setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` has no effect. Significant white space is still preserved, and there are no spans of insignificant white space that could cause the creation of more white space text nodes.  \n  \n For more information, see [Preserving White Space while Loading or Parsing XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).  \n  \n Setting <xref:System.Xml.Linq.LoadOptions.SetBaseUri> will have no effect when parsing from a <xref:System.String>.  \n  \n The <xref:System.Xml.XmlReader> may have a valid line information or not. If you set <xref:System.Xml.Linq.LoadOptions.SetLineInfo>, the line information will be set in the XML tree from the line information that is reported by the <xref:System.Xml.XmlReader>.  \n  \n There is a performance penalty if you set the <xref:System.Xml.Linq.LoadOptions.SetLineInfo> flag.  \n  \n The line information is accurate immediately after loading the XML document. If you modify the XML tree after loading the document, the line information may become meaningless.  \n  \n LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>. Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.","nodes":[{"pos":[0,282],"content":"If the source XML is indented, setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` causes the reader to read all white space in the source XML. Nodes of type <xref:System.Xml.Linq.XText> are created for both significant and insignificant white space.","nodes":[{"content":"If the source XML is indented, setting the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.LoadOptions.PreserveWhitespace&gt;</ph> flag in <ph id=\"ph2\">`options`</ph> causes the reader to read all white space in the source XML.","pos":[0,175],"source":"If the source XML is indented, setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` causes the reader to read all white space in the source XML."},{"content":"Nodes of type <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XText&gt;</ph> are created for both significant and insignificant white space.","pos":[176,282],"source":" Nodes of type <xref:System.Xml.Linq.XText> are created for both significant and insignificant white space."}]},{"pos":[289,569],"content":"If the source XML is indented, not setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` causes the reader to ignore all of the insignificant white space in the source XML. The XML tree is created without any text nodes for insignificant white space.","nodes":[{"content":"If the source XML is indented, not setting the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.LoadOptions.PreserveWhitespace&gt;</ph> flag in <ph id=\"ph2\">`options`</ph> causes the reader to ignore all of the insignificant white space in the source XML.","pos":[0,202],"source":"If the source XML is indented, not setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` causes the reader to ignore all of the insignificant white space in the source XML."},{"content":"The XML tree is created without any text nodes for insignificant white space.","pos":[203,280]}]},{"pos":[576,867],"content":"If the source XML is not indented, setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` has no effect. Significant white space is still preserved, and there are no spans of insignificant white space that could cause the creation of more white space text nodes.","nodes":[{"content":"If the source XML is not indented, setting the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.LoadOptions.PreserveWhitespace&gt;</ph> flag in <ph id=\"ph2\">`options`</ph> has no effect.","pos":[0,133],"source":"If the source XML is not indented, setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` has no effect."},{"content":"Significant white space is still preserved, and there are no spans of insignificant white space that could cause the creation of more white space text nodes.","pos":[134,291]}]},{"pos":[874,1145],"content":"For more information, see <bpt id=\"p1\">[</bpt>Preserving White Space while Loading or Parsing XML<ept id=\"p1\">](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d)</ept> and <bpt id=\"p2\">[</bpt>Preserving White Space While Serializing<ept id=\"p2\">](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)</ept>.","source":"For more information, see [Preserving White Space while Loading or Parsing XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)."},{"pos":[1152,1267],"content":"Setting <xref:System.Xml.Linq.LoadOptions.SetBaseUri> will have no effect when parsing from a <xref:System.String>.","nodes":[{"content":"Setting <ph id=\"ph1\">&lt;xref:System.Xml.Linq.LoadOptions.SetBaseUri&gt;</ph> will have no effect when parsing from a <ph id=\"ph2\">&lt;xref:System.String&gt;</ph>.","pos":[0,115],"source":"Setting <xref:System.Xml.Linq.LoadOptions.SetBaseUri> will have no effect when parsing from a <xref:System.String>."}]},{"pos":[1274,1534],"content":"The <xref:System.Xml.XmlReader> may have a valid line information or not. If you set <xref:System.Xml.Linq.LoadOptions.SetLineInfo>, the line information will be set in the XML tree from the line information that is reported by the <xref:System.Xml.XmlReader>.","nodes":[{"content":"The <xref:System.Xml.XmlReader> may have a valid line information or not. If you set <xref:System.Xml.Linq.LoadOptions.SetLineInfo>, the line information will be set in the XML tree from the line information that is reported by the <xref:System.Xml.XmlReader>.","pos":[0,260],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Xml.XmlReader&gt;</ph> may have a valid line information or not.","pos":[0,73],"source":"The <xref:System.Xml.XmlReader> may have a valid line information or not."},{"content":"If you set <ph id=\"ph1\">&lt;xref:System.Xml.Linq.LoadOptions.SetLineInfo&gt;</ph>, the line information will be set in the XML tree from the line information that is reported by the <ph id=\"ph2\">&lt;xref:System.Xml.XmlReader&gt;</ph>.","pos":[74,260],"source":" If you set <xref:System.Xml.Linq.LoadOptions.SetLineInfo>, the line information will be set in the XML tree from the line information that is reported by the <xref:System.Xml.XmlReader>."}]}]},{"pos":[1541,1639],"content":"There is a performance penalty if you set the <xref:System.Xml.Linq.LoadOptions.SetLineInfo> flag.","nodes":[{"content":"There is a performance penalty if you set the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.LoadOptions.SetLineInfo&gt;</ph> flag.","pos":[0,98],"source":"There is a performance penalty if you set the <xref:System.Xml.Linq.LoadOptions.SetLineInfo> flag."}]},{"pos":[1646,1822],"content":"The line information is accurate immediately after loading the XML document. If you modify the XML tree after loading the document, the line information may become meaningless.","nodes":[{"content":"The line information is accurate immediately after loading the XML document. If you modify the XML tree after loading the document, the line information may become meaningless.","pos":[0,176],"nodes":[{"content":"The line information is accurate immediately after loading the XML document.","pos":[0,76]},{"content":"If you modify the XML tree after loading the document, the line information may become meaningless.","pos":[77,176]}]}]},{"pos":[1829,2130],"content":"LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>. Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.","nodes":[{"content":"LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>. Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.","pos":[0,301],"nodes":[{"content":"LINQ to XML's loading functionality is built upon <ph id=\"ph1\">&lt;xref:System.Xml.XmlReader&gt;</ph>.","pos":[0,78],"source":"LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>."},{"content":"Therefore, you might catch any exceptions that are thrown by the <ph id=\"ph1\">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName&gt;</ph> overload methods and the <ph id=\"ph2\">&lt;xref:System.Xml.XmlReader&gt;</ph> methods that read and parse the document.","pos":[79,301],"source":" Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document."}]}]}],"pos":[212967,215116],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.String\"></xref> that contains XML.","nodes":[{"pos":[0,55],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> that contains XML.","source":"A <xref href=\"System.String\"></xref> that contains XML."}],"pos":[219527,219583],"yaml":true},{"content":"A <xref href=\"System.Xml.Linq.LoadOptions\"></xref> that specifies white space behavior, and whether to load base URI and line information.","nodes":[{"pos":[0,138],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.LoadOptions\"&gt;&lt;/xref&gt;</ph> that specifies white space behavior, and whether to load base URI and line information.","source":"A <xref href=\"System.Xml.Linq.LoadOptions\"></xref> that specifies white space behavior, and whether to load base URI and line information."}],"pos":[219660,219799],"yaml":true},{"content":"An <xref href=\"System.Xml.Linq.XElement\"></xref> populated from the string that contains XML.","nodes":[{"pos":[0,93],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XElement\"&gt;&lt;/xref&gt;</ph> populated from the string that contains XML.","source":"An <xref href=\"System.Xml.Linq.XElement\"></xref> populated from the string that contains XML."}],"pos":[219867,219961],"yaml":true},{"content":"Removes nodes and attributes from this <xref href=\"System.Xml.Linq.XElement\"></xref>.","nodes":[{"pos":[0,85],"content":"Removes nodes and attributes from this <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XElement\"&gt;&lt;/xref&gt;</ph>.","source":"Removes nodes and attributes from this <xref href=\"System.Xml.Linq.XElement\"></xref>."}],"pos":[221427,221513],"yaml":true},{"content":"This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.","nodes":[{"pos":[0,121],"content":"This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.","nodes":[{"content":"This method will raise the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XObject.Changed&gt;</ph> and the <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XObject.Changing&gt;</ph> events.","pos":[0,121],"source":"This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events."}]}],"pos":[221524,221646],"yaml":true,"extradata":"MT"},{"content":"Removes the attributes of this <xref href=\"System.Xml.Linq.XElement\"></xref>.","nodes":[{"pos":[0,77],"content":"Removes the attributes of this <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XElement\"&gt;&lt;/xref&gt;</ph>.","source":"Removes the attributes of this <xref href=\"System.Xml.Linq.XElement\"></xref>."}],"pos":[224247,224325],"yaml":true},{"content":"This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.","nodes":[{"pos":[0,121],"content":"This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.","nodes":[{"content":"This method will raise the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XObject.Changed&gt;</ph> and the <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XObject.Changing&gt;</ph> events.","pos":[0,121],"source":"This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events."}]}],"pos":[224336,224458],"yaml":true,"extradata":"MT"},{"content":"Replaces the child nodes and the attributes of this element with the specified content.","nodes":[{"pos":[0,87],"content":"Replaces the child nodes and the attributes of this element with the specified content.","nodes":[{"content":"Replaces the child nodes and the attributes of this element with the specified content.","pos":[0,87]}]}],"pos":[227085,227173],"yaml":true},{"content":"This method first removes existing content and attributes. It then adds the specified `content`.  \n  \n This method uses snapshot semantics—that is, it creates a separate copy of the new content before replacing the contents of the current element with the new content. This means that you can query the contents of the current element and use the results of the query as the specified new content.  \n  \n For details about the valid content that can be passed to this function, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).  \n  \n This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.","nodes":[{"pos":[0,96],"content":"This method first removes existing content and attributes. It then adds the specified `content`.","nodes":[{"content":"This method first removes existing content and attributes.","pos":[0,58]},{"content":"It then adds the specified <ph id=\"ph1\">`content`</ph>.","pos":[59,96],"source":" It then adds the specified `content`."}]},{"pos":[103,397],"content":"This method uses snapshot semantics—that is, it creates a separate copy of the new content before replacing the contents of the current element with the new content. This means that you can query the contents of the current element and use the results of the query as the specified new content.","nodes":[{"content":"This method uses snapshot semantics—that is, it creates a separate copy of the new content before replacing the contents of the current element with the new content. This means that you can query the contents of the current element and use the results of the query as the specified new content.","pos":[0,294],"nodes":[{"content":"This method uses snapshot semantics—that is, it creates a separate copy of the new content before replacing the contents of the current element with the new content.","pos":[0,165]},{"content":"This means that you can query the contents of the current element and use the results of the query as the specified new content.","pos":[166,294]}]}]},{"pos":[404,603],"content":"For details about the valid content that can be passed to this function, see <bpt id=\"p1\">[</bpt>Valid Content of XElement and XDocument Objects<ept id=\"p1\">](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)</ept>.","source":"For details about the valid content that can be passed to this function, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)."},{"pos":[610,731],"content":"This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.","nodes":[{"content":"This method will raise the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XObject.Changed&gt;</ph> and the <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XObject.Changing&gt;</ph> events.","pos":[0,121],"source":"This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events."}]}],"pos":[227184,227924],"yaml":true,"extradata":"MT"},{"content":"The content that will replace the child nodes and attributes of this element.","nodes":[{"pos":[0,77],"content":"The content that will replace the child nodes and attributes of this element.","nodes":[{"content":"The content that will replace the child nodes and attributes of this element.","pos":[0,77]}]}],"pos":[231850,231928],"yaml":true},{"content":"Replaces the child nodes and the attributes of this element with the specified content.","nodes":[{"pos":[0,87],"content":"Replaces the child nodes and the attributes of this element with the specified content.","nodes":[{"content":"Replaces the child nodes and the attributes of this element with the specified content.","pos":[0,87]}]}],"pos":[233480,233568],"yaml":true},{"content":"This method first removes existing content and attributes. It then adds the specified `content`.  \n  \n This method uses snapshot semantics—that is, it creates a separate copy of the new content before replacing the contents of the current element with the new content. This means that you can query the contents of the current element and use the results of the query as the specified new content.  \n  \n For details about the valid content that can be passed to this function, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).  \n  \n This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.","nodes":[{"pos":[0,96],"content":"This method first removes existing content and attributes. It then adds the specified `content`.","nodes":[{"content":"This method first removes existing content and attributes.","pos":[0,58]},{"content":"It then adds the specified <ph id=\"ph1\">`content`</ph>.","pos":[59,96],"source":" It then adds the specified `content`."}]},{"pos":[103,397],"content":"This method uses snapshot semantics—that is, it creates a separate copy of the new content before replacing the contents of the current element with the new content. This means that you can query the contents of the current element and use the results of the query as the specified new content.","nodes":[{"content":"This method uses snapshot semantics—that is, it creates a separate copy of the new content before replacing the contents of the current element with the new content. This means that you can query the contents of the current element and use the results of the query as the specified new content.","pos":[0,294],"nodes":[{"content":"This method uses snapshot semantics—that is, it creates a separate copy of the new content before replacing the contents of the current element with the new content.","pos":[0,165]},{"content":"This means that you can query the contents of the current element and use the results of the query as the specified new content.","pos":[166,294]}]}]},{"pos":[404,603],"content":"For details about the valid content that can be passed to this function, see <bpt id=\"p1\">[</bpt>Valid Content of XElement and XDocument Objects<ept id=\"p1\">](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)</ept>.","source":"For details about the valid content that can be passed to this function, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)."},{"pos":[610,731],"content":"This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.","nodes":[{"content":"This method will raise the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XObject.Changed&gt;</ph> and the <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XObject.Changing&gt;</ph> events.","pos":[0,121],"source":"This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events."}]}],"pos":[233579,234319],"yaml":true,"extradata":"MT"},{"content":"A parameter list of content objects.","nodes":[{"pos":[0,36],"content":"A parameter list of content objects.","nodes":[{"content":"A parameter list of content objects.","pos":[0,36]}]}],"pos":[235988,236025],"yaml":true},{"content":"Replaces the attributes of this element with the specified content.","nodes":[{"pos":[0,67],"content":"Replaces the attributes of this element with the specified content.","nodes":[{"content":"Replaces the attributes of this element with the specified content.","pos":[0,67]}]}],"pos":[237619,237687],"yaml":true},{"content":"This method first removes existing attributes. It then adds the specified `content`.  \n  \n For details about the valid content that can be passed to this function, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).  \n  \n This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.","nodes":[{"pos":[0,84],"content":"This method first removes existing attributes. It then adds the specified `content`.","nodes":[{"content":"This method first removes existing attributes.","pos":[0,46]},{"content":"It then adds the specified <ph id=\"ph1\">`content`</ph>.","pos":[47,84],"source":" It then adds the specified `content`."}]},{"pos":[91,290],"content":"For details about the valid content that can be passed to this function, see <bpt id=\"p1\">[</bpt>Valid Content of XElement and XDocument Objects<ept id=\"p1\">](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)</ept>.","source":"For details about the valid content that can be passed to this function, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)."},{"pos":[297,418],"content":"This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.","nodes":[{"content":"This method will raise the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XObject.Changed&gt;</ph> and the <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XObject.Changing&gt;</ph> events.","pos":[0,121],"source":"This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events."}]}],"pos":[237698,238123],"yaml":true,"extradata":"MT"},{"content":"A parameter list of content objects.","nodes":[{"pos":[0,36],"content":"A parameter list of content objects.","nodes":[{"content":"A parameter list of content objects.","pos":[0,36]}]}],"pos":[239210,239247],"yaml":true},{"content":"Replaces the attributes of this element with the specified content.","nodes":[{"pos":[0,67],"content":"Replaces the attributes of this element with the specified content.","nodes":[{"content":"Replaces the attributes of this element with the specified content.","pos":[0,67]}]}],"pos":[240836,240904],"yaml":true},{"content":"This method first removes existing attributes. It then adds the specified `content`.  \n  \n For details about the valid content that can be passed to this function, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).  \n  \n This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.","nodes":[{"pos":[0,84],"content":"This method first removes existing attributes. It then adds the specified `content`.","nodes":[{"content":"This method first removes existing attributes.","pos":[0,46]},{"content":"It then adds the specified <ph id=\"ph1\">`content`</ph>.","pos":[47,84],"source":" It then adds the specified `content`."}]},{"pos":[91,290],"content":"For details about the valid content that can be passed to this function, see <bpt id=\"p1\">[</bpt>Valid Content of XElement and XDocument Objects<ept id=\"p1\">](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)</ept>.","source":"For details about the valid content that can be passed to this function, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)."},{"pos":[297,418],"content":"This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.","nodes":[{"content":"This method will raise the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XObject.Changed&gt;</ph> and the <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XObject.Changing&gt;</ph> events.","pos":[0,121],"source":"This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events."}]}],"pos":[240915,241340],"yaml":true,"extradata":"MT"},{"content":"The content that will replace the attributes of this element.","nodes":[{"pos":[0,61],"content":"The content that will replace the attributes of this element.","nodes":[{"content":"The content that will replace the attributes of this element.","pos":[0,61]}]}],"pos":[242268,242330],"yaml":true},{"content":"Outputs this <xref href=\"System.Xml.Linq.XElement\"></xref> to the specified <xref href=\"System.IO.Stream\"></xref>.","nodes":[{"pos":[0,114],"content":"Outputs this <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XElement\"&gt;&lt;/xref&gt;</ph> to the specified <ph id=\"ph2\">&lt;xref href=\"System.IO.Stream\"&gt;&lt;/xref&gt;</ph>.","source":"Outputs this <xref href=\"System.Xml.Linq.XElement\"></xref> to the specified <xref href=\"System.IO.Stream\"></xref>."}],"pos":[243850,243965],"yaml":true},{"content":"The serialized XML will be indented. All insignificant white space will be removed, and additional white space will be added so that the XML will be properly indented. The behavior of this method is that insignificant white space will not be preserved.  \n  \n If you want to control white space, use the overload of <xref:System.Xml.Linq.XElement.Save%2A> that takes <xref:System.Xml.Linq.SaveOptions> as a parameter. Use the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> option to save unindented XML. This will cause the writer to write all white spaces exactly as represented in the XML tree.  \n  \n Use the <xref:System.Xml.Linq.SaveOptions.OmitDuplicateNamespaces> option if you want to remove duplicate namespace declarations.","nodes":[{"pos":[0,252],"content":"The serialized XML will be indented. All insignificant white space will be removed, and additional white space will be added so that the XML will be properly indented. The behavior of this method is that insignificant white space will not be preserved.","nodes":[{"content":"The serialized XML will be indented. All insignificant white space will be removed, and additional white space will be added so that the XML will be properly indented. The behavior of this method is that insignificant white space will not be preserved.","pos":[0,252],"nodes":[{"content":"The serialized XML will be indented.","pos":[0,36]},{"content":"All insignificant white space will be removed, and additional white space will be added so that the XML will be properly indented.","pos":[37,167]},{"content":"The behavior of this method is that insignificant white space will not be preserved.","pos":[168,252]}]}]},{"pos":[259,601],"content":"If you want to control white space, use the overload of <xref:System.Xml.Linq.XElement.Save%2A> that takes <xref:System.Xml.Linq.SaveOptions> as a parameter. Use the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> option to save unindented XML. This will cause the writer to write all white spaces exactly as represented in the XML tree.","nodes":[{"content":"If you want to control white space, use the overload of <xref:System.Xml.Linq.XElement.Save%2A> that takes <xref:System.Xml.Linq.SaveOptions> as a parameter. Use the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> option to save unindented XML. This will cause the writer to write all white spaces exactly as represented in the XML tree.","pos":[0,342],"nodes":[{"content":"If you want to control white space, use the overload of <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XElement.Save%2A&gt;</ph> that takes <ph id=\"ph2\">&lt;xref:System.Xml.Linq.SaveOptions&gt;</ph> as a parameter.","pos":[0,157],"source":"If you want to control white space, use the overload of <xref:System.Xml.Linq.XElement.Save%2A> that takes <xref:System.Xml.Linq.SaveOptions> as a parameter."},{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.SaveOptions.DisableFormatting&gt;</ph> option to save unindented XML.","pos":[158,249],"source":" Use the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> option to save unindented XML."},{"content":"This will cause the writer to write all white spaces exactly as represented in the XML tree.","pos":[250,342]}]}]},{"pos":[608,737],"content":"Use the <xref:System.Xml.Linq.SaveOptions.OmitDuplicateNamespaces> option if you want to remove duplicate namespace declarations.","nodes":[{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.SaveOptions.OmitDuplicateNamespaces&gt;</ph> option if you want to remove duplicate namespace declarations.","pos":[0,129],"source":"Use the <xref:System.Xml.Linq.SaveOptions.OmitDuplicateNamespaces> option if you want to remove duplicate namespace declarations."}]}],"pos":[243976,244720],"yaml":true,"extradata":"MT"},{"content":"The stream to output this <xref href=\"System.Xml.Linq.XElement\"></xref> to.","nodes":[{"pos":[0,75],"content":"The stream to output this <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XElement\"&gt;&lt;/xref&gt;</ph> to.","source":"The stream to output this <xref href=\"System.Xml.Linq.XElement\"></xref> to."}],"pos":[244868,244944],"yaml":true},{"content":"Serialize this element to a <xref href=\"System.IO.TextWriter\"></xref>.","nodes":[{"pos":[0,70],"content":"Serialize this element to a <ph id=\"ph1\">&lt;xref href=\"System.IO.TextWriter\"&gt;&lt;/xref&gt;</ph>.","source":"Serialize this element to a <xref href=\"System.IO.TextWriter\"></xref>."}],"pos":[246475,246546],"yaml":true},{"content":"The serialized XML will be indented. All insignificant white space will be removed, and additional white space will be added so that the XML will be properly indented. The behavior of this method is that white space will not be preserved.  \n  \n If you want to control white space, use the overload of <xref:System.Xml.Linq.XElement.Save%2A> that allows you to specify <xref:System.Xml.Linq.SaveOptions> as a parameter. For more information, see [Preserving White Space while Loading or Parsing XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).","nodes":[{"pos":[0,238],"content":"The serialized XML will be indented. All insignificant white space will be removed, and additional white space will be added so that the XML will be properly indented. The behavior of this method is that white space will not be preserved.","nodes":[{"content":"The serialized XML will be indented. All insignificant white space will be removed, and additional white space will be added so that the XML will be properly indented. The behavior of this method is that white space will not be preserved.","pos":[0,238],"nodes":[{"content":"The serialized XML will be indented.","pos":[0,36]},{"content":"All insignificant white space will be removed, and additional white space will be added so that the XML will be properly indented.","pos":[37,167]},{"content":"The behavior of this method is that white space will not be preserved.","pos":[168,238]}]}]},{"pos":[245,690],"content":"If you want to control white space, use the overload of <xref:System.Xml.Linq.XElement.Save%2A> that allows you to specify <xref:System.Xml.Linq.SaveOptions> as a parameter. For more information, see [Preserving White Space while Loading or Parsing XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).","nodes":[{"content":"If you want to control white space, use the overload of <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XElement.Save%2A&gt;</ph> that allows you to specify <ph id=\"ph2\">&lt;xref:System.Xml.Linq.SaveOptions&gt;</ph> as a parameter.","pos":[0,173],"source":"If you want to control white space, use the overload of <xref:System.Xml.Linq.XElement.Save%2A> that allows you to specify <xref:System.Xml.Linq.SaveOptions> as a parameter."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Preserving White Space while Loading or Parsing XML<ept id=\"p1\">](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d)</ept> and <bpt id=\"p2\">[</bpt>Preserving White Space While Serializing<ept id=\"p2\">](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)</ept>.","pos":[174,445],"source":" For more information, see [Preserving White Space while Loading or Parsing XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)."}]}],"pos":[246557,247252],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.IO.TextWriter\"></xref> that the <xref href=\"System.Xml.Linq.XElement\"></xref> will be written to.","nodes":[{"pos":[0,118],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.IO.TextWriter\"&gt;&lt;/xref&gt;</ph> that the <ph id=\"ph2\">&lt;xref href=\"System.Xml.Linq.XElement\"&gt;&lt;/xref&gt;</ph> will be written to.","source":"A <xref href=\"System.IO.TextWriter\"></xref> that the <xref href=\"System.Xml.Linq.XElement\"></xref> will be written to."}],"pos":[248233,248352],"yaml":true},{"content":"Serialize this element to a file.","nodes":[{"pos":[0,33],"content":"Serialize this element to a file.","nodes":[{"content":"Serialize this element to a file.","pos":[0,33]}]}],"pos":[249850,249884],"yaml":true},{"content":"The serialized XML will be indented. All insignificant white space will be removed, and additional white space will be added so that the XML will be properly indented. The behavior of this method is that insignificant white space nodes in the XML tree will not be preserved.  \n  \n If you want to control white space, use the overload of <xref:System.Xml.Linq.XElement.Save%2A> that allows you to specify <xref:System.Xml.Linq.SaveOptions> as a parameter. For more information, see [Preserving White Space while Loading or Parsing XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).","nodes":[{"pos":[0,274],"content":"The serialized XML will be indented. All insignificant white space will be removed, and additional white space will be added so that the XML will be properly indented. The behavior of this method is that insignificant white space nodes in the XML tree will not be preserved.","nodes":[{"content":"The serialized XML will be indented. All insignificant white space will be removed, and additional white space will be added so that the XML will be properly indented. The behavior of this method is that insignificant white space nodes in the XML tree will not be preserved.","pos":[0,274],"nodes":[{"content":"The serialized XML will be indented.","pos":[0,36]},{"content":"All insignificant white space will be removed, and additional white space will be added so that the XML will be properly indented.","pos":[37,167]},{"content":"The behavior of this method is that insignificant white space nodes in the XML tree will not be preserved.","pos":[168,274]}]}]},{"pos":[281,726],"content":"If you want to control white space, use the overload of <xref:System.Xml.Linq.XElement.Save%2A> that allows you to specify <xref:System.Xml.Linq.SaveOptions> as a parameter. For more information, see [Preserving White Space while Loading or Parsing XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).","nodes":[{"content":"If you want to control white space, use the overload of <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XElement.Save%2A&gt;</ph> that allows you to specify <ph id=\"ph2\">&lt;xref:System.Xml.Linq.SaveOptions&gt;</ph> as a parameter.","pos":[0,173],"source":"If you want to control white space, use the overload of <xref:System.Xml.Linq.XElement.Save%2A> that allows you to specify <xref:System.Xml.Linq.SaveOptions> as a parameter."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Preserving White Space while Loading or Parsing XML<ept id=\"p1\">](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d)</ept> and <bpt id=\"p2\">[</bpt>Preserving White Space While Serializing<ept id=\"p2\">](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)</ept>.","pos":[174,445],"source":" For more information, see [Preserving White Space while Loading or Parsing XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)."}]}],"pos":[249895,250626],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.String\"></xref> that contains the name of the file.","nodes":[{"pos":[0,72],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> that contains the name of the file.","source":"A <xref href=\"System.String\"></xref> that contains the name of the file."}],"pos":[251615,251688],"yaml":true},{"content":"Serialize this element to an <xref href=\"System.Xml.XmlWriter\"></xref>.","nodes":[{"pos":[0,71],"content":"Serialize this element to an <ph id=\"ph1\">&lt;xref href=\"System.Xml.XmlWriter\"&gt;&lt;/xref&gt;</ph>.","source":"Serialize this element to an <xref href=\"System.Xml.XmlWriter\"></xref>."}],"pos":[252912,252984],"yaml":true},{"content":"A <xref href=\"System.Xml.XmlWriter\"></xref> that the <xref href=\"System.Xml.Linq.XElement\"></xref> will be written to.","nodes":[{"pos":[0,118],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Xml.XmlWriter\"&gt;&lt;/xref&gt;</ph> that the <ph id=\"ph2\">&lt;xref href=\"System.Xml.Linq.XElement\"&gt;&lt;/xref&gt;</ph> will be written to.","source":"A <xref href=\"System.Xml.XmlWriter\"></xref> that the <xref href=\"System.Xml.Linq.XElement\"></xref> will be written to."}],"pos":[254232,254351],"yaml":true},{"content":"Outputs this <xref href=\"System.Xml.Linq.XElement\"></xref> to the specified <xref href=\"System.IO.Stream\"></xref>, optionally specifying formatting behavior.","nodes":[{"pos":[0,157],"content":"Outputs this <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XElement\"&gt;&lt;/xref&gt;</ph> to the specified <ph id=\"ph2\">&lt;xref href=\"System.IO.Stream\"&gt;&lt;/xref&gt;</ph>, optionally specifying formatting behavior.","source":"Outputs this <xref href=\"System.Xml.Linq.XElement\"></xref> to the specified <xref href=\"System.IO.Stream\"></xref>, optionally specifying formatting behavior."}],"pos":[255981,256139],"yaml":true},{"content":"By default the `options` are set to <xref:System.Xml.Linq.SaveOptions.None>. This option will remove all extraneous insignificant white space, and add appropriate insignificant white space so that the XML is properly indented.  \n  \n If you want to save unindented XML, specify the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> flag for `options`. This will cause the writer to write all white spaces exactly as represented in the XML tree.  \n  \n Use <xref:System.Xml.Linq.SaveOptions.OmitDuplicateNamespaces> option if you want to remove duplicate namespace declarations.","nodes":[{"pos":[0,226],"content":"By default the `options` are set to <xref:System.Xml.Linq.SaveOptions.None>. This option will remove all extraneous insignificant white space, and add appropriate insignificant white space so that the XML is properly indented.","nodes":[{"content":"By default the <ph id=\"ph1\">`options`</ph> are set to <ph id=\"ph2\">&lt;xref:System.Xml.Linq.SaveOptions.None&gt;</ph>.","pos":[0,76],"source":"By default the `options` are set to <xref:System.Xml.Linq.SaveOptions.None>."},{"content":"This option will remove all extraneous insignificant white space, and add appropriate insignificant white space so that the XML is properly indented.","pos":[77,226]}]},{"pos":[233,446],"content":"If you want to save unindented XML, specify the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> flag for `options`. This will cause the writer to write all white spaces exactly as represented in the XML tree.","nodes":[{"content":"If you want to save unindented XML, specify the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.SaveOptions.DisableFormatting&gt;</ph> flag for <ph id=\"ph2\">`options`</ph>.","pos":[0,120],"source":"If you want to save unindented XML, specify the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> flag for `options`."},{"content":"This will cause the writer to write all white spaces exactly as represented in the XML tree.","pos":[121,213]}]},{"pos":[453,578],"content":"Use <xref:System.Xml.Linq.SaveOptions.OmitDuplicateNamespaces> option if you want to remove duplicate namespace declarations.","nodes":[{"content":"Use <ph id=\"ph1\">&lt;xref:System.Xml.Linq.SaveOptions.OmitDuplicateNamespaces&gt;</ph> option if you want to remove duplicate namespace declarations.","pos":[0,125],"source":"Use <xref:System.Xml.Linq.SaveOptions.OmitDuplicateNamespaces> option if you want to remove duplicate namespace declarations."}]}],"pos":[256150,256735],"yaml":true,"extradata":"MT"},{"content":"The stream to output this <xref href=\"System.Xml.Linq.XElement\"></xref> to.","nodes":[{"pos":[0,75],"content":"The stream to output this <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XElement\"&gt;&lt;/xref&gt;</ph> to.","source":"The stream to output this <xref href=\"System.Xml.Linq.XElement\"></xref> to."}],"pos":[256920,256996],"yaml":true},{"content":"A <xref href=\"System.Xml.Linq.SaveOptions\"></xref> object that specifies formatting behavior.","nodes":[{"pos":[0,93],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.SaveOptions\"&gt;&lt;/xref&gt;</ph> object that specifies formatting behavior.","source":"A <xref href=\"System.Xml.Linq.SaveOptions\"></xref> object that specifies formatting behavior."}],"pos":[257073,257167],"yaml":true},{"content":"Serialize this element to a <xref href=\"System.IO.TextWriter\"></xref>, optionally disabling formatting.","nodes":[{"pos":[0,103],"content":"Serialize this element to a <ph id=\"ph1\">&lt;xref href=\"System.IO.TextWriter\"&gt;&lt;/xref&gt;</ph>, optionally disabling formatting.","source":"Serialize this element to a <xref href=\"System.IO.TextWriter\"></xref>, optionally disabling formatting."}],"pos":[258821,258925],"yaml":true},{"content":"If you want to save unindented XML, specify the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> flag for `options`. This will cause the writer to write all white space exactly as represented in the XML tree.  \n  \n If you want to save indented XML, do not specify the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> flag for `options`. This will remove all extraneous insignificant white space, and add appropriate insignificant white space so that the XML is properly indented. This is the default behavior, and the behavior of the overloads of the <xref:System.Xml.Linq.XElement.Save%2A> methods that do not take `options` as a parameter.  \n  \n For more information, see [Preserving White Space while Loading or Parsing XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).","nodes":[{"pos":[0,212],"content":"If you want to save unindented XML, specify the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> flag for `options`. This will cause the writer to write all white space exactly as represented in the XML tree.","nodes":[{"content":"If you want to save unindented XML, specify the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.SaveOptions.DisableFormatting&gt;</ph> flag for <ph id=\"ph2\">`options`</ph>.","pos":[0,120],"source":"If you want to save unindented XML, specify the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> flag for `options`."},{"content":"This will cause the writer to write all white space exactly as represented in the XML tree.","pos":[121,212]}]},{"pos":[219,649],"content":"If you want to save indented XML, do not specify the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> flag for `options`. This will remove all extraneous insignificant white space, and add appropriate insignificant white space so that the XML is properly indented. This is the default behavior, and the behavior of the overloads of the <xref:System.Xml.Linq.XElement.Save%2A> methods that do not take `options` as a parameter.","nodes":[{"content":"If you want to save indented XML, do not specify the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.SaveOptions.DisableFormatting&gt;</ph> flag for <ph id=\"ph2\">`options`</ph>.","pos":[0,125],"source":"If you want to save indented XML, do not specify the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> flag for `options`."},{"content":"This will remove all extraneous insignificant white space, and add appropriate insignificant white space so that the XML is properly indented.","pos":[126,268]},{"content":"This is the default behavior, and the behavior of the overloads of the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XElement.Save%2A&gt;</ph> methods that do not take <ph id=\"ph2\">`options`</ph> as a parameter.","pos":[269,430],"source":" This is the default behavior, and the behavior of the overloads of the <xref:System.Xml.Linq.XElement.Save%2A> methods that do not take `options` as a parameter."}]},{"pos":[656,927],"content":"For more information, see <bpt id=\"p1\">[</bpt>Preserving White Space while Loading or Parsing XML<ept id=\"p1\">](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d)</ept> and <bpt id=\"p2\">[</bpt>Preserving White Space While Serializing<ept id=\"p2\">](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)</ept>.","source":"For more information, see [Preserving White Space while Loading or Parsing XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)."}],"pos":[258936,259870],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.IO.TextWriter\"></xref> to output the XML to.","nodes":[{"pos":[0,67],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.IO.TextWriter\"&gt;&lt;/xref&gt;</ph> to output the XML to.","source":"The <xref href=\"System.IO.TextWriter\"></xref> to output the XML to."}],"pos":[261522,261590],"yaml":true},{"content":"A <xref href=\"System.Xml.Linq.SaveOptions\"></xref> that specifies formatting behavior.","nodes":[{"pos":[0,86],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.SaveOptions\"&gt;&lt;/xref&gt;</ph> that specifies formatting behavior.","source":"A <xref href=\"System.Xml.Linq.SaveOptions\"></xref> that specifies formatting behavior."}],"pos":[261667,261754],"yaml":true},{"content":"Serialize this element to a file, optionally disabling formatting.","nodes":[{"pos":[0,66],"content":"Serialize this element to a file, optionally disabling formatting.","nodes":[{"content":"Serialize this element to a file, optionally disabling formatting.","pos":[0,66]}]}],"pos":[263375,263442],"yaml":true},{"content":"If you want to save unindented XML, specify the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> flag for `options`. This will cause the writer to write all white space exactly as represented in the XML tree.  \n  \n If you want to save indented XML, do not specify the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> flag for `options`. This will remove all extraneous insignificant white space, and add appropriate insignificant white space so that the XML is properly indented. This is the default behavior, and the behavior of the overloads of the <xref:System.Xml.Linq.XElement.Save%2A> methods that do not take `options` as a parameter.  \n  \n For more information, see [Preserving White Space while Loading or Parsing XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).","nodes":[{"pos":[0,212],"content":"If you want to save unindented XML, specify the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> flag for `options`. This will cause the writer to write all white space exactly as represented in the XML tree.","nodes":[{"content":"If you want to save unindented XML, specify the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.SaveOptions.DisableFormatting&gt;</ph> flag for <ph id=\"ph2\">`options`</ph>.","pos":[0,120],"source":"If you want to save unindented XML, specify the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> flag for `options`."},{"content":"This will cause the writer to write all white space exactly as represented in the XML tree.","pos":[121,212]}]},{"pos":[219,649],"content":"If you want to save indented XML, do not specify the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> flag for `options`. This will remove all extraneous insignificant white space, and add appropriate insignificant white space so that the XML is properly indented. This is the default behavior, and the behavior of the overloads of the <xref:System.Xml.Linq.XElement.Save%2A> methods that do not take `options` as a parameter.","nodes":[{"content":"If you want to save indented XML, do not specify the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.SaveOptions.DisableFormatting&gt;</ph> flag for <ph id=\"ph2\">`options`</ph>.","pos":[0,125],"source":"If you want to save indented XML, do not specify the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> flag for `options`."},{"content":"This will remove all extraneous insignificant white space, and add appropriate insignificant white space so that the XML is properly indented.","pos":[126,268]},{"content":"This is the default behavior, and the behavior of the overloads of the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XElement.Save%2A&gt;</ph> methods that do not take <ph id=\"ph2\">`options`</ph> as a parameter.","pos":[269,430],"source":" This is the default behavior, and the behavior of the overloads of the <xref:System.Xml.Linq.XElement.Save%2A> methods that do not take `options` as a parameter."}]},{"pos":[656,927],"content":"For more information, see <bpt id=\"p1\">[</bpt>Preserving White Space while Loading or Parsing XML<ept id=\"p1\">](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d)</ept> and <bpt id=\"p2\">[</bpt>Preserving White Space While Serializing<ept id=\"p2\">](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)</ept>.","source":"For more information, see [Preserving White Space while Loading or Parsing XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)."}],"pos":[263453,264387],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.String\"></xref> that contains the name of the file.","nodes":[{"pos":[0,72],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> that contains the name of the file.","source":"A <xref href=\"System.String\"></xref> that contains the name of the file."}],"pos":[265850,265923],"yaml":true},{"content":"A <xref href=\"System.Xml.Linq.SaveOptions\"></xref> that specifies formatting behavior.","nodes":[{"pos":[0,86],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.SaveOptions\"&gt;&lt;/xref&gt;</ph> that specifies formatting behavior.","source":"A <xref href=\"System.Xml.Linq.SaveOptions\"></xref> that specifies formatting behavior."}],"pos":[266000,266087],"yaml":true},{"content":"Sets the value of an attribute, adds an attribute, or removes an attribute.","nodes":[{"pos":[0,75],"content":"Sets the value of an attribute, adds an attribute, or removes an attribute.","nodes":[{"content":"Sets the value of an attribute, adds an attribute, or removes an attribute.","pos":[0,75]}]}],"pos":[271562,271638],"yaml":true},{"content":"This method is designed to make it easy to maintain a list of name/value pairs as a set of attributes. When maintaining the list, you need to add pairs, modify pairs, or delete pairs. If you call this method passing a name that does not exist as an attribute, this method creates an attribute for you. If you call this method passing the name of an existing attribute, this method modifies the value of the attribute to the value that you specify. If you pass `null` for `value`, this method removes the attribute.  \n  \n This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.  \n  \n The value is assigned to the attribute with the specified name. If no attribute with the specified name exists, a new attribute is added. If the value is `null`, the attribute with the specified name, if any, is deleted.  \n  \n For more information, see [Maintaining Name/Value Pairs](http://msdn.microsoft.com/library/fe9798bf-b5e2-4a3c-a86c-7f8638912691).","nodes":[{"pos":[0,514],"content":"This method is designed to make it easy to maintain a list of name/value pairs as a set of attributes. When maintaining the list, you need to add pairs, modify pairs, or delete pairs. If you call this method passing a name that does not exist as an attribute, this method creates an attribute for you. If you call this method passing the name of an existing attribute, this method modifies the value of the attribute to the value that you specify. If you pass `null` for `value`, this method removes the attribute.","nodes":[{"content":"This method is designed to make it easy to maintain a list of name/value pairs as a set of attributes.","pos":[0,102]},{"content":"When maintaining the list, you need to add pairs, modify pairs, or delete pairs.","pos":[103,183]},{"content":"If you call this method passing a name that does not exist as an attribute, this method creates an attribute for you.","pos":[184,301]},{"content":"If you call this method passing the name of an existing attribute, this method modifies the value of the attribute to the value that you specify.","pos":[302,447]},{"content":"If you pass <ph id=\"ph1\">`null`</ph> for <ph id=\"ph2\">`value`</ph>, this method removes the attribute.","pos":[448,514],"source":" If you pass `null` for `value`, this method removes the attribute."}]},{"pos":[521,642],"content":"This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.","nodes":[{"content":"This method will raise the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XObject.Changed&gt;</ph> and the <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XObject.Changing&gt;</ph> events.","pos":[0,121],"source":"This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events."}]},{"pos":[649,869],"content":"The value is assigned to the attribute with the specified name. If no attribute with the specified name exists, a new attribute is added. If the value is `null`, the attribute with the specified name, if any, is deleted.","nodes":[{"content":"The value is assigned to the attribute with the specified name.","pos":[0,63]},{"content":"If no attribute with the specified name exists, a new attribute is added.","pos":[64,137]},{"content":"If the value is <ph id=\"ph1\">`null`</ph>, the attribute with the specified name, if any, is deleted.","pos":[138,220],"source":" If the value is `null`, the attribute with the specified name, if any, is deleted."}]},{"pos":[876,1005],"content":"For more information, see <bpt id=\"p1\">[</bpt>Maintaining Name/Value Pairs<ept id=\"p1\">](http://msdn.microsoft.com/library/fe9798bf-b5e2-4a3c-a86c-7f8638912691)</ept>.","source":"For more information, see [Maintaining Name/Value Pairs](http://msdn.microsoft.com/library/fe9798bf-b5e2-4a3c-a86c-7f8638912691)."}],"pos":[271649,272663],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Xml.Linq.XName\"></xref> that contains the name of the attribute to change.","nodes":[{"pos":[0,96],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XName\"&gt;&lt;/xref&gt;</ph> that contains the name of the attribute to change.","source":"An <xref href=\"System.Xml.Linq.XName\"></xref> that contains the name of the attribute to change."}],"pos":[274235,274332],"yaml":true},{"content":"The value to assign to the attribute. The attribute is removed if the value is `null`. Otherwise, the value is converted to its string representation and assigned to the <xref href=\"System.Xml.Linq.XAttribute.Value\"></xref> property of the attribute.","nodes":[{"pos":[0,250],"content":"The value to assign to the attribute. The attribute is removed if the value is `null`. Otherwise, the value is converted to its string representation and assigned to the <xref href=\"System.Xml.Linq.XAttribute.Value\"></xref> property of the attribute.","nodes":[{"content":"The value to assign to the attribute.","pos":[0,37]},{"content":"The attribute is removed if the value is <ph id=\"ph1\">`null`</ph>.","pos":[38,86],"source":" The attribute is removed if the value is `null`."},{"content":"Otherwise, the value is converted to its string representation and assigned to the <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XAttribute.Value\"&gt;&lt;/xref&gt;</ph> property of the attribute.","pos":[87,250],"source":" Otherwise, the value is converted to its string representation and assigned to the <xref href=\"System.Xml.Linq.XAttribute.Value\"></xref> property of the attribute."}]}],"pos":[274393,274644],"yaml":true},{"content":"The <code>value</code> is an instance of <xref href=\"System.Xml.Linq.XObject\"></xref>.","nodes":[{"pos":[0,86],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> is an instance of <ph id=\"ph2\">&lt;xref href=\"System.Xml.Linq.XObject\"&gt;&lt;/xref&gt;</ph>.","source":"The <code>value</code> is an instance of <xref href=\"System.Xml.Linq.XObject\"></xref>."}],"pos":[274808,274895],"yaml":true},{"content":"Sets the value of a child element, adds a child element, or removes a child element.","nodes":[{"pos":[0,84],"content":"Sets the value of a child element, adds a child element, or removes a child element.","nodes":[{"content":"Sets the value of a child element, adds a child element, or removes a child element.","pos":[0,84]}]}],"pos":[276486,276571],"yaml":true},{"content":"This method is designed to make it easy to maintain a list of name/value pairs as a set of children elements. When maintaining the list, you need to add pairs, modify pairs, or delete pairs. If you call this method passing a name that does not exist as a child element, this method creates a child element for you. If you call this method passing the name of an existing child element, this method modifies the value of the child element to the value that you specify. If you pass `null` for `value`, this method removes the child element.  \n  \n This method will raise events.  \n  \n The value is assigned to the first child element with the specified name. If no child element with the specified name exists, a new child element is added. If the value is null, the first child element with the specified name, if any, is deleted.  \n  \n This method does not add child nodes or attributes to the specified child element. This method throws an exception if any object that derives from <xref:System.Xml.Linq.XObject> is passed as `value`.  \n  \n For more information, see [Maintaining Name/Value Pairs](http://msdn.microsoft.com/library/fe9798bf-b5e2-4a3c-a86c-7f8638912691).","nodes":[{"pos":[0,539],"content":"This method is designed to make it easy to maintain a list of name/value pairs as a set of children elements. When maintaining the list, you need to add pairs, modify pairs, or delete pairs. If you call this method passing a name that does not exist as a child element, this method creates a child element for you. If you call this method passing the name of an existing child element, this method modifies the value of the child element to the value that you specify. If you pass `null` for `value`, this method removes the child element.","nodes":[{"content":"This method is designed to make it easy to maintain a list of name/value pairs as a set of children elements.","pos":[0,109]},{"content":"When maintaining the list, you need to add pairs, modify pairs, or delete pairs.","pos":[110,190]},{"content":"If you call this method passing a name that does not exist as a child element, this method creates a child element for you.","pos":[191,314]},{"content":"If you call this method passing the name of an existing child element, this method modifies the value of the child element to the value that you specify.","pos":[315,468]},{"content":"If you pass <ph id=\"ph1\">`null`</ph> for <ph id=\"ph2\">`value`</ph>, this method removes the child element.","pos":[469,539],"source":" If you pass `null` for `value`, this method removes the child element."}]},{"pos":[546,576],"content":"This method will raise events.","nodes":[{"content":"This method will raise events.","pos":[0,30]}]},{"pos":[583,829],"content":"The value is assigned to the first child element with the specified name. If no child element with the specified name exists, a new child element is added. If the value is null, the first child element with the specified name, if any, is deleted.","nodes":[{"content":"The value is assigned to the first child element with the specified name. If no child element with the specified name exists, a new child element is added. If the value is null, the first child element with the specified name, if any, is deleted.","pos":[0,246],"nodes":[{"content":"The value is assigned to the first child element with the specified name.","pos":[0,73]},{"content":"If no child element with the specified name exists, a new child element is added.","pos":[74,155]},{"content":"If the value is null, the first child element with the specified name, if any, is deleted.","pos":[156,246]}]}]},{"pos":[836,1035],"content":"This method does not add child nodes or attributes to the specified child element. This method throws an exception if any object that derives from <xref:System.Xml.Linq.XObject> is passed as `value`.","nodes":[{"content":"This method does not add child nodes or attributes to the specified child element.","pos":[0,82]},{"content":"This method throws an exception if any object that derives from <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XObject&gt;</ph> is passed as <ph id=\"ph2\">`value`</ph>.","pos":[83,199],"source":" This method throws an exception if any object that derives from <xref:System.Xml.Linq.XObject> is passed as `value`."}]},{"pos":[1042,1171],"content":"For more information, see <bpt id=\"p1\">[</bpt>Maintaining Name/Value Pairs<ept id=\"p1\">](http://msdn.microsoft.com/library/fe9798bf-b5e2-4a3c-a86c-7f8638912691)</ept>.","source":"For more information, see [Maintaining Name/Value Pairs](http://msdn.microsoft.com/library/fe9798bf-b5e2-4a3c-a86c-7f8638912691)."}],"pos":[276582,277764],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Xml.Linq.XName\"></xref> that contains the name of the child element to change.","nodes":[{"pos":[0,100],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XName\"&gt;&lt;/xref&gt;</ph> that contains the name of the child element to change.","source":"An <xref href=\"System.Xml.Linq.XName\"></xref> that contains the name of the child element to change."}],"pos":[279413,279514],"yaml":true},{"content":"The value to assign to the child element. The child element is removed if the value is `null`. Otherwise, the value is converted to its string representation and assigned to the <xref href=\"System.Xml.Linq.XElement.Value\"></xref> property of the child element.","nodes":[{"pos":[0,260],"content":"The value to assign to the child element. The child element is removed if the value is `null`. Otherwise, the value is converted to its string representation and assigned to the <xref href=\"System.Xml.Linq.XElement.Value\"></xref> property of the child element.","nodes":[{"content":"The value to assign to the child element.","pos":[0,41]},{"content":"The child element is removed if the value is <ph id=\"ph1\">`null`</ph>.","pos":[42,94],"source":" The child element is removed if the value is `null`."},{"content":"Otherwise, the value is converted to its string representation and assigned to the <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XElement.Value\"&gt;&lt;/xref&gt;</ph> property of the child element.","pos":[95,260],"source":" Otherwise, the value is converted to its string representation and assigned to the <xref href=\"System.Xml.Linq.XElement.Value\"></xref> property of the child element."}]}],"pos":[279575,279836],"yaml":true},{"content":"The <code>value</code> is an instance of <xref href=\"System.Xml.Linq.XObject\"></xref>.","nodes":[{"pos":[0,86],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> is an instance of <ph id=\"ph2\">&lt;xref href=\"System.Xml.Linq.XObject\"&gt;&lt;/xref&gt;</ph>.","source":"The <code>value</code> is an instance of <xref href=\"System.Xml.Linq.XObject\"></xref>."}],"pos":[279998,280085],"yaml":true},{"content":"Sets the value of this element.","nodes":[{"pos":[0,31],"content":"Sets the value of this element.","nodes":[{"content":"Sets the value of this element.","pos":[0,31]}]}],"pos":[281547,281579],"yaml":true},{"content":"This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.  \n  \n It is invalid to pass an instance of a class that derives from <xref:System.Xml.Linq.XObject>, such as <xref:System.Xml.Linq.XElement>.","nodes":[{"pos":[0,121],"content":"This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.","nodes":[{"content":"This method will raise the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XObject.Changed&gt;</ph> and the <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XObject.Changing&gt;</ph> events.","pos":[0,121],"source":"This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events."}]},{"pos":[128,263],"content":"It is invalid to pass an instance of a class that derives from <xref:System.Xml.Linq.XObject>, such as <xref:System.Xml.Linq.XElement>.","nodes":[{"content":"It is invalid to pass an instance of a class that derives from <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XObject&gt;</ph>, such as <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XElement&gt;</ph>.","pos":[0,135],"source":"It is invalid to pass an instance of a class that derives from <xref:System.Xml.Linq.XObject>, such as <xref:System.Xml.Linq.XElement>."}]}],"pos":[281590,281858],"yaml":true,"extradata":"MT"},{"content":"The value to assign to this element. The value is converted to its string representation and assigned to the <xref href=\"System.Xml.Linq.XElement.Value\"></xref> property.","nodes":[{"pos":[0,170],"content":"The value to assign to this element. The value is converted to its string representation and assigned to the <xref href=\"System.Xml.Linq.XElement.Value\"></xref> property.","nodes":[{"content":"The value to assign to this element.","pos":[0,36]},{"content":"The value is converted to its string representation and assigned to the <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XElement.Value\"&gt;&lt;/xref&gt;</ph> property.","pos":[37,170],"source":" The value is converted to its string representation and assigned to the <xref href=\"System.Xml.Linq.XElement.Value\"></xref> property."}]}],"pos":[282666,282837],"yaml":true},{"content":"The <code>value</code> is `null`.","nodes":[{"pos":[0,33],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">`null`</ph>.","source":"The <code>value</code> is `null`."}],"pos":[283000,283034],"yaml":true},{"content":"The <code>value</code> is an <xref href=\"System.Xml.Linq.XObject\"></xref>.","nodes":[{"pos":[0,74],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> is an <ph id=\"ph2\">&lt;xref href=\"System.Xml.Linq.XObject\"&gt;&lt;/xref&gt;</ph>.","source":"The <code>value</code> is an <xref href=\"System.Xml.Linq.XObject\"></xref>."}],"pos":[283128,283203],"yaml":true},{"content":"Gets or sets the concatenated text contents of this element.","nodes":[{"pos":[0,60],"content":"Gets or sets the concatenated text contents of this element.","nodes":[{"content":"Gets or sets the concatenated text contents of this element.","pos":[0,60]}]}],"pos":[284580,284641],"yaml":true},{"content":"Using this property, you can get or set the value of an element.  \n  \n Setting this property will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.  \n  \n If you want to get the value of an element but you are not sure that it exists, it is more convenient to use the explicit conversion operators, and assign the element to a nullable type such as `string` or <xref:System.Nullable%601> of <xref:System.Int32>. If the element does not exist, the nullable type is set to `null`. By contrast, if you want to use this property, you must make sure that the <xref:System.Xml.Linq.XContainer.Element%2A> method does not return `null` before you access this property.","nodes":[{"pos":[0,64],"content":"Using this property, you can get or set the value of an element.","nodes":[{"content":"Using this property, you can get or set the value of an element.","pos":[0,64]}]},{"pos":[71,202],"content":"Setting this property will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.","nodes":[{"content":"Setting this property will raise the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XObject.Changed&gt;</ph> and the <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XObject.Changing&gt;</ph> events.","pos":[0,131],"source":"Setting this property will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events."}]},{"pos":[209,715],"content":"If you want to get the value of an element but you are not sure that it exists, it is more convenient to use the explicit conversion operators, and assign the element to a nullable type such as `string` or <xref:System.Nullable%601> of <xref:System.Int32>. If the element does not exist, the nullable type is set to `null`. By contrast, if you want to use this property, you must make sure that the <xref:System.Xml.Linq.XContainer.Element%2A> method does not return `null` before you access this property.","nodes":[{"content":"If you want to get the value of an element but you are not sure that it exists, it is more convenient to use the explicit conversion operators, and assign the element to a nullable type such as <ph id=\"ph1\">`string`</ph> or <ph id=\"ph2\">&lt;xref:System.Nullable%601&gt;</ph> of <ph id=\"ph3\">&lt;xref:System.Int32&gt;</ph>.","pos":[0,256],"source":"If you want to get the value of an element but you are not sure that it exists, it is more convenient to use the explicit conversion operators, and assign the element to a nullable type such as `string` or <xref:System.Nullable%601> of <xref:System.Int32>."},{"content":"If the element does not exist, the nullable type is set to <ph id=\"ph1\">`null`</ph>.","pos":[257,323],"source":" If the element does not exist, the nullable type is set to `null`."},{"content":"By contrast, if you want to use this property, you must make sure that the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XContainer.Element%2A&gt;</ph> method does not return <ph id=\"ph2\">`null`</ph> before you access this property.","pos":[324,506],"source":" By contrast, if you want to use this property, you must make sure that the <xref:System.Xml.Linq.XContainer.Element%2A> method does not return `null` before you access this property."}]}],"pos":[284652,285374],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.String\"></xref> that contains all of the text content of this element. If there are multiple text nodes, they will be concatenated.","nodes":[{"pos":[0,152],"content":"A <xref href=\"System.String\"></xref> that contains all of the text content of this element. If there are multiple text nodes, they will be concatenated.","nodes":[{"content":"A <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> that contains all of the text content of this element.","pos":[0,91],"source":"A <xref href=\"System.String\"></xref> that contains all of the text content of this element."},{"content":"If there are multiple text nodes, they will be concatenated.","pos":[92,152]}]}],"pos":[286015,286168],"yaml":true},{"content":"Write this element to an <xref href=\"System.Xml.XmlWriter\"></xref>.","nodes":[{"pos":[0,67],"content":"Write this element to an <ph id=\"ph1\">&lt;xref href=\"System.Xml.XmlWriter\"&gt;&lt;/xref&gt;</ph>.","source":"Write this element to an <xref href=\"System.Xml.XmlWriter\"></xref>."}],"pos":[287715,287783],"yaml":true},{"content":"An <xref href=\"System.Xml.XmlWriter\"></xref> into which this method will write.","nodes":[{"pos":[0,79],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Xml.XmlWriter\"&gt;&lt;/xref&gt;</ph> into which this method will write.","source":"An <xref href=\"System.Xml.XmlWriter\"></xref> into which this method will write."}],"pos":[289797,289877],"yaml":true},{"content":"Gets an XML schema definition that describes the XML representation of this object.","nodes":[{"pos":[0,83],"content":"Gets an XML schema definition that describes the XML representation of this object.","nodes":[{"content":"Gets an XML schema definition that describes the XML representation of this object.","pos":[0,83]}]}],"pos":[292787,292871],"yaml":true},{"content":"This method is part of implementation of the <xref:System.Xml.Serialization.IXmlSerializable> interface.  \n  \n This method is used internally for serializing object graphs that contain LINQ to XML objects. For an example of serializing an object graph that contains LINQ to XML objects, see [Serializing Object Graphs that Contain XElement Objects](http://msdn.microsoft.com/library/443d7904-a6f0-450a-b1a4-5d7ed869d1d5).","nodes":[{"pos":[0,104],"content":"This method is part of implementation of the <xref:System.Xml.Serialization.IXmlSerializable> interface.","nodes":[{"content":"This method is part of implementation of the <ph id=\"ph1\">&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;</ph> interface.","pos":[0,104],"source":"This method is part of implementation of the <xref:System.Xml.Serialization.IXmlSerializable> interface."}]},{"pos":[111,421],"content":"This method is used internally for serializing object graphs that contain LINQ to XML objects. For an example of serializing an object graph that contains LINQ to XML objects, see [Serializing Object Graphs that Contain XElement Objects](http://msdn.microsoft.com/library/443d7904-a6f0-450a-b1a4-5d7ed869d1d5).","nodes":[{"content":"This method is used internally for serializing object graphs that contain LINQ to XML objects.","pos":[0,94]},{"content":"For an example of serializing an object graph that contains LINQ to XML objects, see <bpt id=\"p1\">[</bpt>Serializing Object Graphs that Contain XElement Objects<ept id=\"p1\">](http://msdn.microsoft.com/library/443d7904-a6f0-450a-b1a4-5d7ed869d1d5)</ept>.","pos":[95,310],"source":" For an example of serializing an object graph that contains LINQ to XML objects, see [Serializing Object Graphs that Contain XElement Objects](http://msdn.microsoft.com/library/443d7904-a6f0-450a-b1a4-5d7ed869d1d5)."}]}],"pos":[292882,293308],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Xml.Schema.XmlSchema\"></xref> that describes the XML representation of the object that is produced by the <xref href=\"System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)\"></xref> method and consumed by the <xref href=\"System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)\"></xref> method.","nodes":[{"pos":[0,349],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Xml.Schema.XmlSchema\"&gt;&lt;/xref&gt;</ph> that describes the XML representation of the object that is produced by the <ph id=\"ph2\">&lt;xref href=\"System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)\"&gt;&lt;/xref&gt;</ph> method and consumed by the <ph id=\"ph3\">&lt;xref href=\"System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)\"&gt;&lt;/xref&gt;</ph> method.","source":"An <xref href=\"System.Xml.Schema.XmlSchema\"></xref> that describes the XML representation of the object that is produced by the <xref href=\"System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)\"></xref> method and consumed by the <xref href=\"System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)\"></xref> method."}],"pos":[293480,293830],"yaml":true},{"content":"Generates an object from its XML representation.","nodes":[{"pos":[0,48],"content":"Generates an object from its XML representation.","nodes":[{"content":"Generates an object from its XML representation.","pos":[0,48]}]}],"pos":[295494,295543],"yaml":true},{"content":"This method is part of implementation of the <xref:System.Xml.Serialization.IXmlSerializable> interface.  \n  \n This method is used internally for serializing object graphs that contain LINQ to XML objects. For an example of serializing an object graph that contains LINQ to XML objects, see [Serializing Object Graphs that Contain XElement Objects](http://msdn.microsoft.com/library/443d7904-a6f0-450a-b1a4-5d7ed869d1d5).","nodes":[{"pos":[0,104],"content":"This method is part of implementation of the <xref:System.Xml.Serialization.IXmlSerializable> interface.","nodes":[{"content":"This method is part of implementation of the <ph id=\"ph1\">&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;</ph> interface.","pos":[0,104],"source":"This method is part of implementation of the <xref:System.Xml.Serialization.IXmlSerializable> interface."}]},{"pos":[111,421],"content":"This method is used internally for serializing object graphs that contain LINQ to XML objects. For an example of serializing an object graph that contains LINQ to XML objects, see [Serializing Object Graphs that Contain XElement Objects](http://msdn.microsoft.com/library/443d7904-a6f0-450a-b1a4-5d7ed869d1d5).","nodes":[{"content":"This method is used internally for serializing object graphs that contain LINQ to XML objects.","pos":[0,94]},{"content":"For an example of serializing an object graph that contains LINQ to XML objects, see <bpt id=\"p1\">[</bpt>Serializing Object Graphs that Contain XElement Objects<ept id=\"p1\">](http://msdn.microsoft.com/library/443d7904-a6f0-450a-b1a4-5d7ed869d1d5)</ept>.","pos":[95,310],"source":" For an example of serializing an object graph that contains LINQ to XML objects, see [Serializing Object Graphs that Contain XElement Objects](http://msdn.microsoft.com/library/443d7904-a6f0-450a-b1a4-5d7ed869d1d5)."}]}],"pos":[295554,295980],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Xml.XmlReader\"></xref> from which the object is deserialized.","nodes":[{"pos":[0,84],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Xml.XmlReader\"&gt;&lt;/xref&gt;</ph> from which the object is deserialized.","source":"The <xref href=\"System.Xml.XmlReader\"></xref> from which the object is deserialized."}],"pos":[296149,296234],"yaml":true},{"content":"Converts an object into its XML representation.","nodes":[{"pos":[0,47],"content":"Converts an object into its XML representation.","nodes":[{"content":"Converts an object into its XML representation.","pos":[0,47]}]}],"pos":[297902,297950],"yaml":true},{"content":"This method is used internally for marshaling object graphs that contain LINQ to XML objects. For an example of serializing an object graph that contains LINQ to XML objects, see [Serializing Object Graphs that Contain XElement Objects](http://msdn.microsoft.com/library/443d7904-a6f0-450a-b1a4-5d7ed869d1d5).","nodes":[{"pos":[0,309],"content":"This method is used internally for marshaling object graphs that contain LINQ to XML objects. For an example of serializing an object graph that contains LINQ to XML objects, see [Serializing Object Graphs that Contain XElement Objects](http://msdn.microsoft.com/library/443d7904-a6f0-450a-b1a4-5d7ed869d1d5).","nodes":[{"content":"This method is used internally for marshaling object graphs that contain LINQ to XML objects.","pos":[0,93]},{"content":"For an example of serializing an object graph that contains LINQ to XML objects, see <bpt id=\"p1\">[</bpt>Serializing Object Graphs that Contain XElement Objects<ept id=\"p1\">](http://msdn.microsoft.com/library/443d7904-a6f0-450a-b1a4-5d7ed869d1d5)</ept>.","pos":[94,309],"source":" For an example of serializing an object graph that contains LINQ to XML objects, see [Serializing Object Graphs that Contain XElement Objects](http://msdn.microsoft.com/library/443d7904-a6f0-450a-b1a4-5d7ed869d1d5)."}]}],"pos":[297961,298271],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Xml.XmlWriter\"></xref> to which this object is serialized.","nodes":[{"pos":[0,81],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Xml.XmlWriter\"&gt;&lt;/xref&gt;</ph> to which this object is serialized.","source":"The <xref href=\"System.Xml.XmlWriter\"></xref> to which this object is serialized."}],"pos":[298441,298523],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Xml.Linq.XElement\n  commentId: T:System.Xml.Linq.XElement\n  id: XElement\n  children:\n  - System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XElement)\n  - System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XName)\n  - System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XStreamingElement)\n  - System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XName,System.Object)\n  - System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XName,System.Object[])\n  - System.Xml.Linq.XElement.AncestorsAndSelf\n  - System.Xml.Linq.XElement.AncestorsAndSelf(System.Xml.Linq.XName)\n  - System.Xml.Linq.XElement.Attribute(System.Xml.Linq.XName)\n  - System.Xml.Linq.XElement.Attributes\n  - System.Xml.Linq.XElement.Attributes(System.Xml.Linq.XName)\n  - System.Xml.Linq.XElement.DescendantNodesAndSelf\n  - System.Xml.Linq.XElement.DescendantsAndSelf(System.Xml.Linq.XName)\n  - System.Xml.Linq.XElement.DescendantsAndSelf\n  - System.Xml.Linq.XElement.EmptySequence\n  - System.Xml.Linq.XElement.FirstAttribute\n  - System.Xml.Linq.XElement.GetDefaultNamespace\n  - System.Xml.Linq.XElement.GetNamespaceOfPrefix(System.String)\n  - System.Xml.Linq.XElement.GetPrefixOfNamespace(System.Xml.Linq.XNamespace)\n  - System.Xml.Linq.XElement.HasAttributes\n  - System.Xml.Linq.XElement.HasElements\n  - System.Xml.Linq.XElement.IsEmpty\n  - System.Xml.Linq.XElement.LastAttribute\n  - System.Xml.Linq.XElement.Load(System.IO.TextReader,System.Xml.Linq.LoadOptions)\n  - System.Xml.Linq.XElement.Load(System.Xml.XmlReader,System.Xml.Linq.LoadOptions)\n  - System.Xml.Linq.XElement.Load(System.String,System.Xml.Linq.LoadOptions)\n  - System.Xml.Linq.XElement.Load(System.IO.Stream,System.Xml.Linq.LoadOptions)\n  - System.Xml.Linq.XElement.Load(System.IO.TextReader)\n  - System.Xml.Linq.XElement.Load(System.String)\n  - System.Xml.Linq.XElement.Load(System.IO.Stream)\n  - System.Xml.Linq.XElement.Load(System.Xml.XmlReader)\n  - System.Xml.Linq.XElement.LoadAsync(System.IO.Stream,System.Xml.Linq.LoadOptions,System.Threading.CancellationToken)\n  - System.Xml.Linq.XElement.LoadAsync(System.IO.TextReader,System.Xml.Linq.LoadOptions,System.Threading.CancellationToken)\n  - System.Xml.Linq.XElement.LoadAsync(System.Xml.XmlReader,System.Xml.Linq.LoadOptions,System.Threading.CancellationToken)\n  - System.Xml.Linq.XElement.Name\n  - System.Xml.Linq.XElement.NodeType\n  - System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.Nullable{System.Int64})\n  - System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.Nullable{System.Single})\n  - System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.Nullable{System.TimeSpan})\n  - System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.Nullable{System.UInt32})\n  - System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.Nullable{System.UInt64})\n  - System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.UInt32)\n  - System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.String)\n  - System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.TimeSpan)\n  - System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.UInt64)\n  - System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.Nullable{System.Int32})\n  - System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.Single)\n  - System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.Nullable{System.Guid})\n  - System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.Nullable{System.Boolean})\n  - System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.Nullable{System.Decimal})\n  - System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.Boolean)\n  - System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.DateTime)\n  - System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.DateTimeOffset)\n  - System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.Double)\n  - System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.Guid)\n  - System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.Decimal)\n  - System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.Int64)\n  - System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.Nullable{System.Double})\n  - System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.Nullable{System.DateTime})\n  - System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.Nullable{System.DateTimeOffset})\n  - System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.Int32)\n  - System.Xml.Linq.XElement.Parse(System.String)\n  - System.Xml.Linq.XElement.Parse(System.String,System.Xml.Linq.LoadOptions)\n  - System.Xml.Linq.XElement.RemoveAll\n  - System.Xml.Linq.XElement.RemoveAttributes\n  - System.Xml.Linq.XElement.ReplaceAll(System.Object)\n  - System.Xml.Linq.XElement.ReplaceAll(System.Object[])\n  - System.Xml.Linq.XElement.ReplaceAttributes(System.Object[])\n  - System.Xml.Linq.XElement.ReplaceAttributes(System.Object)\n  - System.Xml.Linq.XElement.Save(System.IO.Stream)\n  - System.Xml.Linq.XElement.Save(System.IO.TextWriter)\n  - System.Xml.Linq.XElement.Save(System.String)\n  - System.Xml.Linq.XElement.Save(System.Xml.XmlWriter)\n  - System.Xml.Linq.XElement.Save(System.IO.Stream,System.Xml.Linq.SaveOptions)\n  - System.Xml.Linq.XElement.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)\n  - System.Xml.Linq.XElement.Save(System.String,System.Xml.Linq.SaveOptions)\n  - System.Xml.Linq.XElement.SaveAsync(System.IO.Stream,System.Xml.Linq.SaveOptions,System.Threading.CancellationToken)\n  - System.Xml.Linq.XElement.SaveAsync(System.Xml.XmlWriter,System.Threading.CancellationToken)\n  - System.Xml.Linq.XElement.SaveAsync(System.IO.TextWriter,System.Xml.Linq.SaveOptions,System.Threading.CancellationToken)\n  - System.Xml.Linq.XElement.SetAttributeValue(System.Xml.Linq.XName,System.Object)\n  - System.Xml.Linq.XElement.SetElementValue(System.Xml.Linq.XName,System.Object)\n  - System.Xml.Linq.XElement.SetValue(System.Object)\n  - System.Xml.Linq.XElement.Value\n  - System.Xml.Linq.XElement.WriteTo(System.Xml.XmlWriter)\n  - System.Xml.Linq.XElement.WriteToAsync(System.Xml.XmlWriter,System.Threading.CancellationToken)\n  - System.Xml.Linq.XElement.System#Xml#Serialization#IXmlSerializable#GetSchema\n  - System.Xml.Linq.XElement.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)\n  - System.Xml.Linq.XElement.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)\n  langs:\n  - csharp\n  name: XElement\n  nameWithType: XElement\n  fullName: System.Xml.Linq.XElement\n  type: Class\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Represents an XML element.  See [XElement Class Overview](http://msdn.microsoft.com/library/d35180fe-7016-4895-9bfc-ba1e3f7875ec) and the Remarks section on this page for usage information and examples.\n  remarks: \"> [!NOTE]\\n>  To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#System.Xml.Linq/XLinq.cs#3367036406d1344a). You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/).  \\n  \\n This class represents an XML element, the fundamental XML construct.  See [XElement Class Overview](http://msdn.microsoft.com/library/d35180fe-7016-4895-9bfc-ba1e3f7875ec) for other usage information.  \\n  \\n An element has an <xref:System.Xml.Linq.XName>, optionally one or more attributes, and can optionally contain content (for more information, see <xref:System.Xml.Linq.XContainer.Nodes%2A>).  \\n  \\n An <xref:System.Xml.Linq.XElement> can contain the following types of content:  \\n  \\n-   <xref:System.Xml.Linq.XElement>  \\n  \\n-   <xref:System.Xml.Linq.XComment>  \\n  \\n-   <xref:System.Xml.Linq.XProcessingInstruction>  \\n  \\n-   <xref:System.Xml.Linq.XText>  \\n  \\n For details about the valid content of an <xref:System.Xml.Linq.XElement>, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).  \\n  \\n <xref:System.Xml.Linq.XElement> derives from <xref:System.Xml.Linq.XContainer>, which derives from <xref:System.Xml.Linq.XNode>.  \\n  \\n Some <xref:System.Xml.Linq.XElement> methods can be used from XAML. For more information, see [LINQ to XML Dynamic Properties](http://msdn.microsoft.com/library/0455f47c-4a68-4f2e-a3f8-dd1d85b99012).\"\n  example:\n  - \"The following example creates an XML tree. The content of the new element comes from a LINQ query.  \\n  \\n```csharp  \\n  \\n                XElement xmlTree1 = new XElement(\\\"Root\\\",  \\n    new XElement(\\\"Child1\\\", 1),  \\n    new XElement(\\\"Child2\\\", 2),  \\n    new XElement(\\\"Child3\\\", 3),  \\n    new XElement(\\\"Child4\\\", 4),  \\n    new XElement(\\\"Child5\\\", 5),  \\n    new XElement(\\\"Child6\\\", 6)  \\n);  \\n  \\nXElement xmlTree2 = new XElement(\\\"Root\\\",  \\n    from el in xmlTree1.Elements()  \\n    where((int)el >= 3 && (int)el <= 5)  \\n    select el  \\n);  \\nConsole.WriteLine(xmlTree2);  \\n```  \\n  \\n```vb  \\n  \\n                Dim xmlTree1 As XElement = _  \\n        <Root>  \\n            <Child1>1</Child1>  \\n            <Child2>2</Child2>  \\n            <Child3>3</Child3>  \\n            <Child4>4</Child4>  \\n            <Child5>5</Child5>  \\n            <Child6>6</Child6>  \\n        </Root>  \\n  \\nDim xmlTree2 As XElement = _   \\n    <Root>  \\n        <%= From el In xmlTree1.Elements() _  \\n            Where el.Value >= 3 And el.Value <= 5 _  \\n            Select el %>  \\n    </Root>  \\n  \\nConsole.WriteLine(xmlTree2)  \\n  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```xml  \\n  \\n                <Root>  \\n  <Child3>3</Child3>  \\n  <Child4>4</Child4>  \\n  <Child5>5</Child5>  \\n</Root>  \\n```  \\n  \\n The following is the same example, but in this case the XML is in a namespace. For more information, see [Working with XML Namespaces](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).  \\n  \\n```csharp  \\n  \\n                XNamespace aw = \\\"http://www.adventure-works.com\\\";  \\nXElement xmlTree1 = new XElement(aw + \\\"Root\\\",  \\n    new XElement(aw + \\\"Child1\\\", 1),  \\n    new XElement(aw + \\\"Child2\\\", 2),  \\n    new XElement(aw + \\\"Child3\\\", 3),  \\n    new XElement(aw + \\\"Child4\\\", 4),  \\n    new XElement(aw + \\\"Child5\\\", 5),  \\n    new XElement(aw + \\\"Child6\\\", 6)  \\n);  \\n  \\nXElement xmlTree2 = new XElement(aw + \\\"Root\\\",  \\n    from el in xmlTree1.Elements()  \\n    where((int)el >= 3 && (int)el <= 5)  \\n    select el  \\n);  \\nConsole.WriteLine(xmlTree2);  \\n```  \\n  \\n```vb  \\n  \\n                Imports <xmlns=\\\"http://www.adventure-works.com\\\">  \\n  \\nModule Module1  \\n    Sub Main()  \\n        Dim xmlTree1 As XElement = _  \\n            <Root>  \\n                <Child1>1</Child1>  \\n                <Child2>2</Child2>  \\n                <Child3>3</Child3>  \\n                <Child4>4</Child4>  \\n                <Child5>5</Child5>  \\n                <Child6>6</Child6>  \\n            </Root>  \\n  \\n        Dim xmlTree2 As XElement = _   \\n            <Root>  \\n                <%= From el In xmlTree1.Elements() _  \\n                    Where el.Value >= 3 And el.Value <= 5 _  \\n                    Select el %>  \\n            </Root>  \\n  \\n        Console.WriteLine(xmlTree2)  \\n    End SUb  \\nEnd Module  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```xml  \\n  \\n                <Root xmlns=\\\"http://www.adventure-works.com\\\">  \\n  <Child3>3</Child3>  \\n  <Child4>4</Child4>  \\n  <Child5>5</Child5>  \\n</Root>  \\n```\"\n  syntax:\n    content: 'public class XElement : System.Xml.Linq.XContainer, System.Xml.Serialization.IXmlSerializable'\n  inheritance:\n  - System.Object\n  - System.Xml.Linq.XObject\n  - System.Xml.Linq.XNode\n  - System.Xml.Linq.XContainer\n  implements:\n  - System.Xml.Serialization.IXmlSerializable\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Xml.Linq.XContainer.Add(System.Object)\n  - System.Xml.Linq.XContainer.Add(System.Object[])\n  - System.Xml.Linq.XContainer.AddFirst(System.Object)\n  - System.Xml.Linq.XContainer.AddFirst(System.Object[])\n  - System.Xml.Linq.XContainer.CreateWriter\n  - System.Xml.Linq.XContainer.DescendantNodes\n  - System.Xml.Linq.XContainer.Descendants\n  - System.Xml.Linq.XContainer.Descendants(System.Xml.Linq.XName)\n  - System.Xml.Linq.XContainer.Element(System.Xml.Linq.XName)\n  - System.Xml.Linq.XContainer.Elements\n  - System.Xml.Linq.XContainer.Elements(System.Xml.Linq.XName)\n  - System.Xml.Linq.XContainer.FirstNode\n  - System.Xml.Linq.XContainer.LastNode\n  - System.Xml.Linq.XContainer.Nodes\n  - System.Xml.Linq.XContainer.RemoveNodes\n  - System.Xml.Linq.XContainer.ReplaceNodes(System.Object)\n  - System.Xml.Linq.XContainer.ReplaceNodes(System.Object[])\n  - System.Xml.Linq.XNode.AddAfterSelf(System.Object)\n  - System.Xml.Linq.XNode.AddAfterSelf(System.Object[])\n  - System.Xml.Linq.XNode.AddBeforeSelf(System.Object)\n  - System.Xml.Linq.XNode.AddBeforeSelf(System.Object[])\n  - System.Xml.Linq.XNode.Ancestors\n  - System.Xml.Linq.XNode.Ancestors(System.Xml.Linq.XName)\n  - System.Xml.Linq.XNode.CompareDocumentOrder(System.Xml.Linq.XNode,System.Xml.Linq.XNode)\n  - System.Xml.Linq.XNode.CreateReader\n  - System.Xml.Linq.XNode.CreateReader(System.Xml.Linq.ReaderOptions)\n  - System.Xml.Linq.XNode.DeepEquals(System.Xml.Linq.XNode,System.Xml.Linq.XNode)\n  - System.Xml.Linq.XNode.DocumentOrderComparer\n  - System.Xml.Linq.XNode.ElementsAfterSelf\n  - System.Xml.Linq.XNode.ElementsAfterSelf(System.Xml.Linq.XName)\n  - System.Xml.Linq.XNode.ElementsBeforeSelf\n  - System.Xml.Linq.XNode.ElementsBeforeSelf(System.Xml.Linq.XName)\n  - System.Xml.Linq.XNode.EqualityComparer\n  - System.Xml.Linq.XNode.IsAfter(System.Xml.Linq.XNode)\n  - System.Xml.Linq.XNode.IsBefore(System.Xml.Linq.XNode)\n  - System.Xml.Linq.XNode.NextNode\n  - System.Xml.Linq.XNode.NodesAfterSelf\n  - System.Xml.Linq.XNode.NodesBeforeSelf\n  - System.Xml.Linq.XNode.PreviousNode\n  - System.Xml.Linq.XNode.ReadFrom(System.Xml.XmlReader)\n  - System.Xml.Linq.XNode.ReadFromAsync(System.Xml.XmlReader,System.Threading.CancellationToken)\n  - System.Xml.Linq.XNode.Remove\n  - System.Xml.Linq.XNode.ReplaceWith(System.Object)\n  - System.Xml.Linq.XNode.ReplaceWith(System.Object[])\n  - System.Xml.Linq.XNode.ToString\n  - System.Xml.Linq.XNode.ToString(System.Xml.Linq.SaveOptions)\n  - System.Xml.Linq.XObject.AddAnnotation(System.Object)\n  - System.Xml.Linq.XObject.Annotation(System.Type)\n  - System.Xml.Linq.XObject.Annotation``1\n  - System.Xml.Linq.XObject.Annotations(System.Type)\n  - System.Xml.Linq.XObject.Annotations``1\n  - System.Xml.Linq.XObject.BaseUri\n  - System.Xml.Linq.XObject.Changed\n  - System.Xml.Linq.XObject.Changing\n  - System.Xml.Linq.XObject.Document\n  - System.Xml.Linq.XObject.Parent\n  - System.Xml.Linq.XObject.RemoveAnnotations(System.Type)\n  - System.Xml.Linq.XObject.RemoveAnnotations``1\n  - System.Xml.Linq.XObject.System#Xml#IXmlLineInfo#HasLineInfo\n  - System.Xml.Linq.XObject.System#Xml#IXmlLineInfo#LineNumber\n  - System.Xml.Linq.XObject.System#Xml#IXmlLineInfo#LinePosition\n  extensionMethods:\n  - System.Xml.Schema.Extensions.GetSchemaInfo(System.Xml.Linq.XElement)\n  - System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XElement,System.Xml.Schema.XmlSchemaObject,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler)\n  - System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XElement,System.Xml.Schema.XmlSchemaObject,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler,System.Boolean)\n  - System.Xml.XPath.Extensions.CreateNavigator(System.Xml.Linq.XNode)\n  - System.Xml.XPath.Extensions.CreateNavigator(System.Xml.Linq.XNode,System.Xml.XmlNameTable)\n  - System.Xml.XPath.Extensions.XPathEvaluate(System.Xml.Linq.XNode,System.String)\n  - System.Xml.XPath.Extensions.XPathEvaluate(System.Xml.Linq.XNode,System.String,System.Xml.IXmlNamespaceResolver)\n  - System.Xml.XPath.Extensions.XPathSelectElement(System.Xml.Linq.XNode,System.String)\n  - System.Xml.XPath.Extensions.XPathSelectElement(System.Xml.Linq.XNode,System.String,System.Xml.IXmlNamespaceResolver)\n  - System.Xml.XPath.Extensions.XPathSelectElements(System.Xml.Linq.XNode,System.String)\n  - System.Xml.XPath.Extensions.XPathSelectElements(System.Xml.Linq.XNode,System.String,System.Xml.IXmlNamespaceResolver)\n  - System.Xml.XPath.XDocumentExtensions.ToXPathNavigable(System.Xml.Linq.XNode)\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XElement)\n  commentId: M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XElement)\n  id: '#ctor(System.Xml.Linq.XElement)'\n  parent: System.Xml.Linq.XElement\n  langs:\n  - csharp\n  name: XElement(XElement)\n  nameWithType: XElement.XElement(XElement)\n  fullName: XElement.XElement(XElement)\n  type: Constructor\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Initializes a new instance of the <xref href=\"System.Xml.Linq.XElement\"></xref> class from another <xref href=\"System.Xml.Linq.XElement\"></xref> object.\n  remarks: This constructor makes a deep copy of an element.\n  example:\n  - \"The following example creates an XML tree, creates a clone of the tree, and then calls <xref:System.Xml.Linq.XNode.DeepEquals%2A>, which tests whether the two XML trees are equal.  \\n  \\n```csharp  \\n  \\n                XElement xmlTree = new XElement(\\\"Root\\\",  \\n    new XAttribute(\\\"Att1\\\", 1),  \\n    new XElement(\\\"Child1\\\", 1),  \\n    new XElement(\\\"Child2\\\", 2)  \\n);  \\n  \\n// Create a clone of the tree.  \\nXElement treeClone = new XElement(xmlTree);  \\n  \\nConsole.WriteLine(\\\"xmlTree = treeClone: {0}\\\", XNode.DeepEquals(xmlTree, treeClone));  \\n  \\n// Do some work with xmlTree, perhaps pass it to other methods.  \\nxmlTree.Add(new XElement(\\\"Child3\\\", 3));  \\n  \\nConsole.WriteLine(\\\"xmlTree = treeClone: {0}\\\", XNode.DeepEquals(xmlTree, treeClone));  \\n```  \\n  \\n```vb  \\n  \\n                Dim xmlTree As XElement = _  \\n        <Root Att1=\\\"1\\\">  \\n            <Child1>1</Child1>  \\n            <Child2>2</Child2>  \\n        </Root>  \\n  \\n' Create a clone of the tree.  \\nDim treeClone As XElement = New XElement(xmlTree)  \\n  \\nConsole.WriteLine(\\\"xmlTree = treeClone: {0}\\\", XNode.DeepEquals(xmlTree, treeClone))  \\n  \\n' Do some work with xmlTree, perhaps pass it to other methods.  \\nxmlTree.Add(New XElement(\\\"Child3\\\", 3))  \\n  \\nConsole.WriteLine(\\\"xmlTree = treeClone: {0}\\\", XNode.DeepEquals(xmlTree, treeClone))  \\n  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```  \\n  \\n                xmlTree = treeClone: True  \\nxmlTree = treeClone: False  \\n```\"\n  syntax:\n    content: public XElement (System.Xml.Linq.XElement other);\n    parameters:\n    - id: other\n      type: System.Xml.Linq.XElement\n      description: An <xref href=\"System.Xml.Linq.XElement\"></xref> object to copy from.\n  overload: System.Xml.Linq.XElement.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XName)\n  commentId: M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XName)\n  id: '#ctor(System.Xml.Linq.XName)'\n  parent: System.Xml.Linq.XElement\n  langs:\n  - csharp\n  name: XElement(XName)\n  nameWithType: XElement.XElement(XName)\n  fullName: XElement.XElement(XName)\n  type: Constructor\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Initializes a new instance of the <xref href=\"System.Xml.Linq.XElement\"></xref> class with the specified name.\n  remarks: \"This constructor creates an element with no content and no attributes.  \\n  \\n There is an implicit conversion from string to <xref:System.Xml.Linq.XName>. Typical use of this constructor is to specify a string as the parameter instead of creating a new <xref:System.Xml.Linq.XName>. When creating an element in a namespace, typical use is to use the addition operator overload with an <xref:System.Xml.Linq.XNamespace> and a string to create an <xref:System.Xml.Linq.XName>. For more information, see [Working with XML Namespaces](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).\"\n  example:\n  - \"The following example creates an element with no content.  \\n  \\n```csharp  \\n  \\n                XElement el = new XElement(\\\"Root\\\");  \\nConsole.WriteLine(el);  \\n```  \\n  \\n```vb  \\n  \\n                Dim el As XElement = <Root/>  \\nConsole.WriteLine(el)  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```xml  \\n  \\n<Root />  \\n```  \\n  \\n The following example creates an element in a namespace with no content. For more information, see [Working with XML Namespaces](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).  \\n  \\n```  \\n  \\n                XNamespace aw = \\\"http://www.adventure-works.com\\\";  \\nXElement root = new XElement(aw + \\\"Root\\\");  \\nConsole.WriteLine(root);  \\n```  \\n  \\n```vb  \\n  \\n                Imports <xmlns=\\\"http://www.adventure-works.com\\\">  \\n  \\nModule Module1  \\n    Sub Main()  \\n        Dim root = <Root/>  \\n        Console.WriteLine(root)  \\n    End Sub  \\nEnd Module  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```xml  \\n  \\n<Root xmlns=\\\"http://www.adventure-works.com\\\" />  \\n```\"\n  syntax:\n    content: public XElement (System.Xml.Linq.XName name);\n    parameters:\n    - id: name\n      type: System.Xml.Linq.XName\n      description: An <xref href=\"System.Xml.Linq.XName\"></xref> that contains the name of the element.\n  overload: System.Xml.Linq.XElement.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XStreamingElement)\n  commentId: M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XStreamingElement)\n  id: '#ctor(System.Xml.Linq.XStreamingElement)'\n  parent: System.Xml.Linq.XElement\n  langs:\n  - csharp\n  name: XElement(XStreamingElement)\n  nameWithType: XElement.XElement(XStreamingElement)\n  fullName: XElement.XElement(XStreamingElement)\n  type: Constructor\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Initializes a new instance of the <xref href=\"System.Xml.Linq.XElement\"></xref> class from an <xref href=\"System.Xml.Linq.XStreamingElement\"></xref> object.\n  remarks: This constructor iterates through the contents of the specified <xref:System.Xml.Linq.XStreamingElement>, and creates an element with its contents.\n  example:\n  - \"The following example creates a source XML tree, and then creates an <xref:System.Xml.Linq.XStreamingElement> from a query on the source XML tree. It then serializes the <xref:System.Xml.Linq.XStreamingElement> to the console, adds a new element to the source XML tree, and then serializes the <xref:System.Xml.Linq.XStreamingElement> again. You can see that element newly added to the source XML tree is not included in the first serialization, but is included in the second.  \\n  \\n```csharp  \\n  \\n                XElement src = new XElement(\\\"Root\\\",  \\n                   new XElement(\\\"Child1\\\", 1),  \\n                   new XElement(\\\"Child2\\\", 2),  \\n                   new XElement(\\\"Child3\\\", 3)  \\n               );  \\nXStreamingElement xse = new XStreamingElement(\\\"NewRoot\\\",  \\n                            from el in src.Elements()  \\n                            where (int)el >= 2  \\n                            select el  \\n                        );  \\nConsole.WriteLine(xse);  \\nsrc.Add(new XElement(\\\"Child4\\\", 4));  \\nConsole.WriteLine(\\\"----\\\");  \\nConsole.WriteLine(xse);  \\n```  \\n  \\n```vb  \\n  \\n                Dim src As XElement = _   \\n        <Root>  \\n            <Child1>1</Child1>  \\n            <Child2>2</Child2>  \\n            <Child3>3</Child3>  \\n        </Root>  \\nDim xse As XStreamingElement = New XStreamingElement(\\\"NewRoot\\\", _  \\n        From el In src.Elements() _  \\n        Where (CInt(el) >= 2) _  \\n        Select el _  \\n)  \\nConsole.WriteLine(xse)  \\nsrc.Add(New XElement(\\\"Child4\\\", 4))  \\nConsole.WriteLine(\\\"----\\\")  \\nConsole.WriteLine(xse)  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```  \\n  \\n                <NewRoot>  \\n  <Child2>2</Child2>  \\n  <Child3>3</Child3>  \\n</NewRoot>  \\n----  \\n<NewRoot>  \\n  <Child2>2</Child2>  \\n  <Child3>3</Child3>  \\n  <Child4>4</Child4>  \\n</NewRoot>  \\n```\"\n  syntax:\n    content: public XElement (System.Xml.Linq.XStreamingElement other);\n    parameters:\n    - id: other\n      type: System.Xml.Linq.XStreamingElement\n      description: An <xref href=\"System.Xml.Linq.XStreamingElement\"></xref> that contains unevaluated queries that will be iterated for the contents of this <xref href=\"System.Xml.Linq.XElement\"></xref>.\n  overload: System.Xml.Linq.XElement.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XName,System.Object)\n  commentId: M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XName,System.Object)\n  id: '#ctor(System.Xml.Linq.XName,System.Object)'\n  parent: System.Xml.Linq.XElement\n  langs:\n  - csharp\n  name: XElement(XName, Object)\n  nameWithType: XElement.XElement(XName, Object)\n  fullName: XElement.XElement(XName, Object)\n  type: Constructor\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Initializes a new instance of the <xref href=\"System.Xml.Linq.XElement\"></xref> class with the specified name and content.\n  remarks: \"This constructor creates an element with the specified content and attributes.  \\n  \\n There is an implicit conversion from string to <xref:System.Xml.Linq.XName>. Typical use of this constructor is to specify a string as the parameter instead of creating a new <xref:System.Xml.Linq.XName>.  \\n  \\n When creating an element in a namespace, typical use is to use the addition operator overload with an <xref:System.Xml.Linq.XNamespace> and a string to create an <xref:System.Xml.Linq.XName>. For more information, see [Working with XML Namespaces](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).  \\n  \\n For details about the valid content that can be passed to this constructor, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).\"\n  example:\n  - \"The following example creates an XML tree. The content of the new element comes from a LINQ query.  \\n  \\n```csharp  \\n  \\n                XElement xmlTree1 = new XElement(\\\"Root\\\",  \\n    new XElement(\\\"Child1\\\", 1),  \\n    new XElement(\\\"Child2\\\", 2),  \\n    new XElement(\\\"Child3\\\", 3),  \\n    new XElement(\\\"Child4\\\", 4),  \\n    new XElement(\\\"Child5\\\", 5),  \\n    new XElement(\\\"Child6\\\", 6)  \\n);  \\n  \\nXElement xmlTree2 = new XElement(\\\"Root\\\",  \\n    from el in xmlTree1.Elements()  \\n    where((int)el >= 3 && (int)el <= 5)  \\n    select el  \\n);  \\nConsole.WriteLine(xmlTree2);  \\n```  \\n  \\n```vb  \\n  \\n                Dim xmlTree1 As XElement = _   \\n        <Root>  \\n            <Child1>1</Child1>  \\n            <Child2>2</Child2>  \\n            <Child3>3</Child3>  \\n            <Child4>4</Child4>  \\n            <Child5>5</Child5>  \\n            <Child6>6</Child6>  \\n        </Root>  \\n  \\nDim xmlTree2 As XElement = _  \\n    <Root>  \\n        <%= From el In xmlTree1.Elements() _  \\n            Where el.Value >= 3 And el.Value <= 5 _  \\n            Select el %>  \\n    </Root>  \\n  \\nConsole.WriteLine(xmlTree2)  \\n  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```xml  \\n  \\n                <Root>  \\n  <Child3>3</Child3>  \\n  <Child4>4</Child4>  \\n  <Child5>5</Child5>  \\n</Root>  \\n```  \\n  \\n The following example creates an XML tree with a variety of types of content.  \\n  \\n```csharp  \\n  \\n                XElement root;  \\n  \\n// String content:  \\nroot = new XElement(\\\"Root\\\", \\\"Some text\\\");  \\nConsole.WriteLine(root);  \\n  \\n// XElement object content:  \\nroot = new XElement(\\\"Root\\\",   \\n    new XElement(\\\"NewChild\\\", \\\"n\\\")  \\n);  \\nConsole.WriteLine(root);  \\n  \\n// XAttribute object content:  \\nroot = new XElement(\\\"Root\\\",   \\n    new XAttribute(\\\"NewAttribute\\\", \\\"n\\\")  \\n);  \\nConsole.WriteLine(root);  \\n  \\n// Double content:  \\ndouble dbl = 12.345;  \\nroot = new XElement(\\\"Root\\\", dbl);  \\nConsole.WriteLine(root);  \\n  \\n// DateTime content:  \\nDateTime dt = new DateTime(2006, 10, 6, 12, 30, 00);  \\nroot = new XElement(\\\"Root\\\", dt);  \\nConsole.WriteLine(root);  \\n  \\n// String array content:  \\n// Any collection other than a collection of XElement or XAttribute objects  \\n// are converted to strings. The strings are concatenated and added.  \\nstring[] stringArray = {  \\n    \\\"abc\\\",  \\n    \\\"def\\\",  \\n    \\\"ghi\\\"  \\n};  \\nroot = new XElement(\\\"Root\\\", stringArray);  \\nConsole.WriteLine(root);  \\n  \\n// XElement object array content:  \\nXElement[] ellArray = {  \\n    new XElement(\\\"NewChild1\\\", 1),  \\n    new XElement(\\\"NewChild2\\\", 2),  \\n    new XElement(\\\"NewChild3\\\", 3)  \\n};  \\nroot = new XElement(\\\"Root\\\", ellArray);  \\nConsole.WriteLine(root);  \\n  \\n// XAttribute object array content:  \\nXAttribute[] attArray = {  \\n    new XAttribute(\\\"NewAtt1\\\", 1),  \\n    new XAttribute(\\\"NewAtt2\\\", 2),  \\n    new XAttribute(\\\"NewAtt3\\\", 3)  \\n};  \\nroot = new XElement(\\\"Root\\\", attArray);  \\nConsole.WriteLine(root);  \\n```  \\n  \\n```vb  \\n  \\n                Dim root As XElement  \\n  \\n' String content:  \\nroot = <Root>Some text</Root>  \\nConsole.WriteLine(root)  \\n  \\n' XElement object content:  \\nroot = <Root>  \\n           <NewChild>n</NewChild>  \\n       </Root>  \\nConsole.WriteLine(root)  \\n  \\n' XAttribute object content:  \\nroot = <Root NewAttribute=\\\"n\\\"/>  \\nConsole.WriteLine(root)  \\n  \\n' Double content:  \\nDim dbl As Double = 12.345  \\nroot = <Root><%= dbl %></Root>  \\nConsole.WriteLine(root)  \\n  \\n' DateTime content:  \\nDim dt As DateTime = New DateTime(2006, 10, 6, 12, 30, 0)  \\nroot = <Root><%= dt %></Root>  \\nConsole.WriteLine(root)  \\n  \\n' String array content:  \\n' Any collection other than a collection of XElement or XAttribute objects  \\n' are converted to strings. The strings are concatenated and added.  \\n  \\nDim stringArray As String() = { _  \\n    \\\"abc\\\", _  \\n    \\\"def\\\", _  \\n    \\\"ghi\\\" _  \\n}  \\nroot = <Root><%= stringArray %></Root>  \\nConsole.WriteLine(root)  \\n  \\n' XElement object array content:  \\nDim ellArray As XElement() = { _  \\n    <NewChild1>1</NewChild1>, _  \\n    <NewChild2>2</NewChild2>, _  \\n    <NewChild3>3</NewChild3> _  \\n}  \\n  \\nroot = <Root><%= ellArray %></Root>  \\nConsole.WriteLine(root)  \\n  \\n' XAttribute object array content  \\nDim attArray As XAttribute() = { _  \\n    New XAttribute(\\\"NewAtt1\\\", 1), _  \\n    New XAttribute(\\\"NewAtt2\\\", 2), _  \\n    New XAttribute(\\\"NewAtt3\\\", 3) _  \\n}  \\nroot = <Root><%= attArray %></Root>  \\nConsole.WriteLine(root)  \\n  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```  \\n  \\n                <Root>Some text</Root>  \\n<Root>  \\n  <NewChild>n</NewChild>  \\n</Root>  \\n<Root NewAttribute=\\\"n\\\" />  \\n<Root>12.345</Root>  \\n<Root>2006-10-06T12:30:00</Root>  \\n<Root>abcdefghi</Root>  \\n<Root>  \\n  <NewChild1>1</NewChild1>  \\n  <NewChild2>2</NewChild2>  \\n  <NewChild3>3</NewChild3>  \\n</Root>  \\n<Root NewAtt1=\\\"1\\\" NewAtt2=\\\"2\\\" NewAtt3=\\\"3\\\" />  \\n```  \\n  \\n The following example creates an XML tree in a namespace.  \\n  \\n```csharp  \\n  \\n                // Create an XML tree in a namespace.  \\nXNamespace aw = \\\"http://www.adventure-works.com\\\";  \\nXElement root = new XElement(aw + \\\"Root\\\",  \\n    new XElement(aw + \\\"Child\\\", \\\"child content\\\")  \\n);  \\nConsole.WriteLine(root);  \\n```  \\n  \\n```vb  \\n  \\n                ' Create an XML tree in a namespace.  \\nDim root As XElement = _   \\n    <Root xmlns='http://www.adventure-works.com'>  \\n        <Child>child content</Child>  \\n    </Root>  \\nConsole.WriteLine(root)  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```xml  \\n  \\n                <Root xmlns=\\\"http://www.adventure-works.com\\\">  \\n  <Child>child content</Child>  \\n</Root>  \\n```  \\n  \\n The following example creates an XML tree with nested namespaces.  \\n  \\n```csharp  \\n  \\n                // Create an XML tree with nested namespaces.  \\nXNamespace aw = \\\"http://www.adventure-works.com\\\";  \\nXNamespace fc = \\\"www.fourthcoffee.com\\\";  \\nXDocument root = new XDocument(  \\n    new XDeclaration(\\\"1.0\\\", \\\"utf-8\\\", \\\"yes\\\"),  \\n    new XElement(aw + \\\"Root\\\",  \\n        new XElement(fc + \\\"Child\\\",  \\n            new XElement(aw + \\\"DifferentChild\\\", \\\"other content\\\")  \\n        )  \\n    )  \\n);  \\nConsole.WriteLine(root);  \\n```  \\n  \\n```vb  \\n  \\n                ' Create an XML tree with nested namespaces.  \\nDim root As XDocument = _   \\n    <?xml version='1.0'?>  \\n    <Root xmlns='http://www.adventure-works.com'>  \\n        <Child xmlns='www.fourthcoffee.com'>  \\n        <DifferentChild xmlns='http://www.adventure-works.com'>other content</DifferentChild>  \\n        </Child>  \\n    </Root>  \\nConsole.WriteLine(root)  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```xml  \\n  \\n                <Root xmlns=\\\"http://www.adventure-works.com\\\">  \\n  <Child xmlns=\\\"www.fourthcoffee.com\\\">  \\n    <DifferentChild xmlns=\\\"http://www.adventure-works.com\\\">other content</DifferentChild>  \\n  </Child>  \\n</Root>  \\n```\"\n  syntax:\n    content: public XElement (System.Xml.Linq.XName name, object content);\n    parameters:\n    - id: name\n      type: System.Xml.Linq.XName\n      description: An <xref href=\"System.Xml.Linq.XName\"></xref> that contains the element name.\n    - id: content\n      type: System.Object\n      description: The contents of the element.\n  overload: System.Xml.Linq.XElement.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XName,System.Object[])\n  commentId: M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XName,System.Object[])\n  id: '#ctor(System.Xml.Linq.XName,System.Object[])'\n  parent: System.Xml.Linq.XElement\n  langs:\n  - csharp\n  name: XElement(XName, Object[])\n  nameWithType: XElement.XElement(XName, Object[])\n  fullName: XElement.XElement(XName, Object[])\n  type: Constructor\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Initializes a new instance of the <xref href=\"System.Xml.Linq.XElement\"></xref> class with the specified name and content.\n  remarks: \"This constructor creates an element with the specified content and attributes.  \\n  \\n There is an implicit conversion from string to <xref:System.Xml.Linq.XName>. Typical use of this constructor is to specify a string as the parameter instead of creating a new <xref:System.Xml.Linq.XName>.  \\n  \\n When creating an element in a namespace, typical use is to use the addition operator overload with an <xref:System.Xml.Linq.XNamespace> and a string to create an <xref:System.Xml.Linq.XName>. For more information, see [Working with XML Namespaces](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).  \\n  \\n For details about the valid content that can be passed to this constructor, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).\"\n  example:\n  - \"The following example creates an XML tree. The content of the new element comes from a LINQ query.  \\n  \\n```csharp  \\n  \\n                XElement xmlTree1 = new XElement(\\\"Root\\\",  \\n    new XElement(\\\"Child1\\\", 1),  \\n    new XElement(\\\"Child2\\\", 2),  \\n    new XElement(\\\"Child3\\\", 3),  \\n    new XElement(\\\"Child4\\\", 4),  \\n    new XElement(\\\"Child5\\\", 5),  \\n    new XElement(\\\"Child6\\\", 6)  \\n);  \\n  \\nXElement xmlTree2 = new XElement(\\\"Root\\\",  \\n    from el in xmlTree1.Elements()  \\n    where((int)el >= 3 && (int)el <= 5)  \\n    select el  \\n);  \\nConsole.WriteLine(xmlTree2);  \\n```  \\n  \\n```vb  \\n  \\n                Dim xmlTree1 As XElement = _   \\n        <Root>  \\n            <Child1>1</Child1>  \\n            <Child2>2</Child2>  \\n            <Child3>3</Child3>  \\n            <Child4>4</Child4>  \\n            <Child5>5</Child5>  \\n            <Child6>6</Child6>  \\n        </Root>  \\n  \\nDim xmlTree2 As XElement = _   \\n    <Root>  \\n        <%= From el In xmlTree1.Elements() _  \\n            Where el.Value >= 3 And el.Value <= 5 _  \\n            Select el %>  \\n    </Root>  \\n  \\nConsole.WriteLine(xmlTree2)  \\n  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```xml  \\n  \\n                <Root>  \\n  <Child3>3</Child3>  \\n  <Child4>4</Child4>  \\n  <Child5>5</Child5>  \\n</Root>  \\n```  \\n  \\n The following example creates an XML tree with a variety of types of content.  \\n  \\n```csharp  \\n  \\n                XElement root;  \\n  \\n// String content:  \\nroot = new XElement(\\\"Root\\\", \\\"Some text\\\");  \\nConsole.WriteLine(root);  \\n  \\n// XElement object content:  \\nroot = new XElement(\\\"Root\\\",   \\n    new XElement(\\\"NewChild\\\", \\\"n\\\")  \\n);  \\nConsole.WriteLine(root);  \\n  \\n// XAttribute object content:  \\nroot = new XElement(\\\"Root\\\",   \\n    new XAttribute(\\\"NewAttribute\\\", \\\"n\\\")  \\n);  \\nConsole.WriteLine(root);  \\n  \\n// Double content:  \\ndouble dbl = 12.345;  \\nroot = new XElement(\\\"Root\\\", dbl);  \\nConsole.WriteLine(root);  \\n  \\n// DateTime content:  \\nDateTime dt = new DateTime(2006, 10, 6, 12, 30, 00);  \\nroot = new XElement(\\\"Root\\\", dt);  \\nConsole.WriteLine(root);  \\n  \\n// String array content:  \\n// Any collection other than a collection of XElement or XAttribute objects  \\n// are converted to strings. The strings are concatenated and added.  \\nstring[] stringArray = {  \\n    \\\"abc\\\",  \\n    \\\"def\\\",  \\n    \\\"ghi\\\"  \\n};  \\nroot = new XElement(\\\"Root\\\", stringArray);  \\nConsole.WriteLine(root);  \\n  \\n// XElement object array content:  \\nXElement[] ellArray = {  \\n    new XElement(\\\"NewChild1\\\", 1),  \\n    new XElement(\\\"NewChild2\\\", 2),  \\n    new XElement(\\\"NewChild3\\\", 3)  \\n};  \\nroot = new XElement(\\\"Root\\\", ellArray);  \\nConsole.WriteLine(root);  \\n  \\n// XAttribute object array content:  \\nXAttribute[] attArray = {  \\n    new XAttribute(\\\"NewAtt1\\\", 1),  \\n    new XAttribute(\\\"NewAtt2\\\", 2),  \\n    new XAttribute(\\\"NewAtt3\\\", 3)  \\n};  \\nroot = new XElement(\\\"Root\\\", attArray);  \\nConsole.WriteLine(root);  \\n```  \\n  \\n```vb  \\n  \\n                Dim root As XElement  \\n  \\n' String content:  \\nroot = <Root>Some text</Root>  \\nConsole.WriteLine(root)  \\n  \\n' XElement object content:  \\nroot = <Root>  \\n           <NewChild>n</NewChild>  \\n       </Root>  \\nConsole.WriteLine(root)  \\n  \\n' XAttribute object content:  \\nroot = <Root NewAttribute=\\\"n\\\"/>  \\nConsole.WriteLine(root)  \\n  \\n' Double content:  \\nDim dbl As Double = 12.345  \\nroot = <Root><%= dbl %></Root>  \\nConsole.WriteLine(root)  \\n  \\n' DateTime content:  \\nDim dt As DateTime = New DateTime(2006, 10, 6, 12, 30, 0)  \\nroot = <Root><%= dt %></Root>  \\nConsole.WriteLine(root)  \\n  \\n' String array content:  \\n' Any collection other than a collection of XElement or XAttribute objects  \\n' are converted to strings. The strings are concatenated and added.  \\n  \\nDim stringArray As String() = { _  \\n    \\\"abc\\\", _  \\n    \\\"def\\\", _  \\n    \\\"ghi\\\" _  \\n}  \\nroot = <Root><%= stringArray %></Root>  \\nConsole.WriteLine(root)  \\n  \\n' XElement object array content:  \\nDim ellArray As XElement() = { _  \\n    <NewChild1>1</NewChild1>, _  \\n    <NewChild2>2</NewChild2>, _  \\n    <NewChild3>3</NewChild3> _  \\n}  \\n  \\nroot = <Root><%= ellArray %></Root>  \\nConsole.WriteLine(root)  \\n  \\n' XAttribute object array content  \\nDim attArray As XAttribute() = { _  \\n    New XAttribute(\\\"NewAtt1\\\", 1), _  \\n    New XAttribute(\\\"NewAtt2\\\", 2), _  \\n    New XAttribute(\\\"NewAtt3\\\", 3) _  \\n}  \\nroot = <Root><%= attArray %></Root>  \\nConsole.WriteLine(root)  \\n  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```  \\n  \\n                <Root>Some text</Root>  \\n<Root>  \\n  <NewChild>n</NewChild>  \\n</Root>  \\n<Root NewAttribute=\\\"n\\\" />  \\n<Root>12.345</Root>  \\n<Root>2006-10-06T12:30:00</Root>  \\n<Root>abcdefghi</Root>  \\n<Root>  \\n  <NewChild1>1</NewChild1>  \\n  <NewChild2>2</NewChild2>  \\n  <NewChild3>3</NewChild3>  \\n</Root>  \\n<Root NewAtt1=\\\"1\\\" NewAtt2=\\\"2\\\" NewAtt3=\\\"3\\\" />  \\n```  \\n  \\n The following example creates an XML tree in a namespace.  \\n  \\n```csharp  \\n  \\n                // Create an XML tree in a namespace.  \\nXNamespace aw = \\\"http://www.adventure-works.com\\\";  \\nXElement root = new XElement(aw + \\\"Root\\\",  \\n    new XElement(aw + \\\"Child\\\", \\\"child content\\\")  \\n);  \\nConsole.WriteLine(root);  \\n```  \\n  \\n```vb  \\n  \\n                ' Create an XML tree in a namespace.  \\nDim root As XElement = _   \\n    <Root xmlns='http://www.adventure-works.com'>  \\n        <Child>child content</Child>  \\n    </Root>  \\nConsole.WriteLine(root)  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```xml  \\n  \\n                <Root xmlns=\\\"http://www.adventure-works.com\\\">  \\n  <Child>child content</Child>  \\n</Root>  \\n```  \\n  \\n The following example creates an XML tree with nested namespaces.  \\n  \\n```csharp  \\n  \\n                // Create an XML tree with nested namespaces.  \\nXNamespace aw = \\\"http://www.adventure-works.com\\\";  \\nXNamespace fc = \\\"www.fourthcoffee.com\\\";  \\nXElement root = new XElement(aw + \\\"Root\\\",  \\n    new XElement(fc + \\\"Child\\\",  \\n        new XElement(aw + \\\"DifferentChild\\\", \\\"other content\\\")  \\n    )  \\n);  \\nConsole.WriteLine(root);  \\n```  \\n  \\n```vb  \\n  \\n                ' Create an XML tree with nested namespaces.  \\nDim root As XDocument = _   \\n    <?xml version='1.0'?>  \\n    <Root xmlns='http://www.adventure-works.com'>  \\n        <Child xmlns='www.fourthcoffee.com'>  \\n        <DifferentChild xmlns='http://www.adventure-works.com'>other content</DifferentChild>  \\n        </Child>  \\n    </Root>  \\nConsole.WriteLine(root)  \\n  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```xml  \\n  \\n                <Root xmlns=\\\"http://www.adventure-works.com\\\">  \\n  <Child xmlns=\\\"www.fourthcoffee.com\\\">  \\n    <DifferentChild xmlns=\\\"http://www.adventure-works.com\\\">other content</DifferentChild>  \\n  </Child>  \\n</Root>  \\n  \\n```\"\n  syntax:\n    content: public XElement (System.Xml.Linq.XName name, object[] content);\n    parameters:\n    - id: name\n      type: System.Xml.Linq.XName\n      description: An <xref href=\"System.Xml.Linq.XName\"></xref> that contains the element name.\n    - id: content\n      type: System.Object[]\n      description: The initial content of the element.\n  overload: System.Xml.Linq.XElement.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XElement.AncestorsAndSelf\n  commentId: M:System.Xml.Linq.XElement.AncestorsAndSelf\n  id: AncestorsAndSelf\n  parent: System.Xml.Linq.XElement\n  langs:\n  - csharp\n  name: AncestorsAndSelf()\n  nameWithType: XElement.AncestorsAndSelf()\n  fullName: XElement.AncestorsAndSelf()\n  type: Method\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Returns a collection of elements that contain this element, and the ancestors of this element.\n  remarks: \"The elements in the returned collection are in reverse document order.  \\n  \\n This method uses deferred execution.\"\n  example:\n  - \"The following example creates an XML tree. It then finds the `GrandChild` element, and then prints the ancestors of it.  \\n  \\n```csharp  \\n  \\n                XElement xmlTree = new XElement(\\\"Root\\\",  \\n    new XElement(\\\"Child\\\",  \\n        new XElement(\\\"GrandChild\\\", \\\"element content\\\")  \\n    )  \\n);  \\nXElement gc = xmlTree.Element(\\\"Child\\\").Element(\\\"GrandChild\\\");  \\nIEnumerable<XElement> aas =  \\n    from el in gc.AncestorsAndSelf()  \\n    select el;  \\nforeach (XElement el in aas)  \\n    Console.WriteLine(el.Name);  \\n```  \\n  \\n```vb  \\n  \\n                Dim xmlTree As XElement = _   \\n    <Root>  \\n        <Child>  \\n            <GrandChild>element content</GrandChild>  \\n        </Child>  \\n    </Root>  \\n  \\nDim GC As XElement = xmlTree.<Child>.<GrandChild>(0)  \\n  \\nDim aas As IEnumerable(Of XElement) = _  \\n    From el In GC.AncestorsAndSelf() _  \\n    Select el  \\n  \\nFor Each el In aas  \\n    Console.WriteLine(el.Name)  \\nNext  \\n  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```  \\n  \\n                GrandChild  \\nChild  \\nRoot  \\n```\"\n  syntax:\n    content: public System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement> AncestorsAndSelf ();\n    parameters: []\n    return:\n      type: System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> of <xref href=\"System.Xml.Linq.XElement\"></xref> of elements that contain this element, and the ancestors of this element.\n  overload: System.Xml.Linq.XElement.AncestorsAndSelf*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XElement.AncestorsAndSelf(System.Xml.Linq.XName)\n  commentId: M:System.Xml.Linq.XElement.AncestorsAndSelf(System.Xml.Linq.XName)\n  id: AncestorsAndSelf(System.Xml.Linq.XName)\n  parent: System.Xml.Linq.XElement\n  langs:\n  - csharp\n  name: AncestorsAndSelf(XName)\n  nameWithType: XElement.AncestorsAndSelf(XName)\n  fullName: XElement.AncestorsAndSelf(XName)\n  type: Method\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Returns a filtered collection of elements that contain this element, and the ancestors of this element. Only elements that have a matching <xref href=\"System.Xml.Linq.XName\"></xref> are included in the collection.\n  remarks: \"The elements in the returned collection are in reverse document order.  \\n  \\n This method uses deferred execution.\"\n  example:\n  - \"The following example uses this .  \\n  \\n```csharp  \\n  \\n                XElement xmlTree = new XElement(\\\"Root\\\",  \\n    new XElement(\\\"Child\\\",  \\n        new XElement(\\\"GrandChild\\\", \\\"element content\\\")  \\n    )  \\n);  \\nXElement gc = xmlTree.Element(\\\"Child\\\").Element(\\\"GrandChild\\\");  \\nIEnumerable<XElement> aas = gc.AncestorsAndSelf(\\\"Child\\\");  \\nforeach (XElement el in aas)  \\n    Console.WriteLine(el.Name);  \\n```  \\n  \\n```vb  \\n  \\n                Dim xmlTree As XElement = _   \\n    <Root>  \\n        <Child>  \\n            <GrandChild>element content</GrandChild>  \\n        </Child>  \\n    </Root>  \\n  \\nDim GC As XElement = xmlTree.<Child>.<GrandChild>(0)  \\nDim aas As IEnumerable(Of XElement) = GC.AncestorsAndSelf(\\\"Child\\\")  \\nFor Each el In aas  \\n    Console.WriteLine(el.Name)  \\nNext  \\n  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```  \\n  \\nChild  \\n```\"\n  syntax:\n    content: public System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement> AncestorsAndSelf (System.Xml.Linq.XName name);\n    parameters:\n    - id: name\n      type: System.Xml.Linq.XName\n      description: The <xref href=\"System.Xml.Linq.XName\"></xref> to match.\n    return:\n      type: System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> of <xref href=\"System.Xml.Linq.XElement\"></xref> that contain this element, and the ancestors of this element. Only elements that have a matching <xref href=\"System.Xml.Linq.XName\"></xref> are included in the collection.\n  overload: System.Xml.Linq.XElement.AncestorsAndSelf*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XElement.Attribute(System.Xml.Linq.XName)\n  commentId: M:System.Xml.Linq.XElement.Attribute(System.Xml.Linq.XName)\n  id: Attribute(System.Xml.Linq.XName)\n  parent: System.Xml.Linq.XElement\n  langs:\n  - csharp\n  name: Attribute(XName)\n  nameWithType: XElement.Attribute(XName)\n  fullName: XElement.Attribute(XName)\n  type: Method\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Returns the <xref href=\"System.Xml.Linq.XAttribute\"></xref> of this <xref href=\"System.Xml.Linq.XElement\"></xref> that has the specified <xref href=\"System.Xml.Linq.XName\"></xref>.\n  remarks: \"Some  return collections of elements or attributes. This method returns only a single attribute. Sometimes this is referred to as a *singleton* (in contrast to a *collection*).  \\n  \\n Visual Basic users can use the integrated attribute axis to retrieve the value of an attribute with a specified name.\"\n  example:\n  - \"The following example creates an element with an attribute. It then retrieves the attribute using this method.  \\n  \\n```csharp  \\n  \\n                XElement xmlTree = new XElement(\\\"Root\\\",  \\n    new XAttribute(\\\"Att\\\", \\\"attribute content\\\")  \\n);  \\nXAttribute att = xmlTree.Attribute(\\\"Att\\\");  \\nConsole.WriteLine(att);  \\n```  \\n  \\n```vb  \\n  \\n                Dim xmlTree As XElement = <Root Att=\\\"attribute content\\\"/>  \\n  \\nDim att As XAttribute = xmlTree.Attribute(\\\"Att\\\")  \\nConsole.WriteLine(att)  \\n  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```  \\n  \\nAtt=\\\"attribute content\\\"  \\n```  \\n  \\n The following is the same example, but in this case the XML is in a namespace. For more information, see [Working with XML Namespaces](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).  \\n  \\n```csharp  \\n  \\n                XNamespace aw = \\\"http://www.adventure-works.com\\\";  \\nXElement xmlTree = new XElement(aw + \\\"Root\\\",  \\n    new XAttribute(XNamespace.Xmlns + \\\"aw\\\", \\\"http://www.adventure-works.com\\\"),  \\n    new XAttribute(aw + \\\"Att\\\", \\\"attribute content\\\")  \\n);  \\nXAttribute att = xmlTree.Attribute(aw + \\\"Att\\\");  \\nConsole.WriteLine(att);  \\n```  \\n  \\n```vb  \\n  \\n                Imports <xmlns:aw=\\\"http://www.adventure-works.com\\\">  \\n  \\nModule Module1  \\n    Sub Main()  \\n        Dim xmlTree As XElement = <aw:Root aw:Att=\\\"attribute content\\\"/>  \\n  \\n        Dim att As XAttribute = xmlTree.Attribute(GetXmlNamespace(aw) + \\\"Att\\\")  \\n        Console.WriteLine(att)  \\n    End Sub  \\nEnd Module  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```  \\n  \\naw:Att=\\\"attribute content\\\"  \\n```\"\n  syntax:\n    content: public System.Xml.Linq.XAttribute Attribute (System.Xml.Linq.XName name);\n    parameters:\n    - id: name\n      type: System.Xml.Linq.XName\n      description: The <xref href=\"System.Xml.Linq.XName\"></xref> of the <xref href=\"System.Xml.Linq.XAttribute\"></xref> to get.\n    return:\n      type: System.Xml.Linq.XAttribute\n      description: An <xref href=\"System.Xml.Linq.XAttribute\"></xref> that has the specified <xref href=\"System.Xml.Linq.XName\"></xref>; `null` if there is no attribute with the specified name.\n  overload: System.Xml.Linq.XElement.Attribute*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XElement.Attributes\n  commentId: M:System.Xml.Linq.XElement.Attributes\n  id: Attributes\n  parent: System.Xml.Linq.XElement\n  langs:\n  - csharp\n  name: Attributes()\n  nameWithType: XElement.Attributes()\n  fullName: XElement.Attributes()\n  type: Method\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Returns a collection of attributes of this element.\n  remarks: \"The attributes in the returned collection are in the order that they were added to the element. If the XML tree was parsed from XML, the attributes are returned in document order.  \\n  \\n This method uses deferred execution.\"\n  example:\n  - \"The following example creates an element with two attributes. It then uses this  to retrieve all attributes of the element.  \\n  \\n```csharp  \\n  \\n                XElement xmlTree = new XElement(\\\"Root\\\",  \\n    new XAttribute(\\\"Att1\\\", \\\"content1\\\"),  \\n    new XAttribute(\\\"Att2\\\", \\\"content2\\\")  \\n);  \\nIEnumerable<XAttribute> attList =  \\n    from at in xmlTree.Attributes()  \\n    select at;  \\nforeach (XAttribute att in attList)  \\n    Console.WriteLine(att);  \\n```  \\n  \\n```vb  \\n  \\n                Dim xmlTree As XElement = <Root Att1=\\\"content1\\\" Att2=\\\"content2\\\"/>  \\n  \\nDim attList As IEnumerable(Of XAttribute) = _  \\nFrom at In xmlTree.Attributes() _  \\nSelect at  \\n  \\nFor Each att In attList  \\n    Console.WriteLine(att)  \\nNext  \\n  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```  \\n  \\n                Att1=\\\"content1\\\"  \\nAtt2=\\\"content2\\\"  \\n```  \\n  \\n The following is the same example, but in this case the XML is in a namespace. For more information, see [Working with XML Namespaces](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).  \\n  \\n```csharp  \\n  \\n                XNamespace aw = \\\"http://www.adventure-works.com\\\";  \\nXElement xmlTree = new XElement(aw + \\\"Root\\\",  \\n    new XAttribute(aw + \\\"Att1\\\", \\\"content1\\\"),  \\n    new XAttribute(aw + \\\"Att2\\\", \\\"content2\\\"),  \\n    new XAttribute(XNamespace.Xmlns + \\\"aw\\\", \\\"http://www.adventure-works.com\\\")  \\n);  \\nIEnumerable<XAttribute> attList =  \\n    from at in xmlTree.Attributes()  \\n    select at;  \\nforeach (XAttribute att in attList)  \\n    Console.WriteLine(att);  \\n```  \\n  \\n```vb  \\n  \\n                Imports <xmlns:aw=\\\"http://www.adventure-works.com\\\">  \\n  \\nModule Module1  \\n    Sub Main()  \\n        Dim xmlTree As XElement = <aw:Root aw:Att1=\\\"content1\\\" aw:Att2=\\\"content2\\\"/>  \\n  \\n        Dim attList As IEnumerable(Of XAttribute) = _  \\n            From at In xmlTree.Attributes() _  \\n            Select at  \\n  \\n        For Each att In attList  \\n            Console.WriteLine(att)  \\n        Next  \\n    End Sub  \\nEnd Module  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```  \\n  \\n                aw:Att1=\\\"content1\\\"  \\naw:Att2=\\\"content2\\\"  \\nxmlns:aw=\\\"http://www.adventure-works.com\\\"  \\n```\"\n  syntax:\n    content: public System.Collections.Generic.IEnumerable<System.Xml.Linq.XAttribute> Attributes ();\n    parameters: []\n    return:\n      type: System.Collections.Generic.IEnumerable{System.Xml.Linq.XAttribute}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> of <xref href=\"System.Xml.Linq.XAttribute\"></xref> of attributes of this element.\n  overload: System.Xml.Linq.XElement.Attributes*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XElement.Attributes(System.Xml.Linq.XName)\n  commentId: M:System.Xml.Linq.XElement.Attributes(System.Xml.Linq.XName)\n  id: Attributes(System.Xml.Linq.XName)\n  parent: System.Xml.Linq.XElement\n  langs:\n  - csharp\n  name: Attributes(XName)\n  nameWithType: XElement.Attributes(XName)\n  fullName: XElement.Attributes(XName)\n  type: Method\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Returns a filtered collection of attributes of this element. Only elements that have a matching <xref href=\"System.Xml.Linq.XName\"></xref> are included in the collection.\n  remarks: \"Attribute names must be unique within an element. Therefore, this  can return either a collection that contains only one attribute, or it can return an empty collection.  \\n  \\n This method uses deferred execution.\"\n  example:\n  - \"The following example uses this .  \\n  \\n```csharp  \\n  \\n                XElement xmlTree = new XElement(\\\"Root\\\",  \\n    new XAttribute(\\\"Att1\\\", \\\"content1\\\"),  \\n    new XAttribute(\\\"Att2\\\", \\\"content2\\\")  \\n);  \\nIEnumerable<XAttribute> attList = xmlTree.Attributes(\\\"Att1\\\");  \\nforeach (XAttribute att in attList)  \\n    Console.WriteLine(att);  \\n```  \\n  \\n```vb  \\n  \\n                Dim xmlTree As XElement = <Root Att1=\\\"content1\\\" Att2=\\\"content2\\\"/>  \\n  \\nDim attList As IEnumerable(Of XAttribute) = xmlTree.Attributes(\\\"Att1\\\")  \\n  \\nFor Each att In attList  \\n    Console.WriteLine(att)  \\nNext  \\n  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```  \\n  \\nAtt1=\\\"content1\\\"  \\n```  \\n  \\n The following is the same example, but in this case the XML is in a namespace. For more information, see [Working with XML Namespaces](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).  \\n  \\n```csharp  \\n  \\n                XNamespace aw = \\\"http://www.adventure-works.com\\\";  \\nXElement xmlTree = new XElement(aw + \\\"Root\\\",  \\n    new XAttribute(XNamespace.Xmlns + \\\"aw\\\", \\\"http://www.adventure-works.com\\\"),  \\n    new XAttribute(aw + \\\"Att1\\\", \\\"content1\\\"),  \\n    new XAttribute(aw + \\\"Att2\\\", \\\"content2\\\")  \\n);  \\nIEnumerable<XAttribute> attList = xmlTree.Attributes(aw + \\\"Att1\\\");  \\nforeach (XAttribute att in attList)  \\n    Console.WriteLine(att);  \\n```  \\n  \\n```vb  \\n  \\n                Imports <xmlns:aw=\\\"http://www.adventure-works.com\\\">  \\n  \\nModule Module1  \\n    Sub Main()  \\n        Dim xmlTree As XElement = <aw:Root aw:Att1=\\\"content1\\\" aw:Att2=\\\"content2\\\"/>  \\n  \\n        Dim attList As IEnumerable(Of XAttribute) = xmlTree.Attributes(GetXmlNamespace(aw) + \\\"Att1\\\")  \\n  \\n        For Each att In attList  \\n            Console.WriteLine(att)  \\n        Next  \\n    End Sub  \\nEnd Module  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```  \\n  \\naw:Att1=\\\"content1\\\"  \\n```\"\n  syntax:\n    content: public System.Collections.Generic.IEnumerable<System.Xml.Linq.XAttribute> Attributes (System.Xml.Linq.XName name);\n    parameters:\n    - id: name\n      type: System.Xml.Linq.XName\n      description: The <xref href=\"System.Xml.Linq.XName\"></xref> to match.\n    return:\n      type: System.Collections.Generic.IEnumerable{System.Xml.Linq.XAttribute}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> of <xref href=\"System.Xml.Linq.XAttribute\"></xref> that contains the attributes of this element. Only elements that have a matching <xref href=\"System.Xml.Linq.XName\"></xref> are included in the collection.\n  overload: System.Xml.Linq.XElement.Attributes*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XElement.DescendantNodesAndSelf\n  commentId: M:System.Xml.Linq.XElement.DescendantNodesAndSelf\n  id: DescendantNodesAndSelf\n  parent: System.Xml.Linq.XElement\n  langs:\n  - csharp\n  name: DescendantNodesAndSelf()\n  nameWithType: XElement.DescendantNodesAndSelf()\n  fullName: XElement.DescendantNodesAndSelf()\n  type: Method\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Returns a collection of nodes that contain this element, and all descendant nodes of this element, in document order.\n  remarks: This method uses deferred execution.\n  example:\n  - \"The following example creates an XML tree, and then uses this .  \\n  \\n```csharp  \\n  \\n                XElement xmlTree = new XElement(\\\"Root\\\",  \\n    // Attributes are not nodes, so will not be returned by DescendantNodesAndSelf.  \\n    new XAttribute(\\\"Att1\\\", \\\"AttributeContent\\\"),  \\n    new XElement(\\\"Child\\\",  \\n        new XText(\\\"Some text\\\"),  \\n        new XElement(\\\"GrandChild\\\", \\\"element content\\\")  \\n    )  \\n);  \\nIEnumerable<XNode> dnas =  \\n    from node in xmlTree.DescendantNodesAndSelf()  \\n    select node;  \\nforeach (XNode node in dnas)  \\n{  \\n    if (node is XElement)  \\n        Console.WriteLine((node as XElement).Name);  \\n    else  \\n        Console.WriteLine(node);  \\n}  \\n```  \\n  \\n```vb  \\n  \\n                Dim xmlTree As XElement = _  \\n    <Root Att1=\\\"AttributeContent\\\">  \\n        <Child>Some text<GrandChild>element content</GrandChild>  \\n        </Child>  \\n    </Root>  \\n  \\nDim dnas As IEnumerable(Of XNode) = _  \\n    From node In xmlTree.DescendantNodesAndSelf() _  \\n    Select node  \\n  \\nFor Each node In dnas  \\n    If TypeOf node Is XElement Then  \\n        Console.WriteLine(DirectCast(node, XElement).Name)  \\n    Else  \\n        Console.WriteLine(node)  \\n    End If  \\nNext  \\n  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```  \\n  \\n                Root  \\nChild  \\nSome text  \\nGrandChild  \\nelement content  \\n```\"\n  syntax:\n    content: public System.Collections.Generic.IEnumerable<System.Xml.Linq.XNode> DescendantNodesAndSelf ();\n    parameters: []\n    return:\n      type: System.Collections.Generic.IEnumerable{System.Xml.Linq.XNode}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> of <xref href=\"System.Xml.Linq.XNode\"></xref> that contain this element, and all descendant nodes of this element, in document order.\n  overload: System.Xml.Linq.XElement.DescendantNodesAndSelf*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XElement.DescendantsAndSelf(System.Xml.Linq.XName)\n  commentId: M:System.Xml.Linq.XElement.DescendantsAndSelf(System.Xml.Linq.XName)\n  id: DescendantsAndSelf(System.Xml.Linq.XName)\n  parent: System.Xml.Linq.XElement\n  langs:\n  - csharp\n  name: DescendantsAndSelf(XName)\n  nameWithType: XElement.DescendantsAndSelf(XName)\n  fullName: XElement.DescendantsAndSelf(XName)\n  type: Method\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Returns a filtered collection of elements that contain this element, and all descendant elements of this element, in document order. Only elements that have a matching <xref href=\"System.Xml.Linq.XName\"></xref> are included in the collection.\n  remarks: This method uses deferred execution.\n  example:\n  - \"The following example creates an XML tree, and then uses this .  \\n  \\n```csharp  \\n  \\n                XElement xmlTree = new XElement(\\\"Root\\\",  \\n    new XAttribute(\\\"Att1\\\", \\\"AttributeContent\\\"),  \\n    new XElement(\\\"Child\\\",  \\n        new XText(\\\"Some text\\\"),  \\n        new XElement(\\\"GrandChild\\\", \\\"element content\\\")  \\n    )  \\n);  \\nIEnumerable<XElement> das = xmlTree.DescendantsAndSelf(\\\"Child\\\");  \\nforeach (XElement el in das)  \\n    Console.WriteLine(el.Name);  \\n```  \\n  \\n```vb  \\n  \\n                Dim xmlTree As XElement = _  \\n    <Root Att1=\\\"AttributeContent\\\">  \\n        <Child>Some text  \\n            <GrandChild>element content</GrandChild>  \\n        </Child>  \\n    </Root>  \\n  \\nDim das As IEnumerable(Of XElement) = xmlTree.DescendantsAndSelf(\\\"Child\\\")  \\n  \\nFor Each el In das  \\n    Console.WriteLine(el.Name)  \\nNext  \\n  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```  \\n  \\nChild  \\n```\"\n  syntax:\n    content: public System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement> DescendantsAndSelf (System.Xml.Linq.XName name);\n    parameters:\n    - id: name\n      type: System.Xml.Linq.XName\n      description: The <xref href=\"System.Xml.Linq.XName\"></xref> to match.\n    return:\n      type: System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> of <xref href=\"System.Xml.Linq.XElement\"></xref> that contain this element, and all descendant elements of this element, in document order. Only elements that have a matching <xref href=\"System.Xml.Linq.XName\"></xref> are included in the collection.\n  overload: System.Xml.Linq.XElement.DescendantsAndSelf*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XElement.DescendantsAndSelf\n  commentId: M:System.Xml.Linq.XElement.DescendantsAndSelf\n  id: DescendantsAndSelf\n  parent: System.Xml.Linq.XElement\n  langs:\n  - csharp\n  name: DescendantsAndSelf()\n  nameWithType: XElement.DescendantsAndSelf()\n  fullName: XElement.DescendantsAndSelf()\n  type: Method\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Returns a collection of elements that contain this element, and all descendant elements of this element, in document order.\n  remarks: This method uses deferred execution.\n  example:\n  - \"The following example creates an XML tree, and then uses this .  \\n  \\n```csharp  \\n  \\n                XElement xmlTree = new XElement(\\\"Root\\\",  \\n    new XAttribute(\\\"Att1\\\", \\\"AttributeContent\\\"),  \\n    new XElement(\\\"Child\\\",  \\n        new XText(\\\"Some text\\\"),  \\n        new XElement(\\\"GrandChild\\\", \\\"element content\\\")  \\n    )  \\n);  \\nIEnumerable<XElement> das =  \\n    from el in xmlTree.DescendantsAndSelf()  \\n    select el;  \\nforeach (XElement el in das)  \\n    Console.WriteLine(el.Name);  \\n```  \\n  \\n```vb  \\n  \\n                Dim xmlTree As XElement = _  \\n    <Root Att1=\\\"AttributeContent\\\">  \\n        <Child>Some text  \\n            <GrandChild>element content</GrandChild>  \\n        </Child>  \\n    </Root>  \\n  \\nDim das As IEnumerable(Of XElement) = _  \\n    From el In xmlTree.DescendantsAndSelf() _  \\n    Select el  \\n  \\nFor Each el In das  \\n    Console.WriteLine(el.Name)  \\nNext  \\n  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```  \\n  \\n                Root  \\nChild  \\nGrandChild  \\n```\"\n  syntax:\n    content: public System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement> DescendantsAndSelf ();\n    parameters: []\n    return:\n      type: System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> of <xref href=\"System.Xml.Linq.XElement\"></xref> of elements that contain this element, and all descendant elements of this element, in document order.\n  overload: System.Xml.Linq.XElement.DescendantsAndSelf*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XElement.EmptySequence\n  commentId: P:System.Xml.Linq.XElement.EmptySequence\n  id: EmptySequence\n  parent: System.Xml.Linq.XElement\n  langs:\n  - csharp\n  name: EmptySequence\n  nameWithType: XElement.EmptySequence\n  fullName: XElement.EmptySequence\n  type: Property\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Gets an empty collection of elements.\n  remarks: This property is typically used by class implementers when writing a method that returns a collection of elements. If the method must return no elements, it can use this property to get an empty collection of <xref:System.Xml.Linq.XElement> objects.\n  syntax:\n    content: public static System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement> EmptySequence { get; }\n    return:\n      type: System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> of <xref href=\"System.Xml.Linq.XElement\"></xref> that contains an empty collection.\n  overload: System.Xml.Linq.XElement.EmptySequence*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XElement.FirstAttribute\n  commentId: P:System.Xml.Linq.XElement.FirstAttribute\n  id: FirstAttribute\n  parent: System.Xml.Linq.XElement\n  langs:\n  - csharp\n  name: FirstAttribute\n  nameWithType: XElement.FirstAttribute\n  fullName: XElement.FirstAttribute\n  type: Property\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Gets the first attribute of this element.\n  remarks: Attributes are stored in the element in the order that they were added to the element.\n  example:\n  - \"The following example uses this property.  \\n  \\n```csharp  \\n  \\n                XElement xmlTree = new XElement(\\\"Root\\\",  \\n    new XAttribute(\\\"Att1\\\", 1),  \\n    new XAttribute(\\\"Att2\\\", 2),  \\n    new XAttribute(\\\"Att3\\\", 3)  \\n);  \\nConsole.WriteLine(xmlTree.FirstAttribute);  \\n```  \\n  \\n```vb  \\n  \\n                Dim xmlTree As XElement = <Root Att1=\\\"1\\\" Att2=\\\"2\\\" Att3=\\\"3\\\"/>  \\nConsole.WriteLine(xmlTree.FirstAttribute)  \\n  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```  \\n  \\nAtt1=\\\"1\\\"  \\n```\"\n  syntax:\n    content: public System.Xml.Linq.XAttribute FirstAttribute { get; }\n    return:\n      type: System.Xml.Linq.XAttribute\n      description: An <xref href=\"System.Xml.Linq.XAttribute\"></xref> that contains the first attribute of this element.\n  overload: System.Xml.Linq.XElement.FirstAttribute*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XElement.GetDefaultNamespace\n  commentId: M:System.Xml.Linq.XElement.GetDefaultNamespace\n  id: GetDefaultNamespace\n  parent: System.Xml.Linq.XElement\n  langs:\n  - csharp\n  name: GetDefaultNamespace()\n  nameWithType: XElement.GetDefaultNamespace()\n  fullName: XElement.GetDefaultNamespace()\n  type: Method\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Gets the default <xref href=\"System.Xml.Linq.XNamespace\"></xref> of this <xref href=\"System.Xml.Linq.XElement\"></xref>.\n  remarks: \"Namespace declarations may be persisted as attributes in the XML tree. These special attributes declare namespaces, including default namespaces. This method finds the namespace declaration that declares the default namespace, if there is one, and returns the <xref:System.Xml.Linq.XNamespace> for the default namespace.  \\n  \\n If there is no attribute that declares the default namespace, then this method returns <xref:System.Xml.Linq.XNamespace.None%2A?displayProperty=fullName>.  \\n  \\n When creating XML trees using C#, even if an XML tree would be serialized with a default namespace, if the namespace is not persisted in the XML tree as an attribute, this method will not report the namespace as the default namespace.  \\n  \\n When creating XML trees using Visual Basic and XML literals, if you create the XML in a default namespace using the Imports statement, then a namespace attribute will be created in the tree by the Visual Basic compiler, and this method will report that namespace.\"\n  example:\n  - \"The following example creates an XML tree that has a default namespace. It then uses this method to retrieve the default namespace.  \\n  \\n```csharp  \\n  \\n                String xml = \\\"<root xmlns='http://www.adventure-works.com'/>\\\";  \\nXElement e = XElement.Parse(xml);  \\nConsole.WriteLine(\\\"Default namespace: {0}\\\", e.GetDefaultNamespace());  \\n```  \\n  \\n```vb  \\n  \\n                Imports <xmlns=\\\"http://www.adventure-works.com\\\">  \\n  \\nModule Module1  \\n    Sub Main()  \\n        Dim e As XElement = <root/>  \\n        Console.WriteLine(\\\"Default namespace: {0}\\\", e.GetDefaultNamespace())  \\n    End Sub  \\nEnd Module  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```  \\n  \\nDefault namespace: http://www.adventure-works.com  \\n```\"\n  syntax:\n    content: public System.Xml.Linq.XNamespace GetDefaultNamespace ();\n    parameters: []\n    return:\n      type: System.Xml.Linq.XNamespace\n      description: An <xref href=\"System.Xml.Linq.XNamespace\"></xref> that contains the default namespace of this <xref href=\"System.Xml.Linq.XElement\"></xref>.\n  overload: System.Xml.Linq.XElement.GetDefaultNamespace*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XElement.GetNamespaceOfPrefix(System.String)\n  commentId: M:System.Xml.Linq.XElement.GetNamespaceOfPrefix(System.String)\n  id: GetNamespaceOfPrefix(System.String)\n  parent: System.Xml.Linq.XElement\n  langs:\n  - csharp\n  name: GetNamespaceOfPrefix(String)\n  nameWithType: XElement.GetNamespaceOfPrefix(String)\n  fullName: XElement.GetNamespaceOfPrefix(String)\n  type: Method\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Gets the namespace associated with a particular prefix for this <xref href=\"System.Xml.Linq.XElement\"></xref>.\n  remarks: This method looks through the XML tree for namespace attributes that are in scope for this element. Namespace prefixes are specified in namespace attributes that are in the XML tree.\n  example:\n  - \"The following example creates an XML tree that has a namespace with an associated prefix. It then uses this method to retrieve the <xref:System.Xml.Linq.XNamespace> for the prefix.  \\n  \\n```csharp  \\n  \\n                XElement xmlTree = XElement.Parse(\\\"<Root xmlns:aw='http://www.adventure-works.com'/>\\\");  \\nXNamespace awNamespace = xmlTree.GetNamespaceOfPrefix(\\\"aw\\\");  \\nConsole.WriteLine(\\\"Namespace: {0}\\\", awNamespace);  \\n```  \\n  \\n When using Visual Basic, you would typically use the [GetXmlNamespace Operator](~/docs/visual-basic/language-reference/operators/getxmlnamespace-operator.md) operator, as follows  \\n  \\n```vb  \\n  \\n                Imports <xmlns:aw=\\\"http://www.adventure-works.com\\\">  \\n  \\nModule Module1  \\n    Sub Main()  \\n        Dim xmlTree As XElement = <aw:Root/>  \\n        Dim awNamespace As XNamespace = GetXmlNamespace(aw)  \\n        Console.WriteLine(\\\"Namespace: {0}\\\", awNamespace)  \\n    End Sub  \\nEnd Module  \\n  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```  \\n  \\nNamespace: http://www.adventure-works.com  \\n```\"\n  syntax:\n    content: public System.Xml.Linq.XNamespace GetNamespaceOfPrefix (string prefix);\n    parameters:\n    - id: prefix\n      type: System.String\n      description: A string that contains the namespace prefix to look up.\n    return:\n      type: System.Xml.Linq.XNamespace\n      description: An <xref href=\"System.Xml.Linq.XNamespace\"></xref> for the namespace associated with the prefix for this <xref href=\"System.Xml.Linq.XElement\"></xref>.\n  overload: System.Xml.Linq.XElement.GetNamespaceOfPrefix*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XElement.GetPrefixOfNamespace(System.Xml.Linq.XNamespace)\n  commentId: M:System.Xml.Linq.XElement.GetPrefixOfNamespace(System.Xml.Linq.XNamespace)\n  id: GetPrefixOfNamespace(System.Xml.Linq.XNamespace)\n  parent: System.Xml.Linq.XElement\n  langs:\n  - csharp\n  name: GetPrefixOfNamespace(XNamespace)\n  nameWithType: XElement.GetPrefixOfNamespace(XNamespace)\n  fullName: XElement.GetPrefixOfNamespace(XNamespace)\n  type: Method\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Gets the prefix associated with a namespace for this <xref href=\"System.Xml.Linq.XElement\"></xref>.\n  remarks: \"This method looks through the XML tree for namespace attributes that are in scope for this element. Namespace prefixes are specified in namespace attributes that are in the XML tree.  \\n  \\n If the namespace is the default namespace, and there is no prefix for the namespace, then this method returns null.\"\n  example:\n  - \"The following example creates an XML tree that contains a namespace with a prefix. It then uses this method to retrieve the prefix for the namespace. Notice that this example uses the implicit conversion from string to <xref:System.Xml.Linq.XNamespace> when calling this method.  \\n  \\n```csharp  \\n  \\n                XElement xmlTree = XElement.Parse(\\\"<Root xmlns:aw='http://www.adventure-works.com'/>\\\");  \\nstring prefix = xmlTree.GetPrefixOfNamespace(\\\"http://www.adventure-works.com\\\");  \\nConsole.WriteLine(\\\"Prefix: {0}\\\", prefix);  \\n```  \\n  \\n```vb  \\n  \\n                Imports <xmlns:aw=\\\"http://www.adventure-works.com\\\">  \\n  \\nModule Module1  \\n    Sub Main()  \\n        Dim xmlTree As XElement = <aw:Root/>  \\n        Dim prefix As String = xmlTree.GetPrefixOfNamespace(\\\"http://www.adventure-works.com\\\")  \\n        Console.WriteLine(\\\"Prefix: {0}\\\", prefix)  \\n    End Sub  \\nEnd Module  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```  \\n  \\nPrefix: aw  \\n```\"\n  syntax:\n    content: public string GetPrefixOfNamespace (System.Xml.Linq.XNamespace ns);\n    parameters:\n    - id: ns\n      type: System.Xml.Linq.XNamespace\n      description: An <xref href=\"System.Xml.Linq.XNamespace\"></xref> to look up.\n    return:\n      type: System.String\n      description: A <xref href=\"System.String\"></xref> that contains the namespace prefix.\n  overload: System.Xml.Linq.XElement.GetPrefixOfNamespace*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XElement.HasAttributes\n  commentId: P:System.Xml.Linq.XElement.HasAttributes\n  id: HasAttributes\n  parent: System.Xml.Linq.XElement\n  langs:\n  - csharp\n  name: HasAttributes\n  nameWithType: XElement.HasAttributes\n  fullName: XElement.HasAttributes\n  type: Property\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Gets a value indicating whether this element has at least one attribute.\n  remarks: ''\n  example:\n  - \"The following example uses this property.  \\n  \\n```csharp  \\n  \\n                XElement xmlTree1 = new XElement(\\\"Root\\\",  \\n    new XAttribute(\\\"Att1\\\", 1)  \\n);  \\nConsole.WriteLine(xmlTree1.HasAttributes);  \\nXElement xmlTree2 = new XElement(\\\"Root\\\");  \\nConsole.WriteLine(xmlTree2.HasAttributes);  \\n```  \\n  \\n```vb  \\n  \\n                Dim xmlTree1 As XElement = <Root Att1=\\\"1\\\"/>  \\nConsole.WriteLine(xmlTree1.HasAttributes)  \\n  \\nDim xmlTree2 As XElement = <Root/>  \\nConsole.WriteLine(xmlTree2.HasAttributes)  \\n  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```  \\nTrue  \\nFalse  \\n```\"\n  syntax:\n    content: public bool HasAttributes { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if this element has at least one attribute; otherwise `false`.'\n  overload: System.Xml.Linq.XElement.HasAttributes*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XElement.HasElements\n  commentId: P:System.Xml.Linq.XElement.HasElements\n  id: HasElements\n  parent: System.Xml.Linq.XElement\n  langs:\n  - csharp\n  name: HasElements\n  nameWithType: XElement.HasElements\n  fullName: XElement.HasElements\n  type: Property\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Gets a value indicating whether this element has at least one child element.\n  remarks: ''\n  example:\n  - \"The following example uses this property.  \\n  \\n```csharp  \\n  \\n                XElement xmlTree1 = new XElement(\\\"Root\\\",  \\n    new XElement(\\\"Child\\\", 1)  \\n);  \\nConsole.WriteLine(xmlTree1.HasElements);  \\nXElement xmlTree2 = new XElement(\\\"Root\\\", \\\"contents\\\");  \\nConsole.WriteLine(xmlTree2.HasElements);  \\n```  \\n  \\n```vb  \\n  \\n                Dim xmlTree1 As XElement = _   \\n        <Root>  \\n            <Child>1</Child>  \\n        </Root>  \\nConsole.WriteLine(xmlTree1.HasElements)  \\n  \\nDim xmlTree2 As XElement = <Root>contents</Root>  \\nConsole.WriteLine(xmlTree2.HasElements)  \\n  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```  \\n  \\n                True  \\nFalse  \\n```\"\n  syntax:\n    content: public bool HasElements { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if this element has at least one child element; otherwise `false`.'\n  overload: System.Xml.Linq.XElement.HasElements*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XElement.IsEmpty\n  commentId: P:System.Xml.Linq.XElement.IsEmpty\n  id: IsEmpty\n  parent: System.Xml.Linq.XElement\n  langs:\n  - csharp\n  name: IsEmpty\n  nameWithType: XElement.IsEmpty\n  fullName: XElement.IsEmpty\n  type: Property\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Gets a value indicating whether this element contains no content.\n  remarks: Note that an element that contains a start and end tag with no content between the tags is not considered to be an empty element. It has content with no length. Only an element that contains only a start tag, and is expressed as a terminated empty element, is considered to be empty.\n  example:\n  - \"The following example creates a variety of XML trees, and shows the value of this property with each tree.  \\n  \\n```csharp  \\n  \\n                XElement el1 = new XElement(\\\"Root\\\");  \\nConsole.WriteLine(el1);  \\nConsole.WriteLine(el1.IsEmpty);  \\nConsole.WriteLine();  \\nXElement el2 = new XElement(\\\"Root\\\", \\\"content\\\");  \\nConsole.WriteLine(el2);  \\nConsole.WriteLine(el2.IsEmpty);  \\nConsole.WriteLine();  \\nXElement el3 = new XElement(\\\"Root\\\", \\\"\\\");  \\nConsole.WriteLine(el3);  \\nConsole.WriteLine(el3.IsEmpty);  \\nConsole.WriteLine();  \\nel3.ReplaceAll(null);  \\nConsole.WriteLine(el3);  \\nConsole.WriteLine(el3.IsEmpty);  \\n```  \\n  \\n```vb  \\n  \\n                Dim el1 As XElement = <Root/>  \\nConsole.WriteLine(el1)  \\nConsole.WriteLine(el1.IsEmpty)  \\nConsole.WriteLine()  \\nDim el2 As XElement = <Root>content</Root>  \\nConsole.WriteLine(el2)  \\nConsole.WriteLine(el2.IsEmpty)  \\nConsole.WriteLine()  \\nDim el3 As XElement = <Root></Root>  \\nConsole.WriteLine(el3)  \\nConsole.WriteLine(el3.IsEmpty)  \\nConsole.WriteLine()  \\nel3.ReplaceAll(Nothing)  \\nConsole.WriteLine(el3)  \\nConsole.WriteLine(el3.IsEmpty)  \\n  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```  \\n  \\n                <Root />  \\nTrue  \\n  \\n<Root>content</Root>  \\nFalse  \\n  \\n<Root></Root>  \\nFalse  \\n  \\n<Root />  \\nTrue  \\n```\"\n  syntax:\n    content: public bool IsEmpty { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if this element contains no content; otherwise `false`.'\n  overload: System.Xml.Linq.XElement.IsEmpty*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XElement.LastAttribute\n  commentId: P:System.Xml.Linq.XElement.LastAttribute\n  id: LastAttribute\n  parent: System.Xml.Linq.XElement\n  langs:\n  - csharp\n  name: LastAttribute\n  nameWithType: XElement.LastAttribute\n  fullName: XElement.LastAttribute\n  type: Property\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Gets the last attribute of this element.\n  remarks: Attributes are stored in the element in the order that they were added to the element.\n  example:\n  - \"The following example creates an XML tree with three attributes. It then writes the last attribute as output.  \\n  \\n```csharp  \\n  \\n                XElement xmlTree = new XElement(\\\"Root\\\",  \\n    new XAttribute(\\\"Att1\\\", 1),  \\n    new XAttribute(\\\"Att2\\\", 2),  \\n    new XAttribute(\\\"Att3\\\", 3)  \\n);  \\nConsole.WriteLine(xmlTree.LastAttribute);  \\n```  \\n  \\n```vb  \\n  \\n                Dim xmlTree As XElement = <Root Att1=\\\"1\\\" Att2=\\\"2\\\" Att3=\\\"3\\\"/>  \\nConsole.WriteLine(xmlTree.LastAttribute)  \\n  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```  \\n  \\nAtt3=\\\"3\\\"  \\n```\"\n  syntax:\n    content: public System.Xml.Linq.XAttribute LastAttribute { get; }\n    return:\n      type: System.Xml.Linq.XAttribute\n      description: An <xref href=\"System.Xml.Linq.XAttribute\"></xref> that contains the last attribute of this element.\n  overload: System.Xml.Linq.XElement.LastAttribute*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XElement.Load(System.IO.TextReader,System.Xml.Linq.LoadOptions)\n  commentId: M:System.Xml.Linq.XElement.Load(System.IO.TextReader,System.Xml.Linq.LoadOptions)\n  id: Load(System.IO.TextReader,System.Xml.Linq.LoadOptions)\n  parent: System.Xml.Linq.XElement\n  langs:\n  - csharp\n  name: Load(TextReader, LoadOptions)\n  nameWithType: XElement.Load(TextReader, LoadOptions)\n  fullName: XElement.Load(TextReader, LoadOptions)\n  type: Method\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Loads an <xref href=\"System.Xml.Linq.XElement\"></xref> from a <xref href=\"System.IO.TextReader\"></xref>, optionally preserving white space and retaining line information.\n  remarks: \"If the source XML is indented, setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` causes the reader to read all white space in the source XML. Nodes of type <xref:System.Xml.Linq.XText> are created for both significant and insignificant white space.  \\n  \\n If the source XML is indented, not setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` causes the reader to ignore all of the insignificant white space in the source XML. The XML tree is created without any text nodes for insignificant white space.  \\n  \\n If the source XML is not indented, setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` has no effect. Significant white space is still preserved, and there are no spans of insignificant white space that could cause the creation of more white space text nodes.  \\n  \\n For more information, see [Preserving White Space while Loading or Parsing XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).  \\n  \\n Use <xref:System.Xml.Linq.XElement.Parse%2A> to create an <xref:System.Xml.Linq.XElement> from a string that contains XML.  \\n  \\n Setting <xref:System.Xml.Linq.LoadOptions.SetBaseUri> will have no effect when loading from a <xref:System.IO.TextReader>.  \\n  \\n There is a performance penalty if you set the <xref:System.Xml.Linq.LoadOptions.SetLineInfo> flag.  \\n  \\n The line information is accurate immediately after loading the XML document. If you modify the XML tree after loading the document, the line information may become meaningless.  \\n  \\n LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>. Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.\"\n  example:\n  - \"The following example loads an <xref:System.Xml.Linq.XElement> from a <xref:System.IO.StringReader> in two different ways: preserving white space, and not preserving white space. It then uses a query to determine the number of white space nodes in the resulting XML tree.  \\n  \\n```csharp  \\n  \\n                TextReader sr;  \\nint whiteSpaceNodes;  \\n  \\nsr = new StringReader(\\\"<Root> <Child> </Child> </Root>\\\");  \\nXElement xmlTree1 = XElement.Load(sr, LoadOptions.None);  \\nsr.Close();  \\nwhiteSpaceNodes = xmlTree1  \\n    .DescendantNodesAndSelf()  \\n    .OfType<XText>()  \\n    .Where(tNode => tNode.ToString().Trim().Length == 0)  \\n    .Count();  \\nConsole.WriteLine(\\\"Count of white space nodes (not preserving whitespace): {0}\\\", whiteSpaceNodes);  \\n  \\nsr = new StringReader(\\\"<Root> <Child> </Child> </Root>\\\");  \\nXElement xmlTree2 = XElement.Load(sr, LoadOptions.PreserveWhitespace);  \\nsr.Close();  \\nwhiteSpaceNodes = xmlTree2  \\n    .DescendantNodesAndSelf()  \\n    .OfType<XText>()  \\n    .Where(tNode => tNode.ToString().Trim().Length == 0)  \\n    .Count();  \\nConsole.WriteLine(\\\"Count of white space nodes (preserving whitespace): {0}\\\", whiteSpaceNodes);  \\n```  \\n  \\n```vb  \\n  \\n                Dim sr As TextReader  \\nDim whiteSpaceNodes As Integer  \\n  \\nsr = New StringReader(\\\"<Root> <Child> </Child> </Root>\\\")  \\nDim xmlTree1 As XElement = XElement.Load(sr, LoadOptions.None)  \\nsr.Close()  \\nwhiteSpaceNodes = xmlTree1 _  \\n    .DescendantNodesAndSelf() _  \\n    .OfType(Of XText)() _  \\n    .Where(Function(ByVal tNode As XNode) tNode.ToString().Trim().Length = 0) _  \\n    .Count()  \\nConsole.WriteLine(\\\"Count of white space nodes (not preserving whitespace): {0}\\\", whiteSpaceNodes)  \\n  \\nsr = New StringReader(\\\"<Root> <Child> </Child> </Root>\\\")  \\nDim xmlTree2 As XElement = XElement.Load(sr, LoadOptions.PreserveWhitespace)  \\nsr.Close()  \\nwhiteSpaceNodes = xmlTree2 _  \\n    .DescendantNodesAndSelf() _  \\n    .OfType(Of XText)() _  \\n    .Where(Function(ByVal tNode As XNode) tNode.ToString().Trim().Length = 0) _  \\n    .Count()  \\nConsole.WriteLine(\\\"Count of white space nodes (preserving whitespace): {0}\\\", whiteSpaceNodes)  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```  \\n  \\n                Count of white space nodes (not preserving whitespace): 0  \\nCount of white space nodes (preserving whitespace): 3  \\n```  \\n  \\n The following example loads the line information as it loads from the <xref:System.IO.TextReader>. It then prints the line information.  \\n  \\n```csharp  \\n  \\n                TextReader sr = new StringReader(  \\n@\\\"<Root>  \\n  <Child>  \\n    <GrandChild1/>  \\n    <GrandChild2/>  \\n  </Child>  \\n</Root>\\\");  \\nXElement po = XElement.Load(sr,  \\n    LoadOptions.SetLineInfo);  \\nConsole.WriteLine(\\\"{0}{1}{2}\\\",  \\n    \\\"Element Name\\\".PadRight(20),  \\n    \\\"Line\\\".PadRight(5),  \\n    \\\"Position\\\");  \\nConsole.WriteLine(\\\"{0}{1}{2}\\\",  \\n    \\\"------------\\\".PadRight(20),  \\n    \\\"----\\\".PadRight(5),  \\n    \\\"--------\\\");  \\nforeach (XElement e in po.DescendantsAndSelf())  \\n    Console.WriteLine(\\\"{0}{1}{2}\\\",  \\n        (\\\"\\\".PadRight(e.Ancestors().Count() * 2) + e.Name).PadRight(20),  \\n        ((IXmlLineInfo)e).LineNumber.ToString().PadRight(5),  \\n        ((IXmlLineInfo)e).LinePosition);  \\n```  \\n  \\n```vb  \\n  \\n                Dim sr As TextReader = New StringReader( _  \\n    \\\"<Root>\\\" & Environment.NewLine & _  \\n    \\\"  <Child>\\\" & Environment.NewLine & _  \\n    \\\"    <GrandChild1/>\\\" & Environment.NewLine & _  \\n    \\\"    <GrandChild2/>\\\" & Environment.NewLine & _  \\n    \\\"  </Child>\\\" & Environment.NewLine & _  \\n    \\\"</Root>\\\")  \\nDim po As XElement = XElement.Load(sr, LoadOptions.SetLineInfo)  \\nConsole.WriteLine(\\\"{0}{1}{2}\\\", _  \\n    \\\"Element Name\\\".PadRight(20), _  \\n    \\\"Line\\\".PadRight(5), _  \\n    \\\"Position\\\")  \\nConsole.WriteLine(\\\"{0}{1}{2}\\\", _  \\n    \\\"------------\\\".PadRight(20), _  \\n    \\\"----\\\".PadRight(5), _  \\n    \\\"--------\\\")  \\nFor Each e As XElement In po.DescendantsAndSelf()  \\n    Console.WriteLine(\\\"{0}{1}{2}\\\", _  \\n        (\\\"\\\".PadRight(e.Ancestors().Count() * 2) & e.Name.ToString).PadRight(20), _  \\n        (DirectCast(e, IXmlLineInfo)).LineNumber.ToString().PadRight(5), _  \\n        (DirectCast(e, IXmlLineInfo)).LinePosition)  \\nNext  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```  \\n  \\n                Element Name        Line Position  \\n------------        ---- --------  \\nRoot                1    2  \\n  Child             2    4  \\n    GrandChild1     3    6  \\n    GrandChild2     4    6  \\n```\"\n  syntax:\n    content: public static System.Xml.Linq.XElement Load (System.IO.TextReader textReader, System.Xml.Linq.LoadOptions options);\n    parameters:\n    - id: textReader\n      type: System.IO.TextReader\n      description: A <xref href=\"System.IO.TextReader\"></xref> that will be read for the <xref href=\"System.Xml.Linq.XElement\"></xref> content.\n    - id: options\n      type: System.Xml.Linq.LoadOptions\n      description: A <xref href=\"System.Xml.Linq.LoadOptions\"></xref> that specifies white space behavior, and whether to load base URI and line information.\n    return:\n      type: System.Xml.Linq.XElement\n      description: An <xref href=\"System.Xml.Linq.XElement\"></xref> that contains the XML that was read from the specified <xref href=\"System.IO.TextReader\"></xref>.\n  overload: System.Xml.Linq.XElement.Load*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XElement.Load(System.Xml.XmlReader,System.Xml.Linq.LoadOptions)\n  commentId: M:System.Xml.Linq.XElement.Load(System.Xml.XmlReader,System.Xml.Linq.LoadOptions)\n  id: Load(System.Xml.XmlReader,System.Xml.Linq.LoadOptions)\n  parent: System.Xml.Linq.XElement\n  langs:\n  - csharp\n  name: Load(XmlReader, LoadOptions)\n  nameWithType: XElement.Load(XmlReader, LoadOptions)\n  fullName: XElement.Load(XmlReader, LoadOptions)\n  type: Method\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Loads an <xref href=\"System.Xml.Linq.XElement\"></xref> from an <xref href=\"System.Xml.XmlReader\"></xref>, optionally preserving white space, setting the base URI, and retaining line information.\n  remarks: \"By creating an <xref:System.Xml.XmlNodeReader> from a DOM document, and then using the <xref:System.Xml.XmlNodeReader> to create an <xref:System.Xml.Linq.XElement>, this method can be used to create a copy of a DOM document in a LINQ to XML tree.  \\n  \\n Use <xref:System.Xml.Linq.XElement.Parse%2A> to create an <xref:System.Xml.Linq.XElement> from a string that contains XML.  \\n  \\n Setting <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> is not valid when loading from a <xref:System.Xml.XmlReader>. The <xref:System.Xml.XmlReader> will be configured to either read whitespace or not. The LINQ to XML tree will be populated with the whitespace nodes that the reader surfaces. This will be the behavior regardless of whether <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> is set or not.  \\n  \\n The <xref:System.Xml.XmlReader> may have a valid base URI or not. If you set <xref:System.Xml.Linq.LoadOptions.SetBaseUri>, the base URI will be set in the XML tree from the base URI that is reported by the <xref:System.Xml.XmlReader>.  \\n  \\n The <xref:System.Xml.XmlReader> may have a valid line information or not. If you set <xref:System.Xml.Linq.LoadOptions.SetLineInfo>, the line information will be set in the XML tree from the line information that is reported by the <xref:System.Xml.XmlReader>.  \\n  \\n There is a performance penalty if you set the <xref:System.Xml.Linq.LoadOptions.SetLineInfo> flag.  \\n  \\n The line information is accurate immediately after loading the XML document. If you modify the XML tree after loading the document, the line information may become meaningless.  \\n  \\n LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>. Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.\"\n  example:\n  - \"The following example loads the line information that it loads from the <xref:System.Xml.XmlReader>. It then prints the line information.  \\n  \\n```csharp  \\n  \\n                string markup =  \\n@\\\"<Root>  \\n    <Child>  \\n        <GrandChild/>  \\n    </Child>  \\n</Root>\\\";  \\n  \\n// Create a reader and move to the content.  \\nusing (XmlReader nodeReader = XmlReader.Create(new StringReader(markup)))  \\n{  \\n    // the reader must be in the Interactive state in order to  \\n    // Create a LINQ to XML tree from it.  \\n    nodeReader.MoveToContent();  \\n  \\n    XElement xRoot = XElement.Load(nodeReader, LoadOptions.SetLineInfo);  \\n    Console.WriteLine(\\\"{0}{1}{2}\\\",  \\n        \\\"Element Name\\\".PadRight(20),  \\n        \\\"Line\\\".PadRight(5),  \\n        \\\"Position\\\");  \\n    Console.WriteLine(\\\"{0}{1}{2}\\\",  \\n        \\\"------------\\\".PadRight(20),  \\n        \\\"----\\\".PadRight(5),  \\n        \\\"--------\\\");  \\n    foreach (XElement e in xRoot.DescendantsAndSelf())  \\n        Console.WriteLine(\\\"{0}{1}{2}\\\",  \\n            (\\\"\\\".PadRight(e.Ancestors().Count() * 2) + e.Name).PadRight(20),  \\n            ((IXmlLineInfo)e).LineNumber.ToString().PadRight(5),  \\n            ((IXmlLineInfo)e).LinePosition);  \\n}  \\n```  \\n  \\n```vb  \\n  \\n                Dim markup As String = _  \\n    \\\"<Root>\\\" & Environment.NewLine & _  \\n    \\\"    <Child>\\\" & Environment.NewLine & _  \\n    \\\"        <GrandChild/>\\\" & Environment.NewLine & _  \\n    \\\"    </Child>\\\" & Environment.NewLine & _  \\n    \\\"</Root>\\\"  \\n  \\n' Create a reader and move to the content.  \\nUsing nodeReader As XmlReader = XmlReader.Create(New StringReader(markup))  \\n  \\n    ' the reader must be in the Interactive state in order to  \\n    ' Create a LINQ to XML tree from it.  \\n    nodeReader.MoveToContent()  \\n  \\n    Dim xRoot As XElement = XElement.Load(nodeReader, LoadOptions.SetLineInfo)  \\n    Console.WriteLine(\\\"{0}{1}{2}\\\", _  \\n        \\\"Element Name\\\".PadRight(20), _  \\n        \\\"Line\\\".PadRight(5), _  \\n        \\\"Position\\\")  \\n    Console.WriteLine(\\\"{0}{1}{2}\\\", _  \\n        \\\"------------\\\".PadRight(20), _  \\n        \\\"----\\\".PadRight(5), _  \\n        \\\"--------\\\")  \\n    For Each e As XElement In xRoot.DescendantsAndSelf()  \\n        Console.WriteLine(\\\"{0}{1}{2}\\\", _  \\n            (\\\"\\\".PadRight(e.Ancestors().Count() * 2) & e.Name.ToString).PadRight(20), _  \\n            (DirectCast(e, IXmlLineInfo)).LineNumber.ToString().PadRight(5), _  \\n            (DirectCast(e, IXmlLineInfo)).LinePosition)  \\n    Next  \\nEnd Using  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```  \\n  \\n                Element Name        Line Position  \\n------------        ---- --------  \\nRoot                1    2  \\n  Child             2    6  \\n    GrandChild      3    10  \\n```\"\n  syntax:\n    content: public static System.Xml.Linq.XElement Load (System.Xml.XmlReader reader, System.Xml.Linq.LoadOptions options);\n    parameters:\n    - id: reader\n      type: System.Xml.XmlReader\n      description: A <xref href=\"System.Xml.XmlReader\"></xref> that will be read for the content of the <xref href=\"System.Xml.Linq.XElement\"></xref>.\n    - id: options\n      type: System.Xml.Linq.LoadOptions\n      description: A <xref href=\"System.Xml.Linq.LoadOptions\"></xref> that specifies white space behavior, and whether to load base URI and line information.\n    return:\n      type: System.Xml.Linq.XElement\n      description: An <xref href=\"System.Xml.Linq.XElement\"></xref> that contains the XML that was read from the specified <xref href=\"System.Xml.XmlReader\"></xref>.\n  overload: System.Xml.Linq.XElement.Load*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XElement.Load(System.String,System.Xml.Linq.LoadOptions)\n  commentId: M:System.Xml.Linq.XElement.Load(System.String,System.Xml.Linq.LoadOptions)\n  id: Load(System.String,System.Xml.Linq.LoadOptions)\n  parent: System.Xml.Linq.XElement\n  langs:\n  - csharp\n  name: Load(String, LoadOptions)\n  nameWithType: XElement.Load(String, LoadOptions)\n  fullName: XElement.Load(String, LoadOptions)\n  type: Method\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Loads an <xref href=\"System.Xml.Linq.XElement\"></xref> from a file, optionally preserving white space, setting the base URI, and retaining line information.\n  remarks: \"If the source XML is indented, setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` causes the reader to read all white space in the source XML. Nodes of type <xref:System.Xml.Linq.XText> are created for both significant and insignificant white space.  \\n  \\n If the source XML is indented, not setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` causes the reader to ignore all of the insignificant white space in the source XML. The XML tree is created without any text nodes for insignificant white space.  \\n  \\n If the source XML is not indented, setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` has no effect. Significant white space is still preserved, and there are no spans of insignificant white space that could cause the creation of more white space text nodes.  \\n  \\n For more information, see [Preserving White Space while Loading or Parsing XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).  \\n  \\n Use <xref:System.Xml.Linq.XElement.Parse%2A> to create an <xref:System.Xml.Linq.XElement> from a string that contains XML.  \\n  \\n There is a performance penalty if you set the <xref:System.Xml.Linq.LoadOptions.SetBaseUri> and the <xref:System.Xml.Linq.LoadOptions.SetLineInfo> flags.  \\n  \\n The base URI and the line information are accurate immediately after loading the XML document. If you modify the XML tree after loading the document, the base URI and line information may become meaningless.  \\n  \\n LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>. Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.\"\n  example:\n  - \"The following example loads an <xref:System.Xml.Linq.XElement> from a file in two different ways: preserving white space, and not preserving white space. It then uses a query to determine the number of white space nodes in the resulting XML tree.  \\n  \\n```csharp  \\n  \\n                XElement xmlTree1 = XElement.Parse(\\\"<Root> <Child>  </Child> </Root>\\\", LoadOptions.PreserveWhitespace);  \\nxmlTree1.Save(\\\"Tree.xml\\\");  \\nConsole.WriteLine(xmlTree1);  \\n  \\nint whiteSpaceNodes;  \\nXElement xmlTree2 = XElement.Load(\\\"Tree.xml\\\",  \\n    LoadOptions.None);  \\nwhiteSpaceNodes = xmlTree2  \\n    .DescendantNodesAndSelf()  \\n    .OfType<XText>()  \\n    .Where(tNode => tNode.ToString().Trim().Length == 0)  \\n    .Count();  \\nConsole.WriteLine(\\\"Count of white space nodes (not preserving whitespace): {0}\\\", whiteSpaceNodes);  \\n  \\nXElement xmlTree3 = XElement.Load(\\\"Tree.xml\\\",  \\n    LoadOptions.PreserveWhitespace);  \\nwhiteSpaceNodes = xmlTree3  \\n    .DescendantNodesAndSelf()  \\n    .OfType<XText>()  \\n    .Where(tNode => tNode.ToString().Trim().Length == 0)  \\n    .Count();  \\nConsole.WriteLine(\\\"Count of white space nodes (preserving whitespace): {0}\\\", whiteSpaceNodes);  \\n```  \\n  \\n```vb  \\n  \\n                Dim xmlTree1 As XElement = XElement.Parse(\\\"<Root> <Child>  </Child> </Root>\\\", LoadOptions.PreserveWhitespace)  \\nxmlTree1.Save(\\\"Tree.xml\\\")  \\nConsole.WriteLine(xmlTree1)  \\n  \\nDim whiteSpaceNodes As Integer  \\nDim xmlTree2 As XElement = XElement.Load(\\\"Tree.xml\\\", LoadOptions.None)  \\nwhiteSpaceNodes = xmlTree2 _  \\n                  .DescendantNodesAndSelf() _  \\n                  .OfType(Of XText)() _  \\n                  .Where(Function(ByVal tNode As XNode) tNode.ToString().Trim().Length = 0) _  \\n                  .Count()  \\nConsole.WriteLine(\\\"Count of white space nodes (not preserving whitespace): {0}\\\", whiteSpaceNodes)  \\n  \\nDim xmlTree3 As XElement = XElement.Load(\\\"Tree.xml\\\", LoadOptions.PreserveWhitespace)  \\nwhiteSpaceNodes = xmlTree3 _  \\n                  .DescendantNodesAndSelf() _  \\n                  .OfType(Of XText)() _  \\n                  .Where(Function(ByVal tNode As XNode) tNode.ToString().Trim().Length = 0) _  \\n                  .Count()  \\nConsole.WriteLine(\\\"Count of white space nodes (preserving whitespace): {0}\\\", whiteSpaceNodes)  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```  \\n  \\n                <Root> <Child>  </Child> </Root>  \\nCount of white space nodes (not preserving whitespace): 0  \\nCount of white space nodes (preserving whitespace): 3  \\n```  \\n  \\n The following example loads the base URI and line information as it loads the file. It then prints the base URI and the line information.  \\n  \\n This example uses the following resource file: [Sample XML File: Typical Purchase Order (LINQ to XML)](http://msdn.microsoft.com/library/0606c09f-6e43-4f8d-95c8-e8e2e08d2348).  \\n  \\n```csharp  \\n  \\n                XElement po = XElement.Load(\\\"PurchaseOrder.xml\\\",  \\n    LoadOptions.SetBaseUri | LoadOptions.SetLineInfo);  \\nstring[] splitUri = po.BaseUri.Split('/');  \\nConsole.WriteLine(\\\"BaseUri: {0}\\\", splitUri[splitUri.Length - 1]);  \\nConsole.WriteLine();  \\nConsole.WriteLine(\\\"{0}{1}{2}\\\",  \\n    \\\"Element Name\\\".PadRight(20),  \\n    \\\"Line\\\".PadRight(5),  \\n    \\\"Position\\\");  \\nConsole.WriteLine(\\\"{0}{1}{2}\\\",  \\n    \\\"------------\\\".PadRight(20),  \\n    \\\"----\\\".PadRight(5),  \\n    \\\"--------\\\");  \\nforeach (XElement e in po.DescendantsAndSelf())  \\n    Console.WriteLine(\\\"{0}{1}{2}\\\",  \\n        (\\\"\\\".PadRight(e.Ancestors().Count() * 2) + e.Name).PadRight(20),  \\n        ((IXmlLineInfo)e).LineNumber.ToString().PadRight(5),  \\n        ((IXmlLineInfo)e).LinePosition);  \\n```  \\n  \\n```vb  \\n  \\n        Dim po As XElement = XElement.Load(\\\"PurchaseOrder.xml\\\", LoadOptions.SetBaseUri Or LoadOptions.SetLineInfo)  \\nDim splitUri() As String = po.BaseUri.Split(\\\"/\\\")  \\nConsole.WriteLine(\\\"BaseUri: {0}\\\", splitUri(splitUri.Length - 1))  \\nConsole.WriteLine()  \\nConsole.WriteLine(\\\"{0}{1}{2}\\\", _  \\n    \\\"Element Name\\\".PadRight(20), _  \\n    \\\"Line\\\".PadRight(5), _  \\n    \\\"Position\\\")  \\nConsole.WriteLine(\\\"{0}{1}{2}\\\", _  \\n    \\\"------------\\\".PadRight(20), _  \\n    \\\"----\\\".PadRight(5), _  \\n    \\\"--------\\\")  \\nFor Each e As XElement In po.DescendantsAndSelf()  \\n    Console.WriteLine(\\\"{0}{1}{2}\\\", _  \\n        (\\\"\\\".PadRight(e.Ancestors().Count() * 2) & e.Name.ToString()).PadRight(20), _  \\n        (DirectCast(e, IXmlLineInfo)).LineNumber.ToString().PadRight(5), _  \\n        (DirectCast(e, IXmlLineInfo)).LinePosition)  \\nNext  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```  \\n  \\n                BaseUri: PurchaseOrder.xml  \\n  \\nElement Name        Line Position  \\n------------        ---- --------  \\nPurchaseOrder       2    2  \\n  Address           3    4  \\n    Name            4    6  \\n    Street          5    6  \\n    City            6    6  \\n    State           7    6  \\n    Zip             8    6  \\n    Country         9    6  \\n  Address           11   4  \\n    Name            12   6  \\n    Street          13   6  \\n    City            14   6  \\n    State           15   6  \\n    Zip             16   6  \\n    Country         17   6  \\n  DeliveryNotes     19   4  \\n  Items             20   4  \\n    Item            21   6  \\n      ProductName   22   8  \\n      Quantity      23   8  \\n      USPrice       24   8  \\n      Comment       25   8  \\n    Item            27   6  \\n      ProductName   28   8  \\n      Quantity      29   8  \\n      USPrice       30   8  \\n      ShipDate      31   8  \\n```\"\n  syntax:\n    content: public static System.Xml.Linq.XElement Load (string uri, System.Xml.Linq.LoadOptions options);\n    parameters:\n    - id: uri\n      type: System.String\n      description: A URI string referencing the file to load into an <xref href=\"System.Xml.Linq.XElement\"></xref>.\n    - id: options\n      type: System.Xml.Linq.LoadOptions\n      description: A <xref href=\"System.Xml.Linq.LoadOptions\"></xref> that specifies white space behavior, and whether to load base URI and line information.\n    return:\n      type: System.Xml.Linq.XElement\n      description: An <xref href=\"System.Xml.Linq.XElement\"></xref> that contains the contents of the specified file.\n  overload: System.Xml.Linq.XElement.Load*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XElement.Load(System.IO.Stream,System.Xml.Linq.LoadOptions)\n  commentId: M:System.Xml.Linq.XElement.Load(System.IO.Stream,System.Xml.Linq.LoadOptions)\n  id: Load(System.IO.Stream,System.Xml.Linq.LoadOptions)\n  parent: System.Xml.Linq.XElement\n  langs:\n  - csharp\n  name: Load(Stream, LoadOptions)\n  nameWithType: XElement.Load(Stream, LoadOptions)\n  fullName: XElement.Load(Stream, LoadOptions)\n  type: Method\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Creates a new <xref href=\"System.Xml.Linq.XElement\"></xref> instance by using the specified stream, optionally preserving white space, setting the base URI, and retaining line information.\n  remarks: \"LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>. Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.  \\n  \\n If you have to modify <xref:System.Xml.XmlReaderSettings>, following these steps:  \\n  \\n1.  Create an <xref:System.Xml.XmlReader> by calling one of the <xref:System.Xml.XmlReader.Create%2A> overloads that take <xref:System.Xml.XmlReaderSettings> as a parameter.  \\n  \\n2.  Pass the <xref:System.Xml.XmlReader> to one of the <xref:System.Xml.Linq.XElement>'s <xref:System.Xml.Linq.XElement.Load%2A> overloads that takes <xref:System.Xml.XmlReader> as a parameter.\"\n  syntax:\n    content: public static System.Xml.Linq.XElement Load (System.IO.Stream stream, System.Xml.Linq.LoadOptions options);\n    parameters:\n    - id: stream\n      type: System.IO.Stream\n      description: The stream containing the XML data.\n    - id: options\n      type: System.Xml.Linq.LoadOptions\n      description: A <xref href=\"System.Xml.Linq.LoadOptions\"></xref> object that specifies whether to load base URI and line information.\n    return:\n      type: System.Xml.Linq.XElement\n      description: An <xref href=\"System.Xml.Linq.XElement\"></xref> object used to read the data that the stream contains.\n  overload: System.Xml.Linq.XElement.Load*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XElement.Load(System.IO.TextReader)\n  commentId: M:System.Xml.Linq.XElement.Load(System.IO.TextReader)\n  id: Load(System.IO.TextReader)\n  parent: System.Xml.Linq.XElement\n  langs:\n  - csharp\n  name: Load(TextReader)\n  nameWithType: XElement.Load(TextReader)\n  fullName: XElement.Load(TextReader)\n  type: Method\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Loads an <xref href=\"System.Xml.Linq.XElement\"></xref> from a <xref href=\"System.IO.TextReader\"></xref>.\n  remarks: \"This method reads the raw XML into the XML tree. It discards all insignificant white space in the file.  \\n  \\n LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>. Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.\"\n  example:\n  - \"The following example loads an element from a <xref:System.IO.StringReader>.  \\n  \\n```csharp  \\n  \\n                TextReader sr = new StringReader(\\\"<Root><Child/></Root>\\\");  \\nXElement xmlTree = XElement.Load(sr);  \\nsr.Close();  \\nConsole.WriteLine(xmlTree);  \\n```  \\n  \\n```vb  \\n  \\n                Dim sr As TextReader = New StringReader(\\\"<Root><Child/></Root>\\\")  \\nDim xmlTree As XElement = XElement.Load(sr)  \\nsr.Close()  \\nConsole.WriteLine(xmlTree)  \\n  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```xml  \\n  \\n                <Root>  \\n  <Child />  \\n</Root>  \\n```\"\n  syntax:\n    content: public static System.Xml.Linq.XElement Load (System.IO.TextReader textReader);\n    parameters:\n    - id: textReader\n      type: System.IO.TextReader\n      description: A <xref href=\"System.IO.TextReader\"></xref> that will be read for the <xref href=\"System.Xml.Linq.XElement\"></xref> content.\n    return:\n      type: System.Xml.Linq.XElement\n      description: An <xref href=\"System.Xml.Linq.XElement\"></xref> that contains the XML that was read from the specified <xref href=\"System.IO.TextReader\"></xref>.\n  overload: System.Xml.Linq.XElement.Load*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XElement.Load(System.String)\n  commentId: M:System.Xml.Linq.XElement.Load(System.String)\n  id: Load(System.String)\n  parent: System.Xml.Linq.XElement\n  langs:\n  - csharp\n  name: Load(String)\n  nameWithType: XElement.Load(String)\n  fullName: XElement.Load(String)\n  type: Method\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Loads an <xref href=\"System.Xml.Linq.XElement\"></xref> from a file.\n  remarks: \"This method reads the raw XML into the XML tree. It discards all insignificant white space in the file.  \\n  \\n LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>. Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.\"\n  example:\n  - \"The following example creates an XML tree, saves it to a file, and then uses this method to load the <xref:System.Xml.Linq.XElement> from the file.  \\n  \\n```csharp  \\n  \\n                XElement xmlTree1 = new XElement(\\\"Root\\\",  \\n    new XElement(\\\"Child\\\", \\\"content\\\")  \\n);  \\nxmlTree1.Save(\\\"Tree.xml\\\");  \\n  \\nXElement xmlTree2 = XElement.Load(\\\"Tree.xml\\\");  \\nConsole.WriteLine(xmlTree2.Name);  \\n```  \\n  \\n```vb  \\n  \\n                Dim xmlTree1 As XElement = _   \\n        <Root>  \\n            <Child>Content</Child>  \\n        </Root>  \\nxmlTree1.Save(\\\"Tree.xml\\\")  \\n  \\nDim xmlTree2 As XElement = XElement.Load(\\\"Tree.xml\\\")  \\nConsole.WriteLine(xmlTree2.Name)  \\n  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```  \\n  \\nRoot  \\n```\"\n  syntax:\n    content: public static System.Xml.Linq.XElement Load (string uri);\n    parameters:\n    - id: uri\n      type: System.String\n      description: A URI string referencing the file to load into a new <xref href=\"System.Xml.Linq.XElement\"></xref>.\n    return:\n      type: System.Xml.Linq.XElement\n      description: An <xref href=\"System.Xml.Linq.XElement\"></xref> that contains the contents of the specified file.\n  overload: System.Xml.Linq.XElement.Load*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XElement.Load(System.IO.Stream)\n  commentId: M:System.Xml.Linq.XElement.Load(System.IO.Stream)\n  id: Load(System.IO.Stream)\n  parent: System.Xml.Linq.XElement\n  langs:\n  - csharp\n  name: Load(Stream)\n  nameWithType: XElement.Load(Stream)\n  fullName: XElement.Load(Stream)\n  type: Method\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Creates a new <xref href=\"System.Xml.Linq.XElement\"></xref> instance by using the specified stream.\n  remarks: \"If you want to control load options, use the <xref:System.Xml.Linq.XElement.Load%2A> overload that takes <xref:System.Xml.Linq.LoadOptions> as a parameter.  \\n  \\n LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>. Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.  \\n  \\n If you have to modify <xref:System.Xml.XmlReaderSettings>, following these steps:  \\n  \\n1.  Create an <xref:System.Xml.XmlReader> by calling one of the <xref:System.Xml.XmlReader.Create%2A> overloads that take <xref:System.Xml.XmlReaderSettings> as a parameter.  \\n  \\n2.  Pass the <xref:System.Xml.XmlReader> to one of the <xref:System.Xml.Linq.XElement>'s <xref:System.Xml.Linq.XElement.Load%2A> overloads that takes <xref:System.Xml.XmlReader> as a parameter.\"\n  syntax:\n    content: public static System.Xml.Linq.XElement Load (System.IO.Stream stream);\n    parameters:\n    - id: stream\n      type: System.IO.Stream\n      description: The stream that contains the XML data.\n    return:\n      type: System.Xml.Linq.XElement\n      description: An <xref href=\"System.Xml.Linq.XElement\"></xref> object used to read the data that is contained in the stream.\n  overload: System.Xml.Linq.XElement.Load*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XElement.Load(System.Xml.XmlReader)\n  commentId: M:System.Xml.Linq.XElement.Load(System.Xml.XmlReader)\n  id: Load(System.Xml.XmlReader)\n  parent: System.Xml.Linq.XElement\n  langs:\n  - csharp\n  name: Load(XmlReader)\n  nameWithType: XElement.Load(XmlReader)\n  fullName: XElement.Load(XmlReader)\n  type: Method\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Loads an <xref href=\"System.Xml.Linq.XElement\"></xref> from an <xref href=\"System.Xml.XmlReader\"></xref>.\n  remarks: \"By creating an <xref:System.Xml.XmlNodeReader> from a DOM document, and then using the <xref:System.Xml.XmlNodeReader> to create an <xref:System.Xml.Linq.XElement>, this method can be used to create a copy of a DOM document in a LINQ to XML tree.  \\n  \\n LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>. Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.\"\n  example:\n  - \"The following example creates a DOM document, creates an <xref:System.Xml.XmlNodeReader> from the DOM document, instantiates a tree from the reader. This code effectively copies a DOM document into a LINQ to XML tree.  \\n  \\n```csharp  \\n// Create a DOM document with some content.  \\nXmlDocument doc = new XmlDocument();  \\nXmlElement child = doc.CreateElement(\\\"Child\\\");  \\nchild.InnerText = \\\"child contents\\\";  \\nXmlElement root = doc.CreateElement(\\\"Root\\\");  \\nroot.AppendChild(child);  \\ndoc.AppendChild(root);  \\n  \\n// Create a reader and move to the content.  \\nusing (XmlNodeReader nodeReader = new XmlNodeReader(doc)) {  \\n    // the reader must be in the Interactive state in order to  \\n    // Create a LINQ to XML tree from it.  \\n    nodeReader.MoveToContent();  \\n  \\n    XElement xRoot = XElement.Load(nodeReader);  \\n    Console.WriteLine(xRoot);  \\n}  \\n```  \\n  \\n```vb  \\n' Create a DOM document with some content.  \\nDim doc As XmlDocument = New XmlDocument()  \\nDim child As XmlElement = doc.CreateElement(\\\"Child\\\")  \\nchild.InnerText = \\\"child contents\\\"  \\nDim root As XmlElement = doc.CreateElement(\\\"Root\\\")  \\nroot.AppendChild(child)  \\ndoc.AppendChild(root)  \\n  \\n' Create a reader and move to the content.  \\nUsing nodeReader = New XmlNodeReader(doc)  \\n    ' the reader must be in the Interactive state in order to  \\n    ' Create a LINQ to XML tree from it.  \\n    nodeReader.MoveToContent()  \\n  \\n    Dim xRoot As XElement = XElement.Load(nodeReader)  \\n    Console.WriteLine(xRoot)  \\nEnd Using  \\n  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```xml  \\n  \\n                <Root>  \\n  <Child>child contents</Child>  \\n</Root>  \\n```\"\n  syntax:\n    content: public static System.Xml.Linq.XElement Load (System.Xml.XmlReader reader);\n    parameters:\n    - id: reader\n      type: System.Xml.XmlReader\n      description: A <xref href=\"System.Xml.XmlReader\"></xref> that will be read for the content of the <xref href=\"System.Xml.Linq.XElement\"></xref>.\n    return:\n      type: System.Xml.Linq.XElement\n      description: An <xref href=\"System.Xml.Linq.XElement\"></xref> that contains the XML that was read from the specified <xref href=\"System.Xml.XmlReader\"></xref>.\n  overload: System.Xml.Linq.XElement.Load*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XElement.LoadAsync(System.IO.Stream,System.Xml.Linq.LoadOptions,System.Threading.CancellationToken)\n  commentId: M:System.Xml.Linq.XElement.LoadAsync(System.IO.Stream,System.Xml.Linq.LoadOptions,System.Threading.CancellationToken)\n  id: LoadAsync(System.IO.Stream,System.Xml.Linq.LoadOptions,System.Threading.CancellationToken)\n  parent: System.Xml.Linq.XElement\n  langs:\n  - csharp\n  name: LoadAsync(Stream, LoadOptions, CancellationToken)\n  nameWithType: XElement.LoadAsync(Stream, LoadOptions, CancellationToken)\n  fullName: XElement.LoadAsync(Stream, LoadOptions, CancellationToken)\n  type: Method\n  assemblies:\n  - System.Xml.XDocument\n  namespace: System.Xml.Linq\n  syntax:\n    content: public static System.Threading.Tasks.Task<System.Xml.Linq.XElement> LoadAsync (System.IO.Stream stream, System.Xml.Linq.LoadOptions options, System.Threading.CancellationToken cancellationToken);\n    parameters:\n    - id: stream\n      type: System.IO.Stream\n      description: ''\n    - id: options\n      type: System.Xml.Linq.LoadOptions\n      description: ''\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: ''\n    return:\n      type: System.Threading.Tasks.Task{System.Xml.Linq.XElement}\n      description: ''\n  overload: System.Xml.Linq.XElement.LoadAsync*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml\n- uid: System.Xml.Linq.XElement.LoadAsync(System.IO.TextReader,System.Xml.Linq.LoadOptions,System.Threading.CancellationToken)\n  commentId: M:System.Xml.Linq.XElement.LoadAsync(System.IO.TextReader,System.Xml.Linq.LoadOptions,System.Threading.CancellationToken)\n  id: LoadAsync(System.IO.TextReader,System.Xml.Linq.LoadOptions,System.Threading.CancellationToken)\n  parent: System.Xml.Linq.XElement\n  langs:\n  - csharp\n  name: LoadAsync(TextReader, LoadOptions, CancellationToken)\n  nameWithType: XElement.LoadAsync(TextReader, LoadOptions, CancellationToken)\n  fullName: XElement.LoadAsync(TextReader, LoadOptions, CancellationToken)\n  type: Method\n  assemblies:\n  - System.Xml.XDocument\n  namespace: System.Xml.Linq\n  syntax:\n    content: public static System.Threading.Tasks.Task<System.Xml.Linq.XElement> LoadAsync (System.IO.TextReader textReader, System.Xml.Linq.LoadOptions options, System.Threading.CancellationToken cancellationToken);\n    parameters:\n    - id: textReader\n      type: System.IO.TextReader\n      description: ''\n    - id: options\n      type: System.Xml.Linq.LoadOptions\n      description: ''\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: ''\n    return:\n      type: System.Threading.Tasks.Task{System.Xml.Linq.XElement}\n      description: ''\n  overload: System.Xml.Linq.XElement.LoadAsync*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml\n- uid: System.Xml.Linq.XElement.LoadAsync(System.Xml.XmlReader,System.Xml.Linq.LoadOptions,System.Threading.CancellationToken)\n  commentId: M:System.Xml.Linq.XElement.LoadAsync(System.Xml.XmlReader,System.Xml.Linq.LoadOptions,System.Threading.CancellationToken)\n  id: LoadAsync(System.Xml.XmlReader,System.Xml.Linq.LoadOptions,System.Threading.CancellationToken)\n  parent: System.Xml.Linq.XElement\n  langs:\n  - csharp\n  name: LoadAsync(XmlReader, LoadOptions, CancellationToken)\n  nameWithType: XElement.LoadAsync(XmlReader, LoadOptions, CancellationToken)\n  fullName: XElement.LoadAsync(XmlReader, LoadOptions, CancellationToken)\n  type: Method\n  assemblies:\n  - System.Xml.XDocument\n  namespace: System.Xml.Linq\n  syntax:\n    content: public static System.Threading.Tasks.Task<System.Xml.Linq.XElement> LoadAsync (System.Xml.XmlReader reader, System.Xml.Linq.LoadOptions options, System.Threading.CancellationToken cancellationToken);\n    parameters:\n    - id: reader\n      type: System.Xml.XmlReader\n      description: ''\n    - id: options\n      type: System.Xml.Linq.LoadOptions\n      description: ''\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: ''\n    return:\n      type: System.Threading.Tasks.Task{System.Xml.Linq.XElement}\n      description: ''\n  overload: System.Xml.Linq.XElement.LoadAsync*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml\n- uid: System.Xml.Linq.XElement.Name\n  commentId: P:System.Xml.Linq.XElement.Name\n  id: Name\n  parent: System.Xml.Linq.XElement\n  langs:\n  - csharp\n  name: Name\n  nameWithType: XElement.Name\n  fullName: XElement.Name\n  type: Property\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Gets or sets the name of this element.\n  remarks: Setting this property will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.\n  example:\n  - \"The following example uses this property to determine the name of an element.  \\n  \\n```csharp  \\n  \\n                XElement el1 = new XElement(\\\"Root\\\", \\\"content\\\");  \\nConsole.WriteLine(el1.Name);  \\n  \\nXNamespace ns = \\\"http://www.adventure-works.com\\\";  \\nXElement el2 = new XElement(ns + \\\"Root\\\", \\\"content\\\");  \\nConsole.WriteLine(el2.Name);  \\nConsole.WriteLine(el2.Name.Namespace);  \\nConsole.WriteLine(el2.Name.LocalName);  \\nel2.Name = ns + \\\"NewName\\\";  \\nConsole.WriteLine(el2.Name);  \\n```  \\n  \\n```vb  \\n  \\n                Imports <xmlns:aw=\\\"http://www.adventure-works.com\\\">  \\n  \\nModule Module1  \\n    Sub Main()  \\n        Dim el1 As XElement = <Root>content</Root>  \\n        Console.WriteLine(el1.Name)  \\n  \\n        Dim el2 As XElement = <aw:Root>content</aw:Root>  \\n        Console.WriteLine(el2.Name)  \\n        Console.WriteLine(el2.Name.Namespace)  \\n        Console.WriteLine(el2.Name.LocalName)  \\n        Dim aw as XNamespace = GetXmlNamespace(aw)  \\n        el2.Name = aw + \\\"NewName\\\"  \\n        Console.WriteLine(el2.Name)  \\n    End Sub  \\nEnd Module  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```  \\n  \\n                Root  \\n{http://www.adventure-works.com}Root  \\nhttp://www.adventure-works.com  \\nRoot  \\n{http://www.adventure-works.com}NewName  \\n```\"\n  syntax:\n    content: public System.Xml.Linq.XName Name { get; set; }\n    return:\n      type: System.Xml.Linq.XName\n      description: An <xref href=\"System.Xml.Linq.XName\"></xref> that contains the name of this element.\n  overload: System.Xml.Linq.XElement.Name*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XElement.NodeType\n  commentId: P:System.Xml.Linq.XElement.NodeType\n  id: NodeType\n  parent: System.Xml.Linq.XElement\n  langs:\n  - csharp\n  name: NodeType\n  nameWithType: XElement.NodeType\n  fullName: XElement.NodeType\n  type: Property\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Gets the node type for this node.\n  remarks: Because all classes that derive from <xref:System.Xml.Linq.XObject> contain a <xref:System.Xml.Linq.XObject.NodeType%2A> property, you can write code that operates on collections of concrete subclass of <xref:System.Xml.Linq.XObject>. Your code can then test for the node type of each node in the collection.\n  example:\n  - \"The following example uses this property to print the node type of an element.  \\n  \\n```csharp  \\n  \\n                XElement el1 = new XElement(\\\"Root\\\", \\\"content\\\");  \\nConsole.WriteLine(el1.NodeType);  \\nConsole.WriteLine();  \\n```  \\n  \\n```vb  \\n  \\n                Dim el1 As XElement = <Root>content</Root>  \\nConsole.WriteLine(el1.NodeType.ToString())  \\nConsole.WriteLine()  \\n  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```  \\n  \\nElement  \\n```\"\n  syntax:\n    content: public override System.Xml.XmlNodeType NodeType { get; }\n    return:\n      type: System.Xml.XmlNodeType\n      description: The node type. For <xref href=\"System.Xml.Linq.XElement\"></xref> objects, this value is <xref href=\"System.Xml.XmlNodeType.Element\"></xref>.\n  overload: System.Xml.Linq.XElement.NodeType*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.Nullable{System.Int64})\n  commentId: M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Int64}\n  id: op_Explicit(System.Xml.Linq.XElement to System.Nullable{System.Int64})\n  parent: System.Xml.Linq.XElement\n  langs:\n  - csharp\n  name: op_Explicit(XElement to Nullable<Int64>)\n  nameWithType: XElement.op_Explicit(XElement to Nullable<Int64>)\n  fullName: XElement.op_Explicit(XElement to Nullable<Int64>)\n  type: Operator\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static Nullable<long> op_Explicit (System.Xml.Linq.XElement element);\n    parameters:\n    - id: element\n      type: System.Xml.Linq.XElement\n      description: ''\n    return:\n      type: System.Nullable{System.Int64}\n      description: ''\n  overload: System.Xml.Linq.XElement.op_Explicit*\n  exceptions: []\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml\n- uid: System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.Nullable{System.Single})\n  commentId: M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Single}\n  id: op_Explicit(System.Xml.Linq.XElement to System.Nullable{System.Single})\n  parent: System.Xml.Linq.XElement\n  langs:\n  - csharp\n  name: op_Explicit(XElement to Nullable<Single>)\n  nameWithType: XElement.op_Explicit(XElement to Nullable<Single>)\n  fullName: XElement.op_Explicit(XElement to Nullable<Single>)\n  type: Operator\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static Nullable<float> op_Explicit (System.Xml.Linq.XElement element);\n    parameters:\n    - id: element\n      type: System.Xml.Linq.XElement\n      description: ''\n    return:\n      type: System.Nullable{System.Single}\n      description: ''\n  overload: System.Xml.Linq.XElement.op_Explicit*\n  exceptions: []\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml\n- uid: System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.Nullable{System.TimeSpan})\n  commentId: M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.TimeSpan}\n  id: op_Explicit(System.Xml.Linq.XElement to System.Nullable{System.TimeSpan})\n  parent: System.Xml.Linq.XElement\n  langs:\n  - csharp\n  name: op_Explicit(XElement to Nullable<TimeSpan>)\n  nameWithType: XElement.op_Explicit(XElement to Nullable<TimeSpan>)\n  fullName: XElement.op_Explicit(XElement to Nullable<TimeSpan>)\n  type: Operator\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static Nullable<TimeSpan> op_Explicit (System.Xml.Linq.XElement element);\n    parameters:\n    - id: element\n      type: System.Xml.Linq.XElement\n      description: ''\n    return:\n      type: System.Nullable{System.TimeSpan}\n      description: ''\n  overload: System.Xml.Linq.XElement.op_Explicit*\n  exceptions: []\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml\n- uid: System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.Nullable{System.UInt32})\n  commentId: M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.UInt32}\n  id: op_Explicit(System.Xml.Linq.XElement to System.Nullable{System.UInt32})\n  parent: System.Xml.Linq.XElement\n  langs:\n  - csharp\n  name: op_Explicit(XElement to Nullable<UInt32>)\n  nameWithType: XElement.op_Explicit(XElement to Nullable<UInt32>)\n  fullName: XElement.op_Explicit(XElement to Nullable<UInt32>)\n  type: Operator\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static Nullable<uint> op_Explicit (System.Xml.Linq.XElement element);\n    parameters:\n    - id: element\n      type: System.Xml.Linq.XElement\n      description: ''\n    return:\n      type: System.Nullable{System.UInt32}\n      description: ''\n  overload: System.Xml.Linq.XElement.op_Explicit*\n  exceptions: []\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml\n- uid: System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.Nullable{System.UInt64})\n  commentId: M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.UInt64}\n  id: op_Explicit(System.Xml.Linq.XElement to System.Nullable{System.UInt64})\n  parent: System.Xml.Linq.XElement\n  langs:\n  - csharp\n  name: op_Explicit(XElement to Nullable<UInt64>)\n  nameWithType: XElement.op_Explicit(XElement to Nullable<UInt64>)\n  fullName: XElement.op_Explicit(XElement to Nullable<UInt64>)\n  type: Operator\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static Nullable<ulong> op_Explicit (System.Xml.Linq.XElement element);\n    parameters:\n    - id: element\n      type: System.Xml.Linq.XElement\n      description: ''\n    return:\n      type: System.Nullable{System.UInt64}\n      description: ''\n  overload: System.Xml.Linq.XElement.op_Explicit*\n  exceptions: []\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml\n- uid: System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.UInt32)\n  commentId: M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.UInt32\n  id: op_Explicit(System.Xml.Linq.XElement to System.UInt32)\n  parent: System.Xml.Linq.XElement\n  langs:\n  - csharp\n  name: op_Explicit(XElement to UInt32)\n  nameWithType: XElement.op_Explicit(XElement to UInt32)\n  fullName: XElement.op_Explicit(XElement to UInt32)\n  type: Operator\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static uint op_Explicit (System.Xml.Linq.XElement element);\n    parameters:\n    - id: element\n      type: System.Xml.Linq.XElement\n      description: ''\n    return:\n      type: System.UInt32\n      description: ''\n  overload: System.Xml.Linq.XElement.op_Explicit*\n  exceptions: []\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml\n- uid: System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.String)\n  commentId: M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.String\n  id: op_Explicit(System.Xml.Linq.XElement to System.String)\n  parent: System.Xml.Linq.XElement\n  langs:\n  - csharp\n  name: op_Explicit(XElement to String)\n  nameWithType: XElement.op_Explicit(XElement to String)\n  fullName: XElement.op_Explicit(XElement to String)\n  type: Operator\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static string op_Explicit (System.Xml.Linq.XElement element);\n    parameters:\n    - id: element\n      type: System.Xml.Linq.XElement\n      description: ''\n    return:\n      type: System.String\n      description: ''\n  overload: System.Xml.Linq.XElement.op_Explicit*\n  exceptions: []\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml\n- uid: System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.TimeSpan)\n  commentId: M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.TimeSpan\n  id: op_Explicit(System.Xml.Linq.XElement to System.TimeSpan)\n  parent: System.Xml.Linq.XElement\n  langs:\n  - csharp\n  name: op_Explicit(XElement to TimeSpan)\n  nameWithType: XElement.op_Explicit(XElement to TimeSpan)\n  fullName: XElement.op_Explicit(XElement to TimeSpan)\n  type: Operator\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static TimeSpan op_Explicit (System.Xml.Linq.XElement element);\n    parameters:\n    - id: element\n      type: System.Xml.Linq.XElement\n      description: ''\n    return:\n      type: System.TimeSpan\n      description: ''\n  overload: System.Xml.Linq.XElement.op_Explicit*\n  exceptions: []\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml\n- uid: System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.UInt64)\n  commentId: M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.UInt64\n  id: op_Explicit(System.Xml.Linq.XElement to System.UInt64)\n  parent: System.Xml.Linq.XElement\n  langs:\n  - csharp\n  name: op_Explicit(XElement to UInt64)\n  nameWithType: XElement.op_Explicit(XElement to UInt64)\n  fullName: XElement.op_Explicit(XElement to UInt64)\n  type: Operator\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static ulong op_Explicit (System.Xml.Linq.XElement element);\n    parameters:\n    - id: element\n      type: System.Xml.Linq.XElement\n      description: ''\n    return:\n      type: System.UInt64\n      description: ''\n  overload: System.Xml.Linq.XElement.op_Explicit*\n  exceptions: []\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml\n- uid: System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.Nullable{System.Int32})\n  commentId: M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Int32}\n  id: op_Explicit(System.Xml.Linq.XElement to System.Nullable{System.Int32})\n  parent: System.Xml.Linq.XElement\n  langs:\n  - csharp\n  name: op_Explicit(XElement to Nullable<Int32>)\n  nameWithType: XElement.op_Explicit(XElement to Nullable<Int32>)\n  fullName: XElement.op_Explicit(XElement to Nullable<Int32>)\n  type: Operator\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static Nullable<int> op_Explicit (System.Xml.Linq.XElement element);\n    parameters:\n    - id: element\n      type: System.Xml.Linq.XElement\n      description: ''\n    return:\n      type: System.Nullable{System.Int32}\n      description: ''\n  overload: System.Xml.Linq.XElement.op_Explicit*\n  exceptions: []\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml\n- uid: System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.Single)\n  commentId: M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Single\n  id: op_Explicit(System.Xml.Linq.XElement to System.Single)\n  parent: System.Xml.Linq.XElement\n  langs:\n  - csharp\n  name: op_Explicit(XElement to Single)\n  nameWithType: XElement.op_Explicit(XElement to Single)\n  fullName: XElement.op_Explicit(XElement to Single)\n  type: Operator\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static float op_Explicit (System.Xml.Linq.XElement element);\n    parameters:\n    - id: element\n      type: System.Xml.Linq.XElement\n      description: ''\n    return:\n      type: System.Single\n      description: ''\n  overload: System.Xml.Linq.XElement.op_Explicit*\n  exceptions: []\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml\n- uid: System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.Nullable{System.Guid})\n  commentId: M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Guid}\n  id: op_Explicit(System.Xml.Linq.XElement to System.Nullable{System.Guid})\n  parent: System.Xml.Linq.XElement\n  langs:\n  - csharp\n  name: op_Explicit(XElement to Nullable<Guid>)\n  nameWithType: XElement.op_Explicit(XElement to Nullable<Guid>)\n  fullName: XElement.op_Explicit(XElement to Nullable<Guid>)\n  type: Operator\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static Nullable<Guid> op_Explicit (System.Xml.Linq.XElement element);\n    parameters:\n    - id: element\n      type: System.Xml.Linq.XElement\n      description: ''\n    return:\n      type: System.Nullable{System.Guid}\n      description: ''\n  overload: System.Xml.Linq.XElement.op_Explicit*\n  exceptions: []\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml\n- uid: System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.Nullable{System.Boolean})\n  commentId: M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Boolean}\n  id: op_Explicit(System.Xml.Linq.XElement to System.Nullable{System.Boolean})\n  parent: System.Xml.Linq.XElement\n  langs:\n  - csharp\n  name: op_Explicit(XElement to Nullable<Boolean>)\n  nameWithType: XElement.op_Explicit(XElement to Nullable<Boolean>)\n  fullName: XElement.op_Explicit(XElement to Nullable<Boolean>)\n  type: Operator\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static Nullable<bool> op_Explicit (System.Xml.Linq.XElement element);\n    parameters:\n    - id: element\n      type: System.Xml.Linq.XElement\n      description: ''\n    return:\n      type: System.Nullable{System.Boolean}\n      description: ''\n  overload: System.Xml.Linq.XElement.op_Explicit*\n  exceptions: []\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml\n- uid: System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.Nullable{System.Decimal})\n  commentId: M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Decimal}\n  id: op_Explicit(System.Xml.Linq.XElement to System.Nullable{System.Decimal})\n  parent: System.Xml.Linq.XElement\n  langs:\n  - csharp\n  name: op_Explicit(XElement to Nullable<Decimal>)\n  nameWithType: XElement.op_Explicit(XElement to Nullable<Decimal>)\n  fullName: XElement.op_Explicit(XElement to Nullable<Decimal>)\n  type: Operator\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static Nullable<decimal> op_Explicit (System.Xml.Linq.XElement element);\n    parameters:\n    - id: element\n      type: System.Xml.Linq.XElement\n      description: ''\n    return:\n      type: System.Nullable{System.Decimal}\n      description: ''\n  overload: System.Xml.Linq.XElement.op_Explicit*\n  exceptions: []\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml\n- uid: System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.Boolean)\n  commentId: M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Boolean\n  id: op_Explicit(System.Xml.Linq.XElement to System.Boolean)\n  parent: System.Xml.Linq.XElement\n  langs:\n  - csharp\n  name: op_Explicit(XElement to Boolean)\n  nameWithType: XElement.op_Explicit(XElement to Boolean)\n  fullName: XElement.op_Explicit(XElement to Boolean)\n  type: Operator\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static bool op_Explicit (System.Xml.Linq.XElement element);\n    parameters:\n    - id: element\n      type: System.Xml.Linq.XElement\n      description: ''\n    return:\n      type: System.Boolean\n      description: ''\n  overload: System.Xml.Linq.XElement.op_Explicit*\n  exceptions: []\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml\n- uid: System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.DateTime)\n  commentId: M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.DateTime\n  id: op_Explicit(System.Xml.Linq.XElement to System.DateTime)\n  parent: System.Xml.Linq.XElement\n  langs:\n  - csharp\n  name: op_Explicit(XElement to DateTime)\n  nameWithType: XElement.op_Explicit(XElement to DateTime)\n  fullName: XElement.op_Explicit(XElement to DateTime)\n  type: Operator\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static DateTime op_Explicit (System.Xml.Linq.XElement element);\n    parameters:\n    - id: element\n      type: System.Xml.Linq.XElement\n      description: ''\n    return:\n      type: System.DateTime\n      description: ''\n  overload: System.Xml.Linq.XElement.op_Explicit*\n  exceptions: []\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml\n- uid: System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.DateTimeOffset)\n  commentId: M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.DateTimeOffset\n  id: op_Explicit(System.Xml.Linq.XElement to System.DateTimeOffset)\n  parent: System.Xml.Linq.XElement\n  langs:\n  - csharp\n  name: op_Explicit(XElement to DateTimeOffset)\n  nameWithType: XElement.op_Explicit(XElement to DateTimeOffset)\n  fullName: XElement.op_Explicit(XElement to DateTimeOffset)\n  type: Operator\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static DateTimeOffset op_Explicit (System.Xml.Linq.XElement element);\n    parameters:\n    - id: element\n      type: System.Xml.Linq.XElement\n      description: ''\n    return:\n      type: System.DateTimeOffset\n      description: ''\n  overload: System.Xml.Linq.XElement.op_Explicit*\n  exceptions: []\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml\n- uid: System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.Double)\n  commentId: M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Double\n  id: op_Explicit(System.Xml.Linq.XElement to System.Double)\n  parent: System.Xml.Linq.XElement\n  langs:\n  - csharp\n  name: op_Explicit(XElement to Double)\n  nameWithType: XElement.op_Explicit(XElement to Double)\n  fullName: XElement.op_Explicit(XElement to Double)\n  type: Operator\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static double op_Explicit (System.Xml.Linq.XElement element);\n    parameters:\n    - id: element\n      type: System.Xml.Linq.XElement\n      description: ''\n    return:\n      type: System.Double\n      description: ''\n  overload: System.Xml.Linq.XElement.op_Explicit*\n  exceptions: []\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml\n- uid: System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.Guid)\n  commentId: M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Guid\n  id: op_Explicit(System.Xml.Linq.XElement to System.Guid)\n  parent: System.Xml.Linq.XElement\n  langs:\n  - csharp\n  name: op_Explicit(XElement to Guid)\n  nameWithType: XElement.op_Explicit(XElement to Guid)\n  fullName: XElement.op_Explicit(XElement to Guid)\n  type: Operator\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static Guid op_Explicit (System.Xml.Linq.XElement element);\n    parameters:\n    - id: element\n      type: System.Xml.Linq.XElement\n      description: ''\n    return:\n      type: System.Guid\n      description: ''\n  overload: System.Xml.Linq.XElement.op_Explicit*\n  exceptions: []\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml\n- uid: System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.Decimal)\n  commentId: M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Decimal\n  id: op_Explicit(System.Xml.Linq.XElement to System.Decimal)\n  parent: System.Xml.Linq.XElement\n  langs:\n  - csharp\n  name: op_Explicit(XElement to Decimal)\n  nameWithType: XElement.op_Explicit(XElement to Decimal)\n  fullName: XElement.op_Explicit(XElement to Decimal)\n  type: Operator\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static decimal op_Explicit (System.Xml.Linq.XElement element);\n    parameters:\n    - id: element\n      type: System.Xml.Linq.XElement\n      description: ''\n    return:\n      type: System.Decimal\n      description: ''\n  overload: System.Xml.Linq.XElement.op_Explicit*\n  exceptions: []\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml\n- uid: System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.Int64)\n  commentId: M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Int64\n  id: op_Explicit(System.Xml.Linq.XElement to System.Int64)\n  parent: System.Xml.Linq.XElement\n  langs:\n  - csharp\n  name: op_Explicit(XElement to Int64)\n  nameWithType: XElement.op_Explicit(XElement to Int64)\n  fullName: XElement.op_Explicit(XElement to Int64)\n  type: Operator\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static long op_Explicit (System.Xml.Linq.XElement element);\n    parameters:\n    - id: element\n      type: System.Xml.Linq.XElement\n      description: ''\n    return:\n      type: System.Int64\n      description: ''\n  overload: System.Xml.Linq.XElement.op_Explicit*\n  exceptions: []\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml\n- uid: System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.Nullable{System.Double})\n  commentId: M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Double}\n  id: op_Explicit(System.Xml.Linq.XElement to System.Nullable{System.Double})\n  parent: System.Xml.Linq.XElement\n  langs:\n  - csharp\n  name: op_Explicit(XElement to Nullable<Double>)\n  nameWithType: XElement.op_Explicit(XElement to Nullable<Double>)\n  fullName: XElement.op_Explicit(XElement to Nullable<Double>)\n  type: Operator\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static Nullable<double> op_Explicit (System.Xml.Linq.XElement element);\n    parameters:\n    - id: element\n      type: System.Xml.Linq.XElement\n      description: ''\n    return:\n      type: System.Nullable{System.Double}\n      description: ''\n  overload: System.Xml.Linq.XElement.op_Explicit*\n  exceptions: []\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml\n- uid: System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.Nullable{System.DateTime})\n  commentId: M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.DateTime}\n  id: op_Explicit(System.Xml.Linq.XElement to System.Nullable{System.DateTime})\n  parent: System.Xml.Linq.XElement\n  langs:\n  - csharp\n  name: op_Explicit(XElement to Nullable<DateTime>)\n  nameWithType: XElement.op_Explicit(XElement to Nullable<DateTime>)\n  fullName: XElement.op_Explicit(XElement to Nullable<DateTime>)\n  type: Operator\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static Nullable<DateTime> op_Explicit (System.Xml.Linq.XElement element);\n    parameters:\n    - id: element\n      type: System.Xml.Linq.XElement\n      description: ''\n    return:\n      type: System.Nullable{System.DateTime}\n      description: ''\n  overload: System.Xml.Linq.XElement.op_Explicit*\n  exceptions: []\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml\n- uid: System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.Nullable{System.DateTimeOffset})\n  commentId: M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.DateTimeOffset}\n  id: op_Explicit(System.Xml.Linq.XElement to System.Nullable{System.DateTimeOffset})\n  parent: System.Xml.Linq.XElement\n  langs:\n  - csharp\n  name: op_Explicit(XElement to Nullable<DateTimeOffset>)\n  nameWithType: XElement.op_Explicit(XElement to Nullable<DateTimeOffset>)\n  fullName: XElement.op_Explicit(XElement to Nullable<DateTimeOffset>)\n  type: Operator\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static Nullable<DateTimeOffset> op_Explicit (System.Xml.Linq.XElement element);\n    parameters:\n    - id: element\n      type: System.Xml.Linq.XElement\n      description: ''\n    return:\n      type: System.Nullable{System.DateTimeOffset}\n      description: ''\n  overload: System.Xml.Linq.XElement.op_Explicit*\n  exceptions: []\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml\n- uid: System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.Int32)\n  commentId: M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Int32\n  id: op_Explicit(System.Xml.Linq.XElement to System.Int32)\n  parent: System.Xml.Linq.XElement\n  langs:\n  - csharp\n  name: op_Explicit(XElement to Int32)\n  nameWithType: XElement.op_Explicit(XElement to Int32)\n  fullName: XElement.op_Explicit(XElement to Int32)\n  type: Operator\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static int op_Explicit (System.Xml.Linq.XElement element);\n    parameters:\n    - id: element\n      type: System.Xml.Linq.XElement\n      description: ''\n    return:\n      type: System.Int32\n      description: ''\n  overload: System.Xml.Linq.XElement.op_Explicit*\n  exceptions: []\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml\n- uid: System.Xml.Linq.XElement.Parse(System.String)\n  commentId: M:System.Xml.Linq.XElement.Parse(System.String)\n  id: Parse(System.String)\n  parent: System.Xml.Linq.XElement\n  langs:\n  - csharp\n  name: Parse(String)\n  nameWithType: XElement.Parse(String)\n  fullName: XElement.Parse(String)\n  type: Method\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Load an <xref href=\"System.Xml.Linq.XElement\"></xref> from a string that contains XML.\n  remarks: \"This method does not preserve white space. If you want to preserve white space in the XML tree, use the overload of the <xref:System.Xml.Linq.XElement.Parse%2A> method that takes <xref:System.Xml.Linq.LoadOptions> as a parameter. For more information, see [Preserving White Space while Loading or Parsing XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).  \\n  \\n LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>. Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.\"\n  example:\n  - \"The following example creates a string that contains XML. It then parses the string into an <xref:System.Xml.Linq.XElement>.  \\n  \\n```csharp  \\n  \\n                XElement xmlTree = XElement.Parse(\\\"<Root> <Child> </Child> </Root>\\\");  \\nConsole.WriteLine(xmlTree);  \\n```  \\n  \\n```vb  \\n  \\n                Dim xmlTree As XElement = <Root><Child></Child></Root>  \\nConsole.WriteLine(xmlTree)  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```xml  \\n  \\n                <Root>  \\n  <Child></Child>  \\n</Root>  \\n```\"\n  syntax:\n    content: public static System.Xml.Linq.XElement Parse (string text);\n    parameters:\n    - id: text\n      type: System.String\n      description: A <xref href=\"System.String\"></xref> that contains XML.\n    return:\n      type: System.Xml.Linq.XElement\n      description: An <xref href=\"System.Xml.Linq.XElement\"></xref> populated from the string that contains XML.\n  overload: System.Xml.Linq.XElement.Parse*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XElement.Parse(System.String,System.Xml.Linq.LoadOptions)\n  commentId: M:System.Xml.Linq.XElement.Parse(System.String,System.Xml.Linq.LoadOptions)\n  id: Parse(System.String,System.Xml.Linq.LoadOptions)\n  parent: System.Xml.Linq.XElement\n  langs:\n  - csharp\n  name: Parse(String, LoadOptions)\n  nameWithType: XElement.Parse(String, LoadOptions)\n  fullName: XElement.Parse(String, LoadOptions)\n  type: Method\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Load an <xref href=\"System.Xml.Linq.XElement\"></xref> from a string that contains XML, optionally preserving white space and retaining line information.\n  remarks: \"If the source XML is indented, setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` causes the reader to read all white space in the source XML. Nodes of type <xref:System.Xml.Linq.XText> are created for both significant and insignificant white space.  \\n  \\n If the source XML is indented, not setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` causes the reader to ignore all of the insignificant white space in the source XML. The XML tree is created without any text nodes for insignificant white space.  \\n  \\n If the source XML is not indented, setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` has no effect. Significant white space is still preserved, and there are no spans of insignificant white space that could cause the creation of more white space text nodes.  \\n  \\n For more information, see [Preserving White Space while Loading or Parsing XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).  \\n  \\n Setting <xref:System.Xml.Linq.LoadOptions.SetBaseUri> will have no effect when parsing from a <xref:System.String>.  \\n  \\n The <xref:System.Xml.XmlReader> may have a valid line information or not. If you set <xref:System.Xml.Linq.LoadOptions.SetLineInfo>, the line information will be set in the XML tree from the line information that is reported by the <xref:System.Xml.XmlReader>.  \\n  \\n There is a performance penalty if you set the <xref:System.Xml.Linq.LoadOptions.SetLineInfo> flag.  \\n  \\n The line information is accurate immediately after loading the XML document. If you modify the XML tree after loading the document, the line information may become meaningless.  \\n  \\n LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>. Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.\"\n  example:\n  - \"The following example parses a string into an <xref:System.Xml.Linq.XElement> in two different ways: preserving white space, and not preserving white space. It then uses a query to determine the number of white space nodes in the resulting XML tree.  \\n  \\n```csharp  \\n  \\n                int whiteSpaceNodes;  \\n  \\nXElement xmlTree1 = XElement.Parse(\\\"<Root> <Child> </Child> </Root>\\\",  \\n    LoadOptions.None);  \\nwhiteSpaceNodes = xmlTree1  \\n    .DescendantNodesAndSelf()  \\n    .OfType<XText>()  \\n    .Where(tNode => tNode.ToString().Trim().Length == 0)  \\n    .Count();  \\nConsole.WriteLine(\\\"Count of white space nodes (not preserving whitespace): {0}\\\",  \\n    whiteSpaceNodes);  \\n  \\nXElement xmlTree2 = XElement.Parse(\\\"<Root> <Child> </Child> </Root>\\\",  \\n    LoadOptions.PreserveWhitespace);  \\nwhiteSpaceNodes = xmlTree2  \\n    .DescendantNodesAndSelf()  \\n    .OfType<XText>()  \\n    .Where(tNode => tNode.ToString().Trim().Length == 0)  \\n    .Count();  \\nConsole.WriteLine(\\\"Count of white space nodes (preserving whitespace): {0}\\\",  \\n    whiteSpaceNodes);  \\n```  \\n  \\n```vb  \\n  \\n                Dim whiteSpaceNodes As Integer  \\n  \\nDim xmlTree1 As XElement = XElement.Parse(\\\"<Root> <Child> </Child> </Root>\\\", LoadOptions.None)  \\nwhiteSpaceNodes = xmlTree1 _  \\n    .DescendantNodesAndSelf() _  \\n    .OfType(Of XText)() _  \\n    .Where(Function(ByVal tNode As XNode) tNode.ToString().Trim().Length = 0) _  \\n    .Count()  \\nConsole.WriteLine(\\\"Count of white space nodes (not preserving whitespace): {0}\\\", whiteSpaceNodes)  \\n  \\nDim xmlTree2 As XElement = XElement.Parse(\\\"<Root> <Child> </Child> </Root>\\\", LoadOptions.PreserveWhitespace)  \\nwhiteSpaceNodes = xmlTree2 _  \\n    .DescendantNodesAndSelf() _  \\n    .OfType(Of XText)() _  \\n    .Where(Function(ByVal tNode As XNode) tNode.ToString().Trim().Length = 0) _  \\n    .Count()  \\nConsole.WriteLine(\\\"Count of white space nodes (preserving whitespace): {0}\\\", whiteSpaceNodes)  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```  \\n  \\n                Count of white space nodes (not preserving whitespace): 0  \\nCount of white space nodes (preserving whitespace): 3  \\n```  \\n  \\n The following example retains line information as it parses the string.  \\n  \\n```csharp  \\n  \\n                string markup =  \\n@\\\"<Root>  \\n    <Child>  \\n        <GrandChild/>  \\n    </Child>  \\n</Root>\\\";  \\n  \\nXElement xRoot = XElement.Parse(markup, LoadOptions.SetLineInfo);  \\nConsole.WriteLine(\\\"{0}{1}{2}\\\",  \\n    \\\"Element Name\\\".PadRight(20),  \\n    \\\"Line\\\".PadRight(5),  \\n    \\\"Position\\\");  \\nConsole.WriteLine(\\\"{0}{1}{2}\\\",  \\n    \\\"------------\\\".PadRight(20),  \\n    \\\"----\\\".PadRight(5),  \\n    \\\"--------\\\");  \\nforeach (XElement e in xRoot.DescendantsAndSelf())  \\n    Console.WriteLine(\\\"{0}{1}{2}\\\",  \\n        (\\\"\\\".PadRight(e.Ancestors().Count() * 2) + e.Name).PadRight(20),  \\n        ((IXmlLineInfo)e).LineNumber.ToString().PadRight(5),  \\n        ((IXmlLineInfo)e).LinePosition);  \\n```  \\n  \\n```vb  \\n  \\n                Dim markup As String = _  \\n\\\"<Root>\\\" & Environment.NewLine & _  \\n\\\"    <Child>\\\" & Environment.NewLine & _  \\n\\\"        <GrandChild/>\\\" & Environment.NewLine & _  \\n\\\"    </Child>\\\" & Environment.NewLine & _  \\n\\\"</Root>\\\"  \\n  \\nDim xRoot As XElement = XElement.Parse(markup, LoadOptions.SetLineInfo)  \\nConsole.WriteLine(\\\"{0}{1}{2}\\\", _  \\n    \\\"Element Name\\\".PadRight(20), _  \\n    \\\"Line\\\".PadRight(5), _  \\n    \\\"Position\\\")  \\nConsole.WriteLine(\\\"{0}{1}{2}\\\", _  \\n    \\\"------------\\\".PadRight(20), _  \\n    \\\"----\\\".PadRight(5), _  \\n    \\\"--------\\\")  \\nFor Each e As XElement In xRoot.DescendantsAndSelf()  \\n    Console.WriteLine(\\\"{0}{1}{2}\\\", _  \\n        (\\\"\\\".PadRight(e.Ancestors().Count() * 2) & e.Name.ToString).PadRight(20), _  \\n        DirectCast(e, IXmlLineInfo).LineNumber.ToString().PadRight(5), _  \\n        DirectCast(e, IXmlLineInfo).LinePosition)  \\nNext  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```  \\n  \\n                Element Name        Line Position  \\n------------        ---- --------  \\nRoot                1    2  \\n  Child             2    6  \\n    GrandChild      3    10  \\n```\"\n  syntax:\n    content: public static System.Xml.Linq.XElement Parse (string text, System.Xml.Linq.LoadOptions options);\n    parameters:\n    - id: text\n      type: System.String\n      description: A <xref href=\"System.String\"></xref> that contains XML.\n    - id: options\n      type: System.Xml.Linq.LoadOptions\n      description: A <xref href=\"System.Xml.Linq.LoadOptions\"></xref> that specifies white space behavior, and whether to load base URI and line information.\n    return:\n      type: System.Xml.Linq.XElement\n      description: An <xref href=\"System.Xml.Linq.XElement\"></xref> populated from the string that contains XML.\n  overload: System.Xml.Linq.XElement.Parse*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XElement.RemoveAll\n  commentId: M:System.Xml.Linq.XElement.RemoveAll\n  id: RemoveAll\n  parent: System.Xml.Linq.XElement\n  langs:\n  - csharp\n  name: RemoveAll()\n  nameWithType: XElement.RemoveAll()\n  fullName: XElement.RemoveAll()\n  type: Method\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Removes nodes and attributes from this <xref href=\"System.Xml.Linq.XElement\"></xref>.\n  remarks: This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.\n  example:\n  - \"The following example creates an element with attributes and child elements. It then calls this method to remove both the attributes and the child elements.  \\n  \\n```csharp  \\n  \\n                XElement root = new XElement(\\\"Root\\\",  \\n    new XAttribute(\\\"Att1\\\", 1),  \\n    new XAttribute(\\\"Att2\\\", 2),  \\n    new XAttribute(\\\"Att3\\\", 3),  \\n    new XElement(\\\"Child1\\\", 1),  \\n    new XElement(\\\"Child2\\\", 2),  \\n    new XElement(\\\"Child3\\\", 3)  \\n);  \\nroot.RemoveAll();   // removes children elements and attributes of root  \\nConsole.WriteLine(root);  \\n```  \\n  \\n```vb  \\n  \\n                Dim root As XElement = _   \\n        <Root Attr1=\\\"1\\\" Attr2=\\\"2\\\" Attr3=\\\"3\\\">  \\n            <Child1>1</Child1>  \\n            <Child2>2</Child2>  \\n            <Child3>3</Child3>  \\n        </Root>  \\n  \\nroot.RemoveAll()   ' removes children elements and attributes of root  \\nConsole.WriteLine(root)  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```xml  \\n  \\n<Root />  \\n```\"\n  syntax:\n    content: public void RemoveAll ();\n    parameters: []\n  overload: System.Xml.Linq.XElement.RemoveAll*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XElement.RemoveAttributes\n  commentId: M:System.Xml.Linq.XElement.RemoveAttributes\n  id: RemoveAttributes\n  parent: System.Xml.Linq.XElement\n  langs:\n  - csharp\n  name: RemoveAttributes()\n  nameWithType: XElement.RemoveAttributes()\n  fullName: XElement.RemoveAttributes()\n  type: Method\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Removes the attributes of this <xref href=\"System.Xml.Linq.XElement\"></xref>.\n  remarks: This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.\n  example:\n  - \"The following example creates an element with attributes and child elements. It then calls this method to remove the attributes. The child elements remain.  \\n  \\n```csharp  \\n  \\n                XElement root = new XElement(\\\"Root\\\",  \\n    new XAttribute(\\\"Att1\\\", 1),  \\n    new XAttribute(\\\"Att2\\\", 2),  \\n    new XAttribute(\\\"Att3\\\", 3),  \\n    new XElement(\\\"Child1\\\", 1),  \\n    new XElement(\\\"Child2\\\", 2),  \\n    new XElement(\\\"Child3\\\", 3)  \\n);  \\nroot.RemoveAttributes();  \\nConsole.WriteLine(root);  \\n```  \\n  \\n```vb  \\n  \\n                Dim root As XElement = _   \\n    <Root Attr1=\\\"1\\\" Attr2=\\\"2\\\" Attr3=\\\"3\\\">  \\n        <Child1>1</Child1>  \\n        <Child2>2</Child2>  \\n        <Child3>3</Child3>  \\n     </Root>  \\n  \\nroot.RemoveAttributes()  \\nConsole.WriteLine(root)  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```xml  \\n  \\n                <Root>  \\n  <Child1>1</Child1>  \\n  <Child2>2</Child2>  \\n  <Child3>3</Child3>  \\n</Root>   \\n```\"\n  syntax:\n    content: public void RemoveAttributes ();\n    parameters: []\n  overload: System.Xml.Linq.XElement.RemoveAttributes*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XElement.ReplaceAll(System.Object)\n  commentId: M:System.Xml.Linq.XElement.ReplaceAll(System.Object)\n  id: ReplaceAll(System.Object)\n  parent: System.Xml.Linq.XElement\n  langs:\n  - csharp\n  name: ReplaceAll(Object)\n  nameWithType: XElement.ReplaceAll(Object)\n  fullName: XElement.ReplaceAll(Object)\n  type: Method\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Replaces the child nodes and the attributes of this element with the specified content.\n  remarks: \"This method first removes existing content and attributes. It then adds the specified `content`.  \\n  \\n This method uses snapshot semantics—that is, it creates a separate copy of the new content before replacing the contents of the current element with the new content. This means that you can query the contents of the current element and use the results of the query as the specified new content.  \\n  \\n For details about the valid content that can be passed to this function, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).  \\n  \\n This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.\"\n  example:\n  - \"The following example uses this method.  \\n  \\n```csharp  \\n  \\n                XElement root = new XElement(\\\"Root\\\",  \\n    new XElement(\\\"Child\\\", \\\"child content\\\")  \\n);  \\n  \\n// ReplaceAll with an XElement object.  \\nroot.ReplaceAll(new XElement(\\\"NewChild\\\", \\\"n\\\"));  \\nConsole.WriteLine(root);  \\n  \\n// ReplaceAll with an XAttribute object.  \\nroot.ReplaceAll(new XAttribute(\\\"NewAttribute\\\", \\\"n\\\"));  \\nConsole.WriteLine(root);  \\n  \\n// ReplaceAll with a string.  \\nroot.ReplaceAll(\\\"Some text\\\");  \\nConsole.WriteLine(root);  \\n  \\n// ReplaceAll with a double.  \\ndouble dbl = 12.345;  \\nroot.ReplaceAll(dbl);  \\nConsole.WriteLine(root);  \\n  \\n// ReplaceAll with a DateTime object.  \\nDateTime dt = new DateTime(2006, 10, 6, 12, 30, 00);  \\nroot.ReplaceAll(dt);  \\nConsole.WriteLine(root);  \\n  \\n// ReplaceAll with a string array.  \\n// Any collection other than a collection of XElement or XAttribute objects  \\n// are converted to strings. The strings are concatenated and added.  \\nstring[] stringArray = {  \\n    \\\"abc\\\",  \\n    \\\"def\\\",  \\n    \\\"ghi\\\"  \\n};  \\nroot.ReplaceAll(stringArray);  \\nConsole.WriteLine(root);  \\n  \\n// ReplaceAll with an array of XElement objects.  \\nXElement[] ellArray = {  \\n    new XElement(\\\"NewChild1\\\", 1),  \\n    new XElement(\\\"NewChild2\\\", 2),  \\n    new XElement(\\\"NewChild3\\\", 3)  \\n};  \\nroot.ReplaceAll(ellArray);  \\nConsole.WriteLine(root);  \\n  \\n// ReplaceAll with an array of XAttribute objects.  \\nXAttribute[] attArray = {  \\n    new XAttribute(\\\"NewAtt1\\\", 1),  \\n    new XAttribute(\\\"NewAtt2\\\", 2),  \\n    new XAttribute(\\\"NewAtt3\\\", 3)  \\n};  \\nroot.ReplaceAll(attArray);  \\nConsole.WriteLine(root);  \\n```  \\n  \\n```vb  \\n  \\n                Dim root As XElement = _   \\n    <Root>  \\n        <Child>child content</Child>  \\n    </Root>  \\n  \\n' ReplaceAll with an XElement object.  \\nroot.ReplaceAll(<NewChild>n</NewChild>)  \\nConsole.WriteLine(root)  \\n  \\n' ReplaceAll with an XAttribute object.  \\nroot.ReplaceAll(New XAttribute(\\\"NewAttribute\\\", \\\"n\\\"))  \\nConsole.WriteLine(root)  \\n  \\n' ReplaceAll with a string.  \\nroot.ReplaceAll(\\\"Some text\\\")  \\nConsole.WriteLine(root)  \\n  \\n' ReplaceAll with a double.  \\nDim dbl As Double = 12.345  \\nroot.ReplaceAll(dbl)  \\nConsole.WriteLine(root)  \\n  \\n' ReplaceAll with a DateTime object.  \\nDim dt As DateTime = New DateTime(2006, 10, 6, 12, 30, 0)  \\nroot.ReplaceAll(dt)  \\nConsole.WriteLine(root)  \\n  \\n' ReplaceAll with a string array.  \\n' Any collection other than a collection of XElement or XAttribute objects  \\n' are converted to strings. The strings are concatenated and added.  \\nDim stringArray As String() = { _  \\n    \\\"abc\\\", _  \\n    \\\"def\\\", _  \\n    \\\"ghi\\\" _  \\n}  \\nroot.ReplaceAll(stringArray)  \\nConsole.WriteLine(root)  \\n  \\n' ReplaceAll with an array of XElement objects.  \\nDim ellArray As XElement() = { _  \\n    New XElement(\\\"NewChild1\\\", 1), _  \\n    New XElement(\\\"NewChild2\\\", 2), _  \\n    New XElement(\\\"NewChild3\\\", 3) _  \\n}  \\nroot.ReplaceAll(ellArray)  \\nConsole.WriteLine(root)  \\n  \\n' ReplaceAll with an array of XAttribute objects.  \\nDim attArray As XAttribute() = { _  \\nNew XAttribute(\\\"NewAtt1\\\", 1), _  \\nNew XAttribute(\\\"NewAtt2\\\", 2), _  \\nNew XAttribute(\\\"NewAtt3\\\", 3) _  \\n}  \\nroot.ReplaceAll(attArray)  \\nConsole.WriteLine(root)  \\n  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```  \\n  \\n                <Root>  \\n  <NewChild>n</NewChild>  \\n</Root>  \\n<Root NewAttribute=\\\"n\\\" />  \\n<Root>Some text</Root>  \\n<Root>12.345</Root>  \\n<Root>2006-10-06T12:30:00</Root>  \\n<Root>abcdefghi</Root>  \\n<Root>  \\n  <NewChild1>1</NewChild1>  \\n  <NewChild2>2</NewChild2>  \\n  <NewChild3>3</NewChild3>  \\n</Root>  \\n<Root NewAtt1=\\\"1\\\" NewAtt2=\\\"2\\\" NewAtt3=\\\"3\\\" />  \\n```\"\n  syntax:\n    content: public void ReplaceAll (object content);\n    parameters:\n    - id: content\n      type: System.Object\n      description: The content that will replace the child nodes and attributes of this element.\n  overload: System.Xml.Linq.XElement.ReplaceAll*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XElement.ReplaceAll(System.Object[])\n  commentId: M:System.Xml.Linq.XElement.ReplaceAll(System.Object[])\n  id: ReplaceAll(System.Object[])\n  parent: System.Xml.Linq.XElement\n  langs:\n  - csharp\n  name: ReplaceAll(Object[])\n  nameWithType: XElement.ReplaceAll(Object[])\n  fullName: XElement.ReplaceAll(Object[])\n  type: Method\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Replaces the child nodes and the attributes of this element with the specified content.\n  remarks: \"This method first removes existing content and attributes. It then adds the specified `content`.  \\n  \\n This method uses snapshot semantics—that is, it creates a separate copy of the new content before replacing the contents of the current element with the new content. This means that you can query the contents of the current element and use the results of the query as the specified new content.  \\n  \\n For details about the valid content that can be passed to this function, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).  \\n  \\n This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.\"\n  example:\n  - \"The following example passes the results of a LINQ query to this method, replacing the contents of an element with the query results.  \\n  \\n```csharp  \\n  \\n                XElement xmlTree1 = new XElement(\\\"Root\\\",  \\n    new XElement(\\\"Child1\\\", 1),  \\n    new XElement(\\\"Child2\\\", 2),  \\n    new XElement(\\\"Child3\\\", 3),  \\n    new XElement(\\\"Child4\\\", 4),  \\n    new XElement(\\\"Child5\\\", 5),  \\n    new XElement(\\\"Child6\\\", 6)  \\n);  \\n  \\nXElement root = new XElement(\\\"Root\\\",  \\n    new XElement(\\\"Child\\\", \\\"child content\\\")  \\n);  \\n  \\nroot.ReplaceAll(  \\n    from el in xmlTree1.Elements()  \\n    where((int)el >= 3 && (int)el <= 5)  \\n    select el  \\n);  \\nConsole.WriteLine(root);  \\n```  \\n  \\n```vb  \\n  \\n                Dim xmlTree1 As XElement = _   \\n        <Root>  \\n            <Child1>1</Child1>  \\n            <Child2>2</Child2>  \\n            <Child3>3</Child3>  \\n            <Child4>4</Child4>  \\n            <Child5>5</Child5>  \\n            <Child6>6</Child6>  \\n        </Root>  \\n  \\nDim root As XElement = <Root>  \\n                           <Child>child content</Child>  \\n                       </Root>  \\n  \\nroot.ReplaceAll( _  \\n    From el In xmlTree1.Elements() _  \\n    Where el.Value >= 3 And el.Value <= 5 _  \\n    Select el _  \\n)  \\n  \\nConsole.WriteLine(root)  \\n  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```xml  \\n  \\n                <Root>  \\n  <Child3>3</Child3>  \\n  <Child4>4</Child4>  \\n  <Child5>5</Child5>  \\n</Root>  \\n```\"\n  syntax:\n    content: public void ReplaceAll (object[] content);\n    parameters:\n    - id: content\n      type: System.Object[]\n      description: A parameter list of content objects.\n  overload: System.Xml.Linq.XElement.ReplaceAll*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XElement.ReplaceAttributes(System.Object[])\n  commentId: M:System.Xml.Linq.XElement.ReplaceAttributes(System.Object[])\n  id: ReplaceAttributes(System.Object[])\n  parent: System.Xml.Linq.XElement\n  langs:\n  - csharp\n  name: ReplaceAttributes(Object[])\n  nameWithType: XElement.ReplaceAttributes(Object[])\n  fullName: XElement.ReplaceAttributes(Object[])\n  type: Method\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Replaces the attributes of this element with the specified content.\n  remarks: \"This method first removes existing attributes. It then adds the specified `content`.  \\n  \\n For details about the valid content that can be passed to this function, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).  \\n  \\n This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.\"\n  example:\n  - \"The following example creates an element with three attributes. It then replaces the attributes with other attributes.  \\n  \\n```csharp  \\n  \\n                XElement root = new XElement(\\\"Root\\\",  \\n    new XAttribute(\\\"Att1\\\", 1),  \\n    new XAttribute(\\\"Att2\\\", 2),  \\n    new XAttribute(\\\"Att3\\\", 3)  \\n);  \\nroot.ReplaceAttributes(  \\n    new XAttribute(\\\"NewAtt1\\\", 101),  \\n    new XAttribute(\\\"NewAtt2\\\", 102),  \\n    new XAttribute(\\\"NewAtt3\\\", 103)  \\n);  \\nConsole.WriteLine(root);  \\n```  \\n  \\n```vb  \\n  \\n                Dim root As XElement = <Root Att1=\\\"1\\\" Att2=\\\"2\\\" Att3=\\\"3\\\"/>  \\nroot.ReplaceAttributes( _  \\nNew XAttribute(\\\"NewAtt1\\\", 101), _  \\nNew XAttribute(\\\"NewAtt2\\\", 102), _  \\nNew XAttribute(\\\"NewAtt3\\\", 103))  \\nConsole.WriteLine(root)  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```xml  \\n  \\n<Root NewAtt1=\\\"101\\\" NewAtt2=\\\"102\\\" NewAtt3=\\\"103\\\" />  \\n```\"\n  syntax:\n    content: public void ReplaceAttributes (object[] content);\n    parameters:\n    - id: content\n      type: System.Object[]\n      description: A parameter list of content objects.\n  overload: System.Xml.Linq.XElement.ReplaceAttributes*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XElement.ReplaceAttributes(System.Object)\n  commentId: M:System.Xml.Linq.XElement.ReplaceAttributes(System.Object)\n  id: ReplaceAttributes(System.Object)\n  parent: System.Xml.Linq.XElement\n  langs:\n  - csharp\n  name: ReplaceAttributes(Object)\n  nameWithType: XElement.ReplaceAttributes(Object)\n  fullName: XElement.ReplaceAttributes(Object)\n  type: Method\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Replaces the attributes of this element with the specified content.\n  remarks: \"This method first removes existing attributes. It then adds the specified `content`.  \\n  \\n For details about the valid content that can be passed to this function, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).  \\n  \\n This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.\"\n  example:\n  - \"The following example creates an element with three attributes. It then uses this method to replace all of the attributes of the element with a single attribute.  \\n  \\n```csharp  \\n  \\n                XElement root = new XElement(\\\"Root\\\",  \\n    new XAttribute(\\\"Att1\\\", 1),  \\n    new XAttribute(\\\"Att2\\\", 2),  \\n    new XAttribute(\\\"Att3\\\", 3)  \\n);  \\nroot.ReplaceAttributes(  \\n    new XAttribute(\\\"NewAtt1\\\", 101)  \\n);  \\nConsole.WriteLine(root);  \\n```  \\n  \\n```vb  \\n  \\n                Dim root As XElement = <Root Att1=\\\"1\\\" Att2=\\\"2\\\" Att3=\\\"3\\\"/>  \\nroot.ReplaceAttributes(New XAttribute(\\\"NewAtt1\\\", 101))  \\nConsole.WriteLine(root)  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```xml  \\n  \\n<Root NewAtt1=\\\"101\\\" />  \\n```\"\n  syntax:\n    content: public void ReplaceAttributes (object content);\n    parameters:\n    - id: content\n      type: System.Object\n      description: The content that will replace the attributes of this element.\n  overload: System.Xml.Linq.XElement.ReplaceAttributes*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XElement.Save(System.IO.Stream)\n  commentId: M:System.Xml.Linq.XElement.Save(System.IO.Stream)\n  id: Save(System.IO.Stream)\n  parent: System.Xml.Linq.XElement\n  langs:\n  - csharp\n  name: Save(Stream)\n  nameWithType: XElement.Save(Stream)\n  fullName: XElement.Save(Stream)\n  type: Method\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Outputs this <xref href=\"System.Xml.Linq.XElement\"></xref> to the specified <xref href=\"System.IO.Stream\"></xref>.\n  remarks: \"The serialized XML will be indented. All insignificant white space will be removed, and additional white space will be added so that the XML will be properly indented. The behavior of this method is that insignificant white space will not be preserved.  \\n  \\n If you want to control white space, use the overload of <xref:System.Xml.Linq.XElement.Save%2A> that takes <xref:System.Xml.Linq.SaveOptions> as a parameter. Use the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> option to save unindented XML. This will cause the writer to write all white spaces exactly as represented in the XML tree.  \\n  \\n Use the <xref:System.Xml.Linq.SaveOptions.OmitDuplicateNamespaces> option if you want to remove duplicate namespace declarations.\"\n  syntax:\n    content: public void Save (System.IO.Stream stream);\n    parameters:\n    - id: stream\n      type: System.IO.Stream\n      description: The stream to output this <xref href=\"System.Xml.Linq.XElement\"></xref> to.\n  overload: System.Xml.Linq.XElement.Save*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XElement.Save(System.IO.TextWriter)\n  commentId: M:System.Xml.Linq.XElement.Save(System.IO.TextWriter)\n  id: Save(System.IO.TextWriter)\n  parent: System.Xml.Linq.XElement\n  langs:\n  - csharp\n  name: Save(TextWriter)\n  nameWithType: XElement.Save(TextWriter)\n  fullName: XElement.Save(TextWriter)\n  type: Method\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Serialize this element to a <xref href=\"System.IO.TextWriter\"></xref>.\n  remarks: \"The serialized XML will be indented. All insignificant white space will be removed, and additional white space will be added so that the XML will be properly indented. The behavior of this method is that white space will not be preserved.  \\n  \\n If you want to control white space, use the overload of <xref:System.Xml.Linq.XElement.Save%2A> that allows you to specify <xref:System.Xml.Linq.SaveOptions> as a parameter. For more information, see [Preserving White Space while Loading or Parsing XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).\"\n  example:\n  - \"The following example creates an <xref:System.Xml.Linq.XElement>, saves the document to a <xref:System.IO.StringWriter>, and then prints the string to the console.  \\n  \\n```csharp  \\n  \\n                XElement root = XElement.Parse(@\\\"<Root> <Child> Text </Child> </Root>\\\");  \\nusing (StringWriter sw = new StringWriter()) {  \\n    root.Save(sw);  \\n    Console.WriteLine(sw.ToString());  \\n}  \\n```  \\n  \\n```vb  \\n  \\n                Dim root As XElement = <Root><Child> Text </Child></Root>  \\nUsing sw = New StringWriter()  \\n    root.Save(sw)  \\n    Console.WriteLine(sw.ToString())  \\nEnd Using  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```xml  \\n  \\n                <?xml version=\\\"1.0\\\" encoding=\\\"utf-16\\\"?>  \\n<Root>  \\n  <Child> Text </Child>  \\n</Root>  \\n```\"\n  syntax:\n    content: public void Save (System.IO.TextWriter textWriter);\n    parameters:\n    - id: textWriter\n      type: System.IO.TextWriter\n      description: A <xref href=\"System.IO.TextWriter\"></xref> that the <xref href=\"System.Xml.Linq.XElement\"></xref> will be written to.\n  overload: System.Xml.Linq.XElement.Save*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XElement.Save(System.String)\n  commentId: M:System.Xml.Linq.XElement.Save(System.String)\n  id: Save(System.String)\n  parent: System.Xml.Linq.XElement\n  langs:\n  - csharp\n  name: Save(String)\n  nameWithType: XElement.Save(String)\n  fullName: XElement.Save(String)\n  type: Method\n  assemblies:\n  - System.Xml.Linq\n  - netstandard\n  - System.Xml.XDocument\n  namespace: System.Xml.Linq\n  summary: Serialize this element to a file.\n  remarks: \"The serialized XML will be indented. All insignificant white space will be removed, and additional white space will be added so that the XML will be properly indented. The behavior of this method is that insignificant white space nodes in the XML tree will not be preserved.  \\n  \\n If you want to control white space, use the overload of <xref:System.Xml.Linq.XElement.Save%2A> that allows you to specify <xref:System.Xml.Linq.SaveOptions> as a parameter. For more information, see [Preserving White Space while Loading or Parsing XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).\"\n  example:\n  - \"The following example creates an <xref:System.Xml.Linq.XElement>, saves the document to a file, and then prints the file to the console.  \\n  \\n```csharp  \\n  \\n                XElement root = new XElement(\\\"Root\\\",  \\n    new XElement(\\\"Child\\\", \\\"child content\\\")  \\n);  \\nroot.Save(\\\"Root.xml\\\");  \\nstring str = File.ReadAllText(\\\"Root.xml\\\");  \\nConsole.WriteLine(str);  \\n```  \\n  \\n```vb  \\n  \\n                Dim root As XElement = _   \\n        <Root>  \\n            <Child>child content</Child>  \\n        </Root>  \\nroot.Save(\\\"Root.xml\\\")  \\nDim Str As String = File.ReadAllText(\\\"Root.xml\\\")  \\nConsole.WriteLine(Str)  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```xml  \\n  \\n                <?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>  \\n<Root>  \\n  <Child>child content</Child>  \\n</Root>  \\n```\"\n  syntax:\n    content: public void Save (string fileName);\n    parameters:\n    - id: fileName\n      type: System.String\n      description: A <xref href=\"System.String\"></xref> that contains the name of the file.\n  overload: System.Xml.Linq.XElement.Save*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XElement.Save(System.Xml.XmlWriter)\n  commentId: M:System.Xml.Linq.XElement.Save(System.Xml.XmlWriter)\n  id: Save(System.Xml.XmlWriter)\n  parent: System.Xml.Linq.XElement\n  langs:\n  - csharp\n  name: Save(XmlWriter)\n  nameWithType: XElement.Save(XmlWriter)\n  fullName: XElement.Save(XmlWriter)\n  type: Method\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Serialize this element to an <xref href=\"System.Xml.XmlWriter\"></xref>.\n  remarks: ''\n  example:\n  - \"The following example shows how to save an <xref:System.Xml.Linq.XElement> to an <xref:System.Xml.XmlWriter>.  \\n  \\n```csharp  \\n  \\n                StringBuilder sb = new StringBuilder();  \\nXmlWriterSettings xws = new XmlWriterSettings();  \\nxws.OmitXmlDeclaration = true;  \\nusing (XmlWriter xw = XmlWriter.Create(sb, xws)) {  \\n    XElement root = new XElement(\\\"Root\\\",  \\n        new XElement(\\\"Child\\\", \\\"child content\\\")  \\n    );  \\n    root.Save(xw);  \\n}  \\nConsole.WriteLine(sb.ToString());  \\n```  \\n  \\n```vb  \\n  \\n                Dim sb As StringBuilder = New StringBuilder()  \\nDim xws As XmlWriterSettings = New XmlWriterSettings()  \\nxws.OmitXmlDeclaration = True  \\nUsing xw = XmlWriter.Create(sb, xws)  \\n    Dim root As XElement = <Root>  \\n                               <Child>child content</Child>  \\n                           </Root>  \\n    root.Save(xw)  \\nEnd Using  \\nConsole.WriteLine(sb.ToString())  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```xml  \\n  \\n<Root><Child>child content</Child></Root>  \\n```\"\n  syntax:\n    content: public void Save (System.Xml.XmlWriter writer);\n    parameters:\n    - id: writer\n      type: System.Xml.XmlWriter\n      description: A <xref href=\"System.Xml.XmlWriter\"></xref> that the <xref href=\"System.Xml.Linq.XElement\"></xref> will be written to.\n  overload: System.Xml.Linq.XElement.Save*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XElement.Save(System.IO.Stream,System.Xml.Linq.SaveOptions)\n  commentId: M:System.Xml.Linq.XElement.Save(System.IO.Stream,System.Xml.Linq.SaveOptions)\n  id: Save(System.IO.Stream,System.Xml.Linq.SaveOptions)\n  parent: System.Xml.Linq.XElement\n  langs:\n  - csharp\n  name: Save(Stream, SaveOptions)\n  nameWithType: XElement.Save(Stream, SaveOptions)\n  fullName: XElement.Save(Stream, SaveOptions)\n  type: Method\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Outputs this <xref href=\"System.Xml.Linq.XElement\"></xref> to the specified <xref href=\"System.IO.Stream\"></xref>, optionally specifying formatting behavior.\n  remarks: \"By default the `options` are set to <xref:System.Xml.Linq.SaveOptions.None>. This option will remove all extraneous insignificant white space, and add appropriate insignificant white space so that the XML is properly indented.  \\n  \\n If you want to save unindented XML, specify the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> flag for `options`. This will cause the writer to write all white spaces exactly as represented in the XML tree.  \\n  \\n Use <xref:System.Xml.Linq.SaveOptions.OmitDuplicateNamespaces> option if you want to remove duplicate namespace declarations.\"\n  syntax:\n    content: public void Save (System.IO.Stream stream, System.Xml.Linq.SaveOptions options);\n    parameters:\n    - id: stream\n      type: System.IO.Stream\n      description: The stream to output this <xref href=\"System.Xml.Linq.XElement\"></xref> to.\n    - id: options\n      type: System.Xml.Linq.SaveOptions\n      description: A <xref href=\"System.Xml.Linq.SaveOptions\"></xref> object that specifies formatting behavior.\n  overload: System.Xml.Linq.XElement.Save*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XElement.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)\n  commentId: M:System.Xml.Linq.XElement.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)\n  id: Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)\n  parent: System.Xml.Linq.XElement\n  langs:\n  - csharp\n  name: Save(TextWriter, SaveOptions)\n  nameWithType: XElement.Save(TextWriter, SaveOptions)\n  fullName: XElement.Save(TextWriter, SaveOptions)\n  type: Method\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Serialize this element to a <xref href=\"System.IO.TextWriter\"></xref>, optionally disabling formatting.\n  remarks: \"If you want to save unindented XML, specify the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> flag for `options`. This will cause the writer to write all white space exactly as represented in the XML tree.  \\n  \\n If you want to save indented XML, do not specify the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> flag for `options`. This will remove all extraneous insignificant white space, and add appropriate insignificant white space so that the XML is properly indented. This is the default behavior, and the behavior of the overloads of the <xref:System.Xml.Linq.XElement.Save%2A> methods that do not take `options` as a parameter.  \\n  \\n For more information, see [Preserving White Space while Loading or Parsing XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).\"\n  example:\n  - \"The following example shows two uses of this method. The first use preserves white space. The second serializes the <xref:System.Xml.Linq.XElement> with formatting. Because the document has no white space in it as constructed, preserving white space outputs the XML without any indenting.  \\n  \\n```csharp  \\n  \\n                XElement root = XElement.Parse(@\\\"<Root> <Child> Text </Child> </Root>\\\");  \\n  \\nusing (StringWriter sw = new StringWriter())  \\n{  \\n    root.Save(sw, SaveOptions.DisableFormatting);  \\n    Console.WriteLine(sw.ToString());  \\n}  \\n  \\nConsole.WriteLine(\\\"=====\\\");  \\n  \\nusing (StringWriter sw = new StringWriter())  \\n{  \\n    root.Save(sw, SaveOptions.None);  \\n    Console.WriteLine(sw.ToString());  \\n}  \\n```  \\n  \\n```vb  \\n  \\n                Dim root As XElement = <Root><Child> Text </Child></Root>  \\n  \\nUsing sw = New StringWriter()  \\n    root.Save(sw, SaveOptions.DisableFormatting)  \\n    Console.WriteLine(sw.ToString())  \\nEnd Using  \\n  \\nConsole.WriteLine(\\\"=====\\\")  \\n  \\nUsing sw = New StringWriter()  \\n    root.Save(sw, SaveOptions.None)  \\n    Console.WriteLine(sw.ToString())  \\nEnd Using  \\n  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```  \\n  \\n                <?xml version=\\\"1.0\\\" encoding=\\\"utf-16\\\"?><Root><Child> Text </Child></Root>  \\n=====  \\n<?xml version=\\\"1.0\\\" encoding=\\\"utf-16\\\"?>  \\n<Root>  \\n  <Child> Text </Child>  \\n</Root>  \\n```\"\n  syntax:\n    content: public void Save (System.IO.TextWriter textWriter, System.Xml.Linq.SaveOptions options);\n    parameters:\n    - id: textWriter\n      type: System.IO.TextWriter\n      description: The <xref href=\"System.IO.TextWriter\"></xref> to output the XML to.\n    - id: options\n      type: System.Xml.Linq.SaveOptions\n      description: A <xref href=\"System.Xml.Linq.SaveOptions\"></xref> that specifies formatting behavior.\n  overload: System.Xml.Linq.XElement.Save*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XElement.Save(System.String,System.Xml.Linq.SaveOptions)\n  commentId: M:System.Xml.Linq.XElement.Save(System.String,System.Xml.Linq.SaveOptions)\n  id: Save(System.String,System.Xml.Linq.SaveOptions)\n  parent: System.Xml.Linq.XElement\n  langs:\n  - csharp\n  name: Save(String, SaveOptions)\n  nameWithType: XElement.Save(String, SaveOptions)\n  fullName: XElement.Save(String, SaveOptions)\n  type: Method\n  assemblies:\n  - System.Xml.Linq\n  - netstandard\n  - System.Xml.XDocument\n  namespace: System.Xml.Linq\n  summary: Serialize this element to a file, optionally disabling formatting.\n  remarks: \"If you want to save unindented XML, specify the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> flag for `options`. This will cause the writer to write all white space exactly as represented in the XML tree.  \\n  \\n If you want to save indented XML, do not specify the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> flag for `options`. This will remove all extraneous insignificant white space, and add appropriate insignificant white space so that the XML is properly indented. This is the default behavior, and the behavior of the overloads of the <xref:System.Xml.Linq.XElement.Save%2A> methods that do not take `options` as a parameter.  \\n  \\n For more information, see [Preserving White Space while Loading or Parsing XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).\"\n  example:\n  - \"The following example shows two uses of this method. The first use preserves white space. The second one serializes the <xref:System.Xml.Linq.XElement> with formatting.  \\n  \\n```csharp  \\n  \\n                string str;  \\nXElement root = XElement.Parse(@\\\"<Root> <Child> Text </Child> </Root>\\\");  \\n  \\nroot.Save(\\\"Root.xml\\\", SaveOptions.DisableFormatting);  \\nstr = File.ReadAllText(\\\"Root.xml\\\");  \\nConsole.WriteLine(str);  \\n  \\nConsole.WriteLine(\\\"=====\\\");  \\n  \\nroot.Save(\\\"Root.xml\\\", SaveOptions.None);  \\nstr = File.ReadAllText(\\\"Root.xml\\\");  \\nConsole.WriteLine(str);  \\n```  \\n  \\n```vb  \\n  \\n                Dim str As String  \\nDim root As XElement = <Root><Child> Text </Child></Root>  \\n  \\nroot.Save(\\\"Root.xml\\\", SaveOptions.DisableFormatting)  \\nstr = File.ReadAllText(\\\"Root.xml\\\")  \\nConsole.WriteLine(str)  \\n  \\nConsole.WriteLine(\\\"=====\\\")  \\n  \\nroot.Save(\\\"Root.xml\\\", SaveOptions.None)  \\nstr = File.ReadAllText(\\\"Root.xml\\\")  \\nConsole.WriteLine(str)  \\n  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```  \\n  \\n                <?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?><Root><Child> Text </Child></Root>  \\n=====  \\n<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>  \\n<Root>  \\n  <Child> Text </Child>  \\n</Root>  \\n```\"\n  syntax:\n    content: public void Save (string fileName, System.Xml.Linq.SaveOptions options);\n    parameters:\n    - id: fileName\n      type: System.String\n      description: A <xref href=\"System.String\"></xref> that contains the name of the file.\n    - id: options\n      type: System.Xml.Linq.SaveOptions\n      description: A <xref href=\"System.Xml.Linq.SaveOptions\"></xref> that specifies formatting behavior.\n  overload: System.Xml.Linq.XElement.Save*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XElement.SaveAsync(System.IO.Stream,System.Xml.Linq.SaveOptions,System.Threading.CancellationToken)\n  commentId: M:System.Xml.Linq.XElement.SaveAsync(System.IO.Stream,System.Xml.Linq.SaveOptions,System.Threading.CancellationToken)\n  id: SaveAsync(System.IO.Stream,System.Xml.Linq.SaveOptions,System.Threading.CancellationToken)\n  parent: System.Xml.Linq.XElement\n  langs:\n  - csharp\n  name: SaveAsync(Stream, SaveOptions, CancellationToken)\n  nameWithType: XElement.SaveAsync(Stream, SaveOptions, CancellationToken)\n  fullName: XElement.SaveAsync(Stream, SaveOptions, CancellationToken)\n  type: Method\n  assemblies:\n  - System.Xml.XDocument\n  namespace: System.Xml.Linq\n  syntax:\n    content: public System.Threading.Tasks.Task SaveAsync (System.IO.Stream stream, System.Xml.Linq.SaveOptions options, System.Threading.CancellationToken cancellationToken);\n    parameters:\n    - id: stream\n      type: System.IO.Stream\n      description: ''\n    - id: options\n      type: System.Xml.Linq.SaveOptions\n      description: ''\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: ''\n    return:\n      type: System.Threading.Tasks.Task\n      description: ''\n  overload: System.Xml.Linq.XElement.SaveAsync*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml\n- uid: System.Xml.Linq.XElement.SaveAsync(System.Xml.XmlWriter,System.Threading.CancellationToken)\n  commentId: M:System.Xml.Linq.XElement.SaveAsync(System.Xml.XmlWriter,System.Threading.CancellationToken)\n  id: SaveAsync(System.Xml.XmlWriter,System.Threading.CancellationToken)\n  parent: System.Xml.Linq.XElement\n  langs:\n  - csharp\n  name: SaveAsync(XmlWriter, CancellationToken)\n  nameWithType: XElement.SaveAsync(XmlWriter, CancellationToken)\n  fullName: XElement.SaveAsync(XmlWriter, CancellationToken)\n  type: Method\n  assemblies:\n  - System.Xml.XDocument\n  namespace: System.Xml.Linq\n  syntax:\n    content: public System.Threading.Tasks.Task SaveAsync (System.Xml.XmlWriter writer, System.Threading.CancellationToken cancellationToken);\n    parameters:\n    - id: writer\n      type: System.Xml.XmlWriter\n      description: ''\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: ''\n    return:\n      type: System.Threading.Tasks.Task\n      description: ''\n  overload: System.Xml.Linq.XElement.SaveAsync*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml\n- uid: System.Xml.Linq.XElement.SaveAsync(System.IO.TextWriter,System.Xml.Linq.SaveOptions,System.Threading.CancellationToken)\n  commentId: M:System.Xml.Linq.XElement.SaveAsync(System.IO.TextWriter,System.Xml.Linq.SaveOptions,System.Threading.CancellationToken)\n  id: SaveAsync(System.IO.TextWriter,System.Xml.Linq.SaveOptions,System.Threading.CancellationToken)\n  parent: System.Xml.Linq.XElement\n  langs:\n  - csharp\n  name: SaveAsync(TextWriter, SaveOptions, CancellationToken)\n  nameWithType: XElement.SaveAsync(TextWriter, SaveOptions, CancellationToken)\n  fullName: XElement.SaveAsync(TextWriter, SaveOptions, CancellationToken)\n  type: Method\n  assemblies:\n  - System.Xml.XDocument\n  namespace: System.Xml.Linq\n  syntax:\n    content: public System.Threading.Tasks.Task SaveAsync (System.IO.TextWriter textWriter, System.Xml.Linq.SaveOptions options, System.Threading.CancellationToken cancellationToken);\n    parameters:\n    - id: textWriter\n      type: System.IO.TextWriter\n      description: ''\n    - id: options\n      type: System.Xml.Linq.SaveOptions\n      description: ''\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: ''\n    return:\n      type: System.Threading.Tasks.Task\n      description: ''\n  overload: System.Xml.Linq.XElement.SaveAsync*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml\n- uid: System.Xml.Linq.XElement.SetAttributeValue(System.Xml.Linq.XName,System.Object)\n  commentId: M:System.Xml.Linq.XElement.SetAttributeValue(System.Xml.Linq.XName,System.Object)\n  id: SetAttributeValue(System.Xml.Linq.XName,System.Object)\n  parent: System.Xml.Linq.XElement\n  langs:\n  - csharp\n  name: SetAttributeValue(XName, Object)\n  nameWithType: XElement.SetAttributeValue(XName, Object)\n  fullName: XElement.SetAttributeValue(XName, Object)\n  type: Method\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Sets the value of an attribute, adds an attribute, or removes an attribute.\n  remarks: \"This method is designed to make it easy to maintain a list of name/value pairs as a set of attributes. When maintaining the list, you need to add pairs, modify pairs, or delete pairs. If you call this method passing a name that does not exist as an attribute, this method creates an attribute for you. If you call this method passing the name of an existing attribute, this method modifies the value of the attribute to the value that you specify. If you pass `null` for `value`, this method removes the attribute.  \\n  \\n This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.  \\n  \\n The value is assigned to the attribute with the specified name. If no attribute with the specified name exists, a new attribute is added. If the value is `null`, the attribute with the specified name, if any, is deleted.  \\n  \\n For more information, see [Maintaining Name/Value Pairs](http://msdn.microsoft.com/library/fe9798bf-b5e2-4a3c-a86c-7f8638912691).\"\n  example:\n  - \"The following example creates an element with an attribute. It then uses this method to replace the content of the attribute.  \\n  \\n```csharp  \\n// Create an element with no content.  \\nXElement root = new XElement(\\\"Root\\\");  \\n  \\n// Add some name/value pairs.  \\nroot.SetAttributeValue(\\\"Att1\\\", 1);  \\nroot.SetAttributeValue(\\\"Att2\\\", 2);  \\nroot.SetAttributeValue(\\\"Att3\\\", 3);  \\nConsole.WriteLine(root);  \\n  \\n// Modify one of the name/value pairs.  \\nroot.SetAttributeValue(\\\"Att2\\\", 22);  \\nConsole.WriteLine(root);  \\n  \\n// Remove one of the name/value pairs.  \\nroot.SetAttributeValue(\\\"Att3\\\", null);  \\nConsole.WriteLine(root);  \\n```  \\n  \\n```vb  \\n' Create an element with no content.  \\nDim root As XElement = <Root/>  \\n  \\n' Add some name/value pairs.  \\nroot.SetAttributeValue(\\\"Att1\\\", 1)  \\nroot.SetAttributeValue(\\\"Att2\\\", 2)  \\nroot.SetAttributeValue(\\\"Att3\\\", 3)  \\nConsole.WriteLine(root)  \\n  \\n' Modify one of the name/value pairs.  \\nroot.SetAttributeValue(\\\"Att2\\\", 22)  \\nConsole.WriteLine(root)  \\n  \\n' Remove one of the name/value pairs.  \\nroot.SetAttributeValue(\\\"Att3\\\", Nothing)  \\nConsole.WriteLine(root)  \\n  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```  \\n  \\n                <Root Att1=\\\"1\\\" Att2=\\\"2\\\" Att3=\\\"3\\\" />  \\n<Root Att1=\\\"1\\\" Att2=\\\"22\\\" Att3=\\\"3\\\" />  \\n<Root Att1=\\\"1\\\" Att2=\\\"22\\\" />  \\n```\"\n  syntax:\n    content: public void SetAttributeValue (System.Xml.Linq.XName name, object value);\n    parameters:\n    - id: name\n      type: System.Xml.Linq.XName\n      description: An <xref href=\"System.Xml.Linq.XName\"></xref> that contains the name of the attribute to change.\n    - id: value\n      type: System.Object\n      description: The value to assign to the attribute. The attribute is removed if the value is `null`. Otherwise, the value is converted to its string representation and assigned to the <xref href=\"System.Xml.Linq.XAttribute.Value\"></xref> property of the attribute.\n  overload: System.Xml.Linq.XElement.SetAttributeValue*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>value</code> is an instance of <xref href=\"System.Xml.Linq.XObject\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XElement.SetElementValue(System.Xml.Linq.XName,System.Object)\n  commentId: M:System.Xml.Linq.XElement.SetElementValue(System.Xml.Linq.XName,System.Object)\n  id: SetElementValue(System.Xml.Linq.XName,System.Object)\n  parent: System.Xml.Linq.XElement\n  langs:\n  - csharp\n  name: SetElementValue(XName, Object)\n  nameWithType: XElement.SetElementValue(XName, Object)\n  fullName: XElement.SetElementValue(XName, Object)\n  type: Method\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Sets the value of a child element, adds a child element, or removes a child element.\n  remarks: \"This method is designed to make it easy to maintain a list of name/value pairs as a set of children elements. When maintaining the list, you need to add pairs, modify pairs, or delete pairs. If you call this method passing a name that does not exist as a child element, this method creates a child element for you. If you call this method passing the name of an existing child element, this method modifies the value of the child element to the value that you specify. If you pass `null` for `value`, this method removes the child element.  \\n  \\n This method will raise events.  \\n  \\n The value is assigned to the first child element with the specified name. If no child element with the specified name exists, a new child element is added. If the value is null, the first child element with the specified name, if any, is deleted.  \\n  \\n This method does not add child nodes or attributes to the specified child element. This method throws an exception if any object that derives from <xref:System.Xml.Linq.XObject> is passed as `value`.  \\n  \\n For more information, see [Maintaining Name/Value Pairs](http://msdn.microsoft.com/library/fe9798bf-b5e2-4a3c-a86c-7f8638912691).\"\n  example:\n  - \"The following example creates an element with a child element. It then uses this method to set the value of the child element.  \\n  \\n```csharp  \\n// Create an element with no content  \\nXElement root = new XElement(\\\"Root\\\");  \\n  \\n// Add some name/value pairs.  \\nroot.SetElementValue(\\\"Ele1\\\", 1);  \\nroot.SetElementValue(\\\"Ele2\\\", 2);  \\nroot.SetElementValue(\\\"Ele3\\\", 3);  \\nConsole.WriteLine(root);  \\n  \\n// Modify one of the name/value pairs.  \\nroot.SetElementValue(\\\"Ele2\\\", 22);  \\nConsole.WriteLine(root);  \\n  \\n// Remove one of the name/value pairs.  \\nroot.SetElementValue(\\\"Ele3\\\", null);  \\nConsole.WriteLine(root);  \\n```  \\n  \\n```vb  \\n' Create an element with no content.  \\nDim root As XElement = <Root/>  \\n  \\n' Add some name/value pairs.  \\nroot.SetElementValue(\\\"Ele1\\\", 1)  \\nroot.SetElementValue(\\\"Ele2\\\", 2)  \\nroot.SetElementValue(\\\"Ele3\\\", 3)  \\nConsole.WriteLine(root)  \\n  \\n' Modify one of the name/value pairs.  \\nroot.SetElementValue(\\\"Ele2\\\", 22)  \\nConsole.WriteLine(root)  \\n  \\n' Remove one of the name/value pairs.  \\nroot.SetElementValue(\\\"Ele3\\\", Nothing)  \\nConsole.WriteLine(root)  \\n  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```  \\n  \\n                <Root>  \\n  <Ele1>1</Ele1>  \\n  <Ele2>2</Ele2>  \\n  <Ele3>3</Ele3>  \\n</Root>  \\n<Root>  \\n  <Ele1>1</Ele1>  \\n  <Ele2>22</Ele2>  \\n  <Ele3>3</Ele3>  \\n</Root>  \\n<Root>  \\n  <Ele1>1</Ele1>  \\n  <Ele2>22</Ele2>  \\n</Root>  \\n```\"\n  syntax:\n    content: public void SetElementValue (System.Xml.Linq.XName name, object value);\n    parameters:\n    - id: name\n      type: System.Xml.Linq.XName\n      description: An <xref href=\"System.Xml.Linq.XName\"></xref> that contains the name of the child element to change.\n    - id: value\n      type: System.Object\n      description: The value to assign to the child element. The child element is removed if the value is `null`. Otherwise, the value is converted to its string representation and assigned to the <xref href=\"System.Xml.Linq.XElement.Value\"></xref> property of the child element.\n  overload: System.Xml.Linq.XElement.SetElementValue*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>value</code> is an instance of <xref href=\"System.Xml.Linq.XObject\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XElement.SetValue(System.Object)\n  commentId: M:System.Xml.Linq.XElement.SetValue(System.Object)\n  id: SetValue(System.Object)\n  parent: System.Xml.Linq.XElement\n  langs:\n  - csharp\n  name: SetValue(Object)\n  nameWithType: XElement.SetValue(Object)\n  fullName: XElement.SetValue(Object)\n  type: Method\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Sets the value of this element.\n  remarks: \"This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.  \\n  \\n It is invalid to pass an instance of a class that derives from <xref:System.Xml.Linq.XObject>, such as <xref:System.Xml.Linq.XElement>.\"\n  example:\n  - \"The following example creates an element that contains a child element. It then sets the value of the element using this method.  \\n  \\n```csharp  \\n  \\n                XElement root = new XElement(\\\"Root\\\",  \\n    new XElement(\\\"Child\\\", \\\"child content\\\")  \\n);  \\nroot.SetValue(\\\"new content\\\");  \\nConsole.WriteLine(root);  \\n```  \\n  \\n```vb  \\n  \\n                Dim root As XElement = _   \\n        <Root>  \\n            <Child>child content</Child>  \\n        </Root>  \\n  \\nroot.SetValue(\\\"new content\\\")  \\nConsole.WriteLine(root)  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```xml  \\n  \\n<Root>new content</Root>  \\n```\"\n  syntax:\n    content: public void SetValue (object value);\n    parameters:\n    - id: value\n      type: System.Object\n      description: The value to assign to this element. The value is converted to its string representation and assigned to the <xref href=\"System.Xml.Linq.XElement.Value\"></xref> property.\n  overload: System.Xml.Linq.XElement.SetValue*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>value</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>value</code> is an <xref href=\"System.Xml.Linq.XObject\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XElement.Value\n  commentId: P:System.Xml.Linq.XElement.Value\n  id: Value\n  parent: System.Xml.Linq.XElement\n  langs:\n  - csharp\n  name: Value\n  nameWithType: XElement.Value\n  fullName: XElement.Value\n  type: Property\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Gets or sets the concatenated text contents of this element.\n  remarks: \"Using this property, you can get or set the value of an element.  \\n  \\n Setting this property will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.  \\n  \\n If you want to get the value of an element but you are not sure that it exists, it is more convenient to use the explicit conversion operators, and assign the element to a nullable type such as `string` or <xref:System.Nullable%601> of <xref:System.Int32>. If the element does not exist, the nullable type is set to `null`. By contrast, if you want to use this property, you must make sure that the <xref:System.Xml.Linq.XContainer.Element%2A> method does not return `null` before you access this property.\"\n  example:\n  - \"The following example uses this property to retrieve the text of an element with mixed content.  \\n  \\n```csharp  \\n  \\n                XElement el = XElement.Parse(\\\"<Root>This is <b>mixed</b> content</Root>\\\");  \\nConsole.WriteLine(\\\"{0}\\\", el.Value);  \\n```  \\n  \\n```vb  \\n  \\n                Dim el As XElement = <Root>This is <b>mixed</b> content</Root>  \\nConsole.WriteLine(\\\"{0}\\\", el.Value)  \\n  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```  \\n  \\nThis is mixed content  \\n```\"\n  syntax:\n    content: public string Value { get; set; }\n    return:\n      type: System.String\n      description: A <xref href=\"System.String\"></xref> that contains all of the text content of this element. If there are multiple text nodes, they will be concatenated.\n  overload: System.Xml.Linq.XElement.Value*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XElement.WriteTo(System.Xml.XmlWriter)\n  commentId: M:System.Xml.Linq.XElement.WriteTo(System.Xml.XmlWriter)\n  id: WriteTo(System.Xml.XmlWriter)\n  parent: System.Xml.Linq.XElement\n  langs:\n  - csharp\n  name: WriteTo(XmlWriter)\n  nameWithType: XElement.WriteTo(XmlWriter)\n  fullName: XElement.WriteTo(XmlWriter)\n  type: Method\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Write this element to an <xref href=\"System.Xml.XmlWriter\"></xref>.\n  remarks: ''\n  example:\n  - \"The following example shows how to write an <xref:System.Xml.Linq.XElement> to an <xref:System.Xml.XmlWriter>. Note that the example did not write an XML declaration.  \\n  \\n```csharp  \\n  \\n                StringBuilder sb = new StringBuilder();  \\nXmlWriterSettings xws = new XmlWriterSettings();  \\nxws.OmitXmlDeclaration = true;  \\nxws.Indent = true;  \\n  \\nusing (XmlWriter xw = XmlWriter.Create(sb, xws)) {  \\n    xw.WriteStartElement(\\\"Root\\\");  \\n  \\n    XElement child1 = new XElement(\\\"Child\\\",  \\n        new XElement(\\\"GrandChild\\\", \\\"some content\\\")  \\n    );  \\n    child1.WriteTo(xw);  \\n  \\n    XElement child2 = new XElement(\\\"AnotherChild\\\",  \\n        new XElement(\\\"GrandChild\\\", \\\"different content\\\")  \\n    );  \\n    child2.WriteTo(xw);  \\n  \\n    xw.WriteEndElement();  \\n}  \\n  \\nConsole.WriteLine(sb.ToString());  \\n```  \\n  \\n```vb  \\n  \\n                Dim sb As StringBuilder = New StringBuilder()  \\nDim xws As XmlWriterSettings = New XmlWriterSettings()  \\nxws.OmitXmlDeclaration = True  \\nxws.Indent = True  \\n  \\nUsing xw = XmlWriter.Create(sb, xws)  \\n    xw.WriteStartElement(\\\"Root\\\")  \\n    Dim child1 As XElement = _  \\n        <Child>  \\n            <GrandChild>some content</GrandChild>  \\n        </Child>  \\n    child1.WriteTo(xw)  \\n    Dim child2 As XElement = _   \\n        <AnotherChild>  \\n            <GrandChild>different content</GrandChild>  \\n        </AnotherChild>  \\n    child2.WriteTo(xw)  \\n    xw.WriteEndElement()  \\nEnd Using  \\n  \\nConsole.WriteLine(sb.ToString())  \\n  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```xml  \\n  \\n                <Root>  \\n  <Child>  \\n    <GrandChild>some content</GrandChild>  \\n  </Child>  \\n  <AnotherChild>  \\n    <GrandChild>different content</GrandChild>  \\n  </AnotherChild>  \\n</Root>  \\n```\"\n  syntax:\n    content: public override void WriteTo (System.Xml.XmlWriter writer);\n    parameters:\n    - id: writer\n      type: System.Xml.XmlWriter\n      description: An <xref href=\"System.Xml.XmlWriter\"></xref> into which this method will write.\n  overload: System.Xml.Linq.XElement.WriteTo*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XElement.WriteToAsync(System.Xml.XmlWriter,System.Threading.CancellationToken)\n  commentId: M:System.Xml.Linq.XElement.WriteToAsync(System.Xml.XmlWriter,System.Threading.CancellationToken)\n  id: WriteToAsync(System.Xml.XmlWriter,System.Threading.CancellationToken)\n  parent: System.Xml.Linq.XElement\n  langs:\n  - csharp\n  name: WriteToAsync(XmlWriter, CancellationToken)\n  nameWithType: XElement.WriteToAsync(XmlWriter, CancellationToken)\n  fullName: XElement.WriteToAsync(XmlWriter, CancellationToken)\n  type: Method\n  assemblies:\n  - System.Xml.XDocument\n  namespace: System.Xml.Linq\n  syntax:\n    content: public override System.Threading.Tasks.Task WriteToAsync (System.Xml.XmlWriter writer, System.Threading.CancellationToken cancellationToken);\n    parameters:\n    - id: writer\n      type: System.Xml.XmlWriter\n      description: ''\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: ''\n    return:\n      type: System.Threading.Tasks.Task\n      description: ''\n  overload: System.Xml.Linq.XElement.WriteToAsync*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml\n- uid: System.Xml.Linq.XElement.System#Xml#Serialization#IXmlSerializable#GetSchema\n  commentId: M:System.Xml.Linq.XElement.System#Xml#Serialization#IXmlSerializable#GetSchema\n  id: System#Xml#Serialization#IXmlSerializable#GetSchema\n  isEii: true\n  parent: System.Xml.Linq.XElement\n  langs:\n  - csharp\n  name: IXmlSerializable.GetSchema()\n  nameWithType: XElement.IXmlSerializable.GetSchema()\n  fullName: XElement.IXmlSerializable.GetSchema()\n  type: Method\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Gets an XML schema definition that describes the XML representation of this object.\n  remarks: \"This method is part of implementation of the <xref:System.Xml.Serialization.IXmlSerializable> interface.  \\n  \\n This method is used internally for serializing object graphs that contain LINQ to XML objects. For an example of serializing an object graph that contains LINQ to XML objects, see [Serializing Object Graphs that Contain XElement Objects](http://msdn.microsoft.com/library/443d7904-a6f0-450a-b1a4-5d7ed869d1d5).\"\n  syntax:\n    content: System.Xml.Schema.XmlSchema IXmlSerializable.GetSchema ();\n    parameters: []\n    return:\n      type: System.Xml.Schema.XmlSchema\n      description: An <xref href=\"System.Xml.Schema.XmlSchema\"></xref> that describes the XML representation of the object that is produced by the <xref href=\"System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)\"></xref> method and consumed by the <xref href=\"System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)\"></xref> method.\n  overload: System.Xml.Linq.XElement.System#Xml#Serialization#IXmlSerializable#GetSchema*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XElement.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)\n  commentId: M:System.Xml.Linq.XElement.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)\n  id: System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)\n  isEii: true\n  parent: System.Xml.Linq.XElement\n  langs:\n  - csharp\n  name: IXmlSerializable.ReadXml(XmlReader)\n  nameWithType: XElement.IXmlSerializable.ReadXml(XmlReader)\n  fullName: XElement.IXmlSerializable.ReadXml(XmlReader)\n  type: Method\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Generates an object from its XML representation.\n  remarks: \"This method is part of implementation of the <xref:System.Xml.Serialization.IXmlSerializable> interface.  \\n  \\n This method is used internally for serializing object graphs that contain LINQ to XML objects. For an example of serializing an object graph that contains LINQ to XML objects, see [Serializing Object Graphs that Contain XElement Objects](http://msdn.microsoft.com/library/443d7904-a6f0-450a-b1a4-5d7ed869d1d5).\"\n  syntax:\n    content: void IXmlSerializable.ReadXml (System.Xml.XmlReader reader);\n    parameters:\n    - id: reader\n      type: System.Xml.XmlReader\n      description: The <xref href=\"System.Xml.XmlReader\"></xref> from which the object is deserialized.\n  overload: System.Xml.Linq.XElement.System#Xml#Serialization#IXmlSerializable#ReadXml*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XElement.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)\n  commentId: M:System.Xml.Linq.XElement.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)\n  id: System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)\n  isEii: true\n  parent: System.Xml.Linq.XElement\n  langs:\n  - csharp\n  name: IXmlSerializable.WriteXml(XmlWriter)\n  nameWithType: XElement.IXmlSerializable.WriteXml(XmlWriter)\n  fullName: XElement.IXmlSerializable.WriteXml(XmlWriter)\n  type: Method\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Converts an object into its XML representation.\n  remarks: This method is used internally for marshaling object graphs that contain LINQ to XML objects. For an example of serializing an object graph that contains LINQ to XML objects, see [Serializing Object Graphs that Contain XElement Objects](http://msdn.microsoft.com/library/443d7904-a6f0-450a-b1a4-5d7ed869d1d5).\n  syntax:\n    content: void IXmlSerializable.WriteXml (System.Xml.XmlWriter writer);\n    parameters:\n    - id: writer\n      type: System.Xml.XmlWriter\n      description: The <xref href=\"System.Xml.XmlWriter\"></xref> to which this object is serialized.\n  overload: System.Xml.Linq.XElement.System#Xml#Serialization#IXmlSerializable#WriteXml*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\nreferences:\n- uid: System.Xml.Linq.XContainer\n  parent: System.Xml.Linq\n  isExternal: false\n  name: XContainer\n  nameWithType: XContainer\n  fullName: System.Xml.Linq.XContainer\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XElement)\n  parent: System.Xml.Linq.XElement\n  isExternal: false\n  name: XElement(XElement)\n  nameWithType: XElement.XElement(XElement)\n  fullName: XElement.XElement(XElement)\n- uid: System.Xml.Linq.XElement\n  parent: System.Xml.Linq\n  isExternal: false\n  name: XElement\n  nameWithType: XElement\n  fullName: System.Xml.Linq.XElement\n- uid: System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XName)\n  parent: System.Xml.Linq.XElement\n  isExternal: false\n  name: XElement(XName)\n  nameWithType: XElement.XElement(XName)\n  fullName: XElement.XElement(XName)\n- uid: System.Xml.Linq.XName\n  parent: System.Xml.Linq\n  isExternal: false\n  name: XName\n  nameWithType: XName\n  fullName: System.Xml.Linq.XName\n- uid: System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XStreamingElement)\n  parent: System.Xml.Linq.XElement\n  isExternal: false\n  name: XElement(XStreamingElement)\n  nameWithType: XElement.XElement(XStreamingElement)\n  fullName: XElement.XElement(XStreamingElement)\n- uid: System.Xml.Linq.XStreamingElement\n  parent: System.Xml.Linq\n  isExternal: false\n  name: XStreamingElement\n  nameWithType: XStreamingElement\n  fullName: System.Xml.Linq.XStreamingElement\n- uid: System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XName,System.Object)\n  parent: System.Xml.Linq.XElement\n  isExternal: false\n  name: XElement(XName, Object)\n  nameWithType: XElement.XElement(XName, Object)\n  fullName: XElement.XElement(XName, Object)\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XName,System.Object[])\n  parent: System.Xml.Linq.XElement\n  isExternal: false\n  name: XElement(XName, Object[])\n  nameWithType: XElement.XElement(XName, Object[])\n  fullName: XElement.XElement(XName, Object[])\n- uid: System.Object[]\n  parent: System\n  isExternal: false\n  name: Object[]\n  nameWithType: Object[]\n  fullName: System.Object[]\n  spec.csharp:\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Xml.Linq.XElement.AncestorsAndSelf\n  parent: System.Xml.Linq.XElement\n  isExternal: false\n  name: AncestorsAndSelf()\n  nameWithType: XElement.AncestorsAndSelf()\n  fullName: XElement.AncestorsAndSelf()\n- uid: System.Collections.Generic.IEnumerable`1\n  name: IEnumerable<T>\n  nameWithType: IEnumerable<T>\n  fullName: System.Collections.Generic.IEnumerable<T>\n- uid: System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<XElement>\n  nameWithType: IEnumerable<XElement>\n  fullName: System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    nameWithType: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Xml.Linq.XElement\n    name: XElement\n    nameWithType: XElement\n    fullName: System.Xml.Linq.XElement\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Xml.Linq.XElement.AncestorsAndSelf(System.Xml.Linq.XName)\n  parent: System.Xml.Linq.XElement\n  isExternal: false\n  name: AncestorsAndSelf(XName)\n  nameWithType: XElement.AncestorsAndSelf(XName)\n  fullName: XElement.AncestorsAndSelf(XName)\n- uid: System.Xml.Linq.XElement.Attribute(System.Xml.Linq.XName)\n  parent: System.Xml.Linq.XElement\n  isExternal: false\n  name: Attribute(XName)\n  nameWithType: XElement.Attribute(XName)\n  fullName: XElement.Attribute(XName)\n- uid: System.Xml.Linq.XAttribute\n  parent: System.Xml.Linq\n  isExternal: false\n  name: XAttribute\n  nameWithType: XAttribute\n  fullName: System.Xml.Linq.XAttribute\n- uid: System.Xml.Linq.XElement.Attributes\n  parent: System.Xml.Linq.XElement\n  isExternal: false\n  name: Attributes()\n  nameWithType: XElement.Attributes()\n  fullName: XElement.Attributes()\n- uid: System.Collections.Generic.IEnumerable{System.Xml.Linq.XAttribute}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<XAttribute>\n  nameWithType: IEnumerable<XAttribute>\n  fullName: System.Collections.Generic.IEnumerable<System.Xml.Linq.XAttribute>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    nameWithType: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Xml.Linq.XAttribute\n    name: XAttribute\n    nameWithType: XAttribute\n    fullName: System.Xml.Linq.XAttribute\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Xml.Linq.XElement.Attributes(System.Xml.Linq.XName)\n  parent: System.Xml.Linq.XElement\n  isExternal: false\n  name: Attributes(XName)\n  nameWithType: XElement.Attributes(XName)\n  fullName: XElement.Attributes(XName)\n- uid: System.Xml.Linq.XElement.DescendantNodesAndSelf\n  parent: System.Xml.Linq.XElement\n  isExternal: false\n  name: DescendantNodesAndSelf()\n  nameWithType: XElement.DescendantNodesAndSelf()\n  fullName: XElement.DescendantNodesAndSelf()\n- uid: System.Xml.Linq.XNode\n  name: XNode\n  nameWithType: XNode\n  fullName: System.Xml.Linq.XNode\n- uid: System.Collections.Generic.IEnumerable{System.Xml.Linq.XNode}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<XNode>\n  nameWithType: IEnumerable<XNode>\n  fullName: System.Collections.Generic.IEnumerable<System.Xml.Linq.XNode>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    nameWithType: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Xml.Linq.XNode\n    name: XNode\n    nameWithType: XNode\n    fullName: System.Xml.Linq.XNode\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Xml.Linq.XElement.DescendantsAndSelf(System.Xml.Linq.XName)\n  parent: System.Xml.Linq.XElement\n  isExternal: false\n  name: DescendantsAndSelf(XName)\n  nameWithType: XElement.DescendantsAndSelf(XName)\n  fullName: XElement.DescendantsAndSelf(XName)\n- uid: System.Xml.Linq.XElement.DescendantsAndSelf\n  parent: System.Xml.Linq.XElement\n  isExternal: false\n  name: DescendantsAndSelf()\n  nameWithType: XElement.DescendantsAndSelf()\n  fullName: XElement.DescendantsAndSelf()\n- uid: System.Xml.Linq.XElement.EmptySequence\n  parent: System.Xml.Linq.XElement\n  isExternal: false\n  name: EmptySequence\n  nameWithType: XElement.EmptySequence\n  fullName: XElement.EmptySequence\n- uid: System.Xml.Linq.XElement.FirstAttribute\n  parent: System.Xml.Linq.XElement\n  isExternal: false\n  name: FirstAttribute\n  nameWithType: XElement.FirstAttribute\n  fullName: XElement.FirstAttribute\n- uid: System.Xml.Linq.XElement.GetDefaultNamespace\n  parent: System.Xml.Linq.XElement\n  isExternal: false\n  name: GetDefaultNamespace()\n  nameWithType: XElement.GetDefaultNamespace()\n  fullName: XElement.GetDefaultNamespace()\n- uid: System.Xml.Linq.XNamespace\n  parent: System.Xml.Linq\n  isExternal: false\n  name: XNamespace\n  nameWithType: XNamespace\n  fullName: System.Xml.Linq.XNamespace\n- uid: System.Xml.Linq.XElement.GetNamespaceOfPrefix(System.String)\n  parent: System.Xml.Linq.XElement\n  isExternal: false\n  name: GetNamespaceOfPrefix(String)\n  nameWithType: XElement.GetNamespaceOfPrefix(String)\n  fullName: XElement.GetNamespaceOfPrefix(String)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Xml.Linq.XElement.GetPrefixOfNamespace(System.Xml.Linq.XNamespace)\n  parent: System.Xml.Linq.XElement\n  isExternal: false\n  name: GetPrefixOfNamespace(XNamespace)\n  nameWithType: XElement.GetPrefixOfNamespace(XNamespace)\n  fullName: XElement.GetPrefixOfNamespace(XNamespace)\n- uid: System.Xml.Linq.XElement.HasAttributes\n  parent: System.Xml.Linq.XElement\n  isExternal: false\n  name: HasAttributes\n  nameWithType: XElement.HasAttributes\n  fullName: XElement.HasAttributes\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Xml.Linq.XElement.HasElements\n  parent: System.Xml.Linq.XElement\n  isExternal: false\n  name: HasElements\n  nameWithType: XElement.HasElements\n  fullName: XElement.HasElements\n- uid: System.Xml.Linq.XElement.IsEmpty\n  parent: System.Xml.Linq.XElement\n  isExternal: false\n  name: IsEmpty\n  nameWithType: XElement.IsEmpty\n  fullName: XElement.IsEmpty\n- uid: System.Xml.Linq.XElement.LastAttribute\n  parent: System.Xml.Linq.XElement\n  isExternal: false\n  name: LastAttribute\n  nameWithType: XElement.LastAttribute\n  fullName: XElement.LastAttribute\n- uid: System.Xml.Linq.XElement.Load(System.IO.TextReader,System.Xml.Linq.LoadOptions)\n  parent: System.Xml.Linq.XElement\n  isExternal: false\n  name: Load(TextReader, LoadOptions)\n  nameWithType: XElement.Load(TextReader, LoadOptions)\n  fullName: XElement.Load(TextReader, LoadOptions)\n- uid: System.IO.TextReader\n  parent: System.IO\n  isExternal: false\n  name: TextReader\n  nameWithType: TextReader\n  fullName: System.IO.TextReader\n- uid: System.Xml.Linq.LoadOptions\n  parent: System.Xml.Linq\n  isExternal: false\n  name: LoadOptions\n  nameWithType: LoadOptions\n  fullName: System.Xml.Linq.LoadOptions\n- uid: System.Xml.Linq.XElement.Load(System.Xml.XmlReader,System.Xml.Linq.LoadOptions)\n  parent: System.Xml.Linq.XElement\n  isExternal: false\n  name: Load(XmlReader, LoadOptions)\n  nameWithType: XElement.Load(XmlReader, LoadOptions)\n  fullName: XElement.Load(XmlReader, LoadOptions)\n- uid: System.Xml.XmlReader\n  parent: System.Xml\n  isExternal: false\n  name: XmlReader\n  nameWithType: XmlReader\n  fullName: System.Xml.XmlReader\n- uid: System.Xml.Linq.XElement.Load(System.String,System.Xml.Linq.LoadOptions)\n  parent: System.Xml.Linq.XElement\n  isExternal: false\n  name: Load(String, LoadOptions)\n  nameWithType: XElement.Load(String, LoadOptions)\n  fullName: XElement.Load(String, LoadOptions)\n- uid: System.Xml.Linq.XElement.Load(System.IO.Stream,System.Xml.Linq.LoadOptions)\n  parent: System.Xml.Linq.XElement\n  isExternal: false\n  name: Load(Stream, LoadOptions)\n  nameWithType: XElement.Load(Stream, LoadOptions)\n  fullName: XElement.Load(Stream, LoadOptions)\n- uid: System.IO.Stream\n  parent: System.IO\n  isExternal: false\n  name: Stream\n  nameWithType: Stream\n  fullName: System.IO.Stream\n- uid: System.Xml.Linq.XElement.Load(System.IO.TextReader)\n  parent: System.Xml.Linq.XElement\n  isExternal: false\n  name: Load(TextReader)\n  nameWithType: XElement.Load(TextReader)\n  fullName: XElement.Load(TextReader)\n- uid: System.Xml.Linq.XElement.Load(System.String)\n  parent: System.Xml.Linq.XElement\n  isExternal: false\n  name: Load(String)\n  nameWithType: XElement.Load(String)\n  fullName: XElement.Load(String)\n- uid: System.Xml.Linq.XElement.Load(System.IO.Stream)\n  parent: System.Xml.Linq.XElement\n  isExternal: false\n  name: Load(Stream)\n  nameWithType: XElement.Load(Stream)\n  fullName: XElement.Load(Stream)\n- uid: System.Xml.Linq.XElement.Load(System.Xml.XmlReader)\n  parent: System.Xml.Linq.XElement\n  isExternal: false\n  name: Load(XmlReader)\n  nameWithType: XElement.Load(XmlReader)\n  fullName: XElement.Load(XmlReader)\n- uid: System.Xml.Linq.XElement.LoadAsync(System.IO.Stream,System.Xml.Linq.LoadOptions,System.Threading.CancellationToken)\n  parent: System.Xml.Linq.XElement\n  isExternal: false\n  name: LoadAsync(Stream, LoadOptions, CancellationToken)\n  nameWithType: XElement.LoadAsync(Stream, LoadOptions, CancellationToken)\n  fullName: XElement.LoadAsync(Stream, LoadOptions, CancellationToken)\n- uid: System.Threading.Tasks.Task`1\n  name: Task<TResult>\n  nameWithType: Task<TResult>\n  fullName: System.Threading.Tasks.Task<TResult>\n- uid: System.Threading.Tasks.Task{System.Xml.Linq.XElement}\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: Task<XElement>\n  nameWithType: Task<XElement>\n  fullName: System.Threading.Tasks.Task<System.Xml.Linq.XElement>\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    nameWithType: Task\n    fullName: System.Threading.Tasks.Task\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Xml.Linq.XElement\n    name: XElement\n    nameWithType: XElement\n    fullName: System.Xml.Linq.XElement\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Threading.CancellationToken\n  parent: System.Threading\n  isExternal: false\n  name: CancellationToken\n  nameWithType: CancellationToken\n  fullName: System.Threading.CancellationToken\n- uid: System.Xml.Linq.XElement.LoadAsync(System.IO.TextReader,System.Xml.Linq.LoadOptions,System.Threading.CancellationToken)\n  parent: System.Xml.Linq.XElement\n  isExternal: false\n  name: LoadAsync(TextReader, LoadOptions, CancellationToken)\n  nameWithType: XElement.LoadAsync(TextReader, LoadOptions, CancellationToken)\n  fullName: XElement.LoadAsync(TextReader, LoadOptions, CancellationToken)\n- uid: System.Xml.Linq.XElement.LoadAsync(System.Xml.XmlReader,System.Xml.Linq.LoadOptions,System.Threading.CancellationToken)\n  parent: System.Xml.Linq.XElement\n  isExternal: false\n  name: LoadAsync(XmlReader, LoadOptions, CancellationToken)\n  nameWithType: XElement.LoadAsync(XmlReader, LoadOptions, CancellationToken)\n  fullName: XElement.LoadAsync(XmlReader, LoadOptions, CancellationToken)\n- uid: System.Xml.Linq.XElement.Name\n  parent: System.Xml.Linq.XElement\n  isExternal: false\n  name: Name\n  nameWithType: XElement.Name\n  fullName: XElement.Name\n- uid: System.Xml.Linq.XElement.NodeType\n  parent: System.Xml.Linq.XElement\n  isExternal: false\n  name: NodeType\n  nameWithType: XElement.NodeType\n  fullName: XElement.NodeType\n- uid: System.Xml.XmlNodeType\n  parent: System.Xml\n  isExternal: false\n  name: XmlNodeType\n  nameWithType: XmlNodeType\n  fullName: System.Xml.XmlNodeType\n- uid: System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.Nullable{System.Int64})\n  parent: System.Xml.Linq.XElement\n  isExternal: false\n  name: op_Explicit(XElement to Nullable<Int64>)\n  nameWithType: XElement.op_Explicit(XElement to Nullable<Int64>)\n  fullName: XElement.op_Explicit(XElement to Nullable<Int64>)\n- uid: System.Nullable`1\n  name: Nullable<T>\n  nameWithType: Nullable<T>\n  fullName: System.Nullable<T>\n- uid: System.Int64\n  name: Int64\n  nameWithType: Int64\n  fullName: System.Int64\n- uid: System.Nullable{System.Int64}\n  parent: System\n  isExternal: false\n  name: Nullable<Int64>\n  nameWithType: Nullable<Int64>\n  fullName: System.Nullable<System.Int64>\n  spec.csharp:\n  - uid: System.Nullable`1\n    name: Nullable\n    nameWithType: Nullable\n    fullName: System.Nullable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Int64\n    name: Int64\n    nameWithType: Int64\n    fullName: System.Int64\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.Nullable{System.Single})\n  parent: System.Xml.Linq.XElement\n  isExternal: false\n  name: op_Explicit(XElement to Nullable<Single>)\n  nameWithType: XElement.op_Explicit(XElement to Nullable<Single>)\n  fullName: XElement.op_Explicit(XElement to Nullable<Single>)\n- uid: System.Single\n  name: Single\n  nameWithType: Single\n  fullName: System.Single\n- uid: System.Nullable{System.Single}\n  parent: System\n  isExternal: false\n  name: Nullable<Single>\n  nameWithType: Nullable<Single>\n  fullName: System.Nullable<System.Single>\n  spec.csharp:\n  - uid: System.Nullable`1\n    name: Nullable\n    nameWithType: Nullable\n    fullName: System.Nullable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Single\n    name: Single\n    nameWithType: Single\n    fullName: System.Single\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.Nullable{System.TimeSpan})\n  parent: System.Xml.Linq.XElement\n  isExternal: false\n  name: op_Explicit(XElement to Nullable<TimeSpan>)\n  nameWithType: XElement.op_Explicit(XElement to Nullable<TimeSpan>)\n  fullName: XElement.op_Explicit(XElement to Nullable<TimeSpan>)\n- uid: System.TimeSpan\n  name: TimeSpan\n  nameWithType: TimeSpan\n  fullName: System.TimeSpan\n- uid: System.Nullable{System.TimeSpan}\n  parent: System\n  isExternal: false\n  name: Nullable<TimeSpan>\n  nameWithType: Nullable<TimeSpan>\n  fullName: System.Nullable<System.TimeSpan>\n  spec.csharp:\n  - uid: System.Nullable`1\n    name: Nullable\n    nameWithType: Nullable\n    fullName: System.Nullable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.TimeSpan\n    name: TimeSpan\n    nameWithType: TimeSpan\n    fullName: System.TimeSpan\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.Nullable{System.UInt32})\n  parent: System.Xml.Linq.XElement\n  isExternal: false\n  name: op_Explicit(XElement to Nullable<UInt32>)\n  nameWithType: XElement.op_Explicit(XElement to Nullable<UInt32>)\n  fullName: XElement.op_Explicit(XElement to Nullable<UInt32>)\n- uid: System.UInt32\n  name: UInt32\n  nameWithType: UInt32\n  fullName: System.UInt32\n- uid: System.Nullable{System.UInt32}\n  parent: System\n  isExternal: false\n  name: Nullable<UInt32>\n  nameWithType: Nullable<UInt32>\n  fullName: System.Nullable<System.UInt32>\n  spec.csharp:\n  - uid: System.Nullable`1\n    name: Nullable\n    nameWithType: Nullable\n    fullName: System.Nullable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.UInt32\n    name: UInt32\n    nameWithType: UInt32\n    fullName: System.UInt32\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.Nullable{System.UInt64})\n  parent: System.Xml.Linq.XElement\n  isExternal: false\n  name: op_Explicit(XElement to Nullable<UInt64>)\n  nameWithType: XElement.op_Explicit(XElement to Nullable<UInt64>)\n  fullName: XElement.op_Explicit(XElement to Nullable<UInt64>)\n- uid: System.UInt64\n  name: UInt64\n  nameWithType: UInt64\n  fullName: System.UInt64\n- uid: System.Nullable{System.UInt64}\n  parent: System\n  isExternal: false\n  name: Nullable<UInt64>\n  nameWithType: Nullable<UInt64>\n  fullName: System.Nullable<System.UInt64>\n  spec.csharp:\n  - uid: System.Nullable`1\n    name: Nullable\n    nameWithType: Nullable\n    fullName: System.Nullable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.UInt64\n    name: UInt64\n    nameWithType: UInt64\n    fullName: System.UInt64\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.UInt32)\n  parent: System.Xml.Linq.XElement\n  isExternal: false\n  name: op_Explicit(XElement to UInt32)\n  nameWithType: XElement.op_Explicit(XElement to UInt32)\n  fullName: XElement.op_Explicit(XElement to UInt32)\n- uid: System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.String)\n  parent: System.Xml.Linq.XElement\n  isExternal: false\n  name: op_Explicit(XElement to String)\n  nameWithType: XElement.op_Explicit(XElement to String)\n  fullName: XElement.op_Explicit(XElement to String)\n- uid: System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.TimeSpan)\n  parent: System.Xml.Linq.XElement\n  isExternal: false\n  name: op_Explicit(XElement to TimeSpan)\n  nameWithType: XElement.op_Explicit(XElement to TimeSpan)\n  fullName: XElement.op_Explicit(XElement to TimeSpan)\n- uid: System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.UInt64)\n  parent: System.Xml.Linq.XElement\n  isExternal: false\n  name: op_Explicit(XElement to UInt64)\n  nameWithType: XElement.op_Explicit(XElement to UInt64)\n  fullName: XElement.op_Explicit(XElement to UInt64)\n- uid: System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.Nullable{System.Int32})\n  parent: System.Xml.Linq.XElement\n  isExternal: false\n  name: op_Explicit(XElement to Nullable<Int32>)\n  nameWithType: XElement.op_Explicit(XElement to Nullable<Int32>)\n  fullName: XElement.op_Explicit(XElement to Nullable<Int32>)\n- uid: System.Int32\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Nullable{System.Int32}\n  parent: System\n  isExternal: false\n  name: Nullable<Int32>\n  nameWithType: Nullable<Int32>\n  fullName: System.Nullable<System.Int32>\n  spec.csharp:\n  - uid: System.Nullable`1\n    name: Nullable\n    nameWithType: Nullable\n    fullName: System.Nullable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Int32\n    name: Int32\n    nameWithType: Int32\n    fullName: System.Int32\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.Single)\n  parent: System.Xml.Linq.XElement\n  isExternal: false\n  name: op_Explicit(XElement to Single)\n  nameWithType: XElement.op_Explicit(XElement to Single)\n  fullName: XElement.op_Explicit(XElement to Single)\n- uid: System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.Nullable{System.Guid})\n  parent: System.Xml.Linq.XElement\n  isExternal: false\n  name: op_Explicit(XElement to Nullable<Guid>)\n  nameWithType: XElement.op_Explicit(XElement to Nullable<Guid>)\n  fullName: XElement.op_Explicit(XElement to Nullable<Guid>)\n- uid: System.Guid\n  name: Guid\n  nameWithType: Guid\n  fullName: System.Guid\n- uid: System.Nullable{System.Guid}\n  parent: System\n  isExternal: false\n  name: Nullable<Guid>\n  nameWithType: Nullable<Guid>\n  fullName: System.Nullable<System.Guid>\n  spec.csharp:\n  - uid: System.Nullable`1\n    name: Nullable\n    nameWithType: Nullable\n    fullName: System.Nullable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Guid\n    name: Guid\n    nameWithType: Guid\n    fullName: System.Guid\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.Nullable{System.Boolean})\n  parent: System.Xml.Linq.XElement\n  isExternal: false\n  name: op_Explicit(XElement to Nullable<Boolean>)\n  nameWithType: XElement.op_Explicit(XElement to Nullable<Boolean>)\n  fullName: XElement.op_Explicit(XElement to Nullable<Boolean>)\n- uid: System.Nullable{System.Boolean}\n  parent: System\n  isExternal: false\n  name: Nullable<Boolean>\n  nameWithType: Nullable<Boolean>\n  fullName: System.Nullable<System.Boolean>\n  spec.csharp:\n  - uid: System.Nullable`1\n    name: Nullable\n    nameWithType: Nullable\n    fullName: System.Nullable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Boolean\n    name: Boolean\n    nameWithType: Boolean\n    fullName: System.Boolean\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.Nullable{System.Decimal})\n  parent: System.Xml.Linq.XElement\n  isExternal: false\n  name: op_Explicit(XElement to Nullable<Decimal>)\n  nameWithType: XElement.op_Explicit(XElement to Nullable<Decimal>)\n  fullName: XElement.op_Explicit(XElement to Nullable<Decimal>)\n- uid: System.Decimal\n  name: Decimal\n  nameWithType: Decimal\n  fullName: System.Decimal\n- uid: System.Nullable{System.Decimal}\n  parent: System\n  isExternal: false\n  name: Nullable<Decimal>\n  nameWithType: Nullable<Decimal>\n  fullName: System.Nullable<System.Decimal>\n  spec.csharp:\n  - uid: System.Nullable`1\n    name: Nullable\n    nameWithType: Nullable\n    fullName: System.Nullable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Decimal\n    name: Decimal\n    nameWithType: Decimal\n    fullName: System.Decimal\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.Boolean)\n  parent: System.Xml.Linq.XElement\n  isExternal: false\n  name: op_Explicit(XElement to Boolean)\n  nameWithType: XElement.op_Explicit(XElement to Boolean)\n  fullName: XElement.op_Explicit(XElement to Boolean)\n- uid: System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.DateTime)\n  parent: System.Xml.Linq.XElement\n  isExternal: false\n  name: op_Explicit(XElement to DateTime)\n  nameWithType: XElement.op_Explicit(XElement to DateTime)\n  fullName: XElement.op_Explicit(XElement to DateTime)\n- uid: System.DateTime\n  parent: System\n  isExternal: false\n  name: DateTime\n  nameWithType: DateTime\n  fullName: System.DateTime\n- uid: System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.DateTimeOffset)\n  parent: System.Xml.Linq.XElement\n  isExternal: false\n  name: op_Explicit(XElement to DateTimeOffset)\n  nameWithType: XElement.op_Explicit(XElement to DateTimeOffset)\n  fullName: XElement.op_Explicit(XElement to DateTimeOffset)\n- uid: System.DateTimeOffset\n  parent: System\n  isExternal: false\n  name: DateTimeOffset\n  nameWithType: DateTimeOffset\n  fullName: System.DateTimeOffset\n- uid: System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.Double)\n  parent: System.Xml.Linq.XElement\n  isExternal: false\n  name: op_Explicit(XElement to Double)\n  nameWithType: XElement.op_Explicit(XElement to Double)\n  fullName: XElement.op_Explicit(XElement to Double)\n- uid: System.Double\n  parent: System\n  isExternal: false\n  name: Double\n  nameWithType: Double\n  fullName: System.Double\n- uid: System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.Guid)\n  parent: System.Xml.Linq.XElement\n  isExternal: false\n  name: op_Explicit(XElement to Guid)\n  nameWithType: XElement.op_Explicit(XElement to Guid)\n  fullName: XElement.op_Explicit(XElement to Guid)\n- uid: System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.Decimal)\n  parent: System.Xml.Linq.XElement\n  isExternal: false\n  name: op_Explicit(XElement to Decimal)\n  nameWithType: XElement.op_Explicit(XElement to Decimal)\n  fullName: XElement.op_Explicit(XElement to Decimal)\n- uid: System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.Int64)\n  parent: System.Xml.Linq.XElement\n  isExternal: false\n  name: op_Explicit(XElement to Int64)\n  nameWithType: XElement.op_Explicit(XElement to Int64)\n  fullName: XElement.op_Explicit(XElement to Int64)\n- uid: System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.Nullable{System.Double})\n  parent: System.Xml.Linq.XElement\n  isExternal: false\n  name: op_Explicit(XElement to Nullable<Double>)\n  nameWithType: XElement.op_Explicit(XElement to Nullable<Double>)\n  fullName: XElement.op_Explicit(XElement to Nullable<Double>)\n- uid: System.Nullable{System.Double}\n  parent: System\n  isExternal: false\n  name: Nullable<Double>\n  nameWithType: Nullable<Double>\n  fullName: System.Nullable<System.Double>\n  spec.csharp:\n  - uid: System.Nullable`1\n    name: Nullable\n    nameWithType: Nullable\n    fullName: System.Nullable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Double\n    name: Double\n    nameWithType: Double\n    fullName: System.Double\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.Nullable{System.DateTime})\n  parent: System.Xml.Linq.XElement\n  isExternal: false\n  name: op_Explicit(XElement to Nullable<DateTime>)\n  nameWithType: XElement.op_Explicit(XElement to Nullable<DateTime>)\n  fullName: XElement.op_Explicit(XElement to Nullable<DateTime>)\n- uid: System.Nullable{System.DateTime}\n  parent: System\n  isExternal: false\n  name: Nullable<DateTime>\n  nameWithType: Nullable<DateTime>\n  fullName: System.Nullable<System.DateTime>\n  spec.csharp:\n  - uid: System.Nullable`1\n    name: Nullable\n    nameWithType: Nullable\n    fullName: System.Nullable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.DateTime\n    name: DateTime\n    nameWithType: DateTime\n    fullName: System.DateTime\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.Nullable{System.DateTimeOffset})\n  parent: System.Xml.Linq.XElement\n  isExternal: false\n  name: op_Explicit(XElement to Nullable<DateTimeOffset>)\n  nameWithType: XElement.op_Explicit(XElement to Nullable<DateTimeOffset>)\n  fullName: XElement.op_Explicit(XElement to Nullable<DateTimeOffset>)\n- uid: System.Nullable{System.DateTimeOffset}\n  parent: System\n  isExternal: false\n  name: Nullable<DateTimeOffset>\n  nameWithType: Nullable<DateTimeOffset>\n  fullName: System.Nullable<System.DateTimeOffset>\n  spec.csharp:\n  - uid: System.Nullable`1\n    name: Nullable\n    nameWithType: Nullable\n    fullName: System.Nullable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.DateTimeOffset\n    name: DateTimeOffset\n    nameWithType: DateTimeOffset\n    fullName: System.DateTimeOffset\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.Int32)\n  parent: System.Xml.Linq.XElement\n  isExternal: false\n  name: op_Explicit(XElement to Int32)\n  nameWithType: XElement.op_Explicit(XElement to Int32)\n  fullName: XElement.op_Explicit(XElement to Int32)\n- uid: System.Xml.Linq.XElement.Parse(System.String)\n  parent: System.Xml.Linq.XElement\n  isExternal: false\n  name: Parse(String)\n  nameWithType: XElement.Parse(String)\n  fullName: XElement.Parse(String)\n- uid: System.Xml.Linq.XElement.Parse(System.String,System.Xml.Linq.LoadOptions)\n  parent: System.Xml.Linq.XElement\n  isExternal: false\n  name: Parse(String, LoadOptions)\n  nameWithType: XElement.Parse(String, LoadOptions)\n  fullName: XElement.Parse(String, LoadOptions)\n- uid: System.Xml.Linq.XElement.RemoveAll\n  parent: System.Xml.Linq.XElement\n  isExternal: false\n  name: RemoveAll()\n  nameWithType: XElement.RemoveAll()\n  fullName: XElement.RemoveAll()\n- uid: System.Xml.Linq.XElement.RemoveAttributes\n  parent: System.Xml.Linq.XElement\n  isExternal: false\n  name: RemoveAttributes()\n  nameWithType: XElement.RemoveAttributes()\n  fullName: XElement.RemoveAttributes()\n- uid: System.Xml.Linq.XElement.ReplaceAll(System.Object)\n  parent: System.Xml.Linq.XElement\n  isExternal: false\n  name: ReplaceAll(Object)\n  nameWithType: XElement.ReplaceAll(Object)\n  fullName: XElement.ReplaceAll(Object)\n- uid: System.Xml.Linq.XElement.ReplaceAll(System.Object[])\n  parent: System.Xml.Linq.XElement\n  isExternal: false\n  name: ReplaceAll(Object[])\n  nameWithType: XElement.ReplaceAll(Object[])\n  fullName: XElement.ReplaceAll(Object[])\n- uid: System.Xml.Linq.XElement.ReplaceAttributes(System.Object[])\n  parent: System.Xml.Linq.XElement\n  isExternal: false\n  name: ReplaceAttributes(Object[])\n  nameWithType: XElement.ReplaceAttributes(Object[])\n  fullName: XElement.ReplaceAttributes(Object[])\n- uid: System.Xml.Linq.XElement.ReplaceAttributes(System.Object)\n  parent: System.Xml.Linq.XElement\n  isExternal: false\n  name: ReplaceAttributes(Object)\n  nameWithType: XElement.ReplaceAttributes(Object)\n  fullName: XElement.ReplaceAttributes(Object)\n- uid: System.Xml.Linq.XElement.Save(System.IO.Stream)\n  parent: System.Xml.Linq.XElement\n  isExternal: false\n  name: Save(Stream)\n  nameWithType: XElement.Save(Stream)\n  fullName: XElement.Save(Stream)\n- uid: System.Xml.Linq.XElement.Save(System.IO.TextWriter)\n  parent: System.Xml.Linq.XElement\n  isExternal: false\n  name: Save(TextWriter)\n  nameWithType: XElement.Save(TextWriter)\n  fullName: XElement.Save(TextWriter)\n- uid: System.IO.TextWriter\n  parent: System.IO\n  isExternal: false\n  name: TextWriter\n  nameWithType: TextWriter\n  fullName: System.IO.TextWriter\n- uid: System.Xml.Linq.XElement.Save(System.String)\n  parent: System.Xml.Linq.XElement\n  isExternal: false\n  name: Save(String)\n  nameWithType: XElement.Save(String)\n  fullName: XElement.Save(String)\n- uid: System.Xml.Linq.XElement.Save(System.Xml.XmlWriter)\n  parent: System.Xml.Linq.XElement\n  isExternal: false\n  name: Save(XmlWriter)\n  nameWithType: XElement.Save(XmlWriter)\n  fullName: XElement.Save(XmlWriter)\n- uid: System.Xml.XmlWriter\n  parent: System.Xml\n  isExternal: false\n  name: XmlWriter\n  nameWithType: XmlWriter\n  fullName: System.Xml.XmlWriter\n- uid: System.Xml.Linq.XElement.Save(System.IO.Stream,System.Xml.Linq.SaveOptions)\n  parent: System.Xml.Linq.XElement\n  isExternal: false\n  name: Save(Stream, SaveOptions)\n  nameWithType: XElement.Save(Stream, SaveOptions)\n  fullName: XElement.Save(Stream, SaveOptions)\n- uid: System.Xml.Linq.SaveOptions\n  parent: System.Xml.Linq\n  isExternal: false\n  name: SaveOptions\n  nameWithType: SaveOptions\n  fullName: System.Xml.Linq.SaveOptions\n- uid: System.Xml.Linq.XElement.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)\n  parent: System.Xml.Linq.XElement\n  isExternal: false\n  name: Save(TextWriter, SaveOptions)\n  nameWithType: XElement.Save(TextWriter, SaveOptions)\n  fullName: XElement.Save(TextWriter, SaveOptions)\n- uid: System.Xml.Linq.XElement.Save(System.String,System.Xml.Linq.SaveOptions)\n  parent: System.Xml.Linq.XElement\n  isExternal: false\n  name: Save(String, SaveOptions)\n  nameWithType: XElement.Save(String, SaveOptions)\n  fullName: XElement.Save(String, SaveOptions)\n- uid: System.Xml.Linq.XElement.SaveAsync(System.IO.Stream,System.Xml.Linq.SaveOptions,System.Threading.CancellationToken)\n  parent: System.Xml.Linq.XElement\n  isExternal: false\n  name: SaveAsync(Stream, SaveOptions, CancellationToken)\n  nameWithType: XElement.SaveAsync(Stream, SaveOptions, CancellationToken)\n  fullName: XElement.SaveAsync(Stream, SaveOptions, CancellationToken)\n- uid: System.Threading.Tasks.Task\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: Task\n  nameWithType: Task\n  fullName: System.Threading.Tasks.Task\n- uid: System.Xml.Linq.XElement.SaveAsync(System.Xml.XmlWriter,System.Threading.CancellationToken)\n  parent: System.Xml.Linq.XElement\n  isExternal: false\n  name: SaveAsync(XmlWriter, CancellationToken)\n  nameWithType: XElement.SaveAsync(XmlWriter, CancellationToken)\n  fullName: XElement.SaveAsync(XmlWriter, CancellationToken)\n- uid: System.Xml.Linq.XElement.SaveAsync(System.IO.TextWriter,System.Xml.Linq.SaveOptions,System.Threading.CancellationToken)\n  parent: System.Xml.Linq.XElement\n  isExternal: false\n  name: SaveAsync(TextWriter, SaveOptions, CancellationToken)\n  nameWithType: XElement.SaveAsync(TextWriter, SaveOptions, CancellationToken)\n  fullName: XElement.SaveAsync(TextWriter, SaveOptions, CancellationToken)\n- uid: System.Xml.Linq.XElement.SetAttributeValue(System.Xml.Linq.XName,System.Object)\n  parent: System.Xml.Linq.XElement\n  isExternal: false\n  name: SetAttributeValue(XName, Object)\n  nameWithType: XElement.SetAttributeValue(XName, Object)\n  fullName: XElement.SetAttributeValue(XName, Object)\n- uid: System.Xml.Linq.XElement.SetElementValue(System.Xml.Linq.XName,System.Object)\n  parent: System.Xml.Linq.XElement\n  isExternal: false\n  name: SetElementValue(XName, Object)\n  nameWithType: XElement.SetElementValue(XName, Object)\n  fullName: XElement.SetElementValue(XName, Object)\n- uid: System.Xml.Linq.XElement.SetValue(System.Object)\n  parent: System.Xml.Linq.XElement\n  isExternal: false\n  name: SetValue(Object)\n  nameWithType: XElement.SetValue(Object)\n  fullName: XElement.SetValue(Object)\n- uid: System.Xml.Linq.XElement.Value\n  parent: System.Xml.Linq.XElement\n  isExternal: false\n  name: Value\n  nameWithType: XElement.Value\n  fullName: XElement.Value\n- uid: System.Xml.Linq.XElement.WriteTo(System.Xml.XmlWriter)\n  parent: System.Xml.Linq.XElement\n  isExternal: false\n  name: WriteTo(XmlWriter)\n  nameWithType: XElement.WriteTo(XmlWriter)\n  fullName: XElement.WriteTo(XmlWriter)\n- uid: System.Xml.Linq.XElement.WriteToAsync(System.Xml.XmlWriter,System.Threading.CancellationToken)\n  parent: System.Xml.Linq.XElement\n  isExternal: false\n  name: WriteToAsync(XmlWriter, CancellationToken)\n  nameWithType: XElement.WriteToAsync(XmlWriter, CancellationToken)\n  fullName: XElement.WriteToAsync(XmlWriter, CancellationToken)\n- uid: System.Xml.Linq.XElement.System#Xml#Serialization#IXmlSerializable#GetSchema\n  parent: System.Xml.Linq.XElement\n  isExternal: false\n  name: IXmlSerializable.GetSchema()\n  nameWithType: XElement.IXmlSerializable.GetSchema()\n  fullName: XElement.IXmlSerializable.GetSchema()\n- uid: System.Xml.Schema.XmlSchema\n  parent: System.Xml.Schema\n  isExternal: false\n  name: XmlSchema\n  nameWithType: XmlSchema\n  fullName: System.Xml.Schema.XmlSchema\n- uid: System.Xml.Linq.XElement.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)\n  parent: System.Xml.Linq.XElement\n  isExternal: false\n  name: IXmlSerializable.ReadXml(XmlReader)\n  nameWithType: XElement.IXmlSerializable.ReadXml(XmlReader)\n  fullName: XElement.IXmlSerializable.ReadXml(XmlReader)\n- uid: System.Xml.Linq.XElement.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)\n  parent: System.Xml.Linq.XElement\n  isExternal: false\n  name: IXmlSerializable.WriteXml(XmlWriter)\n  nameWithType: XElement.IXmlSerializable.WriteXml(XmlWriter)\n  fullName: XElement.IXmlSerializable.WriteXml(XmlWriter)\n- uid: System.Xml.Linq.XElement.#ctor*\n  parent: System.Xml.Linq.XElement\n  isExternal: false\n  name: XElement\n  nameWithType: XElement.XElement\n  fullName: XElement.XElement\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml\n- uid: System.Xml.Linq.XElement.AncestorsAndSelf*\n  parent: System.Xml.Linq.XElement\n  isExternal: false\n  name: AncestorsAndSelf\n  nameWithType: XElement.AncestorsAndSelf\n  fullName: XElement.AncestorsAndSelf\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml\n- uid: System.Xml.Linq.XElement.Attributes*\n  parent: System.Xml.Linq.XElement\n  isExternal: false\n  name: Attributes\n  nameWithType: XElement.Attributes\n  fullName: XElement.Attributes\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml\n- uid: System.Xml.Linq.XElement.DescendantsAndSelf*\n  parent: System.Xml.Linq.XElement\n  isExternal: false\n  name: DescendantsAndSelf\n  nameWithType: XElement.DescendantsAndSelf\n  fullName: XElement.DescendantsAndSelf\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml\n- uid: System.Xml.Linq.XElement.Load*\n  parent: System.Xml.Linq.XElement\n  isExternal: false\n  name: Load\n  nameWithType: XElement.Load\n  fullName: XElement.Load\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml\n- uid: System.Xml.Linq.XElement.ReplaceAll*\n  parent: System.Xml.Linq.XElement\n  isExternal: false\n  name: ReplaceAll\n  nameWithType: XElement.ReplaceAll\n  fullName: XElement.ReplaceAll\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml\n- uid: System.Xml.Linq.XElement.ReplaceAttributes*\n  parent: System.Xml.Linq.XElement\n  isExternal: false\n  name: ReplaceAttributes\n  nameWithType: XElement.ReplaceAttributes\n  fullName: XElement.ReplaceAttributes\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml\n- uid: System.Xml.Linq.XElement.Attribute*\n  parent: System.Xml.Linq.XElement\n  isExternal: false\n  name: Attribute\n  nameWithType: XElement.Attribute\n  fullName: XElement.Attribute\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml\n- uid: System.Xml.Linq.XElement.DescendantNodesAndSelf*\n  parent: System.Xml.Linq.XElement\n  isExternal: false\n  name: DescendantNodesAndSelf\n  nameWithType: XElement.DescendantNodesAndSelf\n  fullName: XElement.DescendantNodesAndSelf\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml\n- uid: System.Xml.Linq.XElement.EmptySequence*\n  parent: System.Xml.Linq.XElement\n  isExternal: false\n  name: EmptySequence\n  nameWithType: XElement.EmptySequence\n  fullName: XElement.EmptySequence\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml\n- uid: System.Xml.Linq.XElement.FirstAttribute*\n  parent: System.Xml.Linq.XElement\n  isExternal: false\n  name: FirstAttribute\n  nameWithType: XElement.FirstAttribute\n  fullName: XElement.FirstAttribute\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml\n- uid: System.Xml.Linq.XElement.GetDefaultNamespace*\n  parent: System.Xml.Linq.XElement\n  isExternal: false\n  name: GetDefaultNamespace\n  nameWithType: XElement.GetDefaultNamespace\n  fullName: XElement.GetDefaultNamespace\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml\n- uid: System.Xml.Linq.XElement.GetNamespaceOfPrefix*\n  parent: System.Xml.Linq.XElement\n  isExternal: false\n  name: GetNamespaceOfPrefix\n  nameWithType: XElement.GetNamespaceOfPrefix\n  fullName: XElement.GetNamespaceOfPrefix\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml\n- uid: System.Xml.Linq.XElement.GetPrefixOfNamespace*\n  parent: System.Xml.Linq.XElement\n  isExternal: false\n  name: GetPrefixOfNamespace\n  nameWithType: XElement.GetPrefixOfNamespace\n  fullName: XElement.GetPrefixOfNamespace\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml\n- uid: System.Xml.Linq.XElement.HasAttributes*\n  parent: System.Xml.Linq.XElement\n  isExternal: false\n  name: HasAttributes\n  nameWithType: XElement.HasAttributes\n  fullName: XElement.HasAttributes\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml\n- uid: System.Xml.Linq.XElement.HasElements*\n  parent: System.Xml.Linq.XElement\n  isExternal: false\n  name: HasElements\n  nameWithType: XElement.HasElements\n  fullName: XElement.HasElements\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml\n- uid: System.Xml.Linq.XElement.IsEmpty*\n  parent: System.Xml.Linq.XElement\n  isExternal: false\n  name: IsEmpty\n  nameWithType: XElement.IsEmpty\n  fullName: XElement.IsEmpty\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml\n- uid: System.Xml.Linq.XElement.LastAttribute*\n  parent: System.Xml.Linq.XElement\n  isExternal: false\n  name: LastAttribute\n  nameWithType: XElement.LastAttribute\n  fullName: XElement.LastAttribute\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml\n- uid: System.Xml.Linq.XElement.LoadAsync*\n  parent: System.Xml.Linq.XElement\n  isExternal: false\n  name: LoadAsync\n  nameWithType: XElement.LoadAsync\n  fullName: XElement.LoadAsync\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml\n- uid: System.Xml.Linq.XElement.Name*\n  parent: System.Xml.Linq.XElement\n  isExternal: false\n  name: Name\n  nameWithType: XElement.Name\n  fullName: XElement.Name\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml\n- uid: System.Xml.Linq.XElement.NodeType*\n  parent: System.Xml.Linq.XElement\n  isExternal: false\n  name: NodeType\n  nameWithType: XElement.NodeType\n  fullName: XElement.NodeType\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml\n- uid: System.Xml.Linq.XElement.op_Explicit*\n  parent: System.Xml.Linq.XElement\n  isExternal: false\n  name: op_Explicit\n  nameWithType: XElement.op_Explicit\n  fullName: XElement.op_Explicit\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml\n- uid: System.Xml.Linq.XElement.Parse*\n  parent: System.Xml.Linq.XElement\n  isExternal: false\n  name: Parse\n  nameWithType: XElement.Parse\n  fullName: XElement.Parse\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml\n- uid: System.Xml.Linq.XElement.RemoveAll*\n  parent: System.Xml.Linq.XElement\n  isExternal: false\n  name: RemoveAll\n  nameWithType: XElement.RemoveAll\n  fullName: XElement.RemoveAll\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml\n- uid: System.Xml.Linq.XElement.RemoveAttributes*\n  parent: System.Xml.Linq.XElement\n  isExternal: false\n  name: RemoveAttributes\n  nameWithType: XElement.RemoveAttributes\n  fullName: XElement.RemoveAttributes\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml\n- uid: System.Xml.Linq.XElement.Save*\n  parent: System.Xml.Linq.XElement\n  isExternal: false\n  name: Save\n  nameWithType: XElement.Save\n  fullName: XElement.Save\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml\n- uid: System.Xml.Linq.XElement.SaveAsync*\n  parent: System.Xml.Linq.XElement\n  isExternal: false\n  name: SaveAsync\n  nameWithType: XElement.SaveAsync\n  fullName: XElement.SaveAsync\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml\n- uid: System.Xml.Linq.XElement.SetAttributeValue*\n  parent: System.Xml.Linq.XElement\n  isExternal: false\n  name: SetAttributeValue\n  nameWithType: XElement.SetAttributeValue\n  fullName: XElement.SetAttributeValue\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml\n- uid: System.Xml.Linq.XElement.SetElementValue*\n  parent: System.Xml.Linq.XElement\n  isExternal: false\n  name: SetElementValue\n  nameWithType: XElement.SetElementValue\n  fullName: XElement.SetElementValue\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml\n- uid: System.Xml.Linq.XElement.SetValue*\n  parent: System.Xml.Linq.XElement\n  isExternal: false\n  name: SetValue\n  nameWithType: XElement.SetValue\n  fullName: XElement.SetValue\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml\n- uid: System.Xml.Linq.XElement.Value*\n  parent: System.Xml.Linq.XElement\n  isExternal: false\n  name: Value\n  nameWithType: XElement.Value\n  fullName: XElement.Value\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml\n- uid: System.Xml.Linq.XElement.WriteTo*\n  parent: System.Xml.Linq.XElement\n  isExternal: false\n  name: WriteTo\n  nameWithType: XElement.WriteTo\n  fullName: XElement.WriteTo\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml\n- uid: System.Xml.Linq.XElement.WriteToAsync*\n  parent: System.Xml.Linq.XElement\n  isExternal: false\n  name: WriteToAsync\n  nameWithType: XElement.WriteToAsync\n  fullName: XElement.WriteToAsync\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml\n- uid: System.Xml.Linq.XElement.System#Xml#Serialization#IXmlSerializable#GetSchema*\n  parent: System.Xml.Linq.XElement\n  isExternal: false\n  name: System.Xml.Serialization.IXmlSerializable.GetSchema\n  nameWithType: XElement.System.Xml.Serialization.IXmlSerializable.GetSchema\n  fullName: XElement.System.Xml.Serialization.IXmlSerializable.GetSchema\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml\n- uid: System.Xml.Linq.XElement.System#Xml#Serialization#IXmlSerializable#ReadXml*\n  parent: System.Xml.Linq.XElement\n  isExternal: false\n  name: System.Xml.Serialization.IXmlSerializable.ReadXml\n  nameWithType: XElement.System.Xml.Serialization.IXmlSerializable.ReadXml\n  fullName: XElement.System.Xml.Serialization.IXmlSerializable.ReadXml\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml\n- uid: System.Xml.Linq.XElement.System#Xml#Serialization#IXmlSerializable#WriteXml*\n  parent: System.Xml.Linq.XElement\n  isExternal: false\n  name: System.Xml.Serialization.IXmlSerializable.WriteXml\n  nameWithType: XElement.System.Xml.Serialization.IXmlSerializable.WriteXml\n  fullName: XElement.System.Xml.Serialization.IXmlSerializable.WriteXml\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Xml.Linq.XNode.ToString\n  parent: System.Xml.Linq.XNode\n  isExternal: false\n  name: ToString()\n  nameWithType: XNode.ToString()\n  fullName: XNode.ToString()\n- uid: System.Xml.Linq.XObject.AddAnnotation(System.Object)\n  parent: System.Xml.Linq.XObject\n  isExternal: false\n  name: AddAnnotation(Object)\n  nameWithType: XObject.AddAnnotation(Object)\n  fullName: XObject.AddAnnotation(Object)\n- uid: System.Xml.Linq.XObject.Annotation(System.Type)\n  parent: System.Xml.Linq.XObject\n  isExternal: false\n  name: Annotation(Type)\n  nameWithType: XObject.Annotation(Type)\n  fullName: XObject.Annotation(Type)\n- uid: System.Xml.Linq.XObject.Annotation``1\n  parent: System.Xml.Linq.XObject\n  isExternal: false\n  name: Annotation<T>()\n  nameWithType: XObject.Annotation<T>()\n  fullName: XObject.Annotation<T>()\n- uid: System.Xml.Linq.XObject.Annotations(System.Type)\n  parent: System.Xml.Linq.XObject\n  isExternal: false\n  name: Annotations(Type)\n  nameWithType: XObject.Annotations(Type)\n  fullName: XObject.Annotations(Type)\n- uid: System.Xml.Linq.XObject.Annotations``1\n  parent: System.Xml.Linq.XObject\n  isExternal: false\n  name: Annotations<T>()\n  nameWithType: XObject.Annotations<T>()\n  fullName: XObject.Annotations<T>()\n- uid: System.Xml.Linq.XObject.BaseUri\n  parent: System.Xml.Linq.XObject\n  isExternal: false\n  name: BaseUri\n  nameWithType: XObject.BaseUri\n  fullName: XObject.BaseUri\n- uid: System.Xml.Linq.XObject.Changed\n  parent: System.Xml.Linq.XObject\n  isExternal: false\n  name: Changed\n  nameWithType: XObject.Changed\n  fullName: XObject.Changed\n- uid: System.Xml.Linq.XObject.Changing\n  parent: System.Xml.Linq.XObject\n  isExternal: false\n  name: Changing\n  nameWithType: XObject.Changing\n  fullName: XObject.Changing\n- uid: System.Xml.Linq.XObject.Document\n  parent: System.Xml.Linq.XObject\n  isExternal: false\n  name: Document\n  nameWithType: XObject.Document\n  fullName: XObject.Document\n- uid: System.Xml.Linq.XObject.Parent\n  parent: System.Xml.Linq.XObject\n  isExternal: false\n  name: Parent\n  nameWithType: XObject.Parent\n  fullName: XObject.Parent\n- uid: System.Xml.Linq.XObject.RemoveAnnotations(System.Type)\n  parent: System.Xml.Linq.XObject\n  isExternal: false\n  name: RemoveAnnotations(Type)\n  nameWithType: XObject.RemoveAnnotations(Type)\n  fullName: XObject.RemoveAnnotations(Type)\n- uid: System.Xml.Linq.XObject.RemoveAnnotations``1\n  parent: System.Xml.Linq.XObject\n  isExternal: false\n  name: RemoveAnnotations<T>()\n  nameWithType: XObject.RemoveAnnotations<T>()\n  fullName: XObject.RemoveAnnotations<T>()\n- uid: System.Xml.Linq.XObject.System#Xml#IXmlLineInfo#HasLineInfo\n  parent: System.Xml.Linq.XObject\n  isExternal: false\n  name: IXmlLineInfo.HasLineInfo()\n  nameWithType: XObject.IXmlLineInfo.HasLineInfo()\n  fullName: XObject.IXmlLineInfo.HasLineInfo()\n- uid: System.Xml.Linq.XObject.System#Xml#IXmlLineInfo#LineNumber\n  parent: System.Xml.Linq.XObject\n  isExternal: false\n  name: IXmlLineInfo.LineNumber\n  nameWithType: XObject.IXmlLineInfo.LineNumber\n  fullName: XObject.IXmlLineInfo.LineNumber\n- uid: System.Xml.Linq.XObject.System#Xml#IXmlLineInfo#LinePosition\n  parent: System.Xml.Linq.XObject\n  isExternal: false\n  name: IXmlLineInfo.LinePosition\n  nameWithType: XObject.IXmlLineInfo.LinePosition\n  fullName: XObject.IXmlLineInfo.LinePosition\n- uid: System.Xml.Linq.XNode.AddAfterSelf(System.Object)\n  parent: System.Xml.Linq.XNode\n  isExternal: false\n  name: AddAfterSelf(Object)\n  nameWithType: XNode.AddAfterSelf(Object)\n  fullName: XNode.AddAfterSelf(Object)\n- uid: System.Xml.Linq.XNode.AddAfterSelf(System.Object[])\n  parent: System.Xml.Linq.XNode\n  isExternal: false\n  name: AddAfterSelf(Object[])\n  nameWithType: XNode.AddAfterSelf(Object[])\n  fullName: XNode.AddAfterSelf(Object[])\n- uid: System.Xml.Linq.XNode.AddBeforeSelf(System.Object)\n  parent: System.Xml.Linq.XNode\n  isExternal: false\n  name: AddBeforeSelf(Object)\n  nameWithType: XNode.AddBeforeSelf(Object)\n  fullName: XNode.AddBeforeSelf(Object)\n- uid: System.Xml.Linq.XNode.AddBeforeSelf(System.Object[])\n  parent: System.Xml.Linq.XNode\n  isExternal: false\n  name: AddBeforeSelf(Object[])\n  nameWithType: XNode.AddBeforeSelf(Object[])\n  fullName: XNode.AddBeforeSelf(Object[])\n- uid: System.Xml.Linq.XNode.Ancestors\n  parent: System.Xml.Linq.XNode\n  isExternal: false\n  name: Ancestors()\n  nameWithType: XNode.Ancestors()\n  fullName: XNode.Ancestors()\n- uid: System.Xml.Linq.XNode.Ancestors(System.Xml.Linq.XName)\n  parent: System.Xml.Linq.XNode\n  isExternal: false\n  name: Ancestors(XName)\n  nameWithType: XNode.Ancestors(XName)\n  fullName: XNode.Ancestors(XName)\n- uid: System.Xml.Linq.XNode.CompareDocumentOrder(System.Xml.Linq.XNode,System.Xml.Linq.XNode)\n  parent: System.Xml.Linq.XNode\n  isExternal: false\n  name: CompareDocumentOrder(XNode, XNode)\n  nameWithType: XNode.CompareDocumentOrder(XNode, XNode)\n  fullName: XNode.CompareDocumentOrder(XNode, XNode)\n- uid: System.Xml.Linq.XNode.CreateReader\n  parent: System.Xml.Linq.XNode\n  isExternal: false\n  name: CreateReader()\n  nameWithType: XNode.CreateReader()\n  fullName: XNode.CreateReader()\n- uid: System.Xml.Linq.XNode.CreateReader(System.Xml.Linq.ReaderOptions)\n  parent: System.Xml.Linq.XNode\n  isExternal: false\n  name: CreateReader(ReaderOptions)\n  nameWithType: XNode.CreateReader(ReaderOptions)\n  fullName: XNode.CreateReader(ReaderOptions)\n- uid: System.Xml.Linq.XNode.DeepEquals(System.Xml.Linq.XNode,System.Xml.Linq.XNode)\n  parent: System.Xml.Linq.XNode\n  isExternal: false\n  name: DeepEquals(XNode, XNode)\n  nameWithType: XNode.DeepEquals(XNode, XNode)\n  fullName: XNode.DeepEquals(XNode, XNode)\n- uid: System.Xml.Linq.XNode.DocumentOrderComparer\n  parent: System.Xml.Linq.XNode\n  isExternal: false\n  name: DocumentOrderComparer\n  nameWithType: XNode.DocumentOrderComparer\n  fullName: XNode.DocumentOrderComparer\n- uid: System.Xml.Linq.XNode.ElementsAfterSelf\n  parent: System.Xml.Linq.XNode\n  isExternal: false\n  name: ElementsAfterSelf()\n  nameWithType: XNode.ElementsAfterSelf()\n  fullName: XNode.ElementsAfterSelf()\n- uid: System.Xml.Linq.XNode.ElementsAfterSelf(System.Xml.Linq.XName)\n  parent: System.Xml.Linq.XNode\n  isExternal: false\n  name: ElementsAfterSelf(XName)\n  nameWithType: XNode.ElementsAfterSelf(XName)\n  fullName: XNode.ElementsAfterSelf(XName)\n- uid: System.Xml.Linq.XNode.ElementsBeforeSelf\n  parent: System.Xml.Linq.XNode\n  isExternal: false\n  name: ElementsBeforeSelf()\n  nameWithType: XNode.ElementsBeforeSelf()\n  fullName: XNode.ElementsBeforeSelf()\n- uid: System.Xml.Linq.XNode.ElementsBeforeSelf(System.Xml.Linq.XName)\n  parent: System.Xml.Linq.XNode\n  isExternal: false\n  name: ElementsBeforeSelf(XName)\n  nameWithType: XNode.ElementsBeforeSelf(XName)\n  fullName: XNode.ElementsBeforeSelf(XName)\n- uid: System.Xml.Linq.XNode.EqualityComparer\n  parent: System.Xml.Linq.XNode\n  isExternal: false\n  name: EqualityComparer\n  nameWithType: XNode.EqualityComparer\n  fullName: XNode.EqualityComparer\n- uid: System.Xml.Linq.XNode.IsAfter(System.Xml.Linq.XNode)\n  parent: System.Xml.Linq.XNode\n  isExternal: false\n  name: IsAfter(XNode)\n  nameWithType: XNode.IsAfter(XNode)\n  fullName: XNode.IsAfter(XNode)\n- uid: System.Xml.Linq.XNode.IsBefore(System.Xml.Linq.XNode)\n  parent: System.Xml.Linq.XNode\n  isExternal: false\n  name: IsBefore(XNode)\n  nameWithType: XNode.IsBefore(XNode)\n  fullName: XNode.IsBefore(XNode)\n- uid: System.Xml.Linq.XNode.NextNode\n  parent: System.Xml.Linq.XNode\n  isExternal: false\n  name: NextNode\n  nameWithType: XNode.NextNode\n  fullName: XNode.NextNode\n- uid: System.Xml.Linq.XNode.NodesAfterSelf\n  parent: System.Xml.Linq.XNode\n  isExternal: false\n  name: NodesAfterSelf()\n  nameWithType: XNode.NodesAfterSelf()\n  fullName: XNode.NodesAfterSelf()\n- uid: System.Xml.Linq.XNode.NodesBeforeSelf\n  parent: System.Xml.Linq.XNode\n  isExternal: false\n  name: NodesBeforeSelf()\n  nameWithType: XNode.NodesBeforeSelf()\n  fullName: XNode.NodesBeforeSelf()\n- uid: System.Xml.Linq.XNode.PreviousNode\n  parent: System.Xml.Linq.XNode\n  isExternal: false\n  name: PreviousNode\n  nameWithType: XNode.PreviousNode\n  fullName: XNode.PreviousNode\n- uid: System.Xml.Linq.XNode.ReadFrom(System.Xml.XmlReader)\n  parent: System.Xml.Linq.XNode\n  isExternal: false\n  name: ReadFrom(XmlReader)\n  nameWithType: XNode.ReadFrom(XmlReader)\n  fullName: XNode.ReadFrom(XmlReader)\n- uid: System.Xml.Linq.XNode.ReadFromAsync(System.Xml.XmlReader,System.Threading.CancellationToken)\n  parent: System.Xml.Linq.XNode\n  isExternal: false\n  name: ReadFromAsync(XmlReader, CancellationToken)\n  nameWithType: XNode.ReadFromAsync(XmlReader, CancellationToken)\n  fullName: XNode.ReadFromAsync(XmlReader, CancellationToken)\n- uid: System.Xml.Linq.XNode.Remove\n  parent: System.Xml.Linq.XNode\n  isExternal: false\n  name: Remove()\n  nameWithType: XNode.Remove()\n  fullName: XNode.Remove()\n- uid: System.Xml.Linq.XNode.ReplaceWith(System.Object)\n  parent: System.Xml.Linq.XNode\n  isExternal: false\n  name: ReplaceWith(Object)\n  nameWithType: XNode.ReplaceWith(Object)\n  fullName: XNode.ReplaceWith(Object)\n- uid: System.Xml.Linq.XNode.ReplaceWith(System.Object[])\n  parent: System.Xml.Linq.XNode\n  isExternal: false\n  name: ReplaceWith(Object[])\n  nameWithType: XNode.ReplaceWith(Object[])\n  fullName: XNode.ReplaceWith(Object[])\n- uid: System.Xml.Linq.XNode.ToString(System.Xml.Linq.SaveOptions)\n  parent: System.Xml.Linq.XNode\n  isExternal: false\n  name: ToString(SaveOptions)\n  nameWithType: XNode.ToString(SaveOptions)\n  fullName: XNode.ToString(SaveOptions)\n- uid: System.Xml.Linq.XContainer.Add(System.Object)\n  parent: System.Xml.Linq.XContainer\n  isExternal: false\n  name: Add(Object)\n  nameWithType: XContainer.Add(Object)\n  fullName: XContainer.Add(Object)\n- uid: System.Xml.Linq.XContainer.Add(System.Object[])\n  parent: System.Xml.Linq.XContainer\n  isExternal: false\n  name: Add(Object[])\n  nameWithType: XContainer.Add(Object[])\n  fullName: XContainer.Add(Object[])\n- uid: System.Xml.Linq.XContainer.AddFirst(System.Object)\n  parent: System.Xml.Linq.XContainer\n  isExternal: false\n  name: AddFirst(Object)\n  nameWithType: XContainer.AddFirst(Object)\n  fullName: XContainer.AddFirst(Object)\n- uid: System.Xml.Linq.XContainer.AddFirst(System.Object[])\n  parent: System.Xml.Linq.XContainer\n  isExternal: false\n  name: AddFirst(Object[])\n  nameWithType: XContainer.AddFirst(Object[])\n  fullName: XContainer.AddFirst(Object[])\n- uid: System.Xml.Linq.XContainer.CreateWriter\n  parent: System.Xml.Linq.XContainer\n  isExternal: false\n  name: CreateWriter()\n  nameWithType: XContainer.CreateWriter()\n  fullName: XContainer.CreateWriter()\n- uid: System.Xml.Linq.XContainer.DescendantNodes\n  parent: System.Xml.Linq.XContainer\n  isExternal: false\n  name: DescendantNodes()\n  nameWithType: XContainer.DescendantNodes()\n  fullName: XContainer.DescendantNodes()\n- uid: System.Xml.Linq.XContainer.Descendants\n  parent: System.Xml.Linq.XContainer\n  isExternal: false\n  name: Descendants()\n  nameWithType: XContainer.Descendants()\n  fullName: XContainer.Descendants()\n- uid: System.Xml.Linq.XContainer.Descendants(System.Xml.Linq.XName)\n  parent: System.Xml.Linq.XContainer\n  isExternal: false\n  name: Descendants(XName)\n  nameWithType: XContainer.Descendants(XName)\n  fullName: XContainer.Descendants(XName)\n- uid: System.Xml.Linq.XContainer.Element(System.Xml.Linq.XName)\n  parent: System.Xml.Linq.XContainer\n  isExternal: false\n  name: Element(XName)\n  nameWithType: XContainer.Element(XName)\n  fullName: XContainer.Element(XName)\n- uid: System.Xml.Linq.XContainer.Elements\n  parent: System.Xml.Linq.XContainer\n  isExternal: false\n  name: Elements()\n  nameWithType: XContainer.Elements()\n  fullName: XContainer.Elements()\n- uid: System.Xml.Linq.XContainer.Elements(System.Xml.Linq.XName)\n  parent: System.Xml.Linq.XContainer\n  isExternal: false\n  name: Elements(XName)\n  nameWithType: XContainer.Elements(XName)\n  fullName: XContainer.Elements(XName)\n- uid: System.Xml.Linq.XContainer.FirstNode\n  parent: System.Xml.Linq.XContainer\n  isExternal: false\n  name: FirstNode\n  nameWithType: XContainer.FirstNode\n  fullName: XContainer.FirstNode\n- uid: System.Xml.Linq.XContainer.LastNode\n  parent: System.Xml.Linq.XContainer\n  isExternal: false\n  name: LastNode\n  nameWithType: XContainer.LastNode\n  fullName: XContainer.LastNode\n- uid: System.Xml.Linq.XContainer.Nodes\n  parent: System.Xml.Linq.XContainer\n  isExternal: false\n  name: Nodes()\n  nameWithType: XContainer.Nodes()\n  fullName: XContainer.Nodes()\n- uid: System.Xml.Linq.XContainer.RemoveNodes\n  parent: System.Xml.Linq.XContainer\n  isExternal: false\n  name: RemoveNodes()\n  nameWithType: XContainer.RemoveNodes()\n  fullName: XContainer.RemoveNodes()\n- uid: System.Xml.Linq.XContainer.ReplaceNodes(System.Object)\n  parent: System.Xml.Linq.XContainer\n  isExternal: false\n  name: ReplaceNodes(Object)\n  nameWithType: XContainer.ReplaceNodes(Object)\n  fullName: XContainer.ReplaceNodes(Object)\n- uid: System.Xml.Linq.XContainer.ReplaceNodes(System.Object[])\n  parent: System.Xml.Linq.XContainer\n  isExternal: false\n  name: ReplaceNodes(Object[])\n  nameWithType: XContainer.ReplaceNodes(Object[])\n  fullName: XContainer.ReplaceNodes(Object[])\n- uid: System.Xml.Schema.Extensions.GetSchemaInfo(System.Xml.Linq.XElement)\n  parent: System.Xml.Schema.Extensions\n  isExternal: false\n  name: GetSchemaInfo(XElement)\n  nameWithType: Extensions.GetSchemaInfo(XElement)\n  fullName: Extensions.GetSchemaInfo(XElement)\n- uid: System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XElement,System.Xml.Schema.XmlSchemaObject,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler)\n  parent: System.Xml.Schema.Extensions\n  isExternal: false\n  name: Validate(XElement, XmlSchemaObject, XmlSchemaSet, ValidationEventHandler)\n  nameWithType: Extensions.Validate(XElement, XmlSchemaObject, XmlSchemaSet, ValidationEventHandler)\n  fullName: Extensions.Validate(XElement, XmlSchemaObject, XmlSchemaSet, ValidationEventHandler)\n- uid: System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XElement,System.Xml.Schema.XmlSchemaObject,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler,System.Boolean)\n  parent: System.Xml.Schema.Extensions\n  isExternal: false\n  name: Validate(XElement, XmlSchemaObject, XmlSchemaSet, ValidationEventHandler, Boolean)\n  nameWithType: Extensions.Validate(XElement, XmlSchemaObject, XmlSchemaSet, ValidationEventHandler, Boolean)\n  fullName: Extensions.Validate(XElement, XmlSchemaObject, XmlSchemaSet, ValidationEventHandler, Boolean)\n- uid: System.Xml.XPath.Extensions.CreateNavigator(System.Xml.Linq.XNode)\n  parent: System.Xml.XPath.Extensions\n  isExternal: false\n  name: CreateNavigator(XNode)\n  nameWithType: Extensions.CreateNavigator(XNode)\n  fullName: Extensions.CreateNavigator(XNode)\n- uid: System.Xml.XPath.Extensions.CreateNavigator(System.Xml.Linq.XNode,System.Xml.XmlNameTable)\n  parent: System.Xml.XPath.Extensions\n  isExternal: false\n  name: CreateNavigator(XNode, XmlNameTable)\n  nameWithType: Extensions.CreateNavigator(XNode, XmlNameTable)\n  fullName: Extensions.CreateNavigator(XNode, XmlNameTable)\n- uid: System.Xml.XPath.Extensions.XPathEvaluate(System.Xml.Linq.XNode,System.String)\n  parent: System.Xml.XPath.Extensions\n  isExternal: false\n  name: XPathEvaluate(XNode, String)\n  nameWithType: Extensions.XPathEvaluate(XNode, String)\n  fullName: Extensions.XPathEvaluate(XNode, String)\n- uid: System.Xml.XPath.Extensions.XPathEvaluate(System.Xml.Linq.XNode,System.String,System.Xml.IXmlNamespaceResolver)\n  parent: System.Xml.XPath.Extensions\n  isExternal: false\n  name: XPathEvaluate(XNode, String, IXmlNamespaceResolver)\n  nameWithType: Extensions.XPathEvaluate(XNode, String, IXmlNamespaceResolver)\n  fullName: Extensions.XPathEvaluate(XNode, String, IXmlNamespaceResolver)\n- uid: System.Xml.XPath.Extensions.XPathSelectElement(System.Xml.Linq.XNode,System.String)\n  parent: System.Xml.XPath.Extensions\n  isExternal: false\n  name: XPathSelectElement(XNode, String)\n  nameWithType: Extensions.XPathSelectElement(XNode, String)\n  fullName: Extensions.XPathSelectElement(XNode, String)\n- uid: System.Xml.XPath.Extensions.XPathSelectElement(System.Xml.Linq.XNode,System.String,System.Xml.IXmlNamespaceResolver)\n  parent: System.Xml.XPath.Extensions\n  isExternal: false\n  name: XPathSelectElement(XNode, String, IXmlNamespaceResolver)\n  nameWithType: Extensions.XPathSelectElement(XNode, String, IXmlNamespaceResolver)\n  fullName: Extensions.XPathSelectElement(XNode, String, IXmlNamespaceResolver)\n- uid: System.Xml.XPath.Extensions.XPathSelectElements(System.Xml.Linq.XNode,System.String)\n  parent: System.Xml.XPath.Extensions\n  isExternal: false\n  name: XPathSelectElements(XNode, String)\n  nameWithType: Extensions.XPathSelectElements(XNode, String)\n  fullName: Extensions.XPathSelectElements(XNode, String)\n- uid: System.Xml.XPath.Extensions.XPathSelectElements(System.Xml.Linq.XNode,System.String,System.Xml.IXmlNamespaceResolver)\n  parent: System.Xml.XPath.Extensions\n  isExternal: false\n  name: XPathSelectElements(XNode, String, IXmlNamespaceResolver)\n  nameWithType: Extensions.XPathSelectElements(XNode, String, IXmlNamespaceResolver)\n  fullName: Extensions.XPathSelectElements(XNode, String, IXmlNamespaceResolver)\n- uid: System.Xml.XPath.XDocumentExtensions.ToXPathNavigable(System.Xml.Linq.XNode)\n  parent: System.Xml.XPath.XDocumentExtensions\n  isExternal: false\n  name: ToXPathNavigable(XNode)\n  nameWithType: XDocumentExtensions.ToXPathNavigable(XNode)\n  fullName: XDocumentExtensions.ToXPathNavigable(XNode)\n- uid: System.Xml.Serialization.IXmlSerializable\n  parent: System.Xml.Serialization\n  isExternal: false\n  name: IXmlSerializable\n  nameWithType: IXmlSerializable\n  fullName: System.Xml.Serialization.IXmlSerializable\n"}