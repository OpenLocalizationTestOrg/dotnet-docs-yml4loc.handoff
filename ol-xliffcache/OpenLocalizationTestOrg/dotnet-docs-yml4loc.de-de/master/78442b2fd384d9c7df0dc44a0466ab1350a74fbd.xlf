<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">78442b2fd384d9c7df0dc44a0466ab1350a74fbd</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Text.StringBuilder.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">446852d3105338fcc237f49d136add93c3e0470e</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f70f9a8325417714fee141c36f547a54aeb2a8cc</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Represents a mutable string of characters.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>This class cannot be inherited.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>To view the .NET Framework source code for this type, see the <bpt id="p1">[</bpt>Reference Source<ept id="p1">](http://referencesource.microsoft.com/#mscorlib/system/text/stringbuilder.cs#adf60ee46ebd299f)</ept>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see <bpt id="p1">[</bpt>instructions<ept id="p1">](http://referencesource.microsoft.com/)</ept>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>This class represents a string-like object whose value is a mutable sequence of characters.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this section:</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[</bpt>The String and StringBuilder types<ept id="p1">](#StringAndSB)</ept></source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[</bpt>How StringBuilder works<ept id="p1">](#HowWorks)</ept></source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[</bpt>Memory allocation<ept id="p1">](#Memory)</ept></source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[</bpt>Instantiating a StringBuilder object<ept id="p1">](#Instantiating)</ept></source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[</bpt>Calling StringBuilder methods<ept id="p1">](#Calling)</ept></source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[</bpt>Performing StringBuilder operations<ept id="p1">](#Operations)</ept></source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[</bpt>Iterating StringBuilder characters<ept id="p1">](#Iterating)</ept></source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[</bpt>Adding text to a StringBuilder object<ept id="p1">](#Adding)</ept></source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[</bpt>Deleting text from a StringBuilder object<ept id="p1">](#Deleting)</ept></source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[</bpt>Modifying the text in a StringBuilder object<ept id="p1">](#Modifying)</ept></source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[</bpt>Searching the text in a StringBuilder object<ept id="p1">](#Searching)</ept></source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[</bpt>Converting the StringBuilder object to a string<ept id="p1">](#Converting)</ept></source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>The String and StringBuilder types</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>Although <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> and <ph id="ph2">&lt;xref:System.String&gt;</ph> both represent sequences of characters, they are implemented differently.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.String&gt;</ph> is an immutable type.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>That is, each operation that appears to modify a <ph id="ph1">&lt;xref:System.String&gt;</ph> object actually creates a new string.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, the call to the <ph id="ph1">&lt;xref:System.String.Concat%2A?displayProperty=fullName&gt;</ph> method in the following C# example appears to change the value of a string variable named <ph id="ph2">`value`</ph>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>In fact, the <ph id="ph1">&lt;xref:System.String.Concat%2A&gt;</ph> method returns a <ph id="ph2">`value`</ph> object that has a different value and address from the <ph id="ph3">`value`</ph> object that was passed to the method.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note that the example must be compiled using the <ph id="ph1">`/unsafe`</ph> compiler option.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Text.StringBuilder.Class#1<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.stringbuilder.class/cs/immutability2.cs#1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>For routines that perform extensive string manipulation (such as apps that modify a string numerous times in a loop), modifying a string repeatedly can exact a significant performance penalty.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>The alternative is to use <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph>, which is a mutable string class.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>Mutability means that once an instance of the class has been created, it can be modified by appending, removing, replacing, or inserting characters.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> object maintains a buffer to accommodate expansions to the string.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>New data is appended to the buffer if room is available; otherwise, a new, larger buffer is allocated, data from the original buffer is copied to the new buffer, and the new data is then appended to the new buffer.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>Although the <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> class generally offers better performance than the <ph id="ph2">&lt;xref:System.String&gt;</ph> class, you should not automatically replace <ph id="ph3">&lt;xref:System.String&gt;</ph> with <ph id="ph4">&lt;xref:System.Text.StringBuilder&gt;</ph> whenever you want to manipulate strings.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>Performance depends on the size of the string, the amount of memory to be allocated for the new string, the system on which your app is executing, and the type of operation.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>You should be prepared to test your app to determine whether <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> actually offers a significant performance improvement.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>Consider using the <ph id="ph1">&lt;xref:System.String&gt;</ph> class under these conditions:</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the number of changes that your app will make to a string is small.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>In these cases, <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> might offer negligible or no performance improvement over <ph id="ph2">&lt;xref:System.String&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you are performing a fixed number of concatenation operations, particularly with string literals.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case, the compiler might combine the concatenation operations into a single operation.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you have to perform extensive search operations while you are building your string.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> class lacks search methods such as <ph id="ph2">`IndexOf`</ph> or <ph id="ph3">`StartsWith`</ph>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source>You'll have to convert the <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> object to a <ph id="ph2">&lt;xref:System.String&gt;</ph> for these operations, and this can negate the performance benefit from using <ph id="ph3">&lt;xref:System.Text.StringBuilder&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see the <bpt id="p1">[</bpt>Searching the text in a StringBuilder object<ept id="p1">](#Searching)</ept> section.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>Consider using the <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> class under these conditions:</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you expect your app to make an unknown number of changes to a string at design time (for example, when you are using a loop to concatenate a random number of strings that contain user input).</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you expect your app to make a significant number of changes to a string.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>How StringBuilder works</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Text.StringBuilder.Length%2A?displayProperty=fullName&gt;</ph> property indicates the number of characters the <ph id="ph2">&lt;xref:System.Text.StringBuilder&gt;</ph> object currently contains.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you add characters to the <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> object, its length increases until it equals the size of the <ph id="ph2">&lt;xref:System.Text.StringBuilder.Capacity%2A?displayProperty=fullName&gt;</ph> property, which defines the number of characters that the object can contain.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the number of added characters causes the length of the <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> object to exceed its current capacity, new memory is allocated, the value of the <ph id="ph2">&lt;xref:System.Text.StringBuilder.Capacity%2A&gt;</ph> property is doubled, new characters are added to the <ph id="ph3">&lt;xref:System.Text.StringBuilder&gt;</ph> object, and its <ph id="ph4">&lt;xref:System.Text.StringBuilder.Length%2A&gt;</ph> property is adjusted.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT">
          <source>Additional memory for the <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> object is allocated dynamically until it reaches the value defined by the <ph id="ph2">&lt;xref:System.Text.StringBuilder.MaxCapacity%2A?displayProperty=fullName&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the maximum capacity is reached, no further memory can be allocated for the <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> object, and trying to add characters or expand it beyond its maximum capacity throws either an <ph id="ph2">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph> or an <ph id="ph3">&lt;xref:System.OutOfMemoryException&gt;</ph> exception.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following example illustrates how a <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> object allocates new memory and increases its capacity dynamically as the string assigned to the object expands.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT">
          <source>The code creates a <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> object by calling its default (parameterless) constructor.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default capacity of this object is 16 characters, and its maximum capacity is more than 2 billion characters.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT">
          <source>Appending the string "This is a sentence."</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT">
          <source>results in a new memory allocation because the string length (19 characters) exceeds the default capacity of the <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT">
          <source>The capacity of the object doubles to 32 characters, the new string is added, and the length of the object now equals 19 characters.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT">
          <source>The code then appends the string "This is an additional sentence."</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT">
          <source>to the value of the <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> object 11 times.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT">
          <source>Whenever the append operation causes the length of the <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> object to exceed its capacity, its existing capacity is doubled and the <ph id="ph2">&lt;xref:System.Text.StringBuilder.Append%2A&gt;</ph> operation succeeds.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Text.StringBuilder.Class#3<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.stringbuilder.class/cs/default1.cs#3)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Text.StringBuilder.Class#3<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.stringbuilder.class/vb/default1.vb#3)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT">
          <source>Memory allocation</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default capacity of a <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> object is 16 characters, and its default maximum capacity is <ph id="ph2">&lt;xref:System.Int32.MaxValue?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT">
          <source>These default values are used if you call the <ph id="ph1">&lt;xref:System.Text.StringBuilder.%23ctor&gt;</ph> and <ph id="ph2">&lt;xref:System.Text.StringBuilder.%23ctor%28System.String%29&gt;</ph> constructors.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can explicitly define the initial capacity of a <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> object in the following ways:</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT">
          <source>By calling any of the <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> constructors that includes a <ph id="ph2">`capacity`</ph> parameter when you create the object.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT">
          <source>By explicitly assigning a new value to the <ph id="ph1">&lt;xref:System.Text.StringBuilder.Capacity%2A?displayProperty=fullName&gt;</ph> property to expand an existing <ph id="ph2">&lt;xref:System.Text.StringBuilder&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note that the property throws an exception if the new capacity is less than the existing capacity or greater than the <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> object's maximum capacity.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT">
          <source>By calling the <ph id="ph1">&lt;xref:System.Text.StringBuilder.EnsureCapacity%2A?displayProperty=fullName&gt;</ph> method with the new capacity.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT">
          <source>The new capacity must not be greater than the <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> object's maximum capacity.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, unlike an assignment to the <ph id="ph1">&lt;xref:System.Text.StringBuilder.Capacity%2A&gt;</ph> property, <ph id="ph2">&lt;xref:System.Text.StringBuilder.EnsureCapacity%2A&gt;</ph> does not throw an exception if the desired new capacity is less than the existing capacity; in this case, the method call has no effect.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the length of the string assigned to the <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> object in the constructor call exceeds either the default capacity or the specified capacity, the <ph id="ph2">&lt;xref:System.Text.StringBuilder.Capacity%2A&gt;</ph> property is set to the length of the string specified with the <ph id="ph3">`value`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can explicitly define the maximum capacity of a <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> object by calling the <ph id="ph2">&lt;xref:System.Text.StringBuilder.%23ctor%28System.Int32%2CSystem.Int32%29&gt;</ph> constructor.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can't change the maximum capacity by assigning a new value to the <ph id="ph1">&lt;xref:System.Text.StringBuilder.MaxCapacity%2A&gt;</ph> property, because it is read-only.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT">
          <source>As the previous section shows, whenever the existing capacity is inadequate, additional memory is allocated and the capacity of a <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> object doubles up to the value defined by the <ph id="ph2">&lt;xref:System.Text.StringBuilder.MaxCapacity%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT">
          <source>In general, the default capacity and maximum capacity are adequate for most apps.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT">
          <source>You might consider setting these values under the following conditions:</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the eventual size of the <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> object is likely to grow exceedingly large, typically in excess of several megabytes.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case, there may be some performance benefit from setting the initial <ph id="ph1">&lt;xref:System.Text.StringBuilder.Capacity%2A&gt;</ph> property to a significantly high value to eliminate the need for too many memory reallocations.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT">
          <source>If your app is running on a system with limited memory.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case, you may want to consider setting the <ph id="ph1">&lt;xref:System.Text.StringBuilder.MaxCapacity%2A&gt;</ph> property to less than <ph id="ph2">&lt;xref:System.Int32.MaxValue?displayProperty=fullName&gt;</ph> if your app is handling large strings that may cause it to execute in a memory-constrained environment.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT">
          <source>Instantiating a StringBuilder object</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT">
          <source>You instantiate a <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> object by calling one of its six overloaded class constructors, which are listed in the following table.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT">
          <source>Three of the constructors instantiate a <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> object whose value is an empty string, but set its <ph id="ph2">&lt;xref:System.Text.StringBuilder.Capacity%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Text.StringBuilder.MaxCapacity%2A&gt;</ph> values differently.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT">
          <source>The remaining three constructors define a <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> object that has a specific string value and capacity.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT">
          <source>Two of the three constructors use the default maximum capacity of <ph id="ph1">&lt;xref:System.Int32.MaxValue?displayProperty=fullName&gt;</ph>, whereas the third allows you to set the maximum capacity.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT">
          <source>Constructor</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT">
          <source>String value</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT">
          <source>Capacity</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT">
          <source>Maximum capacity</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT">
          <source>16</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT">
          <source>Defined by the <ph id="ph1">`capacity`</ph> parameter</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT">
          <source>Defined by the <ph id="ph1">`capacity`</ph> parameter</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT">
          <source>Defined by the <ph id="ph1">`maxCapacity`</ph> parameter</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT">
          <source>Defined by the <ph id="ph1">`value`</ph> parameter</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT">
          <source>16 or <ph id="ph1">`value`</ph>.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.String.Length%2A&gt;</ph>, whichever is greater</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT">
          <source>Defined by the <ph id="ph1">`value`</ph> parameter</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT">
          <source>Defined by the <ph id="ph1">`capacity`</ph> parameter or <ph id="ph2">`value`</ph>.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.String.Length%2A&gt;</ph>, whichever is greater.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT">
          <source>Defined by <ph id="ph1">`value`</ph>.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.String.Substring%2A&gt;</ph>(<ph id="ph2">`startIndex`</ph>, <ph id="ph3">`length`</ph>)</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT">
          <source>Defined by the <ph id="ph1">`capacity`</ph> parameter or <ph id="ph2">`value`</ph>.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.String.Length%2A&gt;</ph>, whichever is greater.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT">
          <source>Defined by the <ph id="ph1">`maxCapacity`</ph> parameter</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following example uses three of these constructor overloads to instantiate <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> objects.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Text.StringBuilder.Class#6<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.stringbuilder.class/cs/instantiate1.cs#6)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Text.StringBuilder.Class#6<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.stringbuilder.class/vb/instantiate1.vb#6)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calling StringBuilder methods</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT">
          <source>Most of the methods that modify the string in a <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> instance return a reference to that same instance.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT">
          <source>This enables you to call <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> methods in two ways:</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can make individual method calls and ignore the return value, as the following example does.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Text.StringBuilder.Class#4<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.stringbuilder.class/cs/call1.cs#4)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Text.StringBuilder.Class#4<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.stringbuilder.class/vb/call1.vb#4)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can make a series of method calls in a single statement.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT">
          <source>This can be convenient if you want to write a single statement that chains successive operations.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following example consolidates three method calls from the previous example into a single line of code.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Text.StringBuilder.Class#5<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.stringbuilder.class/cs/call2.cs#5)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Text.StringBuilder.Class#5<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.stringbuilder.class/vb/call2.vb#5)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT">
          <source>Performing StringBuilder operations</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use the methods of the <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> class to iterate, add, delete, or modify characters in a <ph id="ph2">&lt;xref:System.Text.StringBuilder&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT">
          <source>Iterating StringBuilder characters</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can access the characters in a <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> object by using the <ph id="ph2">&lt;xref:System.Text.StringBuilder.Chars%2A?displayProperty=fullName&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT">
          <source>In C#, <ph id="ph1">&lt;xref:System.Text.StringBuilder.Chars%2A&gt;</ph> is an indexer; in Visual Basic, it is the default property of the <ph id="ph2">&lt;xref:System.Text.StringBuilder&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT">
          <source>This enables you to set or retrieve individual characters by using their index only, without explicitly referencing the <ph id="ph1">&lt;xref:System.Text.StringBuilder.Chars%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT">
          <source>Characters in a <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> object begin at index 0 (zero) and continue to index <ph id="ph2">&lt;xref:System.Text.StringBuilder.Length%2A&gt;</ph> - 1.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following example illustrates the <ph id="ph1">&lt;xref:System.Text.StringBuilder.Chars%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT">
          <source>It appends ten random numbers to a <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> object, and then iterates each character.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the character's Unicode category is <ph id="ph1">&lt;xref:System.Globalization.UnicodeCategory?displayProperty=fullName&gt;</ph>, it decreases the number by 1 (or changes the number to 9 if its value is 0).</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT">
          <source>The example displays the contents of the <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> object both before and after the values of individual characters were changed.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Text.StringBuilder.Class#7<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.stringbuilder.class/cs/chars1.cs#7)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Text.StringBuilder.Class#7<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.stringbuilder.class/vb/chars1.vb#7)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT">
          <source>Adding text to a StringBuilder object</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> class includes the following methods for expanding the contents of a <ph id="ph2">&lt;xref:System.Text.StringBuilder&gt;</ph> object:</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Text.StringBuilder.Append%2A&gt;</ph> method appends a string, a substring, a character array, a portion of a character array, a single character repeated multiple times, or the string representation of a primitive data type to a <ph id="ph2">&lt;xref:System.Text.StringBuilder&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Text.StringBuilder.AppendLine%2A&gt;</ph> method appends a line terminator or a string along with a line terminator to a <ph id="ph2">&lt;xref:System.Text.StringBuilder&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Text.StringBuilder.AppendFormat%2A&gt;</ph> method appends a  to a <ph id="ph2">&lt;xref:System.Text.StringBuilder&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT">
          <source>The string representations of objects included in the result string can reflect the formatting conventions of the current system culture or a specified culture.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Text.StringBuilder.Insert%2A&gt;</ph> method inserts a string, a substring, multiple repetitions of a string, a character array, a portion of a character array, or the string representation of a primitive data type at a specified position in the <ph id="ph2">&lt;xref:System.Text.StringBuilder&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT">
          <source>The position is defined by a zero-based index.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Text.StringBuilder.Append%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Text.StringBuilder.AppendLine%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Text.StringBuilder.AppendFormat%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Text.StringBuilder.Insert%2A&gt;</ph> methods to expand the text of a <ph id="ph5">&lt;xref:System.Text.StringBuilder&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Text.StringBuilder.Class#9<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.stringbuilder.class/cs/expand1.cs#9)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Text.StringBuilder.Class#9<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.stringbuilder.class/vb/expand1.vb#9)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT">
          <source>Deleting text from a StringBuilder object</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> class includes methods that can reduce the size of the current <ph id="ph2">&lt;xref:System.Text.StringBuilder&gt;</ph> instance.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Text.StringBuilder.Clear%2A&gt;</ph> method removes all characters and sets the <ph id="ph2">&lt;xref:System.Text.StringBuilder.Length%2A&gt;</ph> property to zero.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Text.StringBuilder.Remove%2A&gt;</ph> method deletes a specified number of characters starting at a particular index position.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT">
          <source>In addition, you can remove characters from the end of a <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> object by setting its <ph id="ph2">&lt;xref:System.Text.StringBuilder.Length%2A&gt;</ph> property to a value that is less than the length of the current instance.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following example removes some of the text from a <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> object, displays its resulting capacity, maximum capacity, and length property values, and then calls the <ph id="ph2">&lt;xref:System.Text.StringBuilder.Clear%2A&gt;</ph> method to remove all the characters from the <ph id="ph3">&lt;xref:System.Text.StringBuilder&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Text.StringBuilder.Class#10<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.stringbuilder.class/cs/delete1.cs#10)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Text.StringBuilder.Class#10<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.stringbuilder.class/vb/delete1.vb#10)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT">
          <source>Modifying the text in a StringBuilder object</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Text.StringBuilder.Replace%2A?displayProperty=fullName&gt;</ph> method replaces all occurrences of a character or a string in the entire <ph id="ph2">&lt;xref:System.Text.StringBuilder&gt;</ph> object or in a particular character range.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Text.StringBuilder.Replace%2A&gt;</ph> method to replace all exclamation points (!) with question marks (?) in the <ph id="ph2">&lt;xref:System.Text.StringBuilder&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Text.StringBuilder.Class#11<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.stringbuilder.class/cs/replace1.cs#11)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Text.StringBuilder.Class#11<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.stringbuilder.class/vb/replace1.vb#11)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT">
          <source>Searching the text in a StringBuilder object</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> class does not include methods similar to the <ph id="ph2">&lt;xref:System.String.Contains%2A?displayProperty=fullName&gt;</ph>, <ph id="ph3">&lt;xref:System.String.IndexOf%2A?displayProperty=fullName&gt;</ph>, and <ph id="ph4">&lt;xref:System.String.StartsWith%2A?displayProperty=fullName&gt;</ph> methods provided by the <ph id="ph5">&lt;xref:System.String&gt;</ph> class, which allow you to search the object for a particular character or a substring.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT">
          <source>Determining the presence or starting character position of a substring requires that you search a <ph id="ph1">&lt;xref:System.String&gt;</ph> value by using either a string search method or a regular expression method.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT">
          <source>There are four ways to implement such searches, as the following table shows.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT">
          <source>Technique</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT">
          <source>Pros</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT">
          <source>Cons</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT">
          <source>Search string values before adding them to the <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT">
          <source>Useful for determining whether a substring exists.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT">
          <source>Cannot be used when the index position of a substring is important.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT">
          <source>Call <ph id="ph1">&lt;xref:System.Text.StringBuilder.ToString%2A&gt;</ph> and search the returned <ph id="ph2">&lt;xref:System.String&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT">
          <source>Easy to use if you assign all the text to a <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> object, and then begin to modify it.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT">
          <source>Cumbersome to repeatedly call <ph id="ph1">&lt;xref:System.Text.StringBuilder.ToString%2A&gt;</ph> if you must make modifications before all text is added to the <ph id="ph2">&lt;xref:System.Text.StringBuilder&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT">
          <source>You must remember to work from the end of the <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> object's text if you're making changes.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.Text.StringBuilder.Chars%2A&gt;</ph> property to sequentially search a range of characters.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT">
          <source>Useful if you're concerned with individual characters or a small substring.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT">
          <source>Cumbersome if the number of characters to search is large or if the search logic is complex.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT">
          <source>Convert the <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> object to a <ph id="ph2">&lt;xref:System.String&gt;</ph> object, and perform modifications on the <ph id="ph3">&lt;xref:System.String&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT">
          <source>Useful if the number of modifications is small.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT">
          <source>Negates the performance benefit of the <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> class if the number of modifications is large.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT">
          <source>Let's examine these techniques in greater detail.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the goal of the search is to determine whether a particular substring exists (that is, if you aren't interested in the position of the substring), you can search strings before storing them in the <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following example provides one possible implementation.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT">
          <source>It defines a <ph id="ph1">`StringBuilderFinder`</ph> class whose constructor is passed a reference to a <ph id="ph2">&lt;xref:System.Text.StringBuilder&gt;</ph> object and the substring to find in the string.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case, the example tries to determine whether recorded temperatures are in Fahrenheit or Celsius, and adds the appropriate introductory text to the beginning of the <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT">
          <source>A random number generator is used to select an array that contains data in either degrees Celsius or degrees Fahrenheit.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Text.StringBuilder.Class#12<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.stringbuilder.class/cs/pattern1.cs#12)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Text.StringBuilder.Class#12<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.stringbuilder.class/vb/pattern1.vb#12)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT">
          <source>Call the <ph id="ph1">&lt;xref:System.Text.StringBuilder.ToString%2A?displayProperty=fullName&gt;</ph> method to convert the <ph id="ph2">&lt;xref:System.Text.StringBuilder&gt;</ph> object to a <ph id="ph3">&lt;xref:System.String&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can search the string by using methods such as <ph id="ph1">&lt;xref:System.String.LastIndexOf%2A?displayProperty=fullName&gt;</ph> or <ph id="ph2">&lt;xref:System.String.StartsWith%2A?displayProperty=fullName&gt;</ph>, or you can use regular expressions and the <ph id="ph3">&lt;xref:System.Text.RegularExpressions.Regex&gt;</ph> class to search for patterns.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because both <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> and <ph id="ph2">&lt;xref:System.String&gt;</ph> objects use UTF-16 encoding to store characters, the index positions of characters, substrings, and regular expression matches are the same in both objects.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT">
          <source>This enables you to use <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> methods to make changes at the same position at which that text is found in the <ph id="ph2">&lt;xref:System.String&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you adopt this approach, you should work from the end of the <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> object to its beginning so that you don't have to repeatedly convert the <ph id="ph2">&lt;xref:System.Text.StringBuilder&gt;</ph> object to a string.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following example illustrates this approach.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT">
          <source>It stores four occurrences of each letter of the English alphabet in a <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT">
          <source>It then converts the text to a <ph id="ph1">&lt;xref:System.String&gt;</ph> object and uses a regular expression to identify the starting position of each four-character sequence.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT">
          <source>Finally, it adds an underscore before each four-character sequence except for the first sequence, and converts the first character of the sequence to uppercase.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Text.StringBuilder.Class#13<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.stringbuilder.class/cs/pattern2.cs#13)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Text.StringBuilder.Class#13<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.stringbuilder.class/vb/pattern2.vb#13)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.Text.StringBuilder.Chars%2A?displayProperty=fullName&gt;</ph> property to sequentially search a range of characters in a <ph id="ph2">&lt;xref:System.Text.StringBuilder&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT">
          <source>This approach may not be practical if the number of characters to be searched is large or the search logic is particularly complex.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following example is identical in functionality to the previous example but differs in implementation.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT">
          <source>It uses the <ph id="ph1">&lt;xref:System.Text.StringBuilder.Chars%2A&gt;</ph> property to detect when a character value has changed, inserts an underscore at that position, and converts the first character in the new sequence to uppercase.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Text.StringBuilder.Class#14<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.stringbuilder.class/cs/pattern3.cs#14)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Text.StringBuilder.Class#14<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.stringbuilder.class/vb/pattern3.vb#14)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT">
          <source>Store all the unmodified text in the <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> object, call the <ph id="ph2">&lt;xref:System.Text.StringBuilder.ToString%2A?displayProperty=fullName&gt;</ph> method to convert the <ph id="ph3">&lt;xref:System.Text.StringBuilder&gt;</ph> object to a <ph id="ph4">&lt;xref:System.String&gt;</ph> object, and perform the modifications on the <ph id="ph5">&lt;xref:System.String&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use this approach if you have only a few modifications; otherwise, the cost of working with immutable strings may negate the performance benefits of using a <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following example is identical in functionality to the previous two examples but differs in implementation.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT">
          <source>It creates a <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> object, converts it to a <ph id="ph2">&lt;xref:System.String&gt;</ph> object, and then uses a regular expression to perform all remaining modifications on the string.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.MatchEvaluator%29?displayProperty=fullName&gt;</ph> method uses a lambda expression to perform the replacement on each match.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Text.StringBuilder.Class#15<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.stringbuilder.class/cs/pattern4.cs#15)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Text.StringBuilder.Class#15<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.stringbuilder.class/vb/pattern4.vb#15)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT">
          <source>Converting the StringBuilder object to a string</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT">
          <source>You must convert the <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> object to a <ph id="ph2">&lt;xref:System.String&gt;</ph> object before you can pass the string represented by the <ph id="ph3">&lt;xref:System.Text.StringBuilder&gt;</ph> object to a method that has a <ph id="ph4">&lt;xref:System.String&gt;</ph> parameter or display it in the user interface.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT">
          <source>You perform this conversion by calling the <ph id="ph1">&lt;xref:System.Text.StringBuilder.ToString%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT">
          <source>For an illustration, see the previous example, which calls the <ph id="ph1">&lt;xref:System.Text.StringBuilder.ToString%2A&gt;</ph> method to convert a <ph id="ph2">&lt;xref:System.Text.StringBuilder&gt;</ph> object to a string so that it can be passed to a regular expression method.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Text.StringBuilder"&gt;&lt;/xref&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT">
          <source>The string value of this instance is set to <ph id="ph1">&lt;xref:System.String.Empty?displayProperty=fullName&gt;</ph>, and the capacity is set to the implementation-specific default capacity.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Text.StringBuilder"&gt;&lt;/xref&gt;</ph> class using the specified capacity.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`capacity`</ph> parameter defines the maximum number of characters that can be stored in the memory allocated by the current instance.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT">
          <source>Its value is assigned to the <ph id="ph1">&lt;xref:System.Text.StringBuilder.Capacity%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the number of characters to be stored in the current instance exceeds this <ph id="ph1">`capacity`</ph> value, the <ph id="ph2">&lt;xref:System.Text.StringBuilder&gt;</ph> object allocates additional memory to store them.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT">
          <source>The string value of this instance is set to <ph id="ph1">&lt;xref:System.String.Empty?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`capacity`</ph> is zero, the implementation-specific default capacity is used.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>The suggested starting size of this instance.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;capacity&lt;/code&gt;</ph> is less than zero.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Text.StringBuilder"&gt;&lt;/xref&gt;</ph> class using the specified string.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`value`</ph> is <ph id="ph2">`null`</ph>, the new <ph id="ph3">&lt;xref:System.Text.StringBuilder&gt;</ph> will contain the empty string (that is, it contains <ph id="ph4">&lt;xref:System.String.Empty&gt;</ph>).</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>The string used to initialize the value of the instance.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">value</ph><ept id="p1">&lt;/code&gt;</ept> is <ph id="ph2">`null`</ph>, the new <ph id="ph3">&lt;xref href="System.Text.StringBuilder"&gt;&lt;/xref&gt;</ph> will contain the empty string (that is, it contains <ph id="ph4">&lt;xref href="System.String.Empty"&gt;&lt;/xref&gt;</ph>).</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Text.StringBuilder"&gt;&lt;/xref&gt;</ph> class that starts with a specified capacity and can grow to a specified maximum.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`capacity`</ph> parameter defines the maximum number of characters that can be stored in the memory allocated by the current instance.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT">
          <source>Its value is assigned to the <ph id="ph1">&lt;xref:System.Text.StringBuilder.Capacity%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the number of characters to be stored in the current instance exceeds this <ph id="ph1">`capacity`</ph> value, the <ph id="ph2">&lt;xref:System.Text.StringBuilder&gt;</ph> object allocates additional memory to store them.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`capacity`</ph> is zero, the implementation-specific default capacity is used.</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`maxCapacity`</ph> property defines the maximum number of characters that the current instance can hold.</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT">
          <source>Its value is assigned to the <ph id="ph1">&lt;xref:System.Text.StringBuilder.MaxCapacity%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the number of characters to be stored in the current instance exceeds this <ph id="ph1">`maxCapacity`</ph> value, the <ph id="ph2">&lt;xref:System.Text.StringBuilder&gt;</ph> object does not allocate additional memory, but instead throws an exception.</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>The suggested starting size of the <ph id="ph1">&lt;xref href="System.Text.StringBuilder"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>The maximum number of characters the current string can contain.</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;maxCapacity&lt;/code&gt;</ph> is less than one, <ph id="ph2">&lt;code&gt;capacity&lt;/code&gt;</ph> is less than zero, or <ph id="ph3">&lt;code&gt;capacity&lt;/code&gt;</ph> is greater than <ph id="ph4">&lt;code&gt;maxCapacity&lt;/code&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Text.StringBuilder"&gt;&lt;/xref&gt;</ph> class using the specified string and capacity.</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`capacity`</ph> parameter defines the maximum number of characters that can be stored in the memory allocated by the current instance.</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT">
          <source>Its value is assigned to the <ph id="ph1">&lt;xref:System.Text.StringBuilder.Capacity%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the number of characters to be stored in the current instance exceeds this <ph id="ph1">`capacity`</ph> value, the <ph id="ph2">&lt;xref:System.Text.StringBuilder&gt;</ph> object allocates additional memory to store them.</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`capacity`</ph> is zero, the implementation-specific default capacity is used.</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>The string used to initialize the value of the instance.</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">value</ph><ept id="p1">&lt;/code&gt;</ept> is <ph id="ph2">`null`</ph>, the new <ph id="ph3">&lt;xref href="System.Text.StringBuilder"&gt;&lt;/xref&gt;</ph> will contain the empty string (that is, it contains <ph id="ph4">&lt;xref href="System.String.Empty"&gt;&lt;/xref&gt;</ph>).</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>The suggested starting size of the <ph id="ph1">&lt;xref href="System.Text.StringBuilder"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;capacity&lt;/code&gt;</ph> is less than zero.</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Text.StringBuilder"&gt;&lt;/xref&gt;</ph> class from the specified substring and capacity.</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`capacity`</ph> parameter defines the maximum number of characters that can be stored in the memory allocated by the current instance.</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" extradata="MT">
          <source>Its value is assigned to the <ph id="ph1">&lt;xref:System.Text.StringBuilder.Capacity%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the number of characters to be stored in the current instance exceeds this <ph id="ph1">`capacity`</ph> value, the <ph id="ph2">&lt;xref:System.Text.StringBuilder&gt;</ph> object allocates additional memory to store them.</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`capacity`</ph> is zero, the implementation-specific default capacity is used.</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>The string that contains the substring used to initialize the value of this instance.</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">value</ph><ept id="p1">&lt;/code&gt;</ept> is <ph id="ph2">`null`</ph>, the new <ph id="ph3">&lt;xref href="System.Text.StringBuilder"&gt;&lt;/xref&gt;</ph> will contain the empty string (that is, it contains <ph id="ph4">&lt;xref href="System.String.Empty"&gt;&lt;/xref&gt;</ph>).</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>The position within <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">value</ph><ept id="p1">&lt;/code&gt;</ept> where the substring begins.</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>The number of characters in the substring.</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>The suggested starting size of the <ph id="ph1">&lt;xref href="System.Text.StringBuilder"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;capacity&lt;/code&gt;</ph> is less than zero.</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;startIndex&lt;/code&gt;</ph> plus <ph id="ph2">&lt;code&gt;length&lt;/code&gt;</ph> is not a position within <ph id="ph3">&lt;code&gt;value&lt;/code&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>Appends a copy of a specified substring to this instance.</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method appends the specified range of characters in <ph id="ph1">`value`</ph> to the current instance.</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`value`</ph> is <ph id="ph2">`null`</ph> and <ph id="ph3">`startIndex`</ph> and <ph id="ph4">`count`</ph> are both zero, no changes are made.</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Text.StringBuilder.Append%28System.String%2CSystem.Int32%2CSystem.Int32%29&gt;</ph> method modifies the existing instance of this class; it does not return a new class instance.</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> object, as the following example illustrates.</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Text.StringBuilder.Append#19<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/cs/append3.cs#19)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Text.StringBuilder.Append#19<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/vb/append3.vb#19)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" extradata="MT">
          <source>The capacity of this instance is adjusted as needed.</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>The string that contains the substring to append.</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>The starting position of the substring within <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">value</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>The number of characters in <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">value</ph><ept id="p1">&lt;/code&gt;</ept> to append.</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>A reference to this instance after the append operation has completed.</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;value&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>, and <ph id="ph3">&lt;code&gt;startIndex&lt;/code&gt;</ph> and <ph id="ph4">&lt;code&gt;count&lt;/code&gt;</ph> are not zero.</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;count&lt;/code&gt;</ph> less than zero.</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;startIndex&lt;/code&gt;</ph> less than zero.</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;startIndex&lt;/code&gt;</ph><ph id="ph2"> + &lt;code&gt;count&lt;/code&gt;</ph> is greater than the length of <ph id="ph3">&lt;code&gt;value&lt;/code&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>Enlarging the value of this instance would exceed <ph id="ph1">&lt;xref href="System.Text.StringBuilder.MaxCapacity"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>Appends the string representation of a specified subarray of Unicode characters to this instance.</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method appends the specified range of characters in <ph id="ph1">`value`</ph> to the current instance.</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`value`</ph> is <ph id="ph2">`null`</ph> and <ph id="ph3">`startIndex`</ph> and <ph id="ph4">`count`</ph> are both zero, no changes are made.</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Text.StringBuilder.Append%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29&gt;</ph> method modifies the existing instance of this class; it does not return a new class instance.</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> object, as the following example illustrates.</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Text.StringBuilder.Append#7<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/cs/append2.cs#7)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Text.StringBuilder.Append#7<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/vb/append2.vb#7)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT">
          <source>The capacity of this instance is adjusted as needed.</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>A character array.</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>The starting position in <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">value</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>The number of characters to append.</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>A reference to this instance after the append operation has completed.</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;value&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>, and <ph id="ph3">&lt;code&gt;startIndex&lt;/code&gt;</ph> and <ph id="ph4">&lt;code&gt;charCount&lt;/code&gt;</ph> are not zero.</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;charCount&lt;/code&gt;</ph> is less than zero.</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;startIndex&lt;/code&gt;</ph> is less than zero.</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;startIndex&lt;/code&gt;</ph><ph id="ph2"> + &lt;code&gt;charCount&lt;/code&gt;</ph> is greater than the length of <ph id="ph3">&lt;code&gt;value&lt;/code&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>Enlarging the value of this instance would exceed <ph id="ph1">&lt;xref href="System.Text.StringBuilder.MaxCapacity"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>Appends an array of Unicode characters starting at a specified address to this instance.</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method appends <ph id="ph1">`valueCount`</ph> characters starting at address <ph id="ph2">`value`</ph> to the current instance.</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Text.StringBuilder.Append%28System.Char%2A%2CSystem.Int32%29&gt;</ph> method modifies the existing instance of this class; it does not return a new class instance.</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" extradata="MT">
          <source>The capacity of this instance is adjusted as needed.</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>A pointer to an array of characters.</source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>The number of characters in the array.</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>A reference to this instance after the append operation has completed.</source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;valueCount&lt;/code&gt;</ph> is less than zero.</source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>Enlarging the value of this instance would exceed <ph id="ph1">&lt;xref href="System.Text.StringBuilder.MaxCapacity"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;value&lt;/code&gt;</ph> is a null pointer.</source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>Appends a specified number of copies of the string representation of a Unicode character to this instance.</source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Text.StringBuilder.Append%28System.Char%2CSystem.Int32%29&gt;</ph> method modifies the existing instance of this class; it does not return a new class instance.</source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> object, as the following example illustrates.</source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Text.StringBuilder.Append#5<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/cs/append2.cs#5)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Text.StringBuilder.Append#5<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/vb/append2.vb#5)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" extradata="MT">
          <source>The capacity of this instance is adjusted as needed.</source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>The character to append.</source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>The number of times to append <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">value</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source>A reference to this instance after the append operation has completed.</source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;repeatCount&lt;/code&gt;</ph> is less than zero.</source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>Enlarging the value of this instance would exceed <ph id="ph1">&lt;xref href="System.Text.StringBuilder.MaxCapacity"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source>Out of memory.</source>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>Appends the string representation of a specified 64-bit unsigned integer to this instance.</source>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Text.StringBuilder.Append%28System.UInt64%29&gt;</ph> method modifies the existing instance of this class; it does not return a new class instance.</source>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> object, as the following example illustrates.</source>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Text.StringBuilder.Append#17<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/cs/append3.cs#17)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Text.StringBuilder.Append#17<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/vb/append3.vb#17)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Text.StringBuilder.Append%28System.UInt64%29&gt;</ph> method calls the <ph id="ph2">&lt;xref:System.UInt64.ToString%28System.IFormatProvider%29?displayProperty=fullName&gt;</ph> method to get the string representation of <ph id="ph3">`value`</ph> for the current culture.</source>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" extradata="MT">
          <source>To control the formatting of <ph id="ph1">`value`</ph>, call the <ph id="ph2">&lt;xref:System.Text.StringBuilder.AppendFormat%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" extradata="MT">
          <source>The capacity of this instance is adjusted as needed.</source>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source>The value to append.</source>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source>A reference to this instance after the append operation has completed.</source>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source>Enlarging the value of this instance would exceed <ph id="ph1">&lt;xref href="System.Text.StringBuilder.MaxCapacity"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source>Appends the string representation of a specified 32-bit unsigned integer to this instance.</source>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Text.StringBuilder.Append%28System.UInt32%29&gt;</ph> method modifies the existing instance of this class; it does not return a new class instance.</source>
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> object, as the following example illustrates.</source>
        </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Text.StringBuilder.Append#16<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/cs/append3.cs#16)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Text.StringBuilder.Append#16<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/vb/append3.vb#16)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Text.StringBuilder.Append%28System.UInt32%29&gt;</ph> calls the <ph id="ph2">&lt;xref:System.UInt32.ToString%2A?displayProperty=fullName&gt;</ph> method to get the string representation of <ph id="ph3">`value`</ph> for the current culture.</source>
        </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" extradata="MT">
          <source>To control the formatting of <ph id="ph1">`value`</ph>, call the <ph id="ph2">&lt;xref:System.Text.StringBuilder.AppendFormat%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" extradata="MT">
          <source>The capacity of this instance is adjusted as needed.</source>
        </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source>The value to append.</source>
        </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source>A reference to this instance after the append operation has completed.</source>
        </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source>Enlarging the value of this instance would exceed <ph id="ph1">&lt;xref href="System.Text.StringBuilder.MaxCapacity"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve">
          <source>Appends the string representation of a specified 16-bit unsigned integer to this instance.</source>
        </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Text.StringBuilder.Append%28System.UInt16%29&gt;</ph> method modifies the existing instance of this class; it does not return a new class instance.</source>
        </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> object, as the following example illustrates.</source>
        </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Text.StringBuilder.Append#15<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/cs/append3.cs#15)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Text.StringBuilder.Append#15<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/vb/append3.vb#15)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Text.StringBuilder.Append%28System.UInt16%29&gt;</ph> method calls the <ph id="ph2">&lt;xref:System.UInt16.ToString%28System.IFormatProvider%29?displayProperty=fullName&gt;</ph> method to get the string representation of <ph id="ph3">`value`</ph>.</source>
        </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" extradata="MT">
          <source>To control the formatting of <ph id="ph1">`value`</ph>, call the <ph id="ph2">&lt;xref:System.Text.StringBuilder.AppendFormat%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" extradata="MT">
          <source>The capacity of this instance is adjusted as needed.</source>
        </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve">
          <source>The value to append.</source>
        </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve">
          <source>A reference to this instance after the append operation has completed.</source>
        </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve">
          <source>Enlarging the value of this instance would exceed <ph id="ph1">&lt;xref href="System.Text.StringBuilder.MaxCapacity"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve">
          <source>Appends a copy of the specified string to this instance.</source>
        </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Text.StringBuilder.Append%28System.String%29&gt;</ph> method modifies the existing instance of this class; it does not return a new class instance.</source>
        </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> object, as the following example illustrates.</source>
        </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Text.StringBuilder.Append#2<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/cs/append2.cs#2)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Text.StringBuilder.Append#2<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/vb/append2.vb#2)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`value`</ph> is <ph id="ph2">`null`</ph>, no changes are made.</source>
        </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" extradata="MT">
          <source>The capacity of this instance is adjusted as needed.</source>
        </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve">
          <source>The string to append.</source>
        </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve">
          <source>A reference to this instance after the append operation has completed.</source>
        </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve">
          <source>Enlarging the value of this instance would exceed <ph id="ph1">&lt;xref href="System.Text.StringBuilder.MaxCapacity"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve">
          <source>Appends the string representation of a specified 8-bit signed integer to this instance.</source>
        </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Text.StringBuilder.Append%28System.SByte%29&gt;</ph> method modifies the existing instance of this class; it does not return a new class instance.</source>
        </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> object, as the following example illustrates.</source>
        </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Text.StringBuilder.Append#13<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/cs/append3.cs#13)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Text.StringBuilder.Append#13<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/vb/append3.vb#13)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Text.StringBuilder.Append%28System.SByte%29&gt;</ph> method calls the <ph id="ph2">&lt;xref:System.SByte.ToString%28System.IFormatProvider%29?displayProperty=fullName&gt;</ph> method  to get the string representation of <ph id="ph3">`value`</ph> for the current culture.</source>
        </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve" extradata="MT">
          <source>To control the formatting of <ph id="ph1">`value`</ph>, call the <ph id="ph2">&lt;xref:System.Text.StringBuilder.AppendFormat%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve" extradata="MT">
          <source>The capacity of this instance is adjusted as needed.</source>
        </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve">
          <source>The value to append.</source>
        </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve">
          <source>A reference to this instance after the append operation has completed.</source>
        </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve">
          <source>Enlarging the value of this instance would exceed <ph id="ph1">&lt;xref href="System.Text.StringBuilder.MaxCapacity"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve">
          <source>Appends the string representation of a specified single-precision floating-point number to this instance.</source>
        </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Text.StringBuilder.Append%28System.Single%29&gt;</ph> method modifies the existing instance of this class; it does not return a new class instance.</source>
        </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> object, as the following example illustrates.</source>
        </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Text.StringBuilder.Append#14<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/cs/append3.cs#14)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Text.StringBuilder.Append#14<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/vb/append3.vb#14)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Text.StringBuilder.Append%28System.Single%29&gt;</ph> method calls the <ph id="ph2">&lt;xref:System.Single.ToString%2A?displayProperty=fullName&gt;</ph> method to get the string representation of <ph id="ph3">`value`</ph> for the current culture.</source>
        </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve" extradata="MT">
          <source>To control the formatting of <ph id="ph1">`value`</ph>, call the <ph id="ph2">&lt;xref:System.Text.StringBuilder.AppendFormat%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve" extradata="MT">
          <source>The capacity of this instance is adjusted as needed.</source>
        </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve">
          <source>The value to append.</source>
        </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve">
          <source>A reference to this instance after the append operation has completed.</source>
        </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve">
          <source>Enlarging the value of this instance would exceed <ph id="ph1">&lt;xref href="System.Text.StringBuilder.MaxCapacity"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve">
          <source>Appends the string representation of a specified 64-bit signed integer to this instance.</source>
        </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Text.StringBuilder.Append%28System.Int64%29&gt;</ph> method modifies the existing instance of this class; it does not return a new class instance.</source>
        </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> object, as the following example illustrates.</source>
        </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Text.StringBuilder.Append#12<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/cs/append3.cs#12)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Text.StringBuilder.Append#12<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/vb/append3.vb#12)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Text.StringBuilder.Append%28System.Int64%29&gt;</ph> method calls the <ph id="ph2">&lt;xref:System.Int64.ToString%28System.IFormatProvider%29?displayProperty=fullName&gt;</ph> to get the string representation of <ph id="ph3">`value`</ph> for the current culture.</source>
        </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve" extradata="MT">
          <source>To control the formatting of <ph id="ph1">`value`</ph>, call the <ph id="ph2">&lt;xref:System.Text.StringBuilder.AppendFormat%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve" extradata="MT">
          <source>The capacity of this instance is adjusted as needed.</source>
        </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve">
          <source>The value to append.</source>
        </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve">
          <source>A reference to this instance after the append operation has completed.</source>
        </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve">
          <source>Enlarging the value of this instance would exceed <ph id="ph1">&lt;xref href="System.Text.StringBuilder.MaxCapacity"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve">
          <source>Appends the string representation of a specified object to this instance.</source>
        </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Text.StringBuilder.Append%28System.Object%29&gt;</ph> method modifies the existing instance of this class; it does not return a new class instance.</source>
        </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> object, as the following example illustrates.</source>
        </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve" extradata="MT">
          <source>It defines a <ph id="ph1">`Dog`</ph> class, creates a <ph id="ph2">`Dog`</ph> object, and makes three calls to the <ph id="ph3">&lt;xref:System.Text.StringBuilder.Append%2A&gt;</ph> method to create a string that contains the dog's name and breed.</source>
        </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Text.Stringbuilder.Append#18<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/cs/append4.cs#18)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Text.Stringbuilder.Append#18<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/vb/append4.vb#18)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Text.StringBuilder.Append%28System.Object%29&gt;</ph> method calls the <ph id="ph2">&lt;xref:System.Object.ToString%2A?displayProperty=fullName&gt;</ph> method to get the string representation of <ph id="ph3">`value`</ph>.</source>
        </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`value`</ph> is <ph id="ph2">`null`</ph>, no changes are made to the <ph id="ph3">&lt;xref:System.Text.StringBuilder&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve" extradata="MT">
          <source>The capacity of this instance is adjusted as needed.</source>
        </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve">
          <source>The object to append.</source>
        </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve">
          <source>A reference to this instance after the append operation has completed.</source>
        </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve">
          <source>Enlarging the value of this instance would exceed <ph id="ph1">&lt;xref href="System.Text.StringBuilder.MaxCapacity"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve">
          <source>Appends the string representation of a specified 8-bit unsigned integer to this instance.</source>
        </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Text.StringBuilder.Append%28System.Byte%29&gt;</ph> method modifies the existing instance of this class; it does not return a new class instance.</source>
        </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> object, as the following example illustrates.</source>
        </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Text.StringBuilder.Append#3<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/cs/append2.cs#3)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Text.StringBuilder.Append#3<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/vb/append2.vb#3)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Text.StringBuilder.Append%28System.Byte%29&gt;</ph> method calls the <ph id="ph2">&lt;xref:System.Byte.ToString%28System.IFormatProvider%29&gt;</ph> method to get the string representation of <ph id="ph3">`value`</ph> for the current culture.</source>
        </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve" extradata="MT">
          <source>To control the formatting of <ph id="ph1">`value`</ph>, call the <ph id="ph2">&lt;xref:System.Text.StringBuilder.AppendFormat%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve" extradata="MT">
          <source>The capacity of this instance is adjusted as needed.</source>
        </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve">
          <source>The value to append.</source>
        </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve">
          <source>A reference to this instance after the append operation has completed.</source>
        </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve">
          <source>Enlarging the value of this instance would exceed <ph id="ph1">&lt;xref href="System.Text.StringBuilder.MaxCapacity"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve">
          <source>Appends the string representation of a specified <ph id="ph1">&lt;xref href="System.Char"&gt;&lt;/xref&gt;</ph> object to this instance.</source>
        </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Text.StringBuilder.Append%28System.Char%29&gt;</ph> method modifies the existing instance of this class; it does not return a new class instance.</source>
        </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> object, as the following example illustrates.</source>
        </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Text.StringBuilder.Append#4<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/cs/append2.cs#4)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Text.StringBuilder.Append#4<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/vb/append2.vb#4)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve" extradata="MT">
          <source>The capacity of this instance is adjusted as needed.</source>
        </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve">
          <source>The UTF-16-encoded code unit to append.</source>
        </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve">
          <source>A reference to this instance after the append operation has completed.</source>
        </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve">
          <source>Enlarging the value of this instance would exceed <ph id="ph1">&lt;xref href="System.Text.StringBuilder.MaxCapacity"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve">
          <source>Appends the string representation of the Unicode characters in a specified array to this instance.</source>
        </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method appends all the characters in the specified array to the current instance in the same order as they appear in <ph id="ph1">`value`</ph>.</source>
        </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`value`</ph> is <ph id="ph2">`null`</ph>, no changes are made.</source>
        </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Text.StringBuilder.Append%28System.Char%5B%5D%29&gt;</ph> method modifies the existing instance of this class; it does not return a new class instance.</source>
        </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> object, as the following example illustrates.</source>
        </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Text.StringBuilder.Append#6<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/cs/append2.cs#6)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Text.StringBuilder.Append#6<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/vb/append2.vb#6)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve" extradata="MT">
          <source>The capacity of this instance is adjusted as needed.</source>
        </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve">
          <source>The array of characters to append.</source>
        </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve">
          <source>A reference to this instance after the append operation has completed.</source>
        </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve">
          <source>Enlarging the value of this instance would exceed <ph id="ph1">&lt;xref href="System.Text.StringBuilder.MaxCapacity"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve">
          <source>Appends the string representation of a specified Boolean value to this instance.</source>
        </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Text.StringBuilder.Append%28System.Boolean%29&gt;</ph> method modifies the existing instance of this class; it does not return a new class instance.</source>
        </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> object, as the following example illustrates.</source>
        </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Text.StringBuilder.Append#2<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/cs/append2.cs#2)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Text.StringBuilder.Append#2<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/vb/append2.vb#2)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Text.StringBuilder.Append%28System.Boolean%29&gt;</ph> method calls the <ph id="ph2">&lt;xref:System.Boolean.ToString?displayProperty=fullName&gt;</ph> method to get the string representation of <ph id="ph3">`value`</ph>.</source>
        </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve" extradata="MT">
          <source>The capacity of this instance is adjusted as needed.</source>
        </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve">
          <source>The Boolean value to append.</source>
        </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve">
          <source>A reference to this instance after the append operation has completed.</source>
        </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve">
          <source>Enlarging the value of this instance would exceed <ph id="ph1">&lt;xref href="System.Text.StringBuilder.MaxCapacity"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve">
          <source>Appends the string representation of a specified double-precision floating-point number to this instance.</source>
        </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Text.StringBuilder.Append%28System.Double%29&gt;</ph> method modifies the existing instance of this class; it does not return a new class instance.</source>
        </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> object, as the following example illustrates.</source>
        </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Text.StringBuilder.Append#9<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/cs/append2.cs#9)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Text.StringBuilder.Append#9<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/vb/append2.vb#9)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Text.StringBuilder.Append%28System.Double%29&gt;</ph> method calls the <ph id="ph2">&lt;xref:System.Double.ToString%28System.IFormatProvider%29?displayProperty=fullName&gt;</ph> method to get the string representation of <ph id="ph3">`value`</ph> for the current culture.</source>
        </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve" extradata="MT">
          <source>To control the formatting of <ph id="ph1">`value`</ph>, call the <ph id="ph2">&lt;xref:System.Text.StringBuilder.AppendFormat%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve" extradata="MT">
          <source>The capacity of this instance is adjusted as needed.</source>
        </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve">
          <source>The value to append.</source>
        </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve">
          <source>A reference to this instance after the append operation has completed.</source>
        </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve">
          <source>Enlarging the value of this instance would exceed <ph id="ph1">&lt;xref href="System.Text.StringBuilder.MaxCapacity"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve">
          <source>Appends the string representation of a specified 16-bit signed integer to this instance.</source>
        </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Text.StringBuilder.Append%28System.Int16%29&gt;</ph> method modifies the existing instance of this class; it does not return a new class instance.</source>
        </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> object, as the following example illustrates.</source>
        </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Text.StringBuilder.Append#10<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/cs/append3.cs#10)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Text.StringBuilder.Append#10<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/vb/append3.vb#10)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Text.StringBuilder.Append%28System.Int16%29&gt;</ph> method calls the <ph id="ph2">&lt;xref:System.Int16.ToString%28System.IFormatProvider%29?displayProperty=fullName&gt;</ph> method to get the string representation of <ph id="ph3">`value`</ph> for the current culture.</source>
        </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve" extradata="MT">
          <source>To control the formatting of <ph id="ph1">`value`</ph>, call the <ph id="ph2">&lt;xref:System.Text.StringBuilder.AppendFormat%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve" extradata="MT">
          <source>The capacity of this instance is adjusted as needed.</source>
        </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve">
          <source>The value to append.</source>
        </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve">
          <source>A reference to this instance after the append operation has completed.</source>
        </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve">
          <source>Enlarging the value of this instance would exceed <ph id="ph1">&lt;xref href="System.Text.StringBuilder.MaxCapacity"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve">
          <source>Appends the string representation of a specified 32-bit signed integer to this instance.</source>
        </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Text.StringBuilder.Append%28System.Int32%29&gt;</ph> method modifies the existing instance of this class; it does not return a new class instance.</source>
        </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> object, as the following example illustrates.</source>
        </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Text.StringBuilder.Append#11<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/cs/append3.cs#11)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Text.StringBuilder.Append#11<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/vb/append3.vb#11)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Text.StringBuilder.Append%28System.Int32%29&gt;</ph> method calls the <ph id="ph2">&lt;xref:System.Int32.ToString%28System.IFormatProvider%29?displayProperty=fullName&gt;</ph> method to get the string representation of <ph id="ph3">`value`</ph> for the current culture.</source>
        </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve" extradata="MT">
          <source>To control the formatting of <ph id="ph1">`value`</ph>, call the <ph id="ph2">&lt;xref:System.Text.StringBuilder.AppendFormat%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve" extradata="MT">
          <source>The capacity of this instance is adjusted as needed.</source>
        </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve">
          <source>The value to append.</source>
        </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve">
          <source>A reference to this instance after the append operation has completed.</source>
        </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve">
          <source>Enlarging the value of this instance would exceed <ph id="ph1">&lt;xref href="System.Text.StringBuilder.MaxCapacity"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve">
          <source>Appends the string representation of a specified decimal number to this instance.</source>
        </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Text.StringBuilder.Append%28System.Decimal%29&gt;</ph> method modifies the existing instance of this class; it does not return a new class instance.</source>
        </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> object, as the following example illustrates.</source>
        </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Text.StringBuilder.Append#8<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/cs/append2.cs#8)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Text.StringBuilder.Append#8<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/vb/append2.vb#8)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Text.StringBuilder.Append%28System.Decimal%29&gt;</ph> method calls the <ph id="ph2">&lt;xref:System.Decimal.ToString%28System.IFormatProvider%29?displayProperty=fullName&gt;</ph> method to get the string representation of <ph id="ph3">`value`</ph> for the current culture.</source>
        </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve" extradata="MT">
          <source>To control the formatting of <ph id="ph1">`value`</ph>, call the <ph id="ph2">&lt;xref:System.Text.StringBuilder.AppendFormat%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve" extradata="MT">
          <source>The capacity of this instance is adjusted as needed.</source>
        </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve">
          <source>The value to append.</source>
        </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve">
          <source>A reference to this instance after the append operation has completed.</source>
        </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve">
          <source>Enlarging the value of this instance would exceed <ph id="ph1">&lt;xref href="System.Text.StringBuilder.MaxCapacity"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve">
          <source>Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance.</source>
        </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve">
          <source>Each format item is replaced by the string representation of either of three arguments using a specified format provider.</source>
        </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method uses the <bpt id="p1">[</bpt>composite formatting feature<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept> of the .NET Framework to convert the value of an object to its text representation and embed that representation in the current <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`format`</ph> parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to objects in the parameter list of this method.</source>
        </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve" extradata="MT">
          <source>The formatting process replaces each format item with the string representation of the corresponding object.</source>
        </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve" extradata="MT">
          <source>The syntax of a format item is as follows:</source>
        </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve" extradata="MT">
          <source>{<bpt id="p1">*</bpt>index<ept id="p1">*</ept>[,<bpt id="p2">*</bpt>length<ept id="p2">*</ept>][:<bpt id="p3">*</bpt>formatString<ept id="p3">*</ept>]}</source>
        </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve" extradata="MT">
          <source>Elements in square brackets are optional.</source>
        </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following table describes each element.</source>
        </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve" extradata="MT">
          <source>Element</source>
        </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve" extradata="MT">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">*</bpt>index<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve" extradata="MT">
          <source>The zero-based position in the parameter list of the object to be formatted.</source>
        </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the object specified by <bpt id="p1">*</bpt>index<ept id="p1">*</ept> is <ph id="ph1">`null`</ph>, the format item is replaced by <ph id="ph2">&lt;xref:System.String.Empty?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve" extradata="MT">
          <source>If there is no parameter in the <bpt id="p1">*</bpt>index<ept id="p1">*</ept> position, a <ph id="ph1">&lt;xref:System.FormatException&gt;</ph> is thrown.</source>
        </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve" extradata="MT">
          <source>,<bpt id="p1">*</bpt>length<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve" extradata="MT">
          <source>The minimum number of characters in the string representation of the parameter.</source>
        </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve" extradata="MT">
          <source>If positive, the parameter is right-aligned; if negative, it is left-aligned.</source>
        </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve" extradata="MT">
          <source>:<bpt id="p1">*</bpt>formatString<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve" extradata="MT">
          <source>A standard or custom format string that is supported by the parameter.</source>
        </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve" extradata="MT">
          <source>For the standard and custom format strings used with date and time values, see <bpt id="p1">[</bpt>Standard Date and Time Format Strings<ept id="p1">](~/docs/standard/base-types/standard-date-and-time-format-strings.md)</ept> and <bpt id="p2">[</bpt>Custom Date and Time Format Strings<ept id="p2">](~/docs/standard/base-types/custom-date-and-time-format-strings.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve" extradata="MT">
          <source>For the standard and custom format strings used with numeric values, see <bpt id="p1">[</bpt>Standard Numeric Format Strings<ept id="p1">](~/docs/standard/base-types/standard-numeric-format-strings.md)</ept> and <bpt id="p2">[</bpt>Custom Numeric Format Strings<ept id="p2">](~/docs/standard/base-types/custom-numeric-format-strings.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve" extradata="MT">
          <source>For the standard format strings used with enumerations, see <bpt id="p1">[</bpt>Enumeration Format Strings<ept id="p1">](~/docs/standard/base-types/enumeration-format-strings.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`provider`</ph> parameter specifies an <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> implementation that can provide formatting information for <ph id="ph3">`arg0`</ph> and <ph id="ph4">`arg1`</ph>.</source>
        </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`provider`</ph> can be any of the following:</source>
        </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.Globalization.CultureInfo&gt;</ph> object that provides culture-specific formatting information.</source>
        </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object that provides culture-specific formatting information for <ph id="ph2">`arg0`</ph> or <ph id="ph3">`arg1`</ph> if they are numeric values.</source>
        </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.Globalization.DateTimeFormatInfo&gt;</ph> object that provides culture-specific formatting information for <ph id="ph2">`arg0`</ph>, <ph id="ph3">`arg1`</ph>, or <ph id="ph4">`arg2`</ph> if they are date and time values.</source>
        </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve" extradata="MT">
          <source>A custom <ph id="ph1">&lt;xref:System.IFormatProvider&gt;</ph> implementation that provides formatting information for <ph id="ph2">`arg0`</ph>,  <ph id="ph3">`arg1`</ph>, and <ph id="ph4">`arg2`</ph>.</source>
        </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, such an implementation also implements the <ph id="ph1">&lt;xref:System.ICustomFormatter&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">`provider`</ph> parameter is <ph id="ph2">`null`</ph>, format provider information is obtained from the current culture.</source>
        </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`arg0`</ph>, <ph id="ph2">`arg1`</ph>, and <ph id="ph3">`arg2`</ph> represent the objects to be formatted.</source>
        </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each format item in <ph id="ph1">`format`</ph> is replaced with the string representation of the object that has the corresponding index.</source>
        </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the format item includes <ph id="ph1">`formatString`</ph> and the corresponding argument implements the <ph id="ph2">&lt;xref:System.IFormattable&gt;</ph> interface, then the argument's <ph id="ph3">`ToString(formatString, provider)`</ph> method defines the formatting.</source>
        </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve" extradata="MT">
          <source>Otherwise, the argument's <ph id="ph1">`ToString()`</ph> method defines the formatting.</source>
        </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve">
          <source>An object that supplies culture-specific formatting information.</source>
        </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve">
          <source>A composite format string.</source>
        </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve">
          <source>The first object to format.</source>
        </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve">
          <source>The second object to format.</source>
        </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve">
          <source>The third object to format.</source>
        </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve">
          <source>A reference to this instance after the append operation has completed.</source>
        </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve">
          <source>After the append operation, this instance contains any data that existed before the operation, suffixed by a copy of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">format</ph><ept id="p1">&lt;/code&gt;</ept> where any format specification is replaced by the string representation of the corresponding object argument.</source>
        </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;format&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;format&lt;/code&gt;</ph> is invalid.</source>
        </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve">
          <source>The index of a format item is less than 0 (zero), or greater than or equal to 3 (three).</source>
        </trans-unit>
        <trans-unit id="615" translate="yes" xml:space="preserve">
          <source>The length of the expanded string would exceed <ph id="ph1">&lt;xref href="System.Text.StringBuilder.MaxCapacity"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="616" translate="yes" xml:space="preserve">
          <source>Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance.</source>
        </trans-unit>
        <trans-unit id="617" translate="yes" xml:space="preserve">
          <source>Each format item is replaced by the string representation of a single argument.</source>
        </trans-unit>
        <trans-unit id="618" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method uses the <bpt id="p1">[</bpt>composite formatting feature<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept> of the .NET Framework to convert the value of an object to its text representation and embed that representation in the current <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="619" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`format`</ph> parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items.</source>
        </trans-unit>
        <trans-unit id="620" translate="yes" xml:space="preserve" extradata="MT">
          <source>The index of the format items must be 0, to correspond to <ph id="ph1">`arg0`</ph>, the single object in the parameter list of this method.</source>
        </trans-unit>
        <trans-unit id="621" translate="yes" xml:space="preserve" extradata="MT">
          <source>The formatting process replaces each format item with the string representation of <ph id="ph1">`arg0`</ph>.</source>
        </trans-unit>
        <trans-unit id="622" translate="yes" xml:space="preserve" extradata="MT">
          <source>The syntax of a format item is as follows:</source>
        </trans-unit>
        <trans-unit id="623" translate="yes" xml:space="preserve" extradata="MT">
          <source>{<bpt id="p1">*</bpt>index<ept id="p1">*</ept>[,<bpt id="p2">*</bpt>length<ept id="p2">*</ept>][:<bpt id="p3">*</bpt>formatString<ept id="p3">*</ept>]}</source>
        </trans-unit>
        <trans-unit id="624" translate="yes" xml:space="preserve" extradata="MT">
          <source>Elements in square brackets are optional.</source>
        </trans-unit>
        <trans-unit id="625" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following table describes each element.</source>
        </trans-unit>
        <trans-unit id="626" translate="yes" xml:space="preserve" extradata="MT">
          <source>Element</source>
        </trans-unit>
        <trans-unit id="627" translate="yes" xml:space="preserve" extradata="MT">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="628" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">*</bpt>index<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="629" translate="yes" xml:space="preserve" extradata="MT">
          <source>The zero-based position in the parameter list of the object to be formatted.</source>
        </trans-unit>
        <trans-unit id="630" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the object specified by <bpt id="p1">*</bpt>index<ept id="p1">*</ept> is <ph id="ph1">`null`</ph>, the format item is replaced by <ph id="ph2">&lt;xref:System.String.Empty?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="631" translate="yes" xml:space="preserve" extradata="MT">
          <source>If there is no parameter in the <bpt id="p1">*</bpt>index<ept id="p1">*</ept> position, a <ph id="ph1">&lt;xref:System.FormatException&gt;</ph> is thrown.</source>
        </trans-unit>
        <trans-unit id="632" translate="yes" xml:space="preserve" extradata="MT">
          <source>,<bpt id="p1">*</bpt>length<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="633" translate="yes" xml:space="preserve" extradata="MT">
          <source>The minimum number of characters in the string representation of the parameter.</source>
        </trans-unit>
        <trans-unit id="634" translate="yes" xml:space="preserve" extradata="MT">
          <source>If positive, the parameter is right-aligned; if negative, it is left-aligned.</source>
        </trans-unit>
        <trans-unit id="635" translate="yes" xml:space="preserve" extradata="MT">
          <source>:<bpt id="p1">*</bpt>formatString<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="636" translate="yes" xml:space="preserve" extradata="MT">
          <source>A standard or custom format string that is supported by the parameter.</source>
        </trans-unit>
        <trans-unit id="637" translate="yes" xml:space="preserve" extradata="MT">
          <source>For the standard and custom format strings used with date and time values, see <bpt id="p1">[</bpt>Standard Date and Time Format Strings<ept id="p1">](~/docs/standard/base-types/standard-date-and-time-format-strings.md)</ept> and <bpt id="p2">[</bpt>Custom Date and Time Format Strings<ept id="p2">](~/docs/standard/base-types/custom-date-and-time-format-strings.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="638" translate="yes" xml:space="preserve" extradata="MT">
          <source>For the standard and custom format strings used with numeric values, see <bpt id="p1">[</bpt>Standard Numeric Format Strings<ept id="p1">](~/docs/standard/base-types/standard-numeric-format-strings.md)</ept> and <bpt id="p2">[</bpt>Custom Numeric Format Strings<ept id="p2">](~/docs/standard/base-types/custom-numeric-format-strings.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="639" translate="yes" xml:space="preserve" extradata="MT">
          <source>For the standard format strings used with enumerations, see <bpt id="p1">[</bpt>Enumeration Format Strings<ept id="p1">](~/docs/standard/base-types/enumeration-format-strings.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="640" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`arg0`</ph> represents the object to be formatted.</source>
        </trans-unit>
        <trans-unit id="641" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each format item in <ph id="ph1">`format`</ph> is replaced with the string representation of <ph id="ph2">`arg0`</ph>.</source>
        </trans-unit>
        <trans-unit id="642" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the format item includes <ph id="ph1">`formatString`</ph> and <ph id="ph2">`arg0`</ph> implements the <ph id="ph3">&lt;xref:System.IFormattable&gt;</ph> interface, then <ph id="ph4">`arg0.ToString(formatString, null)`</ph> defines the formatting.</source>
        </trans-unit>
        <trans-unit id="643" translate="yes" xml:space="preserve" extradata="MT">
          <source>Otherwise, <ph id="ph1">`arg0.ToString()`</ph> defines the formatting.</source>
        </trans-unit>
        <trans-unit id="644" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the string assigned to <ph id="ph1">`format`</ph> is "Thank you for your donation of {0:####} cans of food to our charitable organization."</source>
        </trans-unit>
        <trans-unit id="645" translate="yes" xml:space="preserve" extradata="MT">
          <source>and <ph id="ph1">`arg0`</ph> is an integer with the value 10, the return value will be "Thank you for your donation of 10 cans of food to our charitable organization."</source>
        </trans-unit>
        <trans-unit id="646" translate="yes" xml:space="preserve">
          <source>A composite format string.</source>
        </trans-unit>
        <trans-unit id="647" translate="yes" xml:space="preserve">
          <source>An object to format.</source>
        </trans-unit>
        <trans-unit id="648" translate="yes" xml:space="preserve">
          <source>A reference to this instance with <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">format</ph><ept id="p1">&lt;/code&gt;</ept> appended.</source>
        </trans-unit>
        <trans-unit id="649" translate="yes" xml:space="preserve">
          <source>Each format item in <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">format</ph><ept id="p1">&lt;/code&gt;</ept> is replaced by the string representation of <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">arg0</ph><ept id="p2">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="650" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;format&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="651" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;format&lt;/code&gt;</ph> is invalid.</source>
        </trans-unit>
        <trans-unit id="652" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="653" translate="yes" xml:space="preserve">
          <source>The index of a format item is less than 0 (zero), or greater than or equal to 1.</source>
        </trans-unit>
        <trans-unit id="654" translate="yes" xml:space="preserve">
          <source>The length of the expanded string would exceed <ph id="ph1">&lt;xref href="System.Text.StringBuilder.MaxCapacity"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="655" translate="yes" xml:space="preserve">
          <source>Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance.</source>
        </trans-unit>
        <trans-unit id="656" translate="yes" xml:space="preserve">
          <source>Each format item is replaced by the string representation of a corresponding argument in a parameter array.</source>
        </trans-unit>
        <trans-unit id="657" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method uses the <bpt id="p1">[</bpt>composite formatting feature<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept> of the .NET Framework to convert the value of an object to its text representation and embed that representation in the current <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="658" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`format`</ph> parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to objects in the parameter list of this method.</source>
        </trans-unit>
        <trans-unit id="659" translate="yes" xml:space="preserve" extradata="MT">
          <source>The formatting process replaces each format item with the string representation of the corresponding object.</source>
        </trans-unit>
        <trans-unit id="660" translate="yes" xml:space="preserve" extradata="MT">
          <source>The syntax of a format item is as follows:</source>
        </trans-unit>
        <trans-unit id="661" translate="yes" xml:space="preserve" extradata="MT">
          <source>{<bpt id="p1">*</bpt>index<ept id="p1">*</ept>[,<bpt id="p2">*</bpt>length<ept id="p2">*</ept>][:<bpt id="p3">*</bpt>formatString<ept id="p3">*</ept>]}</source>
        </trans-unit>
        <trans-unit id="662" translate="yes" xml:space="preserve" extradata="MT">
          <source>Elements in square brackets are optional.</source>
        </trans-unit>
        <trans-unit id="663" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following table describes each element.</source>
        </trans-unit>
        <trans-unit id="664" translate="yes" xml:space="preserve" extradata="MT">
          <source>Element</source>
        </trans-unit>
        <trans-unit id="665" translate="yes" xml:space="preserve" extradata="MT">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="666" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">*</bpt>index<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="667" translate="yes" xml:space="preserve" extradata="MT">
          <source>The zero-based position in the parameter list of the object to be formatted.</source>
        </trans-unit>
        <trans-unit id="668" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the object specified by <bpt id="p1">*</bpt>index<ept id="p1">*</ept> is <ph id="ph1">`null`</ph>, the format item is replaced by <ph id="ph2">&lt;xref:System.String.Empty?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="669" translate="yes" xml:space="preserve" extradata="MT">
          <source>If there is no parameter in the <bpt id="p1">*</bpt>index<ept id="p1">*</ept> position, a <ph id="ph1">&lt;xref:System.FormatException&gt;</ph> is thrown.</source>
        </trans-unit>
        <trans-unit id="670" translate="yes" xml:space="preserve" extradata="MT">
          <source>,<bpt id="p1">*</bpt>length<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="671" translate="yes" xml:space="preserve" extradata="MT">
          <source>The minimum number of characters in the string representation of the parameter.</source>
        </trans-unit>
        <trans-unit id="672" translate="yes" xml:space="preserve" extradata="MT">
          <source>If positive, the parameter is right-aligned; if negative, it is left-aligned.</source>
        </trans-unit>
        <trans-unit id="673" translate="yes" xml:space="preserve" extradata="MT">
          <source>:<bpt id="p1">*</bpt>formatString<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="674" translate="yes" xml:space="preserve" extradata="MT">
          <source>A standard or custom format string that is supported by the parameter.</source>
        </trans-unit>
        <trans-unit id="675" translate="yes" xml:space="preserve" extradata="MT">
          <source>For the standard and custom format strings used with date and time values, see <bpt id="p1">[</bpt>Standard Date and Time Format Strings<ept id="p1">](~/docs/standard/base-types/standard-date-and-time-format-strings.md)</ept> and <bpt id="p2">[</bpt>Custom Date and Time Format Strings<ept id="p2">](~/docs/standard/base-types/custom-date-and-time-format-strings.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="676" translate="yes" xml:space="preserve" extradata="MT">
          <source>For the standard and custom format strings used with numeric values, see <bpt id="p1">[</bpt>Standard Numeric Format Strings<ept id="p1">](~/docs/standard/base-types/standard-numeric-format-strings.md)</ept> and <bpt id="p2">[</bpt>Custom Numeric Format Strings<ept id="p2">](~/docs/standard/base-types/custom-numeric-format-strings.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="677" translate="yes" xml:space="preserve" extradata="MT">
          <source>For the standard format strings used with enumerations, see <bpt id="p1">[</bpt>Enumeration Format Strings<ept id="p1">](~/docs/standard/base-types/enumeration-format-strings.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="678" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`args`</ph> represents the objects to be formatted.</source>
        </trans-unit>
        <trans-unit id="679" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each format item in <ph id="ph1">`format`</ph> is replaced with the string representation of the corresponding object in <ph id="ph2">`args`</ph>.</source>
        </trans-unit>
        <trans-unit id="680" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the format item includes <ph id="ph1">`formatString`</ph> and the corresponding object in <ph id="ph2">`args`</ph> implements the <ph id="ph3">&lt;xref:System.IFormattable&gt;</ph> interface, then <ph id="ph4">`args[index].ToString(formatString, provider)`</ph> defines the formatting.</source>
        </trans-unit>
        <trans-unit id="681" translate="yes" xml:space="preserve" extradata="MT">
          <source>Otherwise, <ph id="ph1">`args[index].ToString()`</ph> defines the formatting.</source>
        </trans-unit>
        <trans-unit id="682" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the string assigned to <ph id="ph1">`format`</ph> is "Thank you for your donation of {0:####} cans of food to our charitable organization."</source>
        </trans-unit>
        <trans-unit id="683" translate="yes" xml:space="preserve" extradata="MT">
          <source>and <ph id="ph1">`arg0`</ph> is an integer with the value 10, the return value will be "Thank you for your donation of 10 cans of food to our charitable organization."</source>
        </trans-unit>
        <trans-unit id="684" translate="yes" xml:space="preserve">
          <source>A composite format string.</source>
        </trans-unit>
        <trans-unit id="685" translate="yes" xml:space="preserve">
          <source>An array of objects to format.</source>
        </trans-unit>
        <trans-unit id="686" translate="yes" xml:space="preserve">
          <source>A reference to this instance with <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">format</ph><ept id="p1">&lt;/code&gt;</ept> appended.</source>
        </trans-unit>
        <trans-unit id="687" translate="yes" xml:space="preserve">
          <source>Each format item in <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">format</ph><ept id="p1">&lt;/code&gt;</ept> is replaced by the string representation of the corresponding object argument.</source>
        </trans-unit>
        <trans-unit id="688" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;format&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;args&lt;/code&gt;</ph> is <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="689" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;format&lt;/code&gt;</ph> is invalid.</source>
        </trans-unit>
        <trans-unit id="690" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="691" translate="yes" xml:space="preserve">
          <source>The index of a format item is less than 0 (zero), or greater than or equal to the length of the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">args</ph><ept id="p1">&lt;/code&gt;</ept> array.</source>
        </trans-unit>
        <trans-unit id="692" translate="yes" xml:space="preserve">
          <source>The length of the expanded string would exceed <ph id="ph1">&lt;xref href="System.Text.StringBuilder.MaxCapacity"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="693" translate="yes" xml:space="preserve">
          <source>Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance.</source>
        </trans-unit>
        <trans-unit id="694" translate="yes" xml:space="preserve">
          <source>Each format item is replaced by the string representation of a single argument using a specified format provider.</source>
        </trans-unit>
        <trans-unit id="695" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method uses the  <bpt id="p1">[</bpt>composite formatting feature<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept> of the .NET Framework to convert the value of <ph id="ph1">`arg0`</ph> to its text representation and embed that representation in the current <ph id="ph2">&lt;xref:System.Text.StringBuilder&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="696" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`format`</ph> parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items.</source>
        </trans-unit>
        <trans-unit id="697" translate="yes" xml:space="preserve" extradata="MT">
          <source>The index of each format item must be zero (0) since this method includes an argument list with a single argument.</source>
        </trans-unit>
        <trans-unit id="698" translate="yes" xml:space="preserve" extradata="MT">
          <source>The formatting process replaces each format item with the string representation of <ph id="ph1">`arg0`</ph>.</source>
        </trans-unit>
        <trans-unit id="699" translate="yes" xml:space="preserve" extradata="MT">
          <source>The syntax of a format item is as follows:</source>
        </trans-unit>
        <trans-unit id="700" translate="yes" xml:space="preserve" extradata="MT">
          <source>{<bpt id="p1">*</bpt>index<ept id="p1">*</ept>[,<bpt id="p2">*</bpt>length<ept id="p2">*</ept>][:<bpt id="p3">*</bpt>formatString<ept id="p3">*</ept>]}</source>
        </trans-unit>
        <trans-unit id="701" translate="yes" xml:space="preserve" extradata="MT">
          <source>Elements in square brackets are optional.</source>
        </trans-unit>
        <trans-unit id="702" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following table describes each element.</source>
        </trans-unit>
        <trans-unit id="703" translate="yes" xml:space="preserve" extradata="MT">
          <source>Element</source>
        </trans-unit>
        <trans-unit id="704" translate="yes" xml:space="preserve" extradata="MT">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="705" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">*</bpt>index<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="706" translate="yes" xml:space="preserve" extradata="MT">
          <source>The zero-based position in the parameter list of the object to be formatted.</source>
        </trans-unit>
        <trans-unit id="707" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the object specified by <bpt id="p1">*</bpt>index<ept id="p1">*</ept> is <ph id="ph1">`null`</ph>, the format item is replaced by <ph id="ph2">&lt;xref:System.String.Empty?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="708" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case, since the <ph id="ph1">&lt;xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%29&gt;</ph> method has a single argument in the argument list, the value of <bpt id="p1">*</bpt>index<ept id="p1">*</ept> must always be 0.</source>
        </trans-unit>
        <trans-unit id="709" translate="yes" xml:space="preserve" extradata="MT">
          <source>If it is not, a <ph id="ph1">&lt;xref:System.FormatException&gt;</ph> is thrown.</source>
        </trans-unit>
        <trans-unit id="710" translate="yes" xml:space="preserve" extradata="MT">
          <source>,<bpt id="p1">*</bpt>length<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="711" translate="yes" xml:space="preserve" extradata="MT">
          <source>The minimum number of characters in the string representation of the parameter.</source>
        </trans-unit>
        <trans-unit id="712" translate="yes" xml:space="preserve" extradata="MT">
          <source>If positive, the parameter is right-aligned; if negative, it is left-aligned.</source>
        </trans-unit>
        <trans-unit id="713" translate="yes" xml:space="preserve" extradata="MT">
          <source>:<bpt id="p1">*</bpt>formatString<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="714" translate="yes" xml:space="preserve" extradata="MT">
          <source>A standard or custom format string that is supported by the parameter.</source>
        </trans-unit>
        <trans-unit id="715" translate="yes" xml:space="preserve" extradata="MT">
          <source>For the standard and custom format strings used with date and time values, see <bpt id="p1">[</bpt>Standard Date and Time Format Strings<ept id="p1">](~/docs/standard/base-types/standard-date-and-time-format-strings.md)</ept> and <bpt id="p2">[</bpt>Custom Date and Time Format Strings<ept id="p2">](~/docs/standard/base-types/custom-date-and-time-format-strings.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="716" translate="yes" xml:space="preserve" extradata="MT">
          <source>For the standard and custom format strings used with numeric values, see <bpt id="p1">[</bpt>Standard Numeric Format Strings<ept id="p1">](~/docs/standard/base-types/standard-numeric-format-strings.md)</ept> and <bpt id="p2">[</bpt>Custom Numeric Format Strings<ept id="p2">](~/docs/standard/base-types/custom-numeric-format-strings.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="717" translate="yes" xml:space="preserve" extradata="MT">
          <source>For the standard format strings used with enumerations, see <bpt id="p1">[</bpt>Enumeration Format Strings<ept id="p1">](~/docs/standard/base-types/enumeration-format-strings.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="718" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`provider`</ph> parameter specifies an <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> implementation that can provide formatting information for the objects in <ph id="ph3">`args`</ph>.</source>
        </trans-unit>
        <trans-unit id="719" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`provider`</ph> can be any of the following:</source>
        </trans-unit>
        <trans-unit id="720" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.Globalization.CultureInfo&gt;</ph> object that provides culture-specific formatting information.</source>
        </trans-unit>
        <trans-unit id="721" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object that provides culture-specific formatting information for <ph id="ph2">`arg0`</ph> if it is a numeric value.</source>
        </trans-unit>
        <trans-unit id="722" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.Globalization.DateTimeFormatInfo&gt;</ph> object that provides culture-specific formatting information for <ph id="ph2">`arg0`</ph> if it is a date and time value.</source>
        </trans-unit>
        <trans-unit id="723" translate="yes" xml:space="preserve" extradata="MT">
          <source>A custom <ph id="ph1">&lt;xref:System.IFormatProvider&gt;</ph> implementation that provides formatting information for <ph id="ph2">`arg0`</ph>.</source>
        </trans-unit>
        <trans-unit id="724" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, such an implementation also implements the <ph id="ph1">&lt;xref:System.ICustomFormatter&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="725" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">`provider`</ph> parameter is <ph id="ph2">`null`</ph>, formatting information is obtained from the current culture.</source>
        </trans-unit>
        <trans-unit id="726" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`arg0`</ph> represents the object to be formatted.</source>
        </trans-unit>
        <trans-unit id="727" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each format item in <ph id="ph1">`format`</ph> is replaced with the string representation of <ph id="ph2">`arg0`</ph>.</source>
        </trans-unit>
        <trans-unit id="728" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the format item includes <ph id="ph1">`formatString`</ph> and <ph id="ph2">`arg0`</ph> implements the <ph id="ph3">&lt;xref:System.IFormattable&gt;</ph> interface, then <ph id="ph4">`arg0.ToString(formatString, provider)`</ph> defines the formatting.</source>
        </trans-unit>
        <trans-unit id="729" translate="yes" xml:space="preserve" extradata="MT">
          <source>Otherwise, <ph id="ph1">`arg0.ToString()`</ph> defines the formatting.</source>
        </trans-unit>
        <trans-unit id="730" translate="yes" xml:space="preserve">
          <source>An object that supplies culture-specific formatting information.</source>
        </trans-unit>
        <trans-unit id="731" translate="yes" xml:space="preserve">
          <source>A composite format string.</source>
        </trans-unit>
        <trans-unit id="732" translate="yes" xml:space="preserve">
          <source>The object to format.</source>
        </trans-unit>
        <trans-unit id="733" translate="yes" xml:space="preserve">
          <source>A reference to this instance after the append operation has completed.</source>
        </trans-unit>
        <trans-unit id="734" translate="yes" xml:space="preserve">
          <source>After the append operation, this instance contains any data that existed before the operation, suffixed by a copy of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">format</ph><ept id="p1">&lt;/code&gt;</ept> in which any format specification is replaced by the string representation of <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">arg0</ph><ept id="p2">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="735" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;format&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="736" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;format&lt;/code&gt;</ph> is invalid.</source>
        </trans-unit>
        <trans-unit id="737" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="738" translate="yes" xml:space="preserve">
          <source>The index of a format item is less than 0 (zero), or greater than or equal to one (1).</source>
        </trans-unit>
        <trans-unit id="739" translate="yes" xml:space="preserve">
          <source>The length of the expanded string would exceed <ph id="ph1">&lt;xref href="System.Text.StringBuilder.MaxCapacity"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="740" translate="yes" xml:space="preserve">
          <source>Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance.</source>
        </trans-unit>
        <trans-unit id="741" translate="yes" xml:space="preserve">
          <source>Each format item is replaced by the string representation of a corresponding argument in a parameter array using a specified format provider.</source>
        </trans-unit>
        <trans-unit id="742" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method uses the <bpt id="p1">[</bpt>composite formatting feature<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept> of the .NET Framework to convert the value of an object to its text representation and embed that representation in the current <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="743" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`format`</ph> parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to objects in the parameter list of this method.</source>
        </trans-unit>
        <trans-unit id="744" translate="yes" xml:space="preserve" extradata="MT">
          <source>The formatting process replaces each format item with the string representation of the corresponding object.</source>
        </trans-unit>
        <trans-unit id="745" translate="yes" xml:space="preserve" extradata="MT">
          <source>The syntax of a format item is as follows:</source>
        </trans-unit>
        <trans-unit id="746" translate="yes" xml:space="preserve" extradata="MT">
          <source>{<bpt id="p1">*</bpt>index<ept id="p1">*</ept>[,<bpt id="p2">*</bpt>length<ept id="p2">*</ept>][:<bpt id="p3">*</bpt>formatString<ept id="p3">*</ept>]}</source>
        </trans-unit>
        <trans-unit id="747" translate="yes" xml:space="preserve" extradata="MT">
          <source>Elements in square brackets are optional.</source>
        </trans-unit>
        <trans-unit id="748" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following table describes each element.</source>
        </trans-unit>
        <trans-unit id="749" translate="yes" xml:space="preserve" extradata="MT">
          <source>Element</source>
        </trans-unit>
        <trans-unit id="750" translate="yes" xml:space="preserve" extradata="MT">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="751" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">*</bpt>index<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="752" translate="yes" xml:space="preserve" extradata="MT">
          <source>The zero-based position in the parameter list of the object to be formatted.</source>
        </trans-unit>
        <trans-unit id="753" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the object specified by <bpt id="p1">*</bpt>index<ept id="p1">*</ept> is <ph id="ph1">`null`</ph>, the format item is replaced by <ph id="ph2">&lt;xref:System.String.Empty?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="754" translate="yes" xml:space="preserve" extradata="MT">
          <source>If there is no parameter in the <bpt id="p1">*</bpt>index<ept id="p1">*</ept> position, a <ph id="ph1">&lt;xref:System.FormatException&gt;</ph> is thrown.</source>
        </trans-unit>
        <trans-unit id="755" translate="yes" xml:space="preserve" extradata="MT">
          <source>,<bpt id="p1">*</bpt>length<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="756" translate="yes" xml:space="preserve" extradata="MT">
          <source>The minimum number of characters in the string representation of the parameter.</source>
        </trans-unit>
        <trans-unit id="757" translate="yes" xml:space="preserve" extradata="MT">
          <source>If positive, the parameter is right-aligned; if negative, it is left-aligned.</source>
        </trans-unit>
        <trans-unit id="758" translate="yes" xml:space="preserve" extradata="MT">
          <source>:<bpt id="p1">*</bpt>formatString<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="759" translate="yes" xml:space="preserve" extradata="MT">
          <source>A standard or custom format string that is supported by the parameter.</source>
        </trans-unit>
        <trans-unit id="760" translate="yes" xml:space="preserve" extradata="MT">
          <source>For the standard and custom format strings used with date and time values, see <bpt id="p1">[</bpt>Standard Date and Time Format Strings<ept id="p1">](~/docs/standard/base-types/standard-date-and-time-format-strings.md)</ept> and <bpt id="p2">[</bpt>Custom Date and Time Format Strings<ept id="p2">](~/docs/standard/base-types/custom-date-and-time-format-strings.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="761" translate="yes" xml:space="preserve" extradata="MT">
          <source>For the standard and custom format strings used with numeric values, see <bpt id="p1">[</bpt>Standard Numeric Format Strings<ept id="p1">](~/docs/standard/base-types/standard-numeric-format-strings.md)</ept> and <bpt id="p2">[</bpt>Custom Numeric Format Strings<ept id="p2">](~/docs/standard/base-types/custom-numeric-format-strings.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="762" translate="yes" xml:space="preserve" extradata="MT">
          <source>For the standard format strings used with enumerations, see <bpt id="p1">[</bpt>Enumeration Format Strings<ept id="p1">](~/docs/standard/base-types/enumeration-format-strings.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="763" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`provider`</ph> parameter specifies an <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> implementation that can provide formatting information for the objects in <ph id="ph3">`args`</ph>.</source>
        </trans-unit>
        <trans-unit id="764" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`provider`</ph> can be any of the following:</source>
        </trans-unit>
        <trans-unit id="765" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.Globalization.CultureInfo&gt;</ph> object that provides culture-specific formatting information.</source>
        </trans-unit>
        <trans-unit id="766" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object that provides culture-specific formatting information for numeric values in <ph id="ph2">`args`</ph>.</source>
        </trans-unit>
        <trans-unit id="767" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.Globalization.DateTimeFormatInfo&gt;</ph> object that provides culture-specific formatting information for date and time values in <ph id="ph2">`args`</ph>.</source>
        </trans-unit>
        <trans-unit id="768" translate="yes" xml:space="preserve" extradata="MT">
          <source>A custom <ph id="ph1">&lt;xref:System.IFormatProvider&gt;</ph> implementation that provides formatting information for one or more of the objects in <ph id="ph2">`args`</ph>.</source>
        </trans-unit>
        <trans-unit id="769" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, such an implementation also implements the <ph id="ph1">&lt;xref:System.ICustomFormatter&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="770" translate="yes" xml:space="preserve" extradata="MT">
          <source>The second example in the next section illustrates an <ph id="ph1">&lt;xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=fullName&gt;</ph> method call with a custom <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> implementation.</source>
        </trans-unit>
        <trans-unit id="771" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">`provider`</ph> parameter is <ph id="ph2">`null`</ph>, format provider information is obtained from the current culture.</source>
        </trans-unit>
        <trans-unit id="772" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`args`</ph> represents the objects to be formatted.</source>
        </trans-unit>
        <trans-unit id="773" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each format item in <ph id="ph1">`format`</ph> is replaced with the string representation of the corresponding object in <ph id="ph2">`args`</ph>.</source>
        </trans-unit>
        <trans-unit id="774" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the format item includes <ph id="ph1">`formatString`</ph> and the corresponding object in <ph id="ph2">`args`</ph> implements the <ph id="ph3">&lt;xref:System.IFormattable&gt;</ph> interface, then <ph id="ph4">`args[index].ToString(formatString, provider)`</ph> defines the formatting.</source>
        </trans-unit>
        <trans-unit id="775" translate="yes" xml:space="preserve" extradata="MT">
          <source>Otherwise, <ph id="ph1">`args[index].ToString()`</ph> defines the formatting.</source>
        </trans-unit>
        <trans-unit id="776" translate="yes" xml:space="preserve">
          <source>An object that supplies culture-specific formatting information.</source>
        </trans-unit>
        <trans-unit id="777" translate="yes" xml:space="preserve">
          <source>A composite format string.</source>
        </trans-unit>
        <trans-unit id="778" translate="yes" xml:space="preserve">
          <source>An array of objects to format.</source>
        </trans-unit>
        <trans-unit id="779" translate="yes" xml:space="preserve">
          <source>A reference to this instance after the append operation has completed.</source>
        </trans-unit>
        <trans-unit id="780" translate="yes" xml:space="preserve">
          <source>After the append operation, this instance contains any data that existed before the operation, suffixed by a copy of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">format</ph><ept id="p1">&lt;/code&gt;</ept> where any format specification is replaced by the string representation of the corresponding object argument.</source>
        </trans-unit>
        <trans-unit id="781" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;format&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="782" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;format&lt;/code&gt;</ph> is invalid.</source>
        </trans-unit>
        <trans-unit id="783" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="784" translate="yes" xml:space="preserve">
          <source>The index of a format item is less than 0 (zero), or greater than or equal to the length of the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">args</ph><ept id="p1">&lt;/code&gt;</ept> array.</source>
        </trans-unit>
        <trans-unit id="785" translate="yes" xml:space="preserve">
          <source>The length of the expanded string would exceed <ph id="ph1">&lt;xref href="System.Text.StringBuilder.MaxCapacity"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="786" translate="yes" xml:space="preserve">
          <source>Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance.</source>
        </trans-unit>
        <trans-unit id="787" translate="yes" xml:space="preserve">
          <source>Each format item is replaced by the string representation of either of two arguments.</source>
        </trans-unit>
        <trans-unit id="788" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method uses the <bpt id="p1">[</bpt>composite formatting feature<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept> of the .NET Framework to convert the value of an object to its text representation and embed that representation in the current <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="789" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`format`</ph> parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to <ph id="ph2">`arg0`</ph> and <ph id="ph3">`arg1`</ph>, the two objects in the parameter list of this method.</source>
        </trans-unit>
        <trans-unit id="790" translate="yes" xml:space="preserve" extradata="MT">
          <source>The formatting process replaces each format item with the string representation of the corresponding object.</source>
        </trans-unit>
        <trans-unit id="791" translate="yes" xml:space="preserve" extradata="MT">
          <source>The syntax of a format item is as follows:</source>
        </trans-unit>
        <trans-unit id="792" translate="yes" xml:space="preserve" extradata="MT">
          <source>{<bpt id="p1">*</bpt>index<ept id="p1">*</ept>[,<bpt id="p2">*</bpt>length<ept id="p2">*</ept>][:<bpt id="p3">*</bpt>formatString<ept id="p3">*</ept>]}</source>
        </trans-unit>
        <trans-unit id="793" translate="yes" xml:space="preserve" extradata="MT">
          <source>Elements in square brackets are optional.</source>
        </trans-unit>
        <trans-unit id="794" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following table describes each element.</source>
        </trans-unit>
        <trans-unit id="795" translate="yes" xml:space="preserve" extradata="MT">
          <source>Element</source>
        </trans-unit>
        <trans-unit id="796" translate="yes" xml:space="preserve" extradata="MT">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="797" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">*</bpt>index<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="798" translate="yes" xml:space="preserve" extradata="MT">
          <source>The zero-based position in the parameter list of the object to be formatted.</source>
        </trans-unit>
        <trans-unit id="799" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the object specified by <bpt id="p1">*</bpt>index<ept id="p1">*</ept> is <ph id="ph1">`null`</ph>, the format item is replaced by <ph id="ph2">&lt;xref:System.String.Empty?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="800" translate="yes" xml:space="preserve" extradata="MT">
          <source>If there is no parameter in the <bpt id="p1">*</bpt>index<ept id="p1">*</ept> position, a <ph id="ph1">&lt;xref:System.FormatException&gt;</ph> is thrown.</source>
        </trans-unit>
        <trans-unit id="801" translate="yes" xml:space="preserve" extradata="MT">
          <source>,<bpt id="p1">*</bpt>length<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="802" translate="yes" xml:space="preserve" extradata="MT">
          <source>The minimum number of characters in the string representation of the parameter.</source>
        </trans-unit>
        <trans-unit id="803" translate="yes" xml:space="preserve" extradata="MT">
          <source>If positive, the parameter is right-aligned; if negative, it is left-aligned.</source>
        </trans-unit>
        <trans-unit id="804" translate="yes" xml:space="preserve" extradata="MT">
          <source>:<bpt id="p1">*</bpt>formatString<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="805" translate="yes" xml:space="preserve" extradata="MT">
          <source>A standard or custom format string that is supported by the parameter.</source>
        </trans-unit>
        <trans-unit id="806" translate="yes" xml:space="preserve" extradata="MT">
          <source>For the standard and custom format strings used with date and time values, see <bpt id="p1">[</bpt>Standard Date and Time Format Strings<ept id="p1">](~/docs/standard/base-types/standard-date-and-time-format-strings.md)</ept> and <bpt id="p2">[</bpt>Custom Date and Time Format Strings<ept id="p2">](~/docs/standard/base-types/custom-date-and-time-format-strings.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="807" translate="yes" xml:space="preserve" extradata="MT">
          <source>For the standard and custom format strings used with numeric values, see <bpt id="p1">[</bpt>Standard Numeric Format Strings<ept id="p1">](~/docs/standard/base-types/standard-numeric-format-strings.md)</ept> and <bpt id="p2">[</bpt>Custom Numeric Format Strings<ept id="p2">](~/docs/standard/base-types/custom-numeric-format-strings.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="808" translate="yes" xml:space="preserve" extradata="MT">
          <source>For the standard format strings used with enumerations, see <bpt id="p1">[</bpt>Enumeration Format Strings<ept id="p1">](~/docs/standard/base-types/enumeration-format-strings.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="809" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`arg0`</ph> and <ph id="ph2">`arg1`</ph> represent the objects to be formatted.</source>
        </trans-unit>
        <trans-unit id="810" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each format item in <ph id="ph1">`format`</ph> is replaced with the string representation of either <ph id="ph2">`arg0`</ph> or <ph id="ph3">`arg1`</ph>.</source>
        </trans-unit>
        <trans-unit id="811" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the format item includes <ph id="ph1">`formatString`</ph> and the corresponding object implements the <ph id="ph2">&lt;xref:System.IFormattable&gt;</ph> interface, then <ph id="ph3">`arg`</ph><bpt id="p1">*</bpt>x<ept id="p1">*</ept><ph id="ph4">`.ToString(formatString, provider)`</ph> defines the formatting, where <bpt id="p2">*</bpt>x<ept id="p2">*</ept> is the index of the argument.</source>
        </trans-unit>
        <trans-unit id="812" translate="yes" xml:space="preserve" extradata="MT">
          <source>Otherwise, <ph id="ph1">`arg`</ph><bpt id="p1">*</bpt>x<ept id="p1">*</ept><ph id="ph2">`.ToString()`</ph> defines the formatting.</source>
        </trans-unit>
        <trans-unit id="813" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the string assigned to <ph id="ph1">`format`</ph> is "Thank you for your donation of {0:####} cans of food to our charitable organization."</source>
        </trans-unit>
        <trans-unit id="814" translate="yes" xml:space="preserve" extradata="MT">
          <source>and <ph id="ph1">`arg0`</ph> is an integer with the value 10, the return value will be "Thank you for your donation of 10 cans of food to our charitable organization."</source>
        </trans-unit>
        <trans-unit id="815" translate="yes" xml:space="preserve">
          <source>A composite format string.</source>
        </trans-unit>
        <trans-unit id="816" translate="yes" xml:space="preserve">
          <source>The first object to format.</source>
        </trans-unit>
        <trans-unit id="817" translate="yes" xml:space="preserve">
          <source>The second object to format.</source>
        </trans-unit>
        <trans-unit id="818" translate="yes" xml:space="preserve">
          <source>A reference to this instance with <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">format</ph><ept id="p1">&lt;/code&gt;</ept> appended.</source>
        </trans-unit>
        <trans-unit id="819" translate="yes" xml:space="preserve">
          <source>Each format item in <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">format</ph><ept id="p1">&lt;/code&gt;</ept> is replaced by the string representation of the corresponding object argument.</source>
        </trans-unit>
        <trans-unit id="820" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;format&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="821" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;format&lt;/code&gt;</ph> is invalid.</source>
        </trans-unit>
        <trans-unit id="822" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="823" translate="yes" xml:space="preserve">
          <source>The index of a format item is less than 0 (zero), or greater than or equal to 2.</source>
        </trans-unit>
        <trans-unit id="824" translate="yes" xml:space="preserve">
          <source>The length of the expanded string would exceed <ph id="ph1">&lt;xref href="System.Text.StringBuilder.MaxCapacity"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="825" translate="yes" xml:space="preserve">
          <source>Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance.</source>
        </trans-unit>
        <trans-unit id="826" translate="yes" xml:space="preserve">
          <source>Each format item is replaced by the string representation of either of two arguments using a specified format provider.</source>
        </trans-unit>
        <trans-unit id="827" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method uses the <bpt id="p1">[</bpt>composite formatting feature<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept> of the .NET Framework to convert the value of an object to its text representation and embed that representation in the current <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="828" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`format`</ph> parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to objects in the parameter list of this method.</source>
        </trans-unit>
        <trans-unit id="829" translate="yes" xml:space="preserve" extradata="MT">
          <source>The formatting process replaces each format item with the string representation of the corresponding object.</source>
        </trans-unit>
        <trans-unit id="830" translate="yes" xml:space="preserve" extradata="MT">
          <source>The syntax of a format item is as follows:</source>
        </trans-unit>
        <trans-unit id="831" translate="yes" xml:space="preserve" extradata="MT">
          <source>{<bpt id="p1">*</bpt>index<ept id="p1">*</ept>[,<bpt id="p2">*</bpt>length<ept id="p2">*</ept>][:<bpt id="p3">*</bpt>formatString<ept id="p3">*</ept>]}</source>
        </trans-unit>
        <trans-unit id="832" translate="yes" xml:space="preserve" extradata="MT">
          <source>Elements in square brackets are optional.</source>
        </trans-unit>
        <trans-unit id="833" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following table describes each element.</source>
        </trans-unit>
        <trans-unit id="834" translate="yes" xml:space="preserve" extradata="MT">
          <source>Element</source>
        </trans-unit>
        <trans-unit id="835" translate="yes" xml:space="preserve" extradata="MT">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="836" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">*</bpt>index<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="837" translate="yes" xml:space="preserve" extradata="MT">
          <source>The zero-based position in the parameter list of the object to be formatted.</source>
        </trans-unit>
        <trans-unit id="838" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the object specified by <bpt id="p1">*</bpt>index<ept id="p1">*</ept> is <ph id="ph1">`null`</ph>, the format item is replaced by <ph id="ph2">&lt;xref:System.String.Empty?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="839" translate="yes" xml:space="preserve" extradata="MT">
          <source>If there is no parameter in the <bpt id="p1">*</bpt>index<ept id="p1">*</ept> position, a <ph id="ph1">&lt;xref:System.FormatException&gt;</ph> is thrown.</source>
        </trans-unit>
        <trans-unit id="840" translate="yes" xml:space="preserve" extradata="MT">
          <source>,<bpt id="p1">*</bpt>length<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="841" translate="yes" xml:space="preserve" extradata="MT">
          <source>The minimum number of characters in the string representation of the parameter.</source>
        </trans-unit>
        <trans-unit id="842" translate="yes" xml:space="preserve" extradata="MT">
          <source>If positive, the parameter is right-aligned; if negative, it is left-aligned.</source>
        </trans-unit>
        <trans-unit id="843" translate="yes" xml:space="preserve" extradata="MT">
          <source>:<bpt id="p1">*</bpt>formatString<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="844" translate="yes" xml:space="preserve" extradata="MT">
          <source>A standard or custom format string that is supported by the parameter.</source>
        </trans-unit>
        <trans-unit id="845" translate="yes" xml:space="preserve" extradata="MT">
          <source>For the standard and custom format strings used with date and time values, see <bpt id="p1">[</bpt>Standard Date and Time Format Strings<ept id="p1">](~/docs/standard/base-types/standard-date-and-time-format-strings.md)</ept> and <bpt id="p2">[</bpt>Custom Date and Time Format Strings<ept id="p2">](~/docs/standard/base-types/custom-date-and-time-format-strings.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="846" translate="yes" xml:space="preserve" extradata="MT">
          <source>For the standard and custom format strings used with numeric values, see <bpt id="p1">[</bpt>Standard Numeric Format Strings<ept id="p1">](~/docs/standard/base-types/standard-numeric-format-strings.md)</ept> and <bpt id="p2">[</bpt>Custom Numeric Format Strings<ept id="p2">](~/docs/standard/base-types/custom-numeric-format-strings.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="847" translate="yes" xml:space="preserve" extradata="MT">
          <source>For the standard format strings used with enumerations, see <bpt id="p1">[</bpt>Enumeration Format Strings<ept id="p1">](~/docs/standard/base-types/enumeration-format-strings.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="848" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`provider`</ph> parameter specifies an <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> implementation that can provide formatting information for <ph id="ph3">`arg0`</ph> and <ph id="ph4">`arg1`</ph>.</source>
        </trans-unit>
        <trans-unit id="849" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`provider`</ph> can be any of the following:</source>
        </trans-unit>
        <trans-unit id="850" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.Globalization.CultureInfo&gt;</ph> object that provides culture-specific formatting information.</source>
        </trans-unit>
        <trans-unit id="851" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object that provides culture-specific formatting information for <ph id="ph2">`arg0`</ph> or <ph id="ph3">`arg1`</ph> if they are numeric values.</source>
        </trans-unit>
        <trans-unit id="852" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.Globalization.DateTimeFormatInfo&gt;</ph> object that provides culture-specific formatting information for <ph id="ph2">`arg0`</ph> or <ph id="ph3">`arg1`</ph> if they are date and time values.</source>
        </trans-unit>
        <trans-unit id="853" translate="yes" xml:space="preserve" extradata="MT">
          <source>A custom <ph id="ph1">&lt;xref:System.IFormatProvider&gt;</ph> implementation that provides formatting information for <ph id="ph2">`arg0`</ph> and <ph id="ph3">`arg1`</ph>.</source>
        </trans-unit>
        <trans-unit id="854" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, such an implementation also implements the <ph id="ph1">&lt;xref:System.ICustomFormatter&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="855" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">`provider`</ph> parameter is <ph id="ph2">`null`</ph>, format provider information is obtained from the current culture.</source>
        </trans-unit>
        <trans-unit id="856" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`arg0`</ph> and <ph id="ph2">`arg1`</ph> represent the objects to be formatted.</source>
        </trans-unit>
        <trans-unit id="857" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each format item in <ph id="ph1">`format`</ph> is replaced with the string representation of the object that has the corresponding index.</source>
        </trans-unit>
        <trans-unit id="858" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the format item includes <ph id="ph1">`formatString`</ph> and the corresponding argument implements the <ph id="ph2">&lt;xref:System.IFormattable&gt;</ph> interface, then the argument's <ph id="ph3">`ToString(formatString, provider)`</ph> method defines the formatting.</source>
        </trans-unit>
        <trans-unit id="859" translate="yes" xml:space="preserve" extradata="MT">
          <source>Otherwise, the argument's <ph id="ph1">`ToString()`</ph> method defines the formatting.</source>
        </trans-unit>
        <trans-unit id="860" translate="yes" xml:space="preserve">
          <source>An object that supplies culture-specific formatting information.</source>
        </trans-unit>
        <trans-unit id="861" translate="yes" xml:space="preserve">
          <source>A composite format string.</source>
        </trans-unit>
        <trans-unit id="862" translate="yes" xml:space="preserve">
          <source>The first object to format.</source>
        </trans-unit>
        <trans-unit id="863" translate="yes" xml:space="preserve">
          <source>The second object to format.</source>
        </trans-unit>
        <trans-unit id="864" translate="yes" xml:space="preserve">
          <source>A reference to this instance after the append operation has completed.</source>
        </trans-unit>
        <trans-unit id="865" translate="yes" xml:space="preserve">
          <source>After the append operation, this instance contains any data that existed before the operation, suffixed by a copy of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">format</ph><ept id="p1">&lt;/code&gt;</ept> where any format specification is replaced by the string representation of the corresponding object argument.</source>
        </trans-unit>
        <trans-unit id="866" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;format&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="867" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;format&lt;/code&gt;</ph> is invalid.</source>
        </trans-unit>
        <trans-unit id="868" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="869" translate="yes" xml:space="preserve">
          <source>The index of a format item is less than 0 (zero), or greater than or equal to 2 (two).</source>
        </trans-unit>
        <trans-unit id="870" translate="yes" xml:space="preserve">
          <source>The length of the expanded string would exceed <ph id="ph1">&lt;xref href="System.Text.StringBuilder.MaxCapacity"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="871" translate="yes" xml:space="preserve">
          <source>Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance.</source>
        </trans-unit>
        <trans-unit id="872" translate="yes" xml:space="preserve">
          <source>Each format item is replaced by the string representation of either of three arguments.</source>
        </trans-unit>
        <trans-unit id="873" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method uses the <bpt id="p1">[</bpt>composite formatting feature<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept> of the .NET Framework to convert the value of an object to its text representation and embed that representation in the current <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="874" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`format`</ph> parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to <ph id="ph2">`arg0`</ph> through <ph id="ph3">`arg2`</ph>, the objects in the parameter list of this method.</source>
        </trans-unit>
        <trans-unit id="875" translate="yes" xml:space="preserve" extradata="MT">
          <source>The formatting process replaces each format item with the string representation of the corresponding object.</source>
        </trans-unit>
        <trans-unit id="876" translate="yes" xml:space="preserve" extradata="MT">
          <source>The syntax of a format item is as follows:</source>
        </trans-unit>
        <trans-unit id="877" translate="yes" xml:space="preserve" extradata="MT">
          <source>{<bpt id="p1">*</bpt>index<ept id="p1">*</ept>[,<bpt id="p2">*</bpt>length<ept id="p2">*</ept>][:<bpt id="p3">*</bpt>formatString<ept id="p3">*</ept>]}</source>
        </trans-unit>
        <trans-unit id="878" translate="yes" xml:space="preserve" extradata="MT">
          <source>Elements in square brackets are optional.</source>
        </trans-unit>
        <trans-unit id="879" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following table describes each element.</source>
        </trans-unit>
        <trans-unit id="880" translate="yes" xml:space="preserve" extradata="MT">
          <source>Element</source>
        </trans-unit>
        <trans-unit id="881" translate="yes" xml:space="preserve" extradata="MT">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="882" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">*</bpt>index<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="883" translate="yes" xml:space="preserve" extradata="MT">
          <source>The zero-based position in the parameter list of the object to be formatted.</source>
        </trans-unit>
        <trans-unit id="884" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the object specified by <bpt id="p1">*</bpt>index<ept id="p1">*</ept> is <ph id="ph1">`null`</ph>, the format item is replaced by <ph id="ph2">&lt;xref:System.String.Empty?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="885" translate="yes" xml:space="preserve" extradata="MT">
          <source>If there is no parameter in the <bpt id="p1">*</bpt>index<ept id="p1">*</ept> position, a <ph id="ph1">&lt;xref:System.FormatException&gt;</ph> is thrown.</source>
        </trans-unit>
        <trans-unit id="886" translate="yes" xml:space="preserve" extradata="MT">
          <source>,<bpt id="p1">*</bpt>length<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="887" translate="yes" xml:space="preserve" extradata="MT">
          <source>The minimum number of characters in the string representation of the parameter.</source>
        </trans-unit>
        <trans-unit id="888" translate="yes" xml:space="preserve" extradata="MT">
          <source>If positive, the parameter is right-aligned; if negative, it is left-aligned.</source>
        </trans-unit>
        <trans-unit id="889" translate="yes" xml:space="preserve" extradata="MT">
          <source>:<bpt id="p1">*</bpt>formatString<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="890" translate="yes" xml:space="preserve" extradata="MT">
          <source>A standard or custom format string that is supported by the parameter.</source>
        </trans-unit>
        <trans-unit id="891" translate="yes" xml:space="preserve" extradata="MT">
          <source>For the standard and custom format strings used with date and time values, see <bpt id="p1">[</bpt>Standard Date and Time Format Strings<ept id="p1">](~/docs/standard/base-types/standard-date-and-time-format-strings.md)</ept> and <bpt id="p2">[</bpt>Custom Date and Time Format Strings<ept id="p2">](~/docs/standard/base-types/custom-date-and-time-format-strings.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="892" translate="yes" xml:space="preserve" extradata="MT">
          <source>For the standard and custom format strings used with numeric values, see <bpt id="p1">[</bpt>Standard Numeric Format Strings<ept id="p1">](~/docs/standard/base-types/standard-numeric-format-strings.md)</ept> and <bpt id="p2">[</bpt>Custom Numeric Format Strings<ept id="p2">](~/docs/standard/base-types/custom-numeric-format-strings.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="893" translate="yes" xml:space="preserve" extradata="MT">
          <source>For the standard format strings used with enumerations, see <bpt id="p1">[</bpt>Enumeration Format Strings<ept id="p1">](~/docs/standard/base-types/enumeration-format-strings.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="894" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`arg0`</ph>, <ph id="ph2">`arg1`</ph>, and <ph id="ph3">`arg2`</ph> represent the objects to be formatted.</source>
        </trans-unit>
        <trans-unit id="895" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each format item in <ph id="ph1">`format`</ph> is replaced with the string representation of either <ph id="ph2">`arg0`</ph>, <ph id="ph3">`arg1`</ph>, or <ph id="ph4">`arg2`</ph>, depending on the index of the format item.</source>
        </trans-unit>
        <trans-unit id="896" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the format item includes <ph id="ph1">`formatString`</ph> and the corresponding object in <ph id="ph2">`args`</ph> implements the <ph id="ph3">&lt;xref:System.IFormattable&gt;</ph> interface, then <ph id="ph4">`arg`</ph><bpt id="p1">*</bpt>x<ept id="p1">*</ept><ph id="ph5">`.ToString(formatString, null)`</ph> defines the formatting, where <bpt id="p2">*</bpt>x<ept id="p2">*</ept> is the index of the argument.</source>
        </trans-unit>
        <trans-unit id="897" translate="yes" xml:space="preserve" extradata="MT">
          <source>Otherwise, <ph id="ph1">`arg`</ph><bpt id="p1">*</bpt>x<ept id="p1">*</ept><ph id="ph2">`.ToString()`</ph> defines the formatting.</source>
        </trans-unit>
        <trans-unit id="898" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the string assigned to <ph id="ph1">`format`</ph> is "Thank you for your donation of {0:####} cans of food to our charitable organization."</source>
        </trans-unit>
        <trans-unit id="899" translate="yes" xml:space="preserve" extradata="MT">
          <source>and <ph id="ph1">`arg0`</ph> is an integer with the value 10, the return value will be "Thank you for your donation of 10 cans of food to our charitable organization."</source>
        </trans-unit>
        <trans-unit id="900" translate="yes" xml:space="preserve">
          <source>A composite format string.</source>
        </trans-unit>
        <trans-unit id="901" translate="yes" xml:space="preserve">
          <source>The first object to format.</source>
        </trans-unit>
        <trans-unit id="902" translate="yes" xml:space="preserve">
          <source>The second object to format.</source>
        </trans-unit>
        <trans-unit id="903" translate="yes" xml:space="preserve">
          <source>The third object to format.</source>
        </trans-unit>
        <trans-unit id="904" translate="yes" xml:space="preserve">
          <source>A reference to this instance with <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">format</ph><ept id="p1">&lt;/code&gt;</ept> appended.</source>
        </trans-unit>
        <trans-unit id="905" translate="yes" xml:space="preserve">
          <source>Each format item in <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">format</ph><ept id="p1">&lt;/code&gt;</ept> is replaced by the string representation of the corresponding object argument.</source>
        </trans-unit>
        <trans-unit id="906" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;format&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="907" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;format&lt;/code&gt;</ph> is invalid.</source>
        </trans-unit>
        <trans-unit id="908" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="909" translate="yes" xml:space="preserve">
          <source>The index of a format item is less than 0 (zero), or greater than or equal to 3.</source>
        </trans-unit>
        <trans-unit id="910" translate="yes" xml:space="preserve">
          <source>The length of the expanded string would exceed <ph id="ph1">&lt;xref href="System.Text.StringBuilder.MaxCapacity"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="911" translate="yes" xml:space="preserve">
          <source>Appends the default line terminator to the end of the current <ph id="ph1">&lt;xref href="System.Text.StringBuilder"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="912" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default line terminator is the current value of the <ph id="ph1">&lt;xref:System.Environment.NewLine%2A?displayProperty=fullName&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="913" translate="yes" xml:space="preserve" extradata="MT">
          <source>The capacity of this instance is adjusted as needed.</source>
        </trans-unit>
        <trans-unit id="914" translate="yes" xml:space="preserve">
          <source>A reference to this instance after the append operation has completed.</source>
        </trans-unit>
        <trans-unit id="915" translate="yes" xml:space="preserve">
          <source>Enlarging the value of this instance would exceed <ph id="ph1">&lt;xref href="System.Text.StringBuilder.MaxCapacity"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="916" translate="yes" xml:space="preserve">
          <source>Appends a copy of the specified string followed by the default line terminator to the end of the current <ph id="ph1">&lt;xref href="System.Text.StringBuilder"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="917" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default line terminator is the current value of the <ph id="ph1">&lt;xref:System.Environment.NewLine%2A?displayProperty=fullName&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="918" translate="yes" xml:space="preserve" extradata="MT">
          <source>The capacity of this instance is adjusted as needed.</source>
        </trans-unit>
        <trans-unit id="919" translate="yes" xml:space="preserve">
          <source>The string to append.</source>
        </trans-unit>
        <trans-unit id="920" translate="yes" xml:space="preserve">
          <source>A reference to this instance after the append operation has completed.</source>
        </trans-unit>
        <trans-unit id="921" translate="yes" xml:space="preserve">
          <source>Enlarging the value of this instance would exceed <ph id="ph1">&lt;xref href="System.Text.StringBuilder.MaxCapacity"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="922" translate="yes" xml:space="preserve">
          <source>Gets or sets the maximum number of characters that can be contained in the memory allocated by the current instance.</source>
        </trans-unit>
        <trans-unit id="923" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Text.StringBuilder.Capacity%2A&gt;</ph> does not affect the string value of the current instance.</source>
        </trans-unit>
        <trans-unit id="924" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Text.StringBuilder.Capacity%2A&gt;</ph> can be decreased as long as it is not less than <ph id="ph2">&lt;xref:System.Text.StringBuilder.Length%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="925" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> dynamically allocates more space when required and increases <ph id="ph2">&lt;xref:System.Text.StringBuilder.Capacity%2A&gt;</ph> accordingly.</source>
        </trans-unit>
        <trans-unit id="926" translate="yes" xml:space="preserve" extradata="MT">
          <source>For performance reasons, a <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> might allocate more memory than needed.</source>
        </trans-unit>
        <trans-unit id="927" translate="yes" xml:space="preserve" extradata="MT">
          <source>The amount of memory allocated is implementation-specific.</source>
        </trans-unit>
        <trans-unit id="928" translate="yes" xml:space="preserve">
          <source>The maximum number of characters that can be contained in the memory allocated by the current instance.</source>
        </trans-unit>
        <trans-unit id="929" translate="yes" xml:space="preserve">
          <source>Its value can range from <ph id="ph1">&lt;xref href="System.Text.StringBuilder.Length"&gt;&lt;/xref&gt;</ph> to <ph id="ph2">&lt;xref href="System.Text.StringBuilder.MaxCapacity"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="930" translate="yes" xml:space="preserve">
          <source>The value specified for a set operation is less than the current length of this instance.</source>
        </trans-unit>
        <trans-unit id="931" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="932" translate="yes" xml:space="preserve">
          <source>The value specified for a set operation is greater than the maximum capacity.</source>
        </trans-unit>
        <trans-unit id="933" translate="yes" xml:space="preserve">
          <source>Gets or sets the character at the specified character position in this instance.</source>
        </trans-unit>
        <trans-unit id="934" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`index`</ph> parameter is the position of a character within the <ph id="ph2">&lt;xref:System.Text.StringBuilder&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="935" translate="yes" xml:space="preserve" extradata="MT">
          <source>The first character in the string is at index 0.</source>
        </trans-unit>
        <trans-unit id="936" translate="yes" xml:space="preserve" extradata="MT">
          <source>The length of a string is the number of characters it contains.</source>
        </trans-unit>
        <trans-unit id="937" translate="yes" xml:space="preserve" extradata="MT">
          <source>The last accessible character of a <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> instance is at index <ph id="ph2">&lt;xref:System.Text.StringBuilder.Length%2A&gt;</ph> - 1.</source>
        </trans-unit>
        <trans-unit id="938" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Text.StringBuilder.Chars%2A&gt;</ph> is the default property of the <ph id="ph2">&lt;xref:System.Text.StringBuilder&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="939" translate="yes" xml:space="preserve" extradata="MT">
          <source>In C#, it is an indexer.</source>
        </trans-unit>
        <trans-unit id="940" translate="yes" xml:space="preserve" extradata="MT">
          <source>This means that individual characters can be retrieved from the <ph id="ph1">&lt;xref:System.Text.StringBuilder.Chars%2A&gt;</ph> property as shown in the following example, which counts the number of alphabetic, white-space, and punctuation characters in a string.</source>
        </trans-unit>
        <trans-unit id="941" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Text.StringBuilder.Chars#1<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.stringbuilder.chars/cs/chars1.cs#1)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Text.StringBuilder.Chars#1<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.stringbuilder.chars/vb/chars1.vb#1)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="942" translate="yes" xml:space="preserve">
          <source>The position of the character.</source>
        </trans-unit>
        <trans-unit id="943" translate="yes" xml:space="preserve">
          <source>The Unicode character at position <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">index</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="944" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph> is outside the bounds of this instance while setting a character.</source>
        </trans-unit>
        <trans-unit id="945" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph> is outside the bounds of this instance while getting a character.</source>
        </trans-unit>
        <trans-unit id="946" translate="yes" xml:space="preserve">
          <source>Removes all characters from the current <ph id="ph1">&lt;xref href="System.Text.StringBuilder"&gt;&lt;/xref&gt;</ph> instance.</source>
        </trans-unit>
        <trans-unit id="947" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Text.StringBuilder.Clear%2A&gt;</ph> is a convenience method that is equivalent to setting the <ph id="ph2">&lt;xref:System.Text.StringBuilder.Length%2A&gt;</ph> property of the current instance to 0 (zero).</source>
        </trans-unit>
        <trans-unit id="948" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calling the <ph id="ph1">&lt;xref:System.Text.StringBuilder.Clear%2A&gt;</ph> method does not modify the current instance's <ph id="ph2">&lt;xref:System.Text.StringBuilder.Capacity%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Text.StringBuilder.MaxCapacity%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="949" translate="yes" xml:space="preserve">
          <source>An object whose <ph id="ph1">&lt;xref href="System.Text.StringBuilder.Length"&gt;&lt;/xref&gt;</ph> is 0 (zero).</source>
        </trans-unit>
        <trans-unit id="950" translate="yes" xml:space="preserve">
          <source>Copies the characters from a specified segment of this instance to a specified segment of a destination <ph id="ph1">&lt;xref href="System.Char"&gt;&lt;/xref&gt;</ph> array.</source>
        </trans-unit>
        <trans-unit id="951" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Text.StringBuilder.CopyTo%2A&gt;</ph> method is intended to be used in the rare situation when you need to efficiently copy successive sections of a <ph id="ph2">&lt;xref:System.Text.StringBuilder&gt;</ph> object to an array.</source>
        </trans-unit>
        <trans-unit id="952" translate="yes" xml:space="preserve" extradata="MT">
          <source>The array should be a fixed size, preallocated, reusable, and possibly globally accessible.</source>
        </trans-unit>
        <trans-unit id="953" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, your application could populate a <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> object with a large number of characters then use the <ph id="ph2">&lt;xref:System.Text.StringBuilder.CopyTo%2A&gt;</ph> method to copy small, successive pieces of the <ph id="ph3">&lt;xref:System.Text.StringBuilder&gt;</ph> object to an array where the pieces are processed.</source>
        </trans-unit>
        <trans-unit id="954" translate="yes" xml:space="preserve" extradata="MT">
          <source>When all the data in the <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> object is processed, the size of the <ph id="ph2">&lt;xref:System.Text.StringBuilder&gt;</ph> object is set to zero and the cycle is repeated.</source>
        </trans-unit>
        <trans-unit id="955" translate="yes" xml:space="preserve">
          <source>The starting position in this instance where characters will be copied from.</source>
        </trans-unit>
        <trans-unit id="956" translate="yes" xml:space="preserve">
          <source>The index is zero-based.</source>
        </trans-unit>
        <trans-unit id="957" translate="yes" xml:space="preserve">
          <source>The array where characters will be copied.</source>
        </trans-unit>
        <trans-unit id="958" translate="yes" xml:space="preserve">
          <source>The starting position in <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">destination</ph><ept id="p1">&lt;/code&gt;</ept> where characters will be copied.</source>
        </trans-unit>
        <trans-unit id="959" translate="yes" xml:space="preserve">
          <source>The index is zero-based.</source>
        </trans-unit>
        <trans-unit id="960" translate="yes" xml:space="preserve">
          <source>The number of characters to be copied.</source>
        </trans-unit>
        <trans-unit id="961" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;destination&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="962" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;sourceIndex&lt;/code&gt;</ph>, <ph id="ph2">&lt;code&gt;destinationIndex&lt;/code&gt;</ph>, or <ph id="ph3">&lt;code&gt;count&lt;/code&gt;</ph>, is less than zero.</source>
        </trans-unit>
        <trans-unit id="963" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="964" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;sourceIndex&lt;/code&gt;</ph> is greater than the length of this instance.</source>
        </trans-unit>
        <trans-unit id="965" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;sourceIndex&lt;/code&gt;</ph><ph id="ph2"> + &lt;code&gt;count&lt;/code&gt;</ph> is greater than the length of this instance.</source>
        </trans-unit>
        <trans-unit id="966" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="967" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;destinationIndex&lt;/code&gt;</ph><ph id="ph2"> + &lt;code&gt;count&lt;/code&gt;</ph> is greater than the length of <ph id="ph3">&lt;code&gt;destination&lt;/code&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="968" translate="yes" xml:space="preserve">
          <source>Ensures that the capacity of this instance of <ph id="ph1">&lt;xref href="System.Text.StringBuilder"&gt;&lt;/xref&gt;</ph> is at least the specified value.</source>
        </trans-unit>
        <trans-unit id="969" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the current capacity is less than the <ph id="ph1">`capacity`</ph> parameter, memory for this instance is reallocated to hold at least <ph id="ph2">`capacity`</ph> number of characters; otherwise, no memory is changed.</source>
        </trans-unit>
        <trans-unit id="970" translate="yes" xml:space="preserve">
          <source>The minimum capacity to ensure.</source>
        </trans-unit>
        <trans-unit id="971" translate="yes" xml:space="preserve">
          <source>The new capacity of this instance.</source>
        </trans-unit>
        <trans-unit id="972" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;capacity&lt;/code&gt;</ph> is less than zero.</source>
        </trans-unit>
        <trans-unit id="973" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="974" translate="yes" xml:space="preserve">
          <source>Enlarging the value of this instance would exceed <ph id="ph1">&lt;xref href="System.Text.StringBuilder.MaxCapacity"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="975" translate="yes" xml:space="preserve">
          <source>Returns a value indicating whether this instance is equal to a specified object.</source>
        </trans-unit>
        <trans-unit id="976" translate="yes" xml:space="preserve">
          <source>An object to compare with this instance, or <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="977" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if this instance and <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">sb</ph><ept id="p1">&lt;/code&gt;</ept> have equal string, <ph id="ph3">&lt;xref href="System.Text.StringBuilder.Capacity"&gt;&lt;/xref&gt;</ph>, and <ph id="ph4">&lt;xref href="System.Text.StringBuilder.MaxCapacity"&gt;&lt;/xref&gt;</ph> values; otherwise, <ph id="ph5">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="978" translate="yes" xml:space="preserve">
          <source>Inserts one or more copies of a specified string into this instance at the specified character position.</source>
        </trans-unit>
        <trans-unit id="979" translate="yes" xml:space="preserve" extradata="MT">
          <source>Existing characters are shifted to make room for the new text.</source>
        </trans-unit>
        <trans-unit id="980" translate="yes" xml:space="preserve" extradata="MT">
          <source>The capacity of this instance is adjusted as needed.</source>
        </trans-unit>
        <trans-unit id="981" translate="yes" xml:space="preserve" extradata="MT">
          <source>This <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> object is not changed if <ph id="ph2">`value`</ph> is <ph id="ph3">`null`</ph>, <ph id="ph4">`value`</ph> is not <ph id="ph5">`null`</ph> but its length is zero, or <ph id="ph6">`count`</ph> is zero.</source>
        </trans-unit>
        <trans-unit id="982" translate="yes" xml:space="preserve">
          <source>The position in this instance where insertion begins.</source>
        </trans-unit>
        <trans-unit id="983" translate="yes" xml:space="preserve">
          <source>The string to insert.</source>
        </trans-unit>
        <trans-unit id="984" translate="yes" xml:space="preserve">
          <source>The number of times to insert <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">value</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="985" translate="yes" xml:space="preserve">
          <source>A reference to this instance after insertion has completed.</source>
        </trans-unit>
        <trans-unit id="986" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph> is less than zero or greater than the current length of this instance.</source>
        </trans-unit>
        <trans-unit id="987" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="988" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;count&lt;/code&gt;</ph> is less than zero.</source>
        </trans-unit>
        <trans-unit id="989" translate="yes" xml:space="preserve">
          <source>The current length of this <ph id="ph1">&lt;xref href="System.Text.StringBuilder"&gt;&lt;/xref&gt;</ph> object plus the length of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">value</ph><ept id="p1">&lt;/code&gt;</ept> times <bpt id="p2">&lt;code&gt;</bpt><ph id="ph3">count</ph><ept id="p2">&lt;/code&gt;</ept> exceeds <ph id="ph4">&lt;xref href="System.Text.StringBuilder.MaxCapacity"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="990" translate="yes" xml:space="preserve">
          <source>Inserts the string representation of a 64-bit unsigned integer into this instance at the specified character position.</source>
        </trans-unit>
        <trans-unit id="991" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.UInt64.ToString%2A?displayProperty=fullName&gt;</ph> is used to get a string representation of <ph id="ph2">`value`</ph>.</source>
        </trans-unit>
        <trans-unit id="992" translate="yes" xml:space="preserve" extradata="MT">
          <source>Existing characters are shifted to make room for the new text.</source>
        </trans-unit>
        <trans-unit id="993" translate="yes" xml:space="preserve" extradata="MT">
          <source>The capacity of this instance is adjusted as needed.</source>
        </trans-unit>
        <trans-unit id="994" translate="yes" xml:space="preserve">
          <source>The position in this instance where insertion begins.</source>
        </trans-unit>
        <trans-unit id="995" translate="yes" xml:space="preserve">
          <source>The value to insert.</source>
        </trans-unit>
        <trans-unit id="996" translate="yes" xml:space="preserve">
          <source>A reference to this instance after the insert operation has completed.</source>
        </trans-unit>
        <trans-unit id="997" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph> is less than zero or greater than the length of this instance.</source>
        </trans-unit>
        <trans-unit id="998" translate="yes" xml:space="preserve">
          <source>Enlarging the value of this instance would exceed <ph id="ph1">&lt;xref href="System.Text.StringBuilder.MaxCapacity"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="999" translate="yes" xml:space="preserve">
          <source>Inserts the string representation of a 32-bit unsigned integer into this instance at the specified character position.</source>
        </trans-unit>
        <trans-unit id="1000" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.UInt32.ToString%2A?displayProperty=fullName&gt;</ph> is used to get a string representation of <ph id="ph2">`value`</ph>.</source>
        </trans-unit>
        <trans-unit id="1001" translate="yes" xml:space="preserve" extradata="MT">
          <source>Existing characters are shifted to make room for the new text.</source>
        </trans-unit>
        <trans-unit id="1002" translate="yes" xml:space="preserve" extradata="MT">
          <source>The capacity of this instance is adjusted as needed.</source>
        </trans-unit>
        <trans-unit id="1003" translate="yes" xml:space="preserve">
          <source>The position in this instance where insertion begins.</source>
        </trans-unit>
        <trans-unit id="1004" translate="yes" xml:space="preserve">
          <source>The value to insert.</source>
        </trans-unit>
        <trans-unit id="1005" translate="yes" xml:space="preserve">
          <source>A reference to this instance after the insert operation has completed.</source>
        </trans-unit>
        <trans-unit id="1006" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph> is less than zero or greater than the length of this instance.</source>
        </trans-unit>
        <trans-unit id="1007" translate="yes" xml:space="preserve">
          <source>Enlarging the value of this instance would exceed <ph id="ph1">&lt;xref href="System.Text.StringBuilder.MaxCapacity"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1008" translate="yes" xml:space="preserve">
          <source>Inserts the string representation of a 16-bit unsigned integer into this instance at the specified character position.</source>
        </trans-unit>
        <trans-unit id="1009" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.UInt16.ToString%2A?displayProperty=fullName&gt;</ph> is used to get a string representation of <ph id="ph2">`value`</ph>.</source>
        </trans-unit>
        <trans-unit id="1010" translate="yes" xml:space="preserve" extradata="MT">
          <source>Existing characters are shifted to make room for the new text.</source>
        </trans-unit>
        <trans-unit id="1011" translate="yes" xml:space="preserve" extradata="MT">
          <source>The capacity of this instance is adjusted as needed.</source>
        </trans-unit>
        <trans-unit id="1012" translate="yes" xml:space="preserve">
          <source>The position in this instance where insertion begins.</source>
        </trans-unit>
        <trans-unit id="1013" translate="yes" xml:space="preserve">
          <source>The value to insert.</source>
        </trans-unit>
        <trans-unit id="1014" translate="yes" xml:space="preserve">
          <source>A reference to this instance after the insert operation has completed.</source>
        </trans-unit>
        <trans-unit id="1015" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph> is less than zero or greater than the length of this instance.</source>
        </trans-unit>
        <trans-unit id="1016" translate="yes" xml:space="preserve">
          <source>Enlarging the value of this instance would exceed <ph id="ph1">&lt;xref href="System.Text.StringBuilder.MaxCapacity"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1017" translate="yes" xml:space="preserve">
          <source>Inserts a string into this instance at the specified character position.</source>
        </trans-unit>
        <trans-unit id="1018" translate="yes" xml:space="preserve" extradata="MT">
          <source>Existing characters are shifted to make room for the new text.</source>
        </trans-unit>
        <trans-unit id="1019" translate="yes" xml:space="preserve" extradata="MT">
          <source>The capacity is adjusted as needed.</source>
        </trans-unit>
        <trans-unit id="1020" translate="yes" xml:space="preserve" extradata="MT">
          <source>This instance of <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> is not changed if <ph id="ph2">`value`</ph> is <ph id="ph3">`null`</ph>, or <ph id="ph4">`value`</ph> is not <ph id="ph5">`null`</ph> but its length is zero.</source>
        </trans-unit>
        <trans-unit id="1021" translate="yes" xml:space="preserve">
          <source>The position in this instance where insertion begins.</source>
        </trans-unit>
        <trans-unit id="1022" translate="yes" xml:space="preserve">
          <source>The string to insert.</source>
        </trans-unit>
        <trans-unit id="1023" translate="yes" xml:space="preserve">
          <source>A reference to this instance after the insert operation has completed.</source>
        </trans-unit>
        <trans-unit id="1024" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph> is less than zero or greater than the current length of this instance.</source>
        </trans-unit>
        <trans-unit id="1025" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="1026" translate="yes" xml:space="preserve">
          <source>The current length of this <ph id="ph1">&lt;xref href="System.Text.StringBuilder"&gt;&lt;/xref&gt;</ph> object plus the length of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">value</ph><ept id="p1">&lt;/code&gt;</ept> exceeds <ph id="ph3">&lt;xref href="System.Text.StringBuilder.MaxCapacity"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1027" translate="yes" xml:space="preserve">
          <source>Inserts the string representation of a single-precision floating point number into this instance at the specified character position.</source>
        </trans-unit>
        <trans-unit id="1028" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Single.ToString%2A?displayProperty=fullName&gt;</ph> is used to get a string representation of <ph id="ph2">`value`</ph>.</source>
        </trans-unit>
        <trans-unit id="1029" translate="yes" xml:space="preserve" extradata="MT">
          <source>Existing characters are shifted to make room for the new text.</source>
        </trans-unit>
        <trans-unit id="1030" translate="yes" xml:space="preserve" extradata="MT">
          <source>The capacity of this instance is adjusted as needed.</source>
        </trans-unit>
        <trans-unit id="1031" translate="yes" xml:space="preserve">
          <source>The position in this instance where insertion begins.</source>
        </trans-unit>
        <trans-unit id="1032" translate="yes" xml:space="preserve">
          <source>The value to insert.</source>
        </trans-unit>
        <trans-unit id="1033" translate="yes" xml:space="preserve">
          <source>A reference to this instance after the insert operation has completed.</source>
        </trans-unit>
        <trans-unit id="1034" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph> is less than zero or greater than the length of this instance.</source>
        </trans-unit>
        <trans-unit id="1035" translate="yes" xml:space="preserve">
          <source>Enlarging the value of this instance would exceed <ph id="ph1">&lt;xref href="System.Text.StringBuilder.MaxCapacity"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1036" translate="yes" xml:space="preserve">
          <source>Inserts the string representation of a specified 8-bit signed integer into this instance at the specified character position.</source>
        </trans-unit>
        <trans-unit id="1037" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.SByte.ToString%2A?displayProperty=fullName&gt;</ph> is used to get a string representation of <ph id="ph2">`value`</ph>.</source>
        </trans-unit>
        <trans-unit id="1038" translate="yes" xml:space="preserve" extradata="MT">
          <source>Existing characters are shifted to make room for the new text.</source>
        </trans-unit>
        <trans-unit id="1039" translate="yes" xml:space="preserve" extradata="MT">
          <source>The capacity is adjusted as needed.</source>
        </trans-unit>
        <trans-unit id="1040" translate="yes" xml:space="preserve">
          <source>The position in this instance where insertion begins.</source>
        </trans-unit>
        <trans-unit id="1041" translate="yes" xml:space="preserve">
          <source>The value to insert.</source>
        </trans-unit>
        <trans-unit id="1042" translate="yes" xml:space="preserve">
          <source>A reference to this instance after the insert operation has completed.</source>
        </trans-unit>
        <trans-unit id="1043" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph> is less than zero or greater than the length of this instance.</source>
        </trans-unit>
        <trans-unit id="1044" translate="yes" xml:space="preserve">
          <source>Enlarging the value of this instance would exceed <ph id="ph1">&lt;xref href="System.Text.StringBuilder.MaxCapacity"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1045" translate="yes" xml:space="preserve">
          <source>Inserts the string representation of a specified subarray of Unicode characters into this instance at the specified character position.</source>
        </trans-unit>
        <trans-unit id="1046" translate="yes" xml:space="preserve" extradata="MT">
          <source>Existing characters are shifted to make room for the new text.</source>
        </trans-unit>
        <trans-unit id="1047" translate="yes" xml:space="preserve" extradata="MT">
          <source>The capacity of this instance is adjusted as needed.</source>
        </trans-unit>
        <trans-unit id="1048" translate="yes" xml:space="preserve">
          <source>The position in this instance where insertion begins.</source>
        </trans-unit>
        <trans-unit id="1049" translate="yes" xml:space="preserve">
          <source>A character array.</source>
        </trans-unit>
        <trans-unit id="1050" translate="yes" xml:space="preserve">
          <source>The starting index within <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">value</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="1051" translate="yes" xml:space="preserve">
          <source>The number of characters to insert.</source>
        </trans-unit>
        <trans-unit id="1052" translate="yes" xml:space="preserve">
          <source>A reference to this instance after the insert operation has completed.</source>
        </trans-unit>
        <trans-unit id="1053" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;value&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>, and <ph id="ph3">&lt;code&gt;startIndex&lt;/code&gt;</ph> and <ph id="ph4">&lt;code&gt;charCount&lt;/code&gt;</ph> are not zero.</source>
        </trans-unit>
        <trans-unit id="1054" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph>, <ph id="ph2">&lt;code&gt;startIndex&lt;/code&gt;</ph>, or <ph id="ph3">&lt;code&gt;charCount&lt;/code&gt;</ph> is less than zero.</source>
        </trans-unit>
        <trans-unit id="1055" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="1056" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph> is greater than the length of this instance.</source>
        </trans-unit>
        <trans-unit id="1057" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="1058" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;startIndex&lt;/code&gt;</ph> plus <ph id="ph2">&lt;code&gt;charCount&lt;/code&gt;</ph> is not a position within <ph id="ph3">&lt;code&gt;value&lt;/code&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1059" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="1060" translate="yes" xml:space="preserve">
          <source>Enlarging the value of this instance would exceed <ph id="ph1">&lt;xref href="System.Text.StringBuilder.MaxCapacity"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1061" translate="yes" xml:space="preserve">
          <source>Inserts the string representation of an object into this instance at the specified character position.</source>
        </trans-unit>
        <trans-unit id="1062" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Object.ToString%2A?displayProperty=fullName&gt;</ph> is used to get a string representation of <ph id="ph2">`value`</ph>.</source>
        </trans-unit>
        <trans-unit id="1063" translate="yes" xml:space="preserve" extradata="MT">
          <source>Existing characters are shifted to make room for the new text.</source>
        </trans-unit>
        <trans-unit id="1064" translate="yes" xml:space="preserve" extradata="MT">
          <source>The capacity of this instance is adjusted as needed.</source>
        </trans-unit>
        <trans-unit id="1065" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`value`</ph> is <ph id="ph2">`null`</ph>, the value of this instance is unchanged.</source>
        </trans-unit>
        <trans-unit id="1066" translate="yes" xml:space="preserve">
          <source>The position in this instance where insertion begins.</source>
        </trans-unit>
        <trans-unit id="1067" translate="yes" xml:space="preserve">
          <source>The object to insert, or <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1068" translate="yes" xml:space="preserve">
          <source>A reference to this instance after the insert operation has completed.</source>
        </trans-unit>
        <trans-unit id="1069" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph> is less than zero or greater than the length of this instance.</source>
        </trans-unit>
        <trans-unit id="1070" translate="yes" xml:space="preserve">
          <source>Enlarging the value of this instance would exceed <ph id="ph1">&lt;xref href="System.Text.StringBuilder.MaxCapacity"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1071" translate="yes" xml:space="preserve">
          <source>Inserts the string representation of a specified 32-bit signed integer into this instance at the specified character position.</source>
        </trans-unit>
        <trans-unit id="1072" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Int32.ToString%2A?displayProperty=fullName&gt;</ph> is used to get a string representation of <ph id="ph2">`value`</ph>.</source>
        </trans-unit>
        <trans-unit id="1073" translate="yes" xml:space="preserve" extradata="MT">
          <source>Existing characters are shifted to make room for the new text.</source>
        </trans-unit>
        <trans-unit id="1074" translate="yes" xml:space="preserve" extradata="MT">
          <source>The capacity of this instance is adjusted as needed.</source>
        </trans-unit>
        <trans-unit id="1075" translate="yes" xml:space="preserve">
          <source>The position in this instance where insertion begins.</source>
        </trans-unit>
        <trans-unit id="1076" translate="yes" xml:space="preserve">
          <source>The value to insert.</source>
        </trans-unit>
        <trans-unit id="1077" translate="yes" xml:space="preserve">
          <source>A reference to this instance after the insert operation has completed.</source>
        </trans-unit>
        <trans-unit id="1078" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph> is less than zero or greater than the length of this instance.</source>
        </trans-unit>
        <trans-unit id="1079" translate="yes" xml:space="preserve">
          <source>Enlarging the value of this instance would exceed <ph id="ph1">&lt;xref href="System.Text.StringBuilder.MaxCapacity"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1080" translate="yes" xml:space="preserve">
          <source>Inserts the string representation of a specified 16-bit signed integer into this instance at the specified character position.</source>
        </trans-unit>
        <trans-unit id="1081" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Int16.ToString%2A?displayProperty=fullName&gt;</ph> is used to get a string representation of <ph id="ph2">`value`</ph>.</source>
        </trans-unit>
        <trans-unit id="1082" translate="yes" xml:space="preserve" extradata="MT">
          <source>Existing characters are shifted to make room for the new text.</source>
        </trans-unit>
        <trans-unit id="1083" translate="yes" xml:space="preserve" extradata="MT">
          <source>The capacity of this instance is adjusted as needed.</source>
        </trans-unit>
        <trans-unit id="1084" translate="yes" xml:space="preserve">
          <source>The position in this instance where insertion begins.</source>
        </trans-unit>
        <trans-unit id="1085" translate="yes" xml:space="preserve">
          <source>The value to insert.</source>
        </trans-unit>
        <trans-unit id="1086" translate="yes" xml:space="preserve">
          <source>A reference to this instance after the insert operation has completed.</source>
        </trans-unit>
        <trans-unit id="1087" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph> is less than zero or greater than the length of this instance.</source>
        </trans-unit>
        <trans-unit id="1088" translate="yes" xml:space="preserve">
          <source>Enlarging the value of this instance would exceed <ph id="ph1">&lt;xref href="System.Text.StringBuilder.MaxCapacity"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1089" translate="yes" xml:space="preserve">
          <source>Inserts the string representation of a double-precision floating-point number into this instance at the specified character position.</source>
        </trans-unit>
        <trans-unit id="1090" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Double.ToString%2A?displayProperty=fullName&gt;</ph> is used to get a string representation of <ph id="ph2">`value`</ph>.</source>
        </trans-unit>
        <trans-unit id="1091" translate="yes" xml:space="preserve" extradata="MT">
          <source>Existing characters are shifted to make room for the new text.</source>
        </trans-unit>
        <trans-unit id="1092" translate="yes" xml:space="preserve" extradata="MT">
          <source>The capacity of this instance is adjusted as needed.</source>
        </trans-unit>
        <trans-unit id="1093" translate="yes" xml:space="preserve">
          <source>The position in this instance where insertion begins.</source>
        </trans-unit>
        <trans-unit id="1094" translate="yes" xml:space="preserve">
          <source>The value to insert.</source>
        </trans-unit>
        <trans-unit id="1095" translate="yes" xml:space="preserve">
          <source>A reference to this instance after the insert operation has completed.</source>
        </trans-unit>
        <trans-unit id="1096" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph> is less than zero or greater than the length of this instance.</source>
        </trans-unit>
        <trans-unit id="1097" translate="yes" xml:space="preserve">
          <source>Enlarging the value of this instance would exceed <ph id="ph1">&lt;xref href="System.Text.StringBuilder.MaxCapacity"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1098" translate="yes" xml:space="preserve">
          <source>Inserts the string representation of a decimal number into this instance at the specified character position.</source>
        </trans-unit>
        <trans-unit id="1099" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Decimal.ToString%2A?displayProperty=fullName&gt;</ph> is used to get a string representation of <ph id="ph2">`value`</ph>.</source>
        </trans-unit>
        <trans-unit id="1100" translate="yes" xml:space="preserve" extradata="MT">
          <source>Existing characters are shifted to make room for the new text.</source>
        </trans-unit>
        <trans-unit id="1101" translate="yes" xml:space="preserve" extradata="MT">
          <source>The capacity of this instance is adjusted as needed.</source>
        </trans-unit>
        <trans-unit id="1102" translate="yes" xml:space="preserve">
          <source>The position in this instance where insertion begins.</source>
        </trans-unit>
        <trans-unit id="1103" translate="yes" xml:space="preserve">
          <source>The value to insert.</source>
        </trans-unit>
        <trans-unit id="1104" translate="yes" xml:space="preserve">
          <source>A reference to this instance after the insert operation has completed.</source>
        </trans-unit>
        <trans-unit id="1105" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph> is less than zero or greater than the length of this instance.</source>
        </trans-unit>
        <trans-unit id="1106" translate="yes" xml:space="preserve">
          <source>Enlarging the value of this instance would exceed <ph id="ph1">&lt;xref href="System.Text.StringBuilder.MaxCapacity"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1107" translate="yes" xml:space="preserve">
          <source>Inserts the string representation of a specified array of Unicode characters into this instance at the specified character position.</source>
        </trans-unit>
        <trans-unit id="1108" translate="yes" xml:space="preserve" extradata="MT">
          <source>Existing characters are shifted to make room for the new text.</source>
        </trans-unit>
        <trans-unit id="1109" translate="yes" xml:space="preserve" extradata="MT">
          <source>The capacity of this instance is adjusted as needed.</source>
        </trans-unit>
        <trans-unit id="1110" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`value`</ph> is <ph id="ph2">`null`</ph>, the <ph id="ph3">&lt;xref:System.Text.StringBuilder&gt;</ph> is not changed.</source>
        </trans-unit>
        <trans-unit id="1111" translate="yes" xml:space="preserve">
          <source>The position in this instance where insertion begins.</source>
        </trans-unit>
        <trans-unit id="1112" translate="yes" xml:space="preserve">
          <source>The character array to insert.</source>
        </trans-unit>
        <trans-unit id="1113" translate="yes" xml:space="preserve">
          <source>A reference to this instance after the insert operation has completed.</source>
        </trans-unit>
        <trans-unit id="1114" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph> is less than zero or greater than the length of this instance.</source>
        </trans-unit>
        <trans-unit id="1115" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="1116" translate="yes" xml:space="preserve">
          <source>Enlarging the value of this instance would exceed <ph id="ph1">&lt;xref href="System.Text.StringBuilder.MaxCapacity"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1117" translate="yes" xml:space="preserve">
          <source>Inserts the string representation of a specified Unicode character into this instance at the specified character position.</source>
        </trans-unit>
        <trans-unit id="1118" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Char.ToString%2A?displayProperty=fullName&gt;</ph> is used to get a string representation of <ph id="ph2">`value`</ph>.</source>
        </trans-unit>
        <trans-unit id="1119" translate="yes" xml:space="preserve" extradata="MT">
          <source>Existing characters are shifted to make room for the new text.</source>
        </trans-unit>
        <trans-unit id="1120" translate="yes" xml:space="preserve" extradata="MT">
          <source>The capacity of this instance is adjusted as needed.</source>
        </trans-unit>
        <trans-unit id="1121" translate="yes" xml:space="preserve">
          <source>The position in this instance where insertion begins.</source>
        </trans-unit>
        <trans-unit id="1122" translate="yes" xml:space="preserve">
          <source>The value to insert.</source>
        </trans-unit>
        <trans-unit id="1123" translate="yes" xml:space="preserve">
          <source>A reference to this instance after the insert operation has completed.</source>
        </trans-unit>
        <trans-unit id="1124" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph> is less than zero or greater than the length of this instance.</source>
        </trans-unit>
        <trans-unit id="1125" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="1126" translate="yes" xml:space="preserve">
          <source>Enlarging the value of this instance would exceed <ph id="ph1">&lt;xref href="System.Text.StringBuilder.MaxCapacity"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1127" translate="yes" xml:space="preserve">
          <source>Inserts the string representation of a specified 8-bit unsigned integer into this instance at the specified character position.</source>
        </trans-unit>
        <trans-unit id="1128" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Byte.ToString%2A?displayProperty=fullName&gt;</ph> is used to get a string representation of <ph id="ph2">`value`</ph>.</source>
        </trans-unit>
        <trans-unit id="1129" translate="yes" xml:space="preserve" extradata="MT">
          <source>Existing characters are shifted to make room for the new text.</source>
        </trans-unit>
        <trans-unit id="1130" translate="yes" xml:space="preserve" extradata="MT">
          <source>The capacity of this instance is adjusted as needed.</source>
        </trans-unit>
        <trans-unit id="1131" translate="yes" xml:space="preserve">
          <source>The position in this instance where insertion begins.</source>
        </trans-unit>
        <trans-unit id="1132" translate="yes" xml:space="preserve">
          <source>The value to insert.</source>
        </trans-unit>
        <trans-unit id="1133" translate="yes" xml:space="preserve">
          <source>A reference to this instance after the insert operation has completed.</source>
        </trans-unit>
        <trans-unit id="1134" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph> is less than zero or greater than the length of this instance.</source>
        </trans-unit>
        <trans-unit id="1135" translate="yes" xml:space="preserve">
          <source>Enlarging the value of this instance would exceed <ph id="ph1">&lt;xref href="System.Text.StringBuilder.MaxCapacity"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1136" translate="yes" xml:space="preserve">
          <source>Inserts the string representation of a Boolean value into this instance at the specified character position.</source>
        </trans-unit>
        <trans-unit id="1137" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Boolean.ToString%2A?displayProperty=fullName&gt;</ph> is used to get a string representation of <ph id="ph2">`value`</ph>.</source>
        </trans-unit>
        <trans-unit id="1138" translate="yes" xml:space="preserve" extradata="MT">
          <source>Existing characters are shifted to make room for the new text.</source>
        </trans-unit>
        <trans-unit id="1139" translate="yes" xml:space="preserve" extradata="MT">
          <source>The capacity is adjusted as needed.</source>
        </trans-unit>
        <trans-unit id="1140" translate="yes" xml:space="preserve">
          <source>The position in this instance where insertion begins.</source>
        </trans-unit>
        <trans-unit id="1141" translate="yes" xml:space="preserve">
          <source>The value to insert.</source>
        </trans-unit>
        <trans-unit id="1142" translate="yes" xml:space="preserve">
          <source>A reference to this instance after the insert operation has completed.</source>
        </trans-unit>
        <trans-unit id="1143" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph> is less than zero or greater than the length of this instance.</source>
        </trans-unit>
        <trans-unit id="1144" translate="yes" xml:space="preserve">
          <source>Enlarging the value of this instance would exceed <ph id="ph1">&lt;xref href="System.Text.StringBuilder.MaxCapacity"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1145" translate="yes" xml:space="preserve">
          <source>Inserts the string representation of a 64-bit signed integer into this instance at the specified character position.</source>
        </trans-unit>
        <trans-unit id="1146" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Int64.ToString%2A?displayProperty=fullName&gt;</ph> is used to get a string representation of <ph id="ph2">`value`</ph>.</source>
        </trans-unit>
        <trans-unit id="1147" translate="yes" xml:space="preserve" extradata="MT">
          <source>Existing characters are shifted to make room for the new text.</source>
        </trans-unit>
        <trans-unit id="1148" translate="yes" xml:space="preserve" extradata="MT">
          <source>The capacity of this instance is adjusted as needed.</source>
        </trans-unit>
        <trans-unit id="1149" translate="yes" xml:space="preserve">
          <source>The position in this instance where insertion begins.</source>
        </trans-unit>
        <trans-unit id="1150" translate="yes" xml:space="preserve">
          <source>The value to insert.</source>
        </trans-unit>
        <trans-unit id="1151" translate="yes" xml:space="preserve">
          <source>A reference to this instance after the insert operation has completed.</source>
        </trans-unit>
        <trans-unit id="1152" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph> is less than zero or greater than the length of this instance.</source>
        </trans-unit>
        <trans-unit id="1153" translate="yes" xml:space="preserve">
          <source>Enlarging the value of this instance would exceed <ph id="ph1">&lt;xref href="System.Text.StringBuilder.MaxCapacity"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1154" translate="yes" xml:space="preserve">
          <source>Gets or sets the length of the current <ph id="ph1">&lt;xref href="System.Text.StringBuilder"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="1155" translate="yes" xml:space="preserve" extradata="MT">
          <source>The length of a <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> object is defined by its number of <ph id="ph2">&lt;xref:System.Char&gt;</ph> objects.</source>
        </trans-unit>
        <trans-unit id="1156" translate="yes" xml:space="preserve" extradata="MT">
          <source>Like the<ph id="ph1">&lt;xref:System.String.Length%2A?displayProperty=fullName&gt;</ph> property, the <ph id="ph2">&lt;xref:System.Text.StringBuilder.Length%2A&gt;</ph> property indicates the length of the current string object.</source>
        </trans-unit>
        <trans-unit id="1157" translate="yes" xml:space="preserve" extradata="MT">
          <source>Unlike the <ph id="ph1">&lt;xref:System.String.Length%2A?displayProperty=fullName&gt;</ph> property, which is read-only, the <ph id="ph2">&lt;xref:System.Text.StringBuilder.Length%2A&gt;</ph> property allows you to modify the length of the string stored to the <ph id="ph3">&lt;xref:System.Text.StringBuilder&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="1158" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the specified length is less than the current length, the current <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> object is truncated to the specified length.</source>
        </trans-unit>
        <trans-unit id="1159" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the specified length is greater than the current length, the end of the string value of the current <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> object is padded with the Unicode NULL character (U+0000).</source>
        </trans-unit>
        <trans-unit id="1160" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the specified length is greater than the current capacity, <ph id="ph1">&lt;xref:System.Text.StringBuilder.Capacity%2A&gt;</ph> increases so that it is greater than or equal to the specified length.</source>
        </trans-unit>
        <trans-unit id="1161" translate="yes" xml:space="preserve">
          <source>The length of this instance.</source>
        </trans-unit>
        <trans-unit id="1162" translate="yes" xml:space="preserve">
          <source>The value specified for a set operation is less than zero or greater than <ph id="ph1">&lt;xref href="System.Text.StringBuilder.MaxCapacity"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1163" translate="yes" xml:space="preserve">
          <source>Gets the maximum capacity of this instance.</source>
        </trans-unit>
        <trans-unit id="1164" translate="yes" xml:space="preserve" extradata="MT">
          <source>The maximum capacity for this implementation is <ph id="ph1">&lt;xref:System.Int32?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1165" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, this value is implementation-specific and might be different in other or later implementations.</source>
        </trans-unit>
        <trans-unit id="1166" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can explicitly set the maximum capacity of a <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> object by calling the <ph id="ph2">&lt;xref:System.Text.StringBuilder.%23ctor%28System.Int32%2CSystem.Int32%29&gt;</ph> constructor.</source>
        </trans-unit>
        <trans-unit id="1167" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the<ph id="ph1">[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]</ph> and the <ph id="ph2">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph>, when you instantiate the <ph id="ph3">&lt;xref:System.Text.StringBuilder&gt;</ph> object by calling the <ph id="ph4">&lt;xref:System.Text.StringBuilder.%23ctor%28System.Int32%2CSystem.Int32%29&gt;</ph> constructor, both the length and the capacity of the <ph id="ph5">&lt;xref:System.Text.StringBuilder&gt;</ph> instance can grow beyond the value of its <ph id="ph6">&lt;xref:System.Text.StringBuilder.MaxCapacity%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="1168" translate="yes" xml:space="preserve" extradata="MT">
          <source>This can occur particularly when you call the <ph id="ph1">&lt;xref:System.Text.StringBuilder.Append%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Text.StringBuilder.AppendFormat%2A&gt;</ph> methods to append small strings.</source>
        </trans-unit>
        <trans-unit id="1169" translate="yes" xml:space="preserve">
          <source>The maximum number of characters this instance can hold.</source>
        </trans-unit>
        <trans-unit id="1170" translate="yes" xml:space="preserve">
          <source>Removes the specified range of characters from this instance.</source>
        </trans-unit>
        <trans-unit id="1171" translate="yes" xml:space="preserve" extradata="MT">
          <source>The current method removes the specified range of characters from the current instance.</source>
        </trans-unit>
        <trans-unit id="1172" translate="yes" xml:space="preserve" extradata="MT">
          <source>The characters at (<ph id="ph1">`startIndex`</ph><ph id="ph2"> + </ph><ph id="ph3">`length`</ph>) are moved to <ph id="ph4">`startIndex`</ph>, and the string value of the current instance is shortened by <ph id="ph5">`length`</ph>.</source>
        </trans-unit>
        <trans-unit id="1173" translate="yes" xml:space="preserve" extradata="MT">
          <source>The capacity of the current instance is unaffected.</source>
        </trans-unit>
        <trans-unit id="1174" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Text.StringBuilder.Remove%2A&gt;</ph> method modifies the value of the current <ph id="ph2">&lt;xref:System.Text.StringBuilder&gt;</ph> instance and returns that instance.</source>
        </trans-unit>
        <trans-unit id="1175" translate="yes" xml:space="preserve" extradata="MT">
          <source>It does not create and return a new <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="1176" translate="yes" xml:space="preserve">
          <source>The number of characters to remove.</source>
        </trans-unit>
        <trans-unit id="1177" translate="yes" xml:space="preserve">
          <source>A reference to this instance after the excise operation has completed.</source>
        </trans-unit>
        <trans-unit id="1178" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">startIndex</ph><ept id="p1">&lt;/code&gt;</ept> or <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">length</ph><ept id="p2">&lt;/code&gt;</ept> is less than zero, or <bpt id="p3">&lt;code&gt;</bpt><ph id="ph3">startIndex</ph><ept id="p3">&lt;/code&gt;</ept><ph id="ph4"> + </ph><bpt id="p4">&lt;code&gt;</bpt><ph id="ph5">length</ph><ept id="p4">&lt;/code&gt;</ept> is greater than the length of this instance.</source>
        </trans-unit>
        <trans-unit id="1179" translate="yes" xml:space="preserve">
          <source>Replaces all occurrences of a specified character in this instance with another specified character.</source>
        </trans-unit>
        <trans-unit id="1180" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method performs an ordinal, case-sensitive comparison to identify occurrences of <ph id="ph1">`oldChar`</ph> in the current instance.</source>
        </trans-unit>
        <trans-unit id="1181" translate="yes" xml:space="preserve" extradata="MT">
          <source>The size of the current <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> instance is unchanged after the replacement.</source>
        </trans-unit>
        <trans-unit id="1182" translate="yes" xml:space="preserve">
          <source>The character to replace.</source>
        </trans-unit>
        <trans-unit id="1183" translate="yes" xml:space="preserve">
          <source>The character that replaces <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">oldChar</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="1184" translate="yes" xml:space="preserve">
          <source>A reference to this instance with <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">oldChar</ph><ept id="p1">&lt;/code&gt;</ept> replaced by <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">newChar</ph><ept id="p2">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="1185" translate="yes" xml:space="preserve">
          <source>Replaces all occurrences of a specified string in this instance with another specified string.</source>
        </trans-unit>
        <trans-unit id="1186" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method performs an ordinal, case-sensitive comparison to identify occurrences of <ph id="ph1">`oldValue`</ph> in the current instance.</source>
        </trans-unit>
        <trans-unit id="1187" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`newValue`</ph> is <ph id="ph2">`null`</ph> or <ph id="ph3">&lt;xref:System.String?displayProperty=fullName&gt;</ph>, all occurrences of <ph id="ph4">`oldValue`</ph> are removed.</source>
        </trans-unit>
        <trans-unit id="1188" translate="yes" xml:space="preserve">
          <source>The string to replace.</source>
        </trans-unit>
        <trans-unit id="1189" translate="yes" xml:space="preserve">
          <source>The string that replaces <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">oldValue</ph><ept id="p1">&lt;/code&gt;</ept>, or <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1190" translate="yes" xml:space="preserve">
          <source>A reference to this instance with all instances of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">oldValue</ph><ept id="p1">&lt;/code&gt;</ept> replaced by <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">newValue</ph><ept id="p2">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="1191" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;oldValue&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1192" translate="yes" xml:space="preserve">
          <source>The length of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">oldValue</ph><ept id="p1">&lt;/code&gt;</ept> is zero.</source>
        </trans-unit>
        <trans-unit id="1193" translate="yes" xml:space="preserve">
          <source>Enlarging the value of this instance would exceed <ph id="ph1">&lt;xref href="System.Text.StringBuilder.MaxCapacity"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1194" translate="yes" xml:space="preserve">
          <source>Replaces, within a substring of this instance, all occurrences of a specified character with another specified character.</source>
        </trans-unit>
        <trans-unit id="1195" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method performs an ordinal, case-sensitive comparison to identify occurrences of <ph id="ph1">`oldChar`</ph> in the current instance.</source>
        </trans-unit>
        <trans-unit id="1196" translate="yes" xml:space="preserve" extradata="MT">
          <source>The size of the current <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> object is unchanged after the replacement.</source>
        </trans-unit>
        <trans-unit id="1197" translate="yes" xml:space="preserve">
          <source>The character to replace.</source>
        </trans-unit>
        <trans-unit id="1198" translate="yes" xml:space="preserve">
          <source>The character that replaces <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">oldChar</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="1199" translate="yes" xml:space="preserve">
          <source>The position in this instance where the substring begins.</source>
        </trans-unit>
        <trans-unit id="1200" translate="yes" xml:space="preserve">
          <source>The length of the substring.</source>
        </trans-unit>
        <trans-unit id="1201" translate="yes" xml:space="preserve">
          <source>A reference to this instance with <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">oldChar</ph><ept id="p1">&lt;/code&gt;</ept> replaced by <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">newChar</ph><ept id="p2">&lt;/code&gt;</ept> in the range from <bpt id="p3">&lt;code&gt;</bpt><ph id="ph3">startIndex</ph><ept id="p3">&lt;/code&gt;</ept> to <bpt id="p4">&lt;code&gt;</bpt><ph id="ph4">startIndex</ph><ept id="p4">&lt;/code&gt;</ept><ph id="ph5"> + </ph><bpt id="p5">&lt;code&gt;</bpt><ph id="ph6">count</ph><ept id="p5">&lt;/code&gt;</ept> -1.</source>
        </trans-unit>
        <trans-unit id="1202" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;startIndex&lt;/code&gt;</ph><ph id="ph2"> + &lt;code&gt;count&lt;/code&gt;</ph> is greater than the length of the value of this instance.</source>
        </trans-unit>
        <trans-unit id="1203" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="1204" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;startIndex&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;count&lt;/code&gt;</ph> is less than zero.</source>
        </trans-unit>
        <trans-unit id="1205" translate="yes" xml:space="preserve">
          <source>Replaces, within a substring of this instance, all occurrences of a specified string with another specified string.</source>
        </trans-unit>
        <trans-unit id="1206" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method performs an ordinal, case-sensitive comparison to identify occurrences of <ph id="ph1">`oldValue`</ph> in the specified substring.</source>
        </trans-unit>
        <trans-unit id="1207" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`newValue`</ph> is <ph id="ph2">`null`</ph> or <ph id="ph3">&lt;xref:System.String?displayProperty=fullName&gt;</ph>, all occurrences of <ph id="ph4">`oldValue`</ph> are removed.</source>
        </trans-unit>
        <trans-unit id="1208" translate="yes" xml:space="preserve">
          <source>The string to replace.</source>
        </trans-unit>
        <trans-unit id="1209" translate="yes" xml:space="preserve">
          <source>The string that replaces <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">oldValue</ph><ept id="p1">&lt;/code&gt;</ept>, or <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1210" translate="yes" xml:space="preserve">
          <source>The position in this instance where the substring begins.</source>
        </trans-unit>
        <trans-unit id="1211" translate="yes" xml:space="preserve">
          <source>The length of the substring.</source>
        </trans-unit>
        <trans-unit id="1212" translate="yes" xml:space="preserve">
          <source>A reference to this instance with all instances of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">oldValue</ph><ept id="p1">&lt;/code&gt;</ept> replaced by <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">newValue</ph><ept id="p2">&lt;/code&gt;</ept> in the range from <bpt id="p3">&lt;code&gt;</bpt><ph id="ph3">startIndex</ph><ept id="p3">&lt;/code&gt;</ept> to <bpt id="p4">&lt;code&gt;</bpt><ph id="ph4">startIndex</ph><ept id="p4">&lt;/code&gt;</ept><ph id="ph5"> + </ph><bpt id="p5">&lt;code&gt;</bpt><ph id="ph6">count</ph><ept id="p5">&lt;/code&gt;</ept> - 1.</source>
        </trans-unit>
        <trans-unit id="1213" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;oldValue&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1214" translate="yes" xml:space="preserve">
          <source>The length of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">oldValue</ph><ept id="p1">&lt;/code&gt;</ept> is zero.</source>
        </trans-unit>
        <trans-unit id="1215" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;startIndex&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;count&lt;/code&gt;</ph> is less than zero.</source>
        </trans-unit>
        <trans-unit id="1216" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="1217" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;startIndex&lt;/code&gt;</ph> plus <ph id="ph2">&lt;code&gt;count&lt;/code&gt;</ph> indicates a character position not within this instance.</source>
        </trans-unit>
        <trans-unit id="1218" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="1219" translate="yes" xml:space="preserve">
          <source>Enlarging the value of this instance would exceed <ph id="ph1">&lt;xref href="System.Text.StringBuilder.MaxCapacity"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1220" translate="yes" xml:space="preserve">
          <source>Converts the value of this instance to a <ph id="ph1">&lt;xref href="System.String"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1221" translate="yes" xml:space="preserve" extradata="MT">
          <source>You must call the <ph id="ph1">&lt;xref:System.Text.StringBuilder.ToString%2A&gt;</ph> method to convert the <ph id="ph2">&lt;xref:System.Text.StringBuilder&gt;</ph> object to a <ph id="ph3">&lt;xref:System.String&gt;</ph> object before you can pass the string represented by the <ph id="ph4">&lt;xref:System.Text.StringBuilder&gt;</ph> object to a method that has a <ph id="ph5">&lt;xref:System.String&gt;</ph> parameter or display it in the user interface.</source>
        </trans-unit>
        <trans-unit id="1222" translate="yes" xml:space="preserve">
          <source>A string whose value is the same as this instance.</source>
        </trans-unit>
        <trans-unit id="1223" translate="yes" xml:space="preserve">
          <source>Converts the value of a substring of this instance to a <ph id="ph1">&lt;xref href="System.String"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1224" translate="yes" xml:space="preserve" extradata="MT">
          <source>You must call the <ph id="ph1">&lt;xref:System.Text.StringBuilder.ToString%2A&gt;</ph> method to convert the <ph id="ph2">&lt;xref:System.Text.StringBuilder&gt;</ph> object to a <ph id="ph3">&lt;xref:System.String&gt;</ph> object before you can pass the string represented by the <ph id="ph4">&lt;xref:System.Text.StringBuilder&gt;</ph> object to a method that has a <ph id="ph5">&lt;xref:System.String&gt;</ph> parameter or display it in the user interface.</source>
        </trans-unit>
        <trans-unit id="1225" translate="yes" xml:space="preserve">
          <source>The starting position of the substring in this instance.</source>
        </trans-unit>
        <trans-unit id="1226" translate="yes" xml:space="preserve">
          <source>The length of the substring.</source>
        </trans-unit>
        <trans-unit id="1227" translate="yes" xml:space="preserve">
          <source>A string whose value is the same as the specified substring of this instance.</source>
        </trans-unit>
        <trans-unit id="1228" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;startIndex&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;length&lt;/code&gt;</ph> is less than zero.</source>
        </trans-unit>
        <trans-unit id="1229" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="1230" translate="yes" xml:space="preserve">
          <source>The sum of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">startIndex</ph><ept id="p1">&lt;/code&gt;</ept> and <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">length</ph><ept id="p2">&lt;/code&gt;</ept> is greater than the length of the current instance.</source>
        </trans-unit>
        <trans-unit id="1231" translate="yes" xml:space="preserve">
          <source>Populates a <ph id="ph1">&lt;xref href="System.Runtime.Serialization.SerializationInfo"&gt;&lt;/xref&gt;</ph> object with the data necessary to deserialize the current <ph id="ph2">&lt;xref href="System.Text.StringBuilder"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="1232" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`context`</ph> parameter is reserved for future use and does not participate in this operation.</source>
        </trans-unit>
        <trans-unit id="1233" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.Runtime.Serialization.SerializationInfo.AddValue%28System.String%2CSystem.Object%2CSystem.Type%29?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="1234" translate="yes" xml:space="preserve">
          <source>The object to populate with serialization information.</source>
        </trans-unit>
        <trans-unit id="1235" translate="yes" xml:space="preserve">
          <source>The place to store and retrieve serialized data.</source>
        </trans-unit>
        <trans-unit id="1236" translate="yes" xml:space="preserve">
          <source>Reserved for future use.</source>
        </trans-unit>
        <trans-unit id="1237" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;info&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>