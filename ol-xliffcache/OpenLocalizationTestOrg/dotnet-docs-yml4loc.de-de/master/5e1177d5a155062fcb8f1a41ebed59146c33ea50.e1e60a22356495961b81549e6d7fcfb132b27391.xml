{"nodes":[{"content":"Represents a particular manner of splitting a data source into multiple partitions.","nodes":[{"pos":[0,83],"content":"Represents a particular manner of splitting a data source into multiple partitions.","nodes":[{"content":"Represents a particular manner of splitting a data source into multiple partitions.","pos":[0,83]}]}],"pos":[745,829],"yaml":true},{"content":"For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md).","nodes":[{"pos":[0,145],"content":"For more information, see <bpt id=\"p1\">[</bpt>Custom Partitioners for PLINQ and TPL<ept id=\"p1\">](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)</ept>.","source":"For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)."}],"pos":[840,986],"yaml":true,"extradata":"MT"},{"content":"Type of the elements in the collection.","nodes":[{"pos":[0,39],"content":"Type of the elements in the collection.","nodes":[{"content":"Type of the elements in the collection.","pos":[0,39]}]}],"pos":[1581,1621],"yaml":true},{"content":"Creates a new partitioner instance.","nodes":[{"pos":[0,35],"content":"Creates a new partitioner instance.","nodes":[{"content":"Creates a new partitioner instance.","pos":[0,35]}]}],"pos":[3666,3702],"yaml":true},{"content":"Creates an object that can partition the underlying collection into a variable number of partitions.","nodes":[{"pos":[0,100],"content":"Creates an object that can partition the underlying collection into a variable number of partitions.","nodes":[{"content":"Creates an object that can partition the underlying collection into a variable number of partitions.","pos":[0,100]}]}],"pos":[5397,5498],"yaml":true},{"content":"The returned object implements the <xref:System.Collections.Generic.IEnumerable%601?displayProperty=fullName>interface. Calling <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> on the object creates another partition over the sequence.  \n  \n The <xref:System.Collections.Concurrent.Partitioner%601.GetDynamicPartitions%2A> method is only supported if the <xref:System.Collections.Concurrent.Partitioner%601.SupportsDynamicPartitions%2A> property returns true. For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md).","nodes":[{"pos":[0,253],"content":"The returned object implements the <xref:System.Collections.Generic.IEnumerable%601?displayProperty=fullName>interface. Calling <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> on the object creates another partition over the sequence.","nodes":[{"content":"The returned object implements the <xref:System.Collections.Generic.IEnumerable%601?displayProperty=fullName>interface. Calling <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> on the object creates another partition over the sequence.","pos":[0,253],"nodes":[{"content":"The returned object implements the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.IEnumerable%601?displayProperty=fullName&gt;</ph>interface.","pos":[0,119],"source":"The returned object implements the <xref:System.Collections.Generic.IEnumerable%601?displayProperty=fullName>interface."},{"content":"Calling <ph id=\"ph1\">&lt;xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A&gt;</ph> on the object creates another partition over the sequence.","pos":[120,253],"source":" Calling <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> on the object creates another partition over the sequence."}]}]},{"pos":[260,623],"content":"The <xref:System.Collections.Concurrent.Partitioner%601.GetDynamicPartitions%2A> method is only supported if the <xref:System.Collections.Concurrent.Partitioner%601.SupportsDynamicPartitions%2A> property returns true. For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md).","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Collections.Concurrent.Partitioner%601.GetDynamicPartitions%2A&gt;</ph> method is only supported if the <ph id=\"ph2\">&lt;xref:System.Collections.Concurrent.Partitioner%601.SupportsDynamicPartitions%2A&gt;</ph> property returns true.","pos":[0,217],"source":"The <xref:System.Collections.Concurrent.Partitioner%601.GetDynamicPartitions%2A> method is only supported if the <xref:System.Collections.Concurrent.Partitioner%601.SupportsDynamicPartitions%2A> property returns true."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Custom Partitioners for PLINQ and TPL<ept id=\"p1\">](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)</ept>.","pos":[218,363],"source":" For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)."}]}],"pos":[5509,6137],"yaml":true,"extradata":"MT"},{"content":"An object that can create partitions over the underlying data source.","nodes":[{"pos":[0,69],"content":"An object that can create partitions over the underlying data source.","nodes":[{"content":"An object that can create partitions over the underlying data source.","pos":[0,69]}]}],"pos":[6358,6428],"yaml":true},{"content":"Dynamic partitioning is not supported by the base class. You must implement it in a derived class.","nodes":[{"pos":[0,98],"content":"Dynamic partitioning is not supported by the base class. You must implement it in a derived class.","nodes":[{"content":"Dynamic partitioning is not supported by the base class. You must implement it in a derived class.","pos":[0,98],"nodes":[{"content":"Dynamic partitioning is not supported by the base class.","pos":[0,56]},{"content":"You must implement it in a derived class.","pos":[57,98]}]}]}],"pos":[6622,6721],"yaml":true},{"content":"Partitions the underlying collection into the given number of partitions.","nodes":[{"pos":[0,73],"content":"Partitions the underlying collection into the given number of partitions.","nodes":[{"content":"Partitions the underlying collection into the given number of partitions.","pos":[0,73]}]}],"pos":[8283,8357],"yaml":true},{"content":"A class that implements this method is expected to return exactly the number of partitions that are specified in `partitionCount`. If a partition contains no elements, then return an empty enumerator rather than null (Nothing in Visual Basic). For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md).","nodes":[{"pos":[0,389],"content":"A class that implements this method is expected to return exactly the number of partitions that are specified in `partitionCount`. If a partition contains no elements, then return an empty enumerator rather than null (Nothing in Visual Basic). For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md).","nodes":[{"content":"A class that implements this method is expected to return exactly the number of partitions that are specified in <ph id=\"ph1\">`partitionCount`</ph>.","pos":[0,130],"source":"A class that implements this method is expected to return exactly the number of partitions that are specified in `partitionCount`."},{"content":"If a partition contains no elements, then return an empty enumerator rather than null (Nothing in Visual Basic).","pos":[131,243]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Custom Partitioners for PLINQ and TPL<ept id=\"p1\">](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)</ept>.","pos":[244,389],"source":" For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)."}]}],"pos":[8368,8758],"yaml":true,"extradata":"MT"},{"content":"The number of partitions to create.","nodes":[{"pos":[0,35],"content":"The number of partitions to create.","nodes":[{"content":"The number of partitions to create.","pos":[0,35]}]}],"pos":[9000,9036],"yaml":true},{"content":"A list containing <code>partitionCount</code> enumerators.","nodes":[{"pos":[0,58],"content":"A list containing <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">partitionCount</ph><ept id=\"p1\">&lt;/code&gt;</ept> enumerators.","source":"A list containing <code>partitionCount</code> enumerators."}],"pos":[9161,9220],"yaml":true},{"content":"Gets whether additional partitions can be created dynamically.","nodes":[{"pos":[0,62],"content":"Gets whether additional partitions can be created dynamically.","nodes":[{"content":"Gets whether additional partitions can be created dynamically.","pos":[0,62]}]}],"pos":[10881,10944],"yaml":true},{"content":"If a derived class does not override and implement <xref:System.Collections.Concurrent.Partitioner%601.GetDynamicPartitions%2A>, <xref:System.Collections.Concurrent.Partitioner%601.SupportsDynamicPartitions%2A> should return false. The value of <xref:System.Collections.Concurrent.Partitioner%601.SupportsDynamicPartitions%2A> should not vary over the lifetime of this instance. For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md).","nodes":[{"pos":[0,524],"content":"If a derived class does not override and implement <xref:System.Collections.Concurrent.Partitioner%601.GetDynamicPartitions%2A>, <xref:System.Collections.Concurrent.Partitioner%601.SupportsDynamicPartitions%2A> should return false. The value of <xref:System.Collections.Concurrent.Partitioner%601.SupportsDynamicPartitions%2A> should not vary over the lifetime of this instance. For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md).","nodes":[{"content":"If a derived class does not override and implement <ph id=\"ph1\">&lt;xref:System.Collections.Concurrent.Partitioner%601.GetDynamicPartitions%2A&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Collections.Concurrent.Partitioner%601.SupportsDynamicPartitions%2A&gt;</ph> should return false.","pos":[0,231],"source":"If a derived class does not override and implement <xref:System.Collections.Concurrent.Partitioner%601.GetDynamicPartitions%2A>, <xref:System.Collections.Concurrent.Partitioner%601.SupportsDynamicPartitions%2A> should return false."},{"content":"The value of <ph id=\"ph1\">&lt;xref:System.Collections.Concurrent.Partitioner%601.SupportsDynamicPartitions%2A&gt;</ph> should not vary over the lifetime of this instance.","pos":[232,378],"source":" The value of <xref:System.Collections.Concurrent.Partitioner%601.SupportsDynamicPartitions%2A> should not vary over the lifetime of this instance."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Custom Partitioners for PLINQ and TPL<ept id=\"p1\">](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)</ept>.","pos":[379,524],"source":" For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)."}]}],"pos":[10955,11480],"yaml":true,"extradata":"MT"},{"content":"true if the <xref href=\"System.Collections.Concurrent.Partitioner`1\"></xref> can create partitions dynamically as they are requested; false if the <xref href=\"System.Collections.Concurrent.Partitioner`1\"></xref> can only allocate partitions statically.","nodes":[{"pos":[0,252],"content":"true if the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.Partitioner`1\"&gt;&lt;/xref&gt;</ph> can create partitions dynamically as they are requested; false if the <ph id=\"ph2\">&lt;xref href=\"System.Collections.Concurrent.Partitioner`1\"&gt;&lt;/xref&gt;</ph> can only allocate partitions statically.","source":"true if the <xref href=\"System.Collections.Concurrent.Partitioner`1\"></xref> can create partitions dynamically as they are requested; false if the <xref href=\"System.Collections.Concurrent.Partitioner`1\"></xref> can only allocate partitions statically."}],"pos":[11616,11869],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Collections.Concurrent.Partitioner`1\n  commentId: T:System.Collections.Concurrent.Partitioner`1\n  id: Partitioner`1\n  children:\n  - System.Collections.Concurrent.Partitioner`1.#ctor\n  - System.Collections.Concurrent.Partitioner`1.GetDynamicPartitions\n  - System.Collections.Concurrent.Partitioner`1.GetPartitions(System.Int32)\n  - System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions\n  langs:\n  - csharp\n  name: Partitioner<TSource>\n  nameWithType: Partitioner<TSource>\n  fullName: System.Collections.Concurrent.Partitioner<TSource>\n  type: Class\n  assemblies:\n  - System.Collections.Concurrent\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Concurrent\n  summary: Represents a particular manner of splitting a data source into multiple partitions.\n  remarks: For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md).\n  example:\n  - \"The following example shows how to implement a partitioner that returns a single element at a time:  \\n  \\n [!code-csharp[System.Collections.Concurrent.Partitioner#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.concurrent.partitioner/cs/partitioner.cs#1)]\\n [!code-vb[System.Collections.Concurrent.Partitioner#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.concurrent.partitioner/vb/partitioner.vb#1)]\"\n  syntax:\n    content: public abstract class Partitioner<TSource>\n    typeParameters:\n    - id: TSource\n      description: Type of the elements in the collection.\n  inheritance:\n  - System.Object\n  derivedClasses:\n  - System.Collections.Concurrent.OrderablePartitioner`1\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  extensionMethods:\n  - System.Linq.ParallelEnumerable.AsParallel``1(System.Collections.Concurrent.Partitioner{``0})\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/Partitioner`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Concurrent.Partitioner`1.#ctor\n  commentId: M:System.Collections.Concurrent.Partitioner`1.#ctor\n  id: '#ctor'\n  parent: System.Collections.Concurrent.Partitioner`1\n  langs:\n  - csharp\n  name: Partitioner<TSource>()\n  nameWithType: Partitioner<TSource>.Partitioner<TSource>()\n  fullName: Partitioner<TSource>.Partitioner<TSource>()\n  type: Constructor\n  assemblies:\n  - System.Collections.Concurrent\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Concurrent\n  summary: Creates a new partitioner instance.\n  syntax:\n    content: protected Partitioner ();\n    parameters: []\n  overload: System.Collections.Concurrent.Partitioner`1.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/Partitioner`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Concurrent.Partitioner`1.GetDynamicPartitions\n  commentId: M:System.Collections.Concurrent.Partitioner`1.GetDynamicPartitions\n  id: GetDynamicPartitions\n  parent: System.Collections.Concurrent.Partitioner`1\n  langs:\n  - csharp\n  name: GetDynamicPartitions()\n  nameWithType: Partitioner<TSource>.GetDynamicPartitions()\n  fullName: Partitioner<TSource>.GetDynamicPartitions()\n  type: Method\n  assemblies:\n  - System.Collections.Concurrent\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Concurrent\n  summary: Creates an object that can partition the underlying collection into a variable number of partitions.\n  remarks: \"The returned object implements the <xref:System.Collections.Generic.IEnumerable%601?displayProperty=fullName>interface. Calling <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> on the object creates another partition over the sequence.  \\n  \\n The <xref:System.Collections.Concurrent.Partitioner%601.GetDynamicPartitions%2A> method is only supported if the <xref:System.Collections.Concurrent.Partitioner%601.SupportsDynamicPartitions%2A> property returns true. For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md).\"\n  syntax:\n    content: public virtual System.Collections.Generic.IEnumerable<TSource> GetDynamicPartitions ();\n    parameters: []\n    return:\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: An object that can create partitions over the underlying data source.\n  overload: System.Collections.Concurrent.Partitioner`1.GetDynamicPartitions*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: Dynamic partitioning is not supported by the base class. You must implement it in a derived class.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/Partitioner`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Concurrent.Partitioner`1.GetPartitions(System.Int32)\n  commentId: M:System.Collections.Concurrent.Partitioner`1.GetPartitions(System.Int32)\n  id: GetPartitions(System.Int32)\n  parent: System.Collections.Concurrent.Partitioner`1\n  langs:\n  - csharp\n  name: GetPartitions(Int32)\n  nameWithType: Partitioner<TSource>.GetPartitions(Int32)\n  fullName: Partitioner<TSource>.GetPartitions(Int32)\n  type: Method\n  assemblies:\n  - System.Collections.Concurrent\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Concurrent\n  summary: Partitions the underlying collection into the given number of partitions.\n  remarks: A class that implements this method is expected to return exactly the number of partitions that are specified in `partitionCount`. If a partition contains no elements, then return an empty enumerator rather than null (Nothing in Visual Basic). For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md).\n  syntax:\n    content: public abstract System.Collections.Generic.IList<System.Collections.Generic.IEnumerator<TSource>> GetPartitions (int partitionCount);\n    parameters:\n    - id: partitionCount\n      type: System.Int32\n      description: The number of partitions to create.\n    return:\n      type: System.Collections.Generic.IList{System.Collections.Generic.IEnumerator{TSource}}\n      description: A list containing <code>partitionCount</code> enumerators.\n  overload: System.Collections.Concurrent.Partitioner`1.GetPartitions*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/Partitioner`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions\n  commentId: P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions\n  id: SupportsDynamicPartitions\n  parent: System.Collections.Concurrent.Partitioner`1\n  langs:\n  - csharp\n  name: SupportsDynamicPartitions\n  nameWithType: Partitioner<TSource>.SupportsDynamicPartitions\n  fullName: Partitioner<TSource>.SupportsDynamicPartitions\n  type: Property\n  assemblies:\n  - System.Collections.Concurrent\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Concurrent\n  summary: Gets whether additional partitions can be created dynamically.\n  remarks: If a derived class does not override and implement <xref:System.Collections.Concurrent.Partitioner%601.GetDynamicPartitions%2A>, <xref:System.Collections.Concurrent.Partitioner%601.SupportsDynamicPartitions%2A> should return false. The value of <xref:System.Collections.Concurrent.Partitioner%601.SupportsDynamicPartitions%2A> should not vary over the lifetime of this instance. For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md).\n  syntax:\n    content: public virtual bool SupportsDynamicPartitions { get; }\n    return:\n      type: System.Boolean\n      description: true if the <xref href=\"System.Collections.Concurrent.Partitioner`1\"></xref> can create partitions dynamically as they are requested; false if the <xref href=\"System.Collections.Concurrent.Partitioner`1\"></xref> can only allocate partitions statically.\n  overload: System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/Partitioner`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.NotSupportedException\n  parent: System\n  isExternal: false\n  name: NotSupportedException\n  nameWithType: NotSupportedException\n  fullName: System.NotSupportedException\n- uid: System.Collections.Concurrent.Partitioner`1.#ctor\n  parent: System.Collections.Concurrent.Partitioner`1\n  isExternal: false\n  name: Partitioner<TSource>()\n  nameWithType: Partitioner<TSource>.Partitioner<TSource>()\n  fullName: Partitioner<TSource>.Partitioner<TSource>()\n- uid: System.Collections.Concurrent.Partitioner`1.GetDynamicPartitions\n  parent: System.Collections.Concurrent.Partitioner`1\n  isExternal: false\n  name: GetDynamicPartitions()\n  nameWithType: Partitioner<TSource>.GetDynamicPartitions()\n  fullName: Partitioner<TSource>.GetDynamicPartitions()\n- uid: System.Collections.Generic.IEnumerable`1\n  name: IEnumerable<T>\n  nameWithType: IEnumerable<T>\n  fullName: System.Collections.Generic.IEnumerable<T>\n- uid: TSource\n  name: TSource\n  nameWithType: TSource\n  fullName: TSource\n- uid: System.Collections.Generic.IEnumerable{TSource}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<TSource>\n  nameWithType: IEnumerable<TSource>\n  fullName: System.Collections.Generic.IEnumerable<TSource>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    nameWithType: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TSource\n    name: TSource\n    nameWithType: TSource\n    fullName: TSource\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Collections.Concurrent.Partitioner`1.GetPartitions(System.Int32)\n  parent: System.Collections.Concurrent.Partitioner`1\n  isExternal: false\n  name: GetPartitions(Int32)\n  nameWithType: Partitioner<TSource>.GetPartitions(Int32)\n  fullName: Partitioner<TSource>.GetPartitions(Int32)\n- uid: System.Collections.Generic.IList`1\n  name: IList<T>\n  nameWithType: IList<T>\n  fullName: System.Collections.Generic.IList<T>\n- uid: System.Collections.Generic.IEnumerator`1\n  name: IEnumerator<T>\n  nameWithType: IEnumerator<T>\n  fullName: System.Collections.Generic.IEnumerator<T>\n- uid: System.Collections.Generic.IList{System.Collections.Generic.IEnumerator{TSource}}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IList<IEnumerator<TSource>>\n  nameWithType: IList<IEnumerator<TSource>>\n  fullName: System.Collections.Generic.IList<System.Collections.Generic.IEnumerator<TSource>>\n  spec.csharp:\n  - uid: System.Collections.Generic.IList`1\n    name: IList\n    nameWithType: IList\n    fullName: System.Collections.Generic.IList\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Collections.Generic.IEnumerator`1\n    name: IEnumerator\n    nameWithType: IEnumerator\n    fullName: System.Collections.Generic.IEnumerator\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TSource\n    name: TSource\n    nameWithType: TSource\n    fullName: TSource\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions\n  parent: System.Collections.Concurrent.Partitioner`1\n  isExternal: false\n  name: SupportsDynamicPartitions\n  nameWithType: Partitioner<TSource>.SupportsDynamicPartitions\n  fullName: Partitioner<TSource>.SupportsDynamicPartitions\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Collections.Concurrent.Partitioner`1.#ctor*\n  parent: System.Collections.Concurrent.Partitioner`1\n  isExternal: false\n  name: Partitioner<TSource>\n  nameWithType: Partitioner<TSource>.Partitioner<TSource>\n  fullName: Partitioner<TSource>.Partitioner<TSource>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/Partitioner`1.xml\n- uid: System.Collections.Concurrent.Partitioner`1.GetDynamicPartitions*\n  parent: System.Collections.Concurrent.Partitioner`1\n  isExternal: false\n  name: GetDynamicPartitions\n  nameWithType: Partitioner<TSource>.GetDynamicPartitions\n  fullName: Partitioner<TSource>.GetDynamicPartitions\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/Partitioner`1.xml\n- uid: System.Collections.Concurrent.Partitioner`1.GetPartitions*\n  parent: System.Collections.Concurrent.Partitioner`1\n  isExternal: false\n  name: GetPartitions\n  nameWithType: Partitioner<TSource>.GetPartitions\n  fullName: Partitioner<TSource>.GetPartitions\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/Partitioner`1.xml\n- uid: System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions*\n  parent: System.Collections.Concurrent.Partitioner`1\n  isExternal: false\n  name: SupportsDynamicPartitions\n  nameWithType: Partitioner<TSource>.SupportsDynamicPartitions\n  fullName: Partitioner<TSource>.SupportsDynamicPartitions\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/Partitioner`1.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.Linq.ParallelEnumerable.AsParallel``1(System.Collections.Concurrent.Partitioner{``0})\n  parent: System.Linq.ParallelEnumerable\n  isExternal: false\n  name: AsParallel<TSource>(Partitioner<TSource>)\n  nameWithType: ParallelEnumerable.AsParallel<TSource>(Partitioner<TSource>)\n  fullName: ParallelEnumerable.AsParallel<TSource>(Partitioner<TSource>)\n"}