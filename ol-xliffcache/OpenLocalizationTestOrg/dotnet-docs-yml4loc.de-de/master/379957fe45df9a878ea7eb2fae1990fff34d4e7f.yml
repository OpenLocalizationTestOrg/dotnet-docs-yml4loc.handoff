### YamlMime:ManagedReference
items:
- uid: System.AppDomainManager
  commentId: T:System.AppDomainManager
  id: AppDomainManager
  children:
  - System.AppDomainManager.#ctor
  - System.AppDomainManager.ApplicationActivator
  - System.AppDomainManager.CheckSecuritySettings(System.Security.SecurityState)
  - System.AppDomainManager.CreateDomain(System.String,System.Security.Policy.Evidence,System.AppDomainSetup)
  - System.AppDomainManager.CreateDomainHelper(System.String,System.Security.Policy.Evidence,System.AppDomainSetup)
  - System.AppDomainManager.EntryAssembly
  - System.AppDomainManager.HostExecutionContextManager
  - System.AppDomainManager.HostSecurityManager
  - System.AppDomainManager.InitializationFlags
  - System.AppDomainManager.InitializeNewDomain(System.AppDomainSetup)
  langs:
  - csharp
  name: AppDomainManager
  nameWithType: AppDomainManager
  fullName: System.AppDomainManager
  type: Class
  assemblies:
  - mscorlib
  namespace: System
  summary: Provides a managed equivalent of an unmanaged host.
  remarks: "> [!IMPORTANT]\n>  Do not use <xref:System.AppDomainManager> to configure an application domain in ASP.NET. In ASP.NET, configuration must be handled by the host.  \n  \n Implementing the <xref:System.AppDomainManager> class enables a hosting application to participate in the creation of new application domains. To replace the default <xref:System.AppDomainManager>, identify the assembly and type of the replacement <xref:System.AppDomainManager> in the APPDOMAIN_MANAGER_ASM and APPDOMAIN_MANAGER_TYPE environment variables, or use the [\\<appDomainManagerAssembly>](~/docs/framework/configure-apps/file-schema/runtime/appdomainmanagerassembly-element.md) and [\\<appDomainManagerType>](~/docs/framework/configure-apps/file-schema/runtime/appdomainmanagertype-element.md) elements in your configuration file. The assembly must be fully trusted and be contained in the global assembly cache or the directory of the starting application. The type and assembly names must be fully qualified in the environment variables. For example:  \n  \n `set APPDOMAIN_MANAGER_TYPE=MyNamespace.TestAppDomainManager`  \n  \n `set APPDOMAIN_MANAGER_ASM=customappDomainmanager, Version=1.0.0.0, Culture=neutral, PublicKeyToken=f1368f7b12a08d72`  \n  \n> [!IMPORTANT]\n>  If the assembly that contains your subclass of <xref:System.AppDomainManager> depends on assemblies that are marked with the conditional <xref:System.Security.AllowPartiallyTrustedCallersAttribute> (APTCA) attribute, you must include those assemblies in the list that you pass to the <xref:System.AppDomainSetup.PartialTrustVisibleAssemblies%2A> property of the <xref:System.AppDomainSetup> you use to create application domains. Otherwise, the assemblies that are marked with the conditional APTCA attribute will be disabled.  \n  \n The <xref:System.AppDomainManager> is the managed equivalent of the unmanaged host. An <xref:System.AppDomainManager> object participates in the creation of new application domains in a process and can customize the new <xref:System.AppDomain> before other managed code runs. The <xref:System.AppDomainManager> can also supply host managers that participate in other aspects of common language runtime execution. For example, an <xref:System.AppDomainManager> can identify a <xref:System.Security.HostSecurityManager> object that participates in the security decisions of the application domain.  \n  \n> [!NOTE]\n>  Only assemblies granted `FullTrust`, such as assemblies in the global assembly cache or identified as `fullTrustAssemblies` in the <xref:System.AppDomain.CreateDomain%28System.String%2CSystem.Security.Policy.Evidence%2CSystem.AppDomainSetup%2CSystem.Security.PermissionSet%2CSystem.Security.Policy.StrongName%5B%5D%29?displayProperty=fullName> method can be loaded in the  <xref:System.AppDomainManager.%23ctor%2A> constructor and the <xref:System.AppDomainManager.InitializeNewDomain%2A> method.  \n  \n> [!NOTE]\n>  This class contains a link demand and an inheritance demand at the class level. A <xref:System.Security.SecurityException> is thrown when either the immediate caller or the derived class does not have infrastructure permission. For details about security demands, see [Link Demands](~/docs/framework/misc/link-demands.md) and [Inheritance Demands](http://msdn.microsoft.com/en-us/28b9adbb-8f08-4f10-b856-dbf59eb932d9)."
  example:
  - "The following example shows a very simple implementation of <xref:System.AppDomainManager>.  \n  \n [!code-csharp[System.AppDomainManager#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.AppDomainManager/CS/customAppDomainManager.cs#1)]\n [!code-vb[System.AppDomainManager#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.AppDomainManager/VB/customAppDomainManager.vb#1)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class AppDomainManager : MarshalByRefObject
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  implements: []
  inheritedMembers:
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  attributes:
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/AppDomainManager.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.AppDomainManager.#ctor
  commentId: M:System.AppDomainManager.#ctor
  id: '#ctor'
  parent: System.AppDomainManager
  langs:
  - csharp
  name: AppDomainManager()
  nameWithType: AppDomainManager.AppDomainManager()
  fullName: AppDomainManager.AppDomainManager()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System
  summary: Initializes a new instance of the <xref href="System.AppDomainManager"></xref> class.
  remarks: >-
    > [!NOTE]

    >  Only assemblies granted `FullTrust`, such as assemblies in the global assembly cache or identified as `fullTrustAssemblies` in the <xref:System.AppDomain.CreateDomain%28System.String%2CSystem.Security.Policy.Evidence%2CSystem.AppDomainSetup%2CSystem.Security.PermissionSet%2CSystem.Security.Policy.StrongName%5B%5D%29?displayProperty=fullName> method can be loaded in the  <xref:System.AppDomainManager.%23ctor%2A> constructor and the <xref:System.AppDomainManager.InitializeNewDomain%2A> method.
  syntax:
    content: public AppDomainManager ();
    parameters: []
  overload: System.AppDomainManager.#ctor*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/AppDomainManager.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.AppDomainManager.ApplicationActivator
  commentId: P:System.AppDomainManager.ApplicationActivator
  id: ApplicationActivator
  parent: System.AppDomainManager
  langs:
  - csharp
  name: ApplicationActivator
  nameWithType: AppDomainManager.ApplicationActivator
  fullName: AppDomainManager.ApplicationActivator
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets the application activator that handles the activation of add-ins and manifest-based applications for the domain.
  remarks: There is a single designated instance of the <xref:System.Runtime.Hosting.ApplicationActivator> class in each <xref:System.AppDomain> to which all add-in and manifest-based application activation calls are routed. The <xref:System.AppDomainManager> for the current <xref:System.AppDomain> can provide its own custom <xref:System.Runtime.Hosting.ApplicationActivator>, or an instance of the default <xref:System.Runtime.Hosting.ApplicationActivator> is created.
  syntax:
    content: public virtual System.Runtime.Hosting.ApplicationActivator ApplicationActivator { get; }
    return:
      type: System.Runtime.Hosting.ApplicationActivator
      description: The application activator.
  overload: System.AppDomainManager.ApplicationActivator*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/AppDomainManager.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.AppDomainManager.CheckSecuritySettings(System.Security.SecurityState)
  commentId: M:System.AppDomainManager.CheckSecuritySettings(System.Security.SecurityState)
  id: CheckSecuritySettings(System.Security.SecurityState)
  parent: System.AppDomainManager
  langs:
  - csharp
  name: CheckSecuritySettings(SecurityState)
  nameWithType: AppDomainManager.CheckSecuritySettings(SecurityState)
  fullName: AppDomainManager.CheckSecuritySettings(SecurityState)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Indicates whether the specified operation is allowed in the application domain.
  remarks: "The default implementation of this method returns `false`.  \n  \n This method is called when the <xref:System.IO.IsolatedStorage.IsolatedStorageFile.IncreaseQuotaTo%2A?displayProperty=fullName> method has been called to increase the isolated storage quota. An application that hosts the common language runtime (CLR) can override the <xref:System.AppDomainManager.CheckSecuritySettings%2A> method to perform policy decisions based on an <xref:System.IO.IsolatedStorage.IsolatedStorageSecurityState> object (which inherits <xref:System.Security.SecurityState>), and can then allow or prevent the increase. For example, a host could prompt the end user to approve or deny the request to increase the quota. The host's implementation of <xref:System.AppDomainManager.CheckSecuritySettings%2A> should take into account the possibility of denial-of-service attacks. For example, it should prompt the user only if the method is called from a user-initiated event such as a button click."
  syntax:
    content: public virtual bool CheckSecuritySettings (System.Security.SecurityState state);
    parameters:
    - id: state
      type: System.Security.SecurityState
      description: A subclass of <xref href="System.Security.SecurityState"></xref> that identifies the operation whose security status is requested.
    return:
      type: System.Boolean
      description: '`true` if the host allows the operation specified by <code>state</code> to be performed in the application domain; otherwise, `false`.'
  overload: System.AppDomainManager.CheckSecuritySettings*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/AppDomainManager.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.AppDomainManager.CreateDomain(System.String,System.Security.Policy.Evidence,System.AppDomainSetup)
  commentId: M:System.AppDomainManager.CreateDomain(System.String,System.Security.Policy.Evidence,System.AppDomainSetup)
  id: CreateDomain(System.String,System.Security.Policy.Evidence,System.AppDomainSetup)
  parent: System.AppDomainManager
  langs:
  - csharp
  name: CreateDomain(String, Evidence, AppDomainSetup)
  nameWithType: AppDomainManager.CreateDomain(String, Evidence, AppDomainSetup)
  fullName: AppDomainManager.CreateDomain(String, Evidence, AppDomainSetup)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns a new or existing application domain.
  remarks: "The friendly name, specified by the `friendlyName` parameter, can be displayed in user interfaces to identify the domain. For more information, see the <xref:System.AppDomain.FriendlyName%2A> property.  \n  \n The default <xref:System.AppDomainManager.CreateDomain%2A> method calls the protected <xref:System.AppDomainManager.CreateDomainHelper%2A> method to create the <xref:System.AppDomain>. Overrides of this method do not need to call the <xref:System.AppDomainManager.CreateDomainHelper%2A> method but can return an existing domain."
  syntax:
    content: public virtual AppDomain CreateDomain (string friendlyName, System.Security.Policy.Evidence securityInfo, AppDomainSetup appDomainInfo);
    parameters:
    - id: friendlyName
      type: System.String
      description: The friendly name of the domain.
    - id: securityInfo
      type: System.Security.Policy.Evidence
      description: An object that contains evidence mapped through the security policy to establish a top-of-stack permission set.
    - id: appDomainInfo
      type: System.AppDomainSetup
      description: An object that contains application domain initialization information.
    return:
      type: System.AppDomain
      description: A new or existing application domain.
  overload: System.AppDomainManager.CreateDomain*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/AppDomainManager.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.AppDomainManager.CreateDomainHelper(System.String,System.Security.Policy.Evidence,System.AppDomainSetup)
  commentId: M:System.AppDomainManager.CreateDomainHelper(System.String,System.Security.Policy.Evidence,System.AppDomainSetup)
  id: CreateDomainHelper(System.String,System.Security.Policy.Evidence,System.AppDomainSetup)
  parent: System.AppDomainManager
  langs:
  - csharp
  name: CreateDomainHelper(String, Evidence, AppDomainSetup)
  nameWithType: AppDomainManager.CreateDomainHelper(String, Evidence, AppDomainSetup)
  fullName: AppDomainManager.CreateDomainHelper(String, Evidence, AppDomainSetup)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Provides a helper method to create an application domain.
  remarks: "This protected helper method handles the creation of a new application domain.  \n  \n This friendly name, specified by the `friendlyName` parameter, can be displayed in user interfaces to identify the domain. For more information, see the <xref:System.AppDomain.FriendlyName%2A> property."
  syntax:
    content: protected static AppDomain CreateDomainHelper (string friendlyName, System.Security.Policy.Evidence securityInfo, AppDomainSetup appDomainInfo);
    parameters:
    - id: friendlyName
      type: System.String
      description: The friendly name of the domain.
    - id: securityInfo
      type: System.Security.Policy.Evidence
      description: An object that contains evidence mapped through the security policy to establish a top-of-stack permission set.
    - id: appDomainInfo
      type: System.AppDomainSetup
      description: An object that contains application domain initialization information.
    return:
      type: System.AppDomain
      description: A newly created application domain.
  overload: System.AppDomainManager.CreateDomainHelper*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>friendlyName</code> is `null`.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/AppDomainManager.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.AppDomainManager.EntryAssembly
  commentId: P:System.AppDomainManager.EntryAssembly
  id: EntryAssembly
  parent: System.AppDomainManager
  langs:
  - csharp
  name: EntryAssembly
  nameWithType: AppDomainManager.EntryAssembly
  fullName: AppDomainManager.EntryAssembly
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets the entry assembly for an application.
  remarks: If the application is a manifest-activated application, the entry assembly is determined from the application manifest. If the application is not manifest activated, the entry assembly is the process executable in the default application domain. In other application domains, the entry assembly is the first executable that was executed by the <xref:System.AppDomain.ExecuteAssembly%2A?displayProperty=fullName> method.
  syntax:
    content: public virtual System.Reflection.Assembly EntryAssembly { get; }
    return:
      type: System.Reflection.Assembly
      description: The entry assembly for the application.
  overload: System.AppDomainManager.EntryAssembly*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/AppDomainManager.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.AppDomainManager.HostExecutionContextManager
  commentId: P:System.AppDomainManager.HostExecutionContextManager
  id: HostExecutionContextManager
  parent: System.AppDomainManager
  langs:
  - csharp
  name: HostExecutionContextManager
  nameWithType: AppDomainManager.HostExecutionContextManager
  fullName: AppDomainManager.HostExecutionContextManager
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets the host execution context manager that manages the flow of the execution context.
  remarks: This property allows a host to provide a <xref:System.Threading.HostExecutionContextManager> that can participate in the flow of the execution context across asynchronous calls.
  syntax:
    content: public virtual System.Threading.HostExecutionContextManager HostExecutionContextManager { get; }
    return:
      type: System.Threading.HostExecutionContextManager
      description: The host execution context manager.
  overload: System.AppDomainManager.HostExecutionContextManager*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/AppDomainManager.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.AppDomainManager.HostSecurityManager
  commentId: P:System.AppDomainManager.HostSecurityManager
  id: HostSecurityManager
  parent: System.AppDomainManager
  langs:
  - csharp
  name: HostSecurityManager
  nameWithType: AppDomainManager.HostSecurityManager
  fullName: AppDomainManager.HostSecurityManager
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets the host security manager that participates in security decisions for the application domain.
  remarks: This property allows a host to provide a <xref:System.Security.HostSecurityManager> to participate in the security decisions for the application domain.
  example:
  - "The following example shows an override of the <xref:System.AppDomainManager.HostSecurityManager%2A> property for a custom application domain manager. This code example is part of a larger example provided for the <xref:System.AppDomainManager> class.  \n  \n [!code-csharp[System.AppDomainManager#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.AppDomainManager/CS/customAppDomainManager.cs#3)]\n [!code-vb[System.AppDomainManager#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.AppDomainManager/VB/customAppDomainManager.vb#3)]"
  syntax:
    content: public virtual System.Security.HostSecurityManager HostSecurityManager { get; }
    return:
      type: System.Security.HostSecurityManager
      description: The host security manager.
  overload: System.AppDomainManager.HostSecurityManager*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/AppDomainManager.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.AppDomainManager.InitializationFlags
  commentId: P:System.AppDomainManager.InitializationFlags
  id: InitializationFlags
  parent: System.AppDomainManager
  langs:
  - csharp
  name: InitializationFlags
  nameWithType: AppDomainManager.InitializationFlags
  fullName: AppDomainManager.InitializationFlags
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets the initialization flags for custom application domain managers.
  syntax:
    content: public AppDomainManagerInitializationOptions InitializationFlags { get; set; }
    return:
      type: System.AppDomainManagerInitializationOptions
      description: A bitwise combination of the enumeration values that describe the initialization action to perform. The default is <xref href="System.AppDomainManagerInitializationOptions.None"></xref>.
  overload: System.AppDomainManager.InitializationFlags*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/AppDomainManager.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.AppDomainManager.InitializeNewDomain(System.AppDomainSetup)
  commentId: M:System.AppDomainManager.InitializeNewDomain(System.AppDomainSetup)
  id: InitializeNewDomain(System.AppDomainSetup)
  parent: System.AppDomainManager
  langs:
  - csharp
  name: InitializeNewDomain(AppDomainSetup)
  nameWithType: AppDomainManager.InitializeNewDomain(AppDomainSetup)
  fullName: AppDomainManager.InitializeNewDomain(AppDomainSetup)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Initializes the new application domain.
  remarks: "> [!IMPORTANT]\n>  Do not use this method to initialize an application domain in ASP.NET. In ASP.NET, configuration must be handled by the host. If you use this method to initialize the application domain, the host throws <xref:System.InvalidOperationException> when it attempts to initialize the application domain. The exception message indicates that initialization has already occurred.  \n  \n This method is called immediately after the constructor. The default <xref:System.AppDomainManager.InitializeNewDomain%2A> implementation does nothing.  A custom implementation can set up internal classes and delegates, set up an interface with the unmanaged host interface, or set up event handlers for the new <xref:System.AppDomain>.  \n  \n Also, for add-in activations, a custom implementation could identify the current <xref:System.AppDomain> as the target application domain.  \n  \n Beginning with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], you can use this method to sandbox the default application domain at application startup, or to modify the sandbox of a new application domain. To do this, adjust the <xref:System.Security.Policy.ApplicationTrust.DefaultGrantSet%2A> and <xref:System.Security.Policy.ApplicationTrust.FullTrustAssemblies%2A> properties on the <xref:System.Security.Policy.ApplicationTrust> object that is assigned to the <xref:System.AppDomainSetup.ApplicationTrust%2A?displayProperty=fullName> property of `appDomainInfo`, before you initialize the application domain.  \n  \n> [!NOTE]\n>  Only assemblies granted `FullTrust`, such as assemblies in the global assembly cache or identified as `fullTrustAssemblies` in the <xref:System.AppDomain.CreateDomain%28System.String%2CSystem.Security.Policy.Evidence%2CSystem.AppDomainSetup%2CSystem.Security.PermissionSet%2CSystem.Security.Policy.StrongName%5B%5D%29?displayProperty=fullName> method can be loaded in the  <xref:System.AppDomainManager.%23ctor%2A> constructor and the <xref:System.AppDomainManager.InitializeNewDomain%2A> method."
  example:
  - "The following example shows an override of the <xref:System.AppDomainManager.InitializeNewDomain%2A> method for a custom application domain manager. This code example is part of a larger example provided for the <xref:System.AppDomainManager> class.  \n  \n [!code-csharp[System.AppDomainManager#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.AppDomainManager/CS/customAppDomainManager.cs#2)]\n [!code-vb[System.AppDomainManager#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.AppDomainManager/VB/customAppDomainManager.vb#2)]"
  syntax:
    content: public virtual void InitializeNewDomain (AppDomainSetup appDomainInfo);
    parameters:
    - id: appDomainInfo
      type: System.AppDomainSetup
      description: An object that contains application domain initialization information.
  overload: System.AppDomainManager.InitializeNewDomain*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/AppDomainManager.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
references:
- uid: System.MarshalByRefObject
  parent: System
  isExternal: false
  name: MarshalByRefObject
  nameWithType: MarshalByRefObject
  fullName: System.MarshalByRefObject
- uid: System.ArgumentNullException
  parent: System
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.AppDomainManager.#ctor
  parent: System.AppDomainManager
  isExternal: false
  name: AppDomainManager()
  nameWithType: AppDomainManager.AppDomainManager()
  fullName: AppDomainManager.AppDomainManager()
- uid: System.AppDomainManager.ApplicationActivator
  parent: System.AppDomainManager
  isExternal: false
  name: ApplicationActivator
  nameWithType: AppDomainManager.ApplicationActivator
  fullName: AppDomainManager.ApplicationActivator
- uid: System.Runtime.Hosting.ApplicationActivator
  parent: System.Runtime.Hosting
  isExternal: false
  name: ApplicationActivator
  nameWithType: ApplicationActivator
  fullName: System.Runtime.Hosting.ApplicationActivator
- uid: System.AppDomainManager.CheckSecuritySettings(System.Security.SecurityState)
  parent: System.AppDomainManager
  isExternal: false
  name: CheckSecuritySettings(SecurityState)
  nameWithType: AppDomainManager.CheckSecuritySettings(SecurityState)
  fullName: AppDomainManager.CheckSecuritySettings(SecurityState)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.SecurityState
  parent: System.Security
  isExternal: false
  name: SecurityState
  nameWithType: SecurityState
  fullName: System.Security.SecurityState
- uid: System.AppDomainManager.CreateDomain(System.String,System.Security.Policy.Evidence,System.AppDomainSetup)
  parent: System.AppDomainManager
  isExternal: false
  name: CreateDomain(String, Evidence, AppDomainSetup)
  nameWithType: AppDomainManager.CreateDomain(String, Evidence, AppDomainSetup)
  fullName: AppDomainManager.CreateDomain(String, Evidence, AppDomainSetup)
- uid: System.AppDomain
  parent: System
  isExternal: false
  name: AppDomain
  nameWithType: AppDomain
  fullName: System.AppDomain
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.Policy.Evidence
  parent: System.Security.Policy
  isExternal: false
  name: Evidence
  nameWithType: Evidence
  fullName: System.Security.Policy.Evidence
- uid: System.AppDomainSetup
  parent: System
  isExternal: false
  name: AppDomainSetup
  nameWithType: AppDomainSetup
  fullName: System.AppDomainSetup
- uid: System.AppDomainManager.CreateDomainHelper(System.String,System.Security.Policy.Evidence,System.AppDomainSetup)
  parent: System.AppDomainManager
  isExternal: false
  name: CreateDomainHelper(String, Evidence, AppDomainSetup)
  nameWithType: AppDomainManager.CreateDomainHelper(String, Evidence, AppDomainSetup)
  fullName: AppDomainManager.CreateDomainHelper(String, Evidence, AppDomainSetup)
- uid: System.AppDomainManager.EntryAssembly
  parent: System.AppDomainManager
  isExternal: false
  name: EntryAssembly
  nameWithType: AppDomainManager.EntryAssembly
  fullName: AppDomainManager.EntryAssembly
- uid: System.Reflection.Assembly
  parent: System.Reflection
  isExternal: false
  name: Assembly
  nameWithType: Assembly
  fullName: System.Reflection.Assembly
- uid: System.AppDomainManager.HostExecutionContextManager
  parent: System.AppDomainManager
  isExternal: false
  name: HostExecutionContextManager
  nameWithType: AppDomainManager.HostExecutionContextManager
  fullName: AppDomainManager.HostExecutionContextManager
- uid: System.Threading.HostExecutionContextManager
  parent: System.Threading
  isExternal: false
  name: HostExecutionContextManager
  nameWithType: HostExecutionContextManager
  fullName: System.Threading.HostExecutionContextManager
- uid: System.AppDomainManager.HostSecurityManager
  parent: System.AppDomainManager
  isExternal: false
  name: HostSecurityManager
  nameWithType: AppDomainManager.HostSecurityManager
  fullName: AppDomainManager.HostSecurityManager
- uid: System.Security.HostSecurityManager
  parent: System.Security
  isExternal: false
  name: HostSecurityManager
  nameWithType: HostSecurityManager
  fullName: System.Security.HostSecurityManager
- uid: System.AppDomainManager.InitializationFlags
  parent: System.AppDomainManager
  isExternal: false
  name: InitializationFlags
  nameWithType: AppDomainManager.InitializationFlags
  fullName: AppDomainManager.InitializationFlags
- uid: System.AppDomainManagerInitializationOptions
  parent: System
  isExternal: false
  name: AppDomainManagerInitializationOptions
  nameWithType: AppDomainManagerInitializationOptions
  fullName: System.AppDomainManagerInitializationOptions
- uid: System.AppDomainManager.InitializeNewDomain(System.AppDomainSetup)
  parent: System.AppDomainManager
  isExternal: false
  name: InitializeNewDomain(AppDomainSetup)
  nameWithType: AppDomainManager.InitializeNewDomain(AppDomainSetup)
  fullName: AppDomainManager.InitializeNewDomain(AppDomainSetup)
- uid: System.AppDomainManager.#ctor*
  parent: System.AppDomainManager
  isExternal: false
  name: AppDomainManager
  nameWithType: AppDomainManager.AppDomainManager
  fullName: AppDomainManager.AppDomainManager
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/AppDomainManager.xml
- uid: System.AppDomainManager.ApplicationActivator*
  parent: System.AppDomainManager
  isExternal: false
  name: ApplicationActivator
  nameWithType: AppDomainManager.ApplicationActivator
  fullName: AppDomainManager.ApplicationActivator
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/AppDomainManager.xml
- uid: System.AppDomainManager.CheckSecuritySettings*
  parent: System.AppDomainManager
  isExternal: false
  name: CheckSecuritySettings
  nameWithType: AppDomainManager.CheckSecuritySettings
  fullName: AppDomainManager.CheckSecuritySettings
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/AppDomainManager.xml
- uid: System.AppDomainManager.CreateDomain*
  parent: System.AppDomainManager
  isExternal: false
  name: CreateDomain
  nameWithType: AppDomainManager.CreateDomain
  fullName: AppDomainManager.CreateDomain
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/AppDomainManager.xml
- uid: System.AppDomainManager.CreateDomainHelper*
  parent: System.AppDomainManager
  isExternal: false
  name: CreateDomainHelper
  nameWithType: AppDomainManager.CreateDomainHelper
  fullName: AppDomainManager.CreateDomainHelper
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/AppDomainManager.xml
- uid: System.AppDomainManager.EntryAssembly*
  parent: System.AppDomainManager
  isExternal: false
  name: EntryAssembly
  nameWithType: AppDomainManager.EntryAssembly
  fullName: AppDomainManager.EntryAssembly
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/AppDomainManager.xml
- uid: System.AppDomainManager.HostExecutionContextManager*
  parent: System.AppDomainManager
  isExternal: false
  name: HostExecutionContextManager
  nameWithType: AppDomainManager.HostExecutionContextManager
  fullName: AppDomainManager.HostExecutionContextManager
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/AppDomainManager.xml
- uid: System.AppDomainManager.HostSecurityManager*
  parent: System.AppDomainManager
  isExternal: false
  name: HostSecurityManager
  nameWithType: AppDomainManager.HostSecurityManager
  fullName: AppDomainManager.HostSecurityManager
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/AppDomainManager.xml
- uid: System.AppDomainManager.InitializationFlags*
  parent: System.AppDomainManager
  isExternal: false
  name: InitializationFlags
  nameWithType: AppDomainManager.InitializationFlags
  fullName: AppDomainManager.InitializationFlags
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/AppDomainManager.xml
- uid: System.AppDomainManager.InitializeNewDomain*
  parent: System.AppDomainManager
  isExternal: false
  name: InitializeNewDomain
  nameWithType: AppDomainManager.InitializeNewDomain
  fullName: AppDomainManager.InitializeNewDomain
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/AppDomainManager.xml
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: Object.Equals(Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: Object.Equals(Object, Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: false
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: Object.GetHashCode()
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  nameWithType: Object.GetType()
  fullName: Object.GetType()
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: Object.MemberwiseClone()
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: Object.ReferenceEquals(Object, Object)
- uid: System.Object.ToString
  parent: System.Object
  isExternal: false
  name: ToString()
  nameWithType: Object.ToString()
  fullName: Object.ToString()
- uid: System.MarshalByRefObject.CreateObjRef(System.Type)
  parent: System.MarshalByRefObject
  isExternal: false
  name: CreateObjRef(Type)
  nameWithType: MarshalByRefObject.CreateObjRef(Type)
  fullName: MarshalByRefObject.CreateObjRef(Type)
- uid: System.MarshalByRefObject.GetLifetimeService
  parent: System.MarshalByRefObject
  isExternal: false
  name: GetLifetimeService()
  nameWithType: MarshalByRefObject.GetLifetimeService()
  fullName: MarshalByRefObject.GetLifetimeService()
- uid: System.MarshalByRefObject.InitializeLifetimeService
  parent: System.MarshalByRefObject
  isExternal: false
  name: InitializeLifetimeService()
  nameWithType: MarshalByRefObject.InitializeLifetimeService()
  fullName: MarshalByRefObject.InitializeLifetimeService()
- uid: System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  parent: System.MarshalByRefObject
  isExternal: false
  name: MemberwiseClone(Boolean)
  nameWithType: MarshalByRefObject.MemberwiseClone(Boolean)
  fullName: MarshalByRefObject.MemberwiseClone(Boolean)
