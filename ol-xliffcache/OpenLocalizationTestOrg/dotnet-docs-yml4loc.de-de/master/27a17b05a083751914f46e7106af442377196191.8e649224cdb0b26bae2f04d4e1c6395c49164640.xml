{"nodes":[{"content":"Defines a connection point object that enables a server control acting as a provider to form a connection with a consumer.","nodes":[{"pos":[0,122],"content":"Defines a connection point object that enables a server control acting as a provider to form a connection with a consumer.","nodes":[{"content":"Defines a connection point object that enables a server control acting as a provider to form a connection with a consumer.","pos":[0,122]}]}],"pos":[854,977],"yaml":true},{"content":"In every Web Parts connection between two server controls, each control must have (among other requirements) an associated connection point object that enables it to connect to the other control and to either provide or consume data, depending on whether the control is designated as the provider or consumer for the connection. A <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> object in general contains the details for how a control can connect to another control and the type of data it can share. For a control acting as the provider in a connection, its connection point must be a <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object. For details on Web Parts connections and connection points, see the topics listed in the See Also section below.  \n  \n To create a <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object, several steps are required:  \n  \n1.  Create an interface. When a provider shares data with a consumer, it does so by getting an instance of an interface, and returning that instance to a consumer.  \n  \n2.  Implement the interface in a provider. A <xref:System.Web.UI.WebControls.WebParts.WebPart> or other server control (any type of server control in a <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> zone can be used) that will be the provider must implement the interface created in the first step.  \n  \n3.  Identify a callback method. A method in the provider must be identified as the callback method to establish a connection. This method returns an instance of the implemented interface to a consumer. The Web Parts approach for identifying a callback method in the provider is to add a `ConnectionProvider` metadata attribute (defined by the <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute> class) to the method that returns the interface instance. When the attribute is added, the only required parameter is a display name to use for the provider connection point. Optional parameters can also be added, such as an ID for the connection point.  \n  \n After a control has been equipped to act as a provider, the control can participate in connections (assuming that a consumer control is similarly equipped and available). To create a static, declarative connection in the markup of a Web page, developers can use the `<asp:webpartconnection>` element. If the `ConnectionProvider` attribute in the provider source code that identifies the callback method specifies an ID for the connection point, then that value must be assigned to the `ProviderConnectionPointID` attribute in the `<asp:webpartconnection>` element on a page. One reason that a developer might specify an ID for a provider connection point is if there are multiple connection points in the provider control. If an ID is not specified for the provider connection point in the provider control, a value does not have to be assigned to the `ProviderConnectionPointID` attribute in the page either, because the connection will be created using a default value obtained from the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID> field.  \n  \n To create a connection in code, developers must create a new <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object by calling the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> method and passing to it the ID of the provider control, along with the ID or index of the defined <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object in the provider control. The returned <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object, along with a reference to the provider control, a reference to the consumer control, and a corresponding <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object, are all passed to the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> method to create a new <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> object.  \n  \n Although developers can use provider connection points as part of establishing connections either declaratively or programmatically, users can also interact with provider connection points to establish connections through the user interface (UI). If developers declare a <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control on a Web page, it provides a run-time UI for users to create connections. If users choose the consumer control as the starting point for establishing the connection by clicking its connect verb (they could also choose the provider; there is no difference in the resulting connection), in the UI they will see a drop-down list control with the display name of the available provider connection point (or points if there are multiple ones). Users must select a provider connection point to create a connection.  \n  \n A <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object associates directly with a specific provider control, and stores details about a connection in the properties it inherits from the base <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> class. For example, in the inherited <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> property, a provider connection point keeps the type of interface returned by the provider. If the provider and consumer in a connection both work with the same interface type, the controls are compatible and capable of forming a direct connection. If the provider and consumer cannot work with the same interface type, they are incompatible and must use a <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> object to translate the provider connection point's <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> value into a type that the consumer can work with. Another important inherited property is the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A> property, which provides a friendly name to display in the UI for users to choose a provider connection point when creating connections. The display name is the required parameter when developers add a `ConnectionProvider` attribute to the callback method in a provider control. The inherited <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A> property is also useful, as indicated above, because it provides a unique identifier for a provider connection point in the event that a provider has multiple connection points. A provider can have multiple <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> objects defined in it, and in this case, when developers add the `ConnectionProvider` attribute to a method, they should specify an ID value to distinguish each connection point. One other notable inherited property is the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A> property, which indicates whether a provider connection point can connect simultaneously to multiple consumers. This property value is `true` by default for provider connection points (whereas it defaults to `false` for consumer connection points).  \n  \n The <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> class adds several unique methods to the members it inherits from the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> class. The <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> method retrieves an instance of the interface that the callback method will return to consumers. The <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces%2A> method retrieves additional consumer interfaces that are part of an existing connection, but are not the interfaces used to establish the connection.","nodes":[{"pos":[0,783],"content":"In every Web Parts connection between two server controls, each control must have (among other requirements) an associated connection point object that enables it to connect to the other control and to either provide or consume data, depending on whether the control is designated as the provider or consumer for the connection. A <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> object in general contains the details for how a control can connect to another control and the type of data it can share. For a control acting as the provider in a connection, its connection point must be a <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object. For details on Web Parts connections and connection points, see the topics listed in the See Also section below.","nodes":[{"content":"In every Web Parts connection between two server controls, each control must have (among other requirements) an associated connection point object that enables it to connect to the other control and to either provide or consume data, depending on whether the control is designated as the provider or consumer for the connection. A <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> object in general contains the details for how a control can connect to another control and the type of data it can share. For a control acting as the provider in a connection, its connection point must be a <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object. For details on Web Parts connections and connection points, see the topics listed in the See Also section below.","pos":[0,783],"nodes":[{"content":"In every Web Parts connection between two server controls, each control must have (among other requirements) an associated connection point object that enables it to connect to the other control and to either provide or consume data, depending on whether the control is designated as the provider or consumer for the connection.","pos":[0,328]},{"content":"A <ph id=\"ph1\">&lt;xref:System.Web.UI.WebControls.WebParts.ConnectionPoint&gt;</ph> object in general contains the details for how a control can connect to another control and the type of data it can share.","pos":[329,511],"source":" A <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> object in general contains the details for how a control can connect to another control and the type of data it can share."},{"content":"For a control acting as the provider in a connection, its connection point must be a <ph id=\"ph1\">&lt;xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint&gt;</ph> object.","pos":[512,670],"source":" For a control acting as the provider in a connection, its connection point must be a <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object."},{"content":"For details on Web Parts connections and connection points, see the topics listed in the See Also section below.","pos":[671,783]}]}]},{"pos":[790,903],"content":"To create a <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object, several steps are required:","nodes":[{"content":"To create a <ph id=\"ph1\">&lt;xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint&gt;</ph> object, several steps are required:","pos":[0,113],"source":"To create a <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object, several steps are required:"}]},{"pos":[913,1072],"content":"Create an interface. When a provider shares data with a consumer, it does so by getting an instance of an interface, and returning that instance to a consumer.","nodes":[{"content":"Create an interface. When a provider shares data with a consumer, it does so by getting an instance of an interface, and returning that instance to a consumer.","pos":[0,159],"nodes":[{"content":"Create an interface.","pos":[0,20]},{"content":"When a provider shares data with a consumer, it does so by getting an instance of an interface, and returning that instance to a consumer.","pos":[21,159]}]}]},{"pos":[1082,1387],"content":"Implement the interface in a provider. A <xref:System.Web.UI.WebControls.WebParts.WebPart> or other server control (any type of server control in a <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> zone can be used) that will be the provider must implement the interface created in the first step.","nodes":[{"content":"Implement the interface in a provider. A <xref:System.Web.UI.WebControls.WebParts.WebPart> or other server control (any type of server control in a <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> zone can be used) that will be the provider must implement the interface created in the first step.","pos":[0,305],"nodes":[{"content":"Implement the interface in a provider.","pos":[0,38]},{"content":"A <ph id=\"ph1\">&lt;xref:System.Web.UI.WebControls.WebParts.WebPart&gt;</ph> or other server control (any type of server control in a <ph id=\"ph2\">&lt;xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase&gt;</ph> zone can be used) that will be the provider must implement the interface created in the first step.","pos":[39,305],"source":" A <xref:System.Web.UI.WebControls.WebParts.WebPart> or other server control (any type of server control in a <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> zone can be used) that will be the provider must implement the interface created in the first step."}]}]},{"pos":[1397,2059],"content":"Identify a callback method. A method in the provider must be identified as the callback method to establish a connection. This method returns an instance of the implemented interface to a consumer. The Web Parts approach for identifying a callback method in the provider is to add a `ConnectionProvider` metadata attribute (defined by the <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute> class) to the method that returns the interface instance. When the attribute is added, the only required parameter is a display name to use for the provider connection point. Optional parameters can also be added, such as an ID for the connection point.","nodes":[{"content":"Identify a callback method.","pos":[0,27]},{"content":"A method in the provider must be identified as the callback method to establish a connection.","pos":[28,121]},{"content":"This method returns an instance of the implemented interface to a consumer.","pos":[122,197]},{"content":"The Web Parts approach for identifying a callback method in the provider is to add a <ph id=\"ph1\">`ConnectionProvider`</ph> metadata attribute (defined by the <ph id=\"ph2\">&lt;xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute&gt;</ph> class) to the method that returns the interface instance.","pos":[198,466],"source":" The Web Parts approach for identifying a callback method in the provider is to add a `ConnectionProvider` metadata attribute (defined by the <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute> class) to the method that returns the interface instance."},{"content":"When the attribute is added, the only required parameter is a display name to use for the provider connection point.","pos":[467,583]},{"content":"Optional parameters can also be added, such as an ID for the connection point.","pos":[584,662]}]},{"pos":[2066,3129],"content":"After a control has been equipped to act as a provider, the control can participate in connections (assuming that a consumer control is similarly equipped and available). To create a static, declarative connection in the markup of a Web page, developers can use the `<asp:webpartconnection>` element. If the `ConnectionProvider` attribute in the provider source code that identifies the callback method specifies an ID for the connection point, then that value must be assigned to the `ProviderConnectionPointID` attribute in the `<asp:webpartconnection>` element on a page. One reason that a developer might specify an ID for a provider connection point is if there are multiple connection points in the provider control. If an ID is not specified for the provider connection point in the provider control, a value does not have to be assigned to the `ProviderConnectionPointID` attribute in the page either, because the connection will be created using a default value obtained from the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID> field.","nodes":[{"content":"After a control has been equipped to act as a provider, the control can participate in connections (assuming that a consumer control is similarly equipped and available).","pos":[0,170]},{"content":"To create a static, declarative connection in the markup of a Web page, developers can use the <ph id=\"ph1\">`&lt;asp:webpartconnection&gt;`</ph> element.","pos":[171,300],"source":" To create a static, declarative connection in the markup of a Web page, developers can use the `<asp:webpartconnection>` element."},{"content":"If the <ph id=\"ph1\">`ConnectionProvider`</ph> attribute in the provider source code that identifies the callback method specifies an ID for the connection point, then that value must be assigned to the <ph id=\"ph2\">`ProviderConnectionPointID`</ph> attribute in the <ph id=\"ph3\">`&lt;asp:webpartconnection&gt;`</ph> element on a page.","pos":[301,574],"source":" If the `ConnectionProvider` attribute in the provider source code that identifies the callback method specifies an ID for the connection point, then that value must be assigned to the `ProviderConnectionPointID` attribute in the `<asp:webpartconnection>` element on a page."},{"content":"One reason that a developer might specify an ID for a provider connection point is if there are multiple connection points in the provider control.","pos":[575,722]},{"content":"If an ID is not specified for the provider connection point in the provider control, a value does not have to be assigned to the <ph id=\"ph1\">`ProviderConnectionPointID`</ph> attribute in the page either, because the connection will be created using a default value obtained from the <ph id=\"ph2\">&lt;xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID&gt;</ph> field.","pos":[723,1063],"source":" If an ID is not specified for the provider connection point in the provider control, a value does not have to be assigned to the `ProviderConnectionPointID` attribute in the page either, because the connection will be created using a default value obtained from the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID> field."}]},{"pos":[3136,4024],"content":"To create a connection in code, developers must create a new <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object by calling the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> method and passing to it the ID of the provider control, along with the ID or index of the defined <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object in the provider control. The returned <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object, along with a reference to the provider control, a reference to the consumer control, and a corresponding <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object, are all passed to the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> method to create a new <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> object.","nodes":[{"content":"To create a connection in code, developers must create a new <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object by calling the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> method and passing to it the ID of the provider control, along with the ID or index of the defined <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object in the provider control. The returned <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object, along with a reference to the provider control, a reference to the consumer control, and a corresponding <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object, are all passed to the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> method to create a new <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> object.","pos":[0,888],"nodes":[{"content":"To create a connection in code, developers must create a new <ph id=\"ph1\">&lt;xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint&gt;</ph> object by calling the <ph id=\"ph2\">&lt;xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A&gt;</ph> method and passing to it the ID of the provider control, along with the ID or index of the defined <ph id=\"ph3\">&lt;xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint&gt;</ph> object in the provider control.","pos":[0,433],"source":"To create a connection in code, developers must create a new <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object by calling the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> method and passing to it the ID of the provider control, along with the ID or index of the defined <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object in the provider control."},{"content":"The returned <ph id=\"ph1\">&lt;xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint&gt;</ph> object, along with a reference to the provider control, a reference to the consumer control, and a corresponding <ph id=\"ph2\">&lt;xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint&gt;</ph> object, are all passed to the <ph id=\"ph3\">&lt;xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A&gt;</ph> method to create a new <ph id=\"ph4\">&lt;xref:System.Web.UI.WebControls.WebParts.WebPartConnection&gt;</ph> object.","pos":[434,888],"source":" The returned <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object, along with a reference to the provider control, a reference to the consumer control, and a corresponding <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object, are all passed to the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> method to create a new <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> object."}]}]},{"pos":[4031,4876],"content":"Although developers can use provider connection points as part of establishing connections either declaratively or programmatically, users can also interact with provider connection points to establish connections through the user interface (UI). If developers declare a <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control on a Web page, it provides a run-time UI for users to create connections. If users choose the consumer control as the starting point for establishing the connection by clicking its connect verb (they could also choose the provider; there is no difference in the resulting connection), in the UI they will see a drop-down list control with the display name of the available provider connection point (or points if there are multiple ones). Users must select a provider connection point to create a connection.","nodes":[{"content":"Although developers can use provider connection points as part of establishing connections either declaratively or programmatically, users can also interact with provider connection points to establish connections through the user interface (UI). If developers declare a <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control on a Web page, it provides a run-time UI for users to create connections. If users choose the consumer control as the starting point for establishing the connection by clicking its connect verb (they could also choose the provider; there is no difference in the resulting connection), in the UI they will see a drop-down list control with the display name of the available provider connection point (or points if there are multiple ones). Users must select a provider connection point to create a connection.","pos":[0,845],"nodes":[{"content":"Although developers can use provider connection points as part of establishing connections either declaratively or programmatically, users can also interact with provider connection points to establish connections through the user interface (UI).","pos":[0,246]},{"content":"If developers declare a <ph id=\"ph1\">&lt;xref:System.Web.UI.WebControls.WebParts.ConnectionsZone&gt;</ph> control on a Web page, it provides a run-time UI for users to create connections.","pos":[247,410],"source":" If developers declare a <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control on a Web page, it provides a run-time UI for users to create connections."},{"content":"If users choose the consumer control as the starting point for establishing the connection by clicking its connect verb (they could also choose the provider; there is no difference in the resulting connection), in the UI they will see a drop-down list control with the display name of the available provider connection point (or points if there are multiple ones).","pos":[411,775]},{"content":"Users must select a provider connection point to create a connection.","pos":[776,845]}]}]},{"pos":[4883,7165],"content":"A <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object associates directly with a specific provider control, and stores details about a connection in the properties it inherits from the base <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> class. For example, in the inherited <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> property, a provider connection point keeps the type of interface returned by the provider. If the provider and consumer in a connection both work with the same interface type, the controls are compatible and capable of forming a direct connection. If the provider and consumer cannot work with the same interface type, they are incompatible and must use a <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> object to translate the provider connection point's <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> value into a type that the consumer can work with. Another important inherited property is the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A> property, which provides a friendly name to display in the UI for users to choose a provider connection point when creating connections. The display name is the required parameter when developers add a `ConnectionProvider` attribute to the callback method in a provider control. The inherited <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A> property is also useful, as indicated above, because it provides a unique identifier for a provider connection point in the event that a provider has multiple connection points. A provider can have multiple <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> objects defined in it, and in this case, when developers add the `ConnectionProvider` attribute to a method, they should specify an ID value to distinguish each connection point. One other notable inherited property is the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A> property, which indicates whether a provider connection point can connect simultaneously to multiple consumers. This property value is `true` by default for provider connection points (whereas it defaults to `false` for consumer connection points).","nodes":[{"content":"A <ph id=\"ph1\">&lt;xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint&gt;</ph> object associates directly with a specific provider control, and stores details about a connection in the properties it inherits from the base <ph id=\"ph2\">&lt;xref:System.Web.UI.WebControls.WebParts.ConnectionPoint&gt;</ph> class.","pos":[0,275],"source":"A <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object associates directly with a specific provider control, and stores details about a connection in the properties it inherits from the base <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> class."},{"content":"For example, in the inherited <ph id=\"ph1\">&lt;xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A&gt;</ph> property, a provider connection point keeps the type of interface returned by the provider.","pos":[276,472],"source":" For example, in the inherited <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> property, a provider connection point keeps the type of interface returned by the provider."},{"content":"If the provider and consumer in a connection both work with the same interface type, the controls are compatible and capable of forming a direct connection.","pos":[473,629]},{"content":"If the provider and consumer cannot work with the same interface type, they are incompatible and must use a <ph id=\"ph1\">&lt;xref:System.Web.UI.WebControls.WebParts.WebPartTransformer&gt;</ph> object to translate the provider connection point's <ph id=\"ph2\">&lt;xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A&gt;</ph> value into a type that the consumer can work with.","pos":[630,976],"source":" If the provider and consumer cannot work with the same interface type, they are incompatible and must use a <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> object to translate the provider connection point's <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> value into a type that the consumer can work with."},{"content":"Another important inherited property is the <ph id=\"ph1\">&lt;xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A&gt;</ph> property, which provides a friendly name to display in the UI for users to choose a provider connection point when creating connections.","pos":[977,1230],"source":" Another important inherited property is the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A> property, which provides a friendly name to display in the UI for users to choose a provider connection point when creating connections."},{"content":"The display name is the required parameter when developers add a <ph id=\"ph1\">`ConnectionProvider`</ph> attribute to the callback method in a provider control.","pos":[1231,1372],"source":" The display name is the required parameter when developers add a `ConnectionProvider` attribute to the callback method in a provider control."},{"content":"The inherited <ph id=\"ph1\">&lt;xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A&gt;</ph> property is also useful, as indicated above, because it provides a unique identifier for a provider connection point in the event that a provider has multiple connection points.","pos":[1373,1628],"source":" The inherited <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A> property is also useful, as indicated above, because it provides a unique identifier for a provider connection point in the event that a provider has multiple connection points."},{"content":"A provider can have multiple <ph id=\"ph1\">&lt;xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint&gt;</ph> objects defined in it, and in this case, when developers add the <ph id=\"ph2\">`ConnectionProvider`</ph> attribute to a method, they should specify an ID value to distinguish each connection point.","pos":[1629,1902],"source":" A provider can have multiple <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> objects defined in it, and in this case, when developers add the `ConnectionProvider` attribute to a method, they should specify an ID value to distinguish each connection point."},{"content":"One other notable inherited property is the <ph id=\"ph1\">&lt;xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A&gt;</ph> property, which indicates whether a provider connection point can connect simultaneously to multiple consumers.","pos":[1903,2145],"source":" One other notable inherited property is the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A> property, which indicates whether a provider connection point can connect simultaneously to multiple consumers."},{"content":"This property value is <ph id=\"ph1\">`true`</ph> by default for provider connection points (whereas it defaults to <ph id=\"ph2\">`false`</ph> for consumer connection points).","pos":[2146,2282],"source":" This property value is `true` by default for provider connection points (whereas it defaults to `false` for consumer connection points)."}]},{"pos":[7172,7802],"content":"The <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> class adds several unique methods to the members it inherits from the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> class. The <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> method retrieves an instance of the interface that the callback method will return to consumers. The <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces%2A> method retrieves additional consumer interfaces that are part of an existing connection, but are not the interfaces used to establish the connection.","nodes":[{"content":"The <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> class adds several unique methods to the members it inherits from the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> class. The <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> method retrieves an instance of the interface that the callback method will return to consumers. The <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces%2A> method retrieves additional consumer interfaces that are part of an existing connection, but are not the interfaces used to establish the connection.","pos":[0,630],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint&gt;</ph> class adds several unique methods to the members it inherits from the <ph id=\"ph2\">&lt;xref:System.Web.UI.WebControls.WebParts.ConnectionPoint&gt;</ph> class.","pos":[0,204],"source":"The <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> class adds several unique methods to the members it inherits from the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> class."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A&gt;</ph> method retrieves an instance of the interface that the callback method will return to consumers.","pos":[205,384],"source":" The <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> method retrieves an instance of the interface that the callback method will return to consumers."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces%2A&gt;</ph> method retrieves additional consumer interfaces that are part of an existing connection, but are not the interfaces used to establish the connection.","pos":[385,630],"source":" The <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces%2A> method retrieves additional consumer interfaces that are part of an existing connection, but are not the interfaces used to establish the connection."}]}]}],"pos":[988,8811],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Web.UI.WebControls.WebParts.ProviderConnectionPoint\"></xref> class.","nodes":[{"pos":[0,120],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Web.UI.WebControls.WebParts.ProviderConnectionPoint\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.Web.UI.WebControls.WebParts.ProviderConnectionPoint\"></xref> class."}],"pos":[18185,18306],"yaml":true},{"content":"The <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.%23ctor%2A> constructor for the <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> class simply calls the base constructor, passing to it the various parameters and initializing the base class.  \n  \n The base class constructor checks a number of the parameters for a connection point and can throw several exceptions. For a list of possible exceptions, see the Exceptions section.  \n  \n You can call the <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.%23ctor%2A> constructor to create your own instance of the <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> class. However, in cases where you are simply establishing a connection and not extending the class, you should call the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> method to return an existing connection point object from a provider.","nodes":[{"pos":[0,277],"content":"The <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.%23ctor%2A> constructor for the <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> class simply calls the base constructor, passing to it the various parameters and initializing the base class.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.%23ctor%2A&gt;</ph> constructor for the <ph id=\"ph2\">&lt;xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint&gt;</ph> class simply calls the base constructor, passing to it the various parameters and initializing the base class.","pos":[0,277],"source":"The <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.%23ctor%2A> constructor for the <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> class simply calls the base constructor, passing to it the various parameters and initializing the base class."}]},{"pos":[284,464],"content":"The base class constructor checks a number of the parameters for a connection point and can throw several exceptions. For a list of possible exceptions, see the Exceptions section.","nodes":[{"content":"The base class constructor checks a number of the parameters for a connection point and can throw several exceptions. For a list of possible exceptions, see the Exceptions section.","pos":[0,180],"nodes":[{"content":"The base class constructor checks a number of the parameters for a connection point and can throw several exceptions.","pos":[0,117]},{"content":"For a list of possible exceptions, see the Exceptions section.","pos":[118,180]}]}]},{"pos":[471,956],"content":"You can call the <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.%23ctor%2A> constructor to create your own instance of the <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> class. However, in cases where you are simply establishing a connection and not extending the class, you should call the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> method to return an existing connection point object from a provider.","nodes":[{"content":"You can call the <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.%23ctor%2A> constructor to create your own instance of the <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> class. However, in cases where you are simply establishing a connection and not extending the class, you should call the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> method to return an existing connection point object from a provider.","pos":[0,485],"nodes":[{"content":"You can call the <ph id=\"ph1\">&lt;xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.%23ctor%2A&gt;</ph> constructor to create your own instance of the <ph id=\"ph2\">&lt;xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint&gt;</ph> class.","pos":[0,213],"source":"You can call the <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.%23ctor%2A> constructor to create your own instance of the <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> class."},{"content":"However, in cases where you are simply establishing a connection and not extending the class, you should call the <ph id=\"ph1\">&lt;xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A&gt;</ph> method to return an existing connection point object from a provider.","pos":[214,485],"source":" However, in cases where you are simply establishing a connection and not extending the class, you should call the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> method to return an existing connection point object from a provider."}]}]}],"pos":[18317,19280],"yaml":true,"extradata":"MT"},{"content":"The method in the provider control that returns an interface instance to consumers to establish a connection.","nodes":[{"pos":[0,109],"content":"The method in the provider control that returns an interface instance to consumers to establish a connection.","nodes":[{"content":"The method in the provider control that returns an interface instance to consumers to establish a connection.","pos":[0,109]}]}],"pos":[22220,22330],"yaml":true},{"content":"The <xref href=\"System.Type\"></xref> of the interface that the provider serves to consumers.","nodes":[{"pos":[0,92],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> of the interface that the provider serves to consumers.","source":"The <xref href=\"System.Type\"></xref> of the interface that the provider serves to consumers."}],"pos":[22397,22490],"yaml":true},{"content":"The <xref href=\"System.Type\"></xref> of the provider control with which the provider connection point is associated.","nodes":[{"pos":[0,116],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> of the provider control with which the provider connection point is associated.","source":"The <xref href=\"System.Type\"></xref> of the provider control with which the provider connection point is associated."}],"pos":[22555,22672],"yaml":true},{"content":"A friendly display name for the provider connection point that appears to users in the connection user interface (UI).","nodes":[{"pos":[0,118],"content":"A friendly display name for the provider connection point that appears to users in the connection user interface (UI).","nodes":[{"content":"A friendly display name for the provider connection point that appears to users in the connection user interface (UI).","pos":[0,118]}]}],"pos":[22739,22858],"yaml":true},{"content":"A unique identifier for the provider connection point.","nodes":[{"pos":[0,54],"content":"A unique identifier for the provider connection point.","nodes":[{"content":"A unique identifier for the provider connection point.","pos":[0,54]}]}],"pos":[22916,22971],"yaml":true},{"content":"A Boolean value indicating whether the provider connection point can have multiple simultaneous connections with consumers.","nodes":[{"pos":[0,123],"content":"A Boolean value indicating whether the provider connection point can have multiple simultaneous connections with consumers.","nodes":[{"content":"A Boolean value indicating whether the provider connection point can have multiple simultaneous connections with consumers.","pos":[0,123]}]}],"pos":[23053,23177],"yaml":true},{"content":"<code>callbackMethod</code> is `null`.  \n  \n \\- or -  \n  \n <code>interfaceType</code> is `null`.  \n  \n \\- or -  \n  \n <code>controlType</code> is `null`.  \n  \n \\- or -  \n  \n <code>displayName</code> is `null` or an empty string (\"\").","nodes":[{"pos":[0,38],"content":"<ph id=\"ph1\">&lt;code&gt;callbackMethod&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>callbackMethod</code> is `null`."},{"pos":[45,52],"content":"\\- or -","nodes":[{"content":"<ph id=\"ph1\">\\-</ph> or -","pos":[0,7],"source":"\\- or -"}]},{"pos":[59,96],"content":"<ph id=\"ph1\">&lt;code&gt;interfaceType&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>interfaceType</code> is `null`."},{"pos":[103,110],"content":"\\- or -","nodes":[{"content":"<ph id=\"ph1\">\\-</ph> or -","pos":[0,7],"source":"\\- or -"}]},{"pos":[117,152],"content":"<ph id=\"ph1\">&lt;code&gt;controlType&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>controlType</code> is `null`."},{"pos":[159,166],"content":"\\- or -","nodes":[{"content":"<ph id=\"ph1\">\\-</ph> or -","pos":[0,7],"source":"\\- or -"}]},{"pos":[173,232],"content":"<ph id=\"ph1\">&lt;code&gt;displayName&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph> or an empty string (\"\").","source":"<code>displayName</code> is `null` or an empty string (\"\")."}],"pos":[23371,23623],"yaml":true},{"content":"<code>controlType</code> is not the same type as the provider control (or a valid class derived from it).","nodes":[{"pos":[0,105],"content":"<ph id=\"ph1\">&lt;code&gt;controlType&lt;/code&gt;</ph> is not the same type as the provider control (or a valid class derived from it).","source":"<code>controlType</code> is not the same type as the provider control (or a valid class derived from it)."}],"pos":[23717,23823],"yaml":true},{"content":"Invokes the callback method in a provider control that gets an interface instance to return to consumers.","nodes":[{"pos":[0,105],"content":"Invokes the callback method in a provider control that gets an interface instance to return to consumers.","nodes":[{"content":"Invokes the callback method in a provider control that gets an interface instance to return to consumers.","pos":[0,105]}]}],"pos":[24961,25067],"yaml":true},{"content":"This method returns an object from the provider control that is an instance of the interface used to establish a connection. The type of the object will be the type of the implemented interface. For example, two interfaces that are implemented for connections in the Web Parts control set are <xref:System.Web.UI.WebControls.WebParts.IWebPartField> and <xref:System.Web.UI.WebControls.WebParts.IWebPartRow>. When the <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> method is called on a <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object, if the associated provider implements one of these interfaces, the returned object will be of the same type.  \n  \n The <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> method is called by <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> objects when a connection is being activated. This is a critical step that actually initiates a connection and begins the process that enables two controls to share data.  \n  \n The consumer control in a connection must be able to work with the same type of interface as the provider. If it does not, the controls are incompatible and a <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> object must be used to establish a connection.","nodes":[{"pos":[0,700],"content":"This method returns an object from the provider control that is an instance of the interface used to establish a connection. The type of the object will be the type of the implemented interface. For example, two interfaces that are implemented for connections in the Web Parts control set are <xref:System.Web.UI.WebControls.WebParts.IWebPartField> and <xref:System.Web.UI.WebControls.WebParts.IWebPartRow>. When the <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> method is called on a <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object, if the associated provider implements one of these interfaces, the returned object will be of the same type.","nodes":[{"content":"This method returns an object from the provider control that is an instance of the interface used to establish a connection. The type of the object will be the type of the implemented interface. For example, two interfaces that are implemented for connections in the Web Parts control set are <xref:System.Web.UI.WebControls.WebParts.IWebPartField> and <xref:System.Web.UI.WebControls.WebParts.IWebPartRow>. When the <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> method is called on a <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object, if the associated provider implements one of these interfaces, the returned object will be of the same type.","pos":[0,700],"nodes":[{"content":"This method returns an object from the provider control that is an instance of the interface used to establish a connection.","pos":[0,124]},{"content":"The type of the object will be the type of the implemented interface.","pos":[125,194]},{"content":"For example, two interfaces that are implemented for connections in the Web Parts control set are <ph id=\"ph1\">&lt;xref:System.Web.UI.WebControls.WebParts.IWebPartField&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Web.UI.WebControls.WebParts.IWebPartRow&gt;</ph>.","pos":[195,407],"source":" For example, two interfaces that are implemented for connections in the Web Parts control set are <xref:System.Web.UI.WebControls.WebParts.IWebPartField> and <xref:System.Web.UI.WebControls.WebParts.IWebPartRow>."},{"content":"When the <ph id=\"ph1\">&lt;xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A&gt;</ph> method is called on a <ph id=\"ph2\">&lt;xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint&gt;</ph> object, if the associated provider implements one of these interfaces, the returned object will be of the same type.","pos":[408,700],"source":" When the <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> method is called on a <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object, if the associated provider implements one of these interfaces, the returned object will be of the same type."}]}]},{"pos":[707,1040],"content":"The <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> method is called by <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> objects when a connection is being activated. This is a critical step that actually initiates a connection and begins the process that enables two controls to share data.","nodes":[{"content":"The <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> method is called by <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> objects when a connection is being activated. This is a critical step that actually initiates a connection and begins the process that enables two controls to share data.","pos":[0,333],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A&gt;</ph> method is called by <ph id=\"ph2\">&lt;xref:System.Web.UI.WebControls.WebParts.WebPartConnection&gt;</ph> objects when a connection is being activated.","pos":[0,208],"source":"The <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> method is called by <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> objects when a connection is being activated."},{"content":"This is a critical step that actually initiates a connection and begins the process that enables two controls to share data.","pos":[209,333]}]}]},{"pos":[1047,1313],"content":"The consumer control in a connection must be able to work with the same type of interface as the provider. If it does not, the controls are incompatible and a <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> object must be used to establish a connection.","nodes":[{"content":"The consumer control in a connection must be able to work with the same type of interface as the provider. If it does not, the controls are incompatible and a <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> object must be used to establish a connection.","pos":[0,266],"nodes":[{"content":"The consumer control in a connection must be able to work with the same type of interface as the provider.","pos":[0,106]},{"content":"If it does not, the controls are incompatible and a <ph id=\"ph1\">&lt;xref:System.Web.UI.WebControls.WebParts.WebPartTransformer&gt;</ph> object must be used to establish a connection.","pos":[107,266],"source":" If it does not, the controls are incompatible and a <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> object must be used to establish a connection."}]}]}],"pos":[25078,26398],"yaml":true,"extradata":"MT"},{"content":"The control acting as the provider in a Web Parts connection.","nodes":[{"pos":[0,61],"content":"The control acting as the provider in a Web Parts connection.","nodes":[{"content":"The control acting as the provider in a Web Parts connection.","pos":[0,61]}]}],"pos":[26573,26635],"yaml":true},{"content":"An <xref href=\"System.Object\"></xref> that is an instance of the interface a provider returns to consumers to establish a connection.","nodes":[{"pos":[0,133],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Object\"&gt;&lt;/xref&gt;</ph> that is an instance of the interface a provider returns to consumers to establish a connection.","source":"An <xref href=\"System.Object\"></xref> that is an instance of the interface a provider returns to consumers to establish a connection."}],"pos":[26692,26826],"yaml":true},{"content":"<code>control</code> is `null`.","nodes":[{"pos":[0,31],"content":"<ph id=\"ph1\">&lt;code&gt;control&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>control</code> is `null`."}],"pos":[27024,27056],"yaml":true},{"content":"Gets an optional collection of secondary interfaces that can be supported by a provider connection point.","nodes":[{"pos":[0,105],"content":"Gets an optional collection of secondary interfaces that can be supported by a provider connection point.","nodes":[{"content":"Gets an optional collection of secondary interfaces that can be supported by a provider connection point.","pos":[0,105]}]}],"pos":[28272,28378],"yaml":true},{"content":"A provider connection point object always has a default interface that is used to establish a connection with consumers. An instance of the default interface is retrieved by calling the <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> method on a <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object.  \n  \n However, some provider controls will implement multiple interfaces to provide to consumers as part of a connection. These interfaces, which are not the default ones used to establish a connection, are called secondary interfaces. The <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces%2A> method provides a way to return a collection of references to the secondary interfaces, just as the <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> method returns a reference to the default interface.","nodes":[{"pos":[0,350],"content":"A provider connection point object always has a default interface that is used to establish a connection with consumers. An instance of the default interface is retrieved by calling the <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> method on a <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object.","nodes":[{"content":"A provider connection point object always has a default interface that is used to establish a connection with consumers. An instance of the default interface is retrieved by calling the <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> method on a <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object.","pos":[0,350],"nodes":[{"content":"A provider connection point object always has a default interface that is used to establish a connection with consumers.","pos":[0,120]},{"content":"An instance of the default interface is retrieved by calling the <ph id=\"ph1\">&lt;xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A&gt;</ph> method on a <ph id=\"ph2\">&lt;xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint&gt;</ph> object.","pos":[121,350],"source":" An instance of the default interface is retrieved by calling the <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> method on a <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object."}]}]},{"pos":[357,914],"content":"However, some provider controls will implement multiple interfaces to provide to consumers as part of a connection. These interfaces, which are not the default ones used to establish a connection, are called secondary interfaces. The <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces%2A> method provides a way to return a collection of references to the secondary interfaces, just as the <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> method returns a reference to the default interface.","nodes":[{"content":"However, some provider controls will implement multiple interfaces to provide to consumers as part of a connection. These interfaces, which are not the default ones used to establish a connection, are called secondary interfaces. The <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces%2A> method provides a way to return a collection of references to the secondary interfaces, just as the <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> method returns a reference to the default interface.","pos":[0,557],"nodes":[{"content":"However, some provider controls will implement multiple interfaces to provide to consumers as part of a connection.","pos":[0,115]},{"content":"These interfaces, which are not the default ones used to establish a connection, are called secondary interfaces.","pos":[116,229]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces%2A&gt;</ph> method provides a way to return a collection of references to the secondary interfaces, just as the <ph id=\"ph2\">&lt;xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A&gt;</ph> method returns a reference to the default interface.","pos":[230,557],"source":" The <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces%2A> method provides a way to return a collection of references to the secondary interfaces, just as the <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> method returns a reference to the default interface."}]}]}],"pos":[28389,29308],"yaml":true,"extradata":"MT"},{"content":"The control acting as the provider in a Web Parts connection.","nodes":[{"pos":[0,61],"content":"The control acting as the provider in a Web Parts connection.","nodes":[{"content":"The control acting as the provider in a Web Parts connection.","pos":[0,61]}]}],"pos":[29554,29616],"yaml":true},{"content":"A <xref href=\"System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection\"></xref> of additional interfaces provided by the control acting as a provider.","nodes":[{"pos":[0,158],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection\"&gt;&lt;/xref&gt;</ph> of additional interfaces provided by the control acting as a provider.","source":"A <xref href=\"System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection\"></xref> of additional interfaces provided by the control acting as a provider."}],"pos":[29724,29883],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint\n  commentId: T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint\n  id: ProviderConnectionPoint\n  children:\n  - System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)\n  - System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject(System.Web.UI.Control)\n  - System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces(System.Web.UI.Control)\n  langs:\n  - csharp\n  name: ProviderConnectionPoint\n  nameWithType: ProviderConnectionPoint\n  fullName: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint\n  type: Class\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls.WebParts\n  summary: Defines a connection point object that enables a server control acting as a provider to form a connection with a consumer.\n  remarks: \"In every Web Parts connection between two server controls, each control must have (among other requirements) an associated connection point object that enables it to connect to the other control and to either provide or consume data, depending on whether the control is designated as the provider or consumer for the connection. A <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> object in general contains the details for how a control can connect to another control and the type of data it can share. For a control acting as the provider in a connection, its connection point must be a <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object. For details on Web Parts connections and connection points, see the topics listed in the See Also section below.  \\n  \\n To create a <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object, several steps are required:  \\n  \\n1.  Create an interface. When a provider shares data with a consumer, it does so by getting an instance of an interface, and returning that instance to a consumer.  \\n  \\n2.  Implement the interface in a provider. A <xref:System.Web.UI.WebControls.WebParts.WebPart> or other server control (any type of server control in a <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> zone can be used) that will be the provider must implement the interface created in the first step.  \\n  \\n3.  Identify a callback method. A method in the provider must be identified as the callback method to establish a connection. This method returns an instance of the implemented interface to a consumer. The Web Parts approach for identifying a callback method in the provider is to add a `ConnectionProvider` metadata attribute (defined by the <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute> class) to the method that returns the interface instance. When the attribute is added, the only required parameter is a display name to use for the provider connection point. Optional parameters can also be added, such as an ID for the connection point.  \\n  \\n After a control has been equipped to act as a provider, the control can participate in connections (assuming that a consumer control is similarly equipped and available). To create a static, declarative connection in the markup of a Web page, developers can use the `<asp:webpartconnection>` element. If the `ConnectionProvider` attribute in the provider source code that identifies the callback method specifies an ID for the connection point, then that value must be assigned to the `ProviderConnectionPointID` attribute in the `<asp:webpartconnection>` element on a page. One reason that a developer might specify an ID for a provider connection point is if there are multiple connection points in the provider control. If an ID is not specified for the provider connection point in the provider control, a value does not have to be assigned to the `ProviderConnectionPointID` attribute in the page either, because the connection will be created using a default value obtained from the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID> field.  \\n  \\n To create a connection in code, developers must create a new <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object by calling the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> method and passing to it the ID of the provider control, along with the ID or index of the defined <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object in the provider control. The returned <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object, along with a reference to the provider control, a reference to the consumer control, and a corresponding <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object, are all passed to the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> method to create a new <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> object.  \\n  \\n Although developers can use provider connection points as part of establishing connections either declaratively or programmatically, users can also interact with provider connection points to establish connections through the user interface (UI). If developers declare a <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control on a Web page, it provides a run-time UI for users to create connections. If users choose the consumer control as the starting point for establishing the connection by clicking its connect verb (they could also choose the provider; there is no difference in the resulting connection), in the UI they will see a drop-down list control with the display name of the available provider connection point (or points if there are multiple ones). Users must select a provider connection point to create a connection.  \\n  \\n A <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object associates directly with a specific provider control, and stores details about a connection in the properties it inherits from the base <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> class. For example, in the inherited <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> property, a provider connection point keeps the type of interface returned by the provider. If the provider and consumer in a connection both work with the same interface type, the controls are compatible and capable of forming a direct connection. If the provider and consumer cannot work with the same interface type, they are incompatible and must use a <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> object to translate the provider connection point's <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> value into a type that the consumer can work with. Another important inherited property is the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A> property, which provides a friendly name to display in the UI for users to choose a provider connection point when creating connections. The display name is the required parameter when developers add a `ConnectionProvider` attribute to the callback method in a provider control. The inherited <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A> property is also useful, as indicated above, because it provides a unique identifier for a provider connection point in the event that a provider has multiple connection points. A provider can have multiple <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> objects defined in it, and in this case, when developers add the `ConnectionProvider` attribute to a method, they should specify an ID value to distinguish each connection point. One other notable inherited property is the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A> property, which indicates whether a provider connection point can connect simultaneously to multiple consumers. This property value is `true` by default for provider connection points (whereas it defaults to `false` for consumer connection points).  \\n  \\n The <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> class adds several unique methods to the members it inherits from the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> class. The <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> method retrieves an instance of the interface that the callback method will return to consumers. The <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces%2A> method retrieves additional consumer interfaces that are part of an existing connection, but are not the interfaces used to establish the connection.\"\n  example:\n  - \"The following code example shows simple ways to create a connection declaratively, programmatically, or through the UI, in each case making use of a provider connection point.  \\n  \\n The example has four parts:  \\n  \\n-   A user control that enables you to change the Web Parts display mode on a page.  \\n  \\n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \\n  \\n-   A Web page to host all the controls and run the code example.  \\n  \\n-   An explanation of how to run the example page.  \\n  \\n The first part of this code example is the user control that enables users to change display modes on a Web page. Save the following source code to an .ascx file, giving it the file name that is assigned to the `Src` attribute of the `Register` directive for this user control, which is near the top of the hosting Web page. For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  \\n  \\n <!-- TODO: review snippet reference [!code-csharp[WebParts_ConnectionPoint_Overview#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/displaymodemenucs.ascx#6)]  -->\\n <!-- TODO: review snippet reference [!code-vb[WebParts_ConnectionPoint_Overview#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/DisplayModeMenuVB.ascx#6)]  -->  \\n  \\n The second part of the code example is the source code for the interface and controls. The source file contains a simple interface named `IZipCode`. There is also a <xref:System.Web.UI.WebControls.WebParts.WebPart> class named `ZipCodeWebPart` that implements the interface and acts as the provider control. Its `ProvideIZipCode` method is the callback method that implements the interface's only member. The method simply returns an instance of the interface. Note that the method is marked with a `ConnectionProvider` attribute in its metadata. This is the mechanism for identifying the method as the callback method for the provider's connection point. The other <xref:System.Web.UI.WebControls.WebParts.WebPart> class is named `WeatherWebPart`, and it acts as the consumer for the connection. This class has a method named `GetZipCode` that gets an instance of the `IZipCode` interface from the provider control. Note that this method is marked as the consumer's connection point method with a `ConnectionConsumer` attribute in its metadata. This is the mechanism for identifying the connection point method in the consumer control.  \\n  \\n For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  \\n  \\n [!code-csharp[WebParts_ConnectionPoint_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/ZipCodeComponent.cs#2)]\\n [!code-vb[WebParts_ConnectionPoint_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/ZipCodeComponent.vb#2)]  \\n  \\n The third part of the code example is the Web page. Near the top are `Register` directives to register the custom controls that form the connection, and the user control that enables users to change display modes on the page. The connection itself is created declaratively within the `<staticconnections>` element on the page. This demonstrates one way of creating a connection--note the `ProviderConnectionPointID` attribute in the `<asp:webpartconnection>` element. You can also create the connection programmatically; the code for doing that is in the `Button1_Click` method. In this case, a <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object is created and then passed to a method that creates the actual connection. Whether the connection is created declaratively or programmatically, connection points must always be specified for both the provider and the consumer. The `Button2_Click` method accesses the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> objects for both the provider and the consumer, and writes some of their property values to a label in the page.  \\n  \\n <!-- TODO: review snippet reference [!code-csharp[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/connectionPointCS.aspx#1)]  -->\\n <!-- TODO: review snippet reference [!code-vb[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/connectionPointVB.aspx#1)]  -->  \\n  \\n After you load the page in a browser, click the **Connection Point Details** button. Information about the provider and consumer connection points established in the declarative connection appears. Next, use the **Display Mode** drop-down control to switch the page into connect mode. On the verbs menu of the **ZIP Code Consumer**<xref:System.Web.UI.WebControls.WebParts.WebPart> control (represented by a downward arrow in the title bar), click the connect verb. The connection UI appears, created automatically by the `<asp:connectionszone>` control declared in the page. This is another way of creating a connection (through the UI), along with the declarative and programmatic methods discussed earlier. Click the **Disconnect** button to terminate the existing static connection. Click the **Create a Connection to a Provider** link. The UI now displays a drop-down control that lists the provider connection point display name. Select the connection point in the drop-down list, and then click **Connect** to complete the connection. Next, click **Disconnect** again. Then, click the **Dynamic Connection** button to create a connection programmatically. Use the **Display Mode** control to return the page to browse mode. Click the **Connection Point Details** button again, to once more indicate details about the provider connection point object.  \\n  \\n The example has demonstrated establishing a connection and using a provider connection point in three ways: a static connection declared in the Web page markup; a connection created in code that used a <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object; and a connection created by a user through the connection UI.\"\n  syntax:\n    content: 'public class ProviderConnectionPoint : System.Web.UI.WebControls.WebParts.ConnectionPoint'\n  inheritance:\n  - System.Object\n  - System.Web.UI.WebControls.WebParts.ConnectionPoint\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  - System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections\n  - System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType\n  - System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID\n  - System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName\n  - System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled(System.Web.UI.Control)\n  - System.Web.UI.WebControls.WebParts.ConnectionPoint.ID\n  - System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.UI.WebControls.WebParts/ProviderConnectionPoint.xml\n  ms.technology:\n  - dotnet-webforms\n  author: tdykstra\n  ms.author: tdykstra\n  manager: wpickett\n- uid: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)\n  commentId: M:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)\n  id: '#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)'\n  parent: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint\n  langs:\n  - csharp\n  name: ProviderConnectionPoint(MethodInfo, Type, Type, String, String, Boolean)\n  nameWithType: ProviderConnectionPoint.ProviderConnectionPoint(MethodInfo, Type, Type, String, String, Boolean)\n  fullName: ProviderConnectionPoint.ProviderConnectionPoint(MethodInfo, Type, Type, String, String, Boolean)\n  type: Constructor\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls.WebParts\n  summary: Initializes a new instance of the <xref href=\"System.Web.UI.WebControls.WebParts.ProviderConnectionPoint\"></xref> class.\n  remarks: \"The <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.%23ctor%2A> constructor for the <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> class simply calls the base constructor, passing to it the various parameters and initializing the base class.  \\n  \\n The base class constructor checks a number of the parameters for a connection point and can throw several exceptions. For a list of possible exceptions, see the Exceptions section.  \\n  \\n You can call the <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.%23ctor%2A> constructor to create your own instance of the <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> class. However, in cases where you are simply establishing a connection and not extending the class, you should call the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> method to return an existing connection point object from a provider.\"\n  example:\n  - \"The following code example demonstrates how to derive from the <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> class to create a custom provider connection point.  \\n  \\n The code example has three parts:  \\n  \\n-   A source file that contains a provider <xref:System.Web.UI.WebControls.WebParts.WebPart> control, a consumer <xref:System.Web.UI.WebControls.WebParts.WebPart> control, and a custom <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object.  \\n  \\n-   A Web page that hosts the controls in a static connection.  \\n  \\n-   An explanation of how to run the example code.  \\n  \\n The first part of the code example is the source for the provider and consumer <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, and a custom <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> class, named `TableProviderConnectionPoint`. Note that the constructor of the `TableProviderConnectionPoint` class calls the base constructor, passing it the required parameters as indicated in the Parameters section. Also note that in the `TableProviderWebPart` class, the `GetConnectionInterface` method is specified as the callback method for connections, and the `ConnectionProvider` attribute declares the custom `TableProviderConnectionPoint` as a parameter. This demonstrates how to create a custom provider connection point and then associate it with a provider control. This example assumes that the source code is dynamically compiled, so you should place the source code file in an App_Code subfolder of your Web application.  \\n  \\n [!code-csharp[UI.WebControls.WebParts.ProviderConnectionPoint#1](~/samples/snippets/csharp/VS_Snippets_WebNet/UI.WebControls.WebParts.ProviderConnectionPoint/CS/connectionControls.cs#1)]  \\n  \\n The second part of the code example is the Web page that hosts the custom controls in a static Web Parts connection. At the top of the page is a `Register` directive to declare a prefix and the namespace for the custom controls. The connection is declared by using an `<asp:webpartconnection>` element, and the provider and consumer controls are declared within an `<asp:webpartzone>` element.  \\n  \\n <!-- TODO: review snippet reference [!code-csharp[UI.WebControls.WebParts.ProviderConnectionPoint#3](~/samples/snippets/csharp/VS_Snippets_WebNet/UI.WebControls.WebParts.ProviderConnectionPoint/CS/defaultcs.aspx#3)]  -->  \\n  \\n Load the page in a browser. The connection between the controls already exists, and the consumer displays the data from the provider, because the connection was declared as a static connection in the page.\"\n  syntax:\n    content: public ProviderConnectionPoint (System.Reflection.MethodInfo callbackMethod, Type interfaceType, Type controlType, string displayName, string id, bool allowsMultipleConnections);\n    parameters:\n    - id: callbackMethod\n      type: System.Reflection.MethodInfo\n      description: The method in the provider control that returns an interface instance to consumers to establish a connection.\n    - id: interfaceType\n      type: System.Type\n      description: The <xref href=\"System.Type\"></xref> of the interface that the provider serves to consumers.\n    - id: controlType\n      type: System.Type\n      description: The <xref href=\"System.Type\"></xref> of the provider control with which the provider connection point is associated.\n    - id: displayName\n      type: System.String\n      description: A friendly display name for the provider connection point that appears to users in the connection user interface (UI).\n    - id: id\n      type: System.String\n      description: A unique identifier for the provider connection point.\n    - id: allowsMultipleConnections\n      type: System.Boolean\n      description: A Boolean value indicating whether the provider connection point can have multiple simultaneous connections with consumers.\n  overload: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>callbackMethod</code> is `null`.  \\n  \\n \\\\- or -  \\n  \\n <code>interfaceType</code> is `null`.  \\n  \\n \\\\- or -  \\n  \\n <code>controlType</code> is `null`.  \\n  \\n \\\\- or -  \\n  \\n <code>displayName</code> is `null` or an empty string (\\\"\\\").\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>controlType</code> is not the same type as the provider control (or a valid class derived from it).\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.UI.WebControls.WebParts/ProviderConnectionPoint.xml\n  ms.technology:\n  - dotnet-webforms\n  author: tdykstra\n  ms.author: tdykstra\n  manager: wpickett\n- uid: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject(System.Web.UI.Control)\n  commentId: M:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject(System.Web.UI.Control)\n  id: GetObject(System.Web.UI.Control)\n  parent: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint\n  langs:\n  - csharp\n  name: GetObject(Control)\n  nameWithType: ProviderConnectionPoint.GetObject(Control)\n  fullName: ProviderConnectionPoint.GetObject(Control)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls.WebParts\n  summary: Invokes the callback method in a provider control that gets an interface instance to return to consumers.\n  remarks: \"This method returns an object from the provider control that is an instance of the interface used to establish a connection. The type of the object will be the type of the implemented interface. For example, two interfaces that are implemented for connections in the Web Parts control set are <xref:System.Web.UI.WebControls.WebParts.IWebPartField> and <xref:System.Web.UI.WebControls.WebParts.IWebPartRow>. When the <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> method is called on a <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object, if the associated provider implements one of these interfaces, the returned object will be of the same type.  \\n  \\n The <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> method is called by <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> objects when a connection is being activated. This is a critical step that actually initiates a connection and begins the process that enables two controls to share data.  \\n  \\n The consumer control in a connection must be able to work with the same type of interface as the provider. If it does not, the controls are incompatible and a <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> object must be used to establish a connection.\"\n  syntax:\n    content: public virtual object GetObject (System.Web.UI.Control control);\n    parameters:\n    - id: control\n      type: System.Web.UI.Control\n      description: The control acting as the provider in a Web Parts connection.\n    return:\n      type: System.Object\n      description: An <xref href=\"System.Object\"></xref> that is an instance of the interface a provider returns to consumers to establish a connection.\n  overload: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>control</code> is `null`.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.UI.WebControls.WebParts/ProviderConnectionPoint.xml\n  ms.technology:\n  - dotnet-webforms\n  author: tdykstra\n  ms.author: tdykstra\n  manager: wpickett\n- uid: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces(System.Web.UI.Control)\n  commentId: M:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces(System.Web.UI.Control)\n  id: GetSecondaryInterfaces(System.Web.UI.Control)\n  parent: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint\n  langs:\n  - csharp\n  name: GetSecondaryInterfaces(Control)\n  nameWithType: ProviderConnectionPoint.GetSecondaryInterfaces(Control)\n  fullName: ProviderConnectionPoint.GetSecondaryInterfaces(Control)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls.WebParts\n  summary: Gets an optional collection of secondary interfaces that can be supported by a provider connection point.\n  remarks: \"A provider connection point object always has a default interface that is used to establish a connection with consumers. An instance of the default interface is retrieved by calling the <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> method on a <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object.  \\n  \\n However, some provider controls will implement multiple interfaces to provide to consumers as part of a connection. These interfaces, which are not the default ones used to establish a connection, are called secondary interfaces. The <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces%2A> method provides a way to return a collection of references to the secondary interfaces, just as the <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> method returns a reference to the default interface.\"\n  syntax:\n    content: public virtual System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection GetSecondaryInterfaces (System.Web.UI.Control control);\n    parameters:\n    - id: control\n      type: System.Web.UI.Control\n      description: The control acting as the provider in a Web Parts connection.\n    return:\n      type: System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection\n      description: A <xref href=\"System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection\"></xref> of additional interfaces provided by the control acting as a provider.\n  overload: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.UI.WebControls.WebParts/ProviderConnectionPoint.xml\n  ms.technology:\n  - dotnet-webforms\n  author: tdykstra\n  ms.author: tdykstra\n  manager: wpickett\nreferences:\n- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint\n  parent: System.Web.UI.WebControls.WebParts\n  isExternal: false\n  name: ConnectionPoint\n  nameWithType: ConnectionPoint\n  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)\n  parent: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint\n  isExternal: false\n  name: ProviderConnectionPoint(MethodInfo, Type, Type, String, String, Boolean)\n  nameWithType: ProviderConnectionPoint.ProviderConnectionPoint(MethodInfo, Type, Type, String, String, Boolean)\n  fullName: ProviderConnectionPoint.ProviderConnectionPoint(MethodInfo, Type, Type, String, String, Boolean)\n- uid: System.Reflection.MethodInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MethodInfo\n  nameWithType: MethodInfo\n  fullName: System.Reflection.MethodInfo\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject(System.Web.UI.Control)\n  parent: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint\n  isExternal: false\n  name: GetObject(Control)\n  nameWithType: ProviderConnectionPoint.GetObject(Control)\n  fullName: ProviderConnectionPoint.GetObject(Control)\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Web.UI.Control\n  parent: System.Web.UI\n  isExternal: false\n  name: Control\n  nameWithType: Control\n  fullName: System.Web.UI.Control\n- uid: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces(System.Web.UI.Control)\n  parent: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint\n  isExternal: false\n  name: GetSecondaryInterfaces(Control)\n  nameWithType: ProviderConnectionPoint.GetSecondaryInterfaces(Control)\n  fullName: ProviderConnectionPoint.GetSecondaryInterfaces(Control)\n- uid: System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection\n  parent: System.Web.UI.WebControls.WebParts\n  isExternal: false\n  name: ConnectionInterfaceCollection\n  nameWithType: ConnectionInterfaceCollection\n  fullName: System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection\n- uid: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.#ctor*\n  parent: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint\n  isExternal: false\n  name: ProviderConnectionPoint\n  nameWithType: ProviderConnectionPoint.ProviderConnectionPoint\n  fullName: ProviderConnectionPoint.ProviderConnectionPoint\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.UI.WebControls.WebParts/ProviderConnectionPoint.xml\n- uid: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject*\n  parent: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint\n  isExternal: false\n  name: GetObject\n  nameWithType: ProviderConnectionPoint.GetObject\n  fullName: ProviderConnectionPoint.GetObject\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.UI.WebControls.WebParts/ProviderConnectionPoint.xml\n- uid: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces*\n  parent: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint\n  isExternal: false\n  name: GetSecondaryInterfaces\n  nameWithType: ProviderConnectionPoint.GetSecondaryInterfaces\n  fullName: ProviderConnectionPoint.GetSecondaryInterfaces\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.UI.WebControls.WebParts/ProviderConnectionPoint.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections\n  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint\n  isExternal: false\n  name: AllowsMultipleConnections\n  nameWithType: ConnectionPoint.AllowsMultipleConnections\n  fullName: ConnectionPoint.AllowsMultipleConnections\n- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType\n  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint\n  isExternal: false\n  name: ControlType\n  nameWithType: ConnectionPoint.ControlType\n  fullName: ConnectionPoint.ControlType\n- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID\n  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint\n  isExternal: false\n  name: DefaultID\n  nameWithType: ConnectionPoint.DefaultID\n  fullName: ConnectionPoint.DefaultID\n- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName\n  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint\n  isExternal: false\n  name: DisplayName\n  nameWithType: ConnectionPoint.DisplayName\n  fullName: ConnectionPoint.DisplayName\n- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled(System.Web.UI.Control)\n  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint\n  isExternal: false\n  name: GetEnabled(Control)\n  nameWithType: ConnectionPoint.GetEnabled(Control)\n  fullName: ConnectionPoint.GetEnabled(Control)\n- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.ID\n  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint\n  isExternal: false\n  name: ID\n  nameWithType: ConnectionPoint.ID\n  fullName: ConnectionPoint.ID\n- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType\n  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint\n  isExternal: false\n  name: InterfaceType\n  nameWithType: ConnectionPoint.InterfaceType\n  fullName: ConnectionPoint.InterfaceType\n"}