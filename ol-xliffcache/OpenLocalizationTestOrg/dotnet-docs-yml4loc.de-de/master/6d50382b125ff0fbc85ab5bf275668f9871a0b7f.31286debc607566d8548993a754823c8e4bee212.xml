{"nodes":[{"content":"Implements a cryptographic Random Number Generator (RNG) using the implementation provided by the cryptographic service provider (CSP). This class cannot be inherited.","nodes":[{"pos":[0,167],"content":"Implements a cryptographic Random Number Generator (RNG) using the implementation provided by the cryptographic service provider (CSP). This class cannot be inherited.","nodes":[{"content":"Implements a cryptographic Random Number Generator (RNG) using the implementation provided by the cryptographic service provider (CSP). This class cannot be inherited.","pos":[0,167],"nodes":[{"content":"Implements a cryptographic Random Number Generator (RNG) using the implementation provided by the cryptographic service provider (CSP).","pos":[0,135]},{"content":"This class cannot be inherited.","pos":[136,167]}]}]}],"pos":[1166,1334],"yaml":true},{"content":"> [!IMPORTANT]\n>  This type implements the <xref:System.IDisposable> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see the \"Using an Object that Implements IDisposable\" section in the <xref:System.IDisposable> interface topic.","nodes":[{"pos":[2,528],"content":"[!IMPORTANT]\n This type implements the <xref:System.IDisposable> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see the \"Using an Object that Implements IDisposable\" section in the <xref:System.IDisposable> interface topic.","leadings":["","> "],"nodes":[{"content":" This type implements the <xref:System.IDisposable> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see the \"Using an Object that Implements IDisposable\" section in the <xref:System.IDisposable> interface topic.","pos":[13,524],"nodes":[{"content":"This type implements the <ph id=\"ph1\">&lt;xref:System.IDisposable&gt;</ph> interface.","pos":[1,62],"source":" This type implements the <xref:System.IDisposable> interface."},{"content":"When you have finished using the type, you should dispose of it either directly or indirectly.","pos":[63,157]},{"content":"To dispose of the type directly, call its <ph id=\"ph1\">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method in a <ph id=\"ph2\">`try`</ph><ph id=\"ph3\">/</ph><ph id=\"ph4\">`catch`</ph> block.","pos":[158,269],"source":" To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block."},{"content":"To dispose of it indirectly, use a language construct such as <ph id=\"ph1\">`using`</ph> (in C#) or <ph id=\"ph2\">`Using`</ph> (in Visual Basic).","pos":[270,377],"source":" To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic)."},{"content":"For more information, see the \"Using an Object that Implements IDisposable\" section in the <ph id=\"ph1\">&lt;xref:System.IDisposable&gt;</ph> interface topic.","pos":[378,511],"source":" For more information, see the \"Using an Object that Implements IDisposable\" section in the <xref:System.IDisposable> interface topic."}]}]}],"pos":[1345,1886],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.RNGCryptoServiceProvider\"></xref> class.","nodes":[{"pos":[0,115],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.RNGCryptoServiceProvider\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.RNGCryptoServiceProvider\"></xref> class."}],"pos":[4597,4713],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.RNGCryptoServiceProvider\"></xref> class.","nodes":[{"pos":[0,115],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.RNGCryptoServiceProvider\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.RNGCryptoServiceProvider\"></xref> class."}],"pos":[6701,6817],"yaml":true},{"content":"This method does not directly initialize the <xref:System.Security.Cryptography.RNGCryptoServiceProvider> class.  Calling this method is equivalent to calling the <xref:System.Security.Cryptography.RNGCryptoServiceProvider.%23ctor%2A> constructor and passing `null`.","nodes":[{"pos":[0,266],"content":"This method does not directly initialize the <xref:System.Security.Cryptography.RNGCryptoServiceProvider> class.  Calling this method is equivalent to calling the <xref:System.Security.Cryptography.RNGCryptoServiceProvider.%23ctor%2A> constructor and passing `null`.","nodes":[{"content":"This method does not directly initialize the <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.RNGCryptoServiceProvider&gt;</ph> class.","pos":[0,112],"source":"This method does not directly initialize the <xref:System.Security.Cryptography.RNGCryptoServiceProvider> class."},{"content":"Calling this method is equivalent to calling the <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.RNGCryptoServiceProvider.%23ctor%2A&gt;</ph> constructor and passing <ph id=\"ph2\">`null`</ph>.","pos":[114,266],"source":"  Calling this method is equivalent to calling the <xref:System.Security.Cryptography.RNGCryptoServiceProvider.%23ctor%2A> constructor and passing `null`."}]}],"pos":[6828,7095],"yaml":true,"extradata":"MT"},{"content":"A byte array. This value is ignored.","nodes":[{"pos":[0,36],"content":"A byte array. This value is ignored.","nodes":[{"content":"A byte array. This value is ignored.","pos":[0,36],"nodes":[{"content":"A byte array.","pos":[0,13]},{"content":"This value is ignored.","pos":[14,36]}]}]}],"pos":[7239,7276],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.RNGCryptoServiceProvider\"></xref> class with the specified parameters.","nodes":[{"pos":[0,145],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.RNGCryptoServiceProvider\"&gt;&lt;/xref&gt;</ph> class with the specified parameters.","source":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.RNGCryptoServiceProvider\"></xref> class with the specified parameters."}],"pos":[8844,8990],"yaml":true},{"content":"The parameters to pass to the cryptographic service provider (CSP).","nodes":[{"pos":[0,67],"content":"The parameters to pass to the cryptographic service provider (CSP).","nodes":[{"content":"The parameters to pass to the cryptographic service provider (CSP).","pos":[0,67]}]}],"pos":[9211,9279],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.RNGCryptoServiceProvider\"></xref> class.","nodes":[{"pos":[0,115],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.RNGCryptoServiceProvider\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.RNGCryptoServiceProvider\"></xref> class."}],"pos":[10739,10855],"yaml":true},{"content":"This method does not directly initialize the <xref:System.Security.Cryptography.RNGCryptoServiceProvider> class.  Calling this method is equivalent to calling the <xref:System.Security.Cryptography.RNGCryptoServiceProvider.%23ctor%2A> constructor and passing `null`.","nodes":[{"pos":[0,266],"content":"This method does not directly initialize the <xref:System.Security.Cryptography.RNGCryptoServiceProvider> class.  Calling this method is equivalent to calling the <xref:System.Security.Cryptography.RNGCryptoServiceProvider.%23ctor%2A> constructor and passing `null`.","nodes":[{"content":"This method does not directly initialize the <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.RNGCryptoServiceProvider&gt;</ph> class.","pos":[0,112],"source":"This method does not directly initialize the <xref:System.Security.Cryptography.RNGCryptoServiceProvider> class."},{"content":"Calling this method is equivalent to calling the <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.RNGCryptoServiceProvider.%23ctor%2A&gt;</ph> constructor and passing <ph id=\"ph2\">`null`</ph>.","pos":[114,266],"source":"  Calling this method is equivalent to calling the <xref:System.Security.Cryptography.RNGCryptoServiceProvider.%23ctor%2A> constructor and passing `null`."}]}],"pos":[10866,11133],"yaml":true,"extradata":"MT"},{"content":"The string input. This parameter is ignored.","nodes":[{"pos":[0,44],"content":"The string input. This parameter is ignored.","nodes":[{"content":"The string input. This parameter is ignored.","pos":[0,44],"nodes":[{"content":"The string input.","pos":[0,17]},{"content":"This parameter is ignored.","pos":[18,44]}]}]}],"pos":[11277,11322],"yaml":true},{"content":"Fills an array of bytes with a cryptographically strong sequence of random values.","nodes":[{"pos":[0,82],"content":"Fills an array of bytes with a cryptographically strong sequence of random values.","nodes":[{"content":"Fills an array of bytes with a cryptographically strong sequence of random values.","pos":[0,82]}]}],"pos":[15051,15134],"yaml":true},{"content":"The length of the byte array determines how many cryptographically strong random bytes are produced.  \n  \n This method is thread safe.","nodes":[{"pos":[0,100],"content":"The length of the byte array determines how many cryptographically strong random bytes are produced.","nodes":[{"content":"The length of the byte array determines how many cryptographically strong random bytes are produced.","pos":[0,100]}]},{"pos":[107,134],"content":"This method is thread safe.","nodes":[{"content":"This method is thread safe.","pos":[0,27]}]}],"pos":[15145,15284],"yaml":true,"extradata":"MT"},{"content":"The array to fill with a cryptographically strong sequence of random values.","nodes":[{"pos":[0,76],"content":"The array to fill with a cryptographically strong sequence of random values.","nodes":[{"content":"The array to fill with a cryptographically strong sequence of random values.","pos":[0,76]}]}],"pos":[15864,15941],"yaml":true},{"content":"The cryptographic service provider (CSP) cannot be acquired.","nodes":[{"pos":[0,60],"content":"The cryptographic service provider (CSP) cannot be acquired.","nodes":[{"content":"The cryptographic service provider (CSP) cannot be acquired.","pos":[0,60]}]}],"pos":[16179,16240],"yaml":true},{"content":"<code>data</code> is `null`.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;data&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>data</code> is `null`."}],"pos":[16342,16371],"yaml":true},{"content":"Fills an array of bytes with a cryptographically strong sequence of random nonzero values.","nodes":[{"pos":[0,90],"content":"Fills an array of bytes with a cryptographically strong sequence of random nonzero values.","nodes":[{"content":"Fills an array of bytes with a cryptographically strong sequence of random nonzero values.","pos":[0,90]}]}],"pos":[17737,17828],"yaml":true},{"content":"The length of the byte array determines how many cryptographically strong random nonzero bytes are produced.","nodes":[{"pos":[0,108],"content":"The length of the byte array determines how many cryptographically strong random nonzero bytes are produced.","nodes":[{"content":"The length of the byte array determines how many cryptographically strong random nonzero bytes are produced.","pos":[0,108]}]}],"pos":[17839,17948],"yaml":true,"extradata":"MT"},{"content":"The array to fill with a cryptographically strong sequence of random nonzero values.","nodes":[{"pos":[0,84],"content":"The array to fill with a cryptographically strong sequence of random nonzero values.","nodes":[{"content":"The array to fill with a cryptographically strong sequence of random nonzero values.","pos":[0,84]}]}],"pos":[18802,18887],"yaml":true},{"content":"The cryptographic service provider (CSP) cannot be acquired.","nodes":[{"pos":[0,60],"content":"The cryptographic service provider (CSP) cannot be acquired.","nodes":[{"content":"The cryptographic service provider (CSP) cannot be acquired.","pos":[0,60]}]}],"pos":[19132,19193],"yaml":true},{"content":"<code>data</code> is `null`.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;data&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>data</code> is `null`."}],"pos":[19295,19324],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.Cryptography.RNGCryptoServiceProvider\n  commentId: T:System.Security.Cryptography.RNGCryptoServiceProvider\n  id: RNGCryptoServiceProvider\n  children:\n  - System.Security.Cryptography.RNGCryptoServiceProvider.#ctor\n  - System.Security.Cryptography.RNGCryptoServiceProvider.#ctor(System.Byte[])\n  - System.Security.Cryptography.RNGCryptoServiceProvider.#ctor(System.Security.Cryptography.CspParameters)\n  - System.Security.Cryptography.RNGCryptoServiceProvider.#ctor(System.String)\n  - System.Security.Cryptography.RNGCryptoServiceProvider.Dispose(System.Boolean)\n  - System.Security.Cryptography.RNGCryptoServiceProvider.Finalize\n  - System.Security.Cryptography.RNGCryptoServiceProvider.GetBytes(System.Byte[])\n  - System.Security.Cryptography.RNGCryptoServiceProvider.GetNonZeroBytes(System.Byte[])\n  langs:\n  - csharp\n  name: RNGCryptoServiceProvider\n  nameWithType: RNGCryptoServiceProvider\n  fullName: System.Security.Cryptography.RNGCryptoServiceProvider\n  type: Class\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Security.Cryptography.Csp\n  namespace: System.Security.Cryptography\n  summary: Implements a cryptographic Random Number Generator (RNG) using the implementation provided by the cryptographic service provider (CSP). This class cannot be inherited.\n  remarks: >-\n    > [!IMPORTANT]\n\n    >  This type implements the <xref:System.IDisposable> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see the \"Using an Object that Implements IDisposable\" section in the <xref:System.IDisposable> interface topic.\n  example:\n  - \"The following code example shows how to create a random number with the <xref:System.Security.Cryptography.RNGCryptoServiceProvider> class.  \\n  \\n [!code-cpp[RNGCSP#1](~/samples/snippets/cpp/VS_Snippets_CLR/RNGCSP/cpp/rngcsp.cpp#1)]\\n [!code-csharp[RNGCSP#1](~/samples/snippets/csharp/VS_Snippets_CLR/RNGCSP/CS/rngcsp.cs#1)]\\n [!code-vb[RNGCSP#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/RNGCSP/VB/rngcsp.vb#1)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public sealed class RNGCryptoServiceProvider : System.Security.Cryptography.RandomNumberGenerator\n  inheritance:\n  - System.Object\n  - System.Security.Cryptography.RandomNumberGenerator\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  - System.Security.Cryptography.RandomNumberGenerator.Create\n  - System.Security.Cryptography.RandomNumberGenerator.Create(System.String)\n  - System.Security.Cryptography.RandomNumberGenerator.Dispose\n  - System.Security.Cryptography.RandomNumberGenerator.GetBytes(System.Byte[],System.Int32,System.Int32)\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/RNGCryptoServiceProvider.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.RNGCryptoServiceProvider.#ctor\n  commentId: M:System.Security.Cryptography.RNGCryptoServiceProvider.#ctor\n  id: '#ctor'\n  parent: System.Security.Cryptography.RNGCryptoServiceProvider\n  langs:\n  - csharp\n  name: RNGCryptoServiceProvider()\n  nameWithType: RNGCryptoServiceProvider.RNGCryptoServiceProvider()\n  fullName: RNGCryptoServiceProvider.RNGCryptoServiceProvider()\n  type: Constructor\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Security.Cryptography.Csp\n  namespace: System.Security.Cryptography\n  summary: Initializes a new instance of the <xref href=\"System.Security.Cryptography.RNGCryptoServiceProvider\"></xref> class.\n  remarks: ''\n  example:\n  - \"The following code example shows how to create a random number with the <xref:System.Security.Cryptography.RNGCryptoServiceProvider> class.  \\n  \\n [!code-cpp[RNGCSP#1](~/samples/snippets/cpp/VS_Snippets_CLR/RNGCSP/cpp/rngcsp.cpp#1)]\\n [!code-csharp[RNGCSP#1](~/samples/snippets/csharp/VS_Snippets_CLR/RNGCSP/CS/rngcsp.cs#1)]\\n [!code-vb[RNGCSP#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/RNGCSP/VB/rngcsp.vb#1)]\"\n  syntax:\n    content: public RNGCryptoServiceProvider ();\n    parameters: []\n  overload: System.Security.Cryptography.RNGCryptoServiceProvider.#ctor*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/RNGCryptoServiceProvider.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.RNGCryptoServiceProvider.#ctor(System.Byte[])\n  commentId: M:System.Security.Cryptography.RNGCryptoServiceProvider.#ctor(System.Byte[])\n  id: '#ctor(System.Byte[])'\n  parent: System.Security.Cryptography.RNGCryptoServiceProvider\n  langs:\n  - csharp\n  name: RNGCryptoServiceProvider(Byte[])\n  nameWithType: RNGCryptoServiceProvider.RNGCryptoServiceProvider(Byte[])\n  fullName: RNGCryptoServiceProvider.RNGCryptoServiceProvider(Byte[])\n  type: Constructor\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Security.Cryptography.Csp\n  namespace: System.Security.Cryptography\n  summary: Initializes a new instance of the <xref href=\"System.Security.Cryptography.RNGCryptoServiceProvider\"></xref> class.\n  remarks: This method does not directly initialize the <xref:System.Security.Cryptography.RNGCryptoServiceProvider> class.  Calling this method is equivalent to calling the <xref:System.Security.Cryptography.RNGCryptoServiceProvider.%23ctor%2A> constructor and passing `null`.\n  syntax:\n    content: public RNGCryptoServiceProvider (byte[] rgb);\n    parameters:\n    - id: rgb\n      type: System.Byte[]\n      description: A byte array. This value is ignored.\n  overload: System.Security.Cryptography.RNGCryptoServiceProvider.#ctor*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/RNGCryptoServiceProvider.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.RNGCryptoServiceProvider.#ctor(System.Security.Cryptography.CspParameters)\n  commentId: M:System.Security.Cryptography.RNGCryptoServiceProvider.#ctor(System.Security.Cryptography.CspParameters)\n  id: '#ctor(System.Security.Cryptography.CspParameters)'\n  parent: System.Security.Cryptography.RNGCryptoServiceProvider\n  langs:\n  - csharp\n  name: RNGCryptoServiceProvider(CspParameters)\n  nameWithType: RNGCryptoServiceProvider.RNGCryptoServiceProvider(CspParameters)\n  fullName: RNGCryptoServiceProvider.RNGCryptoServiceProvider(CspParameters)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Security.Cryptography.Csp\n  namespace: System.Security.Cryptography\n  summary: Initializes a new instance of the <xref href=\"System.Security.Cryptography.RNGCryptoServiceProvider\"></xref> class with the specified parameters.\n  syntax:\n    content: public RNGCryptoServiceProvider (System.Security.Cryptography.CspParameters cspParams);\n    parameters:\n    - id: cspParams\n      type: System.Security.Cryptography.CspParameters\n      description: The parameters to pass to the cryptographic service provider (CSP).\n  overload: System.Security.Cryptography.RNGCryptoServiceProvider.#ctor*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/RNGCryptoServiceProvider.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.RNGCryptoServiceProvider.#ctor(System.String)\n  commentId: M:System.Security.Cryptography.RNGCryptoServiceProvider.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.Security.Cryptography.RNGCryptoServiceProvider\n  langs:\n  - csharp\n  name: RNGCryptoServiceProvider(String)\n  nameWithType: RNGCryptoServiceProvider.RNGCryptoServiceProvider(String)\n  fullName: RNGCryptoServiceProvider.RNGCryptoServiceProvider(String)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Security.Cryptography.Csp\n  namespace: System.Security.Cryptography\n  summary: Initializes a new instance of the <xref href=\"System.Security.Cryptography.RNGCryptoServiceProvider\"></xref> class.\n  remarks: This method does not directly initialize the <xref:System.Security.Cryptography.RNGCryptoServiceProvider> class.  Calling this method is equivalent to calling the <xref:System.Security.Cryptography.RNGCryptoServiceProvider.%23ctor%2A> constructor and passing `null`.\n  syntax:\n    content: public RNGCryptoServiceProvider (string str);\n    parameters:\n    - id: str\n      type: System.String\n      description: The string input. This parameter is ignored.\n  overload: System.Security.Cryptography.RNGCryptoServiceProvider.#ctor*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/RNGCryptoServiceProvider.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.RNGCryptoServiceProvider.Dispose(System.Boolean)\n  commentId: M:System.Security.Cryptography.RNGCryptoServiceProvider.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.Security.Cryptography.RNGCryptoServiceProvider\n  langs:\n  - csharp\n  name: Dispose(Boolean)\n  nameWithType: RNGCryptoServiceProvider.Dispose(Boolean)\n  fullName: RNGCryptoServiceProvider.Dispose(Boolean)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Security.Cryptography.Csp\n  namespace: System.Security.Cryptography\n  syntax:\n    content: protected override void Dispose (bool disposing);\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: ''\n  overload: System.Security.Cryptography.RNGCryptoServiceProvider.Dispose*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/RNGCryptoServiceProvider.xml\n- uid: System.Security.Cryptography.RNGCryptoServiceProvider.Finalize\n  commentId: M:System.Security.Cryptography.RNGCryptoServiceProvider.Finalize\n  id: Finalize\n  parent: System.Security.Cryptography.RNGCryptoServiceProvider\n  langs:\n  - csharp\n  name: Finalize()\n  nameWithType: RNGCryptoServiceProvider.Finalize()\n  fullName: RNGCryptoServiceProvider.Finalize()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: ~RNGCryptoServiceProvider ();\n    parameters: []\n  overload: System.Security.Cryptography.RNGCryptoServiceProvider.Finalize*\n  exceptions: []\n  version:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/RNGCryptoServiceProvider.xml\n- uid: System.Security.Cryptography.RNGCryptoServiceProvider.GetBytes(System.Byte[])\n  commentId: M:System.Security.Cryptography.RNGCryptoServiceProvider.GetBytes(System.Byte[])\n  id: GetBytes(System.Byte[])\n  parent: System.Security.Cryptography.RNGCryptoServiceProvider\n  langs:\n  - csharp\n  name: GetBytes(Byte[])\n  nameWithType: RNGCryptoServiceProvider.GetBytes(Byte[])\n  fullName: RNGCryptoServiceProvider.GetBytes(Byte[])\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Security.Cryptography.Csp\n  namespace: System.Security.Cryptography\n  summary: Fills an array of bytes with a cryptographically strong sequence of random values.\n  remarks: \"The length of the byte array determines how many cryptographically strong random bytes are produced.  \\n  \\n This method is thread safe.\"\n  example:\n  - \"The following code example shows how to create a random number with the <xref:System.Security.Cryptography.RNGCryptoServiceProvider> class.  \\n  \\n [!code-cpp[RNGCSP#1](~/samples/snippets/cpp/VS_Snippets_CLR/RNGCSP/cpp/rngcsp.cpp#1)]\\n [!code-csharp[RNGCSP#1](~/samples/snippets/csharp/VS_Snippets_CLR/RNGCSP/CS/rngcsp.cs#1)]\\n [!code-vb[RNGCSP#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/RNGCSP/VB/rngcsp.vb#1)]\"\n  syntax:\n    content: public override void GetBytes (byte[] data);\n    parameters:\n    - id: data\n      type: System.Byte[]\n      description: The array to fill with a cryptographically strong sequence of random values.\n  overload: System.Security.Cryptography.RNGCryptoServiceProvider.GetBytes*\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: The cryptographic service provider (CSP) cannot be acquired.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>data</code> is `null`.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/RNGCryptoServiceProvider.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.RNGCryptoServiceProvider.GetNonZeroBytes(System.Byte[])\n  commentId: M:System.Security.Cryptography.RNGCryptoServiceProvider.GetNonZeroBytes(System.Byte[])\n  id: GetNonZeroBytes(System.Byte[])\n  parent: System.Security.Cryptography.RNGCryptoServiceProvider\n  langs:\n  - csharp\n  name: GetNonZeroBytes(Byte[])\n  nameWithType: RNGCryptoServiceProvider.GetNonZeroBytes(Byte[])\n  fullName: RNGCryptoServiceProvider.GetNonZeroBytes(Byte[])\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Security.Cryptography.Csp\n  namespace: System.Security.Cryptography\n  summary: Fills an array of bytes with a cryptographically strong sequence of random nonzero values.\n  remarks: The length of the byte array determines how many cryptographically strong random nonzero bytes are produced.\n  example:\n  - \"The following code example creates a random sequence of 100 nonzero bytes and stores it in `random`.  \\n  \\n [!code-cpp[Classic RandomNumberGenerator.GetNonZeroBytes Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic RandomNumberGenerator.GetNonZeroBytes Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic RandomNumberGenerator.GetNonZeroBytes Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic RandomNumberGenerator.GetNonZeroBytes Example/CS/source.cs#1)]\\n [!code-vb[Classic RandomNumberGenerator.GetNonZeroBytes Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic RandomNumberGenerator.GetNonZeroBytes Example/VB/source.vb#1)]\"\n  syntax:\n    content: public override void GetNonZeroBytes (byte[] data);\n    parameters:\n    - id: data\n      type: System.Byte[]\n      description: The array to fill with a cryptographically strong sequence of random nonzero values.\n  overload: System.Security.Cryptography.RNGCryptoServiceProvider.GetNonZeroBytes*\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: The cryptographic service provider (CSP) cannot be acquired.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>data</code> is `null`.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/RNGCryptoServiceProvider.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\nreferences:\n- uid: System.Security.Cryptography.RandomNumberGenerator\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: RandomNumberGenerator\n  nameWithType: RandomNumberGenerator\n  fullName: System.Security.Cryptography.RandomNumberGenerator\n- uid: System.Security.Cryptography.CryptographicException\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CryptographicException\n  nameWithType: CryptographicException\n  fullName: System.Security.Cryptography.CryptographicException\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.Security.Cryptography.RNGCryptoServiceProvider.#ctor\n  parent: System.Security.Cryptography.RNGCryptoServiceProvider\n  isExternal: false\n  name: RNGCryptoServiceProvider()\n  nameWithType: RNGCryptoServiceProvider.RNGCryptoServiceProvider()\n  fullName: RNGCryptoServiceProvider.RNGCryptoServiceProvider()\n- uid: System.Security.Cryptography.RNGCryptoServiceProvider.#ctor(System.Byte[])\n  parent: System.Security.Cryptography.RNGCryptoServiceProvider\n  isExternal: false\n  name: RNGCryptoServiceProvider(Byte[])\n  nameWithType: RNGCryptoServiceProvider.RNGCryptoServiceProvider(Byte[])\n  fullName: RNGCryptoServiceProvider.RNGCryptoServiceProvider(Byte[])\n- uid: System.Byte\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte\n- uid: System.Byte[]\n  parent: System\n  isExternal: false\n  name: Byte[]\n  nameWithType: Byte[]\n  fullName: System.Byte[]\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: System.Byte\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Security.Cryptography.RNGCryptoServiceProvider.#ctor(System.Security.Cryptography.CspParameters)\n  parent: System.Security.Cryptography.RNGCryptoServiceProvider\n  isExternal: false\n  name: RNGCryptoServiceProvider(CspParameters)\n  nameWithType: RNGCryptoServiceProvider.RNGCryptoServiceProvider(CspParameters)\n  fullName: RNGCryptoServiceProvider.RNGCryptoServiceProvider(CspParameters)\n- uid: System.Security.Cryptography.CspParameters\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CspParameters\n  nameWithType: CspParameters\n  fullName: System.Security.Cryptography.CspParameters\n- uid: System.Security.Cryptography.RNGCryptoServiceProvider.#ctor(System.String)\n  parent: System.Security.Cryptography.RNGCryptoServiceProvider\n  isExternal: false\n  name: RNGCryptoServiceProvider(String)\n  nameWithType: RNGCryptoServiceProvider.RNGCryptoServiceProvider(String)\n  fullName: RNGCryptoServiceProvider.RNGCryptoServiceProvider(String)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Security.Cryptography.RNGCryptoServiceProvider.Dispose(System.Boolean)\n  parent: System.Security.Cryptography.RNGCryptoServiceProvider\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: RNGCryptoServiceProvider.Dispose(Boolean)\n  fullName: RNGCryptoServiceProvider.Dispose(Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Security.Cryptography.RNGCryptoServiceProvider.Finalize\n  parent: System.Security.Cryptography.RNGCryptoServiceProvider\n  isExternal: false\n  name: Finalize()\n  nameWithType: RNGCryptoServiceProvider.Finalize()\n  fullName: RNGCryptoServiceProvider.Finalize()\n- uid: System.Security.Cryptography.RNGCryptoServiceProvider.GetBytes(System.Byte[])\n  parent: System.Security.Cryptography.RNGCryptoServiceProvider\n  isExternal: false\n  name: GetBytes(Byte[])\n  nameWithType: RNGCryptoServiceProvider.GetBytes(Byte[])\n  fullName: RNGCryptoServiceProvider.GetBytes(Byte[])\n- uid: System.Security.Cryptography.RNGCryptoServiceProvider.GetNonZeroBytes(System.Byte[])\n  parent: System.Security.Cryptography.RNGCryptoServiceProvider\n  isExternal: false\n  name: GetNonZeroBytes(Byte[])\n  nameWithType: RNGCryptoServiceProvider.GetNonZeroBytes(Byte[])\n  fullName: RNGCryptoServiceProvider.GetNonZeroBytes(Byte[])\n- uid: System.Security.Cryptography.RNGCryptoServiceProvider.#ctor*\n  parent: System.Security.Cryptography.RNGCryptoServiceProvider\n  isExternal: false\n  name: RNGCryptoServiceProvider\n  nameWithType: RNGCryptoServiceProvider.RNGCryptoServiceProvider\n  fullName: RNGCryptoServiceProvider.RNGCryptoServiceProvider\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/RNGCryptoServiceProvider.xml\n- uid: System.Security.Cryptography.RNGCryptoServiceProvider.Dispose*\n  parent: System.Security.Cryptography.RNGCryptoServiceProvider\n  isExternal: false\n  name: Dispose\n  nameWithType: RNGCryptoServiceProvider.Dispose\n  fullName: RNGCryptoServiceProvider.Dispose\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/RNGCryptoServiceProvider.xml\n- uid: System.Security.Cryptography.RNGCryptoServiceProvider.Finalize*\n  parent: System.Security.Cryptography.RNGCryptoServiceProvider\n  isExternal: false\n  name: Finalize\n  nameWithType: RNGCryptoServiceProvider.Finalize\n  fullName: RNGCryptoServiceProvider.Finalize\n  monikers:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/RNGCryptoServiceProvider.xml\n- uid: System.Security.Cryptography.RNGCryptoServiceProvider.GetBytes*\n  parent: System.Security.Cryptography.RNGCryptoServiceProvider\n  isExternal: false\n  name: GetBytes\n  nameWithType: RNGCryptoServiceProvider.GetBytes\n  fullName: RNGCryptoServiceProvider.GetBytes\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/RNGCryptoServiceProvider.xml\n- uid: System.Security.Cryptography.RNGCryptoServiceProvider.GetNonZeroBytes*\n  parent: System.Security.Cryptography.RNGCryptoServiceProvider\n  isExternal: false\n  name: GetNonZeroBytes\n  nameWithType: RNGCryptoServiceProvider.GetNonZeroBytes\n  fullName: RNGCryptoServiceProvider.GetNonZeroBytes\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/RNGCryptoServiceProvider.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.Security.Cryptography.RandomNumberGenerator.Create\n  parent: System.Security.Cryptography.RandomNumberGenerator\n  isExternal: false\n  name: Create()\n  nameWithType: RandomNumberGenerator.Create()\n  fullName: RandomNumberGenerator.Create()\n- uid: System.Security.Cryptography.RandomNumberGenerator.Create(System.String)\n  parent: System.Security.Cryptography.RandomNumberGenerator\n  isExternal: false\n  name: Create(String)\n  nameWithType: RandomNumberGenerator.Create(String)\n  fullName: RandomNumberGenerator.Create(String)\n- uid: System.Security.Cryptography.RandomNumberGenerator.Dispose\n  parent: System.Security.Cryptography.RandomNumberGenerator\n  isExternal: false\n  name: Dispose()\n  nameWithType: RandomNumberGenerator.Dispose()\n  fullName: RandomNumberGenerator.Dispose()\n- uid: System.Security.Cryptography.RandomNumberGenerator.GetBytes(System.Byte[],System.Int32,System.Int32)\n  parent: System.Security.Cryptography.RandomNumberGenerator\n  isExternal: false\n  name: GetBytes(Byte[], Int32, Int32)\n  nameWithType: RandomNumberGenerator.GetBytes(Byte[], Int32, Int32)\n  fullName: RandomNumberGenerator.GetBytes(Byte[], Int32, Int32)\n"}