### YamlMime:ManagedReference
items:
- uid: System.Text.UTF7Encoding
  commentId: T:System.Text.UTF7Encoding
  id: UTF7Encoding
  children:
  - System.Text.UTF7Encoding.#ctor
  - System.Text.UTF7Encoding.#ctor(System.Boolean)
  - System.Text.UTF7Encoding.Equals(System.Object)
  - System.Text.UTF7Encoding.GetByteCount(System.String)
  - System.Text.UTF7Encoding.GetByteCount(System.Char*,System.Int32)
  - System.Text.UTF7Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)
  - System.Text.UTF7Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)
  - System.Text.UTF7Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)
  - System.Text.UTF7Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)
  - System.Text.UTF7Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)
  - System.Text.UTF7Encoding.GetCharCount(System.Byte*,System.Int32)
  - System.Text.UTF7Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)
  - System.Text.UTF7Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)
  - System.Text.UTF7Encoding.GetDecoder
  - System.Text.UTF7Encoding.GetEncoder
  - System.Text.UTF7Encoding.GetHashCode
  - System.Text.UTF7Encoding.GetMaxByteCount(System.Int32)
  - System.Text.UTF7Encoding.GetMaxCharCount(System.Int32)
  - System.Text.UTF7Encoding.GetString(System.Byte[],System.Int32,System.Int32)
  langs:
  - csharp
  name: UTF7Encoding
  nameWithType: UTF7Encoding
  fullName: System.Text.UTF7Encoding
  type: Class
  assemblies:
  - System.Text.Encoding.Extensions
  - mscorlib
  - netstandard
  namespace: System.Text
  summary: Represents a UTF-7 encoding of Unicode characters.
  remarks: "Encoding is the process of transforming a set of Unicode characters into a sequence of bytes. Decoding is the process of transforming a sequence of encoded bytes into a set of Unicode characters.  \n  \n The UTF-7 encoding represents Unicode characters as sequences of 7-bit ASCII characters. This encoding supports certain protocols for which it is required, most often e-mail or newsgroup protocols. Since UTF-7 is not particularly secure or robust, and most modern systems allow 8-bit encodings, UTF-8 should normally be preferred to UTF-7.  \n  \n> [!NOTE]\n>  <xref:System.Text.UTF7Encoding> does not provide error detection. For security reasons, the application should use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection.  \n  \n For more information about the UTFs and other encodings supported by <xref:System.Text>, see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md).  \n  \n The <xref:System.Text.UTF7Encoding.GetByteCount%2A> method determines how many bytes result in encoding a set of Unicode characters, and the <xref:System.Text.UTF7Encoding.GetBytes%2A> method performs the actual encoding.  \n  \n Likewise, the <xref:System.Text.UTF7Encoding.GetCharCount%2A> method determines how many characters result in decoding a sequence of bytes, and the <xref:System.Text.UTF7Encoding.GetChars%2A> and <xref:System.Text.UTF7Encoding.GetString%2A> methods perform the actual decoding.  \n  \n <xref:System.Text.UTF7Encoding> corresponds to the Windows code page 65000.  \n  \n> [!NOTE]\n>  The state of a UTF-7 encoded object is not preserved if the object is serialized and deserialized using different .NET Framework versions."
  example:
  - "The following code example demonstrates how to use a <xref:System.Text.UTF7Encoding> to encode a string of Unicode characters and store them in a byte array. Notice that when the byte array is decoded back to a string, no data is lost.  \n  \n [!code-cpp[System.Text.UTF7Encoding Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF7Encoding Example/CPP/snippet.cpp#1)]\n [!code-csharp[System.Text.UTF7Encoding Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF7Encoding Example/CS/snippet.cs#1)]\n [!code-vb[System.Text.UTF7Encoding Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF7Encoding Example/VB/snippet.vb#1)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class UTF7Encoding : System.Text.Encoding
  inheritance:
  - System.Object
  - System.Text.Encoding
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  - System.Text.Encoding.ASCII
  - System.Text.Encoding.BigEndianUnicode
  - System.Text.Encoding.BodyName
  - System.Text.Encoding.Clone
  - System.Text.Encoding.CodePage
  - System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[])
  - System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[],System.Int32,System.Int32)
  - System.Text.Encoding.DecoderFallback
  - System.Text.Encoding.Default
  - System.Text.Encoding.EncoderFallback
  - System.Text.Encoding.EncodingName
  - System.Text.Encoding.GetByteCount(System.Char[])
  - System.Text.Encoding.GetByteCount(System.String,System.Int32,System.Int32)
  - System.Text.Encoding.GetBytes(System.Char[])
  - System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32)
  - System.Text.Encoding.GetBytes(System.String)
  - System.Text.Encoding.GetBytes(System.String,System.Int32,System.Int32)
  - System.Text.Encoding.GetCharCount(System.Byte[])
  - System.Text.Encoding.GetChars(System.Byte[])
  - System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32)
  - System.Text.Encoding.GetEncoding(System.Int32)
  - System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)
  - System.Text.Encoding.GetEncoding(System.String)
  - System.Text.Encoding.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)
  - System.Text.Encoding.GetEncodings
  - System.Text.Encoding.GetPreamble
  - System.Text.Encoding.GetString(System.Byte*,System.Int32)
  - System.Text.Encoding.GetString(System.Byte[])
  - System.Text.Encoding.HeaderName
  - System.Text.Encoding.IsAlwaysNormalized
  - System.Text.Encoding.IsAlwaysNormalized(System.Text.NormalizationForm)
  - System.Text.Encoding.IsBrowserDisplay
  - System.Text.Encoding.IsBrowserSave
  - System.Text.Encoding.IsMailNewsDisplay
  - System.Text.Encoding.IsMailNewsSave
  - System.Text.Encoding.IsReadOnly
  - System.Text.Encoding.IsSingleByte
  - System.Text.Encoding.RegisterProvider(System.Text.EncodingProvider)
  - System.Text.Encoding.Unicode
  - System.Text.Encoding.UTF32
  - System.Text.Encoding.UTF7
  - System.Text.Encoding.UTF8
  - System.Text.Encoding.WebName
  - System.Text.Encoding.WindowsCodePage
  attributes:
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UTF7Encoding.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.UTF7Encoding.#ctor
  commentId: M:System.Text.UTF7Encoding.#ctor
  id: '#ctor'
  parent: System.Text.UTF7Encoding
  langs:
  - csharp
  name: UTF7Encoding()
  nameWithType: UTF7Encoding.UTF7Encoding()
  fullName: UTF7Encoding.UTF7Encoding()
  type: Constructor
  assemblies:
  - System.Text.Encoding.Extensions
  - mscorlib
  - netstandard
  namespace: System.Text
  summary: Initializes a new instance of the <xref href="System.Text.UTF7Encoding"></xref> class.
  remarks: "This constructor creates an instance that does not allow optional characters. Calling the <xref:System.Text.UTF7Encoding.%23ctor%2A> constructor is equivalent to calling the <xref:System.Text.UTF7Encoding.%23ctor%28System.Boolean%29?displayProperty=fullName> constructor that takes an `allowOptionals` parameter and specifying `false` for that parameter.  \n  \n If an instance allows optional characters, Unicode code points are encoded with a corresponding optional character instead of a modified base 64 character. The optional characters are exclamation point (\"!\"), backward slash (\"\\\\\"), vertical line (\"&#124;\"), double quote (\"\"\"), number sign (\"#\"), dollar sign (\"$\"), percent sign (\"%\"), ampersand (\"&\"), asterisk (\"*\"), semicolon (\";\"), left angle bracket (\"\\<\"), right angle bracket (\">\"), left curly bracket (\"{\"), right curly bracket (\"}\"), left square bracket (\"[\"), right square bracket (\"]\"), equal sign (\"=\"), at sign (\"@\"), circumflex accent (\"^\"), underscore (\"_\"), and grave accent (\"`\").  \n  \n> [!NOTE]\n>  <xref:System.Text.UTF7Encoding> does not provide error detection. For security reasons, your applications are recommended to use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection."
  example:
  - "The following code example demonstrates how to create a new <xref:System.Text.UTF7Encoding> instance and display the name of the encoding.  \n  \n [!code-cpp[System.Text.UTF7Encoding.ctor1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.ctor1 Example/CPP/ctor.cpp#1)]\n [!code-csharp[System.Text.UTF7Encoding.ctor1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.ctor1 Example/CS/ctor.cs#1)]\n [!code-vb[System.Text.UTF7Encoding.ctor1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF7Encoding.ctor1 Example/VB/ctor.vb#1)]"
  syntax:
    content: public UTF7Encoding ();
    parameters: []
  overload: System.Text.UTF7Encoding.#ctor*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UTF7Encoding.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.UTF7Encoding.#ctor(System.Boolean)
  commentId: M:System.Text.UTF7Encoding.#ctor(System.Boolean)
  id: '#ctor(System.Boolean)'
  parent: System.Text.UTF7Encoding
  langs:
  - csharp
  name: UTF7Encoding(Boolean)
  nameWithType: UTF7Encoding.UTF7Encoding(Boolean)
  fullName: UTF7Encoding.UTF7Encoding(Boolean)
  type: Constructor
  assemblies:
  - System.Text.Encoding.Extensions
  - mscorlib
  - netstandard
  namespace: System.Text
  summary: Initializes a new instance of the <xref href="System.Text.UTF7Encoding"></xref> class. A parameter specifies whether to allow optional characters.
  remarks: "If an instance allows optional characters, Unicode code points are encoded with a corresponding optional character instead of a modified base 64 character. The optional characters are exclamation point (\"!\"), backward slash (\"\\\\\"), vertical line (\"&#124;\"), double quote (\"\"\"), number sign (\"#\"), dollar sign (\"$\"), percent sign (\"%\"), ampersand (\"&\"), asterisk (\"*\"), semicolon (\";\"), left angle bracket (\"\\<\"), right angle bracket (\">\"), left curly bracket (\"{\"), right curly bracket (\"}\"), left square bracket (\"[\"), right square bracket (\"]\"), equal sign (\"=\"), at sign (\"@\"), circumflex accent (\"^\"), underscore (\"_\"), and grave accent (\"`\").  \n  \n> [!NOTE]\n>  <xref:System.Text.UTF7Encoding> does not provide error detection. For security reasons, your applications are recommended to use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection."
  example:
  - "The following code example demonstrates how to create a new <xref:System.Text.UTF7Encoding> instance that allows optional characters.  \n  \n [!code-cpp[System.Text.UTF7Encoding.ctor2 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.ctor2 Example/CPP/ctor-boolean.cpp#1)]\n [!code-csharp[System.Text.UTF7Encoding.ctor2 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.ctor2 Example/CS/ctor-boolean.cs#1)]\n [!code-vb[System.Text.UTF7Encoding.ctor2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF7Encoding.ctor2 Example/VB/ctor-boolean.vb#1)]"
  syntax:
    content: public UTF7Encoding (bool allowOptionals);
    parameters:
    - id: allowOptionals
      type: System.Boolean
      description: '`true` to specify that optional characters are allowed; otherwise, `false`.'
  overload: System.Text.UTF7Encoding.#ctor*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UTF7Encoding.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.UTF7Encoding.Equals(System.Object)
  commentId: M:System.Text.UTF7Encoding.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Text.UTF7Encoding
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: UTF7Encoding.Equals(Object)
  fullName: UTF7Encoding.Equals(Object)
  type: Method
  assemblies:
  - System.Text.Encoding.Extensions
  - mscorlib
  - netstandard
  namespace: System.Text
  summary: Gets a value indicating whether the specified object is equal to the current <xref href="System.Text.UTF7Encoding"></xref> object.
  remarks: Two <xref:System.Text.UTF7Encoding> objects are equal if they both either allow or disallow optional characters, and if their underlying <xref:System.Text.Encoding.EncoderFallback%2A> and <xref:System.Text.Encoding.DecoderFallback%2A> properties are equal.
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(false)]

      public override bool Equals (object value);
    parameters:
    - id: value
      type: System.Object
      description: An object to compare to the current <xref href="System.Text.UTF7Encoding"></xref> object.
    return:
      type: System.Boolean
      description: '`true` if <code>value</code> is a <xref href="System.Text.UTF7Encoding"></xref> object and is equal to the current <xref href="System.Text.UTF7Encoding"></xref> object; otherwise, `false`.'
  overload: System.Text.UTF7Encoding.Equals*
  exceptions: []
  attributes:
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UTF7Encoding.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.UTF7Encoding.GetByteCount(System.String)
  commentId: M:System.Text.UTF7Encoding.GetByteCount(System.String)
  id: GetByteCount(System.String)
  parent: System.Text.UTF7Encoding
  langs:
  - csharp
  name: GetByteCount(String)
  nameWithType: UTF7Encoding.GetByteCount(String)
  fullName: UTF7Encoding.GetByteCount(String)
  type: Method
  assemblies:
  - System.Text.Encoding.Extensions
  - mscorlib
  - netstandard
  namespace: System.Text
  summary: Calculates the number of bytes produced by encoding the characters in the specified <xref href="System.String"></xref> object.
  remarks: To calculate the exact array size that <xref:System.Text.UTF7Encoding.GetBytes%2A> requires to store the resulting bytes, the application uses <xref:System.Text.UTF7Encoding.GetByteCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>. The <xref:System.Text.UTF7Encoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> method generally executes faster.
  example:
  - "The following code example demonstrates how to use the <xref:System.Text.UTF7Encoding.GetByteCount%2A> method to return the number of bytes required to encode a character array.  \n  \n [!code-cpp[System.Text.UTF7Encoding.GetByteCount Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetByteCount Example/CPP/getbytecount-char[]-int32-int32.cpp#1)]\n [!code-csharp[System.Text.UTF7Encoding.GetByteCount Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetByteCount Example/CS/getbytecount-char[]-int32-int32.cs#1)]\n [!code-vb[System.Text.UTF7Encoding.GetByteCount Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetByteCount Example/VB/getbytecount-char[]-int32-int32.vb#1)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(false)]

      public override int GetByteCount (string s);
    parameters:
    - id: s
      type: System.String
      description: The <xref href="System.String"></xref> object containing the set of characters to encode.
    return:
      type: System.Int32
      description: The number of bytes produced by encoding the specified characters.
  overload: System.Text.UTF7Encoding.GetByteCount*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>s</code> is `null` (`Nothing`).
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The resulting number of bytes is greater than the maximum number that can be returned as an int.
  - type: System.Text.EncoderFallbackException
    commentId: T:System.Text.EncoderFallbackException
    description: "A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)  \n  \n -and-  \n  \n <xref href=\"System.Text.Encoding.EncoderFallback\"></xref> is set to <xref href=\"System.Text.EncoderExceptionFallback\"></xref>."
  attributes:
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UTF7Encoding.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.UTF7Encoding.GetByteCount(System.Char*,System.Int32)
  commentId: M:System.Text.UTF7Encoding.GetByteCount(System.Char*,System.Int32)
  id: GetByteCount(System.Char*,System.Int32)
  parent: System.Text.UTF7Encoding
  langs:
  - csharp
  name: GetByteCount(Char*, Int32)
  nameWithType: UTF7Encoding.GetByteCount(Char*, Int32)
  fullName: UTF7Encoding.GetByteCount(Char*, Int32)
  type: Method
  assemblies:
  - System.Text.Encoding.Extensions
  - mscorlib
  - netstandard
  namespace: System.Text
  summary: Calculates the number of bytes produced by encoding a set of characters starting at the specified character pointer.
  remarks: To calculate the exact array size that <xref:System.Text.UTF7Encoding.GetBytes%2A> requires to store the resulting bytes, the application uses <xref:System.Text.UTF7Encoding.GetByteCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>. The <xref:System.Text.UTF7Encoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> method generally executes faster.
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      [System.Runtime.InteropServices.ComVisible(false)]

      [System.Security.SecurityCritical]

      public override int GetByteCount (char* chars, int count);
    parameters:
    - id: chars
      type: System.Char*
      description: A pointer to the first character to encode.
    - id: count
      type: System.Int32
      description: The number of characters to encode.
    return:
      type: System.Int32
      description: The number of bytes produced by encoding the specified characters.
  overload: System.Text.UTF7Encoding.GetByteCount*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>chars</code> is `null` (`Nothing` in Visual Basic .NET).
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>count</code> is less than zero.  \n  \n -or-  \n  \n The resulting number of bytes is greater than the maximum number that can be returned as an int."
  - type: System.Text.EncoderFallbackException
    commentId: T:System.Text.EncoderFallbackException
    description: "A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)  \n  \n -and-  \n  \n <xref href=\"System.Text.Encoding.EncoderFallback\"></xref> is set to <xref href=\"System.Text.EncoderExceptionFallback\"></xref>."
  attributes:
  - type: System.CLSCompliantAttribute
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  - type: System.Security.SecurityCriticalAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UTF7Encoding.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.UTF7Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)
  commentId: M:System.Text.UTF7Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)
  id: GetByteCount(System.Char[],System.Int32,System.Int32)
  parent: System.Text.UTF7Encoding
  langs:
  - csharp
  name: GetByteCount(Char[], Int32, Int32)
  nameWithType: UTF7Encoding.GetByteCount(Char[], Int32, Int32)
  fullName: UTF7Encoding.GetByteCount(Char[], Int32, Int32)
  type: Method
  assemblies:
  - System.Text.Encoding.Extensions
  - mscorlib
  - netstandard
  namespace: System.Text
  summary: Calculates the number of bytes produced by encoding a set of characters from the specified character array.
  remarks: To calculate the exact array size required by <xref:System.Text.UTF7Encoding.GetBytes%2A> to store the resulting bytes, the application uses <xref:System.Text.UTF7Encoding.GetByteCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>. The <xref:System.Text.UTF7Encoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> method generally executes faster.
  example:
  - "The following code example demonstrates how to use the <xref:System.Text.UTF7Encoding.GetByteCount%2A> method to return the number of bytes required to encode an array of Unicode characters.  \n  \n [!code-cpp[System.Text.UTF7Encoding.GetByteCount Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetByteCount Example/CPP/getbytecount-char[]-int32-int32.cpp#1)]\n [!code-csharp[System.Text.UTF7Encoding.GetByteCount Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetByteCount Example/CS/getbytecount-char[]-int32-int32.cs#1)]\n [!code-vb[System.Text.UTF7Encoding.GetByteCount Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetByteCount Example/VB/getbytecount-char[]-int32-int32.vb#1)]"
  syntax:
    content: public override int GetByteCount (char[] chars, int index, int count);
    parameters:
    - id: chars
      type: System.Char[]
      description: The character array containing the set of characters to encode.
    - id: index
      type: System.Int32
      description: The index of the first character to encode.
    - id: count
      type: System.Int32
      description: The number of characters to encode.
    return:
      type: System.Int32
      description: The number of bytes produced by encoding the specified characters.
  overload: System.Text.UTF7Encoding.GetByteCount*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>chars</code> is `null` (`Nothing`).
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code> or <code>count</code> is less than zero.  \n  \n -or-  \n  \n <code>index</code> and <code>count</code> do not denote a valid range in <code>chars</code>.  \n  \n -or-  \n  \n The resulting number of bytes is greater than the maximum number that can be returned as an int."
  - type: System.Text.EncoderFallbackException
    commentId: T:System.Text.EncoderFallbackException
    description: "A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)  \n  \n -and-  \n  \n <xref href=\"System.Text.Encoding.EncoderFallback\"></xref> is set to <xref href=\"System.Text.EncoderExceptionFallback\"></xref>."
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UTF7Encoding.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.UTF7Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)
  commentId: M:System.Text.UTF7Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)
  id: GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)
  parent: System.Text.UTF7Encoding
  langs:
  - csharp
  name: GetBytes(Char*, Int32, Byte*, Int32)
  nameWithType: UTF7Encoding.GetBytes(Char*, Int32, Byte*, Int32)
  fullName: UTF7Encoding.GetBytes(Char*, Int32, Byte*, Int32)
  type: Method
  assemblies:
  - System.Text.Encoding.Extensions
  - mscorlib
  - netstandard
  namespace: System.Text
  summary: Encodes a set of characters starting at the specified character pointer into a sequence of bytes that are stored starting at the specified byte pointer.
  remarks: "To calculate the exact array size required by <xref:System.Text.UTF7Encoding.GetBytes%2A> to store the resulting bytes, the application uses <xref:System.Text.UTF7Encoding.GetByteCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>. The <xref:System.Text.UTF7Encoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> method generally executes faster.  \n  \n Data to be converted, such as data read from a stream, might be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UTF7Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF7Encoding.GetEncoder%2A> method, respectively.  \n  \n> [!NOTE]\n>  <xref:System.Text.UTF7Encoding> does not provide error detection. Invalid characters are encoded as a modified base 64 character. For security reasons, your applications are recommended to use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection."
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      [System.Runtime.InteropServices.ComVisible(false)]

      [System.Security.SecurityCritical]

      public override int GetBytes (char* chars, int charCount, byte* bytes, int byteCount);
    parameters:
    - id: chars
      type: System.Char*
      description: A pointer to the first character to encode.
    - id: charCount
      type: System.Int32
      description: The number of characters to encode.
    - id: bytes
      type: System.Byte*
      description: A pointer to the location at which to start writing the resulting sequence of bytes.
    - id: byteCount
      type: System.Int32
      description: The maximum number of bytes to write.
    return:
      type: System.Int32
      description: The actual number of bytes written at the location indicated by <code>bytes</code>.
  overload: System.Text.UTF7Encoding.GetBytes*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>chars</code> is `null` (`Nothing`).  \n  \n -or-  \n  \n <code>bytes</code> is `null` (`Nothing`)."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>charCount</code> or <code>byteCount</code> is less than zero.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>byteCount</code> is less than the resulting number of bytes.
  - type: System.Text.EncoderFallbackException
    commentId: T:System.Text.EncoderFallbackException
    description: "A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)  \n  \n -and-  \n  \n <xref href=\"System.Text.Encoding.EncoderFallback\"></xref> is set to <xref href=\"System.Text.EncoderExceptionFallback\"></xref>."
  attributes:
  - type: System.CLSCompliantAttribute
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  - type: System.Security.SecurityCriticalAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UTF7Encoding.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.UTF7Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)
  commentId: M:System.Text.UTF7Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)
  id: GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)
  parent: System.Text.UTF7Encoding
  langs:
  - csharp
  name: GetBytes(Char[], Int32, Int32, Byte[], Int32)
  nameWithType: UTF7Encoding.GetBytes(Char[], Int32, Int32, Byte[], Int32)
  fullName: UTF7Encoding.GetBytes(Char[], Int32, Int32, Byte[], Int32)
  type: Method
  assemblies:
  - System.Text.Encoding.Extensions
  - mscorlib
  - netstandard
  namespace: System.Text
  summary: Encodes a set of characters from the specified character array into the specified byte array.
  remarks: "To calculate the exact array size required by <xref:System.Text.UTF7Encoding.GetBytes%2A> to store the resulting bytes, the application uses <xref:System.Text.UTF7Encoding.GetByteCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>. The <xref:System.Text.UTF7Encoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> method generally executes faster.  \n  \n Data to be converted, such as data read from a stream, might be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UTF7Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF7Encoding.GetEncoder%2A> method, respectively.  \n  \n> [!NOTE]\n>  <xref:System.Text.UTF7Encoding> does not provide error detection. Invalid characters are encoded as a modified base 64 character. For security reasons, your applications are recommended to use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection."
  example:
  - "The following code example demonstrates how to use the <xref:System.Text.UTF7Encoding.GetBytes%2A> method to encode a range of characters from a <xref:System.String> and store the encoded bytes in a range of elements in a byte array.  \n  \n [!code-cpp[System.Text.UTF7Encoding.GetBytes Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetBytes Example/CPP/getbytes-char[]-int32-int32-byte[]-int32.cpp#1)]\n [!code-csharp[System.Text.UTF7Encoding.GetBytes Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetBytes Example/CS/getbytes-char[]-int32-int32-byte[]-int32.cs#1)]\n [!code-vb[System.Text.UTF7Encoding.GetBytes Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetBytes Example/VB/getbytes-char[]-int32-int32-byte[]-int32.vb#1)]"
  syntax:
    content: public override int GetBytes (char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex);
    parameters:
    - id: chars
      type: System.Char[]
      description: The character array containing the set of characters to encode.
    - id: charIndex
      type: System.Int32
      description: The index of the first character to encode.
    - id: charCount
      type: System.Int32
      description: The number of characters to encode.
    - id: bytes
      type: System.Byte[]
      description: The byte array to contain the resulting sequence of bytes.
    - id: byteIndex
      type: System.Int32
      description: The index at which to start writing the resulting sequence of bytes.
    return:
      type: System.Int32
      description: The actual number of bytes written into <code>bytes</code>.
  overload: System.Text.UTF7Encoding.GetBytes*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>chars</code> is `null` (`Nothing`).  \n  \n -or-  \n  \n <code>bytes</code> is `null` (`Nothing`)."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>charIndex</code> or <code>charCount</code> or <code>byteIndex</code> is less than zero.  \n  \n -or-  \n  \n <code>charIndex</code> and <code>charCount</code> do not denote a valid range in <code>chars</code>.  \n  \n -or-  \n  \n <code>byteIndex</code> is not a valid index in <code>bytes</code>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>bytes</code> does not have enough capacity from <code>byteIndex</code> to the end of the array to accommodate the resulting bytes.
  - type: System.Text.EncoderFallbackException
    commentId: T:System.Text.EncoderFallbackException
    description: "A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)  \n  \n -and-  \n  \n <xref href=\"System.Text.Encoding.EncoderFallback\"></xref> is set to <xref href=\"System.Text.EncoderExceptionFallback\"></xref>."
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UTF7Encoding.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.UTF7Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)
  commentId: M:System.Text.UTF7Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)
  id: GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)
  parent: System.Text.UTF7Encoding
  langs:
  - csharp
  name: GetBytes(String, Int32, Int32, Byte[], Int32)
  nameWithType: UTF7Encoding.GetBytes(String, Int32, Int32, Byte[], Int32)
  fullName: UTF7Encoding.GetBytes(String, Int32, Int32, Byte[], Int32)
  type: Method
  assemblies:
  - System.Text.Encoding.Extensions
  - mscorlib
  - netstandard
  namespace: System.Text
  summary: Encodes a set of characters from the specified <xref href="System.String"></xref> into the specified byte array.
  remarks: "To calculate the exact array size required by <xref:System.Text.UTF7Encoding.GetBytes%2A> to store the resulting bytes, the application uses <xref:System.Text.UTF7Encoding.GetByteCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>. The <xref:System.Text.UTF7Encoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> method generally executes faster.  \n  \n Data to be converted, such as data read from a stream, might be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UTF7Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF7Encoding.GetEncoder%2A> method, respectively.  \n  \n> [!NOTE]\n>  <xref:System.Text.UTF7Encoding> does not provide error detection. Invalid characters are encoded as a modified base 64 character. For security reasons, your applications are recommended to use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection."
  example:
  - "The following code example demonstrates how to use the <xref:System.Text.UTF7Encoding.GetBytes%2A> method to encode a range of elements from a Unicode character array, and store the encoded bytes in a range of elements in a byte array.  \n  \n [!code-cpp[System.Text.UTF7Encoding.GetBytes Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetBytes Example/CPP/getbytes-char[]-int32-int32-byte[]-int32.cpp#1)]\n [!code-csharp[System.Text.UTF7Encoding.GetBytes Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetBytes Example/CS/getbytes-char[]-int32-int32-byte[]-int32.cs#1)]\n [!code-vb[System.Text.UTF7Encoding.GetBytes Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetBytes Example/VB/getbytes-char[]-int32-int32-byte[]-int32.vb#1)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(false)]

      public override int GetBytes (string s, int charIndex, int charCount, byte[] bytes, int byteIndex);
    parameters:
    - id: s
      type: System.String
      description: The <xref href="System.String"></xref> containing the set of characters to encode.
    - id: charIndex
      type: System.Int32
      description: The index of the first character to encode.
    - id: charCount
      type: System.Int32
      description: The number of characters to encode.
    - id: bytes
      type: System.Byte[]
      description: The byte array to contain the resulting sequence of bytes.
    - id: byteIndex
      type: System.Int32
      description: The index at which to start writing the resulting sequence of bytes.
    return:
      type: System.Int32
      description: The actual number of bytes written into <code>bytes</code>.
  overload: System.Text.UTF7Encoding.GetBytes*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>s</code> is `null` (`Nothing`).  \n  \n -or-  \n  \n <code>bytes</code> is `null` (`Nothing`)."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>charIndex</code> or <code>charCount</code> or <code>byteIndex</code> is less than zero.  \n  \n -or-  \n  \n <code>charIndex</code> and <code>charCount</code> do not denote a valid range in <code>chars</code>.  \n  \n -or-  \n  \n <code>byteIndex</code> is not a valid index in <code>bytes</code>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>bytes</code> does not have enough capacity from <code>byteIndex</code> to the end of the array to accommodate the resulting bytes.
  - type: System.Text.EncoderFallbackException
    commentId: T:System.Text.EncoderFallbackException
    description: "A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)  \n  \n -and-  \n  \n <xref href=\"System.Text.Encoding.EncoderFallback\"></xref> is set to <xref href=\"System.Text.EncoderExceptionFallback\"></xref>."
  attributes:
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UTF7Encoding.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.UTF7Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)
  commentId: M:System.Text.UTF7Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)
  id: GetCharCount(System.Byte[],System.Int32,System.Int32)
  parent: System.Text.UTF7Encoding
  langs:
  - csharp
  name: GetCharCount(Byte[], Int32, Int32)
  nameWithType: UTF7Encoding.GetCharCount(Byte[], Int32, Int32)
  fullName: UTF7Encoding.GetCharCount(Byte[], Int32, Int32)
  type: Method
  assemblies:
  - System.Text.Encoding.Extensions
  - mscorlib
  - netstandard
  namespace: System.Text
  summary: Calculates the number of characters produced by decoding a sequence of bytes from the specified byte array.
  remarks: To calculate the exact array size required by <xref:System.Text.UTF7Encoding.GetChars%2A> to store the resulting characters, use <xref:System.Text.UTF7Encoding.GetCharCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A>. The <xref:System.Text.UTF7Encoding.GetCharCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> method generally executes faster.
  example:
  - "The following code example demonstrates how to use the <xref:System.Text.UTF7Encoding.GetCharCount%2A> method to return the number of characters produced by decoding a range of elements in a byte array.  \n  \n [!code-cpp[System.Text.UnicodeEncoding.GetCharCount Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetCharCount Example/CPP/getcharcount-byte[]-int32-int32.cpp#1)]\n [!code-csharp[System.Text.UnicodeEncoding.GetCharCount Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetCharCount Example/CS/getcharcount-byte[]-int32-int32.cs#1)]\n [!code-vb[System.Text.UnicodeEncoding.GetCharCount Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetCharCount Example/VB/getcharcount-byte[]-int32-int32.vb#1)]"
  syntax:
    content: public override int GetCharCount (byte[] bytes, int index, int count);
    parameters:
    - id: bytes
      type: System.Byte[]
      description: The byte array containing the sequence of bytes to decode.
    - id: index
      type: System.Int32
      description: The index of the first byte to decode.
    - id: count
      type: System.Int32
      description: The number of bytes to decode.
    return:
      type: System.Int32
      description: The number of characters produced by decoding the specified sequence of bytes.
  overload: System.Text.UTF7Encoding.GetCharCount*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>bytes</code> is `null` (`Nothing`).
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code> or <code>count</code> is less than zero.  \n  \n -or-  \n  \n <code>index</code> and <code>count</code> do not denote a valid range in <code>bytes</code>.  \n  \n -or-  \n  \n The resulting number of characters is greater than the maximum number that can be returned as an int."
  - type: System.Text.DecoderFallbackException
    commentId: T:System.Text.DecoderFallbackException
    description: "A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)  \n  \n -and-  \n  \n <xref href=\"System.Text.Encoding.DecoderFallback\"></xref> is set to <xref href=\"System.Text.DecoderExceptionFallback\"></xref>."
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UTF7Encoding.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.UTF7Encoding.GetCharCount(System.Byte*,System.Int32)
  commentId: M:System.Text.UTF7Encoding.GetCharCount(System.Byte*,System.Int32)
  id: GetCharCount(System.Byte*,System.Int32)
  parent: System.Text.UTF7Encoding
  langs:
  - csharp
  name: GetCharCount(Byte*, Int32)
  nameWithType: UTF7Encoding.GetCharCount(Byte*, Int32)
  fullName: UTF7Encoding.GetCharCount(Byte*, Int32)
  type: Method
  assemblies:
  - System.Text.Encoding.Extensions
  - mscorlib
  - netstandard
  namespace: System.Text
  summary: Calculates the number of characters produced by decoding a sequence of bytes starting at the specified byte pointer.
  remarks: To calculate the exact array size required by <xref:System.Text.UTF7Encoding.GetChars%2A> to store the resulting characters, use <xref:System.Text.UTF7Encoding.GetCharCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A>. The <xref:System.Text.UTF7Encoding.GetCharCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> method generally executes faster.
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      [System.Runtime.InteropServices.ComVisible(false)]

      [System.Security.SecurityCritical]

      public override int GetCharCount (byte* bytes, int count);
    parameters:
    - id: bytes
      type: System.Byte*
      description: A pointer to the first byte to decode.
    - id: count
      type: System.Int32
      description: The number of bytes to decode.
    return:
      type: System.Int32
      description: The number of characters produced by decoding the specified sequence of bytes.
  overload: System.Text.UTF7Encoding.GetCharCount*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>bytes</code> is `null` (`Nothing`).
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>count</code> is less than zero.  \n  \n -or-  \n  \n The resulting number of characters is greater than the maximum number that can be returned as an int."
  - type: System.Text.DecoderFallbackException
    commentId: T:System.Text.DecoderFallbackException
    description: "A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)  \n  \n -and-  \n  \n <xref href=\"System.Text.Encoding.DecoderFallback\"></xref> is set to <xref href=\"System.Text.DecoderExceptionFallback\"></xref>."
  attributes:
  - type: System.CLSCompliantAttribute
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  - type: System.Security.SecurityCriticalAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UTF7Encoding.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.UTF7Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)
  commentId: M:System.Text.UTF7Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)
  id: GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)
  parent: System.Text.UTF7Encoding
  langs:
  - csharp
  name: GetChars(Byte*, Int32, Char*, Int32)
  nameWithType: UTF7Encoding.GetChars(Byte*, Int32, Char*, Int32)
  fullName: UTF7Encoding.GetChars(Byte*, Int32, Char*, Int32)
  type: Method
  assemblies:
  - System.Text.Encoding.Extensions
  - mscorlib
  - netstandard
  namespace: System.Text
  summary: Decodes a sequence of bytes starting at the specified byte pointer into a set of characters that are stored starting at the specified character pointer.
  remarks: "To calculate the exact array size required by <xref:System.Text.UTF7Encoding.GetChars%2A> to store the resulting characters, use <xref:System.Text.UTF7Encoding.GetCharCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A>. The <xref:System.Text.UTF7Encoding.GetCharCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> method generally executes faster.  \n  \n Data to be converted, such as data read from a stream, might be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UTF7Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF7Encoding.GetEncoder%2A> method, respectively.  \n  \n> [!NOTE]\n>  <xref:System.Text.UTF7Encoding> does not provide error detection. When invalid bytes are encountered, <xref:System.Text.UTF7Encoding> generally emits the invalid bytes. If a byte is larger than hexadecimal 0x7F, the byte value is zero-extended into a Unicode character, the result is stored in the `chars` array, and any shift sequence is terminated. For example, if the byte to encode is hexadecimal 0x81, the resulting character is U+0081. For security reasons, your applications are recommended to use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection."
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      [System.Runtime.InteropServices.ComVisible(false)]

      [System.Security.SecurityCritical]

      public override int GetChars (byte* bytes, int byteCount, char* chars, int charCount);
    parameters:
    - id: bytes
      type: System.Byte*
      description: A pointer to the first byte to decode.
    - id: byteCount
      type: System.Int32
      description: The number of bytes to decode.
    - id: chars
      type: System.Char*
      description: A pointer to the location at which to start writing the resulting set of characters.
    - id: charCount
      type: System.Int32
      description: The maximum number of characters to write.
    return:
      type: System.Int32
      description: The actual number of characters written at the location indicated by <code>chars</code>.
  overload: System.Text.UTF7Encoding.GetChars*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>bytes</code> is `null` (`Nothing`).  \n  \n -or-  \n  \n <code>chars</code> is `null` (`Nothing`)."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>byteCount</code> or <code>charCount</code> is less than zero.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>charCount</code> is less than the resulting number of characters.
  - type: System.Text.DecoderFallbackException
    commentId: T:System.Text.DecoderFallbackException
    description: "A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)  \n  \n -and-  \n  \n <xref href=\"System.Text.Encoding.DecoderFallback\"></xref> is set to <xref href=\"System.Text.DecoderExceptionFallback\"></xref>."
  attributes:
  - type: System.CLSCompliantAttribute
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  - type: System.Security.SecurityCriticalAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UTF7Encoding.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.UTF7Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)
  commentId: M:System.Text.UTF7Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)
  id: GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)
  parent: System.Text.UTF7Encoding
  langs:
  - csharp
  name: GetChars(Byte[], Int32, Int32, Char[], Int32)
  nameWithType: UTF7Encoding.GetChars(Byte[], Int32, Int32, Char[], Int32)
  fullName: UTF7Encoding.GetChars(Byte[], Int32, Int32, Char[], Int32)
  type: Method
  assemblies:
  - System.Text.Encoding.Extensions
  - mscorlib
  - netstandard
  namespace: System.Text
  summary: Decodes a sequence of bytes from the specified byte array into the specified character array.
  remarks: "To calculate the exact array size required by <xref:System.Text.UTF7Encoding.GetChars%2A> to store the resulting characters, use <xref:System.Text.UTF7Encoding.GetCharCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A>. The <xref:System.Text.UTF7Encoding.GetCharCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> method generally executes faster.  \n  \n Data to be converted, such as data read from a stream, might be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UTF7Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF7Encoding.GetEncoder%2A> method, respectively.  \n  \n> [!NOTE]\n>  <xref:System.Text.UTF7Encoding> does not provide error detection. When invalid bytes are encountered, <xref:System.Text.UTF7Encoding> generally emits the invalid bytes. If a byte is larger than hexadecimal 0x7F, the byte value is zero-extended into a Unicode character, the result is stored in the `chars` array, and any shift sequence is terminated. For example, if the byte to encode is hexadecimal 0x81, the resulting character is U+0081. For security reasons, your applications are recommended to use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection."
  example:
  - "The following code example demonstrates how to use the <xref:System.Text.UTF7Encoding.GetChars%2A> method to decode a range of elements in a byte array and store the result in a character array.  \n  \n [!code-cpp[System.Text.UTF7Encoding.GetChars Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetChars Example/CPP/getchars-byte[]-int32-int32-char[]-int32.cpp#1)]\n [!code-csharp[System.Text.UTF7Encoding.GetChars Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetChars Example/CS/getchars-byte[]-int32-int32-char[]-int32.cs#1)]\n [!code-vb[System.Text.UTF7Encoding.GetChars Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetChars Example/VB/getchars-byte[]-int32-int32-char[]-int32.vb#1)]"
  syntax:
    content: public override int GetChars (byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex);
    parameters:
    - id: bytes
      type: System.Byte[]
      description: The byte array containing the sequence of bytes to decode.
    - id: byteIndex
      type: System.Int32
      description: The index of the first byte to decode.
    - id: byteCount
      type: System.Int32
      description: The number of bytes to decode.
    - id: chars
      type: System.Char[]
      description: The character array to contain the resulting set of characters.
    - id: charIndex
      type: System.Int32
      description: The index at which to start writing the resulting set of characters.
    return:
      type: System.Int32
      description: The actual number of characters written into <code>chars</code>.
  overload: System.Text.UTF7Encoding.GetChars*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>bytes</code> is `null` (`Nothing`).  \n  \n -or-  \n  \n <code>chars</code> is `null` (`Nothing`)."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>byteIndex</code> or <code>byteCount</code> or <code>charIndex</code> is less than zero.  \n  \n -or-  \n  \n <code>byteindex</code> and <code>byteCount</code> do not denote a valid range in <code>bytes</code>.  \n  \n -or-  \n  \n <code>charIndex</code> is not a valid index in <code>chars</code>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>chars</code> does not have enough capacity from <code>charIndex</code> to the end of the array to accommodate the resulting characters.
  - type: System.Text.DecoderFallbackException
    commentId: T:System.Text.DecoderFallbackException
    description: "A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)  \n  \n -and-  \n  \n <xref href=\"System.Text.Encoding.DecoderFallback\"></xref> is set to <xref href=\"System.Text.DecoderExceptionFallback\"></xref>."
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UTF7Encoding.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.UTF7Encoding.GetDecoder
  commentId: M:System.Text.UTF7Encoding.GetDecoder
  id: GetDecoder
  parent: System.Text.UTF7Encoding
  langs:
  - csharp
  name: GetDecoder()
  nameWithType: UTF7Encoding.GetDecoder()
  fullName: UTF7Encoding.GetDecoder()
  type: Method
  assemblies:
  - System.Text.Encoding.Extensions
  - mscorlib
  - netstandard
  namespace: System.Text
  summary: Obtains a decoder that converts a UTF-7 encoded sequence of bytes into a sequence of Unicode characters.
  remarks: The <xref:System.Text.Decoder.GetChars%2A?displayProperty=fullName> method converts sequential blocks of bytes into sequential blocks of characters, in a manner similar to the <xref:System.Text.UTF7Encoding.GetChars%2A> method of this class. However, a <xref:System.Text.Decoder> maintains state information between calls so it can correctly decode byte sequences that span blocks. The <xref:System.Text.Decoder> also preserves trailing bytes at the end of data blocks and uses the trailing bytes in the next decoding operation. Therefore, <xref:System.Text.UTF7Encoding.GetDecoder%2A> and <xref:System.Text.UTF7Encoding.GetEncoder%2A> are useful for network transmission and file operations, because those operations often deal with blocks of data instead of a complete data stream.
  example:
  - "The following code example demonstrates how to use the <xref:System.Text.UTF7Encoding.GetDecoder%2A> method to obtain a decoder to convert the UTF-7 encoded bytes into a sequence of characters.  \n  \n [!code-cpp[System.Text.UTF7Encoding.GetDecoder Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetDecoder Example/CPP/getdecoder-.cpp#1)]\n [!code-csharp[System.Text.UTF7Encoding.GetDecoder Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetDecoder Example/CS/getdecoder-.cs#1)]\n [!code-vb[System.Text.UTF7Encoding.GetDecoder Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetDecoder Example/VB/getdecoder-.vb#1)]"
  syntax:
    content: public override System.Text.Decoder GetDecoder ();
    parameters: []
    return:
      type: System.Text.Decoder
      description: A <xref href="System.Text.Decoder"></xref> that converts a UTF-7 encoded sequence of bytes into a sequence of Unicode characters.
  overload: System.Text.UTF7Encoding.GetDecoder*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UTF7Encoding.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.UTF7Encoding.GetEncoder
  commentId: M:System.Text.UTF7Encoding.GetEncoder
  id: GetEncoder
  parent: System.Text.UTF7Encoding
  langs:
  - csharp
  name: GetEncoder()
  nameWithType: UTF7Encoding.GetEncoder()
  fullName: UTF7Encoding.GetEncoder()
  type: Method
  assemblies:
  - System.Text.Encoding.Extensions
  - mscorlib
  - netstandard
  namespace: System.Text
  summary: Obtains an encoder that converts a sequence of Unicode characters into a UTF-7 encoded sequence of bytes.
  remarks: The <xref:System.Text.Decoder.GetChars%2A?displayProperty=fullName> method converts sequential blocks of bytes into sequential blocks of characters, in a manner similar to the <xref:System.Text.UTF7Encoding.GetChars%2A> method. However, a <xref:System.Text.Decoder> maintains state information between calls so it can correctly decode byte sequences that span blocks. The <xref:System.Text.Decoder> also preserves trailing bytes at the end of data blocks and uses the trailing bytes in the next decoding operation. Therefore, <xref:System.Text.UTF7Encoding.GetDecoder%2A> and <xref:System.Text.UTF7Encoding.GetEncoder%2A> are useful for network transmission and file operations, because those operations often deal with blocks of data instead of a complete data stream.
  example:
  - "The following code example demonstrates how to use the <xref:System.Text.UTF7Encoding.GetEncoder%2A> method to obtain an encoder to convert a sequence of characters into a UTF-7 encoded sequence of bytes.  \n  \n [!code-cpp[System.Text.UTF7Encoding.GetEncoder Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetEncoder Example/CPP/getencoder-.cpp#1)]\n [!code-csharp[System.Text.UTF7Encoding.GetEncoder Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetEncoder Example/CS/getencoder-.cs#1)]\n [!code-vb[System.Text.UTF7Encoding.GetEncoder Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetEncoder Example/VB/getencoder-.vb#1)]"
  syntax:
    content: public override System.Text.Encoder GetEncoder ();
    parameters: []
    return:
      type: System.Text.Encoder
      description: A <xref href="System.Text.Encoder"></xref> that converts a sequence of Unicode characters into a UTF-7 encoded sequence of bytes.
  overload: System.Text.UTF7Encoding.GetEncoder*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UTF7Encoding.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.UTF7Encoding.GetHashCode
  commentId: M:System.Text.UTF7Encoding.GetHashCode
  id: GetHashCode
  parent: System.Text.UTF7Encoding
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: UTF7Encoding.GetHashCode()
  fullName: UTF7Encoding.GetHashCode()
  type: Method
  assemblies:
  - System.Text.Encoding.Extensions
  - mscorlib
  - netstandard
  namespace: System.Text
  summary: Returns the hash code for the current <xref href="System.Text.UTF7Encoding"></xref> object.
  remarks: The value returned by the <xref:System.Text.UTF7Encoding.GetHashCode%2A> method is not suitable for distinguishing one <xref:System.Text.UTF7Encoding> object from another. If your application needs a unique hash code, it should override the <xref:System.Text.UTF7Encoding.GetHashCode%2A> method.
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(false)]

      public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: A 32-bit signed integer hash code.
  overload: System.Text.UTF7Encoding.GetHashCode*
  exceptions: []
  attributes:
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UTF7Encoding.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.UTF7Encoding.GetMaxByteCount(System.Int32)
  commentId: M:System.Text.UTF7Encoding.GetMaxByteCount(System.Int32)
  id: GetMaxByteCount(System.Int32)
  parent: System.Text.UTF7Encoding
  langs:
  - csharp
  name: GetMaxByteCount(Int32)
  nameWithType: UTF7Encoding.GetMaxByteCount(Int32)
  fullName: UTF7Encoding.GetMaxByteCount(Int32)
  type: Method
  assemblies:
  - System.Text.Encoding.Extensions
  - mscorlib
  - netstandard
  namespace: System.Text
  summary: Calculates the maximum number of bytes produced by encoding the specified number of characters.
  remarks: "To calculate the exact array size required by <xref:System.Text.UTF7Encoding.GetBytes%2A> to store the resulting bytes, the application uses <xref:System.Text.UTF7Encoding.GetByteCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>. The <xref:System.Text.UTF7Encoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> method generally executes faster.  \n  \n <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> is a worst-case number, including the worst case for the currently selected <xref:System.Text.EncoderFallback>. If a fallback is chosen with a potentially large string, <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> can return large values.  \n  \n In most cases, this method returns reasonable numbers for small strings. For large strings, you might have to choose between using very large buffers and catching errors in the rare case that a more reasonable buffer is exceeded. You might also want to consider a different approach using <xref:System.Text.UTF7Encoding.GetByteCount%2A> or <xref:System.Text.Encoder.Convert%2A?displayProperty=fullName>. While UTF-7 is very efficient at encoding ASCII data, one byte per character, it is extremely inefficient for other data. As remarked above, <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> deals with a worst case. If the data to be encoded is largely ASCII, and especially if the ASCII characters cluster together, UTF-7 is significantly more efficient than the number returned by this method suggests.  \n  \n <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> has no relation to <xref:System.Text.UTF7Encoding.GetChars%2A>. If your application needs a similar function to use with <xref:System.Text.UTF7Encoding.GetChars%2A>, it should use <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A>.  \n  \n> [!NOTE]\n>  `GetMaxByteCount(N)` is not necessarily the same value as `N* GetMaxByteCount(1)`."
  example:
  - "The following code example demonstrates how to use the <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> method to return the maximum number of bytes required to encode a specified number of characters.  \n  \n [!code-cpp[System.Text.UTF7Encoding.GetMaxByteCount Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetMaxByteCount Example/CPP/getmaxbytecount-int32.cpp#1)]\n [!code-csharp[System.Text.UTF7Encoding.GetMaxByteCount Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetMaxByteCount Example/CS/getmaxbytecount-int32.cs#1)]\n [!code-vb[System.Text.UTF7Encoding.GetMaxByteCount Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetMaxByteCount Example/VB/getmaxbytecount-int32.vb#1)]"
  syntax:
    content: public override int GetMaxByteCount (int charCount);
    parameters:
    - id: charCount
      type: System.Int32
      description: The number of characters to encode.
    return:
      type: System.Int32
      description: The maximum number of bytes produced by encoding the specified number of characters.
  overload: System.Text.UTF7Encoding.GetMaxByteCount*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>charCount</code> is less than zero.  \n  \n -or-  \n  \n The resulting number of bytes is greater than the maximum number that can be returned as an int."
  - type: System.Text.EncoderFallbackException
    commentId: T:System.Text.EncoderFallbackException
    description: "A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)  \n  \n -and-  \n  \n <xref href=\"System.Text.Encoding.EncoderFallback\"></xref> is set to <xref href=\"System.Text.EncoderExceptionFallback\"></xref>."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UTF7Encoding.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.UTF7Encoding.GetMaxCharCount(System.Int32)
  commentId: M:System.Text.UTF7Encoding.GetMaxCharCount(System.Int32)
  id: GetMaxCharCount(System.Int32)
  parent: System.Text.UTF7Encoding
  langs:
  - csharp
  name: GetMaxCharCount(Int32)
  nameWithType: UTF7Encoding.GetMaxCharCount(Int32)
  fullName: UTF7Encoding.GetMaxCharCount(Int32)
  type: Method
  assemblies:
  - System.Text.Encoding.Extensions
  - mscorlib
  - netstandard
  namespace: System.Text
  summary: Calculates the maximum number of characters produced by decoding the specified number of bytes.
  remarks: "To calculate the exact array size required by <xref:System.Text.UTF7Encoding.GetChars%2A> to store the resulting characters, the application uses <xref:System.Text.UTF7Encoding.GetCharCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A>. The <xref:System.Text.UTF7Encoding.GetCharCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> method generally executes faster.  \n  \n <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> is a worst-case number, including the worst case for the currently selected <xref:System.Text.DecoderFallback>. If a fallback is chosen with a potentially large string, <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> can return large values.  \n  \n In most cases, this method returns reasonable numbers for small strings. For large strings, you might have to choose between using very large buffers and catching errors in the rare case that a more reasonable buffer is exceeded. You might also want to consider a different approach using <xref:System.Text.UTF7Encoding.GetCharCount%2A> or <xref:System.Text.Decoder.Convert%2A?displayProperty=fullName>.  \n  \n <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> has no relation to <xref:System.Text.UTF7Encoding.GetBytes%2A>. If your application needs a similar function to use with <xref:System.Text.UTF7Encoding.GetBytes%2A>, it should use <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>.  \n  \n> [!NOTE]\n>  `GetMaxCharCount(N)` is not necessarily the same value as `N* GetMaxCharCount(1)`."
  example:
  - "The following code example demonstrates how to use the <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> method to return the maximum number of characters produced by decoding a specified number of bytes.  \n  \n [!code-cpp[System.Text.UTF7Encoding.GetMaxCharCount Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetMaxCharCount Example/CPP/getmaxcharcount-int32.cpp#1)]\n [!code-csharp[System.Text.UTF7Encoding.GetMaxCharCount Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetMaxCharCount Example/CS/getmaxcharcount-int32.cs#1)]\n [!code-vb[System.Text.UTF7Encoding.GetMaxCharCount Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetMaxCharCount Example/VB/getmaxcharcount-int32.vb#1)]"
  syntax:
    content: public override int GetMaxCharCount (int byteCount);
    parameters:
    - id: byteCount
      type: System.Int32
      description: The number of bytes to decode.
    return:
      type: System.Int32
      description: The maximum number of characters produced by decoding the specified number of bytes.
  overload: System.Text.UTF7Encoding.GetMaxCharCount*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>byteCount</code> is less than zero.  \n  \n -or-  \n  \n The resulting number of characters is greater than the maximum number that can be returned as an int."
  - type: System.Text.DecoderFallbackException
    commentId: T:System.Text.DecoderFallbackException
    description: "A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)  \n  \n -and-  \n  \n <xref href=\"System.Text.Encoding.DecoderFallback\"></xref> is set to <xref href=\"System.Text.DecoderExceptionFallback\"></xref>."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UTF7Encoding.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.UTF7Encoding.GetString(System.Byte[],System.Int32,System.Int32)
  commentId: M:System.Text.UTF7Encoding.GetString(System.Byte[],System.Int32,System.Int32)
  id: GetString(System.Byte[],System.Int32,System.Int32)
  parent: System.Text.UTF7Encoding
  langs:
  - csharp
  name: GetString(Byte[], Int32, Int32)
  nameWithType: UTF7Encoding.GetString(Byte[], Int32, Int32)
  fullName: UTF7Encoding.GetString(Byte[], Int32, Int32)
  type: Method
  assemblies:
  - System.Text.Encoding.Extensions
  - mscorlib
  - netstandard
  namespace: System.Text
  summary: Decodes a range of bytes from a byte array into a string.
  remarks: "Data to be converted, such as data read from a stream, might be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UTF7Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF7Encoding.GetEncoder%2A> method, respectively.  \n  \n> [!NOTE]\n>  <xref:System.Text.UTF7Encoding> does not provide error detection. When invalid bytes are encountered, <xref:System.Text.UTF7Encoding> generally emits the invalid bytes. If a byte is larger than hexadecimal 0x7F, the byte value is zero-extended into a Unicode character, the result is stored in the `chars` array, and any shift sequence is terminated. For example, if the byte to encode is hexadecimal 0x81, the resulting character is U+0081. For security reasons, your applications are recommended to use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection."
  example:
  - "The following code example encodes a string into an array of bytes, and then decodes the bytes back into a string.  \n  \n [!code-cpp[System.Text.UTF7Encoding.getstring#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.getstring/CPP/getstring.cpp#1)]\n [!code-csharp[System.Text.UTF7Encoding.getstring#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.getstring/CS/getstring.cs#1)]\n [!code-vb[System.Text.UTF7Encoding.getstring#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF7Encoding.getstring/VB/getstring.vb#1)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(false)]

      public override string GetString (byte[] bytes, int index, int count);
    parameters:
    - id: bytes
      type: System.Byte[]
      description: The byte array containing the sequence of bytes to decode.
    - id: index
      type: System.Int32
      description: The index of the first byte to decode.
    - id: count
      type: System.Int32
      description: The number of bytes to decode.
    return:
      type: System.String
      description: A <xref href="System.String"></xref> containing the results of decoding the specified sequence of bytes.
  overload: System.Text.UTF7Encoding.GetString*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>bytes</code> is `null` (`Nothing`).
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code> or <code>count</code> is less than zero.  \n  \n -or-  \n  \n <code>index</code> and <code>count</code> do not denote a valid range in <code>bytes</code>."
  - type: System.Text.DecoderFallbackException
    commentId: T:System.Text.DecoderFallbackException
    description: "A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)  \n  \n -and-  \n  \n <xref href=\"System.Text.Encoding.DecoderFallback\"></xref> is set to <xref href=\"System.Text.DecoderExceptionFallback\"></xref>."
  attributes:
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UTF7Encoding.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
references:
- uid: System.Text.Encoding
  parent: System.Text
  isExternal: false
  name: Encoding
  nameWithType: Encoding
  fullName: System.Text.Encoding
- uid: System.ArgumentNullException
  parent: System
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  parent: System
  isExternal: false
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.Text.EncoderFallbackException
  parent: System.Text
  isExternal: false
  name: EncoderFallbackException
  nameWithType: EncoderFallbackException
  fullName: System.Text.EncoderFallbackException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.Text.DecoderFallbackException
  parent: System.Text
  isExternal: false
  name: DecoderFallbackException
  nameWithType: DecoderFallbackException
  fullName: System.Text.DecoderFallbackException
- uid: System.Text.UTF7Encoding.#ctor
  parent: System.Text.UTF7Encoding
  isExternal: false
  name: UTF7Encoding()
  nameWithType: UTF7Encoding.UTF7Encoding()
  fullName: UTF7Encoding.UTF7Encoding()
- uid: System.Text.UTF7Encoding.#ctor(System.Boolean)
  parent: System.Text.UTF7Encoding
  isExternal: false
  name: UTF7Encoding(Boolean)
  nameWithType: UTF7Encoding.UTF7Encoding(Boolean)
  fullName: UTF7Encoding.UTF7Encoding(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Text.UTF7Encoding.Equals(System.Object)
  parent: System.Text.UTF7Encoding
  isExternal: false
  name: Equals(Object)
  nameWithType: UTF7Encoding.Equals(Object)
  fullName: UTF7Encoding.Equals(Object)
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Text.UTF7Encoding.GetByteCount(System.String)
  parent: System.Text.UTF7Encoding
  isExternal: false
  name: GetByteCount(String)
  nameWithType: UTF7Encoding.GetByteCount(String)
  fullName: UTF7Encoding.GetByteCount(String)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Text.UTF7Encoding.GetByteCount(System.Char*,System.Int32)
  parent: System.Text.UTF7Encoding
  isExternal: false
  name: GetByteCount(Char*, Int32)
  nameWithType: UTF7Encoding.GetByteCount(Char*, Int32)
  fullName: UTF7Encoding.GetByteCount(Char*, Int32)
- uid: System.Char
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: System.Char*
  parent: System
  isExternal: false
  name: Char*
  nameWithType: Char*
  fullName: System.Char*
  spec.csharp:
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
  - name: '*'
    nameWithType: '*'
    fullName: '*'
- uid: System.Text.UTF7Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)
  parent: System.Text.UTF7Encoding
  isExternal: false
  name: GetByteCount(Char[], Int32, Int32)
  nameWithType: UTF7Encoding.GetByteCount(Char[], Int32, Int32)
  fullName: UTF7Encoding.GetByteCount(Char[], Int32, Int32)
- uid: System.Char[]
  parent: System
  isExternal: false
  name: Char[]
  nameWithType: Char[]
  fullName: System.Char[]
  spec.csharp:
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Text.UTF7Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)
  parent: System.Text.UTF7Encoding
  isExternal: false
  name: GetBytes(Char*, Int32, Byte*, Int32)
  nameWithType: UTF7Encoding.GetBytes(Char*, Int32, Byte*, Int32)
  fullName: UTF7Encoding.GetBytes(Char*, Int32, Byte*, Int32)
- uid: System.Byte
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: System.Byte*
  parent: System
  isExternal: false
  name: Byte*
  nameWithType: Byte*
  fullName: System.Byte*
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
  - name: '*'
    nameWithType: '*'
    fullName: '*'
- uid: System.Text.UTF7Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)
  parent: System.Text.UTF7Encoding
  isExternal: false
  name: GetBytes(Char[], Int32, Int32, Byte[], Int32)
  nameWithType: UTF7Encoding.GetBytes(Char[], Int32, Int32, Byte[], Int32)
  fullName: UTF7Encoding.GetBytes(Char[], Int32, Int32, Byte[], Int32)
- uid: System.Byte[]
  parent: System
  isExternal: false
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Text.UTF7Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)
  parent: System.Text.UTF7Encoding
  isExternal: false
  name: GetBytes(String, Int32, Int32, Byte[], Int32)
  nameWithType: UTF7Encoding.GetBytes(String, Int32, Int32, Byte[], Int32)
  fullName: UTF7Encoding.GetBytes(String, Int32, Int32, Byte[], Int32)
- uid: System.Text.UTF7Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)
  parent: System.Text.UTF7Encoding
  isExternal: false
  name: GetCharCount(Byte[], Int32, Int32)
  nameWithType: UTF7Encoding.GetCharCount(Byte[], Int32, Int32)
  fullName: UTF7Encoding.GetCharCount(Byte[], Int32, Int32)
- uid: System.Text.UTF7Encoding.GetCharCount(System.Byte*,System.Int32)
  parent: System.Text.UTF7Encoding
  isExternal: false
  name: GetCharCount(Byte*, Int32)
  nameWithType: UTF7Encoding.GetCharCount(Byte*, Int32)
  fullName: UTF7Encoding.GetCharCount(Byte*, Int32)
- uid: System.Text.UTF7Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)
  parent: System.Text.UTF7Encoding
  isExternal: false
  name: GetChars(Byte*, Int32, Char*, Int32)
  nameWithType: UTF7Encoding.GetChars(Byte*, Int32, Char*, Int32)
  fullName: UTF7Encoding.GetChars(Byte*, Int32, Char*, Int32)
- uid: System.Text.UTF7Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)
  parent: System.Text.UTF7Encoding
  isExternal: false
  name: GetChars(Byte[], Int32, Int32, Char[], Int32)
  nameWithType: UTF7Encoding.GetChars(Byte[], Int32, Int32, Char[], Int32)
  fullName: UTF7Encoding.GetChars(Byte[], Int32, Int32, Char[], Int32)
- uid: System.Text.UTF7Encoding.GetDecoder
  parent: System.Text.UTF7Encoding
  isExternal: false
  name: GetDecoder()
  nameWithType: UTF7Encoding.GetDecoder()
  fullName: UTF7Encoding.GetDecoder()
- uid: System.Text.Decoder
  parent: System.Text
  isExternal: false
  name: Decoder
  nameWithType: Decoder
  fullName: System.Text.Decoder
- uid: System.Text.UTF7Encoding.GetEncoder
  parent: System.Text.UTF7Encoding
  isExternal: false
  name: GetEncoder()
  nameWithType: UTF7Encoding.GetEncoder()
  fullName: UTF7Encoding.GetEncoder()
- uid: System.Text.Encoder
  parent: System.Text
  isExternal: false
  name: Encoder
  nameWithType: Encoder
  fullName: System.Text.Encoder
- uid: System.Text.UTF7Encoding.GetHashCode
  parent: System.Text.UTF7Encoding
  isExternal: false
  name: GetHashCode()
  nameWithType: UTF7Encoding.GetHashCode()
  fullName: UTF7Encoding.GetHashCode()
- uid: System.Text.UTF7Encoding.GetMaxByteCount(System.Int32)
  parent: System.Text.UTF7Encoding
  isExternal: false
  name: GetMaxByteCount(Int32)
  nameWithType: UTF7Encoding.GetMaxByteCount(Int32)
  fullName: UTF7Encoding.GetMaxByteCount(Int32)
- uid: System.Text.UTF7Encoding.GetMaxCharCount(System.Int32)
  parent: System.Text.UTF7Encoding
  isExternal: false
  name: GetMaxCharCount(Int32)
  nameWithType: UTF7Encoding.GetMaxCharCount(Int32)
  fullName: UTF7Encoding.GetMaxCharCount(Int32)
- uid: System.Text.UTF7Encoding.GetString(System.Byte[],System.Int32,System.Int32)
  parent: System.Text.UTF7Encoding
  isExternal: false
  name: GetString(Byte[], Int32, Int32)
  nameWithType: UTF7Encoding.GetString(Byte[], Int32, Int32)
  fullName: UTF7Encoding.GetString(Byte[], Int32, Int32)
- uid: System.Text.UTF7Encoding.#ctor*
  parent: System.Text.UTF7Encoding
  isExternal: false
  name: UTF7Encoding
  nameWithType: UTF7Encoding.UTF7Encoding
  fullName: UTF7Encoding.UTF7Encoding
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UTF7Encoding.xml
- uid: System.Text.UTF7Encoding.Equals*
  parent: System.Text.UTF7Encoding
  isExternal: false
  name: Equals
  nameWithType: UTF7Encoding.Equals
  fullName: UTF7Encoding.Equals
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UTF7Encoding.xml
- uid: System.Text.UTF7Encoding.GetByteCount*
  parent: System.Text.UTF7Encoding
  isExternal: false
  name: GetByteCount
  nameWithType: UTF7Encoding.GetByteCount
  fullName: UTF7Encoding.GetByteCount
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UTF7Encoding.xml
- uid: System.Text.UTF7Encoding.GetBytes*
  parent: System.Text.UTF7Encoding
  isExternal: false
  name: GetBytes
  nameWithType: UTF7Encoding.GetBytes
  fullName: UTF7Encoding.GetBytes
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UTF7Encoding.xml
- uid: System.Text.UTF7Encoding.GetCharCount*
  parent: System.Text.UTF7Encoding
  isExternal: false
  name: GetCharCount
  nameWithType: UTF7Encoding.GetCharCount
  fullName: UTF7Encoding.GetCharCount
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UTF7Encoding.xml
- uid: System.Text.UTF7Encoding.GetChars*
  parent: System.Text.UTF7Encoding
  isExternal: false
  name: GetChars
  nameWithType: UTF7Encoding.GetChars
  fullName: UTF7Encoding.GetChars
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UTF7Encoding.xml
- uid: System.Text.UTF7Encoding.GetDecoder*
  parent: System.Text.UTF7Encoding
  isExternal: false
  name: GetDecoder
  nameWithType: UTF7Encoding.GetDecoder
  fullName: UTF7Encoding.GetDecoder
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UTF7Encoding.xml
- uid: System.Text.UTF7Encoding.GetEncoder*
  parent: System.Text.UTF7Encoding
  isExternal: false
  name: GetEncoder
  nameWithType: UTF7Encoding.GetEncoder
  fullName: UTF7Encoding.GetEncoder
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UTF7Encoding.xml
- uid: System.Text.UTF7Encoding.GetHashCode*
  parent: System.Text.UTF7Encoding
  isExternal: false
  name: GetHashCode
  nameWithType: UTF7Encoding.GetHashCode
  fullName: UTF7Encoding.GetHashCode
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UTF7Encoding.xml
- uid: System.Text.UTF7Encoding.GetMaxByteCount*
  parent: System.Text.UTF7Encoding
  isExternal: false
  name: GetMaxByteCount
  nameWithType: UTF7Encoding.GetMaxByteCount
  fullName: UTF7Encoding.GetMaxByteCount
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UTF7Encoding.xml
- uid: System.Text.UTF7Encoding.GetMaxCharCount*
  parent: System.Text.UTF7Encoding
  isExternal: false
  name: GetMaxCharCount
  nameWithType: UTF7Encoding.GetMaxCharCount
  fullName: UTF7Encoding.GetMaxCharCount
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UTF7Encoding.xml
- uid: System.Text.UTF7Encoding.GetString*
  parent: System.Text.UTF7Encoding
  isExternal: false
  name: GetString
  nameWithType: UTF7Encoding.GetString
  fullName: UTF7Encoding.GetString
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UTF7Encoding.xml
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: Object.Equals(Object, Object)
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  nameWithType: Object.GetType()
  fullName: Object.GetType()
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: Object.MemberwiseClone()
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: Object.ReferenceEquals(Object, Object)
- uid: System.Object.ToString
  parent: System.Object
  isExternal: false
  name: ToString()
  nameWithType: Object.ToString()
  fullName: Object.ToString()
- uid: System.Text.Encoding.ASCII
  parent: System.Text.Encoding
  isExternal: false
  name: ASCII
  nameWithType: Encoding.ASCII
  fullName: Encoding.ASCII
- uid: System.Text.Encoding.BigEndianUnicode
  parent: System.Text.Encoding
  isExternal: false
  name: BigEndianUnicode
  nameWithType: Encoding.BigEndianUnicode
  fullName: Encoding.BigEndianUnicode
- uid: System.Text.Encoding.BodyName
  parent: System.Text.Encoding
  isExternal: false
  name: BodyName
  nameWithType: Encoding.BodyName
  fullName: Encoding.BodyName
- uid: System.Text.Encoding.Clone
  parent: System.Text.Encoding
  isExternal: false
  name: Clone()
  nameWithType: Encoding.Clone()
  fullName: Encoding.Clone()
- uid: System.Text.Encoding.CodePage
  parent: System.Text.Encoding
  isExternal: false
  name: CodePage
  nameWithType: Encoding.CodePage
  fullName: Encoding.CodePage
- uid: System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[],System.Int32,System.Int32)
  parent: System.Text.Encoding
  isExternal: false
  name: Convert(Encoding, Encoding, Byte[], Int32, Int32)
  nameWithType: Encoding.Convert(Encoding, Encoding, Byte[], Int32, Int32)
  fullName: Encoding.Convert(Encoding, Encoding, Byte[], Int32, Int32)
- uid: System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[])
  parent: System.Text.Encoding
  isExternal: false
  name: Convert(Encoding, Encoding, Byte[])
  nameWithType: Encoding.Convert(Encoding, Encoding, Byte[])
  fullName: Encoding.Convert(Encoding, Encoding, Byte[])
- uid: System.Text.Encoding.DecoderFallback
  parent: System.Text.Encoding
  isExternal: false
  name: DecoderFallback
  nameWithType: Encoding.DecoderFallback
  fullName: Encoding.DecoderFallback
- uid: System.Text.Encoding.Default
  parent: System.Text.Encoding
  isExternal: false
  name: Default
  nameWithType: Encoding.Default
  fullName: Encoding.Default
- uid: System.Text.Encoding.EncoderFallback
  parent: System.Text.Encoding
  isExternal: false
  name: EncoderFallback
  nameWithType: Encoding.EncoderFallback
  fullName: Encoding.EncoderFallback
- uid: System.Text.Encoding.EncodingName
  parent: System.Text.Encoding
  isExternal: false
  name: EncodingName
  nameWithType: Encoding.EncodingName
  fullName: Encoding.EncodingName
- uid: System.Text.Encoding.GetByteCount(System.String,System.Int32,System.Int32)
  parent: System.Text.Encoding
  isExternal: false
  name: GetByteCount(String, Int32, Int32)
  nameWithType: Encoding.GetByteCount(String, Int32, Int32)
  fullName: Encoding.GetByteCount(String, Int32, Int32)
- uid: System.Text.Encoding.GetByteCount(System.Char[])
  parent: System.Text.Encoding
  isExternal: false
  name: GetByteCount(Char[])
  nameWithType: Encoding.GetByteCount(Char[])
  fullName: Encoding.GetByteCount(Char[])
- uid: System.Text.Encoding.GetBytes(System.Char[])
  parent: System.Text.Encoding
  isExternal: false
  name: GetBytes(Char[])
  nameWithType: Encoding.GetBytes(Char[])
  fullName: Encoding.GetBytes(Char[])
- uid: System.Text.Encoding.GetBytes(System.String)
  parent: System.Text.Encoding
  isExternal: false
  name: GetBytes(String)
  nameWithType: Encoding.GetBytes(String)
  fullName: Encoding.GetBytes(String)
- uid: System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32)
  parent: System.Text.Encoding
  isExternal: false
  name: GetBytes(Char[], Int32, Int32)
  nameWithType: Encoding.GetBytes(Char[], Int32, Int32)
  fullName: Encoding.GetBytes(Char[], Int32, Int32)
- uid: System.Text.Encoding.GetBytes(System.String,System.Int32,System.Int32)
  parent: System.Text.Encoding
  isExternal: false
  name: GetBytes(String, Int32, Int32)
  nameWithType: Encoding.GetBytes(String, Int32, Int32)
  fullName: Encoding.GetBytes(String, Int32, Int32)
- uid: System.Text.Encoding.GetCharCount(System.Byte[])
  parent: System.Text.Encoding
  isExternal: false
  name: GetCharCount(Byte[])
  nameWithType: Encoding.GetCharCount(Byte[])
  fullName: Encoding.GetCharCount(Byte[])
- uid: System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32)
  parent: System.Text.Encoding
  isExternal: false
  name: GetChars(Byte[], Int32, Int32)
  nameWithType: Encoding.GetChars(Byte[], Int32, Int32)
  fullName: Encoding.GetChars(Byte[], Int32, Int32)
- uid: System.Text.Encoding.GetChars(System.Byte[])
  parent: System.Text.Encoding
  isExternal: false
  name: GetChars(Byte[])
  nameWithType: Encoding.GetChars(Byte[])
  fullName: Encoding.GetChars(Byte[])
- uid: System.Text.Encoding.GetEncoding(System.Int32)
  parent: System.Text.Encoding
  isExternal: false
  name: GetEncoding(Int32)
  nameWithType: Encoding.GetEncoding(Int32)
  fullName: Encoding.GetEncoding(Int32)
- uid: System.Text.Encoding.GetEncoding(System.String)
  parent: System.Text.Encoding
  isExternal: false
  name: GetEncoding(String)
  nameWithType: Encoding.GetEncoding(String)
  fullName: Encoding.GetEncoding(String)
- uid: System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)
  parent: System.Text.Encoding
  isExternal: false
  name: GetEncoding(Int32, EncoderFallback, DecoderFallback)
  nameWithType: Encoding.GetEncoding(Int32, EncoderFallback, DecoderFallback)
  fullName: Encoding.GetEncoding(Int32, EncoderFallback, DecoderFallback)
- uid: System.Text.Encoding.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)
  parent: System.Text.Encoding
  isExternal: false
  name: GetEncoding(String, EncoderFallback, DecoderFallback)
  nameWithType: Encoding.GetEncoding(String, EncoderFallback, DecoderFallback)
  fullName: Encoding.GetEncoding(String, EncoderFallback, DecoderFallback)
- uid: System.Text.Encoding.GetEncodings
  parent: System.Text.Encoding
  isExternal: false
  name: GetEncodings()
  nameWithType: Encoding.GetEncodings()
  fullName: Encoding.GetEncodings()
- uid: System.Text.Encoding.GetPreamble
  parent: System.Text.Encoding
  isExternal: false
  name: GetPreamble()
  nameWithType: Encoding.GetPreamble()
  fullName: Encoding.GetPreamble()
- uid: System.Text.Encoding.GetString(System.Byte[])
  parent: System.Text.Encoding
  isExternal: false
  name: GetString(Byte[])
  nameWithType: Encoding.GetString(Byte[])
  fullName: Encoding.GetString(Byte[])
- uid: System.Text.Encoding.GetString(System.Byte*,System.Int32)
  parent: System.Text.Encoding
  isExternal: false
  name: GetString(Byte*, Int32)
  nameWithType: Encoding.GetString(Byte*, Int32)
  fullName: Encoding.GetString(Byte*, Int32)
- uid: System.Text.Encoding.HeaderName
  parent: System.Text.Encoding
  isExternal: false
  name: HeaderName
  nameWithType: Encoding.HeaderName
  fullName: Encoding.HeaderName
- uid: System.Text.Encoding.IsAlwaysNormalized
  parent: System.Text.Encoding
  isExternal: false
  name: IsAlwaysNormalized()
  nameWithType: Encoding.IsAlwaysNormalized()
  fullName: Encoding.IsAlwaysNormalized()
- uid: System.Text.Encoding.IsAlwaysNormalized(System.Text.NormalizationForm)
  parent: System.Text.Encoding
  isExternal: false
  name: IsAlwaysNormalized(NormalizationForm)
  nameWithType: Encoding.IsAlwaysNormalized(NormalizationForm)
  fullName: Encoding.IsAlwaysNormalized(NormalizationForm)
- uid: System.Text.Encoding.IsBrowserDisplay
  parent: System.Text.Encoding
  isExternal: false
  name: IsBrowserDisplay
  nameWithType: Encoding.IsBrowserDisplay
  fullName: Encoding.IsBrowserDisplay
- uid: System.Text.Encoding.IsBrowserSave
  parent: System.Text.Encoding
  isExternal: false
  name: IsBrowserSave
  nameWithType: Encoding.IsBrowserSave
  fullName: Encoding.IsBrowserSave
- uid: System.Text.Encoding.IsMailNewsDisplay
  parent: System.Text.Encoding
  isExternal: false
  name: IsMailNewsDisplay
  nameWithType: Encoding.IsMailNewsDisplay
  fullName: Encoding.IsMailNewsDisplay
- uid: System.Text.Encoding.IsMailNewsSave
  parent: System.Text.Encoding
  isExternal: false
  name: IsMailNewsSave
  nameWithType: Encoding.IsMailNewsSave
  fullName: Encoding.IsMailNewsSave
- uid: System.Text.Encoding.IsReadOnly
  parent: System.Text.Encoding
  isExternal: false
  name: IsReadOnly
  nameWithType: Encoding.IsReadOnly
  fullName: Encoding.IsReadOnly
- uid: System.Text.Encoding.IsSingleByte
  parent: System.Text.Encoding
  isExternal: false
  name: IsSingleByte
  nameWithType: Encoding.IsSingleByte
  fullName: Encoding.IsSingleByte
- uid: System.Text.Encoding.RegisterProvider(System.Text.EncodingProvider)
  parent: System.Text.Encoding
  isExternal: false
  name: RegisterProvider(EncodingProvider)
  nameWithType: Encoding.RegisterProvider(EncodingProvider)
  fullName: Encoding.RegisterProvider(EncodingProvider)
- uid: System.Text.Encoding.Unicode
  parent: System.Text.Encoding
  isExternal: false
  name: Unicode
  nameWithType: Encoding.Unicode
  fullName: Encoding.Unicode
- uid: System.Text.Encoding.UTF32
  parent: System.Text.Encoding
  isExternal: false
  name: UTF32
  nameWithType: Encoding.UTF32
  fullName: Encoding.UTF32
- uid: System.Text.Encoding.UTF7
  parent: System.Text.Encoding
  isExternal: false
  name: UTF7
  nameWithType: Encoding.UTF7
  fullName: Encoding.UTF7
- uid: System.Text.Encoding.UTF8
  parent: System.Text.Encoding
  isExternal: false
  name: UTF8
  nameWithType: Encoding.UTF8
  fullName: Encoding.UTF8
- uid: System.Text.Encoding.WebName
  parent: System.Text.Encoding
  isExternal: false
  name: WebName
  nameWithType: Encoding.WebName
  fullName: Encoding.WebName
- uid: System.Text.Encoding.WindowsCodePage
  parent: System.Text.Encoding
  isExternal: false
  name: WindowsCodePage
  nameWithType: Encoding.WindowsCodePage
  fullName: Encoding.WindowsCodePage
