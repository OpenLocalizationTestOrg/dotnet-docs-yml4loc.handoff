### YamlMime:ManagedReference
items:
- uid: System.Globalization.CultureInfo
  commentId: T:System.Globalization.CultureInfo
  id: CultureInfo
  children:
  - System.Globalization.CultureInfo.#ctor(System.Int32)
  - System.Globalization.CultureInfo.#ctor(System.String)
  - System.Globalization.CultureInfo.#ctor(System.Int32,System.Boolean)
  - System.Globalization.CultureInfo.#ctor(System.String,System.Boolean)
  - System.Globalization.CultureInfo.Calendar
  - System.Globalization.CultureInfo.ClearCachedData
  - System.Globalization.CultureInfo.Clone
  - System.Globalization.CultureInfo.CompareInfo
  - System.Globalization.CultureInfo.CreateSpecificCulture(System.String)
  - System.Globalization.CultureInfo.CultureTypes
  - System.Globalization.CultureInfo.CurrentCulture
  - System.Globalization.CultureInfo.CurrentUICulture
  - System.Globalization.CultureInfo.DateTimeFormat
  - System.Globalization.CultureInfo.DefaultThreadCurrentCulture
  - System.Globalization.CultureInfo.DefaultThreadCurrentUICulture
  - System.Globalization.CultureInfo.DisplayName
  - System.Globalization.CultureInfo.EnglishName
  - System.Globalization.CultureInfo.Equals(System.Object)
  - System.Globalization.CultureInfo.GetConsoleFallbackUICulture
  - System.Globalization.CultureInfo.GetCultureInfo(System.Int32)
  - System.Globalization.CultureInfo.GetCultureInfo(System.String)
  - System.Globalization.CultureInfo.GetCultureInfo(System.String,System.String)
  - System.Globalization.CultureInfo.GetCultureInfoByIetfLanguageTag(System.String)
  - System.Globalization.CultureInfo.GetCultures(System.Globalization.CultureTypes)
  - System.Globalization.CultureInfo.GetFormat(System.Type)
  - System.Globalization.CultureInfo.GetHashCode
  - System.Globalization.CultureInfo.IetfLanguageTag
  - System.Globalization.CultureInfo.InstalledUICulture
  - System.Globalization.CultureInfo.InvariantCulture
  - System.Globalization.CultureInfo.IsNeutralCulture
  - System.Globalization.CultureInfo.IsReadOnly
  - System.Globalization.CultureInfo.KeyboardLayoutId
  - System.Globalization.CultureInfo.LCID
  - System.Globalization.CultureInfo.Name
  - System.Globalization.CultureInfo.NativeName
  - System.Globalization.CultureInfo.NumberFormat
  - System.Globalization.CultureInfo.OptionalCalendars
  - System.Globalization.CultureInfo.Parent
  - System.Globalization.CultureInfo.ReadOnly(System.Globalization.CultureInfo)
  - System.Globalization.CultureInfo.TextInfo
  - System.Globalization.CultureInfo.ThreeLetterISOLanguageName
  - System.Globalization.CultureInfo.ThreeLetterWindowsLanguageName
  - System.Globalization.CultureInfo.ToString
  - System.Globalization.CultureInfo.TwoLetterISOLanguageName
  - System.Globalization.CultureInfo.UseUserOverride
  langs:
  - csharp
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: System.Globalization.CultureInfo
  type: Class
  assemblies:
  - System.Globalization
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Globalization
  summary: Provides information about a specific culture (called a *locale* for unmanaged code development). The information includes the names for the culture, the writing system, the calendar used, the sort order of strings, and formatting for dates and numbers.
  remarks: "> [!NOTE]\n>  To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/globalization/cultureinfo.cs#e319c6636909012f). You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/).  \n  \n The <xref:System.Globalization.CultureInfo> class provides culture-specific information, such as the language, sublanguage, country/region, calendar, and conventions associated with a particular culture. This class also provides access to culture-specific instances of the <xref:System.Globalization.DateTimeFormatInfo>, <xref:System.Globalization.NumberFormatInfo>, <xref:System.Globalization.CompareInfo>, and <xref:System.Globalization.TextInfo> objects. These objects contain the information required for culture-specific operations, such as casing, formatting dates and numbers, and comparing strings. The <xref:System.Globalization.CultureInfo> class is used either directly or indirectly by classes that format, parse, or manipulate culture-specific data, such as <xref:System.String>, <xref:System.DateTime>, <xref:System.DateTimeOffset>, and the numeric types.  \n  \n In this section:  \n  \n [Culture names and identifiers](#CultureNames)   \n [Invariant, neutral, and specific cultures](#Invariant)   \n [Custom cultures](#Custom)   \n [Dynamic culture data](#Dynamic)   \n [The current culture and current UI culture](#Current)   \n [Getting all cultures](#GetAll)   \n [Culture and threads](#Threads)   \n [Culture and application domains](#AppDomain)   \n [Culture and task-based asynchronous operations](#Async)   \n [CultureInfo object serialization](#Serialization)   \n [Control Panel overrides](#CPanel)   \n [Alternate sort orders](#AlternateSort)   \n [Culture and Windows apps](#Windows)  \n  \n<a name=\"CultureNames\"></a>   \n## Culture names and identifiers  \n The <xref:System.Globalization.CultureInfo> class specifies a unique name for each culture, based on RFC 4646. The name is a combination of an ISO 639 two-letter lowercase culture code associated with a language and an ISO 3166 two-letter uppercase subculture code associated with a country or region. In addition, for apps that target [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] or later and are running under Windows 10 or later, culture names that correspond to valid BCP-47 language tags are supported.  \n  \n> [!NOTE]\n>  When a culture name is passed to a class constructor or a method such as <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A> or <xref:System.Globalization.CultureInfo>, its case is not significant.  \n  \n The format for the culture name based on RFC 4646 is *languagecode2*>-*country/regioncode2*, where *languagecode2* is the two-letter language code and *country/regioncode2* is the two-letter subculture code. Examples include ja-JP for Japanese (Japan) and en-US for English (United States). In cases where a two-letter language code is not available, a three-letter code derived from ISO 639-2 is used.  \n  \n Note that some culture names also specify an ISO 15924 script. For example, Cyrl specifies the Cyrillic script and Latn specifies the Latin script. A culture name that includes a script uses the pattern *languagecode2*-*scripttag*-*country/regioncode2*. An example of this type of culture name is uz-Cyrl-UZ for Uzbek (Cyrillic, Uzbekistan). On Windows operating systems before Windows Vista, a culture name that includes a script uses the pattern *languagecode2*-*country/regioncode2*-*scripttag*, for example, uz-UZ-Cyrl for Uzbek (Cyrillic, Uzbekistan).  \n  \n A neutral culture is specified by only the two-letter lowercase language code. For example, fr specifies the neutral culture for French, and de specifies the neutral culture for German.  \n  \n> [!NOTE]\n>  There are two culture names that contradict this rule. The cultures Chinese (Simplified), named zh-Hans, and Chinese (Traditional), named zh-Hant, are neutral cultures. The culture names represent the current standard and should be used unless you have a reason for using the older names zh-CHS and zh-CHT.  \n  \n A culture identifier is a standard international numeric abbreviation and has the components necessary to uniquely identify one of the installed cultures. Your application can use predefined culture identifiers or define custom identifiers.  \n  \n Certain predefined culture names and identifiers are used by this and other classes in the <xref:System.Globalization?displayProperty=fullName> namespace. Detailed culture information appears in the [National Language Support (NLS) API Reference](http://go.microsoft.com/fwlink/?LinkId=200048) at the Go Global Developer Center.  \n  \n Remember that the culture names and identifiers represent only a subset of cultures that can be found on a particular computer. Windows versions or service packs can change the available cultures. Applications add custom cultures using the <xref:System.Globalization.CultureAndRegionInfoBuilder> class. Users add their own custom cultures using the Microsoft Locale Builder tool. Microsoft Locale Builder is written in managed code using the `CultureAndRegionInfoBuilder` class.  \n  \n Several distinct names are closely associated with a culture, notably the names associated with the following class members:  \n  \n-   <xref:System.Globalization.CultureInfo.ToString%2A?displayProperty=fullName>  \n  \n-   <xref:System.Globalization.CultureInfo.Name%2A?displayProperty=fullName>  \n  \n-   <xref:System.Globalization.CompareInfo.Name%2A?displayProperty=fullName>  \n  \n<a name=\"Invariant\"></a>   \n## Invariant, neutral, and specific cultures  \n The cultures are generally grouped into three sets: invariant cultures, neutral cultures, and specific cultures.  \n  \n An invariant culture is culture-insensitive. Your application specifies the invariant culture by name using an empty string (\"\") or by its identifier. <xref:System.Globalization.CultureInfo.InvariantCulture%2A> defines an instance of the invariant culture. It is associated with the English language but not with any country/region. It is used in almost any method in the `Globalization` namespace that requires a culture.  \n  \n A neutral culture is a culture that is associated with a language but not with a country/region. A specific culture is a culture that is associated with a language and a country/region. For example, fr is the neutral name for the French culture, and fr-FR is the name of the specific French (France) culture. Note that Chinese (Simplified) and Chinese (Traditional) are also considered neutral cultures.  \n  \n Creating an instance of a <xref:System.Globalization.CompareInfo> class for a neutral culture is not recommended because the data it contains is arbitrary. To display and sort data, specify both the language and region. Additionally, the <xref:System.Globalization.CompareInfo.Name%2A> property of a <xref:System.Globalization.CompareInfo> object created for a neutral culture returns only the country and does not include the region.  \n  \n The defined cultures have a hierarchy in which the parent of a specific culture is a neutral culture and the parent of a neutral culture is the invariant culture. The <xref:System.Globalization.CultureInfo.Parent%2A> property contains the neutral culture associated with a specific culture. Custom cultures should define the <xref:System.Globalization.CultureInfo.Parent%2A> property in conformance with this pattern.  \n  \n If the resources for a specific culture are not available in the operating system, the resources for the associated neutral culture are used. If the resources for the neutral culture are not available, the resources embedded in the main assembly are used. For more information on the resource fallback process, see [Packaging and Deploying Resources](~/docs/framework/resources/packaging-and-deploying-resources-in-desktop-apps.md).  \n  \n The list of locales in the Windows API is slightly different from the list of cultures supported by the .NET Framework. If interoperability with Windows is required, for example, through the p/invoke mechanism, the application should use a specific culture that is defined for the operating system. Use of the specific culture ensures consistency with the equivalent Windows locale, which is identified with a locale identifier that is the same as <xref:System.Globalization.CultureInfo.LCID%2A>.  \n  \n A <xref:System.Globalization.DateTimeFormatInfo> or a <xref:System.Globalization.NumberFormatInfo> can be created only for the invariant culture or for specific cultures, not for neutral cultures.  \n  \n If <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A?displayProperty=fullName> is the <xref:System.Globalization.TaiwanCalendar> but the <xref:System.Threading.Thread.CurrentCulture%2A?displayProperty=fullName> is not set to zh-TW, then <xref:System.Globalization.DateTimeFormatInfo.NativeCalendarName%2A?displayProperty=fullName>, <xref:System.Globalization.DateTimeFormatInfo.GetEraName%2A?displayProperty=fullName>, and <xref:System.Globalization.DateTimeFormatInfo.GetAbbreviatedEraName%2A?displayProperty=fullName> return an empty string (\"\").  \n  \n<a name=\"Custom\"></a>   \n## Custom cultures  \n In addition to the predefined cultures supported by the Windows operating system and the .NET Framework, the .NET Framework supports three types of custom cultures:  \n  \n-   New cultures that supplement the cultures available in Windows or the .NET Framework. For example, an application could install a <xref:System.Globalization.CultureInfo> object that represents the fj-FJ (or Fijan (Fiji)) culture on a system.  \n  \n-   Replacement cultures whose properties are different from the properties of the standard cultures supported by Windows and the .NET Framework.  \n  \n-   Standard cultures with user overrides. The user can use the **Region and Language** application in **Control Panel** to customize an existing culture's property values.  \n  \n> [!NOTE]\n>  You can use the <xref:System.Globalization.CultureAndRegionInfoBuilder> class to define, save, and register custom cultures that either supplement or replace existing cultures. The <xref:System.Globalization.CultureAndRegionInfoBuilder.Save%2A?displayProperty=fullName> method creates a Locale Data Markup Language (LDML) file that can be used to install a custom culture on target systems. For step-by step information on using the <xref:System.Globalization.CultureAndRegionInfoBuilder> class to create a new or replacement culture, see the <xref:System.Globalization.CultureAndRegionInfoBuilder> class topic.  \n  \n Because the .NET Framework supports custom cultures, you should consider the following when working with culture-specific data:  \n  \n-   Custom cultures can have values that exceed the ranges of the predefined cultures. For example, some cultures have unusually long month names, unexpected date or time formats, or other unusual data.  \n  \n-   When you display culture-specific data in the user interface, you should respect the user's customizations; for example, the user might want a 24-hour clock or a yyyyMMdd date format.  \n  \n-   Remember that custom cultures override default values. Therefore, you cannot consider culture data to be stable. Country names, number and date formats, and spellings may change in the future. If you want to serialize culture-sensitive data such as date and time strings to be passed to the date and time parsing functions, you should use the invariant culture or a specific .  \n  \n The <xref:System.Globalization.CultureInfo.CultureTypes%2A> property value of custom cultures installed on a system includes the <xref:System.Globalization.CultureTypes?displayProperty=fullName> flag, and custom cultures are assigned an <xref:System.Globalization.CultureInfo.LCID%2A> property value of `LOCALE_CUSTOM_UNSPECIFIED` (0x1000, or 4096). Note that, starting with Windows 10, this value is also assigned to system-defined cultures that lack complete cultural data.  \n  \n<a name=\"Dynamic\"></a>   \n## Dynamic culture data  \n Except for the invariant culture, culture data is dynamic. This is true even for the predefined cultures. For example, countries or regions adopt new currencies, change their spellings of words, or change their preferred calendar, and culture definitions change to track this.  Custom cultures are subject to change without notice, and any specific culture might be overridden by a custom replacement culture. Also, as discussed below, an individual user can override cultural preferences. Applications should always obtain culture data at run time.  \n  \n> [!CAUTION]\n>  When saving data, your application should use the invariant culture, a binary format, or a specific culture-independent format. Data saved according to the current values associated with a particular culture, other than the invariant culture, might become unreadable or might change in meaning if that culture changes.  \n  \n<a name=\"Current\"></a>   \n## The current culture and current UI culture  \n Every thread in a .NET Framework application has a current culture and a current UI culture. The current culture determines the formatting conventions for dates, times, numbers, and currency values, the sort order of text, casing conventions, and the ways in which strings are compared. The current UI culture is used to retrieve culture-specific resources at runtime.  \n  \n> [!NOTE]\n>  For information on how the current and current UI culture is determined on a per-thread basis, see the  [Culture and threads](#Threads) section. For information on how the current and current UI culture is determined on threads executing in a new application domain, and on threads that cross application domain boundaries, see the [Culture and application domains](#AppDomain) section. For information on how the current  and current is determined on  threads performing task-based asynchronous operations, see the [Culture and task-based asynchronous operations](#Async) section.  \n  \n For more detailed information on the current culture, see the <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=fullName> property topic. For more detailed information on the current UI culture, see the <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=fullName> property topic.  \n  \n### Retrieving the current and current UI cultures  \n You can get a <xref:System.Globalization.CultureInfo> object that represents the current culture in either of two ways:  \n  \n-   By retrieving the value of the <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=fullName> property.  \n  \n-   By retrieving the value of the [Thread.CurrentThread.CurrentCulture](../Topic/CurrentCulture%20Property.md) property.  \n  \n The following example retrieves both property values, compares them to show that they are equal, and displays the name of the current culture.  \n  \n [!code-csharp[System.Globalization.CultureInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Globalization.CultureInfo/cs/Current1.cs#1)]\n [!code-vb[System.Globalization.CultureInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Globalization.CultureInfo/vb/Current1.vb#1)]  \n  \n You can get a <xref:System.Globalization.CultureInfo> object that represents the current UI culture in either of two ways:  \n  \n-   By retrieving the value of the <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=fullName> property.  \n  \n-   By retrieving the value of the [Thread.CurrentThread.CurrentUICulture](../Topic/CurrentUICulture%20Property.md) property.  \n  \n The following example retrieves both property values, compares them to show that they are equal, and displays the name of the current UI culture.  \n  \n [!code-csharp[System.Globalization.CultureInfo#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Globalization.CultureInfo/cs/CurrentUI1.cs#2)]\n [!code-vb[System.Globalization.CultureInfo#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Globalization.CultureInfo/vb/CurrentUI1.vb#2)]  \n  \n### Setting the current and current UI cultures  \n To change the culture and UI culture of a thread, do the following:  \n  \n1.  Instantiate a <xref:System.Globalization.CultureInfo> object that represents that culture by calling a <xref:System.Globalization.CultureInfo> class constructor and passing it the name of the culture. The <xref:System.Globalization.CultureInfo.%23ctor%28System.String%29> constructor instantiates a  <xref:System.Globalization.CultureInfo> object that reflects user overrides if the new culture is the same as the current Windows culture.   The <xref:System.Globalization.CultureInfo.%23ctor%28System.String%2CSystem.Boolean%29> constructor allows you to specify whether the newly instantiated <xref:System.Globalization.CultureInfo> object reflects user overrides if the new culture is the same as the current Windows culture.  \n  \n2.  Assign the <xref:System.Globalization.CultureInfo> object to the <xref:System.Threading.Thread.CurrentCulture%2A?displayProperty=fullName> or<xref:System.Threading.Thread.CurrentUICulture%2A?displayProperty=fullName> property. In addition, for apps running on the version 4.6 or later of the desktop .NET Framework, you can also assign the  <xref:System.Globalization.CultureInfo> object to the <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=fullName> or <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=fullName> property.  \n  \n The following example retrieves the current culture. If it is anything other than the French (France) culture, it changes the current culture to French (France). Otherwise, it changes the current culture to French (Luxembourg).  \n  \n [!code-csharp[System.Globalization.CultureInfo#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Globalization.CultureInfo/cs/Change1.cs#3)]\n [!code-vb[System.Globalization.CultureInfo#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Globalization.CultureInfo/vb/Change1.vb#3)]  \n  \n The following example retrieves the current culture. If it is anything other the Slovenian (Slovenia) culture, it changes the current culture to Slovenian (Slovenia). Otherwise, it changes the current culture to Croatian (Croatia).  \n  \n [!code-csharp[System.Globalization.CultureInfo#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Globalization.CultureInfo/cs/ChangeUI1.cs#4)]\n [!code-vb[System.Globalization.CultureInfo#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Globalization.CultureInfo/vb/ChangeUI1.vb#4)]  \n  \n<a name=\"GetAll\"></a>   \n## Getting all cultures  \n You can retrieve an array specific categories of cultures or of all the cultures available on the local computer by calling the <xref:System.Globalization.CultureInfo.GetCultures%2A> method. For example, you can retrieve custom cultures, specific cultures, or neutral cultures either alone or in combination.  \n  \n The following example calls the <xref:System.Globalization.CultureInfo.GetCultures%2A> method twice, first with the <xref:System.Globalization.CultureTypes?displayProperty=fullName> enumeration member to retrieve all custom cultures, and then with the <xref:System.Globalization.CultureTypes?displayProperty=fullName> enumeration member to retrieve all replacement cultures.  \n  \n [!code-csharp[System.Globalization.CultureInfo#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Globalization.CultureInfo/cs/GetCultures1.cs#5)]\n [!code-vb[System.Globalization.CultureInfo#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Globalization.CultureInfo/vb/GetCultures1.vb#5)]  \n  \n<a name=\"Threads\"></a>   \n## Culture and threads  \n When a new application thread is started, its current culture and current UI culture are defined by the current system culture, and not by the current thread culture. The following example illustrates the difference. It sets the current culture and current UI culture of an application thread to the French (France) culture (fr-FR). If the current culture is already fr-FR, the example sets it to the English (United States) culture (en-US). It displays three random numbers as currency values and then creates a new thread, which, in turn, displays three more random numbers as currency values. But as the output from the example shows, the currency values displayed by the new thread do not reflect the formatting conventions of the French (France) culture, unlike the output from the main application thread.  \n  \n [!code-csharp[System.Globalization.CultureInfo.Class.Thread#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.thread/cs/defaultthread1.cs#1)]\n [!code-vb[System.Globalization.CultureInfo.Class.Thread#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.thread/vb/defaultthread1.vb#1)]  \n  \n In versions of the .NET Framework before the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], the most common way to ensure that the main application thread shares the same culture with all other worker threads is to pass either the name of the application-wide culture or a <xref:System.Globalization.CultureInfo> object that represents the application-wide culture to a <xref:System.Threading.ParameterizedThreadStart?displayProperty=fullName> delegate. The following example uses this approach to ensure that the currency values displayed by two threads reflect the formatting conventions of the same culture.  \n  \n [!code-csharp[System.Globalization.CultureInfo.Class.Thread#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.thread/cs/perthread1.cs#2)]\n [!code-vb[System.Globalization.CultureInfo.Class.Thread#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.thread/vb/perthread1.vb#2)]  \n  \n You can set the culture and UI culture of thread pool threads in a similar manner by calling the <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%2CSystem.Object%29?displayProperty=fullName> method.  \n  \n Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can set the culture and UI culture of all threads in an application domain more directly by assigning a <xref:System.Globalization.CultureInfo> object that represents that culture to the <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> and <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> properties. The following example uses these properties to ensure that all threads in the default application domain share the same culture.  \n  \n [!code-csharp[System.Globalization.CultureInfo.Class.Thread#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.thread/cs/setthreads1.cs#3)]\n [!code-vb[System.Globalization.CultureInfo.Class.Thread#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.thread/vb/setthreads1.vb#3)]  \n  \n> [!WARNING]\n>  Although the <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> and <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> properties are static members, they define the default culture and default UI culture only for the application domain that is current at the time these property values are set. For more information, see the next section, [Culture and application domains](#AppDomain).  \n  \n When you assign values to the <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> and <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> properties, the culture and UI culture of the threads in the application domain also change if they have not explicitly been assigned a culture. However, these threads reflect the new culture settings only while they execute in the current application domain. If these threads execute in another application domain, their culture becomes the default culture defined for that application domain. As a result, we recommend that you always set the culture of the main application thread, and not rely on the <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> and <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> properties to change it.  \n  \n<a name=\"AppDomain\"></a>   \n## Culture and application domains  \n <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> and <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> are static properties that explicitly define a default culture only for the application domain that is current when the property value is set or retrieved. The following example sets the default culture and default UI culture in the default application domain to French (France), and then uses the <xref:System.AppDomainSetup> class and the <xref:System.AppDomainInitializer> delegate to set the default culture and UI culture in a new application domain to Russian (Russia). A single thread then executes two methods in each application domain. Note that the thread's culture and UI culture are not explicitly set; they are derived from the default culture and UI culture of the application domain in which the thread is executing. Note also that the <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> and <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> properties return the default <xref:System.Globalization.CultureInfo> values of the application domain that is current when the method call is made.  \n  \n [!code-csharp[System.Globalization.CultureInfo.Class.AppDomain#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.appdomain/cs/appdomainex1.cs#1)]\n [!code-vb[System.Globalization.CultureInfo.Class.AppDomain#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.appdomain/vb/appdomainex1.vb#1)]  \n  \n For more information about cultures and application domains, see the \"Application Domains and Threads\" section in the  topic.  \n  \n<a name=\"Async\"></a>   \n## Culture and task-based asynchronous operations  \n The [task-based asynchronous programming pattern](~/docs/standard/parallel-programming/task-based-asynchronous-programming.md) uses <xref:System.Threading.Tasks.Task> and <xref:System.Threading.Tasks.Task%601> objects to asynchronously execute delegates on thread pool threads. The specific thread on which a particular task runs is not known in advance, but is determined only at runtime.  \n  \n For apps that target the [!INCLUDE[net_v46](~/includes/net-v46-md.md)] or later versions, culture is part of an asynchronous operation's context. In other words, starting with apps that target the [!INCLUDE[net_v46](~/includes/net-v46-md.md)], asynchronous operations by default inherit the values of the <xref:System.Globalization.CultureInfo.CurrentCulture%2A> and <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> properties of the thread from which they are launched. If the current culture or current UI culture differs from the system culture, the current culture crosses thread boundaries and becomes the current culture of the thread pool thread that is executing an asynchronous operation.  \n  \n The following example provides a simple illustration. It uses the <xref:System.Runtime.Versioning.TargetFrameworkAttribute> attribute to target the [!INCLUDE[net_v46](~/includes/net-v46-md.md)]. The example defines a <xref:System.Func%601> delegate, `formatDelegate`, that returns some numbers formatted as currency values. The example changes the current system culture to either French (France) or, if French (France) is already the current culture, English (United States). It then:  \n  \n-   Invokes the delegate directly so that it runs synchronously on the main app thread.  \n  \n-   Creates a task that executes the delegate asynchronously on a thread pool thread.  \n  \n-   Creates a task that executes the delegate synchronously on the main app thread by calling the <xref:System.Threading.Tasks.Task.RunSynchronously%2A?displayProperty=fullName> method.  \n  \n As the output from the example shows, when the current culture is changed to French (France), the current culture of the thread from which tasks are invoked asynchronously becomes the current culture for that asynchronous operation.  \n  \n [!code-csharp[System.Globalization.CultureInfo.Class.Async#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.async/cs/asyncculture1.cs#1)]\n [!code-vb[System.Globalization.CultureInfo.Class.Async#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.async/vb/asyncculture1.vb#1)]  \n  \n For apps that target versions of the .NET Framework prior to the [!INCLUDE[net_v46](~/includes/net-v46-md.md)], or for apps that do not target a particular version of the .NET Framework, the culture of the calling thread is not part of a task's context. Instead, unless one is explicitly defined, the culture of new threads by default is the system culture. The following example, which is identical to the previous example except that it lacks the <xref:System.Runtime.Versioning.TargetFrameworkAttribute> attribute, illustrates this. Because the system culture of the system on which the example executed was English (United States), the culture of the task that executes asynchronously on a thread pool thread is en-US rather than fr-FR.  \n  \n [!code-csharp[System.Globalization.CultureInfo.Class.Async#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.async/cs/asyncculture2.cs#2)]\n [!code-vb[System.Globalization.CultureInfo.Class.Async#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.async/vb/asyncculture2.vb#2)]  \n  \n For apps that target versions of the .NET Framework from the [!INCLUDE[net_v45](~/includes/net-v45-md.md)] and later but prior to the [!INCLUDE[net_v46](~/includes/net-v46-md.md)], you can use the <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> and <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> properties to ensure that the culture of the calling thread is used in asynchronous tasks that execute on thread pool threads. The following example is identical to the previous example, except that it uses the <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> property to ensure that thread pool threads have the same culture as the main app thread.  \n  \n [!code-csharp[System.Globalization.CultureInfo.Class.Async#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.async/cs/asyncculture3.cs#3)]\n [!code-vb[System.Globalization.CultureInfo.Class.Async#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.async/vb/asyncculture3.vb#3)]  \n  \n <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> and <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> are per-app domain properties; that is, they establish a default culture for all threads not explicitly assigned a culture in a specific application domain. However, for apps that target the [!INCLUDE[net_v46](~/includes/net-v46-md.md)] or later, the culture of the calling thread remains part of an asynchronous task's context even if the task crosses app domain boundaries.  \n  \n The following example shows that the calling thread's culture remains the current culture of a task-based asynchronous operation even if the method that the task is executing crosses application domain boundaries. It defines a class, `DataRetriever`, with a single method, `GetFormattedNumber`, that returns a random double-precision floating-point number between 1 and 1,000 formatted as a currency value. A first task is run that simply instantiates a `DataRetriever` instance and calls its `GetFormattedNumber` method. A second task reports its current application domain, creates a new application domain, instantiates a `DataRetriever` instance in the new application domain, and calls its `GetFormattedNumber` method. As the output from the example shows, the current culture has remained the same in the calling thread, the first task, and the second task both when it was executing in the main application domain and the second application domain.  \n  \n [!code-csharp[System.Globalization.CultureInfo.Class.Async#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.async/cs/asyncculture4.cs#4)]\n [!code-vb[System.Globalization.CultureInfo.Class.Async#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.async/vb/asyncculture4.vb#4)]  \n  \n<a name=\"Serialization\"></a>   \n## CultureInfo object serialization  \n When a <xref:System.Globalization.CultureInfo> object is serialized, all that is actually stored is <xref:System.Globalization.CultureInfo.Name%2A> and <xref:System.Globalization.CultureInfo.UseUserOverride%2A>. It is successfully de-serialized only in an environment where that <xref:System.Globalization.CultureInfo.Name%2A> has the same meaning. The following three examples show why this is not always the case:  \n  \n-   If the <xref:System.Globalization.CultureInfo.CultureTypes%2A> property value is <xref:System.Globalization.CultureTypes?displayProperty=fullName>, and if that culture was first introduced in Windows Vista or a later version of the Windows operating system, it is not possible to de-serialize it on Windows XP. Similarly, if the culture was first introduced in Windows XP Service Pack 2, it is not possible to de-serialize it for a Windows XP system on which the culture has not been installed.  \n  \n-   If the <xref:System.Globalization.CultureInfo.CultureTypes%2A> value is <xref:System.Globalization.CultureTypes?displayProperty=fullName>, and the computer on which it is de-serialized does not have this user custom culture installed, it is not possible to de-serialize it.  \n  \n-   If the <xref:System.Globalization.CultureInfo.CultureTypes%2A> value is <xref:System.Globalization.CultureTypes?displayProperty=fullName>, and the computer on which it is de-serialized does not have this replacement culture, it de-serializes to the same name, but not all of the same characteristics. For example, if en-US is a replacement culture on computer A, but not on computer B, and if a <xref:System.Globalization.CultureInfo> object referring to this culture is serialized on computer A and de-serialized on computer B, then none of the custom characteristics of the culture are transmitted. The culture de-serializes successfully, but with a different meaning.  \n  \n<a name=\"CPanel\"></a>   \n## Control Panel overrides  \n The user might choose to override some of the values associated with the current culture of Windows through the regional and language options portion of Control Panel. For example, the user might choose to display the date in a different format or to use a currency other than the default for the culture. In general, your applications should honor these user overrides.  \n  \n If <xref:System.Globalization.CultureInfo.UseUserOverride%2A> is `true` and the specified culture matches the current culture of Windows, the <xref:System.Globalization.CultureInfo> uses those overrides, including user settings for the properties of the <xref:System.Globalization.DateTimeFormatInfo> instance returned by the <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> property, and the properties of the <xref:System.Globalization.NumberFormatInfo> instance returned by the <xref:System.Globalization.CultureInfo.NumberFormat%2A> property. If the user settings are incompatible with the culture associated with the <xref:System.Globalization.CultureInfo>, for example, if the selected calendar is not one of the <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>, the results of the methods and the values of the properties are undefined.  \n  \n<a name=\"AlternateSort\"></a>   \n## Alternate sort orders  \n Some cultures support more than one sort order. For example:  \n  \n-   The Spanish (Spain) culture has two sort orders: the default international sort order, and the traditional sort order. When you instantiate a <xref:System.Globalization.CultureInfo> object with the es-ES culture name, the international sort order is used. When you instantiate a <xref:System.Globalization.CultureInfo> object with the es-ES-tradnl culture name, the traditional sort order is used.  \n  \n-   The zh-CN (Chinese (Simplified, PRC)) culture supports two sort orders:  by pronunciation (the default) and by stroke count. When you instantiate a <xref:System.Globalization.CultureInfo> object with the zh-CN culture name, the default sort order is used. When you instantiate a <xref:System.Globalization.CultureInfo> object with a local identifier of 0x00020804, strings are sorted by stroke count.  \n  \n The following table lists the cultures that support alternate sort orders and the identifiers for the default and alternate sort orders.  \n  \n|Culture name|Culture|Default sort name and identifier|Alternate sort name and identifier|  \n|------------------|-------------|--------------------------------------|----------------------------------------|  \n|es-ES|Spanish (Spain)|International: 0x00000C0A|Traditional: 0x0000040A|  \n|zh-TW|Chinese (Taiwan)|Stroke Count: 0x00000404|Bopomofo: 0x00030404|  \n|zh-CN|Chinese (PRC)|Pronunciation: 0x00000804|Stroke Count: 0x00020804|  \n|zh-HK|Chinese (Hong Kong SAR)|Stroke Count: 0x00000c04|Stroke Count: 0x00020c04|  \n|zh-SG|Chinese (Singapore)|Pronunciation: 0x00001004|Stroke Count: 0x00021004|  \n|zh-MO|Chinese (Macao SAR)|Pronunciation: 0x00001404|Stroke Count: 0x00021404|  \n|ja-JP|Japanese (Japan)|Default: 0x00000411|Unicode: 0x00010411|  \n|ko-KR|Korean (Korea)|Default: 0x00000412|Korean Xwansung - Unicode: 0x00010412|  \n|de-DE|German (Germany)|Dictionary: 0x00000407|Phone Book Sort DIN: 0x00010407|  \n|hu-HU|Hungarian (Hungary)|Default: 0x0000040e|Technical Sort: 0x0001040e|  \n|ka-GE|Georgian (Georgia)|Traditional: 0x00000437|Modern Sort: 0x00010437|  \n  \n<a name=\"Windows\"></a>   \n## Culture and Windows apps  \n In Windows apps, the <xref:System.Globalization.CultureInfo.CurrentCulture%2A> and <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> properties are read-only. You can set the current culture and current UI culture by using the Windows [ResourceContext.Languages](https://msdn.microsoft.com/library/windows/apps/windows.applicationmodel.resources.core.resourcecontext.languages.aspx) property. The following example uses it to change the application's current culture and current UI culture either to English (United States) or, if the current culture is already English (United States), to French (France). The value of the <xref:System.Globalization.CultureInfo.CurrentCulture%2A> and <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> properties are then displayed to a <xref:System.Windows.Controls.TextBlock> control named `block`. As the output from the example shows, both property values reflect the new value of the [ResourceContext.Languages](https://msdn.microsoft.com/library/windows/apps/windows.applicationmodel.resources.core.resourcecontext.languages.aspx) property.  \n  \n```csharp  \n  \nResourceContext context = ResourceManager.Current.DefaultContext;  \nvar list = new List<String>();  \nif (CultureInfo.CurrentCulture.Name == \"en-US\")  \n   list.Add(\"fr-FR\");  \nelse  \n   list.Add(\"en-US\");  \n  \ncontext.Languages = list;  \nblock.Text += String.Format(\"\\nThe current culture is {0}\\n\",  \n                            CultureInfo.CurrentCulture);  \nblock.Text += String.Format(\"The current culture UI is {0}\\n\",  \n                            CultureInfo.CurrentUICulture);  \n// The example displays output like the following if run on a system  \n// whose current culture is English (United States):  \n// The current culture is fr-FR  \n// The current UI culture is fr-FR  \n  \n```  \n  \n```  \n  \nDim context As ResourceContext = ResourceManager.Current.DefaultContext  \nDim list As New List(Of String)()  \nIf CultureInfo.CurrentCulture.Name = \"en-US\" Then  \n   list.Add(\"fr-FR\")  \nElse  \n   list.Add(\"en-US\")  \nEnd If  \ncontext.Languages = list  \nblock.Text += String.Format(\"{1}The current culture is {0}{1}\",  \n                            CultureInfo.CurrentCulture, vbCrLf)  \nblock.Text += String.Format(\"The current culture UI is {0}\\n\",  \n                            CultureInfo.CurrentUICulture)  \n' The example displays output Like the following if run on a system  \n' whose current culture Is English (United States):  \n'    The current culture Is fr-FR  \n'    The current UI culture Is fr-FR  \n  \n```"
  example:
  - "The following example shows how to create a <xref:System.Globalization.CultureInfo> object for Spanish (Spain) with the international sort and another <xref:System.Globalization.CultureInfo> object with the traditional sort.  \n  \n [!code-cpp[System.Globalization.CultureInfo_esES#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/CPP/spanishspain.cpp#1)]\n [!code-csharp[System.Globalization.CultureInfo_esES#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/CS/spanishspain.cs#1)]\n [!code-vb[System.Globalization.CultureInfo_esES#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/VB/spanishspain.vb#1)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class CultureInfo : ICloneable, IFormatProvider
  inheritance:
  - System.Object
  implements:
  - System.ICloneable
  - System.IFormatProvider
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  attributes:
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CultureInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Globalization.CultureInfo.#ctor(System.Int32)
  commentId: M:System.Globalization.CultureInfo.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Globalization.CultureInfo
  langs:
  - csharp
  name: CultureInfo(Int32)
  nameWithType: CultureInfo.CultureInfo(Int32)
  fullName: CultureInfo.CultureInfo(Int32)
  type: Constructor
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Globalization
  summary: Initializes a new instance of the <xref href="System.Globalization.CultureInfo"></xref> class based on the culture specified by the culture identifier.
  remarks: "Predefined culture identifiers are listed in the [National Language Support (NLS) API Reference](http://go.microsoft.com/fwlink/?LinkId=200048) at the Go Global Developer Center.  \n  \n In most cases, the `culture` parameter is mapped to the corresponding National Language Support (NLS) locale identifier. The value of the `culture` parameter becomes the value of the <xref:System.Globalization.CultureInfo.LCID%2A> property of the new <xref:System.Globalization.CultureInfo>.  \n  \n We recommend that you call the locale name constructor <xref:System.Globalization.CultureInfo.%23ctor%2A?displayProperty=fullName>, because locale names are preferable to LCIDs. For custom locales, a locale name is required.  \n  \n The user might choose to override some of the values associated with the current culture of Windows through the regional and language options portion of Control Panel. For example, the user might choose to display the date in a different format or to use a currency other than the default for the culture. If the specified culture identifier matches the culture identifier of the current Windows culture, this constructor creates a <xref:System.Globalization.CultureInfo> that uses those overrides, including user settings for the properties of the <xref:System.Globalization.DateTimeFormatInfo> instance returned by the <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> property, and the properties of the <xref:System.Globalization.NumberFormatInfo> instance returned by the <xref:System.Globalization.CultureInfo.NumberFormat%2A> property. If the user settings are incompatible with the culture associated with the <xref:System.Globalization.CultureInfo> (for example, if the selected calendar is not one of the <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>) the results of the methods and the values of the properties are undefined.  \n  \n If the specified culture identifier does not match the identifier of the current Windows culture, this constructor creates a <xref:System.Globalization.CultureInfo> that uses the default values for the specified culture.  \n  \n The <xref:System.Globalization.CultureInfo.UseUserOverride%2A> property is always set to `true`.  \n  \n For example, suppose that Arabic (Saudi Arabia) is the current Windows culture and the user has changed the calendar from Hijri to Gregorian.  \n  \n-   With `CultureInfo(\"0x0401\")` (culture name ar-SA), <xref:System.Globalization.CultureInfo.Calendar%2A> is set to <xref:System.Globalization.GregorianCalendar> (which is the user setting) and <xref:System.Globalization.CultureInfo.UseUserOverride%2A> is set to `true`.  \n  \n-   With `CultureInfo(\"0x041E\")` (culture name th-TH), <xref:System.Globalization.CultureInfo.Calendar%2A> is set to <xref:System.Globalization.ThaiBuddhistCalendar> (which is the default calendar for th-TH) and <xref:System.Globalization.CultureInfo.UseUserOverride%2A> is set to `true`.  \n  \n For cultures that use the euro, the .NET Framework and Windows XP set the default currency as euro. However, older versions of Windows do not. Therefore, if the user of an older version of Windows has not changed the currency setting through the regional and language options portion of Control Panel, the currency might be incorrect. To use the .NET Framework default setting for the currency, the application should use a <xref:System.Globalization.CultureInfo> constructor overload that accepts a `useUserOverride` parameter and set it to `false`.  \n  \n> [!NOTE]\n>  For backwards compatibility, a culture constructed using a `culture` parameter of 0x0004 or 0x7c04 will have a <xref:System.Globalization.CultureInfo.Name%2A> property of zh-CHS or zh-CHT, respectively. You should instead prefer to construct the culture using the current standard culture names of zh-Hans or zh-Hant, unless you have a reason for using the older names."
  syntax:
    content: public CultureInfo (int culture);
    parameters:
    - id: culture
      type: System.Int32
      description: A predefined <xref href="System.Globalization.CultureInfo"></xref> identifier, <xref href="System.Globalization.CultureInfo.LCID"></xref> property of an existing <xref href="System.Globalization.CultureInfo"></xref> object, or Windows-only culture identifier.
  overload: System.Globalization.CultureInfo.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>culture</code> is less than zero.
  - type: System.Globalization.CultureNotFoundException
    commentId: T:System.Globalization.CultureNotFoundException
    description: <code>culture</code> is not a valid culture identifier. See the Notes to Callers section for more information.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CultureInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Globalization.CultureInfo.#ctor(System.String)
  commentId: M:System.Globalization.CultureInfo.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Globalization.CultureInfo
  langs:
  - csharp
  name: CultureInfo(String)
  nameWithType: CultureInfo.CultureInfo(String)
  fullName: CultureInfo.CultureInfo(String)
  type: Constructor
  assemblies:
  - System.Globalization
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Globalization
  summary: Initializes a new instance of the <xref href="System.Globalization.CultureInfo"></xref> class based on the culture specified by name.
  remarks: "For a list of predefined culture names, see the [National Language Support (NLS) API Reference](http://go.microsoft.com/fwlink/?LinkId=200048) at the Go Global Developer Center. In addition, starting with Windows 10, `name` can be any valid BCP-47 language tag.  \n  \n If `name` is <xref:System.String?displayProperty=fullName>, the constructor creates an instance of the invariant culture; this is equivalent to retrieving the value of the <xref:System.Globalization.CultureInfo.InvariantCulture%2A> property.  \n  \n The user might choose to override some of the values associated with the current culture of Windows through the regional and language options portion of Control Panel. For example, the user might choose to display the date in a different format or to use a currency other than the default for the culture. If the culture identifier associated with `name` matches the culture identifier of the current Windows culture, this constructor creates a <xref:System.Globalization.CultureInfo> object that uses those overrides, including user settings for the properties of the <xref:System.Globalization.DateTimeFormatInfo> instance returned by the <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> property, and the properties of the <xref:System.Globalization.NumberFormatInfo> instance returned by the <xref:System.Globalization.CultureInfo.NumberFormat%2A> property. If the user settings are incompatible with the culture associated with the <xref:System.Globalization.CultureInfo>, for example, if the selected calendar is not one of the <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>, the results of the methods and the values of the properties are undefined.  \n  \n If the culture identifier associated with `name` does not match the culture identifier of the current Windows culture, this constructor creates a <xref:System.Globalization.CultureInfo> object that uses the default values for the specified culture.  \n  \n The <xref:System.Globalization.CultureInfo.UseUserOverride%2A> property is always set to `true`.  \n  \n For example, suppose that Arabic (Saudi Arabia) is the current culture of Windows and the user changed the calendar from Hijri to Gregorian.  \n  \n-   With `CultureInfo(\"ar-SA\")`, <xref:System.Globalization.CultureInfo.Calendar%2A> is set to <xref:System.Globalization.GregorianCalendar> (which is the user setting) and <xref:System.Globalization.CultureInfo.UseUserOverride%2A> is set to `true`.  \n  \n-   With `CultureInfo(\"th-TH\")`, <xref:System.Globalization.CultureInfo.Calendar%2A> is set to <xref:System.Globalization.ThaiBuddhistCalendar> (which is the default calendar for th-TH) and <xref:System.Globalization.CultureInfo.UseUserOverride%2A> is set to `true`.  \n  \n The <xref:System.Globalization.CultureInfo.LCID%2A> property of the new <xref:System.Globalization.CultureInfo> is set to the culture identifier associated with the specified name.  \n  \n For cultures that use the euro, the .NET Framework and Windows XP set the default currency as euro. However, older versions of Windows do not do this. Therefore, if the user of an older version of Windows has not changed the currency setting through the regional and language options portion of Control Panel, the currency might be incorrect. To use the .NET Framework default setting for the currency, the application should use a <xref:System.Globalization.CultureInfo> constructor overload that accepts a `useUserOverride` parameter and set it to `false`."
  example:
  - "The following example retrieves the current culture. If it is anything other than the French (France) culture, it calls the <xref:System.Globalization.CultureInfo.%23ctor%28System.String%29> constructor to instantiate a <xref:System.Globalization.CultureInfo> object that represents the French (France) culture and makes it the current thread culture. Otherwise, it instantiates a <xref:System.Globalization.CultureInfo> object that represents the French (Luxembourg) culture and makes it the current culture.  \n  \n [!code-csharp[System.Globalization.CultureInfo#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Globalization.CultureInfo/cs/Change1.cs#3)]\n [!code-vb[System.Globalization.CultureInfo#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Globalization.CultureInfo/vb/Change1.vb#3)]"
  syntax:
    content: public CultureInfo (string name);
    parameters:
    - id: name
      type: System.String
      description: A predefined <xref href="System.Globalization.CultureInfo"></xref> name, <xref href="System.Globalization.CultureInfo.Name"></xref> of an existing <xref href="System.Globalization.CultureInfo"></xref>, or Windows-only culture name. <code>name</code> is not case-sensitive.
  overload: System.Globalization.CultureInfo.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>name</code> is null.
  - type: System.Globalization.CultureNotFoundException
    commentId: T:System.Globalization.CultureNotFoundException
    description: <code>name</code> is not a valid culture name. For more information, see the Notes to Callers section.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CultureInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Globalization.CultureInfo.#ctor(System.Int32,System.Boolean)
  commentId: M:System.Globalization.CultureInfo.#ctor(System.Int32,System.Boolean)
  id: '#ctor(System.Int32,System.Boolean)'
  parent: System.Globalization.CultureInfo
  langs:
  - csharp
  name: CultureInfo(Int32, Boolean)
  nameWithType: CultureInfo.CultureInfo(Int32, Boolean)
  fullName: CultureInfo.CultureInfo(Int32, Boolean)
  type: Constructor
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Globalization
  summary: Initializes a new instance of the <xref href="System.Globalization.CultureInfo"></xref> class based on the culture specified by the culture identifier and on the Boolean that specifies whether to use the user-selected culture settings from the system.
  remarks: "Predefined culture identifiers are listed in the [National Language Support (NLS) API Reference](http://go.microsoft.com/fwlink/?LinkId=200048) at the Go Global Developer Center.  \n  \n In most cases, the `culture` parameter is mapped to the corresponding National Language Support (NLS) locale identifier. The value of the `culture` parameter becomes the value of the <xref:System.Globalization.CultureInfo.LCID%2A> property of the new <xref:System.Globalization.CultureInfo>.  \n  \n We recommend that you call the locale name constructor <xref:System.Globalization.CultureInfo.%23ctor%2A?displayProperty=fullName>, because locale names are preferable to LCIDs. For custom locales, a locale name is required.  \n  \n The user might choose to override some of the values associated with the current culture of Windows through the regional and language options portion of Control Panel. For example, the user might choose to display the date in a different format or to use a currency other than the default for the culture.  \n  \n Applications should typically not disallow user overrides. Note that disallowing overrides does not itself guarantee data stability; see the blog entry [Culture data shouldn't be considered stable (except for Invariant)](http://go.microsoft.com/fwlink/?LinkId=156850).  \n  \n If the <xref:System.Globalization.CultureInfo.UseUserOverride%2A> property is set to `true` and the specified culture identifier matches the identifier of the current Windows culture, this constructor creates a <xref:System.Globalization.CultureInfo> that uses those overrides, including user settings for the properties of the <xref:System.Globalization.DateTimeFormatInfo> instance returned by the <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> property, and the properties of the <xref:System.Globalization.NumberFormatInfo> instance returned by the <xref:System.Globalization.CultureInfo.NumberFormat%2A> property. If the user settings are incompatible with the culture associated with the <xref:System.Globalization.CultureInfo>, for example, if the selected calendar is not one of the <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>, the results of the methods and the values of the properties are undefined.  \n  \n Otherwise, this constructor creates a <xref:System.Globalization.CultureInfo> that uses the default values for the specified culture.  \n  \n The value of the `useUserOverride` parameter becomes the value of the <xref:System.Globalization.CultureInfo.UseUserOverride%2A> property.  \n  \n For example, suppose that Arabic (Saudi Arabia) is the current culture of Windows and the user has changed the calendar from Hijri to Gregorian.  \n  \n-   With `CultureInfo(\"0x0401\", true)` (culture name ar-SA), <xref:System.Globalization.CultureInfo.Calendar%2A> is set to <xref:System.Globalization.GregorianCalendar> (which is the user setting) and <xref:System.Globalization.CultureInfo.UseUserOverride%2A> is set to `true`.  \n  \n-   With `CultureInfo(\"0x0401\", false)` (culture name ar-SA), <xref:System.Globalization.CultureInfo.Calendar%2A> is set to <xref:System.Globalization.HijriCalendar> (which is the default calendar for ar-SA) and <xref:System.Globalization.CultureInfo.UseUserOverride%2A> is set to `false`.  \n  \n-   With `CultureInfo(\"0x041E\", true)` (culture name th-TH), <xref:System.Globalization.CultureInfo.Calendar%2A> is set to <xref:System.Globalization.ThaiBuddhistCalendar> (which is the default calendar for th-TH) and <xref:System.Globalization.CultureInfo.UseUserOverride%2A> is set to `true`.  \n  \n-   With `CultureInfo(\"0x041E\", false)` (culture name th-TH), <xref:System.Globalization.CultureInfo.Calendar%2A> is set to <xref:System.Globalization.ThaiBuddhistCalendar> (which is the default calendar for th-TH) and <xref:System.Globalization.CultureInfo.UseUserOverride%2A> is set to `false`.  \n  \n For cultures that use the euro, the .NET Framework and Windows XP set the default currency as euro. However, older versions of Windows do not. Therefore, if the user of an older version of Windows has not changed the currency setting through the regional and language options portion of Control Panel, the currency might be incorrect. To use the .NET Framework default setting for the currency, the application should set the `useUserOverride` parameter to `false`.  \n  \n> [!NOTE]\n>  For backwards compatibility, a culture constructed using a `culture` parameter of 0x0004 or 0x7c04 will have a <xref:System.Globalization.CultureInfo.Name%2A> property of zh-CHS or zh-CHT, respectively. You should instead prefer to construct the culture using the current standard culture names of zh-Hans or zh-Hant, unless you have a reason for using the older names."
  syntax:
    content: public CultureInfo (int culture, bool useUserOverride);
    parameters:
    - id: culture
      type: System.Int32
      description: A predefined <xref href="System.Globalization.CultureInfo"></xref> identifier, <xref href="System.Globalization.CultureInfo.LCID"></xref> property of an existing <xref href="System.Globalization.CultureInfo"></xref> object, or Windows-only culture identifier.
    - id: useUserOverride
      type: System.Boolean
      description: A Boolean that denotes whether to use the user-selected culture settings (`true`) or the default culture settings (`false`).
  overload: System.Globalization.CultureInfo.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>culture</code> is less than zero.
  - type: System.Globalization.CultureNotFoundException
    commentId: T:System.Globalization.CultureNotFoundException
    description: <code>culture</code> is not a valid culture identifier. See the Notes to Callers section for more information.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CultureInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Globalization.CultureInfo.#ctor(System.String,System.Boolean)
  commentId: M:System.Globalization.CultureInfo.#ctor(System.String,System.Boolean)
  id: '#ctor(System.String,System.Boolean)'
  parent: System.Globalization.CultureInfo
  langs:
  - csharp
  name: CultureInfo(String, Boolean)
  nameWithType: CultureInfo.CultureInfo(String, Boolean)
  fullName: CultureInfo.CultureInfo(String, Boolean)
  type: Constructor
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Globalization
  summary: Initializes a new instance of the <xref href="System.Globalization.CultureInfo"></xref> class based on the culture specified by name and on the Boolean that specifies whether to use the user-selected culture settings from the system.
  remarks: "For a list of predefined culture names, see the [National Language Support (NLS) API Reference](http://go.microsoft.com/fwlink/?LinkId=200048) at the Go Global Developer Center. In addition, starting with Windows 10, `name` can be any valid BCP-47 language tag.  \n  \n If `name` is <xref:System.String?displayProperty=fullName>, the constructor creates an instance of the invariant culture; this is equivalent to retrieving the value of the <xref:System.Globalization.CultureInfo.InvariantCulture%2A> property.  \n  \n The user might choose to override some of the values associated with the current Windows culture through the regional and language options portion of Control Panel. For example, the user might choose to display the date in a different format or to use a currency other than the default for the culture.  \n  \n Applications should typically not disallow user overrides. Note that disallowing overrides does not itself guarantee data stability; see the blog entry [Culture data shouldn't be considered stable (except for Invariant)](http://go.microsoft.com/fwlink/?LinkId=156850).  \n  \n If the <xref:System.Globalization.CultureInfo.UseUserOverride%2A> property is set to `true` and the culture identifier associated with the specified culture name matches the culture identifier of the current Windows culture, this constructor creates a <xref:System.Globalization.CultureInfo> that uses those overrides, including user settings for the properties of the <xref:System.Globalization.DateTimeFormatInfo> instance returned by the <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> property, and the properties of the <xref:System.Globalization.NumberFormatInfo> instance returned by the <xref:System.Globalization.CultureInfo.NumberFormat%2A> property. If the user settings are incompatible with the culture associated with the <xref:System.Globalization.CultureInfo>, for example, if the selected calendar is not one of the <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>, the results of the methods and the values of the properties are undefined.  \n  \n Otherwise, this constructor creates a <xref:System.Globalization.CultureInfo> that uses the default values for the specified culture.  \n  \n The value of the `useUserOverride` parameter becomes the value of the <xref:System.Globalization.CultureInfo.UseUserOverride%2A> property.  \n  \n For example, suppose that Arabic (Saudi Arabia) is the current culture of Windows and the user changed the calendar from Hijri to Gregorian.  \n  \n-   With `CultureInfo(\"ar-SA\", true)`, <xref:System.Globalization.CultureInfo.Calendar%2A> is set to <xref:System.Globalization.GregorianCalendar> (which is the user setting) and <xref:System.Globalization.CultureInfo.UseUserOverride%2A> is set to `true`.  \n  \n-   With `CultureInfo(\"ar-SA\", false)`, <xref:System.Globalization.CultureInfo.Calendar%2A> is set to <xref:System.Globalization.HijriCalendar> (which is the default calendar for ar-SA) and <xref:System.Globalization.CultureInfo.UseUserOverride%2A> is set to `false`.  \n  \n-   With `CultureInfo(\"th-TH\", true)`, <xref:System.Globalization.CultureInfo.Calendar%2A> is set to <xref:System.Globalization.ThaiBuddhistCalendar> (which is the default calendar for th-TH) and <xref:System.Globalization.CultureInfo.UseUserOverride%2A> is set to `true`.  \n  \n-   With `CultureInfo(\"th-TH\", false)`, <xref:System.Globalization.CultureInfo.Calendar%2A> is set to <xref:System.Globalization.ThaiBuddhistCalendar> (which is the default calendar for th-TH) and <xref:System.Globalization.CultureInfo.UseUserOverride%2A> is set to `false`.  \n  \n The <xref:System.Globalization.CultureInfo.LCID%2A> property of the new <xref:System.Globalization.CultureInfo> is set to the culture identifier associated with the specified name.  \n  \n For cultures that use the euro, the .NET Framework and Windows XP set the default currency as euro. However, older versions of Windows do not do this. Therefore, if the user of an older version of Windows has not changed the currency setting through the regional and language options portion of Control Panel, the currency might be incorrect. To use the .NET Framework default setting for the currency, the application should set the `useUserOverride` parameter to `false`."
  syntax:
    content: public CultureInfo (string name, bool useUserOverride);
    parameters:
    - id: name
      type: System.String
      description: A predefined <xref href="System.Globalization.CultureInfo"></xref> name, <xref href="System.Globalization.CultureInfo.Name"></xref> of an existing <xref href="System.Globalization.CultureInfo"></xref>, or Windows-only culture name. <code>name</code> is not case-sensitive.
    - id: useUserOverride
      type: System.Boolean
      description: A Boolean that denotes whether to use the user-selected culture settings (`true`) or the default culture settings (`false`).
  overload: System.Globalization.CultureInfo.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>name</code> is null.
  - type: System.Globalization.CultureNotFoundException
    commentId: T:System.Globalization.CultureNotFoundException
    description: <code>name</code> is not a valid culture name. See the Notes to Callers section for more information.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CultureInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Globalization.CultureInfo.Calendar
  commentId: P:System.Globalization.CultureInfo.Calendar
  id: Calendar
  parent: System.Globalization.CultureInfo
  langs:
  - csharp
  name: Calendar
  nameWithType: CultureInfo.Calendar
  fullName: CultureInfo.Calendar
  type: Property
  assemblies:
  - System.Globalization
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Globalization
  summary: Gets the default calendar used by the culture.
  remarks: "The user might choose to override some of the values associated with the current culture of Windows through the regional and language options portion of Control Panel. For example, the user might choose to display the date in a different format or to use a currency other than the default for the culture.  \n  \n If <xref:System.Globalization.CultureInfo.UseUserOverride%2A> is `true` and the specified culture matches the current culture of Windows, the <xref:System.Globalization.CultureInfo> uses those overrides, including user settings for the properties of the <xref:System.Globalization.DateTimeFormatInfo> instance returned by the <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> property, and the properties of the <xref:System.Globalization.NumberFormatInfo> instance returned by the <xref:System.Globalization.CultureInfo.NumberFormat%2A> property. If the user settings are incompatible with the culture associated with the <xref:System.Globalization.CultureInfo>, for example, if the selected calendar is not one of the <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>, the results of the methods and the values of the properties are undefined.  \n  \n Therefore, if <xref:System.Globalization.CultureInfo.UseUserOverride%2A> is `true`, the value of this property might be different from the default calendar used by the culture.  \n  \n Your application changes the calendar used by the current <xref:System.Globalization.CultureInfo> by setting the <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A> property of <xref:System.Globalization.CultureInfo.DateTimeFormat%2A>, which is an instance of the <xref:System.Globalization.DateTimeFormatInfo> class. The new calendar must be one of the calendars listed in <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>. <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> also includes other properties that customize the date and time formatting associated with that <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A>."
  syntax:
    content: public virtual System.Globalization.Calendar Calendar { get; }
    return:
      type: System.Globalization.Calendar
      description: A <xref href="System.Globalization.Calendar"></xref> that represents the default calendar used by the culture.
  overload: System.Globalization.CultureInfo.Calendar*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CultureInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Globalization.CultureInfo.ClearCachedData
  commentId: M:System.Globalization.CultureInfo.ClearCachedData
  id: ClearCachedData
  parent: System.Globalization.CultureInfo
  langs:
  - csharp
  name: ClearCachedData()
  nameWithType: CultureInfo.ClearCachedData()
  fullName: CultureInfo.ClearCachedData()
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Globalization
  summary: Refreshes cached culture-related information.
  remarks: "Information, such as the default culture and format patterns, is cached the first time it is requested. That information can change during the life of the <xref:System.AppDomain>, for example, when the user modifies the regional and language options portion of Control Panel. However, the <xref:System.Globalization.CultureInfo> class does not automatically detect changes in the system settings.  \n  \n The <xref:System.Globalization.CultureInfo.ClearCachedData%2A> method clears the cache of <xref:System.Globalization.CultureInfo> objects created by <xref:System.Globalization.CultureInfo.GetCultureInfo%2A> and refreshes the information in the <xref:System.Globalization.CultureInfo.CurrentCulture%2A>, <xref:System.Globalization.CultureInfo.CurrentUICulture%2A>, and <xref:System.Globalization.RegionInfo.CurrentRegion%2A> properties, based on the current system settings.  \n  \n The <xref:System.Globalization.CultureInfo.ClearCachedData%2A> method does not refresh the information in the <xref:System.Threading.Thread.CurrentCulture%2A?displayProperty=fullName> property for existing threads. However, future threads will have any new <xref:System.Globalization.CultureInfo> property values."
  syntax:
    content: public void ClearCachedData ();
    parameters: []
  overload: System.Globalization.CultureInfo.ClearCachedData*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CultureInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Globalization.CultureInfo.Clone
  commentId: M:System.Globalization.CultureInfo.Clone
  id: Clone
  parent: System.Globalization.CultureInfo
  langs:
  - csharp
  name: Clone()
  nameWithType: CultureInfo.Clone()
  fullName: CultureInfo.Clone()
  type: Method
  assemblies:
  - System.Globalization
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Globalization
  summary: Creates a copy of the current <xref href="System.Globalization.CultureInfo"></xref>.
  remarks: "The clone is writable even if the original <xref:System.Globalization.CultureInfo> is read-only. Therefore, the properties of the clone can be modified.  \n  \n A shallow copy of an object is a copy of the object only. If the object contains references to other objects, the shallow copy does not create copies of the referred objects. It refers to the original objects instead. In contrast, a deep copy of an object creates a copy of the object and a copy of everything directly or indirectly referenced by that object.  \n  \n The <xref:System.Globalization.CultureInfo.Clone%2A> method creates an enhanced shallow copy. The objects returned by the <xref:System.Globalization.CultureInfo.NumberFormat%2A>, <xref:System.Globalization.CultureInfo.DateTimeFormat%2A>, <xref:System.Globalization.CultureInfo.TextInfo%2A>, and <xref:System.Globalization.CultureInfo.Calendar%2A> properties are also copied. Consequently, the cloned <xref:System.Globalization.CultureInfo> object can modify its copied properties without affecting the original <xref:System.Globalization.CultureInfo> object."
  example:
  - "The following code example shows that CultureInfo.Clone also clones the <xref:System.Globalization.DateTimeFormatInfo> and <xref:System.Globalization.NumberFormatInfo> instances associated with the <xref:System.Globalization.CultureInfo>.  \n  \n [!code-cpp[System.Globalization.CultureInfo.Clone#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Clone/CPP/yslin_cultureinfo_clone.cpp#1)]\n [!code-csharp[System.Globalization.CultureInfo.Clone#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Clone/CS/yslin_cultureinfo_clone.cs#1)]\n [!code-vb[System.Globalization.CultureInfo.Clone#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Clone/VB/yslin_cultureinfo_clone.vb#1)]"
  syntax:
    content: public virtual object Clone ();
    parameters: []
    return:
      type: System.Object
      description: A copy of the current <xref href="System.Globalization.CultureInfo"></xref>.
  overload: System.Globalization.CultureInfo.Clone*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CultureInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Globalization.CultureInfo.CompareInfo
  commentId: P:System.Globalization.CultureInfo.CompareInfo
  id: CompareInfo
  parent: System.Globalization.CultureInfo
  langs:
  - csharp
  name: CompareInfo
  nameWithType: CultureInfo.CompareInfo
  fullName: CultureInfo.CompareInfo
  type: Property
  assemblies:
  - System.Globalization
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Globalization
  summary: Gets the <xref href="System.Globalization.CompareInfo"></xref> that defines how to compare strings for the culture.
  remarks: "The <xref:System.Globalization.CultureInfo.CompareInfo%2A> property returns a <xref:System.Globalization.CompareInfo> object that provides culture-specific information used in culture-sensitive sorting and string comparison operations.  \n  \n The user might choose to override some of the values associated with the current culture of Windows through the regional and language options portion of Control Panel. For example, the user might choose to display the date in a different format or to use a currency other than the default for the culture.  \n  \n If <xref:System.Globalization.CultureInfo.UseUserOverride%2A> is `true` and the specified culture matches the current culture of Windows, the <xref:System.Globalization.CultureInfo> uses those overrides, including user settings for the properties of the <xref:System.Globalization.DateTimeFormatInfo> instance returned by the <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> property, and the properties of the <xref:System.Globalization.NumberFormatInfo> instance returned by the <xref:System.Globalization.CultureInfo.NumberFormat%2A> property. If the user settings are incompatible with the culture associated with the <xref:System.Globalization.CultureInfo>, for example, if the selected calendar is not one of the <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>, the results of the methods and the values of the properties are undefined."
  example:
  - "The following code example shows how to create a <xref:System.Globalization.CultureInfo> for Spanish (Spain) with the international sort and another <xref:System.Globalization.CultureInfo> with the traditional sort.  \n  \n [!code-cpp[System.Globalization.CultureInfo_esES#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/CPP/spanishspain.cpp#1)]\n [!code-csharp[System.Globalization.CultureInfo_esES#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/CS/spanishspain.cs#1)]\n [!code-vb[System.Globalization.CultureInfo_esES#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/VB/spanishspain.vb#1)]"
  syntax:
    content: public virtual System.Globalization.CompareInfo CompareInfo { get; }
    return:
      type: System.Globalization.CompareInfo
      description: The <xref href="System.Globalization.CompareInfo"></xref> that defines how to compare strings for the culture.
  overload: System.Globalization.CultureInfo.CompareInfo*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CultureInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Globalization.CultureInfo.CreateSpecificCulture(System.String)
  commentId: M:System.Globalization.CultureInfo.CreateSpecificCulture(System.String)
  id: CreateSpecificCulture(System.String)
  parent: System.Globalization.CultureInfo
  langs:
  - csharp
  name: CreateSpecificCulture(String)
  nameWithType: CultureInfo.CreateSpecificCulture(String)
  fullName: CultureInfo.CreateSpecificCulture(String)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Globalization
  summary: Creates a <xref href="System.Globalization.CultureInfo"></xref> that represents the specific culture that is associated with the specified name.
  remarks: "The <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A> method wraps a call to the <xref:System.Globalization.CultureInfo.%23ctor%28System.String%29> constructor.  \n  \n> [!NOTE]\n>  For a list of predefined culture names, see the [National Language Support (NLS) API Reference](http://go.microsoft.com/fwlink/?LinkId=200048) at the Go Global Developer Center. In addition, starting with Windows 10, `name` can be any valid BCP-47 language tag.  \n  \n Cultures are grouped into three sets: the invariant culture, the neutral cultures, and the specific cultures. For more information, see the description of the <xref:System.Globalization.CultureInfo> class.  \n  \n If the culture identifier of the specific culture returned by this method matches the culture identifier of the current Windows culture, this method creates a <xref:System.Globalization.CultureInfo> object that uses the Windows culture overrides. The overrides include user settings for the properties of the <xref:System.Globalization.DateTimeFormatInfo> object returned by the <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> property and the <xref:System.Globalization.NumberFormatInfo> object returned by the <xref:System.Globalization.CultureInfo.NumberFormat%2A> property. To instantiate a <xref:System.Globalization.CultureInfo> object that with default culture settings rather than user overrides, call the <xref:System.Globalization.CultureInfo.%23ctor%28System.String%2CSystem.Boolean%29> constructor with a value of `false` for the `useUserOverride` argument.  \n  \n Although the <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A> method name includes the term \"Specific\", remember that culture data can change between versions, or due to custom cultures, or because of user overrides. Use the invariant culture or binary or fixed forms for saving data."
  example:
  - "The following example retrieves an array of <xref:System.Globalization.CultureInfo> objects that represent neutral cultures from the <xref:System.Globalization.CultureInfo.GetCultures%2A> method and sorts the array. When it iterates the elements in the array, it passes the name of each neutral culture to the <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A> method and displays the name of the specific culture returned by the method.  \n  \n> [!NOTE]\n>  The example uses the zh-CHS and zh-CHT culture names. However, applications that target Windows Vista and later should use zh-Hans instead of zh-CHS and zh-Hant instead of zh-CHT. zh-Hans and zh-Hant represent the current standard and should be used unless you have a reason for using the older names.  \n>   \n>  Note also that the results of the example may differ on an installation of Taiwanese Windows, where the input of a Chinese (Traditional) neutral culture (zh, zh-CHT, or zh-Hant) will return zh-TW.  \n  \n [!code-csharp[System.Globalization.CultureInfo.CreateSpecificCulture2#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.CreateSpecificCulture2/CS/createspecificculture2.cs#2)]\n [!code-vb[System.Globalization.CultureInfo.CreateSpecificCulture2#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.CreateSpecificCulture2/VB/createspecificculture2.vb#2)]"
  syntax:
    content: public static System.Globalization.CultureInfo CreateSpecificCulture (string name);
    parameters:
    - id: name
      type: System.String
      description: A predefined <xref href="System.Globalization.CultureInfo"></xref> name or the name of an existing <xref href="System.Globalization.CultureInfo"></xref> object. <code>name</code> is not case-sensitive.
    return:
      type: System.Globalization.CultureInfo
      description: "A <xref href=\"System.Globalization.CultureInfo\"></xref> object that represents:  \n  \n The invariant culture, if <code>name</code> is an empty string (\"\").  \n  \n -or-  \n  \n The specific culture associated with <code>name</code>, if <code>name</code> is a neutral culture.  \n  \n -or-  \n  \n The culture specified by <code>name</code>, if <code>name</code> is already a specific culture."
  overload: System.Globalization.CultureInfo.CreateSpecificCulture*
  exceptions:
  - type: System.Globalization.CultureNotFoundException
    commentId: T:System.Globalization.CultureNotFoundException
    description: "<code>name</code> is not a valid culture name.  \n  \n -or-  \n  \n The culture specified by <code>name</code> does not have a specific culture associated with it."
  - type: System.NullReferenceException
    commentId: T:System.NullReferenceException
    description: <code>name</code> is null.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CultureInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Globalization.CultureInfo.CultureTypes
  commentId: P:System.Globalization.CultureInfo.CultureTypes
  id: CultureTypes
  parent: System.Globalization.CultureInfo
  langs:
  - csharp
  name: CultureTypes
  nameWithType: CultureInfo.CultureTypes
  fullName: CultureInfo.CultureTypes
  type: Property
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Globalization
  summary: Gets the culture types that pertain to the current <xref href="System.Globalization.CultureInfo"></xref> object.
  remarks: ''
  example:
  - "The following code example demonstrates the <xref:System.Globalization.CultureTypes> enumeration and the <xref:System.Globalization.CultureInfo.CultureTypes%2A> property.  \n  \n [!code-cpp[system.globalization.cultureTypes#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.globalization.cultureTypes/cpp/ct.cpp#1)]\n [!code-csharp[system.globalization.cultureTypes#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureTypes/cs/ct.cs#1)]\n [!code-vb[system.globalization.cultureTypes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureTypes/vb/ct.vb#1)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(false)]

      public System.Globalization.CultureTypes CultureTypes { get; }
    return:
      type: System.Globalization.CultureTypes
      description: A bitwise combination of one or more <xref href="System.Globalization.CultureTypes"></xref> values. There is no default value.
  overload: System.Globalization.CultureInfo.CultureTypes*
  exceptions: []
  attributes:
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CultureInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Globalization.CultureInfo.CurrentCulture
  commentId: P:System.Globalization.CultureInfo.CurrentCulture
  id: CurrentCulture
  parent: System.Globalization.CultureInfo
  langs:
  - csharp
  name: CurrentCulture
  nameWithType: CultureInfo.CurrentCulture
  fullName: CultureInfo.CurrentCulture
  type: Property
  assemblies:
  - System.Globalization
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Globalization
  summary: Gets or sets the <xref href="System.Globalization.CultureInfo"></xref> object that represents the culture used by the current thread.
  remarks: "The <xref:System.Globalization.CultureInfo> object that is returned by this property and its associated objects determine the default format for dates, times, numbers, currency values, the sorting order of text, casing conventions, and string comparisons.  \n  \n The current culture is a property of the executing thread, which is returned by the static <xref:System.Threading.Thread.CurrentThread%2A?displayProperty=fullName> property. The value of the <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=fullName> property corresponds to the value of the <xref:System.Threading.Thread.CurrentCulture%2A?displayProperty=fullName> property. Retrieving the value of the <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=fullName> property is equivalent to retrieving the <xref:System.Globalization.CultureInfo> object returned by the `Thread.CurrentThread.CurrentCulture` property. Starting with the [!INCLUDE[net_v46](~/includes/net-v46-md.md)], setting the value of the <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=fullName> property also changes the current thread culture.  \n  \n> [!NOTE]\n>  In the .NET Framework 4.5.2 and earlier versions, the <xref:System.Globalization.CultureInfo.CurrentCulture%2A> property is read-only;  that is, you can retrieve the property value, but you cannot set it. To change the current culture, you assign the <xref:System.Globalization.CultureInfo> object that represents the new culture to the `Thread.CurrentThread.CurrentCulture` property. Starting with the [!INCLUDE[net_v46](~/includes/net-v46-md.md)], the <xref:System.Globalization.CultureInfo.CurrentCulture%2A> property is read-write; you can both set and retrieve the property's value. If you do set the property value to a <xref:System.Globalization.CultureInfo> object that represents a new culture, the value of the `Thread.CurrentThread.CurrentCulture` property also changes.  \n  \n In this section:  \n  \n [How a Thread's Culture Is Determined](#ThreadCulture)   \n [Getting the Current Culture](#Getting)   \n [Explicitly Setting the CurrentCulture Property](#ExplicitSetting)   \n [The Current Culture and User Overrides](#Overrides)   \n [Culture and Windows Apps](#WindowsAndCurr)  \n  \n<a name=\"ThreadCulture\"></a>   \n## How a Thread's Culture Is Determined  \n When a thread is started, its culture is initially determined as follows:  \n  \n-   By retrieving the culture that is specified by the <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> property in the application domain in which the thread is executing, if the property value is not `null`.  \n  \n-   If the thread is a thread pool thread that is executing a task-based asynchronous operation and the app targets the [!INCLUDE[net_v46](~/includes/net-v46-md.md)] or a later version of the .NET Framework, its culture is determined by the culture of the calling thread.  The following example changes the current culture to Portuguese (Brazil) and launches six tasks, each of which displays its thread ID, its task ID, and its current culture. Each of the tasks (and the threads) has inherited the culture of the calling thread.  \n  \n     [!code-csharp[System.Globalization.CultureInfo.CurrentCulture#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/cs/Async1.cs#14)]\n     [!code-vb[System.Globalization.CultureInfo.CurrentCulture#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/vb/Async1.vb#14)]  \n  \n     For more information, see the \"Culture and task-based asynchronous operations\" section in the <xref:System.Globalization.CultureInfo> topic.  \n  \n-   By calling the Windows `GetUserDefaultLocaleName` function.  \n  \n Note that if you set a specific culture that is different from the system-installed culture or the user's preferred culture, and your application starts multiple threads, the current culture of those threads will be the culture that is returned by the `GetUserDefaultLocaleName` function, unless you assign a culture to the <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> property in the application domain in which the thread is executing.  \n  \n For more information about how the culture of a thread is determined, see the \"Culture and threads\" section in the <xref:System.Globalization.CultureInfo> reference page.  \n  \n<a name=\"Getting\"></a>   \n## Getting the Current Culture  \n The <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=fullName> property is a per-thread setting; that is, each thread can have its own culture. You get the culture of the current thread by retrieving the value of the   <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=fullName> property, as the following example illustrates.  \n  \n [!code-csharp[System.Globalization.CultureInfo.CurrentCulture#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/cs/Get1.cs#5)]\n [!code-vb[System.Globalization.CultureInfo.CurrentCulture#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/vb/Get1.vb#5)]  \n  \n You can also retrieve the value of the current thread's culture from the <xref:System.Threading.Thread.CurrentThread%2A?displayProperty=fullName> property.  \n  \n<a name=\"ExplicitSetting\"></a>   \n## Explicitly Setting the CurrentCulture Property  \n Staring with the [!INCLUDE[net_v46](~/includes/net-v46-md.md)], to change the culture that is used by an existing thread, you set the <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=fullName> property to the new culture. If you explicitly change a thread's culture in this way, that change persists if the thread crosses application domain boundaries. The following example changes the current thread culture to Dutch (Netherlands). It also shows that, when the current thread crosses application domain boundaries, its current culture remains changed.  \n  \n [!code-csharp[System.Globalization.CultureInfo.CurrentCulture#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/cs/changeculture11.cs#11)]\n [!code-vb[System.Globalization.CultureInfo.CurrentCulture#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/vb/changeculture11.vb#11)]  \n  \n> [!NOTE]\n>  Changing the culture by using the <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=fullName> property requires a <xref:System.Security.Permissions.SecurityPermission> permission with the <xref:System.Security.Permissions.SecurityPermissionFlag.ControlThread> value set. Manipulating threads is dangerous because of the security state associated with threads. Therefore, this permission should be given only to trustworthy code, and then only as necessary. You cannot change thread culture in semi-trusted code.  \n  \n Starting with the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], you can explicitly change the current thread culture to either a specific culture (such as French (Canada)) or a neutral culture (such as French). When a <xref:System.Globalization.CultureInfo> object represents a neutral culture, the values of <xref:System.Globalization.CultureInfo> properties such as <xref:System.Globalization.CultureInfo.Calendar%2A>, <xref:System.Globalization.CultureInfo.CompareInfo%2A>, <xref:System.Globalization.CultureInfo.DateTimeFormat%2A>, <xref:System.Globalization.CultureInfo.NumberFormat%2A>, and <xref:System.Globalization.CultureInfo.TextInfo%2A> reflect the specific culture that is associated with the neutral culture. For example, the dominant culture for the English neutral culture is English (United States); the dominant culture for the German culture is German (Germany). The following example illustrates the difference in formatting when the current culture is set to a specific culture, French (Canada), and a neutral culture, French.  \n  \n [!code-csharp[System.Globalization.CultureInfo.CurrentCulture#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/cs/specific12.cs#12)]\n [!code-vb[System.Globalization.CultureInfo.CurrentCulture#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/vb/specific12.vb#12)]  \n  \n You can also use the <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=fullName> property along with the <xref:System.Web.HttpRequest.UserLanguages%2A?displayProperty=fullName> property to set the <xref:System.Globalization.CultureInfo.CurrentCulture%2A> property of an ASP.NET application to the user's preferred culture, as the following example illustrates.  \n  \n [!code-csharp[System.Globalization.CultureInfo.CurrentCulture#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/cs/aspculture13.cs#13)]\n [!code-vb[System.Globalization.CultureInfo.CurrentCulture#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/vb/aspculture13.vb#13)]  \n  \n<a name=\"Overrides\"></a>   \n## The Current Culture and User Overrides  \n Windows allows users to override the standard property values of the <xref:System.Globalization.CultureInfo> object and its associated objects by using **Regional and Language Options** in Control Panel. The <xref:System.Globalization.CultureInfo> object returned by the <xref:System.Globalization.CultureInfo.CurrentCulture%2A> property reflects these user overrides in the following cases:  \n  \n-   If the current thread culture is set implicitly by the Windows `GetUserDefaultLocaleName` function.  \n  \n-   If the current thread culture defined by the <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> property corresponds to the current Windows system culture.  \n  \n-   If the current thread culture is set explicitly to a culture returned by the <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A> method, and that culture corresponds to the current Windows system culture.  \n  \n-   If the current thread culture is set explicitly to a culture instantiated by the <xref:System.Globalization.CultureInfo.%23ctor%28System.String%29> constructor, and that culture corresponds to the current Windows system culture.  \n  \n In some cases, particularly for server applications, setting the current culture to a <xref:System.Globalization.CultureInfo> object that reflects user overrides may be undesirable. Instead, you can set the current thread culture to a <xref:System.Globalization.CultureInfo> object that does not reflect user overrides in the following ways:  \n  \n-   By calling the <xref:System.Globalization.CultureInfo.%23ctor%28System.String%2CSystem.Boolean%29> constructor with a value of `false` for the `useUserOverride` argument.  \n  \n-   By calling the <xref:System.Globalization.CultureInfo.GetCultureInfo%2A> method, which returns a cached, read-only <xref:System.Globalization.CultureInfo> object.  \n  \n<a name=\"WindowsAndCurr\"></a>   \n## The Current Culture and Windows apps  \n In Windows apps, the <xref:System.Globalization.CultureInfo.CurrentCulture%2A> property is read-only. You can set the current culture by using the Windows [ResourceContext.Languages](https://msdn.microsoft.com/library/windows/apps/windows.applicationmodel.resources.core.resourcecontext.languages.aspx) property. The following example uses it to change the application's current culture either to English (United States) or, if the current culture is already English (United States), to French (France). The value of the <xref:System.Globalization.CultureInfo.CurrentCulture%2A> and <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> properties are then displayed to a <xref:System.Windows.Controls.TextBlock> control named `block`. As the output from the example shows, the current culture changes when the [ResourceContext.Languages](https://msdn.microsoft.com/library/windows/apps/windows.applicationmodel.resources.core.resourcecontext.languages.aspx) property changes.  \n  \n```csharp  \n  \nResourceContext context = ResourceManager.Current.DefaultContext;  \nvar list = new List<String>();  \nif (CultureInfo.CurrentCulture.Name == \"en-US\")  \n   list.Add(\"fr-FR\");  \nelse  \n   list.Add(\"en-US\");  \n  \ncontext.Languages = list;  \nblock.Text += String.Format(\"\\nThe current culture is {0}\\n\",  \n                            CultureInfo.CurrentCulture);  \nblock.Text += String.Format(\"The current culture UI is {0}\\n\",  \n                            CultureInfo.CurrentUICulture);  \n// The example displays output like the following if run on a system  \n// whose current culture is English (United States):  \n// The current culture is fr-FR  \n// The current UI culture is fr-FR  \n  \n```  \n  \n```  \n  \nDim context As ResourceContext = ResourceManager.Current.DefaultContext  \nDim list As New List(Of String)()  \nIf CultureInfo.CurrentCulture.Name = \"en-US\" Then  \n   list.Add(\"fr-FR\")  \nElse  \n   list.Add(\"en-US\")  \nEnd If  \ncontext.Languages = list  \nblock.Text += String.Format(\"{1}The current culture is {0}{1}\",  \n                            CultureInfo.CurrentCulture, vbCrLf)  \nblock.Text += String.Format(\"The current culture UI is {0}\\n\",  \n                            CultureInfo.CurrentUICulture)  \n' The example displays output Like the following if run on a system  \n' whose current culture Is English (United States):  \n'    The current culture Is fr-FR  \n'    The current UI culture Is fr-FR  \n  \n```"
  example:
  - "The following code example demonstrates how to change the <xref:System.Globalization.CultureInfo.CurrentCulture%2A> and <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> of the current thread.  \n  \n [!code-cpp[System.Globalization.CultureInfo.CurrentCulture2#11](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.CurrentCulture2/CPP/currentculture.cpp#11)]\n [!code-csharp[System.Globalization.CultureInfo.CurrentCulture2#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.CurrentCulture2/CS/currentculture.cs#11)]\n [!code-vb[System.Globalization.CultureInfo.CurrentCulture2#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.CurrentCulture2/VB/currentculture.vb#11)]"
  syntax:
    content: public static System.Globalization.CultureInfo CurrentCulture { get; set; }
    return:
      type: System.Globalization.CultureInfo
      description: An object that represents the culture used by the current thread.
  overload: System.Globalization.CultureInfo.CurrentCulture*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The property is set to `null`.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CultureInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Globalization.CultureInfo.CurrentUICulture
  commentId: P:System.Globalization.CultureInfo.CurrentUICulture
  id: CurrentUICulture
  parent: System.Globalization.CultureInfo
  langs:
  - csharp
  name: CurrentUICulture
  nameWithType: CultureInfo.CurrentUICulture
  fullName: CultureInfo.CurrentUICulture
  type: Property
  assemblies:
  - System.Globalization
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Globalization
  summary: Gets or sets the <xref href="System.Globalization.CultureInfo"></xref> object that represents the current user interface culture used by the Resource Manager to look up culture-specific resources at run time.
  remarks: "The current UI culture is a per-thread property. That is, each thread has its own current UI culture. This property is equivalent to retrieving or, starting with the [!INCLUDE[net_v46](~/includes/net-v46-md.md)], setting the <xref:System.Globalization.CultureInfo> object assigned to the  `System.Threading.Thread.CurrentThread.CurrentUICulture` property. When a thread is started, its UI culture is initially determined as follows:  \n  \n-   By retrieving the culture that is specified by the <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> property in the application domain in which the thread is executing, if the property value is not `null`.  \n  \n-   If the thread is a thread pool thread that is executing a task-based asynchronous operation and the app targets the [!INCLUDE[net_v46](~/includes/net-v46-md.md)] or a later version of the .NET Framework, its UI culture is determined by the UI culture of the calling thread.  The following example changes the current UI culture to Portuguese (Brazil) and launches six tasks, each of which displays its thread ID, its task ID, and its current UI culture. Each of the tasks (and the threads) has inherited the UI culture of the calling thread.  \n  \n     [!code-csharp[System.Globalization.CultureInfo.CurrentUICulture#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentuiculture/cs/Async1.cs#14)]\n     [!code-vb[System.Globalization.CultureInfo.CurrentUICulture#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentuiculture/vb/Async1.vb#14)]  \n  \n     For more information, see the \"Culture and task-based asynchronous operations\" section in the <xref:System.Globalization.CultureInfo> topic.  \n  \n-   By calling the Windows `GetUserDefaultUILanguage` function.  \n  \n> [!NOTE]\n>  In the [!INCLUDE[Compact](~/includes/compact-md.md)], the <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> property is read-only. The current UI culture is determined by the system's regional settings and cannot be changed programmatically.  \n  \n Starting with the [!INCLUDE[net_v46](~/includes/net-v46-md.md)], to change the user interface culture used by a thread, set the <xref:System.Threading.Thread.CurrentUICulture%2A?displayProperty=fullName> property to the new culture. If you explicitly change a thread's UI culture in this way, that change persists if the thread crosses application domain boundaries.  \n  \n> [!NOTE]\n>  In the .NET Framework 4.5.2 and earlier versions, the <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> property is read-only;  that is, you can retrieve the property value, but you cannot set it. To change the current UI culture, you assign the <xref:System.Globalization.CultureInfo> object that represents the new UI culture to the `Thread.CurrentThread.CurrentUICulture` property. Starting with the [!INCLUDE[net_v46](~/includes/net-v46-md.md)], the <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=fullName> property is read-write; you can both set and retrieve the property's value. If you do set the property value to a <xref:System.Globalization.CultureInfo> object that represents a new culture, the value of the `Thread.CurrentThread.CurrentCulture` property also changes.  \n  \n In this section:  \n  \n [Getting the Current UI Culture](#Getting)   \n [Explicitly Setting the Current UI Culture](#Explicit)   \n [Implicitly Setting the Current UI Culture](#Implicit)   \n [Security Considerations](#Security)   \n [The Current UI Culture and Windows apps](#WindowsAndCurrUI)  \n  \n<a name=\"Getting\"></a>   \n## Getting the Current UI Culture  \n The <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=fullName> property is a per-thread setting; that is, each thread can have its own UI culture. You get the UI culture of the current thread by retrieving the value of the   <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=fullName> property, as the following example illustrates.  \n  \n [!code-csharp[System.Globalization.CultureInfo.CurrentUICulture#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentuiculture/cs/Get1.cs#5)]\n [!code-vb[System.Globalization.CultureInfo.CurrentUICulture#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentuiculture/vb/Get1.vb#5)]  \n  \n You can also retrieve the value of the current thread's UI culture from the <xref:System.Threading.Thread.CurrentUICulture%2A?displayProperty=fullName> property.  \n  \n<a name=\"Explicit\"></a>   \n## Explicitly Setting the Current UI Culture  \n Starting with the [!INCLUDE[net_v46](~/includes/net-v46-md.md)], you can change the current UI culture by assigning a <xref:System.Globalization.CultureInfo> object that represents the new culture to the i<xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=fullName> property. The current UI culture can be set to either a specific culture (such as en-US or de-DE) or to a neutral culture (such as en or de). The following example sets the current UI culture to fr-FR or French (France).  \n  \n [!code-csharp[System.Globalization.CultureInfo.CurrentUICulture#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentuiculture/cs/currentuiculture1.cs#1)]\n [!code-vb[System.Globalization.CultureInfo.CurrentUICulture#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentuiculture/vb/currentuiculture1.vb#1)]  \n  \n In a multithreaded application, you can explicitly set the UI culture of any thread by assigning a <xref:System.Globalization.CultureInfo> object that represents that culture to the thread's <xref:System.Threading.Thread.CurrentUICulture%2A?displayProperty=fullName> property. If the thread whose culture you want to set is the current thread, you can assign the new culture to the <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=fullName> property. When the UI culture of a thread is set explicitly, that thread retains the same culture even if it crosses application domain boundaries and executes code in another application domain.  \n  \n<a name=\"Implicit\"></a>   \n## Implicitly Setting the Current UI Culture  \n When a thread, including the main application thread, is first created, by default its current UI culture is set as follows:  \n  \n-   By using the culture defined by the <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> property for the current application domain if the  property value is not `null`.  \n  \n-   By using the system's default culture. On systems that use the Windows operating system, the common language runtime calls the Windows `GetUserDefaultUILanguage` function to set the current  UI culture. `GetUserDefaultUILanguage` returns the default UI culture set by the user. If the user has not set a default UI language, it returns the culture originally installed on the system.  \n  \n If the thread crosses application boundaries and executes code in another application domain, its culture is determined in the same way as that of a newly created thread.  \n  \n Note that if you set a specific UI culture that is different from the system-installed UI culture or the user's preferred UI culture, and your application starts multiple threads, the current UI culture of those threads will be the culture returned by the `GetUserDefaultUILanguage` function, unless you assign a culture to the <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> property in the application domain in which the thread is executing.  \n  \n<a name=\"Security\"></a>   \n## Security Considerations  \n Changing the culture of the current thread requires a <xref:System.Security.Permissions.SecurityPermission> permission with the <xref:System.Security.Permissions.SecurityPermissionFlag.ControlThread> value set.  \n  \n> [!CAUTION]\n>  Manipulating threads is dangerous because of the security state associated with threads. Therefore, this permission should be given only to trustworthy code, and then only as necessary. You cannot change thread culture in semi-trusted code.  \n  \n<a name=\"WindowsAndCurrUI\"></a>   \n## The Current UI Culture and Windows apps  \n In Windows apps, the <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> property is read-only. You can set the current UI culture by using the Windows [ResourceContext.Languages](https://msdn.microsoft.com/library/windows/apps/windows.applicationmodel.resources.core.resourcecontext.languages.aspx) property. The following example uses it to change the application's current UI culture either to English (United States) or, if the current culture is already English (United States), to French (France). The value of the <xref:System.Globalization.CultureInfo.CurrentCulture%2A> and <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> properties are then displayed to a <xref:System.Windows.Controls.TextBlock> control named `block`. As the output from the example shows, the current UI culture changes when the [ResourceContext.Languages](https://msdn.microsoft.com/library/windows/apps/windows.applicationmodel.resources.core.resourcecontext.languages.aspx) property changes.  \n  \n```csharp  \n  \nResourceContext context = ResourceManager.Current.DefaultContext;  \nvar list = new List<String>();  \nif (CultureInfo.CurrentCulture.Name == \"en-US\")  \n   list.Add(\"fr-FR\");  \nelse  \n   list.Add(\"en-US\");  \n  \ncontext.Languages = list;  \nblock.Text += String.Format(\"\\nThe current culture is {0}\\n\",  \n                            CultureInfo.CurrentCulture);  \nblock.Text += String.Format(\"The current culture UI is {0}\\n\",  \n                            CultureInfo.CurrentUICulture);  \n// The example displays output like the following if run on a system  \n// whose current culture is English (United States):  \n// The current culture is fr-FR  \n// The current UI culture is fr-FR  \n  \n```  \n  \n```  \n  \nDim context As ResourceContext = ResourceManager.Current.DefaultContext  \nDim list As New List(Of String)()  \nIf CultureInfo.CurrentCulture.Name = \"en-US\" Then  \n   list.Add(\"fr-FR\")  \nElse  \n   list.Add(\"en-US\")  \nEnd If  \ncontext.Languages = list  \nblock.Text += String.Format(\"{1}The current culture is {0}{1}\",  \n                            CultureInfo.CurrentCulture, vbCrLf)  \nblock.Text += String.Format(\"The current culture UI is {0}\\n\",  \n                            CultureInfo.CurrentUICulture)  \n' The example displays output Like the following if run on a system  \n' whose current culture Is English (United States):  \n'    The current culture Is fr-FR  \n'    The current UI culture Is fr-FR  \n  \n```"
  example:
  - "The following code example demonstrates how to change the <xref:System.Globalization.CultureInfo.CurrentCulture%2A> and <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> of the current thread.  \n  \n [!code-cpp[System.Globalization.CultureInfo.CurrentCulture2#11](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.CurrentCulture2/CPP/currentculture.cpp#11)]\n [!code-csharp[System.Globalization.CultureInfo.CurrentCulture2#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.CurrentCulture2/CS/currentculture.cs#11)]\n [!code-vb[System.Globalization.CultureInfo.CurrentCulture2#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.CurrentCulture2/VB/currentculture.vb#11)]"
  syntax:
    content: public static System.Globalization.CultureInfo CurrentUICulture { get; set; }
    return:
      type: System.Globalization.CultureInfo
      description: The culture used by the Resource Manager to look up culture-specific resources at run time.
  overload: System.Globalization.CultureInfo.CurrentUICulture*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The property is set to `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The property is set to a culture name that cannot be used to locate a resource file. Resource filenames can include only letters, numbers, hyphens, or underscores.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CultureInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Globalization.CultureInfo.DateTimeFormat
  commentId: P:System.Globalization.CultureInfo.DateTimeFormat
  id: DateTimeFormat
  parent: System.Globalization.CultureInfo
  langs:
  - csharp
  name: DateTimeFormat
  nameWithType: CultureInfo.DateTimeFormat
  fullName: CultureInfo.DateTimeFormat
  type: Property
  assemblies:
  - System.Globalization
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Globalization
  summary: Gets or sets a <xref href="System.Globalization.DateTimeFormatInfo"></xref> that defines the culturally appropriate format of displaying dates and times.
  remarks: "## Overrides  \n The user might choose to override some of the values associated with the current culture of Windows through the regional and language options portion of Control Panel. For example, the user might choose to display the date in a different format or to use a currency other than the default for the culture.  \n  \n If <xref:System.Globalization.CultureInfo.UseUserOverride%2A> is `true` and the specified culture matches the current culture of Windows, the <xref:System.Globalization.CultureInfo> uses those overrides, including user settings for the properties of the <xref:System.Globalization.DateTimeFormatInfo> instance returned by the <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> property, and the properties of the <xref:System.Globalization.NumberFormatInfo> instance returned by the <xref:System.Globalization.CultureInfo.NumberFormat%2A> property. If the user settings are incompatible with the culture associated with the <xref:System.Globalization.CultureInfo>, for example, if the selected calendar is not one of the <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>, the results of the methods and the values of the properties are undefined.  \n  \n The value of the <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> property and the <xref:System.Globalization.CultureInfo.NumberFormat%2A> property is not calculated until your application accesses the property. If the user can change the current culture to a new culture while the application is running and then the application accesses the <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> or <xref:System.Globalization.CultureInfo.NumberFormat%2A> property, the application retrieves the defaults for the new culture instead of the overrides for the original culture. To preserve the overrides for the original current culture, the application should access the <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> and <xref:System.Globalization.CultureInfo.NumberFormat%2A> properties before changing the current culture."
  example:
  - "The following code example shows that CultureInfo.Clone also clones the <xref:System.Globalization.DateTimeFormatInfo> and <xref:System.Globalization.NumberFormatInfo> instances associated with the <xref:System.Globalization.CultureInfo>.  \n  \n [!code-cpp[System.Globalization.CultureInfo.Clone#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Clone/CPP/yslin_cultureinfo_clone.cpp#1)]\n [!code-csharp[System.Globalization.CultureInfo.Clone#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Clone/CS/yslin_cultureinfo_clone.cs#1)]\n [!code-vb[System.Globalization.CultureInfo.Clone#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Clone/VB/yslin_cultureinfo_clone.vb#1)]"
  syntax:
    content: public virtual System.Globalization.DateTimeFormatInfo DateTimeFormat { get; set; }
    return:
      type: System.Globalization.DateTimeFormatInfo
      description: A <xref href="System.Globalization.DateTimeFormatInfo"></xref> that defines the culturally appropriate format of displaying dates and times.
  overload: System.Globalization.CultureInfo.DateTimeFormat*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The property is set to null.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The <xref href="System.Globalization.CultureInfo.DateTimeFormat"></xref> property or any of the <xref href="System.Globalization.DateTimeFormatInfo"></xref> properties is set, and the <xref href="System.Globalization.CultureInfo"></xref> is read-only.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CultureInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Globalization.CultureInfo.DefaultThreadCurrentCulture
  commentId: P:System.Globalization.CultureInfo.DefaultThreadCurrentCulture
  id: DefaultThreadCurrentCulture
  parent: System.Globalization.CultureInfo
  langs:
  - csharp
  name: DefaultThreadCurrentCulture
  nameWithType: CultureInfo.DefaultThreadCurrentCulture
  fullName: CultureInfo.DefaultThreadCurrentCulture
  type: Property
  assemblies:
  - System.Globalization
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Globalization
  summary: Gets or sets the default culture for threads in the current application domain.
  remarks: "In the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] and previous versions, by default, the culture of all threads is set to the Windows system culture. For applications whose current culture differs from the default system culture, this behavior is often undesirable. In the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], the <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> property enables an application to define the default culture of all threads in an application domain.  \n  \n> [!IMPORTANT]\n>  If you have not explicitly set the culture of any existing threads executing in an application domain, setting the <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> property also changes the culture of these threads. However, if these threads execute in another application domain, their culture is defined by the <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> property in that application domain or, if no default value is defined, by the default system culture. Because of this, we recommend that you always explicitly set the culture of your main application thread, and not rely on the <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> property to define the culture of the main application thread.  \n  \n Unless it is set explicitly, the value of the <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> property is `null`, and the culture of threads in an application domain that have not been assigned an explicit culture is defined by the default Windows system culture.  \n  \n For more information about cultures, threads, and application domains, see the \"Culture and threads\" and \"Culture and application domains\" sections in the <xref:System.Globalization.CultureInfo> reference page."
  example:
  - "The following example illustrates the default behavior of the .NET Framework in defining the current culture of a new thread. At startup, the example sets the current culture and the current UI culture to French (France) on all systems except those on which the default system culture is already French (France). If the default system culture is already French (France), the code sets the current culture and the current UI culture to English (United States). It then calls the `DisplayRandomNumbers` routine, which generates three random numbers and displays them as currency values. Next, it creates a new thread, which also executes the `DisplayRandomNumbers` routine.  \n  \n [!code-csharp[System.Globalization.CultureInfo.DefaultThreadCurrentCulture#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.defaultthreadcurrentculture/cs/defaultculture1.cs#1)]\n [!code-vb[System.Globalization.CultureInfo.DefaultThreadCurrentCulture#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.defaultthreadcurrentculture/vb/defaultculture1.vb#1)]  \n  \n As the output from the example shows, when the example is run on a computer whose system culture is English (United States), the main thread displays its currency values using the formatting conventions of the French (France) culture. However, because the worker thread's culture is derived from the current Windows system culture rather than the application's current culture, the work thread displays its currency values using the formatting conventions of the English (United States) culture.  \n  \n The following example uses the <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> and <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> properties  to define the current culture and current UI culture of a new application thread. At startup, the example sets the current culture and the current UI culture to French (France) on all systems except those on which the default system culture is already French (France). If the default system culture is already French (France), it sets the current culture and the current UI culture to English (United States). It then calls the `DisplayRandomNumbers` routine, which generates three random numbers and displays them as currency values. Next, it creates a new thread, which also executes the `DisplayRandomNumbers` routine.  \n  \n [!code-csharp[System.Globalization.CultureInfo.DefaultThreadCurrentCulture#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.defaultthreadcurrentculture/cs/defaultculture2.cs#2)]\n [!code-vb[System.Globalization.CultureInfo.DefaultThreadCurrentCulture#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.defaultthreadcurrentculture/vb/defaultculture2.vb#2)]  \n  \n As the output from the example shows, when the example is run on a computer whose system culture is English (United States), both the main thread and the worker thread display their currency values using the formatting conventions of the French (France) culture."
  syntax:
    content: public static System.Globalization.CultureInfo DefaultThreadCurrentCulture { get; set; }
    return:
      type: System.Globalization.CultureInfo
      description: The default culture for threads in the current application domain, or `null` if the current system culture is the default thread culture in the application domain.
  overload: System.Globalization.CultureInfo.DefaultThreadCurrentCulture*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CultureInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Globalization.CultureInfo.DefaultThreadCurrentUICulture
  commentId: P:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture
  id: DefaultThreadCurrentUICulture
  parent: System.Globalization.CultureInfo
  langs:
  - csharp
  name: DefaultThreadCurrentUICulture
  nameWithType: CultureInfo.DefaultThreadCurrentUICulture
  fullName: CultureInfo.DefaultThreadCurrentUICulture
  type: Property
  assemblies:
  - System.Globalization
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Globalization
  summary: Gets or sets the default UI culture for threads in the current application domain.
  remarks: "In the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] and previous versions, by default, the UI culture of all threads is set to the Windows system culture. For applications whose current UI culture differs from the default system culture, this behavior is often undesirable. In the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], the <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> property lets you define the default UI culture of all threads in an application domain.  \n  \n> [!IMPORTANT]\n>  If you have not explicitly set the UI culture of any existing threads executing in an application domain, setting the <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> property also changes the culture of these threads. However, if these threads execute in another application domain, their culture is defined by the <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> property in that application domain or, if no default value is defined, by the default system culture. Because of this, we recommend that you always explicitly set the culture of your main application thread and do not rely on the <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> property to define the culture of the main application thread.  \n  \n Unless it is set explicitly, the value of the <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> property is `null`, and the current culture of all threads in an application domain that have not been assigned an explicit culture is defined by the default Windows system culture.  \n  \n For more information about cultures, threads, and application domains, see the \"Culture and threads\" and \"Culture and application domains\" sections in the <xref:System.Globalization.CultureInfo> reference page."
  example:
  - "The following example illustrates the default behavior of the .NET Framework in defining the current culture of a new thread. It uses English and Russian language resources. The following text file named GreetingStrings.txt contains the English language resources:  \n  \n```  \ngreeting =Hello again!  \nnewGreeting=Hello!  \n```  \n  \n It is compiled to a binary .resources file named GreetingStrings.resources by using the  [Resource File Generator](~/docs/framework/tools/resgen-exe-resource-file-generator.md) with the following command.  \n  \n```  \nresgen greetingstrings.txt  \n```  \n  \n The following text file named GreetingStrings.ru-RU.txt contains the Russian language resources:  \n  \n```  \ngreeting=Еще раз привет!  \nnewGreeting=Привет!  \n```  \n  \n It is compiled to a binary .resources file named GreetingStrings.ru-RU.resources by using the  [Resource File Generator](~/docs/framework/tools/resgen-exe-resource-file-generator.md) with the following command.  \n  \n```  \nresgen greetingstrings.ru-RU.txt  \n```  \n  \n The application code, which is shown below, resides in a file named Example1.vb or Example1.cs. It is compiled to an executable by using the following command for the Visual Basic compiler:  \n  \n```  \nvbc Example1.vb /resource:GreetingStrings.resources  \n```  \n  \n For the C# compiler, the command is similar:  \n  \n```  \ncsc /resource:GreetingStrings.resources Example1.cs  \n```  \n  \n This creates an assembly that includes the example's executable code along with the resources for its fallback culture. You can also use the  [Assembly Linker](~/docs/framework/tools/al-exe-assembly-linker.md) to create the resource file for the Russian (Russia) culture with the following command:  \n  \n```  \n>al /embed:greetingstrings.ru-RU.resources /c:ru-RU /template:example1.exe /out:ru-RU\\Example1.resources.dll  \n```  \n  \n At startup, the example sets the current culture and the current UI culture to Russian (Russia) on all systems except those on which the default system culture is already Russian (Russia). If the default system culture is already Russian (Russia), the code sets the current culture and the current UI culture to English (United States). It then calls the `ShowGreeting` routine, which displays a simple string the first time it is called and a slightly different string on subsequent method calls. Next, it creates a new thread, which also executes the `ShowGreeting` routine.  \n  \n [!code-csharp[System.Globalization.CultureInfo.DefaultThreadCurrentUICulture#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.defaultthreadcurrentuiculture/cs/example1.cs#1)]\n [!code-vb[System.Globalization.CultureInfo.DefaultThreadCurrentUICulture#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.defaultthreadcurrentuiculture/vb/example1.vb#1)]  \n  \n As the output from the example shows, when the example is run on a computer whose system culture is English (United States), the main thread displays its initial string in Russian. However, because the worker thread's culture is derived from the current Windows system culture rather than the application's current culture, the worker thread displays its string in English.  \n  \n The following example uses the <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> and <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> properties  to define the current culture and current UI culture of a new application thread.  \n  \n The example uses the same resources files as the previous example. The commands to compile and to embed the localized Russian language resources into a satellite assembly are also identical, except that the name of the executable assembly changes.  \n  \n At startup, the example sets the current culture and the current UI culture to Russian (Russia) on all systems except those on which the default system culture is already Russian (Russia). If the default system culture is already Russian (Russia), it sets the current culture and the current UI culture to English (United States). It then calls the `ShowGreeting` routine, which displays a simple string the first time it is called and a slightly different string on subsequent method calls. Next, it creates a new thread, which also executes the `ShowGreeting` routine.  \n  \n [!code-csharp[System.Globalization.CultureInfo.DefaultThreadCurrentUICulture#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.defaultthreadcurrentuiculture/cs/example2.cs#2)]\n [!code-vb[System.Globalization.CultureInfo.DefaultThreadCurrentUICulture#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.defaultthreadcurrentuiculture/vb/example2.vb#2)]  \n  \n As the output from the example shows, when the example is run on a computer whose system culture is English (United States), both the main thread and the worker thread display their strings in the Russian language."
  syntax:
    content: public static System.Globalization.CultureInfo DefaultThreadCurrentUICulture { get; set; }
    return:
      type: System.Globalization.CultureInfo
      description: The default UI culture for threads in the current application domain, or `null` if the current system UI culture is the default thread UI culture in the application domain.
  overload: System.Globalization.CultureInfo.DefaultThreadCurrentUICulture*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: In a set operation, the <xref href="System.Globalization.CultureInfo.Name"></xref> property value is invalid.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CultureInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Globalization.CultureInfo.DisplayName
  commentId: P:System.Globalization.CultureInfo.DisplayName
  id: DisplayName
  parent: System.Globalization.CultureInfo
  langs:
  - csharp
  name: DisplayName
  nameWithType: CultureInfo.DisplayName
  fullName: CultureInfo.DisplayName
  type: Property
  assemblies:
  - System.Globalization
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Globalization
  summary: Gets the full localized culture name.
  remarks: "This property represents the localized name of the <xref:System.Globalization.CultureInfo> object.  \n  \n Culture names may vary due to scripting or formatting conventions. You should use the returned name for display, and not attempt to parse it.  \n  \n If a custom culture is created by means of the <xref:System.Globalization.CultureAndRegionInfoBuilder> class, the <xref:System.Globalization.CultureInfo.DisplayName%2A> property is initialized to the value of the <xref:System.Globalization.CultureInfo.NativeName%2A> property."
  example:
  - "The following code example displays several properties of the neutral cultures.  \n  \n> [!NOTE]\n>  The example displays the zh-CHS and zh-CHT cultures with the 0x0004 and 0x7C04 culture identifiers, respectively. However, your Windows Vista applications should use the zh-Hans name instead of zh-CHS and the zh-Hant name instead of zh-CHT. The zh-Hans and zh-Hant names represent the current standard, and should be used unless you have a reason for using the older names.  \n  \n [!code-cpp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CPP/getcultures.cpp#1)]\n [!code-csharp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CS/getcultures.cs#1)]\n [!code-vb[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/VB/getcultures.vb#1)]"
  syntax:
    content: public virtual string DisplayName { get; }
    return:
      type: System.String
      description: The full localized culture name in the format *languagefull* [*country/regionfull*], where *languagefull* is the full name of the language and *country/regionfull* is the full name of the country/region.
  overload: System.Globalization.CultureInfo.DisplayName*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CultureInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Globalization.CultureInfo.EnglishName
  commentId: P:System.Globalization.CultureInfo.EnglishName
  id: EnglishName
  parent: System.Globalization.CultureInfo
  langs:
  - csharp
  name: EnglishName
  nameWithType: CultureInfo.EnglishName
  fullName: CultureInfo.EnglishName
  type: Property
  assemblies:
  - System.Globalization
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Globalization
  summary: Gets the culture name in the format *languagefull* [*country/regionfull*] in English.
  remarks: "For example, the <xref:System.Globalization.CultureInfo.EnglishName%2A> for the specific culture name en-US is \"English (United States)\".  \n  \n The value of this property is the same, regardless of the language version of the .NET Framework."
  example:
  - "The following code example displays several properties of the neutral cultures.  \n  \n> [!NOTE]\n>  The example displays the older zh-CHS and zh-CHT culture names with the 0x0004 and 0x7C04 culture identifiers, respectively. However, your Windows Vista applications should use the zh-Hans name instead of zh-CHS and the zh-Hant name instead of zh-CHT. The zh-Hans and zh-Hant names represent the current standard, and should be used unless you have a reason for using the older names.  \n  \n [!code-cpp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CPP/getcultures.cpp#1)]\n [!code-csharp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CS/getcultures.cs#1)]\n [!code-vb[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/VB/getcultures.vb#1)]"
  syntax:
    content: public virtual string EnglishName { get; }
    return:
      type: System.String
      description: The culture name in the format *languagefull* [*country/regionfull*] in English, where *languagefull* is the full name of the language and *country/regionfull* is the full name of the country/region.
  overload: System.Globalization.CultureInfo.EnglishName*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CultureInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Globalization.CultureInfo.Equals(System.Object)
  commentId: M:System.Globalization.CultureInfo.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Globalization.CultureInfo
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: CultureInfo.Equals(Object)
  fullName: CultureInfo.Equals(Object)
  type: Method
  assemblies:
  - System.Globalization
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Globalization
  summary: Determines whether the specified object is the same culture as the current <xref href="System.Globalization.CultureInfo"></xref>.
  remarks: "This method overrides <xref:System.Object.Equals%2A?displayProperty=fullName>.  \n  \n Two <xref:System.Globalization.CultureInfo> objects are considered equal if their <xref:System.Globalization.CultureInfo.Name%2A> and <xref:System.Globalization.CultureInfo.CompareInfo%2A> properties are equal."
  syntax:
    content: public override bool Equals (object value);
    parameters:
    - id: value
      type: System.Object
      description: The object to compare with the current <xref href="System.Globalization.CultureInfo"></xref>.
    return:
      type: System.Boolean
      description: '`true` if <code>value</code> is the same culture as the current <xref href="System.Globalization.CultureInfo"></xref>; otherwise, `false`.'
  overload: System.Globalization.CultureInfo.Equals*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CultureInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Globalization.CultureInfo.GetConsoleFallbackUICulture
  commentId: M:System.Globalization.CultureInfo.GetConsoleFallbackUICulture
  id: GetConsoleFallbackUICulture
  parent: System.Globalization.CultureInfo
  langs:
  - csharp
  name: GetConsoleFallbackUICulture()
  nameWithType: CultureInfo.GetConsoleFallbackUICulture()
  fullName: CultureInfo.GetConsoleFallbackUICulture()
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Globalization
  summary: Gets an alternate user interface culture suitable for console applications when the default graphic user interface culture is unsuitable.
  remarks: "Languages such as Arabic, Hebrew, Urdu, and Syriac are based on bidirectional text. Windows applications, which have a graphical user interface, support bidirectional languages. However, console applications, which employ the text user interface of the operating system console, do not provide bidirectional support. Therefore, if you localize a console application to Arabic or Hebrew, your application displays unreadable text on the console screen.  \n  \n The user interface culture specifies the resources an application needs to support user input and output, and by default is the same as the operating system culture. For example, the <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=fullName> property returns an Arabic culture for an Arabic operating system. Use the <xref:System.Globalization.CultureInfo.GetConsoleFallbackUICulture%2A> method to retrieve a culture suitable for a console application user interface. After your application retrieves the fallback user interface culture, it should assign the culture to the current user interface culture of the current thread. For more information, see the \"Explicitly Setting the Current UI Culture\" section of the <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> property.  \n  \n The following are predefined cultures that have a different fallback user interface culture name from the predefined culture name.  \n  \n|Predefined culture|Culture name|Fallback user interface culture name|  \n|------------------------|------------------|------------------------------------------|  \n|Amharic|am|en-US|  \n|Amharic (Ethiopia)|am-ET|en-US|  \n|(neutral Arabic)|ar|en-US|  \n|Arabic (U.A.E.)|ar-AE|en-US|  \n|Arabic (Bahrain)|ar-BH|en-US|  \n|Arabic (Algeria)|ar-DZ|fr-FR|  \n|Arabic (Egypt)|ar-EG|en-US|  \n|Arabic (Iraq)|ar-IQ|en-US|  \n|Arabic (Jordan)|ar-JO|en-US|  \n|Arabic (Kuwait)|ar-KW|en-US|  \n|Arabic (Lebanon)|ar-LB|en-US|  \n|Arabic (Libya)|ar-LY|en-US|  \n|Arabic (Morocco)|ar-MA|fr-FR|  \n|Arabic (Oman)|ar-OM|en-US|  \n|Arabic (Qatar)|ar-QA|en-US|  \n|Arabic (Saudi Arabia)|ar-SA|en-US|  \n|Arabic (Syria)|ar-SY|en-US|  \n|Arabic (Tunisia)|ar-TN|fr-FR|  \n|Arabic (Yemen)|ar-YE|en-US|  \n|Assamese|as|en-US|  \n|Assamese (India)|as-IN|en-US|  \n|Bengali|bn|en-US|  \n|Bengali (Bangladesh)|bn-BD|en-US|  \n|Bengali (India)|bn-IN|en-US|  \n|Tibetan|bo|en-US|  \n|Tibetan (PRC)|bo-CN|en-US|  \n|Divehi|dv|en-US|  \n|Divehi (India)|dv-MV|en-US|  \n|Persian|fa|en-US|  \n|Persian (Iran)|fa-IR|en-US|  \n|Gujarati|gu|en-US|  \n|Gujarati (India)|gu-IN|en-US|  \n|Hebrew|he|en-US|  \n|Hebrew (Israel)|he-IL|en-US|  \n|Hindi|hi|en-US|  \n|Hindi (India)|hi-IN|en-US|  \n|Yi|ii|en-US|  \n|Yi (PRC)|ii-CN|en-US|  \n|Inukitut Syllabics|iu-Cans|en-US|  \n|Inukitut Syllabics (Canada)|iu-Cans-CA|en-US|  \n|Khmer|km|en-US|  \n|Khmer (Cambodia)|km-KH|en-US|  \n|Kannada|kn|en-US|  \n|Kannada (India)|kn-IN|en-US|  \n|Konkani|kok|en-US|  \n|Konkani (India)|kok-IN|en-US|  \n|Lao|lo|en-US|  \n|Lao (Lao P.D.R.)|lo-LA|en-US|  \n|Malayalam|ml|en-US|  \n|Malayalam (India)|ml-IN|en-US|  \n|Mohawk|moh|en-US|  \n|Mohawk (Canada)|moh-CA|en-US|  \n|Marathi|mr|en-US|  \n|Marathi (India)|mr-IN|en-US|  \n|Nepali|ne|en-US|  \n|Nepali (Nepal)|ne-NP|en-US|  \n|Norwegian|no|nb-NO|  \n|Oriya|or|en-US|  \n|Oriya (India)|or-IN|en-US|  \n|Punjabi|pa|en-US|  \n|Punjabi (India)|pa-IN|en-US|  \n|Dari|prs|en-US|  \n|Dari (Afghanistan)|prs-AF|en-US|  \n|Pashto|ps|en-US|  \n|Pashto (Afghanistan)|ps-AF|en-US|  \n|Sanskrit|sa|en-US|  \n|Sanskrit (India)|sa-IN|en-US|  \n|Sinhala|si|en-US|  \n|Sinhala (Sri Lanka)|si-LK|en-US|  \n|Syriac|syr|en-US|  \n|Syriac (Syria)|syr-SY|en-US|  \n|Tamil|ta|en-US|  \n|Tamil (India)|ta-IN|en-US|  \n|Telugu|te|en-US|  \n|Telugu (India)|te-IN|en-US|  \n|Thai|th|en-US|  \n|Thai (Thailand)|th-Th|en-US|  \n|Uighur|ug|en-US|  \n|Uighur (PRC)|ug-CN|en-US|  \n|Urdu|ur|en-US|  \n|Urdu (Pakistan)|ur-PK|en-US|  \n|Vietnamese|vi|en-US|  \n|Vietnamese (Vietnam)|vi-VN|en-US|  \n  \n Your application can use<xref:System.Globalization.CultureAndRegionInfoBuilder> to create a replacement for a culture, and that culture can have a console fallback culture of your choosing."
  example:
  - "The following code example displays the fallback user interface culture associated with a culture object.  \n  \n [!code-cpp[sys.glob.ci.getCFUIC#1](~/samples/snippets/cpp/VS_Snippets_CLR/sys.glob.ci.getCFUIC/cpp/cfuic.cpp#1)]\n [!code-csharp[sys.glob.ci.getCFUIC#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.ci.getCFUIC/CS/cfuic.cs#1)]\n [!code-vb[sys.glob.ci.getCFUIC#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.ci.getCFUIC/VB/cfuic.vb#1)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(false)]

      public System.Globalization.CultureInfo GetConsoleFallbackUICulture ();
    parameters: []
    return:
      type: System.Globalization.CultureInfo
      description: An alternate culture that is used to read and display text on the console.
  overload: System.Globalization.CultureInfo.GetConsoleFallbackUICulture*
  exceptions: []
  attributes:
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CultureInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Globalization.CultureInfo.GetCultureInfo(System.Int32)
  commentId: M:System.Globalization.CultureInfo.GetCultureInfo(System.Int32)
  id: GetCultureInfo(System.Int32)
  parent: System.Globalization.CultureInfo
  langs:
  - csharp
  name: GetCultureInfo(Int32)
  nameWithType: CultureInfo.GetCultureInfo(Int32)
  fullName: CultureInfo.GetCultureInfo(Int32)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Globalization
  summary: Retrieves a cached, read-only instance of a culture by using the specified culture identifier.
  remarks: "We recommend that you use the string overload of this method (<xref:System.Globalization.CultureInfo.GetCultureInfo%28System.String%29>), because locale names should be used instead of LCIDs. For custom locales, the locale name is required.  \n  \n If `culture` is the locale identifier of the current culture, the returned <xref:System.Globalization.CultureInfo> object does not reflect any user overrides."
  syntax:
    content: public static System.Globalization.CultureInfo GetCultureInfo (int culture);
    parameters:
    - id: culture
      type: System.Int32
      description: A locale identifier (LCID).
    return:
      type: System.Globalization.CultureInfo
      description: A read-only <xref href="System.Globalization.CultureInfo"></xref> object.
  overload: System.Globalization.CultureInfo.GetCultureInfo*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>culture</code> is less than zero.
  - type: System.Globalization.CultureNotFoundException
    commentId: T:System.Globalization.CultureNotFoundException
    description: <code>culture</code> specifies a culture that is not supported. See the Notes to Caller section for more information.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CultureInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Globalization.CultureInfo.GetCultureInfo(System.String)
  commentId: M:System.Globalization.CultureInfo.GetCultureInfo(System.String)
  id: GetCultureInfo(System.String)
  parent: System.Globalization.CultureInfo
  langs:
  - csharp
  name: GetCultureInfo(String)
  nameWithType: CultureInfo.GetCultureInfo(String)
  fullName: CultureInfo.GetCultureInfo(String)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Globalization
  summary: Retrieves a cached, read-only instance of a culture using the specified culture name.
  remarks: "For a list of predefined culture names, see the [National Language Support (NLS) API Reference](http://go.microsoft.com/fwlink/?LinkId=200048) at the Go Global Developer Center. In addition, starting with Windows 10, `name` can be any valid BCP-47 language tag.  \n  \n The <xref:System.Globalization.CultureInfo.GetCultureInfo%2A> method retrieves a cached, read-only <xref:System.Globalization.CultureInfo> object. It offers better performance than a corresponding call to the <xref:System.Globalization.CultureInfo.%23ctor%28System.String%29?displayProperty=fullName> constructor.  \n  \n If `name` is the name of the current culture, the returned <xref:System.Globalization.CultureInfo> object does not reflect any user overrides. This makes the method suitable for server applications or tools that do not have a real user account on the system and that need to load multiple cultures efficiently.  \n  \n If `name` is <xref:System.String.Empty?displayProperty=fullName>, the method returns the invariant culture. This is equivalent to retrieving the value of the <xref:System.Globalization.CultureInfo.InvariantCulture%2A> property."
  syntax:
    content: public static System.Globalization.CultureInfo GetCultureInfo (string name);
    parameters:
    - id: name
      type: System.String
      description: The name of a culture. <code>name</code> is not case-sensitive.
    return:
      type: System.Globalization.CultureInfo
      description: A read-only <xref href="System.Globalization.CultureInfo"></xref> object.
  overload: System.Globalization.CultureInfo.GetCultureInfo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>name</code> is null.
  - type: System.Globalization.CultureNotFoundException
    commentId: T:System.Globalization.CultureNotFoundException
    description: <code>name</code> specifies a culture that is not supported. See the Notes to Callers section for more information.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CultureInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Globalization.CultureInfo.GetCultureInfo(System.String,System.String)
  commentId: M:System.Globalization.CultureInfo.GetCultureInfo(System.String,System.String)
  id: GetCultureInfo(System.String,System.String)
  parent: System.Globalization.CultureInfo
  langs:
  - csharp
  name: GetCultureInfo(String, String)
  nameWithType: CultureInfo.GetCultureInfo(String, String)
  fullName: CultureInfo.GetCultureInfo(String, String)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Globalization
  summary: Retrieves a cached, read-only instance of a culture. Parameters specify a culture that is initialized with the <xref href="System.Globalization.TextInfo"></xref> and <xref href="System.Globalization.CompareInfo"></xref> objects specified by another culture.
  remarks: "For a list of predefined culture names, see the [National Language Support (NLS) API Reference](http://go.microsoft.com/fwlink/?LinkId=200048) at the Go Global Developer Center. In addition, starting with Windows 10, `name` can be any valid BCP-47 language tag.  \n  \n The <xref:System.Globalization.CultureInfo.GetCultureInfo%2A> method obtains a cached, read-only <xref:System.Globalization.CultureInfo> object. It offers better performance than a corresponding call to a <xref:System.Globalization.CultureInfo.%23ctor%2A> constructor. The method is used to create a culture similar to that specified by the `name` parameter, but with different sorting and casing rules.  \n  \n If `name` or `altName` is the name of the current culture, the returned objects do not reflect any user overrides. If `name` is <xref:System.String.Empty?displayProperty=fullName>, the method returns the invariant culture. This is equivalent to retrieving the value of the <xref:System.Globalization.CultureInfo.InvariantCulture%2A> property. If `altName` is <xref:System.String.Empty?displayProperty=fullName>, the method uses the writing system and comparison rules specified by the invariant culture."
  syntax:
    content: public static System.Globalization.CultureInfo GetCultureInfo (string name, string altName);
    parameters:
    - id: name
      type: System.String
      description: The name of a culture. <code>name</code> is not case-sensitive.
    - id: altName
      type: System.String
      description: The name of a culture that supplies the <xref href="System.Globalization.TextInfo"></xref> and <xref href="System.Globalization.CompareInfo"></xref> objects used to initialize <code>name</code>. <code>altName</code> is not case-sensitive.
    return:
      type: System.Globalization.CultureInfo
      description: A read-only <xref href="System.Globalization.CultureInfo"></xref> object.
  overload: System.Globalization.CultureInfo.GetCultureInfo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>name</code> or <code>altName</code> is null.
  - type: System.Globalization.CultureNotFoundException
    commentId: T:System.Globalization.CultureNotFoundException
    description: <code>name</code> or <code>altName</code> specifies a culture that is not supported. See the Notes to Callers section for more information.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CultureInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Globalization.CultureInfo.GetCultureInfoByIetfLanguageTag(System.String)
  commentId: M:System.Globalization.CultureInfo.GetCultureInfoByIetfLanguageTag(System.String)
  id: GetCultureInfoByIetfLanguageTag(System.String)
  parent: System.Globalization.CultureInfo
  langs:
  - csharp
  name: GetCultureInfoByIetfLanguageTag(String)
  nameWithType: CultureInfo.GetCultureInfoByIetfLanguageTag(String)
  fullName: CultureInfo.GetCultureInfoByIetfLanguageTag(String)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Globalization
  summary: Deprecated. Retrieves a read-only <xref href="System.Globalization.CultureInfo"></xref> object having linguistic characteristics that are identified by the specified RFC 4646 language tag.
  remarks: "> [!NOTE]\n>  This method and the <xref:System.Globalization.CultureInfo.IetfLanguageTag%2A> property are deprecated. Instead of using these elements, the application should use a new <xref:System.Globalization.CultureInfo> object and calls to the <xref:System.Globalization.CultureInfo.Name%2A> property. IETF tags and names are identical.  \n  \n The RFC 4646 standard that is maintained by the Internet Engineering Task Force (IETF) defines an IETF language tag, which provides a uniform means of identifying a language. The format of an IETF language tag is the same as the culture name returned by the <xref:System.Globalization.CultureInfo.Name%2A> property, but does not identify a culture uniquely. Different cultures share the same IETF language tag if those cultures have identical linguistic characteristics. The linguistic characteristics of a culture are contained in the <xref:System.Globalization.TextInfo> object associated with a <xref:System.Globalization.CultureInfo> object.  \n  \n An IETF language tag consists of a mandatory language identifier, an optional script identifier, and an optional region identifier.  \n  \n Your applications should use the retrieved culture to control language-specific tasks, such as managing a spelling or grammar checker. Applications should not use the retrieved culture to control culture-specific tasks, such as sorting text or formatting times and dates.  \n  \n For more information, see RFC 4646, \"Tags for Identifying Languages,\" and the most recent draft standard, Draft-phillips-langtags-05.txt, at [http://go.microsoft.com/fwlink/?LinkId=100231](http://go.microsoft.com/fwlink/?LinkId=100231)."
  syntax:
    content: public static System.Globalization.CultureInfo GetCultureInfoByIetfLanguageTag (string name);
    parameters:
    - id: name
      type: System.String
      description: The name of a language as specified by the RFC 4646 standard.
    return:
      type: System.Globalization.CultureInfo
      description: A read-only <xref href="System.Globalization.CultureInfo"></xref> object.
  overload: System.Globalization.CultureInfo.GetCultureInfoByIetfLanguageTag*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>name</code> is null.
  - type: System.Globalization.CultureNotFoundException
    commentId: T:System.Globalization.CultureNotFoundException
    description: <code>name</code> does not correspond to a supported culture.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CultureInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Globalization.CultureInfo.GetCultures(System.Globalization.CultureTypes)
  commentId: M:System.Globalization.CultureInfo.GetCultures(System.Globalization.CultureTypes)
  id: GetCultures(System.Globalization.CultureTypes)
  parent: System.Globalization.CultureInfo
  langs:
  - csharp
  name: GetCultures(CultureTypes)
  nameWithType: CultureInfo.GetCultures(CultureTypes)
  fullName: CultureInfo.GetCultures(CultureTypes)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Globalization
  summary: Gets the list of supported cultures filtered by the specified <xref href="System.Globalization.CultureTypes"></xref> parameter.
  remarks: "The <xref:System.Globalization.CultureInfo.GetCultures%2A> method is most commonly called with the `types` parameter set to the following values:  \n  \n-   <xref:System.Globalization.CultureTypes.SpecificCultures>, which returns all specific cultures.  \n  \n-   <xref:System.Globalization.CultureTypes.NeutralCultures>, which returns all neutral cultures and the invariant culture.  \n  \n-   <xref:System.Globalization.CultureTypes.AllCultures>, which returns all neutral and specific cultures, cultures installed in the Windows system, and custom cultures created by the user.  \n  \n-   <xref:System.Globalization.CultureTypes.UserCustomCulture>, which returns all custom cultures, such as those registered by the <xref:System.Globalization.CultureAndRegionInfoBuilder> class. In versions of Windows before Windows 10, the <xref:System.Globalization.CultureTypes.UserCustomCulture> value applies to all user-defined custom cultures. Starting with Windows 10, it applies to system cultures that lack complete cultural data and that do not have a unique local identifier, as indicated by the <xref:System.Globalization.CultureInfo.LCID%2A> property value. As a result, code such as the following will return different results when run on Windows 10 and on an earlier version of Windows.  \n  \n     [!code-csharp[System.Globalization.CultureInfo.GetCultures#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CS/getcultures3.cs#2)]\n     [!code-vb[System.Globalization.CultureInfo.GetCultures#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/VB/getcultures3.vb#2)]"
  example:
  - "The following code example displays several properties of the neutral cultures.  \n  \n> [!NOTE]\n>  The example displays the zh-CHS and zh-CHT cultures with the 0x0004 and 0x7C04 culture identifiers, respectively. However, your Windows Vista applications should use the zh-Hans name instead of zh-CHS and the zh-Hant name instead of zh-CHT. The zh-Hans and zh-Hant names represent the current standard, and should be used unless you have a reason for using the older names.  \n  \n [!code-cpp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CPP/getcultures.cpp#1)]\n [!code-csharp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CS/getcultures.cs#1)]\n [!code-vb[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/VB/getcultures.vb#1)]"
  syntax:
    content: public static System.Globalization.CultureInfo[] GetCultures (System.Globalization.CultureTypes types);
    parameters:
    - id: types
      type: System.Globalization.CultureTypes
      description: A bitwise combination of the enumeration values that filter the cultures to retrieve.
    return:
      type: System.Globalization.CultureInfo[]
      description: An array that contains the cultures specified by the <code>types</code> parameter. The array of cultures is unsorted.
  overload: System.Globalization.CultureInfo.GetCultures*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>types</code> specifies an invalid combination of <xref href="System.Globalization.CultureTypes"></xref> values.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CultureInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Globalization.CultureInfo.GetFormat(System.Type)
  commentId: M:System.Globalization.CultureInfo.GetFormat(System.Type)
  id: GetFormat(System.Type)
  parent: System.Globalization.CultureInfo
  langs:
  - csharp
  name: GetFormat(Type)
  nameWithType: CultureInfo.GetFormat(Type)
  fullName: CultureInfo.GetFormat(Type)
  type: Method
  assemblies:
  - System.Globalization
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Globalization
  summary: Gets an object that defines how to format the specified type.
  remarks: "<xref:System.Globalization.CultureInfo.GetFormat%2A> implements <xref:System.IFormatProvider.GetFormat%2A?displayProperty=fullName>.  \n  \n `NumberFormatInfo` provides the culture-specific numeric format used in conjunction with the Format methods in the base data types. `DateTimeFormatInfo` controls how the date and time values are formatted for a specific culture."
  syntax:
    content: public virtual object GetFormat (Type formatType);
    parameters:
    - id: formatType
      type: System.Type
      description: The <xref href="System.Type"></xref> for which to get a formatting object. This method only supports the <xref href="System.Globalization.NumberFormatInfo"></xref> and <xref href="System.Globalization.DateTimeFormatInfo"></xref> types.
    return:
      type: System.Object
      description: "The value of the <xref href=\"System.Globalization.CultureInfo.NumberFormat\"></xref> property, which is a <xref href=\"System.Globalization.NumberFormatInfo\"></xref> containing the default number format information for the current <xref href=\"System.Globalization.CultureInfo\"></xref>, if <code>formatType</code> is the <xref href=\"System.Type\"></xref> object for the <xref href=\"System.Globalization.NumberFormatInfo\"></xref> class.  \n  \n -or-  \n  \n The value of the <xref href=\"System.Globalization.CultureInfo.DateTimeFormat\"></xref> property, which is a <xref href=\"System.Globalization.DateTimeFormatInfo\"></xref> containing the default date and time format information for the current <xref href=\"System.Globalization.CultureInfo\"></xref>, if <code>formatType</code> is the <xref href=\"System.Type\"></xref> object for the <xref href=\"System.Globalization.DateTimeFormatInfo\"></xref> class.  \n  \n -or-  \n  \n null, if <code>formatType</code> is any other object."
  overload: System.Globalization.CultureInfo.GetFormat*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CultureInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Globalization.CultureInfo.GetHashCode
  commentId: M:System.Globalization.CultureInfo.GetHashCode
  id: GetHashCode
  parent: System.Globalization.CultureInfo
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: CultureInfo.GetHashCode()
  fullName: CultureInfo.GetHashCode()
  type: Method
  assemblies:
  - System.Globalization
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Globalization
  summary: Serves as a hash function for the current <xref href="System.Globalization.CultureInfo"></xref>, suitable for hashing algorithms and data structures, such as a hash table.
  remarks: "This method overrides <xref:System.Object.GetHashCode%2A?displayProperty=fullName>.  \n  \n This method generates the same hash code for two objects that are equal according to the <xref:System.Globalization.CultureInfo.Equals%2A> method."
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: A hash code for the current <xref href="System.Globalization.CultureInfo"></xref>.
  overload: System.Globalization.CultureInfo.GetHashCode*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CultureInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Globalization.CultureInfo.IetfLanguageTag
  commentId: P:System.Globalization.CultureInfo.IetfLanguageTag
  id: IetfLanguageTag
  parent: System.Globalization.CultureInfo
  langs:
  - csharp
  name: IetfLanguageTag
  nameWithType: CultureInfo.IetfLanguageTag
  fullName: CultureInfo.IetfLanguageTag
  type: Property
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Globalization
  summary: Deprecated. Gets the RFC 4646 standard identification for a language.
  remarks: "> [!NOTE]\n>  This property and the <xref:System.Globalization.CultureInfo.GetCultureInfoByIetfLanguageTag%2A> method are deprecated. Instead, you should use a the <xref:System.Globalization.CultureInfo.Name%2A?displayProperty=fullName> property. IETF tags and names are identical.  \n  \n The RFC 4646 standard that is maintained by the Internet Engineering Task Force (IETF) defines an IETF language tag, which provides a uniform means of identifying a language. The format of an IETF language tag is similar to the culture name returned by the <xref:System.Globalization.CultureInfo.Name%2A> property, but does not identify a culture uniquely. That is, different cultures share the same IETF language tag if those cultures have identical linguistic characteristics. The linguistic characteristics of a culture are contained in the <xref:System.Globalization.TextInfo> object associated with a <xref:System.Globalization.CultureInfo> object.  \n  \n An IETF language tag consists of a mandatory language identifier, an optional script identifier, and an optional region identifier.  \n  \n For more information, see [RFC 5646, \"Tags for Identifying Languages](http://go.microsoft.com/fwlink/?LinkId=230876). For a list of subtags, see [The IANA Language Subtag Registry](http://go.microsoft.com/fwlink/?LinkId=230877)."
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(false)]

      public string IetfLanguageTag { get; }
    return:
      type: System.String
      description: A string that is the RFC 4646 standard identification for a language.
  overload: System.Globalization.CultureInfo.IetfLanguageTag*
  exceptions: []
  attributes:
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CultureInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Globalization.CultureInfo.InstalledUICulture
  commentId: P:System.Globalization.CultureInfo.InstalledUICulture
  id: InstalledUICulture
  parent: System.Globalization.CultureInfo
  langs:
  - csharp
  name: InstalledUICulture
  nameWithType: CultureInfo.InstalledUICulture
  fullName: CultureInfo.InstalledUICulture
  type: Property
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Globalization
  summary: Gets the <xref href="System.Globalization.CultureInfo"></xref> that represents the culture installed with the operating system.
  remarks: In a localized operating system, such as Japanese Windows 2000 Professional, this property returns the culture of the operating system. This property is the equivalent of `GetSystemDefaultUILanguage` in the Windows API.
  syntax:
    content: public static System.Globalization.CultureInfo InstalledUICulture { get; }
    return:
      type: System.Globalization.CultureInfo
      description: The <xref href="System.Globalization.CultureInfo"></xref> that represents the culture installed with the operating system.
  overload: System.Globalization.CultureInfo.InstalledUICulture*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CultureInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Globalization.CultureInfo.InvariantCulture
  commentId: P:System.Globalization.CultureInfo.InvariantCulture
  id: InvariantCulture
  parent: System.Globalization.CultureInfo
  langs:
  - csharp
  name: InvariantCulture
  nameWithType: CultureInfo.InvariantCulture
  fullName: CultureInfo.InvariantCulture
  type: Property
  assemblies:
  - System.Globalization
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Globalization
  summary: Gets the <xref href="System.Globalization.CultureInfo"></xref> object that is culture-independent (invariant).
  remarks: "The invariant culture is culture-insensitive; it is associated with the English language but not with any country/region. You specify the invariant culture by name by using an empty string (\"\") in the call to a <xref:System.Globalization.CultureInfo> instantiation method. <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=fullName> also retrieves an instance of the invariant culture. It can be used in almost any method in the <xref:System.Globalization> namespace that requires a culture. The objects returned by properties such as <xref:System.Globalization.CultureInfo.CompareInfo%2A>, <xref:System.Globalization.CultureInfo.DateTimeFormat%2A>, and <xref:System.Globalization.CultureInfo.NumberFormat%2A> also reflect the string comparison and formatting conventions of the invariant culture.  \n  \n Unlike culture-sensitive data, which is subject to change by user customization or by updates to the .NET Framework or the operating system, invariant culture data is stable over time and across installed cultures and cannot be customized by users. This makes the invariant culture particularly useful for operations that require culture-independent results, such as formatting and parsing operations that persist formatted data, or sorting and ordering operations that require that data be displayed in a fixed order regardless of culture.  \n  \n## String Operations  \n You can use the invariant culture for culture-sensitive string operations that are not affected by the conventions of the current thread culture and that are consistent across cultures. For example, you may want sorted data to appear in a fixed order or apply a standard set of casing conventions to strings regardless of the current thread culture. To do this, you pass the <xref:System.Globalization.CultureInfo.InvariantCulture%2A> object to a method that has a <xref:System.Globalization.CultureInfo> parameter, such as <xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.Boolean%2CSystem.Globalization.CultureInfo%29> and <xref:System.String.ToUpper%28System.Globalization.CultureInfo%29>.  \n  \n## Persisting Data  \n The <xref:System.Globalization.CultureInfo.InvariantCulture%2A> property can be used to persist data in a culture-independent format. This provides a known format that does not change and that can be used to serialize and deserialize data across cultures. After the data is deserialized, it can be formatted appropriately based on the cultural conventions of the current user.  \n  \n For example, if you choose to persist date and time data in string form, you can pass the <xref:System.Globalization.CultureInfo.InvariantCulture%2A> object to the <xref:System.DateTime.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=fullName> or <xref:System.DateTimeOffset.ToString%28System.IFormatProvider%29?displayProperty=fullName> method to create the string, and you can pass the <xref:System.Globalization.CultureInfo.InvariantCulture%2A> object to the <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29?displayProperty=fullName> or <xref:System.DateTimeOffset.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=fullName> method to convert the string back to a date and time value. This technique ensures that the underlying date and time values do not change when the data is read or written by users from different cultures.  \n  \n The following example uses the invariant culture to persist a <xref:System.DateTime> value as a string. It then parses the string and displays its value by using the formatting conventions of the French (France) and German (Germany) cultures.  \n  \n [!code-csharp[System.Globalization.CultureInfo.InvariantCulture#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.invariantculture/cs/persist1.cs#1)]\n [!code-vb[System.Globalization.CultureInfo.InvariantCulture#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.invariantculture/vb/persist1.vb#1)]  \n  \n## Security Decisions  \n If you are making a security decision (such as whether to allow access to a system resource) based on the result of a string comparison or a case change, you should not use the invariant culture. Instead, you should perform a case-sensitive or case-insensitive ordinal comparison by calling a method that includes a <xref:System.StringComparison> parameter and supplying either <xref:System.StringComparison?displayProperty=fullName> or <xref:System.StringComparison?displayProperty=fullName> as an argument. Code that performs culture-sensitive string operations can cause security vulnerabilities if the current culture is changed or if the culture on the computer that is running the code differs from the culture that is used to test the code. In contrast, an ordinal comparison depends solely on the binary value of the compared characters."
  syntax:
    content: public static System.Globalization.CultureInfo InvariantCulture { get; }
    return:
      type: System.Globalization.CultureInfo
      description: The object that is culture-independent (invariant).
  overload: System.Globalization.CultureInfo.InvariantCulture*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CultureInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Globalization.CultureInfo.IsNeutralCulture
  commentId: P:System.Globalization.CultureInfo.IsNeutralCulture
  id: IsNeutralCulture
  parent: System.Globalization.CultureInfo
  langs:
  - csharp
  name: IsNeutralCulture
  nameWithType: CultureInfo.IsNeutralCulture
  fullName: CultureInfo.IsNeutralCulture
  type: Property
  assemblies:
  - System.Globalization
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Globalization
  summary: Gets a value indicating whether the current <xref href="System.Globalization.CultureInfo"></xref> represents a neutral culture.
  remarks: "A neutral culture is a culture that is associated with a language but not with a country or region. It differs from a specific culture, which is a culture that is associated with both a language and a country or region. For example, fr is the name for the neutral French culture, while fr-FR is the name for the French culture in France.  \n  \n If this property returns `false`, the culture is either a specific culture or the invariant culture."
  example:
  - "The following code example determines which cultures using the Chinese language are neutral cultures.  \n  \n> [!NOTE]\n>  The example displays the older zh-CHS and zh-CHT culture names with the 0x0004 and 0x7C04 culture identifiers, respectively. However, your Windows Vista applications should use the zh-Hans name instead of zh-CHS and the zh-Hant name instead of zh-CHT. The zh-Hans and zh-Hant names represent the current standard, and should be used unless you have a reason for using the older names.  \n  \n [!code-cpp[System.Globalization.CultureInfo.IsNeutralCulture2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.IsNeutralCulture2/CPP/neutralculture.cpp#1)]\n [!code-csharp[System.Globalization.CultureInfo.IsNeutralCulture2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.IsNeutralCulture2/CS/neutralculture.cs#1)]\n [!code-vb[System.Globalization.CultureInfo.IsNeutralCulture2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.IsNeutralCulture2/VB/neutralculture.vb#1)]"
  syntax:
    content: public virtual bool IsNeutralCulture { get; }
    return:
      type: System.Boolean
      description: '`true` if the current <xref href="System.Globalization.CultureInfo"></xref> represents a neutral culture; otherwise, `false`.'
  overload: System.Globalization.CultureInfo.IsNeutralCulture*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CultureInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Globalization.CultureInfo.IsReadOnly
  commentId: P:System.Globalization.CultureInfo.IsReadOnly
  id: IsReadOnly
  parent: System.Globalization.CultureInfo
  langs:
  - csharp
  name: IsReadOnly
  nameWithType: CultureInfo.IsReadOnly
  fullName: CultureInfo.IsReadOnly
  type: Property
  assemblies:
  - System.Globalization
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Globalization
  summary: Gets a value indicating whether the current <xref href="System.Globalization.CultureInfo"></xref> is read-only.
  remarks: If the <xref:System.Globalization.CultureInfo> is read-only, the <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> and <xref:System.Globalization.CultureInfo.NumberFormat%2A> instances are also read-only.
  example:
  - "The following code example shows that <xref:System.Globalization.CultureInfo.IsReadOnly%2A> also helps protect the <xref:System.Globalization.DateTimeFormatInfo> and <xref:System.Globalization.NumberFormatInfo> instances associated with the <xref:System.Globalization.CultureInfo>.  \n  \n [!code-cpp[System.Globalization.CultureInfo.ReadOnly#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.ReadOnly/CPP/yslin_cultureinfo_readonly.cpp#1)]\n [!code-csharp[System.Globalization.CultureInfo.ReadOnly#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.ReadOnly/CS/yslin_cultureinfo_readonly.cs#1)]\n [!code-vb[System.Globalization.CultureInfo.ReadOnly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.ReadOnly/VB/yslin_cultureinfo_readonly.vb#1)]"
  syntax:
    content: public bool IsReadOnly { get; }
    return:
      type: System.Boolean
      description: '`true` if the current <xref href="System.Globalization.CultureInfo"></xref> is read-only; otherwise, `false`. The default is `false`.'
  overload: System.Globalization.CultureInfo.IsReadOnly*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CultureInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Globalization.CultureInfo.KeyboardLayoutId
  commentId: P:System.Globalization.CultureInfo.KeyboardLayoutId
  id: KeyboardLayoutId
  parent: System.Globalization.CultureInfo
  langs:
  - csharp
  name: KeyboardLayoutId
  nameWithType: CultureInfo.KeyboardLayoutId
  fullName: CultureInfo.KeyboardLayoutId
  type: Property
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Globalization
  summary: Gets the active input locale identifier.
  remarks: The input locale identifier was formerly called the keyboard layout. An input locale identifier is a broader concept than a keyboard layout since it can also indicate a speech-to-text converter, an Input Method Editor (IME), or any other form of input.
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(false)]

      public virtual int KeyboardLayoutId { get; }
    return:
      type: System.Int32
      description: A 32-bit signed number that specifies an input locale identifier.
  overload: System.Globalization.CultureInfo.KeyboardLayoutId*
  exceptions: []
  attributes:
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CultureInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Globalization.CultureInfo.LCID
  commentId: P:System.Globalization.CultureInfo.LCID
  id: LCID
  parent: System.Globalization.CultureInfo
  langs:
  - csharp
  name: LCID
  nameWithType: CultureInfo.LCID
  fullName: CultureInfo.LCID
  type: Property
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Globalization
  summary: Gets the culture identifier for the current <xref href="System.Globalization.CultureInfo"></xref>.
  remarks: "In most cases, the culture identifier is mapped to the corresponding NLS locale identifier.  \n  \n In versions of Windows prior to Windows 10, the locale identifier `LOCALE_CUSTOM_UNSPECIFIED` (0x1000, or 4096) is assigned to custom cultures created by the user. Starting with Windows 10, it is assigned to any culture that does not have a unique locale identifier and does not have complete system-provided data. As a result, code that iterates cultures and retrieves those with an <xref:System.Globalization.CultureInfo.LCID%2A> value of `LOCALE_CUSTOM_UNSPECIFIED` returns a larger subset of <xref:System.Globalization.CultureInfo> objects if run under Windows 10."
  example:
  - "The following code example shows how to create a <xref:System.Globalization.CultureInfo> for Spanish (Spain) with the international sort order and another <xref:System.Globalization.CultureInfo> with the traditional sort order.  \n  \n [!code-cpp[System.Globalization.CultureInfo_esES#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/CPP/spanishspain.cpp#1)]\n [!code-csharp[System.Globalization.CultureInfo_esES#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/CS/spanishspain.cs#1)]\n [!code-vb[System.Globalization.CultureInfo_esES#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/VB/spanishspain.vb#1)]"
  syntax:
    content: public virtual int LCID { get; }
    return:
      type: System.Int32
      description: The culture identifier for the current <xref href="System.Globalization.CultureInfo"></xref>.
  overload: System.Globalization.CultureInfo.LCID*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CultureInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Globalization.CultureInfo.Name
  commentId: P:System.Globalization.CultureInfo.Name
  id: Name
  parent: System.Globalization.CultureInfo
  langs:
  - csharp
  name: Name
  nameWithType: CultureInfo.Name
  fullName: CultureInfo.Name
  type: Property
  assemblies:
  - System.Globalization
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Globalization
  summary: Gets the culture name in the format *languagecode2*-*country/regioncode2*.
  remarks: "For a list of predefined culture names and identifiers that the <xref:System.Globalization.CultureInfo.Name%2A> property can return, see the [National Language Support (NLS) API Reference](http://go.microsoft.com/fwlink/?LinkId=200048) at the Go Global Developer Center. In addition, starting with Windows 10, `name` can be any valid BCP-47 language tag. Note that culture names are subject to change, and that they also can reflect the names of custom cultures.  \n  \n The <xref:System.Globalization.CultureInfo.Name%2A?displayProperty=fullName> property follows the naming standards provided in the <xref:System.Globalization.CultureInfo> class topic. It returns the short form of the culture name that excludes any indication of an alternate sort order. For example, if you instantiate a <xref:System.Globalization.CultureInfo> object by using the string \"de-DE_phoneb\" to reflect an alternate sort order, the <xref:System.Globalization.CultureInfo.Name%2A> property returns \"de-DE\".  \n  \n To get the full name of the culture, you should use the <xref:System.Globalization.CultureInfo.DisplayName%2A>, <xref:System.Globalization.CultureInfo.EnglishName%2A>, or <xref:System.Globalization.CultureInfo.NativeName%2A> property."
  example:
  - "The following code example displays several properties of the neutral cultures.  \n  \n> [!NOTE]\n>  The example displays the older zh-CHS and zh-CHT culture names with the 0x0004 and 0x7C04 culture identifiers, respectively. However, your Windows Vista applications should use the zh-Hans name instead of zh-CHS and the zh-Hant name instead of zh-CHT. The zh-Hans and zh-Hant names represent the current standard, and should be used unless you have a reason for using the older names.  \n  \n [!code-cpp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CPP/getcultures.cpp#1)]\n [!code-csharp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CS/getcultures.cs#1)]\n [!code-vb[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/VB/getcultures.vb#1)]"
  syntax:
    content: public virtual string Name { get; }
    return:
      type: System.String
      description: The culture name in the format *languagecode2*-*country/regioncode2*. *languagecode2* is a lowercase two-letter code derived from ISO 639-1. *country/regioncode2* is derived from ISO 3166 and usually consists of two uppercase letters, or a BCP-47 language tag.
  overload: System.Globalization.CultureInfo.Name*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CultureInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Globalization.CultureInfo.NativeName
  commentId: P:System.Globalization.CultureInfo.NativeName
  id: NativeName
  parent: System.Globalization.CultureInfo
  langs:
  - csharp
  name: NativeName
  nameWithType: CultureInfo.NativeName
  fullName: CultureInfo.NativeName
  type: Property
  assemblies:
  - System.Globalization
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Globalization
  summary: Gets the culture name, consisting of the language, the country/region, and the optional script, that the culture is set to display.
  remarks: The value of this property is the same, regardless of the language version of the .NET Framework.
  syntax:
    content: public virtual string NativeName { get; }
    return:
      type: System.String
      description: The culture name. consisting of the full name of the language, the full name of the country/region, and the optional script. The format is discussed in the description of the <xref href="System.Globalization.CultureInfo"></xref> class.
  overload: System.Globalization.CultureInfo.NativeName*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CultureInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Globalization.CultureInfo.NumberFormat
  commentId: P:System.Globalization.CultureInfo.NumberFormat
  id: NumberFormat
  parent: System.Globalization.CultureInfo
  langs:
  - csharp
  name: NumberFormat
  nameWithType: CultureInfo.NumberFormat
  fullName: CultureInfo.NumberFormat
  type: Property
  assemblies:
  - System.Globalization
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Globalization
  summary: Gets or sets a <xref href="System.Globalization.NumberFormatInfo"></xref> that defines the culturally appropriate format of displaying numbers, currency, and percentage.
  remarks: "## Overrides  \n The user might choose to override some of the values associated with the current culture of Windows through the regional and language options portion of Control Panel. For example, the user might choose to display the date in a different format or to use a currency other than the default for the culture.  \n  \n If <xref:System.Globalization.CultureInfo.UseUserOverride%2A> is `true` and the specified culture matches the current culture of Windows, the <xref:System.Globalization.CultureInfo> uses those overrides, including user settings for the properties of the <xref:System.Globalization.DateTimeFormatInfo> instance returned by the <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> property, and the properties of the <xref:System.Globalization.NumberFormatInfo> instance returned by the <xref:System.Globalization.CultureInfo.NumberFormat%2A> property. If the user settings are incompatible with the culture associated with the <xref:System.Globalization.CultureInfo>, for example, if the selected calendar is not one of the <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>, the results of the methods and the values of the properties are undefined.  \n  \n The values of the <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> property and the <xref:System.Globalization.CultureInfo.NumberFormat%2A> property are not calculated until the user accesses the property. If the user uses the Control Panel to change the current culture to a new culture while the application is running and then accesses the <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> or <xref:System.Globalization.CultureInfo.NumberFormat%2A> property, the application retrieves the defaults for the new culture. not the overrides for the original culture. To preserve the overrides for the original current culture, the application should access the <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> and <xref:System.Globalization.CultureInfo.NumberFormat%2A> properties before changing the current culture."
  example:
  - "The following code example shows that CultureInfo.Clone also clones the <xref:System.Globalization.DateTimeFormatInfo> and <xref:System.Globalization.NumberFormatInfo> instances associated with the <xref:System.Globalization.CultureInfo>.  \n  \n [!code-cpp[System.Globalization.CultureInfo.Clone#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Clone/CPP/yslin_cultureinfo_clone.cpp#1)]\n [!code-csharp[System.Globalization.CultureInfo.Clone#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Clone/CS/yslin_cultureinfo_clone.cs#1)]\n [!code-vb[System.Globalization.CultureInfo.Clone#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Clone/VB/yslin_cultureinfo_clone.vb#1)]"
  syntax:
    content: public virtual System.Globalization.NumberFormatInfo NumberFormat { get; set; }
    return:
      type: System.Globalization.NumberFormatInfo
      description: A <xref href="System.Globalization.NumberFormatInfo"></xref> that defines the culturally appropriate format of displaying numbers, currency, and percentage.
  overload: System.Globalization.CultureInfo.NumberFormat*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The property is set to null.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The <xref href="System.Globalization.CultureInfo.NumberFormat"></xref> property or any of the <xref href="System.Globalization.NumberFormatInfo"></xref> properties is set, and the <xref href="System.Globalization.CultureInfo"></xref> is read-only.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CultureInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Globalization.CultureInfo.OptionalCalendars
  commentId: P:System.Globalization.CultureInfo.OptionalCalendars
  id: OptionalCalendars
  parent: System.Globalization.CultureInfo
  langs:
  - csharp
  name: OptionalCalendars
  nameWithType: CultureInfo.OptionalCalendars
  fullName: CultureInfo.OptionalCalendars
  type: Property
  assemblies:
  - System.Globalization
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Globalization
  summary: Gets the list of calendars that can be used by the culture.
  remarks: Your application changes the calendar used by the current <xref:System.Globalization.CultureInfo> by setting the <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A> property of <xref:System.Globalization.CultureInfo.DateTimeFormat%2A>, which is an instance of the <xref:System.Globalization.DateTimeFormatInfo> class. The new calendar must be one of the calendars listed in <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>. <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> also includes other properties that customize the date and time formatting associated with that <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A>.
  example:
  - "The following code example demonstrates how to determine the <xref:System.Globalization.GregorianCalendar> versions supported by the culture.  \n  \n [!code-cpp[System.Globalization.GregorianCalendarTypes#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.GregorianCalendarTypes/CPP/gregoriancalendartypes.cpp#1)]\n [!code-csharp[System.Globalization.GregorianCalendarTypes#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.GregorianCalendarTypes/CS/gregoriancalendartypes.cs#1)]\n [!code-vb[System.Globalization.GregorianCalendarTypes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.GregorianCalendarTypes/VB/gregoriancalendartypes.vb#1)]"
  syntax:
    content: public virtual System.Globalization.Calendar[] OptionalCalendars { get; }
    return:
      type: System.Globalization.Calendar[]
      description: An array of type <xref href="System.Globalization.Calendar"></xref> that represents the calendars that can be used by the culture represented by the current <xref href="System.Globalization.CultureInfo"></xref>.
  overload: System.Globalization.CultureInfo.OptionalCalendars*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CultureInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Globalization.CultureInfo.Parent
  commentId: P:System.Globalization.CultureInfo.Parent
  id: Parent
  parent: System.Globalization.CultureInfo
  langs:
  - csharp
  name: Parent
  nameWithType: CultureInfo.Parent
  fullName: CultureInfo.Parent
  type: Property
  assemblies:
  - System.Globalization
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Globalization
  summary: Gets the <xref href="System.Globalization.CultureInfo"></xref> that represents the parent culture of the current <xref href="System.Globalization.CultureInfo"></xref>.
  remarks: "The cultures have a hierarchy in which the parent of a specific culture is a neutral culture, the parent of a neutral culture is the <xref:System.Globalization.CultureInfo.InvariantCulture%2A>, and the parent of the <xref:System.Globalization.CultureInfo.InvariantCulture%2A> is the invariant culture itself. The parent culture encompasses only the set of information that is common among its children.  \n  \n If the resources for the specific culture are not available in the system, the resources for the neutral culture are used. If the resources for the neutral culture are not available, the resources embedded in the main assembly are used. For more information on the resource fallback process, see [Packaging and Deploying Resources](~/docs/framework/resources/packaging-and-deploying-resources-in-desktop-apps.md)."
  example:
  - "The following code example determines the parent culture of each specific culture using the Chinese language.  \n  \n> [!NOTE]\n>  The example displays the older zh-CHS and zh-CHT culture names with the 0x0004 and 0x7C04 culture identifiers, respectively. However, your Windows Vista applications should use the zh-Hans name instead of zh-CHS and the zh-Hant name instead of zh-CHT. The zh-Hans and zh-Hant names represent the current standard, and should be used unless you have a reason for using the older names.  \n  \n [!code-cpp[System.Globalization.CultureInfo.Parent#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Parent/CPP/parentculture.cpp#1)]\n [!code-csharp[System.Globalization.CultureInfo.Parent#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Parent/CS/parentculture.cs#1)]\n [!code-vb[System.Globalization.CultureInfo.Parent#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Parent/VB/parentculture.vb#1)]"
  syntax:
    content: public virtual System.Globalization.CultureInfo Parent { get; }
    return:
      type: System.Globalization.CultureInfo
      description: The <xref href="System.Globalization.CultureInfo"></xref> that represents the parent culture of the current <xref href="System.Globalization.CultureInfo"></xref>.
  overload: System.Globalization.CultureInfo.Parent*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CultureInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Globalization.CultureInfo.ReadOnly(System.Globalization.CultureInfo)
  commentId: M:System.Globalization.CultureInfo.ReadOnly(System.Globalization.CultureInfo)
  id: ReadOnly(System.Globalization.CultureInfo)
  parent: System.Globalization.CultureInfo
  langs:
  - csharp
  name: ReadOnly(CultureInfo)
  nameWithType: CultureInfo.ReadOnly(CultureInfo)
  fullName: CultureInfo.ReadOnly(CultureInfo)
  type: Method
  assemblies:
  - System.Globalization
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Globalization
  summary: Returns a read-only wrapper around the specified <xref href="System.Globalization.CultureInfo"></xref> object.
  remarks: This wrapper prevents any modifications to `ci`, or the objects returned by the `ci`.<xref:System.Globalization.CultureInfo.DateTimeFormat%2A> and `ci`.<xref:System.Globalization.CultureInfo.NumberFormat%2A> properties.
  example:
  - "The following example shows that the <xref:System.Globalization.CultureInfo.ReadOnly%2A> method helps protect the <xref:System.Globalization.DateTimeFormatInfo> and <xref:System.Globalization.NumberFormatInfo> instances associated with the <xref:System.Globalization.CultureInfo>.  \n  \n [!code-cpp[System.Globalization.CultureInfo.ReadOnly#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.ReadOnly/CPP/yslin_cultureinfo_readonly.cpp#1)]\n [!code-csharp[System.Globalization.CultureInfo.ReadOnly#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.ReadOnly/CS/yslin_cultureinfo_readonly.cs#1)]\n [!code-vb[System.Globalization.CultureInfo.ReadOnly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.ReadOnly/VB/yslin_cultureinfo_readonly.vb#1)]"
  syntax:
    content: public static System.Globalization.CultureInfo ReadOnly (System.Globalization.CultureInfo ci);
    parameters:
    - id: ci
      type: System.Globalization.CultureInfo
      description: The <xref href="System.Globalization.CultureInfo"></xref> object to wrap.
    return:
      type: System.Globalization.CultureInfo
      description: A read-only <xref href="System.Globalization.CultureInfo"></xref> wrapper around <code>ci</code>.
  overload: System.Globalization.CultureInfo.ReadOnly*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>ci</code> is null.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CultureInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Globalization.CultureInfo.TextInfo
  commentId: P:System.Globalization.CultureInfo.TextInfo
  id: TextInfo
  parent: System.Globalization.CultureInfo
  langs:
  - csharp
  name: TextInfo
  nameWithType: CultureInfo.TextInfo
  fullName: CultureInfo.TextInfo
  type: Property
  assemblies:
  - System.Globalization
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Globalization
  summary: Gets the <xref href="System.Globalization.TextInfo"></xref> that defines the writing system associated with the culture.
  remarks: The <xref:System.Globalization.CultureInfo.TextInfo%2A> property provides culture-specific casing information for strings. To perform culture-insensitive casing, the application should use the <xref:System.Globalization.CultureInfo.TextInfo%2A> property of <xref:System.Globalization.CultureInfo.InvariantCulture%2A>.
  example:
  - "The following code example shows how to create a <xref:System.Globalization.CultureInfo> for Spanish (Spain) with the international sort order and another <xref:System.Globalization.CultureInfo> with the traditional sort order.  \n  \n [!code-cpp[System.Globalization.CultureInfo_esES#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/CPP/spanishspain.cpp#1)]\n [!code-csharp[System.Globalization.CultureInfo_esES#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/CS/spanishspain.cs#1)]\n [!code-vb[System.Globalization.CultureInfo_esES#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/VB/spanishspain.vb#1)]"
  syntax:
    content: public virtual System.Globalization.TextInfo TextInfo { get; }
    return:
      type: System.Globalization.TextInfo
      description: The <xref href="System.Globalization.TextInfo"></xref> that defines the writing system associated with the culture.
  overload: System.Globalization.CultureInfo.TextInfo*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CultureInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Globalization.CultureInfo.ThreeLetterISOLanguageName
  commentId: P:System.Globalization.CultureInfo.ThreeLetterISOLanguageName
  id: ThreeLetterISOLanguageName
  parent: System.Globalization.CultureInfo
  langs:
  - csharp
  name: ThreeLetterISOLanguageName
  nameWithType: CultureInfo.ThreeLetterISOLanguageName
  fullName: CultureInfo.ThreeLetterISOLanguageName
  type: Property
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Globalization
  summary: Gets the ISO 639-2 three-letter code for the language of the current <xref href="System.Globalization.CultureInfo"></xref>.
  remarks: "For example, the three-letter abbreviation for English is \"eng\".  \n  \n> [!NOTE]\n>  When communicating between processes or persisting data it is usually better to use the full <xref:System.Globalization.CultureInfo.Name%2A?displayProperty=fullName>. Using just the language can lose context and data."
  example:
  - "The following code example displays several properties of the neutral cultures.  \n  \n> [!NOTE]\n>  The example displays the older zh-CHS and zh-CHT culture names with the 0x0004 and 0x7C04 culture identifiers, respectively. However, your Windows Vista applications should use the zh-Hans name instead of zh-CHS and the zh-Hant name instead of zh-CHT. The zh-Hans and zh-Hant names represent the current standard, and should be used unless you have a reason for using the older names.  \n  \n [!code-cpp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CPP/getcultures.cpp#1)]\n [!code-csharp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CS/getcultures.cs#1)]\n [!code-vb[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/VB/getcultures.vb#1)]"
  syntax:
    content: public virtual string ThreeLetterISOLanguageName { get; }
    return:
      type: System.String
      description: The ISO 639-2 three-letter code for the language of the current <xref href="System.Globalization.CultureInfo"></xref>.
  overload: System.Globalization.CultureInfo.ThreeLetterISOLanguageName*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CultureInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Globalization.CultureInfo.ThreeLetterWindowsLanguageName
  commentId: P:System.Globalization.CultureInfo.ThreeLetterWindowsLanguageName
  id: ThreeLetterWindowsLanguageName
  parent: System.Globalization.CultureInfo
  langs:
  - csharp
  name: ThreeLetterWindowsLanguageName
  nameWithType: CultureInfo.ThreeLetterWindowsLanguageName
  fullName: CultureInfo.ThreeLetterWindowsLanguageName
  type: Property
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Globalization
  summary: Gets the three-letter code for the language as defined in the Windows API.
  remarks: "This property returns the same value as the Windows API method `GetLocaleInfo` with the LOCALE_SABBREVLANGNAME value. For example, the three-letter code for English (United States) as defined in the Windows API is \"enu\".  \n  \n> [!NOTE]\n>  When communicating between processes or persisting data it is usually better to use the full <xref:System.Globalization.CultureInfo.Name%2A?displayProperty=fullName>. Using just the language can lose context and data."
  example:
  - "The following code example displays several properties of the neutral cultures.  \n  \n> [!NOTE]\n>  The example displays the older zh-CHS and zh-CHT culture names with the 0x0004 and 0x7C04 culture identifiers, respectively. However, your Windows Vista applications should use the zh-Hans name instead of zh-CHS and the zh-Hant name instead of zh-CHT. The zh-Hans and zh-Hant names represent the current standard, and should be used unless you have a reason for using the older names.  \n  \n [!code-cpp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CPP/getcultures.cpp#1)]\n [!code-csharp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CS/getcultures.cs#1)]\n [!code-vb[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/VB/getcultures.vb#1)]"
  syntax:
    content: public virtual string ThreeLetterWindowsLanguageName { get; }
    return:
      type: System.String
      description: The three-letter code for the language as defined in the Windows API.
  overload: System.Globalization.CultureInfo.ThreeLetterWindowsLanguageName*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CultureInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Globalization.CultureInfo.ToString
  commentId: M:System.Globalization.CultureInfo.ToString
  id: ToString
  parent: System.Globalization.CultureInfo
  langs:
  - csharp
  name: ToString()
  nameWithType: CultureInfo.ToString()
  fullName: CultureInfo.ToString()
  type: Method
  assemblies:
  - System.Globalization
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Globalization
  summary: Returns a string containing the name of the current <xref href="System.Globalization.CultureInfo"></xref> in the format *languagecode2*-*country/regioncode2*.
  remarks: "This method overrides <xref:System.Object.ToString%2A?displayProperty=fullName>. It returns a normalized version of the culture name that is passed to the <xref:System.Globalization.CultureInfo.%23ctor%28System.String%29> or <xref:System.Globalization.CultureInfo.%23ctor%28System.String%2CSystem.Boolean%29> constructor or to the <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A> or <xref:System.Globalization.CultureInfo.GetCultureInfo%28System.String%29> method. It normalizes the result string by converting characters in *languagecode2* to lowercase and converting characters in *country/regioncode2* to uppercase if necessary.  \n  \n Predefined culture names are listed in the [National Language Support (NLS) API Reference](http://go.microsoft.com/fwlink/?LinkId=200048) page at the Go Global Developer Center."
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: A string containing the name of the current <xref href="System.Globalization.CultureInfo"></xref>.
  overload: System.Globalization.CultureInfo.ToString*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CultureInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Globalization.CultureInfo.TwoLetterISOLanguageName
  commentId: P:System.Globalization.CultureInfo.TwoLetterISOLanguageName
  id: TwoLetterISOLanguageName
  parent: System.Globalization.CultureInfo
  langs:
  - csharp
  name: TwoLetterISOLanguageName
  nameWithType: CultureInfo.TwoLetterISOLanguageName
  fullName: CultureInfo.TwoLetterISOLanguageName
  type: Property
  assemblies:
  - System.Globalization
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Globalization
  summary: Gets the ISO 639-1 two-letter code for the language of the current <xref href="System.Globalization.CultureInfo"></xref>.
  remarks: "For example, the two-letter abbreviation for English is \"en\". The <xref:System.Globalization.CultureInfo.TwoLetterISOLanguageName%2A> property value for the invariant culture is \"iv\".  \n  \n> [!NOTE]\n>  When communicating between processes or persisting data it is usually better to use the full <xref:System.Globalization.CultureInfo.Name%2A?displayProperty=fullName>. Using just the language can lose context and data.  \n  \n If ISO 639-1 does not define a two-letter language code for a particular culture, the <xref:System.Globalization.CultureInfo.TwoLetterISOLanguageName%2A> property returns a string that consists of three or more letters. For more information, see the example."
  example:
  - "The following example lists the cultures whose <xref:System.Globalization.CultureInfo.TwoLetterISOLanguageName%2A> property does not consist of a two-letter language code.  \n  \n [!code-csharp[System.Globalization.CultureInfo.TwoLetterISOLanguageName#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.twoletterisolanguagename/cs/twoletterisolanguagename1.cs#1)]\n [!code-vb[System.Globalization.CultureInfo.TwoLetterISOLanguageName#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.twoletterisolanguagename/vb/twoletterisolanguagename1.vb#1)]"
  syntax:
    content: public virtual string TwoLetterISOLanguageName { get; }
    return:
      type: System.String
      description: The ISO 639-1 two-letter code for the language of the current <xref href="System.Globalization.CultureInfo"></xref>.
  overload: System.Globalization.CultureInfo.TwoLetterISOLanguageName*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CultureInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Globalization.CultureInfo.UseUserOverride
  commentId: P:System.Globalization.CultureInfo.UseUserOverride
  id: UseUserOverride
  parent: System.Globalization.CultureInfo
  langs:
  - csharp
  name: UseUserOverride
  nameWithType: CultureInfo.UseUserOverride
  fullName: CultureInfo.UseUserOverride
  type: Property
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Globalization
  summary: Gets a value indicating whether the current <xref href="System.Globalization.CultureInfo"></xref> object uses the user-selected culture settings.
  remarks: "The user might choose to override some of the values associated with the current culture of Windows through the regional and language options portion of Control Panel. For example, the user might choose to display the date in a different format or to use a currency other than the default for the culture.  \n  \n If <xref:System.Globalization.CultureInfo.UseUserOverride%2A> is `true` and the specified culture matches the current culture of Windows, the <xref:System.Globalization.CultureInfo> uses those overrides, including user settings for the properties of the <xref:System.Globalization.DateTimeFormatInfo> instance returned by the <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> property, and the properties of the <xref:System.Globalization.NumberFormatInfo> instance returned by the <xref:System.Globalization.CultureInfo.NumberFormat%2A> property. If the user settings are incompatible with the culture associated with the <xref:System.Globalization.CultureInfo>, for example, if the selected calendar is not one of the <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>, the results of the methods and the values of the properties are undefined.  \n  \n This property is set when the <xref:System.Globalization.CultureInfo> is created."
  syntax:
    content: public bool UseUserOverride { get; }
    return:
      type: System.Boolean
      description: '`true` if the current <xref href="System.Globalization.CultureInfo"></xref> uses the user-selected culture settings; otherwise, `false`.'
  overload: System.Globalization.CultureInfo.UseUserOverride*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CultureInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
references:
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.ArgumentOutOfRangeException
  parent: System
  isExternal: false
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.Globalization.CultureNotFoundException
  parent: System.Globalization
  isExternal: false
  name: CultureNotFoundException
  nameWithType: CultureNotFoundException
  fullName: System.Globalization.CultureNotFoundException
- uid: System.ArgumentNullException
  parent: System
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.NullReferenceException
  parent: System
  isExternal: false
  name: NullReferenceException
  nameWithType: NullReferenceException
  fullName: System.NullReferenceException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  nameWithType: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.Globalization.CultureInfo.#ctor(System.Int32)
  parent: System.Globalization.CultureInfo
  isExternal: false
  name: CultureInfo(Int32)
  nameWithType: CultureInfo.CultureInfo(Int32)
  fullName: CultureInfo.CultureInfo(Int32)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Globalization.CultureInfo.#ctor(System.String)
  parent: System.Globalization.CultureInfo
  isExternal: false
  name: CultureInfo(String)
  nameWithType: CultureInfo.CultureInfo(String)
  fullName: CultureInfo.CultureInfo(String)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Globalization.CultureInfo.#ctor(System.Int32,System.Boolean)
  parent: System.Globalization.CultureInfo
  isExternal: false
  name: CultureInfo(Int32, Boolean)
  nameWithType: CultureInfo.CultureInfo(Int32, Boolean)
  fullName: CultureInfo.CultureInfo(Int32, Boolean)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Globalization.CultureInfo.#ctor(System.String,System.Boolean)
  parent: System.Globalization.CultureInfo
  isExternal: false
  name: CultureInfo(String, Boolean)
  nameWithType: CultureInfo.CultureInfo(String, Boolean)
  fullName: CultureInfo.CultureInfo(String, Boolean)
- uid: System.Globalization.CultureInfo.Calendar
  parent: System.Globalization.CultureInfo
  isExternal: false
  name: Calendar
  nameWithType: CultureInfo.Calendar
  fullName: CultureInfo.Calendar
- uid: System.Globalization.Calendar
  parent: System.Globalization
  isExternal: false
  name: Calendar
  nameWithType: Calendar
  fullName: System.Globalization.Calendar
- uid: System.Globalization.CultureInfo.ClearCachedData
  parent: System.Globalization.CultureInfo
  isExternal: false
  name: ClearCachedData()
  nameWithType: CultureInfo.ClearCachedData()
  fullName: CultureInfo.ClearCachedData()
- uid: System.Globalization.CultureInfo.Clone
  parent: System.Globalization.CultureInfo
  isExternal: false
  name: Clone()
  nameWithType: CultureInfo.Clone()
  fullName: CultureInfo.Clone()
- uid: System.Globalization.CultureInfo.CompareInfo
  parent: System.Globalization.CultureInfo
  isExternal: false
  name: CompareInfo
  nameWithType: CultureInfo.CompareInfo
  fullName: CultureInfo.CompareInfo
- uid: System.Globalization.CompareInfo
  parent: System.Globalization
  isExternal: false
  name: CompareInfo
  nameWithType: CompareInfo
  fullName: System.Globalization.CompareInfo
- uid: System.Globalization.CultureInfo.CreateSpecificCulture(System.String)
  parent: System.Globalization.CultureInfo
  isExternal: false
  name: CreateSpecificCulture(String)
  nameWithType: CultureInfo.CreateSpecificCulture(String)
  fullName: CultureInfo.CreateSpecificCulture(String)
- uid: System.Globalization.CultureInfo
  parent: System.Globalization
  isExternal: false
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: System.Globalization.CultureInfo
- uid: System.Globalization.CultureInfo.CultureTypes
  parent: System.Globalization.CultureInfo
  isExternal: false
  name: CultureTypes
  nameWithType: CultureInfo.CultureTypes
  fullName: CultureInfo.CultureTypes
- uid: System.Globalization.CultureTypes
  parent: System.Globalization
  isExternal: false
  name: CultureTypes
  nameWithType: CultureTypes
  fullName: System.Globalization.CultureTypes
- uid: System.Globalization.CultureInfo.CurrentCulture
  parent: System.Globalization.CultureInfo
  isExternal: false
  name: CurrentCulture
  nameWithType: CultureInfo.CurrentCulture
  fullName: CultureInfo.CurrentCulture
- uid: System.Globalization.CultureInfo.CurrentUICulture
  parent: System.Globalization.CultureInfo
  isExternal: false
  name: CurrentUICulture
  nameWithType: CultureInfo.CurrentUICulture
  fullName: CultureInfo.CurrentUICulture
- uid: System.Globalization.CultureInfo.DateTimeFormat
  parent: System.Globalization.CultureInfo
  isExternal: false
  name: DateTimeFormat
  nameWithType: CultureInfo.DateTimeFormat
  fullName: CultureInfo.DateTimeFormat
- uid: System.Globalization.DateTimeFormatInfo
  parent: System.Globalization
  isExternal: false
  name: DateTimeFormatInfo
  nameWithType: DateTimeFormatInfo
  fullName: System.Globalization.DateTimeFormatInfo
- uid: System.Globalization.CultureInfo.DefaultThreadCurrentCulture
  parent: System.Globalization.CultureInfo
  isExternal: false
  name: DefaultThreadCurrentCulture
  nameWithType: CultureInfo.DefaultThreadCurrentCulture
  fullName: CultureInfo.DefaultThreadCurrentCulture
- uid: System.Globalization.CultureInfo.DefaultThreadCurrentUICulture
  parent: System.Globalization.CultureInfo
  isExternal: false
  name: DefaultThreadCurrentUICulture
  nameWithType: CultureInfo.DefaultThreadCurrentUICulture
  fullName: CultureInfo.DefaultThreadCurrentUICulture
- uid: System.Globalization.CultureInfo.DisplayName
  parent: System.Globalization.CultureInfo
  isExternal: false
  name: DisplayName
  nameWithType: CultureInfo.DisplayName
  fullName: CultureInfo.DisplayName
- uid: System.Globalization.CultureInfo.EnglishName
  parent: System.Globalization.CultureInfo
  isExternal: false
  name: EnglishName
  nameWithType: CultureInfo.EnglishName
  fullName: CultureInfo.EnglishName
- uid: System.Globalization.CultureInfo.Equals(System.Object)
  parent: System.Globalization.CultureInfo
  isExternal: false
  name: Equals(Object)
  nameWithType: CultureInfo.Equals(Object)
  fullName: CultureInfo.Equals(Object)
- uid: System.Globalization.CultureInfo.GetConsoleFallbackUICulture
  parent: System.Globalization.CultureInfo
  isExternal: false
  name: GetConsoleFallbackUICulture()
  nameWithType: CultureInfo.GetConsoleFallbackUICulture()
  fullName: CultureInfo.GetConsoleFallbackUICulture()
- uid: System.Globalization.CultureInfo.GetCultureInfo(System.Int32)
  parent: System.Globalization.CultureInfo
  isExternal: false
  name: GetCultureInfo(Int32)
  nameWithType: CultureInfo.GetCultureInfo(Int32)
  fullName: CultureInfo.GetCultureInfo(Int32)
- uid: System.Globalization.CultureInfo.GetCultureInfo(System.String)
  parent: System.Globalization.CultureInfo
  isExternal: false
  name: GetCultureInfo(String)
  nameWithType: CultureInfo.GetCultureInfo(String)
  fullName: CultureInfo.GetCultureInfo(String)
- uid: System.Globalization.CultureInfo.GetCultureInfo(System.String,System.String)
  parent: System.Globalization.CultureInfo
  isExternal: false
  name: GetCultureInfo(String, String)
  nameWithType: CultureInfo.GetCultureInfo(String, String)
  fullName: CultureInfo.GetCultureInfo(String, String)
- uid: System.Globalization.CultureInfo.GetCultureInfoByIetfLanguageTag(System.String)
  parent: System.Globalization.CultureInfo
  isExternal: false
  name: GetCultureInfoByIetfLanguageTag(String)
  nameWithType: CultureInfo.GetCultureInfoByIetfLanguageTag(String)
  fullName: CultureInfo.GetCultureInfoByIetfLanguageTag(String)
- uid: System.Globalization.CultureInfo.GetCultures(System.Globalization.CultureTypes)
  parent: System.Globalization.CultureInfo
  isExternal: false
  name: GetCultures(CultureTypes)
  nameWithType: CultureInfo.GetCultures(CultureTypes)
  fullName: CultureInfo.GetCultures(CultureTypes)
- uid: System.Globalization.CultureInfo[]
  parent: System.Globalization
  isExternal: false
  name: CultureInfo[]
  nameWithType: CultureInfo[]
  fullName: System.Globalization.CultureInfo[]
  spec.csharp:
  - uid: System.Globalization.CultureInfo
    name: CultureInfo
    nameWithType: CultureInfo
    fullName: System.Globalization.CultureInfo
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Globalization.CultureInfo.GetFormat(System.Type)
  parent: System.Globalization.CultureInfo
  isExternal: false
  name: GetFormat(Type)
  nameWithType: CultureInfo.GetFormat(Type)
  fullName: CultureInfo.GetFormat(Type)
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Globalization.CultureInfo.GetHashCode
  parent: System.Globalization.CultureInfo
  isExternal: false
  name: GetHashCode()
  nameWithType: CultureInfo.GetHashCode()
  fullName: CultureInfo.GetHashCode()
- uid: System.Globalization.CultureInfo.IetfLanguageTag
  parent: System.Globalization.CultureInfo
  isExternal: false
  name: IetfLanguageTag
  nameWithType: CultureInfo.IetfLanguageTag
  fullName: CultureInfo.IetfLanguageTag
- uid: System.Globalization.CultureInfo.InstalledUICulture
  parent: System.Globalization.CultureInfo
  isExternal: false
  name: InstalledUICulture
  nameWithType: CultureInfo.InstalledUICulture
  fullName: CultureInfo.InstalledUICulture
- uid: System.Globalization.CultureInfo.InvariantCulture
  parent: System.Globalization.CultureInfo
  isExternal: false
  name: InvariantCulture
  nameWithType: CultureInfo.InvariantCulture
  fullName: CultureInfo.InvariantCulture
- uid: System.Globalization.CultureInfo.IsNeutralCulture
  parent: System.Globalization.CultureInfo
  isExternal: false
  name: IsNeutralCulture
  nameWithType: CultureInfo.IsNeutralCulture
  fullName: CultureInfo.IsNeutralCulture
- uid: System.Globalization.CultureInfo.IsReadOnly
  parent: System.Globalization.CultureInfo
  isExternal: false
  name: IsReadOnly
  nameWithType: CultureInfo.IsReadOnly
  fullName: CultureInfo.IsReadOnly
- uid: System.Globalization.CultureInfo.KeyboardLayoutId
  parent: System.Globalization.CultureInfo
  isExternal: false
  name: KeyboardLayoutId
  nameWithType: CultureInfo.KeyboardLayoutId
  fullName: CultureInfo.KeyboardLayoutId
- uid: System.Globalization.CultureInfo.LCID
  parent: System.Globalization.CultureInfo
  isExternal: false
  name: LCID
  nameWithType: CultureInfo.LCID
  fullName: CultureInfo.LCID
- uid: System.Globalization.CultureInfo.Name
  parent: System.Globalization.CultureInfo
  isExternal: false
  name: Name
  nameWithType: CultureInfo.Name
  fullName: CultureInfo.Name
- uid: System.Globalization.CultureInfo.NativeName
  parent: System.Globalization.CultureInfo
  isExternal: false
  name: NativeName
  nameWithType: CultureInfo.NativeName
  fullName: CultureInfo.NativeName
- uid: System.Globalization.CultureInfo.NumberFormat
  parent: System.Globalization.CultureInfo
  isExternal: false
  name: NumberFormat
  nameWithType: CultureInfo.NumberFormat
  fullName: CultureInfo.NumberFormat
- uid: System.Globalization.NumberFormatInfo
  parent: System.Globalization
  isExternal: false
  name: NumberFormatInfo
  nameWithType: NumberFormatInfo
  fullName: System.Globalization.NumberFormatInfo
- uid: System.Globalization.CultureInfo.OptionalCalendars
  parent: System.Globalization.CultureInfo
  isExternal: false
  name: OptionalCalendars
  nameWithType: CultureInfo.OptionalCalendars
  fullName: CultureInfo.OptionalCalendars
- uid: System.Globalization.Calendar[]
  parent: System.Globalization
  isExternal: false
  name: Calendar[]
  nameWithType: Calendar[]
  fullName: System.Globalization.Calendar[]
  spec.csharp:
  - uid: System.Globalization.Calendar
    name: Calendar
    nameWithType: Calendar
    fullName: System.Globalization.Calendar
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Globalization.CultureInfo.Parent
  parent: System.Globalization.CultureInfo
  isExternal: false
  name: Parent
  nameWithType: CultureInfo.Parent
  fullName: CultureInfo.Parent
- uid: System.Globalization.CultureInfo.ReadOnly(System.Globalization.CultureInfo)
  parent: System.Globalization.CultureInfo
  isExternal: false
  name: ReadOnly(CultureInfo)
  nameWithType: CultureInfo.ReadOnly(CultureInfo)
  fullName: CultureInfo.ReadOnly(CultureInfo)
- uid: System.Globalization.CultureInfo.TextInfo
  parent: System.Globalization.CultureInfo
  isExternal: false
  name: TextInfo
  nameWithType: CultureInfo.TextInfo
  fullName: CultureInfo.TextInfo
- uid: System.Globalization.TextInfo
  parent: System.Globalization
  isExternal: false
  name: TextInfo
  nameWithType: TextInfo
  fullName: System.Globalization.TextInfo
- uid: System.Globalization.CultureInfo.ThreeLetterISOLanguageName
  parent: System.Globalization.CultureInfo
  isExternal: false
  name: ThreeLetterISOLanguageName
  nameWithType: CultureInfo.ThreeLetterISOLanguageName
  fullName: CultureInfo.ThreeLetterISOLanguageName
- uid: System.Globalization.CultureInfo.ThreeLetterWindowsLanguageName
  parent: System.Globalization.CultureInfo
  isExternal: false
  name: ThreeLetterWindowsLanguageName
  nameWithType: CultureInfo.ThreeLetterWindowsLanguageName
  fullName: CultureInfo.ThreeLetterWindowsLanguageName
- uid: System.Globalization.CultureInfo.ToString
  parent: System.Globalization.CultureInfo
  isExternal: false
  name: ToString()
  nameWithType: CultureInfo.ToString()
  fullName: CultureInfo.ToString()
- uid: System.Globalization.CultureInfo.TwoLetterISOLanguageName
  parent: System.Globalization.CultureInfo
  isExternal: false
  name: TwoLetterISOLanguageName
  nameWithType: CultureInfo.TwoLetterISOLanguageName
  fullName: CultureInfo.TwoLetterISOLanguageName
- uid: System.Globalization.CultureInfo.UseUserOverride
  parent: System.Globalization.CultureInfo
  isExternal: false
  name: UseUserOverride
  nameWithType: CultureInfo.UseUserOverride
  fullName: CultureInfo.UseUserOverride
- uid: System.Globalization.CultureInfo.#ctor*
  parent: System.Globalization.CultureInfo
  isExternal: false
  name: CultureInfo
  nameWithType: CultureInfo.CultureInfo
  fullName: CultureInfo.CultureInfo
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  - netcore-1.0
  - netcore-1.1
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CultureInfo.xml
- uid: System.Globalization.CultureInfo.Calendar*
  parent: System.Globalization.CultureInfo
  isExternal: false
  name: Calendar
  nameWithType: CultureInfo.Calendar
  fullName: CultureInfo.Calendar
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CultureInfo.xml
- uid: System.Globalization.CultureInfo.ClearCachedData*
  parent: System.Globalization.CultureInfo
  isExternal: false
  name: ClearCachedData
  nameWithType: CultureInfo.ClearCachedData
  fullName: CultureInfo.ClearCachedData
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CultureInfo.xml
- uid: System.Globalization.CultureInfo.Clone*
  parent: System.Globalization.CultureInfo
  isExternal: false
  name: Clone
  nameWithType: CultureInfo.Clone
  fullName: CultureInfo.Clone
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CultureInfo.xml
- uid: System.Globalization.CultureInfo.CompareInfo*
  parent: System.Globalization.CultureInfo
  isExternal: false
  name: CompareInfo
  nameWithType: CultureInfo.CompareInfo
  fullName: CultureInfo.CompareInfo
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CultureInfo.xml
- uid: System.Globalization.CultureInfo.CreateSpecificCulture*
  parent: System.Globalization.CultureInfo
  isExternal: false
  name: CreateSpecificCulture
  nameWithType: CultureInfo.CreateSpecificCulture
  fullName: CultureInfo.CreateSpecificCulture
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CultureInfo.xml
- uid: System.Globalization.CultureInfo.CultureTypes*
  parent: System.Globalization.CultureInfo
  isExternal: false
  name: CultureTypes
  nameWithType: CultureInfo.CultureTypes
  fullName: CultureInfo.CultureTypes
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CultureInfo.xml
- uid: System.Globalization.CultureInfo.CurrentCulture*
  parent: System.Globalization.CultureInfo
  isExternal: false
  name: CurrentCulture
  nameWithType: CultureInfo.CurrentCulture
  fullName: CultureInfo.CurrentCulture
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CultureInfo.xml
- uid: System.Globalization.CultureInfo.CurrentUICulture*
  parent: System.Globalization.CultureInfo
  isExternal: false
  name: CurrentUICulture
  nameWithType: CultureInfo.CurrentUICulture
  fullName: CultureInfo.CurrentUICulture
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CultureInfo.xml
- uid: System.Globalization.CultureInfo.DateTimeFormat*
  parent: System.Globalization.CultureInfo
  isExternal: false
  name: DateTimeFormat
  nameWithType: CultureInfo.DateTimeFormat
  fullName: CultureInfo.DateTimeFormat
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CultureInfo.xml
- uid: System.Globalization.CultureInfo.DefaultThreadCurrentCulture*
  parent: System.Globalization.CultureInfo
  isExternal: false
  name: DefaultThreadCurrentCulture
  nameWithType: CultureInfo.DefaultThreadCurrentCulture
  fullName: CultureInfo.DefaultThreadCurrentCulture
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CultureInfo.xml
- uid: System.Globalization.CultureInfo.DefaultThreadCurrentUICulture*
  parent: System.Globalization.CultureInfo
  isExternal: false
  name: DefaultThreadCurrentUICulture
  nameWithType: CultureInfo.DefaultThreadCurrentUICulture
  fullName: CultureInfo.DefaultThreadCurrentUICulture
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CultureInfo.xml
- uid: System.Globalization.CultureInfo.DisplayName*
  parent: System.Globalization.CultureInfo
  isExternal: false
  name: DisplayName
  nameWithType: CultureInfo.DisplayName
  fullName: CultureInfo.DisplayName
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CultureInfo.xml
- uid: System.Globalization.CultureInfo.EnglishName*
  parent: System.Globalization.CultureInfo
  isExternal: false
  name: EnglishName
  nameWithType: CultureInfo.EnglishName
  fullName: CultureInfo.EnglishName
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CultureInfo.xml
- uid: System.Globalization.CultureInfo.Equals*
  parent: System.Globalization.CultureInfo
  isExternal: false
  name: Equals
  nameWithType: CultureInfo.Equals
  fullName: CultureInfo.Equals
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CultureInfo.xml
- uid: System.Globalization.CultureInfo.GetConsoleFallbackUICulture*
  parent: System.Globalization.CultureInfo
  isExternal: false
  name: GetConsoleFallbackUICulture
  nameWithType: CultureInfo.GetConsoleFallbackUICulture
  fullName: CultureInfo.GetConsoleFallbackUICulture
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CultureInfo.xml
- uid: System.Globalization.CultureInfo.GetCultureInfo*
  parent: System.Globalization.CultureInfo
  isExternal: false
  name: GetCultureInfo
  nameWithType: CultureInfo.GetCultureInfo
  fullName: CultureInfo.GetCultureInfo
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CultureInfo.xml
- uid: System.Globalization.CultureInfo.GetCultureInfoByIetfLanguageTag*
  parent: System.Globalization.CultureInfo
  isExternal: false
  name: GetCultureInfoByIetfLanguageTag
  nameWithType: CultureInfo.GetCultureInfoByIetfLanguageTag
  fullName: CultureInfo.GetCultureInfoByIetfLanguageTag
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CultureInfo.xml
- uid: System.Globalization.CultureInfo.GetCultures*
  parent: System.Globalization.CultureInfo
  isExternal: false
  name: GetCultures
  nameWithType: CultureInfo.GetCultures
  fullName: CultureInfo.GetCultures
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CultureInfo.xml
- uid: System.Globalization.CultureInfo.GetFormat*
  parent: System.Globalization.CultureInfo
  isExternal: false
  name: GetFormat
  nameWithType: CultureInfo.GetFormat
  fullName: CultureInfo.GetFormat
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CultureInfo.xml
- uid: System.Globalization.CultureInfo.GetHashCode*
  parent: System.Globalization.CultureInfo
  isExternal: false
  name: GetHashCode
  nameWithType: CultureInfo.GetHashCode
  fullName: CultureInfo.GetHashCode
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CultureInfo.xml
- uid: System.Globalization.CultureInfo.IetfLanguageTag*
  parent: System.Globalization.CultureInfo
  isExternal: false
  name: IetfLanguageTag
  nameWithType: CultureInfo.IetfLanguageTag
  fullName: CultureInfo.IetfLanguageTag
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CultureInfo.xml
- uid: System.Globalization.CultureInfo.InstalledUICulture*
  parent: System.Globalization.CultureInfo
  isExternal: false
  name: InstalledUICulture
  nameWithType: CultureInfo.InstalledUICulture
  fullName: CultureInfo.InstalledUICulture
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CultureInfo.xml
- uid: System.Globalization.CultureInfo.InvariantCulture*
  parent: System.Globalization.CultureInfo
  isExternal: false
  name: InvariantCulture
  nameWithType: CultureInfo.InvariantCulture
  fullName: CultureInfo.InvariantCulture
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CultureInfo.xml
- uid: System.Globalization.CultureInfo.IsNeutralCulture*
  parent: System.Globalization.CultureInfo
  isExternal: false
  name: IsNeutralCulture
  nameWithType: CultureInfo.IsNeutralCulture
  fullName: CultureInfo.IsNeutralCulture
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CultureInfo.xml
- uid: System.Globalization.CultureInfo.IsReadOnly*
  parent: System.Globalization.CultureInfo
  isExternal: false
  name: IsReadOnly
  nameWithType: CultureInfo.IsReadOnly
  fullName: CultureInfo.IsReadOnly
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CultureInfo.xml
- uid: System.Globalization.CultureInfo.KeyboardLayoutId*
  parent: System.Globalization.CultureInfo
  isExternal: false
  name: KeyboardLayoutId
  nameWithType: CultureInfo.KeyboardLayoutId
  fullName: CultureInfo.KeyboardLayoutId
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CultureInfo.xml
- uid: System.Globalization.CultureInfo.LCID*
  parent: System.Globalization.CultureInfo
  isExternal: false
  name: LCID
  nameWithType: CultureInfo.LCID
  fullName: CultureInfo.LCID
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CultureInfo.xml
- uid: System.Globalization.CultureInfo.Name*
  parent: System.Globalization.CultureInfo
  isExternal: false
  name: Name
  nameWithType: CultureInfo.Name
  fullName: CultureInfo.Name
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CultureInfo.xml
- uid: System.Globalization.CultureInfo.NativeName*
  parent: System.Globalization.CultureInfo
  isExternal: false
  name: NativeName
  nameWithType: CultureInfo.NativeName
  fullName: CultureInfo.NativeName
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CultureInfo.xml
- uid: System.Globalization.CultureInfo.NumberFormat*
  parent: System.Globalization.CultureInfo
  isExternal: false
  name: NumberFormat
  nameWithType: CultureInfo.NumberFormat
  fullName: CultureInfo.NumberFormat
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CultureInfo.xml
- uid: System.Globalization.CultureInfo.OptionalCalendars*
  parent: System.Globalization.CultureInfo
  isExternal: false
  name: OptionalCalendars
  nameWithType: CultureInfo.OptionalCalendars
  fullName: CultureInfo.OptionalCalendars
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CultureInfo.xml
- uid: System.Globalization.CultureInfo.Parent*
  parent: System.Globalization.CultureInfo
  isExternal: false
  name: Parent
  nameWithType: CultureInfo.Parent
  fullName: CultureInfo.Parent
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CultureInfo.xml
- uid: System.Globalization.CultureInfo.ReadOnly*
  parent: System.Globalization.CultureInfo
  isExternal: false
  name: ReadOnly
  nameWithType: CultureInfo.ReadOnly
  fullName: CultureInfo.ReadOnly
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CultureInfo.xml
- uid: System.Globalization.CultureInfo.TextInfo*
  parent: System.Globalization.CultureInfo
  isExternal: false
  name: TextInfo
  nameWithType: CultureInfo.TextInfo
  fullName: CultureInfo.TextInfo
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CultureInfo.xml
- uid: System.Globalization.CultureInfo.ThreeLetterISOLanguageName*
  parent: System.Globalization.CultureInfo
  isExternal: false
  name: ThreeLetterISOLanguageName
  nameWithType: CultureInfo.ThreeLetterISOLanguageName
  fullName: CultureInfo.ThreeLetterISOLanguageName
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CultureInfo.xml
- uid: System.Globalization.CultureInfo.ThreeLetterWindowsLanguageName*
  parent: System.Globalization.CultureInfo
  isExternal: false
  name: ThreeLetterWindowsLanguageName
  nameWithType: CultureInfo.ThreeLetterWindowsLanguageName
  fullName: CultureInfo.ThreeLetterWindowsLanguageName
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CultureInfo.xml
- uid: System.Globalization.CultureInfo.ToString*
  parent: System.Globalization.CultureInfo
  isExternal: false
  name: ToString
  nameWithType: CultureInfo.ToString
  fullName: CultureInfo.ToString
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CultureInfo.xml
- uid: System.Globalization.CultureInfo.TwoLetterISOLanguageName*
  parent: System.Globalization.CultureInfo
  isExternal: false
  name: TwoLetterISOLanguageName
  nameWithType: CultureInfo.TwoLetterISOLanguageName
  fullName: CultureInfo.TwoLetterISOLanguageName
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CultureInfo.xml
- uid: System.Globalization.CultureInfo.UseUserOverride*
  parent: System.Globalization.CultureInfo
  isExternal: false
  name: UseUserOverride
  nameWithType: CultureInfo.UseUserOverride
  fullName: CultureInfo.UseUserOverride
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CultureInfo.xml
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: Object.Equals(Object, Object)
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  nameWithType: Object.GetType()
  fullName: Object.GetType()
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: Object.MemberwiseClone()
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: Object.ReferenceEquals(Object, Object)
- uid: System.ICloneable
  parent: System
  isExternal: false
  name: ICloneable
  nameWithType: ICloneable
  fullName: System.ICloneable
- uid: System.IFormatProvider
  parent: System
  isExternal: false
  name: IFormatProvider
  nameWithType: IFormatProvider
  fullName: System.IFormatProvider
