{"nodes":[{"content":"Defines extended capabilities for client-based application settings providers.","nodes":[{"pos":[0,78],"content":"Defines extended capabilities for client-based application settings providers.","nodes":[{"content":"Defines extended capabilities for client-based application settings providers.","pos":[0,78]}]}],"pos":[898,977],"yaml":true},{"content":"The application settings architecture enables you to provide a custom storage mechanism for application settings by creating a custom settings provider, which is a class derived from <xref:System.Configuration.SettingsProvider>. Such a class contains the basic functionality for storing and retrieving properties. However, you can add additional standardized functionality by implementing the <xref:System.Configuration.IApplicationSettingsProvider> interface in the custom settings provider. This interface contains three methods that primarily enable the settings provider to more intelligently handle application version changes. Typically, the settings provider will store application settings for different versions of an application separately to anticipate the following circumstances:  \n  \n-   Side-by-side execution of different versions of an application.  \n  \n-   Retaining application settings when upgrading an application.  \n  \n-   Resetting the application settings to their default values for the currently used version.  \n  \n The <xref:System.Configuration.LocalFileSettingsProvider> class implements the <xref:System.Configuration.IApplicationSettingsProvider> interface. The same set of methods contained by <xref:System.Configuration.IApplicationSettingsProvider> is also found in the <xref:System.Configuration.ApplicationSettingsBase> class, enabling the establishment of a predefined communication channel between an application settings wrapper and its settings provider.  \n  \n> [!NOTE]\n>  This interface is optional. If a provider does not implement this interface, the settings infrastructure will fail without notification if it attempts to access any of the methods defined by this interface.","nodes":[{"pos":[0,792],"content":"The application settings architecture enables you to provide a custom storage mechanism for application settings by creating a custom settings provider, which is a class derived from <xref:System.Configuration.SettingsProvider>. Such a class contains the basic functionality for storing and retrieving properties. However, you can add additional standardized functionality by implementing the <xref:System.Configuration.IApplicationSettingsProvider> interface in the custom settings provider. This interface contains three methods that primarily enable the settings provider to more intelligently handle application version changes. Typically, the settings provider will store application settings for different versions of an application separately to anticipate the following circumstances:","nodes":[{"content":"The application settings architecture enables you to provide a custom storage mechanism for application settings by creating a custom settings provider, which is a class derived from <xref:System.Configuration.SettingsProvider>. Such a class contains the basic functionality for storing and retrieving properties. However, you can add additional standardized functionality by implementing the <xref:System.Configuration.IApplicationSettingsProvider> interface in the custom settings provider. This interface contains three methods that primarily enable the settings provider to more intelligently handle application version changes. Typically, the settings provider will store application settings for different versions of an application separately to anticipate the following circumstances:","pos":[0,792],"nodes":[{"content":"The application settings architecture enables you to provide a custom storage mechanism for application settings by creating a custom settings provider, which is a class derived from <ph id=\"ph1\">&lt;xref:System.Configuration.SettingsProvider&gt;</ph>.","pos":[0,228],"source":"The application settings architecture enables you to provide a custom storage mechanism for application settings by creating a custom settings provider, which is a class derived from <xref:System.Configuration.SettingsProvider>."},{"content":"Such a class contains the basic functionality for storing and retrieving properties.","pos":[229,313]},{"content":"However, you can add additional standardized functionality by implementing the <ph id=\"ph1\">&lt;xref:System.Configuration.IApplicationSettingsProvider&gt;</ph> interface in the custom settings provider.","pos":[314,492],"source":" However, you can add additional standardized functionality by implementing the <xref:System.Configuration.IApplicationSettingsProvider> interface in the custom settings provider."},{"content":"This interface contains three methods that primarily enable the settings provider to more intelligently handle application version changes.","pos":[493,632]},{"content":"Typically, the settings provider will store application settings for different versions of an application separately to anticipate the following circumstances:","pos":[633,792]}]}]},{"pos":[802,865],"content":"Side-by-side execution of different versions of an application.","nodes":[{"content":"Side-by-side execution of different versions of an application.","pos":[0,63]}]},{"pos":[875,936],"content":"Retaining application settings when upgrading an application.","nodes":[{"content":"Retaining application settings when upgrading an application.","pos":[0,61]}]},{"pos":[946,1036],"content":"Resetting the application settings to their default values for the currently used version.","nodes":[{"content":"Resetting the application settings to their default values for the currently used version.","pos":[0,90]}]},{"pos":[1043,1495],"content":"The <xref:System.Configuration.LocalFileSettingsProvider> class implements the <xref:System.Configuration.IApplicationSettingsProvider> interface. The same set of methods contained by <xref:System.Configuration.IApplicationSettingsProvider> is also found in the <xref:System.Configuration.ApplicationSettingsBase> class, enabling the establishment of a predefined communication channel between an application settings wrapper and its settings provider.","nodes":[{"content":"The <xref:System.Configuration.LocalFileSettingsProvider> class implements the <xref:System.Configuration.IApplicationSettingsProvider> interface. The same set of methods contained by <xref:System.Configuration.IApplicationSettingsProvider> is also found in the <xref:System.Configuration.ApplicationSettingsBase> class, enabling the establishment of a predefined communication channel between an application settings wrapper and its settings provider.","pos":[0,452],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Configuration.LocalFileSettingsProvider&gt;</ph> class implements the <ph id=\"ph2\">&lt;xref:System.Configuration.IApplicationSettingsProvider&gt;</ph> interface.","pos":[0,146],"source":"The <xref:System.Configuration.LocalFileSettingsProvider> class implements the <xref:System.Configuration.IApplicationSettingsProvider> interface."},{"content":"The same set of methods contained by <ph id=\"ph1\">&lt;xref:System.Configuration.IApplicationSettingsProvider&gt;</ph> is also found in the <ph id=\"ph2\">&lt;xref:System.Configuration.ApplicationSettingsBase&gt;</ph> class, enabling the establishment of a predefined communication channel between an application settings wrapper and its settings provider.","pos":[147,452],"source":" The same set of methods contained by <xref:System.Configuration.IApplicationSettingsProvider> is also found in the <xref:System.Configuration.ApplicationSettingsBase> class, enabling the establishment of a predefined communication channel between an application settings wrapper and its settings provider."}]}]},{"pos":[1503,1720],"content":"[!NOTE]\n This interface is optional. If a provider does not implement this interface, the settings infrastructure will fail without notification if it attempts to access any of the methods defined by this interface.","leadings":["","> "],"nodes":[{"content":" This interface is optional. If a provider does not implement this interface, the settings infrastructure will fail without notification if it attempts to access any of the methods defined by this interface.","pos":[8,215],"nodes":[{"content":"This interface is optional.","pos":[1,28]},{"content":"If a provider does not implement this interface, the settings infrastructure will fail without notification if it attempts to access any of the methods defined by this interface.","pos":[29,207]}]}]}],"pos":[988,2722],"yaml":true,"extradata":"MT"},{"content":"Returns the value of the specified settings property for the previous version of the same application.","nodes":[{"pos":[0,102],"content":"Returns the value of the specified settings property for the previous version of the same application.","nodes":[{"content":"Returns the value of the specified settings property for the previous version of the same application.","pos":[0,102]}]}],"pos":[4439,4542],"yaml":true},{"content":"You can use the <xref:System.Configuration.IApplicationSettingsProvider.GetPreviousVersion%2A> method in conjunction with the <xref:System.Configuration.IApplicationSettingsProvider.Upgrade%2A> method to migrate application settings during or after the installation of a new version of an application.","nodes":[{"pos":[0,301],"content":"You can use the <xref:System.Configuration.IApplicationSettingsProvider.GetPreviousVersion%2A> method in conjunction with the <xref:System.Configuration.IApplicationSettingsProvider.Upgrade%2A> method to migrate application settings during or after the installation of a new version of an application.","nodes":[{"content":"You can use the <ph id=\"ph1\">&lt;xref:System.Configuration.IApplicationSettingsProvider.GetPreviousVersion%2A&gt;</ph> method in conjunction with the <ph id=\"ph2\">&lt;xref:System.Configuration.IApplicationSettingsProvider.Upgrade%2A&gt;</ph> method to migrate application settings during or after the installation of a new version of an application.","pos":[0,301],"source":"You can use the <xref:System.Configuration.IApplicationSettingsProvider.GetPreviousVersion%2A> method in conjunction with the <xref:System.Configuration.IApplicationSettingsProvider.Upgrade%2A> method to migrate application settings during or after the installation of a new version of an application."}]}],"pos":[4553,4855],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Configuration.SettingsContext\"></xref> describing the current application usage.","nodes":[{"pos":[0,101],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Configuration.SettingsContext\"&gt;&lt;/xref&gt;</ph> describing the current application usage.","source":"A <xref href=\"System.Configuration.SettingsContext\"></xref> describing the current application usage."}],"pos":[5145,5247],"yaml":true},{"content":"The <xref href=\"System.Configuration.SettingsProperty\"></xref> whose value is to be returned.","nodes":[{"pos":[0,93],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Configuration.SettingsProperty\"&gt;&lt;/xref&gt;</ph> whose value is to be returned.","source":"The <xref href=\"System.Configuration.SettingsProperty\"></xref> whose value is to be returned."}],"pos":[5335,5429],"yaml":true},{"content":"A <xref href=\"System.Configuration.SettingsPropertyValue\"></xref> containing the value of the specified property setting as it was last set in the previous version of the application; or `null` if the setting cannot be found.","nodes":[{"pos":[0,225],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Configuration.SettingsPropertyValue\"&gt;&lt;/xref&gt;</ph> containing the value of the specified property setting as it was last set in the previous version of the application; or <ph id=\"ph2\">`null`</ph> if the setting cannot be found.","source":"A <xref href=\"System.Configuration.SettingsPropertyValue\"></xref> containing the value of the specified property setting as it was last set in the previous version of the application; or `null` if the setting cannot be found."}],"pos":[5515,5741],"yaml":true},{"content":"Resets the application settings associated with the specified application to their default values.","nodes":[{"pos":[0,98],"content":"Resets the application settings associated with the specified application to their default values.","nodes":[{"content":"Resets the application settings associated with the specified application to their default values.","pos":[0,98]}]}],"pos":[7093,7192],"yaml":true},{"content":"The <xref:System.Configuration.IApplicationSettingsProvider.Reset%2A> method reinitializes the stored values of the specified application settings group. In contrast, <xref:System.Configuration.DefaultSettingValueAttribute> supplies a default value for a single settings property during property initialization, if it has no stored value.  \n  \n The settings provider determines what reasonable defaults are for the specified group of application settings. For example, the implementation in <xref:System.Configuration.LocalFileSettingsProvider> resets user-scoped settings to their shared values in the `application.exe.config` file; in contrast, it leaves the application-scoped settings unchanged.","nodes":[{"pos":[0,338],"content":"The <xref:System.Configuration.IApplicationSettingsProvider.Reset%2A> method reinitializes the stored values of the specified application settings group. In contrast, <xref:System.Configuration.DefaultSettingValueAttribute> supplies a default value for a single settings property during property initialization, if it has no stored value.","nodes":[{"content":"The <xref:System.Configuration.IApplicationSettingsProvider.Reset%2A> method reinitializes the stored values of the specified application settings group. In contrast, <xref:System.Configuration.DefaultSettingValueAttribute> supplies a default value for a single settings property during property initialization, if it has no stored value.","pos":[0,338],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Configuration.IApplicationSettingsProvider.Reset%2A&gt;</ph> method reinitializes the stored values of the specified application settings group.","pos":[0,153],"source":"The <xref:System.Configuration.IApplicationSettingsProvider.Reset%2A> method reinitializes the stored values of the specified application settings group."},{"content":"In contrast, <ph id=\"ph1\">&lt;xref:System.Configuration.DefaultSettingValueAttribute&gt;</ph> supplies a default value for a single settings property during property initialization, if it has no stored value.","pos":[154,338],"source":" In contrast, <xref:System.Configuration.DefaultSettingValueAttribute> supplies a default value for a single settings property during property initialization, if it has no stored value."}]}]},{"pos":[345,699],"content":"The settings provider determines what reasonable defaults are for the specified group of application settings. For example, the implementation in <xref:System.Configuration.LocalFileSettingsProvider> resets user-scoped settings to their shared values in the `application.exe.config` file; in contrast, it leaves the application-scoped settings unchanged.","nodes":[{"content":"The settings provider determines what reasonable defaults are for the specified group of application settings.","pos":[0,110]},{"content":"For example, the implementation in <ph id=\"ph1\">&lt;xref:System.Configuration.LocalFileSettingsProvider&gt;</ph> resets user-scoped settings to their shared values in the <ph id=\"ph2\">`application.exe.config`</ph> file; in contrast, it leaves the application-scoped settings unchanged.","pos":[111,354],"source":" For example, the implementation in <xref:System.Configuration.LocalFileSettingsProvider> resets user-scoped settings to their shared values in the `application.exe.config` file; in contrast, it leaves the application-scoped settings unchanged."}]}],"pos":[7203,7907],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Configuration.SettingsContext\"></xref> describing the current application usage.","nodes":[{"pos":[0,101],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Configuration.SettingsContext\"&gt;&lt;/xref&gt;</ph> describing the current application usage.","source":"A <xref href=\"System.Configuration.SettingsContext\"></xref> describing the current application usage."}],"pos":[8098,8200],"yaml":true},{"content":"Indicates to the provider that the application has been upgraded. This offers the provider an opportunity to upgrade its stored settings as appropriate.","nodes":[{"pos":[0,152],"content":"Indicates to the provider that the application has been upgraded. This offers the provider an opportunity to upgrade its stored settings as appropriate.","nodes":[{"content":"Indicates to the provider that the application has been upgraded. This offers the provider an opportunity to upgrade its stored settings as appropriate.","pos":[0,152],"nodes":[{"content":"Indicates to the provider that the application has been upgraded.","pos":[0,65]},{"content":"This offers the provider an opportunity to upgrade its stored settings as appropriate.","pos":[66,152]}]}]}],"pos":[9779,9932],"yaml":true},{"content":"The .NET Framework enables side-by-side installation and execution of different versions of the same application. The application settings provider stores the application settings for each version of an application separately to ensure isolation. However, you may want to migrate settings from the previous version of an application to the current one. To provide this migration functionality, use the <xref:System.Configuration.IApplicationSettingsProvider.Upgrade%2A> method, implemented in a class derived from <xref:System.Configuration.SettingsProvider>.  \n  \n You can use the <xref:System.Configuration.IApplicationSettingsProvider.Upgrade%2A> method in conjunction with the <xref:System.Configuration.IApplicationSettingsProvider.GetPreviousVersion%2A> method to migrate application settings during or after the installation of a new version of an application.  \n  \n This method should be suppressed for every application setting that has the <xref:System.Configuration.NoSettingsVersionUpgradeAttribute> is applied to it, or to the entire settings wrapper class, derived from <xref:System.Configuration.ApplicationSettingsBase>.","nodes":[{"pos":[0,559],"content":"The .NET Framework enables side-by-side installation and execution of different versions of the same application. The application settings provider stores the application settings for each version of an application separately to ensure isolation. However, you may want to migrate settings from the previous version of an application to the current one. To provide this migration functionality, use the <xref:System.Configuration.IApplicationSettingsProvider.Upgrade%2A> method, implemented in a class derived from <xref:System.Configuration.SettingsProvider>.","nodes":[{"content":"The .NET Framework enables side-by-side installation and execution of different versions of the same application. The application settings provider stores the application settings for each version of an application separately to ensure isolation. However, you may want to migrate settings from the previous version of an application to the current one. To provide this migration functionality, use the <xref:System.Configuration.IApplicationSettingsProvider.Upgrade%2A> method, implemented in a class derived from <xref:System.Configuration.SettingsProvider>.","pos":[0,559],"nodes":[{"content":"The .NET Framework enables side-by-side installation and execution of different versions of the same application.","pos":[0,113]},{"content":"The application settings provider stores the application settings for each version of an application separately to ensure isolation.","pos":[114,246]},{"content":"However, you may want to migrate settings from the previous version of an application to the current one.","pos":[247,352]},{"content":"To provide this migration functionality, use the <ph id=\"ph1\">&lt;xref:System.Configuration.IApplicationSettingsProvider.Upgrade%2A&gt;</ph> method, implemented in a class derived from <ph id=\"ph2\">&lt;xref:System.Configuration.SettingsProvider&gt;</ph>.","pos":[353,559],"source":" To provide this migration functionality, use the <xref:System.Configuration.IApplicationSettingsProvider.Upgrade%2A> method, implemented in a class derived from <xref:System.Configuration.SettingsProvider>."}]}]},{"pos":[566,867],"content":"You can use the <xref:System.Configuration.IApplicationSettingsProvider.Upgrade%2A> method in conjunction with the <xref:System.Configuration.IApplicationSettingsProvider.GetPreviousVersion%2A> method to migrate application settings during or after the installation of a new version of an application.","nodes":[{"content":"You can use the <ph id=\"ph1\">&lt;xref:System.Configuration.IApplicationSettingsProvider.Upgrade%2A&gt;</ph> method in conjunction with the <ph id=\"ph2\">&lt;xref:System.Configuration.IApplicationSettingsProvider.GetPreviousVersion%2A&gt;</ph> method to migrate application settings during or after the installation of a new version of an application.","pos":[0,301],"source":"You can use the <xref:System.Configuration.IApplicationSettingsProvider.Upgrade%2A> method in conjunction with the <xref:System.Configuration.IApplicationSettingsProvider.GetPreviousVersion%2A> method to migrate application settings during or after the installation of a new version of an application."}]},{"pos":[874,1136],"content":"This method should be suppressed for every application setting that has the <xref:System.Configuration.NoSettingsVersionUpgradeAttribute> is applied to it, or to the entire settings wrapper class, derived from <xref:System.Configuration.ApplicationSettingsBase>.","nodes":[{"content":"This method should be suppressed for every application setting that has the <ph id=\"ph1\">&lt;xref:System.Configuration.NoSettingsVersionUpgradeAttribute&gt;</ph> is applied to it, or to the entire settings wrapper class, derived from <ph id=\"ph2\">&lt;xref:System.Configuration.ApplicationSettingsBase&gt;</ph>.","pos":[0,262],"source":"This method should be suppressed for every application setting that has the <xref:System.Configuration.NoSettingsVersionUpgradeAttribute> is applied to it, or to the entire settings wrapper class, derived from <xref:System.Configuration.ApplicationSettingsBase>."}]}],"pos":[9943,11086],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Configuration.SettingsContext\"></xref> describing the current application usage.","nodes":[{"pos":[0,101],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Configuration.SettingsContext\"&gt;&lt;/xref&gt;</ph> describing the current application usage.","source":"A <xref href=\"System.Configuration.SettingsContext\"></xref> describing the current application usage."}],"pos":[11339,11441],"yaml":true},{"content":"A <xref href=\"System.Configuration.SettingsPropertyCollection\"></xref> containing the settings property group whose values are to be retrieved.","nodes":[{"pos":[0,143],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Configuration.SettingsPropertyCollection\"&gt;&lt;/xref&gt;</ph> containing the settings property group whose values are to be retrieved.","source":"A <xref href=\"System.Configuration.SettingsPropertyCollection\"></xref> containing the settings property group whose values are to be retrieved."}],"pos":[11541,11685],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Configuration.IApplicationSettingsProvider\n  commentId: T:System.Configuration.IApplicationSettingsProvider\n  id: IApplicationSettingsProvider\n  children:\n  - System.Configuration.IApplicationSettingsProvider.GetPreviousVersion(System.Configuration.SettingsContext,System.Configuration.SettingsProperty)\n  - System.Configuration.IApplicationSettingsProvider.Reset(System.Configuration.SettingsContext)\n  - System.Configuration.IApplicationSettingsProvider.Upgrade(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyCollection)\n  langs:\n  - csharp\n  name: IApplicationSettingsProvider\n  nameWithType: IApplicationSettingsProvider\n  fullName: System.Configuration.IApplicationSettingsProvider\n  type: Interface\n  assemblies:\n  - System\n  - System.Configuration.ConfigurationManager\n  namespace: System.Configuration\n  summary: Defines extended capabilities for client-based application settings providers.\n  remarks: \"The application settings architecture enables you to provide a custom storage mechanism for application settings by creating a custom settings provider, which is a class derived from <xref:System.Configuration.SettingsProvider>. Such a class contains the basic functionality for storing and retrieving properties. However, you can add additional standardized functionality by implementing the <xref:System.Configuration.IApplicationSettingsProvider> interface in the custom settings provider. This interface contains three methods that primarily enable the settings provider to more intelligently handle application version changes. Typically, the settings provider will store application settings for different versions of an application separately to anticipate the following circumstances:  \\n  \\n-   Side-by-side execution of different versions of an application.  \\n  \\n-   Retaining application settings when upgrading an application.  \\n  \\n-   Resetting the application settings to their default values for the currently used version.  \\n  \\n The <xref:System.Configuration.LocalFileSettingsProvider> class implements the <xref:System.Configuration.IApplicationSettingsProvider> interface. The same set of methods contained by <xref:System.Configuration.IApplicationSettingsProvider> is also found in the <xref:System.Configuration.ApplicationSettingsBase> class, enabling the establishment of a predefined communication channel between an application settings wrapper and its settings provider.  \\n  \\n> [!NOTE]\\n>  This interface is optional. If a provider does not implement this interface, the settings infrastructure will fail without notification if it attempts to access any of the methods defined by this interface.\"\n  syntax:\n    content: public interface IApplicationSettingsProvider\n  derivedClasses:\n  - System.Configuration.LocalFileSettingsProvider\n  - System.Web.ClientServices.Providers.ClientSettingsProvider\n  implements: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Configuration/IApplicationSettingsProvider.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Configuration.IApplicationSettingsProvider.GetPreviousVersion(System.Configuration.SettingsContext,System.Configuration.SettingsProperty)\n  commentId: M:System.Configuration.IApplicationSettingsProvider.GetPreviousVersion(System.Configuration.SettingsContext,System.Configuration.SettingsProperty)\n  id: GetPreviousVersion(System.Configuration.SettingsContext,System.Configuration.SettingsProperty)\n  parent: System.Configuration.IApplicationSettingsProvider\n  langs:\n  - csharp\n  name: GetPreviousVersion(SettingsContext, SettingsProperty)\n  nameWithType: IApplicationSettingsProvider.GetPreviousVersion(SettingsContext, SettingsProperty)\n  fullName: IApplicationSettingsProvider.GetPreviousVersion(SettingsContext, SettingsProperty)\n  type: Method\n  assemblies:\n  - System\n  - System.Configuration.ConfigurationManager\n  namespace: System.Configuration\n  summary: Returns the value of the specified settings property for the previous version of the same application.\n  remarks: You can use the <xref:System.Configuration.IApplicationSettingsProvider.GetPreviousVersion%2A> method in conjunction with the <xref:System.Configuration.IApplicationSettingsProvider.Upgrade%2A> method to migrate application settings during or after the installation of a new version of an application.\n  syntax:\n    content: public System.Configuration.SettingsPropertyValue GetPreviousVersion (System.Configuration.SettingsContext context, System.Configuration.SettingsProperty property);\n    parameters:\n    - id: context\n      type: System.Configuration.SettingsContext\n      description: A <xref href=\"System.Configuration.SettingsContext\"></xref> describing the current application usage.\n    - id: property\n      type: System.Configuration.SettingsProperty\n      description: The <xref href=\"System.Configuration.SettingsProperty\"></xref> whose value is to be returned.\n    return:\n      type: System.Configuration.SettingsPropertyValue\n      description: A <xref href=\"System.Configuration.SettingsPropertyValue\"></xref> containing the value of the specified property setting as it was last set in the previous version of the application; or `null` if the setting cannot be found.\n  overload: System.Configuration.IApplicationSettingsProvider.GetPreviousVersion*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Configuration/IApplicationSettingsProvider.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Configuration.IApplicationSettingsProvider.Reset(System.Configuration.SettingsContext)\n  commentId: M:System.Configuration.IApplicationSettingsProvider.Reset(System.Configuration.SettingsContext)\n  id: Reset(System.Configuration.SettingsContext)\n  parent: System.Configuration.IApplicationSettingsProvider\n  langs:\n  - csharp\n  name: Reset(SettingsContext)\n  nameWithType: IApplicationSettingsProvider.Reset(SettingsContext)\n  fullName: IApplicationSettingsProvider.Reset(SettingsContext)\n  type: Method\n  assemblies:\n  - System\n  - System.Configuration.ConfigurationManager\n  namespace: System.Configuration\n  summary: Resets the application settings associated with the specified application to their default values.\n  remarks: \"The <xref:System.Configuration.IApplicationSettingsProvider.Reset%2A> method reinitializes the stored values of the specified application settings group. In contrast, <xref:System.Configuration.DefaultSettingValueAttribute> supplies a default value for a single settings property during property initialization, if it has no stored value.  \\n  \\n The settings provider determines what reasonable defaults are for the specified group of application settings. For example, the implementation in <xref:System.Configuration.LocalFileSettingsProvider> resets user-scoped settings to their shared values in the `application.exe.config` file; in contrast, it leaves the application-scoped settings unchanged.\"\n  syntax:\n    content: public void Reset (System.Configuration.SettingsContext context);\n    parameters:\n    - id: context\n      type: System.Configuration.SettingsContext\n      description: A <xref href=\"System.Configuration.SettingsContext\"></xref> describing the current application usage.\n  overload: System.Configuration.IApplicationSettingsProvider.Reset*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Configuration/IApplicationSettingsProvider.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Configuration.IApplicationSettingsProvider.Upgrade(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyCollection)\n  commentId: M:System.Configuration.IApplicationSettingsProvider.Upgrade(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyCollection)\n  id: Upgrade(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyCollection)\n  parent: System.Configuration.IApplicationSettingsProvider\n  langs:\n  - csharp\n  name: Upgrade(SettingsContext, SettingsPropertyCollection)\n  nameWithType: IApplicationSettingsProvider.Upgrade(SettingsContext, SettingsPropertyCollection)\n  fullName: IApplicationSettingsProvider.Upgrade(SettingsContext, SettingsPropertyCollection)\n  type: Method\n  assemblies:\n  - System\n  - System.Configuration.ConfigurationManager\n  namespace: System.Configuration\n  summary: Indicates to the provider that the application has been upgraded. This offers the provider an opportunity to upgrade its stored settings as appropriate.\n  remarks: \"The .NET Framework enables side-by-side installation and execution of different versions of the same application. The application settings provider stores the application settings for each version of an application separately to ensure isolation. However, you may want to migrate settings from the previous version of an application to the current one. To provide this migration functionality, use the <xref:System.Configuration.IApplicationSettingsProvider.Upgrade%2A> method, implemented in a class derived from <xref:System.Configuration.SettingsProvider>.  \\n  \\n You can use the <xref:System.Configuration.IApplicationSettingsProvider.Upgrade%2A> method in conjunction with the <xref:System.Configuration.IApplicationSettingsProvider.GetPreviousVersion%2A> method to migrate application settings during or after the installation of a new version of an application.  \\n  \\n This method should be suppressed for every application setting that has the <xref:System.Configuration.NoSettingsVersionUpgradeAttribute> is applied to it, or to the entire settings wrapper class, derived from <xref:System.Configuration.ApplicationSettingsBase>.\"\n  syntax:\n    content: public void Upgrade (System.Configuration.SettingsContext context, System.Configuration.SettingsPropertyCollection properties);\n    parameters:\n    - id: context\n      type: System.Configuration.SettingsContext\n      description: A <xref href=\"System.Configuration.SettingsContext\"></xref> describing the current application usage.\n    - id: properties\n      type: System.Configuration.SettingsPropertyCollection\n      description: A <xref href=\"System.Configuration.SettingsPropertyCollection\"></xref> containing the settings property group whose values are to be retrieved.\n  overload: System.Configuration.IApplicationSettingsProvider.Upgrade*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Configuration/IApplicationSettingsProvider.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\nreferences:\n- uid: System.Configuration.IApplicationSettingsProvider.GetPreviousVersion(System.Configuration.SettingsContext,System.Configuration.SettingsProperty)\n  parent: System.Configuration.IApplicationSettingsProvider\n  isExternal: false\n  name: GetPreviousVersion(SettingsContext, SettingsProperty)\n  nameWithType: IApplicationSettingsProvider.GetPreviousVersion(SettingsContext, SettingsProperty)\n  fullName: IApplicationSettingsProvider.GetPreviousVersion(SettingsContext, SettingsProperty)\n- uid: System.Configuration.SettingsPropertyValue\n  parent: System.Configuration\n  isExternal: false\n  name: SettingsPropertyValue\n  nameWithType: SettingsPropertyValue\n  fullName: System.Configuration.SettingsPropertyValue\n- uid: System.Configuration.SettingsContext\n  parent: System.Configuration\n  isExternal: false\n  name: SettingsContext\n  nameWithType: SettingsContext\n  fullName: System.Configuration.SettingsContext\n- uid: System.Configuration.SettingsProperty\n  parent: System.Configuration\n  isExternal: false\n  name: SettingsProperty\n  nameWithType: SettingsProperty\n  fullName: System.Configuration.SettingsProperty\n- uid: System.Configuration.IApplicationSettingsProvider.Reset(System.Configuration.SettingsContext)\n  parent: System.Configuration.IApplicationSettingsProvider\n  isExternal: false\n  name: Reset(SettingsContext)\n  nameWithType: IApplicationSettingsProvider.Reset(SettingsContext)\n  fullName: IApplicationSettingsProvider.Reset(SettingsContext)\n- uid: System.Configuration.IApplicationSettingsProvider.Upgrade(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyCollection)\n  parent: System.Configuration.IApplicationSettingsProvider\n  isExternal: false\n  name: Upgrade(SettingsContext, SettingsPropertyCollection)\n  nameWithType: IApplicationSettingsProvider.Upgrade(SettingsContext, SettingsPropertyCollection)\n  fullName: IApplicationSettingsProvider.Upgrade(SettingsContext, SettingsPropertyCollection)\n- uid: System.Configuration.SettingsPropertyCollection\n  parent: System.Configuration\n  isExternal: false\n  name: SettingsPropertyCollection\n  nameWithType: SettingsPropertyCollection\n  fullName: System.Configuration.SettingsPropertyCollection\n- uid: System.Configuration.IApplicationSettingsProvider.GetPreviousVersion*\n  parent: System.Configuration.IApplicationSettingsProvider\n  isExternal: false\n  name: GetPreviousVersion\n  nameWithType: IApplicationSettingsProvider.GetPreviousVersion\n  fullName: IApplicationSettingsProvider.GetPreviousVersion\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Configuration/IApplicationSettingsProvider.xml\n- uid: System.Configuration.IApplicationSettingsProvider.Reset*\n  parent: System.Configuration.IApplicationSettingsProvider\n  isExternal: false\n  name: Reset\n  nameWithType: IApplicationSettingsProvider.Reset\n  fullName: IApplicationSettingsProvider.Reset\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Configuration/IApplicationSettingsProvider.xml\n- uid: System.Configuration.IApplicationSettingsProvider.Upgrade*\n  parent: System.Configuration.IApplicationSettingsProvider\n  isExternal: false\n  name: Upgrade\n  nameWithType: IApplicationSettingsProvider.Upgrade\n  fullName: IApplicationSettingsProvider.Upgrade\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Configuration/IApplicationSettingsProvider.xml\n"}