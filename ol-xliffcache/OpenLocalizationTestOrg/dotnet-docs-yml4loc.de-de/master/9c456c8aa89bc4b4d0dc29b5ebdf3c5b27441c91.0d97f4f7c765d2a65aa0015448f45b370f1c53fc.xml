{"nodes":[{"content":"Defines a set of rules for authorizing a user, given a set of claims.","nodes":[{"pos":[0,69],"content":"Defines a set of rules for authorizing a user, given a set of claims.","nodes":[{"content":"Defines a set of rules for authorizing a user, given a set of claims.","pos":[0,69]}]}],"pos":[635,705],"yaml":true},{"content":"Implement the <xref:System.IdentityModel.Policy.IAuthorizationPolicy> interface to add or map one set of claims to another. An authorization policy examines a set of claims and adds additional claims based on the current set. For example, an authorization policy might evaluate a claim that contains the date of birth and add a claim that asserts that the user is over 21 years old and add an Over21 claim to the <xref:System.IdentityModel.Policy.EvaluationContext>.  \n  \n Classes that implement the <xref:System.IdentityModel.Policy.IAuthorizationPolicy> interface do not authorize users, but they enable the <xref:System.ServiceModel.ServiceAuthorizationManager> class to do so. The <xref:System.ServiceModel.ServiceAuthorizationManager> calls the <xref:System.IdentityModel.Policy.IAuthorizationPolicy.Evaluate%2A> method for each authorization policy in effect. The <xref:System.IdentityModel.Policy.IAuthorizationPolicy.Evaluate%2A> method determines whether additional claims should be added for the user, based on the current context. An authorization policy's <xref:System.IdentityModel.Policy.IAuthorizationPolicy.Evaluate%2A> method may be called multiple times, as claims are added to the <xref:System.IdentityModel.Policy.EvaluationContext> by other authorization policies. When all authorization policies in effect are done, the <xref:System.ServiceModel.ServiceAuthorizationManager> class makes authorization decisions based upon the final set of claims. The <xref:System.ServiceModel.ServiceAuthorizationManager> class then creates an <xref:System.IdentityModel.Policy.AuthorizationContext> that contains an immutable set of claims that reflects these authorization decisions.","nodes":[{"pos":[0,466],"content":"Implement the <xref:System.IdentityModel.Policy.IAuthorizationPolicy> interface to add or map one set of claims to another. An authorization policy examines a set of claims and adds additional claims based on the current set. For example, an authorization policy might evaluate a claim that contains the date of birth and add a claim that asserts that the user is over 21 years old and add an Over21 claim to the <xref:System.IdentityModel.Policy.EvaluationContext>.","nodes":[{"content":"Implement the <xref:System.IdentityModel.Policy.IAuthorizationPolicy> interface to add or map one set of claims to another. An authorization policy examines a set of claims and adds additional claims based on the current set. For example, an authorization policy might evaluate a claim that contains the date of birth and add a claim that asserts that the user is over 21 years old and add an Over21 claim to the <xref:System.IdentityModel.Policy.EvaluationContext>.","pos":[0,466],"nodes":[{"content":"Implement the <ph id=\"ph1\">&lt;xref:System.IdentityModel.Policy.IAuthorizationPolicy&gt;</ph> interface to add or map one set of claims to another.","pos":[0,123],"source":"Implement the <xref:System.IdentityModel.Policy.IAuthorizationPolicy> interface to add or map one set of claims to another."},{"content":"An authorization policy examines a set of claims and adds additional claims based on the current set.","pos":[124,225]},{"content":"For example, an authorization policy might evaluate a claim that contains the date of birth and add a claim that asserts that the user is over 21 years old and add an Over21 claim to the <ph id=\"ph1\">&lt;xref:System.IdentityModel.Policy.EvaluationContext&gt;</ph>.","pos":[226,466],"source":" For example, an authorization policy might evaluate a claim that contains the date of birth and add a claim that asserts that the user is over 21 years old and add an Over21 claim to the <xref:System.IdentityModel.Policy.EvaluationContext>."}]}]},{"pos":[473,1691],"content":"Classes that implement the <xref:System.IdentityModel.Policy.IAuthorizationPolicy> interface do not authorize users, but they enable the <xref:System.ServiceModel.ServiceAuthorizationManager> class to do so. The <xref:System.ServiceModel.ServiceAuthorizationManager> calls the <xref:System.IdentityModel.Policy.IAuthorizationPolicy.Evaluate%2A> method for each authorization policy in effect. The <xref:System.IdentityModel.Policy.IAuthorizationPolicy.Evaluate%2A> method determines whether additional claims should be added for the user, based on the current context. An authorization policy's <xref:System.IdentityModel.Policy.IAuthorizationPolicy.Evaluate%2A> method may be called multiple times, as claims are added to the <xref:System.IdentityModel.Policy.EvaluationContext> by other authorization policies. When all authorization policies in effect are done, the <xref:System.ServiceModel.ServiceAuthorizationManager> class makes authorization decisions based upon the final set of claims. The <xref:System.ServiceModel.ServiceAuthorizationManager> class then creates an <xref:System.IdentityModel.Policy.AuthorizationContext> that contains an immutable set of claims that reflects these authorization decisions.","nodes":[{"content":"Classes that implement the <xref:System.IdentityModel.Policy.IAuthorizationPolicy> interface do not authorize users, but they enable the <xref:System.ServiceModel.ServiceAuthorizationManager> class to do so. The <xref:System.ServiceModel.ServiceAuthorizationManager> calls the <xref:System.IdentityModel.Policy.IAuthorizationPolicy.Evaluate%2A> method for each authorization policy in effect. The <xref:System.IdentityModel.Policy.IAuthorizationPolicy.Evaluate%2A> method determines whether additional claims should be added for the user, based on the current context. An authorization policy's <xref:System.IdentityModel.Policy.IAuthorizationPolicy.Evaluate%2A> method may be called multiple times, as claims are added to the <xref:System.IdentityModel.Policy.EvaluationContext> by other authorization policies. When all authorization policies in effect are done, the <xref:System.ServiceModel.ServiceAuthorizationManager> class makes authorization decisions based upon the final set of claims. The <xref:System.ServiceModel.ServiceAuthorizationManager> class then creates an <xref:System.IdentityModel.Policy.AuthorizationContext> that contains an immutable set of claims that reflects these authorization decisions.","pos":[0,1218],"nodes":[{"content":"Classes that implement the <ph id=\"ph1\">&lt;xref:System.IdentityModel.Policy.IAuthorizationPolicy&gt;</ph> interface do not authorize users, but they enable the <ph id=\"ph2\">&lt;xref:System.ServiceModel.ServiceAuthorizationManager&gt;</ph> class to do so.","pos":[0,207],"source":"Classes that implement the <xref:System.IdentityModel.Policy.IAuthorizationPolicy> interface do not authorize users, but they enable the <xref:System.ServiceModel.ServiceAuthorizationManager> class to do so."},{"content":"The <ph id=\"ph1\">&lt;xref:System.ServiceModel.ServiceAuthorizationManager&gt;</ph> calls the <ph id=\"ph2\">&lt;xref:System.IdentityModel.Policy.IAuthorizationPolicy.Evaluate%2A&gt;</ph> method for each authorization policy in effect.","pos":[208,392],"source":" The <xref:System.ServiceModel.ServiceAuthorizationManager> calls the <xref:System.IdentityModel.Policy.IAuthorizationPolicy.Evaluate%2A> method for each authorization policy in effect."},{"content":"The <ph id=\"ph1\">&lt;xref:System.IdentityModel.Policy.IAuthorizationPolicy.Evaluate%2A&gt;</ph> method determines whether additional claims should be added for the user, based on the current context.","pos":[393,568],"source":" The <xref:System.IdentityModel.Policy.IAuthorizationPolicy.Evaluate%2A> method determines whether additional claims should be added for the user, based on the current context."},{"content":"An authorization policy's <ph id=\"ph1\">&lt;xref:System.IdentityModel.Policy.IAuthorizationPolicy.Evaluate%2A&gt;</ph> method may be called multiple times, as claims are added to the <ph id=\"ph2\">&lt;xref:System.IdentityModel.Policy.EvaluationContext&gt;</ph> by other authorization policies.","pos":[569,812],"source":" An authorization policy's <xref:System.IdentityModel.Policy.IAuthorizationPolicy.Evaluate%2A> method may be called multiple times, as claims are added to the <xref:System.IdentityModel.Policy.EvaluationContext> by other authorization policies."},{"content":"When all authorization policies in effect are done, the <ph id=\"ph1\">&lt;xref:System.ServiceModel.ServiceAuthorizationManager&gt;</ph> class makes authorization decisions based upon the final set of claims.","pos":[813,995],"source":" When all authorization policies in effect are done, the <xref:System.ServiceModel.ServiceAuthorizationManager> class makes authorization decisions based upon the final set of claims."},{"content":"The <ph id=\"ph1\">&lt;xref:System.ServiceModel.ServiceAuthorizationManager&gt;</ph> class then creates an <ph id=\"ph2\">&lt;xref:System.IdentityModel.Policy.AuthorizationContext&gt;</ph> that contains an immutable set of claims that reflects these authorization decisions.","pos":[996,1218],"source":" The <xref:System.ServiceModel.ServiceAuthorizationManager> class then creates an <xref:System.IdentityModel.Policy.AuthorizationContext> that contains an immutable set of claims that reflects these authorization decisions."}]}]}],"pos":[716,2412],"yaml":true,"extradata":"MT"},{"content":"Evaluates whether a user meets the requirements for this authorization policy.","nodes":[{"pos":[0,78],"content":"Evaluates whether a user meets the requirements for this authorization policy.","nodes":[{"content":"Evaluates whether a user meets the requirements for this authorization policy.","pos":[0,78]}]}],"pos":[4179,4258],"yaml":true},{"content":"> [!NOTE]\n>  Implementers of the <xref:System.IdentityModel.Policy.IAuthorizationPolicy> interface should expect the <xref:System.IdentityModel.Policy.IAuthorizationPolicy.Evaluate%2A> method to be called multiple times by different threads.  \n  \n Implementers of the <xref:System.IdentityModel.Policy.IAuthorizationPolicy> interface can use the `state` parameter to track state between calls to the <xref:System.IdentityModel.Policy.IAuthorizationPolicy.Evaluate%2A> method. If a state object is set inside a given call to the <xref:System.IdentityModel.Policy.IAuthorizationPolicy.Evaluate%2A> method, the same object instance is passed to each and every subsequent call to the <xref:System.IdentityModel.Policy.IAuthorizationPolicy.Evaluate%2A> method in the current evaluation process.","nodes":[{"pos":[2,241],"content":"[!NOTE]\n Implementers of the <xref:System.IdentityModel.Policy.IAuthorizationPolicy> interface should expect the <xref:System.IdentityModel.Policy.IAuthorizationPolicy.Evaluate%2A> method to be called multiple times by different threads.","leadings":["","> "],"nodes":[{"content":"Implementers of the <ph id=\"ph1\">&lt;xref:System.IdentityModel.Policy.IAuthorizationPolicy&gt;</ph> interface should expect the <ph id=\"ph2\">&lt;xref:System.IdentityModel.Policy.IAuthorizationPolicy.Evaluate%2A&gt;</ph> method to be called multiple times by different threads.","pos":[9,237],"source":" Implementers of the <xref:System.IdentityModel.Policy.IAuthorizationPolicy> interface should expect the <xref:System.IdentityModel.Policy.IAuthorizationPolicy.Evaluate%2A> method to be called multiple times by different threads."}]},{"pos":[248,789],"content":"Implementers of the <xref:System.IdentityModel.Policy.IAuthorizationPolicy> interface can use the `state` parameter to track state between calls to the <xref:System.IdentityModel.Policy.IAuthorizationPolicy.Evaluate%2A> method. If a state object is set inside a given call to the <xref:System.IdentityModel.Policy.IAuthorizationPolicy.Evaluate%2A> method, the same object instance is passed to each and every subsequent call to the <xref:System.IdentityModel.Policy.IAuthorizationPolicy.Evaluate%2A> method in the current evaluation process.","nodes":[{"content":"Implementers of the <ph id=\"ph1\">&lt;xref:System.IdentityModel.Policy.IAuthorizationPolicy&gt;</ph> interface can use the <ph id=\"ph2\">`state`</ph> parameter to track state between calls to the <ph id=\"ph3\">&lt;xref:System.IdentityModel.Policy.IAuthorizationPolicy.Evaluate%2A&gt;</ph> method.","pos":[0,227],"source":"Implementers of the <xref:System.IdentityModel.Policy.IAuthorizationPolicy> interface can use the `state` parameter to track state between calls to the <xref:System.IdentityModel.Policy.IAuthorizationPolicy.Evaluate%2A> method."},{"content":"If a state object is set inside a given call to the <ph id=\"ph1\">&lt;xref:System.IdentityModel.Policy.IAuthorizationPolicy.Evaluate%2A&gt;</ph> method, the same object instance is passed to each and every subsequent call to the <ph id=\"ph2\">&lt;xref:System.IdentityModel.Policy.IAuthorizationPolicy.Evaluate%2A&gt;</ph> method in the current evaluation process.","pos":[228,541],"source":" If a state object is set inside a given call to the <xref:System.IdentityModel.Policy.IAuthorizationPolicy.Evaluate%2A> method, the same object instance is passed to each and every subsequent call to the <xref:System.IdentityModel.Policy.IAuthorizationPolicy.Evaluate%2A> method in the current evaluation process."}]}],"pos":[4269,5064],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.IdentityModel.Policy.EvaluationContext\"></xref> that contains the claim set that the authorization policy evaluates.","nodes":[{"pos":[0,138],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.IdentityModel.Policy.EvaluationContext\"&gt;&lt;/xref&gt;</ph> that contains the claim set that the authorization policy evaluates.","source":"An <xref href=\"System.IdentityModel.Policy.EvaluationContext\"></xref> that contains the claim set that the authorization policy evaluates."}],"pos":[5602,5741],"yaml":true},{"content":"A <xref href=\"System.Object\"></xref>, passed by reference that represents the custom state for this authorization policy.","nodes":[{"pos":[0,121],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Object\"&gt;&lt;/xref&gt;</ph>, passed by reference that represents the custom state for this authorization policy.","source":"A <xref href=\"System.Object\"></xref>, passed by reference that represents the custom state for this authorization policy."}],"pos":[5802,5924],"yaml":true},{"content":"`false` if the <xref href=\"System.IdentityModel.Policy.IAuthorizationPolicy.Evaluate(System.IdentityModel.Policy.EvaluationContext,System.Object@)\"></xref> method for this authorization policy must be called if additional claims are added by other authorization policies to <code>evaluationContext</code>; otherwise, `true` to state no additional evaluation is required by this authorization policy.","nodes":[{"pos":[0,399],"content":"<ph id=\"ph1\">`false`</ph> if the <ph id=\"ph2\">&lt;xref href=\"System.IdentityModel.Policy.IAuthorizationPolicy.Evaluate(System.IdentityModel.Policy.EvaluationContext,System.Object@)\"&gt;&lt;/xref&gt;</ph> method for this authorization policy must be called if additional claims are added by other authorization policies to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph3\">evaluationContext</ph><ept id=\"p1\">&lt;/code&gt;</ept>; otherwise, <ph id=\"ph4\">`true`</ph> to state no additional evaluation is required by this authorization policy.","source":"`false` if the <xref href=\"System.IdentityModel.Policy.IAuthorizationPolicy.Evaluate(System.IdentityModel.Policy.EvaluationContext,System.Object@)\"></xref> method for this authorization policy must be called if additional claims are added by other authorization policies to <code>evaluationContext</code>; otherwise, `true` to state no additional evaluation is required by this authorization policy."}],"pos":[5982,6384],"yaml":true},{"content":"Gets a claim set that represents the issuer of the authorization policy.","nodes":[{"pos":[0,72],"content":"Gets a claim set that represents the issuer of the authorization policy.","nodes":[{"content":"Gets a claim set that represents the issuer of the authorization policy.","pos":[0,72]}]}],"pos":[7487,7560],"yaml":true},{"content":"A <xref href=\"System.IdentityModel.Claims.ClaimSet\"></xref> that represents the issuer of the authorization policy.","nodes":[{"pos":[0,115],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.IdentityModel.Claims.ClaimSet\"&gt;&lt;/xref&gt;</ph> that represents the issuer of the authorization policy.","source":"A <xref href=\"System.IdentityModel.Claims.ClaimSet\"></xref> that represents the issuer of the authorization policy."}],"pos":[7723,7839],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.IdentityModel.Policy.IAuthorizationPolicy\n  commentId: T:System.IdentityModel.Policy.IAuthorizationPolicy\n  id: IAuthorizationPolicy\n  children:\n  - System.IdentityModel.Policy.IAuthorizationPolicy.Evaluate(System.IdentityModel.Policy.EvaluationContext,System.Object@)\n  - System.IdentityModel.Policy.IAuthorizationPolicy.Issuer\n  langs:\n  - csharp\n  name: IAuthorizationPolicy\n  nameWithType: IAuthorizationPolicy\n  fullName: System.IdentityModel.Policy.IAuthorizationPolicy\n  type: Interface\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Policy\n  summary: Defines a set of rules for authorizing a user, given a set of claims.\n  remarks: \"Implement the <xref:System.IdentityModel.Policy.IAuthorizationPolicy> interface to add or map one set of claims to another. An authorization policy examines a set of claims and adds additional claims based on the current set. For example, an authorization policy might evaluate a claim that contains the date of birth and add a claim that asserts that the user is over 21 years old and add an Over21 claim to the <xref:System.IdentityModel.Policy.EvaluationContext>.  \\n  \\n Classes that implement the <xref:System.IdentityModel.Policy.IAuthorizationPolicy> interface do not authorize users, but they enable the <xref:System.ServiceModel.ServiceAuthorizationManager> class to do so. The <xref:System.ServiceModel.ServiceAuthorizationManager> calls the <xref:System.IdentityModel.Policy.IAuthorizationPolicy.Evaluate%2A> method for each authorization policy in effect. The <xref:System.IdentityModel.Policy.IAuthorizationPolicy.Evaluate%2A> method determines whether additional claims should be added for the user, based on the current context. An authorization policy's <xref:System.IdentityModel.Policy.IAuthorizationPolicy.Evaluate%2A> method may be called multiple times, as claims are added to the <xref:System.IdentityModel.Policy.EvaluationContext> by other authorization policies. When all authorization policies in effect are done, the <xref:System.ServiceModel.ServiceAuthorizationManager> class makes authorization decisions based upon the final set of claims. The <xref:System.ServiceModel.ServiceAuthorizationManager> class then creates an <xref:System.IdentityModel.Policy.AuthorizationContext> that contains an immutable set of claims that reflects these authorization decisions.\"\n  example:\n  - >-\n    [!code-csharp[C_IAuthorizationPolicy#1](~/samples/snippets/csharp/VS_Snippets_CFX/c_iauthorizationpolicy/cs/service.cs#1)]\n     [!code-vb[C_IAuthorizationPolicy#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/c_iauthorizationpolicy/vb/myauthorizationpolicy.vb#1)]\n  syntax:\n    content: 'public interface IAuthorizationPolicy : System.IdentityModel.Policy.IAuthorizationComponent'\n  implements:\n  - System.IdentityModel.Policy.IAuthorizationComponent\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Policy/IAuthorizationPolicy.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.IdentityModel.Policy.IAuthorizationPolicy.Evaluate(System.IdentityModel.Policy.EvaluationContext,System.Object@)\n  commentId: M:System.IdentityModel.Policy.IAuthorizationPolicy.Evaluate(System.IdentityModel.Policy.EvaluationContext,System.Object@)\n  id: Evaluate(System.IdentityModel.Policy.EvaluationContext,System.Object@)\n  parent: System.IdentityModel.Policy.IAuthorizationPolicy\n  langs:\n  - csharp\n  name: Evaluate(EvaluationContext, Object)\n  nameWithType: IAuthorizationPolicy.Evaluate(EvaluationContext, Object)\n  fullName: IAuthorizationPolicy.Evaluate(EvaluationContext, Object)\n  type: Method\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Policy\n  summary: Evaluates whether a user meets the requirements for this authorization policy.\n  remarks: \"> [!NOTE]\\n>  Implementers of the <xref:System.IdentityModel.Policy.IAuthorizationPolicy> interface should expect the <xref:System.IdentityModel.Policy.IAuthorizationPolicy.Evaluate%2A> method to be called multiple times by different threads.  \\n  \\n Implementers of the <xref:System.IdentityModel.Policy.IAuthorizationPolicy> interface can use the `state` parameter to track state between calls to the <xref:System.IdentityModel.Policy.IAuthorizationPolicy.Evaluate%2A> method. If a state object is set inside a given call to the <xref:System.IdentityModel.Policy.IAuthorizationPolicy.Evaluate%2A> method, the same object instance is passed to each and every subsequent call to the <xref:System.IdentityModel.Policy.IAuthorizationPolicy.Evaluate%2A> method in the current evaluation process.\"\n  example:\n  - >-\n    [!code-csharp[C_IAuthorizationPolicy#2](~/samples/snippets/csharp/VS_Snippets_CFX/c_iauthorizationpolicy/cs/service.cs#2)]\n     [!code-vb[C_IAuthorizationPolicy#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/c_iauthorizationpolicy/vb/myauthorizationpolicy.vb#2)]\n  syntax:\n    content: public bool Evaluate (System.IdentityModel.Policy.EvaluationContext evaluationContext, ref object state);\n    parameters:\n    - id: evaluationContext\n      type: System.IdentityModel.Policy.EvaluationContext\n      description: An <xref href=\"System.IdentityModel.Policy.EvaluationContext\"></xref> that contains the claim set that the authorization policy evaluates.\n    - id: state\n      type: System.Object\n      description: A <xref href=\"System.Object\"></xref>, passed by reference that represents the custom state for this authorization policy.\n    return:\n      type: System.Boolean\n      description: '`false` if the <xref href=\"System.IdentityModel.Policy.IAuthorizationPolicy.Evaluate(System.IdentityModel.Policy.EvaluationContext,System.Object@)\"></xref> method for this authorization policy must be called if additional claims are added by other authorization policies to <code>evaluationContext</code>; otherwise, `true` to state no additional evaluation is required by this authorization policy.'\n  overload: System.IdentityModel.Policy.IAuthorizationPolicy.Evaluate*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Policy/IAuthorizationPolicy.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.IdentityModel.Policy.IAuthorizationPolicy.Issuer\n  commentId: P:System.IdentityModel.Policy.IAuthorizationPolicy.Issuer\n  id: Issuer\n  parent: System.IdentityModel.Policy.IAuthorizationPolicy\n  langs:\n  - csharp\n  name: Issuer\n  nameWithType: IAuthorizationPolicy.Issuer\n  fullName: IAuthorizationPolicy.Issuer\n  type: Property\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Policy\n  summary: Gets a claim set that represents the issuer of the authorization policy.\n  syntax:\n    content: public System.IdentityModel.Claims.ClaimSet Issuer { get; }\n    return:\n      type: System.IdentityModel.Claims.ClaimSet\n      description: A <xref href=\"System.IdentityModel.Claims.ClaimSet\"></xref> that represents the issuer of the authorization policy.\n  overload: System.IdentityModel.Policy.IAuthorizationPolicy.Issuer*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Policy/IAuthorizationPolicy.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\nreferences:\n- uid: System.IdentityModel.Policy.IAuthorizationPolicy.Evaluate(System.IdentityModel.Policy.EvaluationContext,System.Object@)\n  parent: System.IdentityModel.Policy.IAuthorizationPolicy\n  isExternal: false\n  name: Evaluate(EvaluationContext, Object)\n  nameWithType: IAuthorizationPolicy.Evaluate(EvaluationContext, Object)\n  fullName: IAuthorizationPolicy.Evaluate(EvaluationContext, Object)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.IdentityModel.Policy.EvaluationContext\n  parent: System.IdentityModel.Policy\n  isExternal: false\n  name: EvaluationContext\n  nameWithType: EvaluationContext\n  fullName: System.IdentityModel.Policy.EvaluationContext\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.IdentityModel.Policy.IAuthorizationPolicy.Issuer\n  parent: System.IdentityModel.Policy.IAuthorizationPolicy\n  isExternal: false\n  name: Issuer\n  nameWithType: IAuthorizationPolicy.Issuer\n  fullName: IAuthorizationPolicy.Issuer\n- uid: System.IdentityModel.Claims.ClaimSet\n  parent: System.IdentityModel.Claims\n  isExternal: false\n  name: ClaimSet\n  nameWithType: ClaimSet\n  fullName: System.IdentityModel.Claims.ClaimSet\n- uid: System.IdentityModel.Policy.IAuthorizationPolicy.Evaluate*\n  parent: System.IdentityModel.Policy.IAuthorizationPolicy\n  isExternal: false\n  name: Evaluate\n  nameWithType: IAuthorizationPolicy.Evaluate\n  fullName: IAuthorizationPolicy.Evaluate\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Policy/IAuthorizationPolicy.xml\n- uid: System.IdentityModel.Policy.IAuthorizationPolicy.Issuer*\n  parent: System.IdentityModel.Policy.IAuthorizationPolicy\n  isExternal: false\n  name: Issuer\n  nameWithType: IAuthorizationPolicy.Issuer\n  fullName: IAuthorizationPolicy.Issuer\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Policy/IAuthorizationPolicy.xml\n- uid: System.IdentityModel.Policy.IAuthorizationComponent\n  parent: System.IdentityModel.Policy\n  isExternal: false\n  name: IAuthorizationComponent\n  nameWithType: IAuthorizationComponent\n  fullName: System.IdentityModel.Policy.IAuthorizationComponent\n"}