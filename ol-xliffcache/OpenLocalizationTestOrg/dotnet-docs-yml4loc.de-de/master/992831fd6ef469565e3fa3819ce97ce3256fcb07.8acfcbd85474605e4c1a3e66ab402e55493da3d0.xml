{"nodes":[{"content":"Represents an immutable regular expression.","nodes":[{"pos":[0,43],"content":"Represents an immutable regular expression.","nodes":[{"content":"Represents an immutable regular expression.","pos":[0,43]}]}],"pos":[6647,6691],"yaml":true},{"content":"> [!NOTE]\n>  To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#System/regex/system/text/regularexpressions/Regex.cs#bbe3b2eb80ae5526). You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/).  \n  \n The <xref:System.Text.RegularExpressions.Regex> class represents the .NET Framework's regular expression engine. It can be used to quickly parse large amounts of text to find specific character patterns; to extract, edit, replace, or delete text substrings; and to add the extracted strings to a collection to generate a report.  \n  \n> [!NOTE]\n>  If your primary interest is to validate a string by determining whether it conforms to a particular pattern, you can use the <xref:System.Configuration.RegexStringValidator?displayProperty=fullName> class.  \n  \n To use regular expressions, you define the pattern that you want to identify in a text stream by using the syntax documented in [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md). Next, you can optionally instantiate a <xref:System.Text.RegularExpressions.Regex> object. Finally, you call a method that performs some operation, such as replacing text that matches the regular expression pattern, or identifying a pattern match.  \n  \n> [!NOTE]\n>  For some common regular expression patterns, see [Regular Expression Examples](~/docs/standard/base-types/regular-expression-examples.md). There are also a number of online libraries of regular expression patterns, such as the one at [Regular-Expressions.info](http://www.regular-expressions.info/examples.html).  \n  \n<a name=\"remarks\"></a> For more information about using the <xref:System.Text.RegularExpressions.Regex> class, see the following sections in this topic:  \n  \n-   [Regex vs. String Methods](#regex_vs_string)  \n  \n-   [Static vs. Instance Methods](#static_vs_instance)  \n  \n-   [Performing Regular Expression Operations](#regex_ops)  \n  \n-   [Defining a Time-Out Value](#define_timeout)  \n  \n For more information about the regular expression language, see [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md) or download and print one of these brochures:  \n  \n [Quick Reference in Word (.docx) format](http://download.microsoft.com/download/D/2/4/D240EBF6-A9BA-4E4F-A63F-AEB6DA0B921C/Regular%20expressions%20quick%20reference.docx)  \n [Quick Reference in PDF (.pdf) format](http://download.microsoft.com/download/D/2/4/D240EBF6-A9BA-4E4F-A63F-AEB6DA0B921C/Regular%20expressions%20quick%20reference.pdf)  \n  \n<a name=\"regex_vs_string\"></a>   \n## Regex vs. String Methods  \n The <xref:System.String?displayProperty=fullName> class includes several search and comparison methods that you can use to perform pattern matching with text. For example, the <xref:System.String.Contains%2A?displayProperty=fullName>, <xref:System.String.EndsWith%2A?displayProperty=fullName>, and <xref:System.String.StartsWith%2A?displayProperty=fullName> methods determine whether a string instance contains a specified substring; and the <xref:System.String.IndexOf%2A?displayProperty=fullName>, <xref:System.String.IndexOfAny%2A?displayProperty=fullName>, <xref:System.String.LastIndexOf%2A?displayProperty=fullName>, and <xref:System.String.LastIndexOfAny%2A?displayProperty=fullName> methods return the starting position of a specified substring in a string. Use the methods of the <xref:System.String?displayProperty=fullName> class when you are searching for a specific string. Use the <xref:System.Text.RegularExpressions.Regex> class when you are searching for a specific pattern in a string. For more information and examples, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md).  \n  \n [Back to Remarks](#remarks)  \n  \n<a name=\"static_vs_instance\"></a>   \n## Static vs. Instance Methods  \n After you define a regular expression pattern, you can provide it to the regular expression engine in either of two ways:  \n  \n-   By instantiating a <xref:System.Text.RegularExpressions.Regex> object that represents the regular expression. To do this, you pass the regular expression pattern to a <xref:System.Text.RegularExpressions.Regex.%23ctor%2A> constructor. A <xref:System.Text.RegularExpressions.Regex> object is immutable; when you instantiate a <xref:System.Text.RegularExpressions.Regex> object with a regular expression, that object's regular expression cannot be changed.  \n  \n-   By supplying both the regular expression and the text to search to a `static` (`Shared` in Visual Basic) <xref:System.Text.RegularExpressions.Regex> method. This enables you to use a regular expression without explicitly creating a <xref:System.Text.RegularExpressions.Regex> object.  \n  \n All <xref:System.Text.RegularExpressions.Regex> pattern identification methods include both static and instance overloads.  \n  \n The regular expression engine must compile a particular pattern before the pattern can be used. Because <xref:System.Text.RegularExpressions.Regex> objects are immutable, this is a one-time procedure that occurs when a <xref:System.Text.RegularExpressions.Regex> class constructor or a static method is called. To eliminate the need to repeatedly compile a single regular expression, the regular expression engine caches the compiled regular expressions used in static method calls. As a result, regular expression pattern-matching methods offer comparable performance for static and instance methods.  \n  \n> [!IMPORTANT]\n>  In the .NET Framework versions 1.0 and 1.1, all compiled regular expressions, whether they were used in instance or static method calls, were cached. Starting with the .NET Framework 2.0, only regular expressions used in static method calls are cached.  \n  \n However, caching can adversely affect performance in the following two cases:  \n  \n-   When you use static method calls with a large number of regular expressions. By default, the regular expression engine caches the 15 most recently used static regular expressions. If your application uses more than 15 static regular expressions, some regular expressions must be recompiled. To prevent this recompilation, you can increase the <xref:System.Text.RegularExpressions.Regex.CacheSize%2A?displayProperty=fullName> property.  \n  \n-   When you instantiate new <xref:System.Text.RegularExpressions.Regex> objects with regular expressions that have previously been compiled. For example, the following code defines a regular expression to locate duplicated words in a text stream. Although the example uses a single regular expression, it instantiates a new <xref:System.Text.RegularExpressions.Regex> object to process each line of text. This results in the recompilation of the regular expression with each iteration of the loop.  \n  \n     [!code-csharp[System.Text.RegularExpressions.Class.Caching#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.class.caching/cs/caching1.cs#1)]\n     [!code-vb[System.Text.RegularExpressions.Class.Caching#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.class.caching/vb/caching1.vb#1)]  \n  \n     To prevent recompilation, you should instantiate a single <xref:System.Text.RegularExpressions.Regex> object that is accessible to all code that requires it, as shown in the following rewritten example.  \n  \n     [!code-csharp[System.Text.RegularExpressions.Class.Caching#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.class.caching/cs/caching1.cs#2)]\n     [!code-vb[System.Text.RegularExpressions.Class.Caching#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.class.caching/vb/caching1.vb#2)]  \n  \n [Back to Remarks](#remarks)  \n  \n<a name=\"regex_ops\"></a>   \n## Performing Regular Expression Operations  \n Whether you decide to instantiate a <xref:System.Text.RegularExpressions.Regex> object and call its methods or call static methods, the <xref:System.Text.RegularExpressions.Regex> class offers the following pattern-matching functionality:  \n  \n-   Validation of a match. You call the <xref:System.Text.RegularExpressions.Regex.IsMatch%2A> method to determine whether a match is present.  \n  \n-   Retrieval of a single match. You call the <xref:System.Text.RegularExpressions.Regex.Match%2A> method to retrieve a <xref:System.Text.RegularExpressions.Match> object that represents the first match in a string or in part of a string. Subsequent matches can be retrieved by calling the <xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=fullName> method.  \n  \n-   Retrieval of all matches. You call the <xref:System.Text.RegularExpressions.Regex.Matches%2A> method to retrieve a <xref:System.Text.RegularExpressions.MatchCollection?displayProperty=fullName> object that represents all the matches found in a string or in part of a string.  \n  \n-   Replacement of matched text. You call the <xref:System.Text.RegularExpressions.Regex.Replace%2A> method to replace matched text. The replacement text can also be defined by a regular expression. In addition, some of the <xref:System.Text.RegularExpressions.Regex.Replace%2A> methods include a <xref:System.Text.RegularExpressions.MatchEvaluator> parameter that enables you to programmatically define the replacement text.  \n  \n-   Creation of a string array that is formed from parts of an input string. You call the <xref:System.Text.RegularExpressions.Regex.Split%2A> method to split an input string at positions that are defined by the regular expression.  \n  \n In addition to its pattern-matching methods, the <xref:System.Text.RegularExpressions.Regex> class includes several special-purpose methods:  \n  \n-   The <xref:System.Text.RegularExpressions.Regex.Escape%2A> method escapes any characters that may be interpreted as regular expression operators in a regular expression or input string.  \n  \n-   The <xref:System.Text.RegularExpressions.Regex.Unescape%2A> method removes these escape characters.  \n  \n-   The <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A> method creates an assembly that contains predefined regular expressions. The .NET Framework contains examples of these special-purpose assemblies in the <xref:System.Web.RegularExpressions?displayProperty=fullName> namespace.  \n  \n [Back to Remarks](#remarks)  \n  \n<a name=\"define_timeout\"></a>   \n## Defining a Time-Out Value  \n The .NET Framework supports a full-featured regular expression language that provides substantial power and flexibility in pattern matching. However, the power and flexibility come at a cost: the risk of poor performance. Regular expressions that perform poorly are surprisingly easy to create. In some cases, regular expression operations that rely on excessive backtracking can appear to stop responding when they process text that nearly matches the regular expression pattern. For more information about the .NET Framework regular expression engine, see [Details of Regular Expression Behavior](~/docs/standard/base-types/details-of-regular-expression-behavior.md). For more information about excessive backtracking, see [Backtracking](~/docs/standard/base-types/backtracking-in-regular-expressions.md).  \n  \n Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can define a time-out interval for regular expression matches. If the regular expression engine cannot identify a match within this time interval, the matching operation throws a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception. In most cases, this prevents the regular expression engine from wasting processing power by trying to match text that nearly matches the regular expression pattern. It also could indicate, however, that the timeout interval has been set too low, or that the current machine load has caused an overall degradation in performance.  \n  \n How you handle the exception depends on the cause of the exception. If the exception occurs because the time-out interval is set too low or because of excessive machine load, you can increase the time-out interval and retry the matching operation. If the exception occurs because the regular expression relies on excessive backtracking, you can assume that a match does not exist, and, optionally, you can log information that will help you modify the regular expression pattern.  \n  \n You can set a time-out interval by calling the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29> constructor when you instantiate a regular expression object. For static methods, you can set a time-out interval by calling an overload of a matching method that has a `matchTimeout` parameter. If you do not set a time-out value explicitly, the default time-out value  is determined as follows:  \n  \n-   By using the application-wide time-out value, if one exists. This can be any time-out value that applies to the application domain in which the <xref:System.Text.RegularExpressions.Regex> object is instantiated or the static method call is made. You can set the application-wide time-out value by calling the <xref:System.AppDomain.SetData%2A?displayProperty=fullName> method to assign the string representation of a <xref:System.TimeSpan> value to the \"REGEX_DEFAULT_MATCH_TIMEOUT\" property.  \n  \n-   By using the value <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout>, if no application-wide time-out value has been set.  \n  \n> [!IMPORTANT]\n>  We recommend that you set a time-out value in all regular expression pattern-matching operations. For more information, see [Best Practices for Regular Expressions](~/docs/standard/base-types/best-practices.md).  \n  \n [Back to Remarks](#remarks)","nodes":[{"pos":[2,432],"content":"[!NOTE]\n To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#System/regex/system/text/regularexpressions/Regex.cs#bbe3b2eb80ae5526). You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/).","leadings":["","> "],"nodes":[{"content":" To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#System/regex/system/text/regularexpressions/Regex.cs#bbe3b2eb80ae5526). You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/).","pos":[8,428],"nodes":[{"content":"To view the .NET Framework source code for this type, see the <bpt id=\"p1\">[</bpt>Reference Source<ept id=\"p1\">](http://referencesource.microsoft.com/#System/regex/system/text/regularexpressions/Regex.cs#bbe3b2eb80ae5526)</ept>.","pos":[1,191],"source":" To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#System/regex/system/text/regularexpressions/Regex.cs#bbe3b2eb80ae5526)."},{"content":"You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see <bpt id=\"p1\">[</bpt>instructions<ept id=\"p1\">](http://referencesource.microsoft.com/)</ept>.","pos":[192,420],"source":" You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/)."}]}]},{"pos":[439,767],"content":"The <xref:System.Text.RegularExpressions.Regex> class represents the .NET Framework's regular expression engine. It can be used to quickly parse large amounts of text to find specific character patterns; to extract, edit, replace, or delete text substrings; and to add the extracted strings to a collection to generate a report.","nodes":[{"content":"The <xref:System.Text.RegularExpressions.Regex> class represents the .NET Framework's regular expression engine. It can be used to quickly parse large amounts of text to find specific character patterns; to extract, edit, replace, or delete text substrings; and to add the extracted strings to a collection to generate a report.","pos":[0,328],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex&gt;</ph> class represents the .NET Framework's regular expression engine.","pos":[0,112],"source":"The <xref:System.Text.RegularExpressions.Regex> class represents the .NET Framework's regular expression engine."},{"content":"It can be used to quickly parse large amounts of text to find specific character patterns; to extract, edit, replace, or delete text substrings; and to add the extracted strings to a collection to generate a report.","pos":[113,328]}]}]},{"pos":[775,991],"content":"[!NOTE]\n If your primary interest is to validate a string by determining whether it conforms to a particular pattern, you can use the <xref:System.Configuration.RegexStringValidator?displayProperty=fullName> class.","leadings":["","> "],"nodes":[{"content":"If your primary interest is to validate a string by determining whether it conforms to a particular pattern, you can use the <ph id=\"ph1\">&lt;xref:System.Configuration.RegexStringValidator?displayProperty=fullName&gt;</ph> class.","pos":[9,214],"source":" If your primary interest is to validate a string by determining whether it conforms to a particular pattern, you can use the <xref:System.Configuration.RegexStringValidator?displayProperty=fullName> class."}]},{"pos":[998,1497],"content":"To use regular expressions, you define the pattern that you want to identify in a text stream by using the syntax documented in [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md). Next, you can optionally instantiate a <xref:System.Text.RegularExpressions.Regex> object. Finally, you call a method that performs some operation, such as replacing text that matches the regular expression pattern, or identifying a pattern match.","nodes":[{"content":"To use regular expressions, you define the pattern that you want to identify in a text stream by using the syntax documented in <bpt id=\"p1\">[</bpt>Regular Expression Language - Quick Reference<ept id=\"p1\">](~/docs/standard/base-types/regular-expression-language-quick-reference.md)</ept>.","pos":[0,251],"source":"To use regular expressions, you define the pattern that you want to identify in a text stream by using the syntax documented in [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md)."},{"content":"Next, you can optionally instantiate a <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex&gt;</ph> object.","pos":[252,342],"source":" Next, you can optionally instantiate a <xref:System.Text.RegularExpressions.Regex> object."},{"content":"Finally, you call a method that performs some operation, such as replacing text that matches the regular expression pattern, or identifying a pattern match.","pos":[343,499]}]},{"pos":[1505,1828],"content":"[!NOTE]\n For some common regular expression patterns, see [Regular Expression Examples](~/docs/standard/base-types/regular-expression-examples.md). There are also a number of online libraries of regular expression patterns, such as the one at [Regular-Expressions.info](http://www.regular-expressions.info/examples.html).","leadings":["","> "],"nodes":[{"content":" For some common regular expression patterns, see [Regular Expression Examples](~/docs/standard/base-types/regular-expression-examples.md). There are also a number of online libraries of regular expression patterns, such as the one at [Regular-Expressions.info](http://www.regular-expressions.info/examples.html).","pos":[8,321],"nodes":[{"content":"For some common regular expression patterns, see <bpt id=\"p1\">[</bpt>Regular Expression Examples<ept id=\"p1\">](~/docs/standard/base-types/regular-expression-examples.md)</ept>.","pos":[1,139],"source":" For some common regular expression patterns, see [Regular Expression Examples](~/docs/standard/base-types/regular-expression-examples.md)."},{"content":"There are also a number of online libraries of regular expression patterns, such as the one at <bpt id=\"p1\">[</bpt>Regular-Expressions.info<ept id=\"p1\">](http://www.regular-expressions.info/examples.html)</ept>.","pos":[140,313],"source":" There are also a number of online libraries of regular expression patterns, such as the one at [Regular-Expressions.info](http://www.regular-expressions.info/examples.html)."}]}]},{"pos":[1834,1986],"content":"<bpt id=\"p1\">&lt;a name=\"remarks\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept> For more information about using the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex&gt;</ph> class, see the following sections in this topic:","source":"<a name=\"remarks\"></a> For more information about using the <xref:System.Text.RegularExpressions.Regex> class, see the following sections in this topic:"},{"pos":[1996,2040],"content":"<bpt id=\"p1\">[</bpt>Regex vs. String Methods<ept id=\"p1\">](#regex_vs_string)</ept>","source":"[Regex vs. String Methods](#regex_vs_string)"},{"pos":[2050,2100],"content":"<bpt id=\"p1\">[</bpt>Static vs. Instance Methods<ept id=\"p1\">](#static_vs_instance)</ept>","source":"[Static vs. Instance Methods](#static_vs_instance)"},{"pos":[2110,2164],"content":"<bpt id=\"p1\">[</bpt>Performing Regular Expression Operations<ept id=\"p1\">](#regex_ops)</ept>","source":"[Performing Regular Expression Operations](#regex_ops)"},{"pos":[2174,2218],"content":"<bpt id=\"p1\">[</bpt>Defining a Time-Out Value<ept id=\"p1\">](#define_timeout)</ept>","source":"[Defining a Time-Out Value](#define_timeout)"},{"pos":[2225,2457],"content":"For more information about the regular expression language, see <bpt id=\"p1\">[</bpt>Regular Expression Language - Quick Reference<ept id=\"p1\">](~/docs/standard/base-types/regular-expression-language-quick-reference.md)</ept> or download and print one of these brochures:","source":"For more information about the regular expression language, see [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md) or download and print one of these brochures:"},{"pos":[2464,2805],"content":"[Quick Reference in Word (.docx) format](http://download.microsoft.com/download/D/2/4/D240EBF6-A9BA-4E4F-A63F-AEB6DA0B921C/Regular%20expressions%20quick%20reference.docx)  \n[Quick Reference in PDF (.pdf) format](http://download.microsoft.com/download/D/2/4/D240EBF6-A9BA-4E4F-A63F-AEB6DA0B921C/Regular%20expressions%20quick%20reference.pdf)","leadings":[""," "],"nodes":[{"content":"<bpt id=\"p1\">[</bpt>Quick Reference in Word (.docx) format<ept id=\"p1\">](http://download.microsoft.com/download/D/2/4/D240EBF6-A9BA-4E4F-A63F-AEB6DA0B921C/Regular%20expressions%20quick%20reference.docx)</ept>","pos":[0,170],"source":"[Quick Reference in Word (.docx) format](http://download.microsoft.com/download/D/2/4/D240EBF6-A9BA-4E4F-A63F-AEB6DA0B921C/Regular%20expressions%20quick%20reference.docx)"},{"content":"<bpt id=\"p1\">[</bpt>Quick Reference in PDF (.pdf) format<ept id=\"p1\">](http://download.microsoft.com/download/D/2/4/D240EBF6-A9BA-4E4F-A63F-AEB6DA0B921C/Regular%20expressions%20quick%20reference.pdf)</ept>","pos":[173,340],"source":"[Quick Reference in PDF (.pdf) format](http://download.microsoft.com/download/D/2/4/D240EBF6-A9BA-4E4F-A63F-AEB6DA0B921C/Regular%20expressions%20quick%20reference.pdf)"}]},{"pos":[2848,2872],"content":"Regex vs. String Methods","linkify":"Regex vs. String Methods","nodes":[{"content":"Regex vs. String Methods","pos":[0,24]}]},{"pos":[2876,4007],"content":"The <xref:System.String?displayProperty=fullName> class includes several search and comparison methods that you can use to perform pattern matching with text. For example, the <xref:System.String.Contains%2A?displayProperty=fullName>, <xref:System.String.EndsWith%2A?displayProperty=fullName>, and <xref:System.String.StartsWith%2A?displayProperty=fullName> methods determine whether a string instance contains a specified substring; and the <xref:System.String.IndexOf%2A?displayProperty=fullName>, <xref:System.String.IndexOfAny%2A?displayProperty=fullName>, <xref:System.String.LastIndexOf%2A?displayProperty=fullName>, and <xref:System.String.LastIndexOfAny%2A?displayProperty=fullName> methods return the starting position of a specified substring in a string. Use the methods of the <xref:System.String?displayProperty=fullName> class when you are searching for a specific string. Use the <xref:System.Text.RegularExpressions.Regex> class when you are searching for a specific pattern in a string. For more information and examples, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md).","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.String?displayProperty=fullName&gt;</ph> class includes several search and comparison methods that you can use to perform pattern matching with text.","pos":[0,158],"source":"The <xref:System.String?displayProperty=fullName> class includes several search and comparison methods that you can use to perform pattern matching with text."},{"content":"For example, the <ph id=\"ph1\">&lt;xref:System.String.Contains%2A?displayProperty=fullName&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.String.EndsWith%2A?displayProperty=fullName&gt;</ph>, and <ph id=\"ph3\">&lt;xref:System.String.StartsWith%2A?displayProperty=fullName&gt;</ph> methods determine whether a string instance contains a specified substring; and the <ph id=\"ph4\">&lt;xref:System.String.IndexOf%2A?displayProperty=fullName&gt;</ph>, <ph id=\"ph5\">&lt;xref:System.String.IndexOfAny%2A?displayProperty=fullName&gt;</ph>, <ph id=\"ph6\">&lt;xref:System.String.LastIndexOf%2A?displayProperty=fullName&gt;</ph>, and <ph id=\"ph7\">&lt;xref:System.String.LastIndexOfAny%2A?displayProperty=fullName&gt;</ph> methods return the starting position of a specified substring in a string.","pos":[159,765],"source":" For example, the <xref:System.String.Contains%2A?displayProperty=fullName>, <xref:System.String.EndsWith%2A?displayProperty=fullName>, and <xref:System.String.StartsWith%2A?displayProperty=fullName> methods determine whether a string instance contains a specified substring; and the <xref:System.String.IndexOf%2A?displayProperty=fullName>, <xref:System.String.IndexOfAny%2A?displayProperty=fullName>, <xref:System.String.LastIndexOf%2A?displayProperty=fullName>, and <xref:System.String.LastIndexOfAny%2A?displayProperty=fullName> methods return the starting position of a specified substring in a string."},{"content":"Use the methods of the <ph id=\"ph1\">&lt;xref:System.String?displayProperty=fullName&gt;</ph> class when you are searching for a specific string.","pos":[766,886],"source":" Use the methods of the <xref:System.String?displayProperty=fullName> class when you are searching for a specific string."},{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex&gt;</ph> class when you are searching for a specific pattern in a string.","pos":[887,1003],"source":" Use the <xref:System.Text.RegularExpressions.Regex> class when you are searching for a specific pattern in a string."},{"content":"For more information and examples, see <bpt id=\"p1\">[</bpt>.NET Framework Regular Expressions<ept id=\"p1\">](~/docs/standard/base-types/regular-expressions.md)</ept>.","pos":[1004,1131],"source":" For more information and examples, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md)."}]},{"pos":[4014,4041],"content":"<bpt id=\"p1\">[</bpt>Back to Remarks<ept id=\"p1\">](#remarks)</ept>","source":"[Back to Remarks](#remarks)"},{"pos":[4087,4114],"content":"Static vs. Instance Methods","linkify":"Static vs. Instance Methods","nodes":[{"content":"Static vs. Instance Methods","pos":[0,27]}]},{"pos":[4118,4239],"content":"After you define a regular expression pattern, you can provide it to the regular expression engine in either of two ways:","nodes":[{"content":"After you define a regular expression pattern, you can provide it to the regular expression engine in either of two ways:","pos":[0,121]}]},{"pos":[4249,4703],"content":"By instantiating a <xref:System.Text.RegularExpressions.Regex> object that represents the regular expression. To do this, you pass the regular expression pattern to a <xref:System.Text.RegularExpressions.Regex.%23ctor%2A> constructor. A <xref:System.Text.RegularExpressions.Regex> object is immutable; when you instantiate a <xref:System.Text.RegularExpressions.Regex> object with a regular expression, that object's regular expression cannot be changed.","nodes":[{"content":"By instantiating a <xref:System.Text.RegularExpressions.Regex> object that represents the regular expression. To do this, you pass the regular expression pattern to a <xref:System.Text.RegularExpressions.Regex.%23ctor%2A> constructor. A <xref:System.Text.RegularExpressions.Regex> object is immutable; when you instantiate a <xref:System.Text.RegularExpressions.Regex> object with a regular expression, that object's regular expression cannot be changed.","pos":[0,454],"nodes":[{"content":"By instantiating a <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex&gt;</ph> object that represents the regular expression.","pos":[0,109],"source":"By instantiating a <xref:System.Text.RegularExpressions.Regex> object that represents the regular expression."},{"content":"To do this, you pass the regular expression pattern to a <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.%23ctor%2A&gt;</ph> constructor.","pos":[110,234],"source":" To do this, you pass the regular expression pattern to a <xref:System.Text.RegularExpressions.Regex.%23ctor%2A> constructor."},{"content":"A <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex&gt;</ph> object is immutable; when you instantiate a <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.Regex&gt;</ph> object with a regular expression, that object's regular expression cannot be changed.","pos":[235,454],"source":" A <xref:System.Text.RegularExpressions.Regex> object is immutable; when you instantiate a <xref:System.Text.RegularExpressions.Regex> object with a regular expression, that object's regular expression cannot be changed."}]}]},{"pos":[4713,4996],"content":"By supplying both the regular expression and the text to search to a `static` (`Shared` in Visual Basic) <xref:System.Text.RegularExpressions.Regex> method. This enables you to use a regular expression without explicitly creating a <xref:System.Text.RegularExpressions.Regex> object.","nodes":[{"content":"By supplying both the regular expression and the text to search to a <ph id=\"ph1\">`static`</ph> (<ph id=\"ph2\">`Shared`</ph> in Visual Basic) <ph id=\"ph3\">&lt;xref:System.Text.RegularExpressions.Regex&gt;</ph> method.","pos":[0,156],"source":"By supplying both the regular expression and the text to search to a `static` (`Shared` in Visual Basic) <xref:System.Text.RegularExpressions.Regex> method."},{"content":"This enables you to use a regular expression without explicitly creating a <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex&gt;</ph> object.","pos":[157,283],"source":" This enables you to use a regular expression without explicitly creating a <xref:System.Text.RegularExpressions.Regex> object."}]},{"pos":[5003,5125],"content":"All <xref:System.Text.RegularExpressions.Regex> pattern identification methods include both static and instance overloads.","nodes":[{"content":"All <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex&gt;</ph> pattern identification methods include both static and instance overloads.","pos":[0,122],"source":"All <xref:System.Text.RegularExpressions.Regex> pattern identification methods include both static and instance overloads."}]},{"pos":[5132,5733],"content":"The regular expression engine must compile a particular pattern before the pattern can be used. Because <xref:System.Text.RegularExpressions.Regex> objects are immutable, this is a one-time procedure that occurs when a <xref:System.Text.RegularExpressions.Regex> class constructor or a static method is called. To eliminate the need to repeatedly compile a single regular expression, the regular expression engine caches the compiled regular expressions used in static method calls. As a result, regular expression pattern-matching methods offer comparable performance for static and instance methods.","nodes":[{"content":"The regular expression engine must compile a particular pattern before the pattern can be used. Because <xref:System.Text.RegularExpressions.Regex> objects are immutable, this is a one-time procedure that occurs when a <xref:System.Text.RegularExpressions.Regex> class constructor or a static method is called. To eliminate the need to repeatedly compile a single regular expression, the regular expression engine caches the compiled regular expressions used in static method calls. As a result, regular expression pattern-matching methods offer comparable performance for static and instance methods.","pos":[0,601],"nodes":[{"content":"The regular expression engine must compile a particular pattern before the pattern can be used.","pos":[0,95]},{"content":"Because <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex&gt;</ph> objects are immutable, this is a one-time procedure that occurs when a <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.Regex&gt;</ph> class constructor or a static method is called.","pos":[96,310],"source":" Because <xref:System.Text.RegularExpressions.Regex> objects are immutable, this is a one-time procedure that occurs when a <xref:System.Text.RegularExpressions.Regex> class constructor or a static method is called."},{"content":"To eliminate the need to repeatedly compile a single regular expression, the regular expression engine caches the compiled regular expressions used in static method calls.","pos":[311,482]},{"content":"As a result, regular expression pattern-matching methods offer comparable performance for static and instance methods.","pos":[483,601]}]}]},{"pos":[5741,6009],"content":"[!IMPORTANT]\n In the .NET Framework versions 1.0 and 1.1, all compiled regular expressions, whether they were used in instance or static method calls, were cached. Starting with the .NET Framework 2.0, only regular expressions used in static method calls are cached.","leadings":["","> "],"nodes":[{"content":" In the .NET Framework versions 1.0 and 1.1, all compiled regular expressions, whether they were used in instance or static method calls, were cached. Starting with the .NET Framework 2.0, only regular expressions used in static method calls are cached.","pos":[13,266],"nodes":[{"content":"In the .NET Framework versions 1.0 and 1.1, all compiled regular expressions, whether they were used in instance or static method calls, were cached.","pos":[1,150]},{"content":"Starting with the .NET Framework 2.0, only regular expressions used in static method calls are cached.","pos":[151,253]}]}]},{"pos":[6016,6093],"content":"However, caching can adversely affect performance in the following two cases:","nodes":[{"content":"However, caching can adversely affect performance in the following two cases:","pos":[0,77]}]},{"pos":[6103,6537],"content":"When you use static method calls with a large number of regular expressions. By default, the regular expression engine caches the 15 most recently used static regular expressions. If your application uses more than 15 static regular expressions, some regular expressions must be recompiled. To prevent this recompilation, you can increase the <xref:System.Text.RegularExpressions.Regex.CacheSize%2A?displayProperty=fullName> property.","nodes":[{"content":"When you use static method calls with a large number of regular expressions. By default, the regular expression engine caches the 15 most recently used static regular expressions. If your application uses more than 15 static regular expressions, some regular expressions must be recompiled. To prevent this recompilation, you can increase the <xref:System.Text.RegularExpressions.Regex.CacheSize%2A?displayProperty=fullName> property.","pos":[0,434],"nodes":[{"content":"When you use static method calls with a large number of regular expressions.","pos":[0,76]},{"content":"By default, the regular expression engine caches the 15 most recently used static regular expressions.","pos":[77,179]},{"content":"If your application uses more than 15 static regular expressions, some regular expressions must be recompiled.","pos":[180,290]},{"content":"To prevent this recompilation, you can increase the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.CacheSize%2A?displayProperty=fullName&gt;</ph> property.","pos":[291,434],"source":" To prevent this recompilation, you can increase the <xref:System.Text.RegularExpressions.Regex.CacheSize%2A?displayProperty=fullName> property."}]}]},{"pos":[6547,7041],"content":"When you instantiate new <xref:System.Text.RegularExpressions.Regex> objects with regular expressions that have previously been compiled. For example, the following code defines a regular expression to locate duplicated words in a text stream. Although the example uses a single regular expression, it instantiates a new <xref:System.Text.RegularExpressions.Regex> object to process each line of text. This results in the recompilation of the regular expression with each iteration of the loop.","nodes":[{"content":"When you instantiate new <xref:System.Text.RegularExpressions.Regex> objects with regular expressions that have previously been compiled. For example, the following code defines a regular expression to locate duplicated words in a text stream. Although the example uses a single regular expression, it instantiates a new <xref:System.Text.RegularExpressions.Regex> object to process each line of text. This results in the recompilation of the regular expression with each iteration of the loop.","pos":[0,494],"nodes":[{"content":"When you instantiate new <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex&gt;</ph> objects with regular expressions that have previously been compiled.","pos":[0,137],"source":"When you instantiate new <xref:System.Text.RegularExpressions.Regex> objects with regular expressions that have previously been compiled."},{"content":"For example, the following code defines a regular expression to locate duplicated words in a text stream.","pos":[138,243]},{"content":"Although the example uses a single regular expression, it instantiates a new <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex&gt;</ph> object to process each line of text.","pos":[244,401],"source":" Although the example uses a single regular expression, it instantiates a new <xref:System.Text.RegularExpressions.Regex> object to process each line of text."},{"content":"This results in the recompilation of the regular expression with each iteration of the loop.","pos":[402,494]}]}]},{"pos":[7052,7407],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Text.RegularExpressions.Class.Caching#1<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.class.caching/cs/caching1.cs#1)</ept><ept id=\"p1\">]</ept>  <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Text.RegularExpressions.Class.Caching#1<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.class.caching/vb/caching1.vb#1)</ept><ept id=\"p3\">]</ept>","leadings":["","    "],"source":"[!code-csharp[System.Text.RegularExpressions.Class.Caching#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.class.caching/cs/caching1.cs#1)]\n [!code-vb[System.Text.RegularExpressions.Class.Caching#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.class.caching/vb/caching1.vb#1)]"},{"pos":[7418,7620],"content":"To prevent recompilation, you should instantiate a single <xref:System.Text.RegularExpressions.Regex> object that is accessible to all code that requires it, as shown in the following rewritten example.","nodes":[{"content":"To prevent recompilation, you should instantiate a single <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex&gt;</ph> object that is accessible to all code that requires it, as shown in the following rewritten example.","pos":[0,202],"source":"To prevent recompilation, you should instantiate a single <xref:System.Text.RegularExpressions.Regex> object that is accessible to all code that requires it, as shown in the following rewritten example."}]},{"pos":[7631,7986],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Text.RegularExpressions.Class.Caching#2<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.class.caching/cs/caching1.cs#2)</ept><ept id=\"p1\">]</ept>  <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Text.RegularExpressions.Class.Caching#2<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.class.caching/vb/caching1.vb#2)</ept><ept id=\"p3\">]</ept>","leadings":["","    "],"source":"[!code-csharp[System.Text.RegularExpressions.Class.Caching#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.class.caching/cs/caching1.cs#2)]\n [!code-vb[System.Text.RegularExpressions.Class.Caching#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.class.caching/vb/caching1.vb#2)]"},{"pos":[7993,8020],"content":"<bpt id=\"p1\">[</bpt>Back to Remarks<ept id=\"p1\">](#remarks)</ept>","source":"[Back to Remarks](#remarks)"},{"pos":[8057,8097],"content":"Performing Regular Expression Operations","linkify":"Performing Regular Expression Operations","nodes":[{"content":"Performing Regular Expression Operations","pos":[0,40]}]},{"pos":[8101,8339],"content":"Whether you decide to instantiate a <xref:System.Text.RegularExpressions.Regex> object and call its methods or call static methods, the <xref:System.Text.RegularExpressions.Regex> class offers the following pattern-matching functionality:","nodes":[{"content":"Whether you decide to instantiate a <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex&gt;</ph> object and call its methods or call static methods, the <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.Regex&gt;</ph> class offers the following pattern-matching functionality:","pos":[0,238],"source":"Whether you decide to instantiate a <xref:System.Text.RegularExpressions.Regex> object and call its methods or call static methods, the <xref:System.Text.RegularExpressions.Regex> class offers the following pattern-matching functionality:"}]},{"pos":[8349,8487],"content":"Validation of a match. You call the <xref:System.Text.RegularExpressions.Regex.IsMatch%2A> method to determine whether a match is present.","nodes":[{"content":"Validation of a match. You call the <xref:System.Text.RegularExpressions.Regex.IsMatch%2A> method to determine whether a match is present.","pos":[0,138],"nodes":[{"content":"Validation of a match.","pos":[0,22]},{"content":"You call the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.IsMatch%2A&gt;</ph> method to determine whether a match is present.","pos":[23,138],"source":" You call the <xref:System.Text.RegularExpressions.Regex.IsMatch%2A> method to determine whether a match is present."}]}]},{"pos":[8497,8872],"content":"Retrieval of a single match. You call the <xref:System.Text.RegularExpressions.Regex.Match%2A> method to retrieve a <xref:System.Text.RegularExpressions.Match> object that represents the first match in a string or in part of a string. Subsequent matches can be retrieved by calling the <xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=fullName> method.","nodes":[{"content":"Retrieval of a single match. You call the <xref:System.Text.RegularExpressions.Regex.Match%2A> method to retrieve a <xref:System.Text.RegularExpressions.Match> object that represents the first match in a string or in part of a string. Subsequent matches can be retrieved by calling the <xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=fullName> method.","pos":[0,375],"nodes":[{"content":"Retrieval of a single match.","pos":[0,28]},{"content":"You call the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.Match%2A&gt;</ph> method to retrieve a <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.Match&gt;</ph> object that represents the first match in a string or in part of a string.","pos":[29,234],"source":" You call the <xref:System.Text.RegularExpressions.Regex.Match%2A> method to retrieve a <xref:System.Text.RegularExpressions.Match> object that represents the first match in a string or in part of a string."},{"content":"Subsequent matches can be retrieved by calling the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=fullName&gt;</ph> method.","pos":[235,375],"source":" Subsequent matches can be retrieved by calling the <xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=fullName> method."}]}]},{"pos":[8882,9156],"content":"Retrieval of all matches. You call the <xref:System.Text.RegularExpressions.Regex.Matches%2A> method to retrieve a <xref:System.Text.RegularExpressions.MatchCollection?displayProperty=fullName> object that represents all the matches found in a string or in part of a string.","nodes":[{"content":"Retrieval of all matches. You call the <xref:System.Text.RegularExpressions.Regex.Matches%2A> method to retrieve a <xref:System.Text.RegularExpressions.MatchCollection?displayProperty=fullName> object that represents all the matches found in a string or in part of a string.","pos":[0,274],"nodes":[{"content":"Retrieval of all matches.","pos":[0,25]},{"content":"You call the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.Matches%2A&gt;</ph> method to retrieve a <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.MatchCollection?displayProperty=fullName&gt;</ph> object that represents all the matches found in a string or in part of a string.","pos":[26,274],"source":" You call the <xref:System.Text.RegularExpressions.Regex.Matches%2A> method to retrieve a <xref:System.Text.RegularExpressions.MatchCollection?displayProperty=fullName> object that represents all the matches found in a string or in part of a string."}]}]},{"pos":[9166,9587],"content":"Replacement of matched text. You call the <xref:System.Text.RegularExpressions.Regex.Replace%2A> method to replace matched text. The replacement text can also be defined by a regular expression. In addition, some of the <xref:System.Text.RegularExpressions.Regex.Replace%2A> methods include a <xref:System.Text.RegularExpressions.MatchEvaluator> parameter that enables you to programmatically define the replacement text.","nodes":[{"content":"Replacement of matched text. You call the <xref:System.Text.RegularExpressions.Regex.Replace%2A> method to replace matched text. The replacement text can also be defined by a regular expression. In addition, some of the <xref:System.Text.RegularExpressions.Regex.Replace%2A> methods include a <xref:System.Text.RegularExpressions.MatchEvaluator> parameter that enables you to programmatically define the replacement text.","pos":[0,421],"nodes":[{"content":"Replacement of matched text.","pos":[0,28]},{"content":"You call the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.Replace%2A&gt;</ph> method to replace matched text.","pos":[29,128],"source":" You call the <xref:System.Text.RegularExpressions.Regex.Replace%2A> method to replace matched text."},{"content":"The replacement text can also be defined by a regular expression.","pos":[129,194]},{"content":"In addition, some of the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.Replace%2A&gt;</ph> methods include a <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.MatchEvaluator&gt;</ph> parameter that enables you to programmatically define the replacement text.","pos":[195,421],"source":" In addition, some of the <xref:System.Text.RegularExpressions.Regex.Replace%2A> methods include a <xref:System.Text.RegularExpressions.MatchEvaluator> parameter that enables you to programmatically define the replacement text."}]}]},{"pos":[9597,9824],"content":"Creation of a string array that is formed from parts of an input string. You call the <xref:System.Text.RegularExpressions.Regex.Split%2A> method to split an input string at positions that are defined by the regular expression.","nodes":[{"content":"Creation of a string array that is formed from parts of an input string. You call the <xref:System.Text.RegularExpressions.Regex.Split%2A> method to split an input string at positions that are defined by the regular expression.","pos":[0,227],"nodes":[{"content":"Creation of a string array that is formed from parts of an input string.","pos":[0,72]},{"content":"You call the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.Split%2A&gt;</ph> method to split an input string at positions that are defined by the regular expression.","pos":[73,227],"source":" You call the <xref:System.Text.RegularExpressions.Regex.Split%2A> method to split an input string at positions that are defined by the regular expression."}]}]},{"pos":[9831,9971],"content":"In addition to its pattern-matching methods, the <xref:System.Text.RegularExpressions.Regex> class includes several special-purpose methods:","nodes":[{"content":"In addition to its pattern-matching methods, the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex&gt;</ph> class includes several special-purpose methods:","pos":[0,140],"source":"In addition to its pattern-matching methods, the <xref:System.Text.RegularExpressions.Regex> class includes several special-purpose methods:"}]},{"pos":[9981,10165],"content":"The <xref:System.Text.RegularExpressions.Regex.Escape%2A> method escapes any characters that may be interpreted as regular expression operators in a regular expression or input string.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.Escape%2A&gt;</ph> method escapes any characters that may be interpreted as regular expression operators in a regular expression or input string.","pos":[0,184],"source":"The <xref:System.Text.RegularExpressions.Regex.Escape%2A> method escapes any characters that may be interpreted as regular expression operators in a regular expression or input string."}]},{"pos":[10175,10274],"content":"The <xref:System.Text.RegularExpressions.Regex.Unescape%2A> method removes these escape characters.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.Unescape%2A&gt;</ph> method removes these escape characters.","pos":[0,99],"source":"The <xref:System.Text.RegularExpressions.Regex.Unescape%2A> method removes these escape characters."}]},{"pos":[10284,10578],"content":"The <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A> method creates an assembly that contains predefined regular expressions. The .NET Framework contains examples of these special-purpose assemblies in the <xref:System.Web.RegularExpressions?displayProperty=fullName> namespace.","nodes":[{"content":"The <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A> method creates an assembly that contains predefined regular expressions. The .NET Framework contains examples of these special-purpose assemblies in the <xref:System.Web.RegularExpressions?displayProperty=fullName> namespace.","pos":[0,294],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A&gt;</ph> method creates an assembly that contains predefined regular expressions.","pos":[0,141],"source":"The <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A> method creates an assembly that contains predefined regular expressions."},{"content":"The .NET Framework contains examples of these special-purpose assemblies in the <ph id=\"ph1\">&lt;xref:System.Web.RegularExpressions?displayProperty=fullName&gt;</ph> namespace.","pos":[142,294],"source":" The .NET Framework contains examples of these special-purpose assemblies in the <xref:System.Web.RegularExpressions?displayProperty=fullName> namespace."}]}]},{"pos":[10585,10612],"content":"<bpt id=\"p1\">[</bpt>Back to Remarks<ept id=\"p1\">](#remarks)</ept>","source":"[Back to Remarks](#remarks)"},{"pos":[10654,10679],"content":"Defining a Time-Out Value","linkify":"Defining a Time-Out Value","nodes":[{"content":"Defining a Time-Out Value","pos":[0,25]}]},{"pos":[10683,11490],"content":"The .NET Framework supports a full-featured regular expression language that provides substantial power and flexibility in pattern matching. However, the power and flexibility come at a cost: the risk of poor performance. Regular expressions that perform poorly are surprisingly easy to create. In some cases, regular expression operations that rely on excessive backtracking can appear to stop responding when they process text that nearly matches the regular expression pattern. For more information about the .NET Framework regular expression engine, see [Details of Regular Expression Behavior](~/docs/standard/base-types/details-of-regular-expression-behavior.md). For more information about excessive backtracking, see [Backtracking](~/docs/standard/base-types/backtracking-in-regular-expressions.md).","nodes":[{"content":"The .NET Framework supports a full-featured regular expression language that provides substantial power and flexibility in pattern matching.","pos":[0,140]},{"content":"However, the power and flexibility come at a cost: the risk of poor performance.","pos":[141,221]},{"content":"Regular expressions that perform poorly are surprisingly easy to create.","pos":[222,294]},{"content":"In some cases, regular expression operations that rely on excessive backtracking can appear to stop responding when they process text that nearly matches the regular expression pattern.","pos":[295,480]},{"content":"For more information about the .NET Framework regular expression engine, see <bpt id=\"p1\">[</bpt>Details of Regular Expression Behavior<ept id=\"p1\">](~/docs/standard/base-types/details-of-regular-expression-behavior.md)</ept>.","pos":[481,669],"source":" For more information about the .NET Framework regular expression engine, see [Details of Regular Expression Behavior](~/docs/standard/base-types/details-of-regular-expression-behavior.md)."},{"content":"For more information about excessive backtracking, see <bpt id=\"p1\">[</bpt>Backtracking<ept id=\"p1\">](~/docs/standard/base-types/backtracking-in-regular-expressions.md)</ept>.","pos":[670,807],"source":" For more information about excessive backtracking, see [Backtracking](~/docs/standard/base-types/backtracking-in-regular-expressions.md)."}]},{"pos":[11497,12149],"content":"Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can define a time-out interval for regular expression matches. If the regular expression engine cannot identify a match within this time interval, the matching operation throws a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception. In most cases, this prevents the regular expression engine from wasting processing power by trying to match text that nearly matches the regular expression pattern. It also could indicate, however, that the timeout interval has been set too low, or that the current machine load has caused an overall degradation in performance.","nodes":[{"content":"Starting with the <ph id=\"ph1\">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph>, you can define a time-out interval for regular expression matches.","pos":[0,131],"source":"Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can define a time-out interval for regular expression matches."},{"content":"If the regular expression engine cannot identify a match within this time interval, the matching operation throws a <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.RegexMatchTimeoutException&gt;</ph> exception.","pos":[132,323],"source":" If the regular expression engine cannot identify a match within this time interval, the matching operation throws a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception."},{"content":"In most cases, this prevents the regular expression engine from wasting processing power by trying to match text that nearly matches the regular expression pattern.","pos":[324,488]},{"content":"It also could indicate, however, that the timeout interval has been set too low, or that the current machine load has caused an overall degradation in performance.","pos":[489,652]}]},{"pos":[12156,12635],"content":"How you handle the exception depends on the cause of the exception. If the exception occurs because the time-out interval is set too low or because of excessive machine load, you can increase the time-out interval and retry the matching operation. If the exception occurs because the regular expression relies on excessive backtracking, you can assume that a match does not exist, and, optionally, you can log information that will help you modify the regular expression pattern.","nodes":[{"content":"How you handle the exception depends on the cause of the exception. If the exception occurs because the time-out interval is set too low or because of excessive machine load, you can increase the time-out interval and retry the matching operation. If the exception occurs because the regular expression relies on excessive backtracking, you can assume that a match does not exist, and, optionally, you can log information that will help you modify the regular expression pattern.","pos":[0,479],"nodes":[{"content":"How you handle the exception depends on the cause of the exception.","pos":[0,67]},{"content":"If the exception occurs because the time-out interval is set too low or because of excessive machine load, you can increase the time-out interval and retry the matching operation.","pos":[68,247]},{"content":"If the exception occurs because the regular expression relies on excessive backtracking, you can assume that a match does not exist, and, optionally, you can log information that will help you modify the regular expression pattern.","pos":[248,479]}]}]},{"pos":[12642,13119],"content":"You can set a time-out interval by calling the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29> constructor when you instantiate a regular expression object. For static methods, you can set a time-out interval by calling an overload of a matching method that has a `matchTimeout` parameter. If you do not set a time-out value explicitly, the default time-out value  is determined as follows:","nodes":[{"content":"You can set a time-out interval by calling the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29&gt;</ph> constructor when you instantiate a regular expression object.","pos":[0,243],"source":"You can set a time-out interval by calling the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29> constructor when you instantiate a regular expression object."},{"content":"For static methods, you can set a time-out interval by calling an overload of a matching method that has a <ph id=\"ph1\">`matchTimeout`</ph> parameter.","pos":[244,376],"source":" For static methods, you can set a time-out interval by calling an overload of a matching method that has a `matchTimeout` parameter."},{"content":"If you do not set a time-out value explicitly, the default time-out value  is determined as follows:","pos":[377,477]}]},{"pos":[13129,13621],"content":"By using the application-wide time-out value, if one exists. This can be any time-out value that applies to the application domain in which the <xref:System.Text.RegularExpressions.Regex> object is instantiated or the static method call is made. You can set the application-wide time-out value by calling the <xref:System.AppDomain.SetData%2A?displayProperty=fullName> method to assign the string representation of a <xref:System.TimeSpan> value to the \"REGEX_DEFAULT_MATCH_TIMEOUT\" property.","nodes":[{"content":"By using the application-wide time-out value, if one exists. This can be any time-out value that applies to the application domain in which the <xref:System.Text.RegularExpressions.Regex> object is instantiated or the static method call is made. You can set the application-wide time-out value by calling the <xref:System.AppDomain.SetData%2A?displayProperty=fullName> method to assign the string representation of a <xref:System.TimeSpan> value to the \"REGEX_DEFAULT_MATCH_TIMEOUT\" property.","pos":[0,492],"nodes":[{"content":"By using the application-wide time-out value, if one exists.","pos":[0,60]},{"content":"This can be any time-out value that applies to the application domain in which the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex&gt;</ph> object is instantiated or the static method call is made.","pos":[61,245],"source":" This can be any time-out value that applies to the application domain in which the <xref:System.Text.RegularExpressions.Regex> object is instantiated or the static method call is made."},{"content":"You can set the application-wide time-out value by calling the <ph id=\"ph1\">&lt;xref:System.AppDomain.SetData%2A?displayProperty=fullName&gt;</ph> method to assign the string representation of a <ph id=\"ph2\">&lt;xref:System.TimeSpan&gt;</ph> value to the \"REGEX_DEFAULT_MATCH_TIMEOUT\" property.","pos":[246,492],"source":" You can set the application-wide time-out value by calling the <xref:System.AppDomain.SetData%2A?displayProperty=fullName> method to assign the string representation of a <xref:System.TimeSpan> value to the \"REGEX_DEFAULT_MATCH_TIMEOUT\" property."}]}]},{"pos":[13631,13767],"content":"By using the value <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout>, if no application-wide time-out value has been set.","nodes":[{"content":"By using the value <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout&gt;</ph>, if no application-wide time-out value has been set.","pos":[0,136],"source":"By using the value <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout>, if no application-wide time-out value has been set."}]},{"pos":[13775,14002],"content":"[!IMPORTANT]\n We recommend that you set a time-out value in all regular expression pattern-matching operations. For more information, see [Best Practices for Regular Expressions](~/docs/standard/base-types/best-practices.md).","leadings":["","> "],"nodes":[{"content":" We recommend that you set a time-out value in all regular expression pattern-matching operations. For more information, see [Best Practices for Regular Expressions](~/docs/standard/base-types/best-practices.md).","pos":[13,225],"nodes":[{"content":"We recommend that you set a time-out value in all regular expression pattern-matching operations.","pos":[1,98]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Best Practices for Regular Expressions<ept id=\"p1\">](~/docs/standard/base-types/best-practices.md)</ept>.","pos":[99,212],"source":" For more information, see [Best Practices for Regular Expressions](~/docs/standard/base-types/best-practices.md)."}]}]},{"pos":[14009,14036],"content":"<bpt id=\"p1\">[</bpt>Back to Remarks<ept id=\"p1\">](#remarks)</ept>","source":"[Back to Remarks](#remarks)"}],"pos":[6702,20859],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Text.RegularExpressions.Regex\"></xref> class.","nodes":[{"pos":[0,98],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Text.RegularExpressions.Regex\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.Text.RegularExpressions.Regex\"></xref> class."}],"pos":[27337,27436],"yaml":true},{"content":"Note that this constructor is protected; it can only be called by classes derived from the <xref:System.Text.RegularExpressions.Regex> class.","nodes":[{"pos":[0,141],"content":"Note that this constructor is protected; it can only be called by classes derived from the <xref:System.Text.RegularExpressions.Regex> class.","nodes":[{"content":"Note that this constructor is protected; it can only be called by classes derived from the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex&gt;</ph> class.","pos":[0,141],"source":"Note that this constructor is protected; it can only be called by classes derived from the <xref:System.Text.RegularExpressions.Regex> class."}]}],"pos":[27447,27589],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Text.RegularExpressions.Regex\"></xref> class for the specified regular expression.","nodes":[{"pos":[0,135],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Text.RegularExpressions.Regex\"&gt;&lt;/xref&gt;</ph> class for the specified regular expression.","source":"Initializes a new instance of the <xref href=\"System.Text.RegularExpressions.Regex\"></xref> class for the specified regular expression."}],"pos":[29236,29372],"yaml":true},{"content":"The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match. For more information about regular expressions, see the [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md) topics.  \n  \n Calling the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%29> constructor is equivalent to calling the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%29> constructor with a value of <xref:System.Text.RegularExpressions.RegexOptions.None> for the `options` argument.  \n  \n A <xref:System.Text.RegularExpressions.Regex> object is immutable, which means that it can be used only for the match pattern you define when you create it. However, it can be used any number of times without being recompiled.  \n  \n This constructor instantiates a regular expression object that attempts a case-sensitive match of any alphabetical characters defined in `pattern`. For a case-insensitive match, use the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%29?displayProperty=fullName> constructor.","nodes":[{"pos":[0,399],"content":"The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match. For more information about regular expressions, see the [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md) topics.","nodes":[{"content":"The <ph id=\"ph1\">`pattern`</ph> parameter consists of regular expression language elements that symbolically describe the string to match.","pos":[0,120],"source":"The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match."},{"content":"For more information about regular expressions, see the <bpt id=\"p1\">[</bpt>.NET Framework Regular Expressions<ept id=\"p1\">](~/docs/standard/base-types/regular-expressions.md)</ept> and <bpt id=\"p2\">[</bpt>Regular Expression Language - Quick Reference<ept id=\"p2\">](~/docs/standard/base-types/regular-expression-language-quick-reference.md)</ept> topics.","pos":[121,399],"source":" For more information about regular expressions, see the [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md) topics."}]},{"pos":[406,758],"content":"Calling the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%29&gt;</ph> constructor is equivalent to calling the <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%29&gt;</ph> constructor with a value of <ph id=\"ph3\">&lt;xref:System.Text.RegularExpressions.RegexOptions.None&gt;</ph> for the <ph id=\"ph4\">`options`</ph> argument.","source":"Calling the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%29> constructor is equivalent to calling the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%29> constructor with a value of <xref:System.Text.RegularExpressions.RegexOptions.None> for the `options` argument."},{"pos":[765,991],"content":"A <xref:System.Text.RegularExpressions.Regex> object is immutable, which means that it can be used only for the match pattern you define when you create it. However, it can be used any number of times without being recompiled.","nodes":[{"content":"A <xref:System.Text.RegularExpressions.Regex> object is immutable, which means that it can be used only for the match pattern you define when you create it. However, it can be used any number of times without being recompiled.","pos":[0,226],"nodes":[{"content":"A <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex&gt;</ph> object is immutable, which means that it can be used only for the match pattern you define when you create it.","pos":[0,156],"source":"A <xref:System.Text.RegularExpressions.Regex> object is immutable, which means that it can be used only for the match pattern you define when you create it."},{"content":"However, it can be used any number of times without being recompiled.","pos":[157,226]}]}]},{"pos":[998,1338],"content":"This constructor instantiates a regular expression object that attempts a case-sensitive match of any alphabetical characters defined in `pattern`. For a case-insensitive match, use the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%29?displayProperty=fullName> constructor.","nodes":[{"content":"This constructor instantiates a regular expression object that attempts a case-sensitive match of any alphabetical characters defined in <ph id=\"ph1\">`pattern`</ph>.","pos":[0,147],"source":"This constructor instantiates a regular expression object that attempts a case-sensitive match of any alphabetical characters defined in `pattern`."},{"content":"For a case-insensitive match, use the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%29?displayProperty=fullName&gt;</ph> constructor.","pos":[148,340],"source":" For a case-insensitive match, use the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%29?displayProperty=fullName> constructor."}]}],"pos":[29383,30730],"yaml":true,"extradata":"MT"},{"content":"The regular expression pattern to match.","nodes":[{"pos":[0,40],"content":"The regular expression pattern to match.","nodes":[{"content":"The regular expression pattern to match.","pos":[0,40]}]}],"pos":[31781,31822],"yaml":true},{"content":"A regular expression parsing error occurred.","nodes":[{"pos":[0,44],"content":"A regular expression parsing error occurred.","nodes":[{"content":"A regular expression parsing error occurred.","pos":[0,44]}]}],"pos":[31986,32031],"yaml":true},{"content":"<code>pattern</code> is `null`.","nodes":[{"pos":[0,31],"content":"<ph id=\"ph1\">&lt;code&gt;pattern&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>pattern</code> is `null`."}],"pos":[32133,32165],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Text.RegularExpressions.Regex\"></xref> class by using serialized data.","nodes":[{"pos":[0,123],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Text.RegularExpressions.Regex\"&gt;&lt;/xref&gt;</ph> class by using serialized data.","source":"Initializes a new instance of the <xref href=\"System.Text.RegularExpressions.Regex\"></xref> class by using serialized data."}],"pos":[34001,34125],"yaml":true},{"content":"The object that contains a serialized pattern and <xref href=\"System.Text.RegularExpressions.RegexOptions\"></xref> information.","nodes":[{"pos":[0,127],"content":"The object that contains a serialized pattern and <ph id=\"ph1\">&lt;xref href=\"System.Text.RegularExpressions.RegexOptions\"&gt;&lt;/xref&gt;</ph> information.","source":"The object that contains a serialized pattern and <xref href=\"System.Text.RegularExpressions.RegexOptions\"></xref> information."}],"pos":[34383,34511],"yaml":true},{"content":"The destination for this serialization. (This parameter is not used; specify `null`.)","nodes":[{"pos":[0,85],"content":"The destination for this serialization. (This parameter is not used; specify `null`.)","nodes":[{"content":"The destination for this serialization.","pos":[0,39]},{"content":"(This parameter is not used; specify <ph id=\"ph1\">`null`</ph>.)","pos":[40,85],"source":" (This parameter is not used; specify `null`.)"}]}],"pos":[34606,34692],"yaml":true},{"content":"A regular expression parsing error occurred.","nodes":[{"pos":[0,44],"content":"A regular expression parsing error occurred.","nodes":[{"content":"A regular expression parsing error occurred.","pos":[0,44]}]}],"pos":[34856,34901],"yaml":true},{"content":"The pattern that <code>info</code> contains is `null`.","nodes":[{"pos":[0,54],"content":"The pattern that <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">info</ph><ept id=\"p1\">&lt;/code&gt;</ept> contains is <ph id=\"ph2\">`null`</ph>.","source":"The pattern that <code>info</code> contains is `null`."}],"pos":[35003,35058],"yaml":true},{"content":"<code>info</code> contains an invalid <xref href=\"System.Text.RegularExpressions.RegexOptions\"></xref> flag.","nodes":[{"pos":[0,108],"content":"<ph id=\"ph1\">&lt;code&gt;info&lt;/code&gt;</ph> contains an invalid <ph id=\"ph2\">&lt;xref href=\"System.Text.RegularExpressions.RegexOptions\"&gt;&lt;/xref&gt;</ph> flag.","source":"<code>info</code> contains an invalid <xref href=\"System.Text.RegularExpressions.RegexOptions\"></xref> flag."}],"pos":[35172,35281],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Text.RegularExpressions.Regex\"></xref> class for the specified regular expression, with options that modify the pattern.","nodes":[{"pos":[0,173],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Text.RegularExpressions.Regex\"&gt;&lt;/xref&gt;</ph> class for the specified regular expression, with options that modify the pattern.","source":"Initializes a new instance of the <xref href=\"System.Text.RegularExpressions.Regex\"></xref> class for the specified regular expression, with options that modify the pattern."}],"pos":[36663,36837],"yaml":true},{"content":"The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match. For more information about regular expressions, see the [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md) topics.  \n  \n A <xref:System.Text.RegularExpressions.Regex> object is immutable, which means that it can be used only for the match parameters you define when you create it. However, it can be used any number of times without being recompiled.","nodes":[{"pos":[0,399],"content":"The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match. For more information about regular expressions, see the [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md) topics.","nodes":[{"content":"The <ph id=\"ph1\">`pattern`</ph> parameter consists of regular expression language elements that symbolically describe the string to match.","pos":[0,120],"source":"The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match."},{"content":"For more information about regular expressions, see the <bpt id=\"p1\">[</bpt>.NET Framework Regular Expressions<ept id=\"p1\">](~/docs/standard/base-types/regular-expressions.md)</ept> and <bpt id=\"p2\">[</bpt>Regular Expression Language - Quick Reference<ept id=\"p2\">](~/docs/standard/base-types/regular-expression-language-quick-reference.md)</ept> topics.","pos":[121,399],"source":" For more information about regular expressions, see the [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md) topics."}]},{"pos":[406,635],"content":"A <xref:System.Text.RegularExpressions.Regex> object is immutable, which means that it can be used only for the match parameters you define when you create it. However, it can be used any number of times without being recompiled.","nodes":[{"content":"A <xref:System.Text.RegularExpressions.Regex> object is immutable, which means that it can be used only for the match parameters you define when you create it. However, it can be used any number of times without being recompiled.","pos":[0,229],"nodes":[{"content":"A <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex&gt;</ph> object is immutable, which means that it can be used only for the match parameters you define when you create it.","pos":[0,159],"source":"A <xref:System.Text.RegularExpressions.Regex> object is immutable, which means that it can be used only for the match parameters you define when you create it."},{"content":"However, it can be used any number of times without being recompiled.","pos":[160,229]}]}]}],"pos":[36848,37488],"yaml":true,"extradata":"MT"},{"content":"The regular expression pattern to match.","nodes":[{"pos":[0,40],"content":"The regular expression pattern to match.","nodes":[{"content":"The regular expression pattern to match.","pos":[0,40]}]}],"pos":[38407,38448],"yaml":true},{"content":"A bitwise combination of the enumeration values that modify the regular expression.","nodes":[{"pos":[0,83],"content":"A bitwise combination of the enumeration values that modify the regular expression.","nodes":[{"content":"A bitwise combination of the enumeration values that modify the regular expression.","pos":[0,83]}]}],"pos":[38541,38625],"yaml":true},{"content":"A regular expression parsing error occurred.","nodes":[{"pos":[0,44],"content":"A regular expression parsing error occurred.","nodes":[{"content":"A regular expression parsing error occurred.","pos":[0,44]}]}],"pos":[38789,38834],"yaml":true},{"content":"<code>pattern</code> is `null`.","nodes":[{"pos":[0,31],"content":"<ph id=\"ph1\">&lt;code&gt;pattern&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>pattern</code> is `null`."}],"pos":[38936,38968],"yaml":true},{"content":"<code>options</code> contains an invalid flag.","nodes":[{"pos":[0,46],"content":"<ph id=\"ph1\">&lt;code&gt;options&lt;/code&gt;</ph> contains an invalid flag.","source":"<code>options</code> contains an invalid flag."}],"pos":[39082,39129],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Text.RegularExpressions.Regex\"></xref> class for the specified regular expression, with options that modify the pattern and a value that specifies how long a pattern matching method should attempt a match before it times out.","nodes":[{"pos":[0,278],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Text.RegularExpressions.Regex\"&gt;&lt;/xref&gt;</ph> class for the specified regular expression, with options that modify the pattern and a value that specifies how long a pattern matching method should attempt a match before it times out.","source":"Initializes a new instance of the <xref href=\"System.Text.RegularExpressions.Regex\"></xref> class for the specified regular expression, with options that modify the pattern and a value that specifies how long a pattern matching method should attempt a match before it times out."}],"pos":[40893,41172],"yaml":true},{"content":"The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match. For more information about regular expressions, see the [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md) topics.  \n  \n A <xref:System.Text.RegularExpressions.Regex> object is immutable, which means that it can be used only for the match pattern that you define when you create it. However, it can be used any number of times without being recompiled.  \n  \n The `matchTimeout` parameter specifies how long a pattern-matching method should try to find a match before it times out. If no match is found in that time interval, the pattern-matching method throws a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception. `matchTimeout` overrides any default time-out value defined for the application domain in which the <xref:System.Text.RegularExpressions.Regex> object is created. The instance pattern-matching methods that observe the `matchTimeout` time-out interval include the following:  \n  \n-   <xref:System.Text.RegularExpressions.Regex.IsMatch%2A>  \n  \n-   <xref:System.Text.RegularExpressions.Regex.Match%2A>  \n  \n-   <xref:System.Text.RegularExpressions.Regex.Matches%2A>  \n  \n-   <xref:System.Text.RegularExpressions.Regex.Replace%2A>  \n  \n-   <xref:System.Text.RegularExpressions.Regex.Split%2A>  \n  \n-   <xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=fullName>  \n  \n Setting a time-out interval prevents regular expressions that rely on excessive backtracking from appearing to stop responding when they process input that contains near matches. For more information, see [Best Practices for Regular Expressions](~/docs/standard/base-types/best-practices.md) and [Backtracking](~/docs/standard/base-types/backtracking-in-regular-expressions.md). To set a reasonable time-out interval, consider the following factors:  \n  \n-   The length and complexity of the regular expression pattern. Longer and more complex regular expressions require more time than shorter and simpler ones.  \n  \n-   The expected machine load. Processing takes more time on systems that have high CPU and memory utilization.","nodes":[{"pos":[0,399],"content":"The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match. For more information about regular expressions, see the [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md) topics.","nodes":[{"content":"The <ph id=\"ph1\">`pattern`</ph> parameter consists of regular expression language elements that symbolically describe the string to match.","pos":[0,120],"source":"The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match."},{"content":"For more information about regular expressions, see the <bpt id=\"p1\">[</bpt>.NET Framework Regular Expressions<ept id=\"p1\">](~/docs/standard/base-types/regular-expressions.md)</ept> and <bpt id=\"p2\">[</bpt>Regular Expression Language - Quick Reference<ept id=\"p2\">](~/docs/standard/base-types/regular-expression-language-quick-reference.md)</ept> topics.","pos":[121,399],"source":" For more information about regular expressions, see the [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md) topics."}]},{"pos":[406,637],"content":"A <xref:System.Text.RegularExpressions.Regex> object is immutable, which means that it can be used only for the match pattern that you define when you create it. However, it can be used any number of times without being recompiled.","nodes":[{"content":"A <xref:System.Text.RegularExpressions.Regex> object is immutable, which means that it can be used only for the match pattern that you define when you create it. However, it can be used any number of times without being recompiled.","pos":[0,231],"nodes":[{"content":"A <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex&gt;</ph> object is immutable, which means that it can be used only for the match pattern that you define when you create it.","pos":[0,161],"source":"A <xref:System.Text.RegularExpressions.Regex> object is immutable, which means that it can be used only for the match pattern that you define when you create it."},{"content":"However, it can be used any number of times without being recompiled.","pos":[162,231]}]}]},{"pos":[644,1196],"content":"The `matchTimeout` parameter specifies how long a pattern-matching method should try to find a match before it times out. If no match is found in that time interval, the pattern-matching method throws a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception. `matchTimeout` overrides any default time-out value defined for the application domain in which the <xref:System.Text.RegularExpressions.Regex> object is created. The instance pattern-matching methods that observe the `matchTimeout` time-out interval include the following:","nodes":[{"content":"The <ph id=\"ph1\">`matchTimeout`</ph> parameter specifies how long a pattern-matching method should try to find a match before it times out.","pos":[0,121],"source":"The `matchTimeout` parameter specifies how long a pattern-matching method should try to find a match before it times out."},{"content":"If no match is found in that time interval, the pattern-matching method throws a <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.RegexMatchTimeoutException&gt;</ph> exception.","pos":[122,278],"source":" If no match is found in that time interval, the pattern-matching method throws a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception."},{"content":"<ph id=\"ph1\">`matchTimeout`</ph> overrides any default time-out value defined for the application domain in which the <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.Regex&gt;</ph> object is created.","pos":[279,441],"source":"`matchTimeout` overrides any default time-out value defined for the application domain in which the <xref:System.Text.RegularExpressions.Regex> object is created."},{"content":"The instance pattern-matching methods that observe the <ph id=\"ph1\">`matchTimeout`</ph> time-out interval include the following:","pos":[442,552],"source":" The instance pattern-matching methods that observe the `matchTimeout` time-out interval include the following:"}]},{"pos":[1206,1260],"content":"<xref:System.Text.RegularExpressions.Regex.IsMatch%2A>","nodes":[]},{"pos":[1270,1322],"content":"<xref:System.Text.RegularExpressions.Regex.Match%2A>","nodes":[]},{"pos":[1332,1386],"content":"<xref:System.Text.RegularExpressions.Regex.Matches%2A>","nodes":[]},{"pos":[1396,1450],"content":"<xref:System.Text.RegularExpressions.Regex.Replace%2A>","nodes":[]},{"pos":[1460,1512],"content":"<xref:System.Text.RegularExpressions.Regex.Split%2A>","nodes":[]},{"pos":[1522,1603],"content":"<xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=fullName>","nodes":[]},{"pos":[1610,2059],"content":"Setting a time-out interval prevents regular expressions that rely on excessive backtracking from appearing to stop responding when they process input that contains near matches. For more information, see [Best Practices for Regular Expressions](~/docs/standard/base-types/best-practices.md) and [Backtracking](~/docs/standard/base-types/backtracking-in-regular-expressions.md). To set a reasonable time-out interval, consider the following factors:","nodes":[{"content":"Setting a time-out interval prevents regular expressions that rely on excessive backtracking from appearing to stop responding when they process input that contains near matches.","pos":[0,178]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Best Practices for Regular Expressions<ept id=\"p1\">](~/docs/standard/base-types/best-practices.md)</ept> and <bpt id=\"p2\">[</bpt>Backtracking<ept id=\"p2\">](~/docs/standard/base-types/backtracking-in-regular-expressions.md)</ept>.","pos":[179,378],"source":" For more information, see [Best Practices for Regular Expressions](~/docs/standard/base-types/best-practices.md) and [Backtracking](~/docs/standard/base-types/backtracking-in-regular-expressions.md)."},{"content":"To set a reasonable time-out interval, consider the following factors:","pos":[379,449]}]},{"pos":[2069,2222],"content":"The length and complexity of the regular expression pattern. Longer and more complex regular expressions require more time than shorter and simpler ones.","nodes":[{"content":"The length and complexity of the regular expression pattern. Longer and more complex regular expressions require more time than shorter and simpler ones.","pos":[0,153],"nodes":[{"content":"The length and complexity of the regular expression pattern.","pos":[0,60]},{"content":"Longer and more complex regular expressions require more time than shorter and simpler ones.","pos":[61,153]}]}]},{"pos":[2232,2339],"content":"The expected machine load. Processing takes more time on systems that have high CPU and memory utilization.","nodes":[{"content":"The expected machine load. Processing takes more time on systems that have high CPU and memory utilization.","pos":[0,107],"nodes":[{"content":"The expected machine load.","pos":[0,26]},{"content":"Processing takes more time on systems that have high CPU and memory utilization.","pos":[27,107]}]}]}],"pos":[41183,43547],"yaml":true,"extradata":"MT"},{"content":"The regular expression pattern to match.","nodes":[{"pos":[0,40],"content":"The regular expression pattern to match.","nodes":[{"content":"The regular expression pattern to match.","pos":[0,40]}]}],"pos":[44790,44831],"yaml":true},{"content":"A bitwise combination of the enumeration values that modify the regular expression.","nodes":[{"pos":[0,83],"content":"A bitwise combination of the enumeration values that modify the regular expression.","nodes":[{"content":"A bitwise combination of the enumeration values that modify the regular expression.","pos":[0,83]}]}],"pos":[44924,45008],"yaml":true},{"content":"A time-out interval, or <xref href=\"System.Text.RegularExpressions.Regex.InfiniteMatchTimeout\"></xref> to indicate that the method should not time out.","nodes":[{"pos":[0,151],"content":"A time-out interval, or <ph id=\"ph1\">&lt;xref href=\"System.Text.RegularExpressions.Regex.InfiniteMatchTimeout\"&gt;&lt;/xref&gt;</ph> to indicate that the method should not time out.","source":"A time-out interval, or <xref href=\"System.Text.RegularExpressions.Regex.InfiniteMatchTimeout\"></xref> to indicate that the method should not time out."}],"pos":[45078,45230],"yaml":true},{"content":"A regular expression parsing error occurred.","nodes":[{"pos":[0,44],"content":"A regular expression parsing error occurred.","nodes":[{"content":"A regular expression parsing error occurred.","pos":[0,44]}]}],"pos":[45394,45439],"yaml":true},{"content":"<code>pattern</code> is `null`.","nodes":[{"pos":[0,31],"content":"<ph id=\"ph1\">&lt;code&gt;pattern&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>pattern</code> is `null`."}],"pos":[45541,45573],"yaml":true},{"content":"<code>options</code> is not a valid <xref href=\"System.Text.RegularExpressions.RegexOptions\"></xref> value.  \n  \n -or-  \n  \n <code>matchTimeout</code> is negative, zero, or greater than approximately 24 days.","nodes":[{"pos":[0,107],"content":"<ph id=\"ph1\">&lt;code&gt;options&lt;/code&gt;</ph> is not a valid <ph id=\"ph2\">&lt;xref href=\"System.Text.RegularExpressions.RegexOptions\"&gt;&lt;/xref&gt;</ph> value.","source":"<code>options</code> is not a valid <xref href=\"System.Text.RegularExpressions.RegexOptions\"></xref> value."},{"pos":[114,118],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[125,208],"content":"<ph id=\"ph1\">&lt;code&gt;matchTimeout&lt;/code&gt;</ph> is negative, zero, or greater than approximately 24 days.","source":"<code>matchTimeout</code> is negative, zero, or greater than approximately 24 days."}],"pos":[45687,45904],"yaml":true},{"content":"Gets or sets the maximum number of entries in the current static cache of compiled regular expressions.","nodes":[{"pos":[0,103],"content":"Gets or sets the maximum number of entries in the current static cache of compiled regular expressions.","nodes":[{"content":"Gets or sets the maximum number of entries in the current static cache of compiled regular expressions.","pos":[0,103]}]}],"pos":[47366,47470],"yaml":true},{"content":"The <xref:System.Text.RegularExpressions.Regex> class maintains an internal cache of compiled regular expressions used in static method calls. If the value specified in a set operation is less than the current cache size, cache entries are discarded until the cache size is equal to the specified value.  \n  \n By default, the cache holds 15 compiled static regular expressions. Your application typically will not have to modify the size of the cache. Use the <xref:System.Text.RegularExpressions.Regex.CacheSize%2A> property only when you want to turn off caching or when you have an unusually large cache.","nodes":[{"pos":[0,303],"content":"The <xref:System.Text.RegularExpressions.Regex> class maintains an internal cache of compiled regular expressions used in static method calls. If the value specified in a set operation is less than the current cache size, cache entries are discarded until the cache size is equal to the specified value.","nodes":[{"content":"The <xref:System.Text.RegularExpressions.Regex> class maintains an internal cache of compiled regular expressions used in static method calls. If the value specified in a set operation is less than the current cache size, cache entries are discarded until the cache size is equal to the specified value.","pos":[0,303],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex&gt;</ph> class maintains an internal cache of compiled regular expressions used in static method calls.","pos":[0,142],"source":"The <xref:System.Text.RegularExpressions.Regex> class maintains an internal cache of compiled regular expressions used in static method calls."},{"content":"If the value specified in a set operation is less than the current cache size, cache entries are discarded until the cache size is equal to the specified value.","pos":[143,303]}]}]},{"pos":[310,607],"content":"By default, the cache holds 15 compiled static regular expressions. Your application typically will not have to modify the size of the cache. Use the <xref:System.Text.RegularExpressions.Regex.CacheSize%2A> property only when you want to turn off caching or when you have an unusually large cache.","nodes":[{"content":"By default, the cache holds 15 compiled static regular expressions. Your application typically will not have to modify the size of the cache. Use the <xref:System.Text.RegularExpressions.Regex.CacheSize%2A> property only when you want to turn off caching or when you have an unusually large cache.","pos":[0,297],"nodes":[{"content":"By default, the cache holds 15 compiled static regular expressions.","pos":[0,67]},{"content":"Your application typically will not have to modify the size of the cache.","pos":[68,141]},{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.CacheSize%2A&gt;</ph> property only when you want to turn off caching or when you have an unusually large cache.","pos":[142,297],"source":" Use the <xref:System.Text.RegularExpressions.Regex.CacheSize%2A> property only when you want to turn off caching or when you have an unusually large cache."}]}]}],"pos":[47481,48093],"yaml":true,"extradata":"MT"},{"content":"The maximum number of entries in the static cache.","nodes":[{"pos":[0,50],"content":"The maximum number of entries in the static cache.","nodes":[{"content":"The maximum number of entries in the static cache.","pos":[0,50]}]}],"pos":[48214,48265],"yaml":true},{"content":"The value in a set operation is less than zero.","nodes":[{"pos":[0,47],"content":"The value in a set operation is less than zero.","nodes":[{"content":"The value in a set operation is less than zero.","pos":[0,47]}]}],"pos":[48453,48501],"yaml":true},{"content":"Used by a <xref href=\"System.Text.RegularExpressions.Regex\"></xref> object generated by the <xref href=\"System.Text.RegularExpressions.Regex.CompileToAssembly*\"></xref> method.","nodes":[{"pos":[0,176],"content":"Used by a <ph id=\"ph1\">&lt;xref href=\"System.Text.RegularExpressions.Regex\"&gt;&lt;/xref&gt;</ph> object generated by the <ph id=\"ph2\">&lt;xref href=\"System.Text.RegularExpressions.Regex.CompileToAssembly*\"&gt;&lt;/xref&gt;</ph> method.","source":"Used by a <xref href=\"System.Text.RegularExpressions.Regex\"></xref> object generated by the <xref href=\"System.Text.RegularExpressions.Regex.CompileToAssembly*\"></xref> method."}],"pos":[49834,50011],"yaml":true},{"content":"Used by a <xref href=\"System.Text.RegularExpressions.Regex\"></xref> object generated by the <xref href=\"System.Text.RegularExpressions.Regex.CompileToAssembly*\"></xref> method.","nodes":[{"pos":[0,176],"content":"Used by a <ph id=\"ph1\">&lt;xref href=\"System.Text.RegularExpressions.Regex\"&gt;&lt;/xref&gt;</ph> object generated by the <ph id=\"ph2\">&lt;xref href=\"System.Text.RegularExpressions.Regex.CompileToAssembly*\"&gt;&lt;/xref&gt;</ph> method.","source":"Used by a <xref href=\"System.Text.RegularExpressions.Regex\"></xref> object generated by the <xref href=\"System.Text.RegularExpressions.Regex.CompileToAssembly*\"></xref> method."}],"pos":[52438,52615],"yaml":true},{"content":"Used by a <xref href=\"System.Text.RegularExpressions.Regex\"></xref> object generated by the <xref href=\"System.Text.RegularExpressions.Regex.CompileToAssembly*\"></xref> method.","nodes":[{"pos":[0,176],"content":"Used by a <ph id=\"ph1\">&lt;xref href=\"System.Text.RegularExpressions.Regex\"&gt;&lt;/xref&gt;</ph> object generated by the <ph id=\"ph2\">&lt;xref href=\"System.Text.RegularExpressions.Regex.CompileToAssembly*\"&gt;&lt;/xref&gt;</ph> method.","source":"Used by a <xref href=\"System.Text.RegularExpressions.Regex\"></xref> object generated by the <xref href=\"System.Text.RegularExpressions.Regex.CompileToAssembly*\"></xref> method."}],"pos":[55024,55201],"yaml":true},{"content":"Used by a <xref href=\"System.Text.RegularExpressions.Regex\"></xref> object generated by the <xref href=\"System.Text.RegularExpressions.Regex.CompileToAssembly*\"></xref> method.","nodes":[{"pos":[0,176],"content":"Used by a <ph id=\"ph1\">&lt;xref href=\"System.Text.RegularExpressions.Regex\"&gt;&lt;/xref&gt;</ph> object generated by the <ph id=\"ph2\">&lt;xref href=\"System.Text.RegularExpressions.Regex.CompileToAssembly*\"&gt;&lt;/xref&gt;</ph> method.","source":"Used by a <xref href=\"System.Text.RegularExpressions.Regex\"></xref> object generated by the <xref href=\"System.Text.RegularExpressions.Regex.CompileToAssembly*\"></xref> method."}],"pos":[56576,56753],"yaml":true},{"content":"Compiles one or more specified <xref href=\"System.Text.RegularExpressions.Regex\"></xref> objects to a named assembly.","nodes":[{"pos":[0,117],"content":"Compiles one or more specified <ph id=\"ph1\">&lt;xref href=\"System.Text.RegularExpressions.Regex\"&gt;&lt;/xref&gt;</ph> objects to a named assembly.","source":"Compiles one or more specified <xref href=\"System.Text.RegularExpressions.Regex\"></xref> objects to a named assembly."}],"pos":[58513,58631],"yaml":true},{"content":"The <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%28System.Text.RegularExpressions.RegexCompilationInfo%5B%5D%2CSystem.Reflection.AssemblyName%29> method generates a .NET Framework assembly in which each regular expression defined in the `regexinfos` array is represented by a class. Typically, the <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%28System.Text.RegularExpressions.RegexCompilationInfo%5B%5D%2CSystem.Reflection.AssemblyName%29> method is called from a separate application that generates an assembly of compiled regular expressions. Each regular expression included in the assembly has the following characteristics:  \n  \n-   It is derived from the <xref:System.Text.RegularExpressions.Regex> class.  \n  \n-   It is assigned the fully qualified name that is defined by the `fullnamespace` and `name` parameters of its corresponding <xref:System.Text.RegularExpressions.RegexCompilationInfo> object.  \n  \n-   It has a default (or parameterless) constructor.  \n  \n Ordinarily, the code that instantiates and uses the compiled regular expression is found in an assembly or application that is separate from the code that creates the assembly.","nodes":[{"pos":[0,660],"content":"The <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%28System.Text.RegularExpressions.RegexCompilationInfo%5B%5D%2CSystem.Reflection.AssemblyName%29> method generates a .NET Framework assembly in which each regular expression defined in the `regexinfos` array is represented by a class. Typically, the <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%28System.Text.RegularExpressions.RegexCompilationInfo%5B%5D%2CSystem.Reflection.AssemblyName%29> method is called from a separate application that generates an assembly of compiled regular expressions. Each regular expression included in the assembly has the following characteristics:","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.CompileToAssembly%28System.Text.RegularExpressions.RegexCompilationInfo%5B%5D%2CSystem.Reflection.AssemblyName%29&gt;</ph> method generates a .NET Framework assembly in which each regular expression defined in the <ph id=\"ph2\">`regexinfos`</ph> array is represented by a class.","pos":[0,298],"source":"The <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%28System.Text.RegularExpressions.RegexCompilationInfo%5B%5D%2CSystem.Reflection.AssemblyName%29> method generates a .NET Framework assembly in which each regular expression defined in the `regexinfos` array is represented by a class."},{"content":"Typically, the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.CompileToAssembly%28System.Text.RegularExpressions.RegexCompilationInfo%5B%5D%2CSystem.Reflection.AssemblyName%29&gt;</ph> method is called from a separate application that generates an assembly of compiled regular expressions.","pos":[299,576],"source":" Typically, the <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%28System.Text.RegularExpressions.RegexCompilationInfo%5B%5D%2CSystem.Reflection.AssemblyName%29> method is called from a separate application that generates an assembly of compiled regular expressions."},{"content":"Each regular expression included in the assembly has the following characteristics:","pos":[577,660]}]},{"pos":[670,743],"content":"It is derived from the <xref:System.Text.RegularExpressions.Regex> class.","nodes":[{"content":"It is derived from the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex&gt;</ph> class.","pos":[0,73],"source":"It is derived from the <xref:System.Text.RegularExpressions.Regex> class."}]},{"pos":[753,941],"content":"It is assigned the fully qualified name that is defined by the <ph id=\"ph1\">`fullnamespace`</ph> and <ph id=\"ph2\">`name`</ph> parameters of its corresponding <ph id=\"ph3\">&lt;xref:System.Text.RegularExpressions.RegexCompilationInfo&gt;</ph> object.","source":"It is assigned the fully qualified name that is defined by the `fullnamespace` and `name` parameters of its corresponding <xref:System.Text.RegularExpressions.RegexCompilationInfo> object."},{"pos":[951,999],"content":"It has a default (or parameterless) constructor.","nodes":[{"content":"It has a default (or parameterless) constructor.","pos":[0,48]}]},{"pos":[1006,1182],"content":"Ordinarily, the code that instantiates and uses the compiled regular expression is found in an assembly or application that is separate from the code that creates the assembly.","nodes":[{"content":"Ordinarily, the code that instantiates and uses the compiled regular expression is found in an assembly or application that is separate from the code that creates the assembly.","pos":[0,176]}]}],"pos":[58642,59835],"yaml":true,"extradata":"MT"},{"content":"An array that describes the regular expressions to compile.","nodes":[{"pos":[0,59],"content":"An array that describes the regular expressions to compile.","nodes":[{"content":"An array that describes the regular expressions to compile.","pos":[0,59]}]}],"pos":[61587,61647],"yaml":true},{"content":"The file name of the assembly.","nodes":[{"pos":[0,30],"content":"The file name of the assembly.","nodes":[{"content":"The file name of the assembly.","pos":[0,30]}]}],"pos":[61732,61763],"yaml":true},{"content":"The value of the <code>assemblyname</code> parameter's <xref href=\"System.Reflection.AssemblyName.Name\"></xref> property is an empty or null string.  \n  \n -or-  \n  \n The regular expression pattern of one or more objects in <code>regexinfos</code> contains invalid syntax.","nodes":[{"pos":[0,148],"content":"The value of the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">assemblyname</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter's <ph id=\"ph2\">&lt;xref href=\"System.Reflection.AssemblyName.Name\"&gt;&lt;/xref&gt;</ph> property is an empty or null string.","source":"The value of the <code>assemblyname</code> parameter's <xref href=\"System.Reflection.AssemblyName.Name\"></xref> property is an empty or null string."},{"pos":[155,159],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[166,271],"content":"The regular expression pattern of one or more objects in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">regexinfos</ph><ept id=\"p1\">&lt;/code&gt;</ept> contains invalid syntax.","source":"The regular expression pattern of one or more objects in <code>regexinfos</code> contains invalid syntax."}],"pos":[61939,62219],"yaml":true},{"content":"<code>assemblyname</code> or <code>regexinfos</code> is `null`.","nodes":[{"pos":[0,63],"content":"<ph id=\"ph1\">&lt;code&gt;assemblyname&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;regexinfos&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>assemblyname</code> or <code>regexinfos</code> is `null`."}],"pos":[62321,62385],"yaml":true},{"content":"Compiles one or more specified <xref href=\"System.Text.RegularExpressions.Regex\"></xref> objects to a named assembly with the specified attributes.","nodes":[{"pos":[0,147],"content":"Compiles one or more specified <ph id=\"ph1\">&lt;xref href=\"System.Text.RegularExpressions.Regex\"&gt;&lt;/xref&gt;</ph> objects to a named assembly with the specified attributes.","source":"Compiles one or more specified <xref href=\"System.Text.RegularExpressions.Regex\"></xref> objects to a named assembly with the specified attributes."}],"pos":[64020,64168],"yaml":true},{"content":"The <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%28System.Text.RegularExpressions.RegexCompilationInfo%5B%5D%2CSystem.Reflection.AssemblyName%2CSystem.Reflection.Emit.CustomAttributeBuilder%5B%5D%29> method generates a .NET Framework assembly in which each regular expression defined in the `regexinfos` array is represented by a class. Typically, the <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%28System.Text.RegularExpressions.RegexCompilationInfo%5B%5D%2CSystem.Reflection.AssemblyName%2CSystem.Reflection.Emit.CustomAttributeBuilder%5B%5D%29> method is called from a separate application that generates an assembly of compiled regular expressions. Each regular expression included in the assembly has the following characteristics:  \n  \n-   It is derived from the <xref:System.Text.RegularExpressions.Regex> class.  \n  \n-   It is assigned the fully qualified name that is defined by the `fullnamespace` and `name` parameters of its corresponding <xref:System.Text.RegularExpressions.RegexCompilationInfo> object.  \n  \n-   It has a default (or parameterless) constructor.  \n  \n Ordinarily, the code that instantiates and uses the compiled regular expression is found in an assembly or application that is separate from the code that creates the assembly.  \n  \n Because the <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A> method generates a .NET Framework assembly from a method call instead of using a particular language's class definition keyword (such as `class` in C# or `Class`…`End Class` in Visual Basic), it does not allow .NET Framework attributes to be assigned to the assembly by using the development language's standard attribute syntax. The `attributes` parameter provides an alternative method for defining the attributes that apply to the assembly. For each attribute that you want to apply to the assembly, do the following:  \n  \n1.  Create an array of <xref:System.Type> objects representing the parameter types of the attribute constructor that you want to call.  \n  \n2.  Retrieve a <xref:System.Type> object representing the attribute class that you want to apply to the new assembly.  \n  \n3.  Call the <xref:System.Type.GetConstructor%2A> method of the attribute <xref:System.Type> object to retrieve a <xref:System.Reflection.ConstructorInfo> object representing the attribute constructor that you want to call. Pass the <xref:System.Type.GetConstructor%2A> method the array of <xref:System.Type> objects that represents the constructor's parameter types.  \n  \n4.  Create a <xref:System.Object> array that defines the parameters to pass to the attribute's constructor.  \n  \n5.  Instantiate a <xref:System.Reflection.Emit.CustomAttributeBuilder> object by passing its constructor the <xref:System.Reflection.ConstructorInfo> object retrieved in step 3 and the <xref:System.Object> array created in step 4.  \n  \n You can then pass an array of these <xref:System.Reflection.Emit.CustomAttributeBuilder> objects instead of the `attributes` parameter to the <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%28System.Text.RegularExpressions.RegexCompilationInfo%5B%5D%2CSystem.Reflection.AssemblyName%2CSystem.Reflection.Emit.CustomAttributeBuilder%5B%5D%29?displayProperty=fullName> method.","nodes":[{"pos":[0,768],"content":"The <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%28System.Text.RegularExpressions.RegexCompilationInfo%5B%5D%2CSystem.Reflection.AssemblyName%2CSystem.Reflection.Emit.CustomAttributeBuilder%5B%5D%29> method generates a .NET Framework assembly in which each regular expression defined in the `regexinfos` array is represented by a class. Typically, the <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%28System.Text.RegularExpressions.RegexCompilationInfo%5B%5D%2CSystem.Reflection.AssemblyName%2CSystem.Reflection.Emit.CustomAttributeBuilder%5B%5D%29> method is called from a separate application that generates an assembly of compiled regular expressions. Each regular expression included in the assembly has the following characteristics:","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.CompileToAssembly%28System.Text.RegularExpressions.RegexCompilationInfo%5B%5D%2CSystem.Reflection.AssemblyName%2CSystem.Reflection.Emit.CustomAttributeBuilder%5B%5D%29&gt;</ph> method generates a .NET Framework assembly in which each regular expression defined in the <ph id=\"ph2\">`regexinfos`</ph> array is represented by a class.","pos":[0,352],"source":"The <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%28System.Text.RegularExpressions.RegexCompilationInfo%5B%5D%2CSystem.Reflection.AssemblyName%2CSystem.Reflection.Emit.CustomAttributeBuilder%5B%5D%29> method generates a .NET Framework assembly in which each regular expression defined in the `regexinfos` array is represented by a class."},{"content":"Typically, the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.CompileToAssembly%28System.Text.RegularExpressions.RegexCompilationInfo%5B%5D%2CSystem.Reflection.AssemblyName%2CSystem.Reflection.Emit.CustomAttributeBuilder%5B%5D%29&gt;</ph> method is called from a separate application that generates an assembly of compiled regular expressions.","pos":[353,684],"source":" Typically, the <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%28System.Text.RegularExpressions.RegexCompilationInfo%5B%5D%2CSystem.Reflection.AssemblyName%2CSystem.Reflection.Emit.CustomAttributeBuilder%5B%5D%29> method is called from a separate application that generates an assembly of compiled regular expressions."},{"content":"Each regular expression included in the assembly has the following characteristics:","pos":[685,768]}]},{"pos":[778,851],"content":"It is derived from the <xref:System.Text.RegularExpressions.Regex> class.","nodes":[{"content":"It is derived from the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex&gt;</ph> class.","pos":[0,73],"source":"It is derived from the <xref:System.Text.RegularExpressions.Regex> class."}]},{"pos":[861,1049],"content":"It is assigned the fully qualified name that is defined by the <ph id=\"ph1\">`fullnamespace`</ph> and <ph id=\"ph2\">`name`</ph> parameters of its corresponding <ph id=\"ph3\">&lt;xref:System.Text.RegularExpressions.RegexCompilationInfo&gt;</ph> object.","source":"It is assigned the fully qualified name that is defined by the `fullnamespace` and `name` parameters of its corresponding <xref:System.Text.RegularExpressions.RegexCompilationInfo> object."},{"pos":[1059,1107],"content":"It has a default (or parameterless) constructor.","nodes":[{"content":"It has a default (or parameterless) constructor.","pos":[0,48]}]},{"pos":[1114,1290],"content":"Ordinarily, the code that instantiates and uses the compiled regular expression is found in an assembly or application that is separate from the code that creates the assembly.","nodes":[{"content":"Ordinarily, the code that instantiates and uses the compiled regular expression is found in an assembly or application that is separate from the code that creates the assembly.","pos":[0,176]}]},{"pos":[1297,1894],"content":"Because the <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A> method generates a .NET Framework assembly from a method call instead of using a particular language's class definition keyword (such as `class` in C# or `Class`…`End Class` in Visual Basic), it does not allow .NET Framework attributes to be assigned to the assembly by using the development language's standard attribute syntax. The `attributes` parameter provides an alternative method for defining the attributes that apply to the assembly. For each attribute that you want to apply to the assembly, do the following:","nodes":[{"content":"Because the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A&gt;</ph> method generates a .NET Framework assembly from a method call instead of using a particular language's class definition keyword (such as <ph id=\"ph2\">`class`</ph> in C# or <ph id=\"ph3\">`Class`</ph>…<ph id=\"ph4\">`End Class`</ph>","pos":[0,250],"source":"Because the <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A> method generates a .NET Framework assembly from a method call instead of using a particular language's class definition keyword (such as `class` in C# or `Class`…`End Class`"},{"content":"in Visual Basic), it does not allow .NET Framework attributes to be assigned to the assembly by using the development language's standard attribute syntax.","pos":[251,406]},{"content":"The <ph id=\"ph1\">`attributes`</ph> parameter provides an alternative method for defining the attributes that apply to the assembly.","pos":[407,520],"source":" The `attributes` parameter provides an alternative method for defining the attributes that apply to the assembly."},{"content":"For each attribute that you want to apply to the assembly, do the following:","pos":[521,597]}]},{"pos":[1904,2034],"content":"Create an array of <xref:System.Type> objects representing the parameter types of the attribute constructor that you want to call.","nodes":[{"content":"Create an array of <ph id=\"ph1\">&lt;xref:System.Type&gt;</ph> objects representing the parameter types of the attribute constructor that you want to call.","pos":[0,130],"source":"Create an array of <xref:System.Type> objects representing the parameter types of the attribute constructor that you want to call."}]},{"pos":[2044,2157],"content":"Retrieve a <xref:System.Type> object representing the attribute class that you want to apply to the new assembly.","nodes":[{"content":"Retrieve a <ph id=\"ph1\">&lt;xref:System.Type&gt;</ph> object representing the attribute class that you want to apply to the new assembly.","pos":[0,113],"source":"Retrieve a <xref:System.Type> object representing the attribute class that you want to apply to the new assembly."}]},{"pos":[2167,2530],"content":"Call the <xref:System.Type.GetConstructor%2A> method of the attribute <xref:System.Type> object to retrieve a <xref:System.Reflection.ConstructorInfo> object representing the attribute constructor that you want to call. Pass the <xref:System.Type.GetConstructor%2A> method the array of <xref:System.Type> objects that represents the constructor's parameter types.","nodes":[{"content":"Call the <xref:System.Type.GetConstructor%2A> method of the attribute <xref:System.Type> object to retrieve a <xref:System.Reflection.ConstructorInfo> object representing the attribute constructor that you want to call. Pass the <xref:System.Type.GetConstructor%2A> method the array of <xref:System.Type> objects that represents the constructor's parameter types.","pos":[0,363],"nodes":[{"content":"Call the <ph id=\"ph1\">&lt;xref:System.Type.GetConstructor%2A&gt;</ph> method of the attribute <ph id=\"ph2\">&lt;xref:System.Type&gt;</ph> object to retrieve a <ph id=\"ph3\">&lt;xref:System.Reflection.ConstructorInfo&gt;</ph> object representing the attribute constructor that you want to call.","pos":[0,219],"source":"Call the <xref:System.Type.GetConstructor%2A> method of the attribute <xref:System.Type> object to retrieve a <xref:System.Reflection.ConstructorInfo> object representing the attribute constructor that you want to call."},{"content":"Pass the <ph id=\"ph1\">&lt;xref:System.Type.GetConstructor%2A&gt;</ph> method the array of <ph id=\"ph2\">&lt;xref:System.Type&gt;</ph> objects that represents the constructor's parameter types.","pos":[220,363],"source":" Pass the <xref:System.Type.GetConstructor%2A> method the array of <xref:System.Type> objects that represents the constructor's parameter types."}]}]},{"pos":[2540,2643],"content":"Create a <xref:System.Object> array that defines the parameters to pass to the attribute's constructor.","nodes":[{"content":"Create a <ph id=\"ph1\">&lt;xref:System.Object&gt;</ph> array that defines the parameters to pass to the attribute's constructor.","pos":[0,103],"source":"Create a <xref:System.Object> array that defines the parameters to pass to the attribute's constructor."}]},{"pos":[2653,2879],"content":"Instantiate a <xref:System.Reflection.Emit.CustomAttributeBuilder> object by passing its constructor the <xref:System.Reflection.ConstructorInfo> object retrieved in step 3 and the <xref:System.Object> array created in step 4.","nodes":[{"content":"Instantiate a <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.CustomAttributeBuilder&gt;</ph> object by passing its constructor the <ph id=\"ph2\">&lt;xref:System.Reflection.ConstructorInfo&gt;</ph> object retrieved in step 3 and the <ph id=\"ph3\">&lt;xref:System.Object&gt;</ph> array created in step 4.","pos":[0,226],"source":"Instantiate a <xref:System.Reflection.Emit.CustomAttributeBuilder> object by passing its constructor the <xref:System.Reflection.ConstructorInfo> object retrieved in step 3 and the <xref:System.Object> array created in step 4."}]},{"pos":[2886,3272],"content":"You can then pass an array of these <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.CustomAttributeBuilder&gt;</ph> objects instead of the <ph id=\"ph2\">`attributes`</ph> parameter to the <ph id=\"ph3\">&lt;xref:System.Text.RegularExpressions.Regex.CompileToAssembly%28System.Text.RegularExpressions.RegexCompilationInfo%5B%5D%2CSystem.Reflection.AssemblyName%2CSystem.Reflection.Emit.CustomAttributeBuilder%5B%5D%29?displayProperty=fullName&gt;</ph> method.","source":"You can then pass an array of these <xref:System.Reflection.Emit.CustomAttributeBuilder> objects instead of the `attributes` parameter to the <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%28System.Text.RegularExpressions.RegexCompilationInfo%5B%5D%2CSystem.Reflection.AssemblyName%2CSystem.Reflection.Emit.CustomAttributeBuilder%5B%5D%29?displayProperty=fullName> method."}],"pos":[64179,67476],"yaml":true,"extradata":"MT"},{"content":"An array that describes the regular expressions to compile.","nodes":[{"pos":[0,59],"content":"An array that describes the regular expressions to compile.","nodes":[{"content":"An array that describes the regular expressions to compile.","pos":[0,59]}]}],"pos":[69559,69619],"yaml":true},{"content":"The file name of the assembly.","nodes":[{"pos":[0,30],"content":"The file name of the assembly.","nodes":[{"content":"The file name of the assembly.","pos":[0,30]}]}],"pos":[69704,69735],"yaml":true},{"content":"An array that defines the attributes to apply to the assembly.","nodes":[{"pos":[0,62],"content":"An array that defines the attributes to apply to the assembly.","nodes":[{"content":"An array that defines the attributes to apply to the assembly.","pos":[0,62]}]}],"pos":[69835,69898],"yaml":true},{"content":"The value of the <code>assemblyname</code> parameter's <xref href=\"System.Reflection.AssemblyName.Name\"></xref> property is an empty or null string.  \n  \n -or-  \n  \n The regular expression pattern of one or more objects in <code>regexinfos</code> contains invalid syntax.","nodes":[{"pos":[0,148],"content":"The value of the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">assemblyname</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter's <ph id=\"ph2\">&lt;xref href=\"System.Reflection.AssemblyName.Name\"&gt;&lt;/xref&gt;</ph> property is an empty or null string.","source":"The value of the <code>assemblyname</code> parameter's <xref href=\"System.Reflection.AssemblyName.Name\"></xref> property is an empty or null string."},{"pos":[155,159],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[166,271],"content":"The regular expression pattern of one or more objects in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">regexinfos</ph><ept id=\"p1\">&lt;/code&gt;</ept> contains invalid syntax.","source":"The regular expression pattern of one or more objects in <code>regexinfos</code> contains invalid syntax."}],"pos":[70074,70354],"yaml":true},{"content":"<code>assemblyname</code> or <code>regexinfos</code> is `null`.","nodes":[{"pos":[0,63],"content":"<ph id=\"ph1\">&lt;code&gt;assemblyname&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;regexinfos&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>assemblyname</code> or <code>regexinfos</code> is `null`."}],"pos":[70456,70520],"yaml":true},{"content":"Compiles one or more specified <xref href=\"System.Text.RegularExpressions.Regex\"></xref> objects and a specified resource file to a named assembly with the specified attributes.","nodes":[{"pos":[0,177],"content":"Compiles one or more specified <ph id=\"ph1\">&lt;xref href=\"System.Text.RegularExpressions.Regex\"&gt;&lt;/xref&gt;</ph> objects and a specified resource file to a named assembly with the specified attributes.","source":"Compiles one or more specified <xref href=\"System.Text.RegularExpressions.Regex\"></xref> objects and a specified resource file to a named assembly with the specified attributes."}],"pos":[72221,72399],"yaml":true},{"content":"The [\\], AssemblyName, CustomAttributeBuilder\\<xref:System.Text.RegularExpressions.Regex.CompileToAssembly%28System.Text.RegularExpressions.RegexCompilationInfo%5B%5D%2CSystem.Reflection.AssemblyName%2CSystem.Reflection.Emit.CustomAttributeBuilder%5B%5D%2CSystem.String%29> method generates a .NET Framework assembly in which each regular expression defined in the `regexinfos` array is represented by a class. Typically, the [\\], AssemblyName, CustomAttributeBuilder\\<xref:System.Text.RegularExpressions.Regex.CompileToAssembly%28System.Text.RegularExpressions.RegexCompilationInfo%5B%5D%2CSystem.Reflection.AssemblyName%2CSystem.Reflection.Emit.CustomAttributeBuilder%5B%5D%2CSystem.String%29> method is called from a separate application that generates an assembly of compiled regular expressions. Each regular expression included in the assembly has the following characteristics:  \n  \n-   It is derived from the <xref:System.Text.RegularExpressions.Regex> class.  \n  \n-   It is assigned the fully qualified name that is defined by the `fullnamespace` and `name` parameters of its corresponding <xref:System.Text.RegularExpressions.RegexCompilationInfo> object.  \n  \n-   It has a default (or parameterless) constructor.  \n  \n Ordinarily, the code that instantiates and uses the compiled regular expression is found in an assembly or application that is separate from the code that creates the assembly.  \n  \n Because the <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A> method generates a .NET Framework assembly from a method call instead of using a particular language's class definition keyword (such as `class` in C# or `Class`…`End Class` in Visual Basic), it does not allow .NET Framework attributes to be assigned to the assembly by using the development language's standard attribute syntax. The `attributes` parameter provides an alternative method for defining the attributes that apply to the assembly. For each attribute that you want to apply to the assembly, do the following:  \n  \n1.  Create an array of <xref:System.Type> objects representing the parameter types of the attribute constructor that you want to call.  \n  \n2.  Retrieve a <xref:System.Type> object representing the attribute class that you want to apply to the new assembly.  \n  \n3.  Call the <xref:System.Type.GetConstructor%2A> method of the attribute <xref:System.Type> object to retrieve a <xref:System.Reflection.ConstructorInfo> object representing the attribute constructor that you want to call. Pass the <xref:System.Type.GetConstructor%2A> method the array of <xref:System.Type> objects that represents the constructor's parameter types  \n  \n4.  Create a <xref:System.Object> array that defines the parameters to pass to the attribute's constructor.  \n  \n5.  Instantiate a <xref:System.Reflection.Emit.CustomAttributeBuilder> object by passing its constructor the <xref:System.Reflection.ConstructorInfo> object retrieved in step 3 and the <xref:System.Object> array created in step 4.  \n  \n You can then pass an array of these <xref:System.Reflection.Emit.CustomAttributeBuilder> objects instead of the `attributes` parameter to the [\\], AssemblyName, CustomAttributeBuilder\\<xref:System.Text.RegularExpressions.Regex.CompileToAssembly%28System.Text.RegularExpressions.RegexCompilationInfo%5B%5D%2CSystem.Reflection.AssemblyName%2CSystem.Reflection.Emit.CustomAttributeBuilder%5B%5D%2CSystem.String%29> method.","nodes":[{"pos":[0,884],"content":"The [\\], AssemblyName, CustomAttributeBuilder\\<xref:System.Text.RegularExpressions.Regex.CompileToAssembly%28System.Text.RegularExpressions.RegexCompilationInfo%5B%5D%2CSystem.Reflection.AssemblyName%2CSystem.Reflection.Emit.CustomAttributeBuilder%5B%5D%2CSystem.String%29> method generates a .NET Framework assembly in which each regular expression defined in the `regexinfos` array is represented by a class. Typically, the [\\], AssemblyName, CustomAttributeBuilder\\<xref:System.Text.RegularExpressions.Regex.CompileToAssembly%28System.Text.RegularExpressions.RegexCompilationInfo%5B%5D%2CSystem.Reflection.AssemblyName%2CSystem.Reflection.Emit.CustomAttributeBuilder%5B%5D%2CSystem.String%29> method is called from a separate application that generates an assembly of compiled regular expressions. Each regular expression included in the assembly has the following characteristics:","nodes":[{"content":"The [<ph id=\"ph1\">\\]</ph>, AssemblyName, CustomAttributeBuilder<ph id=\"ph2\">\\&lt;</ph>xref:System.Text.RegularExpressions.Regex.CompileToAssembly%28System.Text.RegularExpressions.RegexCompilationInfo%5B%5D%2CSystem.Reflection.AssemblyName%2CSystem.Reflection.Emit.CustomAttributeBuilder%5B%5D%2CSystem.String%29&gt; method generates a .NET Framework assembly in which each regular expression defined in the <ph id=\"ph3\">`regexinfos`</ph> array is represented by a class.","pos":[0,410],"source":"The [\\], AssemblyName, CustomAttributeBuilder\\<xref:System.Text.RegularExpressions.Regex.CompileToAssembly%28System.Text.RegularExpressions.RegexCompilationInfo%5B%5D%2CSystem.Reflection.AssemblyName%2CSystem.Reflection.Emit.CustomAttributeBuilder%5B%5D%2CSystem.String%29> method generates a .NET Framework assembly in which each regular expression defined in the `regexinfos` array is represented by a class."},{"content":"Typically, the [<ph id=\"ph1\">\\]</ph>, AssemblyName, CustomAttributeBuilder<ph id=\"ph2\">\\&lt;</ph>xref:System.Text.RegularExpressions.Regex.CompileToAssembly%28System.Text.RegularExpressions.RegexCompilationInfo%5B%5D%2CSystem.Reflection.AssemblyName%2CSystem.Reflection.Emit.CustomAttributeBuilder%5B%5D%2CSystem.String%29&gt; method is called from a separate application that generates an assembly of compiled regular expressions.","pos":[411,800],"source":" Typically, the [\\], AssemblyName, CustomAttributeBuilder\\<xref:System.Text.RegularExpressions.Regex.CompileToAssembly%28System.Text.RegularExpressions.RegexCompilationInfo%5B%5D%2CSystem.Reflection.AssemblyName%2CSystem.Reflection.Emit.CustomAttributeBuilder%5B%5D%2CSystem.String%29> method is called from a separate application that generates an assembly of compiled regular expressions."},{"content":"Each regular expression included in the assembly has the following characteristics:","pos":[801,884]}]},{"pos":[894,967],"content":"It is derived from the <xref:System.Text.RegularExpressions.Regex> class.","nodes":[{"content":"It is derived from the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex&gt;</ph> class.","pos":[0,73],"source":"It is derived from the <xref:System.Text.RegularExpressions.Regex> class."}]},{"pos":[977,1165],"content":"It is assigned the fully qualified name that is defined by the <ph id=\"ph1\">`fullnamespace`</ph> and <ph id=\"ph2\">`name`</ph> parameters of its corresponding <ph id=\"ph3\">&lt;xref:System.Text.RegularExpressions.RegexCompilationInfo&gt;</ph> object.","source":"It is assigned the fully qualified name that is defined by the `fullnamespace` and `name` parameters of its corresponding <xref:System.Text.RegularExpressions.RegexCompilationInfo> object."},{"pos":[1175,1223],"content":"It has a default (or parameterless) constructor.","nodes":[{"content":"It has a default (or parameterless) constructor.","pos":[0,48]}]},{"pos":[1230,1406],"content":"Ordinarily, the code that instantiates and uses the compiled regular expression is found in an assembly or application that is separate from the code that creates the assembly.","nodes":[{"content":"Ordinarily, the code that instantiates and uses the compiled regular expression is found in an assembly or application that is separate from the code that creates the assembly.","pos":[0,176]}]},{"pos":[1413,2010],"content":"Because the <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A> method generates a .NET Framework assembly from a method call instead of using a particular language's class definition keyword (such as `class` in C# or `Class`…`End Class` in Visual Basic), it does not allow .NET Framework attributes to be assigned to the assembly by using the development language's standard attribute syntax. The `attributes` parameter provides an alternative method for defining the attributes that apply to the assembly. For each attribute that you want to apply to the assembly, do the following:","nodes":[{"content":"Because the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A&gt;</ph> method generates a .NET Framework assembly from a method call instead of using a particular language's class definition keyword (such as <ph id=\"ph2\">`class`</ph> in C# or <ph id=\"ph3\">`Class`</ph>…<ph id=\"ph4\">`End Class`</ph>","pos":[0,250],"source":"Because the <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A> method generates a .NET Framework assembly from a method call instead of using a particular language's class definition keyword (such as `class` in C# or `Class`…`End Class`"},{"content":"in Visual Basic), it does not allow .NET Framework attributes to be assigned to the assembly by using the development language's standard attribute syntax.","pos":[251,406]},{"content":"The <ph id=\"ph1\">`attributes`</ph> parameter provides an alternative method for defining the attributes that apply to the assembly.","pos":[407,520],"source":" The `attributes` parameter provides an alternative method for defining the attributes that apply to the assembly."},{"content":"For each attribute that you want to apply to the assembly, do the following:","pos":[521,597]}]},{"pos":[2020,2150],"content":"Create an array of <xref:System.Type> objects representing the parameter types of the attribute constructor that you want to call.","nodes":[{"content":"Create an array of <ph id=\"ph1\">&lt;xref:System.Type&gt;</ph> objects representing the parameter types of the attribute constructor that you want to call.","pos":[0,130],"source":"Create an array of <xref:System.Type> objects representing the parameter types of the attribute constructor that you want to call."}]},{"pos":[2160,2273],"content":"Retrieve a <xref:System.Type> object representing the attribute class that you want to apply to the new assembly.","nodes":[{"content":"Retrieve a <ph id=\"ph1\">&lt;xref:System.Type&gt;</ph> object representing the attribute class that you want to apply to the new assembly.","pos":[0,113],"source":"Retrieve a <xref:System.Type> object representing the attribute class that you want to apply to the new assembly."}]},{"pos":[2283,2645],"content":"Call the <xref:System.Type.GetConstructor%2A> method of the attribute <xref:System.Type> object to retrieve a <xref:System.Reflection.ConstructorInfo> object representing the attribute constructor that you want to call. Pass the <xref:System.Type.GetConstructor%2A> method the array of <xref:System.Type> objects that represents the constructor's parameter types","nodes":[{"content":"Call the <xref:System.Type.GetConstructor%2A> method of the attribute <xref:System.Type> object to retrieve a <xref:System.Reflection.ConstructorInfo> object representing the attribute constructor that you want to call. Pass the <xref:System.Type.GetConstructor%2A> method the array of <xref:System.Type> objects that represents the constructor's parameter types","pos":[0,362],"nodes":[{"content":"Call the <ph id=\"ph1\">&lt;xref:System.Type.GetConstructor%2A&gt;</ph> method of the attribute <ph id=\"ph2\">&lt;xref:System.Type&gt;</ph> object to retrieve a <ph id=\"ph3\">&lt;xref:System.Reflection.ConstructorInfo&gt;</ph> object representing the attribute constructor that you want to call.","pos":[0,219],"source":"Call the <xref:System.Type.GetConstructor%2A> method of the attribute <xref:System.Type> object to retrieve a <xref:System.Reflection.ConstructorInfo> object representing the attribute constructor that you want to call."},{"content":"Pass the <ph id=\"ph1\">&lt;xref:System.Type.GetConstructor%2A&gt;</ph> method the array of <ph id=\"ph2\">&lt;xref:System.Type&gt;</ph> objects that represents the constructor's parameter types","pos":[220,362],"source":" Pass the <xref:System.Type.GetConstructor%2A> method the array of <xref:System.Type> objects that represents the constructor's parameter types"}]}]},{"pos":[2655,2758],"content":"Create a <xref:System.Object> array that defines the parameters to pass to the attribute's constructor.","nodes":[{"content":"Create a <ph id=\"ph1\">&lt;xref:System.Object&gt;</ph> array that defines the parameters to pass to the attribute's constructor.","pos":[0,103],"source":"Create a <xref:System.Object> array that defines the parameters to pass to the attribute's constructor."}]},{"pos":[2768,2994],"content":"Instantiate a <xref:System.Reflection.Emit.CustomAttributeBuilder> object by passing its constructor the <xref:System.Reflection.ConstructorInfo> object retrieved in step 3 and the <xref:System.Object> array created in step 4.","nodes":[{"content":"Instantiate a <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.CustomAttributeBuilder&gt;</ph> object by passing its constructor the <ph id=\"ph2\">&lt;xref:System.Reflection.ConstructorInfo&gt;</ph> object retrieved in step 3 and the <ph id=\"ph3\">&lt;xref:System.Object&gt;</ph> array created in step 4.","pos":[0,226],"source":"Instantiate a <xref:System.Reflection.Emit.CustomAttributeBuilder> object by passing its constructor the <xref:System.Reflection.ConstructorInfo> object retrieved in step 3 and the <xref:System.Object> array created in step 4."}]},{"pos":[3001,3420],"content":"You can then pass an array of these <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.CustomAttributeBuilder&gt;</ph> objects instead of the <ph id=\"ph2\">`attributes`</ph> parameter to the [<ph id=\"ph3\">\\]</ph>, AssemblyName, CustomAttributeBuilder<ph id=\"ph4\">\\&lt;</ph>xref:System.Text.RegularExpressions.Regex.CompileToAssembly%28System.Text.RegularExpressions.RegexCompilationInfo%5B%5D%2CSystem.Reflection.AssemblyName%2CSystem.Reflection.Emit.CustomAttributeBuilder%5B%5D%2CSystem.String%29&gt; method.","source":"You can then pass an array of these <xref:System.Reflection.Emit.CustomAttributeBuilder> objects instead of the `attributes` parameter to the [\\], AssemblyName, CustomAttributeBuilder\\<xref:System.Text.RegularExpressions.Regex.CompileToAssembly%28System.Text.RegularExpressions.RegexCompilationInfo%5B%5D%2CSystem.Reflection.AssemblyName%2CSystem.Reflection.Emit.CustomAttributeBuilder%5B%5D%2CSystem.String%29> method."}],"pos":[72410,75861],"yaml":true,"extradata":"MT"},{"content":"An array that describes the regular expressions to compile.","nodes":[{"pos":[0,59],"content":"An array that describes the regular expressions to compile.","nodes":[{"content":"An array that describes the regular expressions to compile.","pos":[0,59]}]}],"pos":[76237,76297],"yaml":true},{"content":"The file name of the assembly.","nodes":[{"pos":[0,30],"content":"The file name of the assembly.","nodes":[{"content":"The file name of the assembly.","pos":[0,30]}]}],"pos":[76382,76413],"yaml":true},{"content":"An array that defines the attributes to apply to the assembly.","nodes":[{"pos":[0,62],"content":"An array that defines the attributes to apply to the assembly.","nodes":[{"content":"An array that defines the attributes to apply to the assembly.","pos":[0,62]}]}],"pos":[76513,76576],"yaml":true},{"content":"The name of the Win32 resource file to include in the assembly.","nodes":[{"pos":[0,63],"content":"The name of the Win32 resource file to include in the assembly.","nodes":[{"content":"The name of the Win32 resource file to include in the assembly.","pos":[0,63]}]}],"pos":[76644,76708],"yaml":true},{"content":"The value of the <code>assemblyname</code> parameter's <xref href=\"System.Reflection.AssemblyName.Name\"></xref> property is an empty or null string.  \n  \n -or-  \n  \n The regular expression pattern of one or more objects in <code>regexinfos</code> contains invalid syntax.","nodes":[{"pos":[0,148],"content":"The value of the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">assemblyname</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter's <ph id=\"ph2\">&lt;xref href=\"System.Reflection.AssemblyName.Name\"&gt;&lt;/xref&gt;</ph> property is an empty or null string.","source":"The value of the <code>assemblyname</code> parameter's <xref href=\"System.Reflection.AssemblyName.Name\"></xref> property is an empty or null string."},{"pos":[155,159],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[166,271],"content":"The regular expression pattern of one or more objects in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">regexinfos</ph><ept id=\"p1\">&lt;/code&gt;</ept> contains invalid syntax.","source":"The regular expression pattern of one or more objects in <code>regexinfos</code> contains invalid syntax."}],"pos":[76884,77164],"yaml":true},{"content":"<code>assemblyname</code> or <code>regexinfos</code> is `null`.","nodes":[{"pos":[0,63],"content":"<ph id=\"ph1\">&lt;code&gt;assemblyname&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;regexinfos&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>assemblyname</code> or <code>regexinfos</code> is `null`."}],"pos":[77266,77330],"yaml":true},{"content":"The <code>resourceFile</code> parameter designates an invalid Win32 resource file.","nodes":[{"pos":[0,82],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">resourceFile</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter designates an invalid Win32 resource file.","source":"The <code>resourceFile</code> parameter designates an invalid Win32 resource file."}],"pos":[77462,77545],"yaml":true},{"content":"The file designated by the <code>resourceFile</code> parameter cannot be found.","nodes":[{"pos":[0,79],"content":"The file designated by the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">resourceFile</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter cannot be found.","source":"The file designated by the <code>resourceFile</code> parameter cannot be found."}],"pos":[77653,77733],"yaml":true},{"content":"Escapes a minimal set of characters (\\\\, *, +, ?, |, {, [, (,), ^, $,., #, and white space) by replacing them with their escape codes. This instructs the regular expression engine to interpret these characters literally rather than as metacharacters.","nodes":[{"pos":[0,250],"content":"Escapes a minimal set of characters (\\\\, *, +, ?, |, {, [, (,), ^, $,., #, and white space) by replacing them with their escape codes. This instructs the regular expression engine to interpret these characters literally rather than as metacharacters.","nodes":[{"content":"Escapes a minimal set of characters (\\\\, *, +, ?, |, {, [, (,), ^, $,., #, and white space) by replacing them with their escape codes. This instructs the regular expression engine to interpret these characters literally rather than as metacharacters.","pos":[0,250],"nodes":[{"content":"Escapes a minimal set of characters (<ph id=\"ph1\">\\\\</ph>, *, +, ?, |, {, [, (,), ^, $,., #, and white space) by replacing them with their escape codes.","pos":[0,134],"source":"Escapes a minimal set of characters (\\\\, *, +, ?, |, {, [, (,), ^, $,., #, and white space) by replacing them with their escape codes."},{"content":"This instructs the regular expression engine to interpret these characters literally rather than as metacharacters.","pos":[135,250]}]}]}],"pos":[78828,79081],"yaml":true},{"content":"<xref:System.Text.RegularExpressions.Regex.Escape%2A> converts a string so that the regular expression engine will interpret any metacharacters that it may contain as character literals. For example, consider a regular expression that is designed to extract comments that are delimited by straight opening and closing brackets ([ and ]) from text. In the following example, the regular expression \"[(.*?)]\" is interpreted as a character class. Rather than matching comments embedded in the input text, the regular expression matches each opening or closing parenthesis, period, asterisk, or question mark.  \n  \n [!code-csharp[System.Text.RegularExpressions.Regex.Escape#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Escape/cs/Escape1.cs#1)]\n [!code-vb[System.Text.RegularExpressions.Regex.Escape#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Escape/vb/Escape1.vb#1)]  \n  \n However, if the opening bracket is escaped by passing it to the <xref:System.Text.RegularExpressions.Regex.Escape%2A> method, the regular expression succeeds in matching comments that are embedded in the input string. The following example illustrates this.  \n  \n [!code-csharp[System.Text.RegularExpressions.Regex.Escape#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Escape/cs/Escape1.cs#2)]\n [!code-vb[System.Text.RegularExpressions.Regex.Escape#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Escape/vb/Escape1.vb#2)]  \n  \n In a regular expression that is defined by using static text, characters that are to be interpreted literally rather than as metacharacters can be escaped by preceding them with a backslash symbol (\\\\) as well as by calling the <xref:System.Text.RegularExpressions.Regex.Escape%2A> method. In a regular expression that is defined dynamically using characters that are not known at design time, calling the <xref:System.Text.RegularExpressions.Regex.Escape%2A> method is particularly important to ensure that the regular expression engine interprets individual characters as literals rather than as metacharacters.  \n  \n> [!NOTE]\n>  If a regular expression pattern includes either the number sign (#) or literal white-space characters, they must be escaped if input text is parsed with the <xref:System.Text.RegularExpressions.RegexOptions?displayProperty=fullName> option enabled.  \n  \n While the <xref:System.Text.RegularExpressions.Regex.Escape%2A> method escapes the straight opening bracket ([) and opening brace ({) characters, it does not escape their corresponding closing characters (] and }). In most cases, escaping these is not necessary. If a closing bracket or brace is not preceded by its corresponding opening character, the regular expression engine interprets it literally. If an opening braket or brace is interpreted as a metacharacter, the regular expression engine interprets the first corresponding closing character as a metacharacter. If this is not the desired behavior, the closing bracket or brace should be escaped by explicitly prepending the backslash (\\\\) character. For an illustration, see the Example section.","nodes":[{"pos":[0,605],"content":"<xref:System.Text.RegularExpressions.Regex.Escape%2A> converts a string so that the regular expression engine will interpret any metacharacters that it may contain as character literals. For example, consider a regular expression that is designed to extract comments that are delimited by straight opening and closing brackets ([ and ]) from text. In the following example, the regular expression \"[(.*?)]\" is interpreted as a character class. Rather than matching comments embedded in the input text, the regular expression matches each opening or closing parenthesis, period, asterisk, or question mark.","nodes":[{"content":"<xref:System.Text.RegularExpressions.Regex.Escape%2A> converts a string so that the regular expression engine will interpret any metacharacters that it may contain as character literals. For example, consider a regular expression that is designed to extract comments that are delimited by straight opening and closing brackets ([ and ]) from text. In the following example, the regular expression \"[(.*?)]\" is interpreted as a character class. Rather than matching comments embedded in the input text, the regular expression matches each opening or closing parenthesis, period, asterisk, or question mark.","pos":[0,605],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.Escape%2A&gt;</ph> converts a string so that the regular expression engine will interpret any metacharacters that it may contain as character literals.","pos":[0,186],"source":"<xref:System.Text.RegularExpressions.Regex.Escape%2A> converts a string so that the regular expression engine will interpret any metacharacters that it may contain as character literals."},{"content":"For example, consider a regular expression that is designed to extract comments that are delimited by straight opening and closing brackets ([ and ]) from text.","pos":[187,347]},{"content":"In the following example, the regular expression \"[(.*?)]\" is interpreted as a character class.","pos":[348,443]},{"content":"Rather than matching comments embedded in the input text, the regular expression matches each opening or closing parenthesis, period, asterisk, or question mark.","pos":[444,605]}]}]},{"pos":[612,957],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Text.RegularExpressions.Regex.Escape#1<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Escape/cs/Escape1.cs#1)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Text.RegularExpressions.Regex.Escape#1<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Escape/vb/Escape1.vb#1)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Text.RegularExpressions.Regex.Escape#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Escape/cs/Escape1.cs#1)]\n [!code-vb[System.Text.RegularExpressions.Regex.Escape#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Escape/vb/Escape1.vb#1)]"},{"pos":[964,1221],"content":"However, if the opening bracket is escaped by passing it to the <xref:System.Text.RegularExpressions.Regex.Escape%2A> method, the regular expression succeeds in matching comments that are embedded in the input string. The following example illustrates this.","nodes":[{"content":"However, if the opening bracket is escaped by passing it to the <xref:System.Text.RegularExpressions.Regex.Escape%2A> method, the regular expression succeeds in matching comments that are embedded in the input string. The following example illustrates this.","pos":[0,257],"nodes":[{"content":"However, if the opening bracket is escaped by passing it to the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.Escape%2A&gt;</ph> method, the regular expression succeeds in matching comments that are embedded in the input string.","pos":[0,217],"source":"However, if the opening bracket is escaped by passing it to the <xref:System.Text.RegularExpressions.Regex.Escape%2A> method, the regular expression succeeds in matching comments that are embedded in the input string."},{"content":"The following example illustrates this.","pos":[218,257]}]}]},{"pos":[1228,1573],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Text.RegularExpressions.Regex.Escape#2<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Escape/cs/Escape1.cs#2)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Text.RegularExpressions.Regex.Escape#2<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Escape/vb/Escape1.vb#2)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Text.RegularExpressions.Regex.Escape#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Escape/cs/Escape1.cs#2)]\n [!code-vb[System.Text.RegularExpressions.Regex.Escape#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Escape/vb/Escape1.vb#2)]"},{"pos":[1580,2193],"content":"In a regular expression that is defined by using static text, characters that are to be interpreted literally rather than as metacharacters can be escaped by preceding them with a backslash symbol (\\\\) as well as by calling the <xref:System.Text.RegularExpressions.Regex.Escape%2A> method. In a regular expression that is defined dynamically using characters that are not known at design time, calling the <xref:System.Text.RegularExpressions.Regex.Escape%2A> method is particularly important to ensure that the regular expression engine interprets individual characters as literals rather than as metacharacters.","nodes":[{"content":"In a regular expression that is defined by using static text, characters that are to be interpreted literally rather than as metacharacters can be escaped by preceding them with a backslash symbol (\\\\) as well as by calling the <xref:System.Text.RegularExpressions.Regex.Escape%2A> method. In a regular expression that is defined dynamically using characters that are not known at design time, calling the <xref:System.Text.RegularExpressions.Regex.Escape%2A> method is particularly important to ensure that the regular expression engine interprets individual characters as literals rather than as metacharacters.","pos":[0,613],"nodes":[{"content":"In a regular expression that is defined by using static text, characters that are to be interpreted literally rather than as metacharacters can be escaped by preceding them with a backslash symbol (<ph id=\"ph1\">\\\\</ph>) as well as by calling the <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.Regex.Escape%2A&gt;</ph> method.","pos":[0,289],"source":"In a regular expression that is defined by using static text, characters that are to be interpreted literally rather than as metacharacters can be escaped by preceding them with a backslash symbol (\\\\) as well as by calling the <xref:System.Text.RegularExpressions.Regex.Escape%2A> method."},{"content":"In a regular expression that is defined dynamically using characters that are not known at design time, calling the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.Escape%2A&gt;</ph> method is particularly important to ensure that the regular expression engine interprets individual characters as literals rather than as metacharacters.","pos":[290,613],"source":" In a regular expression that is defined dynamically using characters that are not known at design time, calling the <xref:System.Text.RegularExpressions.Regex.Escape%2A> method is particularly important to ensure that the regular expression engine interprets individual characters as literals rather than as metacharacters."}]}]},{"pos":[2201,2460],"content":"[!NOTE]\n If a regular expression pattern includes either the number sign (#) or literal white-space characters, they must be escaped if input text is parsed with the <xref:System.Text.RegularExpressions.RegexOptions?displayProperty=fullName> option enabled.","leadings":["","> "],"nodes":[{"content":"If a regular expression pattern includes either the number sign (#) or literal white-space characters, they must be escaped if input text is parsed with the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.RegexOptions?displayProperty=fullName&gt;</ph> option enabled.","pos":[9,257],"source":" If a regular expression pattern includes either the number sign (#) or literal white-space characters, they must be escaped if input text is parsed with the <xref:System.Text.RegularExpressions.RegexOptions?displayProperty=fullName> option enabled."}]},{"pos":[2467,3223],"content":"While the <xref:System.Text.RegularExpressions.Regex.Escape%2A> method escapes the straight opening bracket ([) and opening brace ({) characters, it does not escape their corresponding closing characters (] and }). In most cases, escaping these is not necessary. If a closing bracket or brace is not preceded by its corresponding opening character, the regular expression engine interprets it literally. If an opening braket or brace is interpreted as a metacharacter, the regular expression engine interprets the first corresponding closing character as a metacharacter. If this is not the desired behavior, the closing bracket or brace should be escaped by explicitly prepending the backslash (\\\\) character. For an illustration, see the Example section.","nodes":[{"content":"While the <xref:System.Text.RegularExpressions.Regex.Escape%2A> method escapes the straight opening bracket ([) and opening brace ({) characters, it does not escape their corresponding closing characters (] and }). In most cases, escaping these is not necessary. If a closing bracket or brace is not preceded by its corresponding opening character, the regular expression engine interprets it literally. If an opening braket or brace is interpreted as a metacharacter, the regular expression engine interprets the first corresponding closing character as a metacharacter. If this is not the desired behavior, the closing bracket or brace should be escaped by explicitly prepending the backslash (\\\\) character. For an illustration, see the Example section.","pos":[0,756],"nodes":[{"content":"While the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.Escape%2A&gt;</ph> method escapes the straight opening bracket ([) and opening brace ({) characters, it does not escape their corresponding closing characters (] and }).","pos":[0,214],"source":"While the <xref:System.Text.RegularExpressions.Regex.Escape%2A> method escapes the straight opening bracket ([) and opening brace ({) characters, it does not escape their corresponding closing characters (] and })."},{"content":"In most cases, escaping these is not necessary.","pos":[215,262]},{"content":"If a closing bracket or brace is not preceded by its corresponding opening character, the regular expression engine interprets it literally.","pos":[263,403]},{"content":"If an opening braket or brace is interpreted as a metacharacter, the regular expression engine interprets the first corresponding closing character as a metacharacter.","pos":[404,571]},{"content":"If this is not the desired behavior, the closing bracket or brace should be escaped by explicitly prepending the backslash (<ph id=\"ph1\">\\\\</ph>) character.","pos":[572,710],"source":" If this is not the desired behavior, the closing bracket or brace should be escaped by explicitly prepending the backslash (\\\\) character."},{"content":"For an illustration, see the Example section.","pos":[711,756]}]}]}],"pos":[79092,82339],"yaml":true,"extradata":"MT"},{"content":"The input string that contains the text to convert.","nodes":[{"pos":[0,51],"content":"The input string that contains the text to convert.","nodes":[{"content":"The input string that contains the text to convert.","pos":[0,51]}]}],"pos":[83716,83768],"yaml":true},{"content":"A string of characters with metacharacters converted to their escaped form.","nodes":[{"pos":[0,75],"content":"A string of characters with metacharacters converted to their escaped form.","nodes":[{"content":"A string of characters with metacharacters converted to their escaped form.","pos":[0,75]}]}],"pos":[83825,83901],"yaml":true},{"content":"<code>str</code> is `null`.","nodes":[{"pos":[0,27],"content":"<ph id=\"ph1\">&lt;code&gt;str&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>str</code> is `null`."}],"pos":[84074,84102],"yaml":true},{"content":"Used by a <xref href=\"System.Text.RegularExpressions.Regex\"></xref> object generated by the <xref href=\"System.Text.RegularExpressions.Regex.CompileToAssembly*\"></xref> method.","nodes":[{"pos":[0,176],"content":"Used by a <ph id=\"ph1\">&lt;xref href=\"System.Text.RegularExpressions.Regex\"&gt;&lt;/xref&gt;</ph> object generated by the <ph id=\"ph2\">&lt;xref href=\"System.Text.RegularExpressions.Regex.CompileToAssembly*\"&gt;&lt;/xref&gt;</ph> method.","source":"Used by a <xref href=\"System.Text.RegularExpressions.Regex\"></xref> object generated by the <xref href=\"System.Text.RegularExpressions.Regex.CompileToAssembly*\"></xref> method."}],"pos":[85549,85726],"yaml":true},{"content":"Returns an array of capturing group names for the regular expression.","nodes":[{"pos":[0,69],"content":"Returns an array of capturing group names for the regular expression.","nodes":[{"content":"Returns an array of capturing group names for the regular expression.","pos":[0,69]}]}],"pos":[87221,87291],"yaml":true},{"content":"The collection of group names contains the set of strings used to name capturing groups in the expression. Even if capturing groups are not explicitly named, they are automatically assigned numerical names (\"0\", \"1\", \"2\", \"3\", and so on). The \"0\" named group represents all text matched by the regular expression pattern. Numbered groups precede explicitly named groups in the collection, and named groups appear in the order in which they are defined in the regular expression pattern.  \n  \n You can use the <xref:System.Array.Length%2A> property on the array returned by this method to determine the number of groups in a regular expression.","nodes":[{"pos":[0,486],"content":"The collection of group names contains the set of strings used to name capturing groups in the expression. Even if capturing groups are not explicitly named, they are automatically assigned numerical names (\"0\", \"1\", \"2\", \"3\", and so on). The \"0\" named group represents all text matched by the regular expression pattern. Numbered groups precede explicitly named groups in the collection, and named groups appear in the order in which they are defined in the regular expression pattern.","nodes":[{"content":"The collection of group names contains the set of strings used to name capturing groups in the expression. Even if capturing groups are not explicitly named, they are automatically assigned numerical names (\"0\", \"1\", \"2\", \"3\", and so on). The \"0\" named group represents all text matched by the regular expression pattern. Numbered groups precede explicitly named groups in the collection, and named groups appear in the order in which they are defined in the regular expression pattern.","pos":[0,486],"nodes":[{"content":"The collection of group names contains the set of strings used to name capturing groups in the expression.","pos":[0,106]},{"content":"Even if capturing groups are not explicitly named, they are automatically assigned numerical names (\"0\", \"1\", \"2\", \"3\", and so on).","pos":[107,238]},{"content":"The \"0\" named group represents all text matched by the regular expression pattern.","pos":[239,321]},{"content":"Numbered groups precede explicitly named groups in the collection, and named groups appear in the order in which they are defined in the regular expression pattern.","pos":[322,486]}]}]},{"pos":[493,643],"content":"You can use the <xref:System.Array.Length%2A> property on the array returned by this method to determine the number of groups in a regular expression.","nodes":[{"content":"You can use the <ph id=\"ph1\">&lt;xref:System.Array.Length%2A&gt;</ph> property on the array returned by this method to determine the number of groups in a regular expression.","pos":[0,150],"source":"You can use the <xref:System.Array.Length%2A> property on the array returned by this method to determine the number of groups in a regular expression."}]}],"pos":[87302,87960],"yaml":true,"extradata":"MT"},{"content":"A string array of group names.","nodes":[{"pos":[0,30],"content":"A string array of group names.","nodes":[{"content":"A string array of group names.","pos":[0,30]}]}],"pos":[89763,89794],"yaml":true},{"content":"Returns an array of capturing group numbers that correspond to group names in an array.","nodes":[{"pos":[0,87],"content":"Returns an array of capturing group numbers that correspond to group names in an array.","nodes":[{"content":"Returns an array of capturing group numbers that correspond to group names in an array.","pos":[0,87]}]}],"pos":[91377,91465],"yaml":true},{"content":"Both unnamed and named capturing groups can be accessed by number. Unnamed groups are numbered from left to right starting with 1. (The capturing group in index 0 (zero) represents the match as a whole.)  Named groups are then numbered from left to right starting with a number that is one greater than the number of unnamed capturing groups.  \n  \n Referencing a group by its number instead of by string name can provide faster access.","nodes":[{"pos":[0,342],"content":"Both unnamed and named capturing groups can be accessed by number. Unnamed groups are numbered from left to right starting with 1. (The capturing group in index 0 (zero) represents the match as a whole.)  Named groups are then numbered from left to right starting with a number that is one greater than the number of unnamed capturing groups.","nodes":[{"content":"Both unnamed and named capturing groups can be accessed by number. Unnamed groups are numbered from left to right starting with 1. (The capturing group in index 0 (zero) represents the match as a whole.)  Named groups are then numbered from left to right starting with a number that is one greater than the number of unnamed capturing groups.","pos":[0,342],"nodes":[{"content":"Both unnamed and named capturing groups can be accessed by number.","pos":[0,66]},{"content":"Unnamed groups are numbered from left to right starting with 1.","pos":[67,130]},{"content":"(The capturing group in index 0 (zero) represents the match as a whole.)  Named groups are then numbered from left to right starting with a number that is one greater than the number of unnamed capturing groups.","pos":[131,342]}]}]},{"pos":[349,435],"content":"Referencing a group by its number instead of by string name can provide faster access.","nodes":[{"content":"Referencing a group by its number instead of by string name can provide faster access.","pos":[0,86]}]}],"pos":[91476,91916],"yaml":true,"extradata":"MT"},{"content":"An integer array of group numbers.","nodes":[{"pos":[0,34],"content":"An integer array of group numbers.","nodes":[{"content":"An integer array of group numbers.","pos":[0,34]}]}],"pos":[94023,94058],"yaml":true},{"content":"Gets the group name that corresponds to the specified group number.","nodes":[{"pos":[0,67],"content":"Gets the group name that corresponds to the specified group number.","nodes":[{"content":"Gets the group name that corresponds to the specified group number.","pos":[0,67]}]}],"pos":[95724,95792],"yaml":true},{"content":"A regular expression pattern may contain either named or numbered capturing groups, which delineate subexpressions within a pattern match. Numbered groups are delimited by the syntax (*subexpression*) and are assigned numbers based on their order in the regular expression. Named groups are delimited by the syntax (?`<`*name*`>`*subexpression*) or (?'*name*'*subexpression*), where *name* is the name by which the subexpression will be identified. (For more information, see [Grouping Constructs](~/docs/standard/base-types/grouping-constructs-in-regular-expressions.md).) The <xref:System.Text.RegularExpressions.Regex.GroupNameFromNumber%2A> method identifies both named groups and numbered groups by their ordinal positions in the regular expression. Ordinal position zero always represents the entire regular expression. All numbered groups are then counted before named groups, regardless of their actual position in the regular expression pattern.  \n  \n If `i` is the number of a named group, the method returns the name of the group. If `i` is the number of an unnamed group, the method returns the string representation of the number. For example, if `i` is 1, the method returns \"1\". If `i` is not the number of a capturing group, the method returns <xref:System.String?displayProperty=fullName>.  \n  \n If a pattern match is found, the value returned by this method can then be used to retrieve the <xref:System.Text.RegularExpressions.Group> object that represents the captured group from the <xref:System.Text.RegularExpressions.GroupCollection.Item%2A?displayProperty=fullName> property. The <xref:System.Text.RegularExpressions.GroupCollection> object is returned by the <xref:System.Text.RegularExpressions.Match.Groups%2A?displayProperty=fullName> property.","nodes":[{"pos":[0,954],"content":"A regular expression pattern may contain either named or numbered capturing groups, which delineate subexpressions within a pattern match. Numbered groups are delimited by the syntax (*subexpression*) and are assigned numbers based on their order in the regular expression. Named groups are delimited by the syntax (?`<`*name*`>`*subexpression*) or (?'*name*'*subexpression*), where *name* is the name by which the subexpression will be identified. (For more information, see [Grouping Constructs](~/docs/standard/base-types/grouping-constructs-in-regular-expressions.md).) The <xref:System.Text.RegularExpressions.Regex.GroupNameFromNumber%2A> method identifies both named groups and numbered groups by their ordinal positions in the regular expression. Ordinal position zero always represents the entire regular expression. All numbered groups are then counted before named groups, regardless of their actual position in the regular expression pattern.","nodes":[{"content":"A regular expression pattern may contain either named or numbered capturing groups, which delineate subexpressions within a pattern match.","pos":[0,138]},{"content":"Numbered groups are delimited by the syntax (<bpt id=\"p1\">*</bpt>subexpression<ept id=\"p1\">*</ept>) and are assigned numbers based on their order in the regular expression.","pos":[139,273],"source":" Numbered groups are delimited by the syntax (*subexpression*) and are assigned numbers based on their order in the regular expression."},{"content":"Named groups are delimited by the syntax (?<ph id=\"ph1\">`&lt;`</ph><bpt id=\"p1\">*</bpt>name<ept id=\"p1\">*</ept><ph id=\"ph2\">`&gt;`</ph><bpt id=\"p2\">*</bpt>subexpression<ept id=\"p2\">*</ept>) or (?'<bpt id=\"p3\">*</bpt>name<ept id=\"p3\">*</ept>'<bpt id=\"p4\">*</bpt>subexpression<ept id=\"p4\">*</ept>), where <bpt id=\"p5\">*</bpt>name<ept id=\"p5\">*</ept> is the name by which the subexpression will be identified.","pos":[274,448],"source":" Named groups are delimited by the syntax (?`<`*name*`>`*subexpression*) or (?'*name*'*subexpression*), where *name* is the name by which the subexpression will be identified."},{"content":"(For more information, see <bpt id=\"p1\">[</bpt>Grouping Constructs<ept id=\"p1\">](~/docs/standard/base-types/grouping-constructs-in-regular-expressions.md)</ept>.) The <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.GroupNameFromNumber%2A&gt;</ph> method identifies both named groups and numbered groups by their ordinal positions in the regular expression.","pos":[449,754],"source":" (For more information, see [Grouping Constructs](~/docs/standard/base-types/grouping-constructs-in-regular-expressions.md).) The <xref:System.Text.RegularExpressions.Regex.GroupNameFromNumber%2A> method identifies both named groups and numbered groups by their ordinal positions in the regular expression."},{"content":"Ordinal position zero always represents the entire regular expression.","pos":[755,825]},{"content":"All numbered groups are then counted before named groups, regardless of their actual position in the regular expression pattern.","pos":[826,954]}]},{"pos":[961,1306],"content":"If `i` is the number of a named group, the method returns the name of the group. If `i` is the number of an unnamed group, the method returns the string representation of the number. For example, if `i` is 1, the method returns \"1\". If `i` is not the number of a capturing group, the method returns <xref:System.String?displayProperty=fullName>.","nodes":[{"content":"If <ph id=\"ph1\">`i`</ph> is the number of a named group, the method returns the name of the group.","pos":[0,80],"source":"If `i` is the number of a named group, the method returns the name of the group."},{"content":"If <ph id=\"ph1\">`i`</ph> is the number of an unnamed group, the method returns the string representation of the number.","pos":[81,182],"source":" If `i` is the number of an unnamed group, the method returns the string representation of the number."},{"content":"For example, if <ph id=\"ph1\">`i`</ph> is 1, the method returns \"1\".","pos":[183,232],"source":" For example, if `i` is 1, the method returns \"1\"."},{"content":"If <ph id=\"ph1\">`i`</ph> is not the number of a capturing group, the method returns <ph id=\"ph2\">&lt;xref:System.String?displayProperty=fullName&gt;</ph>.","pos":[233,345],"source":" If `i` is not the number of a capturing group, the method returns <xref:System.String?displayProperty=fullName>."}]},{"pos":[1313,1773],"content":"If a pattern match is found, the value returned by this method can then be used to retrieve the <xref:System.Text.RegularExpressions.Group> object that represents the captured group from the <xref:System.Text.RegularExpressions.GroupCollection.Item%2A?displayProperty=fullName> property. The <xref:System.Text.RegularExpressions.GroupCollection> object is returned by the <xref:System.Text.RegularExpressions.Match.Groups%2A?displayProperty=fullName> property.","nodes":[{"content":"If a pattern match is found, the value returned by this method can then be used to retrieve the <xref:System.Text.RegularExpressions.Group> object that represents the captured group from the <xref:System.Text.RegularExpressions.GroupCollection.Item%2A?displayProperty=fullName> property. The <xref:System.Text.RegularExpressions.GroupCollection> object is returned by the <xref:System.Text.RegularExpressions.Match.Groups%2A?displayProperty=fullName> property.","pos":[0,460],"nodes":[{"content":"If a pattern match is found, the value returned by this method can then be used to retrieve the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Group&gt;</ph> object that represents the captured group from the <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.GroupCollection.Item%2A?displayProperty=fullName&gt;</ph> property.","pos":[0,287],"source":"If a pattern match is found, the value returned by this method can then be used to retrieve the <xref:System.Text.RegularExpressions.Group> object that represents the captured group from the <xref:System.Text.RegularExpressions.GroupCollection.Item%2A?displayProperty=fullName> property."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.GroupCollection&gt;</ph> object is returned by the <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.Match.Groups%2A?displayProperty=fullName&gt;</ph> property.","pos":[288,460],"source":" The <xref:System.Text.RegularExpressions.GroupCollection> object is returned by the <xref:System.Text.RegularExpressions.Match.Groups%2A?displayProperty=fullName> property."}]}]}],"pos":[95803,97585],"yaml":true,"extradata":"MT"},{"content":"The group number to convert to the corresponding group name.","nodes":[{"pos":[0,60],"content":"The group number to convert to the corresponding group name.","nodes":[{"content":"The group number to convert to the corresponding group name.","pos":[0,60]}]}],"pos":[99387,99448],"yaml":true},{"content":"A string that contains the group name associated with the specified group number. If there is no group name that corresponds to <code>i</code>, the method returns <xref href=\"System.String.Empty\"></xref>.","nodes":[{"pos":[0,204],"content":"A string that contains the group name associated with the specified group number. If there is no group name that corresponds to <code>i</code>, the method returns <xref href=\"System.String.Empty\"></xref>.","nodes":[{"content":"A string that contains the group name associated with the specified group number.","pos":[0,81]},{"content":"If there is no group name that corresponds to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">i</ph><ept id=\"p1\">&lt;/code&gt;</ept>, the method returns <ph id=\"ph2\">&lt;xref href=\"System.String.Empty\"&gt;&lt;/xref&gt;</ph>.","pos":[82,204],"source":" If there is no group name that corresponds to <code>i</code>, the method returns <xref href=\"System.String.Empty\"></xref>."}]}],"pos":[99505,99710],"yaml":true},{"content":"Returns the group number that corresponds to the specified group name.","nodes":[{"pos":[0,70],"content":"Returns the group number that corresponds to the specified group name.","nodes":[{"content":"Returns the group number that corresponds to the specified group name.","pos":[0,70]}]}],"pos":[101386,101457],"yaml":true},{"content":"A regular expression pattern may contain either named or numbered capturing groups, which delineate subexpressions within a pattern match. Numbered groups are delimited by the syntax (*subexpression*) and are assigned numbers based on their order in the regular expression. Named groups are delimited by the syntax (?`<`*name*`>`*subexpression*) or (?'*name*'*subexpression*), where *name* is the name by which the subexpression will be identified. (For more information, see [Grouping Constructs](~/docs/standard/base-types/grouping-constructs-in-regular-expressions.md).) The <xref:System.Text.RegularExpressions.Regex.GroupNumberFromName%2A> method identifies both named groups and numbered groups by their ordinal positions in the regular expression. Ordinal position zero always represents the entire regular expression. All numbered groups are then counted before named groups, regardless of their actual position in the regular expression pattern.  \n  \n If `name` is the string representation of a group number that is present in the regular expression pattern, the method returns that number. If `name` corresponds to a named capturing group that is present in the regular expression pattern, the method returns its corresponding number. The comparison of `name` with the group name is case-sensitive. If `name` does not correspond to the name of a capturing group or to the string representation of the number of a capturing group, the method returns -1.","nodes":[{"pos":[0,954],"content":"A regular expression pattern may contain either named or numbered capturing groups, which delineate subexpressions within a pattern match. Numbered groups are delimited by the syntax (*subexpression*) and are assigned numbers based on their order in the regular expression. Named groups are delimited by the syntax (?`<`*name*`>`*subexpression*) or (?'*name*'*subexpression*), where *name* is the name by which the subexpression will be identified. (For more information, see [Grouping Constructs](~/docs/standard/base-types/grouping-constructs-in-regular-expressions.md).) The <xref:System.Text.RegularExpressions.Regex.GroupNumberFromName%2A> method identifies both named groups and numbered groups by their ordinal positions in the regular expression. Ordinal position zero always represents the entire regular expression. All numbered groups are then counted before named groups, regardless of their actual position in the regular expression pattern.","nodes":[{"content":"A regular expression pattern may contain either named or numbered capturing groups, which delineate subexpressions within a pattern match.","pos":[0,138]},{"content":"Numbered groups are delimited by the syntax (<bpt id=\"p1\">*</bpt>subexpression<ept id=\"p1\">*</ept>) and are assigned numbers based on their order in the regular expression.","pos":[139,273],"source":" Numbered groups are delimited by the syntax (*subexpression*) and are assigned numbers based on their order in the regular expression."},{"content":"Named groups are delimited by the syntax (?<ph id=\"ph1\">`&lt;`</ph><bpt id=\"p1\">*</bpt>name<ept id=\"p1\">*</ept><ph id=\"ph2\">`&gt;`</ph><bpt id=\"p2\">*</bpt>subexpression<ept id=\"p2\">*</ept>) or (?'<bpt id=\"p3\">*</bpt>name<ept id=\"p3\">*</ept>'<bpt id=\"p4\">*</bpt>subexpression<ept id=\"p4\">*</ept>), where <bpt id=\"p5\">*</bpt>name<ept id=\"p5\">*</ept> is the name by which the subexpression will be identified.","pos":[274,448],"source":" Named groups are delimited by the syntax (?`<`*name*`>`*subexpression*) or (?'*name*'*subexpression*), where *name* is the name by which the subexpression will be identified."},{"content":"(For more information, see <bpt id=\"p1\">[</bpt>Grouping Constructs<ept id=\"p1\">](~/docs/standard/base-types/grouping-constructs-in-regular-expressions.md)</ept>.) The <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.GroupNumberFromName%2A&gt;</ph> method identifies both named groups and numbered groups by their ordinal positions in the regular expression.","pos":[449,754],"source":" (For more information, see [Grouping Constructs](~/docs/standard/base-types/grouping-constructs-in-regular-expressions.md).) The <xref:System.Text.RegularExpressions.Regex.GroupNumberFromName%2A> method identifies both named groups and numbered groups by their ordinal positions in the regular expression."},{"content":"Ordinal position zero always represents the entire regular expression.","pos":[755,825]},{"content":"All numbered groups are then counted before named groups, regardless of their actual position in the regular expression pattern.","pos":[826,954]}]},{"pos":[961,1463],"content":"If `name` is the string representation of a group number that is present in the regular expression pattern, the method returns that number. If `name` corresponds to a named capturing group that is present in the regular expression pattern, the method returns its corresponding number. The comparison of `name` with the group name is case-sensitive. If `name` does not correspond to the name of a capturing group or to the string representation of the number of a capturing group, the method returns -1.","nodes":[{"content":"If <ph id=\"ph1\">`name`</ph> is the string representation of a group number that is present in the regular expression pattern, the method returns that number.","pos":[0,139],"source":"If `name` is the string representation of a group number that is present in the regular expression pattern, the method returns that number."},{"content":"If <ph id=\"ph1\">`name`</ph> corresponds to a named capturing group that is present in the regular expression pattern, the method returns its corresponding number.","pos":[140,284],"source":" If `name` corresponds to a named capturing group that is present in the regular expression pattern, the method returns its corresponding number."},{"content":"The comparison of <ph id=\"ph1\">`name`</ph> with the group name is case-sensitive.","pos":[285,348],"source":" The comparison of `name` with the group name is case-sensitive."},{"content":"If <ph id=\"ph1\">`name`</ph> does not correspond to the name of a capturing group or to the string representation of the number of a capturing group, the method returns -1.","pos":[349,502],"source":" If `name` does not correspond to the name of a capturing group or to the string representation of the number of a capturing group, the method returns -1."}]}],"pos":[101468,102936],"yaml":true,"extradata":"MT"},{"content":"The group name to convert to the corresponding group number.","nodes":[{"pos":[0,60],"content":"The group name to convert to the corresponding group number.","nodes":[{"content":"The group name to convert to the corresponding group number.","pos":[0,60]}]}],"pos":[103081,103142],"yaml":true},{"content":"The group number that corresponds to the specified group name, or -1 if <code>name</code> is not a valid group name.","nodes":[{"pos":[0,116],"content":"The group number that corresponds to the specified group name, or -1 if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">name</ph><ept id=\"p1\">&lt;/code&gt;</ept> is not a valid group name.","source":"The group number that corresponds to the specified group name, or -1 if <code>name</code> is not a valid group name."}],"pos":[103198,103315],"yaml":true},{"content":"<code>name</code> is `null`.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;name&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>name</code> is `null`."}],"pos":[103501,103530],"yaml":true},{"content":"Specifies that a pattern-matching operation should not time out.","nodes":[{"pos":[0,64],"content":"Specifies that a pattern-matching operation should not time out.","nodes":[{"content":"Specifies that a pattern-matching operation should not time out.","pos":[0,64]}]}],"pos":[105055,105120],"yaml":true},{"content":"The <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29> class constructor and a number of static matching methods use the <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout> constant to indicate that the attempt to find a pattern match should not time out.  \n  \n> [!WARNING]\n>  Setting the regular expression engine's time-out value to <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout> can cause regular expressions that rely on excessive backtracking to appear to stop responding when processing text that nearly matches the regular expression pattern. If you disable time-outs, you should ensure that your regular expression does not rely on excessive backtracking and that it handles text that nearly matches the regular expression pattern.  \n>   \n>  For more information about handling backtracking, see [Backtracking](~/docs/standard/base-types/backtracking-in-regular-expressions.md).  \n  \n The <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout> constant can be supplied as the value of the `matchTimeout` argument of the following members:  \n  \n-   <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29>  \n  \n-   <xref:System.Text.RegularExpressions.RegexCompilationInfo.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.String%2CSystem.String%2CSystem.Boolean%2CSystem.TimeSpan%29?displayProperty=fullName>  \n  \n-   <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29>  \n  \n-   <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29>  \n  \n-   <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29>  \n  \n-   <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29>  \n  \n-   <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.MatchEvaluator%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29>  \n  \n-   <xref:System.Text.RegularExpressions.Regex.Split%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29>","nodes":[{"pos":[0,352],"content":"The <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29> class constructor and a number of static matching methods use the <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout> constant to indicate that the attempt to find a pattern match should not time out.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29&gt;</ph> class constructor and a number of static matching methods use the <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout&gt;</ph> constant to indicate that the attempt to find a pattern match should not time out.","pos":[0,352],"source":"The <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29> class constructor and a number of static matching methods use the <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout> constant to indicate that the attempt to find a pattern match should not time out."}]},{"pos":[360,854],"content":"[!WARNING]\n Setting the regular expression engine's time-out value to <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout> can cause regular expressions that rely on excessive backtracking to appear to stop responding when processing text that nearly matches the regular expression pattern. If you disable time-outs, you should ensure that your regular expression does not rely on excessive backtracking and that it handles text that nearly matches the regular expression pattern.","leadings":["","> "],"nodes":[{"content":" Setting the regular expression engine's time-out value to <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout> can cause regular expressions that rely on excessive backtracking to appear to stop responding when processing text that nearly matches the regular expression pattern. If you disable time-outs, you should ensure that your regular expression does not rely on excessive backtracking and that it handles text that nearly matches the regular expression pattern.","pos":[11,492],"nodes":[{"content":"Setting the regular expression engine's time-out value to <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout&gt;</ph> can cause regular expressions that rely on excessive backtracking to appear to stop responding when processing text that nearly matches the regular expression pattern.","pos":[1,291],"source":" Setting the regular expression engine's time-out value to <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout> can cause regular expressions that rely on excessive backtracking to appear to stop responding when processing text that nearly matches the regular expression pattern."},{"content":"If you disable time-outs, you should ensure that your regular expression does not rely on excessive backtracking and that it handles text that nearly matches the regular expression pattern.","pos":[292,481]}]}]},{"pos":[865,1001],"content":"For more information about handling backtracking, see <bpt id=\"p1\">[</bpt>Backtracking<ept id=\"p1\">](~/docs/standard/base-types/backtracking-in-regular-expressions.md)</ept>.","source":"For more information about handling backtracking, see [Backtracking](~/docs/standard/base-types/backtracking-in-regular-expressions.md)."},{"pos":[1008,1171],"content":"The <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout&gt;</ph> constant can be supplied as the value of the <ph id=\"ph2\">`matchTimeout`</ph> argument of the following members:","source":"The <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout> constant can be supplied as the value of the `matchTimeout` argument of the following members:"},{"pos":[1181,1315],"content":"<xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29>","nodes":[]},{"pos":[1325,1548],"content":"<xref:System.Text.RegularExpressions.RegexCompilationInfo.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.String%2CSystem.String%2CSystem.Boolean%2CSystem.TimeSpan%29?displayProperty=fullName>","nodes":[]},{"pos":[1558,1708],"content":"<xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29>","nodes":[]},{"pos":[1718,1866],"content":"<xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29>","nodes":[]},{"pos":[1876,2026],"content":"<xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29>","nodes":[]},{"pos":[2036,2202],"content":"<xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29>","nodes":[]},{"pos":[2212,2410],"content":"<xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.MatchEvaluator%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29>","nodes":[]},{"pos":[2420,2568],"content":"<xref:System.Text.RegularExpressions.Regex.Split%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29>","nodes":[]}],"pos":[105131,107725],"yaml":true,"extradata":"MT"},{"content":"Used by a <xref href=\"System.Text.RegularExpressions.Regex\"></xref> object generated by the <xref href=\"System.Text.RegularExpressions.Regex.CompileToAssembly*\"></xref> method.","nodes":[{"pos":[0,176],"content":"Used by a <ph id=\"ph1\">&lt;xref href=\"System.Text.RegularExpressions.Regex\"&gt;&lt;/xref&gt;</ph> object generated by the <ph id=\"ph2\">&lt;xref href=\"System.Text.RegularExpressions.Regex.CompileToAssembly*\"&gt;&lt;/xref&gt;</ph> method.","source":"Used by a <xref href=\"System.Text.RegularExpressions.Regex\"></xref> object generated by the <xref href=\"System.Text.RegularExpressions.Regex.CompileToAssembly*\"></xref> method."}],"pos":[109413,109590],"yaml":true},{"content":"References have already been initialized.","nodes":[{"pos":[0,41],"content":"References have already been initialized.","nodes":[{"content":"References have already been initialized.","pos":[0,41]}]}],"pos":[109859,109901],"yaml":true},{"content":"The maximum amount of time that can elapse in a pattern-matching operation before the operation times out.","nodes":[{"pos":[0,106],"content":"The maximum amount of time that can elapse in a pattern-matching operation before the operation times out.","nodes":[{"content":"The maximum amount of time that can elapse in a pattern-matching operation before the operation times out.","pos":[0,106]}]}],"pos":[111226,111333],"yaml":true},{"content":"Indicates whether the regular expression specified in the <xref href=\"System.Text.RegularExpressions.Regex\"></xref> constructor finds a match in a specified input string.","nodes":[{"pos":[0,170],"content":"Indicates whether the regular expression specified in the <ph id=\"ph1\">&lt;xref href=\"System.Text.RegularExpressions.Regex\"&gt;&lt;/xref&gt;</ph> constructor finds a match in a specified input string.","source":"Indicates whether the regular expression specified in the <xref href=\"System.Text.RegularExpressions.Regex\"></xref> constructor finds a match in a specified input string."}],"pos":[112946,113117],"yaml":true},{"content":"The <xref:System.Text.RegularExpressions.Regex.IsMatch%2A> method is typically used to validate a string or to ensure that a string conforms to a particular pattern without retrieving that string for subsequent manipulation. If you want to determine whether one or more strings match a regular expression pattern and then retrieve them for subsequent manipulation, call the <xref:System.Text.RegularExpressions.Regex.Match%2A> or <xref:System.Text.RegularExpressions.Regex.Matches%2A> method.  \n  \n The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the matching operation exceeds the time-out interval specified by the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=fullName> constructor. If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <xref:System.Text.RegularExpressions.Regex> object is created. If no time-out is defined in the <xref:System.Text.RegularExpressions.Regex> constructor call or in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, no exception is thrown.","nodes":[{"pos":[0,492],"content":"The <xref:System.Text.RegularExpressions.Regex.IsMatch%2A> method is typically used to validate a string or to ensure that a string conforms to a particular pattern without retrieving that string for subsequent manipulation. If you want to determine whether one or more strings match a regular expression pattern and then retrieve them for subsequent manipulation, call the <xref:System.Text.RegularExpressions.Regex.Match%2A> or <xref:System.Text.RegularExpressions.Regex.Matches%2A> method.","nodes":[{"content":"The <xref:System.Text.RegularExpressions.Regex.IsMatch%2A> method is typically used to validate a string or to ensure that a string conforms to a particular pattern without retrieving that string for subsequent manipulation. If you want to determine whether one or more strings match a regular expression pattern and then retrieve them for subsequent manipulation, call the <xref:System.Text.RegularExpressions.Regex.Match%2A> or <xref:System.Text.RegularExpressions.Regex.Matches%2A> method.","pos":[0,492],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.IsMatch%2A&gt;</ph> method is typically used to validate a string or to ensure that a string conforms to a particular pattern without retrieving that string for subsequent manipulation.","pos":[0,224],"source":"The <xref:System.Text.RegularExpressions.Regex.IsMatch%2A> method is typically used to validate a string or to ensure that a string conforms to a particular pattern without retrieving that string for subsequent manipulation."},{"content":"If you want to determine whether one or more strings match a regular expression pattern and then retrieve them for subsequent manipulation, call the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.Match%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.Regex.Matches%2A&gt;</ph> method.","pos":[225,492],"source":" If you want to determine whether one or more strings match a regular expression pattern and then retrieve them for subsequent manipulation, call the <xref:System.Text.RegularExpressions.Regex.Match%2A> or <xref:System.Text.RegularExpressions.Regex.Matches%2A> method."}]}]},{"pos":[499,1387],"content":"The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the matching operation exceeds the time-out interval specified by the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=fullName> constructor. If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <xref:System.Text.RegularExpressions.Regex> object is created. If no time-out is defined in the <xref:System.Text.RegularExpressions.Regex> constructor call or in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, no exception is thrown.","nodes":[{"content":"The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the matching operation exceeds the time-out interval specified by the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=fullName> constructor. If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <xref:System.Text.RegularExpressions.Regex> object is created. If no time-out is defined in the <xref:System.Text.RegularExpressions.Regex> constructor call or in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, no exception is thrown.","pos":[0,888],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.RegexMatchTimeoutException&gt;</ph> exception is thrown if the execution time of the matching operation exceeds the time-out interval specified by the <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=fullName&gt;</ph> constructor.","pos":[0,356],"source":"The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the matching operation exceeds the time-out interval specified by the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=fullName> constructor."},{"content":"If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex&gt;</ph> object is created.","pos":[357,608],"source":" If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <xref:System.Text.RegularExpressions.Regex> object is created."},{"content":"If no time-out is defined in the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex&gt;</ph> constructor call or in the application domain's properties, or if the time-out value is <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName&gt;</ph>, no exception is thrown.","pos":[609,888],"source":" If no time-out is defined in the <xref:System.Text.RegularExpressions.Regex> constructor call or in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, no exception is thrown."}]}]}],"pos":[113128,114520],"yaml":true,"extradata":"MT"},{"content":"The string to search for a match.","nodes":[{"pos":[0,33],"content":"The string to search for a match.","nodes":[{"content":"The string to search for a match.","pos":[0,33]}]}],"pos":[116660,116694],"yaml":true},{"content":"`true` if the regular expression finds a match; otherwise, `false`.","nodes":[{"pos":[0,67],"content":"<ph id=\"ph1\">`true`</ph> if the regular expression finds a match; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the regular expression finds a match; otherwise, `false`."}],"pos":[116752,116822],"yaml":true},{"content":"<code>input</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;input&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>input</code> is `null`."}],"pos":[116996,117026],"yaml":true},{"content":"A time-out occurred. For more information about time-outs, see the Remarks section.","nodes":[{"pos":[0,83],"content":"A time-out occurred. For more information about time-outs, see the Remarks section.","nodes":[{"content":"A time-out occurred. For more information about time-outs, see the Remarks section.","pos":[0,83],"nodes":[{"content":"A time-out occurred.","pos":[0,20]},{"content":"For more information about time-outs, see the Remarks section.","pos":[21,83]}]}]}],"pos":[117186,117270],"yaml":true},{"content":"Indicates whether the regular expression specified in the <xref href=\"System.Text.RegularExpressions.Regex\"></xref> constructor finds a match in the specified input string, beginning at the specified starting position in the string.","nodes":[{"pos":[0,232],"content":"Indicates whether the regular expression specified in the <ph id=\"ph1\">&lt;xref href=\"System.Text.RegularExpressions.Regex\"&gt;&lt;/xref&gt;</ph> constructor finds a match in the specified input string, beginning at the specified starting position in the string.","source":"Indicates whether the regular expression specified in the <xref href=\"System.Text.RegularExpressions.Regex\"></xref> constructor finds a match in the specified input string, beginning at the specified starting position in the string."}],"pos":[118847,119080],"yaml":true},{"content":"The <xref:System.Text.RegularExpressions.Regex.IsMatch%2A> method is typically used to validate a string or to ensure that a string conforms to a particular pattern without retrieving that string for subsequent manipulation. If you want to determine whether one or more strings match a regular expression pattern and then retrieve them for subsequent manipulation, call the <xref:System.Text.RegularExpressions.Regex.Match%2A> or <xref:System.Text.RegularExpressions.Regex.Matches%2A> method.  \n  \n The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the matching operation exceeds the time-out interval specified by the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=fullName> constructor. If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <xref:System.Text.RegularExpressions.Regex> object is created. If no time-out is defined in the <xref:System.Text.RegularExpressions.Regex> constructor call or in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, no exception is thrown.","nodes":[{"pos":[0,492],"content":"The <xref:System.Text.RegularExpressions.Regex.IsMatch%2A> method is typically used to validate a string or to ensure that a string conforms to a particular pattern without retrieving that string for subsequent manipulation. If you want to determine whether one or more strings match a regular expression pattern and then retrieve them for subsequent manipulation, call the <xref:System.Text.RegularExpressions.Regex.Match%2A> or <xref:System.Text.RegularExpressions.Regex.Matches%2A> method.","nodes":[{"content":"The <xref:System.Text.RegularExpressions.Regex.IsMatch%2A> method is typically used to validate a string or to ensure that a string conforms to a particular pattern without retrieving that string for subsequent manipulation. If you want to determine whether one or more strings match a regular expression pattern and then retrieve them for subsequent manipulation, call the <xref:System.Text.RegularExpressions.Regex.Match%2A> or <xref:System.Text.RegularExpressions.Regex.Matches%2A> method.","pos":[0,492],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.IsMatch%2A&gt;</ph> method is typically used to validate a string or to ensure that a string conforms to a particular pattern without retrieving that string for subsequent manipulation.","pos":[0,224],"source":"The <xref:System.Text.RegularExpressions.Regex.IsMatch%2A> method is typically used to validate a string or to ensure that a string conforms to a particular pattern without retrieving that string for subsequent manipulation."},{"content":"If you want to determine whether one or more strings match a regular expression pattern and then retrieve them for subsequent manipulation, call the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.Match%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.Regex.Matches%2A&gt;</ph> method.","pos":[225,492],"source":" If you want to determine whether one or more strings match a regular expression pattern and then retrieve them for subsequent manipulation, call the <xref:System.Text.RegularExpressions.Regex.Match%2A> or <xref:System.Text.RegularExpressions.Regex.Matches%2A> method."}]}]},{"pos":[499,1387],"content":"The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the matching operation exceeds the time-out interval specified by the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=fullName> constructor. If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <xref:System.Text.RegularExpressions.Regex> object is created. If no time-out is defined in the <xref:System.Text.RegularExpressions.Regex> constructor call or in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, no exception is thrown.","nodes":[{"content":"The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the matching operation exceeds the time-out interval specified by the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=fullName> constructor. If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <xref:System.Text.RegularExpressions.Regex> object is created. If no time-out is defined in the <xref:System.Text.RegularExpressions.Regex> constructor call or in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, no exception is thrown.","pos":[0,888],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.RegexMatchTimeoutException&gt;</ph> exception is thrown if the execution time of the matching operation exceeds the time-out interval specified by the <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=fullName&gt;</ph> constructor.","pos":[0,356],"source":"The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the matching operation exceeds the time-out interval specified by the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=fullName> constructor."},{"content":"If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex&gt;</ph> object is created.","pos":[357,608],"source":" If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <xref:System.Text.RegularExpressions.Regex> object is created."},{"content":"If no time-out is defined in the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex&gt;</ph> constructor call or in the application domain's properties, or if the time-out value is <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName&gt;</ph>, no exception is thrown.","pos":[609,888],"source":" If no time-out is defined in the <xref:System.Text.RegularExpressions.Regex> constructor call or in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, no exception is thrown."}]}]}],"pos":[119091,120483],"yaml":true,"extradata":"MT"},{"content":"The string to search for a match.","nodes":[{"pos":[0,33],"content":"The string to search for a match.","nodes":[{"content":"The string to search for a match.","pos":[0,33]}]}],"pos":[122910,122944],"yaml":true},{"content":"The character position at which to start the search.","nodes":[{"pos":[0,52],"content":"The character position at which to start the search.","nodes":[{"content":"The character position at which to start the search.","pos":[0,52]}]}],"pos":[123006,123059],"yaml":true},{"content":"`true` if the regular expression finds a match; otherwise, `false`.","nodes":[{"pos":[0,67],"content":"<ph id=\"ph1\">`true`</ph> if the regular expression finds a match; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the regular expression finds a match; otherwise, `false`."}],"pos":[123117,123187],"yaml":true},{"content":"<code>input</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;input&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>input</code> is `null`."}],"pos":[123361,123391],"yaml":true},{"content":"<code>startat</code> is less than zero or greater than the length of <code>input</code>.","nodes":[{"pos":[0,88],"content":"<ph id=\"ph1\">&lt;code&gt;startat&lt;/code&gt;</ph> is less than zero or greater than the length of <ph id=\"ph2\">&lt;code&gt;input&lt;/code&gt;</ph>.","source":"<code>startat</code> is less than zero or greater than the length of <code>input</code>."}],"pos":[123505,123594],"yaml":true},{"content":"A time-out occurred. For more information about time-outs, see the Remarks section.","nodes":[{"pos":[0,83],"content":"A time-out occurred. For more information about time-outs, see the Remarks section.","nodes":[{"content":"A time-out occurred. For more information about time-outs, see the Remarks section.","pos":[0,83],"nodes":[{"content":"A time-out occurred.","pos":[0,20]},{"content":"For more information about time-outs, see the Remarks section.","pos":[21,83]}]}]}],"pos":[123754,123838],"yaml":true},{"content":"Indicates whether the specified regular expression finds a match in the specified input string.","nodes":[{"pos":[0,95],"content":"Indicates whether the specified regular expression finds a match in the specified input string.","nodes":[{"content":"Indicates whether the specified regular expression finds a match in the specified input string.","pos":[0,95]}]}],"pos":[125421,125517],"yaml":true},{"content":"The <xref:System.Text.RegularExpressions.Regex.IsMatch%2A> method is typically used to validate a string or to ensure that a string conforms to a particular pattern without retrieving that string for subsequent manipulation. If you want to determine whether one or more strings match a regular expression pattern and then retrieve them for subsequent manipulation, call the <xref:System.Text.RegularExpressions.Regex.Match%2A> or <xref:System.Text.RegularExpressions.Regex.Matches%2A> method.  \n  \n The static <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.String%29> method is equivalent to constructing a <xref:System.Text.RegularExpressions.Regex> object with the regular expression pattern specified by `pattern` and calling the <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%29> instance method. This regular expression pattern is cached for rapid retrieval by the regular expression engine.  \n  \n The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match. For more information about regular expressions, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).  \n  \n The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the matching operation exceeds the time-out interval specified for the application domain in which the method is called. If no time-out is defined in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, no exception is thrown.","nodes":[{"pos":[0,492],"content":"The <xref:System.Text.RegularExpressions.Regex.IsMatch%2A> method is typically used to validate a string or to ensure that a string conforms to a particular pattern without retrieving that string for subsequent manipulation. If you want to determine whether one or more strings match a regular expression pattern and then retrieve them for subsequent manipulation, call the <xref:System.Text.RegularExpressions.Regex.Match%2A> or <xref:System.Text.RegularExpressions.Regex.Matches%2A> method.","nodes":[{"content":"The <xref:System.Text.RegularExpressions.Regex.IsMatch%2A> method is typically used to validate a string or to ensure that a string conforms to a particular pattern without retrieving that string for subsequent manipulation. If you want to determine whether one or more strings match a regular expression pattern and then retrieve them for subsequent manipulation, call the <xref:System.Text.RegularExpressions.Regex.Match%2A> or <xref:System.Text.RegularExpressions.Regex.Matches%2A> method.","pos":[0,492],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.IsMatch%2A&gt;</ph> method is typically used to validate a string or to ensure that a string conforms to a particular pattern without retrieving that string for subsequent manipulation.","pos":[0,224],"source":"The <xref:System.Text.RegularExpressions.Regex.IsMatch%2A> method is typically used to validate a string or to ensure that a string conforms to a particular pattern without retrieving that string for subsequent manipulation."},{"content":"If you want to determine whether one or more strings match a regular expression pattern and then retrieve them for subsequent manipulation, call the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.Match%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.Regex.Matches%2A&gt;</ph> method.","pos":[225,492],"source":" If you want to determine whether one or more strings match a regular expression pattern and then retrieve them for subsequent manipulation, call the <xref:System.Text.RegularExpressions.Regex.Match%2A> or <xref:System.Text.RegularExpressions.Regex.Matches%2A> method."}]}]},{"pos":[499,945],"content":"The static <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.String%29> method is equivalent to constructing a <xref:System.Text.RegularExpressions.Regex> object with the regular expression pattern specified by `pattern` and calling the <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%29> instance method. This regular expression pattern is cached for rapid retrieval by the regular expression engine.","nodes":[{"content":"The static <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.String%29&gt;</ph> method is equivalent to constructing a <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.Regex&gt;</ph> object with the regular expression pattern specified by <ph id=\"ph3\">`pattern`</ph> and calling the <ph id=\"ph4\">&lt;xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%29&gt;</ph> instance method.","pos":[0,350],"source":"The static <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.String%29> method is equivalent to constructing a <xref:System.Text.RegularExpressions.Regex> object with the regular expression pattern specified by `pattern` and calling the <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%29> instance method."},{"content":"This regular expression pattern is cached for rapid retrieval by the regular expression engine.","pos":[351,446]}]},{"pos":[952,1340],"content":"The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match. For more information about regular expressions, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).","nodes":[{"content":"The <ph id=\"ph1\">`pattern`</ph> parameter consists of regular expression language elements that symbolically describe the string to match.","pos":[0,120],"source":"The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match."},{"content":"For more information about regular expressions, see <bpt id=\"p1\">[</bpt>.NET Framework Regular Expressions<ept id=\"p1\">](~/docs/standard/base-types/regular-expressions.md)</ept> and <bpt id=\"p2\">[</bpt>Regular Expression Language - Quick Reference<ept id=\"p2\">](~/docs/standard/base-types/regular-expression-language-quick-reference.md)</ept>.","pos":[121,388],"source":" For more information about regular expressions, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md)."}]},{"pos":[1347,1790],"content":"The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the matching operation exceeds the time-out interval specified for the application domain in which the method is called. If no time-out is defined in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, no exception is thrown.","nodes":[{"content":"The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the matching operation exceeds the time-out interval specified for the application domain in which the method is called. If no time-out is defined in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, no exception is thrown.","pos":[0,443],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.RegexMatchTimeoutException&gt;</ph> exception is thrown if the execution time of the matching operation exceeds the time-out interval specified for the application domain in which the method is called.","pos":[0,234],"source":"The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the matching operation exceeds the time-out interval specified for the application domain in which the method is called."},{"content":"If no time-out is defined in the application domain's properties, or if the time-out value is <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName&gt;</ph>, no exception is thrown.","pos":[235,443],"source":" If no time-out is defined in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, no exception is thrown."}]}]}],"pos":[125528,127327],"yaml":true,"extradata":"MT"},{"content":"The string to search for a match.","nodes":[{"pos":[0,33],"content":"The string to search for a match.","nodes":[{"content":"The string to search for a match.","pos":[0,33]}]}],"pos":[129506,129540],"yaml":true},{"content":"The regular expression pattern to match.","nodes":[{"pos":[0,40],"content":"The regular expression pattern to match.","nodes":[{"content":"The regular expression pattern to match.","pos":[0,40]}]}],"pos":[129603,129644],"yaml":true},{"content":"`true` if the regular expression finds a match; otherwise, `false`.","nodes":[{"pos":[0,67],"content":"<ph id=\"ph1\">`true`</ph> if the regular expression finds a match; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the regular expression finds a match; otherwise, `false`."}],"pos":[129702,129772],"yaml":true},{"content":"A regular expression parsing error occurred.","nodes":[{"pos":[0,44],"content":"A regular expression parsing error occurred.","nodes":[{"content":"A regular expression parsing error occurred.","pos":[0,44]}]}],"pos":[129938,129983],"yaml":true},{"content":"<code>input</code> or <code>pattern</code> is `null`.","nodes":[{"pos":[0,53],"content":"<ph id=\"ph1\">&lt;code&gt;input&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;pattern&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>input</code> or <code>pattern</code> is `null`."}],"pos":[130085,130139],"yaml":true},{"content":"A time-out occurred. For more information about time-outs, see the Remarks section.","nodes":[{"pos":[0,83],"content":"A time-out occurred. For more information about time-outs, see the Remarks section.","nodes":[{"content":"A time-out occurred. For more information about time-outs, see the Remarks section.","pos":[0,83],"nodes":[{"content":"A time-out occurred.","pos":[0,20]},{"content":"For more information about time-outs, see the Remarks section.","pos":[21,83]}]}]}],"pos":[130299,130383],"yaml":true},{"content":"Indicates whether the specified regular expression finds a match in the specified input string, using the specified matching options.","nodes":[{"pos":[0,133],"content":"Indicates whether the specified regular expression finds a match in the specified input string, using the specified matching options.","nodes":[{"content":"Indicates whether the specified regular expression finds a match in the specified input string, using the specified matching options.","pos":[0,133]}]}],"pos":[132140,132274],"yaml":true},{"content":"The <xref:System.Text.RegularExpressions.Regex.IsMatch%2A> method is typically used to validate a string or to ensure that a string conforms to a particular pattern without retrieving that string for subsequent manipulation. If you want to determine whether one or more strings match a regular expression pattern and then retrieve them for subsequent manipulation, call the <xref:System.Text.RegularExpressions.Regex.Match%2A> or <xref:System.Text.RegularExpressions.Regex.Matches%2A> method.  \n  \n The static <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29> method is equivalent to constructing a <xref:System.Text.RegularExpressions.Regex> object with the regular expression pattern specified by `pattern` and the regular expression options specified by `options` and calling the <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%29> instance method. This regular expression pattern is cached for rapid retrieval by the regular expression engine.  \n  \n The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match. For more information about regular expressions, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).  \n  \n The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the matching operation exceeds the time-out interval specified for the application domain in which the method is called. If no time-out is defined in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, no exception is thrown.","nodes":[{"pos":[0,492],"content":"The <xref:System.Text.RegularExpressions.Regex.IsMatch%2A> method is typically used to validate a string or to ensure that a string conforms to a particular pattern without retrieving that string for subsequent manipulation. If you want to determine whether one or more strings match a regular expression pattern and then retrieve them for subsequent manipulation, call the <xref:System.Text.RegularExpressions.Regex.Match%2A> or <xref:System.Text.RegularExpressions.Regex.Matches%2A> method.","nodes":[{"content":"The <xref:System.Text.RegularExpressions.Regex.IsMatch%2A> method is typically used to validate a string or to ensure that a string conforms to a particular pattern without retrieving that string for subsequent manipulation. If you want to determine whether one or more strings match a regular expression pattern and then retrieve them for subsequent manipulation, call the <xref:System.Text.RegularExpressions.Regex.Match%2A> or <xref:System.Text.RegularExpressions.Regex.Matches%2A> method.","pos":[0,492],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.IsMatch%2A&gt;</ph> method is typically used to validate a string or to ensure that a string conforms to a particular pattern without retrieving that string for subsequent manipulation.","pos":[0,224],"source":"The <xref:System.Text.RegularExpressions.Regex.IsMatch%2A> method is typically used to validate a string or to ensure that a string conforms to a particular pattern without retrieving that string for subsequent manipulation."},{"content":"If you want to determine whether one or more strings match a regular expression pattern and then retrieve them for subsequent manipulation, call the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.Match%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.Regex.Matches%2A&gt;</ph> method.","pos":[225,492],"source":" If you want to determine whether one or more strings match a regular expression pattern and then retrieve them for subsequent manipulation, call the <xref:System.Text.RegularExpressions.Regex.Match%2A> or <xref:System.Text.RegularExpressions.Regex.Matches%2A> method."}]}]},{"pos":[499,1049],"content":"The static <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29> method is equivalent to constructing a <xref:System.Text.RegularExpressions.Regex> object with the regular expression pattern specified by `pattern` and the regular expression options specified by `options` and calling the <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%29> instance method. This regular expression pattern is cached for rapid retrieval by the regular expression engine.","nodes":[{"content":"The static <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29&gt;</ph> method is equivalent to constructing a <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.Regex&gt;</ph> object with the regular expression pattern specified by <ph id=\"ph3\">`pattern`</ph> and the regular expression options specified by <ph id=\"ph4\">`options`</ph> and calling the <ph id=\"ph5\">&lt;xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%29&gt;</ph> instance method.","pos":[0,454],"source":"The static <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29> method is equivalent to constructing a <xref:System.Text.RegularExpressions.Regex> object with the regular expression pattern specified by `pattern` and the regular expression options specified by `options` and calling the <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%29> instance method."},{"content":"This regular expression pattern is cached for rapid retrieval by the regular expression engine.","pos":[455,550]}]},{"pos":[1056,1444],"content":"The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match. For more information about regular expressions, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).","nodes":[{"content":"The <ph id=\"ph1\">`pattern`</ph> parameter consists of regular expression language elements that symbolically describe the string to match.","pos":[0,120],"source":"The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match."},{"content":"For more information about regular expressions, see <bpt id=\"p1\">[</bpt>.NET Framework Regular Expressions<ept id=\"p1\">](~/docs/standard/base-types/regular-expressions.md)</ept> and <bpt id=\"p2\">[</bpt>Regular Expression Language - Quick Reference<ept id=\"p2\">](~/docs/standard/base-types/regular-expression-language-quick-reference.md)</ept>.","pos":[121,388],"source":" For more information about regular expressions, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md)."}]},{"pos":[1451,1894],"content":"The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the matching operation exceeds the time-out interval specified for the application domain in which the method is called. If no time-out is defined in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, no exception is thrown.","nodes":[{"content":"The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the matching operation exceeds the time-out interval specified for the application domain in which the method is called. If no time-out is defined in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, no exception is thrown.","pos":[0,443],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.RegexMatchTimeoutException&gt;</ph> exception is thrown if the execution time of the matching operation exceeds the time-out interval specified for the application domain in which the method is called.","pos":[0,234],"source":"The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the matching operation exceeds the time-out interval specified for the application domain in which the method is called."},{"content":"If no time-out is defined in the application domain's properties, or if the time-out value is <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName&gt;</ph>, no exception is thrown.","pos":[235,443],"source":" If no time-out is defined in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, no exception is thrown."}]}]}],"pos":[132285,134188],"yaml":true,"extradata":"MT"},{"content":"The string to search for a match.","nodes":[{"pos":[0,33],"content":"The string to search for a match.","nodes":[{"content":"The string to search for a match.","pos":[0,33]}]}],"pos":[136928,136962],"yaml":true},{"content":"The regular expression pattern to match.","nodes":[{"pos":[0,40],"content":"The regular expression pattern to match.","nodes":[{"content":"The regular expression pattern to match.","pos":[0,40]}]}],"pos":[137025,137066],"yaml":true},{"content":"A bitwise combination of the enumeration values that provide options for matching.","nodes":[{"pos":[0,82],"content":"A bitwise combination of the enumeration values that provide options for matching.","nodes":[{"content":"A bitwise combination of the enumeration values that provide options for matching.","pos":[0,82]}]}],"pos":[137159,137242],"yaml":true},{"content":"`true` if the regular expression finds a match; otherwise, `false`.","nodes":[{"pos":[0,67],"content":"<ph id=\"ph1\">`true`</ph> if the regular expression finds a match; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the regular expression finds a match; otherwise, `false`."}],"pos":[137300,137370],"yaml":true},{"content":"A regular expression parsing error occurred.","nodes":[{"pos":[0,44],"content":"A regular expression parsing error occurred.","nodes":[{"content":"A regular expression parsing error occurred.","pos":[0,44]}]}],"pos":[137536,137581],"yaml":true},{"content":"<code>input</code> or <code>pattern</code> is `null`.","nodes":[{"pos":[0,53],"content":"<ph id=\"ph1\">&lt;code&gt;input&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;pattern&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>input</code> or <code>pattern</code> is `null`."}],"pos":[137683,137737],"yaml":true},{"content":"<code>options</code> is not a valid <xref href=\"System.Text.RegularExpressions.RegexOptions\"></xref> value.","nodes":[{"pos":[0,107],"content":"<ph id=\"ph1\">&lt;code&gt;options&lt;/code&gt;</ph> is not a valid <ph id=\"ph2\">&lt;xref href=\"System.Text.RegularExpressions.RegexOptions\"&gt;&lt;/xref&gt;</ph> value.","source":"<code>options</code> is not a valid <xref href=\"System.Text.RegularExpressions.RegexOptions\"></xref> value."}],"pos":[137851,137959],"yaml":true},{"content":"A time-out occurred. For more information about time-outs, see the Remarks section.","nodes":[{"pos":[0,83],"content":"A time-out occurred. For more information about time-outs, see the Remarks section.","nodes":[{"content":"A time-out occurred. For more information about time-outs, see the Remarks section.","pos":[0,83],"nodes":[{"content":"A time-out occurred.","pos":[0,20]},{"content":"For more information about time-outs, see the Remarks section.","pos":[21,83]}]}]}],"pos":[138119,138203],"yaml":true},{"content":"Indicates whether the specified regular expression finds a match in the specified input string, using the specified matching options and time-out interval.","nodes":[{"pos":[0,155],"content":"Indicates whether the specified regular expression finds a match in the specified input string, using the specified matching options and time-out interval.","nodes":[{"content":"Indicates whether the specified regular expression finds a match in the specified input string, using the specified matching options and time-out interval.","pos":[0,155]}]}],"pos":[140038,140194],"yaml":true},{"content":"The <xref:System.Text.RegularExpressions.Regex.IsMatch%2A> method is typically used to validate a string or to ensure that a string conforms to a particular pattern without retrieving that string for subsequent manipulation. If you want to determine whether one or more strings match a regular expression pattern and then retrieve them for subsequent manipulation, call the <xref:System.Text.RegularExpressions.Regex.Match%2A> or <xref:System.Text.RegularExpressions.Regex.Matches%2A> method.  \n  \n The static <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29> method is equivalent to constructing a <xref:System.Text.RegularExpressions.Regex> object with the regular expression pattern specified by `pattern` and the regular expression options specified by `options` and calling the <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%29> instance method. This regular expression pattern is cached for rapid retrieval by the regular expression engine.  \n  \n The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match. For more information about regular expressions, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).  \n  \n The `matchTimeout` parameter specifies how long a pattern matching method should try to find a match before it times out. Setting a time-out interval prevents regular expressions that rely on excessive backtracking from appearing to stop responding when they process input that contains near matches. For more information, see [Best Practices for Regular Expressions](~/docs/standard/base-types/best-practices.md) and [Backtracking](~/docs/standard/base-types/backtracking-in-regular-expressions.md). If no match is found in that time interval, the method throws a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception. `matchTimeout` overrides any default time-out value defined for the application domain in which the method executes.","nodes":[{"pos":[0,492],"content":"The <xref:System.Text.RegularExpressions.Regex.IsMatch%2A> method is typically used to validate a string or to ensure that a string conforms to a particular pattern without retrieving that string for subsequent manipulation. If you want to determine whether one or more strings match a regular expression pattern and then retrieve them for subsequent manipulation, call the <xref:System.Text.RegularExpressions.Regex.Match%2A> or <xref:System.Text.RegularExpressions.Regex.Matches%2A> method.","nodes":[{"content":"The <xref:System.Text.RegularExpressions.Regex.IsMatch%2A> method is typically used to validate a string or to ensure that a string conforms to a particular pattern without retrieving that string for subsequent manipulation. If you want to determine whether one or more strings match a regular expression pattern and then retrieve them for subsequent manipulation, call the <xref:System.Text.RegularExpressions.Regex.Match%2A> or <xref:System.Text.RegularExpressions.Regex.Matches%2A> method.","pos":[0,492],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.IsMatch%2A&gt;</ph> method is typically used to validate a string or to ensure that a string conforms to a particular pattern without retrieving that string for subsequent manipulation.","pos":[0,224],"source":"The <xref:System.Text.RegularExpressions.Regex.IsMatch%2A> method is typically used to validate a string or to ensure that a string conforms to a particular pattern without retrieving that string for subsequent manipulation."},{"content":"If you want to determine whether one or more strings match a regular expression pattern and then retrieve them for subsequent manipulation, call the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.Match%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.Regex.Matches%2A&gt;</ph> method.","pos":[225,492],"source":" If you want to determine whether one or more strings match a regular expression pattern and then retrieve them for subsequent manipulation, call the <xref:System.Text.RegularExpressions.Regex.Match%2A> or <xref:System.Text.RegularExpressions.Regex.Matches%2A> method."}]}]},{"pos":[499,1067],"content":"The static <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29> method is equivalent to constructing a <xref:System.Text.RegularExpressions.Regex> object with the regular expression pattern specified by `pattern` and the regular expression options specified by `options` and calling the <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%29> instance method. This regular expression pattern is cached for rapid retrieval by the regular expression engine.","nodes":[{"content":"The static <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29&gt;</ph> method is equivalent to constructing a <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.Regex&gt;</ph> object with the regular expression pattern specified by <ph id=\"ph3\">`pattern`</ph> and the regular expression options specified by <ph id=\"ph4\">`options`</ph> and calling the <ph id=\"ph5\">&lt;xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%29&gt;</ph> instance method.","pos":[0,472],"source":"The static <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29> method is equivalent to constructing a <xref:System.Text.RegularExpressions.Regex> object with the regular expression pattern specified by `pattern` and the regular expression options specified by `options` and calling the <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%29> instance method."},{"content":"This regular expression pattern is cached for rapid retrieval by the regular expression engine.","pos":[473,568]}]},{"pos":[1074,1462],"content":"The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match. For more information about regular expressions, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).","nodes":[{"content":"The <ph id=\"ph1\">`pattern`</ph> parameter consists of regular expression language elements that symbolically describe the string to match.","pos":[0,120],"source":"The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match."},{"content":"For more information about regular expressions, see <bpt id=\"p1\">[</bpt>.NET Framework Regular Expressions<ept id=\"p1\">](~/docs/standard/base-types/regular-expressions.md)</ept> and <bpt id=\"p2\">[</bpt>Regular Expression Language - Quick Reference<ept id=\"p2\">](~/docs/standard/base-types/regular-expression-language-quick-reference.md)</ept>.","pos":[121,388],"source":" For more information about regular expressions, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md)."}]},{"pos":[1469,2226],"content":"The `matchTimeout` parameter specifies how long a pattern matching method should try to find a match before it times out. Setting a time-out interval prevents regular expressions that rely on excessive backtracking from appearing to stop responding when they process input that contains near matches. For more information, see [Best Practices for Regular Expressions](~/docs/standard/base-types/best-practices.md) and [Backtracking](~/docs/standard/base-types/backtracking-in-regular-expressions.md). If no match is found in that time interval, the method throws a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception. `matchTimeout` overrides any default time-out value defined for the application domain in which the method executes.","nodes":[{"content":"The <ph id=\"ph1\">`matchTimeout`</ph> parameter specifies how long a pattern matching method should try to find a match before it times out.","pos":[0,121],"source":"The `matchTimeout` parameter specifies how long a pattern matching method should try to find a match before it times out."},{"content":"Setting a time-out interval prevents regular expressions that rely on excessive backtracking from appearing to stop responding when they process input that contains near matches.","pos":[122,300]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Best Practices for Regular Expressions<ept id=\"p1\">](~/docs/standard/base-types/best-practices.md)</ept> and <bpt id=\"p2\">[</bpt>Backtracking<ept id=\"p2\">](~/docs/standard/base-types/backtracking-in-regular-expressions.md)</ept>.","pos":[301,500],"source":" For more information, see [Best Practices for Regular Expressions](~/docs/standard/base-types/best-practices.md) and [Backtracking](~/docs/standard/base-types/backtracking-in-regular-expressions.md)."},{"content":"If no match is found in that time interval, the method throws a <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.RegexMatchTimeoutException&gt;</ph> exception.","pos":[501,640],"source":" If no match is found in that time interval, the method throws a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception."},{"content":"<ph id=\"ph1\">`matchTimeout`</ph> overrides any default time-out value defined for the application domain in which the method executes.","pos":[641,757],"source":"`matchTimeout` overrides any default time-out value defined for the application domain in which the method executes."}]}],"pos":[140205,142440],"yaml":true,"extradata":"MT"},{"content":"The string to search for a match.","nodes":[{"pos":[0,33],"content":"The string to search for a match.","nodes":[{"content":"The string to search for a match.","pos":[0,33]}]}],"pos":[145443,145477],"yaml":true},{"content":"The regular expression pattern to match.","nodes":[{"pos":[0,40],"content":"The regular expression pattern to match.","nodes":[{"content":"The regular expression pattern to match.","pos":[0,40]}]}],"pos":[145540,145581],"yaml":true},{"content":"A bitwise combination of the enumeration values that provide options for matching.","nodes":[{"pos":[0,82],"content":"A bitwise combination of the enumeration values that provide options for matching.","nodes":[{"content":"A bitwise combination of the enumeration values that provide options for matching.","pos":[0,82]}]}],"pos":[145674,145757],"yaml":true},{"content":"A time-out interval, or <xref href=\"System.Text.RegularExpressions.Regex.InfiniteMatchTimeout\"></xref> to indicate that the method should not time out.","nodes":[{"pos":[0,151],"content":"A time-out interval, or <ph id=\"ph1\">&lt;xref href=\"System.Text.RegularExpressions.Regex.InfiniteMatchTimeout\"&gt;&lt;/xref&gt;</ph> to indicate that the method should not time out.","source":"A time-out interval, or <xref href=\"System.Text.RegularExpressions.Regex.InfiniteMatchTimeout\"></xref> to indicate that the method should not time out."}],"pos":[145827,145979],"yaml":true},{"content":"`true` if the regular expression finds a match; otherwise, `false`.","nodes":[{"pos":[0,67],"content":"<ph id=\"ph1\">`true`</ph> if the regular expression finds a match; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the regular expression finds a match; otherwise, `false`."}],"pos":[146037,146107],"yaml":true},{"content":"A regular expression parsing error occurred.","nodes":[{"pos":[0,44],"content":"A regular expression parsing error occurred.","nodes":[{"content":"A regular expression parsing error occurred.","pos":[0,44]}]}],"pos":[146273,146318],"yaml":true},{"content":"<code>input</code> or <code>pattern</code> is `null`.","nodes":[{"pos":[0,53],"content":"<ph id=\"ph1\">&lt;code&gt;input&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;pattern&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>input</code> or <code>pattern</code> is `null`."}],"pos":[146420,146474],"yaml":true},{"content":"<code>options</code> is not a valid <xref href=\"System.Text.RegularExpressions.RegexOptions\"></xref> value.  \n  \n -or-  \n  \n <code>matchTimeout</code> is negative, zero, or greater than approximately 24 days.","nodes":[{"pos":[0,107],"content":"<ph id=\"ph1\">&lt;code&gt;options&lt;/code&gt;</ph> is not a valid <ph id=\"ph2\">&lt;xref href=\"System.Text.RegularExpressions.RegexOptions\"&gt;&lt;/xref&gt;</ph> value.","source":"<code>options</code> is not a valid <xref href=\"System.Text.RegularExpressions.RegexOptions\"></xref> value."},{"pos":[114,118],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[125,208],"content":"<ph id=\"ph1\">&lt;code&gt;matchTimeout&lt;/code&gt;</ph> is negative, zero, or greater than approximately 24 days.","source":"<code>matchTimeout</code> is negative, zero, or greater than approximately 24 days."}],"pos":[146588,146805],"yaml":true},{"content":"A time-out occurred.","nodes":[{"pos":[0,20],"content":"A time-out occurred.","nodes":[{"content":"A time-out occurred.","pos":[0,20]}]}],"pos":[146965,146986],"yaml":true},{"content":"Searches the input string for the first occurrence of the specified regular expression, using the specified matching options.","nodes":[{"pos":[0,125],"content":"Searches the input string for the first occurrence of the specified regular expression, using the specified matching options.","nodes":[{"content":"Searches the input string for the first occurrence of the specified regular expression, using the specified matching options.","pos":[0,125]}]}],"pos":[148731,148857],"yaml":true},{"content":"The <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29> method returns the first substring that matches a regular expression pattern in an input string. For information about the language elements used to build a regular expression pattern, see [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).  \n  \n The static <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29> method is equivalent to constructing a <xref:System.Text.RegularExpressions.Regex> object with the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%29> constructor and calling the instance <xref:System.Text.RegularExpressions.Regex.Match%28System.String%29> method.  \n  \n The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match. For more information about regular expressions, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).  \n  \n You can determine whether the regular expression pattern has been found in the input string by checking the value of the returned <xref:System.Text.RegularExpressions.Match> object's <xref:System.Text.RegularExpressions.Group.Success%2A> property. If a match is found, the returned <xref:System.Text.RegularExpressions.Match> object's <xref:System.Text.RegularExpressions.Capture.Value%2A> property contains the substring from `input` that matches the regular expression pattern. If no match is found, its value is <xref:System.String.Empty?displayProperty=fullName>.  \n  \n This method returns the first substring found in `input` that matches the regular expression pattern. You can retrieve subsequent matches by repeatedly calling the returned <xref:System.Text.RegularExpressions.Match> object's <xref:System.Text.RegularExpressions.Match.NextMatch%2A> method. You can also retrieve all matches in a single method call by calling the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29?displayProperty=fullName> method.  \n  \n The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the matching operation exceeds the time-out interval specified for the application domain in which the method is called. If no time-out is defined in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, no exception is thrown.","nodes":[{"pos":[0,447],"content":"The <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29> method returns the first substring that matches a regular expression pattern in an input string. For information about the language elements used to build a regular expression pattern, see [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29&gt;</ph> method returns the first substring that matches a regular expression pattern in an input string.","pos":[0,231],"source":"The <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29> method returns the first substring that matches a regular expression pattern in an input string."},{"content":"For information about the language elements used to build a regular expression pattern, see <bpt id=\"p1\">[</bpt>Regular Expression Language - Quick Reference<ept id=\"p1\">](~/docs/standard/base-types/regular-expression-language-quick-reference.md)</ept>.","pos":[232,447],"source":" For information about the language elements used to build a regular expression pattern, see [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md)."}]},{"pos":[454,925],"content":"The static <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29> method is equivalent to constructing a <xref:System.Text.RegularExpressions.Regex> object with the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%29> constructor and calling the instance <xref:System.Text.RegularExpressions.Regex.Match%28System.String%29> method.","nodes":[{"content":"The static <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29&gt;</ph> method is equivalent to constructing a <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.Regex&gt;</ph> object with the <ph id=\"ph3\">&lt;xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%29&gt;</ph> constructor and calling the instance <ph id=\"ph4\">&lt;xref:System.Text.RegularExpressions.Regex.Match%28System.String%29&gt;</ph> method.","pos":[0,471],"source":"The static <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29> method is equivalent to constructing a <xref:System.Text.RegularExpressions.Regex> object with the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%29> constructor and calling the instance <xref:System.Text.RegularExpressions.Regex.Match%28System.String%29> method."}]},{"pos":[932,1320],"content":"The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match. For more information about regular expressions, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).","nodes":[{"content":"The <ph id=\"ph1\">`pattern`</ph> parameter consists of regular expression language elements that symbolically describe the string to match.","pos":[0,120],"source":"The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match."},{"content":"For more information about regular expressions, see <bpt id=\"p1\">[</bpt>.NET Framework Regular Expressions<ept id=\"p1\">](~/docs/standard/base-types/regular-expressions.md)</ept> and <bpt id=\"p2\">[</bpt>Regular Expression Language - Quick Reference<ept id=\"p2\">](~/docs/standard/base-types/regular-expression-language-quick-reference.md)</ept>.","pos":[121,388],"source":" For more information about regular expressions, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md)."}]},{"pos":[1327,1894],"content":"You can determine whether the regular expression pattern has been found in the input string by checking the value of the returned <xref:System.Text.RegularExpressions.Match> object's <xref:System.Text.RegularExpressions.Group.Success%2A> property. If a match is found, the returned <xref:System.Text.RegularExpressions.Match> object's <xref:System.Text.RegularExpressions.Capture.Value%2A> property contains the substring from `input` that matches the regular expression pattern. If no match is found, its value is <xref:System.String.Empty?displayProperty=fullName>.","nodes":[{"content":"You can determine whether the regular expression pattern has been found in the input string by checking the value of the returned <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Match&gt;</ph> object's <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.Group.Success%2A&gt;</ph> property.","pos":[0,247],"source":"You can determine whether the regular expression pattern has been found in the input string by checking the value of the returned <xref:System.Text.RegularExpressions.Match> object's <xref:System.Text.RegularExpressions.Group.Success%2A> property."},{"content":"If a match is found, the returned <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Match&gt;</ph> object's <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.Capture.Value%2A&gt;</ph> property contains the substring from <ph id=\"ph3\">`input`</ph> that matches the regular expression pattern.","pos":[248,479],"source":" If a match is found, the returned <xref:System.Text.RegularExpressions.Match> object's <xref:System.Text.RegularExpressions.Capture.Value%2A> property contains the substring from `input` that matches the regular expression pattern."},{"content":"If no match is found, its value is <ph id=\"ph1\">&lt;xref:System.String.Empty?displayProperty=fullName&gt;</ph>.","pos":[480,567],"source":" If no match is found, its value is <xref:System.String.Empty?displayProperty=fullName>."}]},{"pos":[1901,2430],"content":"This method returns the first substring found in `input` that matches the regular expression pattern. You can retrieve subsequent matches by repeatedly calling the returned <xref:System.Text.RegularExpressions.Match> object's <xref:System.Text.RegularExpressions.Match.NextMatch%2A> method. You can also retrieve all matches in a single method call by calling the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29?displayProperty=fullName> method.","nodes":[{"content":"This method returns the first substring found in <ph id=\"ph1\">`input`</ph> that matches the regular expression pattern.","pos":[0,101],"source":"This method returns the first substring found in `input` that matches the regular expression pattern."},{"content":"You can retrieve subsequent matches by repeatedly calling the returned <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Match&gt;</ph> object's <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.Match.NextMatch%2A&gt;</ph> method.","pos":[102,290],"source":" You can retrieve subsequent matches by repeatedly calling the returned <xref:System.Text.RegularExpressions.Match> object's <xref:System.Text.RegularExpressions.Match.NextMatch%2A> method."},{"content":"You can also retrieve all matches in a single method call by calling the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29?displayProperty=fullName&gt;</ph> method.","pos":[291,529],"source":" You can also retrieve all matches in a single method call by calling the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29?displayProperty=fullName> method."}]},{"pos":[2437,2880],"content":"The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the matching operation exceeds the time-out interval specified for the application domain in which the method is called. If no time-out is defined in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, no exception is thrown.","nodes":[{"content":"The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the matching operation exceeds the time-out interval specified for the application domain in which the method is called. If no time-out is defined in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, no exception is thrown.","pos":[0,443],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.RegexMatchTimeoutException&gt;</ph> exception is thrown if the execution time of the matching operation exceeds the time-out interval specified for the application domain in which the method is called.","pos":[0,234],"source":"The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the matching operation exceeds the time-out interval specified for the application domain in which the method is called."},{"content":"If no time-out is defined in the application domain's properties, or if the time-out value is <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName&gt;</ph>, no exception is thrown.","pos":[235,443],"source":" If no time-out is defined in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, no exception is thrown."}]}]}],"pos":[148868,151761],"yaml":true,"extradata":"MT"},{"content":"The string to search for a match.","nodes":[{"pos":[0,33],"content":"The string to search for a match.","nodes":[{"content":"The string to search for a match.","pos":[0,33]}]}],"pos":[153030,153064],"yaml":true},{"content":"The regular expression pattern to match.","nodes":[{"pos":[0,40],"content":"The regular expression pattern to match.","nodes":[{"content":"The regular expression pattern to match.","pos":[0,40]}]}],"pos":[153127,153168],"yaml":true},{"content":"A bitwise combination of the enumeration values that provide options for matching.","nodes":[{"pos":[0,82],"content":"A bitwise combination of the enumeration values that provide options for matching.","nodes":[{"content":"A bitwise combination of the enumeration values that provide options for matching.","pos":[0,82]}]}],"pos":[153261,153344],"yaml":true},{"content":"An object that contains information about the match.","nodes":[{"pos":[0,52],"content":"An object that contains information about the match.","nodes":[{"content":"An object that contains information about the match.","pos":[0,52]}]}],"pos":[153424,153477],"yaml":true},{"content":"A regular expression parsing error occurred.","nodes":[{"pos":[0,44],"content":"A regular expression parsing error occurred.","nodes":[{"content":"A regular expression parsing error occurred.","pos":[0,44]}]}],"pos":[153641,153686],"yaml":true},{"content":"<code>input</code> or <code>pattern</code> is `null`.","nodes":[{"pos":[0,53],"content":"<ph id=\"ph1\">&lt;code&gt;input&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;pattern&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>input</code> or <code>pattern</code> is `null`."}],"pos":[153788,153842],"yaml":true},{"content":"<code>options</code> is not a valid bitwise combination of <xref href=\"System.Text.RegularExpressions.RegexOptions\"></xref> values.","nodes":[{"pos":[0,131],"content":"<ph id=\"ph1\">&lt;code&gt;options&lt;/code&gt;</ph> is not a valid bitwise combination of <ph id=\"ph2\">&lt;xref href=\"System.Text.RegularExpressions.RegexOptions\"&gt;&lt;/xref&gt;</ph> values.","source":"<code>options</code> is not a valid bitwise combination of <xref href=\"System.Text.RegularExpressions.RegexOptions\"></xref> values."}],"pos":[153956,154088],"yaml":true},{"content":"A time-out occurred. For more information about time-outs, see the Remarks section.","nodes":[{"pos":[0,83],"content":"A time-out occurred. For more information about time-outs, see the Remarks section.","nodes":[{"content":"A time-out occurred. For more information about time-outs, see the Remarks section.","pos":[0,83],"nodes":[{"content":"A time-out occurred.","pos":[0,20]},{"content":"For more information about time-outs, see the Remarks section.","pos":[21,83]}]}]}],"pos":[154248,154332],"yaml":true},{"content":"Searches the input string for the first occurrence of a regular expression, beginning at the specified starting position and searching only the specified number of characters.","nodes":[{"pos":[0,175],"content":"Searches the input string for the first occurrence of a regular expression, beginning at the specified starting position and searching only the specified number of characters.","nodes":[{"content":"Searches the input string for the first occurrence of a regular expression, beginning at the specified starting position and searching only the specified number of characters.","pos":[0,175]}]}],"pos":[155957,156133],"yaml":true},{"content":"The <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.Int32%2CSystem.Int32%29> method returns the first substring that matches a regular expression pattern in a portion of an input string. For information about the language elements used to build a regular expression pattern, see [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).  \n  \n The regular expression pattern for which the <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.Int32%2CSystem.Int32%29> method searches is defined by the call to one of the <xref:System.Text.RegularExpressions.Regex> class constructors. For more information about the elements that can form a regular expression pattern, see [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).  \n  \n The <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.Int32%2CSystem.Int32%29> method searches the portion of `input` defined by the `beginning` and `length` parameters for the regular expression pattern. `beginning` always defines the index of the leftmost character to include in the search, and `length` defines the maximum number of characters to search. Together, they define the range of the search. If the search proceeds from left to right (the default), the regular expression engine searches from the character at index `beginning` to the character at index `beginning` + `length` – 1. If the regular expression engine was instantiated by using the <xref:System.Text.RegularExpressions.RegexOptions?displayProperty=fullName> option so that the search proceeds from right to left, the regular expression engine searches from the character at index `beginning` + `length` – 1 to the character at index `beginning`. This method returns the first match that it finds within this range. You can retrieve subsequent matches by repeatedly calling the returned <xref:System.Text.RegularExpressions.Match> object's <xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=fullName> method.  \n  \n You can determine whether the regular expression pattern has been found in the input string by checking the value of the returned <xref:System.Text.RegularExpressions.Match> object's <xref:System.Text.RegularExpressions.Group.Success%2A> property. If a match is found, the returned <xref:System.Text.RegularExpressions.Match> object's <xref:System.Text.RegularExpressions.Capture.Value%2A> property contains the substring from `input` that matches the regular expression pattern. If no match is found, its value is <xref:System.String.Empty?displayProperty=fullName>.  \n  \n The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the matching operation exceeds the time-out interval specified by the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=fullName> constructor. If you do not set a time-out value when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <xref:System.Text.RegularExpressions.Regex> object is created. If no time-out is defined in the <xref:System.Text.RegularExpressions.Regex> constructor call or in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, no exception is thrown.","nodes":[{"pos":[0,428],"content":"The <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.Int32%2CSystem.Int32%29> method returns the first substring that matches a regular expression pattern in a portion of an input string. For information about the language elements used to build a regular expression pattern, see [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.Int32%2CSystem.Int32%29&gt;</ph> method returns the first substring that matches a regular expression pattern in a portion of an input string.","pos":[0,212],"source":"The <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.Int32%2CSystem.Int32%29> method returns the first substring that matches a regular expression pattern in a portion of an input string."},{"content":"For information about the language elements used to build a regular expression pattern, see <bpt id=\"p1\">[</bpt>Regular Expression Language - Quick Reference<ept id=\"p1\">](~/docs/standard/base-types/regular-expression-language-quick-reference.md)</ept>.","pos":[213,428],"source":" For information about the language elements used to build a regular expression pattern, see [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md)."}]},{"pos":[435,907],"content":"The regular expression pattern for which the <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.Int32%2CSystem.Int32%29> method searches is defined by the call to one of the <xref:System.Text.RegularExpressions.Regex> class constructors. For more information about the elements that can form a regular expression pattern, see [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).","nodes":[{"content":"The regular expression pattern for which the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.Int32%2CSystem.Int32%29&gt;</ph> method searches is defined by the call to one of the <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.Regex&gt;</ph> class constructors.","pos":[0,260],"source":"The regular expression pattern for which the <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.Int32%2CSystem.Int32%29> method searches is defined by the call to one of the <xref:System.Text.RegularExpressions.Regex> class constructors."},{"content":"For more information about the elements that can form a regular expression pattern, see <bpt id=\"p1\">[</bpt>Regular Expression Language - Quick Reference<ept id=\"p1\">](~/docs/standard/base-types/regular-expression-language-quick-reference.md)</ept>.","pos":[261,472],"source":" For more information about the elements that can form a regular expression pattern, see [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md)."}]},{"pos":[914,2143],"content":"The <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.Int32%2CSystem.Int32%29> method searches the portion of `input` defined by the `beginning` and `length` parameters for the regular expression pattern. `beginning` always defines the index of the leftmost character to include in the search, and `length` defines the maximum number of characters to search. Together, they define the range of the search. If the search proceeds from left to right (the default), the regular expression engine searches from the character at index `beginning` to the character at index `beginning` + `length` – 1. If the regular expression engine was instantiated by using the <xref:System.Text.RegularExpressions.RegexOptions?displayProperty=fullName> option so that the search proceeds from right to left, the regular expression engine searches from the character at index `beginning` + `length` – 1 to the character at index `beginning`. This method returns the first match that it finds within this range. You can retrieve subsequent matches by repeatedly calling the returned <xref:System.Text.RegularExpressions.Match> object's <xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=fullName> method.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.Int32%2CSystem.Int32%29&gt;</ph> method searches the portion of <ph id=\"ph2\">`input`</ph> defined by the <ph id=\"ph3\">`beginning`</ph> and <ph id=\"ph4\">`length`</ph> parameters for the regular expression pattern.","pos":[0,228],"source":"The <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.Int32%2CSystem.Int32%29> method searches the portion of `input` defined by the `beginning` and `length` parameters for the regular expression pattern."},{"content":"<ph id=\"ph1\">`beginning`</ph> always defines the index of the leftmost character to include in the search, and <ph id=\"ph2\">`length`</ph> defines the maximum number of characters to search.","pos":[229,382],"source":"`beginning` always defines the index of the leftmost character to include in the search, and `length` defines the maximum number of characters to search."},{"content":"Together, they define the range of the search.","pos":[383,429]},{"content":"If the search proceeds from left to right (the default), the regular expression engine searches from the character at index <ph id=\"ph1\">`beginning`</ph> to the character at index <ph id=\"ph2\">`beginning`</ph><ph id=\"ph3\"> + </ph><ph id=\"ph4\">`length`</ph> – 1.","pos":[430,619],"source":" If the search proceeds from left to right (the default), the regular expression engine searches from the character at index `beginning` to the character at index `beginning` + `length` – 1."},{"content":"If the regular expression engine was instantiated by using the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.RegexOptions?displayProperty=fullName&gt;</ph> option so that the search proceeds from right to left, the regular expression engine searches from the character at index <ph id=\"ph2\">`beginning`</ph><ph id=\"ph3\"> + </ph><ph id=\"ph4\">`length`</ph> – 1 to the character at index <ph id=\"ph5\">`beginning`</ph>.","pos":[620,946],"source":" If the regular expression engine was instantiated by using the <xref:System.Text.RegularExpressions.RegexOptions?displayProperty=fullName> option so that the search proceeds from right to left, the regular expression engine searches from the character at index `beginning` + `length` – 1 to the character at index `beginning`."},{"content":"This method returns the first match that it finds within this range.","pos":[947,1015]},{"content":"You can retrieve subsequent matches by repeatedly calling the returned <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Match&gt;</ph> object's <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=fullName&gt;</ph> method.","pos":[1016,1229],"source":" You can retrieve subsequent matches by repeatedly calling the returned <xref:System.Text.RegularExpressions.Match> object's <xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=fullName> method."}]},{"pos":[2150,2717],"content":"You can determine whether the regular expression pattern has been found in the input string by checking the value of the returned <xref:System.Text.RegularExpressions.Match> object's <xref:System.Text.RegularExpressions.Group.Success%2A> property. If a match is found, the returned <xref:System.Text.RegularExpressions.Match> object's <xref:System.Text.RegularExpressions.Capture.Value%2A> property contains the substring from `input` that matches the regular expression pattern. If no match is found, its value is <xref:System.String.Empty?displayProperty=fullName>.","nodes":[{"content":"You can determine whether the regular expression pattern has been found in the input string by checking the value of the returned <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Match&gt;</ph> object's <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.Group.Success%2A&gt;</ph> property.","pos":[0,247],"source":"You can determine whether the regular expression pattern has been found in the input string by checking the value of the returned <xref:System.Text.RegularExpressions.Match> object's <xref:System.Text.RegularExpressions.Group.Success%2A> property."},{"content":"If a match is found, the returned <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Match&gt;</ph> object's <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.Capture.Value%2A&gt;</ph> property contains the substring from <ph id=\"ph3\">`input`</ph> that matches the regular expression pattern.","pos":[248,479],"source":" If a match is found, the returned <xref:System.Text.RegularExpressions.Match> object's <xref:System.Text.RegularExpressions.Capture.Value%2A> property contains the substring from `input` that matches the regular expression pattern."},{"content":"If no match is found, its value is <ph id=\"ph1\">&lt;xref:System.String.Empty?displayProperty=fullName&gt;</ph>.","pos":[480,567],"source":" If no match is found, its value is <xref:System.String.Empty?displayProperty=fullName>."}]},{"pos":[2724,3609],"content":"The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the matching operation exceeds the time-out interval specified by the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=fullName> constructor. If you do not set a time-out value when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <xref:System.Text.RegularExpressions.Regex> object is created. If no time-out is defined in the <xref:System.Text.RegularExpressions.Regex> constructor call or in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, no exception is thrown.","nodes":[{"content":"The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the matching operation exceeds the time-out interval specified by the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=fullName> constructor. If you do not set a time-out value when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <xref:System.Text.RegularExpressions.Regex> object is created. If no time-out is defined in the <xref:System.Text.RegularExpressions.Regex> constructor call or in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, no exception is thrown.","pos":[0,885],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.RegexMatchTimeoutException&gt;</ph> exception is thrown if the execution time of the matching operation exceeds the time-out interval specified by the <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=fullName&gt;</ph> constructor.","pos":[0,356],"source":"The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the matching operation exceeds the time-out interval specified by the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=fullName> constructor."},{"content":"If you do not set a time-out value when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex&gt;</ph> object is created.","pos":[357,605],"source":" If you do not set a time-out value when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <xref:System.Text.RegularExpressions.Regex> object is created."},{"content":"If no time-out is defined in the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex&gt;</ph> constructor call or in the application domain's properties, or if the time-out value is <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName&gt;</ph>, no exception is thrown.","pos":[606,885],"source":" If no time-out is defined in the <xref:System.Text.RegularExpressions.Regex> constructor call or in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, no exception is thrown."}]}]}],"pos":[156144,159764],"yaml":true,"extradata":"MT"},{"content":"The string to search for a match.","nodes":[{"pos":[0,33],"content":"The string to search for a match.","nodes":[{"content":"The string to search for a match.","pos":[0,33]}]}],"pos":[159957,159991],"yaml":true},{"content":"The zero-based character position in the input string that defines the leftmost position to be searched.","nodes":[{"pos":[0,104],"content":"The zero-based character position in the input string that defines the leftmost position to be searched.","nodes":[{"content":"The zero-based character position in the input string that defines the leftmost position to be searched.","pos":[0,104]}]}],"pos":[160055,160160],"yaml":true},{"content":"The number of characters in the substring to include in the search.","nodes":[{"pos":[0,67],"content":"The number of characters in the substring to include in the search.","nodes":[{"content":"The number of characters in the substring to include in the search.","pos":[0,67]}]}],"pos":[160221,160289],"yaml":true},{"content":"An object that contains information about the match.","nodes":[{"pos":[0,52],"content":"An object that contains information about the match.","nodes":[{"content":"An object that contains information about the match.","pos":[0,52]}]}],"pos":[160369,160422],"yaml":true},{"content":"<code>input</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;input&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>input</code> is `null`."}],"pos":[160594,160624],"yaml":true},{"content":"<code>beginning</code> is less than zero or greater than the length of <code>input</code>.  \n  \n -or-  \n  \n <code>length</code> is less than zero or greater than the length of <code>input</code>.  \n  \n -or-  \n  \n <code>beginning</code>`+`<code>length</code>`–1` identifies a position that is outside the range of <code>input</code>.","nodes":[{"pos":[0,90],"content":"<ph id=\"ph1\">&lt;code&gt;beginning&lt;/code&gt;</ph> is less than zero or greater than the length of <ph id=\"ph2\">&lt;code&gt;input&lt;/code&gt;</ph>.","source":"<code>beginning</code> is less than zero or greater than the length of <code>input</code>."},{"pos":[97,101],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[108,195],"content":"<ph id=\"ph1\">&lt;code&gt;length&lt;/code&gt;</ph> is less than zero or greater than the length of <ph id=\"ph2\">&lt;code&gt;input&lt;/code&gt;</ph>.","source":"<code>length</code> is less than zero or greater than the length of <code>input</code>."},{"pos":[202,206],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[213,332],"content":"<ph id=\"ph1\">&lt;code&gt;beginning&lt;/code&gt;</ph><ph id=\"ph2\">`+`</ph><ph id=\"ph3\">&lt;code&gt;length&lt;/code&gt;</ph><ph id=\"ph4\">`–1`</ph> identifies a position that is outside the range of <ph id=\"ph5\">&lt;code&gt;input&lt;/code&gt;</ph>.","source":"<code>beginning</code>`+`<code>length</code>`–1` identifies a position that is outside the range of <code>input</code>."}],"pos":[160738,161081],"yaml":true},{"content":"A time-out occurred. For more information about time-outs, see the Remarks section.","nodes":[{"pos":[0,83],"content":"A time-out occurred. For more information about time-outs, see the Remarks section.","nodes":[{"content":"A time-out occurred. For more information about time-outs, see the Remarks section.","pos":[0,83],"nodes":[{"content":"A time-out occurred.","pos":[0,20]},{"content":"For more information about time-outs, see the Remarks section.","pos":[21,83]}]}]}],"pos":[161241,161325],"yaml":true},{"content":"Searches the input string for the first occurrence of the specified regular expression, using the specified matching options and time-out interval.","nodes":[{"pos":[0,147],"content":"Searches the input string for the first occurrence of the specified regular expression, using the specified matching options and time-out interval.","nodes":[{"content":"Searches the input string for the first occurrence of the specified regular expression, using the specified matching options and time-out interval.","pos":[0,147]}]}],"pos":[163148,163296],"yaml":true},{"content":"The <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29> method returns the first substring that matches a regular expression pattern in an input string. For information about the language elements used to build a regular expression pattern, see [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).  \n  \n The static <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29> method is equivalent to constructing a <xref:System.Text.RegularExpressions.Regex> object with the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29> constructor and calling the instance <xref:System.Text.RegularExpressions.Regex.Match%28System.String%29> method.  \n  \n The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match. For more information about regular expressions, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).  \n  \n You can determine whether the regular expression pattern has been found in the input string by checking the value of the returned <xref:System.Text.RegularExpressions.Match> object's <xref:System.Text.RegularExpressions.Group.Success%2A> property. If a match is found, the returned <xref:System.Text.RegularExpressions.Match> object's <xref:System.Text.RegularExpressions.Capture.Value%2A> property contains the substring from `input` that matches the regular expression pattern. If no match is found, its value is <xref:System.String.Empty?displayProperty=fullName>.  \n  \n This method returns the first substring found in `input` that matches the regular expression pattern. You can retrieve subsequent matches by repeatedly calling the returned <xref:System.Text.RegularExpressions.Match> object's <xref:System.Text.RegularExpressions.Match.NextMatch%2A> method. You can also retrieve all matches in a single method call by calling the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29?displayProperty=fullName> method.  \n  \n The `matchTimeout` parameter specifies how long a pattern matching method should try to find a match before it times out. Setting a time-out interval prevents regular expressions that rely on excessive backtracking from appearing to stop responding when they process input that contains near matches. For more information, see [Best Practices for Regular Expressions](~/docs/standard/base-types/best-practices.md) and [Backtracking](~/docs/standard/base-types/backtracking-in-regular-expressions.md). If no match is found in that time interval, the method throws a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception. `matchTimeout` overrides any default time-out value defined for the application domain in which the method executes.","nodes":[{"pos":[0,465],"content":"The <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29> method returns the first substring that matches a regular expression pattern in an input string. For information about the language elements used to build a regular expression pattern, see [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29&gt;</ph> method returns the first substring that matches a regular expression pattern in an input string.","pos":[0,249],"source":"The <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29> method returns the first substring that matches a regular expression pattern in an input string."},{"content":"For information about the language elements used to build a regular expression pattern, see <bpt id=\"p1\">[</bpt>Regular Expression Language - Quick Reference<ept id=\"p1\">](~/docs/standard/base-types/regular-expression-language-quick-reference.md)</ept>.","pos":[250,465],"source":" For information about the language elements used to build a regular expression pattern, see [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md)."}]},{"pos":[472,979],"content":"The static <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29> method is equivalent to constructing a <xref:System.Text.RegularExpressions.Regex> object with the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29> constructor and calling the instance <xref:System.Text.RegularExpressions.Regex.Match%28System.String%29> method.","nodes":[{"content":"The static <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29&gt;</ph> method is equivalent to constructing a <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.Regex&gt;</ph> object with the <ph id=\"ph3\">&lt;xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29&gt;</ph> constructor and calling the instance <ph id=\"ph4\">&lt;xref:System.Text.RegularExpressions.Regex.Match%28System.String%29&gt;</ph> method.","pos":[0,507],"source":"The static <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29> method is equivalent to constructing a <xref:System.Text.RegularExpressions.Regex> object with the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29> constructor and calling the instance <xref:System.Text.RegularExpressions.Regex.Match%28System.String%29> method."}]},{"pos":[986,1374],"content":"The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match. For more information about regular expressions, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).","nodes":[{"content":"The <ph id=\"ph1\">`pattern`</ph> parameter consists of regular expression language elements that symbolically describe the string to match.","pos":[0,120],"source":"The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match."},{"content":"For more information about regular expressions, see <bpt id=\"p1\">[</bpt>.NET Framework Regular Expressions<ept id=\"p1\">](~/docs/standard/base-types/regular-expressions.md)</ept> and <bpt id=\"p2\">[</bpt>Regular Expression Language - Quick Reference<ept id=\"p2\">](~/docs/standard/base-types/regular-expression-language-quick-reference.md)</ept>.","pos":[121,388],"source":" For more information about regular expressions, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md)."}]},{"pos":[1381,1948],"content":"You can determine whether the regular expression pattern has been found in the input string by checking the value of the returned <xref:System.Text.RegularExpressions.Match> object's <xref:System.Text.RegularExpressions.Group.Success%2A> property. If a match is found, the returned <xref:System.Text.RegularExpressions.Match> object's <xref:System.Text.RegularExpressions.Capture.Value%2A> property contains the substring from `input` that matches the regular expression pattern. If no match is found, its value is <xref:System.String.Empty?displayProperty=fullName>.","nodes":[{"content":"You can determine whether the regular expression pattern has been found in the input string by checking the value of the returned <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Match&gt;</ph> object's <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.Group.Success%2A&gt;</ph> property.","pos":[0,247],"source":"You can determine whether the regular expression pattern has been found in the input string by checking the value of the returned <xref:System.Text.RegularExpressions.Match> object's <xref:System.Text.RegularExpressions.Group.Success%2A> property."},{"content":"If a match is found, the returned <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Match&gt;</ph> object's <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.Capture.Value%2A&gt;</ph> property contains the substring from <ph id=\"ph3\">`input`</ph> that matches the regular expression pattern.","pos":[248,479],"source":" If a match is found, the returned <xref:System.Text.RegularExpressions.Match> object's <xref:System.Text.RegularExpressions.Capture.Value%2A> property contains the substring from `input` that matches the regular expression pattern."},{"content":"If no match is found, its value is <ph id=\"ph1\">&lt;xref:System.String.Empty?displayProperty=fullName&gt;</ph>.","pos":[480,567],"source":" If no match is found, its value is <xref:System.String.Empty?displayProperty=fullName>."}]},{"pos":[1955,2484],"content":"This method returns the first substring found in `input` that matches the regular expression pattern. You can retrieve subsequent matches by repeatedly calling the returned <xref:System.Text.RegularExpressions.Match> object's <xref:System.Text.RegularExpressions.Match.NextMatch%2A> method. You can also retrieve all matches in a single method call by calling the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29?displayProperty=fullName> method.","nodes":[{"content":"This method returns the first substring found in <ph id=\"ph1\">`input`</ph> that matches the regular expression pattern.","pos":[0,101],"source":"This method returns the first substring found in `input` that matches the regular expression pattern."},{"content":"You can retrieve subsequent matches by repeatedly calling the returned <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Match&gt;</ph> object's <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.Match.NextMatch%2A&gt;</ph> method.","pos":[102,290],"source":" You can retrieve subsequent matches by repeatedly calling the returned <xref:System.Text.RegularExpressions.Match> object's <xref:System.Text.RegularExpressions.Match.NextMatch%2A> method."},{"content":"You can also retrieve all matches in a single method call by calling the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29?displayProperty=fullName&gt;</ph> method.","pos":[291,529],"source":" You can also retrieve all matches in a single method call by calling the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29?displayProperty=fullName> method."}]},{"pos":[2491,3248],"content":"The `matchTimeout` parameter specifies how long a pattern matching method should try to find a match before it times out. Setting a time-out interval prevents regular expressions that rely on excessive backtracking from appearing to stop responding when they process input that contains near matches. For more information, see [Best Practices for Regular Expressions](~/docs/standard/base-types/best-practices.md) and [Backtracking](~/docs/standard/base-types/backtracking-in-regular-expressions.md). If no match is found in that time interval, the method throws a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception. `matchTimeout` overrides any default time-out value defined for the application domain in which the method executes.","nodes":[{"content":"The <ph id=\"ph1\">`matchTimeout`</ph> parameter specifies how long a pattern matching method should try to find a match before it times out.","pos":[0,121],"source":"The `matchTimeout` parameter specifies how long a pattern matching method should try to find a match before it times out."},{"content":"Setting a time-out interval prevents regular expressions that rely on excessive backtracking from appearing to stop responding when they process input that contains near matches.","pos":[122,300]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Best Practices for Regular Expressions<ept id=\"p1\">](~/docs/standard/base-types/best-practices.md)</ept> and <bpt id=\"p2\">[</bpt>Backtracking<ept id=\"p2\">](~/docs/standard/base-types/backtracking-in-regular-expressions.md)</ept>.","pos":[301,500],"source":" For more information, see [Best Practices for Regular Expressions](~/docs/standard/base-types/best-practices.md) and [Backtracking](~/docs/standard/base-types/backtracking-in-regular-expressions.md)."},{"content":"If no match is found in that time interval, the method throws a <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.RegexMatchTimeoutException&gt;</ph> exception.","pos":[501,640],"source":" If no match is found in that time interval, the method throws a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception."},{"content":"<ph id=\"ph1\">`matchTimeout`</ph> overrides any default time-out value defined for the application domain in which the method executes.","pos":[641,757],"source":"`matchTimeout` overrides any default time-out value defined for the application domain in which the method executes."}]}],"pos":[163307,166568],"yaml":true,"extradata":"MT"},{"content":"The string to search for a match.","nodes":[{"pos":[0,33],"content":"The string to search for a match.","nodes":[{"content":"The string to search for a match.","pos":[0,33]}]}],"pos":[166833,166867],"yaml":true},{"content":"The regular expression pattern to match.","nodes":[{"pos":[0,40],"content":"The regular expression pattern to match.","nodes":[{"content":"The regular expression pattern to match.","pos":[0,40]}]}],"pos":[166930,166971],"yaml":true},{"content":"A bitwise combination of the enumeration values that provide options for matching.","nodes":[{"pos":[0,82],"content":"A bitwise combination of the enumeration values that provide options for matching.","nodes":[{"content":"A bitwise combination of the enumeration values that provide options for matching.","pos":[0,82]}]}],"pos":[167064,167147],"yaml":true},{"content":"A time-out interval, or <xref href=\"System.Text.RegularExpressions.Regex.InfiniteMatchTimeout\"></xref> to indicate that the method should not time out.","nodes":[{"pos":[0,151],"content":"A time-out interval, or <ph id=\"ph1\">&lt;xref href=\"System.Text.RegularExpressions.Regex.InfiniteMatchTimeout\"&gt;&lt;/xref&gt;</ph> to indicate that the method should not time out.","source":"A time-out interval, or <xref href=\"System.Text.RegularExpressions.Regex.InfiniteMatchTimeout\"></xref> to indicate that the method should not time out."}],"pos":[167217,167369],"yaml":true},{"content":"An object that contains information about the match.","nodes":[{"pos":[0,52],"content":"An object that contains information about the match.","nodes":[{"content":"An object that contains information about the match.","pos":[0,52]}]}],"pos":[167449,167502],"yaml":true},{"content":"A regular expression parsing error occurred.","nodes":[{"pos":[0,44],"content":"A regular expression parsing error occurred.","nodes":[{"content":"A regular expression parsing error occurred.","pos":[0,44]}]}],"pos":[167666,167711],"yaml":true},{"content":"<code>input</code> or <code>pattern</code> is `null`.","nodes":[{"pos":[0,53],"content":"<ph id=\"ph1\">&lt;code&gt;input&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;pattern&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>input</code> or <code>pattern</code> is `null`."}],"pos":[167813,167867],"yaml":true},{"content":"<code>options</code> is not a valid bitwise combination of <xref href=\"System.Text.RegularExpressions.RegexOptions\"></xref> values.  \n  \n -or-  \n  \n <code>matchTimeout</code> is negative, zero, or greater than approximately 24 days.","nodes":[{"pos":[0,131],"content":"<ph id=\"ph1\">&lt;code&gt;options&lt;/code&gt;</ph> is not a valid bitwise combination of <ph id=\"ph2\">&lt;xref href=\"System.Text.RegularExpressions.RegexOptions\"&gt;&lt;/xref&gt;</ph> values.","source":"<code>options</code> is not a valid bitwise combination of <xref href=\"System.Text.RegularExpressions.RegexOptions\"></xref> values."},{"pos":[138,142],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[149,232],"content":"<ph id=\"ph1\">&lt;code&gt;matchTimeout&lt;/code&gt;</ph> is negative, zero, or greater than approximately 24 days.","source":"<code>matchTimeout</code> is negative, zero, or greater than approximately 24 days."}],"pos":[167981,168222],"yaml":true},{"content":"A time-out occurred. For more information about time-outs, see the Remarks section.","nodes":[{"pos":[0,83],"content":"A time-out occurred. For more information about time-outs, see the Remarks section.","nodes":[{"content":"A time-out occurred. For more information about time-outs, see the Remarks section.","pos":[0,83],"nodes":[{"content":"A time-out occurred.","pos":[0,20]},{"content":"For more information about time-outs, see the Remarks section.","pos":[21,83]}]}]}],"pos":[168382,168466],"yaml":true},{"content":"Searches the input string for the first occurrence of a regular expression, beginning at the specified starting position in the string.","nodes":[{"pos":[0,135],"content":"Searches the input string for the first occurrence of a regular expression, beginning at the specified starting position in the string.","nodes":[{"content":"Searches the input string for the first occurrence of a regular expression, beginning at the specified starting position in the string.","pos":[0,135]}]}],"pos":[170031,170167],"yaml":true},{"content":"The <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.Int32%29> method returns the first substring that matches a regular expression pattern, starting at or after the `startat` character position, in an input string. For information about the language elements used to build a regular expression pattern, see [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).  \n  \n The regular expression pattern for which the <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.Int32%29> method searches is defined by the call to one of the <xref:System.Text.RegularExpressions.Regex> class constructors. For more information about the elements that can form a regular expression pattern, see [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).  \n  \n You can optionally specify a starting position in the string by using the `startat` parameter. When the regular expression engine parses from left to right (the default), the match and the scan move rightward, starting at the character specified in `startat`. When the regular expression engine parses from right to left (when the regular expression pattern is constructed with the <xref:System.Text.RegularExpressions.RegexOptions?displayProperty=fullName> option), the match and scan move in the opposite direction and begin with the character at `startat` -1. If you do not specify a starting position, the search begins at the default `startat` position. If the regular expression searches from left to right, the default `startat` position is at the left end of `input`; if it searches from right to left, the default `startat` position is at the right end of `input`.  \n  \n If you want to restrict a match so that it begins at a particular character position in the string and the regular expression engine does not scan the remainder of the string for a match, anchor the regular expression with a `\\G` (at the left for a left-to-right pattern, or at the right for a right-to-left pattern). This restricts the match so it must start exactly at `startat`.  \n  \n You can determine whether the regular expression pattern has been found in the input string by checking the value of the returned <xref:System.Text.RegularExpressions.Match> object's <xref:System.Text.RegularExpressions.Group.Success%2A> property. If a match is found, the returned <xref:System.Text.RegularExpressions.Match> object's <xref:System.Text.RegularExpressions.Capture.Value%2A> property contains the substring from `input` that matches the regular expression pattern. If no match is found, its value is <xref:System.String.Empty?displayProperty=fullName>.  \n  \n This method returns the first substring found at or after the `startat` character position in `input` that matches the regular expression pattern. You can retrieve subsequent matches by repeatedly calling the returned <xref:System.Text.RegularExpressions.Match> object's <xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=fullName> method. You can also retrieve all matches in a single method call by calling the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.Int32%29?displayProperty=fullName> method.  \n  \n The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the matching operation exceeds the time-out interval specified by the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=fullName> constructor. If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exeeds any time-out value established for the application domain in which the <xref:System.Text.RegularExpressions.Regex> object is created. If no time-out is defined in the <xref:System.Text.RegularExpressions.Regex> constructor call or in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, no exception is thrown.","nodes":[{"pos":[0,456],"content":"The <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.Int32%29> method returns the first substring that matches a regular expression pattern, starting at or after the `startat` character position, in an input string. For information about the language elements used to build a regular expression pattern, see [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.Int32%29&gt;</ph> method returns the first substring that matches a regular expression pattern, starting at or after the <ph id=\"ph2\">`startat`</ph> character position, in an input string.","pos":[0,240],"source":"The <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.Int32%29> method returns the first substring that matches a regular expression pattern, starting at or after the `startat` character position, in an input string."},{"content":"For information about the language elements used to build a regular expression pattern, see <bpt id=\"p1\">[</bpt>Regular Expression Language - Quick Reference<ept id=\"p1\">](~/docs/standard/base-types/regular-expression-language-quick-reference.md)</ept>.","pos":[241,456],"source":" For information about the language elements used to build a regular expression pattern, see [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md)."}]},{"pos":[463,920],"content":"The regular expression pattern for which the <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.Int32%29> method searches is defined by the call to one of the <xref:System.Text.RegularExpressions.Regex> class constructors. For more information about the elements that can form a regular expression pattern, see [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).","nodes":[{"content":"The regular expression pattern for which the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.Int32%29&gt;</ph> method searches is defined by the call to one of the <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.Regex&gt;</ph> class constructors.","pos":[0,245],"source":"The regular expression pattern for which the <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.Int32%29> method searches is defined by the call to one of the <xref:System.Text.RegularExpressions.Regex> class constructors."},{"content":"For more information about the elements that can form a regular expression pattern, see <bpt id=\"p1\">[</bpt>Regular Expression Language - Quick Reference<ept id=\"p1\">](~/docs/standard/base-types/regular-expression-language-quick-reference.md)</ept>.","pos":[246,457],"source":" For more information about the elements that can form a regular expression pattern, see [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md)."}]},{"pos":[927,1800],"content":"You can optionally specify a starting position in the string by using the `startat` parameter. When the regular expression engine parses from left to right (the default), the match and the scan move rightward, starting at the character specified in `startat`. When the regular expression engine parses from right to left (when the regular expression pattern is constructed with the <xref:System.Text.RegularExpressions.RegexOptions?displayProperty=fullName> option), the match and scan move in the opposite direction and begin with the character at `startat` -1. If you do not specify a starting position, the search begins at the default `startat` position. If the regular expression searches from left to right, the default `startat` position is at the left end of `input`; if it searches from right to left, the default `startat` position is at the right end of `input`.","nodes":[{"content":"You can optionally specify a starting position in the string by using the <ph id=\"ph1\">`startat`</ph> parameter.","pos":[0,94],"source":"You can optionally specify a starting position in the string by using the `startat` parameter."},{"content":"When the regular expression engine parses from left to right (the default), the match and the scan move rightward, starting at the character specified in <ph id=\"ph1\">`startat`</ph>.","pos":[95,259],"source":" When the regular expression engine parses from left to right (the default), the match and the scan move rightward, starting at the character specified in `startat`."},{"content":"When the regular expression engine parses from right to left (when the regular expression pattern is constructed with the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.RegexOptions?displayProperty=fullName&gt;</ph> option), the match and scan move in the opposite direction and begin with the character at <ph id=\"ph2\">`startat`</ph> -1.","pos":[260,562],"source":" When the regular expression engine parses from right to left (when the regular expression pattern is constructed with the <xref:System.Text.RegularExpressions.RegexOptions?displayProperty=fullName> option), the match and scan move in the opposite direction and begin with the character at `startat` -1."},{"content":"If you do not specify a starting position, the search begins at the default <ph id=\"ph1\">`startat`</ph> position.","pos":[563,658],"source":" If you do not specify a starting position, the search begins at the default `startat` position."},{"content":"If the regular expression searches from left to right, the default <ph id=\"ph1\">`startat`</ph> position is at the left end of <ph id=\"ph2\">`input`</ph>; if it searches from right to left, the default <ph id=\"ph3\">`startat`</ph> position is at the right end of <ph id=\"ph4\">`input`</ph>.","pos":[659,873],"source":" If the regular expression searches from left to right, the default `startat` position is at the left end of `input`; if it searches from right to left, the default `startat` position is at the right end of `input`."}]},{"pos":[1807,2188],"content":"If you want to restrict a match so that it begins at a particular character position in the string and the regular expression engine does not scan the remainder of the string for a match, anchor the regular expression with a `\\G` (at the left for a left-to-right pattern, or at the right for a right-to-left pattern). This restricts the match so it must start exactly at `startat`.","nodes":[{"content":"If you want to restrict a match so that it begins at a particular character position in the string and the regular expression engine does not scan the remainder of the string for a match, anchor the regular expression with a <ph id=\"ph1\">`\\G`</ph> (at the left for a left-to-right pattern, or at the right for a right-to-left pattern).","pos":[0,317],"source":"If you want to restrict a match so that it begins at a particular character position in the string and the regular expression engine does not scan the remainder of the string for a match, anchor the regular expression with a `\\G` (at the left for a left-to-right pattern, or at the right for a right-to-left pattern)."},{"content":"This restricts the match so it must start exactly at <ph id=\"ph1\">`startat`</ph>.","pos":[318,381],"source":" This restricts the match so it must start exactly at `startat`."}]},{"pos":[2195,2762],"content":"You can determine whether the regular expression pattern has been found in the input string by checking the value of the returned <xref:System.Text.RegularExpressions.Match> object's <xref:System.Text.RegularExpressions.Group.Success%2A> property. If a match is found, the returned <xref:System.Text.RegularExpressions.Match> object's <xref:System.Text.RegularExpressions.Capture.Value%2A> property contains the substring from `input` that matches the regular expression pattern. If no match is found, its value is <xref:System.String.Empty?displayProperty=fullName>.","nodes":[{"content":"You can determine whether the regular expression pattern has been found in the input string by checking the value of the returned <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Match&gt;</ph> object's <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.Group.Success%2A&gt;</ph> property.","pos":[0,247],"source":"You can determine whether the regular expression pattern has been found in the input string by checking the value of the returned <xref:System.Text.RegularExpressions.Match> object's <xref:System.Text.RegularExpressions.Group.Success%2A> property."},{"content":"If a match is found, the returned <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Match&gt;</ph> object's <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.Capture.Value%2A&gt;</ph> property contains the substring from <ph id=\"ph3\">`input`</ph> that matches the regular expression pattern.","pos":[248,479],"source":" If a match is found, the returned <xref:System.Text.RegularExpressions.Match> object's <xref:System.Text.RegularExpressions.Capture.Value%2A> property contains the substring from `input` that matches the regular expression pattern."},{"content":"If no match is found, its value is <ph id=\"ph1\">&lt;xref:System.String.Empty?displayProperty=fullName&gt;</ph>.","pos":[480,567],"source":" If no match is found, its value is <xref:System.String.Empty?displayProperty=fullName>."}]},{"pos":[2769,3321],"content":"This method returns the first substring found at or after the `startat` character position in `input` that matches the regular expression pattern. You can retrieve subsequent matches by repeatedly calling the returned <xref:System.Text.RegularExpressions.Match> object's <xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=fullName> method. You can also retrieve all matches in a single method call by calling the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.Int32%29?displayProperty=fullName> method.","nodes":[{"content":"This method returns the first substring found at or after the <ph id=\"ph1\">`startat`</ph> character position in <ph id=\"ph2\">`input`</ph> that matches the regular expression pattern.","pos":[0,146],"source":"This method returns the first substring found at or after the `startat` character position in `input` that matches the regular expression pattern."},{"content":"You can retrieve subsequent matches by repeatedly calling the returned <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Match&gt;</ph> object's <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=fullName&gt;</ph> method.","pos":[147,360],"source":" You can retrieve subsequent matches by repeatedly calling the returned <xref:System.Text.RegularExpressions.Match> object's <xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=fullName> method."},{"content":"You can also retrieve all matches in a single method call by calling the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.Int32%29?displayProperty=fullName&gt;</ph> method.","pos":[361,552],"source":" You can also retrieve all matches in a single method call by calling the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.Int32%29?displayProperty=fullName> method."}]},{"pos":[3328,4215],"content":"The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the matching operation exceeds the time-out interval specified by the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=fullName> constructor. If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exeeds any time-out value established for the application domain in which the <xref:System.Text.RegularExpressions.Regex> object is created. If no time-out is defined in the <xref:System.Text.RegularExpressions.Regex> constructor call or in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, no exception is thrown.","nodes":[{"content":"The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the matching operation exceeds the time-out interval specified by the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=fullName> constructor. If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exeeds any time-out value established for the application domain in which the <xref:System.Text.RegularExpressions.Regex> object is created. If no time-out is defined in the <xref:System.Text.RegularExpressions.Regex> constructor call or in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, no exception is thrown.","pos":[0,887],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.RegexMatchTimeoutException&gt;</ph> exception is thrown if the execution time of the matching operation exceeds the time-out interval specified by the <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=fullName&gt;</ph> constructor.","pos":[0,356],"source":"The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the matching operation exceeds the time-out interval specified by the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=fullName> constructor."},{"content":"If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exeeds any time-out value established for the application domain in which the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex&gt;</ph> object is created.","pos":[357,607],"source":" If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exeeds any time-out value established for the application domain in which the <xref:System.Text.RegularExpressions.Regex> object is created."},{"content":"If no time-out is defined in the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex&gt;</ph> constructor call or in the application domain's properties, or if the time-out value is <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName&gt;</ph>, no exception is thrown.","pos":[608,887],"source":" If no time-out is defined in the <xref:System.Text.RegularExpressions.Regex> constructor call or in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, no exception is thrown."}]}]}],"pos":[170178,174409],"yaml":true,"extradata":"MT"},{"content":"The string to search for a match.","nodes":[{"pos":[0,33],"content":"The string to search for a match.","nodes":[{"content":"The string to search for a match.","pos":[0,33]}]}],"pos":[174588,174622],"yaml":true},{"content":"The zero-based character position at which to start the search.","nodes":[{"pos":[0,63],"content":"The zero-based character position at which to start the search.","nodes":[{"content":"The zero-based character position at which to start the search.","pos":[0,63]}]}],"pos":[174684,174748],"yaml":true},{"content":"An object that contains information about the match.","nodes":[{"pos":[0,52],"content":"An object that contains information about the match.","nodes":[{"content":"An object that contains information about the match.","pos":[0,52]}]}],"pos":[174828,174881],"yaml":true},{"content":"<code>input</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;input&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>input</code> is `null`."}],"pos":[175053,175083],"yaml":true},{"content":"<code>startat</code> is less than zero or greater than the length of <code>input</code>.","nodes":[{"pos":[0,88],"content":"<ph id=\"ph1\">&lt;code&gt;startat&lt;/code&gt;</ph> is less than zero or greater than the length of <ph id=\"ph2\">&lt;code&gt;input&lt;/code&gt;</ph>.","source":"<code>startat</code> is less than zero or greater than the length of <code>input</code>."}],"pos":[175197,175286],"yaml":true},{"content":"A time-out occurred. For more information about time-outs, see the Remarks section.","nodes":[{"pos":[0,83],"content":"A time-out occurred. For more information about time-outs, see the Remarks section.","nodes":[{"content":"A time-out occurred. For more information about time-outs, see the Remarks section.","pos":[0,83],"nodes":[{"content":"A time-out occurred.","pos":[0,20]},{"content":"For more information about time-outs, see the Remarks section.","pos":[21,83]}]}]}],"pos":[175446,175530],"yaml":true},{"content":"Searches the specified input string for the first occurrence of the regular expression specified in the <xref href=\"System.Text.RegularExpressions.Regex\"></xref> constructor.","nodes":[{"pos":[0,174],"content":"Searches the specified input string for the first occurrence of the regular expression specified in the <ph id=\"ph1\">&lt;xref href=\"System.Text.RegularExpressions.Regex\"&gt;&lt;/xref&gt;</ph> constructor.","source":"Searches the specified input string for the first occurrence of the regular expression specified in the <xref href=\"System.Text.RegularExpressions.Regex\"></xref> constructor."}],"pos":[177035,177210],"yaml":true},{"content":"The <xref:System.Text.RegularExpressions.Regex.Match%28System.String%29> method returns the first substring that matches a regular expression pattern in an input string. For information about the language elements used to build a regular expression pattern, see [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).  \n  \n You can determine whether the regular expression pattern has been found in the input string by checking the value of the returned <xref:System.Text.RegularExpressions.Match> object's <xref:System.Text.RegularExpressions.Group.Success%2A> property. If a match is found, the returned <xref:System.Text.RegularExpressions.Match> object's <xref:System.Text.RegularExpressions.Capture.Value%2A> property contains the substring from `input` that matches the regular expression pattern. If no match is found, its value is <xref:System.String.Empty?displayProperty=fullName>.  \n  \n This method returns the first substring in `input` that matches the regular expression pattern. You can retrieve subsequent matches by repeatedly calling the returned <xref:System.Text.RegularExpressions.Match> object's <xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=fullName> method. You can also retrieve all matches in a single method call by calling the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%29?displayProperty=fullName> method.  \n  \n The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the matching operation exceeds the time-out interval specified by the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=fullName> constructor. If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <xref:System.Text.RegularExpressions.Regex> object is created. If no time-out is defined in the <xref:System.Text.RegularExpressions.Regex> constructor call or in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, no exception is thrown.","nodes":[{"pos":[0,385],"content":"The <xref:System.Text.RegularExpressions.Regex.Match%28System.String%29> method returns the first substring that matches a regular expression pattern in an input string. For information about the language elements used to build a regular expression pattern, see [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.Match%28System.String%29&gt;</ph> method returns the first substring that matches a regular expression pattern in an input string.","pos":[0,169],"source":"The <xref:System.Text.RegularExpressions.Regex.Match%28System.String%29> method returns the first substring that matches a regular expression pattern in an input string."},{"content":"For information about the language elements used to build a regular expression pattern, see <bpt id=\"p1\">[</bpt>Regular Expression Language - Quick Reference<ept id=\"p1\">](~/docs/standard/base-types/regular-expression-language-quick-reference.md)</ept>.","pos":[170,385],"source":" For information about the language elements used to build a regular expression pattern, see [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md)."}]},{"pos":[392,959],"content":"You can determine whether the regular expression pattern has been found in the input string by checking the value of the returned <xref:System.Text.RegularExpressions.Match> object's <xref:System.Text.RegularExpressions.Group.Success%2A> property. If a match is found, the returned <xref:System.Text.RegularExpressions.Match> object's <xref:System.Text.RegularExpressions.Capture.Value%2A> property contains the substring from `input` that matches the regular expression pattern. If no match is found, its value is <xref:System.String.Empty?displayProperty=fullName>.","nodes":[{"content":"You can determine whether the regular expression pattern has been found in the input string by checking the value of the returned <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Match&gt;</ph> object's <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.Group.Success%2A&gt;</ph> property.","pos":[0,247],"source":"You can determine whether the regular expression pattern has been found in the input string by checking the value of the returned <xref:System.Text.RegularExpressions.Match> object's <xref:System.Text.RegularExpressions.Group.Success%2A> property."},{"content":"If a match is found, the returned <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Match&gt;</ph> object's <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.Capture.Value%2A&gt;</ph> property contains the substring from <ph id=\"ph3\">`input`</ph> that matches the regular expression pattern.","pos":[248,479],"source":" If a match is found, the returned <xref:System.Text.RegularExpressions.Match> object's <xref:System.Text.RegularExpressions.Capture.Value%2A> property contains the substring from `input` that matches the regular expression pattern."},{"content":"If no match is found, its value is <ph id=\"ph1\">&lt;xref:System.String.Empty?displayProperty=fullName&gt;</ph>.","pos":[480,567],"source":" If no match is found, its value is <xref:System.String.Empty?displayProperty=fullName>."}]},{"pos":[966,1452],"content":"This method returns the first substring in `input` that matches the regular expression pattern. You can retrieve subsequent matches by repeatedly calling the returned <xref:System.Text.RegularExpressions.Match> object's <xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=fullName> method. You can also retrieve all matches in a single method call by calling the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%29?displayProperty=fullName> method.","nodes":[{"content":"This method returns the first substring in <ph id=\"ph1\">`input`</ph> that matches the regular expression pattern.","pos":[0,95],"source":"This method returns the first substring in `input` that matches the regular expression pattern."},{"content":"You can retrieve subsequent matches by repeatedly calling the returned <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Match&gt;</ph> object's <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=fullName&gt;</ph> method.","pos":[96,309],"source":" You can retrieve subsequent matches by repeatedly calling the returned <xref:System.Text.RegularExpressions.Match> object's <xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=fullName> method."},{"content":"You can also retrieve all matches in a single method call by calling the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.Matches%28System.String%29?displayProperty=fullName&gt;</ph> method.","pos":[310,486],"source":" You can also retrieve all matches in a single method call by calling the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%29?displayProperty=fullName> method."}]},{"pos":[1459,2347],"content":"The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the matching operation exceeds the time-out interval specified by the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=fullName> constructor. If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <xref:System.Text.RegularExpressions.Regex> object is created. If no time-out is defined in the <xref:System.Text.RegularExpressions.Regex> constructor call or in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, no exception is thrown.","nodes":[{"content":"The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the matching operation exceeds the time-out interval specified by the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=fullName> constructor. If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <xref:System.Text.RegularExpressions.Regex> object is created. If no time-out is defined in the <xref:System.Text.RegularExpressions.Regex> constructor call or in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, no exception is thrown.","pos":[0,888],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.RegexMatchTimeoutException&gt;</ph> exception is thrown if the execution time of the matching operation exceeds the time-out interval specified by the <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=fullName&gt;</ph> constructor.","pos":[0,356],"source":"The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the matching operation exceeds the time-out interval specified by the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=fullName> constructor."},{"content":"If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex&gt;</ph> object is created.","pos":[357,608],"source":" If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <xref:System.Text.RegularExpressions.Regex> object is created."},{"content":"If no time-out is defined in the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex&gt;</ph> constructor call or in the application domain's properties, or if the time-out value is <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName&gt;</ph>, no exception is thrown.","pos":[609,888],"source":" If no time-out is defined in the <xref:System.Text.RegularExpressions.Regex> constructor call or in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, no exception is thrown."}]}]}],"pos":[177221,179577],"yaml":true,"extradata":"MT"},{"content":"The string to search for a match.","nodes":[{"pos":[0,33],"content":"The string to search for a match.","nodes":[{"content":"The string to search for a match.","pos":[0,33]}]}],"pos":[180860,180894],"yaml":true},{"content":"An object that contains information about the match.","nodes":[{"pos":[0,52],"content":"An object that contains information about the match.","nodes":[{"content":"An object that contains information about the match.","pos":[0,52]}]}],"pos":[180974,181027],"yaml":true},{"content":"<code>input</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;input&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>input</code> is `null`."}],"pos":[181199,181229],"yaml":true},{"content":"A time-out occurred. For more information about time-outs, see the Remarks section.","nodes":[{"pos":[0,83],"content":"A time-out occurred. For more information about time-outs, see the Remarks section.","nodes":[{"content":"A time-out occurred. For more information about time-outs, see the Remarks section.","pos":[0,83],"nodes":[{"content":"A time-out occurred.","pos":[0,20]},{"content":"For more information about time-outs, see the Remarks section.","pos":[21,83]}]}]}],"pos":[181389,181473],"yaml":true},{"content":"Searches the specified input string for the first occurrence of the specified regular expression.","nodes":[{"pos":[0,97],"content":"Searches the specified input string for the first occurrence of the specified regular expression.","nodes":[{"content":"Searches the specified input string for the first occurrence of the specified regular expression.","pos":[0,97]}]}],"pos":[183044,183142],"yaml":true},{"content":"The <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%29> method returns the first substring that matches a regular expression pattern in an input string. For information about the language elements used to build a regular expression pattern, see [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).  \n  \n The static <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%29> method is equivalent to constructing a <xref:System.Text.RegularExpressions.Regex> object with the specified regular expression pattern and calling the instance <xref:System.Text.RegularExpressions.Regex.Match%28System.String%29> method. In this case, the regular expression engine caches the regular expression pattern.  \n  \n The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match. For more information about regular expressions, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).  \n  \n You can determine whether the regular expression pattern has been found in the input string by checking the value of the returned <xref:System.Text.RegularExpressions.Match> object's <xref:System.Text.RegularExpressions.Group.Success%2A> property. If a match is found, the returned <xref:System.Text.RegularExpressions.Match> object's <xref:System.Text.RegularExpressions.Capture.Value%2A> property contains the substring from `input` that matches the regular expression pattern. If no match is found, its value is <xref:System.String.Empty?displayProperty=fullName>.  \n  \n This method returns the first substring in `input` that matches the regular expression pattern. You can retrieve subsequent matches by repeatedly calling the returned <xref:System.Text.RegularExpressions.Match> object's <xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=fullName> method. You can also retrieve all matches in a single method call by calling the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%29?displayProperty=fullName> method.  \n  \n The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the matching operation exceeds the time-out interval specified for the application domain in which the method is called. If no time-out is defined in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, no exception is thrown.","nodes":[{"pos":[0,401],"content":"The <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%29> method returns the first substring that matches a regular expression pattern in an input string. For information about the language elements used to build a regular expression pattern, see [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%29&gt;</ph> method returns the first substring that matches a regular expression pattern in an input string.","pos":[0,185],"source":"The <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%29> method returns the first substring that matches a regular expression pattern in an input string."},{"content":"For information about the language elements used to build a regular expression pattern, see <bpt id=\"p1\">[</bpt>Regular Expression Language - Quick Reference<ept id=\"p1\">](~/docs/standard/base-types/regular-expression-language-quick-reference.md)</ept>.","pos":[186,401],"source":" For information about the language elements used to build a regular expression pattern, see [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md)."}]},{"pos":[408,824],"content":"The static <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%29> method is equivalent to constructing a <xref:System.Text.RegularExpressions.Regex> object with the specified regular expression pattern and calling the instance <xref:System.Text.RegularExpressions.Regex.Match%28System.String%29> method. In this case, the regular expression engine caches the regular expression pattern.","nodes":[{"content":"The static <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%29> method is equivalent to constructing a <xref:System.Text.RegularExpressions.Regex> object with the specified regular expression pattern and calling the instance <xref:System.Text.RegularExpressions.Regex.Match%28System.String%29> method. In this case, the regular expression engine caches the regular expression pattern.","pos":[0,416],"nodes":[{"content":"The static <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%29&gt;</ph> method is equivalent to constructing a <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.Regex&gt;</ph> object with the specified regular expression pattern and calling the instance <ph id=\"ph3\">&lt;xref:System.Text.RegularExpressions.Regex.Match%28System.String%29&gt;</ph> method.","pos":[0,333],"source":"The static <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%29> method is equivalent to constructing a <xref:System.Text.RegularExpressions.Regex> object with the specified regular expression pattern and calling the instance <xref:System.Text.RegularExpressions.Regex.Match%28System.String%29> method."},{"content":"In this case, the regular expression engine caches the regular expression pattern.","pos":[334,416]}]}]},{"pos":[831,1219],"content":"The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match. For more information about regular expressions, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).","nodes":[{"content":"The <ph id=\"ph1\">`pattern`</ph> parameter consists of regular expression language elements that symbolically describe the string to match.","pos":[0,120],"source":"The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match."},{"content":"For more information about regular expressions, see <bpt id=\"p1\">[</bpt>.NET Framework Regular Expressions<ept id=\"p1\">](~/docs/standard/base-types/regular-expressions.md)</ept> and <bpt id=\"p2\">[</bpt>Regular Expression Language - Quick Reference<ept id=\"p2\">](~/docs/standard/base-types/regular-expression-language-quick-reference.md)</ept>.","pos":[121,388],"source":" For more information about regular expressions, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md)."}]},{"pos":[1226,1793],"content":"You can determine whether the regular expression pattern has been found in the input string by checking the value of the returned <xref:System.Text.RegularExpressions.Match> object's <xref:System.Text.RegularExpressions.Group.Success%2A> property. If a match is found, the returned <xref:System.Text.RegularExpressions.Match> object's <xref:System.Text.RegularExpressions.Capture.Value%2A> property contains the substring from `input` that matches the regular expression pattern. If no match is found, its value is <xref:System.String.Empty?displayProperty=fullName>.","nodes":[{"content":"You can determine whether the regular expression pattern has been found in the input string by checking the value of the returned <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Match&gt;</ph> object's <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.Group.Success%2A&gt;</ph> property.","pos":[0,247],"source":"You can determine whether the regular expression pattern has been found in the input string by checking the value of the returned <xref:System.Text.RegularExpressions.Match> object's <xref:System.Text.RegularExpressions.Group.Success%2A> property."},{"content":"If a match is found, the returned <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Match&gt;</ph> object's <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.Capture.Value%2A&gt;</ph> property contains the substring from <ph id=\"ph3\">`input`</ph> that matches the regular expression pattern.","pos":[248,479],"source":" If a match is found, the returned <xref:System.Text.RegularExpressions.Match> object's <xref:System.Text.RegularExpressions.Capture.Value%2A> property contains the substring from `input` that matches the regular expression pattern."},{"content":"If no match is found, its value is <ph id=\"ph1\">&lt;xref:System.String.Empty?displayProperty=fullName&gt;</ph>.","pos":[480,567],"source":" If no match is found, its value is <xref:System.String.Empty?displayProperty=fullName>."}]},{"pos":[1800,2302],"content":"This method returns the first substring in `input` that matches the regular expression pattern. You can retrieve subsequent matches by repeatedly calling the returned <xref:System.Text.RegularExpressions.Match> object's <xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=fullName> method. You can also retrieve all matches in a single method call by calling the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%29?displayProperty=fullName> method.","nodes":[{"content":"This method returns the first substring in <ph id=\"ph1\">`input`</ph> that matches the regular expression pattern.","pos":[0,95],"source":"This method returns the first substring in `input` that matches the regular expression pattern."},{"content":"You can retrieve subsequent matches by repeatedly calling the returned <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Match&gt;</ph> object's <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=fullName&gt;</ph> method.","pos":[96,309],"source":" You can retrieve subsequent matches by repeatedly calling the returned <xref:System.Text.RegularExpressions.Match> object's <xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=fullName> method."},{"content":"You can also retrieve all matches in a single method call by calling the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%29?displayProperty=fullName&gt;</ph> method.","pos":[310,502],"source":" You can also retrieve all matches in a single method call by calling the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%29?displayProperty=fullName> method."}]},{"pos":[2309,2752],"content":"The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the matching operation exceeds the time-out interval specified for the application domain in which the method is called. If no time-out is defined in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, no exception is thrown.","nodes":[{"content":"The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the matching operation exceeds the time-out interval specified for the application domain in which the method is called. If no time-out is defined in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, no exception is thrown.","pos":[0,443],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.RegexMatchTimeoutException&gt;</ph> exception is thrown if the execution time of the matching operation exceeds the time-out interval specified for the application domain in which the method is called.","pos":[0,234],"source":"The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the matching operation exceeds the time-out interval specified for the application domain in which the method is called."},{"content":"If no time-out is defined in the application domain's properties, or if the time-out value is <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName&gt;</ph>, no exception is thrown.","pos":[235,443],"source":" If no time-out is defined in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, no exception is thrown."}]}]}],"pos":[183153,185918],"yaml":true,"extradata":"MT"},{"content":"The string to search for a match.","nodes":[{"pos":[0,33],"content":"The string to search for a match.","nodes":[{"content":"The string to search for a match.","pos":[0,33]}]}],"pos":[187236,187270],"yaml":true},{"content":"The regular expression pattern to match.","nodes":[{"pos":[0,40],"content":"The regular expression pattern to match.","nodes":[{"content":"The regular expression pattern to match.","pos":[0,40]}]}],"pos":[187333,187374],"yaml":true},{"content":"An object that contains information about the match.","nodes":[{"pos":[0,52],"content":"An object that contains information about the match.","nodes":[{"content":"An object that contains information about the match.","pos":[0,52]}]}],"pos":[187454,187507],"yaml":true},{"content":"A regular expression parsing error occurred.","nodes":[{"pos":[0,44],"content":"A regular expression parsing error occurred.","nodes":[{"content":"A regular expression parsing error occurred.","pos":[0,44]}]}],"pos":[187671,187716],"yaml":true},{"content":"<code>input</code> or <code>pattern</code> is `null`.","nodes":[{"pos":[0,53],"content":"<ph id=\"ph1\">&lt;code&gt;input&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;pattern&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>input</code> or <code>pattern</code> is `null`."}],"pos":[187818,187872],"yaml":true},{"content":"A time-out occurred. For more information about time-outs, see the Remarks section.","nodes":[{"pos":[0,83],"content":"A time-out occurred. For more information about time-outs, see the Remarks section.","nodes":[{"content":"A time-out occurred. For more information about time-outs, see the Remarks section.","pos":[0,83],"nodes":[{"content":"A time-out occurred.","pos":[0,20]},{"content":"For more information about time-outs, see the Remarks section.","pos":[21,83]}]}]}],"pos":[188032,188116],"yaml":true},{"content":"Searches the specified input string for all occurrences of a regular expression.","nodes":[{"pos":[0,80],"content":"Searches the specified input string for all occurrences of a regular expression.","nodes":[{"content":"Searches the specified input string for all occurrences of a regular expression.","pos":[0,80]}]}],"pos":[189633,189714],"yaml":true},{"content":"The <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%29> method is similar to the <xref:System.Text.RegularExpressions.Regex.Match%28System.String%29> method, except that it returns information about all the matches found in the input string, instead of a single match. It is equivalent to the following code:  \n  \n [!code-csharp[System.Text.RegularExpressions.Regex.Matches#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/cs/matchespattern.cs#5)]\n [!code-vb[System.Text.RegularExpressions.Regex.Matches#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/vb/matchespattern.vb#5)]  \n  \n The collection includes only matches and terminates at the first non-match.  \n  \n The regular expression pattern for which the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%29> method searches is defined by the call to one of the <xref:System.Text.RegularExpressions.Regex> class constructors. For more information about the elements that can form a regular expression pattern, see [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).  \n  \n The <xref:System.Text.RegularExpressions.Regex.Matches%2A> method uses lazy evaluation to populate the returned <xref:System.Text.RegularExpressions.MatchCollection> object. Accessing members of this collection such as <xref:System.Text.RegularExpressions.MatchCollection.Count%2A?displayProperty=fullName> and <xref:System.Text.RegularExpressions.MatchCollection.CopyTo%2A?displayProperty=fullName> causes the collection to be populated immediately. To take advantage of lazy evaluation, you should iterate the collection by using a construct such as `foreach` in C# and `For Each`…`Next` in Visual Basic.  \n  \n Because of its lazy evaluation, calling the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%29> method does not throw a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception. However, the exception is thrown when an operation is performed on the <xref:System.Text.RegularExpressions.MatchCollection> object returned by this method, if the <xref:System.Text.RegularExpressions.Regex.MatchTimeout%2A> property is not <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName> and a matching operation exceeds the time-out interval.","nodes":[{"pos":[0,327],"content":"The <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%29> method is similar to the <xref:System.Text.RegularExpressions.Regex.Match%28System.String%29> method, except that it returns information about all the matches found in the input string, instead of a single match. It is equivalent to the following code:","nodes":[{"content":"The <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%29> method is similar to the <xref:System.Text.RegularExpressions.Regex.Match%28System.String%29> method, except that it returns information about all the matches found in the input string, instead of a single match. It is equivalent to the following code:","pos":[0,327],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.Matches%28System.String%29&gt;</ph> method is similar to the <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.Regex.Match%28System.String%29&gt;</ph> method, except that it returns information about all the matches found in the input string, instead of a single match.","pos":[0,287],"source":"The <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%29> method is similar to the <xref:System.Text.RegularExpressions.Regex.Match%28System.String%29> method, except that it returns information about all the matches found in the input string, instead of a single match."},{"content":"It is equivalent to the following code:","pos":[288,327]}]}]},{"pos":[334,697],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Text.RegularExpressions.Regex.Matches#5<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/cs/matchespattern.cs#5)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Text.RegularExpressions.Regex.Matches#5<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/vb/matchespattern.vb#5)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Text.RegularExpressions.Regex.Matches#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/cs/matchespattern.cs#5)]\n [!code-vb[System.Text.RegularExpressions.Regex.Matches#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/vb/matchespattern.vb#5)]"},{"pos":[704,779],"content":"The collection includes only matches and terminates at the first non-match.","nodes":[{"content":"The collection includes only matches and terminates at the first non-match.","pos":[0,75]}]},{"pos":[786,1230],"content":"The regular expression pattern for which the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%29> method searches is defined by the call to one of the <xref:System.Text.RegularExpressions.Regex> class constructors. For more information about the elements that can form a regular expression pattern, see [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).","nodes":[{"content":"The regular expression pattern for which the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.Matches%28System.String%29&gt;</ph> method searches is defined by the call to one of the <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.Regex&gt;</ph> class constructors.","pos":[0,232],"source":"The regular expression pattern for which the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%29> method searches is defined by the call to one of the <xref:System.Text.RegularExpressions.Regex> class constructors."},{"content":"For more information about the elements that can form a regular expression pattern, see <bpt id=\"p1\">[</bpt>Regular Expression Language - Quick Reference<ept id=\"p1\">](~/docs/standard/base-types/regular-expression-language-quick-reference.md)</ept>.","pos":[233,444],"source":" For more information about the elements that can form a regular expression pattern, see [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md)."}]},{"pos":[1237,1843],"content":"The <xref:System.Text.RegularExpressions.Regex.Matches%2A> method uses lazy evaluation to populate the returned <xref:System.Text.RegularExpressions.MatchCollection> object. Accessing members of this collection such as <xref:System.Text.RegularExpressions.MatchCollection.Count%2A?displayProperty=fullName> and <xref:System.Text.RegularExpressions.MatchCollection.CopyTo%2A?displayProperty=fullName> causes the collection to be populated immediately. To take advantage of lazy evaluation, you should iterate the collection by using a construct such as `foreach` in C# and `For Each`…`Next` in Visual Basic.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.Matches%2A&gt;</ph> method uses lazy evaluation to populate the returned <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.MatchCollection&gt;</ph> object.","pos":[0,173],"source":"The <xref:System.Text.RegularExpressions.Regex.Matches%2A> method uses lazy evaluation to populate the returned <xref:System.Text.RegularExpressions.MatchCollection> object."},{"content":"Accessing members of this collection such as <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.MatchCollection.Count%2A?displayProperty=fullName&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.MatchCollection.CopyTo%2A?displayProperty=fullName&gt;</ph> causes the collection to be populated immediately.","pos":[174,450],"source":" Accessing members of this collection such as <xref:System.Text.RegularExpressions.MatchCollection.Count%2A?displayProperty=fullName> and <xref:System.Text.RegularExpressions.MatchCollection.CopyTo%2A?displayProperty=fullName> causes the collection to be populated immediately."},{"content":"To take advantage of lazy evaluation, you should iterate the collection by using a construct such as <ph id=\"ph1\">`foreach`</ph> in C# and <ph id=\"ph2\">`For Each`</ph>…<ph id=\"ph3\">`Next`</ph>","pos":[451,589],"source":" To take advantage of lazy evaluation, you should iterate the collection by using a construct such as `foreach` in C# and `For Each`…`Next`"},{"content":"in Visual Basic.","pos":[590,606]}]},{"pos":[1850,2450],"content":"Because of its lazy evaluation, calling the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%29> method does not throw a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception. However, the exception is thrown when an operation is performed on the <xref:System.Text.RegularExpressions.MatchCollection> object returned by this method, if the <xref:System.Text.RegularExpressions.Regex.MatchTimeout%2A> property is not <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName> and a matching operation exceeds the time-out interval.","nodes":[{"content":"Because of its lazy evaluation, calling the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%29> method does not throw a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception. However, the exception is thrown when an operation is performed on the <xref:System.Text.RegularExpressions.MatchCollection> object returned by this method, if the <xref:System.Text.RegularExpressions.Regex.MatchTimeout%2A> property is not <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName> and a matching operation exceeds the time-out interval.","pos":[0,600],"nodes":[{"content":"Because of its lazy evaluation, calling the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.Matches%28System.String%29&gt;</ph> method does not throw a <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.RegexMatchTimeoutException&gt;</ph> exception.","pos":[0,214],"source":"Because of its lazy evaluation, calling the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%29> method does not throw a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception."},{"content":"However, the exception is thrown when an operation is performed on the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.MatchCollection&gt;</ph> object returned by this method, if the <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.Regex.MatchTimeout%2A&gt;</ph> property is not <ph id=\"ph3\">&lt;xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName&gt;</ph> and a matching operation exceeds the time-out interval.","pos":[215,600],"source":" However, the exception is thrown when an operation is performed on the <xref:System.Text.RegularExpressions.MatchCollection> object returned by this method, if the <xref:System.Text.RegularExpressions.Regex.MatchTimeout%2A> property is not <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName> and a matching operation exceeds the time-out interval."}]}]}],"pos":[189725,192189],"yaml":true,"extradata":"MT"},{"content":"The string to search for a match.","nodes":[{"pos":[0,33],"content":"The string to search for a match.","nodes":[{"content":"The string to search for a match.","pos":[0,33]}]}],"pos":[193256,193290],"yaml":true},{"content":"A collection of the <xref href=\"System.Text.RegularExpressions.Match\"></xref> objects found by the search. If no matches are found, the method returns an empty collection object.","nodes":[{"pos":[0,178],"content":"A collection of the <xref href=\"System.Text.RegularExpressions.Match\"></xref> objects found by the search. If no matches are found, the method returns an empty collection object.","nodes":[{"content":"A collection of the <ph id=\"ph1\">&lt;xref href=\"System.Text.RegularExpressions.Match\"&gt;&lt;/xref&gt;</ph> objects found by the search.","pos":[0,106],"source":"A collection of the <xref href=\"System.Text.RegularExpressions.Match\"></xref> objects found by the search."},{"content":"If no matches are found, the method returns an empty collection object.","pos":[107,178]}]}],"pos":[193380,193559],"yaml":true},{"content":"<code>input</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;input&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>input</code> is `null`."}],"pos":[193733,193763],"yaml":true},{"content":"Searches the specified input string for all occurrences of a regular expression, beginning at the specified starting position in the string.","nodes":[{"pos":[0,140],"content":"Searches the specified input string for all occurrences of a regular expression, beginning at the specified starting position in the string.","nodes":[{"content":"Searches the specified input string for all occurrences of a regular expression, beginning at the specified starting position in the string.","pos":[0,140]}]}],"pos":[195340,195481],"yaml":true},{"content":"The  <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.Int32%29> method is similar to the  <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.Int32%29> method, except that it returns information about all the matches found in the input string, instead of a single match. It is equivalent to the following code:  \n  \n [!code-csharp[System.Text.RegularExpressions.Regex.Matches#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/cs/matchespattern.cs#6)]\n [!code-vb[System.Text.RegularExpressions.Regex.Matches#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/vb/matchespattern.vb#6)]  \n  \n The regular expression pattern for which the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.Int32%29> method searches is defined by the call to one of the <xref:System.Text.RegularExpressions.Regex> class constructors. For more information about the elements that can form a regular expression pattern, see [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).  \n  \n The <xref:System.Text.RegularExpressions.Regex.Matches%2A> method uses lazy evaluation to populate the returned <xref:System.Text.RegularExpressions.MatchCollection> object. Accessing members of this collection such as <xref:System.Text.RegularExpressions.MatchCollection.Count%2A?displayProperty=fullName> and <xref:System.Text.RegularExpressions.MatchCollection.CopyTo%2A?displayProperty=fullName> causes the collection to be populated immediately. To take advantage of lazy evaluation, you should iterate the collection by using a construct such as `foreach` in C# and `For Each`…`Next` in Visual Basic.  \n  \n Because of its lazy evaluation, calling the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.Int32%29> method does not throw a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception. However, the exception is thrown when an operation is performed on the <xref:System.Text.RegularExpressions.MatchCollection> object returned by this method, if the <xref:System.Text.RegularExpressions.Regex.MatchTimeout%2A> property is not <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName> and a matching operation exceeds the time-out interval..","nodes":[{"pos":[0,359],"content":"The  <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.Int32%29> method is similar to the  <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.Int32%29> method, except that it returns information about all the matches found in the input string, instead of a single match. It is equivalent to the following code:","nodes":[{"content":"The  <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.Int32%29> method is similar to the  <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.Int32%29> method, except that it returns information about all the matches found in the input string, instead of a single match. It is equivalent to the following code:","pos":[0,359],"nodes":[{"content":"The  <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.Int32%29&gt;</ph> method is similar to the  <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.Int32%29&gt;</ph> method, except that it returns information about all the matches found in the input string, instead of a single match.","pos":[0,319],"source":"The  <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.Int32%29> method is similar to the  <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.Int32%29> method, except that it returns information about all the matches found in the input string, instead of a single match."},{"content":"It is equivalent to the following code:","pos":[320,359]}]}]},{"pos":[366,729],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Text.RegularExpressions.Regex.Matches#6<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/cs/matchespattern.cs#6)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Text.RegularExpressions.Regex.Matches#6<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/vb/matchespattern.vb#6)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Text.RegularExpressions.Regex.Matches#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/cs/matchespattern.cs#6)]\n [!code-vb[System.Text.RegularExpressions.Regex.Matches#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/vb/matchespattern.vb#6)]"},{"pos":[736,1195],"content":"The regular expression pattern for which the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.Int32%29> method searches is defined by the call to one of the <xref:System.Text.RegularExpressions.Regex> class constructors. For more information about the elements that can form a regular expression pattern, see [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).","nodes":[{"content":"The regular expression pattern for which the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.Int32%29&gt;</ph> method searches is defined by the call to one of the <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.Regex&gt;</ph> class constructors.","pos":[0,247],"source":"The regular expression pattern for which the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.Int32%29> method searches is defined by the call to one of the <xref:System.Text.RegularExpressions.Regex> class constructors."},{"content":"For more information about the elements that can form a regular expression pattern, see <bpt id=\"p1\">[</bpt>Regular Expression Language - Quick Reference<ept id=\"p1\">](~/docs/standard/base-types/regular-expression-language-quick-reference.md)</ept>.","pos":[248,459],"source":" For more information about the elements that can form a regular expression pattern, see [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md)."}]},{"pos":[1202,1808],"content":"The <xref:System.Text.RegularExpressions.Regex.Matches%2A> method uses lazy evaluation to populate the returned <xref:System.Text.RegularExpressions.MatchCollection> object. Accessing members of this collection such as <xref:System.Text.RegularExpressions.MatchCollection.Count%2A?displayProperty=fullName> and <xref:System.Text.RegularExpressions.MatchCollection.CopyTo%2A?displayProperty=fullName> causes the collection to be populated immediately. To take advantage of lazy evaluation, you should iterate the collection by using a construct such as `foreach` in C# and `For Each`…`Next` in Visual Basic.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.Matches%2A&gt;</ph> method uses lazy evaluation to populate the returned <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.MatchCollection&gt;</ph> object.","pos":[0,173],"source":"The <xref:System.Text.RegularExpressions.Regex.Matches%2A> method uses lazy evaluation to populate the returned <xref:System.Text.RegularExpressions.MatchCollection> object."},{"content":"Accessing members of this collection such as <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.MatchCollection.Count%2A?displayProperty=fullName&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.MatchCollection.CopyTo%2A?displayProperty=fullName&gt;</ph> causes the collection to be populated immediately.","pos":[174,450],"source":" Accessing members of this collection such as <xref:System.Text.RegularExpressions.MatchCollection.Count%2A?displayProperty=fullName> and <xref:System.Text.RegularExpressions.MatchCollection.CopyTo%2A?displayProperty=fullName> causes the collection to be populated immediately."},{"content":"To take advantage of lazy evaluation, you should iterate the collection by using a construct such as <ph id=\"ph1\">`foreach`</ph> in C# and <ph id=\"ph2\">`For Each`</ph>…<ph id=\"ph3\">`Next`</ph>","pos":[451,589],"source":" To take advantage of lazy evaluation, you should iterate the collection by using a construct such as `foreach` in C# and `For Each`…`Next`"},{"content":"in Visual Basic.","pos":[590,606]}]},{"pos":[1815,2431],"content":"Because of its lazy evaluation, calling the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.Int32%29> method does not throw a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception. However, the exception is thrown when an operation is performed on the <xref:System.Text.RegularExpressions.MatchCollection> object returned by this method, if the <xref:System.Text.RegularExpressions.Regex.MatchTimeout%2A> property is not <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName> and a matching operation exceeds the time-out interval..","nodes":[{"content":"Because of its lazy evaluation, calling the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.Int32%29> method does not throw a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception. However, the exception is thrown when an operation is performed on the <xref:System.Text.RegularExpressions.MatchCollection> object returned by this method, if the <xref:System.Text.RegularExpressions.Regex.MatchTimeout%2A> property is not <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName> and a matching operation exceeds the time-out interval..","pos":[0,616],"nodes":[{"content":"Because of its lazy evaluation, calling the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.Int32%29&gt;</ph> method does not throw a <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.RegexMatchTimeoutException&gt;</ph> exception.","pos":[0,229],"source":"Because of its lazy evaluation, calling the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.Int32%29> method does not throw a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception."},{"content":"However, the exception is thrown when an operation is performed on the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.MatchCollection&gt;</ph> object returned by this method, if the <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.Regex.MatchTimeout%2A&gt;</ph> property is not <ph id=\"ph3\">&lt;xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName&gt;</ph> and a matching operation exceeds the time-out interval..","pos":[230,616],"source":" However, the exception is thrown when an operation is performed on the <xref:System.Text.RegularExpressions.MatchCollection> object returned by this method, if the <xref:System.Text.RegularExpressions.Regex.MatchTimeout%2A> property is not <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName> and a matching operation exceeds the time-out interval.."}]}]}],"pos":[195492,197935],"yaml":true,"extradata":"MT"},{"content":"The string to search for a match.","nodes":[{"pos":[0,33],"content":"The string to search for a match.","nodes":[{"content":"The string to search for a match.","pos":[0,33]}]}],"pos":[199180,199214],"yaml":true},{"content":"The character position in the input string at which to start the search.","nodes":[{"pos":[0,72],"content":"The character position in the input string at which to start the search.","nodes":[{"content":"The character position in the input string at which to start the search.","pos":[0,72]}]}],"pos":[199276,199349],"yaml":true},{"content":"A collection of the <xref href=\"System.Text.RegularExpressions.Match\"></xref> objects found by the search. If no matches are found, the method returns an empty collection object.","nodes":[{"pos":[0,178],"content":"A collection of the <xref href=\"System.Text.RegularExpressions.Match\"></xref> objects found by the search. If no matches are found, the method returns an empty collection object.","nodes":[{"content":"A collection of the <ph id=\"ph1\">&lt;xref href=\"System.Text.RegularExpressions.Match\"&gt;&lt;/xref&gt;</ph> objects found by the search.","pos":[0,106],"source":"A collection of the <xref href=\"System.Text.RegularExpressions.Match\"></xref> objects found by the search."},{"content":"If no matches are found, the method returns an empty collection object.","pos":[107,178]}]}],"pos":[199439,199618],"yaml":true},{"content":"<code>input</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;input&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>input</code> is `null`."}],"pos":[199792,199822],"yaml":true},{"content":"<code>startat</code> is less than zero or greater than the length of <code>input</code>.","nodes":[{"pos":[0,88],"content":"<ph id=\"ph1\">&lt;code&gt;startat&lt;/code&gt;</ph> is less than zero or greater than the length of <ph id=\"ph2\">&lt;code&gt;input&lt;/code&gt;</ph>.","source":"<code>startat</code> is less than zero or greater than the length of <code>input</code>."}],"pos":[199936,200025],"yaml":true},{"content":"Searches the specified input string for all occurrences of a specified regular expression.","nodes":[{"pos":[0,90],"content":"Searches the specified input string for all occurrences of a specified regular expression.","nodes":[{"content":"Searches the specified input string for all occurrences of a specified regular expression.","pos":[0,90]}]}],"pos":[201608,201699],"yaml":true},{"content":"The <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%29> method is similar to the <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%29> method, except that it returns information about all the matches found in the input string, instead of a single match. It is equivalent to the following code:  \n  \n [!code-csharp[System.Text.RegularExpressions.Regex.Matches#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/cs/matchespattern.cs#7)]\n [!code-vb[System.Text.RegularExpressions.Regex.Matches#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/vb/matchespattern.vb#7)]  \n  \n The static `Matches` methods are equivalent to constructing a <xref:System.Text.RegularExpressions.Regex> object with the specified regular expression pattern and calling the instance method `Matches`.  \n  \n The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match. For more information about regular expressions, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).  \n  \n The <xref:System.Text.RegularExpressions.Regex.Matches%2A> method uses lazy evaluation to populate the returned <xref:System.Text.RegularExpressions.MatchCollection> object. Accessing members of this collection such as <xref:System.Text.RegularExpressions.MatchCollection.Count%2A?displayProperty=fullName> and <xref:System.Text.RegularExpressions.MatchCollection.CopyTo%2A?displayProperty=fullName> causes the collection to be populated immediately. To take advantage of lazy evaluation, you should iterate the collection by using a construct such as `foreach` in C# and `For Each`…`Next` in Visual Basic.  \n  \n Because of its lazy evaluation, calling the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%29> method does not throw a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception. However, the exception is thrown when an operation is performed on the <xref:System.Text.RegularExpressions.MatchCollection> object returned by this method, if a time-out interval is defined by the \"REGEX_DEFAULT_MATCH_TIMEOUT\" property of the current application domain and a matching operation exceeds this time-out interval.","nodes":[{"pos":[0,359],"content":"The <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%29> method is similar to the <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%29> method, except that it returns information about all the matches found in the input string, instead of a single match. It is equivalent to the following code:","nodes":[{"content":"The <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%29> method is similar to the <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%29> method, except that it returns information about all the matches found in the input string, instead of a single match. It is equivalent to the following code:","pos":[0,359],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%29&gt;</ph> method is similar to the <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%29&gt;</ph> method, except that it returns information about all the matches found in the input string, instead of a single match.","pos":[0,319],"source":"The <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%29> method is similar to the <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%29> method, except that it returns information about all the matches found in the input string, instead of a single match."},{"content":"It is equivalent to the following code:","pos":[320,359]}]}]},{"pos":[366,729],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Text.RegularExpressions.Regex.Matches#7<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/cs/matchespattern.cs#7)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Text.RegularExpressions.Regex.Matches#7<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/vb/matchespattern.vb#7)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Text.RegularExpressions.Regex.Matches#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/cs/matchespattern.cs#7)]\n [!code-vb[System.Text.RegularExpressions.Regex.Matches#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/vb/matchespattern.vb#7)]"},{"pos":[736,937],"content":"The static <ph id=\"ph1\">`Matches`</ph> methods are equivalent to constructing a <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.Regex&gt;</ph> object with the specified regular expression pattern and calling the instance method <ph id=\"ph3\">`Matches`</ph>.","source":"The static `Matches` methods are equivalent to constructing a <xref:System.Text.RegularExpressions.Regex> object with the specified regular expression pattern and calling the instance method `Matches`."},{"pos":[944,1332],"content":"The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match. For more information about regular expressions, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).","nodes":[{"content":"The <ph id=\"ph1\">`pattern`</ph> parameter consists of regular expression language elements that symbolically describe the string to match.","pos":[0,120],"source":"The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match."},{"content":"For more information about regular expressions, see <bpt id=\"p1\">[</bpt>.NET Framework Regular Expressions<ept id=\"p1\">](~/docs/standard/base-types/regular-expressions.md)</ept> and <bpt id=\"p2\">[</bpt>Regular Expression Language - Quick Reference<ept id=\"p2\">](~/docs/standard/base-types/regular-expression-language-quick-reference.md)</ept>.","pos":[121,388],"source":" For more information about regular expressions, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md)."}]},{"pos":[1339,1945],"content":"The <xref:System.Text.RegularExpressions.Regex.Matches%2A> method uses lazy evaluation to populate the returned <xref:System.Text.RegularExpressions.MatchCollection> object. Accessing members of this collection such as <xref:System.Text.RegularExpressions.MatchCollection.Count%2A?displayProperty=fullName> and <xref:System.Text.RegularExpressions.MatchCollection.CopyTo%2A?displayProperty=fullName> causes the collection to be populated immediately. To take advantage of lazy evaluation, you should iterate the collection by using a construct such as `foreach` in C# and `For Each`…`Next` in Visual Basic.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.Matches%2A&gt;</ph> method uses lazy evaluation to populate the returned <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.MatchCollection&gt;</ph> object.","pos":[0,173],"source":"The <xref:System.Text.RegularExpressions.Regex.Matches%2A> method uses lazy evaluation to populate the returned <xref:System.Text.RegularExpressions.MatchCollection> object."},{"content":"Accessing members of this collection such as <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.MatchCollection.Count%2A?displayProperty=fullName&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.MatchCollection.CopyTo%2A?displayProperty=fullName&gt;</ph> causes the collection to be populated immediately.","pos":[174,450],"source":" Accessing members of this collection such as <xref:System.Text.RegularExpressions.MatchCollection.Count%2A?displayProperty=fullName> and <xref:System.Text.RegularExpressions.MatchCollection.CopyTo%2A?displayProperty=fullName> causes the collection to be populated immediately."},{"content":"To take advantage of lazy evaluation, you should iterate the collection by using a construct such as <ph id=\"ph1\">`foreach`</ph> in C# and <ph id=\"ph2\">`For Each`</ph>…<ph id=\"ph3\">`Next`</ph>","pos":[451,589],"source":" To take advantage of lazy evaluation, you should iterate the collection by using a construct such as `foreach` in C# and `For Each`…`Next`"},{"content":"in Visual Basic.","pos":[590,606]}]},{"pos":[1952,2510],"content":"Because of its lazy evaluation, calling the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%29> method does not throw a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception. However, the exception is thrown when an operation is performed on the <xref:System.Text.RegularExpressions.MatchCollection> object returned by this method, if a time-out interval is defined by the \"REGEX_DEFAULT_MATCH_TIMEOUT\" property of the current application domain and a matching operation exceeds this time-out interval.","nodes":[{"content":"Because of its lazy evaluation, calling the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%29> method does not throw a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception. However, the exception is thrown when an operation is performed on the <xref:System.Text.RegularExpressions.MatchCollection> object returned by this method, if a time-out interval is defined by the \"REGEX_DEFAULT_MATCH_TIMEOUT\" property of the current application domain and a matching operation exceeds this time-out interval.","pos":[0,558],"nodes":[{"content":"Because of its lazy evaluation, calling the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%29&gt;</ph> method does not throw a <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.RegexMatchTimeoutException&gt;</ph> exception.","pos":[0,230],"source":"Because of its lazy evaluation, calling the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%29> method does not throw a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception."},{"content":"However, the exception is thrown when an operation is performed on the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.MatchCollection&gt;</ph> object returned by this method, if a time-out interval is defined by the \"REGEX_DEFAULT_MATCH_TIMEOUT\" property of the current application domain and a matching operation exceeds this time-out interval.","pos":[231,558],"source":" However, the exception is thrown when an operation is performed on the <xref:System.Text.RegularExpressions.MatchCollection> object returned by this method, if a time-out interval is defined by the \"REGEX_DEFAULT_MATCH_TIMEOUT\" property of the current application domain and a matching operation exceeds this time-out interval."}]}]}],"pos":[201710,204236],"yaml":true,"extradata":"MT"},{"content":"The string to search for a match.","nodes":[{"pos":[0,33],"content":"The string to search for a match.","nodes":[{"content":"The string to search for a match.","pos":[0,33]}]}],"pos":[205342,205376],"yaml":true},{"content":"The regular expression pattern to match.","nodes":[{"pos":[0,40],"content":"The regular expression pattern to match.","nodes":[{"content":"The regular expression pattern to match.","pos":[0,40]}]}],"pos":[205439,205480],"yaml":true},{"content":"A collection of the <xref href=\"System.Text.RegularExpressions.Match\"></xref> objects found by the search. If no matches are found, the method returns an empty collection object.","nodes":[{"pos":[0,178],"content":"A collection of the <xref href=\"System.Text.RegularExpressions.Match\"></xref> objects found by the search. If no matches are found, the method returns an empty collection object.","nodes":[{"content":"A collection of the <ph id=\"ph1\">&lt;xref href=\"System.Text.RegularExpressions.Match\"&gt;&lt;/xref&gt;</ph> objects found by the search.","pos":[0,106],"source":"A collection of the <xref href=\"System.Text.RegularExpressions.Match\"></xref> objects found by the search."},{"content":"If no matches are found, the method returns an empty collection object.","pos":[107,178]}]}],"pos":[205570,205749],"yaml":true},{"content":"A regular expression parsing error occurred.","nodes":[{"pos":[0,44],"content":"A regular expression parsing error occurred.","nodes":[{"content":"A regular expression parsing error occurred.","pos":[0,44]}]}],"pos":[205915,205960],"yaml":true},{"content":"<code>input</code> or <code>pattern</code> is `null`.","nodes":[{"pos":[0,53],"content":"<ph id=\"ph1\">&lt;code&gt;input&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;pattern&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>input</code> or <code>pattern</code> is `null`."}],"pos":[206062,206116],"yaml":true},{"content":"Searches the specified input string for all occurrences of a specified regular expression, using the specified matching options.","nodes":[{"pos":[0,128],"content":"Searches the specified input string for all occurrences of a specified regular expression, using the specified matching options.","nodes":[{"content":"Searches the specified input string for all occurrences of a specified regular expression, using the specified matching options.","pos":[0,128]}]}],"pos":[207873,208002],"yaml":true},{"content":"The <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29> method is similar to the <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29> method, except that it returns information about all the matches found in the input string, instead of a single match. It is equivalent to the following code:  \n  \n [!code-csharp[System.Text.RegularExpressions.Regex.Matches#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/cs/matchespattern.cs#8)]\n [!code-vb[System.Text.RegularExpressions.Regex.Matches#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/vb/matchespattern.vb#8)]  \n  \n The static `Matches` methods are equivalent to constructing a <xref:System.Text.RegularExpressions.Regex> object with the specified regular expression pattern and calling the instance method `Matches`.  \n  \n The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match. For more information about regular expressions, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).  \n  \n The <xref:System.Text.RegularExpressions.Regex.Matches%2A> method uses lazy evaluation to populate the returned <xref:System.Text.RegularExpressions.MatchCollection> object. Accessing members of this collection such as <xref:System.Text.RegularExpressions.MatchCollection.Count%2A?displayProperty=fullName> and <xref:System.Text.RegularExpressions.MatchCollection.CopyTo%2A?displayProperty=fullName> causes the collection to be populated immediately. To take advantage of lazy evaluation, you should iterate the collection by using a construct such as `foreach` in C# and `For Each`…`Next` in Visual Basic.  \n  \n Because of its lazy evaluation, calling the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%29> method does not throw a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception. However, the exception is thrown when an operation is performed on the <xref:System.Text.RegularExpressions.MatchCollection> object returned by this method, if a time-out interval is defined by the \"REGEX_DEFAULT_MATCH_TIMEOUT\" property of the current application domain and a matching operation exceeds this time-out interval.","nodes":[{"pos":[0,451],"content":"The <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29> method is similar to the <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29> method, except that it returns information about all the matches found in the input string, instead of a single match. It is equivalent to the following code:","nodes":[{"content":"The <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29> method is similar to the <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29> method, except that it returns information about all the matches found in the input string, instead of a single match. It is equivalent to the following code:","pos":[0,451],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29&gt;</ph> method is similar to the <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29&gt;</ph> method, except that it returns information about all the matches found in the input string, instead of a single match.","pos":[0,411],"source":"The <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29> method is similar to the <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29> method, except that it returns information about all the matches found in the input string, instead of a single match."},{"content":"It is equivalent to the following code:","pos":[412,451]}]}]},{"pos":[458,821],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Text.RegularExpressions.Regex.Matches#8<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/cs/matchespattern.cs#8)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Text.RegularExpressions.Regex.Matches#8<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/vb/matchespattern.vb#8)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Text.RegularExpressions.Regex.Matches#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/cs/matchespattern.cs#8)]\n [!code-vb[System.Text.RegularExpressions.Regex.Matches#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/vb/matchespattern.vb#8)]"},{"pos":[828,1029],"content":"The static <ph id=\"ph1\">`Matches`</ph> methods are equivalent to constructing a <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.Regex&gt;</ph> object with the specified regular expression pattern and calling the instance method <ph id=\"ph3\">`Matches`</ph>.","source":"The static `Matches` methods are equivalent to constructing a <xref:System.Text.RegularExpressions.Regex> object with the specified regular expression pattern and calling the instance method `Matches`."},{"pos":[1036,1424],"content":"The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match. For more information about regular expressions, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).","nodes":[{"content":"The <ph id=\"ph1\">`pattern`</ph> parameter consists of regular expression language elements that symbolically describe the string to match.","pos":[0,120],"source":"The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match."},{"content":"For more information about regular expressions, see <bpt id=\"p1\">[</bpt>.NET Framework Regular Expressions<ept id=\"p1\">](~/docs/standard/base-types/regular-expressions.md)</ept> and <bpt id=\"p2\">[</bpt>Regular Expression Language - Quick Reference<ept id=\"p2\">](~/docs/standard/base-types/regular-expression-language-quick-reference.md)</ept>.","pos":[121,388],"source":" For more information about regular expressions, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md)."}]},{"pos":[1431,2037],"content":"The <xref:System.Text.RegularExpressions.Regex.Matches%2A> method uses lazy evaluation to populate the returned <xref:System.Text.RegularExpressions.MatchCollection> object. Accessing members of this collection such as <xref:System.Text.RegularExpressions.MatchCollection.Count%2A?displayProperty=fullName> and <xref:System.Text.RegularExpressions.MatchCollection.CopyTo%2A?displayProperty=fullName> causes the collection to be populated immediately. To take advantage of lazy evaluation, you should iterate the collection by using a construct such as `foreach` in C# and `For Each`…`Next` in Visual Basic.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.Matches%2A&gt;</ph> method uses lazy evaluation to populate the returned <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.MatchCollection&gt;</ph> object.","pos":[0,173],"source":"The <xref:System.Text.RegularExpressions.Regex.Matches%2A> method uses lazy evaluation to populate the returned <xref:System.Text.RegularExpressions.MatchCollection> object."},{"content":"Accessing members of this collection such as <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.MatchCollection.Count%2A?displayProperty=fullName&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.MatchCollection.CopyTo%2A?displayProperty=fullName&gt;</ph> causes the collection to be populated immediately.","pos":[174,450],"source":" Accessing members of this collection such as <xref:System.Text.RegularExpressions.MatchCollection.Count%2A?displayProperty=fullName> and <xref:System.Text.RegularExpressions.MatchCollection.CopyTo%2A?displayProperty=fullName> causes the collection to be populated immediately."},{"content":"To take advantage of lazy evaluation, you should iterate the collection by using a construct such as <ph id=\"ph1\">`foreach`</ph> in C# and <ph id=\"ph2\">`For Each`</ph>…<ph id=\"ph3\">`Next`</ph>","pos":[451,589],"source":" To take advantage of lazy evaluation, you should iterate the collection by using a construct such as `foreach` in C# and `For Each`…`Next`"},{"content":"in Visual Basic.","pos":[590,606]}]},{"pos":[2044,2602],"content":"Because of its lazy evaluation, calling the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%29> method does not throw a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception. However, the exception is thrown when an operation is performed on the <xref:System.Text.RegularExpressions.MatchCollection> object returned by this method, if a time-out interval is defined by the \"REGEX_DEFAULT_MATCH_TIMEOUT\" property of the current application domain and a matching operation exceeds this time-out interval.","nodes":[{"content":"Because of its lazy evaluation, calling the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%29> method does not throw a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception. However, the exception is thrown when an operation is performed on the <xref:System.Text.RegularExpressions.MatchCollection> object returned by this method, if a time-out interval is defined by the \"REGEX_DEFAULT_MATCH_TIMEOUT\" property of the current application domain and a matching operation exceeds this time-out interval.","pos":[0,558],"nodes":[{"content":"Because of its lazy evaluation, calling the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%29&gt;</ph> method does not throw a <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.RegexMatchTimeoutException&gt;</ph> exception.","pos":[0,230],"source":"Because of its lazy evaluation, calling the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%29> method does not throw a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception."},{"content":"However, the exception is thrown when an operation is performed on the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.MatchCollection&gt;</ph> object returned by this method, if a time-out interval is defined by the \"REGEX_DEFAULT_MATCH_TIMEOUT\" property of the current application domain and a matching operation exceeds this time-out interval.","pos":[231,558],"source":" However, the exception is thrown when an operation is performed on the <xref:System.Text.RegularExpressions.MatchCollection> object returned by this method, if a time-out interval is defined by the \"REGEX_DEFAULT_MATCH_TIMEOUT\" property of the current application domain and a matching operation exceeds this time-out interval."}]}]}],"pos":[208013,210631],"yaml":true,"extradata":"MT"},{"content":"The string to search for a match.","nodes":[{"pos":[0,33],"content":"The string to search for a match.","nodes":[{"content":"The string to search for a match.","pos":[0,33]}]}],"pos":[212092,212126],"yaml":true},{"content":"The regular expression pattern to match.","nodes":[{"pos":[0,40],"content":"The regular expression pattern to match.","nodes":[{"content":"The regular expression pattern to match.","pos":[0,40]}]}],"pos":[212189,212230],"yaml":true},{"content":"A bitwise combination of the enumeration values that specify options for matching.","nodes":[{"pos":[0,82],"content":"A bitwise combination of the enumeration values that specify options for matching.","nodes":[{"content":"A bitwise combination of the enumeration values that specify options for matching.","pos":[0,82]}]}],"pos":[212323,212406],"yaml":true},{"content":"A collection of the <xref href=\"System.Text.RegularExpressions.Match\"></xref> objects found by the search. If no matches are found, the method returns an empty collection object.","nodes":[{"pos":[0,178],"content":"A collection of the <xref href=\"System.Text.RegularExpressions.Match\"></xref> objects found by the search. If no matches are found, the method returns an empty collection object.","nodes":[{"content":"A collection of the <ph id=\"ph1\">&lt;xref href=\"System.Text.RegularExpressions.Match\"&gt;&lt;/xref&gt;</ph> objects found by the search.","pos":[0,106],"source":"A collection of the <xref href=\"System.Text.RegularExpressions.Match\"></xref> objects found by the search."},{"content":"If no matches are found, the method returns an empty collection object.","pos":[107,178]}]}],"pos":[212496,212675],"yaml":true},{"content":"A regular expression parsing error occurred.","nodes":[{"pos":[0,44],"content":"A regular expression parsing error occurred.","nodes":[{"content":"A regular expression parsing error occurred.","pos":[0,44]}]}],"pos":[212841,212886],"yaml":true},{"content":"<code>input</code> or <code>pattern</code> is `null`.","nodes":[{"pos":[0,53],"content":"<ph id=\"ph1\">&lt;code&gt;input&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;pattern&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>input</code> or <code>pattern</code> is `null`."}],"pos":[212988,213042],"yaml":true},{"content":"<code>options</code> is not a valid bitwise combination of <xref href=\"System.Text.RegularExpressions.RegexOptions\"></xref> values.","nodes":[{"pos":[0,131],"content":"<ph id=\"ph1\">&lt;code&gt;options&lt;/code&gt;</ph> is not a valid bitwise combination of <ph id=\"ph2\">&lt;xref href=\"System.Text.RegularExpressions.RegexOptions\"&gt;&lt;/xref&gt;</ph> values.","source":"<code>options</code> is not a valid bitwise combination of <xref href=\"System.Text.RegularExpressions.RegexOptions\"></xref> values."}],"pos":[213156,213288],"yaml":true},{"content":"Searches the specified input string for all occurrences of a specified regular expression, using the specified matching options and time-out interval.","nodes":[{"pos":[0,150],"content":"Searches the specified input string for all occurrences of a specified regular expression, using the specified matching options and time-out interval.","nodes":[{"content":"Searches the specified input string for all occurrences of a specified regular expression, using the specified matching options and time-out interval.","pos":[0,150]}]}],"pos":[215123,215274],"yaml":true},{"content":"The <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29> method is similar to the <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29> method, except that it returns information about all the matches found in the input string, instead of a single match. It is equivalent to the following code:  \n  \n [!code-csharp[System.Text.RegularExpressions.Regex.Matches#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/cs/matchespattern.cs#10)]\n [!code-vb[System.Text.RegularExpressions.Regex.Matches#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/vb/matchespattern.vb#10)]  \n  \n The static `Matches` methods are equivalent to constructing a <xref:System.Text.RegularExpressions.Regex> object with the specified regular expression pattern and calling the instance method `Matches`.  \n  \n The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match. For more information about regular expressions, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).  \n  \n The <xref:System.Text.RegularExpressions.Regex.Matches%2A> method uses lazy evaluation to populate the returned <xref:System.Text.RegularExpressions.MatchCollection> object. Accessing members of this collection such as <xref:System.Text.RegularExpressions.MatchCollection.Count%2A?displayProperty=fullName> and <xref:System.Text.RegularExpressions.MatchCollection.CopyTo%2A?displayProperty=fullName> causes the collection to be populated immediately. To take advantage of lazy evaluation, you should iterate the collection by using a construct such as `foreach` in C# and `For Each`…`Next` in Visual Basic.  \n  \n Because of its lazy evaluation, calling the <xref:System.Text.RegularExpressions.Regex.Matches%2A> method does not throw a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception. However, an exception is thrown when an operation is performed on the <xref:System.Text.RegularExpressions.MatchCollection> object returned by this method, if a matching operation exceeds this time-out interval specified by the`matchTimeout` parameter.","nodes":[{"pos":[0,487],"content":"The <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29> method is similar to the <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29> method, except that it returns information about all the matches found in the input string, instead of a single match. It is equivalent to the following code:","nodes":[{"content":"The <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29> method is similar to the <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29> method, except that it returns information about all the matches found in the input string, instead of a single match. It is equivalent to the following code:","pos":[0,487],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29&gt;</ph> method is similar to the <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29&gt;</ph> method, except that it returns information about all the matches found in the input string, instead of a single match.","pos":[0,447],"source":"The <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29> method is similar to the <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29> method, except that it returns information about all the matches found in the input string, instead of a single match."},{"content":"It is equivalent to the following code:","pos":[448,487]}]}]},{"pos":[494,861],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Text.RegularExpressions.Regex.Matches#10<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/cs/matchespattern.cs#10)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Text.RegularExpressions.Regex.Matches#10<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/vb/matchespattern.vb#10)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Text.RegularExpressions.Regex.Matches#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/cs/matchespattern.cs#10)]\n [!code-vb[System.Text.RegularExpressions.Regex.Matches#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/vb/matchespattern.vb#10)]"},{"pos":[868,1069],"content":"The static <ph id=\"ph1\">`Matches`</ph> methods are equivalent to constructing a <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.Regex&gt;</ph> object with the specified regular expression pattern and calling the instance method <ph id=\"ph3\">`Matches`</ph>.","source":"The static `Matches` methods are equivalent to constructing a <xref:System.Text.RegularExpressions.Regex> object with the specified regular expression pattern and calling the instance method `Matches`."},{"pos":[1076,1464],"content":"The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match. For more information about regular expressions, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).","nodes":[{"content":"The <ph id=\"ph1\">`pattern`</ph> parameter consists of regular expression language elements that symbolically describe the string to match.","pos":[0,120],"source":"The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match."},{"content":"For more information about regular expressions, see <bpt id=\"p1\">[</bpt>.NET Framework Regular Expressions<ept id=\"p1\">](~/docs/standard/base-types/regular-expressions.md)</ept> and <bpt id=\"p2\">[</bpt>Regular Expression Language - Quick Reference<ept id=\"p2\">](~/docs/standard/base-types/regular-expression-language-quick-reference.md)</ept>.","pos":[121,388],"source":" For more information about regular expressions, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md)."}]},{"pos":[1471,2077],"content":"The <xref:System.Text.RegularExpressions.Regex.Matches%2A> method uses lazy evaluation to populate the returned <xref:System.Text.RegularExpressions.MatchCollection> object. Accessing members of this collection such as <xref:System.Text.RegularExpressions.MatchCollection.Count%2A?displayProperty=fullName> and <xref:System.Text.RegularExpressions.MatchCollection.CopyTo%2A?displayProperty=fullName> causes the collection to be populated immediately. To take advantage of lazy evaluation, you should iterate the collection by using a construct such as `foreach` in C# and `For Each`…`Next` in Visual Basic.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.Matches%2A&gt;</ph> method uses lazy evaluation to populate the returned <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.MatchCollection&gt;</ph> object.","pos":[0,173],"source":"The <xref:System.Text.RegularExpressions.Regex.Matches%2A> method uses lazy evaluation to populate the returned <xref:System.Text.RegularExpressions.MatchCollection> object."},{"content":"Accessing members of this collection such as <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.MatchCollection.Count%2A?displayProperty=fullName&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.MatchCollection.CopyTo%2A?displayProperty=fullName&gt;</ph> causes the collection to be populated immediately.","pos":[174,450],"source":" Accessing members of this collection such as <xref:System.Text.RegularExpressions.MatchCollection.Count%2A?displayProperty=fullName> and <xref:System.Text.RegularExpressions.MatchCollection.CopyTo%2A?displayProperty=fullName> causes the collection to be populated immediately."},{"content":"To take advantage of lazy evaluation, you should iterate the collection by using a construct such as <ph id=\"ph1\">`foreach`</ph> in C# and <ph id=\"ph2\">`For Each`</ph>…<ph id=\"ph3\">`Next`</ph>","pos":[451,589],"source":" To take advantage of lazy evaluation, you should iterate the collection by using a construct such as `foreach` in C# and `For Each`…`Next`"},{"content":"in Visual Basic.","pos":[590,606]}]},{"pos":[2084,2535],"content":"Because of its lazy evaluation, calling the <xref:System.Text.RegularExpressions.Regex.Matches%2A> method does not throw a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception. However, an exception is thrown when an operation is performed on the <xref:System.Text.RegularExpressions.MatchCollection> object returned by this method, if a matching operation exceeds this time-out interval specified by the`matchTimeout` parameter.","nodes":[{"content":"Because of its lazy evaluation, calling the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.Matches%2A&gt;</ph> method does not throw a <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.RegexMatchTimeoutException&gt;</ph> exception.","pos":[0,198],"source":"Because of its lazy evaluation, calling the <xref:System.Text.RegularExpressions.Regex.Matches%2A> method does not throw a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception."},{"content":"However, an exception is thrown when an operation is performed on the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.MatchCollection&gt;</ph> object returned by this method, if a matching operation exceeds this time-out interval specified by the<ph id=\"ph2\">`matchTimeout`</ph> parameter.","pos":[199,451],"source":" However, an exception is thrown when an operation is performed on the <xref:System.Text.RegularExpressions.MatchCollection> object returned by this method, if a matching operation exceeds this time-out interval specified by the`matchTimeout` parameter."}]}],"pos":[215285,217834],"yaml":true,"extradata":"MT"},{"content":"The string to search for a match.","nodes":[{"pos":[0,33],"content":"The string to search for a match.","nodes":[{"content":"The string to search for a match.","pos":[0,33]}]}],"pos":[219502,219536],"yaml":true},{"content":"The regular expression pattern to match.","nodes":[{"pos":[0,40],"content":"The regular expression pattern to match.","nodes":[{"content":"The regular expression pattern to match.","pos":[0,40]}]}],"pos":[219599,219640],"yaml":true},{"content":"A bitwise combination of the enumeration values that specify options for matching.","nodes":[{"pos":[0,82],"content":"A bitwise combination of the enumeration values that specify options for matching.","nodes":[{"content":"A bitwise combination of the enumeration values that specify options for matching.","pos":[0,82]}]}],"pos":[219733,219816],"yaml":true},{"content":"A time-out interval, or <xref href=\"System.Text.RegularExpressions.Regex.InfiniteMatchTimeout\"></xref> to indicate that the method should not time out.","nodes":[{"pos":[0,151],"content":"A time-out interval, or <ph id=\"ph1\">&lt;xref href=\"System.Text.RegularExpressions.Regex.InfiniteMatchTimeout\"&gt;&lt;/xref&gt;</ph> to indicate that the method should not time out.","source":"A time-out interval, or <xref href=\"System.Text.RegularExpressions.Regex.InfiniteMatchTimeout\"></xref> to indicate that the method should not time out."}],"pos":[219886,220038],"yaml":true},{"content":"A collection of the <xref href=\"System.Text.RegularExpressions.Match\"></xref> objects found by the search. If no matches are found, the method returns an empty collection object.","nodes":[{"pos":[0,178],"content":"A collection of the <xref href=\"System.Text.RegularExpressions.Match\"></xref> objects found by the search. If no matches are found, the method returns an empty collection object.","nodes":[{"content":"A collection of the <ph id=\"ph1\">&lt;xref href=\"System.Text.RegularExpressions.Match\"&gt;&lt;/xref&gt;</ph> objects found by the search.","pos":[0,106],"source":"A collection of the <xref href=\"System.Text.RegularExpressions.Match\"></xref> objects found by the search."},{"content":"If no matches are found, the method returns an empty collection object.","pos":[107,178]}]}],"pos":[220128,220307],"yaml":true},{"content":"A regular expression parsing error occurred.","nodes":[{"pos":[0,44],"content":"A regular expression parsing error occurred.","nodes":[{"content":"A regular expression parsing error occurred.","pos":[0,44]}]}],"pos":[220473,220518],"yaml":true},{"content":"<code>input</code> or <code>pattern</code> is `null`.","nodes":[{"pos":[0,53],"content":"<ph id=\"ph1\">&lt;code&gt;input&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;pattern&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>input</code> or <code>pattern</code> is `null`."}],"pos":[220620,220674],"yaml":true},{"content":"<code>options</code> is not a valid bitwise combination of <xref href=\"System.Text.RegularExpressions.RegexOptions\"></xref> values.  \n  \n -or-  \n  \n <code>matchTimeout</code> is negative, zero, or greater than approximately 24 days.","nodes":[{"pos":[0,131],"content":"<ph id=\"ph1\">&lt;code&gt;options&lt;/code&gt;</ph> is not a valid bitwise combination of <ph id=\"ph2\">&lt;xref href=\"System.Text.RegularExpressions.RegexOptions\"&gt;&lt;/xref&gt;</ph> values.","source":"<code>options</code> is not a valid bitwise combination of <xref href=\"System.Text.RegularExpressions.RegexOptions\"></xref> values."},{"pos":[138,142],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[149,232],"content":"<ph id=\"ph1\">&lt;code&gt;matchTimeout&lt;/code&gt;</ph> is negative, zero, or greater than approximately 24 days.","source":"<code>matchTimeout</code> is negative, zero, or greater than approximately 24 days."}],"pos":[220788,221029],"yaml":true},{"content":"Gets the time-out interval of the current instance.","nodes":[{"pos":[0,51],"content":"Gets the time-out interval of the current instance.","nodes":[{"content":"Gets the time-out interval of the current instance.","pos":[0,51]}]}],"pos":[222509,222561],"yaml":true},{"content":"The <xref:System.Text.RegularExpressions.Regex.MatchTimeout%2A> property defines the approximate maximum time interval for a <xref:System.Text.RegularExpressions.Regex> instance to execute a single matching operation before the operation times out. The regular expression engine throws a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception during its next timing check after the time-out interval has elapsed. This prevents the regular expression engine from processing input strings that require excessive backtracking. For more information, see [Backtracking](~/docs/standard/base-types/backtracking-in-regular-expressions.md) and [Best Practices for Regular Expressions](~/docs/standard/base-types/best-practices.md).  \n  \n This property is read-only. You can set its value explicitly for an individual <xref:System.Text.RegularExpressions.Regex> object by calling the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=fullName> constructor; and you can set its value for all <xref:System.Text.RegularExpressions.Regex> matching operations in an application domain by calling the <xref:System.AppDomain.SetData%2A?displayProperty=fullName> method and providing a <xref:System.TimeSpan> value for the \"REGEX_DEFAULT_MATCH_TIMEOUT\" property, as the following example illustrates.  \n  \n [!code-csharp[System.Text.RegularExpressions.Regex.MatchTimeout#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matchtimeout/cs/regexmatchtimeout1.cs#1)]\n [!code-vb[System.Text.RegularExpressions.Regex.MatchTimeout#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matchtimeout/vb/regexmatchtimeout1.vb#1)]  \n  \n If you do not explicitly set a time-out interval, the default value <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName> is used, and matching operations do not time out.","nodes":[{"pos":[0,743],"content":"The <xref:System.Text.RegularExpressions.Regex.MatchTimeout%2A> property defines the approximate maximum time interval for a <xref:System.Text.RegularExpressions.Regex> instance to execute a single matching operation before the operation times out. The regular expression engine throws a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception during its next timing check after the time-out interval has elapsed. This prevents the regular expression engine from processing input strings that require excessive backtracking. For more information, see [Backtracking](~/docs/standard/base-types/backtracking-in-regular-expressions.md) and [Best Practices for Regular Expressions](~/docs/standard/base-types/best-practices.md).","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.MatchTimeout%2A&gt;</ph> property defines the approximate maximum time interval for a <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.Regex&gt;</ph> instance to execute a single matching operation before the operation times out.","pos":[0,248],"source":"The <xref:System.Text.RegularExpressions.Regex.MatchTimeout%2A> property defines the approximate maximum time interval for a <xref:System.Text.RegularExpressions.Regex> instance to execute a single matching operation before the operation times out."},{"content":"The regular expression engine throws a <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.RegexMatchTimeoutException&gt;</ph> exception during its next timing check after the time-out interval has elapsed.","pos":[249,432],"source":" The regular expression engine throws a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception during its next timing check after the time-out interval has elapsed."},{"content":"This prevents the regular expression engine from processing input strings that require excessive backtracking.","pos":[433,543]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Backtracking<ept id=\"p1\">](~/docs/standard/base-types/backtracking-in-regular-expressions.md)</ept> and <bpt id=\"p2\">[</bpt>Best Practices for Regular Expressions<ept id=\"p2\">](~/docs/standard/base-types/best-practices.md)</ept>.","pos":[544,743],"source":" For more information, see [Backtracking](~/docs/standard/base-types/backtracking-in-regular-expressions.md) and [Best Practices for Regular Expressions](~/docs/standard/base-types/best-practices.md)."}]},{"pos":[750,1403],"content":"This property is read-only. You can set its value explicitly for an individual <xref:System.Text.RegularExpressions.Regex> object by calling the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=fullName> constructor; and you can set its value for all <xref:System.Text.RegularExpressions.Regex> matching operations in an application domain by calling the <xref:System.AppDomain.SetData%2A?displayProperty=fullName> method and providing a <xref:System.TimeSpan> value for the \"REGEX_DEFAULT_MATCH_TIMEOUT\" property, as the following example illustrates.","nodes":[{"content":"This property is read-only. You can set its value explicitly for an individual <xref:System.Text.RegularExpressions.Regex> object by calling the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=fullName> constructor; and you can set its value for all <xref:System.Text.RegularExpressions.Regex> matching operations in an application domain by calling the <xref:System.AppDomain.SetData%2A?displayProperty=fullName> method and providing a <xref:System.TimeSpan> value for the \"REGEX_DEFAULT_MATCH_TIMEOUT\" property, as the following example illustrates.","pos":[0,653],"nodes":[{"content":"This property is read-only.","pos":[0,27]},{"content":"You can set its value explicitly for an individual <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex&gt;</ph> object by calling the <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=fullName&gt;</ph> constructor; and you can set its value for all <ph id=\"ph3\">&lt;xref:System.Text.RegularExpressions.Regex&gt;</ph> matching operations in an application domain by calling the <ph id=\"ph4\">&lt;xref:System.AppDomain.SetData%2A?displayProperty=fullName&gt;</ph> method and providing a <ph id=\"ph5\">&lt;xref:System.TimeSpan&gt;</ph> value for the \"REGEX_DEFAULT_MATCH_TIMEOUT\" property, as the following example illustrates.","pos":[28,653],"source":" You can set its value explicitly for an individual <xref:System.Text.RegularExpressions.Regex> object by calling the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=fullName> constructor; and you can set its value for all <xref:System.Text.RegularExpressions.Regex> matching operations in an application domain by calling the <xref:System.AppDomain.SetData%2A?displayProperty=fullName> method and providing a <xref:System.TimeSpan> value for the \"REGEX_DEFAULT_MATCH_TIMEOUT\" property, as the following example illustrates."}]}]},{"pos":[1410,1801],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Text.RegularExpressions.Regex.MatchTimeout#1<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matchtimeout/cs/regexmatchtimeout1.cs#1)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Text.RegularExpressions.Regex.MatchTimeout#1<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matchtimeout/vb/regexmatchtimeout1.vb#1)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Text.RegularExpressions.Regex.MatchTimeout#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matchtimeout/cs/regexmatchtimeout1.cs#1)]\n [!code-vb[System.Text.RegularExpressions.Regex.MatchTimeout#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matchtimeout/vb/regexmatchtimeout1.vb#1)]"},{"pos":[1808,2015],"content":"If you do not explicitly set a time-out interval, the default value <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName> is used, and matching operations do not time out.","nodes":[{"content":"If you do not explicitly set a time-out interval, the default value <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName&gt;</ph> is used, and matching operations do not time out.","pos":[0,207],"source":"If you do not explicitly set a time-out interval, the default value <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName> is used, and matching operations do not time out."}]}],"pos":[222572,224599],"yaml":true,"extradata":"MT"},{"content":"The maximum time interval that can elapse in a pattern-matching operation before a <xref href=\"System.Text.RegularExpressions.RegexMatchTimeoutException\"></xref> is thrown, or <xref href=\"System.Text.RegularExpressions.Regex.InfiniteMatchTimeout\"></xref> if time-outs are disabled.","nodes":[{"pos":[0,281],"content":"The maximum time interval that can elapse in a pattern-matching operation before a <ph id=\"ph1\">&lt;xref href=\"System.Text.RegularExpressions.RegexMatchTimeoutException\"&gt;&lt;/xref&gt;</ph> is thrown, or <ph id=\"ph2\">&lt;xref href=\"System.Text.RegularExpressions.Regex.InfiniteMatchTimeout\"&gt;&lt;/xref&gt;</ph> if time-outs are disabled.","source":"The maximum time interval that can elapse in a pattern-matching operation before a <xref href=\"System.Text.RegularExpressions.RegexMatchTimeoutException\"></xref> is thrown, or <xref href=\"System.Text.RegularExpressions.Regex.InfiniteMatchTimeout\"></xref> if time-outs are disabled."}],"pos":[224719,225001],"yaml":true},{"content":"Gets the options that were passed into the <xref href=\"System.Text.RegularExpressions.Regex\"></xref> constructor.","nodes":[{"pos":[0,113],"content":"Gets the options that were passed into the <ph id=\"ph1\">&lt;xref href=\"System.Text.RegularExpressions.Regex\"&gt;&lt;/xref&gt;</ph> constructor.","source":"Gets the options that were passed into the <xref href=\"System.Text.RegularExpressions.Regex\"></xref> constructor."}],"pos":[226531,226645],"yaml":true},{"content":"The value of the <xref:System.Text.RegularExpressions.Regex.Options%2A> property consists of one or more members of the <xref:System.Text.RegularExpressions.RegexOptions> enumeration. If no options were defined in the <xref:System.Text.RegularExpressions.Regex> class constructor, its value is <xref:System.Text.RegularExpressions.RegexOptions?displayProperty=fullName>. The available options are discussed in detail in the [Regular Expression Options](~/docs/standard/base-types/regular-expression-options.md) topic.  \n  \n Note that the <xref:System.Text.RegularExpressions.Regex.Options%2A> property does not reflect inline options defined in the regular expression pattern itself.","nodes":[{"pos":[0,517],"content":"The value of the <xref:System.Text.RegularExpressions.Regex.Options%2A> property consists of one or more members of the <xref:System.Text.RegularExpressions.RegexOptions> enumeration. If no options were defined in the <xref:System.Text.RegularExpressions.Regex> class constructor, its value is <xref:System.Text.RegularExpressions.RegexOptions?displayProperty=fullName>. The available options are discussed in detail in the [Regular Expression Options](~/docs/standard/base-types/regular-expression-options.md) topic.","nodes":[{"content":"The value of the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.Options%2A&gt;</ph> property consists of one or more members of the <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.RegexOptions&gt;</ph> enumeration.","pos":[0,183],"source":"The value of the <xref:System.Text.RegularExpressions.Regex.Options%2A> property consists of one or more members of the <xref:System.Text.RegularExpressions.RegexOptions> enumeration."},{"content":"If no options were defined in the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex&gt;</ph> class constructor, its value is <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.RegexOptions?displayProperty=fullName&gt;</ph>.","pos":[184,370],"source":" If no options were defined in the <xref:System.Text.RegularExpressions.Regex> class constructor, its value is <xref:System.Text.RegularExpressions.RegexOptions?displayProperty=fullName>."},{"content":"The available options are discussed in detail in the <bpt id=\"p1\">[</bpt>Regular Expression Options<ept id=\"p1\">](~/docs/standard/base-types/regular-expression-options.md)</ept> topic.","pos":[371,517],"source":" The available options are discussed in detail in the [Regular Expression Options](~/docs/standard/base-types/regular-expression-options.md) topic."}]},{"pos":[524,683],"content":"Note that the <xref:System.Text.RegularExpressions.Regex.Options%2A> property does not reflect inline options defined in the regular expression pattern itself.","nodes":[{"content":"Note that the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.Options%2A&gt;</ph> property does not reflect inline options defined in the regular expression pattern itself.","pos":[0,159],"source":"Note that the <xref:System.Text.RegularExpressions.Regex.Options%2A> property does not reflect inline options defined in the regular expression pattern itself."}]}],"pos":[226656,227344],"yaml":true,"extradata":"MT"},{"content":"One or more members of the <xref href=\"System.Text.RegularExpressions.RegexOptions\"></xref> enumeration that represent options that were passed to the <xref href=\"System.Text.RegularExpressions.Regex\"></xref> constructor","nodes":[{"pos":[0,220],"content":"One or more members of the <ph id=\"ph1\">&lt;xref href=\"System.Text.RegularExpressions.RegexOptions\"&gt;&lt;/xref&gt;</ph> enumeration that represent options that were passed to the <ph id=\"ph2\">&lt;xref href=\"System.Text.RegularExpressions.Regex\"&gt;&lt;/xref&gt;</ph> constructor","source":"One or more members of the <xref href=\"System.Text.RegularExpressions.RegexOptions\"></xref> enumeration that represent options that were passed to the <xref href=\"System.Text.RegularExpressions.Regex\"></xref> constructor"}],"pos":[227522,227743],"yaml":true},{"content":"Used by a <xref href=\"System.Text.RegularExpressions.Regex\"></xref> object generated by the <xref href=\"System.Text.RegularExpressions.Regex.CompileToAssembly*\"></xref> method.","nodes":[{"pos":[0,176],"content":"Used by a <ph id=\"ph1\">&lt;xref href=\"System.Text.RegularExpressions.Regex\"&gt;&lt;/xref&gt;</ph> object generated by the <ph id=\"ph2\">&lt;xref href=\"System.Text.RegularExpressions.Regex.CompileToAssembly*\"&gt;&lt;/xref&gt;</ph> method.","source":"Used by a <xref href=\"System.Text.RegularExpressions.Regex\"></xref> object generated by the <xref href=\"System.Text.RegularExpressions.Regex.CompileToAssembly*\"></xref> method."}],"pos":[229265,229442],"yaml":true},{"content":"In a specified input string, replaces all substrings that match a specified regular expression with a string returned by a <xref href=\"System.Text.RegularExpressions.MatchEvaluator\"></xref> delegate. Additional parameters specify options that modify the matching operation and a time-out interval if no match is found.","nodes":[{"pos":[0,318],"content":"In a specified input string, replaces all substrings that match a specified regular expression with a string returned by a <xref href=\"System.Text.RegularExpressions.MatchEvaluator\"></xref> delegate. Additional parameters specify options that modify the matching operation and a time-out interval if no match is found.","nodes":[{"content":"In a specified input string, replaces all substrings that match a specified regular expression with a string returned by a <ph id=\"ph1\">&lt;xref href=\"System.Text.RegularExpressions.MatchEvaluator\"&gt;&lt;/xref&gt;</ph> delegate.","pos":[0,199],"source":"In a specified input string, replaces all substrings that match a specified regular expression with a string returned by a <xref href=\"System.Text.RegularExpressions.MatchEvaluator\"></xref> delegate."},{"content":"Additional parameters specify options that modify the matching operation and a time-out interval if no match is found.","pos":[200,318]}]}],"pos":[231389,231708],"yaml":true},{"content":"The <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.MatchEvaluator%2CSystem.Text.RegularExpressions.RegexOptions%29?displayProperty=fullName> method is useful for replacing a regular expression match if any of the following conditions is true:  \n  \n-   If the replacement string cannot readily be specified by a regular expression replacement pattern.  \n  \n-   If the replacement string results from some processing performed on the matched string.  \n  \n-   If the replacement string results from conditional processing.  \n  \n The method is equivalent to calling the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29?displayProperty=fullName> method and passing each <xref:System.Text.RegularExpressions.Match> object in the returned <xref:System.Text.RegularExpressions.MatchCollection> collection to the `evaluator` delegate.  \n  \n The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match. For more information about regular expressions, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).  \n  \n The `evaluator` parameter is the delegate for a custom method that you define and that examines each match. The custom method must have the following signature to match the <xref:System.Text.RegularExpressions.MatchEvaluator> delegate.  \n  \n [!code-csharp[System.Text.RegularExpressions.Regex.Replace#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/syntax1.cs#1)]\n [!code-vb[System.Text.RegularExpressions.Regex.Replace#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/syntax1.vb#1)]  \n  \n Your custom method returns a string that replaces the matched input.  \n  \n If you specify <xref:System.Text.RegularExpressions.RegexOptions.RightToLeft> for the `options` parameter, the search for matches begins at the end of the input string and moves left; otherwise, the search begins at the start of the input string and moves right.  \n  \n The `matchTimeout` parameter specifies how long a pattern matching method should try to find a match before it times out. Setting a time-out interval prevents regular expressions that rely on excessive backtracking from appearing to \"stop responding when they process input that contains near matches. For more information, see [Best Practices for Regular Expressions](~/docs/standard/base-types/best-practices.md) and [Backtracking](~/docs/standard/base-types/backtracking-in-regular-expressions.md). If no match is found in that time interval, the method throws a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception. `matchTimeout` overrides any default time-out value defined for the application domain in which the method executes.  \n  \n Because the method returns `input` unchanged if there is no match, you can use the <xref:System.Object.ReferenceEquals%2A?displayProperty=fullName> method to determine whether the method has made any replacements to the input string.","nodes":[{"pos":[0,311],"content":"The <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.MatchEvaluator%2CSystem.Text.RegularExpressions.RegexOptions%29?displayProperty=fullName> method is useful for replacing a regular expression match if any of the following conditions is true:","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.MatchEvaluator%2CSystem.Text.RegularExpressions.RegexOptions%29?displayProperty=fullName&gt;</ph> method is useful for replacing a regular expression match if any of the following conditions is true:","pos":[0,311],"source":"The <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.MatchEvaluator%2CSystem.Text.RegularExpressions.RegexOptions%29?displayProperty=fullName> method is useful for replacing a regular expression match if any of the following conditions is true:"}]},{"pos":[321,419],"content":"If the replacement string cannot readily be specified by a regular expression replacement pattern.","nodes":[{"content":"If the replacement string cannot readily be specified by a regular expression replacement pattern.","pos":[0,98]}]},{"pos":[429,516],"content":"If the replacement string results from some processing performed on the matched string.","nodes":[{"content":"If the replacement string results from some processing performed on the matched string.","pos":[0,87]}]},{"pos":[526,588],"content":"If the replacement string results from conditional processing.","nodes":[{"content":"If the replacement string results from conditional processing.","pos":[0,62]}]},{"pos":[595,977],"content":"The method is equivalent to calling the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29?displayProperty=fullName&gt;</ph> method and passing each <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.Match&gt;</ph> object in the returned <ph id=\"ph3\">&lt;xref:System.Text.RegularExpressions.MatchCollection&gt;</ph> collection to the <ph id=\"ph4\">`evaluator`</ph> delegate.","source":"The method is equivalent to calling the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29?displayProperty=fullName> method and passing each <xref:System.Text.RegularExpressions.Match> object in the returned <xref:System.Text.RegularExpressions.MatchCollection> collection to the `evaluator` delegate."},{"pos":[984,1372],"content":"The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match. For more information about regular expressions, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).","nodes":[{"content":"The <ph id=\"ph1\">`pattern`</ph> parameter consists of regular expression language elements that symbolically describe the string to match.","pos":[0,120],"source":"The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match."},{"content":"For more information about regular expressions, see <bpt id=\"p1\">[</bpt>.NET Framework Regular Expressions<ept id=\"p1\">](~/docs/standard/base-types/regular-expressions.md)</ept> and <bpt id=\"p2\">[</bpt>Regular Expression Language - Quick Reference<ept id=\"p2\">](~/docs/standard/base-types/regular-expression-language-quick-reference.md)</ept>.","pos":[121,388],"source":" For more information about regular expressions, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md)."}]},{"pos":[1379,1614],"content":"The `evaluator` parameter is the delegate for a custom method that you define and that examines each match. The custom method must have the following signature to match the <xref:System.Text.RegularExpressions.MatchEvaluator> delegate.","nodes":[{"content":"The <ph id=\"ph1\">`evaluator`</ph> parameter is the delegate for a custom method that you define and that examines each match.","pos":[0,107],"source":"The `evaluator` parameter is the delegate for a custom method that you define and that examines each match."},{"content":"The custom method must have the following signature to match the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.MatchEvaluator&gt;</ph> delegate.","pos":[108,235],"source":" The custom method must have the following signature to match the <xref:System.Text.RegularExpressions.MatchEvaluator> delegate."}]},{"pos":[1621,1970],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Text.RegularExpressions.Regex.Replace#1<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/syntax1.cs#1)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Text.RegularExpressions.Regex.Replace#1<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/syntax1.vb#1)</ept><ept id=\"p3\">]</ept>","leadings":[""," "],"source":"[!code-csharp[System.Text.RegularExpressions.Regex.Replace#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/syntax1.cs#1)]\n[!code-vb[System.Text.RegularExpressions.Regex.Replace#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/syntax1.vb#1)]"},{"pos":[1977,2045],"content":"Your custom method returns a string that replaces the matched input.","nodes":[{"content":"Your custom method returns a string that replaces the matched input.","pos":[0,68]}]},{"pos":[2052,2314],"content":"If you specify <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.RegexOptions.RightToLeft&gt;</ph> for the <ph id=\"ph2\">`options`</ph> parameter, the search for matches begins at the end of the input string and moves left; otherwise, the search begins at the start of the input string and moves right.","source":"If you specify <xref:System.Text.RegularExpressions.RegexOptions.RightToLeft> for the `options` parameter, the search for matches begins at the end of the input string and moves left; otherwise, the search begins at the start of the input string and moves right."},{"pos":[2321,3079],"content":"The `matchTimeout` parameter specifies how long a pattern matching method should try to find a match before it times out. Setting a time-out interval prevents regular expressions that rely on excessive backtracking from appearing to \"stop responding when they process input that contains near matches. For more information, see [Best Practices for Regular Expressions](~/docs/standard/base-types/best-practices.md) and [Backtracking](~/docs/standard/base-types/backtracking-in-regular-expressions.md). If no match is found in that time interval, the method throws a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception. `matchTimeout` overrides any default time-out value defined for the application domain in which the method executes.","nodes":[{"content":"The <ph id=\"ph1\">`matchTimeout`</ph> parameter specifies how long a pattern matching method should try to find a match before it times out.","pos":[0,121],"source":"The `matchTimeout` parameter specifies how long a pattern matching method should try to find a match before it times out."},{"content":"Setting a time-out interval prevents regular expressions that rely on excessive backtracking from appearing to \"stop responding when they process input that contains near matches.","pos":[122,301]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Best Practices for Regular Expressions<ept id=\"p1\">](~/docs/standard/base-types/best-practices.md)</ept> and <bpt id=\"p2\">[</bpt>Backtracking<ept id=\"p2\">](~/docs/standard/base-types/backtracking-in-regular-expressions.md)</ept>.","pos":[302,501],"source":" For more information, see [Best Practices for Regular Expressions](~/docs/standard/base-types/best-practices.md) and [Backtracking](~/docs/standard/base-types/backtracking-in-regular-expressions.md)."},{"content":"If no match is found in that time interval, the method throws a <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.RegexMatchTimeoutException&gt;</ph> exception.","pos":[502,641],"source":" If no match is found in that time interval, the method throws a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception."},{"content":"<ph id=\"ph1\">`matchTimeout`</ph> overrides any default time-out value defined for the application domain in which the method executes.","pos":[642,758],"source":"`matchTimeout` overrides any default time-out value defined for the application domain in which the method executes."}]},{"pos":[3086,3319],"content":"Because the method returns <ph id=\"ph1\">`input`</ph> unchanged if there is no match, you can use the <ph id=\"ph2\">&lt;xref:System.Object.ReferenceEquals%2A?displayProperty=fullName&gt;</ph> method to determine whether the method has made any replacements to the input string.","source":"Because the method returns `input` unchanged if there is no match, you can use the <xref:System.Object.ReferenceEquals%2A?displayProperty=fullName> method to determine whether the method has made any replacements to the input string."}],"pos":[231719,235065],"yaml":true,"extradata":"MT"},{"content":"The string to search for a match.","nodes":[{"pos":[0,33],"content":"The string to search for a match.","nodes":[{"content":"The string to search for a match.","pos":[0,33]}]}],"pos":[237217,237251],"yaml":true},{"content":"The regular expression pattern to match.","nodes":[{"pos":[0,40],"content":"The regular expression pattern to match.","nodes":[{"content":"The regular expression pattern to match.","pos":[0,40]}]}],"pos":[237314,237355],"yaml":true},{"content":"A custom method that examines each match and returns either the original matched string or a replacement string.","nodes":[{"pos":[0,112],"content":"A custom method that examines each match and returns either the original matched string or a replacement string.","nodes":[{"content":"A custom method that examines each match and returns either the original matched string or a replacement string.","pos":[0,112]}]}],"pos":[237452,237565],"yaml":true},{"content":"A bitwise combination of enumeration values that provide options for matching.","nodes":[{"pos":[0,78],"content":"A bitwise combination of enumeration values that provide options for matching.","nodes":[{"content":"A bitwise combination of enumeration values that provide options for matching.","pos":[0,78]}]}],"pos":[237658,237737],"yaml":true},{"content":"A time-out interval, or <xref href=\"System.Text.RegularExpressions.Regex.InfiniteMatchTimeout\"></xref> to indicate that the method should not time out.","nodes":[{"pos":[0,151],"content":"A time-out interval, or <ph id=\"ph1\">&lt;xref href=\"System.Text.RegularExpressions.Regex.InfiniteMatchTimeout\"&gt;&lt;/xref&gt;</ph> to indicate that the method should not time out.","source":"A time-out interval, or <xref href=\"System.Text.RegularExpressions.Regex.InfiniteMatchTimeout\"></xref> to indicate that the method should not time out."}],"pos":[237807,237959],"yaml":true},{"content":"A new string that is identical to the input string, except that the replacement string takes the place of each matched string. If <code>pattern</code> is not matched in the current instance, the method returns the current instance unchanged.","nodes":[{"pos":[0,241],"content":"A new string that is identical to the input string, except that the replacement string takes the place of each matched string. If <code>pattern</code> is not matched in the current instance, the method returns the current instance unchanged.","nodes":[{"content":"A new string that is identical to the input string, except that the replacement string takes the place of each matched string.","pos":[0,126]},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">pattern</ph><ept id=\"p1\">&lt;/code&gt;</ept> is not matched in the current instance, the method returns the current instance unchanged.","pos":[127,241],"source":" If <code>pattern</code> is not matched in the current instance, the method returns the current instance unchanged."}]}],"pos":[238016,238258],"yaml":true},{"content":"A regular expression parsing error occurred.","nodes":[{"pos":[0,44],"content":"A regular expression parsing error occurred.","nodes":[{"content":"A regular expression parsing error occurred.","pos":[0,44]}]}],"pos":[238424,238469],"yaml":true},{"content":"<code>input</code>, <code>pattern</code>, or <code>evaluator</code> is `null`.","nodes":[{"pos":[0,78],"content":"<ph id=\"ph1\">&lt;code&gt;input&lt;/code&gt;</ph>, <ph id=\"ph2\">&lt;code&gt;pattern&lt;/code&gt;</ph>, or <ph id=\"ph3\">&lt;code&gt;evaluator&lt;/code&gt;</ph> is <ph id=\"ph4\">`null`</ph>.","source":"<code>input</code>, <code>pattern</code>, or <code>evaluator</code> is `null`."}],"pos":[238571,238650],"yaml":true},{"content":"<code>options</code> is not a valid bitwise combination of <xref href=\"System.Text.RegularExpressions.RegexOptions\"></xref> values.  \n  \n -or-  \n  \n <code>matchTimeout</code> is negative, zero, or greater than approximately 24 days.","nodes":[{"pos":[0,131],"content":"<ph id=\"ph1\">&lt;code&gt;options&lt;/code&gt;</ph> is not a valid bitwise combination of <ph id=\"ph2\">&lt;xref href=\"System.Text.RegularExpressions.RegexOptions\"&gt;&lt;/xref&gt;</ph> values.","source":"<code>options</code> is not a valid bitwise combination of <xref href=\"System.Text.RegularExpressions.RegexOptions\"></xref> values."},{"pos":[138,142],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[149,232],"content":"<ph id=\"ph1\">&lt;code&gt;matchTimeout&lt;/code&gt;</ph> is negative, zero, or greater than approximately 24 days.","source":"<code>matchTimeout</code> is negative, zero, or greater than approximately 24 days."}],"pos":[238764,239005],"yaml":true},{"content":"A time-out occurred. For more information about time-outs, see the Remarks section.","nodes":[{"pos":[0,83],"content":"A time-out occurred. For more information about time-outs, see the Remarks section.","nodes":[{"content":"A time-out occurred. For more information about time-outs, see the Remarks section.","pos":[0,83],"nodes":[{"content":"A time-out occurred.","pos":[0,20]},{"content":"For more information about time-outs, see the Remarks section.","pos":[21,83]}]}]}],"pos":[239165,239249],"yaml":true},{"content":"In a specified input string, replaces all strings that match a specified regular expression with a specified replacement string. Additional parameters specify options that modify the matching operation and a time-out interval if no match is found.","nodes":[{"pos":[0,247],"content":"In a specified input string, replaces all strings that match a specified regular expression with a specified replacement string. Additional parameters specify options that modify the matching operation and a time-out interval if no match is found.","nodes":[{"content":"In a specified input string, replaces all strings that match a specified regular expression with a specified replacement string. Additional parameters specify options that modify the matching operation and a time-out interval if no match is found.","pos":[0,247],"nodes":[{"content":"In a specified input string, replaces all strings that match a specified regular expression with a specified replacement string.","pos":[0,128]},{"content":"Additional parameters specify options that modify the matching operation and a time-out interval if no match is found.","pos":[129,247]}]}]}],"pos":[241150,241398],"yaml":true},{"content":"The static `Replace` methods are equivalent to constructing a <xref:System.Text.RegularExpressions.Regex> object with the specified regular expression pattern and calling the instance method `Replace`.  \n  \n The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match. For more information about regular expressions, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md). If you specify <xref:System.Text.RegularExpressions.RegexOptions.RightToLeft> for the `options` parameter, the search for matches begins at the end of the input string and moves left; otherwise, the search begins at the start of the input string and moves right.  \n  \n The `replacement` parameter specifies the string that is to replace each match in `input`. `replacement` can consist of any combination of literal text and [substitutions](~/docs/standard/base-types/substitutions-in-regular-expressions.md). For example, the replacement pattern `a*${test}b` inserts the string \"a*\" followed by the substring that is matched by the `test` capturing group, if any, followed by the string \"b\". The * character is not recognized as a metacharacter within a replacement pattern.  \n  \n> [!NOTE]\n>  Substitutions are the only regular expression language elements that are recognized in a replacement pattern. All other regular expression language elements, including [character escapes](~/docs/standard/base-types/character-escapes-in-regular-expressions.md), are allowed in regular expression patterns only and are not recognized in replacement patterns.  \n  \n The `matchTimeout` parameter specifies how long a pattern matching method should try to find a match before it times out. Setting a time-out interval prevents regular expressions that rely on excessive backtracking from appearing to stop responding when they process input that contains near matches. For more information, see [Best Practices for Regular Expressions](~/docs/standard/base-types/best-practices.md) and [Backtracking](~/docs/standard/base-types/backtracking-in-regular-expressions.md). If no match is found in that time interval, the method throws a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception. `matchTimeout` overrides any default time-out value defined for the application domain in which the method executes.  \n  \n Because the method returns `input` unchanged if there is no match, you can use the <xref:System.Object.ReferenceEquals%2A?displayProperty=fullName> method to determine whether the method has made any replacements to the input string.","nodes":[{"pos":[0,201],"content":"The static <ph id=\"ph1\">`Replace`</ph> methods are equivalent to constructing a <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.Regex&gt;</ph> object with the specified regular expression pattern and calling the instance method <ph id=\"ph3\">`Replace`</ph>.","source":"The static `Replace` methods are equivalent to constructing a <xref:System.Text.RegularExpressions.Regex> object with the specified regular expression pattern and calling the instance method `Replace`."},{"pos":[208,859],"content":"The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match. For more information about regular expressions, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md). If you specify <xref:System.Text.RegularExpressions.RegexOptions.RightToLeft> for the `options` parameter, the search for matches begins at the end of the input string and moves left; otherwise, the search begins at the start of the input string and moves right.","nodes":[{"content":"The <ph id=\"ph1\">`pattern`</ph> parameter consists of regular expression language elements that symbolically describe the string to match.","pos":[0,120],"source":"The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match."},{"content":"For more information about regular expressions, see <bpt id=\"p1\">[</bpt>.NET Framework Regular Expressions<ept id=\"p1\">](~/docs/standard/base-types/regular-expressions.md)</ept> and <bpt id=\"p2\">[</bpt>Regular Expression Language - Quick Reference<ept id=\"p2\">](~/docs/standard/base-types/regular-expression-language-quick-reference.md)</ept>.","pos":[121,388],"source":" For more information about regular expressions, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md)."},{"content":"If you specify <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.RegexOptions.RightToLeft&gt;</ph> for the <ph id=\"ph2\">`options`</ph> parameter, the search for matches begins at the end of the input string and moves left; otherwise, the search begins at the start of the input string and moves right.","pos":[389,651],"source":" If you specify <xref:System.Text.RegularExpressions.RegexOptions.RightToLeft> for the `options` parameter, the search for matches begins at the end of the input string and moves left; otherwise, the search begins at the start of the input string and moves right."}]},{"pos":[866,1372],"content":"The `replacement` parameter specifies the string that is to replace each match in `input`. `replacement` can consist of any combination of literal text and [substitutions](~/docs/standard/base-types/substitutions-in-regular-expressions.md). For example, the replacement pattern `a*${test}b` inserts the string \"a*\" followed by the substring that is matched by the `test` capturing group, if any, followed by the string \"b\". The * character is not recognized as a metacharacter within a replacement pattern.","nodes":[{"content":"The <ph id=\"ph1\">`replacement`</ph> parameter specifies the string that is to replace each match in <ph id=\"ph2\">`input`</ph>.","pos":[0,90],"source":"The `replacement` parameter specifies the string that is to replace each match in `input`."},{"content":"<ph id=\"ph1\">`replacement`</ph> can consist of any combination of literal text and <bpt id=\"p1\">[</bpt>substitutions<ept id=\"p1\">](~/docs/standard/base-types/substitutions-in-regular-expressions.md)</ept>.","pos":[91,240],"source":"`replacement` can consist of any combination of literal text and [substitutions](~/docs/standard/base-types/substitutions-in-regular-expressions.md)."},{"content":"For example, the replacement pattern <ph id=\"ph1\">`a*${test}b`</ph> inserts the string \"a*\" followed by the substring that is matched by the <ph id=\"ph2\">`test`</ph> capturing group, if any, followed by the string \"b\".","pos":[241,423],"source":" For example, the replacement pattern `a*${test}b` inserts the string \"a*\" followed by the substring that is matched by the `test` capturing group, if any, followed by the string \"b\"."},{"content":"The * character is not recognized as a metacharacter within a replacement pattern.","pos":[424,506]}]},{"pos":[1380,1747],"content":"[!NOTE]\n Substitutions are the only regular expression language elements that are recognized in a replacement pattern. All other regular expression language elements, including [character escapes](~/docs/standard/base-types/character-escapes-in-regular-expressions.md), are allowed in regular expression patterns only and are not recognized in replacement patterns.","leadings":["","> "],"nodes":[{"content":" Substitutions are the only regular expression language elements that are recognized in a replacement pattern. All other regular expression language elements, including [character escapes](~/docs/standard/base-types/character-escapes-in-regular-expressions.md), are allowed in regular expression patterns only and are not recognized in replacement patterns.","pos":[8,365],"nodes":[{"content":"Substitutions are the only regular expression language elements that are recognized in a replacement pattern.","pos":[1,110]},{"content":"All other regular expression language elements, including <bpt id=\"p1\">[</bpt>character escapes<ept id=\"p1\">](~/docs/standard/base-types/character-escapes-in-regular-expressions.md)</ept>, are allowed in regular expression patterns only and are not recognized in replacement patterns.","pos":[111,357],"source":" All other regular expression language elements, including [character escapes](~/docs/standard/base-types/character-escapes-in-regular-expressions.md), are allowed in regular expression patterns only and are not recognized in replacement patterns."}]}]},{"pos":[1754,2511],"content":"The `matchTimeout` parameter specifies how long a pattern matching method should try to find a match before it times out. Setting a time-out interval prevents regular expressions that rely on excessive backtracking from appearing to stop responding when they process input that contains near matches. For more information, see [Best Practices for Regular Expressions](~/docs/standard/base-types/best-practices.md) and [Backtracking](~/docs/standard/base-types/backtracking-in-regular-expressions.md). If no match is found in that time interval, the method throws a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception. `matchTimeout` overrides any default time-out value defined for the application domain in which the method executes.","nodes":[{"content":"The <ph id=\"ph1\">`matchTimeout`</ph> parameter specifies how long a pattern matching method should try to find a match before it times out.","pos":[0,121],"source":"The `matchTimeout` parameter specifies how long a pattern matching method should try to find a match before it times out."},{"content":"Setting a time-out interval prevents regular expressions that rely on excessive backtracking from appearing to stop responding when they process input that contains near matches.","pos":[122,300]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Best Practices for Regular Expressions<ept id=\"p1\">](~/docs/standard/base-types/best-practices.md)</ept> and <bpt id=\"p2\">[</bpt>Backtracking<ept id=\"p2\">](~/docs/standard/base-types/backtracking-in-regular-expressions.md)</ept>.","pos":[301,500],"source":" For more information, see [Best Practices for Regular Expressions](~/docs/standard/base-types/best-practices.md) and [Backtracking](~/docs/standard/base-types/backtracking-in-regular-expressions.md)."},{"content":"If no match is found in that time interval, the method throws a <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.RegexMatchTimeoutException&gt;</ph> exception.","pos":[501,640],"source":" If no match is found in that time interval, the method throws a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception."},{"content":"<ph id=\"ph1\">`matchTimeout`</ph> overrides any default time-out value defined for the application domain in which the method executes.","pos":[641,757],"source":"`matchTimeout` overrides any default time-out value defined for the application domain in which the method executes."}]},{"pos":[2518,2751],"content":"Because the method returns <ph id=\"ph1\">`input`</ph> unchanged if there is no match, you can use the <ph id=\"ph2\">&lt;xref:System.Object.ReferenceEquals%2A?displayProperty=fullName&gt;</ph> method to determine whether the method has made any replacements to the input string.","source":"Because the method returns `input` unchanged if there is no match, you can use the <xref:System.Object.ReferenceEquals%2A?displayProperty=fullName> method to determine whether the method has made any replacements to the input string."}],"pos":[241409,244178],"yaml":true,"extradata":"MT"},{"content":"The string to search for a match.","nodes":[{"pos":[0,33],"content":"The string to search for a match.","nodes":[{"content":"The string to search for a match.","pos":[0,33]}]}],"pos":[246943,246977],"yaml":true},{"content":"The regular expression pattern to match.","nodes":[{"pos":[0,40],"content":"The regular expression pattern to match.","nodes":[{"content":"The regular expression pattern to match.","pos":[0,40]}]}],"pos":[247040,247081],"yaml":true},{"content":"The replacement string.","nodes":[{"pos":[0,23],"content":"The replacement string.","nodes":[{"content":"The replacement string.","pos":[0,23]}]}],"pos":[247148,247172],"yaml":true},{"content":"A bitwise combination of the enumeration values that provide options for matching.","nodes":[{"pos":[0,82],"content":"A bitwise combination of the enumeration values that provide options for matching.","nodes":[{"content":"A bitwise combination of the enumeration values that provide options for matching.","pos":[0,82]}]}],"pos":[247265,247348],"yaml":true},{"content":"A time-out interval, or <xref href=\"System.Text.RegularExpressions.Regex.InfiniteMatchTimeout\"></xref> to indicate that the method should not time out.","nodes":[{"pos":[0,151],"content":"A time-out interval, or <ph id=\"ph1\">&lt;xref href=\"System.Text.RegularExpressions.Regex.InfiniteMatchTimeout\"&gt;&lt;/xref&gt;</ph> to indicate that the method should not time out.","source":"A time-out interval, or <xref href=\"System.Text.RegularExpressions.Regex.InfiniteMatchTimeout\"></xref> to indicate that the method should not time out."}],"pos":[247418,247570],"yaml":true},{"content":"A new string that is identical to the input string, except that the replacement string takes the place of each matched string. If <code>pattern</code> is not matched in the current instance, the method returns the current instance unchanged.","nodes":[{"pos":[0,241],"content":"A new string that is identical to the input string, except that the replacement string takes the place of each matched string. If <code>pattern</code> is not matched in the current instance, the method returns the current instance unchanged.","nodes":[{"content":"A new string that is identical to the input string, except that the replacement string takes the place of each matched string.","pos":[0,126]},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">pattern</ph><ept id=\"p1\">&lt;/code&gt;</ept> is not matched in the current instance, the method returns the current instance unchanged.","pos":[127,241],"source":" If <code>pattern</code> is not matched in the current instance, the method returns the current instance unchanged."}]}],"pos":[247627,247869],"yaml":true},{"content":"A regular expression parsing error occurred.","nodes":[{"pos":[0,44],"content":"A regular expression parsing error occurred.","nodes":[{"content":"A regular expression parsing error occurred.","pos":[0,44]}]}],"pos":[248035,248080],"yaml":true},{"content":"<code>input</code>, <code>pattern</code>, or <code>replacement</code> is `null`.","nodes":[{"pos":[0,80],"content":"<ph id=\"ph1\">&lt;code&gt;input&lt;/code&gt;</ph>, <ph id=\"ph2\">&lt;code&gt;pattern&lt;/code&gt;</ph>, or <ph id=\"ph3\">&lt;code&gt;replacement&lt;/code&gt;</ph> is <ph id=\"ph4\">`null`</ph>.","source":"<code>input</code>, <code>pattern</code>, or <code>replacement</code> is `null`."}],"pos":[248182,248263],"yaml":true},{"content":"<code>options</code> is not a valid bitwise combination of <xref href=\"System.Text.RegularExpressions.RegexOptions\"></xref> values.  \n  \n -or-  \n  \n <code>matchTimeout</code> is negative, zero, or greater than approximately 24 days.","nodes":[{"pos":[0,131],"content":"<ph id=\"ph1\">&lt;code&gt;options&lt;/code&gt;</ph> is not a valid bitwise combination of <ph id=\"ph2\">&lt;xref href=\"System.Text.RegularExpressions.RegexOptions\"&gt;&lt;/xref&gt;</ph> values.","source":"<code>options</code> is not a valid bitwise combination of <xref href=\"System.Text.RegularExpressions.RegexOptions\"></xref> values."},{"pos":[138,142],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[149,232],"content":"<ph id=\"ph1\">&lt;code&gt;matchTimeout&lt;/code&gt;</ph> is negative, zero, or greater than approximately 24 days.","source":"<code>matchTimeout</code> is negative, zero, or greater than approximately 24 days."}],"pos":[248377,248618],"yaml":true},{"content":"A time-out occurred. For more information about time-outs, see the Remarks section.","nodes":[{"pos":[0,83],"content":"A time-out occurred. For more information about time-outs, see the Remarks section.","nodes":[{"content":"A time-out occurred. For more information about time-outs, see the Remarks section.","pos":[0,83],"nodes":[{"content":"A time-out occurred.","pos":[0,20]},{"content":"For more information about time-outs, see the Remarks section.","pos":[21,83]}]}]}],"pos":[248778,248862],"yaml":true},{"content":"In a specified input substring, replaces a specified maximum number of strings that match a regular expression pattern with a string returned by a <xref href=\"System.Text.RegularExpressions.MatchEvaluator\"></xref> delegate.","nodes":[{"pos":[0,223],"content":"In a specified input substring, replaces a specified maximum number of strings that match a regular expression pattern with a string returned by a <ph id=\"ph1\">&lt;xref href=\"System.Text.RegularExpressions.MatchEvaluator\"&gt;&lt;/xref&gt;</ph> delegate.","source":"In a specified input substring, replaces a specified maximum number of strings that match a regular expression pattern with a string returned by a <xref href=\"System.Text.RegularExpressions.MatchEvaluator\"></xref> delegate."}],"pos":[250685,250909],"yaml":true},{"content":"The <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.Text.RegularExpressions.MatchEvaluator%2CSystem.Int32%2CSystem.Int32%29?displayProperty=fullName> method is useful for replacing a regular expression match if any of the following conditions is true:  \n  \n-   The replacement string cannot readily be specified by a regular expression replacement pattern.  \n  \n-   The replacement string results from some processing done on the matched string.  \n  \n-   The replacement string results from conditional processing.  \n  \n The method is equivalent to calling the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.Int32%29?displayProperty=fullName> method and passing the first `count`<xref:System.Text.RegularExpressions.Match> objects in the returned <xref:System.Text.RegularExpressions.MatchCollection> collection to the `evaluator` delegate.  \n  \n The regular expression is the pattern defined by the constructor for the current <xref:System.Text.RegularExpressions.Regex> object.  \n  \n The `evaluator` parameter is the delegate for a custom method that you define and that examines each match. The custom method must have the following signature to match the <xref:System.Text.RegularExpressions.MatchEvaluator> delegate.  \n  \n [!code-csharp[System.Text.RegularExpressions.Regex.Replace#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/syntax1.cs#1)]\n [!code-vb[System.Text.RegularExpressions.Regex.Replace#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/syntax1.vb#1)]  \n  \n Your custom method returns a string that replaces the matched input.  \n  \n The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the replacement operation exceeds the time-out interval specified by the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=fullName> constructor. If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <xref:System.Text.RegularExpressions.Regex> object is created. If no time-out is defined in the <xref:System.Text.RegularExpressions.Regex> constructor call or in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, no exception is thrown  \n  \n Because the method returns `input` unchanged if there is no match, you can use the <xref:System.Object.ReferenceEquals%2A?displayProperty=fullName> method to determine whether the method has made any replacements to the input string.","nodes":[{"pos":[0,279],"content":"The <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.Text.RegularExpressions.MatchEvaluator%2CSystem.Int32%2CSystem.Int32%29?displayProperty=fullName> method is useful for replacing a regular expression match if any of the following conditions is true:","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.Text.RegularExpressions.MatchEvaluator%2CSystem.Int32%2CSystem.Int32%29?displayProperty=fullName&gt;</ph> method is useful for replacing a regular expression match if any of the following conditions is true:","pos":[0,279],"source":"The <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.Text.RegularExpressions.MatchEvaluator%2CSystem.Int32%2CSystem.Int32%29?displayProperty=fullName> method is useful for replacing a regular expression match if any of the following conditions is true:"}]},{"pos":[289,384],"content":"The replacement string cannot readily be specified by a regular expression replacement pattern.","nodes":[{"content":"The replacement string cannot readily be specified by a regular expression replacement pattern.","pos":[0,95]}]},{"pos":[394,473],"content":"The replacement string results from some processing done on the matched string.","nodes":[{"content":"The replacement string results from some processing done on the matched string.","pos":[0,79]}]},{"pos":[483,542],"content":"The replacement string results from conditional processing.","nodes":[{"content":"The replacement string results from conditional processing.","pos":[0,59]}]},{"pos":[549,897],"content":"The method is equivalent to calling the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.Int32%29?displayProperty=fullName&gt;</ph> method and passing the first <ph id=\"ph2\">`count`</ph><ph id=\"ph3\">&lt;xref:System.Text.RegularExpressions.Match&gt;</ph> objects in the returned <ph id=\"ph4\">&lt;xref:System.Text.RegularExpressions.MatchCollection&gt;</ph> collection to the <ph id=\"ph5\">`evaluator`</ph> delegate.","source":"The method is equivalent to calling the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.Int32%29?displayProperty=fullName> method and passing the first `count`<xref:System.Text.RegularExpressions.Match> objects in the returned <xref:System.Text.RegularExpressions.MatchCollection> collection to the `evaluator` delegate."},{"pos":[904,1036],"content":"The regular expression is the pattern defined by the constructor for the current <xref:System.Text.RegularExpressions.Regex> object.","nodes":[{"content":"The regular expression is the pattern defined by the constructor for the current <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex&gt;</ph> object.","pos":[0,132],"source":"The regular expression is the pattern defined by the constructor for the current <xref:System.Text.RegularExpressions.Regex> object."}]},{"pos":[1043,1278],"content":"The `evaluator` parameter is the delegate for a custom method that you define and that examines each match. The custom method must have the following signature to match the <xref:System.Text.RegularExpressions.MatchEvaluator> delegate.","nodes":[{"content":"The <ph id=\"ph1\">`evaluator`</ph> parameter is the delegate for a custom method that you define and that examines each match.","pos":[0,107],"source":"The `evaluator` parameter is the delegate for a custom method that you define and that examines each match."},{"content":"The custom method must have the following signature to match the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.MatchEvaluator&gt;</ph> delegate.","pos":[108,235],"source":" The custom method must have the following signature to match the <xref:System.Text.RegularExpressions.MatchEvaluator> delegate."}]},{"pos":[1285,1634],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Text.RegularExpressions.Regex.Replace#1<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/syntax1.cs#1)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Text.RegularExpressions.Regex.Replace#1<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/syntax1.vb#1)</ept><ept id=\"p3\">]</ept>","leadings":[""," "],"source":"[!code-csharp[System.Text.RegularExpressions.Regex.Replace#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/syntax1.cs#1)]\n[!code-vb[System.Text.RegularExpressions.Regex.Replace#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/syntax1.vb#1)]"},{"pos":[1641,1709],"content":"Your custom method returns a string that replaces the matched input.","nodes":[{"content":"Your custom method returns a string that replaces the matched input.","pos":[0,68]}]},{"pos":[1716,2606],"content":"The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the replacement operation exceeds the time-out interval specified by the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=fullName> constructor. If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <xref:System.Text.RegularExpressions.Regex> object is created. If no time-out is defined in the <xref:System.Text.RegularExpressions.Regex> constructor call or in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, no exception is thrown","nodes":[{"content":"The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the replacement operation exceeds the time-out interval specified by the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=fullName> constructor. If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <xref:System.Text.RegularExpressions.Regex> object is created. If no time-out is defined in the <xref:System.Text.RegularExpressions.Regex> constructor call or in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, no exception is thrown","pos":[0,890],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.RegexMatchTimeoutException&gt;</ph> exception is thrown if the execution time of the replacement operation exceeds the time-out interval specified by the <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=fullName&gt;</ph> constructor.","pos":[0,359],"source":"The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the replacement operation exceeds the time-out interval specified by the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=fullName> constructor."},{"content":"If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex&gt;</ph> object is created.","pos":[360,611],"source":" If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <xref:System.Text.RegularExpressions.Regex> object is created."},{"content":"If no time-out is defined in the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex&gt;</ph> constructor call or in the application domain's properties, or if the time-out value is <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName&gt;</ph>, no exception is thrown","pos":[612,890],"source":" If no time-out is defined in the <xref:System.Text.RegularExpressions.Regex> constructor call or in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, no exception is thrown"}]}]},{"pos":[2613,2846],"content":"Because the method returns <ph id=\"ph1\">`input`</ph> unchanged if there is no match, you can use the <ph id=\"ph2\">&lt;xref:System.Object.ReferenceEquals%2A?displayProperty=fullName&gt;</ph> method to determine whether the method has made any replacements to the input string.","source":"Because the method returns `input` unchanged if there is no match, you can use the <xref:System.Object.ReferenceEquals%2A?displayProperty=fullName> method to determine whether the method has made any replacements to the input string."}],"pos":[250920,253790],"yaml":true,"extradata":"MT"},{"content":"The string to search for a match.","nodes":[{"pos":[0,33],"content":"The string to search for a match.","nodes":[{"content":"The string to search for a match.","pos":[0,33]}]}],"pos":[254009,254043],"yaml":true},{"content":"A custom method that examines each match and returns either the original matched string or a replacement string.","nodes":[{"pos":[0,112],"content":"A custom method that examines each match and returns either the original matched string or a replacement string.","nodes":[{"content":"A custom method that examines each match and returns either the original matched string or a replacement string.","pos":[0,112]}]}],"pos":[254140,254253],"yaml":true},{"content":"The maximum number of times the replacement will occur.","nodes":[{"pos":[0,55],"content":"The maximum number of times the replacement will occur.","nodes":[{"content":"The maximum number of times the replacement will occur.","pos":[0,55]}]}],"pos":[254313,254369],"yaml":true},{"content":"The character position in the input string where the search begins.","nodes":[{"pos":[0,67],"content":"The character position in the input string where the search begins.","nodes":[{"content":"The character position in the input string where the search begins.","pos":[0,67]}]}],"pos":[254431,254499],"yaml":true},{"content":"A new string that is identical to the input string, except that a replacement string takes the place of each matched string. If the regular expression pattern is not matched in the current instance, the method returns the current instance unchanged.","nodes":[{"pos":[0,249],"content":"A new string that is identical to the input string, except that a replacement string takes the place of each matched string. If the regular expression pattern is not matched in the current instance, the method returns the current instance unchanged.","nodes":[{"content":"A new string that is identical to the input string, except that a replacement string takes the place of each matched string. If the regular expression pattern is not matched in the current instance, the method returns the current instance unchanged.","pos":[0,249],"nodes":[{"content":"A new string that is identical to the input string, except that a replacement string takes the place of each matched string.","pos":[0,124]},{"content":"If the regular expression pattern is not matched in the current instance, the method returns the current instance unchanged.","pos":[125,249]}]}]}],"pos":[254556,254806],"yaml":true},{"content":"<code>input</code> or <code>evaluator</code> is `null`.","nodes":[{"pos":[0,55],"content":"<ph id=\"ph1\">&lt;code&gt;input&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;evaluator&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>input</code> or <code>evaluator</code> is `null`."}],"pos":[254980,255036],"yaml":true},{"content":"<code>startat</code> is less than zero or greater than the length of <code>input</code>.","nodes":[{"pos":[0,88],"content":"<ph id=\"ph1\">&lt;code&gt;startat&lt;/code&gt;</ph> is less than zero or greater than the length of <ph id=\"ph2\">&lt;code&gt;input&lt;/code&gt;</ph>.","source":"<code>startat</code> is less than zero or greater than the length of <code>input</code>."}],"pos":[255150,255239],"yaml":true},{"content":"A time-out occurred. For more information about time-outs, see the Remarks section.","nodes":[{"pos":[0,83],"content":"A time-out occurred. For more information about time-outs, see the Remarks section.","nodes":[{"content":"A time-out occurred. For more information about time-outs, see the Remarks section.","pos":[0,83],"nodes":[{"content":"A time-out occurred.","pos":[0,20]},{"content":"For more information about time-outs, see the Remarks section.","pos":[21,83]}]}]}],"pos":[255399,255483],"yaml":true},{"content":"In a specified input string, replaces all strings that match a specified regular expression with a string returned by a <xref href=\"System.Text.RegularExpressions.MatchEvaluator\"></xref> delegate. Specified options modify the matching operation.","nodes":[{"pos":[0,245],"content":"In a specified input string, replaces all strings that match a specified regular expression with a string returned by a <xref href=\"System.Text.RegularExpressions.MatchEvaluator\"></xref> delegate. Specified options modify the matching operation.","nodes":[{"content":"In a specified input string, replaces all strings that match a specified regular expression with a string returned by a <ph id=\"ph1\">&lt;xref href=\"System.Text.RegularExpressions.MatchEvaluator\"&gt;&lt;/xref&gt;</ph> delegate.","pos":[0,196],"source":"In a specified input string, replaces all strings that match a specified regular expression with a string returned by a <xref href=\"System.Text.RegularExpressions.MatchEvaluator\"></xref> delegate."},{"content":"Specified options modify the matching operation.","pos":[197,245]}]}],"pos":[257426,257672],"yaml":true},{"content":"The <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.MatchEvaluator%2CSystem.Text.RegularExpressions.RegexOptions%29?displayProperty=fullName> method is useful for replacing a regular expression match in if any of the following conditions is true:  \n  \n-   The replacement string cannot readily be specified by a regular expression replacement pattern.  \n  \n-   The replacement string results from some processing done on the matched string.  \n  \n-   The replacement string results from conditional processing.  \n  \n The method is equivalent to calling the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29?displayProperty=fullName> method and passing each <xref:System.Text.RegularExpressions.Match> object in the returned <xref:System.Text.RegularExpressions.MatchCollection> collection to the `evaluator` delegate.  \n  \n The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match. For more information about regular expressions, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).  \n  \n The `evaluator` parameter is the delegate for a custom method that you define and that examines each match. The custom method must have the following signature to match the <xref:System.Text.RegularExpressions.MatchEvaluator> delegate.  \n  \n [!code-csharp[System.Text.RegularExpressions.Regex.Replace#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/syntax1.cs#1)]\n [!code-vb[System.Text.RegularExpressions.Regex.Replace#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/syntax1.vb#1)]  \n  \n Your custom method returns a string that replaces the matched input.  \n  \n If you specify <xref:System.Text.RegularExpressions.RegexOptions.RightToLeft> for the `options` parameter, the search for matches begins at the end of the input string and moves left; otherwise, the search begins at the start of the input string and moves right.  \n  \n The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the replacement operation exceeds the time-out interval specified for the application domain in which the method is called. If no time-out is defined in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, no exception is thrown.  \n  \n Because the method returns `input` unchanged if there is no match, you can use the <xref:System.Object.ReferenceEquals%2A?displayProperty=fullName> method to determine whether the method has made any replacements to the input string.","nodes":[{"pos":[0,314],"content":"The <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.MatchEvaluator%2CSystem.Text.RegularExpressions.RegexOptions%29?displayProperty=fullName> method is useful for replacing a regular expression match in if any of the following conditions is true:","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.MatchEvaluator%2CSystem.Text.RegularExpressions.RegexOptions%29?displayProperty=fullName&gt;</ph> method is useful for replacing a regular expression match in if any of the following conditions is true:","pos":[0,314],"source":"The <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.MatchEvaluator%2CSystem.Text.RegularExpressions.RegexOptions%29?displayProperty=fullName> method is useful for replacing a regular expression match in if any of the following conditions is true:"}]},{"pos":[324,419],"content":"The replacement string cannot readily be specified by a regular expression replacement pattern.","nodes":[{"content":"The replacement string cannot readily be specified by a regular expression replacement pattern.","pos":[0,95]}]},{"pos":[429,508],"content":"The replacement string results from some processing done on the matched string.","nodes":[{"content":"The replacement string results from some processing done on the matched string.","pos":[0,79]}]},{"pos":[518,577],"content":"The replacement string results from conditional processing.","nodes":[{"content":"The replacement string results from conditional processing.","pos":[0,59]}]},{"pos":[584,966],"content":"The method is equivalent to calling the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29?displayProperty=fullName&gt;</ph> method and passing each <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.Match&gt;</ph> object in the returned <ph id=\"ph3\">&lt;xref:System.Text.RegularExpressions.MatchCollection&gt;</ph> collection to the <ph id=\"ph4\">`evaluator`</ph> delegate.","source":"The method is equivalent to calling the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29?displayProperty=fullName> method and passing each <xref:System.Text.RegularExpressions.Match> object in the returned <xref:System.Text.RegularExpressions.MatchCollection> collection to the `evaluator` delegate."},{"pos":[973,1361],"content":"The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match. For more information about regular expressions, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).","nodes":[{"content":"The <ph id=\"ph1\">`pattern`</ph> parameter consists of regular expression language elements that symbolically describe the string to match.","pos":[0,120],"source":"The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match."},{"content":"For more information about regular expressions, see <bpt id=\"p1\">[</bpt>.NET Framework Regular Expressions<ept id=\"p1\">](~/docs/standard/base-types/regular-expressions.md)</ept> and <bpt id=\"p2\">[</bpt>Regular Expression Language - Quick Reference<ept id=\"p2\">](~/docs/standard/base-types/regular-expression-language-quick-reference.md)</ept>.","pos":[121,388],"source":" For more information about regular expressions, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md)."}]},{"pos":[1368,1603],"content":"The `evaluator` parameter is the delegate for a custom method that you define and that examines each match. The custom method must have the following signature to match the <xref:System.Text.RegularExpressions.MatchEvaluator> delegate.","nodes":[{"content":"The <ph id=\"ph1\">`evaluator`</ph> parameter is the delegate for a custom method that you define and that examines each match.","pos":[0,107],"source":"The `evaluator` parameter is the delegate for a custom method that you define and that examines each match."},{"content":"The custom method must have the following signature to match the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.MatchEvaluator&gt;</ph> delegate.","pos":[108,235],"source":" The custom method must have the following signature to match the <xref:System.Text.RegularExpressions.MatchEvaluator> delegate."}]},{"pos":[1610,1959],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Text.RegularExpressions.Regex.Replace#1<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/syntax1.cs#1)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Text.RegularExpressions.Regex.Replace#1<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/syntax1.vb#1)</ept><ept id=\"p3\">]</ept>","leadings":[""," "],"source":"[!code-csharp[System.Text.RegularExpressions.Regex.Replace#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/syntax1.cs#1)]\n[!code-vb[System.Text.RegularExpressions.Regex.Replace#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/syntax1.vb#1)]"},{"pos":[1966,2034],"content":"Your custom method returns a string that replaces the matched input.","nodes":[{"content":"Your custom method returns a string that replaces the matched input.","pos":[0,68]}]},{"pos":[2041,2303],"content":"If you specify <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.RegexOptions.RightToLeft&gt;</ph> for the <ph id=\"ph2\">`options`</ph> parameter, the search for matches begins at the end of the input string and moves left; otherwise, the search begins at the start of the input string and moves right.","source":"If you specify <xref:System.Text.RegularExpressions.RegexOptions.RightToLeft> for the `options` parameter, the search for matches begins at the end of the input string and moves left; otherwise, the search begins at the start of the input string and moves right."},{"pos":[2310,2756],"content":"The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the replacement operation exceeds the time-out interval specified for the application domain in which the method is called. If no time-out is defined in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, no exception is thrown.","nodes":[{"content":"The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the replacement operation exceeds the time-out interval specified for the application domain in which the method is called. If no time-out is defined in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, no exception is thrown.","pos":[0,446],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.RegexMatchTimeoutException&gt;</ph> exception is thrown if the execution time of the replacement operation exceeds the time-out interval specified for the application domain in which the method is called.","pos":[0,237],"source":"The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the replacement operation exceeds the time-out interval specified for the application domain in which the method is called."},{"content":"If no time-out is defined in the application domain's properties, or if the time-out value is <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName&gt;</ph>, no exception is thrown.","pos":[238,446],"source":" If no time-out is defined in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, no exception is thrown."}]}]},{"pos":[2763,2996],"content":"Because the method returns <ph id=\"ph1\">`input`</ph> unchanged if there is no match, you can use the <ph id=\"ph2\">&lt;xref:System.Object.ReferenceEquals%2A?displayProperty=fullName&gt;</ph> method to determine whether the method has made any replacements to the input string.","source":"Because the method returns `input` unchanged if there is no match, you can use the <xref:System.Object.ReferenceEquals%2A?displayProperty=fullName> method to determine whether the method has made any replacements to the input string."}],"pos":[257683,260705],"yaml":true,"extradata":"MT"},{"content":"The string to search for a match.","nodes":[{"pos":[0,33],"content":"The string to search for a match.","nodes":[{"content":"The string to search for a match.","pos":[0,33]}]}],"pos":[262832,262866],"yaml":true},{"content":"The regular expression pattern to match.","nodes":[{"pos":[0,40],"content":"The regular expression pattern to match.","nodes":[{"content":"The regular expression pattern to match.","pos":[0,40]}]}],"pos":[262929,262970],"yaml":true},{"content":"A custom method that examines each match and returns either the original matched string or a replacement string.","nodes":[{"pos":[0,112],"content":"A custom method that examines each match and returns either the original matched string or a replacement string.","nodes":[{"content":"A custom method that examines each match and returns either the original matched string or a replacement string.","pos":[0,112]}]}],"pos":[263067,263180],"yaml":true},{"content":"A bitwise combination of the enumeration values that provide options for matching.","nodes":[{"pos":[0,82],"content":"A bitwise combination of the enumeration values that provide options for matching.","nodes":[{"content":"A bitwise combination of the enumeration values that provide options for matching.","pos":[0,82]}]}],"pos":[263273,263356],"yaml":true},{"content":"A new string that is identical to the input string, except that a replacement string takes the place of each matched string. If <code>pattern</code> is not matched in the current instance, the method returns the current instance unchanged.","nodes":[{"pos":[0,239],"content":"A new string that is identical to the input string, except that a replacement string takes the place of each matched string. If <code>pattern</code> is not matched in the current instance, the method returns the current instance unchanged.","nodes":[{"content":"A new string that is identical to the input string, except that a replacement string takes the place of each matched string.","pos":[0,124]},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">pattern</ph><ept id=\"p1\">&lt;/code&gt;</ept> is not matched in the current instance, the method returns the current instance unchanged.","pos":[125,239],"source":" If <code>pattern</code> is not matched in the current instance, the method returns the current instance unchanged."}]}],"pos":[263413,263653],"yaml":true},{"content":"A regular expression parsing error occurred.","nodes":[{"pos":[0,44],"content":"A regular expression parsing error occurred.","nodes":[{"content":"A regular expression parsing error occurred.","pos":[0,44]}]}],"pos":[263819,263864],"yaml":true},{"content":"<code>input</code>, <code>pattern</code>, or <code>evaluator</code> is `null`.","nodes":[{"pos":[0,78],"content":"<ph id=\"ph1\">&lt;code&gt;input&lt;/code&gt;</ph>, <ph id=\"ph2\">&lt;code&gt;pattern&lt;/code&gt;</ph>, or <ph id=\"ph3\">&lt;code&gt;evaluator&lt;/code&gt;</ph> is <ph id=\"ph4\">`null`</ph>.","source":"<code>input</code>, <code>pattern</code>, or <code>evaluator</code> is `null`."}],"pos":[263966,264045],"yaml":true},{"content":"<code>options</code> is not a valid bitwise combination of <xref href=\"System.Text.RegularExpressions.RegexOptions\"></xref> values.","nodes":[{"pos":[0,131],"content":"<ph id=\"ph1\">&lt;code&gt;options&lt;/code&gt;</ph> is not a valid bitwise combination of <ph id=\"ph2\">&lt;xref href=\"System.Text.RegularExpressions.RegexOptions\"&gt;&lt;/xref&gt;</ph> values.","source":"<code>options</code> is not a valid bitwise combination of <xref href=\"System.Text.RegularExpressions.RegexOptions\"></xref> values."}],"pos":[264159,264291],"yaml":true},{"content":"A time-out occurred. For more information about time-outs, see the Remarks section.","nodes":[{"pos":[0,83],"content":"A time-out occurred. For more information about time-outs, see the Remarks section.","nodes":[{"content":"A time-out occurred. For more information about time-outs, see the Remarks section.","pos":[0,83],"nodes":[{"content":"A time-out occurred.","pos":[0,20]},{"content":"For more information about time-outs, see the Remarks section.","pos":[21,83]}]}]}],"pos":[264451,264535],"yaml":true},{"content":"In a specified input substring, replaces a specified maximum number of strings that match a regular expression pattern with a specified replacement string.","nodes":[{"pos":[0,155],"content":"In a specified input substring, replaces a specified maximum number of strings that match a regular expression pattern with a specified replacement string.","nodes":[{"content":"In a specified input substring, replaces a specified maximum number of strings that match a regular expression pattern with a specified replacement string.","pos":[0,155]}]}],"pos":[266238,266394],"yaml":true},{"content":"The search for matches starts in the `input` string at the position specified by the `startat` parameter. The regular expression is the pattern defined by the constructor for the current <xref:System.Text.RegularExpressions.Regex> object. If `count` is negative, replacements continue to the end of the string. If `count` exceeds the number of matches, all matches are replaced.  \n  \n The `replacement` parameter specifies the string that is to replace each match in `input`. `replacement` can consist of any combination of literal text and [substitutions](~/docs/standard/base-types/substitutions-in-regular-expressions.md). For example, the replacement pattern `a*${test}b` inserts the string \"a*\" followed by the substring that is matched by the `test` capturing group, if any, followed by the string \"b\". The * character is not recognized as a metacharacter within a replacement pattern.  \n  \n> [!NOTE]\n>  Substitutions are the only regular expression language elements that are recognized in a replacement pattern. All other regular expression language elements, including [character escapes](~/docs/standard/base-types/character-escapes-in-regular-expressions.md), are allowed in regular expression patterns only and are not recognized in replacement patterns.  \n  \n The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the replacement operation exceeds the time-out interval specified by the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=fullName> constructor. If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <xref:System.Text.RegularExpressions.Regex> object is created. If no time-out is defined in the <xref:System.Text.RegularExpressions.Regex> constructor call or in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, no exception is thrown  \n  \n Because the method returns `input` unchanged if there is no match, you can use the <xref:System.Object.ReferenceEquals%2A?displayProperty=fullName> method to determine whether the method has made any replacements to the input string.","nodes":[{"pos":[0,378],"content":"The search for matches starts in the `input` string at the position specified by the `startat` parameter. The regular expression is the pattern defined by the constructor for the current <xref:System.Text.RegularExpressions.Regex> object. If `count` is negative, replacements continue to the end of the string. If `count` exceeds the number of matches, all matches are replaced.","nodes":[{"content":"The search for matches starts in the <ph id=\"ph1\">`input`</ph> string at the position specified by the <ph id=\"ph2\">`startat`</ph> parameter.","pos":[0,105],"source":"The search for matches starts in the `input` string at the position specified by the `startat` parameter."},{"content":"The regular expression is the pattern defined by the constructor for the current <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex&gt;</ph> object.","pos":[106,238],"source":" The regular expression is the pattern defined by the constructor for the current <xref:System.Text.RegularExpressions.Regex> object."},{"content":"If <ph id=\"ph1\">`count`</ph> is negative, replacements continue to the end of the string.","pos":[239,310],"source":" If `count` is negative, replacements continue to the end of the string."},{"content":"If <ph id=\"ph1\">`count`</ph> exceeds the number of matches, all matches are replaced.","pos":[311,378],"source":" If `count` exceeds the number of matches, all matches are replaced."}]},{"pos":[385,891],"content":"The `replacement` parameter specifies the string that is to replace each match in `input`. `replacement` can consist of any combination of literal text and [substitutions](~/docs/standard/base-types/substitutions-in-regular-expressions.md). For example, the replacement pattern `a*${test}b` inserts the string \"a*\" followed by the substring that is matched by the `test` capturing group, if any, followed by the string \"b\". The * character is not recognized as a metacharacter within a replacement pattern.","nodes":[{"content":"The <ph id=\"ph1\">`replacement`</ph> parameter specifies the string that is to replace each match in <ph id=\"ph2\">`input`</ph>.","pos":[0,90],"source":"The `replacement` parameter specifies the string that is to replace each match in `input`."},{"content":"<ph id=\"ph1\">`replacement`</ph> can consist of any combination of literal text and <bpt id=\"p1\">[</bpt>substitutions<ept id=\"p1\">](~/docs/standard/base-types/substitutions-in-regular-expressions.md)</ept>.","pos":[91,240],"source":"`replacement` can consist of any combination of literal text and [substitutions](~/docs/standard/base-types/substitutions-in-regular-expressions.md)."},{"content":"For example, the replacement pattern <ph id=\"ph1\">`a*${test}b`</ph> inserts the string \"a*\" followed by the substring that is matched by the <ph id=\"ph2\">`test`</ph> capturing group, if any, followed by the string \"b\".","pos":[241,423],"source":" For example, the replacement pattern `a*${test}b` inserts the string \"a*\" followed by the substring that is matched by the `test` capturing group, if any, followed by the string \"b\"."},{"content":"The * character is not recognized as a metacharacter within a replacement pattern.","pos":[424,506]}]},{"pos":[899,1266],"content":"[!NOTE]\n Substitutions are the only regular expression language elements that are recognized in a replacement pattern. All other regular expression language elements, including [character escapes](~/docs/standard/base-types/character-escapes-in-regular-expressions.md), are allowed in regular expression patterns only and are not recognized in replacement patterns.","leadings":["","> "],"nodes":[{"content":" Substitutions are the only regular expression language elements that are recognized in a replacement pattern. All other regular expression language elements, including [character escapes](~/docs/standard/base-types/character-escapes-in-regular-expressions.md), are allowed in regular expression patterns only and are not recognized in replacement patterns.","pos":[8,365],"nodes":[{"content":"Substitutions are the only regular expression language elements that are recognized in a replacement pattern.","pos":[1,110]},{"content":"All other regular expression language elements, including <bpt id=\"p1\">[</bpt>character escapes<ept id=\"p1\">](~/docs/standard/base-types/character-escapes-in-regular-expressions.md)</ept>, are allowed in regular expression patterns only and are not recognized in replacement patterns.","pos":[111,357],"source":" All other regular expression language elements, including [character escapes](~/docs/standard/base-types/character-escapes-in-regular-expressions.md), are allowed in regular expression patterns only and are not recognized in replacement patterns."}]}]},{"pos":[1273,2163],"content":"The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the replacement operation exceeds the time-out interval specified by the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=fullName> constructor. If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <xref:System.Text.RegularExpressions.Regex> object is created. If no time-out is defined in the <xref:System.Text.RegularExpressions.Regex> constructor call or in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, no exception is thrown","nodes":[{"content":"The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the replacement operation exceeds the time-out interval specified by the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=fullName> constructor. If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <xref:System.Text.RegularExpressions.Regex> object is created. If no time-out is defined in the <xref:System.Text.RegularExpressions.Regex> constructor call or in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, no exception is thrown","pos":[0,890],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.RegexMatchTimeoutException&gt;</ph> exception is thrown if the execution time of the replacement operation exceeds the time-out interval specified by the <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=fullName&gt;</ph> constructor.","pos":[0,359],"source":"The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the replacement operation exceeds the time-out interval specified by the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=fullName> constructor."},{"content":"If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex&gt;</ph> object is created.","pos":[360,611],"source":" If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <xref:System.Text.RegularExpressions.Regex> object is created."},{"content":"If no time-out is defined in the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex&gt;</ph> constructor call or in the application domain's properties, or if the time-out value is <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName&gt;</ph>, no exception is thrown","pos":[612,890],"source":" If no time-out is defined in the <xref:System.Text.RegularExpressions.Regex> constructor call or in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, no exception is thrown"}]}]},{"pos":[2170,2403],"content":"Because the method returns <ph id=\"ph1\">`input`</ph> unchanged if there is no match, you can use the <ph id=\"ph2\">&lt;xref:System.Object.ReferenceEquals%2A?displayProperty=fullName&gt;</ph> method to determine whether the method has made any replacements to the input string.","source":"Because the method returns `input` unchanged if there is no match, you can use the <xref:System.Object.ReferenceEquals%2A?displayProperty=fullName> method to determine whether the method has made any replacements to the input string."}],"pos":[266405,268824],"yaml":true,"extradata":"MT"},{"content":"The string to search for a match.","nodes":[{"pos":[0,33],"content":"The string to search for a match.","nodes":[{"content":"The string to search for a match.","pos":[0,33]}]}],"pos":[270874,270908],"yaml":true},{"content":"The replacement string.","nodes":[{"pos":[0,23],"content":"The replacement string.","nodes":[{"content":"The replacement string.","pos":[0,23]}]}],"pos":[270975,270999],"yaml":true},{"content":"Maximum number of times the replacement can occur.","nodes":[{"pos":[0,50],"content":"Maximum number of times the replacement can occur.","nodes":[{"content":"Maximum number of times the replacement can occur.","pos":[0,50]}]}],"pos":[271059,271110],"yaml":true},{"content":"The character position in the input string where the search begins.","nodes":[{"pos":[0,67],"content":"The character position in the input string where the search begins.","nodes":[{"content":"The character position in the input string where the search begins.","pos":[0,67]}]}],"pos":[271172,271240],"yaml":true},{"content":"A new string that is identical to the input string, except that the replacement string takes the place of each matched string. If the regular expression pattern is not matched in the current instance, the method returns the current instance unchanged.","nodes":[{"pos":[0,251],"content":"A new string that is identical to the input string, except that the replacement string takes the place of each matched string. If the regular expression pattern is not matched in the current instance, the method returns the current instance unchanged.","nodes":[{"content":"A new string that is identical to the input string, except that the replacement string takes the place of each matched string. If the regular expression pattern is not matched in the current instance, the method returns the current instance unchanged.","pos":[0,251],"nodes":[{"content":"A new string that is identical to the input string, except that the replacement string takes the place of each matched string.","pos":[0,126]},{"content":"If the regular expression pattern is not matched in the current instance, the method returns the current instance unchanged.","pos":[127,251]}]}]}],"pos":[271297,271549],"yaml":true},{"content":"<code>input</code> or <code>replacement</code> is `null`.","nodes":[{"pos":[0,57],"content":"<ph id=\"ph1\">&lt;code&gt;input&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;replacement&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>input</code> or <code>replacement</code> is `null`."}],"pos":[271723,271781],"yaml":true},{"content":"<code>startat</code> is less than zero or greater than the length of <code>input</code>.","nodes":[{"pos":[0,88],"content":"<ph id=\"ph1\">&lt;code&gt;startat&lt;/code&gt;</ph> is less than zero or greater than the length of <ph id=\"ph2\">&lt;code&gt;input&lt;/code&gt;</ph>.","source":"<code>startat</code> is less than zero or greater than the length of <code>input</code>."}],"pos":[271895,271984],"yaml":true},{"content":"A time-out occurred. For more information about time-outs, see the Remarks section.","nodes":[{"pos":[0,83],"content":"A time-out occurred. For more information about time-outs, see the Remarks section.","nodes":[{"content":"A time-out occurred. For more information about time-outs, see the Remarks section.","pos":[0,83],"nodes":[{"content":"A time-out occurred.","pos":[0,20]},{"content":"For more information about time-outs, see the Remarks section.","pos":[21,83]}]}]}],"pos":[272144,272228],"yaml":true},{"content":"In a specified input string, replaces all strings that match a specified regular expression with a specified replacement string. Specified options modify the matching operation.","nodes":[{"pos":[0,177],"content":"In a specified input string, replaces all strings that match a specified regular expression with a specified replacement string. Specified options modify the matching operation.","nodes":[{"content":"In a specified input string, replaces all strings that match a specified regular expression with a specified replacement string. Specified options modify the matching operation.","pos":[0,177],"nodes":[{"content":"In a specified input string, replaces all strings that match a specified regular expression with a specified replacement string.","pos":[0,128]},{"content":"Specified options modify the matching operation.","pos":[129,177]}]}]}],"pos":[274051,274229],"yaml":true},{"content":"The static `Replace` methods are equivalent to constructing a <xref:System.Text.RegularExpressions.Regex> object with the specified regular expression pattern and calling the instance method `Replace`.  \n  \n The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match. For more information about regular expressions, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md). If you specify <xref:System.Text.RegularExpressions.RegexOptions.RightToLeft> for the `options` parameter, the search for matches begins at the end of the input string and moves left; otherwise, the search begins at the start of the input string and moves right.  \n  \n The `replacement` parameter specifies the string that is to replace each match in `input`. `replacement` can consist of any combination of literal text and [substitutions](~/docs/standard/base-types/substitutions-in-regular-expressions.md). For example, the replacement pattern `a*${test}b` inserts the string \"a*\" followed by the substring that is matched by the `test` capturing group, if any, followed by the string \"b\". The * character is not recognized as a metacharacter within a replacement pattern.  \n  \n> [!NOTE]\n>  Substitutions are the only regular expression language elements that are recognized in a replacement pattern. All other regular expression language elements, including [character escapes](~/docs/standard/base-types/character-escapes-in-regular-expressions.md), are allowed in regular expression patterns only and are not recognized in replacement patterns.  \n  \n The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the replacement operation exceeds the time-out interval specified for the application domain in which the method is called. If no time-out is defined in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, no exception is thrown.  \n  \n Because the method returns `input` unchanged if there is no match, you can use the <xref:System.Object.ReferenceEquals%2A?displayProperty=fullName> method to determine whether the method has made any replacements to the input string.","nodes":[{"pos":[0,201],"content":"The static <ph id=\"ph1\">`Replace`</ph> methods are equivalent to constructing a <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.Regex&gt;</ph> object with the specified regular expression pattern and calling the instance method <ph id=\"ph3\">`Replace`</ph>.","source":"The static `Replace` methods are equivalent to constructing a <xref:System.Text.RegularExpressions.Regex> object with the specified regular expression pattern and calling the instance method `Replace`."},{"pos":[208,859],"content":"The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match. For more information about regular expressions, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md). If you specify <xref:System.Text.RegularExpressions.RegexOptions.RightToLeft> for the `options` parameter, the search for matches begins at the end of the input string and moves left; otherwise, the search begins at the start of the input string and moves right.","nodes":[{"content":"The <ph id=\"ph1\">`pattern`</ph> parameter consists of regular expression language elements that symbolically describe the string to match.","pos":[0,120],"source":"The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match."},{"content":"For more information about regular expressions, see <bpt id=\"p1\">[</bpt>.NET Framework Regular Expressions<ept id=\"p1\">](~/docs/standard/base-types/regular-expressions.md)</ept> and <bpt id=\"p2\">[</bpt>Regular Expression Language - Quick Reference<ept id=\"p2\">](~/docs/standard/base-types/regular-expression-language-quick-reference.md)</ept>.","pos":[121,388],"source":" For more information about regular expressions, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md)."},{"content":"If you specify <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.RegexOptions.RightToLeft&gt;</ph> for the <ph id=\"ph2\">`options`</ph> parameter, the search for matches begins at the end of the input string and moves left; otherwise, the search begins at the start of the input string and moves right.","pos":[389,651],"source":" If you specify <xref:System.Text.RegularExpressions.RegexOptions.RightToLeft> for the `options` parameter, the search for matches begins at the end of the input string and moves left; otherwise, the search begins at the start of the input string and moves right."}]},{"pos":[866,1372],"content":"The `replacement` parameter specifies the string that is to replace each match in `input`. `replacement` can consist of any combination of literal text and [substitutions](~/docs/standard/base-types/substitutions-in-regular-expressions.md). For example, the replacement pattern `a*${test}b` inserts the string \"a*\" followed by the substring that is matched by the `test` capturing group, if any, followed by the string \"b\". The * character is not recognized as a metacharacter within a replacement pattern.","nodes":[{"content":"The <ph id=\"ph1\">`replacement`</ph> parameter specifies the string that is to replace each match in <ph id=\"ph2\">`input`</ph>.","pos":[0,90],"source":"The `replacement` parameter specifies the string that is to replace each match in `input`."},{"content":"<ph id=\"ph1\">`replacement`</ph> can consist of any combination of literal text and <bpt id=\"p1\">[</bpt>substitutions<ept id=\"p1\">](~/docs/standard/base-types/substitutions-in-regular-expressions.md)</ept>.","pos":[91,240],"source":"`replacement` can consist of any combination of literal text and [substitutions](~/docs/standard/base-types/substitutions-in-regular-expressions.md)."},{"content":"For example, the replacement pattern <ph id=\"ph1\">`a*${test}b`</ph> inserts the string \"a*\" followed by the substring that is matched by the <ph id=\"ph2\">`test`</ph> capturing group, if any, followed by the string \"b\".","pos":[241,423],"source":" For example, the replacement pattern `a*${test}b` inserts the string \"a*\" followed by the substring that is matched by the `test` capturing group, if any, followed by the string \"b\"."},{"content":"The * character is not recognized as a metacharacter within a replacement pattern.","pos":[424,506]}]},{"pos":[1380,1747],"content":"[!NOTE]\n Substitutions are the only regular expression language elements that are recognized in a replacement pattern. All other regular expression language elements, including [character escapes](~/docs/standard/base-types/character-escapes-in-regular-expressions.md), are allowed in regular expression patterns only and are not recognized in replacement patterns.","leadings":["","> "],"nodes":[{"content":" Substitutions are the only regular expression language elements that are recognized in a replacement pattern. All other regular expression language elements, including [character escapes](~/docs/standard/base-types/character-escapes-in-regular-expressions.md), are allowed in regular expression patterns only and are not recognized in replacement patterns.","pos":[8,365],"nodes":[{"content":"Substitutions are the only regular expression language elements that are recognized in a replacement pattern.","pos":[1,110]},{"content":"All other regular expression language elements, including <bpt id=\"p1\">[</bpt>character escapes<ept id=\"p1\">](~/docs/standard/base-types/character-escapes-in-regular-expressions.md)</ept>, are allowed in regular expression patterns only and are not recognized in replacement patterns.","pos":[111,357],"source":" All other regular expression language elements, including [character escapes](~/docs/standard/base-types/character-escapes-in-regular-expressions.md), are allowed in regular expression patterns only and are not recognized in replacement patterns."}]}]},{"pos":[1754,2200],"content":"The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the replacement operation exceeds the time-out interval specified for the application domain in which the method is called. If no time-out is defined in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, no exception is thrown.","nodes":[{"content":"The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the replacement operation exceeds the time-out interval specified for the application domain in which the method is called. If no time-out is defined in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, no exception is thrown.","pos":[0,446],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.RegexMatchTimeoutException&gt;</ph> exception is thrown if the execution time of the replacement operation exceeds the time-out interval specified for the application domain in which the method is called.","pos":[0,237],"source":"The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the replacement operation exceeds the time-out interval specified for the application domain in which the method is called."},{"content":"If no time-out is defined in the application domain's properties, or if the time-out value is <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName&gt;</ph>, no exception is thrown.","pos":[238,446],"source":" If no time-out is defined in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, no exception is thrown."}]}]},{"pos":[2207,2440],"content":"Because the method returns <ph id=\"ph1\">`input`</ph> unchanged if there is no match, you can use the <ph id=\"ph2\">&lt;xref:System.Object.ReferenceEquals%2A?displayProperty=fullName&gt;</ph> method to determine whether the method has made any replacements to the input string.","source":"Because the method returns `input` unchanged if there is no match, you can use the <xref:System.Object.ReferenceEquals%2A?displayProperty=fullName> method to determine whether the method has made any replacements to the input string."}],"pos":[274240,276698],"yaml":true,"extradata":"MT"},{"content":"The string to search for a match.","nodes":[{"pos":[0,33],"content":"The string to search for a match.","nodes":[{"content":"The string to search for a match.","pos":[0,33]}]}],"pos":[279328,279362],"yaml":true},{"content":"The regular expression pattern to match.","nodes":[{"pos":[0,40],"content":"The regular expression pattern to match.","nodes":[{"content":"The regular expression pattern to match.","pos":[0,40]}]}],"pos":[279425,279466],"yaml":true},{"content":"The replacement string.","nodes":[{"pos":[0,23],"content":"The replacement string.","nodes":[{"content":"The replacement string.","pos":[0,23]}]}],"pos":[279533,279557],"yaml":true},{"content":"A bitwise combination of the enumeration values that provide options for matching.","nodes":[{"pos":[0,82],"content":"A bitwise combination of the enumeration values that provide options for matching.","nodes":[{"content":"A bitwise combination of the enumeration values that provide options for matching.","pos":[0,82]}]}],"pos":[279650,279733],"yaml":true},{"content":"A new string that is identical to the input string, except that the replacement string takes the place of each matched string. If <code>pattern</code> is not matched in the current instance, the method returns the current instance unchanged.","nodes":[{"pos":[0,241],"content":"A new string that is identical to the input string, except that the replacement string takes the place of each matched string. If <code>pattern</code> is not matched in the current instance, the method returns the current instance unchanged.","nodes":[{"content":"A new string that is identical to the input string, except that the replacement string takes the place of each matched string.","pos":[0,126]},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">pattern</ph><ept id=\"p1\">&lt;/code&gt;</ept> is not matched in the current instance, the method returns the current instance unchanged.","pos":[127,241],"source":" If <code>pattern</code> is not matched in the current instance, the method returns the current instance unchanged."}]}],"pos":[279790,280032],"yaml":true},{"content":"A regular expression parsing error occurred.","nodes":[{"pos":[0,44],"content":"A regular expression parsing error occurred.","nodes":[{"content":"A regular expression parsing error occurred.","pos":[0,44]}]}],"pos":[280198,280243],"yaml":true},{"content":"<code>input</code>, <code>pattern</code>, or <code>replacement</code> is `null`.","nodes":[{"pos":[0,80],"content":"<ph id=\"ph1\">&lt;code&gt;input&lt;/code&gt;</ph>, <ph id=\"ph2\">&lt;code&gt;pattern&lt;/code&gt;</ph>, or <ph id=\"ph3\">&lt;code&gt;replacement&lt;/code&gt;</ph> is <ph id=\"ph4\">`null`</ph>.","source":"<code>input</code>, <code>pattern</code>, or <code>replacement</code> is `null`."}],"pos":[280345,280426],"yaml":true},{"content":"<code>options</code> is not a valid bitwise combination of <xref href=\"System.Text.RegularExpressions.RegexOptions\"></xref> values.","nodes":[{"pos":[0,131],"content":"<ph id=\"ph1\">&lt;code&gt;options&lt;/code&gt;</ph> is not a valid bitwise combination of <ph id=\"ph2\">&lt;xref href=\"System.Text.RegularExpressions.RegexOptions\"&gt;&lt;/xref&gt;</ph> values.","source":"<code>options</code> is not a valid bitwise combination of <xref href=\"System.Text.RegularExpressions.RegexOptions\"></xref> values."}],"pos":[280540,280672],"yaml":true},{"content":"A time-out occurred. For more information about time-outs, see the Remarks section.","nodes":[{"pos":[0,83],"content":"A time-out occurred. For more information about time-outs, see the Remarks section.","nodes":[{"content":"A time-out occurred. For more information about time-outs, see the Remarks section.","pos":[0,83],"nodes":[{"content":"A time-out occurred.","pos":[0,20]},{"content":"For more information about time-outs, see the Remarks section.","pos":[21,83]}]}]}],"pos":[280832,280916],"yaml":true},{"content":"In a specified input string, replaces all strings that match a specified regular expression with a string returned by a <xref href=\"System.Text.RegularExpressions.MatchEvaluator\"></xref> delegate.","nodes":[{"pos":[0,196],"content":"In a specified input string, replaces all strings that match a specified regular expression with a string returned by a <ph id=\"ph1\">&lt;xref href=\"System.Text.RegularExpressions.MatchEvaluator\"&gt;&lt;/xref&gt;</ph> delegate.","source":"In a specified input string, replaces all strings that match a specified regular expression with a string returned by a <xref href=\"System.Text.RegularExpressions.MatchEvaluator\"></xref> delegate."}],"pos":[282685,282882],"yaml":true},{"content":"The <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.MatchEvaluator%29?displayProperty=fullName> method is useful for replacing a regular expression match if any of the following conditions is true:  \n  \n-   The replacement string cannot readily be specified by a regular expression replacement pattern.  \n  \n-   The replacement string results from some processing done on the matched string.  \n  \n-   The replacement string results from conditional processing.  \n  \n The method is equivalent to calling the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%29?displayProperty=fullName> method and passing each <xref:System.Text.RegularExpressions.Match> object in the returned <xref:System.Text.RegularExpressions.MatchCollection> collection to the `evaluator` delegate.  \n  \n The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match. For more information about regular expressions, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).  \n  \n The `evaluator` parameter is the delegate for a custom method that you define and that examines each match. The custom method must have the following signature to match the <xref:System.Text.RegularExpressions.MatchEvaluator> delegate.  \n  \n [!code-csharp[System.Text.RegularExpressions.Regex.Replace#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/syntax1.cs#1)]\n [!code-vb[System.Text.RegularExpressions.Regex.Replace#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/syntax1.vb#1)]  \n  \n Your custom method returns a string that replaces the matched input.  \n  \n The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the replacement operation exceeds the time-out interval specified for the application domain in which the method is called. If no time-out is defined in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, no exception is thrown.  \n  \n Because the method returns `input` unchanged if there is no match, you can use the <xref:System.Object.ReferenceEquals%2A?displayProperty=fullName> method to determine whether the method has made any replacements to the input string.","nodes":[{"pos":[0,265],"content":"The <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.MatchEvaluator%29?displayProperty=fullName> method is useful for replacing a regular expression match if any of the following conditions is true:","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.MatchEvaluator%29?displayProperty=fullName&gt;</ph> method is useful for replacing a regular expression match if any of the following conditions is true:","pos":[0,265],"source":"The <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.MatchEvaluator%29?displayProperty=fullName> method is useful for replacing a regular expression match if any of the following conditions is true:"}]},{"pos":[275,370],"content":"The replacement string cannot readily be specified by a regular expression replacement pattern.","nodes":[{"content":"The replacement string cannot readily be specified by a regular expression replacement pattern.","pos":[0,95]}]},{"pos":[380,459],"content":"The replacement string results from some processing done on the matched string.","nodes":[{"content":"The replacement string results from some processing done on the matched string.","pos":[0,79]}]},{"pos":[469,528],"content":"The replacement string results from conditional processing.","nodes":[{"content":"The replacement string results from conditional processing.","pos":[0,59]}]},{"pos":[535,871],"content":"The method is equivalent to calling the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%29?displayProperty=fullName&gt;</ph> method and passing each <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.Match&gt;</ph> object in the returned <ph id=\"ph3\">&lt;xref:System.Text.RegularExpressions.MatchCollection&gt;</ph> collection to the <ph id=\"ph4\">`evaluator`</ph> delegate.","source":"The method is equivalent to calling the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%29?displayProperty=fullName> method and passing each <xref:System.Text.RegularExpressions.Match> object in the returned <xref:System.Text.RegularExpressions.MatchCollection> collection to the `evaluator` delegate."},{"pos":[878,1266],"content":"The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match. For more information about regular expressions, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).","nodes":[{"content":"The <ph id=\"ph1\">`pattern`</ph> parameter consists of regular expression language elements that symbolically describe the string to match.","pos":[0,120],"source":"The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match."},{"content":"For more information about regular expressions, see <bpt id=\"p1\">[</bpt>.NET Framework Regular Expressions<ept id=\"p1\">](~/docs/standard/base-types/regular-expressions.md)</ept> and <bpt id=\"p2\">[</bpt>Regular Expression Language - Quick Reference<ept id=\"p2\">](~/docs/standard/base-types/regular-expression-language-quick-reference.md)</ept>.","pos":[121,388],"source":" For more information about regular expressions, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md)."}]},{"pos":[1273,1508],"content":"The `evaluator` parameter is the delegate for a custom method that you define and that examines each match. The custom method must have the following signature to match the <xref:System.Text.RegularExpressions.MatchEvaluator> delegate.","nodes":[{"content":"The <ph id=\"ph1\">`evaluator`</ph> parameter is the delegate for a custom method that you define and that examines each match.","pos":[0,107],"source":"The `evaluator` parameter is the delegate for a custom method that you define and that examines each match."},{"content":"The custom method must have the following signature to match the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.MatchEvaluator&gt;</ph> delegate.","pos":[108,235],"source":" The custom method must have the following signature to match the <xref:System.Text.RegularExpressions.MatchEvaluator> delegate."}]},{"pos":[1515,1864],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Text.RegularExpressions.Regex.Replace#1<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/syntax1.cs#1)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Text.RegularExpressions.Regex.Replace#1<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/syntax1.vb#1)</ept><ept id=\"p3\">]</ept>","leadings":[""," "],"source":"[!code-csharp[System.Text.RegularExpressions.Regex.Replace#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/syntax1.cs#1)]\n[!code-vb[System.Text.RegularExpressions.Regex.Replace#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/syntax1.vb#1)]"},{"pos":[1871,1939],"content":"Your custom method returns a string that replaces the matched input.","nodes":[{"content":"Your custom method returns a string that replaces the matched input.","pos":[0,68]}]},{"pos":[1946,2392],"content":"The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the replacement operation exceeds the time-out interval specified for the application domain in which the method is called. If no time-out is defined in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, no exception is thrown.","nodes":[{"content":"The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the replacement operation exceeds the time-out interval specified for the application domain in which the method is called. If no time-out is defined in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, no exception is thrown.","pos":[0,446],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.RegexMatchTimeoutException&gt;</ph> exception is thrown if the execution time of the replacement operation exceeds the time-out interval specified for the application domain in which the method is called.","pos":[0,237],"source":"The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the replacement operation exceeds the time-out interval specified for the application domain in which the method is called."},{"content":"If no time-out is defined in the application domain's properties, or if the time-out value is <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName&gt;</ph>, no exception is thrown.","pos":[238,446],"source":" If no time-out is defined in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, no exception is thrown."}]}]},{"pos":[2399,2632],"content":"Because the method returns <ph id=\"ph1\">`input`</ph> unchanged if there is no match, you can use the <ph id=\"ph2\">&lt;xref:System.Object.ReferenceEquals%2A?displayProperty=fullName&gt;</ph> method to determine whether the method has made any replacements to the input string.","source":"Because the method returns `input` unchanged if there is no match, you can use the <xref:System.Object.ReferenceEquals%2A?displayProperty=fullName> method to determine whether the method has made any replacements to the input string."}],"pos":[282893,285549],"yaml":true,"extradata":"MT"},{"content":"The string to search for a match.","nodes":[{"pos":[0,33],"content":"The string to search for a match.","nodes":[{"content":"The string to search for a match.","pos":[0,33]}]}],"pos":[287172,287206],"yaml":true},{"content":"The regular expression pattern to match.","nodes":[{"pos":[0,40],"content":"The regular expression pattern to match.","nodes":[{"content":"The regular expression pattern to match.","pos":[0,40]}]}],"pos":[287269,287310],"yaml":true},{"content":"A custom method that examines each match and returns either the original matched string or a replacement string.","nodes":[{"pos":[0,112],"content":"A custom method that examines each match and returns either the original matched string or a replacement string.","nodes":[{"content":"A custom method that examines each match and returns either the original matched string or a replacement string.","pos":[0,112]}]}],"pos":[287407,287520],"yaml":true},{"content":"A new string that is identical to the input string, except that a replacement string takes the place of each matched string. If <code>pattern</code> is not matched in the current instance, the method returns the current instance unchanged.","nodes":[{"pos":[0,239],"content":"A new string that is identical to the input string, except that a replacement string takes the place of each matched string. If <code>pattern</code> is not matched in the current instance, the method returns the current instance unchanged.","nodes":[{"content":"A new string that is identical to the input string, except that a replacement string takes the place of each matched string.","pos":[0,124]},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">pattern</ph><ept id=\"p1\">&lt;/code&gt;</ept> is not matched in the current instance, the method returns the current instance unchanged.","pos":[125,239],"source":" If <code>pattern</code> is not matched in the current instance, the method returns the current instance unchanged."}]}],"pos":[287577,287817],"yaml":true},{"content":"A regular expression parsing error occurred.","nodes":[{"pos":[0,44],"content":"A regular expression parsing error occurred.","nodes":[{"content":"A regular expression parsing error occurred.","pos":[0,44]}]}],"pos":[287983,288028],"yaml":true},{"content":"<code>input</code>, <code>pattern</code>, or <code>evaluator</code> is `null`.","nodes":[{"pos":[0,78],"content":"<ph id=\"ph1\">&lt;code&gt;input&lt;/code&gt;</ph>, <ph id=\"ph2\">&lt;code&gt;pattern&lt;/code&gt;</ph>, or <ph id=\"ph3\">&lt;code&gt;evaluator&lt;/code&gt;</ph> is <ph id=\"ph4\">`null`</ph>.","source":"<code>input</code>, <code>pattern</code>, or <code>evaluator</code> is `null`."}],"pos":[288130,288209],"yaml":true},{"content":"A time-out occurred. For more information about time-outs, see the Remarks section.","nodes":[{"pos":[0,83],"content":"A time-out occurred. For more information about time-outs, see the Remarks section.","nodes":[{"content":"A time-out occurred. For more information about time-outs, see the Remarks section.","pos":[0,83],"nodes":[{"content":"A time-out occurred.","pos":[0,20]},{"content":"For more information about time-outs, see the Remarks section.","pos":[21,83]}]}]}],"pos":[288369,288453],"yaml":true},{"content":"In a specified input string, replaces all strings that match a specified regular expression with a specified replacement string.","nodes":[{"pos":[0,128],"content":"In a specified input string, replaces all strings that match a specified regular expression with a specified replacement string.","nodes":[{"content":"In a specified input string, replaces all strings that match a specified regular expression with a specified replacement string.","pos":[0,128]}]}],"pos":[290102,290231],"yaml":true},{"content":"The static `Replace` methods are equivalent to constructing a <xref:System.Text.RegularExpressions.Regex> object with the specified regular expression pattern and calling the instance method `Replace`.  \n  \n The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match. For more information about regular expressions, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md). The search for matches starts at the beginning of the `input` string.  \n  \n The `replacement` parameter specifies the string that is to replace each match in `input`. `replacement` can consist of any combination of literal text and [substitutions](~/docs/standard/base-types/substitutions-in-regular-expressions.md). For example, the replacement pattern `a*${test}b` inserts the string \"a*\" followed by the substring that is matched by the `test` capturing group, if any, followed by the string \"b\". The * character is not recognized as a metacharacter within a replacement pattern.  \n  \n> [!NOTE]\n>  Substitutions are the only regular expression language elements that are recognized in a replacement pattern. All other regular expression language elements, including [character escapes](~/docs/standard/base-types/character-escapes-in-regular-expressions.md), are allowed in regular expression patterns only and are not recognized in replacement patterns.  \n  \n The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the replacement operation exceeds the time-out interval specified for the application domain in which the method is called. If no time-out is defined in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, no exception is thrown.  \n  \n Because the method returns `input` unchanged if there is no match, you can use the <xref:System.Object.ReferenceEquals%2A?displayProperty=fullName> method to determine whether the method has made any replacements to the input string.","nodes":[{"pos":[0,201],"content":"The static <ph id=\"ph1\">`Replace`</ph> methods are equivalent to constructing a <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.Regex&gt;</ph> object with the specified regular expression pattern and calling the instance method <ph id=\"ph3\">`Replace`</ph>.","source":"The static `Replace` methods are equivalent to constructing a <xref:System.Text.RegularExpressions.Regex> object with the specified regular expression pattern and calling the instance method `Replace`."},{"pos":[208,666],"content":"The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match. For more information about regular expressions, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md). The search for matches starts at the beginning of the `input` string.","nodes":[{"content":"The <ph id=\"ph1\">`pattern`</ph> parameter consists of regular expression language elements that symbolically describe the string to match.","pos":[0,120],"source":"The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match."},{"content":"For more information about regular expressions, see <bpt id=\"p1\">[</bpt>.NET Framework Regular Expressions<ept id=\"p1\">](~/docs/standard/base-types/regular-expressions.md)</ept> and <bpt id=\"p2\">[</bpt>Regular Expression Language - Quick Reference<ept id=\"p2\">](~/docs/standard/base-types/regular-expression-language-quick-reference.md)</ept>.","pos":[121,388],"source":" For more information about regular expressions, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md)."},{"content":"The search for matches starts at the beginning of the <ph id=\"ph1\">`input`</ph> string.","pos":[389,458],"source":" The search for matches starts at the beginning of the `input` string."}]},{"pos":[673,1179],"content":"The `replacement` parameter specifies the string that is to replace each match in `input`. `replacement` can consist of any combination of literal text and [substitutions](~/docs/standard/base-types/substitutions-in-regular-expressions.md). For example, the replacement pattern `a*${test}b` inserts the string \"a*\" followed by the substring that is matched by the `test` capturing group, if any, followed by the string \"b\". The * character is not recognized as a metacharacter within a replacement pattern.","nodes":[{"content":"The <ph id=\"ph1\">`replacement`</ph> parameter specifies the string that is to replace each match in <ph id=\"ph2\">`input`</ph>.","pos":[0,90],"source":"The `replacement` parameter specifies the string that is to replace each match in `input`."},{"content":"<ph id=\"ph1\">`replacement`</ph> can consist of any combination of literal text and <bpt id=\"p1\">[</bpt>substitutions<ept id=\"p1\">](~/docs/standard/base-types/substitutions-in-regular-expressions.md)</ept>.","pos":[91,240],"source":"`replacement` can consist of any combination of literal text and [substitutions](~/docs/standard/base-types/substitutions-in-regular-expressions.md)."},{"content":"For example, the replacement pattern <ph id=\"ph1\">`a*${test}b`</ph> inserts the string \"a*\" followed by the substring that is matched by the <ph id=\"ph2\">`test`</ph> capturing group, if any, followed by the string \"b\".","pos":[241,423],"source":" For example, the replacement pattern `a*${test}b` inserts the string \"a*\" followed by the substring that is matched by the `test` capturing group, if any, followed by the string \"b\"."},{"content":"The * character is not recognized as a metacharacter within a replacement pattern.","pos":[424,506]}]},{"pos":[1187,1554],"content":"[!NOTE]\n Substitutions are the only regular expression language elements that are recognized in a replacement pattern. All other regular expression language elements, including [character escapes](~/docs/standard/base-types/character-escapes-in-regular-expressions.md), are allowed in regular expression patterns only and are not recognized in replacement patterns.","leadings":["","> "],"nodes":[{"content":" Substitutions are the only regular expression language elements that are recognized in a replacement pattern. All other regular expression language elements, including [character escapes](~/docs/standard/base-types/character-escapes-in-regular-expressions.md), are allowed in regular expression patterns only and are not recognized in replacement patterns.","pos":[8,365],"nodes":[{"content":"Substitutions are the only regular expression language elements that are recognized in a replacement pattern.","pos":[1,110]},{"content":"All other regular expression language elements, including <bpt id=\"p1\">[</bpt>character escapes<ept id=\"p1\">](~/docs/standard/base-types/character-escapes-in-regular-expressions.md)</ept>, are allowed in regular expression patterns only and are not recognized in replacement patterns.","pos":[111,357],"source":" All other regular expression language elements, including [character escapes](~/docs/standard/base-types/character-escapes-in-regular-expressions.md), are allowed in regular expression patterns only and are not recognized in replacement patterns."}]}]},{"pos":[1561,2007],"content":"The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the replacement operation exceeds the time-out interval specified for the application domain in which the method is called. If no time-out is defined in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, no exception is thrown.","nodes":[{"content":"The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the replacement operation exceeds the time-out interval specified for the application domain in which the method is called. If no time-out is defined in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, no exception is thrown.","pos":[0,446],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.RegexMatchTimeoutException&gt;</ph> exception is thrown if the execution time of the replacement operation exceeds the time-out interval specified for the application domain in which the method is called.","pos":[0,237],"source":"The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the replacement operation exceeds the time-out interval specified for the application domain in which the method is called."},{"content":"If no time-out is defined in the application domain's properties, or if the time-out value is <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName&gt;</ph>, no exception is thrown.","pos":[238,446],"source":" If no time-out is defined in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, no exception is thrown."}]}]},{"pos":[2014,2247],"content":"Because the method returns <ph id=\"ph1\">`input`</ph> unchanged if there is no match, you can use the <ph id=\"ph2\">&lt;xref:System.Object.ReferenceEquals%2A?displayProperty=fullName&gt;</ph> method to determine whether the method has made any replacements to the input string.","source":"Because the method returns `input` unchanged if there is no match, you can use the <xref:System.Object.ReferenceEquals%2A?displayProperty=fullName> method to determine whether the method has made any replacements to the input string."}],"pos":[290242,292507],"yaml":true,"extradata":"MT"},{"content":"The string to search for a match.","nodes":[{"pos":[0,33],"content":"The string to search for a match.","nodes":[{"content":"The string to search for a match.","pos":[0,33]}]}],"pos":[295629,295663],"yaml":true},{"content":"The regular expression pattern to match.","nodes":[{"pos":[0,40],"content":"The regular expression pattern to match.","nodes":[{"content":"The regular expression pattern to match.","pos":[0,40]}]}],"pos":[295726,295767],"yaml":true},{"content":"The replacement string.","nodes":[{"pos":[0,23],"content":"The replacement string.","nodes":[{"content":"The replacement string.","pos":[0,23]}]}],"pos":[295834,295858],"yaml":true},{"content":"A new string that is identical to the input string, except that the replacement string takes the place of each matched string. If <code>pattern</code> is not matched in the current instance, the method returns the current instance unchanged.","nodes":[{"pos":[0,241],"content":"A new string that is identical to the input string, except that the replacement string takes the place of each matched string. If <code>pattern</code> is not matched in the current instance, the method returns the current instance unchanged.","nodes":[{"content":"A new string that is identical to the input string, except that the replacement string takes the place of each matched string.","pos":[0,126]},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">pattern</ph><ept id=\"p1\">&lt;/code&gt;</ept> is not matched in the current instance, the method returns the current instance unchanged.","pos":[127,241],"source":" If <code>pattern</code> is not matched in the current instance, the method returns the current instance unchanged."}]}],"pos":[295915,296157],"yaml":true},{"content":"A regular expression parsing error occurred.","nodes":[{"pos":[0,44],"content":"A regular expression parsing error occurred.","nodes":[{"content":"A regular expression parsing error occurred.","pos":[0,44]}]}],"pos":[296323,296368],"yaml":true},{"content":"<code>input</code>, <code>pattern</code>, or <code>replacement</code> is `null`.","nodes":[{"pos":[0,80],"content":"<ph id=\"ph1\">&lt;code&gt;input&lt;/code&gt;</ph>, <ph id=\"ph2\">&lt;code&gt;pattern&lt;/code&gt;</ph>, or <ph id=\"ph3\">&lt;code&gt;replacement&lt;/code&gt;</ph> is <ph id=\"ph4\">`null`</ph>.","source":"<code>input</code>, <code>pattern</code>, or <code>replacement</code> is `null`."}],"pos":[296470,296551],"yaml":true},{"content":"A time-out occurred. For more information about time-outs, see the Remarks section.","nodes":[{"pos":[0,83],"content":"A time-out occurred. For more information about time-outs, see the Remarks section.","nodes":[{"content":"A time-out occurred. For more information about time-outs, see the Remarks section.","pos":[0,83],"nodes":[{"content":"A time-out occurred.","pos":[0,20]},{"content":"For more information about time-outs, see the Remarks section.","pos":[21,83]}]}]}],"pos":[296711,296795],"yaml":true},{"content":"In a specified input string, replaces a specified maximum number of strings that match a regular expression pattern with a specified replacement string.","nodes":[{"pos":[0,152],"content":"In a specified input string, replaces a specified maximum number of strings that match a regular expression pattern with a specified replacement string.","nodes":[{"content":"In a specified input string, replaces a specified maximum number of strings that match a regular expression pattern with a specified replacement string.","pos":[0,152]}]}],"pos":[298438,298591],"yaml":true},{"content":"The search for matches starts at the beginning of the `input` string. The regular expression is the pattern that is defined by the constructor for the current <xref:System.Text.RegularExpressions.Regex> object. If `count` is negative, replacements continue to the end of the string. If `count` exceeds the number of matches, all matches are replaced.  \n  \n The `replacement` parameter specifies the string that is to replace the first `count` matches in `input`. `replacement` can consist of any combination of literal text and [substitutions](~/docs/standard/base-types/substitutions-in-regular-expressions.md). For example, the replacement pattern `a*${test}b` inserts the string \"a*\" followed by the substring that is matched by the `test` capturing group, if any, followed by the string \"b\". The * character is not recognized as a metacharacter within a replacement pattern.  \n  \n> [!NOTE]\n>  Substitutions are the only regular expression language elements that are recognized in a replacement pattern. All other regular expression language elements, including [character escapes](~/docs/standard/base-types/character-escapes-in-regular-expressions.md), are allowed in regular expression patterns only and are not recognized in replacement patterns.  \n  \n The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the replacement operation exceeds the time-out interval specified by the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=fullName> constructor. If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <xref:System.Text.RegularExpressions.Regex> object is created. If no time-out is defined in the <xref:System.Text.RegularExpressions.Regex> constructor call or in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, no exception is thrown  \n  \n Because the method returns `input` unchanged if there is no match, you can use the <xref:System.Object.ReferenceEquals%2A?displayProperty=fullName> method to determine whether the method has made any replacements to the input string.","nodes":[{"pos":[0,350],"content":"The search for matches starts at the beginning of the `input` string. The regular expression is the pattern that is defined by the constructor for the current <xref:System.Text.RegularExpressions.Regex> object. If `count` is negative, replacements continue to the end of the string. If `count` exceeds the number of matches, all matches are replaced.","nodes":[{"content":"The search for matches starts at the beginning of the <ph id=\"ph1\">`input`</ph> string.","pos":[0,69],"source":"The search for matches starts at the beginning of the `input` string."},{"content":"The regular expression is the pattern that is defined by the constructor for the current <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex&gt;</ph> object.","pos":[70,210],"source":" The regular expression is the pattern that is defined by the constructor for the current <xref:System.Text.RegularExpressions.Regex> object."},{"content":"If <ph id=\"ph1\">`count`</ph> is negative, replacements continue to the end of the string.","pos":[211,282],"source":" If `count` is negative, replacements continue to the end of the string."},{"content":"If <ph id=\"ph1\">`count`</ph> exceeds the number of matches, all matches are replaced.","pos":[283,350],"source":" If `count` exceeds the number of matches, all matches are replaced."}]},{"pos":[357,878],"content":"The `replacement` parameter specifies the string that is to replace the first `count` matches in `input`. `replacement` can consist of any combination of literal text and [substitutions](~/docs/standard/base-types/substitutions-in-regular-expressions.md). For example, the replacement pattern `a*${test}b` inserts the string \"a*\" followed by the substring that is matched by the `test` capturing group, if any, followed by the string \"b\". The * character is not recognized as a metacharacter within a replacement pattern.","nodes":[{"content":"The <ph id=\"ph1\">`replacement`</ph> parameter specifies the string that is to replace the first <ph id=\"ph2\">`count`</ph> matches in <ph id=\"ph3\">`input`</ph>.","pos":[0,105],"source":"The `replacement` parameter specifies the string that is to replace the first `count` matches in `input`."},{"content":"<ph id=\"ph1\">`replacement`</ph> can consist of any combination of literal text and <bpt id=\"p1\">[</bpt>substitutions<ept id=\"p1\">](~/docs/standard/base-types/substitutions-in-regular-expressions.md)</ept>.","pos":[106,255],"source":"`replacement` can consist of any combination of literal text and [substitutions](~/docs/standard/base-types/substitutions-in-regular-expressions.md)."},{"content":"For example, the replacement pattern <ph id=\"ph1\">`a*${test}b`</ph> inserts the string \"a*\" followed by the substring that is matched by the <ph id=\"ph2\">`test`</ph> capturing group, if any, followed by the string \"b\".","pos":[256,438],"source":" For example, the replacement pattern `a*${test}b` inserts the string \"a*\" followed by the substring that is matched by the `test` capturing group, if any, followed by the string \"b\"."},{"content":"The * character is not recognized as a metacharacter within a replacement pattern.","pos":[439,521]}]},{"pos":[886,1253],"content":"[!NOTE]\n Substitutions are the only regular expression language elements that are recognized in a replacement pattern. All other regular expression language elements, including [character escapes](~/docs/standard/base-types/character-escapes-in-regular-expressions.md), are allowed in regular expression patterns only and are not recognized in replacement patterns.","leadings":["","> "],"nodes":[{"content":" Substitutions are the only regular expression language elements that are recognized in a replacement pattern. All other regular expression language elements, including [character escapes](~/docs/standard/base-types/character-escapes-in-regular-expressions.md), are allowed in regular expression patterns only and are not recognized in replacement patterns.","pos":[8,365],"nodes":[{"content":"Substitutions are the only regular expression language elements that are recognized in a replacement pattern.","pos":[1,110]},{"content":"All other regular expression language elements, including <bpt id=\"p1\">[</bpt>character escapes<ept id=\"p1\">](~/docs/standard/base-types/character-escapes-in-regular-expressions.md)</ept>, are allowed in regular expression patterns only and are not recognized in replacement patterns.","pos":[111,357],"source":" All other regular expression language elements, including [character escapes](~/docs/standard/base-types/character-escapes-in-regular-expressions.md), are allowed in regular expression patterns only and are not recognized in replacement patterns."}]}]},{"pos":[1260,2150],"content":"The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the replacement operation exceeds the time-out interval specified by the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=fullName> constructor. If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <xref:System.Text.RegularExpressions.Regex> object is created. If no time-out is defined in the <xref:System.Text.RegularExpressions.Regex> constructor call or in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, no exception is thrown","nodes":[{"content":"The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the replacement operation exceeds the time-out interval specified by the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=fullName> constructor. If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <xref:System.Text.RegularExpressions.Regex> object is created. If no time-out is defined in the <xref:System.Text.RegularExpressions.Regex> constructor call or in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, no exception is thrown","pos":[0,890],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.RegexMatchTimeoutException&gt;</ph> exception is thrown if the execution time of the replacement operation exceeds the time-out interval specified by the <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=fullName&gt;</ph> constructor.","pos":[0,359],"source":"The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the replacement operation exceeds the time-out interval specified by the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=fullName> constructor."},{"content":"If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex&gt;</ph> object is created.","pos":[360,611],"source":" If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <xref:System.Text.RegularExpressions.Regex> object is created."},{"content":"If no time-out is defined in the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex&gt;</ph> constructor call or in the application domain's properties, or if the time-out value is <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName&gt;</ph>, no exception is thrown","pos":[612,890],"source":" If no time-out is defined in the <xref:System.Text.RegularExpressions.Regex> constructor call or in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, no exception is thrown"}]}]},{"pos":[2157,2390],"content":"Because the method returns <ph id=\"ph1\">`input`</ph> unchanged if there is no match, you can use the <ph id=\"ph2\">&lt;xref:System.Object.ReferenceEquals%2A?displayProperty=fullName&gt;</ph> method to determine whether the method has made any replacements to the input string.","source":"Because the method returns `input` unchanged if there is no match, you can use the <xref:System.Object.ReferenceEquals%2A?displayProperty=fullName> method to determine whether the method has made any replacements to the input string."}],"pos":[298602,301008],"yaml":true,"extradata":"MT"},{"content":"The string to search for a match.","nodes":[{"pos":[0,33],"content":"The string to search for a match.","nodes":[{"content":"The string to search for a match.","pos":[0,33]}]}],"pos":[301922,301956],"yaml":true},{"content":"The replacement string.","nodes":[{"pos":[0,23],"content":"The replacement string.","nodes":[{"content":"The replacement string.","pos":[0,23]}]}],"pos":[302023,302047],"yaml":true},{"content":"The maximum number of times the replacement can occur.","nodes":[{"pos":[0,54],"content":"The maximum number of times the replacement can occur.","nodes":[{"content":"The maximum number of times the replacement can occur.","pos":[0,54]}]}],"pos":[302107,302162],"yaml":true},{"content":"A new string that is identical to the input string, except that the replacement string takes the place of each matched string. If the regular expression pattern is not matched in the current instance, the method returns the current instance unchanged.","nodes":[{"pos":[0,251],"content":"A new string that is identical to the input string, except that the replacement string takes the place of each matched string. If the regular expression pattern is not matched in the current instance, the method returns the current instance unchanged.","nodes":[{"content":"A new string that is identical to the input string, except that the replacement string takes the place of each matched string. If the regular expression pattern is not matched in the current instance, the method returns the current instance unchanged.","pos":[0,251],"nodes":[{"content":"A new string that is identical to the input string, except that the replacement string takes the place of each matched string.","pos":[0,126]},{"content":"If the regular expression pattern is not matched in the current instance, the method returns the current instance unchanged.","pos":[127,251]}]}]}],"pos":[302219,302471],"yaml":true},{"content":"<code>input</code> or <code>replacement</code> is `null`.","nodes":[{"pos":[0,57],"content":"<ph id=\"ph1\">&lt;code&gt;input&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;replacement&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>input</code> or <code>replacement</code> is `null`."}],"pos":[302645,302703],"yaml":true},{"content":"A time-out occurred. For more information about time-outs, see the Remarks section.","nodes":[{"pos":[0,83],"content":"A time-out occurred. For more information about time-outs, see the Remarks section.","nodes":[{"content":"A time-out occurred. For more information about time-outs, see the Remarks section.","pos":[0,83],"nodes":[{"content":"A time-out occurred.","pos":[0,20]},{"content":"For more information about time-outs, see the Remarks section.","pos":[21,83]}]}]}],"pos":[302863,302947],"yaml":true},{"content":"In a specified input string, replaces all strings that match a specified regular expression with a string returned by a <xref href=\"System.Text.RegularExpressions.MatchEvaluator\"></xref> delegate.","nodes":[{"pos":[0,196],"content":"In a specified input string, replaces all strings that match a specified regular expression with a string returned by a <ph id=\"ph1\">&lt;xref href=\"System.Text.RegularExpressions.MatchEvaluator\"&gt;&lt;/xref&gt;</ph> delegate.","source":"In a specified input string, replaces all strings that match a specified regular expression with a string returned by a <xref href=\"System.Text.RegularExpressions.MatchEvaluator\"></xref> delegate."}],"pos":[304650,304847],"yaml":true},{"content":"The <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.Text.RegularExpressions.MatchEvaluator%29?displayProperty=fullName> method is useful for replacing a regular expression match if any of the following conditions is true:  \n  \n-   The replacement string cannot readily be specified by a regular expression replacement pattern.  \n  \n-   The replacement string results from some processing done on the matched string.  \n  \n-   The replacement string results from conditional processing.  \n  \n The method is equivalent to calling the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%29?displayProperty=fullName> method and passing each <xref:System.Text.RegularExpressions.Match> object in the returned <xref:System.Text.RegularExpressions.MatchCollection> collection to the `evaluator` delegate.  \n  \n The regular expression is the pattern defined by the constructor for the current <xref:System.Text.RegularExpressions.Regex> object.  \n  \n The `evaluator` parameter is the delegate for a custom method that you define and that examines each match. The custom method must have the following signature to match the <xref:System.Text.RegularExpressions.MatchEvaluator> delegate.  \n  \n [!code-csharp[System.Text.RegularExpressions.Regex.Replace#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/syntax1.cs#1)]\n [!code-vb[System.Text.RegularExpressions.Regex.Replace#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/syntax1.vb#1)]  \n  \n Your custom method returns a string that replaces the matched input.  \n  \n The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the replacement operation exceeds the time-out interval specified by the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=fullName> constructor. If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <xref:System.Text.RegularExpressions.Regex> object is created. If no time-out is defined in the <xref:System.Text.RegularExpressions.Regex> constructor call or in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, no exception is thrown  \n  \n Because the method returns `input` unchanged if there is no match, you can use the <xref:System.Object.ReferenceEquals%2A?displayProperty=fullName> method to determine whether the method has made any replacements to the input string.","nodes":[{"pos":[0,249],"content":"The <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.Text.RegularExpressions.MatchEvaluator%29?displayProperty=fullName> method is useful for replacing a regular expression match if any of the following conditions is true:","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.Text.RegularExpressions.MatchEvaluator%29?displayProperty=fullName&gt;</ph> method is useful for replacing a regular expression match if any of the following conditions is true:","pos":[0,249],"source":"The <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.Text.RegularExpressions.MatchEvaluator%29?displayProperty=fullName> method is useful for replacing a regular expression match if any of the following conditions is true:"}]},{"pos":[259,354],"content":"The replacement string cannot readily be specified by a regular expression replacement pattern.","nodes":[{"content":"The replacement string cannot readily be specified by a regular expression replacement pattern.","pos":[0,95]}]},{"pos":[364,443],"content":"The replacement string results from some processing done on the matched string.","nodes":[{"content":"The replacement string results from some processing done on the matched string.","pos":[0,79]}]},{"pos":[453,512],"content":"The replacement string results from conditional processing.","nodes":[{"content":"The replacement string results from conditional processing.","pos":[0,59]}]},{"pos":[519,839],"content":"The method is equivalent to calling the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.Matches%28System.String%29?displayProperty=fullName&gt;</ph> method and passing each <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.Match&gt;</ph> object in the returned <ph id=\"ph3\">&lt;xref:System.Text.RegularExpressions.MatchCollection&gt;</ph> collection to the <ph id=\"ph4\">`evaluator`</ph> delegate.","source":"The method is equivalent to calling the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%29?displayProperty=fullName> method and passing each <xref:System.Text.RegularExpressions.Match> object in the returned <xref:System.Text.RegularExpressions.MatchCollection> collection to the `evaluator` delegate."},{"pos":[846,978],"content":"The regular expression is the pattern defined by the constructor for the current <xref:System.Text.RegularExpressions.Regex> object.","nodes":[{"content":"The regular expression is the pattern defined by the constructor for the current <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex&gt;</ph> object.","pos":[0,132],"source":"The regular expression is the pattern defined by the constructor for the current <xref:System.Text.RegularExpressions.Regex> object."}]},{"pos":[985,1220],"content":"The `evaluator` parameter is the delegate for a custom method that you define and that examines each match. The custom method must have the following signature to match the <xref:System.Text.RegularExpressions.MatchEvaluator> delegate.","nodes":[{"content":"The <ph id=\"ph1\">`evaluator`</ph> parameter is the delegate for a custom method that you define and that examines each match.","pos":[0,107],"source":"The `evaluator` parameter is the delegate for a custom method that you define and that examines each match."},{"content":"The custom method must have the following signature to match the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.MatchEvaluator&gt;</ph> delegate.","pos":[108,235],"source":" The custom method must have the following signature to match the <xref:System.Text.RegularExpressions.MatchEvaluator> delegate."}]},{"pos":[1227,1576],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Text.RegularExpressions.Regex.Replace#1<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/syntax1.cs#1)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Text.RegularExpressions.Regex.Replace#1<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/syntax1.vb#1)</ept><ept id=\"p3\">]</ept>","leadings":[""," "],"source":"[!code-csharp[System.Text.RegularExpressions.Regex.Replace#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/syntax1.cs#1)]\n[!code-vb[System.Text.RegularExpressions.Regex.Replace#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/syntax1.vb#1)]"},{"pos":[1583,1651],"content":"Your custom method returns a string that replaces the matched input.","nodes":[{"content":"Your custom method returns a string that replaces the matched input.","pos":[0,68]}]},{"pos":[1658,2548],"content":"The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the replacement operation exceeds the time-out interval specified by the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=fullName> constructor. If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <xref:System.Text.RegularExpressions.Regex> object is created. If no time-out is defined in the <xref:System.Text.RegularExpressions.Regex> constructor call or in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, no exception is thrown","nodes":[{"content":"The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the replacement operation exceeds the time-out interval specified by the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=fullName> constructor. If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <xref:System.Text.RegularExpressions.Regex> object is created. If no time-out is defined in the <xref:System.Text.RegularExpressions.Regex> constructor call or in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, no exception is thrown","pos":[0,890],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.RegexMatchTimeoutException&gt;</ph> exception is thrown if the execution time of the replacement operation exceeds the time-out interval specified by the <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=fullName&gt;</ph> constructor.","pos":[0,359],"source":"The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the replacement operation exceeds the time-out interval specified by the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=fullName> constructor."},{"content":"If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex&gt;</ph> object is created.","pos":[360,611],"source":" If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <xref:System.Text.RegularExpressions.Regex> object is created."},{"content":"If no time-out is defined in the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex&gt;</ph> constructor call or in the application domain's properties, or if the time-out value is <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName&gt;</ph>, no exception is thrown","pos":[612,890],"source":" If no time-out is defined in the <xref:System.Text.RegularExpressions.Regex> constructor call or in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, no exception is thrown"}]}]},{"pos":[2555,2788],"content":"Because the method returns <ph id=\"ph1\">`input`</ph> unchanged if there is no match, you can use the <ph id=\"ph2\">&lt;xref:System.Object.ReferenceEquals%2A?displayProperty=fullName&gt;</ph> method to determine whether the method has made any replacements to the input string.","source":"Because the method returns `input` unchanged if there is no match, you can use the <xref:System.Object.ReferenceEquals%2A?displayProperty=fullName> method to determine whether the method has made any replacements to the input string."}],"pos":[304858,307670],"yaml":true,"extradata":"MT"},{"content":"The string to search for a match.","nodes":[{"pos":[0,33],"content":"The string to search for a match.","nodes":[{"content":"The string to search for a match.","pos":[0,33]}]}],"pos":[308328,308362],"yaml":true},{"content":"A custom method that examines each match and returns either the original matched string or a replacement string.","nodes":[{"pos":[0,112],"content":"A custom method that examines each match and returns either the original matched string or a replacement string.","nodes":[{"content":"A custom method that examines each match and returns either the original matched string or a replacement string.","pos":[0,112]}]}],"pos":[308459,308572],"yaml":true},{"content":"A new string that is identical to the input string, except that a replacement string takes the place of each matched string. If the regular expression pattern is not matched in the current instance, the method returns the current instance unchanged.","nodes":[{"pos":[0,249],"content":"A new string that is identical to the input string, except that a replacement string takes the place of each matched string. If the regular expression pattern is not matched in the current instance, the method returns the current instance unchanged.","nodes":[{"content":"A new string that is identical to the input string, except that a replacement string takes the place of each matched string. If the regular expression pattern is not matched in the current instance, the method returns the current instance unchanged.","pos":[0,249],"nodes":[{"content":"A new string that is identical to the input string, except that a replacement string takes the place of each matched string.","pos":[0,124]},{"content":"If the regular expression pattern is not matched in the current instance, the method returns the current instance unchanged.","pos":[125,249]}]}]}],"pos":[308629,308879],"yaml":true},{"content":"<code>input</code> or <code>evaluator</code> is `null`.","nodes":[{"pos":[0,55],"content":"<ph id=\"ph1\">&lt;code&gt;input&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;evaluator&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>input</code> or <code>evaluator</code> is `null`."}],"pos":[309053,309109],"yaml":true},{"content":"A time-out occurred. For more information about time-outs, see the Remarks section.","nodes":[{"pos":[0,83],"content":"A time-out occurred. For more information about time-outs, see the Remarks section.","nodes":[{"content":"A time-out occurred. For more information about time-outs, see the Remarks section.","pos":[0,83],"nodes":[{"content":"A time-out occurred.","pos":[0,20]},{"content":"For more information about time-outs, see the Remarks section.","pos":[21,83]}]}]}],"pos":[309269,309353],"yaml":true},{"content":"In a specified input string, replaces all strings that match a regular expression pattern with a specified replacement string.","nodes":[{"pos":[0,126],"content":"In a specified input string, replaces all strings that match a regular expression pattern with a specified replacement string.","nodes":[{"content":"In a specified input string, replaces all strings that match a regular expression pattern with a specified replacement string.","pos":[0,126]}]}],"pos":[310936,311063],"yaml":true},{"content":"The search for matches starts at the beginning of the `input` string. The regular expression is the pattern defined by the constructor for the current <xref:System.Text.RegularExpressions.Regex> object.  \n  \n The `replacement` parameter specifies the string that is to replace each match in `input`. `replacement` can consist of any combination of literal text and [substitutions](~/docs/standard/base-types/substitutions-in-regular-expressions.md). For example, the replacement pattern `a*${test}b` inserts the string \"a*\" followed by the substring that is matched by the `test` capturing group, if any, followed by the string \"b\". The * character is not recognized as a metacharacter within a replacement pattern.  \n  \n> [!NOTE]\n>  Substitutions are the only regular expression language elements that are recognized in a replacement pattern. All other regular expression language elements, including [character escapes](~/docs/standard/base-types/character-escapes-in-regular-expressions.md), are allowed in regular expression patterns only and are not recognized in replacement patterns.  \n  \n The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the replacement operation exceeds the time-out interval specified by the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=fullName> constructor. If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <xref:System.Text.RegularExpressions.Regex> object is created. If no time-out is defined in the <xref:System.Text.RegularExpressions.Regex> constructor call or in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, no exception is thrown  \n  \n Because the method returns `input` unchanged if there is no match, you can use the <xref:System.Object.ReferenceEquals%2A?displayProperty=fullName> method to determine whether the method has made any replacements to the input string.","nodes":[{"pos":[0,202],"content":"The search for matches starts at the beginning of the `input` string. The regular expression is the pattern defined by the constructor for the current <xref:System.Text.RegularExpressions.Regex> object.","nodes":[{"content":"The search for matches starts at the beginning of the <ph id=\"ph1\">`input`</ph> string.","pos":[0,69],"source":"The search for matches starts at the beginning of the `input` string."},{"content":"The regular expression is the pattern defined by the constructor for the current <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex&gt;</ph> object.","pos":[70,202],"source":" The regular expression is the pattern defined by the constructor for the current <xref:System.Text.RegularExpressions.Regex> object."}]},{"pos":[209,715],"content":"The `replacement` parameter specifies the string that is to replace each match in `input`. `replacement` can consist of any combination of literal text and [substitutions](~/docs/standard/base-types/substitutions-in-regular-expressions.md). For example, the replacement pattern `a*${test}b` inserts the string \"a*\" followed by the substring that is matched by the `test` capturing group, if any, followed by the string \"b\". The * character is not recognized as a metacharacter within a replacement pattern.","nodes":[{"content":"The <ph id=\"ph1\">`replacement`</ph> parameter specifies the string that is to replace each match in <ph id=\"ph2\">`input`</ph>.","pos":[0,90],"source":"The `replacement` parameter specifies the string that is to replace each match in `input`."},{"content":"<ph id=\"ph1\">`replacement`</ph> can consist of any combination of literal text and <bpt id=\"p1\">[</bpt>substitutions<ept id=\"p1\">](~/docs/standard/base-types/substitutions-in-regular-expressions.md)</ept>.","pos":[91,240],"source":"`replacement` can consist of any combination of literal text and [substitutions](~/docs/standard/base-types/substitutions-in-regular-expressions.md)."},{"content":"For example, the replacement pattern <ph id=\"ph1\">`a*${test}b`</ph> inserts the string \"a*\" followed by the substring that is matched by the <ph id=\"ph2\">`test`</ph> capturing group, if any, followed by the string \"b\".","pos":[241,423],"source":" For example, the replacement pattern `a*${test}b` inserts the string \"a*\" followed by the substring that is matched by the `test` capturing group, if any, followed by the string \"b\"."},{"content":"The * character is not recognized as a metacharacter within a replacement pattern.","pos":[424,506]}]},{"pos":[723,1090],"content":"[!NOTE]\n Substitutions are the only regular expression language elements that are recognized in a replacement pattern. All other regular expression language elements, including [character escapes](~/docs/standard/base-types/character-escapes-in-regular-expressions.md), are allowed in regular expression patterns only and are not recognized in replacement patterns.","leadings":["","> "],"nodes":[{"content":" Substitutions are the only regular expression language elements that are recognized in a replacement pattern. All other regular expression language elements, including [character escapes](~/docs/standard/base-types/character-escapes-in-regular-expressions.md), are allowed in regular expression patterns only and are not recognized in replacement patterns.","pos":[8,365],"nodes":[{"content":"Substitutions are the only regular expression language elements that are recognized in a replacement pattern.","pos":[1,110]},{"content":"All other regular expression language elements, including <bpt id=\"p1\">[</bpt>character escapes<ept id=\"p1\">](~/docs/standard/base-types/character-escapes-in-regular-expressions.md)</ept>, are allowed in regular expression patterns only and are not recognized in replacement patterns.","pos":[111,357],"source":" All other regular expression language elements, including [character escapes](~/docs/standard/base-types/character-escapes-in-regular-expressions.md), are allowed in regular expression patterns only and are not recognized in replacement patterns."}]}]},{"pos":[1097,1987],"content":"The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the replacement operation exceeds the time-out interval specified by the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=fullName> constructor. If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <xref:System.Text.RegularExpressions.Regex> object is created. If no time-out is defined in the <xref:System.Text.RegularExpressions.Regex> constructor call or in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, no exception is thrown","nodes":[{"content":"The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the replacement operation exceeds the time-out interval specified by the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=fullName> constructor. If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <xref:System.Text.RegularExpressions.Regex> object is created. If no time-out is defined in the <xref:System.Text.RegularExpressions.Regex> constructor call or in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, no exception is thrown","pos":[0,890],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.RegexMatchTimeoutException&gt;</ph> exception is thrown if the execution time of the replacement operation exceeds the time-out interval specified by the <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=fullName&gt;</ph> constructor.","pos":[0,359],"source":"The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the replacement operation exceeds the time-out interval specified by the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=fullName> constructor."},{"content":"If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex&gt;</ph> object is created.","pos":[360,611],"source":" If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <xref:System.Text.RegularExpressions.Regex> object is created."},{"content":"If no time-out is defined in the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex&gt;</ph> constructor call or in the application domain's properties, or if the time-out value is <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName&gt;</ph>, no exception is thrown","pos":[612,890],"source":" If no time-out is defined in the <xref:System.Text.RegularExpressions.Regex> constructor call or in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, no exception is thrown"}]}]},{"pos":[1994,2227],"content":"Because the method returns <ph id=\"ph1\">`input`</ph> unchanged if there is no match, you can use the <ph id=\"ph2\">&lt;xref:System.Object.ReferenceEquals%2A?displayProperty=fullName&gt;</ph> method to determine whether the method has made any replacements to the input string.","source":"Because the method returns `input` unchanged if there is no match, you can use the <xref:System.Object.ReferenceEquals%2A?displayProperty=fullName> method to determine whether the method has made any replacements to the input string."}],"pos":[311074,313317],"yaml":true,"extradata":"MT"},{"content":"The string to search for a match.","nodes":[{"pos":[0,33],"content":"The string to search for a match.","nodes":[{"content":"The string to search for a match.","pos":[0,33]}]}],"pos":[315979,316013],"yaml":true},{"content":"The replacement string.","nodes":[{"pos":[0,23],"content":"The replacement string.","nodes":[{"content":"The replacement string.","pos":[0,23]}]}],"pos":[316080,316104],"yaml":true},{"content":"A new string that is identical to the input string, except that the replacement string takes the place of each matched string. If the regular expression pattern is not matched in the current instance, the method returns the current instance unchanged.","nodes":[{"pos":[0,251],"content":"A new string that is identical to the input string, except that the replacement string takes the place of each matched string. If the regular expression pattern is not matched in the current instance, the method returns the current instance unchanged.","nodes":[{"content":"A new string that is identical to the input string, except that the replacement string takes the place of each matched string. If the regular expression pattern is not matched in the current instance, the method returns the current instance unchanged.","pos":[0,251],"nodes":[{"content":"A new string that is identical to the input string, except that the replacement string takes the place of each matched string.","pos":[0,126]},{"content":"If the regular expression pattern is not matched in the current instance, the method returns the current instance unchanged.","pos":[127,251]}]}]}],"pos":[316161,316413],"yaml":true},{"content":"<code>input</code> or <code>replacement</code> is `null`.","nodes":[{"pos":[0,57],"content":"<ph id=\"ph1\">&lt;code&gt;input&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;replacement&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>input</code> or <code>replacement</code> is `null`."}],"pos":[316587,316645],"yaml":true},{"content":"A time-out occurred. For more information about time-outs, see the Remarks section.","nodes":[{"pos":[0,83],"content":"A time-out occurred. For more information about time-outs, see the Remarks section.","nodes":[{"content":"A time-out occurred. For more information about time-outs, see the Remarks section.","pos":[0,83],"nodes":[{"content":"A time-out occurred.","pos":[0,20]},{"content":"For more information about time-outs, see the Remarks section.","pos":[21,83]}]}]}],"pos":[316805,316889],"yaml":true},{"content":"In a specified input string, replaces a specified maximum number of strings that match a regular expression pattern with a string returned by a <xref href=\"System.Text.RegularExpressions.MatchEvaluator\"></xref> delegate.","nodes":[{"pos":[0,220],"content":"In a specified input string, replaces a specified maximum number of strings that match a regular expression pattern with a string returned by a <ph id=\"ph1\">&lt;xref href=\"System.Text.RegularExpressions.MatchEvaluator\"&gt;&lt;/xref&gt;</ph> delegate.","source":"In a specified input string, replaces a specified maximum number of strings that match a regular expression pattern with a string returned by a <xref href=\"System.Text.RegularExpressions.MatchEvaluator\"></xref> delegate."}],"pos":[318652,318873],"yaml":true},{"content":"The <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.Text.RegularExpressions.MatchEvaluator%2CSystem.Int32%29?displayProperty=fullName> method is useful for replacing a regular expression match if any of the following conditions is true:  \n  \n-   The replacement string cannot readily be specified by a regular expression replacement pattern.  \n  \n-   The replacement string results from some processing done on the matched string.  \n  \n-   The replacement string results from conditional processing.  \n  \n The method is equivalent to calling the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%29?displayProperty=fullName> method and passing the first `count`<xref:System.Text.RegularExpressions.Match> objects in the returned <xref:System.Text.RegularExpressions.MatchCollection> collection to the `evaluator` delegate.  \n  \n The regular expression is the pattern defined by the constructor for the current <xref:System.Text.RegularExpressions.Regex> object.  \n  \n The `evaluator` parameter is the delegate for a custom method that you define and that examines each match. The custom method must have the following signature to match the <xref:System.Text.RegularExpressions.MatchEvaluator> delegate.  \n  \n [!code-csharp[System.Text.RegularExpressions.Regex.Replace#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/syntax1.cs#1)]\n [!code-vb[System.Text.RegularExpressions.Regex.Replace#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/syntax1.vb#1)]  \n  \n Your custom method returns a string that replaces the matched input.  \n  \n The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the replacement operation exceeds the time-out interval specified by the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=fullName> constructor. If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <xref:System.Text.RegularExpressions.Regex> object is created. If no time-out is defined in the <xref:System.Text.RegularExpressions.Regex> constructor call or in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, no exception is thrown  \n  \n Because the method returns `input` unchanged if there is no match, you can use the <xref:System.Object.ReferenceEquals%2A?displayProperty=fullName> method to determine whether the method has made any replacements to the input string.","nodes":[{"pos":[0,264],"content":"The <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.Text.RegularExpressions.MatchEvaluator%2CSystem.Int32%29?displayProperty=fullName> method is useful for replacing a regular expression match if any of the following conditions is true:","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.Text.RegularExpressions.MatchEvaluator%2CSystem.Int32%29?displayProperty=fullName&gt;</ph> method is useful for replacing a regular expression match if any of the following conditions is true:","pos":[0,264],"source":"The <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.Text.RegularExpressions.MatchEvaluator%2CSystem.Int32%29?displayProperty=fullName> method is useful for replacing a regular expression match if any of the following conditions is true:"}]},{"pos":[274,369],"content":"The replacement string cannot readily be specified by a regular expression replacement pattern.","nodes":[{"content":"The replacement string cannot readily be specified by a regular expression replacement pattern.","pos":[0,95]}]},{"pos":[379,458],"content":"The replacement string results from some processing done on the matched string.","nodes":[{"content":"The replacement string results from some processing done on the matched string.","pos":[0,79]}]},{"pos":[468,527],"content":"The replacement string results from conditional processing.","nodes":[{"content":"The replacement string results from conditional processing.","pos":[0,59]}]},{"pos":[534,867],"content":"The method is equivalent to calling the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.Matches%28System.String%29?displayProperty=fullName&gt;</ph> method and passing the first <ph id=\"ph2\">`count`</ph><ph id=\"ph3\">&lt;xref:System.Text.RegularExpressions.Match&gt;</ph> objects in the returned <ph id=\"ph4\">&lt;xref:System.Text.RegularExpressions.MatchCollection&gt;</ph> collection to the <ph id=\"ph5\">`evaluator`</ph> delegate.","source":"The method is equivalent to calling the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%29?displayProperty=fullName> method and passing the first `count`<xref:System.Text.RegularExpressions.Match> objects in the returned <xref:System.Text.RegularExpressions.MatchCollection> collection to the `evaluator` delegate."},{"pos":[874,1006],"content":"The regular expression is the pattern defined by the constructor for the current <xref:System.Text.RegularExpressions.Regex> object.","nodes":[{"content":"The regular expression is the pattern defined by the constructor for the current <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex&gt;</ph> object.","pos":[0,132],"source":"The regular expression is the pattern defined by the constructor for the current <xref:System.Text.RegularExpressions.Regex> object."}]},{"pos":[1013,1248],"content":"The `evaluator` parameter is the delegate for a custom method that you define and that examines each match. The custom method must have the following signature to match the <xref:System.Text.RegularExpressions.MatchEvaluator> delegate.","nodes":[{"content":"The <ph id=\"ph1\">`evaluator`</ph> parameter is the delegate for a custom method that you define and that examines each match.","pos":[0,107],"source":"The `evaluator` parameter is the delegate for a custom method that you define and that examines each match."},{"content":"The custom method must have the following signature to match the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.MatchEvaluator&gt;</ph> delegate.","pos":[108,235],"source":" The custom method must have the following signature to match the <xref:System.Text.RegularExpressions.MatchEvaluator> delegate."}]},{"pos":[1255,1604],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Text.RegularExpressions.Regex.Replace#1<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/syntax1.cs#1)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Text.RegularExpressions.Regex.Replace#1<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/syntax1.vb#1)</ept><ept id=\"p3\">]</ept>","leadings":[""," "],"source":"[!code-csharp[System.Text.RegularExpressions.Regex.Replace#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/syntax1.cs#1)]\n[!code-vb[System.Text.RegularExpressions.Regex.Replace#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/syntax1.vb#1)]"},{"pos":[1611,1679],"content":"Your custom method returns a string that replaces the matched input.","nodes":[{"content":"Your custom method returns a string that replaces the matched input.","pos":[0,68]}]},{"pos":[1686,2576],"content":"The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the replacement operation exceeds the time-out interval specified by the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=fullName> constructor. If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <xref:System.Text.RegularExpressions.Regex> object is created. If no time-out is defined in the <xref:System.Text.RegularExpressions.Regex> constructor call or in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, no exception is thrown","nodes":[{"content":"The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the replacement operation exceeds the time-out interval specified by the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=fullName> constructor. If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <xref:System.Text.RegularExpressions.Regex> object is created. If no time-out is defined in the <xref:System.Text.RegularExpressions.Regex> constructor call or in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, no exception is thrown","pos":[0,890],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.RegexMatchTimeoutException&gt;</ph> exception is thrown if the execution time of the replacement operation exceeds the time-out interval specified by the <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=fullName&gt;</ph> constructor.","pos":[0,359],"source":"The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the replacement operation exceeds the time-out interval specified by the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=fullName> constructor."},{"content":"If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex&gt;</ph> object is created.","pos":[360,611],"source":" If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <xref:System.Text.RegularExpressions.Regex> object is created."},{"content":"If no time-out is defined in the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex&gt;</ph> constructor call or in the application domain's properties, or if the time-out value is <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName&gt;</ph>, no exception is thrown","pos":[612,890],"source":" If no time-out is defined in the <xref:System.Text.RegularExpressions.Regex> constructor call or in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, no exception is thrown"}]}]},{"pos":[2583,2816],"content":"Because the method returns <ph id=\"ph1\">`input`</ph> unchanged if there is no match, you can use the <ph id=\"ph2\">&lt;xref:System.Object.ReferenceEquals%2A?displayProperty=fullName&gt;</ph> method to determine whether the method has made any replacements to the input string.","source":"Because the method returns `input` unchanged if there is no match, you can use the <xref:System.Object.ReferenceEquals%2A?displayProperty=fullName> method to determine whether the method has made any replacements to the input string."}],"pos":[318884,321724],"yaml":true,"extradata":"MT"},{"content":"The string to search for a match.","nodes":[{"pos":[0,33],"content":"The string to search for a match.","nodes":[{"content":"The string to search for a match.","pos":[0,33]}]}],"pos":[323671,323705],"yaml":true},{"content":"A custom method that examines each match and returns either the original matched string or a replacement string.","nodes":[{"pos":[0,112],"content":"A custom method that examines each match and returns either the original matched string or a replacement string.","nodes":[{"content":"A custom method that examines each match and returns either the original matched string or a replacement string.","pos":[0,112]}]}],"pos":[323802,323915],"yaml":true},{"content":"The maximum number of times the replacement will occur.","nodes":[{"pos":[0,55],"content":"The maximum number of times the replacement will occur.","nodes":[{"content":"The maximum number of times the replacement will occur.","pos":[0,55]}]}],"pos":[323975,324031],"yaml":true},{"content":"A new string that is identical to the input string, except that a replacement string takes the place of each matched string. If the regular expression pattern is not matched in the current instance, the method returns the current instance unchanged.","nodes":[{"pos":[0,249],"content":"A new string that is identical to the input string, except that a replacement string takes the place of each matched string. If the regular expression pattern is not matched in the current instance, the method returns the current instance unchanged.","nodes":[{"content":"A new string that is identical to the input string, except that a replacement string takes the place of each matched string. If the regular expression pattern is not matched in the current instance, the method returns the current instance unchanged.","pos":[0,249],"nodes":[{"content":"A new string that is identical to the input string, except that a replacement string takes the place of each matched string.","pos":[0,124]},{"content":"If the regular expression pattern is not matched in the current instance, the method returns the current instance unchanged.","pos":[125,249]}]}]}],"pos":[324088,324338],"yaml":true},{"content":"<code>input</code> or <code>evaluator</code> is `null`.","nodes":[{"pos":[0,55],"content":"<ph id=\"ph1\">&lt;code&gt;input&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;evaluator&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>input</code> or <code>evaluator</code> is `null`."}],"pos":[324512,324568],"yaml":true},{"content":"A time-out occurred. For more information about time-outs, see the Remarks section.","nodes":[{"pos":[0,83],"content":"A time-out occurred. For more information about time-outs, see the Remarks section.","nodes":[{"content":"A time-out occurred. For more information about time-outs, see the Remarks section.","pos":[0,83],"nodes":[{"content":"A time-out occurred.","pos":[0,20]},{"content":"For more information about time-outs, see the Remarks section.","pos":[21,83]}]}]}],"pos":[324728,324812],"yaml":true},{"content":"Gets a value that indicates whether the regular expression searches from right to left.","nodes":[{"pos":[0,87],"content":"Gets a value that indicates whether the regular expression searches from right to left.","nodes":[{"content":"Gets a value that indicates whether the regular expression searches from right to left.","pos":[0,87]}]}],"pos":[326286,326374],"yaml":true},{"content":"<xref:System.Text.RegularExpressions.Regex.RightToLeft%2A> is `true` if the <xref:System.Text.RegularExpressions.Regex> instance was created with the <xref:System.Text.RegularExpressions.RegexOptions.RightToLeft> option.","nodes":[{"pos":[0,220],"content":"<ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.RightToLeft%2A&gt;</ph> is <ph id=\"ph2\">`true`</ph> if the <ph id=\"ph3\">&lt;xref:System.Text.RegularExpressions.Regex&gt;</ph> instance was created with the <ph id=\"ph4\">&lt;xref:System.Text.RegularExpressions.RegexOptions.RightToLeft&gt;</ph> option.","source":"<xref:System.Text.RegularExpressions.Regex.RightToLeft%2A> is `true` if the <xref:System.Text.RegularExpressions.Regex> instance was created with the <xref:System.Text.RegularExpressions.RegexOptions.RightToLeft> option."}],"pos":[326385,326606],"yaml":true,"extradata":"MT"},{"content":"`true` if the regular expression searches from right to left; otherwise, `false`.","nodes":[{"pos":[0,81],"content":"<ph id=\"ph1\">`true`</ph> if the regular expression searches from right to left; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the regular expression searches from right to left; otherwise, `false`."}],"pos":[326720,326804],"yaml":true},{"content":"Used by a <xref href=\"System.Text.RegularExpressions.Regex\"></xref> object generated by the <xref href=\"System.Text.RegularExpressions.Regex.CompileToAssembly*\"></xref> method.","nodes":[{"pos":[0,176],"content":"Used by a <ph id=\"ph1\">&lt;xref href=\"System.Text.RegularExpressions.Regex\"&gt;&lt;/xref&gt;</ph> object generated by the <ph id=\"ph2\">&lt;xref href=\"System.Text.RegularExpressions.Regex.CompileToAssembly*\"&gt;&lt;/xref&gt;</ph> method.","source":"Used by a <xref href=\"System.Text.RegularExpressions.Regex\"></xref> object generated by the <xref href=\"System.Text.RegularExpressions.Regex.CompileToAssembly*\"></xref> method."}],"pos":[328336,328513],"yaml":true},{"content":"Splits an input string into an array of substrings at the positions defined by a specified regular expression pattern. Additional parameters specify options that modify the matching operation and a time-out interval if no match is found.","nodes":[{"pos":[0,237],"content":"Splits an input string into an array of substrings at the positions defined by a specified regular expression pattern. Additional parameters specify options that modify the matching operation and a time-out interval if no match is found.","nodes":[{"content":"Splits an input string into an array of substrings at the positions defined by a specified regular expression pattern. Additional parameters specify options that modify the matching operation and a time-out interval if no match is found.","pos":[0,237],"nodes":[{"content":"Splits an input string into an array of substrings at the positions defined by a specified regular expression pattern.","pos":[0,118]},{"content":"Additional parameters specify options that modify the matching operation and a time-out interval if no match is found.","pos":[119,237]}]}]}],"pos":[330330,330568],"yaml":true},{"content":"The <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=fullName> methods are similar to the <xref:System.String.Split%28System.Char%5B%5D%29?displayProperty=fullName> method, except that <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=fullName> splits the string at a delimiter determined by a regular expression instead of a set of characters. The string is split as many times as possible. If no delimiter is found, the return value contains one element whose value is the original `input` string.  \n  \n The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match. For more information about regular expressions, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).  \n  \n> [!IMPORTANT]\n>  Compiled regular expressions used in calls to static <xref:System.Text.RegularExpressions.Regex.Split%2A> methods are automatically cached. To manage the lifetime of compiled regular expressions yourself, use the instance <xref:System.Text.RegularExpressions.Regex.Split%2A> methods.  \n  \n If multiple matches are adjacent to one another, an empty string is inserted into the array. For example, splitting a string on a single hyphen causes the returned array to include an empty string in the position where two adjacent hyphens are found.  \n  \n If a match is found at the beginning or the end of the input string, an empty string is included at the beginning or the end of the returned array. The following example uses the regular expression pattern `[a-z]+` to split an input string on any uppercase or lowercase alphabetic character. Because the string begins and ends with matching alphabetic characters, the value of the first and last element of the returned array is <xref:System.String.Empty?displayProperty=fullName>.  \n  \n [!code-csharp[System.Text.RegularExpressions.Regex.Split#23](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split23.cs#23)]\n [!code-vb[System.Text.RegularExpressions.Regex.Split#23](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split23.vb#23)]  \n  \n If capturing parentheses are used in a <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=fullName> expression, any captured text is included in the resulting string array. For example, if you split the string \"plum-pear\" on a hyphen placed within capturing parentheses, the returned array includes a string element that contains the hyphen.  \n  \n [!code-csharp[System.Text.RegularExpressions.Regex.Split#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split9.cs#9)]\n [!code-vb[System.Text.RegularExpressions.Regex.Split#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split9.vb#9)]  \n  \n However, when the regular expression pattern includes multiple sets of capturing parentheses, the behavior of this method depends on the version of the .NET Framework. In the .NET Framework 1.0 and 1.1, if a match is not found within the first set of capturing parentheses, captured text from additional capturing parentheses is not included in the returned array. Starting with the .NET Framework 2.0, all captured text is also added to the returned array. For example, the following code uses two sets of capturing parentheses to extract the elements of a date, including the date delimiters, from a date string. The first set of capturing parentheses captures the hyphen, and the second set captures the forward slash. If the example code is compiled and run under the .NET Framework 1.0 or 1.1, it excludes the slash characters; if it is compiled and run under the .NET Framework 2.0 or later versions, it includes them.  \n  \n [!code-csharp[System.Text.RegularExpressions.Regex.Split#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split10.cs#10)]\n [!code-vb[System.Text.RegularExpressions.Regex.Split#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split10.vb#10)]  \n  \n If the regular expression can match the empty string, <xref:System.Text.RegularExpressions.Regex.Split%2A> will split the string into an array of single-character strings because the empty string delimiter can be found at every location.  \n  \n The `matchTimeout` parameter specifies how long a pattern matching method should try to find a match before it times out. Setting a time-out interval prevents regular expressions that rely on excessive backtracking from appearing to stop responding when they process input that contains near matches. For more information, see [Best Practices for Regular Expressions](~/docs/standard/base-types/best-practices.md) and [Backtracking](~/docs/standard/base-types/backtracking-in-regular-expressions.md). If no match is found in that time interval, the method throws a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception. `matchTimeout` overrides any default time-out value defined for the application domain in which the method executes.","nodes":[{"pos":[0,536],"content":"The <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=fullName> methods are similar to the <xref:System.String.Split%28System.Char%5B%5D%29?displayProperty=fullName> method, except that <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=fullName> splits the string at a delimiter determined by a regular expression instead of a set of characters. The string is split as many times as possible. If no delimiter is found, the return value contains one element whose value is the original `input` string.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=fullName&gt;</ph> methods are similar to the <ph id=\"ph2\">&lt;xref:System.String.Split%28System.Char%5B%5D%29?displayProperty=fullName&gt;</ph> method, except that <ph id=\"ph3\">&lt;xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=fullName&gt;</ph> splits the string at a delimiter determined by a regular expression instead of a set of characters.","pos":[0,381],"source":"The <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=fullName> methods are similar to the <xref:System.String.Split%28System.Char%5B%5D%29?displayProperty=fullName> method, except that <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=fullName> splits the string at a delimiter determined by a regular expression instead of a set of characters."},{"content":"The string is split as many times as possible.","pos":[382,428]},{"content":"If no delimiter is found, the return value contains one element whose value is the original <ph id=\"ph1\">`input`</ph> string.","pos":[429,536],"source":" If no delimiter is found, the return value contains one element whose value is the original `input` string."}]},{"pos":[543,931],"content":"The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match. For more information about regular expressions, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).","nodes":[{"content":"The <ph id=\"ph1\">`pattern`</ph> parameter consists of regular expression language elements that symbolically describe the string to match.","pos":[0,120],"source":"The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match."},{"content":"For more information about regular expressions, see <bpt id=\"p1\">[</bpt>.NET Framework Regular Expressions<ept id=\"p1\">](~/docs/standard/base-types/regular-expressions.md)</ept> and <bpt id=\"p2\">[</bpt>Regular Expression Language - Quick Reference<ept id=\"p2\">](~/docs/standard/base-types/regular-expression-language-quick-reference.md)</ept>.","pos":[121,388],"source":" For more information about regular expressions, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md)."}]},{"pos":[939,1238],"content":"[!IMPORTANT]\n Compiled regular expressions used in calls to static <xref:System.Text.RegularExpressions.Regex.Split%2A> methods are automatically cached. To manage the lifetime of compiled regular expressions yourself, use the instance <xref:System.Text.RegularExpressions.Regex.Split%2A> methods.","leadings":["","> "],"nodes":[{"content":" Compiled regular expressions used in calls to static <xref:System.Text.RegularExpressions.Regex.Split%2A> methods are automatically cached. To manage the lifetime of compiled regular expressions yourself, use the instance <xref:System.Text.RegularExpressions.Regex.Split%2A> methods.","pos":[13,297],"nodes":[{"content":"Compiled regular expressions used in calls to static <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.Split%2A&gt;</ph> methods are automatically cached.","pos":[1,140],"source":" Compiled regular expressions used in calls to static <xref:System.Text.RegularExpressions.Regex.Split%2A> methods are automatically cached."},{"content":"To manage the lifetime of compiled regular expressions yourself, use the instance <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.Split%2A&gt;</ph> methods.","pos":[141,284],"source":" To manage the lifetime of compiled regular expressions yourself, use the instance <xref:System.Text.RegularExpressions.Regex.Split%2A> methods."}]}]},{"pos":[1245,1495],"content":"If multiple matches are adjacent to one another, an empty string is inserted into the array. For example, splitting a string on a single hyphen causes the returned array to include an empty string in the position where two adjacent hyphens are found.","nodes":[{"content":"If multiple matches are adjacent to one another, an empty string is inserted into the array. For example, splitting a string on a single hyphen causes the returned array to include an empty string in the position where two adjacent hyphens are found.","pos":[0,250],"nodes":[{"content":"If multiple matches are adjacent to one another, an empty string is inserted into the array.","pos":[0,92]},{"content":"For example, splitting a string on a single hyphen causes the returned array to include an empty string in the position where two adjacent hyphens are found.","pos":[93,250]}]}]},{"pos":[1502,1983],"content":"If a match is found at the beginning or the end of the input string, an empty string is included at the beginning or the end of the returned array. The following example uses the regular expression pattern `[a-z]+` to split an input string on any uppercase or lowercase alphabetic character. Because the string begins and ends with matching alphabetic characters, the value of the first and last element of the returned array is <xref:System.String.Empty?displayProperty=fullName>.","nodes":[{"content":"If a match is found at the beginning or the end of the input string, an empty string is included at the beginning or the end of the returned array.","pos":[0,147]},{"content":"The following example uses the regular expression pattern <ph id=\"ph1\">`[a-z]+`</ph> to split an input string on any uppercase or lowercase alphabetic character.","pos":[148,291],"source":" The following example uses the regular expression pattern `[a-z]+` to split an input string on any uppercase or lowercase alphabetic character."},{"content":"Because the string begins and ends with matching alphabetic characters, the value of the first and last element of the returned array is <ph id=\"ph1\">&lt;xref:System.String.Empty?displayProperty=fullName&gt;</ph>.","pos":[292,481],"source":" Because the string begins and ends with matching alphabetic characters, the value of the first and last element of the returned array is <xref:System.String.Empty?displayProperty=fullName>."}]},{"pos":[1990,2335],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Text.RegularExpressions.Regex.Split#23<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split23.cs#23)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Text.RegularExpressions.Regex.Split#23<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split23.vb#23)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Text.RegularExpressions.Regex.Split#23](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split23.cs#23)]\n [!code-vb[System.Text.RegularExpressions.Regex.Split#23](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split23.vb#23)]"},{"pos":[2342,2700],"content":"If capturing parentheses are used in a <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=fullName> expression, any captured text is included in the resulting string array. For example, if you split the string \"plum-pear\" on a hyphen placed within capturing parentheses, the returned array includes a string element that contains the hyphen.","nodes":[{"content":"If capturing parentheses are used in a <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=fullName> expression, any captured text is included in the resulting string array. For example, if you split the string \"plum-pear\" on a hyphen placed within capturing parentheses, the returned array includes a string element that contains the hyphen.","pos":[0,358],"nodes":[{"content":"If capturing parentheses are used in a <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=fullName&gt;</ph> expression, any captured text is included in the resulting string array.","pos":[0,189],"source":"If capturing parentheses are used in a <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=fullName> expression, any captured text is included in the resulting string array."},{"content":"For example, if you split the string \"plum-pear\" on a hyphen placed within capturing parentheses, the returned array includes a string element that contains the hyphen.","pos":[190,358]}]}]},{"pos":[2707,3046],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Text.RegularExpressions.Regex.Split#9<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split9.cs#9)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Text.RegularExpressions.Regex.Split#9<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split9.vb#9)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Text.RegularExpressions.Regex.Split#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split9.cs#9)]\n [!code-vb[System.Text.RegularExpressions.Regex.Split#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split9.vb#9)]"},{"pos":[3053,3977],"content":"However, when the regular expression pattern includes multiple sets of capturing parentheses, the behavior of this method depends on the version of the .NET Framework. In the .NET Framework 1.0 and 1.1, if a match is not found within the first set of capturing parentheses, captured text from additional capturing parentheses is not included in the returned array. Starting with the .NET Framework 2.0, all captured text is also added to the returned array. For example, the following code uses two sets of capturing parentheses to extract the elements of a date, including the date delimiters, from a date string. The first set of capturing parentheses captures the hyphen, and the second set captures the forward slash. If the example code is compiled and run under the .NET Framework 1.0 or 1.1, it excludes the slash characters; if it is compiled and run under the .NET Framework 2.0 or later versions, it includes them.","nodes":[{"content":"However, when the regular expression pattern includes multiple sets of capturing parentheses, the behavior of this method depends on the version of the .NET Framework. In the .NET Framework 1.0 and 1.1, if a match is not found within the first set of capturing parentheses, captured text from additional capturing parentheses is not included in the returned array. Starting with the .NET Framework 2.0, all captured text is also added to the returned array. For example, the following code uses two sets of capturing parentheses to extract the elements of a date, including the date delimiters, from a date string. The first set of capturing parentheses captures the hyphen, and the second set captures the forward slash. If the example code is compiled and run under the .NET Framework 1.0 or 1.1, it excludes the slash characters; if it is compiled and run under the .NET Framework 2.0 or later versions, it includes them.","pos":[0,924],"nodes":[{"content":"However, when the regular expression pattern includes multiple sets of capturing parentheses, the behavior of this method depends on the version of the .NET Framework.","pos":[0,167]},{"content":"In the .NET Framework 1.0 and 1.1, if a match is not found within the first set of capturing parentheses, captured text from additional capturing parentheses is not included in the returned array.","pos":[168,364]},{"content":"Starting with the .NET Framework 2.0, all captured text is also added to the returned array.","pos":[365,457]},{"content":"For example, the following code uses two sets of capturing parentheses to extract the elements of a date, including the date delimiters, from a date string.","pos":[458,614]},{"content":"The first set of capturing parentheses captures the hyphen, and the second set captures the forward slash.","pos":[615,721]},{"content":"If the example code is compiled and run under the .NET Framework 1.0 or 1.1, it excludes the slash characters; if it is compiled and run under the .NET Framework 2.0 or later versions, it includes them.","pos":[722,924]}]}]},{"pos":[3984,4329],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Text.RegularExpressions.Regex.Split#10<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split10.cs#10)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Text.RegularExpressions.Regex.Split#10<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split10.vb#10)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Text.RegularExpressions.Regex.Split#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split10.cs#10)]\n [!code-vb[System.Text.RegularExpressions.Regex.Split#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split10.vb#10)]"},{"pos":[4336,4573],"content":"If the regular expression can match the empty string, <xref:System.Text.RegularExpressions.Regex.Split%2A> will split the string into an array of single-character strings because the empty string delimiter can be found at every location.","nodes":[{"content":"If the regular expression can match the empty string, <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.Split%2A&gt;</ph> will split the string into an array of single-character strings because the empty string delimiter can be found at every location.","pos":[0,237],"source":"If the regular expression can match the empty string, <xref:System.Text.RegularExpressions.Regex.Split%2A> will split the string into an array of single-character strings because the empty string delimiter can be found at every location."}]},{"pos":[4580,5337],"content":"The `matchTimeout` parameter specifies how long a pattern matching method should try to find a match before it times out. Setting a time-out interval prevents regular expressions that rely on excessive backtracking from appearing to stop responding when they process input that contains near matches. For more information, see [Best Practices for Regular Expressions](~/docs/standard/base-types/best-practices.md) and [Backtracking](~/docs/standard/base-types/backtracking-in-regular-expressions.md). If no match is found in that time interval, the method throws a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception. `matchTimeout` overrides any default time-out value defined for the application domain in which the method executes.","nodes":[{"content":"The <ph id=\"ph1\">`matchTimeout`</ph> parameter specifies how long a pattern matching method should try to find a match before it times out.","pos":[0,121],"source":"The `matchTimeout` parameter specifies how long a pattern matching method should try to find a match before it times out."},{"content":"Setting a time-out interval prevents regular expressions that rely on excessive backtracking from appearing to stop responding when they process input that contains near matches.","pos":[122,300]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Best Practices for Regular Expressions<ept id=\"p1\">](~/docs/standard/base-types/best-practices.md)</ept> and <bpt id=\"p2\">[</bpt>Backtracking<ept id=\"p2\">](~/docs/standard/base-types/backtracking-in-regular-expressions.md)</ept>.","pos":[301,500],"source":" For more information, see [Best Practices for Regular Expressions](~/docs/standard/base-types/best-practices.md) and [Backtracking](~/docs/standard/base-types/backtracking-in-regular-expressions.md)."},{"content":"If no match is found in that time interval, the method throws a <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.RegexMatchTimeoutException&gt;</ph> exception.","pos":[501,640],"source":" If no match is found in that time interval, the method throws a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception."},{"content":"<ph id=\"ph1\">`matchTimeout`</ph> overrides any default time-out value defined for the application domain in which the method executes.","pos":[641,757],"source":"`matchTimeout` overrides any default time-out value defined for the application domain in which the method executes."}]}],"pos":[330579,335947],"yaml":true,"extradata":"MT"},{"content":"The string to split.","nodes":[{"pos":[0,20],"content":"The string to split.","nodes":[{"content":"The string to split.","pos":[0,20]}]}],"pos":[336184,336205],"yaml":true},{"content":"The regular expression pattern to match.","nodes":[{"pos":[0,40],"content":"The regular expression pattern to match.","nodes":[{"content":"The regular expression pattern to match.","pos":[0,40]}]}],"pos":[336268,336309],"yaml":true},{"content":"A bitwise combination of the enumeration values that provide options for matching.","nodes":[{"pos":[0,82],"content":"A bitwise combination of the enumeration values that provide options for matching.","nodes":[{"content":"A bitwise combination of the enumeration values that provide options for matching.","pos":[0,82]}]}],"pos":[336402,336485],"yaml":true},{"content":"A time-out interval, or <xref href=\"System.Text.RegularExpressions.Regex.InfiniteMatchTimeout\"></xref> to indicate that the method should not time out.","nodes":[{"pos":[0,151],"content":"A time-out interval, or <ph id=\"ph1\">&lt;xref href=\"System.Text.RegularExpressions.Regex.InfiniteMatchTimeout\"&gt;&lt;/xref&gt;</ph> to indicate that the method should not time out.","source":"A time-out interval, or <xref href=\"System.Text.RegularExpressions.Regex.InfiniteMatchTimeout\"></xref> to indicate that the method should not time out."}],"pos":[336555,336707],"yaml":true},{"content":"A string array.","nodes":[{"pos":[0,15],"content":"A string array.","nodes":[{"content":"A string array.","pos":[0,15]}]}],"pos":[336766,336782],"yaml":true},{"content":"A regular expression parsing error occurred.","nodes":[{"pos":[0,44],"content":"A regular expression parsing error occurred.","nodes":[{"content":"A regular expression parsing error occurred.","pos":[0,44]}]}],"pos":[336946,336991],"yaml":true},{"content":"<code>input</code> or <code>pattern</code> is `null`.","nodes":[{"pos":[0,53],"content":"<ph id=\"ph1\">&lt;code&gt;input&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;pattern&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>input</code> or <code>pattern</code> is `null`."}],"pos":[337093,337147],"yaml":true},{"content":"<code>options</code> is not a valid bitwise combination of <xref href=\"System.Text.RegularExpressions.RegexOptions\"></xref> values.  \n  \n -or-  \n  \n <code>matchTimeout</code> is negative, zero, or greater than approximately 24 days.","nodes":[{"pos":[0,131],"content":"<ph id=\"ph1\">&lt;code&gt;options&lt;/code&gt;</ph> is not a valid bitwise combination of <ph id=\"ph2\">&lt;xref href=\"System.Text.RegularExpressions.RegexOptions\"&gt;&lt;/xref&gt;</ph> values.","source":"<code>options</code> is not a valid bitwise combination of <xref href=\"System.Text.RegularExpressions.RegexOptions\"></xref> values."},{"pos":[138,142],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[149,232],"content":"<ph id=\"ph1\">&lt;code&gt;matchTimeout&lt;/code&gt;</ph> is negative, zero, or greater than approximately 24 days.","source":"<code>matchTimeout</code> is negative, zero, or greater than approximately 24 days."}],"pos":[337261,337502],"yaml":true},{"content":"A time-out occurred. For more information about time-outs, see the Remarks section.","nodes":[{"pos":[0,83],"content":"A time-out occurred. For more information about time-outs, see the Remarks section.","nodes":[{"content":"A time-out occurred. For more information about time-outs, see the Remarks section.","pos":[0,83],"nodes":[{"content":"A time-out occurred.","pos":[0,20]},{"content":"For more information about time-outs, see the Remarks section.","pos":[21,83]}]}]}],"pos":[337662,337746],"yaml":true},{"content":"Splits an input string into an array of substrings at the positions defined by a specified regular expression pattern. Specified options modify the matching operation.","nodes":[{"pos":[0,167],"content":"Splits an input string into an array of substrings at the positions defined by a specified regular expression pattern. Specified options modify the matching operation.","nodes":[{"content":"Splits an input string into an array of substrings at the positions defined by a specified regular expression pattern. Specified options modify the matching operation.","pos":[0,167],"nodes":[{"content":"Splits an input string into an array of substrings at the positions defined by a specified regular expression pattern.","pos":[0,118]},{"content":"Specified options modify the matching operation.","pos":[119,167]}]}]}],"pos":[339491,339659],"yaml":true},{"content":"The <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=fullName> methods are similar to the <xref:System.String.Split%28System.Char%5B%5D%29?displayProperty=fullName> method, except that <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=fullName> splits the string at a delimiter determined by a regular expression instead of a set of characters. The string is split as many times as possible. If no delimiter is found, the return value contains one element whose value is the original `input` string.  \n  \n The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match. For more information about regular expressions, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).  \n  \n> [!IMPORTANT]\n>  Compiled regular expressions used in calls to static <xref:System.Text.RegularExpressions.Regex.Split%2A> methods are automatically cached. To manage the lifetime of compiled regular expressions yourself, use the instance <xref:System.Text.RegularExpressions.Regex.Split%2A> methods.  \n  \n If multiple matches are adjacent to one another, an empty string is inserted into the array. For example, splitting a string on a single hyphen causes the returned array to include an empty string in the position where two adjacent hyphens are found.  \n  \n If a match is found at the beginning or the end of the input string, an empty string is included at the beginning or the end of the returned array. The following example uses the regular expression pattern `[a-z]+` to split an input string on any uppercase or lowercase alphabetic character. Because the string begins and ends with matching alphabetic characters, the value of the first and last element of the returned array is <xref:System.String.Empty?displayProperty=fullName>.  \n  \n [!code-csharp[System.Text.RegularExpressions.Regex.Split#24](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split24.cs#24)]\n [!code-vb[System.Text.RegularExpressions.Regex.Split#24](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split24.vb#24)]  \n  \n If capturing parentheses are used in a <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=fullName> expression, any captured text is included in the resulting string array. For example, if you split the string \"plum-pear\" on a hyphen placed within capturing parentheses, the returned array includes a string element that contains the hyphen.  \n  \n [!code-csharp[System.Text.RegularExpressions.Regex.Split#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split9.cs#9)]\n [!code-vb[System.Text.RegularExpressions.Regex.Split#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split9.vb#9)]  \n  \n However, when the regular expression pattern includes multiple sets of capturing parentheses, the behavior of this method depends on the version of the .NET Framework. In the .NET Framework 1.0 and 1.1, if a match is not found within the first set of capturing parentheses, captured text from additional capturing parentheses is not included in the returned array. Starting with the .NET Framework 2.0, all captured text is also added to the returned array. For example, the following code uses two sets of capturing parentheses to extract the elements of a date, including the date delimiters, from a date string. The first set of capturing parentheses captures the hyphen, and the second set captures the forward slash. If the example code is compiled and run under the .NET Framework 1.0 or 1.1, it excludes the slash characters; if it is compiled and run under the .NET Framework 2.0 or later versions, it includes them.  \n  \n [!code-csharp[System.Text.RegularExpressions.Regex.Split#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split10.cs#10)]\n [!code-vb[System.Text.RegularExpressions.Regex.Split#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split10.vb#10)]  \n  \n If the regular expression can match the empty string, <xref:System.Text.RegularExpressions.Regex.Split%2A> will split the string into an array of single-character strings because the empty string delimiter can be found at every location.  \n  \n The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the split operation exceeds the time-out interval specified for the application domain in which the method is called. If no time-out is defined in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, no exception is thrown.","nodes":[{"pos":[0,536],"content":"The <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=fullName> methods are similar to the <xref:System.String.Split%28System.Char%5B%5D%29?displayProperty=fullName> method, except that <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=fullName> splits the string at a delimiter determined by a regular expression instead of a set of characters. The string is split as many times as possible. If no delimiter is found, the return value contains one element whose value is the original `input` string.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=fullName&gt;</ph> methods are similar to the <ph id=\"ph2\">&lt;xref:System.String.Split%28System.Char%5B%5D%29?displayProperty=fullName&gt;</ph> method, except that <ph id=\"ph3\">&lt;xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=fullName&gt;</ph> splits the string at a delimiter determined by a regular expression instead of a set of characters.","pos":[0,381],"source":"The <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=fullName> methods are similar to the <xref:System.String.Split%28System.Char%5B%5D%29?displayProperty=fullName> method, except that <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=fullName> splits the string at a delimiter determined by a regular expression instead of a set of characters."},{"content":"The string is split as many times as possible.","pos":[382,428]},{"content":"If no delimiter is found, the return value contains one element whose value is the original <ph id=\"ph1\">`input`</ph> string.","pos":[429,536],"source":" If no delimiter is found, the return value contains one element whose value is the original `input` string."}]},{"pos":[543,931],"content":"The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match. For more information about regular expressions, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).","nodes":[{"content":"The <ph id=\"ph1\">`pattern`</ph> parameter consists of regular expression language elements that symbolically describe the string to match.","pos":[0,120],"source":"The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match."},{"content":"For more information about regular expressions, see <bpt id=\"p1\">[</bpt>.NET Framework Regular Expressions<ept id=\"p1\">](~/docs/standard/base-types/regular-expressions.md)</ept> and <bpt id=\"p2\">[</bpt>Regular Expression Language - Quick Reference<ept id=\"p2\">](~/docs/standard/base-types/regular-expression-language-quick-reference.md)</ept>.","pos":[121,388],"source":" For more information about regular expressions, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md)."}]},{"pos":[939,1238],"content":"[!IMPORTANT]\n Compiled regular expressions used in calls to static <xref:System.Text.RegularExpressions.Regex.Split%2A> methods are automatically cached. To manage the lifetime of compiled regular expressions yourself, use the instance <xref:System.Text.RegularExpressions.Regex.Split%2A> methods.","leadings":["","> "],"nodes":[{"content":" Compiled regular expressions used in calls to static <xref:System.Text.RegularExpressions.Regex.Split%2A> methods are automatically cached. To manage the lifetime of compiled regular expressions yourself, use the instance <xref:System.Text.RegularExpressions.Regex.Split%2A> methods.","pos":[13,297],"nodes":[{"content":"Compiled regular expressions used in calls to static <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.Split%2A&gt;</ph> methods are automatically cached.","pos":[1,140],"source":" Compiled regular expressions used in calls to static <xref:System.Text.RegularExpressions.Regex.Split%2A> methods are automatically cached."},{"content":"To manage the lifetime of compiled regular expressions yourself, use the instance <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.Split%2A&gt;</ph> methods.","pos":[141,284],"source":" To manage the lifetime of compiled regular expressions yourself, use the instance <xref:System.Text.RegularExpressions.Regex.Split%2A> methods."}]}]},{"pos":[1245,1495],"content":"If multiple matches are adjacent to one another, an empty string is inserted into the array. For example, splitting a string on a single hyphen causes the returned array to include an empty string in the position where two adjacent hyphens are found.","nodes":[{"content":"If multiple matches are adjacent to one another, an empty string is inserted into the array. For example, splitting a string on a single hyphen causes the returned array to include an empty string in the position where two adjacent hyphens are found.","pos":[0,250],"nodes":[{"content":"If multiple matches are adjacent to one another, an empty string is inserted into the array.","pos":[0,92]},{"content":"For example, splitting a string on a single hyphen causes the returned array to include an empty string in the position where two adjacent hyphens are found.","pos":[93,250]}]}]},{"pos":[1502,1983],"content":"If a match is found at the beginning or the end of the input string, an empty string is included at the beginning or the end of the returned array. The following example uses the regular expression pattern `[a-z]+` to split an input string on any uppercase or lowercase alphabetic character. Because the string begins and ends with matching alphabetic characters, the value of the first and last element of the returned array is <xref:System.String.Empty?displayProperty=fullName>.","nodes":[{"content":"If a match is found at the beginning or the end of the input string, an empty string is included at the beginning or the end of the returned array.","pos":[0,147]},{"content":"The following example uses the regular expression pattern <ph id=\"ph1\">`[a-z]+`</ph> to split an input string on any uppercase or lowercase alphabetic character.","pos":[148,291],"source":" The following example uses the regular expression pattern `[a-z]+` to split an input string on any uppercase or lowercase alphabetic character."},{"content":"Because the string begins and ends with matching alphabetic characters, the value of the first and last element of the returned array is <ph id=\"ph1\">&lt;xref:System.String.Empty?displayProperty=fullName&gt;</ph>.","pos":[292,481],"source":" Because the string begins and ends with matching alphabetic characters, the value of the first and last element of the returned array is <xref:System.String.Empty?displayProperty=fullName>."}]},{"pos":[1990,2335],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Text.RegularExpressions.Regex.Split#24<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split24.cs#24)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Text.RegularExpressions.Regex.Split#24<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split24.vb#24)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Text.RegularExpressions.Regex.Split#24](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split24.cs#24)]\n [!code-vb[System.Text.RegularExpressions.Regex.Split#24](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split24.vb#24)]"},{"pos":[2342,2700],"content":"If capturing parentheses are used in a <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=fullName> expression, any captured text is included in the resulting string array. For example, if you split the string \"plum-pear\" on a hyphen placed within capturing parentheses, the returned array includes a string element that contains the hyphen.","nodes":[{"content":"If capturing parentheses are used in a <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=fullName> expression, any captured text is included in the resulting string array. For example, if you split the string \"plum-pear\" on a hyphen placed within capturing parentheses, the returned array includes a string element that contains the hyphen.","pos":[0,358],"nodes":[{"content":"If capturing parentheses are used in a <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=fullName&gt;</ph> expression, any captured text is included in the resulting string array.","pos":[0,189],"source":"If capturing parentheses are used in a <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=fullName> expression, any captured text is included in the resulting string array."},{"content":"For example, if you split the string \"plum-pear\" on a hyphen placed within capturing parentheses, the returned array includes a string element that contains the hyphen.","pos":[190,358]}]}]},{"pos":[2707,3046],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Text.RegularExpressions.Regex.Split#9<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split9.cs#9)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Text.RegularExpressions.Regex.Split#9<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split9.vb#9)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Text.RegularExpressions.Regex.Split#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split9.cs#9)]\n [!code-vb[System.Text.RegularExpressions.Regex.Split#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split9.vb#9)]"},{"pos":[3053,3977],"content":"However, when the regular expression pattern includes multiple sets of capturing parentheses, the behavior of this method depends on the version of the .NET Framework. In the .NET Framework 1.0 and 1.1, if a match is not found within the first set of capturing parentheses, captured text from additional capturing parentheses is not included in the returned array. Starting with the .NET Framework 2.0, all captured text is also added to the returned array. For example, the following code uses two sets of capturing parentheses to extract the elements of a date, including the date delimiters, from a date string. The first set of capturing parentheses captures the hyphen, and the second set captures the forward slash. If the example code is compiled and run under the .NET Framework 1.0 or 1.1, it excludes the slash characters; if it is compiled and run under the .NET Framework 2.0 or later versions, it includes them.","nodes":[{"content":"However, when the regular expression pattern includes multiple sets of capturing parentheses, the behavior of this method depends on the version of the .NET Framework. In the .NET Framework 1.0 and 1.1, if a match is not found within the first set of capturing parentheses, captured text from additional capturing parentheses is not included in the returned array. Starting with the .NET Framework 2.0, all captured text is also added to the returned array. For example, the following code uses two sets of capturing parentheses to extract the elements of a date, including the date delimiters, from a date string. The first set of capturing parentheses captures the hyphen, and the second set captures the forward slash. If the example code is compiled and run under the .NET Framework 1.0 or 1.1, it excludes the slash characters; if it is compiled and run under the .NET Framework 2.0 or later versions, it includes them.","pos":[0,924],"nodes":[{"content":"However, when the regular expression pattern includes multiple sets of capturing parentheses, the behavior of this method depends on the version of the .NET Framework.","pos":[0,167]},{"content":"In the .NET Framework 1.0 and 1.1, if a match is not found within the first set of capturing parentheses, captured text from additional capturing parentheses is not included in the returned array.","pos":[168,364]},{"content":"Starting with the .NET Framework 2.0, all captured text is also added to the returned array.","pos":[365,457]},{"content":"For example, the following code uses two sets of capturing parentheses to extract the elements of a date, including the date delimiters, from a date string.","pos":[458,614]},{"content":"The first set of capturing parentheses captures the hyphen, and the second set captures the forward slash.","pos":[615,721]},{"content":"If the example code is compiled and run under the .NET Framework 1.0 or 1.1, it excludes the slash characters; if it is compiled and run under the .NET Framework 2.0 or later versions, it includes them.","pos":[722,924]}]}]},{"pos":[3984,4329],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Text.RegularExpressions.Regex.Split#10<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split10.cs#10)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Text.RegularExpressions.Regex.Split#10<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split10.vb#10)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Text.RegularExpressions.Regex.Split#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split10.cs#10)]\n [!code-vb[System.Text.RegularExpressions.Regex.Split#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split10.vb#10)]"},{"pos":[4336,4573],"content":"If the regular expression can match the empty string, <xref:System.Text.RegularExpressions.Regex.Split%2A> will split the string into an array of single-character strings because the empty string delimiter can be found at every location.","nodes":[{"content":"If the regular expression can match the empty string, <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.Split%2A&gt;</ph> will split the string into an array of single-character strings because the empty string delimiter can be found at every location.","pos":[0,237],"source":"If the regular expression can match the empty string, <xref:System.Text.RegularExpressions.Regex.Split%2A> will split the string into an array of single-character strings because the empty string delimiter can be found at every location."}]},{"pos":[4580,5020],"content":"The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the split operation exceeds the time-out interval specified for the application domain in which the method is called. If no time-out is defined in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, no exception is thrown.","nodes":[{"content":"The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the split operation exceeds the time-out interval specified for the application domain in which the method is called. If no time-out is defined in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, no exception is thrown.","pos":[0,440],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.RegexMatchTimeoutException&gt;</ph> exception is thrown if the execution time of the split operation exceeds the time-out interval specified for the application domain in which the method is called.","pos":[0,231],"source":"The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the split operation exceeds the time-out interval specified for the application domain in which the method is called."},{"content":"If no time-out is defined in the application domain's properties, or if the time-out value is <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName&gt;</ph>, no exception is thrown.","pos":[232,440],"source":" If no time-out is defined in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, no exception is thrown."}]}]}],"pos":[339670,344721],"yaml":true,"extradata":"MT"},{"content":"The string to split.","nodes":[{"pos":[0,20],"content":"The string to split.","nodes":[{"content":"The string to split.","pos":[0,20]}]}],"pos":[344935,344956],"yaml":true},{"content":"The regular expression pattern to match.","nodes":[{"pos":[0,40],"content":"The regular expression pattern to match.","nodes":[{"content":"The regular expression pattern to match.","pos":[0,40]}]}],"pos":[345019,345060],"yaml":true},{"content":"A bitwise combination of the enumeration values that provide options for matching.","nodes":[{"pos":[0,82],"content":"A bitwise combination of the enumeration values that provide options for matching.","nodes":[{"content":"A bitwise combination of the enumeration values that provide options for matching.","pos":[0,82]}]}],"pos":[345153,345236],"yaml":true},{"content":"An array of strings.","nodes":[{"pos":[0,20],"content":"An array of strings.","nodes":[{"content":"An array of strings.","pos":[0,20]}]}],"pos":[345295,345316],"yaml":true},{"content":"A regular expression parsing error occurred.","nodes":[{"pos":[0,44],"content":"A regular expression parsing error occurred.","nodes":[{"content":"A regular expression parsing error occurred.","pos":[0,44]}]}],"pos":[345480,345525],"yaml":true},{"content":"<code>input</code> or <code>pattern</code> is `null`.","nodes":[{"pos":[0,53],"content":"<ph id=\"ph1\">&lt;code&gt;input&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;pattern&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>input</code> or <code>pattern</code> is `null`."}],"pos":[345627,345681],"yaml":true},{"content":"<code>options</code> is not a valid bitwise combination of <xref href=\"System.Text.RegularExpressions.RegexOptions\"></xref> values.","nodes":[{"pos":[0,131],"content":"<ph id=\"ph1\">&lt;code&gt;options&lt;/code&gt;</ph> is not a valid bitwise combination of <ph id=\"ph2\">&lt;xref href=\"System.Text.RegularExpressions.RegexOptions\"&gt;&lt;/xref&gt;</ph> values.","source":"<code>options</code> is not a valid bitwise combination of <xref href=\"System.Text.RegularExpressions.RegexOptions\"></xref> values."}],"pos":[345795,345927],"yaml":true},{"content":"A time-out occurred. For more information about time-outs, see the Remarks section.","nodes":[{"pos":[0,83],"content":"A time-out occurred. For more information about time-outs, see the Remarks section.","nodes":[{"content":"A time-out occurred. For more information about time-outs, see the Remarks section.","pos":[0,83],"nodes":[{"content":"A time-out occurred.","pos":[0,20]},{"content":"For more information about time-outs, see the Remarks section.","pos":[21,83]}]}]}],"pos":[346087,346171],"yaml":true},{"content":"Splits an input string a specified maximum number of times into an array of substrings, at the positions defined by a regular expression specified in the <xref href=\"System.Text.RegularExpressions.Regex\"></xref> constructor. The search for the regular expression pattern starts at a specified character position in the input string.","nodes":[{"pos":[0,332],"content":"Splits an input string a specified maximum number of times into an array of substrings, at the positions defined by a regular expression specified in the <xref href=\"System.Text.RegularExpressions.Regex\"></xref> constructor. The search for the regular expression pattern starts at a specified character position in the input string.","nodes":[{"content":"Splits an input string a specified maximum number of times into an array of substrings, at the positions defined by a regular expression specified in the <ph id=\"ph1\">&lt;xref href=\"System.Text.RegularExpressions.Regex\"&gt;&lt;/xref&gt;</ph> constructor.","pos":[0,224],"source":"Splits an input string a specified maximum number of times into an array of substrings, at the positions defined by a regular expression specified in the <xref href=\"System.Text.RegularExpressions.Regex\"></xref> constructor."},{"content":"The search for the regular expression pattern starts at a specified character position in the input string.","pos":[225,332]}]}],"pos":[347796,348129],"yaml":true},{"content":"The <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=fullName> methods are similar to the <xref:System.String.Split%2A?displayProperty=fullName> method, except that <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=fullName> splits the string at a delimiter determined by a regular expression instead of a set of characters. The `count` parameter specifies the maximum number of substrings into which the `input` string is split; the last string contains the unsplit remainder of the string. A `count` value of zero provides the default behavior of splitting as many times as possible. The `startat` parameter defines the point at which the search for the first delimiter begins (this can be used for skipping leading white space).  \n  \n If no matches are found from the `count`+1 position in the string, the method returns a one-element array that contains the `input` string. If one or more matches are found, the first element of the returned array contains the first portion of the string from the first character up to one character before the match.  \n  \n If multiple matches are adjacent to one another and the number of matches found is at least two less than `count`, an empty string is inserted into the array. Similarly, if a match is found at `startat`, which is the first character in the string, the first element of the returned array is an empty string. That is, empty strings that result from adjacent matches are counted in determining whether the number of matched substrings equals `count`. In the following example, the regular expression `\\d+` is used to find the starting position of the first substring of numeric characters in a string, and then to split the string a maximum of three times starting at that position. Because the regular expression pattern matches the beginning of the input string, the returned string array consists of an empty string, a five-character alphabetic string, and the remainder of the string,  \n  \n [!code-csharp[System.Text.RegularExpressions.Regex.Split#26](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split26.cs#26)]\n [!code-vb[System.Text.RegularExpressions.Regex.Split#26](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split26.vb#26)]  \n  \n If capturing parentheses are used in a regular expression, any captured text is included in the array of split strings. However, any array elements that contain captured text are not counted in determining whether the number of matches has reached `count`. For example, splitting the string '\"apple-apricot-plum-pear-pomegranate-pineapple-peach\" into a maximum of four substrings beginning at character 15 in the string results in a seven-element array, as the following code shows.  \n  \n [!code-vb[System.Text.RegularExpressions.Regex.Split#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split6.vb#6)]  \n  \n However, when the regular expression pattern includes multiple sets of capturing parentheses, the behavior of this method depends on the version of the .NET Framework. In .NET Framework 1.0 and 1.1, if a match is not found within the first set of capturing parentheses, captured text from additional capturing parentheses is not included in the returned array. Starting with the .NET Framework 2.0, all captured text is also added to the returned array. For example, the following code uses two sets of capturing parentheses to extract the individual words in a string. The first set of capturing parentheses captures the hyphen, and the second set captures the vertical bar. If the example code is compiled and run under the .NET Framework 1.0 or 1.1, it excludes the vertical bar characters; if it is compiled and run under the .NET Framework 2.0 or later versions, it includes them.  \n  \n [!code-csharp[System.Text.RegularExpressions.Regex.Split#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split7.cs#7)]\n [!code-vb[System.Text.RegularExpressions.Regex.Split#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split7.vb#7)]  \n  \n If the regular expression can match the empty string, <xref:System.Text.RegularExpressions.Regex.Split%2A> will split the string into an array of single-character strings because the empty string delimiter can be found at every location. The following example splits the string \"characters\" into as many elements as the input string contains, starting with the character \"a\". Because the null string matches the end of the input string, a null string is inserted at the end of the returned array.  \n  \n [!code-csharp[System.Text.RegularExpressions.Regex.Split#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split14.cs#14)]\n [!code-vb[System.Text.RegularExpressions.Regex.Split#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split14.vb#14)]  \n  \n The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the split operation exceeds the time-out interval specified by the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=fullName> constructor. If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <xref:System.Text.RegularExpressions.Regex> object is created. If no time-out is defined in the <xref:System.Text.RegularExpressions.Regex> constructor call or in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, no exception is thrown","nodes":[{"pos":[0,768],"content":"The <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=fullName> methods are similar to the <xref:System.String.Split%2A?displayProperty=fullName> method, except that <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=fullName> splits the string at a delimiter determined by a regular expression instead of a set of characters. The `count` parameter specifies the maximum number of substrings into which the `input` string is split; the last string contains the unsplit remainder of the string. A `count` value of zero provides the default behavior of splitting as many times as possible. The `startat` parameter defines the point at which the search for the first delimiter begins (this can be used for skipping leading white space).","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=fullName&gt;</ph> methods are similar to the <ph id=\"ph2\">&lt;xref:System.String.Split%2A?displayProperty=fullName&gt;</ph> method, except that <ph id=\"ph3\">&lt;xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=fullName&gt;</ph> splits the string at a delimiter determined by a regular expression instead of a set of characters.","pos":[0,361],"source":"The <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=fullName> methods are similar to the <xref:System.String.Split%2A?displayProperty=fullName> method, except that <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=fullName> splits the string at a delimiter determined by a regular expression instead of a set of characters."},{"content":"The <ph id=\"ph1\">`count`</ph> parameter specifies the maximum number of substrings into which the <ph id=\"ph2\">`input`</ph> string is split; the last string contains the unsplit remainder of the string.","pos":[362,528],"source":" The `count` parameter specifies the maximum number of substrings into which the `input` string is split; the last string contains the unsplit remainder of the string."},{"content":"A <ph id=\"ph1\">`count`</ph> value of zero provides the default behavior of splitting as many times as possible.","pos":[529,622],"source":" A `count` value of zero provides the default behavior of splitting as many times as possible."},{"content":"The <ph id=\"ph1\">`startat`</ph> parameter defines the point at which the search for the first delimiter begins (this can be used for skipping leading white space).","pos":[623,768],"source":" The `startat` parameter defines the point at which the search for the first delimiter begins (this can be used for skipping leading white space)."}]},{"pos":[775,1092],"content":"If no matches are found from the `count`+1 position in the string, the method returns a one-element array that contains the `input` string. If one or more matches are found, the first element of the returned array contains the first portion of the string from the first character up to one character before the match.","nodes":[{"content":"If no matches are found from the <ph id=\"ph1\">`count`</ph>+1 position in the string, the method returns a one-element array that contains the <ph id=\"ph2\">`input`</ph> string.","pos":[0,139],"source":"If no matches are found from the `count`+1 position in the string, the method returns a one-element array that contains the `input` string."},{"content":"If one or more matches are found, the first element of the returned array contains the first portion of the string from the first character up to one character before the match.","pos":[140,317]}]},{"pos":[1099,1985],"content":"If multiple matches are adjacent to one another and the number of matches found is at least two less than `count`, an empty string is inserted into the array. Similarly, if a match is found at `startat`, which is the first character in the string, the first element of the returned array is an empty string. That is, empty strings that result from adjacent matches are counted in determining whether the number of matched substrings equals `count`. In the following example, the regular expression `\\d+` is used to find the starting position of the first substring of numeric characters in a string, and then to split the string a maximum of three times starting at that position. Because the regular expression pattern matches the beginning of the input string, the returned string array consists of an empty string, a five-character alphabetic string, and the remainder of the string,","nodes":[{"content":"If multiple matches are adjacent to one another and the number of matches found is at least two less than <ph id=\"ph1\">`count`</ph>, an empty string is inserted into the array.","pos":[0,158],"source":"If multiple matches are adjacent to one another and the number of matches found is at least two less than `count`, an empty string is inserted into the array."},{"content":"Similarly, if a match is found at <ph id=\"ph1\">`startat`</ph>, which is the first character in the string, the first element of the returned array is an empty string.","pos":[159,307],"source":" Similarly, if a match is found at `startat`, which is the first character in the string, the first element of the returned array is an empty string."},{"content":"That is, empty strings that result from adjacent matches are counted in determining whether the number of matched substrings equals <ph id=\"ph1\">`count`</ph>.","pos":[308,448],"source":" That is, empty strings that result from adjacent matches are counted in determining whether the number of matched substrings equals `count`."},{"content":"In the following example, the regular expression <ph id=\"ph1\">`\\d+`</ph> is used to find the starting position of the first substring of numeric characters in a string, and then to split the string a maximum of three times starting at that position.","pos":[449,680],"source":" In the following example, the regular expression `\\d+` is used to find the starting position of the first substring of numeric characters in a string, and then to split the string a maximum of three times starting at that position."},{"content":"Because the regular expression pattern matches the beginning of the input string, the returned string array consists of an empty string, a five-character alphabetic string, and the remainder of the string,","pos":[681,886]}]},{"pos":[1992,2337],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Text.RegularExpressions.Regex.Split#26<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split26.cs#26)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Text.RegularExpressions.Regex.Split#26<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split26.vb#26)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Text.RegularExpressions.Regex.Split#26](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split26.cs#26)]\n [!code-vb[System.Text.RegularExpressions.Regex.Split#26](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split26.vb#26)]"},{"pos":[2344,2826],"content":"If capturing parentheses are used in a regular expression, any captured text is included in the array of split strings. However, any array elements that contain captured text are not counted in determining whether the number of matches has reached `count`. For example, splitting the string '\"apple-apricot-plum-pear-pomegranate-pineapple-peach\" into a maximum of four substrings beginning at character 15 in the string results in a seven-element array, as the following code shows.","nodes":[{"content":"If capturing parentheses are used in a regular expression, any captured text is included in the array of split strings.","pos":[0,119]},{"content":"However, any array elements that contain captured text are not counted in determining whether the number of matches has reached <ph id=\"ph1\">`count`</ph>.","pos":[120,256],"source":" However, any array elements that contain captured text are not counted in determining whether the number of matches has reached `count`."},{"content":"For example, splitting the string '\"apple-apricot-plum-pear-pomegranate-pineapple-peach\" into a maximum of four substrings beginning at character 15 in the string results in a seven-element array, as the following code shows.","pos":[257,482]}]},{"pos":[2833,3002],"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>System.Text.RegularExpressions.Regex.Split#6<ept id=\"p2\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split6.vb#6)</ept><ept id=\"p1\">]</ept>","source":"[!code-vb[System.Text.RegularExpressions.Regex.Split#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split6.vb#6)]"},{"pos":[3009,3894],"content":"However, when the regular expression pattern includes multiple sets of capturing parentheses, the behavior of this method depends on the version of the .NET Framework. In .NET Framework 1.0 and 1.1, if a match is not found within the first set of capturing parentheses, captured text from additional capturing parentheses is not included in the returned array. Starting with the .NET Framework 2.0, all captured text is also added to the returned array. For example, the following code uses two sets of capturing parentheses to extract the individual words in a string. The first set of capturing parentheses captures the hyphen, and the second set captures the vertical bar. If the example code is compiled and run under the .NET Framework 1.0 or 1.1, it excludes the vertical bar characters; if it is compiled and run under the .NET Framework 2.0 or later versions, it includes them.","nodes":[{"content":"However, when the regular expression pattern includes multiple sets of capturing parentheses, the behavior of this method depends on the version of the .NET Framework. In .NET Framework 1.0 and 1.1, if a match is not found within the first set of capturing parentheses, captured text from additional capturing parentheses is not included in the returned array. Starting with the .NET Framework 2.0, all captured text is also added to the returned array. For example, the following code uses two sets of capturing parentheses to extract the individual words in a string. The first set of capturing parentheses captures the hyphen, and the second set captures the vertical bar. If the example code is compiled and run under the .NET Framework 1.0 or 1.1, it excludes the vertical bar characters; if it is compiled and run under the .NET Framework 2.0 or later versions, it includes them.","pos":[0,885],"nodes":[{"content":"However, when the regular expression pattern includes multiple sets of capturing parentheses, the behavior of this method depends on the version of the .NET Framework.","pos":[0,167]},{"content":"In .NET Framework 1.0 and 1.1, if a match is not found within the first set of capturing parentheses, captured text from additional capturing parentheses is not included in the returned array.","pos":[168,360]},{"content":"Starting with the .NET Framework 2.0, all captured text is also added to the returned array.","pos":[361,453]},{"content":"For example, the following code uses two sets of capturing parentheses to extract the individual words in a string.","pos":[454,569]},{"content":"The first set of capturing parentheses captures the hyphen, and the second set captures the vertical bar.","pos":[570,675]},{"content":"If the example code is compiled and run under the .NET Framework 1.0 or 1.1, it excludes the vertical bar characters; if it is compiled and run under the .NET Framework 2.0 or later versions, it includes them.","pos":[676,885]}]}]},{"pos":[3901,4240],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Text.RegularExpressions.Regex.Split#7<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split7.cs#7)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Text.RegularExpressions.Regex.Split#7<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split7.vb#7)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Text.RegularExpressions.Regex.Split#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split7.cs#7)]\n [!code-vb[System.Text.RegularExpressions.Regex.Split#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split7.vb#7)]"},{"pos":[4247,4743],"content":"If the regular expression can match the empty string, <xref:System.Text.RegularExpressions.Regex.Split%2A> will split the string into an array of single-character strings because the empty string delimiter can be found at every location. The following example splits the string \"characters\" into as many elements as the input string contains, starting with the character \"a\". Because the null string matches the end of the input string, a null string is inserted at the end of the returned array.","nodes":[{"content":"If the regular expression can match the empty string, <xref:System.Text.RegularExpressions.Regex.Split%2A> will split the string into an array of single-character strings because the empty string delimiter can be found at every location. The following example splits the string \"characters\" into as many elements as the input string contains, starting with the character \"a\". Because the null string matches the end of the input string, a null string is inserted at the end of the returned array.","pos":[0,496],"nodes":[{"content":"If the regular expression can match the empty string, <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.Split%2A&gt;</ph> will split the string into an array of single-character strings because the empty string delimiter can be found at every location.","pos":[0,237],"source":"If the regular expression can match the empty string, <xref:System.Text.RegularExpressions.Regex.Split%2A> will split the string into an array of single-character strings because the empty string delimiter can be found at every location."},{"content":"The following example splits the string \"characters\" into as many elements as the input string contains, starting with the character \"a\".","pos":[238,375]},{"content":"Because the null string matches the end of the input string, a null string is inserted at the end of the returned array.","pos":[376,496]}]}]},{"pos":[4750,5095],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Text.RegularExpressions.Regex.Split#14<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split14.cs#14)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Text.RegularExpressions.Regex.Split#14<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split14.vb#14)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Text.RegularExpressions.Regex.Split#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split14.cs#14)]\n [!code-vb[System.Text.RegularExpressions.Regex.Split#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split14.vb#14)]"},{"pos":[5102,5986],"content":"The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the split operation exceeds the time-out interval specified by the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=fullName> constructor. If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <xref:System.Text.RegularExpressions.Regex> object is created. If no time-out is defined in the <xref:System.Text.RegularExpressions.Regex> constructor call or in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, no exception is thrown","nodes":[{"content":"The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the split operation exceeds the time-out interval specified by the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=fullName> constructor. If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <xref:System.Text.RegularExpressions.Regex> object is created. If no time-out is defined in the <xref:System.Text.RegularExpressions.Regex> constructor call or in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, no exception is thrown","pos":[0,884],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.RegexMatchTimeoutException&gt;</ph> exception is thrown if the execution time of the split operation exceeds the time-out interval specified by the <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=fullName&gt;</ph> constructor.","pos":[0,353],"source":"The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the split operation exceeds the time-out interval specified by the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=fullName> constructor."},{"content":"If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex&gt;</ph> object is created.","pos":[354,605],"source":" If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <xref:System.Text.RegularExpressions.Regex> object is created."},{"content":"If no time-out is defined in the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex&gt;</ph> constructor call or in the application domain's properties, or if the time-out value is <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName&gt;</ph>, no exception is thrown","pos":[606,884],"source":" If no time-out is defined in the <xref:System.Text.RegularExpressions.Regex> constructor call or in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, no exception is thrown"}]}]}],"pos":[348140,354159],"yaml":true,"extradata":"MT"},{"content":"The string to be split.","nodes":[{"pos":[0,23],"content":"The string to be split.","nodes":[{"content":"The string to be split.","pos":[0,23]}]}],"pos":[354321,354345],"yaml":true},{"content":"The maximum number of times the split can occur.","nodes":[{"pos":[0,48],"content":"The maximum number of times the split can occur.","nodes":[{"content":"The maximum number of times the split can occur.","pos":[0,48]}]}],"pos":[354405,354454],"yaml":true},{"content":"The character position in the input string where the search will begin.","nodes":[{"pos":[0,71],"content":"The character position in the input string where the search will begin.","nodes":[{"content":"The character position in the input string where the search will begin.","pos":[0,71]}]}],"pos":[354516,354588],"yaml":true},{"content":"An array of strings.","nodes":[{"pos":[0,20],"content":"An array of strings.","nodes":[{"content":"An array of strings.","pos":[0,20]}]}],"pos":[354647,354668],"yaml":true},{"content":"<code>input</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;input&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>input</code> is `null`."}],"pos":[354840,354870],"yaml":true},{"content":"<code>startat</code> is less than zero or greater than the length of <code>input</code>.","nodes":[{"pos":[0,88],"content":"<ph id=\"ph1\">&lt;code&gt;startat&lt;/code&gt;</ph> is less than zero or greater than the length of <ph id=\"ph2\">&lt;code&gt;input&lt;/code&gt;</ph>.","source":"<code>startat</code> is less than zero or greater than the length of <code>input</code>."}],"pos":[354984,355073],"yaml":true},{"content":"A time-out occurred. For more information about time-outs, see the Remarks section.","nodes":[{"pos":[0,83],"content":"A time-out occurred. For more information about time-outs, see the Remarks section.","nodes":[{"content":"A time-out occurred. For more information about time-outs, see the Remarks section.","pos":[0,83],"nodes":[{"content":"A time-out occurred.","pos":[0,20]},{"content":"For more information about time-outs, see the Remarks section.","pos":[21,83]}]}]}],"pos":[355233,355317],"yaml":true},{"content":"Splits an input string a specified maximum number of times into an array of substrings, at the positions defined by a regular expression specified in the <xref href=\"System.Text.RegularExpressions.Regex\"></xref> constructor.","nodes":[{"pos":[0,224],"content":"Splits an input string a specified maximum number of times into an array of substrings, at the positions defined by a regular expression specified in the <ph id=\"ph1\">&lt;xref href=\"System.Text.RegularExpressions.Regex\"&gt;&lt;/xref&gt;</ph> constructor.","source":"Splits an input string a specified maximum number of times into an array of substrings, at the positions defined by a regular expression specified in the <xref href=\"System.Text.RegularExpressions.Regex\"></xref> constructor."}],"pos":[356882,357107],"yaml":true},{"content":"The <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=fullName> methods are similar to the <xref:System.String.Split%2A?displayProperty=fullName> method, except that <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=fullName> splits the string at a delimiter determined by a regular expression instead of a set of characters. The `count` parameter specifies the maximum number of substrings into which the `input` string can be split; the last string contains the unsplit remainder of the string. A `count` value of zero provides the default behavior of splitting as many times as possible.  \n  \n If multiple matches are adjacent to one another or if a match is found at the beginning or end of `input`, and the number of matches found is at least two less than `count`, an empty string is inserted into the array. That is, empty strings that result from adjacent matches or from matches at the beginning or end of the input string are counted in determining whether the number of matched substrings equals `count`. In the following example, the regular expression `/d+` is used to split an input string that includes one or more decimal digits into a maximum of three substrings. Because the beginning of the input string matches the regular expression pattern, the first array element contains <xref:System.String.Empty?displayProperty=fullName>, the second contains the first set of alphabetic characters in the input string, and the third contains the remainder of the string that follows the third match.  \n  \n [!code-csharp[System.Text.RegularExpressions.Regex.Split#25](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split25.cs#25)]\n [!code-vb[System.Text.RegularExpressions.Regex.Split#25](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split25.vb#25)]  \n  \n If capturing parentheses are used in a regular expression, any captured text is included in the array of split strings. However, any array elements that contain captured text are not counted in determining whether the number of matches has reached `count`. For example, splitting the string \"apple-apricot-plum-pear-banana\" into a maximum of four substrings results in a seven-element array, as the following code shows.  \n  \n [!code-csharp[System.Text.RegularExpressions.Regex.Split#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split4.cs#4)]\n [!code-vb[System.Text.RegularExpressions.Regex.Split#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split4.vb#4)]  \n  \n However, when the regular expression pattern includes multiple sets of capturing parentheses, the behavior of this method depends on the version of the .NET Framework. In the .NET Framework 1.0 and 1.1, only captured text from the first set of capturing parentheses is included in the returned array. Starting with the .NET Framework 2.0, all captured text is added to the returned array. However, elements in the returned array that contain captured text are not counted in determining whether the number of matched substrings equals `count`. For example, in the following code, a regular expression uses two sets of capturing parentheses to extract the elements of a date from a date string. The first set of capturing parentheses captures the hyphen, and the second set captures the forward slash. The call to the <xref:System.Text.RegularExpressions.Regex.Split%28System.String%2CSystem.Int32%29> method then specifies a maximum of two elements in the returned array. If the example code is compiled and run under the .NET Framework 1.0 or 1.1, the method returns a two-element string array. If it is compiled and run under the .NET Framework 2.0 or later versions, the method returns a three-element string array.  \n  \n [!code-csharp[System.Text.RegularExpressions.Regex.Split#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split5.cs#5)]\n [!code-vb[System.Text.RegularExpressions.Regex.Split#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split5.vb#5)]  \n  \n If the regular expression can match the empty string, <xref:System.Text.RegularExpressions.Regex.Split%28System.String%2CSystem.Int32%29> will split the string into an array of single-character strings because the empty string delimiter can be found at every location. The following example splits the string \"characters\" into as many elements as there are in the input string. Because the null string matches the beginning of the input string, a null string is inserted at the beginning of the returned array. This causes the tenth element to consist of the two characters at the end of the input string.  \n  \n [!code-vb[System.Text.RegularExpressions.Regex.Split#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split12.vb#12)]  \n  \n The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the split operation exceeds the time-out interval specified by the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=fullName> constructor. If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <xref:System.Text.RegularExpressions.Regex> object is created. If no time-out is defined in the <xref:System.Text.RegularExpressions.Regex> constructor call or in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, no exception is thrown","nodes":[{"pos":[0,626],"content":"The <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=fullName> methods are similar to the <xref:System.String.Split%2A?displayProperty=fullName> method, except that <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=fullName> splits the string at a delimiter determined by a regular expression instead of a set of characters. The `count` parameter specifies the maximum number of substrings into which the `input` string can be split; the last string contains the unsplit remainder of the string. A `count` value of zero provides the default behavior of splitting as many times as possible.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=fullName&gt;</ph> methods are similar to the <ph id=\"ph2\">&lt;xref:System.String.Split%2A?displayProperty=fullName&gt;</ph> method, except that <ph id=\"ph3\">&lt;xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=fullName&gt;</ph> splits the string at a delimiter determined by a regular expression instead of a set of characters.","pos":[0,361],"source":"The <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=fullName> methods are similar to the <xref:System.String.Split%2A?displayProperty=fullName> method, except that <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=fullName> splits the string at a delimiter determined by a regular expression instead of a set of characters."},{"content":"The <ph id=\"ph1\">`count`</ph> parameter specifies the maximum number of substrings into which the <ph id=\"ph2\">`input`</ph> string can be split; the last string contains the unsplit remainder of the string.","pos":[362,532],"source":" The `count` parameter specifies the maximum number of substrings into which the `input` string can be split; the last string contains the unsplit remainder of the string."},{"content":"A <ph id=\"ph1\">`count`</ph> value of zero provides the default behavior of splitting as many times as possible.","pos":[533,626],"source":" A `count` value of zero provides the default behavior of splitting as many times as possible."}]},{"pos":[633,1545],"content":"If multiple matches are adjacent to one another or if a match is found at the beginning or end of `input`, and the number of matches found is at least two less than `count`, an empty string is inserted into the array. That is, empty strings that result from adjacent matches or from matches at the beginning or end of the input string are counted in determining whether the number of matched substrings equals `count`. In the following example, the regular expression `/d+` is used to split an input string that includes one or more decimal digits into a maximum of three substrings. Because the beginning of the input string matches the regular expression pattern, the first array element contains <xref:System.String.Empty?displayProperty=fullName>, the second contains the first set of alphabetic characters in the input string, and the third contains the remainder of the string that follows the third match.","nodes":[{"content":"If multiple matches are adjacent to one another or if a match is found at the beginning or end of <ph id=\"ph1\">`input`</ph>, and the number of matches found is at least two less than <ph id=\"ph2\">`count`</ph>, an empty string is inserted into the array.","pos":[0,217],"source":"If multiple matches are adjacent to one another or if a match is found at the beginning or end of `input`, and the number of matches found is at least two less than `count`, an empty string is inserted into the array."},{"content":"That is, empty strings that result from adjacent matches or from matches at the beginning or end of the input string are counted in determining whether the number of matched substrings equals <ph id=\"ph1\">`count`</ph>.","pos":[218,418],"source":" That is, empty strings that result from adjacent matches or from matches at the beginning or end of the input string are counted in determining whether the number of matched substrings equals `count`."},{"content":"In the following example, the regular expression <ph id=\"ph1\">`/d+`</ph> is used to split an input string that includes one or more decimal digits into a maximum of three substrings.","pos":[419,583],"source":" In the following example, the regular expression `/d+` is used to split an input string that includes one or more decimal digits into a maximum of three substrings."},{"content":"Because the beginning of the input string matches the regular expression pattern, the first array element contains <ph id=\"ph1\">&lt;xref:System.String.Empty?displayProperty=fullName&gt;</ph>, the second contains the first set of alphabetic characters in the input string, and the third contains the remainder of the string that follows the third match.","pos":[584,912],"source":" Because the beginning of the input string matches the regular expression pattern, the first array element contains <xref:System.String.Empty?displayProperty=fullName>, the second contains the first set of alphabetic characters in the input string, and the third contains the remainder of the string that follows the third match."}]},{"pos":[1552,1897],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Text.RegularExpressions.Regex.Split#25<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split25.cs#25)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Text.RegularExpressions.Regex.Split#25<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split25.vb#25)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Text.RegularExpressions.Regex.Split#25](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split25.cs#25)]\n [!code-vb[System.Text.RegularExpressions.Regex.Split#25](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split25.vb#25)]"},{"pos":[1904,2324],"content":"If capturing parentheses are used in a regular expression, any captured text is included in the array of split strings. However, any array elements that contain captured text are not counted in determining whether the number of matches has reached `count`. For example, splitting the string \"apple-apricot-plum-pear-banana\" into a maximum of four substrings results in a seven-element array, as the following code shows.","nodes":[{"content":"If capturing parentheses are used in a regular expression, any captured text is included in the array of split strings.","pos":[0,119]},{"content":"However, any array elements that contain captured text are not counted in determining whether the number of matches has reached <ph id=\"ph1\">`count`</ph>.","pos":[120,256],"source":" However, any array elements that contain captured text are not counted in determining whether the number of matches has reached `count`."},{"content":"For example, splitting the string \"apple-apricot-plum-pear-banana\" into a maximum of four substrings results in a seven-element array, as the following code shows.","pos":[257,420]}]},{"pos":[2331,2670],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Text.RegularExpressions.Regex.Split#4<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split4.cs#4)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Text.RegularExpressions.Regex.Split#4<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split4.vb#4)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Text.RegularExpressions.Regex.Split#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split4.cs#4)]\n [!code-vb[System.Text.RegularExpressions.Regex.Split#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split4.vb#4)]"},{"pos":[2677,3895],"content":"However, when the regular expression pattern includes multiple sets of capturing parentheses, the behavior of this method depends on the version of the .NET Framework. In the .NET Framework 1.0 and 1.1, only captured text from the first set of capturing parentheses is included in the returned array. Starting with the .NET Framework 2.0, all captured text is added to the returned array. However, elements in the returned array that contain captured text are not counted in determining whether the number of matched substrings equals `count`. For example, in the following code, a regular expression uses two sets of capturing parentheses to extract the elements of a date from a date string. The first set of capturing parentheses captures the hyphen, and the second set captures the forward slash. The call to the <xref:System.Text.RegularExpressions.Regex.Split%28System.String%2CSystem.Int32%29> method then specifies a maximum of two elements in the returned array. If the example code is compiled and run under the .NET Framework 1.0 or 1.1, the method returns a two-element string array. If it is compiled and run under the .NET Framework 2.0 or later versions, the method returns a three-element string array.","nodes":[{"content":"However, when the regular expression pattern includes multiple sets of capturing parentheses, the behavior of this method depends on the version of the .NET Framework.","pos":[0,167]},{"content":"In the .NET Framework 1.0 and 1.1, only captured text from the first set of capturing parentheses is included in the returned array.","pos":[168,300]},{"content":"Starting with the .NET Framework 2.0, all captured text is added to the returned array.","pos":[301,388]},{"content":"However, elements in the returned array that contain captured text are not counted in determining whether the number of matched substrings equals <ph id=\"ph1\">`count`</ph>.","pos":[389,543],"source":" However, elements in the returned array that contain captured text are not counted in determining whether the number of matched substrings equals `count`."},{"content":"For example, in the following code, a regular expression uses two sets of capturing parentheses to extract the elements of a date from a date string.","pos":[544,693]},{"content":"The first set of capturing parentheses captures the hyphen, and the second set captures the forward slash.","pos":[694,800]},{"content":"The call to the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.Split%28System.String%2CSystem.Int32%29&gt;</ph> method then specifies a maximum of two elements in the returned array.","pos":[801,971],"source":" The call to the <xref:System.Text.RegularExpressions.Regex.Split%28System.String%2CSystem.Int32%29> method then specifies a maximum of two elements in the returned array."},{"content":"If the example code is compiled and run under the .NET Framework 1.0 or 1.1, the method returns a two-element string array.","pos":[972,1095]},{"content":"If it is compiled and run under the .NET Framework 2.0 or later versions, the method returns a three-element string array.","pos":[1096,1218]}]},{"pos":[3902,4241],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Text.RegularExpressions.Regex.Split#5<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split5.cs#5)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Text.RegularExpressions.Regex.Split#5<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split5.vb#5)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Text.RegularExpressions.Regex.Split#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split5.cs#5)]\n [!code-vb[System.Text.RegularExpressions.Regex.Split#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split5.vb#5)]"},{"pos":[4248,4853],"content":"If the regular expression can match the empty string, <xref:System.Text.RegularExpressions.Regex.Split%28System.String%2CSystem.Int32%29> will split the string into an array of single-character strings because the empty string delimiter can be found at every location. The following example splits the string \"characters\" into as many elements as there are in the input string. Because the null string matches the beginning of the input string, a null string is inserted at the beginning of the returned array. This causes the tenth element to consist of the two characters at the end of the input string.","nodes":[{"content":"If the regular expression can match the empty string, <xref:System.Text.RegularExpressions.Regex.Split%28System.String%2CSystem.Int32%29> will split the string into an array of single-character strings because the empty string delimiter can be found at every location. The following example splits the string \"characters\" into as many elements as there are in the input string. Because the null string matches the beginning of the input string, a null string is inserted at the beginning of the returned array. This causes the tenth element to consist of the two characters at the end of the input string.","pos":[0,605],"nodes":[{"content":"If the regular expression can match the empty string, <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.Split%28System.String%2CSystem.Int32%29&gt;</ph> will split the string into an array of single-character strings because the empty string delimiter can be found at every location.","pos":[0,268],"source":"If the regular expression can match the empty string, <xref:System.Text.RegularExpressions.Regex.Split%28System.String%2CSystem.Int32%29> will split the string into an array of single-character strings because the empty string delimiter can be found at every location."},{"content":"The following example splits the string \"characters\" into as many elements as there are in the input string.","pos":[269,377]},{"content":"Because the null string matches the beginning of the input string, a null string is inserted at the beginning of the returned array.","pos":[378,510]},{"content":"This causes the tenth element to consist of the two characters at the end of the input string.","pos":[511,605]}]}]},{"pos":[4860,5032],"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>System.Text.RegularExpressions.Regex.Split#12<ept id=\"p2\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split12.vb#12)</ept><ept id=\"p1\">]</ept>","source":"[!code-vb[System.Text.RegularExpressions.Regex.Split#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split12.vb#12)]"},{"pos":[5039,5923],"content":"The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the split operation exceeds the time-out interval specified by the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=fullName> constructor. If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <xref:System.Text.RegularExpressions.Regex> object is created. If no time-out is defined in the <xref:System.Text.RegularExpressions.Regex> constructor call or in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, no exception is thrown","nodes":[{"content":"The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the split operation exceeds the time-out interval specified by the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=fullName> constructor. If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <xref:System.Text.RegularExpressions.Regex> object is created. If no time-out is defined in the <xref:System.Text.RegularExpressions.Regex> constructor call or in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, no exception is thrown","pos":[0,884],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.RegexMatchTimeoutException&gt;</ph> exception is thrown if the execution time of the split operation exceeds the time-out interval specified by the <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=fullName&gt;</ph> constructor.","pos":[0,353],"source":"The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the split operation exceeds the time-out interval specified by the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=fullName> constructor."},{"content":"If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex&gt;</ph> object is created.","pos":[354,605],"source":" If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <xref:System.Text.RegularExpressions.Regex> object is created."},{"content":"If no time-out is defined in the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex&gt;</ph> constructor call or in the application domain's properties, or if the time-out value is <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName&gt;</ph>, no exception is thrown","pos":[606,884],"source":" If no time-out is defined in the <xref:System.Text.RegularExpressions.Regex> constructor call or in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, no exception is thrown"}]}]}],"pos":[357118,363069],"yaml":true,"extradata":"MT"},{"content":"The string to be split.","nodes":[{"pos":[0,23],"content":"The string to be split.","nodes":[{"content":"The string to be split.","pos":[0,23]}]}],"pos":[363218,363242],"yaml":true},{"content":"The maximum number of times the split can occur.","nodes":[{"pos":[0,48],"content":"The maximum number of times the split can occur.","nodes":[{"content":"The maximum number of times the split can occur.","pos":[0,48]}]}],"pos":[363302,363351],"yaml":true},{"content":"An array of strings.","nodes":[{"pos":[0,20],"content":"An array of strings.","nodes":[{"content":"An array of strings.","pos":[0,20]}]}],"pos":[363410,363431],"yaml":true},{"content":"<code>input</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;input&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>input</code> is `null`."}],"pos":[363603,363633],"yaml":true},{"content":"A time-out occurred. For more information about time-outs, see the Remarks section.","nodes":[{"pos":[0,83],"content":"A time-out occurred. For more information about time-outs, see the Remarks section.","nodes":[{"content":"A time-out occurred. For more information about time-outs, see the Remarks section.","pos":[0,83],"nodes":[{"content":"A time-out occurred.","pos":[0,20]},{"content":"For more information about time-outs, see the Remarks section.","pos":[21,83]}]}]}],"pos":[363793,363877],"yaml":true},{"content":"Splits an input string into an array of substrings at the positions defined by a regular expression pattern specified in the <xref href=\"System.Text.RegularExpressions.Regex\"></xref> constructor.","nodes":[{"pos":[0,195],"content":"Splits an input string into an array of substrings at the positions defined by a regular expression pattern specified in the <ph id=\"ph1\">&lt;xref href=\"System.Text.RegularExpressions.Regex\"&gt;&lt;/xref&gt;</ph> constructor.","source":"Splits an input string into an array of substrings at the positions defined by a regular expression pattern specified in the <xref href=\"System.Text.RegularExpressions.Regex\"></xref> constructor."}],"pos":[365382,365578],"yaml":true},{"content":"The <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=fullName> methods are similar to the <xref:System.String.Split%28System.Char%5B%5D%29?displayProperty=fullName> method, except that <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=fullName> splits the string at a delimiter determined by a regular expression instead of a set of characters. The string is split as many times as possible. If no delimiter is found, the return value contains one element whose value is the original input string.  \n  \n If multiple matches are adjacent to one another, an empty string is inserted into the array. For example, splitting a string on a single hyphen causes the returned array to include an empty string in the position where two adjacent hyphens are found, as the following code shows.  \n  \n [!code-csharp[System.Text.RegularExpressions.Regex.Split#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split1.cs#1)]\n [!code-vb[System.Text.RegularExpressions.Regex.Split#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split1.vb#1)]  \n  \n If a match is found at the beginning or the end of the input string, an empty string is included at the beginning or the end of the returned array. The following example uses the regular expression pattern `\\d+` to split an input string on numeric characters. Because the string begins and ends with matching numeric characters, the value of the first and last element of the returned array is <xref:System.String.Empty?displayProperty=fullName>.  \n  \n [!code-csharp[System.Text.RegularExpressions.Regex.Split#21](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split21.cs#21)]\n [!code-vb[System.Text.RegularExpressions.Regex.Split#21](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split21.vb#21)]  \n  \n If capturing parentheses are used in a <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=fullName> expression, any captured text is included in the resulting string array. For example, if you split the string \"plum-pear\" on a hyphen placed within capturing parentheses, the returned array includes a string element that contains the hyphen.  \n  \n [!code-csharp[System.Text.RegularExpressions.Regex.Split#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split2.cs#2)]\n [!code-vb[System.Text.RegularExpressions.Regex.Split#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split2.vb#2)]  \n  \n However, when the regular expression pattern includes multiple sets of capturing parentheses, the behavior of this method depends on the version of the .NET Framework. In the .NET Framework 1.0 and 1.1, if a match is not found within the first set of capturing parentheses, captured text from additional capturing parentheses is not included in the returned array. Starting with the .NET Framework 2.0, all captured text is also added to the returned array. For example, the following code uses two sets of capturing parentheses to extract the elements of a date, including the date delimiters, from a date string. The first set of capturing parentheses captures the hyphen, and the second set captures the forward slash. If the example code is compiled and run under the .NET Framework 1.0 or 1.1, it excludes the slash characters; if it is compiled and run under the .NET Framework 2.0 or later versions, it includes them.  \n  \n [!code-csharp[System.Text.RegularExpressions.Regex.Split#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split3.cs#3)]\n [!code-vb[System.Text.RegularExpressions.Regex.Split#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split3.vb#3)]  \n  \n If the regular expression can match the empty string, <xref:System.Text.RegularExpressions.Regex.Split%28System.String%29> will split the string into an array of single-character strings because the empty string delimiter can be found at every location. For example:  \n  \n [!code-csharp[System.Text.RegularExpressions.Regex.Split#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split11.cs#11)]\n [!code-vb[System.Text.RegularExpressions.Regex.Split#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split11.vb#11)]  \n  \n Note that the returned array also includes an empty string at the beginning and end of the array.  \n  \n The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the split operation exceeds the time-out interval specified by the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=fullName> constructor. If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <xref:System.Text.RegularExpressions.Regex> object is created. If no time-out is defined in the <xref:System.Text.RegularExpressions.Regex> constructor call or in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, no exception is thrown","nodes":[{"pos":[0,534],"content":"The <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=fullName> methods are similar to the <xref:System.String.Split%28System.Char%5B%5D%29?displayProperty=fullName> method, except that <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=fullName> splits the string at a delimiter determined by a regular expression instead of a set of characters. The string is split as many times as possible. If no delimiter is found, the return value contains one element whose value is the original input string.","nodes":[{"content":"The <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=fullName> methods are similar to the <xref:System.String.Split%28System.Char%5B%5D%29?displayProperty=fullName> method, except that <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=fullName> splits the string at a delimiter determined by a regular expression instead of a set of characters. The string is split as many times as possible. If no delimiter is found, the return value contains one element whose value is the original input string.","pos":[0,534],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=fullName&gt;</ph> methods are similar to the <ph id=\"ph2\">&lt;xref:System.String.Split%28System.Char%5B%5D%29?displayProperty=fullName&gt;</ph> method, except that <ph id=\"ph3\">&lt;xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=fullName&gt;</ph> splits the string at a delimiter determined by a regular expression instead of a set of characters.","pos":[0,381],"source":"The <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=fullName> methods are similar to the <xref:System.String.Split%28System.Char%5B%5D%29?displayProperty=fullName> method, except that <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=fullName> splits the string at a delimiter determined by a regular expression instead of a set of characters."},{"content":"The string is split as many times as possible.","pos":[382,428]},{"content":"If no delimiter is found, the return value contains one element whose value is the original input string.","pos":[429,534]}]}]},{"pos":[541,820],"content":"If multiple matches are adjacent to one another, an empty string is inserted into the array. For example, splitting a string on a single hyphen causes the returned array to include an empty string in the position where two adjacent hyphens are found, as the following code shows.","nodes":[{"content":"If multiple matches are adjacent to one another, an empty string is inserted into the array. For example, splitting a string on a single hyphen causes the returned array to include an empty string in the position where two adjacent hyphens are found, as the following code shows.","pos":[0,279],"nodes":[{"content":"If multiple matches are adjacent to one another, an empty string is inserted into the array.","pos":[0,92]},{"content":"For example, splitting a string on a single hyphen causes the returned array to include an empty string in the position where two adjacent hyphens are found, as the following code shows.","pos":[93,279]}]}]},{"pos":[827,1166],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Text.RegularExpressions.Regex.Split#1<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split1.cs#1)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Text.RegularExpressions.Regex.Split#1<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split1.vb#1)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Text.RegularExpressions.Regex.Split#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split1.cs#1)]\n [!code-vb[System.Text.RegularExpressions.Regex.Split#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split1.vb#1)]"},{"pos":[1173,1619],"content":"If a match is found at the beginning or the end of the input string, an empty string is included at the beginning or the end of the returned array. The following example uses the regular expression pattern `\\d+` to split an input string on numeric characters. Because the string begins and ends with matching numeric characters, the value of the first and last element of the returned array is <xref:System.String.Empty?displayProperty=fullName>.","nodes":[{"content":"If a match is found at the beginning or the end of the input string, an empty string is included at the beginning or the end of the returned array.","pos":[0,147]},{"content":"The following example uses the regular expression pattern <ph id=\"ph1\">`\\d+`</ph> to split an input string on numeric characters.","pos":[148,259],"source":" The following example uses the regular expression pattern `\\d+` to split an input string on numeric characters."},{"content":"Because the string begins and ends with matching numeric characters, the value of the first and last element of the returned array is <ph id=\"ph1\">&lt;xref:System.String.Empty?displayProperty=fullName&gt;</ph>.","pos":[260,446],"source":" Because the string begins and ends with matching numeric characters, the value of the first and last element of the returned array is <xref:System.String.Empty?displayProperty=fullName>."}]},{"pos":[1626,1971],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Text.RegularExpressions.Regex.Split#21<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split21.cs#21)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Text.RegularExpressions.Regex.Split#21<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split21.vb#21)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Text.RegularExpressions.Regex.Split#21](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split21.cs#21)]\n [!code-vb[System.Text.RegularExpressions.Regex.Split#21](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split21.vb#21)]"},{"pos":[1978,2336],"content":"If capturing parentheses are used in a <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=fullName> expression, any captured text is included in the resulting string array. For example, if you split the string \"plum-pear\" on a hyphen placed within capturing parentheses, the returned array includes a string element that contains the hyphen.","nodes":[{"content":"If capturing parentheses are used in a <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=fullName> expression, any captured text is included in the resulting string array. For example, if you split the string \"plum-pear\" on a hyphen placed within capturing parentheses, the returned array includes a string element that contains the hyphen.","pos":[0,358],"nodes":[{"content":"If capturing parentheses are used in a <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=fullName&gt;</ph> expression, any captured text is included in the resulting string array.","pos":[0,189],"source":"If capturing parentheses are used in a <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=fullName> expression, any captured text is included in the resulting string array."},{"content":"For example, if you split the string \"plum-pear\" on a hyphen placed within capturing parentheses, the returned array includes a string element that contains the hyphen.","pos":[190,358]}]}]},{"pos":[2343,2682],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Text.RegularExpressions.Regex.Split#2<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split2.cs#2)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Text.RegularExpressions.Regex.Split#2<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split2.vb#2)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Text.RegularExpressions.Regex.Split#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split2.cs#2)]\n [!code-vb[System.Text.RegularExpressions.Regex.Split#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split2.vb#2)]"},{"pos":[2689,3613],"content":"However, when the regular expression pattern includes multiple sets of capturing parentheses, the behavior of this method depends on the version of the .NET Framework. In the .NET Framework 1.0 and 1.1, if a match is not found within the first set of capturing parentheses, captured text from additional capturing parentheses is not included in the returned array. Starting with the .NET Framework 2.0, all captured text is also added to the returned array. For example, the following code uses two sets of capturing parentheses to extract the elements of a date, including the date delimiters, from a date string. The first set of capturing parentheses captures the hyphen, and the second set captures the forward slash. If the example code is compiled and run under the .NET Framework 1.0 or 1.1, it excludes the slash characters; if it is compiled and run under the .NET Framework 2.0 or later versions, it includes them.","nodes":[{"content":"However, when the regular expression pattern includes multiple sets of capturing parentheses, the behavior of this method depends on the version of the .NET Framework. In the .NET Framework 1.0 and 1.1, if a match is not found within the first set of capturing parentheses, captured text from additional capturing parentheses is not included in the returned array. Starting with the .NET Framework 2.0, all captured text is also added to the returned array. For example, the following code uses two sets of capturing parentheses to extract the elements of a date, including the date delimiters, from a date string. The first set of capturing parentheses captures the hyphen, and the second set captures the forward slash. If the example code is compiled and run under the .NET Framework 1.0 or 1.1, it excludes the slash characters; if it is compiled and run under the .NET Framework 2.0 or later versions, it includes them.","pos":[0,924],"nodes":[{"content":"However, when the regular expression pattern includes multiple sets of capturing parentheses, the behavior of this method depends on the version of the .NET Framework.","pos":[0,167]},{"content":"In the .NET Framework 1.0 and 1.1, if a match is not found within the first set of capturing parentheses, captured text from additional capturing parentheses is not included in the returned array.","pos":[168,364]},{"content":"Starting with the .NET Framework 2.0, all captured text is also added to the returned array.","pos":[365,457]},{"content":"For example, the following code uses two sets of capturing parentheses to extract the elements of a date, including the date delimiters, from a date string.","pos":[458,614]},{"content":"The first set of capturing parentheses captures the hyphen, and the second set captures the forward slash.","pos":[615,721]},{"content":"If the example code is compiled and run under the .NET Framework 1.0 or 1.1, it excludes the slash characters; if it is compiled and run under the .NET Framework 2.0 or later versions, it includes them.","pos":[722,924]}]}]},{"pos":[3620,3959],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Text.RegularExpressions.Regex.Split#3<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split3.cs#3)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Text.RegularExpressions.Regex.Split#3<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split3.vb#3)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Text.RegularExpressions.Regex.Split#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split3.cs#3)]\n [!code-vb[System.Text.RegularExpressions.Regex.Split#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split3.vb#3)]"},{"pos":[3966,4232],"content":"If the regular expression can match the empty string, <xref:System.Text.RegularExpressions.Regex.Split%28System.String%29> will split the string into an array of single-character strings because the empty string delimiter can be found at every location. For example:","nodes":[{"content":"If the regular expression can match the empty string, <xref:System.Text.RegularExpressions.Regex.Split%28System.String%29> will split the string into an array of single-character strings because the empty string delimiter can be found at every location. For example:","pos":[0,266],"nodes":[{"content":"If the regular expression can match the empty string, <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.Split%28System.String%29&gt;</ph> will split the string into an array of single-character strings because the empty string delimiter can be found at every location.","pos":[0,253],"source":"If the regular expression can match the empty string, <xref:System.Text.RegularExpressions.Regex.Split%28System.String%29> will split the string into an array of single-character strings because the empty string delimiter can be found at every location."},{"content":"For example:","pos":[254,266]}]}]},{"pos":[4239,4584],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Text.RegularExpressions.Regex.Split#11<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split11.cs#11)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Text.RegularExpressions.Regex.Split#11<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split11.vb#11)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Text.RegularExpressions.Regex.Split#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split11.cs#11)]\n [!code-vb[System.Text.RegularExpressions.Regex.Split#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split11.vb#11)]"},{"pos":[4591,4688],"content":"Note that the returned array also includes an empty string at the beginning and end of the array.","nodes":[{"content":"Note that the returned array also includes an empty string at the beginning and end of the array.","pos":[0,97]}]},{"pos":[4695,5579],"content":"The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the split operation exceeds the time-out interval specified by the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=fullName> constructor. If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <xref:System.Text.RegularExpressions.Regex> object is created. If no time-out is defined in the <xref:System.Text.RegularExpressions.Regex> constructor call or in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, no exception is thrown","nodes":[{"content":"The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the split operation exceeds the time-out interval specified by the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=fullName> constructor. If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <xref:System.Text.RegularExpressions.Regex> object is created. If no time-out is defined in the <xref:System.Text.RegularExpressions.Regex> constructor call or in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, no exception is thrown","pos":[0,884],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.RegexMatchTimeoutException&gt;</ph> exception is thrown if the execution time of the split operation exceeds the time-out interval specified by the <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=fullName&gt;</ph> constructor.","pos":[0,353],"source":"The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the split operation exceeds the time-out interval specified by the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=fullName> constructor."},{"content":"If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex&gt;</ph> object is created.","pos":[354,605],"source":" If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <xref:System.Text.RegularExpressions.Regex> object is created."},{"content":"If no time-out is defined in the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex&gt;</ph> constructor call or in the application domain's properties, or if the time-out value is <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName&gt;</ph>, no exception is thrown","pos":[606,884],"source":" If no time-out is defined in the <xref:System.Text.RegularExpressions.Regex> constructor call or in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, no exception is thrown"}]}]}],"pos":[365589,371203],"yaml":true,"extradata":"MT"},{"content":"The string to split.","nodes":[{"pos":[0,20],"content":"The string to split.","nodes":[{"content":"The string to split.","pos":[0,20]}]}],"pos":[371341,371362],"yaml":true},{"content":"An array of strings.","nodes":[{"pos":[0,20],"content":"An array of strings.","nodes":[{"content":"An array of strings.","pos":[0,20]}]}],"pos":[371421,371442],"yaml":true},{"content":"<code>input</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;input&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>input</code> is `null`."}],"pos":[371614,371644],"yaml":true},{"content":"A time-out occurred. For more information about time-outs, see the Remarks section.","nodes":[{"pos":[0,83],"content":"A time-out occurred. For more information about time-outs, see the Remarks section.","nodes":[{"content":"A time-out occurred. For more information about time-outs, see the Remarks section.","pos":[0,83],"nodes":[{"content":"A time-out occurred.","pos":[0,20]},{"content":"For more information about time-outs, see the Remarks section.","pos":[21,83]}]}]}],"pos":[371804,371888],"yaml":true},{"content":"Splits an input string into an array of substrings at the positions defined by a regular expression pattern.","nodes":[{"pos":[0,108],"content":"Splits an input string into an array of substrings at the positions defined by a regular expression pattern.","nodes":[{"content":"Splits an input string into an array of substrings at the positions defined by a regular expression pattern.","pos":[0,108]}]}],"pos":[373459,373568],"yaml":true},{"content":"The <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=fullName> methods are similar to the <xref:System.String.Split%2A?displayProperty=fullName> method, except that <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=fullName> splits the string at a delimiter determined by a regular expression instead of a set of characters. The `input` string is split as many times as possible. If `pattern` is not found in the `input` string, the return value contains one element whose value is the original `input` string.  \n  \n The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match. For more information about regular expressions, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).  \n  \n> [!IMPORTANT]\n>  Compiled regular expressions used in calls to static <xref:System.Text.RegularExpressions.Regex.Split%2A> methods are automatically cached. To manage the lifetime of compiled regular expressions yourself, use the instance <xref:System.Text.RegularExpressions.Regex.Split%2A> methods.  \n  \n If multiple matches are adjacent to one another, an empty string is inserted into the array. For example, splitting a string on a single hyphen causes the returned array to include an empty string in the position where two adjacent hyphens are found, as the following code shows.  \n  \n [!code-csharp[System.Text.RegularExpressions.Regex.Split#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split8.cs#8)]\n [!code-vb[System.Text.RegularExpressions.Regex.Split#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split8.vb#8)]  \n  \n If a match is found at the beginning or the end of the input string, an empty string is included at the beginning or the end of the returned array. The following example uses the regular expression pattern `\\d+` to split an input string on numeric characters. Because the string begins and ends with matching numeric characters, the value of the first and last element of the returned array is <xref:System.String.Empty?displayProperty=fullName>.  \n  \n [!code-csharp[System.Text.RegularExpressions.Regex.Split#22](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split22.cs#22)]\n [!code-vb[System.Text.RegularExpressions.Regex.Split#22](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split22.vb#22)]  \n  \n If capturing parentheses are used in a <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=fullName> expression, any captured text is included in the resulting string array. For example, if you split the string \"plum-pear\" on a hyphen placed within capturing parentheses, the returned array includes a string element that contains the hyphen.  \n  \n [!code-csharp[System.Text.RegularExpressions.Regex.Split#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split9.cs#9)]\n [!code-vb[System.Text.RegularExpressions.Regex.Split#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split9.vb#9)]  \n  \n However, when the regular expression pattern includes multiple sets of capturing parentheses, the behavior of this method depends on the version of the .NET Framework. In the .NET Framework 1.0 and 1.1, if a match is not found within the first set of capturing parentheses, captured text from additional capturing parentheses is not included in the returned array. Starting with the .NET Framework 2.0, all captured text is also added to the returned array. For example, the following code uses two sets of capturing parentheses to extract the elements of a date, including the date delimiters, from a date string. The first set of capturing parentheses captures the hyphen, and the second set captures the forward slash. If the example code is compiled and run under the .NET Framework 1.0 or 1.1, it excludes the slash characters; if it is compiled and run under the .NET Framework 2.0 or later versions, it includes them.  \n  \n [!code-csharp[System.Text.RegularExpressions.Regex.Split#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split10.cs#10)]\n [!code-vb[System.Text.RegularExpressions.Regex.Split#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split10.vb#10)]  \n  \n If the regular expression can match the empty string, <xref:System.Text.RegularExpressions.Regex.Split%2A> will split the string into an array of single-character strings because the empty string delimiter can be found at every location. For example:  \n  \n [!code-csharp[System.Text.RegularExpressions.Regex.Split#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split13.cs#13)]\n [!code-vb[System.Text.RegularExpressions.Regex.Split#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split13.vb#13)]  \n  \n Note that the returned array also includes an empty string at the beginning and end of the array.  \n  \n The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the split operation exceeds the time-out interval specified for the application domain in which the method is called. If no time-out is defined in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, no exception is thrown.","nodes":[{"pos":[0,547],"content":"The <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=fullName> methods are similar to the <xref:System.String.Split%2A?displayProperty=fullName> method, except that <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=fullName> splits the string at a delimiter determined by a regular expression instead of a set of characters. The `input` string is split as many times as possible. If `pattern` is not found in the `input` string, the return value contains one element whose value is the original `input` string.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=fullName&gt;</ph> methods are similar to the <ph id=\"ph2\">&lt;xref:System.String.Split%2A?displayProperty=fullName&gt;</ph> method, except that <ph id=\"ph3\">&lt;xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=fullName&gt;</ph> splits the string at a delimiter determined by a regular expression instead of a set of characters.","pos":[0,361],"source":"The <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=fullName> methods are similar to the <xref:System.String.Split%2A?displayProperty=fullName> method, except that <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=fullName> splits the string at a delimiter determined by a regular expression instead of a set of characters."},{"content":"The <ph id=\"ph1\">`input`</ph> string is split as many times as possible.","pos":[362,416],"source":" The `input` string is split as many times as possible."},{"content":"If <ph id=\"ph1\">`pattern`</ph> is not found in the <ph id=\"ph2\">`input`</ph> string, the return value contains one element whose value is the original <ph id=\"ph3\">`input`</ph> string.","pos":[417,547],"source":" If `pattern` is not found in the `input` string, the return value contains one element whose value is the original `input` string."}]},{"pos":[554,942],"content":"The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match. For more information about regular expressions, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).","nodes":[{"content":"The <ph id=\"ph1\">`pattern`</ph> parameter consists of regular expression language elements that symbolically describe the string to match.","pos":[0,120],"source":"The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match."},{"content":"For more information about regular expressions, see <bpt id=\"p1\">[</bpt>.NET Framework Regular Expressions<ept id=\"p1\">](~/docs/standard/base-types/regular-expressions.md)</ept> and <bpt id=\"p2\">[</bpt>Regular Expression Language - Quick Reference<ept id=\"p2\">](~/docs/standard/base-types/regular-expression-language-quick-reference.md)</ept>.","pos":[121,388],"source":" For more information about regular expressions, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md)."}]},{"pos":[950,1249],"content":"[!IMPORTANT]\n Compiled regular expressions used in calls to static <xref:System.Text.RegularExpressions.Regex.Split%2A> methods are automatically cached. To manage the lifetime of compiled regular expressions yourself, use the instance <xref:System.Text.RegularExpressions.Regex.Split%2A> methods.","leadings":["","> "],"nodes":[{"content":" Compiled regular expressions used in calls to static <xref:System.Text.RegularExpressions.Regex.Split%2A> methods are automatically cached. To manage the lifetime of compiled regular expressions yourself, use the instance <xref:System.Text.RegularExpressions.Regex.Split%2A> methods.","pos":[13,297],"nodes":[{"content":"Compiled regular expressions used in calls to static <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.Split%2A&gt;</ph> methods are automatically cached.","pos":[1,140],"source":" Compiled regular expressions used in calls to static <xref:System.Text.RegularExpressions.Regex.Split%2A> methods are automatically cached."},{"content":"To manage the lifetime of compiled regular expressions yourself, use the instance <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.Split%2A&gt;</ph> methods.","pos":[141,284],"source":" To manage the lifetime of compiled regular expressions yourself, use the instance <xref:System.Text.RegularExpressions.Regex.Split%2A> methods."}]}]},{"pos":[1256,1535],"content":"If multiple matches are adjacent to one another, an empty string is inserted into the array. For example, splitting a string on a single hyphen causes the returned array to include an empty string in the position where two adjacent hyphens are found, as the following code shows.","nodes":[{"content":"If multiple matches are adjacent to one another, an empty string is inserted into the array. For example, splitting a string on a single hyphen causes the returned array to include an empty string in the position where two adjacent hyphens are found, as the following code shows.","pos":[0,279],"nodes":[{"content":"If multiple matches are adjacent to one another, an empty string is inserted into the array.","pos":[0,92]},{"content":"For example, splitting a string on a single hyphen causes the returned array to include an empty string in the position where two adjacent hyphens are found, as the following code shows.","pos":[93,279]}]}]},{"pos":[1542,1881],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Text.RegularExpressions.Regex.Split#8<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split8.cs#8)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Text.RegularExpressions.Regex.Split#8<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split8.vb#8)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Text.RegularExpressions.Regex.Split#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split8.cs#8)]\n [!code-vb[System.Text.RegularExpressions.Regex.Split#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split8.vb#8)]"},{"pos":[1888,2334],"content":"If a match is found at the beginning or the end of the input string, an empty string is included at the beginning or the end of the returned array. The following example uses the regular expression pattern `\\d+` to split an input string on numeric characters. Because the string begins and ends with matching numeric characters, the value of the first and last element of the returned array is <xref:System.String.Empty?displayProperty=fullName>.","nodes":[{"content":"If a match is found at the beginning or the end of the input string, an empty string is included at the beginning or the end of the returned array.","pos":[0,147]},{"content":"The following example uses the regular expression pattern <ph id=\"ph1\">`\\d+`</ph> to split an input string on numeric characters.","pos":[148,259],"source":" The following example uses the regular expression pattern `\\d+` to split an input string on numeric characters."},{"content":"Because the string begins and ends with matching numeric characters, the value of the first and last element of the returned array is <ph id=\"ph1\">&lt;xref:System.String.Empty?displayProperty=fullName&gt;</ph>.","pos":[260,446],"source":" Because the string begins and ends with matching numeric characters, the value of the first and last element of the returned array is <xref:System.String.Empty?displayProperty=fullName>."}]},{"pos":[2341,2686],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Text.RegularExpressions.Regex.Split#22<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split22.cs#22)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Text.RegularExpressions.Regex.Split#22<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split22.vb#22)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Text.RegularExpressions.Regex.Split#22](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split22.cs#22)]\n [!code-vb[System.Text.RegularExpressions.Regex.Split#22](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split22.vb#22)]"},{"pos":[2693,3051],"content":"If capturing parentheses are used in a <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=fullName> expression, any captured text is included in the resulting string array. For example, if you split the string \"plum-pear\" on a hyphen placed within capturing parentheses, the returned array includes a string element that contains the hyphen.","nodes":[{"content":"If capturing parentheses are used in a <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=fullName> expression, any captured text is included in the resulting string array. For example, if you split the string \"plum-pear\" on a hyphen placed within capturing parentheses, the returned array includes a string element that contains the hyphen.","pos":[0,358],"nodes":[{"content":"If capturing parentheses are used in a <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=fullName&gt;</ph> expression, any captured text is included in the resulting string array.","pos":[0,189],"source":"If capturing parentheses are used in a <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=fullName> expression, any captured text is included in the resulting string array."},{"content":"For example, if you split the string \"plum-pear\" on a hyphen placed within capturing parentheses, the returned array includes a string element that contains the hyphen.","pos":[190,358]}]}]},{"pos":[3058,3397],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Text.RegularExpressions.Regex.Split#9<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split9.cs#9)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Text.RegularExpressions.Regex.Split#9<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split9.vb#9)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Text.RegularExpressions.Regex.Split#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split9.cs#9)]\n [!code-vb[System.Text.RegularExpressions.Regex.Split#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split9.vb#9)]"},{"pos":[3404,4328],"content":"However, when the regular expression pattern includes multiple sets of capturing parentheses, the behavior of this method depends on the version of the .NET Framework. In the .NET Framework 1.0 and 1.1, if a match is not found within the first set of capturing parentheses, captured text from additional capturing parentheses is not included in the returned array. Starting with the .NET Framework 2.0, all captured text is also added to the returned array. For example, the following code uses two sets of capturing parentheses to extract the elements of a date, including the date delimiters, from a date string. The first set of capturing parentheses captures the hyphen, and the second set captures the forward slash. If the example code is compiled and run under the .NET Framework 1.0 or 1.1, it excludes the slash characters; if it is compiled and run under the .NET Framework 2.0 or later versions, it includes them.","nodes":[{"content":"However, when the regular expression pattern includes multiple sets of capturing parentheses, the behavior of this method depends on the version of the .NET Framework. In the .NET Framework 1.0 and 1.1, if a match is not found within the first set of capturing parentheses, captured text from additional capturing parentheses is not included in the returned array. Starting with the .NET Framework 2.0, all captured text is also added to the returned array. For example, the following code uses two sets of capturing parentheses to extract the elements of a date, including the date delimiters, from a date string. The first set of capturing parentheses captures the hyphen, and the second set captures the forward slash. If the example code is compiled and run under the .NET Framework 1.0 or 1.1, it excludes the slash characters; if it is compiled and run under the .NET Framework 2.0 or later versions, it includes them.","pos":[0,924],"nodes":[{"content":"However, when the regular expression pattern includes multiple sets of capturing parentheses, the behavior of this method depends on the version of the .NET Framework.","pos":[0,167]},{"content":"In the .NET Framework 1.0 and 1.1, if a match is not found within the first set of capturing parentheses, captured text from additional capturing parentheses is not included in the returned array.","pos":[168,364]},{"content":"Starting with the .NET Framework 2.0, all captured text is also added to the returned array.","pos":[365,457]},{"content":"For example, the following code uses two sets of capturing parentheses to extract the elements of a date, including the date delimiters, from a date string.","pos":[458,614]},{"content":"The first set of capturing parentheses captures the hyphen, and the second set captures the forward slash.","pos":[615,721]},{"content":"If the example code is compiled and run under the .NET Framework 1.0 or 1.1, it excludes the slash characters; if it is compiled and run under the .NET Framework 2.0 or later versions, it includes them.","pos":[722,924]}]}]},{"pos":[4335,4680],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Text.RegularExpressions.Regex.Split#10<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split10.cs#10)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Text.RegularExpressions.Regex.Split#10<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split10.vb#10)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Text.RegularExpressions.Regex.Split#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split10.cs#10)]\n [!code-vb[System.Text.RegularExpressions.Regex.Split#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split10.vb#10)]"},{"pos":[4687,4937],"content":"If the regular expression can match the empty string, <xref:System.Text.RegularExpressions.Regex.Split%2A> will split the string into an array of single-character strings because the empty string delimiter can be found at every location. For example:","nodes":[{"content":"If the regular expression can match the empty string, <xref:System.Text.RegularExpressions.Regex.Split%2A> will split the string into an array of single-character strings because the empty string delimiter can be found at every location. For example:","pos":[0,250],"nodes":[{"content":"If the regular expression can match the empty string, <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.Split%2A&gt;</ph> will split the string into an array of single-character strings because the empty string delimiter can be found at every location.","pos":[0,237],"source":"If the regular expression can match the empty string, <xref:System.Text.RegularExpressions.Regex.Split%2A> will split the string into an array of single-character strings because the empty string delimiter can be found at every location."},{"content":"For example:","pos":[238,250]}]}]},{"pos":[4944,5289],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Text.RegularExpressions.Regex.Split#13<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split13.cs#13)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Text.RegularExpressions.Regex.Split#13<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split13.vb#13)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Text.RegularExpressions.Regex.Split#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split13.cs#13)]\n [!code-vb[System.Text.RegularExpressions.Regex.Split#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split13.vb#13)]"},{"pos":[5296,5393],"content":"Note that the returned array also includes an empty string at the beginning and end of the array.","nodes":[{"content":"Note that the returned array also includes an empty string at the beginning and end of the array.","pos":[0,97]}]},{"pos":[5400,5840],"content":"The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the split operation exceeds the time-out interval specified for the application domain in which the method is called. If no time-out is defined in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, no exception is thrown.","nodes":[{"content":"The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the split operation exceeds the time-out interval specified for the application domain in which the method is called. If no time-out is defined in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, no exception is thrown.","pos":[0,440],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.RegexMatchTimeoutException&gt;</ph> exception is thrown if the execution time of the split operation exceeds the time-out interval specified for the application domain in which the method is called.","pos":[0,231],"source":"The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the split operation exceeds the time-out interval specified for the application domain in which the method is called."},{"content":"If no time-out is defined in the application domain's properties, or if the time-out value is <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName&gt;</ph>, no exception is thrown.","pos":[232,440],"source":" If no time-out is defined in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, no exception is thrown."}]}]}],"pos":[373579,379459],"yaml":true,"extradata":"MT"},{"content":"The string to split.","nodes":[{"pos":[0,20],"content":"The string to split.","nodes":[{"content":"The string to split.","pos":[0,20]}]}],"pos":[379620,379641],"yaml":true},{"content":"The regular expression pattern to match.","nodes":[{"pos":[0,40],"content":"The regular expression pattern to match.","nodes":[{"content":"The regular expression pattern to match.","pos":[0,40]}]}],"pos":[379704,379745],"yaml":true},{"content":"An array of strings.","nodes":[{"pos":[0,20],"content":"An array of strings.","nodes":[{"content":"An array of strings.","pos":[0,20]}]}],"pos":[379804,379825],"yaml":true},{"content":"A regular expression parsing error occurred.","nodes":[{"pos":[0,44],"content":"A regular expression parsing error occurred.","nodes":[{"content":"A regular expression parsing error occurred.","pos":[0,44]}]}],"pos":[379989,380034],"yaml":true},{"content":"<code>input</code> or <code>pattern</code> is `null`.","nodes":[{"pos":[0,53],"content":"<ph id=\"ph1\">&lt;code&gt;input&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;pattern&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>input</code> or <code>pattern</code> is `null`."}],"pos":[380136,380190],"yaml":true},{"content":"A time-out occurred. For more information about time-outs, see the Remarks section.","nodes":[{"pos":[0,83],"content":"A time-out occurred. For more information about time-outs, see the Remarks section.","nodes":[{"content":"A time-out occurred. For more information about time-outs, see the Remarks section.","pos":[0,83],"nodes":[{"content":"A time-out occurred.","pos":[0,20]},{"content":"For more information about time-outs, see the Remarks section.","pos":[21,83]}]}]}],"pos":[380350,380434],"yaml":true},{"content":"Returns the regular expression pattern that was passed into the `Regex` constructor.","nodes":[{"pos":[0,84],"content":"Returns the regular expression pattern that was passed into the <ph id=\"ph1\">`Regex`</ph> constructor.","source":"Returns the regular expression pattern that was passed into the `Regex` constructor."}],"pos":[381894,381979],"yaml":true},{"content":"The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match. For more information about regular expressions, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).","nodes":[{"pos":[0,388],"content":"The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match. For more information about regular expressions, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).","nodes":[{"content":"The <ph id=\"ph1\">`pattern`</ph> parameter consists of regular expression language elements that symbolically describe the string to match.","pos":[0,120],"source":"The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match."},{"content":"For more information about regular expressions, see <bpt id=\"p1\">[</bpt>.NET Framework Regular Expressions<ept id=\"p1\">](~/docs/standard/base-types/regular-expressions.md)</ept> and <bpt id=\"p2\">[</bpt>Regular Expression Language - Quick Reference<ept id=\"p2\">](~/docs/standard/base-types/regular-expression-language-quick-reference.md)</ept>.","pos":[121,388],"source":" For more information about regular expressions, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md)."}]}],"pos":[381990,382379],"yaml":true,"extradata":"MT"},{"content":"The <code>pattern</code> parameter that was passed into the `Regex` constructor.","nodes":[{"pos":[0,80],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">pattern</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter that was passed into the <ph id=\"ph2\">`Regex`</ph> constructor.","source":"The <code>pattern</code> parameter that was passed into the `Regex` constructor."}],"pos":[382514,382595],"yaml":true},{"content":"Converts any escaped characters in the input string.","nodes":[{"pos":[0,52],"content":"Converts any escaped characters in the input string.","nodes":[{"content":"Converts any escaped characters in the input string.","pos":[0,52]}]}],"pos":[384194,384247],"yaml":true},{"content":"The <xref:System.Text.RegularExpressions.Regex.Unescape%2A> method performs one of the following two transformations:  \n  \n-   It reverses the transformation performed by the <xref:System.Text.RegularExpressions.Regex.Escape%2A> method by removing the escape character (\"\\\\\") from each character escaped by the method. These include the \\\\, *, +, ?, &#124;, {, [, (,), ^, $,., #, and white space characters. In addition, the <xref:System.Text.RegularExpressions.Regex.Unescape%2A> method unescapes the closing bracket (]) and closing brace (}) characters.  \n  \n> [!NOTE]\n>  <xref:System.Text.RegularExpressions.Regex.Unescape%2A> cannot reverse an escaped string perfectly because it cannot deduce precisely which characters were escaped,  \n  \n-   It replaces the representation of unprintable characters with the characters themselves. For example, it replaces \\a with \\x07. The character representations it replaces are \\a, \\b, \\e, \\n, \\r, \\f, \\t, and \\v.  \n  \n If the <xref:System.Text.RegularExpressions.Regex.Unescape%2A> method encounters other escape sequences that it cannot convert, such as \\w or \\s, it throws an <xref:System.ArgumentException>.","nodes":[{"pos":[0,117],"content":"The <xref:System.Text.RegularExpressions.Regex.Unescape%2A> method performs one of the following two transformations:","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.Unescape%2A&gt;</ph> method performs one of the following two transformations:","pos":[0,117],"source":"The <xref:System.Text.RegularExpressions.Regex.Unescape%2A> method performs one of the following two transformations:"}]},{"pos":[127,555],"content":"It reverses the transformation performed by the <xref:System.Text.RegularExpressions.Regex.Escape%2A> method by removing the escape character (\"\\\\\") from each character escaped by the method. These include the \\\\, *, +, ?, &#124;, {, [, (,), ^, $,., #, and white space characters. In addition, the <xref:System.Text.RegularExpressions.Regex.Unescape%2A> method unescapes the closing bracket (]) and closing brace (}) characters.","nodes":[{"content":"It reverses the transformation performed by the <xref:System.Text.RegularExpressions.Regex.Escape%2A> method by removing the escape character (\"\\\\\") from each character escaped by the method. These include the \\\\, *, +, ?, &#124;, {, [, (,), ^, $,., #, and white space characters. In addition, the <xref:System.Text.RegularExpressions.Regex.Unescape%2A> method unescapes the closing bracket (]) and closing brace (}) characters.","pos":[0,428],"nodes":[{"content":"It reverses the transformation performed by the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.Escape%2A&gt;</ph> method by removing the escape character (\"<ph id=\"ph2\">\\\\</ph>\") from each character escaped by the method.","pos":[0,191],"source":"It reverses the transformation performed by the <xref:System.Text.RegularExpressions.Regex.Escape%2A> method by removing the escape character (\"\\\\\") from each character escaped by the method."},{"content":"These include the <ph id=\"ph1\">\\\\</ph>, *, +, ?, &amp;#124;, {, [, (,), ^, $,., #, and white space characters.","pos":[192,280],"source":" These include the \\\\, *, +, ?, &#124;, {, [, (,), ^, $,., #, and white space characters."},{"content":"In addition, the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.Unescape%2A&gt;</ph> method unescapes the closing bracket (]) and closing brace (}) characters.","pos":[281,428],"source":" In addition, the <xref:System.Text.RegularExpressions.Regex.Unescape%2A> method unescapes the closing bracket (]) and closing brace (}) characters."}]}]},{"pos":[563,738],"content":"[!NOTE]\n <xref:System.Text.RegularExpressions.Regex.Unescape%2A> cannot reverse an escaped string perfectly because it cannot deduce precisely which characters were escaped,","leadings":["","> "],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.Unescape%2A&gt;</ph> cannot reverse an escaped string perfectly because it cannot deduce precisely which characters were escaped,","pos":[9,173],"source":" <xref:System.Text.RegularExpressions.Regex.Unescape%2A> cannot reverse an escaped string perfectly because it cannot deduce precisely which characters were escaped,"}]},{"pos":[748,957],"content":"It replaces the representation of unprintable characters with the characters themselves. For example, it replaces \\a with \\x07. The character representations it replaces are \\a, \\b, \\e, \\n, \\r, \\f, \\t, and \\v.","nodes":[{"content":"It replaces the representation of unprintable characters with the characters themselves. For example, it replaces \\a with \\x07. The character representations it replaces are \\a, \\b, \\e, \\n, \\r, \\f, \\t, and \\v.","pos":[0,209],"nodes":[{"content":"It replaces the representation of unprintable characters with the characters themselves.","pos":[0,88]},{"content":"For example, it replaces \\a with \\x07.","pos":[89,127]},{"content":"The character representations it replaces are \\a, \\b, \\e, \\n, \\r, \\f, \\t, and \\v.","pos":[128,209]}]}]},{"pos":[964,1155],"content":"If the <xref:System.Text.RegularExpressions.Regex.Unescape%2A> method encounters other escape sequences that it cannot convert, such as \\w or \\s, it throws an <xref:System.ArgumentException>.","nodes":[{"content":"If the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.Unescape%2A&gt;</ph> method encounters other escape sequences that it cannot convert, such as \\w or \\s, it throws an <ph id=\"ph2\">&lt;xref:System.ArgumentException&gt;</ph>.","pos":[0,191],"source":"If the <xref:System.Text.RegularExpressions.Regex.Unescape%2A> method encounters other escape sequences that it cannot convert, such as \\w or \\s, it throws an <xref:System.ArgumentException>."}]}],"pos":[384258,385443],"yaml":true,"extradata":"MT"},{"content":"The input string containing the text to convert.","nodes":[{"pos":[0,48],"content":"The input string containing the text to convert.","nodes":[{"content":"The input string containing the text to convert.","pos":[0,48]}]}],"pos":[385585,385634],"yaml":true},{"content":"A string of characters with any escaped characters converted to their unescaped form.","nodes":[{"pos":[0,85],"content":"A string of characters with any escaped characters converted to their unescaped form.","nodes":[{"content":"A string of characters with any escaped characters converted to their unescaped form.","pos":[0,85]}]}],"pos":[385691,385777],"yaml":true},{"content":"<code>str</code> includes an unrecognized escape sequence.","nodes":[{"pos":[0,58],"content":"<ph id=\"ph1\">&lt;code&gt;str&lt;/code&gt;</ph> includes an unrecognized escape sequence.","source":"<code>str</code> includes an unrecognized escape sequence."}],"pos":[385944,386003],"yaml":true},{"content":"<code>str</code> is `null`.","nodes":[{"pos":[0,27],"content":"<ph id=\"ph1\">&lt;code&gt;str&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>str</code> is `null`."}],"pos":[386105,386133],"yaml":true},{"content":"Used by a <xref href=\"System.Text.RegularExpressions.Regex\"></xref> object generated by the <xref href=\"System.Text.RegularExpressions.Regex.CompileToAssembly*\"></xref> method.","nodes":[{"pos":[0,176],"content":"Used by a <ph id=\"ph1\">&lt;xref href=\"System.Text.RegularExpressions.Regex\"&gt;&lt;/xref&gt;</ph> object generated by the <ph id=\"ph2\">&lt;xref href=\"System.Text.RegularExpressions.Regex.CompileToAssembly*\"&gt;&lt;/xref&gt;</ph> method.","source":"Used by a <xref href=\"System.Text.RegularExpressions.Regex\"></xref> object generated by the <xref href=\"System.Text.RegularExpressions.Regex.CompileToAssembly*\"></xref> method."}],"pos":[387605,387782],"yaml":true},{"content":"`true` if the <xref href=\"System.Text.RegularExpressions.Regex.Options\"></xref> property contains the <xref href=\"System.Text.RegularExpressions.RegexOptions.Compiled\"></xref> option; otherwise, `false`.","nodes":[{"pos":[0,203],"content":"<ph id=\"ph1\">`true`</ph> if the <ph id=\"ph2\">&lt;xref href=\"System.Text.RegularExpressions.Regex.Options\"&gt;&lt;/xref&gt;</ph> property contains the <ph id=\"ph3\">&lt;xref href=\"System.Text.RegularExpressions.RegexOptions.Compiled\"&gt;&lt;/xref&gt;</ph> option; otherwise, <ph id=\"ph4\">`false`</ph>.","source":"`true` if the <xref href=\"System.Text.RegularExpressions.Regex.Options\"></xref> property contains the <xref href=\"System.Text.RegularExpressions.RegexOptions.Compiled\"></xref> option; otherwise, `false`."}],"pos":[387912,388118],"yaml":true},{"content":"Used by a <xref href=\"System.Text.RegularExpressions.Regex\"></xref> object generated by the <xref href=\"System.Text.RegularExpressions.Regex.CompileToAssembly*\"></xref> method.","nodes":[{"pos":[0,176],"content":"Used by a <ph id=\"ph1\">&lt;xref href=\"System.Text.RegularExpressions.Regex\"&gt;&lt;/xref&gt;</ph> object generated by the <ph id=\"ph2\">&lt;xref href=\"System.Text.RegularExpressions.Regex.CompileToAssembly*\"&gt;&lt;/xref&gt;</ph> method.","source":"Used by a <xref href=\"System.Text.RegularExpressions.Regex\"></xref> object generated by the <xref href=\"System.Text.RegularExpressions.Regex.CompileToAssembly*\"></xref> method."}],"pos":[389364,389541],"yaml":true},{"content":"`true` if the <xref href=\"System.Text.RegularExpressions.Regex.Options\"></xref> property contains the <xref href=\"System.Text.RegularExpressions.RegexOptions.RightToLeft\"></xref> option; otherwise, `false`.","nodes":[{"pos":[0,206],"content":"<ph id=\"ph1\">`true`</ph> if the <ph id=\"ph2\">&lt;xref href=\"System.Text.RegularExpressions.Regex.Options\"&gt;&lt;/xref&gt;</ph> property contains the <ph id=\"ph3\">&lt;xref href=\"System.Text.RegularExpressions.RegexOptions.RightToLeft\"&gt;&lt;/xref&gt;</ph> option; otherwise, <ph id=\"ph4\">`false`</ph>.","source":"`true` if the <xref href=\"System.Text.RegularExpressions.Regex.Options\"></xref> property contains the <xref href=\"System.Text.RegularExpressions.RegexOptions.RightToLeft\"></xref> option; otherwise, `false`."}],"pos":[389671,389880],"yaml":true},{"content":"Checks whether a time-out interval is within an acceptable range.","nodes":[{"pos":[0,65],"content":"Checks whether a time-out interval is within an acceptable range.","nodes":[{"content":"Checks whether a time-out interval is within an acceptable range.","pos":[0,65]}]}],"pos":[391261,391327],"yaml":true},{"content":"The time-out interval to check.","nodes":[{"pos":[0,31],"content":"The time-out interval to check.","nodes":[{"content":"The time-out interval to check.","pos":[0,31]}]}],"pos":[391504,391536],"yaml":true},{"content":"Populates a <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> object with the data necessary to deserialize the current <xref href=\"System.Text.RegularExpressions.Regex\"></xref> object.","nodes":[{"pos":[0,203],"content":"Populates a <ph id=\"ph1\">&lt;xref href=\"System.Runtime.Serialization.SerializationInfo\"&gt;&lt;/xref&gt;</ph> object with the data necessary to deserialize the current <ph id=\"ph2\">&lt;xref href=\"System.Text.RegularExpressions.Regex\"&gt;&lt;/xref&gt;</ph> object.","source":"Populates a <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> object with the data necessary to deserialize the current <xref href=\"System.Text.RegularExpressions.Regex\"></xref> object."}],"pos":[393486,393690],"yaml":true},{"content":"The object to populate with serialization information.","nodes":[{"pos":[0,54],"content":"The object to populate with serialization information.","nodes":[{"content":"The object to populate with serialization information.","pos":[0,54]}]}],"pos":[393961,394016],"yaml":true},{"content":"The place to store and retrieve serialized data. This parameter is reserved for future use.","nodes":[{"pos":[0,91],"content":"The place to store and retrieve serialized data. This parameter is reserved for future use.","nodes":[{"content":"The place to store and retrieve serialized data. This parameter is reserved for future use.","pos":[0,91],"nodes":[{"content":"The place to store and retrieve serialized data.","pos":[0,48]},{"content":"This parameter is reserved for future use.","pos":[49,91]}]}]}],"pos":[394111,394203],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Text.RegularExpressions.Regex\n  commentId: T:System.Text.RegularExpressions.Regex\n  id: Regex\n  children:\n  - System.Text.RegularExpressions.Regex.#ctor\n  - System.Text.RegularExpressions.Regex.#ctor(System.String)\n  - System.Text.RegularExpressions.Regex.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  - System.Text.RegularExpressions.Regex.#ctor(System.String,System.Text.RegularExpressions.RegexOptions)\n  - System.Text.RegularExpressions.Regex.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)\n  - System.Text.RegularExpressions.Regex.CacheSize\n  - System.Text.RegularExpressions.Regex.capnames\n  - System.Text.RegularExpressions.Regex.CapNames\n  - System.Text.RegularExpressions.Regex.caps\n  - System.Text.RegularExpressions.Regex.Caps\n  - System.Text.RegularExpressions.Regex.capsize\n  - System.Text.RegularExpressions.Regex.capslist\n  - System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName)\n  - System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName,System.Reflection.Emit.CustomAttributeBuilder[])\n  - System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName,System.Reflection.Emit.CustomAttributeBuilder[],System.String)\n  - System.Text.RegularExpressions.Regex.Escape(System.String)\n  - System.Text.RegularExpressions.Regex.factory\n  - System.Text.RegularExpressions.Regex.GetGroupNames\n  - System.Text.RegularExpressions.Regex.GetGroupNumbers\n  - System.Text.RegularExpressions.Regex.GroupNameFromNumber(System.Int32)\n  - System.Text.RegularExpressions.Regex.GroupNumberFromName(System.String)\n  - System.Text.RegularExpressions.Regex.InfiniteMatchTimeout\n  - System.Text.RegularExpressions.Regex.InitializeReferences\n  - System.Text.RegularExpressions.Regex.internalMatchTimeout\n  - System.Text.RegularExpressions.Regex.IsMatch(System.String)\n  - System.Text.RegularExpressions.Regex.IsMatch(System.String,System.Int32)\n  - System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String)\n  - System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions)\n  - System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)\n  - System.Text.RegularExpressions.Regex.Match(System.String,System.String,System.Text.RegularExpressions.RegexOptions)\n  - System.Text.RegularExpressions.Regex.Match(System.String,System.Int32,System.Int32)\n  - System.Text.RegularExpressions.Regex.Match(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)\n  - System.Text.RegularExpressions.Regex.Match(System.String,System.Int32)\n  - System.Text.RegularExpressions.Regex.Match(System.String)\n  - System.Text.RegularExpressions.Regex.Match(System.String,System.String)\n  - System.Text.RegularExpressions.Regex.Matches(System.String)\n  - System.Text.RegularExpressions.Regex.Matches(System.String,System.Int32)\n  - System.Text.RegularExpressions.Regex.Matches(System.String,System.String)\n  - System.Text.RegularExpressions.Regex.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions)\n  - System.Text.RegularExpressions.Regex.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)\n  - System.Text.RegularExpressions.Regex.MatchTimeout\n  - System.Text.RegularExpressions.Regex.Options\n  - System.Text.RegularExpressions.Regex.pattern\n  - System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)\n  - System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)\n  - System.Text.RegularExpressions.Regex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator,System.Int32,System.Int32)\n  - System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator,System.Text.RegularExpressions.RegexOptions)\n  - System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Int32,System.Int32)\n  - System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions)\n  - System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator)\n  - System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String)\n  - System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Int32)\n  - System.Text.RegularExpressions.Regex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator)\n  - System.Text.RegularExpressions.Regex.Replace(System.String,System.String)\n  - System.Text.RegularExpressions.Regex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator,System.Int32)\n  - System.Text.RegularExpressions.Regex.RightToLeft\n  - System.Text.RegularExpressions.Regex.roptions\n  - System.Text.RegularExpressions.Regex.Split(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)\n  - System.Text.RegularExpressions.Regex.Split(System.String,System.String,System.Text.RegularExpressions.RegexOptions)\n  - System.Text.RegularExpressions.Regex.Split(System.String,System.Int32,System.Int32)\n  - System.Text.RegularExpressions.Regex.Split(System.String,System.Int32)\n  - System.Text.RegularExpressions.Regex.Split(System.String)\n  - System.Text.RegularExpressions.Regex.Split(System.String,System.String)\n  - System.Text.RegularExpressions.Regex.ToString\n  - System.Text.RegularExpressions.Regex.Unescape(System.String)\n  - System.Text.RegularExpressions.Regex.UseOptionC\n  - System.Text.RegularExpressions.Regex.UseOptionR\n  - System.Text.RegularExpressions.Regex.ValidateMatchTimeout(System.TimeSpan)\n  - System.Text.RegularExpressions.Regex.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  langs:\n  - csharp\n  name: Regex\n  nameWithType: Regex\n  fullName: System.Text.RegularExpressions.Regex\n  type: Class\n  assemblies:\n  - System.Text.RegularExpressions\n  - System\n  - netstandard\n  namespace: System.Text.RegularExpressions\n  summary: Represents an immutable regular expression.\n  remarks: \"> [!NOTE]\\n>  To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#System/regex/system/text/regularexpressions/Regex.cs#bbe3b2eb80ae5526). You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/).  \\n  \\n The <xref:System.Text.RegularExpressions.Regex> class represents the .NET Framework's regular expression engine. It can be used to quickly parse large amounts of text to find specific character patterns; to extract, edit, replace, or delete text substrings; and to add the extracted strings to a collection to generate a report.  \\n  \\n> [!NOTE]\\n>  If your primary interest is to validate a string by determining whether it conforms to a particular pattern, you can use the <xref:System.Configuration.RegexStringValidator?displayProperty=fullName> class.  \\n  \\n To use regular expressions, you define the pattern that you want to identify in a text stream by using the syntax documented in [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md). Next, you can optionally instantiate a <xref:System.Text.RegularExpressions.Regex> object. Finally, you call a method that performs some operation, such as replacing text that matches the regular expression pattern, or identifying a pattern match.  \\n  \\n> [!NOTE]\\n>  For some common regular expression patterns, see [Regular Expression Examples](~/docs/standard/base-types/regular-expression-examples.md). There are also a number of online libraries of regular expression patterns, such as the one at [Regular-Expressions.info](http://www.regular-expressions.info/examples.html).  \\n  \\n<a name=\\\"remarks\\\"></a> For more information about using the <xref:System.Text.RegularExpressions.Regex> class, see the following sections in this topic:  \\n  \\n-   [Regex vs. String Methods](#regex_vs_string)  \\n  \\n-   [Static vs. Instance Methods](#static_vs_instance)  \\n  \\n-   [Performing Regular Expression Operations](#regex_ops)  \\n  \\n-   [Defining a Time-Out Value](#define_timeout)  \\n  \\n For more information about the regular expression language, see [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md) or download and print one of these brochures:  \\n  \\n [Quick Reference in Word (.docx) format](http://download.microsoft.com/download/D/2/4/D240EBF6-A9BA-4E4F-A63F-AEB6DA0B921C/Regular%20expressions%20quick%20reference.docx)  \\n [Quick Reference in PDF (.pdf) format](http://download.microsoft.com/download/D/2/4/D240EBF6-A9BA-4E4F-A63F-AEB6DA0B921C/Regular%20expressions%20quick%20reference.pdf)  \\n  \\n<a name=\\\"regex_vs_string\\\"></a>   \\n## Regex vs. String Methods  \\n The <xref:System.String?displayProperty=fullName> class includes several search and comparison methods that you can use to perform pattern matching with text. For example, the <xref:System.String.Contains%2A?displayProperty=fullName>, <xref:System.String.EndsWith%2A?displayProperty=fullName>, and <xref:System.String.StartsWith%2A?displayProperty=fullName> methods determine whether a string instance contains a specified substring; and the <xref:System.String.IndexOf%2A?displayProperty=fullName>, <xref:System.String.IndexOfAny%2A?displayProperty=fullName>, <xref:System.String.LastIndexOf%2A?displayProperty=fullName>, and <xref:System.String.LastIndexOfAny%2A?displayProperty=fullName> methods return the starting position of a specified substring in a string. Use the methods of the <xref:System.String?displayProperty=fullName> class when you are searching for a specific string. Use the <xref:System.Text.RegularExpressions.Regex> class when you are searching for a specific pattern in a string. For more information and examples, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md).  \\n  \\n [Back to Remarks](#remarks)  \\n  \\n<a name=\\\"static_vs_instance\\\"></a>   \\n## Static vs. Instance Methods  \\n After you define a regular expression pattern, you can provide it to the regular expression engine in either of two ways:  \\n  \\n-   By instantiating a <xref:System.Text.RegularExpressions.Regex> object that represents the regular expression. To do this, you pass the regular expression pattern to a <xref:System.Text.RegularExpressions.Regex.%23ctor%2A> constructor. A <xref:System.Text.RegularExpressions.Regex> object is immutable; when you instantiate a <xref:System.Text.RegularExpressions.Regex> object with a regular expression, that object's regular expression cannot be changed.  \\n  \\n-   By supplying both the regular expression and the text to search to a `static` (`Shared` in Visual Basic) <xref:System.Text.RegularExpressions.Regex> method. This enables you to use a regular expression without explicitly creating a <xref:System.Text.RegularExpressions.Regex> object.  \\n  \\n All <xref:System.Text.RegularExpressions.Regex> pattern identification methods include both static and instance overloads.  \\n  \\n The regular expression engine must compile a particular pattern before the pattern can be used. Because <xref:System.Text.RegularExpressions.Regex> objects are immutable, this is a one-time procedure that occurs when a <xref:System.Text.RegularExpressions.Regex> class constructor or a static method is called. To eliminate the need to repeatedly compile a single regular expression, the regular expression engine caches the compiled regular expressions used in static method calls. As a result, regular expression pattern-matching methods offer comparable performance for static and instance methods.  \\n  \\n> [!IMPORTANT]\\n>  In the .NET Framework versions 1.0 and 1.1, all compiled regular expressions, whether they were used in instance or static method calls, were cached. Starting with the .NET Framework 2.0, only regular expressions used in static method calls are cached.  \\n  \\n However, caching can adversely affect performance in the following two cases:  \\n  \\n-   When you use static method calls with a large number of regular expressions. By default, the regular expression engine caches the 15 most recently used static regular expressions. If your application uses more than 15 static regular expressions, some regular expressions must be recompiled. To prevent this recompilation, you can increase the <xref:System.Text.RegularExpressions.Regex.CacheSize%2A?displayProperty=fullName> property.  \\n  \\n-   When you instantiate new <xref:System.Text.RegularExpressions.Regex> objects with regular expressions that have previously been compiled. For example, the following code defines a regular expression to locate duplicated words in a text stream. Although the example uses a single regular expression, it instantiates a new <xref:System.Text.RegularExpressions.Regex> object to process each line of text. This results in the recompilation of the regular expression with each iteration of the loop.  \\n  \\n     [!code-csharp[System.Text.RegularExpressions.Class.Caching#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.class.caching/cs/caching1.cs#1)]\\n     [!code-vb[System.Text.RegularExpressions.Class.Caching#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.class.caching/vb/caching1.vb#1)]  \\n  \\n     To prevent recompilation, you should instantiate a single <xref:System.Text.RegularExpressions.Regex> object that is accessible to all code that requires it, as shown in the following rewritten example.  \\n  \\n     [!code-csharp[System.Text.RegularExpressions.Class.Caching#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.class.caching/cs/caching1.cs#2)]\\n     [!code-vb[System.Text.RegularExpressions.Class.Caching#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.class.caching/vb/caching1.vb#2)]  \\n  \\n [Back to Remarks](#remarks)  \\n  \\n<a name=\\\"regex_ops\\\"></a>   \\n## Performing Regular Expression Operations  \\n Whether you decide to instantiate a <xref:System.Text.RegularExpressions.Regex> object and call its methods or call static methods, the <xref:System.Text.RegularExpressions.Regex> class offers the following pattern-matching functionality:  \\n  \\n-   Validation of a match. You call the <xref:System.Text.RegularExpressions.Regex.IsMatch%2A> method to determine whether a match is present.  \\n  \\n-   Retrieval of a single match. You call the <xref:System.Text.RegularExpressions.Regex.Match%2A> method to retrieve a <xref:System.Text.RegularExpressions.Match> object that represents the first match in a string or in part of a string. Subsequent matches can be retrieved by calling the <xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=fullName> method.  \\n  \\n-   Retrieval of all matches. You call the <xref:System.Text.RegularExpressions.Regex.Matches%2A> method to retrieve a <xref:System.Text.RegularExpressions.MatchCollection?displayProperty=fullName> object that represents all the matches found in a string or in part of a string.  \\n  \\n-   Replacement of matched text. You call the <xref:System.Text.RegularExpressions.Regex.Replace%2A> method to replace matched text. The replacement text can also be defined by a regular expression. In addition, some of the <xref:System.Text.RegularExpressions.Regex.Replace%2A> methods include a <xref:System.Text.RegularExpressions.MatchEvaluator> parameter that enables you to programmatically define the replacement text.  \\n  \\n-   Creation of a string array that is formed from parts of an input string. You call the <xref:System.Text.RegularExpressions.Regex.Split%2A> method to split an input string at positions that are defined by the regular expression.  \\n  \\n In addition to its pattern-matching methods, the <xref:System.Text.RegularExpressions.Regex> class includes several special-purpose methods:  \\n  \\n-   The <xref:System.Text.RegularExpressions.Regex.Escape%2A> method escapes any characters that may be interpreted as regular expression operators in a regular expression or input string.  \\n  \\n-   The <xref:System.Text.RegularExpressions.Regex.Unescape%2A> method removes these escape characters.  \\n  \\n-   The <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A> method creates an assembly that contains predefined regular expressions. The .NET Framework contains examples of these special-purpose assemblies in the <xref:System.Web.RegularExpressions?displayProperty=fullName> namespace.  \\n  \\n [Back to Remarks](#remarks)  \\n  \\n<a name=\\\"define_timeout\\\"></a>   \\n## Defining a Time-Out Value  \\n The .NET Framework supports a full-featured regular expression language that provides substantial power and flexibility in pattern matching. However, the power and flexibility come at a cost: the risk of poor performance. Regular expressions that perform poorly are surprisingly easy to create. In some cases, regular expression operations that rely on excessive backtracking can appear to stop responding when they process text that nearly matches the regular expression pattern. For more information about the .NET Framework regular expression engine, see [Details of Regular Expression Behavior](~/docs/standard/base-types/details-of-regular-expression-behavior.md). For more information about excessive backtracking, see [Backtracking](~/docs/standard/base-types/backtracking-in-regular-expressions.md).  \\n  \\n Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can define a time-out interval for regular expression matches. If the regular expression engine cannot identify a match within this time interval, the matching operation throws a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception. In most cases, this prevents the regular expression engine from wasting processing power by trying to match text that nearly matches the regular expression pattern. It also could indicate, however, that the timeout interval has been set too low, or that the current machine load has caused an overall degradation in performance.  \\n  \\n How you handle the exception depends on the cause of the exception. If the exception occurs because the time-out interval is set too low or because of excessive machine load, you can increase the time-out interval and retry the matching operation. If the exception occurs because the regular expression relies on excessive backtracking, you can assume that a match does not exist, and, optionally, you can log information that will help you modify the regular expression pattern.  \\n  \\n You can set a time-out interval by calling the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29> constructor when you instantiate a regular expression object. For static methods, you can set a time-out interval by calling an overload of a matching method that has a `matchTimeout` parameter. If you do not set a time-out value explicitly, the default time-out value  is determined as follows:  \\n  \\n-   By using the application-wide time-out value, if one exists. This can be any time-out value that applies to the application domain in which the <xref:System.Text.RegularExpressions.Regex> object is instantiated or the static method call is made. You can set the application-wide time-out value by calling the <xref:System.AppDomain.SetData%2A?displayProperty=fullName> method to assign the string representation of a <xref:System.TimeSpan> value to the \\\"REGEX_DEFAULT_MATCH_TIMEOUT\\\" property.  \\n  \\n-   By using the value <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout>, if no application-wide time-out value has been set.  \\n  \\n> [!IMPORTANT]\\n>  We recommend that you set a time-out value in all regular expression pattern-matching operations. For more information, see [Best Practices for Regular Expressions](~/docs/standard/base-types/best-practices.md).  \\n  \\n [Back to Remarks](#remarks)\"\n  example:\n  - \"The following example uses a regular expression to check for repeated occurrences of words in a string. The regular expression `\\\\b(?<word>\\\\w+)\\\\s+(\\\\k<word>)\\\\b` can be interpreted as shown in the following table.  \\n  \\n|Pattern|Description|  \\n|-------------|-----------------|  \\n|`\\\\b`|Start the match at a word boundary.|  \\n|`(?<word>\\\\w+)`|Match one or more word characters up to a word boundary. Name this captured group `word`.|  \\n|`\\\\s+`|Match one or more white-space characters.|  \\n|`(\\\\k<word>)`|Match the captured group that is named `word`.|  \\n|`\\\\b`|Match a word boundary.|  \\n  \\n [!code-cpp[Regex_Words#0](~/samples/snippets/cpp/VS_Snippets_CLR/Regex_Words/CPP/words.cpp#0)]\\n [!code-csharp[Regex_Words#0](~/samples/snippets/csharp/VS_Snippets_CLR/Regex_Words/CS/words.cs#0)]\\n [!code-vb[Regex_Words#0](~/samples/snippets/visualbasic/VS_Snippets_CLR/Regex_Words/VB/words.vb#0)]  \\n  \\n The following example illustrates the use of a regular expression to check whether a string either represents a currency value or has the correct format to represent a currency value. In this case, the regular expression is built dynamically from the <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A?displayProperty=fullName>, <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits%2A>, <xref:System.Globalization.NumberFormatInfo.CurrencySymbol%2A?displayProperty=fullName>, <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A?displayProperty=fullName>, and <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A?displayProperty=fullName> properties for the user's current culture. If the system's current culture is en-US, the resulting regular expression is `^\\\\s*[\\\\+-]?\\\\s?\\\\$?\\\\s?(\\\\d*\\\\.?\\\\d{2}?){1}$`. This regular expression can be interpreted as shown in the following table.  \\n  \\n|Pattern|Description|  \\n|-------------|-----------------|  \\n|`^`|Start at the beginning of the string.|  \\n|`\\\\s*`|Match zero or more white-space characters.|  \\n|`[\\\\+-]?`|Match zero or one occurrence of either the positive sign or the negative sign.|  \\n|`\\\\s?`|Match zero or one white-space character.|  \\n|`\\\\$?`|Match zero or one occurrence of the dollar sign.|  \\n|`\\\\s?`|Match zero or one white-space character.|  \\n|`\\\\d*`|Match zero or more decimal digits.|  \\n|`\\\\.?`|Match zero or one decimal point symbol.|  \\n|`\\\\d{2}?`|Match two decimal digits zero or one time.|  \\n|`(\\\\d*\\\\.?\\\\d{2}?){1}`|Match the pattern of integral and fractional digits separated by a decimal point symbol at least one time.|  \\n|`$`|Match the end of the string.|  \\n  \\n In this case, the regular expression assumes that a valid currency string does not contain group separator symbols, and that it has either no fractional digits or the number of fractional digits defined by the current culture's <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits%2A> property.  \\n  \\n [!code-csharp[System.Text.RegularExpressions.Regex.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.class/cs/regex_example1.cs#1)]\\n [!code-vb[System.Text.RegularExpressions.Regex.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.class/vb/regex_example1.vb#1)]  \\n  \\n Because the regular expression in this example is built dynamically, we do not know at design time whether the current culture's currency symbol, decimal sign, or positive and negative signs might be misinterpreted by the regular expression engine as regular expression language operators. To prevent any misinterpretation, the example passes each dynamically generated string to the <xref:System.Text.RegularExpressions.Regex.Escape%2A> method.\"\n  syntax:\n    content: 'public class Regex : System.Runtime.Serialization.ISerializable'\n  inheritance:\n  - System.Object\n  derivedClasses:\n  - System.Web.RegularExpressions.AspCodeRegex\n  - System.Web.RegularExpressions.AspEncodedExprRegex\n  - System.Web.RegularExpressions.AspExprRegex\n  - System.Web.RegularExpressions.CommentRegex\n  - System.Web.RegularExpressions.DatabindExprRegex\n  - System.Web.RegularExpressions.DataBindRegex\n  - System.Web.RegularExpressions.DirectiveRegex\n  - System.Web.RegularExpressions.EndTagRegex\n  - System.Web.RegularExpressions.GTRegex\n  - System.Web.RegularExpressions.IncludeRegex\n  - System.Web.RegularExpressions.LTRegex\n  - System.Web.RegularExpressions.RunatServerRegex\n  - System.Web.RegularExpressions.ServerTagsRegex\n  - System.Web.RegularExpressions.SimpleDirectiveRegex\n  - System.Web.RegularExpressions.TagRegex\n  - System.Web.RegularExpressions.TagRegex35\n  - System.Web.RegularExpressions.TextRegex\n  implements:\n  - System.Runtime.Serialization.ISerializable\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/Regex.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.RegularExpressions.Regex.#ctor\n  commentId: M:System.Text.RegularExpressions.Regex.#ctor\n  id: '#ctor'\n  parent: System.Text.RegularExpressions.Regex\n  langs:\n  - csharp\n  name: Regex()\n  nameWithType: Regex.Regex()\n  fullName: Regex.Regex()\n  type: Constructor\n  assemblies:\n  - System.Text.RegularExpressions\n  - System\n  - netstandard\n  namespace: System.Text.RegularExpressions\n  summary: Initializes a new instance of the <xref href=\"System.Text.RegularExpressions.Regex\"></xref> class.\n  remarks: Note that this constructor is protected; it can only be called by classes derived from the <xref:System.Text.RegularExpressions.Regex> class.\n  syntax:\n    content: protected Regex ();\n    parameters: []\n  overload: System.Text.RegularExpressions.Regex.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/Regex.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.RegularExpressions.Regex.#ctor(System.String)\n  commentId: M:System.Text.RegularExpressions.Regex.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.Text.RegularExpressions.Regex\n  langs:\n  - csharp\n  name: Regex(String)\n  nameWithType: Regex.Regex(String)\n  fullName: Regex.Regex(String)\n  type: Constructor\n  assemblies:\n  - System.Text.RegularExpressions\n  - System\n  - netstandard\n  namespace: System.Text.RegularExpressions\n  summary: Initializes a new instance of the <xref href=\"System.Text.RegularExpressions.Regex\"></xref> class for the specified regular expression.\n  remarks: \"The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match. For more information about regular expressions, see the [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md) topics.  \\n  \\n Calling the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%29> constructor is equivalent to calling the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%29> constructor with a value of <xref:System.Text.RegularExpressions.RegexOptions.None> for the `options` argument.  \\n  \\n A <xref:System.Text.RegularExpressions.Regex> object is immutable, which means that it can be used only for the match pattern you define when you create it. However, it can be used any number of times without being recompiled.  \\n  \\n This constructor instantiates a regular expression object that attempts a case-sensitive match of any alphabetical characters defined in `pattern`. For a case-insensitive match, use the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%29?displayProperty=fullName> constructor.\"\n  example:\n  - \"The following example illustrates how to use this constructor to instantiate a regular expression that matches any word that begins with the letters \\\"a\\\" or \\\"t\\\".  \\n  \\n [!code-csharp[System.Text.RegularExpressions.Regex.Constructors#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Constructors/cs/constructors1.cs#1)]\\n [!code-vb[System.Text.RegularExpressions.Regex.Constructors#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Constructors/vb/constructors1.vb#1)]  \\n  \\n Note that the regular expression pattern cannot match the word \\\"The\\\" at the beginning of the text, because comparisons are case-sensitive by default. For an example of case-insensitive comparison, see the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%29> constructor.\"\n  syntax:\n    content: public Regex (string pattern);\n    parameters:\n    - id: pattern\n      type: System.String\n      description: The regular expression pattern to match.\n  overload: System.Text.RegularExpressions.Regex.#ctor*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: A regular expression parsing error occurred.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>pattern</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/Regex.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.RegularExpressions.Regex.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  commentId: M:System.Text.RegularExpressions.Regex.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  id: '#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)'\n  parent: System.Text.RegularExpressions.Regex\n  langs:\n  - csharp\n  name: Regex(SerializationInfo, StreamingContext)\n  nameWithType: Regex.Regex(SerializationInfo, StreamingContext)\n  fullName: Regex.Regex(SerializationInfo, StreamingContext)\n  type: Constructor\n  assemblies:\n  - System\n  - netstandard\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  summary: Initializes a new instance of the <xref href=\"System.Text.RegularExpressions.Regex\"></xref> class by using serialized data.\n  syntax:\n    content: protected Regex (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);\n    parameters:\n    - id: info\n      type: System.Runtime.Serialization.SerializationInfo\n      description: The object that contains a serialized pattern and <xref href=\"System.Text.RegularExpressions.RegexOptions\"></xref> information.\n    - id: context\n      type: System.Runtime.Serialization.StreamingContext\n      description: The destination for this serialization. (This parameter is not used; specify `null`.)\n  overload: System.Text.RegularExpressions.Regex.#ctor*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: A regular expression parsing error occurred.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The pattern that <code>info</code> contains is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>info</code> contains an invalid <xref href=\"System.Text.RegularExpressions.RegexOptions\"></xref> flag.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/Regex.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.RegularExpressions.Regex.#ctor(System.String,System.Text.RegularExpressions.RegexOptions)\n  commentId: M:System.Text.RegularExpressions.Regex.#ctor(System.String,System.Text.RegularExpressions.RegexOptions)\n  id: '#ctor(System.String,System.Text.RegularExpressions.RegexOptions)'\n  parent: System.Text.RegularExpressions.Regex\n  langs:\n  - csharp\n  name: Regex(String, RegexOptions)\n  nameWithType: Regex.Regex(String, RegexOptions)\n  fullName: Regex.Regex(String, RegexOptions)\n  type: Constructor\n  assemblies:\n  - System.Text.RegularExpressions\n  - System\n  - netstandard\n  namespace: System.Text.RegularExpressions\n  summary: Initializes a new instance of the <xref href=\"System.Text.RegularExpressions.Regex\"></xref> class for the specified regular expression, with options that modify the pattern.\n  remarks: \"The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match. For more information about regular expressions, see the [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md) topics.  \\n  \\n A <xref:System.Text.RegularExpressions.Regex> object is immutable, which means that it can be used only for the match parameters you define when you create it. However, it can be used any number of times without being recompiled.\"\n  example:\n  - \"The following example illustrates how to use this constructor to instantiate a regular expression that matches any word that begins with the letters \\\"a\\\" or \\\"t\\\".  \\n  \\n [!code-csharp[System.Text.RegularExpressions.Regex.Constructors#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Constructors/cs/Constructors2.cs#2)]\\n [!code-vb[System.Text.RegularExpressions.Regex.Constructors#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Constructors/vb/Constructors2.vb#2)]  \\n  \\n Note that the match collection includes the word \\\"The\\\" that begins the text because the `options` parameter has defined case-insensitive comparisons.\"\n  syntax:\n    content: public Regex (string pattern, System.Text.RegularExpressions.RegexOptions options);\n    parameters:\n    - id: pattern\n      type: System.String\n      description: The regular expression pattern to match.\n    - id: options\n      type: System.Text.RegularExpressions.RegexOptions\n      description: A bitwise combination of the enumeration values that modify the regular expression.\n  overload: System.Text.RegularExpressions.Regex.#ctor*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: A regular expression parsing error occurred.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>pattern</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>options</code> contains an invalid flag.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/Regex.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.RegularExpressions.Regex.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)\n  commentId: M:System.Text.RegularExpressions.Regex.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)\n  id: '#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)'\n  parent: System.Text.RegularExpressions.Regex\n  langs:\n  - csharp\n  name: Regex(String, RegexOptions, TimeSpan)\n  nameWithType: Regex.Regex(String, RegexOptions, TimeSpan)\n  fullName: Regex.Regex(String, RegexOptions, TimeSpan)\n  type: Constructor\n  assemblies:\n  - System.Text.RegularExpressions\n  - System\n  - netstandard\n  namespace: System.Text.RegularExpressions\n  summary: Initializes a new instance of the <xref href=\"System.Text.RegularExpressions.Regex\"></xref> class for the specified regular expression, with options that modify the pattern and a value that specifies how long a pattern matching method should attempt a match before it times out.\n  remarks: \"The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match. For more information about regular expressions, see the [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md) topics.  \\n  \\n A <xref:System.Text.RegularExpressions.Regex> object is immutable, which means that it can be used only for the match pattern that you define when you create it. However, it can be used any number of times without being recompiled.  \\n  \\n The `matchTimeout` parameter specifies how long a pattern-matching method should try to find a match before it times out. If no match is found in that time interval, the pattern-matching method throws a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception. `matchTimeout` overrides any default time-out value defined for the application domain in which the <xref:System.Text.RegularExpressions.Regex> object is created. The instance pattern-matching methods that observe the `matchTimeout` time-out interval include the following:  \\n  \\n-   <xref:System.Text.RegularExpressions.Regex.IsMatch%2A>  \\n  \\n-   <xref:System.Text.RegularExpressions.Regex.Match%2A>  \\n  \\n-   <xref:System.Text.RegularExpressions.Regex.Matches%2A>  \\n  \\n-   <xref:System.Text.RegularExpressions.Regex.Replace%2A>  \\n  \\n-   <xref:System.Text.RegularExpressions.Regex.Split%2A>  \\n  \\n-   <xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=fullName>  \\n  \\n Setting a time-out interval prevents regular expressions that rely on excessive backtracking from appearing to stop responding when they process input that contains near matches. For more information, see [Best Practices for Regular Expressions](~/docs/standard/base-types/best-practices.md) and [Backtracking](~/docs/standard/base-types/backtracking-in-regular-expressions.md). To set a reasonable time-out interval, consider the following factors:  \\n  \\n-   The length and complexity of the regular expression pattern. Longer and more complex regular expressions require more time than shorter and simpler ones.  \\n  \\n-   The expected machine load. Processing takes more time on systems that have high CPU and memory utilization.\"\n  example:\n  - \"The following example calls the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29> constructor to instantiate a <xref:System.Text.RegularExpressions.Regex> object with a time-out value of one second. The regular expression pattern `(a+)+$`, which matches one or more sequences of one or more \\\"a\\\" characters at the end of a line, is subject to excessive backtracking. If a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> is thrown, the example increases the time-out value up to the maximum value of three seconds. Otherwise, it abandons the attempt to match the pattern.  \\n  \\n [!code-csharp[System.Text.RegularExpressions.Regex.ctor#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.ctor/cs/ctor1.cs#1)]\\n [!code-vb[System.Text.RegularExpressions.Regex.ctor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.ctor/vb/ctor1.vb#1)]\"\n  syntax:\n    content: public Regex (string pattern, System.Text.RegularExpressions.RegexOptions options, TimeSpan matchTimeout);\n    parameters:\n    - id: pattern\n      type: System.String\n      description: The regular expression pattern to match.\n    - id: options\n      type: System.Text.RegularExpressions.RegexOptions\n      description: A bitwise combination of the enumeration values that modify the regular expression.\n    - id: matchTimeout\n      type: System.TimeSpan\n      description: A time-out interval, or <xref href=\"System.Text.RegularExpressions.Regex.InfiniteMatchTimeout\"></xref> to indicate that the method should not time out.\n  overload: System.Text.RegularExpressions.Regex.#ctor*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: A regular expression parsing error occurred.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>pattern</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>options</code> is not a valid <xref href=\\\"System.Text.RegularExpressions.RegexOptions\\\"></xref> value.  \\n  \\n -or-  \\n  \\n <code>matchTimeout</code> is negative, zero, or greater than approximately 24 days.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/Regex.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.RegularExpressions.Regex.CacheSize\n  commentId: P:System.Text.RegularExpressions.Regex.CacheSize\n  id: CacheSize\n  parent: System.Text.RegularExpressions.Regex\n  langs:\n  - csharp\n  name: CacheSize\n  nameWithType: Regex.CacheSize\n  fullName: Regex.CacheSize\n  type: Property\n  assemblies:\n  - System.Text.RegularExpressions\n  - System\n  - netstandard\n  namespace: System.Text.RegularExpressions\n  summary: Gets or sets the maximum number of entries in the current static cache of compiled regular expressions.\n  remarks: \"The <xref:System.Text.RegularExpressions.Regex> class maintains an internal cache of compiled regular expressions used in static method calls. If the value specified in a set operation is less than the current cache size, cache entries are discarded until the cache size is equal to the specified value.  \\n  \\n By default, the cache holds 15 compiled static regular expressions. Your application typically will not have to modify the size of the cache. Use the <xref:System.Text.RegularExpressions.Regex.CacheSize%2A> property only when you want to turn off caching or when you have an unusually large cache.\"\n  syntax:\n    content: public static int CacheSize { get; set; }\n    return:\n      type: System.Int32\n      description: The maximum number of entries in the static cache.\n  overload: System.Text.RegularExpressions.Regex.CacheSize*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The value in a set operation is less than zero.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/Regex.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.RegularExpressions.Regex.capnames\n  commentId: F:System.Text.RegularExpressions.Regex.capnames\n  id: capnames\n  parent: System.Text.RegularExpressions.Regex\n  langs:\n  - csharp\n  name: capnames\n  nameWithType: Regex.capnames\n  fullName: Regex.capnames\n  type: Field\n  assemblies:\n  - System\n  - netstandard\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  summary: Used by a <xref href=\"System.Text.RegularExpressions.Regex\"></xref> object generated by the <xref href=\"System.Text.RegularExpressions.Regex.CompileToAssembly*\"></xref> method.\n  syntax:\n    content: protected System.Collections.Hashtable capnames;\n    return:\n      type: System.Collections.Hashtable\n      description: ''\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/Regex.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.RegularExpressions.Regex.CapNames\n  commentId: P:System.Text.RegularExpressions.Regex.CapNames\n  id: CapNames\n  parent: System.Text.RegularExpressions.Regex\n  langs:\n  - csharp\n  name: CapNames\n  nameWithType: Regex.CapNames\n  fullName: Regex.CapNames\n  type: Property\n  assemblies:\n  - System.Text.RegularExpressions\n  - netstandard\n  - System\n  namespace: System.Text.RegularExpressions\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      protected System.Collections.IDictionary CapNames { get; set; }\n    return:\n      type: System.Collections.IDictionary\n      description: ''\n  overload: System.Text.RegularExpressions.Regex.CapNames*\n  exceptions: []\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/Regex.xml\n- uid: System.Text.RegularExpressions.Regex.caps\n  commentId: F:System.Text.RegularExpressions.Regex.caps\n  id: caps\n  parent: System.Text.RegularExpressions.Regex\n  langs:\n  - csharp\n  name: caps\n  nameWithType: Regex.caps\n  fullName: Regex.caps\n  type: Field\n  assemblies:\n  - System\n  - netstandard\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  summary: Used by a <xref href=\"System.Text.RegularExpressions.Regex\"></xref> object generated by the <xref href=\"System.Text.RegularExpressions.Regex.CompileToAssembly*\"></xref> method.\n  syntax:\n    content: protected System.Collections.Hashtable caps;\n    return:\n      type: System.Collections.Hashtable\n      description: ''\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/Regex.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.RegularExpressions.Regex.Caps\n  commentId: P:System.Text.RegularExpressions.Regex.Caps\n  id: Caps\n  parent: System.Text.RegularExpressions.Regex\n  langs:\n  - csharp\n  name: Caps\n  nameWithType: Regex.Caps\n  fullName: Regex.Caps\n  type: Property\n  assemblies:\n  - System.Text.RegularExpressions\n  - netstandard\n  - System\n  namespace: System.Text.RegularExpressions\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      protected System.Collections.IDictionary Caps { get; set; }\n    return:\n      type: System.Collections.IDictionary\n      description: ''\n  overload: System.Text.RegularExpressions.Regex.Caps*\n  exceptions: []\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/Regex.xml\n- uid: System.Text.RegularExpressions.Regex.capsize\n  commentId: F:System.Text.RegularExpressions.Regex.capsize\n  id: capsize\n  parent: System.Text.RegularExpressions.Regex\n  langs:\n  - csharp\n  name: capsize\n  nameWithType: Regex.capsize\n  fullName: Regex.capsize\n  type: Field\n  assemblies:\n  - System.Text.RegularExpressions\n  - System\n  - netstandard\n  namespace: System.Text.RegularExpressions\n  summary: Used by a <xref href=\"System.Text.RegularExpressions.Regex\"></xref> object generated by the <xref href=\"System.Text.RegularExpressions.Regex.CompileToAssembly*\"></xref> method.\n  syntax:\n    content: protected int capsize;\n    return:\n      type: System.Int32\n      description: ''\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/Regex.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.RegularExpressions.Regex.capslist\n  commentId: F:System.Text.RegularExpressions.Regex.capslist\n  id: capslist\n  parent: System.Text.RegularExpressions.Regex\n  langs:\n  - csharp\n  name: capslist\n  nameWithType: Regex.capslist\n  fullName: Regex.capslist\n  type: Field\n  assemblies:\n  - System.Text.RegularExpressions\n  - System\n  - netstandard\n  namespace: System.Text.RegularExpressions\n  summary: Used by a <xref href=\"System.Text.RegularExpressions.Regex\"></xref> object generated by the <xref href=\"System.Text.RegularExpressions.Regex.CompileToAssembly*\"></xref> method.\n  syntax:\n    content: protected string[] capslist;\n    return:\n      type: System.String[]\n      description: ''\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/Regex.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName)\n  commentId: M:System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName)\n  id: CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName)\n  parent: System.Text.RegularExpressions.Regex\n  langs:\n  - csharp\n  name: CompileToAssembly(RegexCompilationInfo[], AssemblyName)\n  nameWithType: Regex.CompileToAssembly(RegexCompilationInfo[], AssemblyName)\n  fullName: Regex.CompileToAssembly(RegexCompilationInfo[], AssemblyName)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Text.RegularExpressions\n  summary: Compiles one or more specified <xref href=\"System.Text.RegularExpressions.Regex\"></xref> objects to a named assembly.\n  remarks: \"The <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%28System.Text.RegularExpressions.RegexCompilationInfo%5B%5D%2CSystem.Reflection.AssemblyName%29> method generates a .NET Framework assembly in which each regular expression defined in the `regexinfos` array is represented by a class. Typically, the <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%28System.Text.RegularExpressions.RegexCompilationInfo%5B%5D%2CSystem.Reflection.AssemblyName%29> method is called from a separate application that generates an assembly of compiled regular expressions. Each regular expression included in the assembly has the following characteristics:  \\n  \\n-   It is derived from the <xref:System.Text.RegularExpressions.Regex> class.  \\n  \\n-   It is assigned the fully qualified name that is defined by the `fullnamespace` and `name` parameters of its corresponding <xref:System.Text.RegularExpressions.RegexCompilationInfo> object.  \\n  \\n-   It has a default (or parameterless) constructor.  \\n  \\n Ordinarily, the code that instantiates and uses the compiled regular expression is found in an assembly or application that is separate from the code that creates the assembly.\"\n  example:\n  - \"The following example creates an assembly named RegexLib.dll. The assembly includes two compiled regular expressions. The first, `Utilities.RegularExpressions.DuplicatedString`, matches two identical contiguous words. The second, `Utilities.RegularExpressions.EmailAddress`, checks whether a string has the correct format to be an e-mail address.  \\n  \\n [!code-csharp[System.Text.RegularExpressions.Regex.CompileToAssembly#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.CompileToAssembly/cs/Compile1.cs#1)]\\n [!code-vb[System.Text.RegularExpressions.Regex.CompileToAssembly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.CompileToAssembly/vb/Compile1.vb#1)]  \\n  \\n The regular expression that checks a string for duplicate words is then instantiated and used by the following example.  \\n  \\n [!code-csharp[System.Text.RegularExpressions.Regex.CompileToAssembly#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.CompileToAssembly/cs/Compile2.cs#2)]\\n [!code-vb[System.Text.RegularExpressions.Regex.CompileToAssembly#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.CompileToAssembly/vb/Compile2.vb#2)]  \\n  \\n Successful compilation of this second example requires a reference to RegexLib.dll (the assembly created by the first example) to be added to the project.\"\n  syntax:\n    content: public static void CompileToAssembly (System.Text.RegularExpressions.RegexCompilationInfo[] regexinfos, System.Reflection.AssemblyName assemblyname);\n    parameters:\n    - id: regexinfos\n      type: System.Text.RegularExpressions.RegexCompilationInfo[]\n      description: An array that describes the regular expressions to compile.\n    - id: assemblyname\n      type: System.Reflection.AssemblyName\n      description: The file name of the assembly.\n  overload: System.Text.RegularExpressions.Regex.CompileToAssembly*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"The value of the <code>assemblyname</code> parameter's <xref href=\\\"System.Reflection.AssemblyName.Name\\\"></xref> property is an empty or null string.  \\n  \\n -or-  \\n  \\n The regular expression pattern of one or more objects in <code>regexinfos</code> contains invalid syntax.\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>assemblyname</code> or <code>regexinfos</code> is `null`.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/Regex.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName,System.Reflection.Emit.CustomAttributeBuilder[])\n  commentId: M:System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName,System.Reflection.Emit.CustomAttributeBuilder[])\n  id: CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName,System.Reflection.Emit.CustomAttributeBuilder[])\n  parent: System.Text.RegularExpressions.Regex\n  langs:\n  - csharp\n  name: CompileToAssembly(RegexCompilationInfo[], AssemblyName, CustomAttributeBuilder[])\n  nameWithType: Regex.CompileToAssembly(RegexCompilationInfo[], AssemblyName, CustomAttributeBuilder[])\n  fullName: Regex.CompileToAssembly(RegexCompilationInfo[], AssemblyName, CustomAttributeBuilder[])\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Text.RegularExpressions\n  summary: Compiles one or more specified <xref href=\"System.Text.RegularExpressions.Regex\"></xref> objects to a named assembly with the specified attributes.\n  remarks: \"The <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%28System.Text.RegularExpressions.RegexCompilationInfo%5B%5D%2CSystem.Reflection.AssemblyName%2CSystem.Reflection.Emit.CustomAttributeBuilder%5B%5D%29> method generates a .NET Framework assembly in which each regular expression defined in the `regexinfos` array is represented by a class. Typically, the <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%28System.Text.RegularExpressions.RegexCompilationInfo%5B%5D%2CSystem.Reflection.AssemblyName%2CSystem.Reflection.Emit.CustomAttributeBuilder%5B%5D%29> method is called from a separate application that generates an assembly of compiled regular expressions. Each regular expression included in the assembly has the following characteristics:  \\n  \\n-   It is derived from the <xref:System.Text.RegularExpressions.Regex> class.  \\n  \\n-   It is assigned the fully qualified name that is defined by the `fullnamespace` and `name` parameters of its corresponding <xref:System.Text.RegularExpressions.RegexCompilationInfo> object.  \\n  \\n-   It has a default (or parameterless) constructor.  \\n  \\n Ordinarily, the code that instantiates and uses the compiled regular expression is found in an assembly or application that is separate from the code that creates the assembly.  \\n  \\n Because the <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A> method generates a .NET Framework assembly from a method call instead of using a particular language's class definition keyword (such as `class` in C# or `Class`…`End Class` in Visual Basic), it does not allow .NET Framework attributes to be assigned to the assembly by using the development language's standard attribute syntax. The `attributes` parameter provides an alternative method for defining the attributes that apply to the assembly. For each attribute that you want to apply to the assembly, do the following:  \\n  \\n1.  Create an array of <xref:System.Type> objects representing the parameter types of the attribute constructor that you want to call.  \\n  \\n2.  Retrieve a <xref:System.Type> object representing the attribute class that you want to apply to the new assembly.  \\n  \\n3.  Call the <xref:System.Type.GetConstructor%2A> method of the attribute <xref:System.Type> object to retrieve a <xref:System.Reflection.ConstructorInfo> object representing the attribute constructor that you want to call. Pass the <xref:System.Type.GetConstructor%2A> method the array of <xref:System.Type> objects that represents the constructor's parameter types.  \\n  \\n4.  Create a <xref:System.Object> array that defines the parameters to pass to the attribute's constructor.  \\n  \\n5.  Instantiate a <xref:System.Reflection.Emit.CustomAttributeBuilder> object by passing its constructor the <xref:System.Reflection.ConstructorInfo> object retrieved in step 3 and the <xref:System.Object> array created in step 4.  \\n  \\n You can then pass an array of these <xref:System.Reflection.Emit.CustomAttributeBuilder> objects instead of the `attributes` parameter to the <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%28System.Text.RegularExpressions.RegexCompilationInfo%5B%5D%2CSystem.Reflection.AssemblyName%2CSystem.Reflection.Emit.CustomAttributeBuilder%5B%5D%29?displayProperty=fullName> method.\"\n  example:\n  - \"The following example creates an assembly named RegexLib.dll and applies the <xref:System.Reflection.AssemblyTitleAttribute> attribute to it. The assembly includes two compiled regular expressions. The first, `Utilities.RegularExpressions.DuplicatedString`, matches two identical contiguous words. The second, `Utilities.RegularExpressions.EmailAddress`, checks whether a string has the correct format to be an e-mail address.  \\n  \\n [!code-csharp[System.Text.RegularExpressions.Regex.CompileToAssembly#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.CompileToAssembly/cs/Compile3.cs#3)]\\n [!code-vb[System.Text.RegularExpressions.Regex.CompileToAssembly#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.CompileToAssembly/vb/Compile3.vb#3)]  \\n  \\n You can verify that the <xref:System.Reflection.AssemblyTitleAttribute> attribute has been applied to the assembly by examining its manifest with a reflection utility such as ILDasm.  \\n  \\n The regular expression that checks a string for duplicate words is then instantiated and used by the following example.  \\n  \\n [!code-csharp[System.Text.RegularExpressions.Regex.CompileToAssembly#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.CompileToAssembly/cs/Compile2.cs#2)]\\n [!code-vb[System.Text.RegularExpressions.Regex.CompileToAssembly#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.CompileToAssembly/vb/Compile2.vb#2)]  \\n  \\n Successful compilation of this second example requires a reference to RegexLib.dll (the assembly created by the first example) to be added to the project.\"\n  syntax:\n    content: public static void CompileToAssembly (System.Text.RegularExpressions.RegexCompilationInfo[] regexinfos, System.Reflection.AssemblyName assemblyname, System.Reflection.Emit.CustomAttributeBuilder[] attributes);\n    parameters:\n    - id: regexinfos\n      type: System.Text.RegularExpressions.RegexCompilationInfo[]\n      description: An array that describes the regular expressions to compile.\n    - id: assemblyname\n      type: System.Reflection.AssemblyName\n      description: The file name of the assembly.\n    - id: attributes\n      type: System.Reflection.Emit.CustomAttributeBuilder[]\n      description: An array that defines the attributes to apply to the assembly.\n  overload: System.Text.RegularExpressions.Regex.CompileToAssembly*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"The value of the <code>assemblyname</code> parameter's <xref href=\\\"System.Reflection.AssemblyName.Name\\\"></xref> property is an empty or null string.  \\n  \\n -or-  \\n  \\n The regular expression pattern of one or more objects in <code>regexinfos</code> contains invalid syntax.\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>assemblyname</code> or <code>regexinfos</code> is `null`.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/Regex.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName,System.Reflection.Emit.CustomAttributeBuilder[],System.String)\n  commentId: M:System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName,System.Reflection.Emit.CustomAttributeBuilder[],System.String)\n  id: CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName,System.Reflection.Emit.CustomAttributeBuilder[],System.String)\n  parent: System.Text.RegularExpressions.Regex\n  langs:\n  - csharp\n  name: CompileToAssembly(RegexCompilationInfo[], AssemblyName, CustomAttributeBuilder[], String)\n  nameWithType: Regex.CompileToAssembly(RegexCompilationInfo[], AssemblyName, CustomAttributeBuilder[], String)\n  fullName: Regex.CompileToAssembly(RegexCompilationInfo[], AssemblyName, CustomAttributeBuilder[], String)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Text.RegularExpressions\n  summary: Compiles one or more specified <xref href=\"System.Text.RegularExpressions.Regex\"></xref> objects and a specified resource file to a named assembly with the specified attributes.\n  remarks: \"The [\\\\], AssemblyName, CustomAttributeBuilder\\\\<xref:System.Text.RegularExpressions.Regex.CompileToAssembly%28System.Text.RegularExpressions.RegexCompilationInfo%5B%5D%2CSystem.Reflection.AssemblyName%2CSystem.Reflection.Emit.CustomAttributeBuilder%5B%5D%2CSystem.String%29> method generates a .NET Framework assembly in which each regular expression defined in the `regexinfos` array is represented by a class. Typically, the [\\\\], AssemblyName, CustomAttributeBuilder\\\\<xref:System.Text.RegularExpressions.Regex.CompileToAssembly%28System.Text.RegularExpressions.RegexCompilationInfo%5B%5D%2CSystem.Reflection.AssemblyName%2CSystem.Reflection.Emit.CustomAttributeBuilder%5B%5D%2CSystem.String%29> method is called from a separate application that generates an assembly of compiled regular expressions. Each regular expression included in the assembly has the following characteristics:  \\n  \\n-   It is derived from the <xref:System.Text.RegularExpressions.Regex> class.  \\n  \\n-   It is assigned the fully qualified name that is defined by the `fullnamespace` and `name` parameters of its corresponding <xref:System.Text.RegularExpressions.RegexCompilationInfo> object.  \\n  \\n-   It has a default (or parameterless) constructor.  \\n  \\n Ordinarily, the code that instantiates and uses the compiled regular expression is found in an assembly or application that is separate from the code that creates the assembly.  \\n  \\n Because the <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A> method generates a .NET Framework assembly from a method call instead of using a particular language's class definition keyword (such as `class` in C# or `Class`…`End Class` in Visual Basic), it does not allow .NET Framework attributes to be assigned to the assembly by using the development language's standard attribute syntax. The `attributes` parameter provides an alternative method for defining the attributes that apply to the assembly. For each attribute that you want to apply to the assembly, do the following:  \\n  \\n1.  Create an array of <xref:System.Type> objects representing the parameter types of the attribute constructor that you want to call.  \\n  \\n2.  Retrieve a <xref:System.Type> object representing the attribute class that you want to apply to the new assembly.  \\n  \\n3.  Call the <xref:System.Type.GetConstructor%2A> method of the attribute <xref:System.Type> object to retrieve a <xref:System.Reflection.ConstructorInfo> object representing the attribute constructor that you want to call. Pass the <xref:System.Type.GetConstructor%2A> method the array of <xref:System.Type> objects that represents the constructor's parameter types  \\n  \\n4.  Create a <xref:System.Object> array that defines the parameters to pass to the attribute's constructor.  \\n  \\n5.  Instantiate a <xref:System.Reflection.Emit.CustomAttributeBuilder> object by passing its constructor the <xref:System.Reflection.ConstructorInfo> object retrieved in step 3 and the <xref:System.Object> array created in step 4.  \\n  \\n You can then pass an array of these <xref:System.Reflection.Emit.CustomAttributeBuilder> objects instead of the `attributes` parameter to the [\\\\], AssemblyName, CustomAttributeBuilder\\\\<xref:System.Text.RegularExpressions.Regex.CompileToAssembly%28System.Text.RegularExpressions.RegexCompilationInfo%5B%5D%2CSystem.Reflection.AssemblyName%2CSystem.Reflection.Emit.CustomAttributeBuilder%5B%5D%2CSystem.String%29> method.\"\n  syntax:\n    content: public static void CompileToAssembly (System.Text.RegularExpressions.RegexCompilationInfo[] regexinfos, System.Reflection.AssemblyName assemblyname, System.Reflection.Emit.CustomAttributeBuilder[] attributes, string resourceFile);\n    parameters:\n    - id: regexinfos\n      type: System.Text.RegularExpressions.RegexCompilationInfo[]\n      description: An array that describes the regular expressions to compile.\n    - id: assemblyname\n      type: System.Reflection.AssemblyName\n      description: The file name of the assembly.\n    - id: attributes\n      type: System.Reflection.Emit.CustomAttributeBuilder[]\n      description: An array that defines the attributes to apply to the assembly.\n    - id: resourceFile\n      type: System.String\n      description: The name of the Win32 resource file to include in the assembly.\n  overload: System.Text.RegularExpressions.Regex.CompileToAssembly*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"The value of the <code>assemblyname</code> parameter's <xref href=\\\"System.Reflection.AssemblyName.Name\\\"></xref> property is an empty or null string.  \\n  \\n -or-  \\n  \\n The regular expression pattern of one or more objects in <code>regexinfos</code> contains invalid syntax.\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>assemblyname</code> or <code>regexinfos</code> is `null`.\n  - type: System.Runtime.InteropServices.COMException\n    commentId: T:System.Runtime.InteropServices.COMException\n    description: The <code>resourceFile</code> parameter designates an invalid Win32 resource file.\n  - type: System.IO.FileNotFoundException\n    commentId: T:System.IO.FileNotFoundException\n    description: The file designated by the <code>resourceFile</code> parameter cannot be found.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/Regex.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.RegularExpressions.Regex.Escape(System.String)\n  commentId: M:System.Text.RegularExpressions.Regex.Escape(System.String)\n  id: Escape(System.String)\n  parent: System.Text.RegularExpressions.Regex\n  langs:\n  - csharp\n  name: Escape(String)\n  nameWithType: Regex.Escape(String)\n  fullName: Regex.Escape(String)\n  type: Method\n  assemblies:\n  - System.Text.RegularExpressions\n  - System\n  - netstandard\n  namespace: System.Text.RegularExpressions\n  summary: 'Escapes a minimal set of characters (\\\\, *, +, ?, |, {, [, (,), ^, $,., #, and white space) by replacing them with their escape codes. This instructs the regular expression engine to interpret these characters literally rather than as metacharacters.'\n  remarks: \"<xref:System.Text.RegularExpressions.Regex.Escape%2A> converts a string so that the regular expression engine will interpret any metacharacters that it may contain as character literals. For example, consider a regular expression that is designed to extract comments that are delimited by straight opening and closing brackets ([ and ]) from text. In the following example, the regular expression \\\"[(.*?)]\\\" is interpreted as a character class. Rather than matching comments embedded in the input text, the regular expression matches each opening or closing parenthesis, period, asterisk, or question mark.  \\n  \\n [!code-csharp[System.Text.RegularExpressions.Regex.Escape#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Escape/cs/Escape1.cs#1)]\\n [!code-vb[System.Text.RegularExpressions.Regex.Escape#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Escape/vb/Escape1.vb#1)]  \\n  \\n However, if the opening bracket is escaped by passing it to the <xref:System.Text.RegularExpressions.Regex.Escape%2A> method, the regular expression succeeds in matching comments that are embedded in the input string. The following example illustrates this.  \\n  \\n [!code-csharp[System.Text.RegularExpressions.Regex.Escape#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Escape/cs/Escape1.cs#2)]\\n [!code-vb[System.Text.RegularExpressions.Regex.Escape#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Escape/vb/Escape1.vb#2)]  \\n  \\n In a regular expression that is defined by using static text, characters that are to be interpreted literally rather than as metacharacters can be escaped by preceding them with a backslash symbol (\\\\\\\\) as well as by calling the <xref:System.Text.RegularExpressions.Regex.Escape%2A> method. In a regular expression that is defined dynamically using characters that are not known at design time, calling the <xref:System.Text.RegularExpressions.Regex.Escape%2A> method is particularly important to ensure that the regular expression engine interprets individual characters as literals rather than as metacharacters.  \\n  \\n> [!NOTE]\\n>  If a regular expression pattern includes either the number sign (#) or literal white-space characters, they must be escaped if input text is parsed with the <xref:System.Text.RegularExpressions.RegexOptions?displayProperty=fullName> option enabled.  \\n  \\n While the <xref:System.Text.RegularExpressions.Regex.Escape%2A> method escapes the straight opening bracket ([) and opening brace ({) characters, it does not escape their corresponding closing characters (] and }). In most cases, escaping these is not necessary. If a closing bracket or brace is not preceded by its corresponding opening character, the regular expression engine interprets it literally. If an opening braket or brace is interpreted as a metacharacter, the regular expression engine interprets the first corresponding closing character as a metacharacter. If this is not the desired behavior, the closing bracket or brace should be escaped by explicitly prepending the backslash (\\\\\\\\) character. For an illustration, see the Example section.\"\n  example:\n  - \"The following example extracts comments from text. It assumes that the comments are delimited by a begin comment symbol and an end comment symbol that is selected by the user. Because the comment symbols are to be interpreted literally, they are passed to the <xref:System.Text.RegularExpressions.Regex.Escape%2A> method to ensure that they cannot be misinterpreted as metacharacters. In addition, the example explicitly checks whether the end comment symbol entered by the user is a closing bracket (]) or brace (}). If it is, a backslash character (\\\\\\\\) is prepended to the bracket or brace so that it is interpreted literally. Note that the example also uses the <xref:System.Text.RegularExpressions.Match.Groups%2A?displayProperty=fullName> collection to display the comment only, rather than the comment together with its opening and closing comment symbols.  \\n  \\n [!code-csharp[System.Text.RegularExpressions.Regex.Escape#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Escape/cs/Escape3.cs#3)]\\n [!code-vb[System.Text.RegularExpressions.Regex.Escape#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Escape/vb/Escape3.vb#3)]\"\n  syntax:\n    content: public static string Escape (string str);\n    parameters:\n    - id: str\n      type: System.String\n      description: The input string that contains the text to convert.\n    return:\n      type: System.String\n      description: A string of characters with metacharacters converted to their escaped form.\n  overload: System.Text.RegularExpressions.Regex.Escape*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>str</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/Regex.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.RegularExpressions.Regex.factory\n  commentId: F:System.Text.RegularExpressions.Regex.factory\n  id: factory\n  parent: System.Text.RegularExpressions.Regex\n  langs:\n  - csharp\n  name: factory\n  nameWithType: Regex.factory\n  fullName: Regex.factory\n  type: Field\n  assemblies:\n  - System.Text.RegularExpressions\n  - System\n  - netstandard\n  namespace: System.Text.RegularExpressions\n  summary: Used by a <xref href=\"System.Text.RegularExpressions.Regex\"></xref> object generated by the <xref href=\"System.Text.RegularExpressions.Regex.CompileToAssembly*\"></xref> method.\n  syntax:\n    content: protected System.Text.RegularExpressions.RegexRunnerFactory factory;\n    return:\n      type: System.Text.RegularExpressions.RegexRunnerFactory\n      description: ''\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/Regex.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.RegularExpressions.Regex.GetGroupNames\n  commentId: M:System.Text.RegularExpressions.Regex.GetGroupNames\n  id: GetGroupNames\n  parent: System.Text.RegularExpressions.Regex\n  langs:\n  - csharp\n  name: GetGroupNames()\n  nameWithType: Regex.GetGroupNames()\n  fullName: Regex.GetGroupNames()\n  type: Method\n  assemblies:\n  - System.Text.RegularExpressions\n  - System\n  - netstandard\n  namespace: System.Text.RegularExpressions\n  summary: Returns an array of capturing group names for the regular expression.\n  remarks: \"The collection of group names contains the set of strings used to name capturing groups in the expression. Even if capturing groups are not explicitly named, they are automatically assigned numerical names (\\\"0\\\", \\\"1\\\", \\\"2\\\", \\\"3\\\", and so on). The \\\"0\\\" named group represents all text matched by the regular expression pattern. Numbered groups precede explicitly named groups in the collection, and named groups appear in the order in which they are defined in the regular expression pattern.  \\n  \\n You can use the <xref:System.Array.Length%2A> property on the array returned by this method to determine the number of groups in a regular expression.\"\n  example:\n  - \"The following example defines a general-purpose `ShowMatches` method that displays the names of regular expression groups and their matched text.  \\n  \\n [!code-csharp[System.Text.RegularExpressions.Regex.GetGroupNames#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.getgroupnames/cs/getgroupnames1.cs#1)]\\n [!code-vb[System.Text.RegularExpressions.Regex.GetGroupNames#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.getgroupnames/vb/getgroupnames1.vb#1)]  \\n  \\n In this case, the regular expression pattern `\\\\b(?<FirstWord>\\\\w+)\\\\s?((\\\\w+)\\\\s)*(?<LastWord>\\\\w+)?(?<Punctuation>\\\\p{Po})` is intended to parse a simple sentence, and to identify its first word, last word, and ending punctuation mark. The following table shows how the regular expression pattern is interpreted:  \\n  \\n|Pattern|Description|  \\n|-------------|-----------------|  \\n|`\\\\b`|Begin the match at a word boundary.|  \\n|`(?<FirstWord>\\\\w+)`|Match one or more word characters. This is the `FirstWord` named group.|  \\n|\\\\s?|Match zero or one white-space characters.|  \\n|(\\\\w+)|Match one or more word characters. This is the second capturing group.|  \\n|\\\\s|Match a white-space character.|  \\n|((\\\\w+)\\\\s)*|Match zero or more occurrences of one or more word characters followed by a white space. This is the first capturing group.|  \\n|(?\\\\<LastWord>\\\\w+)?|Match zero or one occurrence of one or more word characters. This is the `LastWord` named group.|  \\n|(?\\\\<Punctuation>\\\\p{Po})|Match a character whose Unicode category is Punctuation, Other. This is the `Punctuation` named group.|\"\n  syntax:\n    content: public string[] GetGroupNames ();\n    parameters: []\n    return:\n      type: System.String[]\n      description: A string array of group names.\n  overload: System.Text.RegularExpressions.Regex.GetGroupNames*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/Regex.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.RegularExpressions.Regex.GetGroupNumbers\n  commentId: M:System.Text.RegularExpressions.Regex.GetGroupNumbers\n  id: GetGroupNumbers\n  parent: System.Text.RegularExpressions.Regex\n  langs:\n  - csharp\n  name: GetGroupNumbers()\n  nameWithType: Regex.GetGroupNumbers()\n  fullName: Regex.GetGroupNumbers()\n  type: Method\n  assemblies:\n  - System.Text.RegularExpressions\n  - System\n  - netstandard\n  namespace: System.Text.RegularExpressions\n  summary: Returns an array of capturing group numbers that correspond to group names in an array.\n  remarks: \"Both unnamed and named capturing groups can be accessed by number. Unnamed groups are numbered from left to right starting with 1. (The capturing group in index 0 (zero) represents the match as a whole.)  Named groups are then numbered from left to right starting with a number that is one greater than the number of unnamed capturing groups.  \\n  \\n Referencing a group by its number instead of by string name can provide faster access.\"\n  example:\n  - \"The following example defines a regular expression, `\\\\b((?<word>\\\\w+)\\\\s*)+(?<end>[.?!])`, that matches a sentence. The regular expression includes three capturing groups: an unnamed group that captures an individual word along with a space character that may follow it; a group named `word` that captures the individual words in the sentence; and a group named `end` that captures the punctuation that ends the sentence. The example calls the <xref:System.Text.RegularExpressions.Regex.GetGroupNumbers%2A> method to get the numbers of all capturing groups, and then displays their captured string. In addition, the <xref:System.Text.RegularExpressions.Regex.GroupNameFromNumber%2A> method is used to indicate whether a particular numbered group corresponds to a named group.  \\n  \\n [!code-csharp[System.Text.RegularExpressions.Regex.GetGroupNumbers#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.getgroupnumbers/cs/getgroupnumbers1.cs#1)]\\n [!code-vb[System.Text.RegularExpressions.Regex.GetGroupNumbers#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.getgroupnumbers/vb/getgroupnumbers1.vb#1)]  \\n  \\n The regular expression pattern is interpreted as shown in the following table.  \\n  \\n|Pattern|Description|  \\n|-------------|-----------------|  \\n|`\\\\b`|Begin the match at a word boundary.|  \\n|`(?<word>\\\\w+)`|Match one or more word characters and assign the matched strings to a group named `word`.|  \\n|`\\\\s*`|Match zero or more white-space characters.|  \\n|`((?<word>\\\\w+)\\\\s*)`|Assign the `word` captured group followed by any captured white-space characters to the first captured group.|  \\n|`((?<word>\\\\w+)\\\\s*)+`|Match the pattern of one or more word characters followed by any white-space characters one or more times.|  \\n|`(?<end>[.?!])`|Match a period, question mark, or exclamation point. Assign the matched character to the `end` capturing group.|\"\n  syntax:\n    content: public int[] GetGroupNumbers ();\n    parameters: []\n    return:\n      type: System.Int32[]\n      description: An integer array of group numbers.\n  overload: System.Text.RegularExpressions.Regex.GetGroupNumbers*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/Regex.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.RegularExpressions.Regex.GroupNameFromNumber(System.Int32)\n  commentId: M:System.Text.RegularExpressions.Regex.GroupNameFromNumber(System.Int32)\n  id: GroupNameFromNumber(System.Int32)\n  parent: System.Text.RegularExpressions.Regex\n  langs:\n  - csharp\n  name: GroupNameFromNumber(Int32)\n  nameWithType: Regex.GroupNameFromNumber(Int32)\n  fullName: Regex.GroupNameFromNumber(Int32)\n  type: Method\n  assemblies:\n  - System.Text.RegularExpressions\n  - System\n  - netstandard\n  namespace: System.Text.RegularExpressions\n  summary: Gets the group name that corresponds to the specified group number.\n  remarks: \"A regular expression pattern may contain either named or numbered capturing groups, which delineate subexpressions within a pattern match. Numbered groups are delimited by the syntax (*subexpression*) and are assigned numbers based on their order in the regular expression. Named groups are delimited by the syntax (?`<`*name*`>`*subexpression*) or (?'*name*'*subexpression*), where *name* is the name by which the subexpression will be identified. (For more information, see [Grouping Constructs](~/docs/standard/base-types/grouping-constructs-in-regular-expressions.md).) The <xref:System.Text.RegularExpressions.Regex.GroupNameFromNumber%2A> method identifies both named groups and numbered groups by their ordinal positions in the regular expression. Ordinal position zero always represents the entire regular expression. All numbered groups are then counted before named groups, regardless of their actual position in the regular expression pattern.  \\n  \\n If `i` is the number of a named group, the method returns the name of the group. If `i` is the number of an unnamed group, the method returns the string representation of the number. For example, if `i` is 1, the method returns \\\"1\\\". If `i` is not the number of a capturing group, the method returns <xref:System.String?displayProperty=fullName>.  \\n  \\n If a pattern match is found, the value returned by this method can then be used to retrieve the <xref:System.Text.RegularExpressions.Group> object that represents the captured group from the <xref:System.Text.RegularExpressions.GroupCollection.Item%2A?displayProperty=fullName> property. The <xref:System.Text.RegularExpressions.GroupCollection> object is returned by the <xref:System.Text.RegularExpressions.Match.Groups%2A?displayProperty=fullName> property.\"\n  example:\n  - \"The following example defines a regular expression pattern that matches an address line containing a U.S. city name, state name, and zip code. The example uses the <xref:System.Text.RegularExpressions.Regex.GroupNameFromNumber%2A> method to retrieve the names of capturing groups. It then uses these names to retrieve the corresponding captured groups for matches.  \\n  \\n [!code-csharp[System.Text.RegularExpressions.Regex.GroupNameFromNumber#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.groupnamefromnumber/cs/groupnamefromnumberex.cs#1)]\\n [!code-vb[System.Text.RegularExpressions.Regex.GroupNameFromNumber#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.groupnamefromnumber/vb/groupnamefromnumberex.vb#1)]  \\n  \\n The regular expression pattern is defined by the following expression:  \\n  \\n `(?<city>[A-Za-z\\\\s]+), (?<state>[A-Za-z]{2}) (?<zip>\\\\d{5}(-\\\\d{4})?)`  \\n  \\n The following table shows how the regular expression pattern is interpreted.  \\n  \\n|Pattern|Description|  \\n|-------------|-----------------|  \\n|`(?<city>[A-Za-z\\\\s]+)`|Match one or more alphabetic or white-space character. Assign this captured group the name `city`.|  \\n|`,`|Match a comma (,) followed by a white-space character.|  \\n|`(?<state>[A-Za-z]{2})`|Match two alphabetic characters. Assign this captured group the name `state`. This group should be followed by a white-space character.|  \\n|`(?<zip>\\\\d{5}(-\\\\d{4})?)`|Match five numeric digits followed by either zero or one occurrence of a hyphen followed by four digits. Assign this captured group the name `zip`.|\"\n  syntax:\n    content: public string GroupNameFromNumber (int i);\n    parameters:\n    - id: i\n      type: System.Int32\n      description: The group number to convert to the corresponding group name.\n    return:\n      type: System.String\n      description: A string that contains the group name associated with the specified group number. If there is no group name that corresponds to <code>i</code>, the method returns <xref href=\"System.String.Empty\"></xref>.\n  overload: System.Text.RegularExpressions.Regex.GroupNameFromNumber*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/Regex.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.RegularExpressions.Regex.GroupNumberFromName(System.String)\n  commentId: M:System.Text.RegularExpressions.Regex.GroupNumberFromName(System.String)\n  id: GroupNumberFromName(System.String)\n  parent: System.Text.RegularExpressions.Regex\n  langs:\n  - csharp\n  name: GroupNumberFromName(String)\n  nameWithType: Regex.GroupNumberFromName(String)\n  fullName: Regex.GroupNumberFromName(String)\n  type: Method\n  assemblies:\n  - System.Text.RegularExpressions\n  - System\n  - netstandard\n  namespace: System.Text.RegularExpressions\n  summary: Returns the group number that corresponds to the specified group name.\n  remarks: \"A regular expression pattern may contain either named or numbered capturing groups, which delineate subexpressions within a pattern match. Numbered groups are delimited by the syntax (*subexpression*) and are assigned numbers based on their order in the regular expression. Named groups are delimited by the syntax (?`<`*name*`>`*subexpression*) or (?'*name*'*subexpression*), where *name* is the name by which the subexpression will be identified. (For more information, see [Grouping Constructs](~/docs/standard/base-types/grouping-constructs-in-regular-expressions.md).) The <xref:System.Text.RegularExpressions.Regex.GroupNumberFromName%2A> method identifies both named groups and numbered groups by their ordinal positions in the regular expression. Ordinal position zero always represents the entire regular expression. All numbered groups are then counted before named groups, regardless of their actual position in the regular expression pattern.  \\n  \\n If `name` is the string representation of a group number that is present in the regular expression pattern, the method returns that number. If `name` corresponds to a named capturing group that is present in the regular expression pattern, the method returns its corresponding number. The comparison of `name` with the group name is case-sensitive. If `name` does not correspond to the name of a capturing group or to the string representation of the number of a capturing group, the method returns -1.\"\n  syntax:\n    content: public int GroupNumberFromName (string name);\n    parameters:\n    - id: name\n      type: System.String\n      description: The group name to convert to the corresponding group number.\n    return:\n      type: System.Int32\n      description: The group number that corresponds to the specified group name, or -1 if <code>name</code> is not a valid group name.\n  overload: System.Text.RegularExpressions.Regex.GroupNumberFromName*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>name</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/Regex.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.RegularExpressions.Regex.InfiniteMatchTimeout\n  commentId: F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout\n  id: InfiniteMatchTimeout\n  parent: System.Text.RegularExpressions.Regex\n  langs:\n  - csharp\n  name: InfiniteMatchTimeout\n  nameWithType: Regex.InfiniteMatchTimeout\n  fullName: Regex.InfiniteMatchTimeout\n  type: Field\n  assemblies:\n  - System.Text.RegularExpressions\n  - System\n  - netstandard\n  namespace: System.Text.RegularExpressions\n  summary: Specifies that a pattern-matching operation should not time out.\n  remarks: \"The <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29> class constructor and a number of static matching methods use the <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout> constant to indicate that the attempt to find a pattern match should not time out.  \\n  \\n> [!WARNING]\\n>  Setting the regular expression engine's time-out value to <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout> can cause regular expressions that rely on excessive backtracking to appear to stop responding when processing text that nearly matches the regular expression pattern. If you disable time-outs, you should ensure that your regular expression does not rely on excessive backtracking and that it handles text that nearly matches the regular expression pattern.  \\n>   \\n>  For more information about handling backtracking, see [Backtracking](~/docs/standard/base-types/backtracking-in-regular-expressions.md).  \\n  \\n The <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout> constant can be supplied as the value of the `matchTimeout` argument of the following members:  \\n  \\n-   <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29>  \\n  \\n-   <xref:System.Text.RegularExpressions.RegexCompilationInfo.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.String%2CSystem.String%2CSystem.Boolean%2CSystem.TimeSpan%29?displayProperty=fullName>  \\n  \\n-   <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29>  \\n  \\n-   <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29>  \\n  \\n-   <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29>  \\n  \\n-   <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29>  \\n  \\n-   <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.MatchEvaluator%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29>  \\n  \\n-   <xref:System.Text.RegularExpressions.Regex.Split%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29>\"\n  syntax:\n    content: public static readonly TimeSpan InfiniteMatchTimeout;\n    return:\n      type: System.TimeSpan\n      description: ''\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/Regex.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.RegularExpressions.Regex.InitializeReferences\n  commentId: M:System.Text.RegularExpressions.Regex.InitializeReferences\n  id: InitializeReferences\n  parent: System.Text.RegularExpressions.Regex\n  langs:\n  - csharp\n  name: InitializeReferences()\n  nameWithType: Regex.InitializeReferences()\n  fullName: Regex.InitializeReferences()\n  type: Method\n  assemblies:\n  - System.Text.RegularExpressions\n  - System\n  - netstandard\n  namespace: System.Text.RegularExpressions\n  summary: Used by a <xref href=\"System.Text.RegularExpressions.Regex\"></xref> object generated by the <xref href=\"System.Text.RegularExpressions.Regex.CompileToAssembly*\"></xref> method.\n  syntax:\n    content: protected void InitializeReferences ();\n    parameters: []\n  overload: System.Text.RegularExpressions.Regex.InitializeReferences*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: References have already been initialized.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/Regex.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.RegularExpressions.Regex.internalMatchTimeout\n  commentId: F:System.Text.RegularExpressions.Regex.internalMatchTimeout\n  id: internalMatchTimeout\n  parent: System.Text.RegularExpressions.Regex\n  langs:\n  - csharp\n  name: internalMatchTimeout\n  nameWithType: Regex.internalMatchTimeout\n  fullName: Regex.internalMatchTimeout\n  type: Field\n  assemblies:\n  - System.Text.RegularExpressions\n  - System\n  - netstandard\n  namespace: System.Text.RegularExpressions\n  summary: The maximum amount of time that can elapse in a pattern-matching operation before the operation times out.\n  syntax:\n    content: >-\n      [System.Runtime.Serialization.OptionalField(VersionAdded=2)]\n\n      protected TimeSpan internalMatchTimeout;\n    return:\n      type: System.TimeSpan\n      description: ''\n  exceptions: []\n  attributes:\n  - type: System.Runtime.Serialization.OptionalFieldAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/Regex.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.RegularExpressions.Regex.IsMatch(System.String)\n  commentId: M:System.Text.RegularExpressions.Regex.IsMatch(System.String)\n  id: IsMatch(System.String)\n  parent: System.Text.RegularExpressions.Regex\n  langs:\n  - csharp\n  name: IsMatch(String)\n  nameWithType: Regex.IsMatch(String)\n  fullName: Regex.IsMatch(String)\n  type: Method\n  assemblies:\n  - System.Text.RegularExpressions\n  - System\n  - netstandard\n  namespace: System.Text.RegularExpressions\n  summary: Indicates whether the regular expression specified in the <xref href=\"System.Text.RegularExpressions.Regex\"></xref> constructor finds a match in a specified input string.\n  remarks: \"The <xref:System.Text.RegularExpressions.Regex.IsMatch%2A> method is typically used to validate a string or to ensure that a string conforms to a particular pattern without retrieving that string for subsequent manipulation. If you want to determine whether one or more strings match a regular expression pattern and then retrieve them for subsequent manipulation, call the <xref:System.Text.RegularExpressions.Regex.Match%2A> or <xref:System.Text.RegularExpressions.Regex.Matches%2A> method.  \\n  \\n The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the matching operation exceeds the time-out interval specified by the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=fullName> constructor. If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <xref:System.Text.RegularExpressions.Regex> object is created. If no time-out is defined in the <xref:System.Text.RegularExpressions.Regex> constructor call or in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, no exception is thrown.\"\n  example:\n  - \"The following example illustrates the use of the <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%29> method to determine whether a string is a valid part number. The regular expression assumes that the part number has a specific format that consists of three sets of characters separated by hyphens. The first set, which contains four characters, must consist of an alphanumeric character followed by two numeric characters followed by an alphanumeric character. The second set, which consists of three characters, must be numeric. The third set, which consists of four characters, must have three numeric characters followed by an alphanumeric character.  \\n  \\n [!code-csharp[System.Text.RegularExpressions.Regex.IsMatch#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.ismatch/cs/ismatch2.cs#2)]\\n [!code-vb[System.Text.RegularExpressions.Regex.IsMatch#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.ismatch/vb/ismatch2.vb#2)]  \\n  \\n The regular expression pattern is:  \\n  \\n```  \\n^[a-zA-Z0-9]\\\\d{2}[a-zA-Z0-9](-\\\\d{3}){2}[A-Za-z0-9]$  \\n```  \\n  \\n The following table shows how the regular expression pattern is interpreted.  \\n  \\n|Pattern|Description|  \\n|-------------|-----------------|  \\n|`^`|Begin the match at the beginning of the line.|  \\n|`[a-zA-Z0-9]`|Match a single alphabetic character (`a` through `z` or `A` through `Z`) or numeric character.|  \\n|`\\\\d{2}`|Match two numeric characters.|  \\n|`[a-zA-Z0-9]`|Match a single alphabetic character (`a` through `z` or `A` through `Z`) or numeric character.|  \\n|`-`|Match a hyphen.|  \\n|`\\\\d{3}`|Match exactly three numeric characters.|  \\n|`(-\\\\d{3}){2}`|Find a hyphen followed by three numeric characters, and match two occurrences of this pattern.|  \\n|`[a-zA-Z0-9]`|Match a single alphabetic character (`a` through `z` or `A` through `Z`) or numeric character.|  \\n|`$`|End the match at the end of the line.|\"\n  syntax:\n    content: public bool IsMatch (string input);\n    parameters:\n    - id: input\n      type: System.String\n      description: The string to search for a match.\n    return:\n      type: System.Boolean\n      description: '`true` if the regular expression finds a match; otherwise, `false`.'\n  overload: System.Text.RegularExpressions.Regex.IsMatch*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>input</code> is `null`.\n  - type: System.Text.RegularExpressions.RegexMatchTimeoutException\n    commentId: T:System.Text.RegularExpressions.RegexMatchTimeoutException\n    description: A time-out occurred. For more information about time-outs, see the Remarks section.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/Regex.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.RegularExpressions.Regex.IsMatch(System.String,System.Int32)\n  commentId: M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.Int32)\n  id: IsMatch(System.String,System.Int32)\n  parent: System.Text.RegularExpressions.Regex\n  langs:\n  - csharp\n  name: IsMatch(String, Int32)\n  nameWithType: Regex.IsMatch(String, Int32)\n  fullName: Regex.IsMatch(String, Int32)\n  type: Method\n  assemblies:\n  - System.Text.RegularExpressions\n  - System\n  - netstandard\n  namespace: System.Text.RegularExpressions\n  summary: Indicates whether the regular expression specified in the <xref href=\"System.Text.RegularExpressions.Regex\"></xref> constructor finds a match in the specified input string, beginning at the specified starting position in the string.\n  remarks: \"The <xref:System.Text.RegularExpressions.Regex.IsMatch%2A> method is typically used to validate a string or to ensure that a string conforms to a particular pattern without retrieving that string for subsequent manipulation. If you want to determine whether one or more strings match a regular expression pattern and then retrieve them for subsequent manipulation, call the <xref:System.Text.RegularExpressions.Regex.Match%2A> or <xref:System.Text.RegularExpressions.Regex.Matches%2A> method.  \\n  \\n The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the matching operation exceeds the time-out interval specified by the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=fullName> constructor. If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <xref:System.Text.RegularExpressions.Regex> object is created. If no time-out is defined in the <xref:System.Text.RegularExpressions.Regex> constructor call or in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, no exception is thrown.\"\n  example:\n  - \"The following example illustrates the use of the <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.Int32%29> method to determine whether a string is a valid part number. It searches for a part number that follows a colon (:) character in a string. The <xref:System.String.IndexOf%28System.Char%29> method is used to determine the position of the colon character, which is then passed to the <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.Int32%29> method. The regular expression assumes that the part number has a specific format that consists of three sets of characters separated by hyphens. The first set, which contains four characters, must consist of an alphanumeric character followed by two numeric characters followed by an alphanumeric character. The second set, which consists of three characters, must be numeric. The third set, which consists of four characters, must have three numeric characters followed by an alphanumeric character.  \\n  \\n [!code-csharp[System.Text.RegularExpressions.Regex.IsMatch#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.ismatch/cs/ismatch3.cs#3)]\\n [!code-vb[System.Text.RegularExpressions.Regex.IsMatch#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.ismatch/vb/ismatch3.vb#3)]  \\n  \\n The regular expression pattern is:  \\n  \\n```  \\n[a-zA-Z0-9]\\\\d{2}[a-zA-Z0-9](-\\\\d{3}){2}[A-Za-z0-9]$  \\n```  \\n  \\n The following table shows how the regular expression pattern is interpreted.  \\n  \\n|Pattern|Description|  \\n|-------------|-----------------|  \\n|`[a-zA-Z0-9]`|Match a single alphabetic character (`a` through `z` or `A` through `Z`) or numeric character.|  \\n|`\\\\d{2}`|Match two numeric characters.|  \\n|`[a-zA-Z0-9]`|Match a single alphabetic character (`a` through `z` or `A` through `Z`) or numeric character.|  \\n|`-`|Match a hyphen.|  \\n|`\\\\d{3}`|Match exactly three numeric characters.|  \\n|`(-\\\\d{3}){2}`|Find a hyphen followed by three numeric characters, and match two occurrences of this pattern.|  \\n|`[a-zA-Z0-9]`|Match a single alphabetic character (`a` through `z` or `A` through `Z`) or numeric character.|  \\n|`$`|End the match at the end of the line.|\"\n  syntax:\n    content: public bool IsMatch (string input, int startat);\n    parameters:\n    - id: input\n      type: System.String\n      description: The string to search for a match.\n    - id: startat\n      type: System.Int32\n      description: The character position at which to start the search.\n    return:\n      type: System.Boolean\n      description: '`true` if the regular expression finds a match; otherwise, `false`.'\n  overload: System.Text.RegularExpressions.Regex.IsMatch*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>input</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>startat</code> is less than zero or greater than the length of <code>input</code>.\n  - type: System.Text.RegularExpressions.RegexMatchTimeoutException\n    commentId: T:System.Text.RegularExpressions.RegexMatchTimeoutException\n    description: A time-out occurred. For more information about time-outs, see the Remarks section.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/Regex.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String)\n  commentId: M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String)\n  id: IsMatch(System.String,System.String)\n  parent: System.Text.RegularExpressions.Regex\n  langs:\n  - csharp\n  name: IsMatch(String, String)\n  nameWithType: Regex.IsMatch(String, String)\n  fullName: Regex.IsMatch(String, String)\n  type: Method\n  assemblies:\n  - System.Text.RegularExpressions\n  - System\n  - netstandard\n  namespace: System.Text.RegularExpressions\n  summary: Indicates whether the specified regular expression finds a match in the specified input string.\n  remarks: \"The <xref:System.Text.RegularExpressions.Regex.IsMatch%2A> method is typically used to validate a string or to ensure that a string conforms to a particular pattern without retrieving that string for subsequent manipulation. If you want to determine whether one or more strings match a regular expression pattern and then retrieve them for subsequent manipulation, call the <xref:System.Text.RegularExpressions.Regex.Match%2A> or <xref:System.Text.RegularExpressions.Regex.Matches%2A> method.  \\n  \\n The static <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.String%29> method is equivalent to constructing a <xref:System.Text.RegularExpressions.Regex> object with the regular expression pattern specified by `pattern` and calling the <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%29> instance method. This regular expression pattern is cached for rapid retrieval by the regular expression engine.  \\n  \\n The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match. For more information about regular expressions, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).  \\n  \\n The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the matching operation exceeds the time-out interval specified for the application domain in which the method is called. If no time-out is defined in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, no exception is thrown.\"\n  example:\n  - \"The following example illustrates the use of the <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.String%29> method to determine whether a string is a valid part number. The regular expression assumes that the part number has a specific format that consists of three sets of characters separated by hyphens. The first set, which contains four characters, must consist of an alphanumeric character followed by two numeric characters followed by an alphanumeric character. The second set, which consists of three characters, must be numeric. The third set, which consists of four characters, must have three numeric characters followed by an alphanumeric character.  \\n  \\n [!code-csharp[System.Text.RegularExpressions.Regex.IsMatch#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.ismatch/cs/ismatch1.cs#1)]\\n [!code-vb[System.Text.RegularExpressions.Regex.IsMatch#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.ismatch/vb/ismatch1.vb#1)]  \\n  \\n The regular expression pattern is:  \\n  \\n```  \\n^[a-zA-Z0-9]\\\\d{2}[a-zA-Z0-9](-\\\\d{3}){2}[A-Za-z0-9]$  \\n```  \\n  \\n The following table shows how the regular expression pattern is interpreted.  \\n  \\n|Pattern|Description|  \\n|-------------|-----------------|  \\n|`^`|Begin the match at the beginning of the line.|  \\n|`[a-zA-Z0-9]`|Match a single alphabetic character (`a` through `z` or `A` through `Z`) or numeric character.|  \\n|`\\\\d{2}`|Match two numeric characters.|  \\n|`[a-zA-Z0-9]`|Match a single alphabetic character (`a` through `z` or `A` through `Z`) or numeric character.|  \\n|`-`|Match a hyphen.|  \\n|`\\\\d{3}`|Match exactly three numeric characters.|  \\n|`(-\\\\d{3}){2}`|Find a hyphen followed by three numeric characters, and match two occurrences of this pattern.|  \\n|`[a-zA-Z0-9]`|Match a single alphabetic character (`a` through `z` or `A` through `Z`) or numeric character.|  \\n|`$`|End the match at the end of the line.|\"\n  syntax:\n    content: public static bool IsMatch (string input, string pattern);\n    parameters:\n    - id: input\n      type: System.String\n      description: The string to search for a match.\n    - id: pattern\n      type: System.String\n      description: The regular expression pattern to match.\n    return:\n      type: System.Boolean\n      description: '`true` if the regular expression finds a match; otherwise, `false`.'\n  overload: System.Text.RegularExpressions.Regex.IsMatch*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: A regular expression parsing error occurred.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>input</code> or <code>pattern</code> is `null`.\n  - type: System.Text.RegularExpressions.RegexMatchTimeoutException\n    commentId: T:System.Text.RegularExpressions.RegexMatchTimeoutException\n    description: A time-out occurred. For more information about time-outs, see the Remarks section.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/Regex.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions)\n  commentId: M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions)\n  id: IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions)\n  parent: System.Text.RegularExpressions.Regex\n  langs:\n  - csharp\n  name: IsMatch(String, String, RegexOptions)\n  nameWithType: Regex.IsMatch(String, String, RegexOptions)\n  fullName: Regex.IsMatch(String, String, RegexOptions)\n  type: Method\n  assemblies:\n  - System.Text.RegularExpressions\n  - System\n  - netstandard\n  namespace: System.Text.RegularExpressions\n  summary: Indicates whether the specified regular expression finds a match in the specified input string, using the specified matching options.\n  remarks: \"The <xref:System.Text.RegularExpressions.Regex.IsMatch%2A> method is typically used to validate a string or to ensure that a string conforms to a particular pattern without retrieving that string for subsequent manipulation. If you want to determine whether one or more strings match a regular expression pattern and then retrieve them for subsequent manipulation, call the <xref:System.Text.RegularExpressions.Regex.Match%2A> or <xref:System.Text.RegularExpressions.Regex.Matches%2A> method.  \\n  \\n The static <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29> method is equivalent to constructing a <xref:System.Text.RegularExpressions.Regex> object with the regular expression pattern specified by `pattern` and the regular expression options specified by `options` and calling the <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%29> instance method. This regular expression pattern is cached for rapid retrieval by the regular expression engine.  \\n  \\n The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match. For more information about regular expressions, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).  \\n  \\n The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the matching operation exceeds the time-out interval specified for the application domain in which the method is called. If no time-out is defined in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, no exception is thrown.\"\n  example:\n  - \"The following example illustrates the use of the <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.String%29> method to determine whether a string is a valid part number. The regular expression assumes that the part number has a specific format that consists of three sets of characters separated by hyphens. The first set, which contains four characters, must consist of an alphanumeric character followed by two numeric characters followed by an alphanumeric character. The second set, which consists of three characters, must be numeric. The third set, which consists of four characters, must have three numeric characters followed by an alphanumeric character.  \\n  \\n [!code-csharp[System.Text.RegularExpressions.Regex.IsMatch#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.ismatch/cs/ismatch4.cs#4)]\\n [!code-vb[System.Text.RegularExpressions.Regex.IsMatch#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.ismatch/vb/ismatch4.vb#4)]  \\n  \\n The regular expression pattern is:  \\n  \\n```  \\n^[A-Z0-9]\\\\d{2}[A-Z0-9](-\\\\d{3}){2}[A-Z0-9]$  \\n```  \\n  \\n The following table shows how the regular expression pattern is interpreted.  \\n  \\n|Pattern|Description|  \\n|-------------|-----------------|  \\n|`^`|Begin the match at the beginning of the string.|  \\n|`[A-Z0-9]`|Match any single alphabetic character from `A` through `Z`, or any numeric character.|  \\n|`\\\\d{2}`|Match two numeric characters.|  \\n|`[A-Z0-9]`|Match any single alphabetic character from `A` through `Z`, or any numeric character.|  \\n|`-`|Match a hyphen.|  \\n|`\\\\d{3}`|Match exactly three numeric characters.|  \\n|`(-\\\\d{3}){2}`|Find a hyphen followed by three numeric characters, and match two occurrences of this pattern..|  \\n|`[A-Z0-9]`|Match any single alphabetic character from `A` through `Z`, or any numeric character.|  \\n|`$`|End the match at the end of the string.|  \\n  \\n Calling the <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29> method with the `options` parameter set to <xref:System.Text.RegularExpressions.RegexOptions?displayProperty=fullName> is equivalent to defining the following regular expression:  \\n  \\n```  \\n[a-zA-Z0-9]\\\\d{2}[a-zA-Z0-9](-\\\\d{3}){2}[A-Za-z0-9]  \\n```  \\n  \\n For comparison, see the example for the <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.String%29> method.\"\n  syntax:\n    content: public static bool IsMatch (string input, string pattern, System.Text.RegularExpressions.RegexOptions options);\n    parameters:\n    - id: input\n      type: System.String\n      description: The string to search for a match.\n    - id: pattern\n      type: System.String\n      description: The regular expression pattern to match.\n    - id: options\n      type: System.Text.RegularExpressions.RegexOptions\n      description: A bitwise combination of the enumeration values that provide options for matching.\n    return:\n      type: System.Boolean\n      description: '`true` if the regular expression finds a match; otherwise, `false`.'\n  overload: System.Text.RegularExpressions.Regex.IsMatch*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: A regular expression parsing error occurred.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>input</code> or <code>pattern</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>options</code> is not a valid <xref href=\"System.Text.RegularExpressions.RegexOptions\"></xref> value.\n  - type: System.Text.RegularExpressions.RegexMatchTimeoutException\n    commentId: T:System.Text.RegularExpressions.RegexMatchTimeoutException\n    description: A time-out occurred. For more information about time-outs, see the Remarks section.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/Regex.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)\n  commentId: M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)\n  id: IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)\n  parent: System.Text.RegularExpressions.Regex\n  langs:\n  - csharp\n  name: IsMatch(String, String, RegexOptions, TimeSpan)\n  nameWithType: Regex.IsMatch(String, String, RegexOptions, TimeSpan)\n  fullName: Regex.IsMatch(String, String, RegexOptions, TimeSpan)\n  type: Method\n  assemblies:\n  - System.Text.RegularExpressions\n  - System\n  - netstandard\n  namespace: System.Text.RegularExpressions\n  summary: Indicates whether the specified regular expression finds a match in the specified input string, using the specified matching options and time-out interval.\n  remarks: \"The <xref:System.Text.RegularExpressions.Regex.IsMatch%2A> method is typically used to validate a string or to ensure that a string conforms to a particular pattern without retrieving that string for subsequent manipulation. If you want to determine whether one or more strings match a regular expression pattern and then retrieve them for subsequent manipulation, call the <xref:System.Text.RegularExpressions.Regex.Match%2A> or <xref:System.Text.RegularExpressions.Regex.Matches%2A> method.  \\n  \\n The static <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29> method is equivalent to constructing a <xref:System.Text.RegularExpressions.Regex> object with the regular expression pattern specified by `pattern` and the regular expression options specified by `options` and calling the <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%29> instance method. This regular expression pattern is cached for rapid retrieval by the regular expression engine.  \\n  \\n The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match. For more information about regular expressions, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).  \\n  \\n The `matchTimeout` parameter specifies how long a pattern matching method should try to find a match before it times out. Setting a time-out interval prevents regular expressions that rely on excessive backtracking from appearing to stop responding when they process input that contains near matches. For more information, see [Best Practices for Regular Expressions](~/docs/standard/base-types/best-practices.md) and [Backtracking](~/docs/standard/base-types/backtracking-in-regular-expressions.md). If no match is found in that time interval, the method throws a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception. `matchTimeout` overrides any default time-out value defined for the application domain in which the method executes.\"\n  example:\n  - \"The following example illustrates the use of the <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29> method to determine whether a string is a valid part number. The regular expression assumes that the part number has a specific format that consists of three sets of characters separated by hyphens. The first set, which contains four characters, must consist of an alphanumeric character followed by two numeric characters followed by an alphanumeric character. The second set, which consists of three characters, must be numeric. The third set, which consists of four characters, must have three numeric characters followed by an alphanumeric character. Matching the regular expression pattern should involve minimal searching through the input string, so the method sets a time-out interval of 500 milliseconds.  \\n  \\n [!code-csharp[System.Text.RegularExpressions.Regex.IsMatch#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.ismatch/cs/ismatch5.cs#5)]\\n [!code-vb[System.Text.RegularExpressions.Regex.IsMatch#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.ismatch/vb/ismatch5.vb#5)]  \\n  \\n The regular expression pattern is:  \\n  \\n```  \\n^[A-Z0-9]\\\\d{2}[A-Z0-9](-\\\\d{3}){2}[A-Z0-9]$  \\n```  \\n  \\n The following table shows how the regular expression pattern is interpreted.  \\n  \\n|Pattern|Description|  \\n|-------------|-----------------|  \\n|`^`|Begin the match at the beginning of the string.|  \\n|`[A-Z0-9]`|Match any single alphabetic character from `A` through `Z`, or any numeric character.|  \\n|`\\\\d{2}`|Match two numeric characters.|  \\n|`[A-Z0-9]`|Match any single alphabetic character from `A` through `Z`, or any numeric character.|  \\n|`-`|Match a hyphen.|  \\n|`\\\\d{3}`|Match exactly three numeric characters.|  \\n|`(-\\\\d{3}){2}`|Find a hyphen followed by three numeric characters, and match two occurrences of this pattern.|  \\n|`[A-Z0-9]`|Match any single alphabetic character from `A` through `Z`, or any numeric character.|  \\n|`$`|End the match at the end of the string.|  \\n  \\n Calling the <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29> method with the `options` parameter set to <xref:System.Text.RegularExpressions.RegexOptions?displayProperty=fullName> is equivalent to defining the following regular expression:  \\n  \\n```  \\n[a-zA-Z0-9]\\\\d{2}[a-zA-Z0-9](-\\\\d{3}){2}[A-Za-z0-9]  \\n```  \\n  \\n For comparison, see the example for the <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.String%29> method.\"\n  syntax:\n    content: public static bool IsMatch (string input, string pattern, System.Text.RegularExpressions.RegexOptions options, TimeSpan matchTimeout);\n    parameters:\n    - id: input\n      type: System.String\n      description: The string to search for a match.\n    - id: pattern\n      type: System.String\n      description: The regular expression pattern to match.\n    - id: options\n      type: System.Text.RegularExpressions.RegexOptions\n      description: A bitwise combination of the enumeration values that provide options for matching.\n    - id: matchTimeout\n      type: System.TimeSpan\n      description: A time-out interval, or <xref href=\"System.Text.RegularExpressions.Regex.InfiniteMatchTimeout\"></xref> to indicate that the method should not time out.\n    return:\n      type: System.Boolean\n      description: '`true` if the regular expression finds a match; otherwise, `false`.'\n  overload: System.Text.RegularExpressions.Regex.IsMatch*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: A regular expression parsing error occurred.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>input</code> or <code>pattern</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>options</code> is not a valid <xref href=\\\"System.Text.RegularExpressions.RegexOptions\\\"></xref> value.  \\n  \\n -or-  \\n  \\n <code>matchTimeout</code> is negative, zero, or greater than approximately 24 days.\"\n  - type: System.Text.RegularExpressions.RegexMatchTimeoutException\n    commentId: T:System.Text.RegularExpressions.RegexMatchTimeoutException\n    description: A time-out occurred.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/Regex.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.RegularExpressions.Regex.Match(System.String,System.String,System.Text.RegularExpressions.RegexOptions)\n  commentId: M:System.Text.RegularExpressions.Regex.Match(System.String,System.String,System.Text.RegularExpressions.RegexOptions)\n  id: Match(System.String,System.String,System.Text.RegularExpressions.RegexOptions)\n  parent: System.Text.RegularExpressions.Regex\n  langs:\n  - csharp\n  name: Match(String, String, RegexOptions)\n  nameWithType: Regex.Match(String, String, RegexOptions)\n  fullName: Regex.Match(String, String, RegexOptions)\n  type: Method\n  assemblies:\n  - System.Text.RegularExpressions\n  - System\n  - netstandard\n  namespace: System.Text.RegularExpressions\n  summary: Searches the input string for the first occurrence of the specified regular expression, using the specified matching options.\n  remarks: \"The <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29> method returns the first substring that matches a regular expression pattern in an input string. For information about the language elements used to build a regular expression pattern, see [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).  \\n  \\n The static <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29> method is equivalent to constructing a <xref:System.Text.RegularExpressions.Regex> object with the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%29> constructor and calling the instance <xref:System.Text.RegularExpressions.Regex.Match%28System.String%29> method.  \\n  \\n The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match. For more information about regular expressions, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).  \\n  \\n You can determine whether the regular expression pattern has been found in the input string by checking the value of the returned <xref:System.Text.RegularExpressions.Match> object's <xref:System.Text.RegularExpressions.Group.Success%2A> property. If a match is found, the returned <xref:System.Text.RegularExpressions.Match> object's <xref:System.Text.RegularExpressions.Capture.Value%2A> property contains the substring from `input` that matches the regular expression pattern. If no match is found, its value is <xref:System.String.Empty?displayProperty=fullName>.  \\n  \\n This method returns the first substring found in `input` that matches the regular expression pattern. You can retrieve subsequent matches by repeatedly calling the returned <xref:System.Text.RegularExpressions.Match> object's <xref:System.Text.RegularExpressions.Match.NextMatch%2A> method. You can also retrieve all matches in a single method call by calling the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29?displayProperty=fullName> method.  \\n  \\n The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the matching operation exceeds the time-out interval specified for the application domain in which the method is called. If no time-out is defined in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, no exception is thrown.\"\n  example:\n  - \"The following example defines a regular expression that matches words beginning with the letter \\\"a\\\". It uses the <xref:System.Text.RegularExpressions.RegexOptions?displayProperty=fullName> option to ensure that the regular expression locates words beginning with both an uppercase \\\"a\\\" and a lowercase \\\"a\\\".  \\n  \\n [!code-csharp[System.Text.RegularExpressions.Regex.Match#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.match/cs/match2.cs#2)]\\n [!code-vb[System.Text.RegularExpressions.Regex.Match#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.match/vb/match2.vb#2)]  \\n  \\n The regular expression pattern `\\\\ba\\\\w*\\\\b` is interpreted as shown in the following table.  \\n  \\n|Pattern|Description|  \\n|-------------|-----------------|  \\n|`\\\\b`|Begin the match at a word boundary.|  \\n|`a`|Match the character \\\"a\\\".|  \\n|`\\\\w*`|Match zero, one, or more word characters.|  \\n|`\\\\b`|End the match at a word boundary.|\"\n  syntax:\n    content: public static System.Text.RegularExpressions.Match Match (string input, string pattern, System.Text.RegularExpressions.RegexOptions options);\n    parameters:\n    - id: input\n      type: System.String\n      description: The string to search for a match.\n    - id: pattern\n      type: System.String\n      description: The regular expression pattern to match.\n    - id: options\n      type: System.Text.RegularExpressions.RegexOptions\n      description: A bitwise combination of the enumeration values that provide options for matching.\n    return:\n      type: System.Text.RegularExpressions.Match\n      description: An object that contains information about the match.\n  overload: System.Text.RegularExpressions.Regex.Match*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: A regular expression parsing error occurred.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>input</code> or <code>pattern</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>options</code> is not a valid bitwise combination of <xref href=\"System.Text.RegularExpressions.RegexOptions\"></xref> values.\n  - type: System.Text.RegularExpressions.RegexMatchTimeoutException\n    commentId: T:System.Text.RegularExpressions.RegexMatchTimeoutException\n    description: A time-out occurred. For more information about time-outs, see the Remarks section.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/Regex.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.RegularExpressions.Regex.Match(System.String,System.Int32,System.Int32)\n  commentId: M:System.Text.RegularExpressions.Regex.Match(System.String,System.Int32,System.Int32)\n  id: Match(System.String,System.Int32,System.Int32)\n  parent: System.Text.RegularExpressions.Regex\n  langs:\n  - csharp\n  name: Match(String, Int32, Int32)\n  nameWithType: Regex.Match(String, Int32, Int32)\n  fullName: Regex.Match(String, Int32, Int32)\n  type: Method\n  assemblies:\n  - System.Text.RegularExpressions\n  - System\n  - netstandard\n  namespace: System.Text.RegularExpressions\n  summary: Searches the input string for the first occurrence of a regular expression, beginning at the specified starting position and searching only the specified number of characters.\n  remarks: \"The <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.Int32%2CSystem.Int32%29> method returns the first substring that matches a regular expression pattern in a portion of an input string. For information about the language elements used to build a regular expression pattern, see [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).  \\n  \\n The regular expression pattern for which the <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.Int32%2CSystem.Int32%29> method searches is defined by the call to one of the <xref:System.Text.RegularExpressions.Regex> class constructors. For more information about the elements that can form a regular expression pattern, see [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).  \\n  \\n The <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.Int32%2CSystem.Int32%29> method searches the portion of `input` defined by the `beginning` and `length` parameters for the regular expression pattern. `beginning` always defines the index of the leftmost character to include in the search, and `length` defines the maximum number of characters to search. Together, they define the range of the search. If the search proceeds from left to right (the default), the regular expression engine searches from the character at index `beginning` to the character at index `beginning` + `length` – 1. If the regular expression engine was instantiated by using the <xref:System.Text.RegularExpressions.RegexOptions?displayProperty=fullName> option so that the search proceeds from right to left, the regular expression engine searches from the character at index `beginning` + `length` – 1 to the character at index `beginning`. This method returns the first match that it finds within this range. You can retrieve subsequent matches by repeatedly calling the returned <xref:System.Text.RegularExpressions.Match> object's <xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=fullName> method.  \\n  \\n You can determine whether the regular expression pattern has been found in the input string by checking the value of the returned <xref:System.Text.RegularExpressions.Match> object's <xref:System.Text.RegularExpressions.Group.Success%2A> property. If a match is found, the returned <xref:System.Text.RegularExpressions.Match> object's <xref:System.Text.RegularExpressions.Capture.Value%2A> property contains the substring from `input` that matches the regular expression pattern. If no match is found, its value is <xref:System.String.Empty?displayProperty=fullName>.  \\n  \\n The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the matching operation exceeds the time-out interval specified by the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=fullName> constructor. If you do not set a time-out value when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <xref:System.Text.RegularExpressions.Regex> object is created. If no time-out is defined in the <xref:System.Text.RegularExpressions.Regex> constructor call or in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, no exception is thrown.\"\n  syntax:\n    content: public System.Text.RegularExpressions.Match Match (string input, int beginning, int length);\n    parameters:\n    - id: input\n      type: System.String\n      description: The string to search for a match.\n    - id: beginning\n      type: System.Int32\n      description: The zero-based character position in the input string that defines the leftmost position to be searched.\n    - id: length\n      type: System.Int32\n      description: The number of characters in the substring to include in the search.\n    return:\n      type: System.Text.RegularExpressions.Match\n      description: An object that contains information about the match.\n  overload: System.Text.RegularExpressions.Regex.Match*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>input</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>beginning</code> is less than zero or greater than the length of <code>input</code>.  \\n  \\n -or-  \\n  \\n <code>length</code> is less than zero or greater than the length of <code>input</code>.  \\n  \\n -or-  \\n  \\n <code>beginning</code>`+`<code>length</code>`–1` identifies a position that is outside the range of <code>input</code>.\"\n  - type: System.Text.RegularExpressions.RegexMatchTimeoutException\n    commentId: T:System.Text.RegularExpressions.RegexMatchTimeoutException\n    description: A time-out occurred. For more information about time-outs, see the Remarks section.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/Regex.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.RegularExpressions.Regex.Match(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)\n  commentId: M:System.Text.RegularExpressions.Regex.Match(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)\n  id: Match(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)\n  parent: System.Text.RegularExpressions.Regex\n  langs:\n  - csharp\n  name: Match(String, String, RegexOptions, TimeSpan)\n  nameWithType: Regex.Match(String, String, RegexOptions, TimeSpan)\n  fullName: Regex.Match(String, String, RegexOptions, TimeSpan)\n  type: Method\n  assemblies:\n  - System.Text.RegularExpressions\n  - System\n  - netstandard\n  namespace: System.Text.RegularExpressions\n  summary: Searches the input string for the first occurrence of the specified regular expression, using the specified matching options and time-out interval.\n  remarks: \"The <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29> method returns the first substring that matches a regular expression pattern in an input string. For information about the language elements used to build a regular expression pattern, see [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).  \\n  \\n The static <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29> method is equivalent to constructing a <xref:System.Text.RegularExpressions.Regex> object with the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29> constructor and calling the instance <xref:System.Text.RegularExpressions.Regex.Match%28System.String%29> method.  \\n  \\n The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match. For more information about regular expressions, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).  \\n  \\n You can determine whether the regular expression pattern has been found in the input string by checking the value of the returned <xref:System.Text.RegularExpressions.Match> object's <xref:System.Text.RegularExpressions.Group.Success%2A> property. If a match is found, the returned <xref:System.Text.RegularExpressions.Match> object's <xref:System.Text.RegularExpressions.Capture.Value%2A> property contains the substring from `input` that matches the regular expression pattern. If no match is found, its value is <xref:System.String.Empty?displayProperty=fullName>.  \\n  \\n This method returns the first substring found in `input` that matches the regular expression pattern. You can retrieve subsequent matches by repeatedly calling the returned <xref:System.Text.RegularExpressions.Match> object's <xref:System.Text.RegularExpressions.Match.NextMatch%2A> method. You can also retrieve all matches in a single method call by calling the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29?displayProperty=fullName> method.  \\n  \\n The `matchTimeout` parameter specifies how long a pattern matching method should try to find a match before it times out. Setting a time-out interval prevents regular expressions that rely on excessive backtracking from appearing to stop responding when they process input that contains near matches. For more information, see [Best Practices for Regular Expressions](~/docs/standard/base-types/best-practices.md) and [Backtracking](~/docs/standard/base-types/backtracking-in-regular-expressions.md). If no match is found in that time interval, the method throws a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception. `matchTimeout` overrides any default time-out value defined for the application domain in which the method executes.\"\n  syntax:\n    content: public static System.Text.RegularExpressions.Match Match (string input, string pattern, System.Text.RegularExpressions.RegexOptions options, TimeSpan matchTimeout);\n    parameters:\n    - id: input\n      type: System.String\n      description: The string to search for a match.\n    - id: pattern\n      type: System.String\n      description: The regular expression pattern to match.\n    - id: options\n      type: System.Text.RegularExpressions.RegexOptions\n      description: A bitwise combination of the enumeration values that provide options for matching.\n    - id: matchTimeout\n      type: System.TimeSpan\n      description: A time-out interval, or <xref href=\"System.Text.RegularExpressions.Regex.InfiniteMatchTimeout\"></xref> to indicate that the method should not time out.\n    return:\n      type: System.Text.RegularExpressions.Match\n      description: An object that contains information about the match.\n  overload: System.Text.RegularExpressions.Regex.Match*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: A regular expression parsing error occurred.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>input</code> or <code>pattern</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>options</code> is not a valid bitwise combination of <xref href=\\\"System.Text.RegularExpressions.RegexOptions\\\"></xref> values.  \\n  \\n -or-  \\n  \\n <code>matchTimeout</code> is negative, zero, or greater than approximately 24 days.\"\n  - type: System.Text.RegularExpressions.RegexMatchTimeoutException\n    commentId: T:System.Text.RegularExpressions.RegexMatchTimeoutException\n    description: A time-out occurred. For more information about time-outs, see the Remarks section.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/Regex.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.RegularExpressions.Regex.Match(System.String,System.Int32)\n  commentId: M:System.Text.RegularExpressions.Regex.Match(System.String,System.Int32)\n  id: Match(System.String,System.Int32)\n  parent: System.Text.RegularExpressions.Regex\n  langs:\n  - csharp\n  name: Match(String, Int32)\n  nameWithType: Regex.Match(String, Int32)\n  fullName: Regex.Match(String, Int32)\n  type: Method\n  assemblies:\n  - System.Text.RegularExpressions\n  - System\n  - netstandard\n  namespace: System.Text.RegularExpressions\n  summary: Searches the input string for the first occurrence of a regular expression, beginning at the specified starting position in the string.\n  remarks: \"The <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.Int32%29> method returns the first substring that matches a regular expression pattern, starting at or after the `startat` character position, in an input string. For information about the language elements used to build a regular expression pattern, see [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).  \\n  \\n The regular expression pattern for which the <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.Int32%29> method searches is defined by the call to one of the <xref:System.Text.RegularExpressions.Regex> class constructors. For more information about the elements that can form a regular expression pattern, see [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).  \\n  \\n You can optionally specify a starting position in the string by using the `startat` parameter. When the regular expression engine parses from left to right (the default), the match and the scan move rightward, starting at the character specified in `startat`. When the regular expression engine parses from right to left (when the regular expression pattern is constructed with the <xref:System.Text.RegularExpressions.RegexOptions?displayProperty=fullName> option), the match and scan move in the opposite direction and begin with the character at `startat` -1. If you do not specify a starting position, the search begins at the default `startat` position. If the regular expression searches from left to right, the default `startat` position is at the left end of `input`; if it searches from right to left, the default `startat` position is at the right end of `input`.  \\n  \\n If you want to restrict a match so that it begins at a particular character position in the string and the regular expression engine does not scan the remainder of the string for a match, anchor the regular expression with a `\\\\G` (at the left for a left-to-right pattern, or at the right for a right-to-left pattern). This restricts the match so it must start exactly at `startat`.  \\n  \\n You can determine whether the regular expression pattern has been found in the input string by checking the value of the returned <xref:System.Text.RegularExpressions.Match> object's <xref:System.Text.RegularExpressions.Group.Success%2A> property. If a match is found, the returned <xref:System.Text.RegularExpressions.Match> object's <xref:System.Text.RegularExpressions.Capture.Value%2A> property contains the substring from `input` that matches the regular expression pattern. If no match is found, its value is <xref:System.String.Empty?displayProperty=fullName>.  \\n  \\n This method returns the first substring found at or after the `startat` character position in `input` that matches the regular expression pattern. You can retrieve subsequent matches by repeatedly calling the returned <xref:System.Text.RegularExpressions.Match> object's <xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=fullName> method. You can also retrieve all matches in a single method call by calling the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.Int32%29?displayProperty=fullName> method.  \\n  \\n The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the matching operation exceeds the time-out interval specified by the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=fullName> constructor. If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exeeds any time-out value established for the application domain in which the <xref:System.Text.RegularExpressions.Regex> object is created. If no time-out is defined in the <xref:System.Text.RegularExpressions.Regex> constructor call or in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, no exception is thrown.\"\n  syntax:\n    content: public System.Text.RegularExpressions.Match Match (string input, int startat);\n    parameters:\n    - id: input\n      type: System.String\n      description: The string to search for a match.\n    - id: startat\n      type: System.Int32\n      description: The zero-based character position at which to start the search.\n    return:\n      type: System.Text.RegularExpressions.Match\n      description: An object that contains information about the match.\n  overload: System.Text.RegularExpressions.Regex.Match*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>input</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>startat</code> is less than zero or greater than the length of <code>input</code>.\n  - type: System.Text.RegularExpressions.RegexMatchTimeoutException\n    commentId: T:System.Text.RegularExpressions.RegexMatchTimeoutException\n    description: A time-out occurred. For more information about time-outs, see the Remarks section.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/Regex.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.RegularExpressions.Regex.Match(System.String)\n  commentId: M:System.Text.RegularExpressions.Regex.Match(System.String)\n  id: Match(System.String)\n  parent: System.Text.RegularExpressions.Regex\n  langs:\n  - csharp\n  name: Match(String)\n  nameWithType: Regex.Match(String)\n  fullName: Regex.Match(String)\n  type: Method\n  assemblies:\n  - System.Text.RegularExpressions\n  - System\n  - netstandard\n  namespace: System.Text.RegularExpressions\n  summary: Searches the specified input string for the first occurrence of the regular expression specified in the <xref href=\"System.Text.RegularExpressions.Regex\"></xref> constructor.\n  remarks: \"The <xref:System.Text.RegularExpressions.Regex.Match%28System.String%29> method returns the first substring that matches a regular expression pattern in an input string. For information about the language elements used to build a regular expression pattern, see [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).  \\n  \\n You can determine whether the regular expression pattern has been found in the input string by checking the value of the returned <xref:System.Text.RegularExpressions.Match> object's <xref:System.Text.RegularExpressions.Group.Success%2A> property. If a match is found, the returned <xref:System.Text.RegularExpressions.Match> object's <xref:System.Text.RegularExpressions.Capture.Value%2A> property contains the substring from `input` that matches the regular expression pattern. If no match is found, its value is <xref:System.String.Empty?displayProperty=fullName>.  \\n  \\n This method returns the first substring in `input` that matches the regular expression pattern. You can retrieve subsequent matches by repeatedly calling the returned <xref:System.Text.RegularExpressions.Match> object's <xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=fullName> method. You can also retrieve all matches in a single method call by calling the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%29?displayProperty=fullName> method.  \\n  \\n The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the matching operation exceeds the time-out interval specified by the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=fullName> constructor. If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <xref:System.Text.RegularExpressions.Regex> object is created. If no time-out is defined in the <xref:System.Text.RegularExpressions.Regex> constructor call or in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, no exception is thrown.\"\n  example:\n  - \"The following example finds regular expression pattern matches in a string, then lists the matched groups, captures, and capture positions.  \\n  \\n [!code-cpp[Regex Match, NextMatch, Groups, Captures#8](~/samples/snippets/cpp/VS_Snippets_CLR/regex match, nextmatch, groups, captures/cpp/snippet8.cpp#8)]\\n [!code-csharp[Regex Match, NextMatch, Groups, Captures#8](~/samples/snippets/csharp/VS_Snippets_CLR/regex match, nextmatch, groups, captures/cs/snippet8.cs#8)]\\n [!code-vb[Regex Match, NextMatch, Groups, Captures#8](~/samples/snippets/visualbasic/VS_Snippets_CLR/regex match, nextmatch, groups, captures/vb/snippet8.vb#8)]  \\n  \\n The regular expression pattern `(\\\\w+)\\\\s+(car)` matches occurrences of the word \\\"car\\\" along with the word that precedes it. It is interpreted as shown in the following table.  \\n  \\n|Pattern|Description|  \\n|-------------|-----------------|  \\n|`(\\\\w+)`|Match one or more word characters. This is the first capturing group.|  \\n|`\\\\s+`|Match one or more white-space characters.|  \\n|(car)|Match the literal string \\\"car\\\". This is the second capturing group.|\"\n  syntax:\n    content: public System.Text.RegularExpressions.Match Match (string input);\n    parameters:\n    - id: input\n      type: System.String\n      description: The string to search for a match.\n    return:\n      type: System.Text.RegularExpressions.Match\n      description: An object that contains information about the match.\n  overload: System.Text.RegularExpressions.Regex.Match*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>input</code> is `null`.\n  - type: System.Text.RegularExpressions.RegexMatchTimeoutException\n    commentId: T:System.Text.RegularExpressions.RegexMatchTimeoutException\n    description: A time-out occurred. For more information about time-outs, see the Remarks section.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/Regex.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.RegularExpressions.Regex.Match(System.String,System.String)\n  commentId: M:System.Text.RegularExpressions.Regex.Match(System.String,System.String)\n  id: Match(System.String,System.String)\n  parent: System.Text.RegularExpressions.Regex\n  langs:\n  - csharp\n  name: Match(String, String)\n  nameWithType: Regex.Match(String, String)\n  fullName: Regex.Match(String, String)\n  type: Method\n  assemblies:\n  - System.Text.RegularExpressions\n  - System\n  - netstandard\n  namespace: System.Text.RegularExpressions\n  summary: Searches the specified input string for the first occurrence of the specified regular expression.\n  remarks: \"The <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%29> method returns the first substring that matches a regular expression pattern in an input string. For information about the language elements used to build a regular expression pattern, see [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).  \\n  \\n The static <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%29> method is equivalent to constructing a <xref:System.Text.RegularExpressions.Regex> object with the specified regular expression pattern and calling the instance <xref:System.Text.RegularExpressions.Regex.Match%28System.String%29> method. In this case, the regular expression engine caches the regular expression pattern.  \\n  \\n The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match. For more information about regular expressions, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).  \\n  \\n You can determine whether the regular expression pattern has been found in the input string by checking the value of the returned <xref:System.Text.RegularExpressions.Match> object's <xref:System.Text.RegularExpressions.Group.Success%2A> property. If a match is found, the returned <xref:System.Text.RegularExpressions.Match> object's <xref:System.Text.RegularExpressions.Capture.Value%2A> property contains the substring from `input` that matches the regular expression pattern. If no match is found, its value is <xref:System.String.Empty?displayProperty=fullName>.  \\n  \\n This method returns the first substring in `input` that matches the regular expression pattern. You can retrieve subsequent matches by repeatedly calling the returned <xref:System.Text.RegularExpressions.Match> object's <xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=fullName> method. You can also retrieve all matches in a single method call by calling the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%29?displayProperty=fullName> method.  \\n  \\n The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the matching operation exceeds the time-out interval specified for the application domain in which the method is called. If no time-out is defined in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, no exception is thrown.\"\n  example:\n  - \"The following example calls the <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%29> method to find the first word that contains at least one `z` character, and then calls the <xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=fullName> method to find any additional matches.  \\n  \\n [!code-csharp[System.Text.RegularExpressions.Regex.Match#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.match/cs/match1.cs#1)]\\n [!code-vb[System.Text.RegularExpressions.Regex.Match#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.match/vb/match1.vb#1)]  \\n  \\n The regular expression pattern `\\\\b\\\\w*z+\\\\w*\\\\b` is interpreted as shown in the following table.  \\n  \\n|Pattern|Description|  \\n|-------------|-----------------|  \\n|`\\\\b`|Begin the match at a word boundary.|  \\n|`\\\\w*`|Match zero, one, or more word characters.|  \\n|`z+`|Match one or more occurrences of the `z` character.|  \\n|`\\\\w*`|Match zero, one, or more word characters.|  \\n|`\\\\b`|End the match at a word boundary.|\"\n  syntax:\n    content: public static System.Text.RegularExpressions.Match Match (string input, string pattern);\n    parameters:\n    - id: input\n      type: System.String\n      description: The string to search for a match.\n    - id: pattern\n      type: System.String\n      description: The regular expression pattern to match.\n    return:\n      type: System.Text.RegularExpressions.Match\n      description: An object that contains information about the match.\n  overload: System.Text.RegularExpressions.Regex.Match*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: A regular expression parsing error occurred.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>input</code> or <code>pattern</code> is `null`.\n  - type: System.Text.RegularExpressions.RegexMatchTimeoutException\n    commentId: T:System.Text.RegularExpressions.RegexMatchTimeoutException\n    description: A time-out occurred. For more information about time-outs, see the Remarks section.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/Regex.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.RegularExpressions.Regex.Matches(System.String)\n  commentId: M:System.Text.RegularExpressions.Regex.Matches(System.String)\n  id: Matches(System.String)\n  parent: System.Text.RegularExpressions.Regex\n  langs:\n  - csharp\n  name: Matches(String)\n  nameWithType: Regex.Matches(String)\n  fullName: Regex.Matches(String)\n  type: Method\n  assemblies:\n  - System.Text.RegularExpressions\n  - System\n  - netstandard\n  namespace: System.Text.RegularExpressions\n  summary: Searches the specified input string for all occurrences of a regular expression.\n  remarks: \"The <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%29> method is similar to the <xref:System.Text.RegularExpressions.Regex.Match%28System.String%29> method, except that it returns information about all the matches found in the input string, instead of a single match. It is equivalent to the following code:  \\n  \\n [!code-csharp[System.Text.RegularExpressions.Regex.Matches#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/cs/matchespattern.cs#5)]\\n [!code-vb[System.Text.RegularExpressions.Regex.Matches#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/vb/matchespattern.vb#5)]  \\n  \\n The collection includes only matches and terminates at the first non-match.  \\n  \\n The regular expression pattern for which the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%29> method searches is defined by the call to one of the <xref:System.Text.RegularExpressions.Regex> class constructors. For more information about the elements that can form a regular expression pattern, see [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).  \\n  \\n The <xref:System.Text.RegularExpressions.Regex.Matches%2A> method uses lazy evaluation to populate the returned <xref:System.Text.RegularExpressions.MatchCollection> object. Accessing members of this collection such as <xref:System.Text.RegularExpressions.MatchCollection.Count%2A?displayProperty=fullName> and <xref:System.Text.RegularExpressions.MatchCollection.CopyTo%2A?displayProperty=fullName> causes the collection to be populated immediately. To take advantage of lazy evaluation, you should iterate the collection by using a construct such as `foreach` in C# and `For Each`…`Next` in Visual Basic.  \\n  \\n Because of its lazy evaluation, calling the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%29> method does not throw a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception. However, the exception is thrown when an operation is performed on the <xref:System.Text.RegularExpressions.MatchCollection> object returned by this method, if the <xref:System.Text.RegularExpressions.Regex.MatchTimeout%2A> property is not <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName> and a matching operation exceeds the time-out interval.\"\n  example:\n  - \"The following example uses the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%29> method to identify any words in a sentence that end in \\\"es\\\".  \\n  \\n [!code-csharp[System.Text.RegularExpressions.Regex.Matches#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/cs/matches1.cs#1)]\\n [!code-vb[System.Text.RegularExpressions.Regex.Matches#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/vb/matches1.vb#1)]  \\n  \\n The regular expression pattern `\\\\b\\\\w+es\\\\b` is defined as shown in the following table.  \\n  \\n|Pattern|Description|  \\n|-------------|-----------------|  \\n|`\\\\b`|Begin the match at a word boundary.|  \\n|`\\\\w+`|Match one or more word characters.|  \\n|`es`|Match the literal string \\\"es\\\".|  \\n|`\\\\b`|End the match at a word boundary.|\"\n  syntax:\n    content: public System.Text.RegularExpressions.MatchCollection Matches (string input);\n    parameters:\n    - id: input\n      type: System.String\n      description: The string to search for a match.\n    return:\n      type: System.Text.RegularExpressions.MatchCollection\n      description: A collection of the <xref href=\"System.Text.RegularExpressions.Match\"></xref> objects found by the search. If no matches are found, the method returns an empty collection object.\n  overload: System.Text.RegularExpressions.Regex.Matches*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>input</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/Regex.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.RegularExpressions.Regex.Matches(System.String,System.Int32)\n  commentId: M:System.Text.RegularExpressions.Regex.Matches(System.String,System.Int32)\n  id: Matches(System.String,System.Int32)\n  parent: System.Text.RegularExpressions.Regex\n  langs:\n  - csharp\n  name: Matches(String, Int32)\n  nameWithType: Regex.Matches(String, Int32)\n  fullName: Regex.Matches(String, Int32)\n  type: Method\n  assemblies:\n  - System.Text.RegularExpressions\n  - System\n  - netstandard\n  namespace: System.Text.RegularExpressions\n  summary: Searches the specified input string for all occurrences of a regular expression, beginning at the specified starting position in the string.\n  remarks: \"The  <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.Int32%29> method is similar to the  <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.Int32%29> method, except that it returns information about all the matches found in the input string, instead of a single match. It is equivalent to the following code:  \\n  \\n [!code-csharp[System.Text.RegularExpressions.Regex.Matches#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/cs/matchespattern.cs#6)]\\n [!code-vb[System.Text.RegularExpressions.Regex.Matches#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/vb/matchespattern.vb#6)]  \\n  \\n The regular expression pattern for which the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.Int32%29> method searches is defined by the call to one of the <xref:System.Text.RegularExpressions.Regex> class constructors. For more information about the elements that can form a regular expression pattern, see [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).  \\n  \\n The <xref:System.Text.RegularExpressions.Regex.Matches%2A> method uses lazy evaluation to populate the returned <xref:System.Text.RegularExpressions.MatchCollection> object. Accessing members of this collection such as <xref:System.Text.RegularExpressions.MatchCollection.Count%2A?displayProperty=fullName> and <xref:System.Text.RegularExpressions.MatchCollection.CopyTo%2A?displayProperty=fullName> causes the collection to be populated immediately. To take advantage of lazy evaluation, you should iterate the collection by using a construct such as `foreach` in C# and `For Each`…`Next` in Visual Basic.  \\n  \\n Because of its lazy evaluation, calling the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.Int32%29> method does not throw a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception. However, the exception is thrown when an operation is performed on the <xref:System.Text.RegularExpressions.MatchCollection> object returned by this method, if the <xref:System.Text.RegularExpressions.Regex.MatchTimeout%2A> property is not <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName> and a matching operation exceeds the time-out interval..\"\n  example:\n  - \"The following example uses the <xref:System.Text.RegularExpressions.Regex.Match%28System.String%29> method to find the first word in a sentence that ends in \\\"es\\\", and then calls the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.Int32%29> method to identify any additional words that end in \\\"es\\\".  \\n  \\n [!code-csharp[System.Text.RegularExpressions.Regex.Matches#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/cs/matches3.cs#3)]\\n [!code-vb[System.Text.RegularExpressions.Regex.Matches#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/vb/matches3.vb#3)]  \\n  \\n The regular expression pattern `\\\\b\\\\w+es\\\\b` is defined as shown in the following table.  \\n  \\n|Pattern|Description|  \\n|-------------|-----------------|  \\n|`\\\\b`|Begin the match at a word boundary.|  \\n|`\\\\w+`|Match one or more word characters.|  \\n|`es`|Match the literal string \\\"es\\\".|  \\n|`\\\\b`|End the match at a word boundary.|\"\n  syntax:\n    content: public System.Text.RegularExpressions.MatchCollection Matches (string input, int startat);\n    parameters:\n    - id: input\n      type: System.String\n      description: The string to search for a match.\n    - id: startat\n      type: System.Int32\n      description: The character position in the input string at which to start the search.\n    return:\n      type: System.Text.RegularExpressions.MatchCollection\n      description: A collection of the <xref href=\"System.Text.RegularExpressions.Match\"></xref> objects found by the search. If no matches are found, the method returns an empty collection object.\n  overload: System.Text.RegularExpressions.Regex.Matches*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>input</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>startat</code> is less than zero or greater than the length of <code>input</code>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/Regex.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.RegularExpressions.Regex.Matches(System.String,System.String)\n  commentId: M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String)\n  id: Matches(System.String,System.String)\n  parent: System.Text.RegularExpressions.Regex\n  langs:\n  - csharp\n  name: Matches(String, String)\n  nameWithType: Regex.Matches(String, String)\n  fullName: Regex.Matches(String, String)\n  type: Method\n  assemblies:\n  - System.Text.RegularExpressions\n  - System\n  - netstandard\n  namespace: System.Text.RegularExpressions\n  summary: Searches the specified input string for all occurrences of a specified regular expression.\n  remarks: \"The <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%29> method is similar to the <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%29> method, except that it returns information about all the matches found in the input string, instead of a single match. It is equivalent to the following code:  \\n  \\n [!code-csharp[System.Text.RegularExpressions.Regex.Matches#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/cs/matchespattern.cs#7)]\\n [!code-vb[System.Text.RegularExpressions.Regex.Matches#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/vb/matchespattern.vb#7)]  \\n  \\n The static `Matches` methods are equivalent to constructing a <xref:System.Text.RegularExpressions.Regex> object with the specified regular expression pattern and calling the instance method `Matches`.  \\n  \\n The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match. For more information about regular expressions, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).  \\n  \\n The <xref:System.Text.RegularExpressions.Regex.Matches%2A> method uses lazy evaluation to populate the returned <xref:System.Text.RegularExpressions.MatchCollection> object. Accessing members of this collection such as <xref:System.Text.RegularExpressions.MatchCollection.Count%2A?displayProperty=fullName> and <xref:System.Text.RegularExpressions.MatchCollection.CopyTo%2A?displayProperty=fullName> causes the collection to be populated immediately. To take advantage of lazy evaluation, you should iterate the collection by using a construct such as `foreach` in C# and `For Each`…`Next` in Visual Basic.  \\n  \\n Because of its lazy evaluation, calling the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%29> method does not throw a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception. However, the exception is thrown when an operation is performed on the <xref:System.Text.RegularExpressions.MatchCollection> object returned by this method, if a time-out interval is defined by the \\\"REGEX_DEFAULT_MATCH_TIMEOUT\\\" property of the current application domain and a matching operation exceeds this time-out interval.\"\n  example:\n  - \"The following example uses the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%29> method to identify any word in a sentence that ends in \\\"es\\\".  \\n  \\n [!code-csharp[System.Text.RegularExpressions.Regex.Matches#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/cs/matches2.cs#2)]\\n [!code-vb[System.Text.RegularExpressions.Regex.Matches#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/vb/matches2.vb#2)]  \\n  \\n The regular expression pattern `\\\\b\\\\w+es\\\\b` is defined as shown in the following table.  \\n  \\n|Pattern|Description|  \\n|-------------|-----------------|  \\n|`\\\\b`|Begin the match at a word boundary.|  \\n|`\\\\w+`|Match one or more word characters.|  \\n|`es`|Match the literal string \\\"es\\\".|  \\n|`\\\\b`|End the match at a word boundary.|\"\n  syntax:\n    content: public static System.Text.RegularExpressions.MatchCollection Matches (string input, string pattern);\n    parameters:\n    - id: input\n      type: System.String\n      description: The string to search for a match.\n    - id: pattern\n      type: System.String\n      description: The regular expression pattern to match.\n    return:\n      type: System.Text.RegularExpressions.MatchCollection\n      description: A collection of the <xref href=\"System.Text.RegularExpressions.Match\"></xref> objects found by the search. If no matches are found, the method returns an empty collection object.\n  overload: System.Text.RegularExpressions.Regex.Matches*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: A regular expression parsing error occurred.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>input</code> or <code>pattern</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/Regex.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.RegularExpressions.Regex.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions)\n  commentId: M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions)\n  id: Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions)\n  parent: System.Text.RegularExpressions.Regex\n  langs:\n  - csharp\n  name: Matches(String, String, RegexOptions)\n  nameWithType: Regex.Matches(String, String, RegexOptions)\n  fullName: Regex.Matches(String, String, RegexOptions)\n  type: Method\n  assemblies:\n  - System.Text.RegularExpressions\n  - System\n  - netstandard\n  namespace: System.Text.RegularExpressions\n  summary: Searches the specified input string for all occurrences of a specified regular expression, using the specified matching options.\n  remarks: \"The <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29> method is similar to the <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29> method, except that it returns information about all the matches found in the input string, instead of a single match. It is equivalent to the following code:  \\n  \\n [!code-csharp[System.Text.RegularExpressions.Regex.Matches#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/cs/matchespattern.cs#8)]\\n [!code-vb[System.Text.RegularExpressions.Regex.Matches#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/vb/matchespattern.vb#8)]  \\n  \\n The static `Matches` methods are equivalent to constructing a <xref:System.Text.RegularExpressions.Regex> object with the specified regular expression pattern and calling the instance method `Matches`.  \\n  \\n The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match. For more information about regular expressions, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).  \\n  \\n The <xref:System.Text.RegularExpressions.Regex.Matches%2A> method uses lazy evaluation to populate the returned <xref:System.Text.RegularExpressions.MatchCollection> object. Accessing members of this collection such as <xref:System.Text.RegularExpressions.MatchCollection.Count%2A?displayProperty=fullName> and <xref:System.Text.RegularExpressions.MatchCollection.CopyTo%2A?displayProperty=fullName> causes the collection to be populated immediately. To take advantage of lazy evaluation, you should iterate the collection by using a construct such as `foreach` in C# and `For Each`…`Next` in Visual Basic.  \\n  \\n Because of its lazy evaluation, calling the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%29> method does not throw a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception. However, the exception is thrown when an operation is performed on the <xref:System.Text.RegularExpressions.MatchCollection> object returned by this method, if a time-out interval is defined by the \\\"REGEX_DEFAULT_MATCH_TIMEOUT\\\" property of the current application domain and a matching operation exceeds this time-out interval.\"\n  example:\n  - \"The following example calls the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%29> method to identify any word in a sentence that ends in \\\"es\\\", and then calls the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29> method to perform a case-insensitive comparison of the pattern with the input string. As the output shows, the two methods return different results.  \\n  \\n [!code-csharp[System.Text.RegularExpressions.Regex.Matches#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/cs/matches4.cs#4)]\\n [!code-vb[System.Text.RegularExpressions.Regex.Matches#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/vb/matches4.vb#4)]  \\n  \\n The regular expression pattern `\\\\b\\\\w+es\\\\b` is defined as shown in the following table.  \\n  \\n|Pattern|Description|  \\n|-------------|-----------------|  \\n|`\\\\b`|Begin the match at a word boundary.|  \\n|`\\\\w+`|Match one or more word characters.|  \\n|`es`|Match the literal string \\\"es\\\".|  \\n|`\\\\b`|End the match at a word boundary.|\"\n  syntax:\n    content: public static System.Text.RegularExpressions.MatchCollection Matches (string input, string pattern, System.Text.RegularExpressions.RegexOptions options);\n    parameters:\n    - id: input\n      type: System.String\n      description: The string to search for a match.\n    - id: pattern\n      type: System.String\n      description: The regular expression pattern to match.\n    - id: options\n      type: System.Text.RegularExpressions.RegexOptions\n      description: A bitwise combination of the enumeration values that specify options for matching.\n    return:\n      type: System.Text.RegularExpressions.MatchCollection\n      description: A collection of the <xref href=\"System.Text.RegularExpressions.Match\"></xref> objects found by the search. If no matches are found, the method returns an empty collection object.\n  overload: System.Text.RegularExpressions.Regex.Matches*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: A regular expression parsing error occurred.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>input</code> or <code>pattern</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>options</code> is not a valid bitwise combination of <xref href=\"System.Text.RegularExpressions.RegexOptions\"></xref> values.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/Regex.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.RegularExpressions.Regex.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)\n  commentId: M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)\n  id: Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)\n  parent: System.Text.RegularExpressions.Regex\n  langs:\n  - csharp\n  name: Matches(String, String, RegexOptions, TimeSpan)\n  nameWithType: Regex.Matches(String, String, RegexOptions, TimeSpan)\n  fullName: Regex.Matches(String, String, RegexOptions, TimeSpan)\n  type: Method\n  assemblies:\n  - System.Text.RegularExpressions\n  - System\n  - netstandard\n  namespace: System.Text.RegularExpressions\n  summary: Searches the specified input string for all occurrences of a specified regular expression, using the specified matching options and time-out interval.\n  remarks: \"The <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29> method is similar to the <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29> method, except that it returns information about all the matches found in the input string, instead of a single match. It is equivalent to the following code:  \\n  \\n [!code-csharp[System.Text.RegularExpressions.Regex.Matches#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/cs/matchespattern.cs#10)]\\n [!code-vb[System.Text.RegularExpressions.Regex.Matches#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/vb/matchespattern.vb#10)]  \\n  \\n The static `Matches` methods are equivalent to constructing a <xref:System.Text.RegularExpressions.Regex> object with the specified regular expression pattern and calling the instance method `Matches`.  \\n  \\n The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match. For more information about regular expressions, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).  \\n  \\n The <xref:System.Text.RegularExpressions.Regex.Matches%2A> method uses lazy evaluation to populate the returned <xref:System.Text.RegularExpressions.MatchCollection> object. Accessing members of this collection such as <xref:System.Text.RegularExpressions.MatchCollection.Count%2A?displayProperty=fullName> and <xref:System.Text.RegularExpressions.MatchCollection.CopyTo%2A?displayProperty=fullName> causes the collection to be populated immediately. To take advantage of lazy evaluation, you should iterate the collection by using a construct such as `foreach` in C# and `For Each`…`Next` in Visual Basic.  \\n  \\n Because of its lazy evaluation, calling the <xref:System.Text.RegularExpressions.Regex.Matches%2A> method does not throw a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception. However, an exception is thrown when an operation is performed on the <xref:System.Text.RegularExpressions.MatchCollection> object returned by this method, if a matching operation exceeds this time-out interval specified by the`matchTimeout` parameter.\"\n  example:\n  - \"The following example calls the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29> method to perform a case-sensitive comparison that matches any word in a sentence that ends in \\\"es\\\". It then calls the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29> method to perform a case-insensitive comparison of the pattern with the input string. In both cases, the time-out interval is set to one second. As the output shows, the two methods return different results.  \\n  \\n [!code-csharp[System.Text.RegularExpressions.Regex.Matches#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/cs/matches5.cs#11)]\\n [!code-vb[System.Text.RegularExpressions.Regex.Matches#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/vb/matches5.vb#11)]  \\n  \\n The regular expression pattern `\\\\b\\\\w+es\\\\b` is defined as shown in the following table.  \\n  \\n|Pattern|Description|  \\n|-------------|-----------------|  \\n|`\\\\b`|Begin the match at a word boundary.|  \\n|`\\\\w+`|Match one or more word characters.|  \\n|`es`|Match the literal string \\\"es\\\".|  \\n|`\\\\b`|End the match at a word boundary.|\"\n  syntax:\n    content: public static System.Text.RegularExpressions.MatchCollection Matches (string input, string pattern, System.Text.RegularExpressions.RegexOptions options, TimeSpan matchTimeout);\n    parameters:\n    - id: input\n      type: System.String\n      description: The string to search for a match.\n    - id: pattern\n      type: System.String\n      description: The regular expression pattern to match.\n    - id: options\n      type: System.Text.RegularExpressions.RegexOptions\n      description: A bitwise combination of the enumeration values that specify options for matching.\n    - id: matchTimeout\n      type: System.TimeSpan\n      description: A time-out interval, or <xref href=\"System.Text.RegularExpressions.Regex.InfiniteMatchTimeout\"></xref> to indicate that the method should not time out.\n    return:\n      type: System.Text.RegularExpressions.MatchCollection\n      description: A collection of the <xref href=\"System.Text.RegularExpressions.Match\"></xref> objects found by the search. If no matches are found, the method returns an empty collection object.\n  overload: System.Text.RegularExpressions.Regex.Matches*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: A regular expression parsing error occurred.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>input</code> or <code>pattern</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>options</code> is not a valid bitwise combination of <xref href=\\\"System.Text.RegularExpressions.RegexOptions\\\"></xref> values.  \\n  \\n -or-  \\n  \\n <code>matchTimeout</code> is negative, zero, or greater than approximately 24 days.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/Regex.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.RegularExpressions.Regex.MatchTimeout\n  commentId: P:System.Text.RegularExpressions.Regex.MatchTimeout\n  id: MatchTimeout\n  parent: System.Text.RegularExpressions.Regex\n  langs:\n  - csharp\n  name: MatchTimeout\n  nameWithType: Regex.MatchTimeout\n  fullName: Regex.MatchTimeout\n  type: Property\n  assemblies:\n  - System.Text.RegularExpressions\n  - System\n  - netstandard\n  namespace: System.Text.RegularExpressions\n  summary: Gets the time-out interval of the current instance.\n  remarks: \"The <xref:System.Text.RegularExpressions.Regex.MatchTimeout%2A> property defines the approximate maximum time interval for a <xref:System.Text.RegularExpressions.Regex> instance to execute a single matching operation before the operation times out. The regular expression engine throws a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception during its next timing check after the time-out interval has elapsed. This prevents the regular expression engine from processing input strings that require excessive backtracking. For more information, see [Backtracking](~/docs/standard/base-types/backtracking-in-regular-expressions.md) and [Best Practices for Regular Expressions](~/docs/standard/base-types/best-practices.md).  \\n  \\n This property is read-only. You can set its value explicitly for an individual <xref:System.Text.RegularExpressions.Regex> object by calling the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=fullName> constructor; and you can set its value for all <xref:System.Text.RegularExpressions.Regex> matching operations in an application domain by calling the <xref:System.AppDomain.SetData%2A?displayProperty=fullName> method and providing a <xref:System.TimeSpan> value for the \\\"REGEX_DEFAULT_MATCH_TIMEOUT\\\" property, as the following example illustrates.  \\n  \\n [!code-csharp[System.Text.RegularExpressions.Regex.MatchTimeout#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matchtimeout/cs/regexmatchtimeout1.cs#1)]\\n [!code-vb[System.Text.RegularExpressions.Regex.MatchTimeout#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matchtimeout/vb/regexmatchtimeout1.vb#1)]  \\n  \\n If you do not explicitly set a time-out interval, the default value <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName> is used, and matching operations do not time out.\"\n  syntax:\n    content: public TimeSpan MatchTimeout { get; }\n    return:\n      type: System.TimeSpan\n      description: The maximum time interval that can elapse in a pattern-matching operation before a <xref href=\"System.Text.RegularExpressions.RegexMatchTimeoutException\"></xref> is thrown, or <xref href=\"System.Text.RegularExpressions.Regex.InfiniteMatchTimeout\"></xref> if time-outs are disabled.\n  overload: System.Text.RegularExpressions.Regex.MatchTimeout*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/Regex.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.RegularExpressions.Regex.Options\n  commentId: P:System.Text.RegularExpressions.Regex.Options\n  id: Options\n  parent: System.Text.RegularExpressions.Regex\n  langs:\n  - csharp\n  name: Options\n  nameWithType: Regex.Options\n  fullName: Regex.Options\n  type: Property\n  assemblies:\n  - System.Text.RegularExpressions\n  - System\n  - netstandard\n  namespace: System.Text.RegularExpressions\n  summary: Gets the options that were passed into the <xref href=\"System.Text.RegularExpressions.Regex\"></xref> constructor.\n  remarks: \"The value of the <xref:System.Text.RegularExpressions.Regex.Options%2A> property consists of one or more members of the <xref:System.Text.RegularExpressions.RegexOptions> enumeration. If no options were defined in the <xref:System.Text.RegularExpressions.Regex> class constructor, its value is <xref:System.Text.RegularExpressions.RegexOptions?displayProperty=fullName>. The available options are discussed in detail in the [Regular Expression Options](~/docs/standard/base-types/regular-expression-options.md) topic.  \\n  \\n Note that the <xref:System.Text.RegularExpressions.Regex.Options%2A> property does not reflect inline options defined in the regular expression pattern itself.\"\n  syntax:\n    content: public System.Text.RegularExpressions.RegexOptions Options { get; }\n    return:\n      type: System.Text.RegularExpressions.RegexOptions\n      description: One or more members of the <xref href=\"System.Text.RegularExpressions.RegexOptions\"></xref> enumeration that represent options that were passed to the <xref href=\"System.Text.RegularExpressions.Regex\"></xref> constructor\n  overload: System.Text.RegularExpressions.Regex.Options*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/Regex.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.RegularExpressions.Regex.pattern\n  commentId: F:System.Text.RegularExpressions.Regex.pattern\n  id: pattern\n  parent: System.Text.RegularExpressions.Regex\n  langs:\n  - csharp\n  name: pattern\n  nameWithType: Regex.pattern\n  fullName: Regex.pattern\n  type: Field\n  assemblies:\n  - System.Text.RegularExpressions\n  - System\n  - netstandard\n  namespace: System.Text.RegularExpressions\n  summary: Used by a <xref href=\"System.Text.RegularExpressions.Regex\"></xref> object generated by the <xref href=\"System.Text.RegularExpressions.Regex.CompileToAssembly*\"></xref> method.\n  syntax:\n    content: protected string pattern;\n    return:\n      type: System.String\n      description: ''\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/Regex.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)\n  commentId: M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)\n  id: Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)\n  parent: System.Text.RegularExpressions.Regex\n  langs:\n  - csharp\n  name: Replace(String, String, MatchEvaluator, RegexOptions, TimeSpan)\n  nameWithType: Regex.Replace(String, String, MatchEvaluator, RegexOptions, TimeSpan)\n  fullName: Regex.Replace(String, String, MatchEvaluator, RegexOptions, TimeSpan)\n  type: Method\n  assemblies:\n  - System.Text.RegularExpressions\n  - System\n  - netstandard\n  namespace: System.Text.RegularExpressions\n  summary: In a specified input string, replaces all substrings that match a specified regular expression with a string returned by a <xref href=\"System.Text.RegularExpressions.MatchEvaluator\"></xref> delegate. Additional parameters specify options that modify the matching operation and a time-out interval if no match is found.\n  remarks: \"The <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.MatchEvaluator%2CSystem.Text.RegularExpressions.RegexOptions%29?displayProperty=fullName> method is useful for replacing a regular expression match if any of the following conditions is true:  \\n  \\n-   If the replacement string cannot readily be specified by a regular expression replacement pattern.  \\n  \\n-   If the replacement string results from some processing performed on the matched string.  \\n  \\n-   If the replacement string results from conditional processing.  \\n  \\n The method is equivalent to calling the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29?displayProperty=fullName> method and passing each <xref:System.Text.RegularExpressions.Match> object in the returned <xref:System.Text.RegularExpressions.MatchCollection> collection to the `evaluator` delegate.  \\n  \\n The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match. For more information about regular expressions, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).  \\n  \\n The `evaluator` parameter is the delegate for a custom method that you define and that examines each match. The custom method must have the following signature to match the <xref:System.Text.RegularExpressions.MatchEvaluator> delegate.  \\n  \\n [!code-csharp[System.Text.RegularExpressions.Regex.Replace#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/syntax1.cs#1)]\\n [!code-vb[System.Text.RegularExpressions.Regex.Replace#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/syntax1.vb#1)]  \\n  \\n Your custom method returns a string that replaces the matched input.  \\n  \\n If you specify <xref:System.Text.RegularExpressions.RegexOptions.RightToLeft> for the `options` parameter, the search for matches begins at the end of the input string and moves left; otherwise, the search begins at the start of the input string and moves right.  \\n  \\n The `matchTimeout` parameter specifies how long a pattern matching method should try to find a match before it times out. Setting a time-out interval prevents regular expressions that rely on excessive backtracking from appearing to \\\"stop responding when they process input that contains near matches. For more information, see [Best Practices for Regular Expressions](~/docs/standard/base-types/best-practices.md) and [Backtracking](~/docs/standard/base-types/backtracking-in-regular-expressions.md). If no match is found in that time interval, the method throws a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception. `matchTimeout` overrides any default time-out value defined for the application domain in which the method executes.  \\n  \\n Because the method returns `input` unchanged if there is no match, you can use the <xref:System.Object.ReferenceEquals%2A?displayProperty=fullName> method to determine whether the method has made any replacements to the input string.\"\n  example:\n  - \"The following example uses a regular expression to extract the individual words from a string, and then uses a <xref:System.Text.RegularExpressions.MatchEvaluator> delegate to call a method named `WordScramble` that scrambles the individual letters in the word. To do this, the `WordScramble` method creates an array that contains the characters in the match. It also creates a parallel array that it populates with random floating-point numbers. The arrays are sorted by calling the <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29?displayProperty=fullName> method, and the sorted array is provided as an argument to a <xref:System.String> class constructor. This newly created string is then returned by the `WordScramble` method. The regular expression pattern `\\\\w+` matches one or more word characters; the regular expression engine will continue to add characters to the match until it encounters a non-word character, such as a white-space character. The call to the <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.MatchEvaluator%2CSystem.Text.RegularExpressions.RegexOptions%29> method includes the <xref:System.Text.RegularExpressions.RegexOptions?displayProperty=fullName> option so that the comment in the regular expression pattern `\\\\w+  # Matches all the characters in a word.` is ignored by the regular expression engine.  \\n  \\n [!code-csharp[System.Text.RegularExpressions.Regex.Replace#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/replace13.cs#13)]\\n [!code-vb[System.Text.RegularExpressions.Regex.Replace#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/replace13.vb#13)]\"\n  syntax:\n    content: public static string Replace (string input, string pattern, System.Text.RegularExpressions.MatchEvaluator evaluator, System.Text.RegularExpressions.RegexOptions options, TimeSpan matchTimeout);\n    parameters:\n    - id: input\n      type: System.String\n      description: The string to search for a match.\n    - id: pattern\n      type: System.String\n      description: The regular expression pattern to match.\n    - id: evaluator\n      type: System.Text.RegularExpressions.MatchEvaluator\n      description: A custom method that examines each match and returns either the original matched string or a replacement string.\n    - id: options\n      type: System.Text.RegularExpressions.RegexOptions\n      description: A bitwise combination of enumeration values that provide options for matching.\n    - id: matchTimeout\n      type: System.TimeSpan\n      description: A time-out interval, or <xref href=\"System.Text.RegularExpressions.Regex.InfiniteMatchTimeout\"></xref> to indicate that the method should not time out.\n    return:\n      type: System.String\n      description: A new string that is identical to the input string, except that the replacement string takes the place of each matched string. If <code>pattern</code> is not matched in the current instance, the method returns the current instance unchanged.\n  overload: System.Text.RegularExpressions.Regex.Replace*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: A regular expression parsing error occurred.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>input</code>, <code>pattern</code>, or <code>evaluator</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>options</code> is not a valid bitwise combination of <xref href=\\\"System.Text.RegularExpressions.RegexOptions\\\"></xref> values.  \\n  \\n -or-  \\n  \\n <code>matchTimeout</code> is negative, zero, or greater than approximately 24 days.\"\n  - type: System.Text.RegularExpressions.RegexMatchTimeoutException\n    commentId: T:System.Text.RegularExpressions.RegexMatchTimeoutException\n    description: A time-out occurred. For more information about time-outs, see the Remarks section.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/Regex.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)\n  commentId: M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)\n  id: Replace(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)\n  parent: System.Text.RegularExpressions.Regex\n  langs:\n  - csharp\n  name: Replace(String, String, String, RegexOptions, TimeSpan)\n  nameWithType: Regex.Replace(String, String, String, RegexOptions, TimeSpan)\n  fullName: Regex.Replace(String, String, String, RegexOptions, TimeSpan)\n  type: Method\n  assemblies:\n  - System.Text.RegularExpressions\n  - System\n  - netstandard\n  namespace: System.Text.RegularExpressions\n  summary: In a specified input string, replaces all strings that match a specified regular expression with a specified replacement string. Additional parameters specify options that modify the matching operation and a time-out interval if no match is found.\n  remarks: \"The static `Replace` methods are equivalent to constructing a <xref:System.Text.RegularExpressions.Regex> object with the specified regular expression pattern and calling the instance method `Replace`.  \\n  \\n The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match. For more information about regular expressions, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md). If you specify <xref:System.Text.RegularExpressions.RegexOptions.RightToLeft> for the `options` parameter, the search for matches begins at the end of the input string and moves left; otherwise, the search begins at the start of the input string and moves right.  \\n  \\n The `replacement` parameter specifies the string that is to replace each match in `input`. `replacement` can consist of any combination of literal text and [substitutions](~/docs/standard/base-types/substitutions-in-regular-expressions.md). For example, the replacement pattern `a*${test}b` inserts the string \\\"a*\\\" followed by the substring that is matched by the `test` capturing group, if any, followed by the string \\\"b\\\". The * character is not recognized as a metacharacter within a replacement pattern.  \\n  \\n> [!NOTE]\\n>  Substitutions are the only regular expression language elements that are recognized in a replacement pattern. All other regular expression language elements, including [character escapes](~/docs/standard/base-types/character-escapes-in-regular-expressions.md), are allowed in regular expression patterns only and are not recognized in replacement patterns.  \\n  \\n The `matchTimeout` parameter specifies how long a pattern matching method should try to find a match before it times out. Setting a time-out interval prevents regular expressions that rely on excessive backtracking from appearing to stop responding when they process input that contains near matches. For more information, see [Best Practices for Regular Expressions](~/docs/standard/base-types/best-practices.md) and [Backtracking](~/docs/standard/base-types/backtracking-in-regular-expressions.md). If no match is found in that time interval, the method throws a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception. `matchTimeout` overrides any default time-out value defined for the application domain in which the method executes.  \\n  \\n Because the method returns `input` unchanged if there is no match, you can use the <xref:System.Object.ReferenceEquals%2A?displayProperty=fullName> method to determine whether the method has made any replacements to the input string.\"\n  example:\n  - \"The following example uses the <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29> method to replace the local machine and drive names in a UNC path with a local file path. The regular expression uses the <xref:System.Environment.MachineName%2A?displayProperty=fullName> property to include the name of the local computer and the <xref:System.Environment.GetLogicalDrives%2A?displayProperty=fullName> method to include the names of the logical drives. All regular expression string comparisons are case-insensitive, and any single replacement operation times out if a match cannot be found in 0.5 second. To run the example successfully, you should replace the literal string \\\"MyMachine\\\" with your local machine name.  \\n  \\n [!code-csharp[System.Text.RegularExpressions.Regex.Replace#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/replace12.cs#12)]\\n [!code-vb[System.Text.RegularExpressions.Regex.Replace#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/replace12.vb#12)]  \\n  \\n The regular expression pattern is defined by the following expression:  \\n  \\n `\\\"\\\\\\\\\\\\\\\\\\\" + Environment.MachineName + \\\"(?:\\\\.\\\\w+)*\\\\\\\\([\\\" + driveNames + \\\"])\\\\$\\\"`  \\n  \\n The following table shows how the regular expression pattern is interpreted.  \\n  \\n|Pattern|Description|  \\n|-------------|-----------------|  \\n|`\\\\\\\\\\\\\\\\`|Match two consecutive backslash (`\\\\`) characters. Because the backslash character is interpreted as the escape character, each backslash must be escaped with another backslash.|  \\n|`+ Environment.MachineName +`|Match the string that is returned by the <xref:System.Environment.MachineName%2A?displayProperty=fullName> property.|  \\n|`(?:\\\\.\\\\w+)*`|Match the period (`.`) character followed by one or more word characters. This match can occur zero or more times. The matched subexpression is not captured.|  \\n|`\\\\\\\\`|Match a backslash (`\\\\`) character.|  \\n|`([\\\" + driveNames + \\\"])`|Match the character class that consists of the individual drive letters. This match is the first captured subexpression.|  \\n|`\\\\$`|Match the literal dollar sign (`$`) character.|  \\n  \\n The replacement pattern `$1` replaces the entire match with the first captured subexpression. That is, it replaces the UNC machine and drive name with the drive letter.\"\n  syntax:\n    content: public static string Replace (string input, string pattern, string replacement, System.Text.RegularExpressions.RegexOptions options, TimeSpan matchTimeout);\n    parameters:\n    - id: input\n      type: System.String\n      description: The string to search for a match.\n    - id: pattern\n      type: System.String\n      description: The regular expression pattern to match.\n    - id: replacement\n      type: System.String\n      description: The replacement string.\n    - id: options\n      type: System.Text.RegularExpressions.RegexOptions\n      description: A bitwise combination of the enumeration values that provide options for matching.\n    - id: matchTimeout\n      type: System.TimeSpan\n      description: A time-out interval, or <xref href=\"System.Text.RegularExpressions.Regex.InfiniteMatchTimeout\"></xref> to indicate that the method should not time out.\n    return:\n      type: System.String\n      description: A new string that is identical to the input string, except that the replacement string takes the place of each matched string. If <code>pattern</code> is not matched in the current instance, the method returns the current instance unchanged.\n  overload: System.Text.RegularExpressions.Regex.Replace*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: A regular expression parsing error occurred.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>input</code>, <code>pattern</code>, or <code>replacement</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>options</code> is not a valid bitwise combination of <xref href=\\\"System.Text.RegularExpressions.RegexOptions\\\"></xref> values.  \\n  \\n -or-  \\n  \\n <code>matchTimeout</code> is negative, zero, or greater than approximately 24 days.\"\n  - type: System.Text.RegularExpressions.RegexMatchTimeoutException\n    commentId: T:System.Text.RegularExpressions.RegexMatchTimeoutException\n    description: A time-out occurred. For more information about time-outs, see the Remarks section.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/Regex.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.RegularExpressions.Regex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator,System.Int32,System.Int32)\n  commentId: M:System.Text.RegularExpressions.Regex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator,System.Int32,System.Int32)\n  id: Replace(System.String,System.Text.RegularExpressions.MatchEvaluator,System.Int32,System.Int32)\n  parent: System.Text.RegularExpressions.Regex\n  langs:\n  - csharp\n  name: Replace(String, MatchEvaluator, Int32, Int32)\n  nameWithType: Regex.Replace(String, MatchEvaluator, Int32, Int32)\n  fullName: Regex.Replace(String, MatchEvaluator, Int32, Int32)\n  type: Method\n  assemblies:\n  - System.Text.RegularExpressions\n  - System\n  - netstandard\n  namespace: System.Text.RegularExpressions\n  summary: In a specified input substring, replaces a specified maximum number of strings that match a regular expression pattern with a string returned by a <xref href=\"System.Text.RegularExpressions.MatchEvaluator\"></xref> delegate.\n  remarks: \"The <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.Text.RegularExpressions.MatchEvaluator%2CSystem.Int32%2CSystem.Int32%29?displayProperty=fullName> method is useful for replacing a regular expression match if any of the following conditions is true:  \\n  \\n-   The replacement string cannot readily be specified by a regular expression replacement pattern.  \\n  \\n-   The replacement string results from some processing done on the matched string.  \\n  \\n-   The replacement string results from conditional processing.  \\n  \\n The method is equivalent to calling the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.Int32%29?displayProperty=fullName> method and passing the first `count`<xref:System.Text.RegularExpressions.Match> objects in the returned <xref:System.Text.RegularExpressions.MatchCollection> collection to the `evaluator` delegate.  \\n  \\n The regular expression is the pattern defined by the constructor for the current <xref:System.Text.RegularExpressions.Regex> object.  \\n  \\n The `evaluator` parameter is the delegate for a custom method that you define and that examines each match. The custom method must have the following signature to match the <xref:System.Text.RegularExpressions.MatchEvaluator> delegate.  \\n  \\n [!code-csharp[System.Text.RegularExpressions.Regex.Replace#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/syntax1.cs#1)]\\n [!code-vb[System.Text.RegularExpressions.Regex.Replace#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/syntax1.vb#1)]  \\n  \\n Your custom method returns a string that replaces the matched input.  \\n  \\n The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the replacement operation exceeds the time-out interval specified by the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=fullName> constructor. If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <xref:System.Text.RegularExpressions.Regex> object is created. If no time-out is defined in the <xref:System.Text.RegularExpressions.Regex> constructor call or in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, no exception is thrown  \\n  \\n Because the method returns `input` unchanged if there is no match, you can use the <xref:System.Object.ReferenceEquals%2A?displayProperty=fullName> method to determine whether the method has made any replacements to the input string.\"\n  syntax:\n    content: public string Replace (string input, System.Text.RegularExpressions.MatchEvaluator evaluator, int count, int startat);\n    parameters:\n    - id: input\n      type: System.String\n      description: The string to search for a match.\n    - id: evaluator\n      type: System.Text.RegularExpressions.MatchEvaluator\n      description: A custom method that examines each match and returns either the original matched string or a replacement string.\n    - id: count\n      type: System.Int32\n      description: The maximum number of times the replacement will occur.\n    - id: startat\n      type: System.Int32\n      description: The character position in the input string where the search begins.\n    return:\n      type: System.String\n      description: A new string that is identical to the input string, except that a replacement string takes the place of each matched string. If the regular expression pattern is not matched in the current instance, the method returns the current instance unchanged.\n  overload: System.Text.RegularExpressions.Regex.Replace*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>input</code> or <code>evaluator</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>startat</code> is less than zero or greater than the length of <code>input</code>.\n  - type: System.Text.RegularExpressions.RegexMatchTimeoutException\n    commentId: T:System.Text.RegularExpressions.RegexMatchTimeoutException\n    description: A time-out occurred. For more information about time-outs, see the Remarks section.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/Regex.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator,System.Text.RegularExpressions.RegexOptions)\n  commentId: M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator,System.Text.RegularExpressions.RegexOptions)\n  id: Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator,System.Text.RegularExpressions.RegexOptions)\n  parent: System.Text.RegularExpressions.Regex\n  langs:\n  - csharp\n  name: Replace(String, String, MatchEvaluator, RegexOptions)\n  nameWithType: Regex.Replace(String, String, MatchEvaluator, RegexOptions)\n  fullName: Regex.Replace(String, String, MatchEvaluator, RegexOptions)\n  type: Method\n  assemblies:\n  - System.Text.RegularExpressions\n  - System\n  - netstandard\n  namespace: System.Text.RegularExpressions\n  summary: In a specified input string, replaces all strings that match a specified regular expression with a string returned by a <xref href=\"System.Text.RegularExpressions.MatchEvaluator\"></xref> delegate. Specified options modify the matching operation.\n  remarks: \"The <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.MatchEvaluator%2CSystem.Text.RegularExpressions.RegexOptions%29?displayProperty=fullName> method is useful for replacing a regular expression match in if any of the following conditions is true:  \\n  \\n-   The replacement string cannot readily be specified by a regular expression replacement pattern.  \\n  \\n-   The replacement string results from some processing done on the matched string.  \\n  \\n-   The replacement string results from conditional processing.  \\n  \\n The method is equivalent to calling the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29?displayProperty=fullName> method and passing each <xref:System.Text.RegularExpressions.Match> object in the returned <xref:System.Text.RegularExpressions.MatchCollection> collection to the `evaluator` delegate.  \\n  \\n The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match. For more information about regular expressions, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).  \\n  \\n The `evaluator` parameter is the delegate for a custom method that you define and that examines each match. The custom method must have the following signature to match the <xref:System.Text.RegularExpressions.MatchEvaluator> delegate.  \\n  \\n [!code-csharp[System.Text.RegularExpressions.Regex.Replace#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/syntax1.cs#1)]\\n [!code-vb[System.Text.RegularExpressions.Regex.Replace#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/syntax1.vb#1)]  \\n  \\n Your custom method returns a string that replaces the matched input.  \\n  \\n If you specify <xref:System.Text.RegularExpressions.RegexOptions.RightToLeft> for the `options` parameter, the search for matches begins at the end of the input string and moves left; otherwise, the search begins at the start of the input string and moves right.  \\n  \\n The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the replacement operation exceeds the time-out interval specified for the application domain in which the method is called. If no time-out is defined in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, no exception is thrown.  \\n  \\n Because the method returns `input` unchanged if there is no match, you can use the <xref:System.Object.ReferenceEquals%2A?displayProperty=fullName> method to determine whether the method has made any replacements to the input string.\"\n  example:\n  - \"The following example uses a regular expression to extract the individual words from a string, and then uses a <xref:System.Text.RegularExpressions.MatchEvaluator> delegate to call a method named `WordScramble` that scrambles the individual letters in the word. To do this, the `WordScramble` method creates an array that contains the characters in the match. It also creates a parallel array that it populates with random floating-point numbers. The arrays are sorted by calling the <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29?displayProperty=fullName> method, and the sorted array is provided as an argument to a <xref:System.String> class constructor. This newly created string is then returned by the `WordScramble` method. The regular expression pattern `\\\\w+` matches one or more word characters; the regular expression engine will continue to add characters to the match until it encounters a non-word character, such as a white-space character. The call to the <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.MatchEvaluator%2CSystem.Text.RegularExpressions.RegexOptions%29> method includes the <xref:System.Text.RegularExpressions.RegexOptions?displayProperty=fullName> option so that the comment in the regular expression pattern `\\\\w+  # Matches all the characters in a word.` is ignored by the regular expression engine.  \\n  \\n [!code-csharp[System.Text.RegularExpressions.Regex.Replace#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/replace6.cs#10)]\\n [!code-vb[System.Text.RegularExpressions.Regex.Replace#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/replace6.vb#10)]\"\n  syntax:\n    content: public static string Replace (string input, string pattern, System.Text.RegularExpressions.MatchEvaluator evaluator, System.Text.RegularExpressions.RegexOptions options);\n    parameters:\n    - id: input\n      type: System.String\n      description: The string to search for a match.\n    - id: pattern\n      type: System.String\n      description: The regular expression pattern to match.\n    - id: evaluator\n      type: System.Text.RegularExpressions.MatchEvaluator\n      description: A custom method that examines each match and returns either the original matched string or a replacement string.\n    - id: options\n      type: System.Text.RegularExpressions.RegexOptions\n      description: A bitwise combination of the enumeration values that provide options for matching.\n    return:\n      type: System.String\n      description: A new string that is identical to the input string, except that a replacement string takes the place of each matched string. If <code>pattern</code> is not matched in the current instance, the method returns the current instance unchanged.\n  overload: System.Text.RegularExpressions.Regex.Replace*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: A regular expression parsing error occurred.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>input</code>, <code>pattern</code>, or <code>evaluator</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>options</code> is not a valid bitwise combination of <xref href=\"System.Text.RegularExpressions.RegexOptions\"></xref> values.\n  - type: System.Text.RegularExpressions.RegexMatchTimeoutException\n    commentId: T:System.Text.RegularExpressions.RegexMatchTimeoutException\n    description: A time-out occurred. For more information about time-outs, see the Remarks section.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/Regex.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Int32,System.Int32)\n  commentId: M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Int32,System.Int32)\n  id: Replace(System.String,System.String,System.Int32,System.Int32)\n  parent: System.Text.RegularExpressions.Regex\n  langs:\n  - csharp\n  name: Replace(String, String, Int32, Int32)\n  nameWithType: Regex.Replace(String, String, Int32, Int32)\n  fullName: Regex.Replace(String, String, Int32, Int32)\n  type: Method\n  assemblies:\n  - System.Text.RegularExpressions\n  - System\n  - netstandard\n  namespace: System.Text.RegularExpressions\n  summary: In a specified input substring, replaces a specified maximum number of strings that match a regular expression pattern with a specified replacement string.\n  remarks: \"The search for matches starts in the `input` string at the position specified by the `startat` parameter. The regular expression is the pattern defined by the constructor for the current <xref:System.Text.RegularExpressions.Regex> object. If `count` is negative, replacements continue to the end of the string. If `count` exceeds the number of matches, all matches are replaced.  \\n  \\n The `replacement` parameter specifies the string that is to replace each match in `input`. `replacement` can consist of any combination of literal text and [substitutions](~/docs/standard/base-types/substitutions-in-regular-expressions.md). For example, the replacement pattern `a*${test}b` inserts the string \\\"a*\\\" followed by the substring that is matched by the `test` capturing group, if any, followed by the string \\\"b\\\". The * character is not recognized as a metacharacter within a replacement pattern.  \\n  \\n> [!NOTE]\\n>  Substitutions are the only regular expression language elements that are recognized in a replacement pattern. All other regular expression language elements, including [character escapes](~/docs/standard/base-types/character-escapes-in-regular-expressions.md), are allowed in regular expression patterns only and are not recognized in replacement patterns.  \\n  \\n The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the replacement operation exceeds the time-out interval specified by the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=fullName> constructor. If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <xref:System.Text.RegularExpressions.Regex> object is created. If no time-out is defined in the <xref:System.Text.RegularExpressions.Regex> constructor call or in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, no exception is thrown  \\n  \\n Because the method returns `input` unchanged if there is no match, you can use the <xref:System.Object.ReferenceEquals%2A?displayProperty=fullName> method to determine whether the method has made any replacements to the input string.\"\n  example:\n  - \"The following example double-spaces all but the first line of a string. It defines a regular expression pattern, `^.*$`, that matches a line of text, calls the <xref:System.Text.RegularExpressions.Regex.Match%28System.String%29> method to match the first line of the string, and uses the `Match.Index` and `Match.Count` properties to determine the starting position of the second line.  \\n  \\n [!code-csharp[System.Text.RegularExpressions.Regex.Replace#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/replaceexample9.cs#9)]\\n [!code-vb[System.Text.RegularExpressions.Regex.Replace#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/replaceexample9.vb#9)]  \\n  \\n The regular expression pattern `^.*$` is defined as shown in the following table.  \\n  \\n|Pattern|Description|  \\n|-------------|-----------------|  \\n|`^`|Match the start of a line. (Note that the <xref:System.Text.RegularExpressions.Regex> object was instantiated by using the <xref:System.Text.RegularExpressions.RegexOptions?displayProperty=fullName> option; otherwise, this character class would only match the beginning of the input string.)|  \\n|`.*`|Match any character zero or more times.|  \\n|`$`|Match the end of a line. (Note that the <xref:System.Text.RegularExpressions.Regex> object was instantiated by using the <xref:System.Text.RegularExpressions.RegexOptions?displayProperty=fullName> option; otherwise, this character class would only match the beginning of the input string.)|  \\n  \\n The replacement string (`vbCrLf + \\\"$&\\\"` in Visual Basic, `\\\"\\\\n$&\\\"` in C#) adds a new line before the matched string. Note that `\\\\n` in the C# example is interpreted as the newline character by the C# compiler; it does not represent a regular expression character escape.\"\n  syntax:\n    content: public string Replace (string input, string replacement, int count, int startat);\n    parameters:\n    - id: input\n      type: System.String\n      description: The string to search for a match.\n    - id: replacement\n      type: System.String\n      description: The replacement string.\n    - id: count\n      type: System.Int32\n      description: Maximum number of times the replacement can occur.\n    - id: startat\n      type: System.Int32\n      description: The character position in the input string where the search begins.\n    return:\n      type: System.String\n      description: A new string that is identical to the input string, except that the replacement string takes the place of each matched string. If the regular expression pattern is not matched in the current instance, the method returns the current instance unchanged.\n  overload: System.Text.RegularExpressions.Regex.Replace*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>input</code> or <code>replacement</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>startat</code> is less than zero or greater than the length of <code>input</code>.\n  - type: System.Text.RegularExpressions.RegexMatchTimeoutException\n    commentId: T:System.Text.RegularExpressions.RegexMatchTimeoutException\n    description: A time-out occurred. For more information about time-outs, see the Remarks section.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/Regex.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions)\n  commentId: M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions)\n  id: Replace(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions)\n  parent: System.Text.RegularExpressions.Regex\n  langs:\n  - csharp\n  name: Replace(String, String, String, RegexOptions)\n  nameWithType: Regex.Replace(String, String, String, RegexOptions)\n  fullName: Regex.Replace(String, String, String, RegexOptions)\n  type: Method\n  assemblies:\n  - System.Text.RegularExpressions\n  - System\n  - netstandard\n  namespace: System.Text.RegularExpressions\n  summary: In a specified input string, replaces all strings that match a specified regular expression with a specified replacement string. Specified options modify the matching operation.\n  remarks: \"The static `Replace` methods are equivalent to constructing a <xref:System.Text.RegularExpressions.Regex> object with the specified regular expression pattern and calling the instance method `Replace`.  \\n  \\n The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match. For more information about regular expressions, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md). If you specify <xref:System.Text.RegularExpressions.RegexOptions.RightToLeft> for the `options` parameter, the search for matches begins at the end of the input string and moves left; otherwise, the search begins at the start of the input string and moves right.  \\n  \\n The `replacement` parameter specifies the string that is to replace each match in `input`. `replacement` can consist of any combination of literal text and [substitutions](~/docs/standard/base-types/substitutions-in-regular-expressions.md). For example, the replacement pattern `a*${test}b` inserts the string \\\"a*\\\" followed by the substring that is matched by the `test` capturing group, if any, followed by the string \\\"b\\\". The * character is not recognized as a metacharacter within a replacement pattern.  \\n  \\n> [!NOTE]\\n>  Substitutions are the only regular expression language elements that are recognized in a replacement pattern. All other regular expression language elements, including [character escapes](~/docs/standard/base-types/character-escapes-in-regular-expressions.md), are allowed in regular expression patterns only and are not recognized in replacement patterns.  \\n  \\n The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the replacement operation exceeds the time-out interval specified for the application domain in which the method is called. If no time-out is defined in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, no exception is thrown.  \\n  \\n Because the method returns `input` unchanged if there is no match, you can use the <xref:System.Object.ReferenceEquals%2A?displayProperty=fullName> method to determine whether the method has made any replacements to the input string.\"\n  example:\n  - \"The following example uses the <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29> method to replace the local machine and drive names in a UNC path with a local file path. The regular expression uses the <xref:System.Environment.MachineName%2A?displayProperty=fullName> property to include the name of the local computer, and the <xref:System.Environment.GetLogicalDrives%2A?displayProperty=fullName> method to include the names of the logical drives. All regular expression string comparisons are case-insensitive. To run the example successfully, you should replace the literal string \\\"MyMachine\\\" with your local machine name.  \\n  \\n [!code-csharp[System.Text.RegularExpressions.Regex.Replace#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/replace4.cs#4)]\\n [!code-vb[System.Text.RegularExpressions.Regex.Replace#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/replace4.vb#4)]  \\n  \\n The regular expression pattern is defined by the following expression:  \\n  \\n `\\\"\\\\\\\\\\\\\\\\\\\" + Environment.MachineName + \\\"(?:\\\\.\\\\w+)*\\\\\\\\([\\\" + driveNames + \\\"])\\\\$\\\"`  \\n  \\n The following table shows how the regular expression pattern is interpreted.  \\n  \\n|Pattern|Description|  \\n|-------------|-----------------|  \\n|`\\\\\\\\\\\\\\\\`|Match two consecutive backslash (`\\\\`) characters. Because the backslash character is interpreted as the escape character, each backslash must be escaped with another backslash.|  \\n|`+ Environment.MachineName +`|Match the string that is returned by the <xref:System.Environment.MachineName%2A?displayProperty=fullName> property.|  \\n|`(?:\\\\.\\\\w+)*`|Match the period (`.`) character followed by one or more word characters. This match can occur zero or more times. The matched subexpression is not captured.|  \\n|`\\\\\\\\`|Match a backslash (`\\\\`) character.|  \\n|`([\\\" + driveNames + \\\"])`|Match the character class that consists of the individual drive letters. This match is the first captured subexpression.|  \\n|`\\\\$`|Match the literal dollar sign (`$`) character.|  \\n  \\n The replacement pattern `$1` replaces the entire match with the first captured subexpression. That is, it replaces the UNC machine and drive name with the drive letter.\"\n  syntax:\n    content: public static string Replace (string input, string pattern, string replacement, System.Text.RegularExpressions.RegexOptions options);\n    parameters:\n    - id: input\n      type: System.String\n      description: The string to search for a match.\n    - id: pattern\n      type: System.String\n      description: The regular expression pattern to match.\n    - id: replacement\n      type: System.String\n      description: The replacement string.\n    - id: options\n      type: System.Text.RegularExpressions.RegexOptions\n      description: A bitwise combination of the enumeration values that provide options for matching.\n    return:\n      type: System.String\n      description: A new string that is identical to the input string, except that the replacement string takes the place of each matched string. If <code>pattern</code> is not matched in the current instance, the method returns the current instance unchanged.\n  overload: System.Text.RegularExpressions.Regex.Replace*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: A regular expression parsing error occurred.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>input</code>, <code>pattern</code>, or <code>replacement</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>options</code> is not a valid bitwise combination of <xref href=\"System.Text.RegularExpressions.RegexOptions\"></xref> values.\n  - type: System.Text.RegularExpressions.RegexMatchTimeoutException\n    commentId: T:System.Text.RegularExpressions.RegexMatchTimeoutException\n    description: A time-out occurred. For more information about time-outs, see the Remarks section.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/Regex.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator)\n  commentId: M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator)\n  id: Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator)\n  parent: System.Text.RegularExpressions.Regex\n  langs:\n  - csharp\n  name: Replace(String, String, MatchEvaluator)\n  nameWithType: Regex.Replace(String, String, MatchEvaluator)\n  fullName: Regex.Replace(String, String, MatchEvaluator)\n  type: Method\n  assemblies:\n  - System.Text.RegularExpressions\n  - System\n  - netstandard\n  namespace: System.Text.RegularExpressions\n  summary: In a specified input string, replaces all strings that match a specified regular expression with a string returned by a <xref href=\"System.Text.RegularExpressions.MatchEvaluator\"></xref> delegate.\n  remarks: \"The <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.MatchEvaluator%29?displayProperty=fullName> method is useful for replacing a regular expression match if any of the following conditions is true:  \\n  \\n-   The replacement string cannot readily be specified by a regular expression replacement pattern.  \\n  \\n-   The replacement string results from some processing done on the matched string.  \\n  \\n-   The replacement string results from conditional processing.  \\n  \\n The method is equivalent to calling the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%29?displayProperty=fullName> method and passing each <xref:System.Text.RegularExpressions.Match> object in the returned <xref:System.Text.RegularExpressions.MatchCollection> collection to the `evaluator` delegate.  \\n  \\n The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match. For more information about regular expressions, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).  \\n  \\n The `evaluator` parameter is the delegate for a custom method that you define and that examines each match. The custom method must have the following signature to match the <xref:System.Text.RegularExpressions.MatchEvaluator> delegate.  \\n  \\n [!code-csharp[System.Text.RegularExpressions.Regex.Replace#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/syntax1.cs#1)]\\n [!code-vb[System.Text.RegularExpressions.Regex.Replace#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/syntax1.vb#1)]  \\n  \\n Your custom method returns a string that replaces the matched input.  \\n  \\n The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the replacement operation exceeds the time-out interval specified for the application domain in which the method is called. If no time-out is defined in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, no exception is thrown.  \\n  \\n Because the method returns `input` unchanged if there is no match, you can use the <xref:System.Object.ReferenceEquals%2A?displayProperty=fullName> method to determine whether the method has made any replacements to the input string.\"\n  example:\n  - \"The following example uses a regular expression to extract the individual words from a string, and then uses a <xref:System.Text.RegularExpressions.MatchEvaluator> delegate to call a method named `WordScramble` that scrambles the individual letters in the word. To do this, the `WordScramble` method creates an array that contains the characters in the match. It also creates a parallel array that it populates with random floating-point numbers. The arrays are sorted by calling the <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29?displayProperty=fullName> method, and the sorted array is provided as an argument to a <xref:System.String> class constructor. This newly created string is then returned by the `WordScramble` method. The regular expression pattern `\\\\w+` matches one or more word characters; the regular expression engine will continue to add characters to the match until it encounters a non-word character, such as a white-space character.  \\n  \\n [!code-csharp[System.Text.RegularExpressions.Regex.Replace#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/replace5.cs#2)]\\n [!code-vb[System.Text.RegularExpressions.Regex.Replace#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/replace5.vb#2)]\"\n  syntax:\n    content: public static string Replace (string input, string pattern, System.Text.RegularExpressions.MatchEvaluator evaluator);\n    parameters:\n    - id: input\n      type: System.String\n      description: The string to search for a match.\n    - id: pattern\n      type: System.String\n      description: The regular expression pattern to match.\n    - id: evaluator\n      type: System.Text.RegularExpressions.MatchEvaluator\n      description: A custom method that examines each match and returns either the original matched string or a replacement string.\n    return:\n      type: System.String\n      description: A new string that is identical to the input string, except that a replacement string takes the place of each matched string. If <code>pattern</code> is not matched in the current instance, the method returns the current instance unchanged.\n  overload: System.Text.RegularExpressions.Regex.Replace*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: A regular expression parsing error occurred.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>input</code>, <code>pattern</code>, or <code>evaluator</code> is `null`.\n  - type: System.Text.RegularExpressions.RegexMatchTimeoutException\n    commentId: T:System.Text.RegularExpressions.RegexMatchTimeoutException\n    description: A time-out occurred. For more information about time-outs, see the Remarks section.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/Regex.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String)\n  commentId: M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String)\n  id: Replace(System.String,System.String,System.String)\n  parent: System.Text.RegularExpressions.Regex\n  langs:\n  - csharp\n  name: Replace(String, String, String)\n  nameWithType: Regex.Replace(String, String, String)\n  fullName: Regex.Replace(String, String, String)\n  type: Method\n  assemblies:\n  - System.Text.RegularExpressions\n  - System\n  - netstandard\n  namespace: System.Text.RegularExpressions\n  summary: In a specified input string, replaces all strings that match a specified regular expression with a specified replacement string.\n  remarks: \"The static `Replace` methods are equivalent to constructing a <xref:System.Text.RegularExpressions.Regex> object with the specified regular expression pattern and calling the instance method `Replace`.  \\n  \\n The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match. For more information about regular expressions, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md). The search for matches starts at the beginning of the `input` string.  \\n  \\n The `replacement` parameter specifies the string that is to replace each match in `input`. `replacement` can consist of any combination of literal text and [substitutions](~/docs/standard/base-types/substitutions-in-regular-expressions.md). For example, the replacement pattern `a*${test}b` inserts the string \\\"a*\\\" followed by the substring that is matched by the `test` capturing group, if any, followed by the string \\\"b\\\". The * character is not recognized as a metacharacter within a replacement pattern.  \\n  \\n> [!NOTE]\\n>  Substitutions are the only regular expression language elements that are recognized in a replacement pattern. All other regular expression language elements, including [character escapes](~/docs/standard/base-types/character-escapes-in-regular-expressions.md), are allowed in regular expression patterns only and are not recognized in replacement patterns.  \\n  \\n The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the replacement operation exceeds the time-out interval specified for the application domain in which the method is called. If no time-out is defined in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, no exception is thrown.  \\n  \\n Because the method returns `input` unchanged if there is no match, you can use the <xref:System.Object.ReferenceEquals%2A?displayProperty=fullName> method to determine whether the method has made any replacements to the input string.\"\n  example:\n  - \"The following example defines a regular expression, `\\\\s+`, that matches one or more white-space characters. The replacement string, \\\" \\\", replaces them with a single space character.  \\n  \\n [!code-csharp[System.Text.RegularExpressions.Regex.Replace#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/replaceexample6.cs#6)]\\n [!code-vb[System.Text.RegularExpressions.Regex.Replace#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/replaceexample6.vb#6)]  \\n  \\n The following example uses the <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.String%29> method to replace the local machine and drive names in a UNC path with a local file path. The regular expression uses the <xref:System.Environment.MachineName%2A?displayProperty=fullName> property to include the name of the local computer, and the <xref:System.Environment.GetLogicalDrives%2A?displayProperty=fullName> method to include the names of the logical drives. To run the example successfully, you should replace the literal string \\\"MyMachine\\\" with your local machine name.  \\n  \\n [!code-csharp[System.Text.RegularExpressions.Regex.Replace#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/replace3.cs#3)]\\n [!code-vb[System.Text.RegularExpressions.Regex.Replace#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/replace3.vb#3)]  \\n  \\n The regular expression pattern is defined by the following expression:  \\n  \\n `\\\"\\\\\\\\\\\\\\\\(?i:\\\" + Environment.MachineName + \\\")(?:\\\\.\\\\w+)*\\\\\\\\((?i:[\\\" + driveNames + \\\"]))\\\\$\\\"`  \\n  \\n The following table shows how the regular expression pattern is interpreted.  \\n  \\n|Pattern|Description|  \\n|-------------|-----------------|  \\n|`\\\\\\\\\\\\\\\\`|Match two consecutive backslash (`\\\\`) characters. Because the backslash character is interpreted as the escape character, each backslash must be escaped with another backslash.|  \\n|`(?i:\\\" + Environment.MachineName + \\\")`|Perform a case-insensitive match of the string that is returned by the <xref:System.Environment.MachineName%2A?displayProperty=fullName> property.|  \\n|`(?:\\\\.\\\\w+)*`|Match the period (`.`) character followed by one or more word characters. This match can occur zero or more times. The matched subexpression is not captured.|  \\n|`\\\\\\\\`|Match a backslash (`\\\\`) character.|  \\n|`((?i:[\\\" + driveNames + \\\"]))`|Perform a case-insensitive match of the character class that consists of the individual drive lettters. This match is the first captured subexpression.|  \\n|`\\\\$`|Match the literal dollar sign (`$`) character.|  \\n  \\n The replacement pattern `$1` replaces the entire match with the first captured subexpression. That is, it replaces the UNC machine and drive name with the drive letter.\"\n  syntax:\n    content: public static string Replace (string input, string pattern, string replacement);\n    parameters:\n    - id: input\n      type: System.String\n      description: The string to search for a match.\n    - id: pattern\n      type: System.String\n      description: The regular expression pattern to match.\n    - id: replacement\n      type: System.String\n      description: The replacement string.\n    return:\n      type: System.String\n      description: A new string that is identical to the input string, except that the replacement string takes the place of each matched string. If <code>pattern</code> is not matched in the current instance, the method returns the current instance unchanged.\n  overload: System.Text.RegularExpressions.Regex.Replace*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: A regular expression parsing error occurred.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>input</code>, <code>pattern</code>, or <code>replacement</code> is `null`.\n  - type: System.Text.RegularExpressions.RegexMatchTimeoutException\n    commentId: T:System.Text.RegularExpressions.RegexMatchTimeoutException\n    description: A time-out occurred. For more information about time-outs, see the Remarks section.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/Regex.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Int32)\n  commentId: M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Int32)\n  id: Replace(System.String,System.String,System.Int32)\n  parent: System.Text.RegularExpressions.Regex\n  langs:\n  - csharp\n  name: Replace(String, String, Int32)\n  nameWithType: Regex.Replace(String, String, Int32)\n  fullName: Regex.Replace(String, String, Int32)\n  type: Method\n  assemblies:\n  - System.Text.RegularExpressions\n  - System\n  - netstandard\n  namespace: System.Text.RegularExpressions\n  summary: In a specified input string, replaces a specified maximum number of strings that match a regular expression pattern with a specified replacement string.\n  remarks: \"The search for matches starts at the beginning of the `input` string. The regular expression is the pattern that is defined by the constructor for the current <xref:System.Text.RegularExpressions.Regex> object. If `count` is negative, replacements continue to the end of the string. If `count` exceeds the number of matches, all matches are replaced.  \\n  \\n The `replacement` parameter specifies the string that is to replace the first `count` matches in `input`. `replacement` can consist of any combination of literal text and [substitutions](~/docs/standard/base-types/substitutions-in-regular-expressions.md). For example, the replacement pattern `a*${test}b` inserts the string \\\"a*\\\" followed by the substring that is matched by the `test` capturing group, if any, followed by the string \\\"b\\\". The * character is not recognized as a metacharacter within a replacement pattern.  \\n  \\n> [!NOTE]\\n>  Substitutions are the only regular expression language elements that are recognized in a replacement pattern. All other regular expression language elements, including [character escapes](~/docs/standard/base-types/character-escapes-in-regular-expressions.md), are allowed in regular expression patterns only and are not recognized in replacement patterns.  \\n  \\n The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the replacement operation exceeds the time-out interval specified by the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=fullName> constructor. If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <xref:System.Text.RegularExpressions.Regex> object is created. If no time-out is defined in the <xref:System.Text.RegularExpressions.Regex> constructor call or in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, no exception is thrown  \\n  \\n Because the method returns `input` unchanged if there is no match, you can use the <xref:System.Object.ReferenceEquals%2A?displayProperty=fullName> method to determine whether the method has made any replacements to the input string.\"\n  example:\n  - \"The following example replaces the first five occurrences of duplicated characters with a single character. The regular expression pattern `(\\\\w)\\\\1` matches consecutive occurrences of a single character and assigns the first occurrence to the first capturing group. The replacement pattern `$1` replaces the entire match with the first captured group.  \\n  \\n [!code-csharp[System.Text.RegularExpressions.Regex.Replace#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/replaceexample8.cs#8)]\\n [!code-vb[System.Text.RegularExpressions.Regex.Replace#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/replaceexample8.vb#8)]\"\n  syntax:\n    content: public string Replace (string input, string replacement, int count);\n    parameters:\n    - id: input\n      type: System.String\n      description: The string to search for a match.\n    - id: replacement\n      type: System.String\n      description: The replacement string.\n    - id: count\n      type: System.Int32\n      description: The maximum number of times the replacement can occur.\n    return:\n      type: System.String\n      description: A new string that is identical to the input string, except that the replacement string takes the place of each matched string. If the regular expression pattern is not matched in the current instance, the method returns the current instance unchanged.\n  overload: System.Text.RegularExpressions.Regex.Replace*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>input</code> or <code>replacement</code> is `null`.\n  - type: System.Text.RegularExpressions.RegexMatchTimeoutException\n    commentId: T:System.Text.RegularExpressions.RegexMatchTimeoutException\n    description: A time-out occurred. For more information about time-outs, see the Remarks section.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/Regex.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.RegularExpressions.Regex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator)\n  commentId: M:System.Text.RegularExpressions.Regex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator)\n  id: Replace(System.String,System.Text.RegularExpressions.MatchEvaluator)\n  parent: System.Text.RegularExpressions.Regex\n  langs:\n  - csharp\n  name: Replace(String, MatchEvaluator)\n  nameWithType: Regex.Replace(String, MatchEvaluator)\n  fullName: Regex.Replace(String, MatchEvaluator)\n  type: Method\n  assemblies:\n  - System.Text.RegularExpressions\n  - System\n  - netstandard\n  namespace: System.Text.RegularExpressions\n  summary: In a specified input string, replaces all strings that match a specified regular expression with a string returned by a <xref href=\"System.Text.RegularExpressions.MatchEvaluator\"></xref> delegate.\n  remarks: \"The <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.Text.RegularExpressions.MatchEvaluator%29?displayProperty=fullName> method is useful for replacing a regular expression match if any of the following conditions is true:  \\n  \\n-   The replacement string cannot readily be specified by a regular expression replacement pattern.  \\n  \\n-   The replacement string results from some processing done on the matched string.  \\n  \\n-   The replacement string results from conditional processing.  \\n  \\n The method is equivalent to calling the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%29?displayProperty=fullName> method and passing each <xref:System.Text.RegularExpressions.Match> object in the returned <xref:System.Text.RegularExpressions.MatchCollection> collection to the `evaluator` delegate.  \\n  \\n The regular expression is the pattern defined by the constructor for the current <xref:System.Text.RegularExpressions.Regex> object.  \\n  \\n The `evaluator` parameter is the delegate for a custom method that you define and that examines each match. The custom method must have the following signature to match the <xref:System.Text.RegularExpressions.MatchEvaluator> delegate.  \\n  \\n [!code-csharp[System.Text.RegularExpressions.Regex.Replace#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/syntax1.cs#1)]\\n [!code-vb[System.Text.RegularExpressions.Regex.Replace#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/syntax1.vb#1)]  \\n  \\n Your custom method returns a string that replaces the matched input.  \\n  \\n The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the replacement operation exceeds the time-out interval specified by the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=fullName> constructor. If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <xref:System.Text.RegularExpressions.Regex> object is created. If no time-out is defined in the <xref:System.Text.RegularExpressions.Regex> constructor call or in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, no exception is thrown  \\n  \\n Because the method returns `input` unchanged if there is no match, you can use the <xref:System.Object.ReferenceEquals%2A?displayProperty=fullName> method to determine whether the method has made any replacements to the input string.\"\n  example:\n  - \"The following code example displays an original string, matches each word in the original string, converts the first character of each match to uppercase, then displays the converted string.  \\n  \\n [!code-csharp[Regex.Replace-Instance#1](~/samples/snippets/csharp/VS_Snippets_CLR/Regex.Replace-Instance/cs/sample.cs#1)]\\n [!code-vb[Regex.Replace-Instance#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Regex.Replace-Instance/vb/sample.vb#1)]\"\n  syntax:\n    content: public string Replace (string input, System.Text.RegularExpressions.MatchEvaluator evaluator);\n    parameters:\n    - id: input\n      type: System.String\n      description: The string to search for a match.\n    - id: evaluator\n      type: System.Text.RegularExpressions.MatchEvaluator\n      description: A custom method that examines each match and returns either the original matched string or a replacement string.\n    return:\n      type: System.String\n      description: A new string that is identical to the input string, except that a replacement string takes the place of each matched string. If the regular expression pattern is not matched in the current instance, the method returns the current instance unchanged.\n  overload: System.Text.RegularExpressions.Regex.Replace*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>input</code> or <code>evaluator</code> is `null`.\n  - type: System.Text.RegularExpressions.RegexMatchTimeoutException\n    commentId: T:System.Text.RegularExpressions.RegexMatchTimeoutException\n    description: A time-out occurred. For more information about time-outs, see the Remarks section.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/Regex.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.RegularExpressions.Regex.Replace(System.String,System.String)\n  commentId: M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String)\n  id: Replace(System.String,System.String)\n  parent: System.Text.RegularExpressions.Regex\n  langs:\n  - csharp\n  name: Replace(String, String)\n  nameWithType: Regex.Replace(String, String)\n  fullName: Regex.Replace(String, String)\n  type: Method\n  assemblies:\n  - System.Text.RegularExpressions\n  - System\n  - netstandard\n  namespace: System.Text.RegularExpressions\n  summary: In a specified input string, replaces all strings that match a regular expression pattern with a specified replacement string.\n  remarks: \"The search for matches starts at the beginning of the `input` string. The regular expression is the pattern defined by the constructor for the current <xref:System.Text.RegularExpressions.Regex> object.  \\n  \\n The `replacement` parameter specifies the string that is to replace each match in `input`. `replacement` can consist of any combination of literal text and [substitutions](~/docs/standard/base-types/substitutions-in-regular-expressions.md). For example, the replacement pattern `a*${test}b` inserts the string \\\"a*\\\" followed by the substring that is matched by the `test` capturing group, if any, followed by the string \\\"b\\\". The * character is not recognized as a metacharacter within a replacement pattern.  \\n  \\n> [!NOTE]\\n>  Substitutions are the only regular expression language elements that are recognized in a replacement pattern. All other regular expression language elements, including [character escapes](~/docs/standard/base-types/character-escapes-in-regular-expressions.md), are allowed in regular expression patterns only and are not recognized in replacement patterns.  \\n  \\n The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the replacement operation exceeds the time-out interval specified by the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=fullName> constructor. If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <xref:System.Text.RegularExpressions.Regex> object is created. If no time-out is defined in the <xref:System.Text.RegularExpressions.Regex> constructor call or in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, no exception is thrown  \\n  \\n Because the method returns `input` unchanged if there is no match, you can use the <xref:System.Object.ReferenceEquals%2A?displayProperty=fullName> method to determine whether the method has made any replacements to the input string.\"\n  example:\n  - \"The following example defines a regular expression, `\\\\s+`, that matches one or more white-space characters. The replacement string, \\\" \\\", replaces them with a single space character.  \\n  \\n [!code-csharp[System.Text.RegularExpressions.Regex.Replace#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/replaceexample5.cs#5)]\\n [!code-vb[System.Text.RegularExpressions.Regex.Replace#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/replaceexample5.vb#5)]  \\n  \\n The following example defines a regular expression, `(\\\\p{Sc}\\\\s?)?(\\\\d+\\\\.?((?<=\\\\.)\\\\d+)?)(?(1)|\\\\s?\\\\p{Sc})?`, and a replacement pattern, `$2`, that removes either a leading or a trailing currency symbol from a numeric value.  \\n  \\n [!code-csharp[System.Text.RegularExpressions.Regex.Replace#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/replaceexample7.cs#7)]\\n [!code-vb[System.Text.RegularExpressions.Regex.Replace#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/replaceexample7.vb#7)]  \\n  \\n The regular expression is interpreted as shown in the following table.  \\n  \\n|Pattern|Description|  \\n|-------------|-----------------|  \\n|`\\\\p{Sc}`|Match a currency symbol. `{Sc}` denotes any character that is a member of the Unicode Symbol, Currency category.|  \\n|`\\\\s?`|Match zero or one white-space character.|  \\n|`(\\\\p{Sc}\\\\s?)?`|Match zero or one occurrence of the combination of a currency symbol followed by zero or one white-space character. This is the first capturing group.|  \\n|`\\\\d+`|Match one or more decimal digits.|  \\n|`\\\\.?`|Match zero or one occurrence of a period (used as a decimal separator character).|  \\n|`((?<=\\\\.)\\\\d+)?`|If a period is the previous character, match one or more decimal digits. This pattern can be matched either zero or one time.|  \\n|`(\\\\d+\\\\.?((?<=\\\\.)\\\\d+)?)`|Match the pattern of one or more decimal digits followed by an optional period and additional decimal digits. This is the second capturing group. The call to the <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%29> method replaces the entire match with the value of this captured group.|  \\n|`(?(1)&#124;\\\\s?\\\\p{Sc})?`|If the first captured group exists, match an empty string. Otherwise, match zero or one white-space character followed by a currency symbol.|\"\n  syntax:\n    content: public string Replace (string input, string replacement);\n    parameters:\n    - id: input\n      type: System.String\n      description: The string to search for a match.\n    - id: replacement\n      type: System.String\n      description: The replacement string.\n    return:\n      type: System.String\n      description: A new string that is identical to the input string, except that the replacement string takes the place of each matched string. If the regular expression pattern is not matched in the current instance, the method returns the current instance unchanged.\n  overload: System.Text.RegularExpressions.Regex.Replace*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>input</code> or <code>replacement</code> is `null`.\n  - type: System.Text.RegularExpressions.RegexMatchTimeoutException\n    commentId: T:System.Text.RegularExpressions.RegexMatchTimeoutException\n    description: A time-out occurred. For more information about time-outs, see the Remarks section.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/Regex.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.RegularExpressions.Regex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator,System.Int32)\n  commentId: M:System.Text.RegularExpressions.Regex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator,System.Int32)\n  id: Replace(System.String,System.Text.RegularExpressions.MatchEvaluator,System.Int32)\n  parent: System.Text.RegularExpressions.Regex\n  langs:\n  - csharp\n  name: Replace(String, MatchEvaluator, Int32)\n  nameWithType: Regex.Replace(String, MatchEvaluator, Int32)\n  fullName: Regex.Replace(String, MatchEvaluator, Int32)\n  type: Method\n  assemblies:\n  - System.Text.RegularExpressions\n  - System\n  - netstandard\n  namespace: System.Text.RegularExpressions\n  summary: In a specified input string, replaces a specified maximum number of strings that match a regular expression pattern with a string returned by a <xref href=\"System.Text.RegularExpressions.MatchEvaluator\"></xref> delegate.\n  remarks: \"The <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.Text.RegularExpressions.MatchEvaluator%2CSystem.Int32%29?displayProperty=fullName> method is useful for replacing a regular expression match if any of the following conditions is true:  \\n  \\n-   The replacement string cannot readily be specified by a regular expression replacement pattern.  \\n  \\n-   The replacement string results from some processing done on the matched string.  \\n  \\n-   The replacement string results from conditional processing.  \\n  \\n The method is equivalent to calling the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%29?displayProperty=fullName> method and passing the first `count`<xref:System.Text.RegularExpressions.Match> objects in the returned <xref:System.Text.RegularExpressions.MatchCollection> collection to the `evaluator` delegate.  \\n  \\n The regular expression is the pattern defined by the constructor for the current <xref:System.Text.RegularExpressions.Regex> object.  \\n  \\n The `evaluator` parameter is the delegate for a custom method that you define and that examines each match. The custom method must have the following signature to match the <xref:System.Text.RegularExpressions.MatchEvaluator> delegate.  \\n  \\n [!code-csharp[System.Text.RegularExpressions.Regex.Replace#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/syntax1.cs#1)]\\n [!code-vb[System.Text.RegularExpressions.Regex.Replace#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/syntax1.vb#1)]  \\n  \\n Your custom method returns a string that replaces the matched input.  \\n  \\n The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the replacement operation exceeds the time-out interval specified by the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=fullName> constructor. If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <xref:System.Text.RegularExpressions.Regex> object is created. If no time-out is defined in the <xref:System.Text.RegularExpressions.Regex> constructor call or in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, no exception is thrown  \\n  \\n Because the method returns `input` unchanged if there is no match, you can use the <xref:System.Object.ReferenceEquals%2A?displayProperty=fullName> method to determine whether the method has made any replacements to the input string.\"\n  example:\n  - \"The following example uses a regular expression to deliberately misspell half of the words in a list. It uses the regular expression `\\\\w*(ie|ei)\\\\w*` to match words that include the characters \\\"ie\\\" or \\\"ei\\\". It passes the first half of the matching words to the `ReverseLetter` method, which, in turn, uses the <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29> method to reverse \\\"i\\\" and \\\"e\\\" in the matched string. The remaining words remain unchanged.  \\n  \\n [!code-csharp[System.Text.RegularExpressions.Regex.Replace#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/replace7.cs#11)]\\n [!code-vb[System.Text.RegularExpressions.Regex.Replace#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/replace7.vb#11)]  \\n  \\n The regular expression `\\\\w*(ie|ei)\\\\w*` is defined as shown in the following table.  \\n  \\n|Pattern|Description|  \\n|-------------|-----------------|  \\n|`\\\\w*`|Match zero or more word characters.|  \\n|`(ie&#124;ei)`|Match either \\\"ie\\\" or \\\"ei\\\".|  \\n|`\\\\w*`|Match zero or more word characters.|  \\n  \\n The regular expression pattern `([ie])([ie])` in the `ReverseLetter` method matches the first \\\"i\\\" or \\\"e\\\" in the diphthong \\\"ie\\\" or \\\"ei\\\" and assigns the letter to the first capturing group. It matches the second \\\"i\\\" or \\\"e\\\" and assigns the letter to the second capturing group. The two characters are then reversed by calling the <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.String%29> method with the replacement pattern `$2$1`.\"\n  syntax:\n    content: public string Replace (string input, System.Text.RegularExpressions.MatchEvaluator evaluator, int count);\n    parameters:\n    - id: input\n      type: System.String\n      description: The string to search for a match.\n    - id: evaluator\n      type: System.Text.RegularExpressions.MatchEvaluator\n      description: A custom method that examines each match and returns either the original matched string or a replacement string.\n    - id: count\n      type: System.Int32\n      description: The maximum number of times the replacement will occur.\n    return:\n      type: System.String\n      description: A new string that is identical to the input string, except that a replacement string takes the place of each matched string. If the regular expression pattern is not matched in the current instance, the method returns the current instance unchanged.\n  overload: System.Text.RegularExpressions.Regex.Replace*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>input</code> or <code>evaluator</code> is `null`.\n  - type: System.Text.RegularExpressions.RegexMatchTimeoutException\n    commentId: T:System.Text.RegularExpressions.RegexMatchTimeoutException\n    description: A time-out occurred. For more information about time-outs, see the Remarks section.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/Regex.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.RegularExpressions.Regex.RightToLeft\n  commentId: P:System.Text.RegularExpressions.Regex.RightToLeft\n  id: RightToLeft\n  parent: System.Text.RegularExpressions.Regex\n  langs:\n  - csharp\n  name: RightToLeft\n  nameWithType: Regex.RightToLeft\n  fullName: Regex.RightToLeft\n  type: Property\n  assemblies:\n  - System.Text.RegularExpressions\n  - System\n  - netstandard\n  namespace: System.Text.RegularExpressions\n  summary: Gets a value that indicates whether the regular expression searches from right to left.\n  remarks: <xref:System.Text.RegularExpressions.Regex.RightToLeft%2A> is `true` if the <xref:System.Text.RegularExpressions.Regex> instance was created with the <xref:System.Text.RegularExpressions.RegexOptions.RightToLeft> option.\n  syntax:\n    content: public bool RightToLeft { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the regular expression searches from right to left; otherwise, `false`.'\n  overload: System.Text.RegularExpressions.Regex.RightToLeft*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/Regex.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.RegularExpressions.Regex.roptions\n  commentId: F:System.Text.RegularExpressions.Regex.roptions\n  id: roptions\n  parent: System.Text.RegularExpressions.Regex\n  langs:\n  - csharp\n  name: roptions\n  nameWithType: Regex.roptions\n  fullName: Regex.roptions\n  type: Field\n  assemblies:\n  - System.Text.RegularExpressions\n  - System\n  - netstandard\n  namespace: System.Text.RegularExpressions\n  summary: Used by a <xref href=\"System.Text.RegularExpressions.Regex\"></xref> object generated by the <xref href=\"System.Text.RegularExpressions.Regex.CompileToAssembly*\"></xref> method.\n  syntax:\n    content: protected System.Text.RegularExpressions.RegexOptions roptions;\n    return:\n      type: System.Text.RegularExpressions.RegexOptions\n      description: ''\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/Regex.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.RegularExpressions.Regex.Split(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)\n  commentId: M:System.Text.RegularExpressions.Regex.Split(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)\n  id: Split(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)\n  parent: System.Text.RegularExpressions.Regex\n  langs:\n  - csharp\n  name: Split(String, String, RegexOptions, TimeSpan)\n  nameWithType: Regex.Split(String, String, RegexOptions, TimeSpan)\n  fullName: Regex.Split(String, String, RegexOptions, TimeSpan)\n  type: Method\n  assemblies:\n  - System.Text.RegularExpressions\n  - System\n  - netstandard\n  namespace: System.Text.RegularExpressions\n  summary: Splits an input string into an array of substrings at the positions defined by a specified regular expression pattern. Additional parameters specify options that modify the matching operation and a time-out interval if no match is found.\n  remarks: \"The <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=fullName> methods are similar to the <xref:System.String.Split%28System.Char%5B%5D%29?displayProperty=fullName> method, except that <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=fullName> splits the string at a delimiter determined by a regular expression instead of a set of characters. The string is split as many times as possible. If no delimiter is found, the return value contains one element whose value is the original `input` string.  \\n  \\n The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match. For more information about regular expressions, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).  \\n  \\n> [!IMPORTANT]\\n>  Compiled regular expressions used in calls to static <xref:System.Text.RegularExpressions.Regex.Split%2A> methods are automatically cached. To manage the lifetime of compiled regular expressions yourself, use the instance <xref:System.Text.RegularExpressions.Regex.Split%2A> methods.  \\n  \\n If multiple matches are adjacent to one another, an empty string is inserted into the array. For example, splitting a string on a single hyphen causes the returned array to include an empty string in the position where two adjacent hyphens are found.  \\n  \\n If a match is found at the beginning or the end of the input string, an empty string is included at the beginning or the end of the returned array. The following example uses the regular expression pattern `[a-z]+` to split an input string on any uppercase or lowercase alphabetic character. Because the string begins and ends with matching alphabetic characters, the value of the first and last element of the returned array is <xref:System.String.Empty?displayProperty=fullName>.  \\n  \\n [!code-csharp[System.Text.RegularExpressions.Regex.Split#23](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split23.cs#23)]\\n [!code-vb[System.Text.RegularExpressions.Regex.Split#23](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split23.vb#23)]  \\n  \\n If capturing parentheses are used in a <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=fullName> expression, any captured text is included in the resulting string array. For example, if you split the string \\\"plum-pear\\\" on a hyphen placed within capturing parentheses, the returned array includes a string element that contains the hyphen.  \\n  \\n [!code-csharp[System.Text.RegularExpressions.Regex.Split#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split9.cs#9)]\\n [!code-vb[System.Text.RegularExpressions.Regex.Split#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split9.vb#9)]  \\n  \\n However, when the regular expression pattern includes multiple sets of capturing parentheses, the behavior of this method depends on the version of the .NET Framework. In the .NET Framework 1.0 and 1.1, if a match is not found within the first set of capturing parentheses, captured text from additional capturing parentheses is not included in the returned array. Starting with the .NET Framework 2.0, all captured text is also added to the returned array. For example, the following code uses two sets of capturing parentheses to extract the elements of a date, including the date delimiters, from a date string. The first set of capturing parentheses captures the hyphen, and the second set captures the forward slash. If the example code is compiled and run under the .NET Framework 1.0 or 1.1, it excludes the slash characters; if it is compiled and run under the .NET Framework 2.0 or later versions, it includes them.  \\n  \\n [!code-csharp[System.Text.RegularExpressions.Regex.Split#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split10.cs#10)]\\n [!code-vb[System.Text.RegularExpressions.Regex.Split#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split10.vb#10)]  \\n  \\n If the regular expression can match the empty string, <xref:System.Text.RegularExpressions.Regex.Split%2A> will split the string into an array of single-character strings because the empty string delimiter can be found at every location.  \\n  \\n The `matchTimeout` parameter specifies how long a pattern matching method should try to find a match before it times out. Setting a time-out interval prevents regular expressions that rely on excessive backtracking from appearing to stop responding when they process input that contains near matches. For more information, see [Best Practices for Regular Expressions](~/docs/standard/base-types/best-practices.md) and [Backtracking](~/docs/standard/base-types/backtracking-in-regular-expressions.md). If no match is found in that time interval, the method throws a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception. `matchTimeout` overrides any default time-out value defined for the application domain in which the method executes.\"\n  syntax:\n    content: public static string[] Split (string input, string pattern, System.Text.RegularExpressions.RegexOptions options, TimeSpan matchTimeout);\n    parameters:\n    - id: input\n      type: System.String\n      description: The string to split.\n    - id: pattern\n      type: System.String\n      description: The regular expression pattern to match.\n    - id: options\n      type: System.Text.RegularExpressions.RegexOptions\n      description: A bitwise combination of the enumeration values that provide options for matching.\n    - id: matchTimeout\n      type: System.TimeSpan\n      description: A time-out interval, or <xref href=\"System.Text.RegularExpressions.Regex.InfiniteMatchTimeout\"></xref> to indicate that the method should not time out.\n    return:\n      type: System.String[]\n      description: A string array.\n  overload: System.Text.RegularExpressions.Regex.Split*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: A regular expression parsing error occurred.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>input</code> or <code>pattern</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>options</code> is not a valid bitwise combination of <xref href=\\\"System.Text.RegularExpressions.RegexOptions\\\"></xref> values.  \\n  \\n -or-  \\n  \\n <code>matchTimeout</code> is negative, zero, or greater than approximately 24 days.\"\n  - type: System.Text.RegularExpressions.RegexMatchTimeoutException\n    commentId: T:System.Text.RegularExpressions.RegexMatchTimeoutException\n    description: A time-out occurred. For more information about time-outs, see the Remarks section.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/Regex.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.RegularExpressions.Regex.Split(System.String,System.String,System.Text.RegularExpressions.RegexOptions)\n  commentId: M:System.Text.RegularExpressions.Regex.Split(System.String,System.String,System.Text.RegularExpressions.RegexOptions)\n  id: Split(System.String,System.String,System.Text.RegularExpressions.RegexOptions)\n  parent: System.Text.RegularExpressions.Regex\n  langs:\n  - csharp\n  name: Split(String, String, RegexOptions)\n  nameWithType: Regex.Split(String, String, RegexOptions)\n  fullName: Regex.Split(String, String, RegexOptions)\n  type: Method\n  assemblies:\n  - System.Text.RegularExpressions\n  - System\n  - netstandard\n  namespace: System.Text.RegularExpressions\n  summary: Splits an input string into an array of substrings at the positions defined by a specified regular expression pattern. Specified options modify the matching operation.\n  remarks: \"The <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=fullName> methods are similar to the <xref:System.String.Split%28System.Char%5B%5D%29?displayProperty=fullName> method, except that <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=fullName> splits the string at a delimiter determined by a regular expression instead of a set of characters. The string is split as many times as possible. If no delimiter is found, the return value contains one element whose value is the original `input` string.  \\n  \\n The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match. For more information about regular expressions, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).  \\n  \\n> [!IMPORTANT]\\n>  Compiled regular expressions used in calls to static <xref:System.Text.RegularExpressions.Regex.Split%2A> methods are automatically cached. To manage the lifetime of compiled regular expressions yourself, use the instance <xref:System.Text.RegularExpressions.Regex.Split%2A> methods.  \\n  \\n If multiple matches are adjacent to one another, an empty string is inserted into the array. For example, splitting a string on a single hyphen causes the returned array to include an empty string in the position where two adjacent hyphens are found.  \\n  \\n If a match is found at the beginning or the end of the input string, an empty string is included at the beginning or the end of the returned array. The following example uses the regular expression pattern `[a-z]+` to split an input string on any uppercase or lowercase alphabetic character. Because the string begins and ends with matching alphabetic characters, the value of the first and last element of the returned array is <xref:System.String.Empty?displayProperty=fullName>.  \\n  \\n [!code-csharp[System.Text.RegularExpressions.Regex.Split#24](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split24.cs#24)]\\n [!code-vb[System.Text.RegularExpressions.Regex.Split#24](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split24.vb#24)]  \\n  \\n If capturing parentheses are used in a <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=fullName> expression, any captured text is included in the resulting string array. For example, if you split the string \\\"plum-pear\\\" on a hyphen placed within capturing parentheses, the returned array includes a string element that contains the hyphen.  \\n  \\n [!code-csharp[System.Text.RegularExpressions.Regex.Split#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split9.cs#9)]\\n [!code-vb[System.Text.RegularExpressions.Regex.Split#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split9.vb#9)]  \\n  \\n However, when the regular expression pattern includes multiple sets of capturing parentheses, the behavior of this method depends on the version of the .NET Framework. In the .NET Framework 1.0 and 1.1, if a match is not found within the first set of capturing parentheses, captured text from additional capturing parentheses is not included in the returned array. Starting with the .NET Framework 2.0, all captured text is also added to the returned array. For example, the following code uses two sets of capturing parentheses to extract the elements of a date, including the date delimiters, from a date string. The first set of capturing parentheses captures the hyphen, and the second set captures the forward slash. If the example code is compiled and run under the .NET Framework 1.0 or 1.1, it excludes the slash characters; if it is compiled and run under the .NET Framework 2.0 or later versions, it includes them.  \\n  \\n [!code-csharp[System.Text.RegularExpressions.Regex.Split#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split10.cs#10)]\\n [!code-vb[System.Text.RegularExpressions.Regex.Split#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split10.vb#10)]  \\n  \\n If the regular expression can match the empty string, <xref:System.Text.RegularExpressions.Regex.Split%2A> will split the string into an array of single-character strings because the empty string delimiter can be found at every location.  \\n  \\n The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the split operation exceeds the time-out interval specified for the application domain in which the method is called. If no time-out is defined in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, no exception is thrown.\"\n  syntax:\n    content: public static string[] Split (string input, string pattern, System.Text.RegularExpressions.RegexOptions options);\n    parameters:\n    - id: input\n      type: System.String\n      description: The string to split.\n    - id: pattern\n      type: System.String\n      description: The regular expression pattern to match.\n    - id: options\n      type: System.Text.RegularExpressions.RegexOptions\n      description: A bitwise combination of the enumeration values that provide options for matching.\n    return:\n      type: System.String[]\n      description: An array of strings.\n  overload: System.Text.RegularExpressions.Regex.Split*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: A regular expression parsing error occurred.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>input</code> or <code>pattern</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>options</code> is not a valid bitwise combination of <xref href=\"System.Text.RegularExpressions.RegexOptions\"></xref> values.\n  - type: System.Text.RegularExpressions.RegexMatchTimeoutException\n    commentId: T:System.Text.RegularExpressions.RegexMatchTimeoutException\n    description: A time-out occurred. For more information about time-outs, see the Remarks section.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/Regex.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.RegularExpressions.Regex.Split(System.String,System.Int32,System.Int32)\n  commentId: M:System.Text.RegularExpressions.Regex.Split(System.String,System.Int32,System.Int32)\n  id: Split(System.String,System.Int32,System.Int32)\n  parent: System.Text.RegularExpressions.Regex\n  langs:\n  - csharp\n  name: Split(String, Int32, Int32)\n  nameWithType: Regex.Split(String, Int32, Int32)\n  fullName: Regex.Split(String, Int32, Int32)\n  type: Method\n  assemblies:\n  - System.Text.RegularExpressions\n  - System\n  - netstandard\n  namespace: System.Text.RegularExpressions\n  summary: Splits an input string a specified maximum number of times into an array of substrings, at the positions defined by a regular expression specified in the <xref href=\"System.Text.RegularExpressions.Regex\"></xref> constructor. The search for the regular expression pattern starts at a specified character position in the input string.\n  remarks: \"The <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=fullName> methods are similar to the <xref:System.String.Split%2A?displayProperty=fullName> method, except that <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=fullName> splits the string at a delimiter determined by a regular expression instead of a set of characters. The `count` parameter specifies the maximum number of substrings into which the `input` string is split; the last string contains the unsplit remainder of the string. A `count` value of zero provides the default behavior of splitting as many times as possible. The `startat` parameter defines the point at which the search for the first delimiter begins (this can be used for skipping leading white space).  \\n  \\n If no matches are found from the `count`+1 position in the string, the method returns a one-element array that contains the `input` string. If one or more matches are found, the first element of the returned array contains the first portion of the string from the first character up to one character before the match.  \\n  \\n If multiple matches are adjacent to one another and the number of matches found is at least two less than `count`, an empty string is inserted into the array. Similarly, if a match is found at `startat`, which is the first character in the string, the first element of the returned array is an empty string. That is, empty strings that result from adjacent matches are counted in determining whether the number of matched substrings equals `count`. In the following example, the regular expression `\\\\d+` is used to find the starting position of the first substring of numeric characters in a string, and then to split the string a maximum of three times starting at that position. Because the regular expression pattern matches the beginning of the input string, the returned string array consists of an empty string, a five-character alphabetic string, and the remainder of the string,  \\n  \\n [!code-csharp[System.Text.RegularExpressions.Regex.Split#26](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split26.cs#26)]\\n [!code-vb[System.Text.RegularExpressions.Regex.Split#26](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split26.vb#26)]  \\n  \\n If capturing parentheses are used in a regular expression, any captured text is included in the array of split strings. However, any array elements that contain captured text are not counted in determining whether the number of matches has reached `count`. For example, splitting the string '\\\"apple-apricot-plum-pear-pomegranate-pineapple-peach\\\" into a maximum of four substrings beginning at character 15 in the string results in a seven-element array, as the following code shows.  \\n  \\n [!code-vb[System.Text.RegularExpressions.Regex.Split#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split6.vb#6)]  \\n  \\n However, when the regular expression pattern includes multiple sets of capturing parentheses, the behavior of this method depends on the version of the .NET Framework. In .NET Framework 1.0 and 1.1, if a match is not found within the first set of capturing parentheses, captured text from additional capturing parentheses is not included in the returned array. Starting with the .NET Framework 2.0, all captured text is also added to the returned array. For example, the following code uses two sets of capturing parentheses to extract the individual words in a string. The first set of capturing parentheses captures the hyphen, and the second set captures the vertical bar. If the example code is compiled and run under the .NET Framework 1.0 or 1.1, it excludes the vertical bar characters; if it is compiled and run under the .NET Framework 2.0 or later versions, it includes them.  \\n  \\n [!code-csharp[System.Text.RegularExpressions.Regex.Split#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split7.cs#7)]\\n [!code-vb[System.Text.RegularExpressions.Regex.Split#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split7.vb#7)]  \\n  \\n If the regular expression can match the empty string, <xref:System.Text.RegularExpressions.Regex.Split%2A> will split the string into an array of single-character strings because the empty string delimiter can be found at every location. The following example splits the string \\\"characters\\\" into as many elements as the input string contains, starting with the character \\\"a\\\". Because the null string matches the end of the input string, a null string is inserted at the end of the returned array.  \\n  \\n [!code-csharp[System.Text.RegularExpressions.Regex.Split#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split14.cs#14)]\\n [!code-vb[System.Text.RegularExpressions.Regex.Split#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split14.vb#14)]  \\n  \\n The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the split operation exceeds the time-out interval specified by the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=fullName> constructor. If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <xref:System.Text.RegularExpressions.Regex> object is created. If no time-out is defined in the <xref:System.Text.RegularExpressions.Regex> constructor call or in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, no exception is thrown\"\n  syntax:\n    content: public string[] Split (string input, int count, int startat);\n    parameters:\n    - id: input\n      type: System.String\n      description: The string to be split.\n    - id: count\n      type: System.Int32\n      description: The maximum number of times the split can occur.\n    - id: startat\n      type: System.Int32\n      description: The character position in the input string where the search will begin.\n    return:\n      type: System.String[]\n      description: An array of strings.\n  overload: System.Text.RegularExpressions.Regex.Split*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>input</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>startat</code> is less than zero or greater than the length of <code>input</code>.\n  - type: System.Text.RegularExpressions.RegexMatchTimeoutException\n    commentId: T:System.Text.RegularExpressions.RegexMatchTimeoutException\n    description: A time-out occurred. For more information about time-outs, see the Remarks section.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/Regex.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.RegularExpressions.Regex.Split(System.String,System.Int32)\n  commentId: M:System.Text.RegularExpressions.Regex.Split(System.String,System.Int32)\n  id: Split(System.String,System.Int32)\n  parent: System.Text.RegularExpressions.Regex\n  langs:\n  - csharp\n  name: Split(String, Int32)\n  nameWithType: Regex.Split(String, Int32)\n  fullName: Regex.Split(String, Int32)\n  type: Method\n  assemblies:\n  - System.Text.RegularExpressions\n  - System\n  - netstandard\n  namespace: System.Text.RegularExpressions\n  summary: Splits an input string a specified maximum number of times into an array of substrings, at the positions defined by a regular expression specified in the <xref href=\"System.Text.RegularExpressions.Regex\"></xref> constructor.\n  remarks: \"The <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=fullName> methods are similar to the <xref:System.String.Split%2A?displayProperty=fullName> method, except that <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=fullName> splits the string at a delimiter determined by a regular expression instead of a set of characters. The `count` parameter specifies the maximum number of substrings into which the `input` string can be split; the last string contains the unsplit remainder of the string. A `count` value of zero provides the default behavior of splitting as many times as possible.  \\n  \\n If multiple matches are adjacent to one another or if a match is found at the beginning or end of `input`, and the number of matches found is at least two less than `count`, an empty string is inserted into the array. That is, empty strings that result from adjacent matches or from matches at the beginning or end of the input string are counted in determining whether the number of matched substrings equals `count`. In the following example, the regular expression `/d+` is used to split an input string that includes one or more decimal digits into a maximum of three substrings. Because the beginning of the input string matches the regular expression pattern, the first array element contains <xref:System.String.Empty?displayProperty=fullName>, the second contains the first set of alphabetic characters in the input string, and the third contains the remainder of the string that follows the third match.  \\n  \\n [!code-csharp[System.Text.RegularExpressions.Regex.Split#25](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split25.cs#25)]\\n [!code-vb[System.Text.RegularExpressions.Regex.Split#25](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split25.vb#25)]  \\n  \\n If capturing parentheses are used in a regular expression, any captured text is included in the array of split strings. However, any array elements that contain captured text are not counted in determining whether the number of matches has reached `count`. For example, splitting the string \\\"apple-apricot-plum-pear-banana\\\" into a maximum of four substrings results in a seven-element array, as the following code shows.  \\n  \\n [!code-csharp[System.Text.RegularExpressions.Regex.Split#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split4.cs#4)]\\n [!code-vb[System.Text.RegularExpressions.Regex.Split#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split4.vb#4)]  \\n  \\n However, when the regular expression pattern includes multiple sets of capturing parentheses, the behavior of this method depends on the version of the .NET Framework. In the .NET Framework 1.0 and 1.1, only captured text from the first set of capturing parentheses is included in the returned array. Starting with the .NET Framework 2.0, all captured text is added to the returned array. However, elements in the returned array that contain captured text are not counted in determining whether the number of matched substrings equals `count`. For example, in the following code, a regular expression uses two sets of capturing parentheses to extract the elements of a date from a date string. The first set of capturing parentheses captures the hyphen, and the second set captures the forward slash. The call to the <xref:System.Text.RegularExpressions.Regex.Split%28System.String%2CSystem.Int32%29> method then specifies a maximum of two elements in the returned array. If the example code is compiled and run under the .NET Framework 1.0 or 1.1, the method returns a two-element string array. If it is compiled and run under the .NET Framework 2.0 or later versions, the method returns a three-element string array.  \\n  \\n [!code-csharp[System.Text.RegularExpressions.Regex.Split#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split5.cs#5)]\\n [!code-vb[System.Text.RegularExpressions.Regex.Split#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split5.vb#5)]  \\n  \\n If the regular expression can match the empty string, <xref:System.Text.RegularExpressions.Regex.Split%28System.String%2CSystem.Int32%29> will split the string into an array of single-character strings because the empty string delimiter can be found at every location. The following example splits the string \\\"characters\\\" into as many elements as there are in the input string. Because the null string matches the beginning of the input string, a null string is inserted at the beginning of the returned array. This causes the tenth element to consist of the two characters at the end of the input string.  \\n  \\n [!code-vb[System.Text.RegularExpressions.Regex.Split#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split12.vb#12)]  \\n  \\n The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the split operation exceeds the time-out interval specified by the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=fullName> constructor. If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <xref:System.Text.RegularExpressions.Regex> object is created. If no time-out is defined in the <xref:System.Text.RegularExpressions.Regex> constructor call or in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, no exception is thrown\"\n  syntax:\n    content: public string[] Split (string input, int count);\n    parameters:\n    - id: input\n      type: System.String\n      description: The string to be split.\n    - id: count\n      type: System.Int32\n      description: The maximum number of times the split can occur.\n    return:\n      type: System.String[]\n      description: An array of strings.\n  overload: System.Text.RegularExpressions.Regex.Split*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>input</code> is `null`.\n  - type: System.Text.RegularExpressions.RegexMatchTimeoutException\n    commentId: T:System.Text.RegularExpressions.RegexMatchTimeoutException\n    description: A time-out occurred. For more information about time-outs, see the Remarks section.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/Regex.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.RegularExpressions.Regex.Split(System.String)\n  commentId: M:System.Text.RegularExpressions.Regex.Split(System.String)\n  id: Split(System.String)\n  parent: System.Text.RegularExpressions.Regex\n  langs:\n  - csharp\n  name: Split(String)\n  nameWithType: Regex.Split(String)\n  fullName: Regex.Split(String)\n  type: Method\n  assemblies:\n  - System.Text.RegularExpressions\n  - System\n  - netstandard\n  namespace: System.Text.RegularExpressions\n  summary: Splits an input string into an array of substrings at the positions defined by a regular expression pattern specified in the <xref href=\"System.Text.RegularExpressions.Regex\"></xref> constructor.\n  remarks: \"The <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=fullName> methods are similar to the <xref:System.String.Split%28System.Char%5B%5D%29?displayProperty=fullName> method, except that <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=fullName> splits the string at a delimiter determined by a regular expression instead of a set of characters. The string is split as many times as possible. If no delimiter is found, the return value contains one element whose value is the original input string.  \\n  \\n If multiple matches are adjacent to one another, an empty string is inserted into the array. For example, splitting a string on a single hyphen causes the returned array to include an empty string in the position where two adjacent hyphens are found, as the following code shows.  \\n  \\n [!code-csharp[System.Text.RegularExpressions.Regex.Split#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split1.cs#1)]\\n [!code-vb[System.Text.RegularExpressions.Regex.Split#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split1.vb#1)]  \\n  \\n If a match is found at the beginning or the end of the input string, an empty string is included at the beginning or the end of the returned array. The following example uses the regular expression pattern `\\\\d+` to split an input string on numeric characters. Because the string begins and ends with matching numeric characters, the value of the first and last element of the returned array is <xref:System.String.Empty?displayProperty=fullName>.  \\n  \\n [!code-csharp[System.Text.RegularExpressions.Regex.Split#21](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split21.cs#21)]\\n [!code-vb[System.Text.RegularExpressions.Regex.Split#21](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split21.vb#21)]  \\n  \\n If capturing parentheses are used in a <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=fullName> expression, any captured text is included in the resulting string array. For example, if you split the string \\\"plum-pear\\\" on a hyphen placed within capturing parentheses, the returned array includes a string element that contains the hyphen.  \\n  \\n [!code-csharp[System.Text.RegularExpressions.Regex.Split#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split2.cs#2)]\\n [!code-vb[System.Text.RegularExpressions.Regex.Split#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split2.vb#2)]  \\n  \\n However, when the regular expression pattern includes multiple sets of capturing parentheses, the behavior of this method depends on the version of the .NET Framework. In the .NET Framework 1.0 and 1.1, if a match is not found within the first set of capturing parentheses, captured text from additional capturing parentheses is not included in the returned array. Starting with the .NET Framework 2.0, all captured text is also added to the returned array. For example, the following code uses two sets of capturing parentheses to extract the elements of a date, including the date delimiters, from a date string. The first set of capturing parentheses captures the hyphen, and the second set captures the forward slash. If the example code is compiled and run under the .NET Framework 1.0 or 1.1, it excludes the slash characters; if it is compiled and run under the .NET Framework 2.0 or later versions, it includes them.  \\n  \\n [!code-csharp[System.Text.RegularExpressions.Regex.Split#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split3.cs#3)]\\n [!code-vb[System.Text.RegularExpressions.Regex.Split#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split3.vb#3)]  \\n  \\n If the regular expression can match the empty string, <xref:System.Text.RegularExpressions.Regex.Split%28System.String%29> will split the string into an array of single-character strings because the empty string delimiter can be found at every location. For example:  \\n  \\n [!code-csharp[System.Text.RegularExpressions.Regex.Split#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split11.cs#11)]\\n [!code-vb[System.Text.RegularExpressions.Regex.Split#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split11.vb#11)]  \\n  \\n Note that the returned array also includes an empty string at the beginning and end of the array.  \\n  \\n The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the split operation exceeds the time-out interval specified by the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=fullName> constructor. If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <xref:System.Text.RegularExpressions.Regex> object is created. If no time-out is defined in the <xref:System.Text.RegularExpressions.Regex> constructor call or in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, no exception is thrown\"\n  syntax:\n    content: public string[] Split (string input);\n    parameters:\n    - id: input\n      type: System.String\n      description: The string to split.\n    return:\n      type: System.String[]\n      description: An array of strings.\n  overload: System.Text.RegularExpressions.Regex.Split*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>input</code> is `null`.\n  - type: System.Text.RegularExpressions.RegexMatchTimeoutException\n    commentId: T:System.Text.RegularExpressions.RegexMatchTimeoutException\n    description: A time-out occurred. For more information about time-outs, see the Remarks section.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/Regex.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.RegularExpressions.Regex.Split(System.String,System.String)\n  commentId: M:System.Text.RegularExpressions.Regex.Split(System.String,System.String)\n  id: Split(System.String,System.String)\n  parent: System.Text.RegularExpressions.Regex\n  langs:\n  - csharp\n  name: Split(String, String)\n  nameWithType: Regex.Split(String, String)\n  fullName: Regex.Split(String, String)\n  type: Method\n  assemblies:\n  - System.Text.RegularExpressions\n  - System\n  - netstandard\n  namespace: System.Text.RegularExpressions\n  summary: Splits an input string into an array of substrings at the positions defined by a regular expression pattern.\n  remarks: \"The <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=fullName> methods are similar to the <xref:System.String.Split%2A?displayProperty=fullName> method, except that <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=fullName> splits the string at a delimiter determined by a regular expression instead of a set of characters. The `input` string is split as many times as possible. If `pattern` is not found in the `input` string, the return value contains one element whose value is the original `input` string.  \\n  \\n The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match. For more information about regular expressions, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).  \\n  \\n> [!IMPORTANT]\\n>  Compiled regular expressions used in calls to static <xref:System.Text.RegularExpressions.Regex.Split%2A> methods are automatically cached. To manage the lifetime of compiled regular expressions yourself, use the instance <xref:System.Text.RegularExpressions.Regex.Split%2A> methods.  \\n  \\n If multiple matches are adjacent to one another, an empty string is inserted into the array. For example, splitting a string on a single hyphen causes the returned array to include an empty string in the position where two adjacent hyphens are found, as the following code shows.  \\n  \\n [!code-csharp[System.Text.RegularExpressions.Regex.Split#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split8.cs#8)]\\n [!code-vb[System.Text.RegularExpressions.Regex.Split#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split8.vb#8)]  \\n  \\n If a match is found at the beginning or the end of the input string, an empty string is included at the beginning or the end of the returned array. The following example uses the regular expression pattern `\\\\d+` to split an input string on numeric characters. Because the string begins and ends with matching numeric characters, the value of the first and last element of the returned array is <xref:System.String.Empty?displayProperty=fullName>.  \\n  \\n [!code-csharp[System.Text.RegularExpressions.Regex.Split#22](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split22.cs#22)]\\n [!code-vb[System.Text.RegularExpressions.Regex.Split#22](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split22.vb#22)]  \\n  \\n If capturing parentheses are used in a <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=fullName> expression, any captured text is included in the resulting string array. For example, if you split the string \\\"plum-pear\\\" on a hyphen placed within capturing parentheses, the returned array includes a string element that contains the hyphen.  \\n  \\n [!code-csharp[System.Text.RegularExpressions.Regex.Split#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split9.cs#9)]\\n [!code-vb[System.Text.RegularExpressions.Regex.Split#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split9.vb#9)]  \\n  \\n However, when the regular expression pattern includes multiple sets of capturing parentheses, the behavior of this method depends on the version of the .NET Framework. In the .NET Framework 1.0 and 1.1, if a match is not found within the first set of capturing parentheses, captured text from additional capturing parentheses is not included in the returned array. Starting with the .NET Framework 2.0, all captured text is also added to the returned array. For example, the following code uses two sets of capturing parentheses to extract the elements of a date, including the date delimiters, from a date string. The first set of capturing parentheses captures the hyphen, and the second set captures the forward slash. If the example code is compiled and run under the .NET Framework 1.0 or 1.1, it excludes the slash characters; if it is compiled and run under the .NET Framework 2.0 or later versions, it includes them.  \\n  \\n [!code-csharp[System.Text.RegularExpressions.Regex.Split#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split10.cs#10)]\\n [!code-vb[System.Text.RegularExpressions.Regex.Split#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split10.vb#10)]  \\n  \\n If the regular expression can match the empty string, <xref:System.Text.RegularExpressions.Regex.Split%2A> will split the string into an array of single-character strings because the empty string delimiter can be found at every location. For example:  \\n  \\n [!code-csharp[System.Text.RegularExpressions.Regex.Split#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split13.cs#13)]\\n [!code-vb[System.Text.RegularExpressions.Regex.Split#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split13.vb#13)]  \\n  \\n Note that the returned array also includes an empty string at the beginning and end of the array.  \\n  \\n The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the split operation exceeds the time-out interval specified for the application domain in which the method is called. If no time-out is defined in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, no exception is thrown.\"\n  syntax:\n    content: public static string[] Split (string input, string pattern);\n    parameters:\n    - id: input\n      type: System.String\n      description: The string to split.\n    - id: pattern\n      type: System.String\n      description: The regular expression pattern to match.\n    return:\n      type: System.String[]\n      description: An array of strings.\n  overload: System.Text.RegularExpressions.Regex.Split*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: A regular expression parsing error occurred.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>input</code> or <code>pattern</code> is `null`.\n  - type: System.Text.RegularExpressions.RegexMatchTimeoutException\n    commentId: T:System.Text.RegularExpressions.RegexMatchTimeoutException\n    description: A time-out occurred. For more information about time-outs, see the Remarks section.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/Regex.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.RegularExpressions.Regex.ToString\n  commentId: M:System.Text.RegularExpressions.Regex.ToString\n  id: ToString\n  parent: System.Text.RegularExpressions.Regex\n  langs:\n  - csharp\n  name: ToString()\n  nameWithType: Regex.ToString()\n  fullName: Regex.ToString()\n  type: Method\n  assemblies:\n  - System.Text.RegularExpressions\n  - System\n  - netstandard\n  namespace: System.Text.RegularExpressions\n  summary: Returns the regular expression pattern that was passed into the `Regex` constructor.\n  remarks: The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match. For more information about regular expressions, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).\n  syntax:\n    content: public override string ToString ();\n    parameters: []\n    return:\n      type: System.String\n      description: The <code>pattern</code> parameter that was passed into the `Regex` constructor.\n  overload: System.Text.RegularExpressions.Regex.ToString*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/Regex.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.RegularExpressions.Regex.Unescape(System.String)\n  commentId: M:System.Text.RegularExpressions.Regex.Unescape(System.String)\n  id: Unescape(System.String)\n  parent: System.Text.RegularExpressions.Regex\n  langs:\n  - csharp\n  name: Unescape(String)\n  nameWithType: Regex.Unescape(String)\n  fullName: Regex.Unescape(String)\n  type: Method\n  assemblies:\n  - System.Text.RegularExpressions\n  - System\n  - netstandard\n  namespace: System.Text.RegularExpressions\n  summary: Converts any escaped characters in the input string.\n  remarks: \"The <xref:System.Text.RegularExpressions.Regex.Unescape%2A> method performs one of the following two transformations:  \\n  \\n-   It reverses the transformation performed by the <xref:System.Text.RegularExpressions.Regex.Escape%2A> method by removing the escape character (\\\"\\\\\\\\\\\") from each character escaped by the method. These include the \\\\\\\\, *, +, ?, &#124;, {, [, (,), ^, $,., #, and white space characters. In addition, the <xref:System.Text.RegularExpressions.Regex.Unescape%2A> method unescapes the closing bracket (]) and closing brace (}) characters.  \\n  \\n> [!NOTE]\\n>  <xref:System.Text.RegularExpressions.Regex.Unescape%2A> cannot reverse an escaped string perfectly because it cannot deduce precisely which characters were escaped,  \\n  \\n-   It replaces the representation of unprintable characters with the characters themselves. For example, it replaces \\\\a with \\\\x07. The character representations it replaces are \\\\a, \\\\b, \\\\e, \\\\n, \\\\r, \\\\f, \\\\t, and \\\\v.  \\n  \\n If the <xref:System.Text.RegularExpressions.Regex.Unescape%2A> method encounters other escape sequences that it cannot convert, such as \\\\w or \\\\s, it throws an <xref:System.ArgumentException>.\"\n  syntax:\n    content: public static string Unescape (string str);\n    parameters:\n    - id: str\n      type: System.String\n      description: The input string containing the text to convert.\n    return:\n      type: System.String\n      description: A string of characters with any escaped characters converted to their unescaped form.\n  overload: System.Text.RegularExpressions.Regex.Unescape*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>str</code> includes an unrecognized escape sequence.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>str</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/Regex.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.RegularExpressions.Regex.UseOptionC\n  commentId: M:System.Text.RegularExpressions.Regex.UseOptionC\n  id: UseOptionC\n  parent: System.Text.RegularExpressions.Regex\n  langs:\n  - csharp\n  name: UseOptionC()\n  nameWithType: Regex.UseOptionC()\n  fullName: Regex.UseOptionC()\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  summary: Used by a <xref href=\"System.Text.RegularExpressions.Regex\"></xref> object generated by the <xref href=\"System.Text.RegularExpressions.Regex.CompileToAssembly*\"></xref> method.\n  syntax:\n    content: protected bool UseOptionC ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: '`true` if the <xref href=\"System.Text.RegularExpressions.Regex.Options\"></xref> property contains the <xref href=\"System.Text.RegularExpressions.RegexOptions.Compiled\"></xref> option; otherwise, `false`.'\n  overload: System.Text.RegularExpressions.Regex.UseOptionC*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/Regex.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.RegularExpressions.Regex.UseOptionR\n  commentId: M:System.Text.RegularExpressions.Regex.UseOptionR\n  id: UseOptionR\n  parent: System.Text.RegularExpressions.Regex\n  langs:\n  - csharp\n  name: UseOptionR()\n  nameWithType: Regex.UseOptionR()\n  fullName: Regex.UseOptionR()\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  summary: Used by a <xref href=\"System.Text.RegularExpressions.Regex\"></xref> object generated by the <xref href=\"System.Text.RegularExpressions.Regex.CompileToAssembly*\"></xref> method.\n  syntax:\n    content: protected bool UseOptionR ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: '`true` if the <xref href=\"System.Text.RegularExpressions.Regex.Options\"></xref> property contains the <xref href=\"System.Text.RegularExpressions.RegexOptions.RightToLeft\"></xref> option; otherwise, `false`.'\n  overload: System.Text.RegularExpressions.Regex.UseOptionR*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/Regex.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.RegularExpressions.Regex.ValidateMatchTimeout(System.TimeSpan)\n  commentId: M:System.Text.RegularExpressions.Regex.ValidateMatchTimeout(System.TimeSpan)\n  id: ValidateMatchTimeout(System.TimeSpan)\n  parent: System.Text.RegularExpressions.Regex\n  langs:\n  - csharp\n  name: ValidateMatchTimeout(TimeSpan)\n  nameWithType: Regex.ValidateMatchTimeout(TimeSpan)\n  fullName: Regex.ValidateMatchTimeout(TimeSpan)\n  type: Method\n  assemblies:\n  - System.Text.RegularExpressions\n  - System\n  - netstandard\n  namespace: System.Text.RegularExpressions\n  summary: Checks whether a time-out interval is within an acceptable range.\n  syntax:\n    content: protected static void ValidateMatchTimeout (TimeSpan matchTimeout);\n    parameters:\n    - id: matchTimeout\n      type: System.TimeSpan\n      description: The time-out interval to check.\n  overload: System.Text.RegularExpressions.Regex.ValidateMatchTimeout*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/Regex.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.RegularExpressions.Regex.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  commentId: M:System.Text.RegularExpressions.Regex.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  id: System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  isEii: true\n  parent: System.Text.RegularExpressions.Regex\n  langs:\n  - csharp\n  name: ISerializable.GetObjectData(SerializationInfo, StreamingContext)\n  nameWithType: Regex.ISerializable.GetObjectData(SerializationInfo, StreamingContext)\n  fullName: Regex.ISerializable.GetObjectData(SerializationInfo, StreamingContext)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  summary: Populates a <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> object with the data necessary to deserialize the current <xref href=\"System.Text.RegularExpressions.Regex\"></xref> object.\n  syntax:\n    content: void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo si, System.Runtime.Serialization.StreamingContext context);\n    parameters:\n    - id: si\n      type: System.Runtime.Serialization.SerializationInfo\n      description: The object to populate with serialization information.\n    - id: context\n      type: System.Runtime.Serialization.StreamingContext\n      description: The place to store and retrieve serialized data. This parameter is reserved for future use.\n  overload: System.Text.RegularExpressions.Regex.System#Runtime#Serialization#ISerializable#GetObjectData*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/Regex.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.ArgumentOutOfRangeException\n  parent: System\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n- uid: System.Runtime.InteropServices.COMException\n  parent: System.Runtime.InteropServices\n  isExternal: false\n  name: COMException\n  nameWithType: COMException\n  fullName: System.Runtime.InteropServices.COMException\n- uid: System.IO.FileNotFoundException\n  parent: System.IO\n  isExternal: false\n  name: FileNotFoundException\n  nameWithType: FileNotFoundException\n  fullName: System.IO.FileNotFoundException\n- uid: System.NotSupportedException\n  parent: System\n  isExternal: false\n  name: NotSupportedException\n  nameWithType: NotSupportedException\n  fullName: System.NotSupportedException\n- uid: System.Text.RegularExpressions.RegexMatchTimeoutException\n  parent: System.Text.RegularExpressions\n  isExternal: false\n  name: RegexMatchTimeoutException\n  nameWithType: RegexMatchTimeoutException\n  fullName: System.Text.RegularExpressions.RegexMatchTimeoutException\n- uid: System.Text.RegularExpressions.Regex.#ctor\n  parent: System.Text.RegularExpressions.Regex\n  isExternal: false\n  name: Regex()\n  nameWithType: Regex.Regex()\n  fullName: Regex.Regex()\n- uid: System.Text.RegularExpressions.Regex.#ctor(System.String)\n  parent: System.Text.RegularExpressions.Regex\n  isExternal: false\n  name: Regex(String)\n  nameWithType: Regex.Regex(String)\n  fullName: Regex.Regex(String)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Text.RegularExpressions.Regex.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  parent: System.Text.RegularExpressions.Regex\n  isExternal: false\n  name: Regex(SerializationInfo, StreamingContext)\n  nameWithType: Regex.Regex(SerializationInfo, StreamingContext)\n  fullName: Regex.Regex(SerializationInfo, StreamingContext)\n- uid: System.Runtime.Serialization.SerializationInfo\n  parent: System.Runtime.Serialization\n  isExternal: false\n  name: SerializationInfo\n  nameWithType: SerializationInfo\n  fullName: System.Runtime.Serialization.SerializationInfo\n- uid: System.Runtime.Serialization.StreamingContext\n  parent: System.Runtime.Serialization\n  isExternal: false\n  name: StreamingContext\n  nameWithType: StreamingContext\n  fullName: System.Runtime.Serialization.StreamingContext\n- uid: System.Text.RegularExpressions.Regex.#ctor(System.String,System.Text.RegularExpressions.RegexOptions)\n  parent: System.Text.RegularExpressions.Regex\n  isExternal: false\n  name: Regex(String, RegexOptions)\n  nameWithType: Regex.Regex(String, RegexOptions)\n  fullName: Regex.Regex(String, RegexOptions)\n- uid: System.Text.RegularExpressions.RegexOptions\n  parent: System.Text.RegularExpressions\n  isExternal: false\n  name: RegexOptions\n  nameWithType: RegexOptions\n  fullName: System.Text.RegularExpressions.RegexOptions\n- uid: System.Text.RegularExpressions.Regex.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)\n  parent: System.Text.RegularExpressions.Regex\n  isExternal: false\n  name: Regex(String, RegexOptions, TimeSpan)\n  nameWithType: Regex.Regex(String, RegexOptions, TimeSpan)\n  fullName: Regex.Regex(String, RegexOptions, TimeSpan)\n- uid: System.TimeSpan\n  parent: System\n  isExternal: false\n  name: TimeSpan\n  nameWithType: TimeSpan\n  fullName: System.TimeSpan\n- uid: System.Text.RegularExpressions.Regex.CacheSize\n  parent: System.Text.RegularExpressions.Regex\n  isExternal: false\n  name: CacheSize\n  nameWithType: Regex.CacheSize\n  fullName: Regex.CacheSize\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Text.RegularExpressions.Regex.capnames\n  parent: System.Text.RegularExpressions.Regex\n  isExternal: false\n  name: capnames\n  nameWithType: Regex.capnames\n  fullName: Regex.capnames\n- uid: System.Collections.Hashtable\n  parent: System.Collections\n  isExternal: false\n  name: Hashtable\n  nameWithType: Hashtable\n  fullName: System.Collections.Hashtable\n- uid: System.Text.RegularExpressions.Regex.CapNames\n  parent: System.Text.RegularExpressions.Regex\n  isExternal: false\n  name: CapNames\n  nameWithType: Regex.CapNames\n  fullName: Regex.CapNames\n- uid: System.Collections.IDictionary\n  parent: System.Collections\n  isExternal: false\n  name: IDictionary\n  nameWithType: IDictionary\n  fullName: System.Collections.IDictionary\n- uid: System.Text.RegularExpressions.Regex.caps\n  parent: System.Text.RegularExpressions.Regex\n  isExternal: false\n  name: caps\n  nameWithType: Regex.caps\n  fullName: Regex.caps\n- uid: System.Text.RegularExpressions.Regex.Caps\n  parent: System.Text.RegularExpressions.Regex\n  isExternal: false\n  name: Caps\n  nameWithType: Regex.Caps\n  fullName: Regex.Caps\n- uid: System.Text.RegularExpressions.Regex.capsize\n  parent: System.Text.RegularExpressions.Regex\n  isExternal: false\n  name: capsize\n  nameWithType: Regex.capsize\n  fullName: Regex.capsize\n- uid: System.Text.RegularExpressions.Regex.capslist\n  parent: System.Text.RegularExpressions.Regex\n  isExternal: false\n  name: capslist\n  nameWithType: Regex.capslist\n  fullName: Regex.capslist\n- uid: System.String[]\n  parent: System\n  isExternal: false\n  name: String[]\n  nameWithType: String[]\n  fullName: System.String[]\n  spec.csharp:\n  - uid: System.String\n    name: String\n    nameWithType: String\n    fullName: System.String\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName)\n  parent: System.Text.RegularExpressions.Regex\n  isExternal: false\n  name: CompileToAssembly(RegexCompilationInfo[], AssemblyName)\n  nameWithType: Regex.CompileToAssembly(RegexCompilationInfo[], AssemblyName)\n  fullName: Regex.CompileToAssembly(RegexCompilationInfo[], AssemblyName)\n- uid: System.Text.RegularExpressions.RegexCompilationInfo\n  name: RegexCompilationInfo\n  nameWithType: RegexCompilationInfo\n  fullName: System.Text.RegularExpressions.RegexCompilationInfo\n- uid: System.Text.RegularExpressions.RegexCompilationInfo[]\n  parent: System.Text.RegularExpressions\n  isExternal: false\n  name: RegexCompilationInfo[]\n  nameWithType: RegexCompilationInfo[]\n  fullName: System.Text.RegularExpressions.RegexCompilationInfo[]\n  spec.csharp:\n  - uid: System.Text.RegularExpressions.RegexCompilationInfo\n    name: RegexCompilationInfo\n    nameWithType: RegexCompilationInfo\n    fullName: System.Text.RegularExpressions.RegexCompilationInfo\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Reflection.AssemblyName\n  parent: System.Reflection\n  isExternal: false\n  name: AssemblyName\n  nameWithType: AssemblyName\n  fullName: System.Reflection.AssemblyName\n- uid: System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName,System.Reflection.Emit.CustomAttributeBuilder[])\n  parent: System.Text.RegularExpressions.Regex\n  isExternal: false\n  name: CompileToAssembly(RegexCompilationInfo[], AssemblyName, CustomAttributeBuilder[])\n  nameWithType: Regex.CompileToAssembly(RegexCompilationInfo[], AssemblyName, CustomAttributeBuilder[])\n  fullName: Regex.CompileToAssembly(RegexCompilationInfo[], AssemblyName, CustomAttributeBuilder[])\n- uid: System.Reflection.Emit.CustomAttributeBuilder\n  name: CustomAttributeBuilder\n  nameWithType: CustomAttributeBuilder\n  fullName: System.Reflection.Emit.CustomAttributeBuilder\n- uid: System.Reflection.Emit.CustomAttributeBuilder[]\n  parent: System.Reflection.Emit\n  isExternal: false\n  name: CustomAttributeBuilder[]\n  nameWithType: CustomAttributeBuilder[]\n  fullName: System.Reflection.Emit.CustomAttributeBuilder[]\n  spec.csharp:\n  - uid: System.Reflection.Emit.CustomAttributeBuilder\n    name: CustomAttributeBuilder\n    nameWithType: CustomAttributeBuilder\n    fullName: System.Reflection.Emit.CustomAttributeBuilder\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName,System.Reflection.Emit.CustomAttributeBuilder[],System.String)\n  parent: System.Text.RegularExpressions.Regex\n  isExternal: false\n  name: CompileToAssembly(RegexCompilationInfo[], AssemblyName, CustomAttributeBuilder[], String)\n  nameWithType: Regex.CompileToAssembly(RegexCompilationInfo[], AssemblyName, CustomAttributeBuilder[], String)\n  fullName: Regex.CompileToAssembly(RegexCompilationInfo[], AssemblyName, CustomAttributeBuilder[], String)\n- uid: System.Text.RegularExpressions.Regex.Escape(System.String)\n  parent: System.Text.RegularExpressions.Regex\n  isExternal: false\n  name: Escape(String)\n  nameWithType: Regex.Escape(String)\n  fullName: Regex.Escape(String)\n- uid: System.Text.RegularExpressions.Regex.factory\n  parent: System.Text.RegularExpressions.Regex\n  isExternal: false\n  name: factory\n  nameWithType: Regex.factory\n  fullName: Regex.factory\n- uid: System.Text.RegularExpressions.RegexRunnerFactory\n  parent: System.Text.RegularExpressions\n  isExternal: false\n  name: RegexRunnerFactory\n  nameWithType: RegexRunnerFactory\n  fullName: System.Text.RegularExpressions.RegexRunnerFactory\n- uid: System.Text.RegularExpressions.Regex.GetGroupNames\n  parent: System.Text.RegularExpressions.Regex\n  isExternal: false\n  name: GetGroupNames()\n  nameWithType: Regex.GetGroupNames()\n  fullName: Regex.GetGroupNames()\n- uid: System.Text.RegularExpressions.Regex.GetGroupNumbers\n  parent: System.Text.RegularExpressions.Regex\n  isExternal: false\n  name: GetGroupNumbers()\n  nameWithType: Regex.GetGroupNumbers()\n  fullName: Regex.GetGroupNumbers()\n- uid: System.Int32[]\n  parent: System\n  isExternal: false\n  name: Int32[]\n  nameWithType: Int32[]\n  fullName: System.Int32[]\n  spec.csharp:\n  - uid: System.Int32\n    name: Int32\n    nameWithType: Int32\n    fullName: System.Int32\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Text.RegularExpressions.Regex.GroupNameFromNumber(System.Int32)\n  parent: System.Text.RegularExpressions.Regex\n  isExternal: false\n  name: GroupNameFromNumber(Int32)\n  nameWithType: Regex.GroupNameFromNumber(Int32)\n  fullName: Regex.GroupNameFromNumber(Int32)\n- uid: System.Text.RegularExpressions.Regex.GroupNumberFromName(System.String)\n  parent: System.Text.RegularExpressions.Regex\n  isExternal: false\n  name: GroupNumberFromName(String)\n  nameWithType: Regex.GroupNumberFromName(String)\n  fullName: Regex.GroupNumberFromName(String)\n- uid: System.Text.RegularExpressions.Regex.InfiniteMatchTimeout\n  parent: System.Text.RegularExpressions.Regex\n  isExternal: false\n  name: InfiniteMatchTimeout\n  nameWithType: Regex.InfiniteMatchTimeout\n  fullName: Regex.InfiniteMatchTimeout\n- uid: System.Text.RegularExpressions.Regex.InitializeReferences\n  parent: System.Text.RegularExpressions.Regex\n  isExternal: false\n  name: InitializeReferences()\n  nameWithType: Regex.InitializeReferences()\n  fullName: Regex.InitializeReferences()\n- uid: System.Text.RegularExpressions.Regex.internalMatchTimeout\n  parent: System.Text.RegularExpressions.Regex\n  isExternal: false\n  name: internalMatchTimeout\n  nameWithType: Regex.internalMatchTimeout\n  fullName: Regex.internalMatchTimeout\n- uid: System.Text.RegularExpressions.Regex.IsMatch(System.String)\n  parent: System.Text.RegularExpressions.Regex\n  isExternal: false\n  name: IsMatch(String)\n  nameWithType: Regex.IsMatch(String)\n  fullName: Regex.IsMatch(String)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Text.RegularExpressions.Regex.IsMatch(System.String,System.Int32)\n  parent: System.Text.RegularExpressions.Regex\n  isExternal: false\n  name: IsMatch(String, Int32)\n  nameWithType: Regex.IsMatch(String, Int32)\n  fullName: Regex.IsMatch(String, Int32)\n- uid: System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String)\n  parent: System.Text.RegularExpressions.Regex\n  isExternal: false\n  name: IsMatch(String, String)\n  nameWithType: Regex.IsMatch(String, String)\n  fullName: Regex.IsMatch(String, String)\n- uid: System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions)\n  parent: System.Text.RegularExpressions.Regex\n  isExternal: false\n  name: IsMatch(String, String, RegexOptions)\n  nameWithType: Regex.IsMatch(String, String, RegexOptions)\n  fullName: Regex.IsMatch(String, String, RegexOptions)\n- uid: System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)\n  parent: System.Text.RegularExpressions.Regex\n  isExternal: false\n  name: IsMatch(String, String, RegexOptions, TimeSpan)\n  nameWithType: Regex.IsMatch(String, String, RegexOptions, TimeSpan)\n  fullName: Regex.IsMatch(String, String, RegexOptions, TimeSpan)\n- uid: System.Text.RegularExpressions.Regex.Match(System.String,System.String,System.Text.RegularExpressions.RegexOptions)\n  parent: System.Text.RegularExpressions.Regex\n  isExternal: false\n  name: Match(String, String, RegexOptions)\n  nameWithType: Regex.Match(String, String, RegexOptions)\n  fullName: Regex.Match(String, String, RegexOptions)\n- uid: System.Text.RegularExpressions.Match\n  parent: System.Text.RegularExpressions\n  isExternal: false\n  name: Match\n  nameWithType: Match\n  fullName: System.Text.RegularExpressions.Match\n- uid: System.Text.RegularExpressions.Regex.Match(System.String,System.Int32,System.Int32)\n  parent: System.Text.RegularExpressions.Regex\n  isExternal: false\n  name: Match(String, Int32, Int32)\n  nameWithType: Regex.Match(String, Int32, Int32)\n  fullName: Regex.Match(String, Int32, Int32)\n- uid: System.Text.RegularExpressions.Regex.Match(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)\n  parent: System.Text.RegularExpressions.Regex\n  isExternal: false\n  name: Match(String, String, RegexOptions, TimeSpan)\n  nameWithType: Regex.Match(String, String, RegexOptions, TimeSpan)\n  fullName: Regex.Match(String, String, RegexOptions, TimeSpan)\n- uid: System.Text.RegularExpressions.Regex.Match(System.String,System.Int32)\n  parent: System.Text.RegularExpressions.Regex\n  isExternal: false\n  name: Match(String, Int32)\n  nameWithType: Regex.Match(String, Int32)\n  fullName: Regex.Match(String, Int32)\n- uid: System.Text.RegularExpressions.Regex.Match(System.String)\n  parent: System.Text.RegularExpressions.Regex\n  isExternal: false\n  name: Match(String)\n  nameWithType: Regex.Match(String)\n  fullName: Regex.Match(String)\n- uid: System.Text.RegularExpressions.Regex.Match(System.String,System.String)\n  parent: System.Text.RegularExpressions.Regex\n  isExternal: false\n  name: Match(String, String)\n  nameWithType: Regex.Match(String, String)\n  fullName: Regex.Match(String, String)\n- uid: System.Text.RegularExpressions.Regex.Matches(System.String)\n  parent: System.Text.RegularExpressions.Regex\n  isExternal: false\n  name: Matches(String)\n  nameWithType: Regex.Matches(String)\n  fullName: Regex.Matches(String)\n- uid: System.Text.RegularExpressions.MatchCollection\n  parent: System.Text.RegularExpressions\n  isExternal: false\n  name: MatchCollection\n  nameWithType: MatchCollection\n  fullName: System.Text.RegularExpressions.MatchCollection\n- uid: System.Text.RegularExpressions.Regex.Matches(System.String,System.Int32)\n  parent: System.Text.RegularExpressions.Regex\n  isExternal: false\n  name: Matches(String, Int32)\n  nameWithType: Regex.Matches(String, Int32)\n  fullName: Regex.Matches(String, Int32)\n- uid: System.Text.RegularExpressions.Regex.Matches(System.String,System.String)\n  parent: System.Text.RegularExpressions.Regex\n  isExternal: false\n  name: Matches(String, String)\n  nameWithType: Regex.Matches(String, String)\n  fullName: Regex.Matches(String, String)\n- uid: System.Text.RegularExpressions.Regex.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions)\n  parent: System.Text.RegularExpressions.Regex\n  isExternal: false\n  name: Matches(String, String, RegexOptions)\n  nameWithType: Regex.Matches(String, String, RegexOptions)\n  fullName: Regex.Matches(String, String, RegexOptions)\n- uid: System.Text.RegularExpressions.Regex.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)\n  parent: System.Text.RegularExpressions.Regex\n  isExternal: false\n  name: Matches(String, String, RegexOptions, TimeSpan)\n  nameWithType: Regex.Matches(String, String, RegexOptions, TimeSpan)\n  fullName: Regex.Matches(String, String, RegexOptions, TimeSpan)\n- uid: System.Text.RegularExpressions.Regex.MatchTimeout\n  parent: System.Text.RegularExpressions.Regex\n  isExternal: false\n  name: MatchTimeout\n  nameWithType: Regex.MatchTimeout\n  fullName: Regex.MatchTimeout\n- uid: System.Text.RegularExpressions.Regex.Options\n  parent: System.Text.RegularExpressions.Regex\n  isExternal: false\n  name: Options\n  nameWithType: Regex.Options\n  fullName: Regex.Options\n- uid: System.Text.RegularExpressions.Regex.pattern\n  parent: System.Text.RegularExpressions.Regex\n  isExternal: false\n  name: pattern\n  nameWithType: Regex.pattern\n  fullName: Regex.pattern\n- uid: System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)\n  parent: System.Text.RegularExpressions.Regex\n  isExternal: false\n  name: Replace(String, String, MatchEvaluator, RegexOptions, TimeSpan)\n  nameWithType: Regex.Replace(String, String, MatchEvaluator, RegexOptions, TimeSpan)\n  fullName: Regex.Replace(String, String, MatchEvaluator, RegexOptions, TimeSpan)\n- uid: System.Text.RegularExpressions.MatchEvaluator\n  parent: System.Text.RegularExpressions\n  isExternal: false\n  name: MatchEvaluator\n  nameWithType: MatchEvaluator\n  fullName: System.Text.RegularExpressions.MatchEvaluator\n- uid: System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)\n  parent: System.Text.RegularExpressions.Regex\n  isExternal: false\n  name: Replace(String, String, String, RegexOptions, TimeSpan)\n  nameWithType: Regex.Replace(String, String, String, RegexOptions, TimeSpan)\n  fullName: Regex.Replace(String, String, String, RegexOptions, TimeSpan)\n- uid: System.Text.RegularExpressions.Regex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator,System.Int32,System.Int32)\n  parent: System.Text.RegularExpressions.Regex\n  isExternal: false\n  name: Replace(String, MatchEvaluator, Int32, Int32)\n  nameWithType: Regex.Replace(String, MatchEvaluator, Int32, Int32)\n  fullName: Regex.Replace(String, MatchEvaluator, Int32, Int32)\n- uid: System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator,System.Text.RegularExpressions.RegexOptions)\n  parent: System.Text.RegularExpressions.Regex\n  isExternal: false\n  name: Replace(String, String, MatchEvaluator, RegexOptions)\n  nameWithType: Regex.Replace(String, String, MatchEvaluator, RegexOptions)\n  fullName: Regex.Replace(String, String, MatchEvaluator, RegexOptions)\n- uid: System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Int32,System.Int32)\n  parent: System.Text.RegularExpressions.Regex\n  isExternal: false\n  name: Replace(String, String, Int32, Int32)\n  nameWithType: Regex.Replace(String, String, Int32, Int32)\n  fullName: Regex.Replace(String, String, Int32, Int32)\n- uid: System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions)\n  parent: System.Text.RegularExpressions.Regex\n  isExternal: false\n  name: Replace(String, String, String, RegexOptions)\n  nameWithType: Regex.Replace(String, String, String, RegexOptions)\n  fullName: Regex.Replace(String, String, String, RegexOptions)\n- uid: System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator)\n  parent: System.Text.RegularExpressions.Regex\n  isExternal: false\n  name: Replace(String, String, MatchEvaluator)\n  nameWithType: Regex.Replace(String, String, MatchEvaluator)\n  fullName: Regex.Replace(String, String, MatchEvaluator)\n- uid: System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String)\n  parent: System.Text.RegularExpressions.Regex\n  isExternal: false\n  name: Replace(String, String, String)\n  nameWithType: Regex.Replace(String, String, String)\n  fullName: Regex.Replace(String, String, String)\n- uid: System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Int32)\n  parent: System.Text.RegularExpressions.Regex\n  isExternal: false\n  name: Replace(String, String, Int32)\n  nameWithType: Regex.Replace(String, String, Int32)\n  fullName: Regex.Replace(String, String, Int32)\n- uid: System.Text.RegularExpressions.Regex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator)\n  parent: System.Text.RegularExpressions.Regex\n  isExternal: false\n  name: Replace(String, MatchEvaluator)\n  nameWithType: Regex.Replace(String, MatchEvaluator)\n  fullName: Regex.Replace(String, MatchEvaluator)\n- uid: System.Text.RegularExpressions.Regex.Replace(System.String,System.String)\n  parent: System.Text.RegularExpressions.Regex\n  isExternal: false\n  name: Replace(String, String)\n  nameWithType: Regex.Replace(String, String)\n  fullName: Regex.Replace(String, String)\n- uid: System.Text.RegularExpressions.Regex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator,System.Int32)\n  parent: System.Text.RegularExpressions.Regex\n  isExternal: false\n  name: Replace(String, MatchEvaluator, Int32)\n  nameWithType: Regex.Replace(String, MatchEvaluator, Int32)\n  fullName: Regex.Replace(String, MatchEvaluator, Int32)\n- uid: System.Text.RegularExpressions.Regex.RightToLeft\n  parent: System.Text.RegularExpressions.Regex\n  isExternal: false\n  name: RightToLeft\n  nameWithType: Regex.RightToLeft\n  fullName: Regex.RightToLeft\n- uid: System.Text.RegularExpressions.Regex.roptions\n  parent: System.Text.RegularExpressions.Regex\n  isExternal: false\n  name: roptions\n  nameWithType: Regex.roptions\n  fullName: Regex.roptions\n- uid: System.Text.RegularExpressions.Regex.Split(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)\n  parent: System.Text.RegularExpressions.Regex\n  isExternal: false\n  name: Split(String, String, RegexOptions, TimeSpan)\n  nameWithType: Regex.Split(String, String, RegexOptions, TimeSpan)\n  fullName: Regex.Split(String, String, RegexOptions, TimeSpan)\n- uid: System.Text.RegularExpressions.Regex.Split(System.String,System.String,System.Text.RegularExpressions.RegexOptions)\n  parent: System.Text.RegularExpressions.Regex\n  isExternal: false\n  name: Split(String, String, RegexOptions)\n  nameWithType: Regex.Split(String, String, RegexOptions)\n  fullName: Regex.Split(String, String, RegexOptions)\n- uid: System.Text.RegularExpressions.Regex.Split(System.String,System.Int32,System.Int32)\n  parent: System.Text.RegularExpressions.Regex\n  isExternal: false\n  name: Split(String, Int32, Int32)\n  nameWithType: Regex.Split(String, Int32, Int32)\n  fullName: Regex.Split(String, Int32, Int32)\n- uid: System.Text.RegularExpressions.Regex.Split(System.String,System.Int32)\n  parent: System.Text.RegularExpressions.Regex\n  isExternal: false\n  name: Split(String, Int32)\n  nameWithType: Regex.Split(String, Int32)\n  fullName: Regex.Split(String, Int32)\n- uid: System.Text.RegularExpressions.Regex.Split(System.String)\n  parent: System.Text.RegularExpressions.Regex\n  isExternal: false\n  name: Split(String)\n  nameWithType: Regex.Split(String)\n  fullName: Regex.Split(String)\n- uid: System.Text.RegularExpressions.Regex.Split(System.String,System.String)\n  parent: System.Text.RegularExpressions.Regex\n  isExternal: false\n  name: Split(String, String)\n  nameWithType: Regex.Split(String, String)\n  fullName: Regex.Split(String, String)\n- uid: System.Text.RegularExpressions.Regex.ToString\n  parent: System.Text.RegularExpressions.Regex\n  isExternal: false\n  name: ToString()\n  nameWithType: Regex.ToString()\n  fullName: Regex.ToString()\n- uid: System.Text.RegularExpressions.Regex.Unescape(System.String)\n  parent: System.Text.RegularExpressions.Regex\n  isExternal: false\n  name: Unescape(String)\n  nameWithType: Regex.Unescape(String)\n  fullName: Regex.Unescape(String)\n- uid: System.Text.RegularExpressions.Regex.UseOptionC\n  parent: System.Text.RegularExpressions.Regex\n  isExternal: false\n  name: UseOptionC()\n  nameWithType: Regex.UseOptionC()\n  fullName: Regex.UseOptionC()\n- uid: System.Text.RegularExpressions.Regex.UseOptionR\n  parent: System.Text.RegularExpressions.Regex\n  isExternal: false\n  name: UseOptionR()\n  nameWithType: Regex.UseOptionR()\n  fullName: Regex.UseOptionR()\n- uid: System.Text.RegularExpressions.Regex.ValidateMatchTimeout(System.TimeSpan)\n  parent: System.Text.RegularExpressions.Regex\n  isExternal: false\n  name: ValidateMatchTimeout(TimeSpan)\n  nameWithType: Regex.ValidateMatchTimeout(TimeSpan)\n  fullName: Regex.ValidateMatchTimeout(TimeSpan)\n- uid: System.Text.RegularExpressions.Regex.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  parent: System.Text.RegularExpressions.Regex\n  isExternal: false\n  name: ISerializable.GetObjectData(SerializationInfo, StreamingContext)\n  nameWithType: Regex.ISerializable.GetObjectData(SerializationInfo, StreamingContext)\n  fullName: Regex.ISerializable.GetObjectData(SerializationInfo, StreamingContext)\n- uid: System.Text.RegularExpressions.Regex.#ctor*\n  parent: System.Text.RegularExpressions.Regex\n  isExternal: false\n  name: Regex\n  nameWithType: Regex.Regex\n  fullName: Regex.Regex\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/Regex.xml\n- uid: System.Text.RegularExpressions.Regex.CacheSize*\n  parent: System.Text.RegularExpressions.Regex\n  isExternal: false\n  name: CacheSize\n  nameWithType: Regex.CacheSize\n  fullName: Regex.CacheSize\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/Regex.xml\n- uid: System.Text.RegularExpressions.Regex.CapNames*\n  parent: System.Text.RegularExpressions.Regex\n  isExternal: false\n  name: CapNames\n  nameWithType: Regex.CapNames\n  fullName: Regex.CapNames\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/Regex.xml\n- uid: System.Text.RegularExpressions.Regex.Caps*\n  parent: System.Text.RegularExpressions.Regex\n  isExternal: false\n  name: Caps\n  nameWithType: Regex.Caps\n  fullName: Regex.Caps\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/Regex.xml\n- uid: System.Text.RegularExpressions.Regex.CompileToAssembly*\n  parent: System.Text.RegularExpressions.Regex\n  isExternal: false\n  name: CompileToAssembly\n  nameWithType: Regex.CompileToAssembly\n  fullName: Regex.CompileToAssembly\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/Regex.xml\n- uid: System.Text.RegularExpressions.Regex.Escape*\n  parent: System.Text.RegularExpressions.Regex\n  isExternal: false\n  name: Escape\n  nameWithType: Regex.Escape\n  fullName: Regex.Escape\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/Regex.xml\n- uid: System.Text.RegularExpressions.Regex.GetGroupNames*\n  parent: System.Text.RegularExpressions.Regex\n  isExternal: false\n  name: GetGroupNames\n  nameWithType: Regex.GetGroupNames\n  fullName: Regex.GetGroupNames\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/Regex.xml\n- uid: System.Text.RegularExpressions.Regex.GetGroupNumbers*\n  parent: System.Text.RegularExpressions.Regex\n  isExternal: false\n  name: GetGroupNumbers\n  nameWithType: Regex.GetGroupNumbers\n  fullName: Regex.GetGroupNumbers\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/Regex.xml\n- uid: System.Text.RegularExpressions.Regex.GroupNameFromNumber*\n  parent: System.Text.RegularExpressions.Regex\n  isExternal: false\n  name: GroupNameFromNumber\n  nameWithType: Regex.GroupNameFromNumber\n  fullName: Regex.GroupNameFromNumber\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/Regex.xml\n- uid: System.Text.RegularExpressions.Regex.GroupNumberFromName*\n  parent: System.Text.RegularExpressions.Regex\n  isExternal: false\n  name: GroupNumberFromName\n  nameWithType: Regex.GroupNumberFromName\n  fullName: Regex.GroupNumberFromName\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/Regex.xml\n- uid: System.Text.RegularExpressions.Regex.InitializeReferences*\n  parent: System.Text.RegularExpressions.Regex\n  isExternal: false\n  name: InitializeReferences\n  nameWithType: Regex.InitializeReferences\n  fullName: Regex.InitializeReferences\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/Regex.xml\n- uid: System.Text.RegularExpressions.Regex.IsMatch*\n  parent: System.Text.RegularExpressions.Regex\n  isExternal: false\n  name: IsMatch\n  nameWithType: Regex.IsMatch\n  fullName: Regex.IsMatch\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/Regex.xml\n- uid: System.Text.RegularExpressions.Regex.Match*\n  parent: System.Text.RegularExpressions.Regex\n  isExternal: false\n  name: Match\n  nameWithType: Regex.Match\n  fullName: Regex.Match\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/Regex.xml\n- uid: System.Text.RegularExpressions.Regex.Matches*\n  parent: System.Text.RegularExpressions.Regex\n  isExternal: false\n  name: Matches\n  nameWithType: Regex.Matches\n  fullName: Regex.Matches\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/Regex.xml\n- uid: System.Text.RegularExpressions.Regex.MatchTimeout*\n  parent: System.Text.RegularExpressions.Regex\n  isExternal: false\n  name: MatchTimeout\n  nameWithType: Regex.MatchTimeout\n  fullName: Regex.MatchTimeout\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/Regex.xml\n- uid: System.Text.RegularExpressions.Regex.Options*\n  parent: System.Text.RegularExpressions.Regex\n  isExternal: false\n  name: Options\n  nameWithType: Regex.Options\n  fullName: Regex.Options\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/Regex.xml\n- uid: System.Text.RegularExpressions.Regex.Replace*\n  parent: System.Text.RegularExpressions.Regex\n  isExternal: false\n  name: Replace\n  nameWithType: Regex.Replace\n  fullName: Regex.Replace\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/Regex.xml\n- uid: System.Text.RegularExpressions.Regex.RightToLeft*\n  parent: System.Text.RegularExpressions.Regex\n  isExternal: false\n  name: RightToLeft\n  nameWithType: Regex.RightToLeft\n  fullName: Regex.RightToLeft\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/Regex.xml\n- uid: System.Text.RegularExpressions.Regex.Split*\n  parent: System.Text.RegularExpressions.Regex\n  isExternal: false\n  name: Split\n  nameWithType: Regex.Split\n  fullName: Regex.Split\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/Regex.xml\n- uid: System.Text.RegularExpressions.Regex.ToString*\n  parent: System.Text.RegularExpressions.Regex\n  isExternal: false\n  name: ToString\n  nameWithType: Regex.ToString\n  fullName: Regex.ToString\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/Regex.xml\n- uid: System.Text.RegularExpressions.Regex.Unescape*\n  parent: System.Text.RegularExpressions.Regex\n  isExternal: false\n  name: Unescape\n  nameWithType: Regex.Unescape\n  fullName: Regex.Unescape\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/Regex.xml\n- uid: System.Text.RegularExpressions.Regex.UseOptionC*\n  parent: System.Text.RegularExpressions.Regex\n  isExternal: false\n  name: UseOptionC\n  nameWithType: Regex.UseOptionC\n  fullName: Regex.UseOptionC\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/Regex.xml\n- uid: System.Text.RegularExpressions.Regex.UseOptionR*\n  parent: System.Text.RegularExpressions.Regex\n  isExternal: false\n  name: UseOptionR\n  nameWithType: Regex.UseOptionR\n  fullName: Regex.UseOptionR\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/Regex.xml\n- uid: System.Text.RegularExpressions.Regex.ValidateMatchTimeout*\n  parent: System.Text.RegularExpressions.Regex\n  isExternal: false\n  name: ValidateMatchTimeout\n  nameWithType: Regex.ValidateMatchTimeout\n  fullName: Regex.ValidateMatchTimeout\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/Regex.xml\n- uid: System.Text.RegularExpressions.Regex.System#Runtime#Serialization#ISerializable#GetObjectData*\n  parent: System.Text.RegularExpressions.Regex\n  isExternal: false\n  name: System.Runtime.Serialization.ISerializable.GetObjectData\n  nameWithType: Regex.System.Runtime.Serialization.ISerializable.GetObjectData\n  fullName: Regex.System.Runtime.Serialization.ISerializable.GetObjectData\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/Regex.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Runtime.Serialization.ISerializable\n  parent: System.Runtime.Serialization\n  isExternal: false\n  name: ISerializable\n  nameWithType: ISerializable\n  fullName: System.Runtime.Serialization.ISerializable\n"}