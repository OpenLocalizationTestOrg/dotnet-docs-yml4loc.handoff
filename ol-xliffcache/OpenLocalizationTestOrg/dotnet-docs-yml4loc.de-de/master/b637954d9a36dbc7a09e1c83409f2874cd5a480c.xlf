<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b637954d9a36dbc7a09e1c83409f2874cd5a480c</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Reflection.Binder.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9f8235d1dbfc915e37f2c63361b3904b7f99dd09</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">49402ecdaefec453ae5018f629aa76d892f02a55</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Selects a member from a list of candidates, and performs type conversion from actual argument type to formal argument type.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>Implementations of the <ph id="ph1">&lt;xref:System.Reflection.Binder&gt;</ph> class are used by methods such as <ph id="ph2">&lt;xref:System.Type.InvokeMember%2A?displayProperty=fullName&gt;</ph>, which selects from a set of possible members to execute, based on a set of parameter types and argument values; <ph id="ph3">&lt;xref:System.Type.GetMethod%2A?displayProperty=fullName&gt;</ph>, which selects a method based on parameter types; and so on.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>A default implementation of the <ph id="ph1">&lt;xref:System.Reflection.Binder&gt;</ph> class is provided by the <ph id="ph2">&lt;xref:System.Type.DefaultBinder%2A?displayProperty=fullName&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Reflection.Binder"&gt;&lt;/xref&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>This constructor is called by the constructors of derived classes, to initialize state in this type.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Selects a field from the given set of fields, based on the specified criteria.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`bindingAttr`</ph> does not include <ph id="ph2">&lt;xref:System.Reflection.BindingFlags?displayProperty=fullName&gt;</ph>, the default binder implementation provided by <ph id="ph3">&lt;xref:System.Type.DefaultBinder%2A?displayProperty=fullName&gt;</ph> simply returns the first element of <ph id="ph4">`match`</ph>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>No selection is done.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method controls the binding provided by <ph id="ph1">&lt;xref:System.Type.InvokeMember%2A?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>A bitwise combination of <ph id="ph1">&lt;xref href="System.Reflection.BindingFlags"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The set of fields that are candidates for matching.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>For example, when a <ph id="ph1">&lt;xref href="System.Reflection.Binder"&gt;&lt;/xref&gt;</ph> object is used by <ph id="ph2">&lt;xref href="System.Type.InvokeMember*"&gt;&lt;/xref&gt;</ph>, this parameter specifies the set of fields that reflection has determined to be possible matches, typically because they have the correct member name.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The default implementation provided by <ph id="ph1">&lt;xref href="System.Type.DefaultBinder"&gt;&lt;/xref&gt;</ph> changes the order of this array.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The field value used to locate a matching field.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>An instance of <ph id="ph1">&lt;xref href="System.Globalization.CultureInfo"&gt;&lt;/xref&gt;</ph> that is used to control the coercion of data types, in binder implementations that coerce types.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">culture</ph><ept id="p1">&lt;/code&gt;</ept> is <ph id="ph2">`null`</ph>, the <ph id="ph3">&lt;xref href="System.Globalization.CultureInfo"&gt;&lt;/xref&gt;</ph> for the current thread is used.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Note   For example, if a binder implementation allows coercion of string values to numeric types, this parameter is necessary to convert a <ph id="ph1">`String`</ph> that represents 1000 to a <ph id="ph2">`Double`</ph> value, because 1000 is represented differently by different cultures.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The default binder does not do such string coercions.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The matching field.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>For the default binder, <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">bindingAttr</ph><ept id="p1">&lt;/code&gt;</ept> includes <ph id="ph2">&lt;xref href="System.Reflection.BindingFlags.SetField"&gt;&lt;/xref&gt;</ph>, and <bpt id="p2">&lt;code&gt;</bpt><ph id="ph3">match</ph><ept id="p2">&lt;/code&gt;</ept> contains multiple fields that are equally good matches for <bpt id="p3">&lt;code&gt;</bpt><ph id="ph4">value</ph><ept id="p3">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>For example, <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">value</ph><ept id="p1">&lt;/code&gt;</ept> contains a <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">MyClass</ph><ept id="p2">&lt;/code&gt;</ept> object that implements the <bpt id="p3">&lt;code&gt;</bpt><ph id="ph3">IMyClass</ph><ept id="p3">&lt;/code&gt;</ept> interface, and <bpt id="p4">&lt;code&gt;</bpt><ph id="ph4">match</ph><ept id="p4">&lt;/code&gt;</ept> contains a field of type <bpt id="p5">&lt;code&gt;</bpt><ph id="ph5">MyClass</ph><ept id="p5">&lt;/code&gt;</ept> and a field of type <bpt id="p6">&lt;code&gt;</bpt><ph id="ph6">IMyClass</ph><ept id="p6">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>For the default binder, <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">bindingAttr</ph><ept id="p1">&lt;/code&gt;</ept> includes <ph id="ph2">&lt;xref href="System.Reflection.BindingFlags.SetField"&gt;&lt;/xref&gt;</ph>, and <bpt id="p2">&lt;code&gt;</bpt><ph id="ph3">match</ph><ept id="p2">&lt;/code&gt;</ept> contains no fields that can accept <bpt id="p3">&lt;code&gt;</bpt><ph id="ph4">value</ph><ept id="p3">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>For the default binder, <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">bindingAttr</ph><ept id="p1">&lt;/code&gt;</ept> includes <ph id="ph2">&lt;xref href="System.Reflection.BindingFlags.SetField"&gt;&lt;/xref&gt;</ph>, and <bpt id="p2">&lt;code&gt;</bpt><ph id="ph3">match</ph><ept id="p2">&lt;/code&gt;</ept> is <ph id="ph4">`null`</ph> or an empty array.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;bindingAttr&lt;/code&gt;</ph> includes <ph id="ph2">&lt;xref href="System.Reflection.BindingFlags.SetField"&gt;&lt;/xref&gt;</ph>, and <ph id="ph3">&lt;code&gt;value&lt;/code&gt;</ph> is <ph id="ph4">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Selects a method to invoke from the given set of methods, based on the supplied arguments.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default binder takes into account both parameters that have values and <ph id="ph1">`params`</ph> arrays (<ph id="ph2">`ParamArray`</ph> arrays in Visual Basic).</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>Thus, it is possible to find a match in cases where <ph id="ph1">`args`</ph> and <ph id="ph2">`match`</ph> do not contain the same number of elements.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>The binder enables a client to map the array of arguments back to its original form if the argument array has been manipulated by <ph id="ph1">&lt;xref:System.Reflection.Binder.BindToMethod%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use this remap capability to get back by-reference arguments when such arguments are present.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you pass arguments by name, the binder reorders the argument array.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`state`</ph> parameter keeps track of argument reordering, thus enabling the binder's <ph id="ph2">&lt;xref:System.Reflection.Binder.ReorderArgumentArray%2A&gt;</ph> method to reorder the argument array to its original form.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.Binder.BindToMethod%2A&gt;</ph> method is used by the <ph id="ph2">&lt;xref:System.Type.InvokeMember%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>A bitwise combination of <ph id="ph1">&lt;xref href="System.Reflection.BindingFlags"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The set of methods that are candidates for matching.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>For example, when a <ph id="ph1">&lt;xref href="System.Reflection.Binder"&gt;&lt;/xref&gt;</ph> object is used by <ph id="ph2">&lt;xref href="System.Type.InvokeMember*"&gt;&lt;/xref&gt;</ph>, this parameter specifies the set of methods that reflection has determined to be possible matches, typically because they have the correct member name.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The default implementation provided by <ph id="ph1">&lt;xref href="System.Type.DefaultBinder"&gt;&lt;/xref&gt;</ph> changes the order of this array.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The arguments that are passed in.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The binder can change the order of the arguments in this array; for example, the default binder changes the order of arguments if the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">names</ph><ept id="p1">&lt;/code&gt;</ept> parameter is used to specify an order other than positional order.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>If a binder implementation coerces argument types, the types and values of the arguments can be changed as well.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>An array of parameter modifiers that enable binding to work with parameter signatures in which the types have been modified.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The default binder implementation does not use this parameter.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>An instance of <ph id="ph1">&lt;xref href="System.Globalization.CultureInfo"&gt;&lt;/xref&gt;</ph> that is used to control the coercion of data types, in binder implementations that coerce types.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">culture</ph><ept id="p1">&lt;/code&gt;</ept> is <ph id="ph2">`null`</ph>, the <ph id="ph3">&lt;xref href="System.Globalization.CultureInfo"&gt;&lt;/xref&gt;</ph> for the current thread is used.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Note   For example, if a binder implementation allows coercion of string values to numeric types, this parameter is necessary to convert a <ph id="ph1">`String`</ph> that represents 1000 to a <ph id="ph2">`Double`</ph> value, because 1000 is represented differently by different cultures.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The default binder does not do such string coercions.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The parameter names, if parameter names are to be considered when matching, or <ph id="ph1">`null`</ph> if arguments are to be treated as purely positional.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>For example, parameter names must be used if arguments are not supplied in positional order.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>After the method returns, <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">state</ph><ept id="p1">&lt;/code&gt;</ept> contains a binder-provided object that keeps track of argument reordering.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The binder creates this object, and the binder is the sole consumer of this object.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">state</ph><ept id="p1">&lt;/code&gt;</ept> is not <ph id="ph2">`null`</ph> when <ph id="ph3">`BindToMethod`</ph> returns, you must pass <bpt id="p2">&lt;code&gt;</bpt><ph id="ph4">state</ph><ept id="p2">&lt;/code&gt;</ept> to the <ph id="ph5">&lt;xref href="System.Reflection.Binder.ReorderArgumentArray(System.Object[]@,System.Object)"&gt;&lt;/xref&gt;</ph> method if you want to restore <bpt id="p3">&lt;code&gt;</bpt><ph id="ph6">args</ph><ept id="p3">&lt;/code&gt;</ept> to its original order, for example, so that you can retrieve the values of <ph id="ph7">`ref`</ph> parameters (<ph id="ph8">`ByRef`</ph> parameters in Visual Basic).</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The matching method.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>For the default binder, <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">match</ph><ept id="p1">&lt;/code&gt;</ept> contains multiple methods that are equally good matches for <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">args</ph><ept id="p2">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>For example, <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">args</ph><ept id="p1">&lt;/code&gt;</ept> contains a <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">MyClass</ph><ept id="p2">&lt;/code&gt;</ept> object that implements the <bpt id="p3">&lt;code&gt;</bpt><ph id="ph3">IMyClass</ph><ept id="p3">&lt;/code&gt;</ept> interface, and <bpt id="p4">&lt;code&gt;</bpt><ph id="ph4">match</ph><ept id="p4">&lt;/code&gt;</ept> contains a method that takes <bpt id="p5">&lt;code&gt;</bpt><ph id="ph5">MyClass</ph><ept id="p5">&lt;/code&gt;</ept> and a method that takes <bpt id="p6">&lt;code&gt;</bpt><ph id="ph6">IMyClass</ph><ept id="p6">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>For the default binder, <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">match</ph><ept id="p1">&lt;/code&gt;</ept> contains no methods that can accept the arguments supplied in <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">args</ph><ept id="p2">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>For the default binder, <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">match</ph><ept id="p1">&lt;/code&gt;</ept> is <ph id="ph2">`null`</ph> or an empty array.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Changes the type of the given <ph id="ph1">`Object`</ph> to the given <ph id="ph2">`Type`</ph>.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT">
          <source>Reflection models the accessibility rules of the common type system.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if the caller is in the same assembly, the caller does not need special permissions for internal members.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT">
          <source>Otherwise, the caller needs <ph id="ph1">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is consistent with lookup of members that are protected, private, and so on.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT">
          <source>The general principle is that <ph id="ph1">`ChangeType`</ph> should perform only widening coercions, which never lose data.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT">
          <source>An example of a widening coercion is coercing a value that is a 32-bit signed integer to a value that is a 64-bit signed integer.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is distinguished from a narrowing coercion, which may lose data.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT">
          <source>An example of a narrowing coercion is coercing a 64-bit signed integer to a 32-bit signed integer.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following table lists the coercions performed by the default <ph id="ph1">`ChangeType`</ph>.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT">
          <source>Source type</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT">
          <source>Target type</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT">
          <source>Any type</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT">
          <source>Its base type.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT">
          <source>Any type</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT">
          <source>The interface it implements.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT">
          <source>Char</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT">
          <source>UInt16, UInt32, Int32, UInt64, Int64, Single, Double</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT">
          <source>Byte</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT">
          <source>Char, UInt16, Int16, UInt32, Int32, UInt64, Int64, Single, Double</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT">
          <source>SByte</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT">
          <source>Int16, Int32, Int64, Single, Double</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT">
          <source>UInt16</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT">
          <source>UInt32, Int32, UInt64, Int64, Single, Double</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT">
          <source>Int16</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT">
          <source>Int32, Int64, Single, Double</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT">
          <source>UInt32</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT">
          <source>UInt64, Int64, Single, Double</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT">
          <source>Int32</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT">
          <source>Int64, Single, Double</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT">
          <source>UInt64</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT">
          <source>Single, Double</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT">
          <source>Int64</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT">
          <source>Single, Double</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT">
          <source>Single</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT">
          <source>Double</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT">
          <source>Non-reference</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT">
          <source>By-reference.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>The object to change into a new <ph id="ph1">`Type`</ph>.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>The new <ph id="ph1">`Type`</ph> that <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">value</ph><ept id="p1">&lt;/code&gt;</ept> will become.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>An instance of <ph id="ph1">&lt;xref href="System.Globalization.CultureInfo"&gt;&lt;/xref&gt;</ph> that is used to control the coercion of data types.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">culture</ph><ept id="p1">&lt;/code&gt;</ept> is <ph id="ph2">`null`</ph>, the <ph id="ph3">&lt;xref href="System.Globalization.CultureInfo"&gt;&lt;/xref&gt;</ph> for the current thread is used.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Note   For example, this parameter is necessary to convert a <ph id="ph1">`String`</ph> that represents 1000 to a <ph id="ph2">`Double`</ph> value, because 1000 is represented differently by different cultures.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>An object that contains the given value as the new type.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Upon returning from <ph id="ph1">&lt;xref href="System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)"&gt;&lt;/xref&gt;</ph>, restores the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">args</ph><ept id="p1">&lt;/code&gt;</ept> argument to what it was when it came from <ph id="ph3">`BindToMethod`</ph>.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT">
          <source>The common language runtime calls this method if <ph id="ph1">`state`</ph> is not <ph id="ph2">`null`</ph> after a return from <ph id="ph3">`BindToMethod`</ph>.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>The actual arguments that are passed in.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Both the types and values of the arguments can be changed.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>A binder-provided object that keeps track of argument reordering.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Selects a method from the given set of methods, based on the argument type.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method should return <ph id="ph1">`null`</ph> if no method matches the criteria.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method controls the selection provided by the <ph id="ph1">`GetConstructor`</ph> and <ph id="ph2">`GetMethod`</ph> methods on <ph id="ph3">`Type`</ph>.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>A bitwise combination of <ph id="ph1">&lt;xref href="System.Reflection.BindingFlags"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>The set of methods that are candidates for matching.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>For example, when a <ph id="ph1">&lt;xref href="System.Reflection.Binder"&gt;&lt;/xref&gt;</ph> object is used by <ph id="ph2">&lt;xref href="System.Type.InvokeMember*"&gt;&lt;/xref&gt;</ph>, this parameter specifies the set of methods that reflection has determined to be possible matches, typically because they have the correct member name.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>The default implementation provided by <ph id="ph1">&lt;xref href="System.Type.DefaultBinder"&gt;&lt;/xref&gt;</ph> changes the order of this array.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>The parameter types used to locate a matching method.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>An array of parameter modifiers that enable binding to work with parameter signatures in which the types have been modified.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>The matching method, if found; otherwise, <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>For the default binder, <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">match</ph><ept id="p1">&lt;/code&gt;</ept> contains multiple methods that are equally good matches for the parameter types described by <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">types</ph><ept id="p2">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>For example, the array in <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">types</ph><ept id="p1">&lt;/code&gt;</ept> contains a <ph id="ph2">&lt;xref href="System.Type"&gt;&lt;/xref&gt;</ph> object for <bpt id="p2">&lt;code&gt;</bpt><ph id="ph3">MyClass</ph><ept id="p2">&lt;/code&gt;</ept> and the array in <bpt id="p3">&lt;code&gt;</bpt><ph id="ph4">match</ph><ept id="p3">&lt;/code&gt;</ept> contains a method that takes a base class of <bpt id="p4">&lt;code&gt;</bpt><ph id="ph5">MyClass</ph><ept id="p4">&lt;/code&gt;</ept> and a method that takes an interface that <bpt id="p5">&lt;code&gt;</bpt><ph id="ph6">MyClass</ph><ept id="p5">&lt;/code&gt;</ept> implements.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>For the default binder, <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">match</ph><ept id="p1">&lt;/code&gt;</ept> is <ph id="ph2">`null`</ph> or an empty array.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>An element of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">types</ph><ept id="p1">&lt;/code&gt;</ept> derives from <ph id="ph2">&lt;xref href="System.Type"&gt;&lt;/xref&gt;</ph>, but is not of type <ph id="ph3">`RuntimeType`</ph>.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Selects a property from the given set of properties, based on the specified criteria.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method controls the selection provided by the <ph id="ph1">`GetProperty`</ph> method on <ph id="ph2">`Type`</ph>.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>A bitwise combination of <ph id="ph1">&lt;xref href="System.Reflection.BindingFlags"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>The set of properties that are candidates for matching.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>For example, when a <ph id="ph1">&lt;xref href="System.Reflection.Binder"&gt;&lt;/xref&gt;</ph> object is used by <ph id="ph2">&lt;xref href="System.Type.InvokeMember*"&gt;&lt;/xref&gt;</ph>, this parameter specifies the set of properties that reflection has determined to be possible matches, typically because they have the correct member name.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>The default implementation provided by <ph id="ph1">&lt;xref href="System.Type.DefaultBinder"&gt;&lt;/xref&gt;</ph> changes the order of this array.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>The return value the matching property must have.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>The index types of the property being searched for.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Used for index properties such as the indexer for a class.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>An array of parameter modifiers that enable binding to work with parameter signatures in which the types have been modified.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>The matching property.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>For the default binder, <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">match</ph><ept id="p1">&lt;/code&gt;</ept> contains multiple properties that are equally good matches for <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">returnType</ph><ept id="p2">&lt;/code&gt;</ept> and <bpt id="p3">&lt;code&gt;</bpt><ph id="ph3">indexes</ph><ept id="p3">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>For the default binder, <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">match</ph><ept id="p1">&lt;/code&gt;</ept> is <ph id="ph2">`null`</ph> or an empty array.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>