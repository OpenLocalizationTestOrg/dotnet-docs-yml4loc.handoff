{"nodes":[{"content":"Represents elements in an XML tree that supports deferred streaming output.","nodes":[{"pos":[0,75],"content":"Represents elements in an XML tree that supports deferred streaming output.","nodes":[{"content":"Represents elements in an XML tree that supports deferred streaming output.","pos":[0,75]}]}],"pos":[1515,1591],"yaml":true},{"content":"This class allows you to create an XML tree that supports deferred streaming output. You use this class to create an XML tree in a very similar fashion to creating an XML tree using <xref:System.Xml.Linq.XElement>. However, there is a fundamental difference. When you use a LINQ query to specify content when creating an XML tree using <xref:System.Xml.Linq.XElement>, the query variable is iterated at the time of construction of the XML tree, and the results of the query are added to the XML tree. In contrast, when you create an XML tree using <xref:System.Xml.Linq.XStreamingElement>, a reference to the query variable is stored in the XML tree without being iterated. Queries are iterated only upon serialization. This allows you to create larger XML trees while maintaining a smaller memory footprint.  \n  \n If you are streaming from an input source, such as a text file, then you can read a very large text file, and generate a very large XML document while maintaining a small memory footprint.  \n  \n Another scenario is that you have a large XML tree that has been loaded into memory, and you want to create a transformed version of the document. If you create a new document using <xref:System.Xml.Linq.XElement>, then you will have two large XML trees in memory upon completion of the transformation. However, if you create the new XML tree using <xref:System.Xml.Linq.XStreamingElement>, then your working set will be effectively cut in half.  \n  \n Note that when debugging a program that uses <xref:System.Xml.Linq.XStreamingElement>, displaying the value of an object causes its <xref:System.Xml.Linq.XStreamingElement.ToString%2A> method to be called. This causes the XML to be serialized. If the semantics of your streaming element query are such that the streaming element can only be streamed once, this may cause undesirable behavior in your debugging experience.","nodes":[{"pos":[0,808],"content":"This class allows you to create an XML tree that supports deferred streaming output. You use this class to create an XML tree in a very similar fashion to creating an XML tree using <xref:System.Xml.Linq.XElement>. However, there is a fundamental difference. When you use a LINQ query to specify content when creating an XML tree using <xref:System.Xml.Linq.XElement>, the query variable is iterated at the time of construction of the XML tree, and the results of the query are added to the XML tree. In contrast, when you create an XML tree using <xref:System.Xml.Linq.XStreamingElement>, a reference to the query variable is stored in the XML tree without being iterated. Queries are iterated only upon serialization. This allows you to create larger XML trees while maintaining a smaller memory footprint.","nodes":[{"content":"This class allows you to create an XML tree that supports deferred streaming output. You use this class to create an XML tree in a very similar fashion to creating an XML tree using <xref:System.Xml.Linq.XElement>. However, there is a fundamental difference. When you use a LINQ query to specify content when creating an XML tree using <xref:System.Xml.Linq.XElement>, the query variable is iterated at the time of construction of the XML tree, and the results of the query are added to the XML tree. In contrast, when you create an XML tree using <xref:System.Xml.Linq.XStreamingElement>, a reference to the query variable is stored in the XML tree without being iterated. Queries are iterated only upon serialization. This allows you to create larger XML trees while maintaining a smaller memory footprint.","pos":[0,808],"nodes":[{"content":"This class allows you to create an XML tree that supports deferred streaming output.","pos":[0,84]},{"content":"You use this class to create an XML tree in a very similar fashion to creating an XML tree using <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XElement&gt;</ph>.","pos":[85,214],"source":" You use this class to create an XML tree in a very similar fashion to creating an XML tree using <xref:System.Xml.Linq.XElement>."},{"content":"However, there is a fundamental difference.","pos":[215,258]},{"content":"When you use a LINQ query to specify content when creating an XML tree using <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XElement&gt;</ph>, the query variable is iterated at the time of construction of the XML tree, and the results of the query are added to the XML tree.","pos":[259,500],"source":" When you use a LINQ query to specify content when creating an XML tree using <xref:System.Xml.Linq.XElement>, the query variable is iterated at the time of construction of the XML tree, and the results of the query are added to the XML tree."},{"content":"In contrast, when you create an XML tree using <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph>, a reference to the query variable is stored in the XML tree without being iterated.","pos":[501,673],"source":" In contrast, when you create an XML tree using <xref:System.Xml.Linq.XStreamingElement>, a reference to the query variable is stored in the XML tree without being iterated."},{"content":"Queries are iterated only upon serialization.","pos":[674,719]},{"content":"This allows you to create larger XML trees while maintaining a smaller memory footprint.","pos":[720,808]}]}]},{"pos":[815,1003],"content":"If you are streaming from an input source, such as a text file, then you can read a very large text file, and generate a very large XML document while maintaining a small memory footprint.","nodes":[{"content":"If you are streaming from an input source, such as a text file, then you can read a very large text file, and generate a very large XML document while maintaining a small memory footprint.","pos":[0,188]}]},{"pos":[1010,1455],"content":"Another scenario is that you have a large XML tree that has been loaded into memory, and you want to create a transformed version of the document. If you create a new document using <xref:System.Xml.Linq.XElement>, then you will have two large XML trees in memory upon completion of the transformation. However, if you create the new XML tree using <xref:System.Xml.Linq.XStreamingElement>, then your working set will be effectively cut in half.","nodes":[{"content":"Another scenario is that you have a large XML tree that has been loaded into memory, and you want to create a transformed version of the document. If you create a new document using <xref:System.Xml.Linq.XElement>, then you will have two large XML trees in memory upon completion of the transformation. However, if you create the new XML tree using <xref:System.Xml.Linq.XStreamingElement>, then your working set will be effectively cut in half.","pos":[0,445],"nodes":[{"content":"Another scenario is that you have a large XML tree that has been loaded into memory, and you want to create a transformed version of the document.","pos":[0,146]},{"content":"If you create a new document using <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XElement&gt;</ph>, then you will have two large XML trees in memory upon completion of the transformation.","pos":[147,302],"source":" If you create a new document using <xref:System.Xml.Linq.XElement>, then you will have two large XML trees in memory upon completion of the transformation."},{"content":"However, if you create the new XML tree using <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph>, then your working set will be effectively cut in half.","pos":[303,445],"source":" However, if you create the new XML tree using <xref:System.Xml.Linq.XStreamingElement>, then your working set will be effectively cut in half."}]}]},{"pos":[1462,1883],"content":"Note that when debugging a program that uses <xref:System.Xml.Linq.XStreamingElement>, displaying the value of an object causes its <xref:System.Xml.Linq.XStreamingElement.ToString%2A> method to be called. This causes the XML to be serialized. If the semantics of your streaming element query are such that the streaming element can only be streamed once, this may cause undesirable behavior in your debugging experience.","nodes":[{"content":"Note that when debugging a program that uses <xref:System.Xml.Linq.XStreamingElement>, displaying the value of an object causes its <xref:System.Xml.Linq.XStreamingElement.ToString%2A> method to be called. This causes the XML to be serialized. If the semantics of your streaming element query are such that the streaming element can only be streamed once, this may cause undesirable behavior in your debugging experience.","pos":[0,421],"nodes":[{"content":"Note that when debugging a program that uses <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph>, displaying the value of an object causes its <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XStreamingElement.ToString%2A&gt;</ph> method to be called.","pos":[0,205],"source":"Note that when debugging a program that uses <xref:System.Xml.Linq.XStreamingElement>, displaying the value of an object causes its <xref:System.Xml.Linq.XStreamingElement.ToString%2A> method to be called."},{"content":"This causes the XML to be serialized.","pos":[206,243]},{"content":"If the semantics of your streaming element query are such that the streaming element can only be streamed once, this may cause undesirable behavior in your debugging experience.","pos":[244,421]}]}]}],"pos":[1602,3494],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Xml.Linq.XElement\"></xref> class from the specified <xref href=\"System.Xml.Linq.XName\"></xref>.","nodes":[{"pos":[0,148],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XElement\"&gt;&lt;/xref&gt;</ph> class from the specified <ph id=\"ph2\">&lt;xref href=\"System.Xml.Linq.XName\"&gt;&lt;/xref&gt;</ph>.","source":"Initializes a new instance of the <xref href=\"System.Xml.Linq.XElement\"></xref> class from the specified <xref href=\"System.Xml.Linq.XName\"></xref>."}],"pos":[20098,20247],"yaml":true},{"content":"This constructor creates a streaming element with no content and no attributes.  \n  \n There is an implicit conversion from string to <xref:System.Xml.Linq.XName>. Typical use of this constructor is to specify a string as the parameter instead of creating a new <xref:System.Xml.Linq.XName>.","nodes":[{"pos":[0,79],"content":"This constructor creates a streaming element with no content and no attributes.","nodes":[{"content":"This constructor creates a streaming element with no content and no attributes.","pos":[0,79]}]},{"pos":[86,290],"content":"There is an implicit conversion from string to <xref:System.Xml.Linq.XName>. Typical use of this constructor is to specify a string as the parameter instead of creating a new <xref:System.Xml.Linq.XName>.","nodes":[{"content":"There is an implicit conversion from string to <xref:System.Xml.Linq.XName>. Typical use of this constructor is to specify a string as the parameter instead of creating a new <xref:System.Xml.Linq.XName>.","pos":[0,204],"nodes":[{"content":"There is an implicit conversion from string to <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XName&gt;</ph>.","pos":[0,76],"source":"There is an implicit conversion from string to <xref:System.Xml.Linq.XName>."},{"content":"Typical use of this constructor is to specify a string as the parameter instead of creating a new <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XName&gt;</ph>.","pos":[77,204],"source":" Typical use of this constructor is to specify a string as the parameter instead of creating a new <xref:System.Xml.Linq.XName>."}]}]}],"pos":[20258,20553],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Xml.Linq.XName\"></xref> that contains the name of the element.","nodes":[{"pos":[0,84],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XName\"&gt;&lt;/xref&gt;</ph> that contains the name of the element.","source":"An <xref href=\"System.Xml.Linq.XName\"></xref> that contains the name of the element."}],"pos":[22220,22305],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Xml.Linq.XStreamingElement\"></xref> class with the specified name and content.","nodes":[{"pos":[0,131],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XStreamingElement\"&gt;&lt;/xref&gt;</ph> class with the specified name and content.","source":"Initializes a new instance of the <xref href=\"System.Xml.Linq.XStreamingElement\"></xref> class with the specified name and content."}],"pos":[24003,24135],"yaml":true},{"content":"This constructor creates a streaming element with the specified content and attributes.  \n  \n There is an implicit conversion from string to <xref:System.Xml.Linq.XName>. Typical use of this constructor is to specify a string as the parameter instead of creating a new <xref:System.Xml.Linq.XName>.  \n  \n Queries are not iterated until the <xref:System.Xml.Linq.XStreamingElement> is serialized. This is in contrast to using queries for content for an <xref:System.Xml.Linq.XElement>, where queries are iterated at the time of construction of the new <xref:System.Xml.Linq.XElement>.  \n  \n For details about the valid content that can be passed to this constructor, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).","nodes":[{"pos":[0,87],"content":"This constructor creates a streaming element with the specified content and attributes.","nodes":[{"content":"This constructor creates a streaming element with the specified content and attributes.","pos":[0,87]}]},{"pos":[94,298],"content":"There is an implicit conversion from string to <xref:System.Xml.Linq.XName>. Typical use of this constructor is to specify a string as the parameter instead of creating a new <xref:System.Xml.Linq.XName>.","nodes":[{"content":"There is an implicit conversion from string to <xref:System.Xml.Linq.XName>. Typical use of this constructor is to specify a string as the parameter instead of creating a new <xref:System.Xml.Linq.XName>.","pos":[0,204],"nodes":[{"content":"There is an implicit conversion from string to <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XName&gt;</ph>.","pos":[0,76],"source":"There is an implicit conversion from string to <xref:System.Xml.Linq.XName>."},{"content":"Typical use of this constructor is to specify a string as the parameter instead of creating a new <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XName&gt;</ph>.","pos":[77,204],"source":" Typical use of this constructor is to specify a string as the parameter instead of creating a new <xref:System.Xml.Linq.XName>."}]}]},{"pos":[305,583],"content":"Queries are not iterated until the <xref:System.Xml.Linq.XStreamingElement> is serialized. This is in contrast to using queries for content for an <xref:System.Xml.Linq.XElement>, where queries are iterated at the time of construction of the new <xref:System.Xml.Linq.XElement>.","nodes":[{"content":"Queries are not iterated until the <xref:System.Xml.Linq.XStreamingElement> is serialized. This is in contrast to using queries for content for an <xref:System.Xml.Linq.XElement>, where queries are iterated at the time of construction of the new <xref:System.Xml.Linq.XElement>.","pos":[0,278],"nodes":[{"content":"Queries are not iterated until the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph> is serialized.","pos":[0,90],"source":"Queries are not iterated until the <xref:System.Xml.Linq.XStreamingElement> is serialized."},{"content":"This is in contrast to using queries for content for an <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XElement&gt;</ph>, where queries are iterated at the time of construction of the new <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XElement&gt;</ph>.","pos":[91,278],"source":" This is in contrast to using queries for content for an <xref:System.Xml.Linq.XElement>, where queries are iterated at the time of construction of the new <xref:System.Xml.Linq.XElement>."}]}]},{"pos":[590,792],"content":"For details about the valid content that can be passed to this constructor, see <bpt id=\"p1\">[</bpt>Valid Content of XElement and XDocument Objects<ept id=\"p1\">](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)</ept>.","source":"For details about the valid content that can be passed to this constructor, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)."}],"pos":[24146,24947],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Xml.Linq.XName\"></xref> that contains the element name.","nodes":[{"pos":[0,77],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XName\"&gt;&lt;/xref&gt;</ph> that contains the element name.","source":"An <xref href=\"System.Xml.Linq.XName\"></xref> that contains the element name."}],"pos":[25534,25612],"yaml":true},{"content":"The contents of the element.","nodes":[{"pos":[0,28],"content":"The contents of the element.","nodes":[{"content":"The contents of the element.","pos":[0,28]}]}],"pos":[25675,25704],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Xml.Linq.XStreamingElement\"></xref> class with the specified name and content.","nodes":[{"pos":[0,131],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XStreamingElement\"&gt;&lt;/xref&gt;</ph> class with the specified name and content.","source":"Initializes a new instance of the <xref href=\"System.Xml.Linq.XStreamingElement\"></xref> class with the specified name and content."}],"pos":[27414,27546],"yaml":true},{"content":"This constructor creates a streaming element with the specified content and attributes.  \n  \n There is an implicit conversion from string to <xref:System.Xml.Linq.XName>. Typical use of this constructor is to specify a string as the parameter instead of creating a new <xref:System.Xml.Linq.XName>.  \n  \n Queries are not iterated until the <xref:System.Xml.Linq.XStreamingElement> is serialized. This is in contrast to using queries for content for an <xref:System.Xml.Linq.XElement>, where queries are iterated at the time of construction of the new <xref:System.Xml.Linq.XElement>.  \n  \n For details about the valid content that can be passed to this function, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).","nodes":[{"pos":[0,87],"content":"This constructor creates a streaming element with the specified content and attributes.","nodes":[{"content":"This constructor creates a streaming element with the specified content and attributes.","pos":[0,87]}]},{"pos":[94,298],"content":"There is an implicit conversion from string to <xref:System.Xml.Linq.XName>. Typical use of this constructor is to specify a string as the parameter instead of creating a new <xref:System.Xml.Linq.XName>.","nodes":[{"content":"There is an implicit conversion from string to <xref:System.Xml.Linq.XName>. Typical use of this constructor is to specify a string as the parameter instead of creating a new <xref:System.Xml.Linq.XName>.","pos":[0,204],"nodes":[{"content":"There is an implicit conversion from string to <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XName&gt;</ph>.","pos":[0,76],"source":"There is an implicit conversion from string to <xref:System.Xml.Linq.XName>."},{"content":"Typical use of this constructor is to specify a string as the parameter instead of creating a new <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XName&gt;</ph>.","pos":[77,204],"source":" Typical use of this constructor is to specify a string as the parameter instead of creating a new <xref:System.Xml.Linq.XName>."}]}]},{"pos":[305,583],"content":"Queries are not iterated until the <xref:System.Xml.Linq.XStreamingElement> is serialized. This is in contrast to using queries for content for an <xref:System.Xml.Linq.XElement>, where queries are iterated at the time of construction of the new <xref:System.Xml.Linq.XElement>.","nodes":[{"content":"Queries are not iterated until the <xref:System.Xml.Linq.XStreamingElement> is serialized. This is in contrast to using queries for content for an <xref:System.Xml.Linq.XElement>, where queries are iterated at the time of construction of the new <xref:System.Xml.Linq.XElement>.","pos":[0,278],"nodes":[{"content":"Queries are not iterated until the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph> is serialized.","pos":[0,90],"source":"Queries are not iterated until the <xref:System.Xml.Linq.XStreamingElement> is serialized."},{"content":"This is in contrast to using queries for content for an <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XElement&gt;</ph>, where queries are iterated at the time of construction of the new <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XElement&gt;</ph>.","pos":[91,278],"source":" This is in contrast to using queries for content for an <xref:System.Xml.Linq.XElement>, where queries are iterated at the time of construction of the new <xref:System.Xml.Linq.XElement>."}]}]},{"pos":[590,789],"content":"For details about the valid content that can be passed to this function, see <bpt id=\"p1\">[</bpt>Valid Content of XElement and XDocument Objects<ept id=\"p1\">](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)</ept>.","source":"For details about the valid content that can be passed to this function, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)."}],"pos":[27557,28355],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Xml.Linq.XName\"></xref> that contains the element name.","nodes":[{"pos":[0,77],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XName\"&gt;&lt;/xref&gt;</ph> that contains the element name.","source":"An <xref href=\"System.Xml.Linq.XName\"></xref> that contains the element name."}],"pos":[28944,29022],"yaml":true},{"content":"The contents of the element.","nodes":[{"pos":[0,28],"content":"The contents of the element.","nodes":[{"content":"The contents of the element.","pos":[0,28]}]}],"pos":[29087,29116],"yaml":true},{"content":"Adds the specified content as children to this <xref href=\"System.Xml.Linq.XStreamingElement\"></xref>.","nodes":[{"pos":[0,102],"content":"Adds the specified content as children to this <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XStreamingElement\"&gt;&lt;/xref&gt;</ph>.","source":"Adds the specified content as children to this <xref href=\"System.Xml.Linq.XStreamingElement\"></xref>."}],"pos":[30672,30775],"yaml":true},{"content":"This constructor adds the specified content and attributes to the <xref:System.Xml.Linq.XStreamingElement>. While it is often possible to construct the <xref:System.Xml.Linq.XStreamingElement> in a single statement, it is sometimes more convenient to add content to the streaming element incrementally.  \n  \n Queries are not iterated until the <xref:System.Xml.Linq.XStreamingElement> is serialized. This is in contrast to using queries for content for an <xref:System.Xml.Linq.XElement>, where queries are iterated at the time of construction of the new <xref:System.Xml.Linq.XElement>.  \n  \n For details about the valid content that can be passed to this function, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).","nodes":[{"pos":[0,302],"content":"This constructor adds the specified content and attributes to the <xref:System.Xml.Linq.XStreamingElement>. While it is often possible to construct the <xref:System.Xml.Linq.XStreamingElement> in a single statement, it is sometimes more convenient to add content to the streaming element incrementally.","nodes":[{"content":"This constructor adds the specified content and attributes to the <xref:System.Xml.Linq.XStreamingElement>. While it is often possible to construct the <xref:System.Xml.Linq.XStreamingElement> in a single statement, it is sometimes more convenient to add content to the streaming element incrementally.","pos":[0,302],"nodes":[{"content":"This constructor adds the specified content and attributes to the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph>.","pos":[0,107],"source":"This constructor adds the specified content and attributes to the <xref:System.Xml.Linq.XStreamingElement>."},{"content":"While it is often possible to construct the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph> in a single statement, it is sometimes more convenient to add content to the streaming element incrementally.","pos":[108,302],"source":" While it is often possible to construct the <xref:System.Xml.Linq.XStreamingElement> in a single statement, it is sometimes more convenient to add content to the streaming element incrementally."}]}]},{"pos":[309,587],"content":"Queries are not iterated until the <xref:System.Xml.Linq.XStreamingElement> is serialized. This is in contrast to using queries for content for an <xref:System.Xml.Linq.XElement>, where queries are iterated at the time of construction of the new <xref:System.Xml.Linq.XElement>.","nodes":[{"content":"Queries are not iterated until the <xref:System.Xml.Linq.XStreamingElement> is serialized. This is in contrast to using queries for content for an <xref:System.Xml.Linq.XElement>, where queries are iterated at the time of construction of the new <xref:System.Xml.Linq.XElement>.","pos":[0,278],"nodes":[{"content":"Queries are not iterated until the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph> is serialized.","pos":[0,90],"source":"Queries are not iterated until the <xref:System.Xml.Linq.XStreamingElement> is serialized."},{"content":"This is in contrast to using queries for content for an <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XElement&gt;</ph>, where queries are iterated at the time of construction of the new <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XElement&gt;</ph>.","pos":[91,278],"source":" This is in contrast to using queries for content for an <xref:System.Xml.Linq.XElement>, where queries are iterated at the time of construction of the new <xref:System.Xml.Linq.XElement>."}]}]},{"pos":[594,793],"content":"For details about the valid content that can be passed to this function, see <bpt id=\"p1\">[</bpt>Valid Content of XElement and XDocument Objects<ept id=\"p1\">](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)</ept>.","source":"For details about the valid content that can be passed to this function, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)."}],"pos":[30786,31586],"yaml":true,"extradata":"MT"},{"content":"Content to be added to the streaming element.","nodes":[{"pos":[0,45],"content":"Content to be added to the streaming element.","nodes":[{"content":"Content to be added to the streaming element.","pos":[0,45]}]}],"pos":[33625,33671],"yaml":true},{"content":"Adds the specified content as children to this <xref href=\"System.Xml.Linq.XStreamingElement\"></xref>.","nodes":[{"pos":[0,102],"content":"Adds the specified content as children to this <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XStreamingElement\"&gt;&lt;/xref&gt;</ph>.","source":"Adds the specified content as children to this <xref href=\"System.Xml.Linq.XStreamingElement\"></xref>."}],"pos":[35237,35340],"yaml":true},{"content":"This constructor adds the specified content and attributes to the <xref:System.Xml.Linq.XStreamingElement>. While it is often possible to construct the <xref:System.Xml.Linq.XStreamingElement> in a single statement, it is sometimes more convenient to add content to the streaming element incrementally.  \n  \n Queries are not iterated until the <xref:System.Xml.Linq.XStreamingElement> is serialized. This is in contrast to using queries for content for an <xref:System.Xml.Linq.XElement>, where queries are iterated at the time of construction of the new <xref:System.Xml.Linq.XElement>.  \n  \n For details about the valid content that can be passed to this function, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).","nodes":[{"pos":[0,302],"content":"This constructor adds the specified content and attributes to the <xref:System.Xml.Linq.XStreamingElement>. While it is often possible to construct the <xref:System.Xml.Linq.XStreamingElement> in a single statement, it is sometimes more convenient to add content to the streaming element incrementally.","nodes":[{"content":"This constructor adds the specified content and attributes to the <xref:System.Xml.Linq.XStreamingElement>. While it is often possible to construct the <xref:System.Xml.Linq.XStreamingElement> in a single statement, it is sometimes more convenient to add content to the streaming element incrementally.","pos":[0,302],"nodes":[{"content":"This constructor adds the specified content and attributes to the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph>.","pos":[0,107],"source":"This constructor adds the specified content and attributes to the <xref:System.Xml.Linq.XStreamingElement>."},{"content":"While it is often possible to construct the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph> in a single statement, it is sometimes more convenient to add content to the streaming element incrementally.","pos":[108,302],"source":" While it is often possible to construct the <xref:System.Xml.Linq.XStreamingElement> in a single statement, it is sometimes more convenient to add content to the streaming element incrementally."}]}]},{"pos":[309,587],"content":"Queries are not iterated until the <xref:System.Xml.Linq.XStreamingElement> is serialized. This is in contrast to using queries for content for an <xref:System.Xml.Linq.XElement>, where queries are iterated at the time of construction of the new <xref:System.Xml.Linq.XElement>.","nodes":[{"content":"Queries are not iterated until the <xref:System.Xml.Linq.XStreamingElement> is serialized. This is in contrast to using queries for content for an <xref:System.Xml.Linq.XElement>, where queries are iterated at the time of construction of the new <xref:System.Xml.Linq.XElement>.","pos":[0,278],"nodes":[{"content":"Queries are not iterated until the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph> is serialized.","pos":[0,90],"source":"Queries are not iterated until the <xref:System.Xml.Linq.XStreamingElement> is serialized."},{"content":"This is in contrast to using queries for content for an <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XElement&gt;</ph>, where queries are iterated at the time of construction of the new <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XElement&gt;</ph>.","pos":[91,278],"source":" This is in contrast to using queries for content for an <xref:System.Xml.Linq.XElement>, where queries are iterated at the time of construction of the new <xref:System.Xml.Linq.XElement>."}]}]},{"pos":[594,793],"content":"For details about the valid content that can be passed to this function, see <bpt id=\"p1\">[</bpt>Valid Content of XElement and XDocument Objects<ept id=\"p1\">](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)</ept>.","source":"For details about the valid content that can be passed to this function, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)."}],"pos":[35351,36151],"yaml":true,"extradata":"MT"},{"content":"Content to be added to the streaming element.","nodes":[{"pos":[0,45],"content":"Content to be added to the streaming element.","nodes":[{"content":"Content to be added to the streaming element.","pos":[0,45]}]}],"pos":[38194,38240],"yaml":true},{"content":"Gets or sets the name of this streaming element.","nodes":[{"pos":[0,48],"content":"Gets or sets the name of this streaming element.","nodes":[{"content":"Gets or sets the name of this streaming element.","pos":[0,48]}]}],"pos":[39733,39782],"yaml":true},{"content":"An <xref href=\"System.Xml.Linq.XName\"></xref> that contains the name of this streaming element.","nodes":[{"pos":[0,95],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XName\"&gt;&lt;/xref&gt;</ph> that contains the name of this streaming element.","source":"An <xref href=\"System.Xml.Linq.XName\"></xref> that contains the name of this streaming element."}],"pos":[41389,41485],"yaml":true},{"content":"Outputs this <xref href=\"System.Xml.Linq.XStreamingElement\"></xref> to the specified <xref href=\"System.IO.Stream\"></xref>.","nodes":[{"pos":[0,123],"content":"Outputs this <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XStreamingElement\"&gt;&lt;/xref&gt;</ph> to the specified <ph id=\"ph2\">&lt;xref href=\"System.IO.Stream\"&gt;&lt;/xref&gt;</ph>.","source":"Outputs this <xref href=\"System.Xml.Linq.XStreamingElement\"></xref> to the specified <xref href=\"System.IO.Stream\"></xref>."}],"pos":[43055,43179],"yaml":true},{"content":"The serialized XML will be indented. All insignificant white space will be removed, and additional white space will be added so that the XML will be properly indented. The behavior of this method is that insignificant white space will not be preserved.  \n  \n If you want to control white space, use the overload of <xref:System.Xml.Linq.XStreamingElement.Save%2A> that takes <xref:System.Xml.Linq.SaveOptions> as a parameter. Use the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> option to save unindented XML. This will cause the writer to write all white spaces exactly as represented in the XML tree.  \n  \n Use <xref:System.Xml.Linq.SaveOptions.OmitDuplicateNamespaces> option if you want to remove duplicate namespace declarations.","nodes":[{"pos":[0,252],"content":"The serialized XML will be indented. All insignificant white space will be removed, and additional white space will be added so that the XML will be properly indented. The behavior of this method is that insignificant white space will not be preserved.","nodes":[{"content":"The serialized XML will be indented. All insignificant white space will be removed, and additional white space will be added so that the XML will be properly indented. The behavior of this method is that insignificant white space will not be preserved.","pos":[0,252],"nodes":[{"content":"The serialized XML will be indented.","pos":[0,36]},{"content":"All insignificant white space will be removed, and additional white space will be added so that the XML will be properly indented.","pos":[37,167]},{"content":"The behavior of this method is that insignificant white space will not be preserved.","pos":[168,252]}]}]},{"pos":[259,610],"content":"If you want to control white space, use the overload of <xref:System.Xml.Linq.XStreamingElement.Save%2A> that takes <xref:System.Xml.Linq.SaveOptions> as a parameter. Use the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> option to save unindented XML. This will cause the writer to write all white spaces exactly as represented in the XML tree.","nodes":[{"content":"If you want to control white space, use the overload of <xref:System.Xml.Linq.XStreamingElement.Save%2A> that takes <xref:System.Xml.Linq.SaveOptions> as a parameter. Use the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> option to save unindented XML. This will cause the writer to write all white spaces exactly as represented in the XML tree.","pos":[0,351],"nodes":[{"content":"If you want to control white space, use the overload of <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XStreamingElement.Save%2A&gt;</ph> that takes <ph id=\"ph2\">&lt;xref:System.Xml.Linq.SaveOptions&gt;</ph> as a parameter.","pos":[0,166],"source":"If you want to control white space, use the overload of <xref:System.Xml.Linq.XStreamingElement.Save%2A> that takes <xref:System.Xml.Linq.SaveOptions> as a parameter."},{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.SaveOptions.DisableFormatting&gt;</ph> option to save unindented XML.","pos":[167,258],"source":" Use the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> option to save unindented XML."},{"content":"This will cause the writer to write all white spaces exactly as represented in the XML tree.","pos":[259,351]}]}]},{"pos":[617,742],"content":"Use <xref:System.Xml.Linq.SaveOptions.OmitDuplicateNamespaces> option if you want to remove duplicate namespace declarations.","nodes":[{"content":"Use <ph id=\"ph1\">&lt;xref:System.Xml.Linq.SaveOptions.OmitDuplicateNamespaces&gt;</ph> option if you want to remove duplicate namespace declarations.","pos":[0,125],"source":"Use <xref:System.Xml.Linq.SaveOptions.OmitDuplicateNamespaces> option if you want to remove duplicate namespace declarations."}]}],"pos":[43190,43939],"yaml":true,"extradata":"MT"},{"content":"The stream to output this <xref href=\"System.Xml.Linq.XDocument\"></xref> to.","nodes":[{"pos":[0,76],"content":"The stream to output this <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XDocument\"&gt;&lt;/xref&gt;</ph> to.","source":"The stream to output this <xref href=\"System.Xml.Linq.XDocument\"></xref> to."}],"pos":[44087,44164],"yaml":true},{"content":"Serialize this streaming element to a <xref href=\"System.IO.TextWriter\"></xref>.","nodes":[{"pos":[0,80],"content":"Serialize this streaming element to a <ph id=\"ph1\">&lt;xref href=\"System.IO.TextWriter\"&gt;&lt;/xref&gt;</ph>.","source":"Serialize this streaming element to a <xref href=\"System.IO.TextWriter\"></xref>."}],"pos":[45758,45839],"yaml":true},{"content":"The serialized XML will be indented. All insignificant white space will be removed, and additional white space will be added so that the XML will be properly indented. The behavior of this method is that insignificant white space nodes in the XML tree will not be preserved.  \n  \n If you want to control white space, use one of the overloads of <xref:System.Xml.Linq.XStreamingElement.Save%2A> that take <xref:System.Xml.Linq.SaveOptions> as a parameter. For more information, see [Preserving White Space while Loading or Parsing XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).","nodes":[{"pos":[0,274],"content":"The serialized XML will be indented. All insignificant white space will be removed, and additional white space will be added so that the XML will be properly indented. The behavior of this method is that insignificant white space nodes in the XML tree will not be preserved.","nodes":[{"content":"The serialized XML will be indented. All insignificant white space will be removed, and additional white space will be added so that the XML will be properly indented. The behavior of this method is that insignificant white space nodes in the XML tree will not be preserved.","pos":[0,274],"nodes":[{"content":"The serialized XML will be indented.","pos":[0,36]},{"content":"All insignificant white space will be removed, and additional white space will be added so that the XML will be properly indented.","pos":[37,167]},{"content":"The behavior of this method is that insignificant white space nodes in the XML tree will not be preserved.","pos":[168,274]}]}]},{"pos":[281,726],"content":"If you want to control white space, use one of the overloads of <xref:System.Xml.Linq.XStreamingElement.Save%2A> that take <xref:System.Xml.Linq.SaveOptions> as a parameter. For more information, see [Preserving White Space while Loading or Parsing XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).","nodes":[{"content":"If you want to control white space, use one of the overloads of <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XStreamingElement.Save%2A&gt;</ph> that take <ph id=\"ph2\">&lt;xref:System.Xml.Linq.SaveOptions&gt;</ph> as a parameter.","pos":[0,173],"source":"If you want to control white space, use one of the overloads of <xref:System.Xml.Linq.XStreamingElement.Save%2A> that take <xref:System.Xml.Linq.SaveOptions> as a parameter."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Preserving White Space while Loading or Parsing XML<ept id=\"p1\">](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d)</ept> and <bpt id=\"p2\">[</bpt>Preserving White Space While Serializing<ept id=\"p2\">](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)</ept>.","pos":[174,445],"source":" For more information, see [Preserving White Space while Loading or Parsing XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)."}]}],"pos":[45850,46581],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.IO.TextWriter\"></xref> that the <xref href=\"System.Xml.Linq.XStreamingElement\"></xref> will be written to.","nodes":[{"pos":[0,127],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.IO.TextWriter\"&gt;&lt;/xref&gt;</ph> that the <ph id=\"ph2\">&lt;xref href=\"System.Xml.Linq.XStreamingElement\"&gt;&lt;/xref&gt;</ph> will be written to.","source":"A <xref href=\"System.IO.TextWriter\"></xref> that the <xref href=\"System.Xml.Linq.XStreamingElement\"></xref> will be written to."}],"pos":[48716,48844],"yaml":true},{"content":"Serialize this streaming element to a file.","nodes":[{"pos":[0,43],"content":"Serialize this streaming element to a file.","nodes":[{"content":"Serialize this streaming element to a file.","pos":[0,43]}]}],"pos":[50405,50449],"yaml":true},{"content":"The serialized XML will be indented. All insignificant white space will be removed, and additional white space will be added so that the XML will be properly indented. The behavior of this method is that insignificant white space nodes in the XML tree will not be preserved.  \n  \n If you want to control white space, use one of the overloads of <xref:System.Xml.Linq.XStreamingElement.Save%2A> that take <xref:System.Xml.Linq.SaveOptions> as a parameter. For more information, see [Preserving White Space while Loading or Parsing XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).","nodes":[{"pos":[0,274],"content":"The serialized XML will be indented. All insignificant white space will be removed, and additional white space will be added so that the XML will be properly indented. The behavior of this method is that insignificant white space nodes in the XML tree will not be preserved.","nodes":[{"content":"The serialized XML will be indented. All insignificant white space will be removed, and additional white space will be added so that the XML will be properly indented. The behavior of this method is that insignificant white space nodes in the XML tree will not be preserved.","pos":[0,274],"nodes":[{"content":"The serialized XML will be indented.","pos":[0,36]},{"content":"All insignificant white space will be removed, and additional white space will be added so that the XML will be properly indented.","pos":[37,167]},{"content":"The behavior of this method is that insignificant white space nodes in the XML tree will not be preserved.","pos":[168,274]}]}]},{"pos":[281,726],"content":"If you want to control white space, use one of the overloads of <xref:System.Xml.Linq.XStreamingElement.Save%2A> that take <xref:System.Xml.Linq.SaveOptions> as a parameter. For more information, see [Preserving White Space while Loading or Parsing XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).","nodes":[{"content":"If you want to control white space, use one of the overloads of <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XStreamingElement.Save%2A&gt;</ph> that take <ph id=\"ph2\">&lt;xref:System.Xml.Linq.SaveOptions&gt;</ph> as a parameter.","pos":[0,173],"source":"If you want to control white space, use one of the overloads of <xref:System.Xml.Linq.XStreamingElement.Save%2A> that take <xref:System.Xml.Linq.SaveOptions> as a parameter."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Preserving White Space while Loading or Parsing XML<ept id=\"p1\">](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d)</ept> and <bpt id=\"p2\">[</bpt>Preserving White Space While Serializing<ept id=\"p2\">](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)</ept>.","pos":[174,445],"source":" For more information, see [Preserving White Space while Loading or Parsing XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)."}]}],"pos":[50460,51191],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.String\"></xref> that contains the name of the file.","nodes":[{"pos":[0,72],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> that contains the name of the file.","source":"A <xref href=\"System.String\"></xref> that contains the name of the file."}],"pos":[53109,53182],"yaml":true},{"content":"Serialize this streaming element to an <xref href=\"System.Xml.XmlWriter\"></xref>.","nodes":[{"pos":[0,81],"content":"Serialize this streaming element to an <ph id=\"ph1\">&lt;xref href=\"System.Xml.XmlWriter\"&gt;&lt;/xref&gt;</ph>.","source":"Serialize this streaming element to an <xref href=\"System.Xml.XmlWriter\"></xref>."}],"pos":[54469,54551],"yaml":true},{"content":"A <xref href=\"System.Xml.XmlWriter\"></xref> that the <xref href=\"System.Xml.Linq.XElement\"></xref> will be written to.","nodes":[{"pos":[0,118],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Xml.XmlWriter\"&gt;&lt;/xref&gt;</ph> that the <ph id=\"ph2\">&lt;xref href=\"System.Xml.Linq.XElement\"&gt;&lt;/xref&gt;</ph> will be written to.","source":"A <xref href=\"System.Xml.XmlWriter\"></xref> that the <xref href=\"System.Xml.Linq.XElement\"></xref> will be written to."}],"pos":[56752,56871],"yaml":true},{"content":"Outputs this <xref href=\"System.Xml.Linq.XStreamingElement\"></xref> to the specified <xref href=\"System.IO.Stream\"></xref>, optionally specifying formatting behavior.","nodes":[{"pos":[0,166],"content":"Outputs this <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XStreamingElement\"&gt;&lt;/xref&gt;</ph> to the specified <ph id=\"ph2\">&lt;xref href=\"System.IO.Stream\"&gt;&lt;/xref&gt;</ph>, optionally specifying formatting behavior.","source":"Outputs this <xref href=\"System.Xml.Linq.XStreamingElement\"></xref> to the specified <xref href=\"System.IO.Stream\"></xref>, optionally specifying formatting behavior."}],"pos":[58564,58731],"yaml":true},{"content":"By default the `options` are set to <xref:System.Xml.Linq.SaveOptions.None>. This option will remove all extraneous insignificant white space, and add appropriate insignificant white space so that the XML is properly indented.  \n  \n If you want to save unindented XML, specify the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> flag for `options`. This will cause the writer to write all white spaces exactly as represented in the XML tree.  \n  \n Use <xref:System.Xml.Linq.SaveOptions.OmitDuplicateNamespaces> option if you want to remove duplicate namespace declarations.","nodes":[{"pos":[0,226],"content":"By default the `options` are set to <xref:System.Xml.Linq.SaveOptions.None>. This option will remove all extraneous insignificant white space, and add appropriate insignificant white space so that the XML is properly indented.","nodes":[{"content":"By default the <ph id=\"ph1\">`options`</ph> are set to <ph id=\"ph2\">&lt;xref:System.Xml.Linq.SaveOptions.None&gt;</ph>.","pos":[0,76],"source":"By default the `options` are set to <xref:System.Xml.Linq.SaveOptions.None>."},{"content":"This option will remove all extraneous insignificant white space, and add appropriate insignificant white space so that the XML is properly indented.","pos":[77,226]}]},{"pos":[233,446],"content":"If you want to save unindented XML, specify the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> flag for `options`. This will cause the writer to write all white spaces exactly as represented in the XML tree.","nodes":[{"content":"If you want to save unindented XML, specify the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.SaveOptions.DisableFormatting&gt;</ph> flag for <ph id=\"ph2\">`options`</ph>.","pos":[0,120],"source":"If you want to save unindented XML, specify the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> flag for `options`."},{"content":"This will cause the writer to write all white spaces exactly as represented in the XML tree.","pos":[121,213]}]},{"pos":[453,578],"content":"Use <xref:System.Xml.Linq.SaveOptions.OmitDuplicateNamespaces> option if you want to remove duplicate namespace declarations.","nodes":[{"content":"Use <ph id=\"ph1\">&lt;xref:System.Xml.Linq.SaveOptions.OmitDuplicateNamespaces&gt;</ph> option if you want to remove duplicate namespace declarations.","pos":[0,125],"source":"Use <xref:System.Xml.Linq.SaveOptions.OmitDuplicateNamespaces> option if you want to remove duplicate namespace declarations."}]}],"pos":[58742,59327],"yaml":true,"extradata":"MT"},{"content":"The stream to output this <xref href=\"System.Xml.Linq.XDocument\"></xref> to.","nodes":[{"pos":[0,76],"content":"The stream to output this <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XDocument\"&gt;&lt;/xref&gt;</ph> to.","source":"The stream to output this <xref href=\"System.Xml.Linq.XDocument\"></xref> to."}],"pos":[59512,59589],"yaml":true},{"content":"A <xref href=\"System.Xml.Linq.SaveOptions\"></xref> object that specifies formatting behavior.","nodes":[{"pos":[0,93],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.SaveOptions\"&gt;&lt;/xref&gt;</ph> object that specifies formatting behavior.","source":"A <xref href=\"System.Xml.Linq.SaveOptions\"></xref> object that specifies formatting behavior."}],"pos":[59666,59760],"yaml":true},{"content":"Serialize this streaming element to a <xref href=\"System.IO.TextWriter\"></xref>, optionally disabling formatting.","nodes":[{"pos":[0,113],"content":"Serialize this streaming element to a <ph id=\"ph1\">&lt;xref href=\"System.IO.TextWriter\"&gt;&lt;/xref&gt;</ph>, optionally disabling formatting.","source":"Serialize this streaming element to a <xref href=\"System.IO.TextWriter\"></xref>, optionally disabling formatting."}],"pos":[61477,61591],"yaml":true},{"content":"If you want to save unindented XML, specify the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> flag for `options`. This will cause the writer to write all white space exactly as represented in the XML tree.  \n  \n If you want to save indented XML, do not specify the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> flag for `options`. This will remove all extraneous insignificant white space, and add appropriate insignificant white space so that the XML is properly indented. This is the default behavior, and the behavior of the overloads of the <xref:System.Xml.Linq.XElement.Save%2A> methods that do not take `options` as a parameter.  \n  \n For more information, see [Preserving White Space while Loading or Parsing XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).","nodes":[{"pos":[0,212],"content":"If you want to save unindented XML, specify the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> flag for `options`. This will cause the writer to write all white space exactly as represented in the XML tree.","nodes":[{"content":"If you want to save unindented XML, specify the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.SaveOptions.DisableFormatting&gt;</ph> flag for <ph id=\"ph2\">`options`</ph>.","pos":[0,120],"source":"If you want to save unindented XML, specify the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> flag for `options`."},{"content":"This will cause the writer to write all white space exactly as represented in the XML tree.","pos":[121,212]}]},{"pos":[219,649],"content":"If you want to save indented XML, do not specify the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> flag for `options`. This will remove all extraneous insignificant white space, and add appropriate insignificant white space so that the XML is properly indented. This is the default behavior, and the behavior of the overloads of the <xref:System.Xml.Linq.XElement.Save%2A> methods that do not take `options` as a parameter.","nodes":[{"content":"If you want to save indented XML, do not specify the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.SaveOptions.DisableFormatting&gt;</ph> flag for <ph id=\"ph2\">`options`</ph>.","pos":[0,125],"source":"If you want to save indented XML, do not specify the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> flag for `options`."},{"content":"This will remove all extraneous insignificant white space, and add appropriate insignificant white space so that the XML is properly indented.","pos":[126,268]},{"content":"This is the default behavior, and the behavior of the overloads of the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XElement.Save%2A&gt;</ph> methods that do not take <ph id=\"ph2\">`options`</ph> as a parameter.","pos":[269,430],"source":" This is the default behavior, and the behavior of the overloads of the <xref:System.Xml.Linq.XElement.Save%2A> methods that do not take `options` as a parameter."}]},{"pos":[656,927],"content":"For more information, see <bpt id=\"p1\">[</bpt>Preserving White Space while Loading or Parsing XML<ept id=\"p1\">](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d)</ept> and <bpt id=\"p2\">[</bpt>Preserving White Space While Serializing<ept id=\"p2\">](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)</ept>.","source":"For more information, see [Preserving White Space while Loading or Parsing XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)."}],"pos":[61602,62536],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.IO.TextWriter\"></xref> to output the XML to.","nodes":[{"pos":[0,67],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.IO.TextWriter\"&gt;&lt;/xref&gt;</ph> to output the XML to.","source":"The <xref href=\"System.IO.TextWriter\"></xref> to output the XML to."}],"pos":[65065,65133],"yaml":true},{"content":"A <xref href=\"System.Xml.Linq.SaveOptions\"></xref> that specifies formatting behavior.","nodes":[{"pos":[0,86],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.SaveOptions\"&gt;&lt;/xref&gt;</ph> that specifies formatting behavior.","source":"A <xref href=\"System.Xml.Linq.SaveOptions\"></xref> that specifies formatting behavior."}],"pos":[65210,65297],"yaml":true},{"content":"Serialize this streaming element to a file, optionally disabling formatting.","nodes":[{"pos":[0,76],"content":"Serialize this streaming element to a file, optionally disabling formatting.","nodes":[{"content":"Serialize this streaming element to a file, optionally disabling formatting.","pos":[0,76]}]}],"pos":[66981,67058],"yaml":true},{"content":"If you want to save unindented XML, specify the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> flag for `options`. This will cause the writer to write all white space exactly as represented in the XML tree.  \n  \n If you want to save indented XML, do not specify the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> flag for `options`. This will remove all extraneous insignificant white space, and add appropriate insignificant white space so that the XML is properly indented. This is the default behavior, and the behavior of the overloads of the <xref:System.Xml.Linq.XElement.Save%2A> methods that do not take `options` as a parameter.  \n  \n For more information, see [Preserving White Space while Loading or Parsing XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).","nodes":[{"pos":[0,212],"content":"If you want to save unindented XML, specify the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> flag for `options`. This will cause the writer to write all white space exactly as represented in the XML tree.","nodes":[{"content":"If you want to save unindented XML, specify the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.SaveOptions.DisableFormatting&gt;</ph> flag for <ph id=\"ph2\">`options`</ph>.","pos":[0,120],"source":"If you want to save unindented XML, specify the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> flag for `options`."},{"content":"This will cause the writer to write all white space exactly as represented in the XML tree.","pos":[121,212]}]},{"pos":[219,649],"content":"If you want to save indented XML, do not specify the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> flag for `options`. This will remove all extraneous insignificant white space, and add appropriate insignificant white space so that the XML is properly indented. This is the default behavior, and the behavior of the overloads of the <xref:System.Xml.Linq.XElement.Save%2A> methods that do not take `options` as a parameter.","nodes":[{"content":"If you want to save indented XML, do not specify the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.SaveOptions.DisableFormatting&gt;</ph> flag for <ph id=\"ph2\">`options`</ph>.","pos":[0,125],"source":"If you want to save indented XML, do not specify the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> flag for `options`."},{"content":"This will remove all extraneous insignificant white space, and add appropriate insignificant white space so that the XML is properly indented.","pos":[126,268]},{"content":"This is the default behavior, and the behavior of the overloads of the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XElement.Save%2A&gt;</ph> methods that do not take <ph id=\"ph2\">`options`</ph> as a parameter.","pos":[269,430],"source":" This is the default behavior, and the behavior of the overloads of the <xref:System.Xml.Linq.XElement.Save%2A> methods that do not take `options` as a parameter."}]},{"pos":[656,927],"content":"For more information, see <bpt id=\"p1\">[</bpt>Preserving White Space while Loading or Parsing XML<ept id=\"p1\">](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d)</ept> and <bpt id=\"p2\">[</bpt>Preserving White Space While Serializing<ept id=\"p2\">](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)</ept>.","source":"For more information, see [Preserving White Space while Loading or Parsing XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)."}],"pos":[67069,68003],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.String\"></xref> that contains the name of the file.","nodes":[{"pos":[0,72],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> that contains the name of the file.","source":"A <xref href=\"System.String\"></xref> that contains the name of the file."}],"pos":[70401,70474],"yaml":true},{"content":"A <xref href=\"System.Xml.Linq.SaveOptions\"></xref> object that specifies formatting behavior.","nodes":[{"pos":[0,93],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.SaveOptions\"&gt;&lt;/xref&gt;</ph> object that specifies formatting behavior.","source":"A <xref href=\"System.Xml.Linq.SaveOptions\"></xref> object that specifies formatting behavior."}],"pos":[70551,70645],"yaml":true},{"content":"Returns the formatted (indented) XML for this streaming element.","nodes":[{"pos":[0,64],"content":"Returns the formatted (indented) XML for this streaming element.","nodes":[{"content":"Returns the formatted (indented) XML for this streaming element.","pos":[0,64]}]}],"pos":[71863,71928],"yaml":true},{"content":"Note that when debugging a program that uses <xref:System.Xml.Linq.XStreamingElement>, displaying the value of an object causes its <xref:System.Xml.Linq.XStreamingElement.ToString%2A> method to be called. This causes the XML to be serialized. If the semantics of your streaming element query are such that the streaming element can only be streamed once, this may cause undesirable behavior in your debugging experience.","nodes":[{"pos":[0,421],"content":"Note that when debugging a program that uses <xref:System.Xml.Linq.XStreamingElement>, displaying the value of an object causes its <xref:System.Xml.Linq.XStreamingElement.ToString%2A> method to be called. This causes the XML to be serialized. If the semantics of your streaming element query are such that the streaming element can only be streamed once, this may cause undesirable behavior in your debugging experience.","nodes":[{"content":"Note that when debugging a program that uses <xref:System.Xml.Linq.XStreamingElement>, displaying the value of an object causes its <xref:System.Xml.Linq.XStreamingElement.ToString%2A> method to be called. This causes the XML to be serialized. If the semantics of your streaming element query are such that the streaming element can only be streamed once, this may cause undesirable behavior in your debugging experience.","pos":[0,421],"nodes":[{"content":"Note that when debugging a program that uses <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph>, displaying the value of an object causes its <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XStreamingElement.ToString%2A&gt;</ph> method to be called.","pos":[0,205],"source":"Note that when debugging a program that uses <xref:System.Xml.Linq.XStreamingElement>, displaying the value of an object causes its <xref:System.Xml.Linq.XStreamingElement.ToString%2A> method to be called."},{"content":"This causes the XML to be serialized.","pos":[206,243]},{"content":"If the semantics of your streaming element query are such that the streaming element can only be streamed once, this may cause undesirable behavior in your debugging experience.","pos":[244,421]}]}]}],"pos":[71939,72361],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.String\"></xref> containing the indented XML.","nodes":[{"pos":[0,65],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> containing the indented XML.","source":"A <xref href=\"System.String\"></xref> containing the indented XML."}],"pos":[74449,74515],"yaml":true},{"content":"Returns the XML for this streaming element, optionally disabling formatting.","nodes":[{"pos":[0,76],"content":"Returns the XML for this streaming element, optionally disabling formatting.","nodes":[{"content":"Returns the XML for this streaming element, optionally disabling formatting.","pos":[0,76]}]}],"pos":[76161,76238],"yaml":true},{"content":"Note that when debugging a program that uses <xref:System.Xml.Linq.XStreamingElement>, displaying the value of an object causes its <xref:System.Xml.Linq.XStreamingElement.ToString%2A> method to be called. This causes the XML to be serialized. If the semantics of your streaming element query are such that the streaming element can only be streamed once, this may cause undesirable behavior in your debugging experience.","nodes":[{"pos":[0,421],"content":"Note that when debugging a program that uses <xref:System.Xml.Linq.XStreamingElement>, displaying the value of an object causes its <xref:System.Xml.Linq.XStreamingElement.ToString%2A> method to be called. This causes the XML to be serialized. If the semantics of your streaming element query are such that the streaming element can only be streamed once, this may cause undesirable behavior in your debugging experience.","nodes":[{"content":"Note that when debugging a program that uses <xref:System.Xml.Linq.XStreamingElement>, displaying the value of an object causes its <xref:System.Xml.Linq.XStreamingElement.ToString%2A> method to be called. This causes the XML to be serialized. If the semantics of your streaming element query are such that the streaming element can only be streamed once, this may cause undesirable behavior in your debugging experience.","pos":[0,421],"nodes":[{"content":"Note that when debugging a program that uses <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph>, displaying the value of an object causes its <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XStreamingElement.ToString%2A&gt;</ph> method to be called.","pos":[0,205],"source":"Note that when debugging a program that uses <xref:System.Xml.Linq.XStreamingElement>, displaying the value of an object causes its <xref:System.Xml.Linq.XStreamingElement.ToString%2A> method to be called."},{"content":"This causes the XML to be serialized.","pos":[206,243]},{"content":"If the semantics of your streaming element query are such that the streaming element can only be streamed once, this may cause undesirable behavior in your debugging experience.","pos":[244,421]}]}]}],"pos":[76249,76671],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Xml.Linq.SaveOptions\"></xref> that specifies formatting behavior.","nodes":[{"pos":[0,86],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.SaveOptions\"&gt;&lt;/xref&gt;</ph> that specifies formatting behavior.","source":"A <xref href=\"System.Xml.Linq.SaveOptions\"></xref> that specifies formatting behavior."}],"pos":[78802,78889],"yaml":true},{"content":"A <xref href=\"System.String\"></xref> containing the XML.","nodes":[{"pos":[0,56],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> containing the XML.","source":"A <xref href=\"System.String\"></xref> containing the XML."}],"pos":[78946,79003],"yaml":true},{"content":"Writes this streaming element to an <xref href=\"System.Xml.XmlWriter\"></xref>.","nodes":[{"pos":[0,78],"content":"Writes this streaming element to an <ph id=\"ph1\">&lt;xref href=\"System.Xml.XmlWriter\"&gt;&lt;/xref&gt;</ph>.","source":"Writes this streaming element to an <xref href=\"System.Xml.XmlWriter\"></xref>."}],"pos":[80616,80695],"yaml":true},{"content":"An <xref href=\"System.Xml.XmlWriter\"></xref> into which this method will write.","nodes":[{"pos":[0,79],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Xml.XmlWriter\"&gt;&lt;/xref&gt;</ph> into which this method will write.","source":"An <xref href=\"System.Xml.XmlWriter\"></xref> into which this method will write."}],"pos":[82922,83002],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Xml.Linq.XStreamingElement\n  commentId: T:System.Xml.Linq.XStreamingElement\n  id: XStreamingElement\n  children:\n  - System.Xml.Linq.XStreamingElement.#ctor(System.Xml.Linq.XName)\n  - System.Xml.Linq.XStreamingElement.#ctor(System.Xml.Linq.XName,System.Object)\n  - System.Xml.Linq.XStreamingElement.#ctor(System.Xml.Linq.XName,System.Object[])\n  - System.Xml.Linq.XStreamingElement.Add(System.Object)\n  - System.Xml.Linq.XStreamingElement.Add(System.Object[])\n  - System.Xml.Linq.XStreamingElement.Name\n  - System.Xml.Linq.XStreamingElement.Save(System.IO.Stream)\n  - System.Xml.Linq.XStreamingElement.Save(System.IO.TextWriter)\n  - System.Xml.Linq.XStreamingElement.Save(System.String)\n  - System.Xml.Linq.XStreamingElement.Save(System.Xml.XmlWriter)\n  - System.Xml.Linq.XStreamingElement.Save(System.IO.Stream,System.Xml.Linq.SaveOptions)\n  - System.Xml.Linq.XStreamingElement.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)\n  - System.Xml.Linq.XStreamingElement.Save(System.String,System.Xml.Linq.SaveOptions)\n  - System.Xml.Linq.XStreamingElement.ToString\n  - System.Xml.Linq.XStreamingElement.ToString(System.Xml.Linq.SaveOptions)\n  - System.Xml.Linq.XStreamingElement.WriteTo(System.Xml.XmlWriter)\n  langs:\n  - csharp\n  name: XStreamingElement\n  nameWithType: XStreamingElement\n  fullName: System.Xml.Linq.XStreamingElement\n  type: Class\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Represents elements in an XML tree that supports deferred streaming output.\n  remarks: \"This class allows you to create an XML tree that supports deferred streaming output. You use this class to create an XML tree in a very similar fashion to creating an XML tree using <xref:System.Xml.Linq.XElement>. However, there is a fundamental difference. When you use a LINQ query to specify content when creating an XML tree using <xref:System.Xml.Linq.XElement>, the query variable is iterated at the time of construction of the XML tree, and the results of the query are added to the XML tree. In contrast, when you create an XML tree using <xref:System.Xml.Linq.XStreamingElement>, a reference to the query variable is stored in the XML tree without being iterated. Queries are iterated only upon serialization. This allows you to create larger XML trees while maintaining a smaller memory footprint.  \\n  \\n If you are streaming from an input source, such as a text file, then you can read a very large text file, and generate a very large XML document while maintaining a small memory footprint.  \\n  \\n Another scenario is that you have a large XML tree that has been loaded into memory, and you want to create a transformed version of the document. If you create a new document using <xref:System.Xml.Linq.XElement>, then you will have two large XML trees in memory upon completion of the transformation. However, if you create the new XML tree using <xref:System.Xml.Linq.XStreamingElement>, then your working set will be effectively cut in half.  \\n  \\n Note that when debugging a program that uses <xref:System.Xml.Linq.XStreamingElement>, displaying the value of an object causes its <xref:System.Xml.Linq.XStreamingElement.ToString%2A> method to be called. This causes the XML to be serialized. If the semantics of your streaming element query are such that the streaming element can only be streamed once, this may cause undesirable behavior in your debugging experience.\"\n  example:\n  - \"The following example first creates a source XML tree. It then creates a transform of the source XML tree using <xref:System.Xml.Linq.XElement>. This transform creates a new tree in memory. It then creates a transform of the source XML tree using <xref:System.Xml.Linq.XStreamingElement>. This transform doesn't execute the query until the transformed tree is serialized to the console. Its memory usage is less.  \\n  \\n```csharp  \\n  \\n                XElement srcTree = new XElement(\\\"Root\\\",  \\n                       new XElement(\\\"Child\\\", 1),  \\n                       new XElement(\\\"Child\\\", 2),  \\n                       new XElement(\\\"Child\\\", 3),  \\n                       new XElement(\\\"Child\\\", 4),  \\n                       new XElement(\\\"Child\\\", 5)  \\n                   );  \\n  \\nXElement dstTree1 = new XElement(\\\"NewRoot\\\",  \\n                        from el in srcTree.Elements()  \\n                        where (int)el >= 3  \\n                        select new XElement(\\\"DifferentChild\\\", (int)el)  \\n                    );  \\n  \\nXStreamingElement dstTree2 = new XStreamingElement(\\\"NewRoot\\\",  \\n                        from el in srcTree.Elements()  \\n                        where (int)el >= 3  \\n                        select new XElement(\\\"DifferentChild\\\", (int)el)  \\n                    );  \\n  \\nConsole.WriteLine(dstTree1);  \\nConsole.WriteLine(\\\"------\\\");  \\nConsole.WriteLine(dstTree2);  \\n```  \\n  \\n```vb  \\n  \\n                Dim srcTree As XElement = _  \\n        <Root>  \\n            <Child>1</Child>  \\n            <Child>2</Child>  \\n            <Child>3</Child>  \\n            <Child>4</Child>  \\n            <Child>5</Child>  \\n        </Root>  \\n  \\nDim dstTree1 As XElement = _  \\n    <NewRoot>  \\n        <%= From el In srcTree.Elements _  \\n            Where (el.Value >= 3) _  \\n            Select <DifferentChild><%= el.Value %></DifferentChild> %>  \\n    </NewRoot>  \\n  \\nDim dstTree2 As XStreamingElement = New XStreamingElement(\\\"NewRoot\\\", _  \\n                From el In srcTree.Elements _  \\n                Where el.Value >= 3 _  \\n                Select <DifferentChild><%= el.Value %></DifferentChild> _  \\n            )  \\n  \\nConsole.WriteLine(dstTree1)  \\nConsole.WriteLine(\\\"------\\\")  \\nConsole.WriteLine(dstTree2)  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```  \\n  \\n                <NewRoot>  \\n  <DifferentChild>3</DifferentChild>  \\n  <DifferentChild>4</DifferentChild>  \\n  <DifferentChild>5</DifferentChild>  \\n</NewRoot>  \\n------  \\n<NewRoot>  \\n  <DifferentChild>3</DifferentChild>  \\n  <DifferentChild>4</DifferentChild>  \\n  <DifferentChild>5</DifferentChild>  \\n</NewRoot>  \\n```  \\n  \\n One approach to processing a text file is to write an extension method that streams the text file a line at a time using the `yield return` construct. You then can write a LINQ query that processes the text file in a lazy deferred fashion. If you then use the <xref:System.Xml.Linq.XStreamingElement> to stream output, you then can create a transform from the text file to XML that uses a minimal amount of memory, regardless of the size of the source text file.  \\n  \\n The following text file, People.txt, is the source for this example.  \\n  \\n```  \\n  \\n                #This is a comment  \\n1,Tai,Yee,Writer  \\n2,Nikolay,Grachev,Programmer  \\n3,David,Wright,Inventor  \\n```  \\n  \\n The following code contains an extension method that streams the lines of the text file in a deferred fashion.  \\n  \\n```csharp  \\n  \\n                public static class StreamReaderSequence  \\n{  \\n    public static IEnumerable<string> Lines(this StreamReader source)  \\n    {  \\n        String line;  \\n  \\n        if (source == null)  \\n            throw new ArgumentNullException(\\\"source\\\");  \\n        while ((line = source.ReadLine()) != null)  \\n        {  \\n            yield return line;  \\n        }  \\n    }  \\n}  \\n  \\nclass Program  \\n{  \\n    static void Main(string[] args)  \\n    {  \\n        StreamReader sr = new StreamReader(\\\"People.txt\\\");  \\n        XStreamingElement xmlTree = new XStreamingElement(\\\"Root\\\",  \\n            from line in sr.Lines()  \\n            let items = line.Split(',')  \\n            where !line.StartsWith(\\\"#\\\")  \\n            select new XElement(\\\"Person\\\",  \\n                       new XAttribute(\\\"ID\\\", items[0]),  \\n                       new XElement(\\\"First\\\", items[1]),  \\n                       new XElement(\\\"Last\\\", items[2]),  \\n                       new XElement(\\\"Occupation\\\", items[3])  \\n                   )  \\n        );  \\n        Console.WriteLine(xmlTree);  \\n        sr.Close();  \\n    }  \\n}  \\n```  \\n  \\n```vb  \\nModule StreamReaderSequence  \\n  \\n    <Runtime.CompilerServices.Extension>  \\n    Public Iterator Function Lines(source As IO.StreamReader) As IEnumerable(Of String)  \\n        If source Is Nothing Then Throw New ArgumentNullException(\\\"source\\\")  \\n        Dim line As String = source.ReadLine()  \\n        While (line <> Nothing)  \\n            Yield line  \\n            line = source.ReadLine()  \\n        End While  \\n    End Function  \\n  \\nEnd Module  \\n  \\nModule Module1  \\n    Sub Main()  \\n        Dim sr As New IO.StreamReader(\\\"People.txt\\\")  \\n        Dim xmlTree As New XStreamingElement(\\\"Root\\\",  \\n            From line In sr.Lines()  \\n            Let items = line.Split(\\\",\\\"c)  \\n            Where Not line.StartsWith(\\\"#\\\")  \\n            Select <Person ID=<%= items(0) %>>  \\n                       <First><%= items(1) %></First>  \\n                       <Last><%= items(2) %></Last>  \\n                       <Occupation><%= items(3) %></Occupation>  \\n                   </Person>)  \\n        Console.WriteLine(xmlTree)  \\n        sr.Close()  \\n    End Sub  \\nEnd Module  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```xml  \\n  \\n                <Root>  \\n  <Person ID=\\\"1\\\">  \\n    <First>Tai</First>  \\n    <Last>Yee</Last>  \\n    <Occupation>Writer</Occupation>  \\n  </Person>  \\n  <Person ID=\\\"2\\\">  \\n    <First>Nikolay</First>  \\n    <Last>Grachev</Last>  \\n    <Occupation>Programmer</Occupation>  \\n  </Person>  \\n  <Person ID=\\\"3\\\">  \\n    <First>David</First>  \\n    <Last>Wright</Last>  \\n    <Occupation>Inventor</Occupation>  \\n  </Person>  \\n</Root>  \\n```  \\n  \\n Sometimes you have to transform large XML files, and write your application so that the memory footprint of the application is predictable. If you try to populate an XML tree with a very large XML file, your memory usage will be proportional to the size of the file (that is, excessive). Therefore, you should use a streaming technique instead.  \\n  \\n Certain standard query operators, such as <xref:System.Linq.Enumerable.OrderBy%2A>, iterate their source, collect all of the data, sort it, and then finally yield the first item in the sequence. Note that if you use a query operator that materializes its source before yielding the first item, you will not retain a small memory footprint for your application.  \\n  \\n Even if you use the technique described in , if you try to assemble an XML tree that contains the transformed document, memory usage may be too great.  \\n  \\n The following example builds on the example in [How to: Stream XML Fragments with Access to Header Information](http://msdn.microsoft.com/library/01311522-9d03-4977-8641-2932c6f56092).  \\n  \\n This example uses the deferred execution capabilities of <xref:System.Xml.Linq.XStreamingElement> to stream the output.  \\n  \\n Note that the custom axis (`StreamCustomerItem`) is specifically written so that it expects a document that has `Customer`, `Name`, and `Item` elements, and that those elements will be arranged as in the following Source.xml document. A more robust implementation, however, would either validate the source document with an XSD, or would be prepared to parse an invalid document.  \\n  \\n The following is the source document, Source.xml:  \\n  \\n```xml  \\n  \\n                <?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" ?>   \\n<Root>  \\n  <Customer>  \\n    <Name>A. Datum Corporation</Name>  \\n    <Item>  \\n      <Key>0001</Key>  \\n    </Item>  \\n    <Item>  \\n      <Key>0002</Key>  \\n    </Item>  \\n    <Item>  \\n      <Key>0003</Key>  \\n    </Item>  \\n    <Item>  \\n      <Key>0004</Key>  \\n    </Item>  \\n  </Customer>  \\n  <Customer>  \\n    <Name>Fabrikam, Inc.</Name>  \\n    <Item>  \\n      <Key>0005</Key>  \\n    </Item>  \\n    <Item>  \\n      <Key>0006</Key>  \\n    </Item>  \\n    <Item>  \\n      <Key>0007</Key>  \\n    </Item>  \\n    <Item>  \\n      <Key>0008</Key>  \\n    </Item>  \\n  </Customer>  \\n  <Customer>  \\n    <Name>Southridge Video</Name>  \\n    <Item>  \\n      <Key>0009</Key>  \\n    </Item>  \\n    <Item>  \\n      <Key>0010</Key>  \\n    </Item>  \\n  </Customer>  \\n</Root>  \\n```  \\n  \\n The following code contains a method that uses an <xref:System.Xml.XmlReader> to stream the source XML. It uses <xref:System.Xml.Linq.XStreamingElement> to stream the new XML.  \\n  \\n```csharp  \\n  \\n                static IEnumerable<XElement> StreamCustomerItem(string uri)  \\n{  \\n    using (XmlReader reader = XmlReader.Create(uri))  \\n    {  \\n        XElement name = null;  \\n        XElement item = null;  \\n  \\n        reader.MoveToContent();  \\n  \\n        // Parse the file, save header information when encountered, and yield the  \\n        // Item XElement objects as they are created.  \\n  \\n        // loop through Customer elements  \\n        while (reader.Read())  \\n        {  \\n            if (reader.NodeType == XmlNodeType.Element  \\n                && reader.Name == \\\"Customer\\\")  \\n            {  \\n                // move to Name element  \\n                while (reader.Read())  \\n                {  \\n                    if (reader.NodeType == XmlNodeType.Element &&  \\n                        reader.Name == \\\"Name\\\")  \\n                    {  \\n                        name = XElement.ReadFrom(reader) as XElement;  \\n                        break;  \\n                    }  \\n                }  \\n  \\n                // loop through Item elements  \\n                while (reader.Read())  \\n                {  \\n                    if (reader.NodeType == XmlNodeType.EndElement)  \\n                        break;  \\n                    if (reader.NodeType == XmlNodeType.Element  \\n                        && reader.Name == \\\"Item\\\")  \\n                    {  \\n                        item = XElement.ReadFrom(reader) as XElement;  \\n                        if (item != null)  \\n                        {  \\n                            XElement tempRoot = new XElement(\\\"Root\\\",  \\n                                new XElement(name)  \\n                            );  \\n                            tempRoot.Add(item);  \\n                            yield return item;  \\n                        }  \\n                    }  \\n                }  \\n            }  \\n        }  \\n    }  \\n}  \\n  \\nstatic void Main(string[] args)  \\n{  \\n    XStreamingElement root = new XStreamingElement(\\\"Root\\\",  \\n        from el in StreamCustomerItem(\\\"Source.xml\\\")  \\n        select new XElement(\\\"Item\\\",  \\n            new XElement(\\\"Customer\\\", (string)el.Parent.Element(\\\"Name\\\")),  \\n            new XElement(el.Element(\\\"Key\\\"))  \\n        )  \\n    );  \\n    root.Save(\\\"Test.xml\\\");  \\n    Console.WriteLine(File.ReadAllText(\\\"Test.xml\\\"));  \\n}  \\n```  \\n  \\n```vb  \\nIterator Function StreamCustomerItem(uri As String) As IEnumerable(Of XElement)  \\n  \\n    Dim name As XElement = Nothing  \\n    Dim item As XElement = Nothing  \\n  \\n    Dim reader As XmlReader = XmlReader.Create(uri)  \\n    reader.MoveToContent()  \\n  \\n    ' Parse the file, save header information when encountered, and yield the  \\n    ' Item XElement objects as they are created.  \\n  \\n    ' Loop through Customer elements.  \\n    While (reader.Read())  \\n        If (reader.NodeType = XmlNodeType.Element And reader.Name = \\\"Customer\\\") Then  \\n            While (reader.Read())  \\n                ' Move to Name element  \\n                If (reader.NodeType = XmlNodeType.Element And reader.Name = \\\"Name\\\") Then  \\n                    name = CType(XElement.ReadFrom(reader), XElement)  \\n                    Exit While  \\n                End If  \\n            End While  \\n  \\n            ' Loop through Item elements  \\n            While (reader.Read())  \\n                If (reader.NodeType = XmlNodeType.EndElement) Then  \\n                    Exit While  \\n                End If  \\n  \\n                If (reader.NodeType = XmlNodeType.Element And reader.Name = \\\"Item\\\") Then  \\n                    item = CType(XElement.ReadFrom(reader), XElement)  \\n                    If (Not (item Is Nothing)) Then  \\n                        Dim tempRoot = New XElement(\\\"Root\\\",  \\n                            New XElement(name)  \\n                        )  \\n                        tempRoot.Add(item)  \\n                        Yield item  \\n                     End If  \\n                End If  \\n            End While  \\n        End If  \\n     End While  \\n    reader.Close()  \\nEnd Function  \\n  \\nSub Main()  \\n    Dim root As New XStreamingElement(\\\"Root\\\",  \\n        From el In StreamCustomerItem(\\\"c:\\\\trash\\\\Source.xml\\\")  \\n        Select New XElement(\\\"Item\\\",  \\n            New XElement(\\\"Customer\\\", CStr(el.Parent.Element(\\\"Name\\\"))),  \\n            New XElement(el.Element(\\\"Key\\\"))))  \\n    root.Save(\\\"c:\\\\trash\\\\Test.xml\\\")  \\n    Console.WriteLine(System.IO.File.ReadAllText(\\\"c:\\\\trash\\\\Test.xml\\\"))  \\nEnd Sub  \\n  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```xml  \\n  \\n                <?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>  \\n<Root>  \\n  <Item>  \\n    <Customer>A. Datum Corporation</Customer>  \\n    <Key>0001</Key>  \\n  </Item>  \\n  <Item>  \\n    <Customer>A. Datum Corporation</Customer>  \\n    <Key>0002</Key>  \\n  </Item>  \\n  <Item>  \\n    <Customer>A. Datum Corporation</Customer>  \\n    <Key>0003</Key>  \\n  </Item>  \\n  <Item>  \\n    <Customer>A. Datum Corporation</Customer>  \\n    <Key>0004</Key>  \\n  </Item>  \\n  <Item>  \\n    <Customer>Fabrikam, Inc.</Customer>  \\n    <Key>0005</Key>  \\n  </Item>  \\n  <Item>  \\n    <Customer>Fabrikam, Inc.</Customer>  \\n    <Key>0006</Key>  \\n  </Item>  \\n  <Item>  \\n    <Customer>Fabrikam, Inc.</Customer>  \\n    <Key>0007</Key>  \\n  </Item>  \\n  <Item>  \\n    <Customer>Fabrikam, Inc.</Customer>  \\n    <Key>0008</Key>  \\n  </Item>  \\n  <Item>  \\n    <Customer>Southridge Video</Customer>  \\n    <Key>0009</Key>  \\n  </Item>  \\n  <Item>  \\n    <Customer>Southridge Video</Customer>  \\n    <Key>0010</Key>  \\n  </Item>  \\n</Root>  \\n```\"\n  syntax:\n    content: public class XStreamingElement\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XStreamingElement.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XStreamingElement.#ctor(System.Xml.Linq.XName)\n  commentId: M:System.Xml.Linq.XStreamingElement.#ctor(System.Xml.Linq.XName)\n  id: '#ctor(System.Xml.Linq.XName)'\n  parent: System.Xml.Linq.XStreamingElement\n  langs:\n  - csharp\n  name: XStreamingElement(XName)\n  nameWithType: XStreamingElement.XStreamingElement(XName)\n  fullName: XStreamingElement.XStreamingElement(XName)\n  type: Constructor\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Initializes a new instance of the <xref href=\"System.Xml.Linq.XElement\"></xref> class from the specified <xref href=\"System.Xml.Linq.XName\"></xref>.\n  remarks: \"This constructor creates a streaming element with no content and no attributes.  \\n  \\n There is an implicit conversion from string to <xref:System.Xml.Linq.XName>. Typical use of this constructor is to specify a string as the parameter instead of creating a new <xref:System.Xml.Linq.XName>.\"\n  example:\n  - \"```csharp  \\n  \\n                XElement srcTree = new XElement(\\\"Root\\\",  \\n                       new XElement(\\\"Child\\\", 1),  \\n                       new XElement(\\\"Child\\\", 2),  \\n                       new XElement(\\\"Child\\\", 3),  \\n                       new XElement(\\\"Child\\\", 4),  \\n                       new XElement(\\\"Child\\\", 5)  \\n                   );  \\n  \\nXStreamingElement dstTree = new XStreamingElement(\\\"NewRoot\\\",  \\n                        from el in srcTree.Elements()  \\n                        where (int)el >= 3  \\n                        select new XElement(\\\"DifferentChild\\\", (int)el)  \\n                    );  \\n  \\nConsole.WriteLine(dstTree);  \\n```  \\n  \\n```vb  \\n  \\n                Dim srcTree As XElement = _  \\n        <Root>  \\n            <Child>1</Child>  \\n            <Child>2</Child>  \\n            <Child>3</Child>  \\n            <Child>4</Child>  \\n            <Child>5</Child>  \\n        </Root>  \\n  \\nDim dstTree As XStreamingElement = New XStreamingElement(\\\"NewRoot\\\", _  \\n                From el In srcTree.Elements _  \\n                Where el.Value >= 3 _  \\n                Select <DifferentChild><%= el.Value %></DifferentChild> _  \\n            )  \\n  \\nConsole.WriteLine(dstTree)  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```  \\n  \\n                <NewRoot>  \\n  <DifferentChild>3</DifferentChild>  \\n  <DifferentChild>4</DifferentChild>  \\n  <DifferentChild>5</DifferentChild>  \\n</NewRoot>  \\n```\"\n  syntax:\n    content: public XStreamingElement (System.Xml.Linq.XName name);\n    parameters:\n    - id: name\n      type: System.Xml.Linq.XName\n      description: An <xref href=\"System.Xml.Linq.XName\"></xref> that contains the name of the element.\n  overload: System.Xml.Linq.XStreamingElement.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XStreamingElement.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XStreamingElement.#ctor(System.Xml.Linq.XName,System.Object)\n  commentId: M:System.Xml.Linq.XStreamingElement.#ctor(System.Xml.Linq.XName,System.Object)\n  id: '#ctor(System.Xml.Linq.XName,System.Object)'\n  parent: System.Xml.Linq.XStreamingElement\n  langs:\n  - csharp\n  name: XStreamingElement(XName, Object)\n  nameWithType: XStreamingElement.XStreamingElement(XName, Object)\n  fullName: XStreamingElement.XStreamingElement(XName, Object)\n  type: Constructor\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Initializes a new instance of the <xref href=\"System.Xml.Linq.XStreamingElement\"></xref> class with the specified name and content.\n  remarks: \"This constructor creates a streaming element with the specified content and attributes.  \\n  \\n There is an implicit conversion from string to <xref:System.Xml.Linq.XName>. Typical use of this constructor is to specify a string as the parameter instead of creating a new <xref:System.Xml.Linq.XName>.  \\n  \\n Queries are not iterated until the <xref:System.Xml.Linq.XStreamingElement> is serialized. This is in contrast to using queries for content for an <xref:System.Xml.Linq.XElement>, where queries are iterated at the time of construction of the new <xref:System.Xml.Linq.XElement>.  \\n  \\n For details about the valid content that can be passed to this constructor, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).\"\n  example:\n  - \"This example uses the following XML file, named Source.xml:  \\n  \\n```xml  \\n  \\n                <?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" ?>   \\n<Root>  \\n  <Child Key=\\\"01\\\">  \\n    <GrandChild>aaa</GrandChild>  \\n  </Child>  \\n  <Child Key=\\\"02\\\">  \\n    <GrandChild>bbb</GrandChild>  \\n  </Child>  \\n  <Child Key=\\\"03\\\">  \\n    <GrandChild>ccc</GrandChild>  \\n  </Child>  \\n</Root>  \\n```\"\n  syntax:\n    content: public XStreamingElement (System.Xml.Linq.XName name, object content);\n    parameters:\n    - id: name\n      type: System.Xml.Linq.XName\n      description: An <xref href=\"System.Xml.Linq.XName\"></xref> that contains the element name.\n    - id: content\n      type: System.Object\n      description: The contents of the element.\n  overload: System.Xml.Linq.XStreamingElement.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XStreamingElement.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XStreamingElement.#ctor(System.Xml.Linq.XName,System.Object[])\n  commentId: M:System.Xml.Linq.XStreamingElement.#ctor(System.Xml.Linq.XName,System.Object[])\n  id: '#ctor(System.Xml.Linq.XName,System.Object[])'\n  parent: System.Xml.Linq.XStreamingElement\n  langs:\n  - csharp\n  name: XStreamingElement(XName, Object[])\n  nameWithType: XStreamingElement.XStreamingElement(XName, Object[])\n  fullName: XStreamingElement.XStreamingElement(XName, Object[])\n  type: Constructor\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Initializes a new instance of the <xref href=\"System.Xml.Linq.XStreamingElement\"></xref> class with the specified name and content.\n  remarks: \"This constructor creates a streaming element with the specified content and attributes.  \\n  \\n There is an implicit conversion from string to <xref:System.Xml.Linq.XName>. Typical use of this constructor is to specify a string as the parameter instead of creating a new <xref:System.Xml.Linq.XName>.  \\n  \\n Queries are not iterated until the <xref:System.Xml.Linq.XStreamingElement> is serialized. This is in contrast to using queries for content for an <xref:System.Xml.Linq.XElement>, where queries are iterated at the time of construction of the new <xref:System.Xml.Linq.XElement>.  \\n  \\n For details about the valid content that can be passed to this function, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).\"\n  example:\n  - \"This example uses the following XML file, named Source.xml:  \\n  \\n```xml  \\n  \\n                <?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" ?>   \\n<Root>  \\n  <Child Key=\\\"01\\\">  \\n    <GrandChild>aaa</GrandChild>  \\n  </Child>  \\n  <Child Key=\\\"02\\\">  \\n    <GrandChild>bbb</GrandChild>  \\n  </Child>  \\n  <Child Key=\\\"03\\\">  \\n    <GrandChild>ccc</GrandChild>  \\n  </Child>  \\n</Root>  \\n```\"\n  syntax:\n    content: public XStreamingElement (System.Xml.Linq.XName name, object[] content);\n    parameters:\n    - id: name\n      type: System.Xml.Linq.XName\n      description: An <xref href=\"System.Xml.Linq.XName\"></xref> that contains the element name.\n    - id: content\n      type: System.Object[]\n      description: The contents of the element.\n  overload: System.Xml.Linq.XStreamingElement.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XStreamingElement.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XStreamingElement.Add(System.Object)\n  commentId: M:System.Xml.Linq.XStreamingElement.Add(System.Object)\n  id: Add(System.Object)\n  parent: System.Xml.Linq.XStreamingElement\n  langs:\n  - csharp\n  name: Add(Object)\n  nameWithType: XStreamingElement.Add(Object)\n  fullName: XStreamingElement.Add(Object)\n  type: Method\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Adds the specified content as children to this <xref href=\"System.Xml.Linq.XStreamingElement\"></xref>.\n  remarks: \"This constructor adds the specified content and attributes to the <xref:System.Xml.Linq.XStreamingElement>. While it is often possible to construct the <xref:System.Xml.Linq.XStreamingElement> in a single statement, it is sometimes more convenient to add content to the streaming element incrementally.  \\n  \\n Queries are not iterated until the <xref:System.Xml.Linq.XStreamingElement> is serialized. This is in contrast to using queries for content for an <xref:System.Xml.Linq.XElement>, where queries are iterated at the time of construction of the new <xref:System.Xml.Linq.XElement>.  \\n  \\n For details about the valid content that can be passed to this function, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).\"\n  example:\n  - \"The following example creates a new <xref:System.Xml.Linq.XStreamingElement>. It then adds two queries to the streaming element. The queries are not iterated until the streaming element is serialized.  \\n  \\n```csharp  \\n  \\n                XElement srcTree = new XElement(\\\"Root\\\",  \\n                       new XElement(\\\"Child\\\", 1),  \\n                       new XElement(\\\"Child\\\", 2),  \\n                       new XElement(\\\"Child\\\", 3),  \\n                       new XElement(\\\"Child\\\", 4),  \\n                       new XElement(\\\"Child\\\", 5)  \\n                   );  \\n  \\nXStreamingElement dstTree = new XStreamingElement(\\\"NewRoot\\\");  \\n  \\ndstTree.Add(  \\n    from el in srcTree.Elements()  \\n    where (int)el <= 1  \\n    select new XElement(\\\"Child\\\", (int)el)  \\n);  \\n  \\ndstTree.Add(  \\n    from el in srcTree.Elements()  \\n    where (int)el >= 3  \\n    select new XElement(\\\"DifferentChild\\\", (int)el)  \\n);  \\n  \\nConsole.WriteLine(dstTree);  \\n```  \\n  \\n```vb  \\n  \\n                Dim srcTree As XElement = _  \\n    <Root>  \\n        <Child>1</Child>  \\n        <Child>2</Child>  \\n        <Child>3</Child>  \\n        <Child>4</Child>  \\n        <Child>5</Child>  \\n    </Root>  \\n  \\nDim dstTree As XStreamingElement = New XStreamingElement(\\\"NewRoot\\\")  \\n  \\ndstTree.Add( _  \\n    From el In srcTree.Elements() _  \\n    Where el.Value <= 1 _  \\n    Select <Child><%= el.Value %></Child> _  \\n)  \\n  \\ndstTree.Add( _  \\n    From el In srcTree.Elements() _  \\n    Where el.Value >= 3 _  \\n    Select <DifferentChild><%= el.Value %></DifferentChild> _  \\n)  \\n  \\nConsole.WriteLine(dstTree)  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```xml  \\n  \\n                <NewRoot>  \\n  <Child>1</Child>  \\n  <DifferentChild>3</DifferentChild>  \\n  <DifferentChild>4</DifferentChild>  \\n  <DifferentChild>5</DifferentChild>  \\n</NewRoot>  \\n```\"\n  syntax:\n    content: public void Add (object content);\n    parameters:\n    - id: content\n      type: System.Object\n      description: Content to be added to the streaming element.\n  overload: System.Xml.Linq.XStreamingElement.Add*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XStreamingElement.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XStreamingElement.Add(System.Object[])\n  commentId: M:System.Xml.Linq.XStreamingElement.Add(System.Object[])\n  id: Add(System.Object[])\n  parent: System.Xml.Linq.XStreamingElement\n  langs:\n  - csharp\n  name: Add(Object[])\n  nameWithType: XStreamingElement.Add(Object[])\n  fullName: XStreamingElement.Add(Object[])\n  type: Method\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Adds the specified content as children to this <xref href=\"System.Xml.Linq.XStreamingElement\"></xref>.\n  remarks: \"This constructor adds the specified content and attributes to the <xref:System.Xml.Linq.XStreamingElement>. While it is often possible to construct the <xref:System.Xml.Linq.XStreamingElement> in a single statement, it is sometimes more convenient to add content to the streaming element incrementally.  \\n  \\n Queries are not iterated until the <xref:System.Xml.Linq.XStreamingElement> is serialized. This is in contrast to using queries for content for an <xref:System.Xml.Linq.XElement>, where queries are iterated at the time of construction of the new <xref:System.Xml.Linq.XElement>.  \\n  \\n For details about the valid content that can be passed to this function, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).\"\n  example:\n  - \"The following example creates a new <xref:System.Xml.Linq.XStreamingElement>. It then adds two queries to the streaming element. The queries are not iterated until the streaming element is serialized.  \\n  \\n```csharp  \\n  \\n                XElement srcTree = new XElement(\\\"Root\\\",  \\n                       new XElement(\\\"Child\\\", 1),  \\n                       new XElement(\\\"Child\\\", 2),  \\n                       new XElement(\\\"Child\\\", 3),  \\n                       new XElement(\\\"Child\\\", 4),  \\n                       new XElement(\\\"Child\\\", 5)  \\n                   );  \\n  \\nXStreamingElement dstTree = new XStreamingElement(\\\"NewRoot\\\");  \\n  \\ndstTree.Add(  \\n    from el in srcTree.Elements()  \\n    where (int)el <= 1  \\n    select new XElement(\\\"Child\\\", (int)el)  \\n);  \\n  \\ndstTree.Add(  \\n    from el in srcTree.Elements()  \\n    where (int)el >= 3  \\n    select new XElement(\\\"DifferentChild\\\", (int)el)  \\n);  \\n  \\nConsole.WriteLine(dstTree);  \\n```  \\n  \\n```vb  \\n  \\n                Dim srcTree As XElement = _  \\n    <Root>  \\n        <Child>1</Child>  \\n        <Child>2</Child>  \\n        <Child>3</Child>  \\n        <Child>4</Child>  \\n        <Child>5</Child>  \\n    </Root>  \\n  \\nDim dstTree As XStreamingElement = New XStreamingElement(\\\"NewRoot\\\")  \\n  \\ndstTree.Add( _  \\n    From el In srcTree.Elements() _  \\n    Where el.Value <= 1 _  \\n    Select <Child><%= el.Value %></Child> _  \\n)  \\n  \\ndstTree.Add( _  \\n    From el In srcTree.Elements() _  \\n    Where el.Value >= 3 _  \\n    Select <DifferentChild><%= el.Value %></DifferentChild> _  \\n)  \\n  \\nConsole.WriteLine(dstTree)  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```xml  \\n  \\n                <NewRoot>  \\n  <Child>1</Child>  \\n  <DifferentChild>3</DifferentChild>  \\n  <DifferentChild>4</DifferentChild>  \\n  <DifferentChild>5</DifferentChild>  \\n</NewRoot>  \\n```\"\n  syntax:\n    content: public void Add (object[] content);\n    parameters:\n    - id: content\n      type: System.Object[]\n      description: Content to be added to the streaming element.\n  overload: System.Xml.Linq.XStreamingElement.Add*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XStreamingElement.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XStreamingElement.Name\n  commentId: P:System.Xml.Linq.XStreamingElement.Name\n  id: Name\n  parent: System.Xml.Linq.XStreamingElement\n  langs:\n  - csharp\n  name: Name\n  nameWithType: XStreamingElement.Name\n  fullName: XStreamingElement.Name\n  type: Property\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Gets or sets the name of this streaming element.\n  remarks: ''\n  example:\n  - \"This example creates a new streaming element, and then prints the name of the element.  \\n  \\n```csharp  \\n  \\n                XElement srcTree = new XElement(\\\"Root\\\",  \\n                       new XElement(\\\"Child\\\", 1),  \\n                       new XElement(\\\"Child\\\", 2),  \\n                       new XElement(\\\"Child\\\", 3),  \\n                       new XElement(\\\"Child\\\", 4),  \\n                       new XElement(\\\"Child\\\", 5)  \\n                   );  \\n  \\nXStreamingElement dstTree = new XStreamingElement(\\\"NewRoot\\\",  \\n                        from el in srcTree.Elements()  \\n                        where (int)el >= 3  \\n                        select new XElement(\\\"DifferentChild\\\", (int)el)  \\n                    );  \\n  \\nConsole.WriteLine(dstTree.Name);  \\n```  \\n  \\n```vb  \\n  \\n                Dim srcTree As XElement = _  \\n        <Root>  \\n            <Child>1</Child>  \\n            <Child>2</Child>  \\n            <Child>3</Child>  \\n            <Child>4</Child>  \\n            <Child>5</Child>  \\n        </Root>  \\n  \\nDim dstTree As XStreamingElement = New XStreamingElement(\\\"NewRoot\\\", _  \\n                From el In srcTree.Elements _  \\n                Where el.Value >= 3 _  \\n                Select <DifferentChild><%= el.Value %></DifferentChild> _  \\n            )  \\n  \\nConsole.WriteLine(dstTree.Name)  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```  \\n  \\nNewRoot  \\n```\"\n  syntax:\n    content: public System.Xml.Linq.XName Name { get; set; }\n    return:\n      type: System.Xml.Linq.XName\n      description: An <xref href=\"System.Xml.Linq.XName\"></xref> that contains the name of this streaming element.\n  overload: System.Xml.Linq.XStreamingElement.Name*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XStreamingElement.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XStreamingElement.Save(System.IO.Stream)\n  commentId: M:System.Xml.Linq.XStreamingElement.Save(System.IO.Stream)\n  id: Save(System.IO.Stream)\n  parent: System.Xml.Linq.XStreamingElement\n  langs:\n  - csharp\n  name: Save(Stream)\n  nameWithType: XStreamingElement.Save(Stream)\n  fullName: XStreamingElement.Save(Stream)\n  type: Method\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Outputs this <xref href=\"System.Xml.Linq.XStreamingElement\"></xref> to the specified <xref href=\"System.IO.Stream\"></xref>.\n  remarks: \"The serialized XML will be indented. All insignificant white space will be removed, and additional white space will be added so that the XML will be properly indented. The behavior of this method is that insignificant white space will not be preserved.  \\n  \\n If you want to control white space, use the overload of <xref:System.Xml.Linq.XStreamingElement.Save%2A> that takes <xref:System.Xml.Linq.SaveOptions> as a parameter. Use the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> option to save unindented XML. This will cause the writer to write all white spaces exactly as represented in the XML tree.  \\n  \\n Use <xref:System.Xml.Linq.SaveOptions.OmitDuplicateNamespaces> option if you want to remove duplicate namespace declarations.\"\n  syntax:\n    content: public void Save (System.IO.Stream stream);\n    parameters:\n    - id: stream\n      type: System.IO.Stream\n      description: The stream to output this <xref href=\"System.Xml.Linq.XDocument\"></xref> to.\n  overload: System.Xml.Linq.XStreamingElement.Save*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XStreamingElement.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XStreamingElement.Save(System.IO.TextWriter)\n  commentId: M:System.Xml.Linq.XStreamingElement.Save(System.IO.TextWriter)\n  id: Save(System.IO.TextWriter)\n  parent: System.Xml.Linq.XStreamingElement\n  langs:\n  - csharp\n  name: Save(TextWriter)\n  nameWithType: XStreamingElement.Save(TextWriter)\n  fullName: XStreamingElement.Save(TextWriter)\n  type: Method\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Serialize this streaming element to a <xref href=\"System.IO.TextWriter\"></xref>.\n  remarks: \"The serialized XML will be indented. All insignificant white space will be removed, and additional white space will be added so that the XML will be properly indented. The behavior of this method is that insignificant white space nodes in the XML tree will not be preserved.  \\n  \\n If you want to control white space, use one of the overloads of <xref:System.Xml.Linq.XStreamingElement.Save%2A> that take <xref:System.Xml.Linq.SaveOptions> as a parameter. For more information, see [Preserving White Space while Loading or Parsing XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).\"\n  example:\n  - \"The following example creates a source XML tree, then instantiates an <xref:System.Xml.Linq.XStreamingElement> using a query on the source XML tree. It then writes the streaming element to a <xref:System.IO.StringWriter>.  \\n  \\n```csharp  \\n  \\n                XElement srcTree = new XElement(\\\"Root\\\",  \\n                       new XElement(\\\"Child\\\", 1),  \\n                       new XElement(\\\"Child\\\", 2),  \\n                       new XElement(\\\"Child\\\", 3),  \\n                       new XElement(\\\"Child\\\", 4),  \\n                       new XElement(\\\"Child\\\", 5)  \\n                   );  \\n  \\nXStreamingElement dstTree = new XStreamingElement(\\\"NewRoot\\\",  \\n                        from el in srcTree.Elements()  \\n                        where (int)el >= 3  \\n                        select new XElement(\\\"DifferentChild\\\", (int)el)  \\n                    );  \\n  \\nStringBuilder sb = new StringBuilder();  \\ndstTree.Save(new StringWriter(sb));  \\nConsole.WriteLine(sb.ToString());  \\n```  \\n  \\n```vb  \\n  \\n                Dim srcTree As XElement = _  \\n    <Root>  \\n        <Child>1</Child>  \\n        <Child>2</Child>  \\n        <Child>3</Child>  \\n        <Child>4</Child>  \\n        <Child>5</Child>  \\n    </Root>  \\n  \\nDim dstTree As XStreamingElement = New XStreamingElement(\\\"NewRoot\\\", _  \\n                        From el In srcTree.Elements() _  \\n                        Where el.Value >= 3 _  \\n                        Select <DifferentChild><%= el.Value %></DifferentChild> _  \\n                    )  \\n  \\nDim sb As StringBuilder = New StringBuilder()  \\ndstTree.Save(New StringWriter(sb))  \\nConsole.WriteLine(sb.ToString())  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```xml  \\n  \\n                <?xml version=\\\"1.0\\\" encoding=\\\"utf-16\\\"?>  \\n<NewRoot>  \\n  <DifferentChild>3</DifferentChild>  \\n  <DifferentChild>4</DifferentChild>  \\n  <DifferentChild>5</DifferentChild>  \\n</NewRoot>  \\n```\"\n  syntax:\n    content: public void Save (System.IO.TextWriter textWriter);\n    parameters:\n    - id: textWriter\n      type: System.IO.TextWriter\n      description: A <xref href=\"System.IO.TextWriter\"></xref> that the <xref href=\"System.Xml.Linq.XStreamingElement\"></xref> will be written to.\n  overload: System.Xml.Linq.XStreamingElement.Save*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XStreamingElement.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XStreamingElement.Save(System.String)\n  commentId: M:System.Xml.Linq.XStreamingElement.Save(System.String)\n  id: Save(System.String)\n  parent: System.Xml.Linq.XStreamingElement\n  langs:\n  - csharp\n  name: Save(String)\n  nameWithType: XStreamingElement.Save(String)\n  fullName: XStreamingElement.Save(String)\n  type: Method\n  assemblies:\n  - System.Xml.Linq\n  - netstandard\n  - System.Xml.XDocument\n  namespace: System.Xml.Linq\n  summary: Serialize this streaming element to a file.\n  remarks: \"The serialized XML will be indented. All insignificant white space will be removed, and additional white space will be added so that the XML will be properly indented. The behavior of this method is that insignificant white space nodes in the XML tree will not be preserved.  \\n  \\n If you want to control white space, use one of the overloads of <xref:System.Xml.Linq.XStreamingElement.Save%2A> that take <xref:System.Xml.Linq.SaveOptions> as a parameter. For more information, see [Preserving White Space while Loading or Parsing XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).\"\n  example:\n  - \"The following example creates a streaming XML tree. It then serializes the streaming XML tree to a file.  \\n  \\n```csharp  \\n  \\n                XElement srcTree = new XElement(\\\"Root\\\",  \\n                       new XElement(\\\"Child\\\", 1),  \\n                       new XElement(\\\"Child\\\", 2),  \\n                       new XElement(\\\"Child\\\", 3),  \\n                       new XElement(\\\"Child\\\", 4),  \\n                       new XElement(\\\"Child\\\", 5)  \\n                   );  \\n  \\nXStreamingElement dstTree = new XStreamingElement(\\\"NewRoot\\\",  \\n                        from el in srcTree.Elements()  \\n                        where (int)el >= 3  \\n                        select new XElement(\\\"DifferentChild\\\", (int)el)  \\n                    );  \\n  \\ndstTree.Save(\\\"Test.xml\\\");  \\nConsole.WriteLine(File.ReadAllText(\\\"Test.xml\\\"));  \\n```  \\n  \\n```vb  \\n  \\n                Dim srcTree As XElement = _  \\n    <Root>  \\n        <Child>1</Child>  \\n        <Child>2</Child>  \\n        <Child>3</Child>  \\n        <Child>4</Child>  \\n        <Child>5</Child>  \\n    </Root>  \\n  \\nDim dstTree As XStreamingElement = New XStreamingElement(\\\"NewRoot\\\", _  \\n                        From el In srcTree.Elements() _  \\n                        Where el.Value >= 3 _  \\n                        Select <DifferentChild><%= el.Value %></DifferentChild> _  \\n                    )  \\n  \\ndstTree.Save(\\\"Test.xml\\\")  \\nConsole.WriteLine(File.ReadAllText(\\\"Test.xml\\\"))  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```xml  \\n  \\n                <?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>  \\n<NewRoot>  \\n  <DifferentChild>3</DifferentChild>  \\n  <DifferentChild>4</DifferentChild>  \\n  <DifferentChild>5</DifferentChild>  \\n</NewRoot>  \\n```\"\n  syntax:\n    content: public void Save (string fileName);\n    parameters:\n    - id: fileName\n      type: System.String\n      description: A <xref href=\"System.String\"></xref> that contains the name of the file.\n  overload: System.Xml.Linq.XStreamingElement.Save*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XStreamingElement.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XStreamingElement.Save(System.Xml.XmlWriter)\n  commentId: M:System.Xml.Linq.XStreamingElement.Save(System.Xml.XmlWriter)\n  id: Save(System.Xml.XmlWriter)\n  parent: System.Xml.Linq.XStreamingElement\n  langs:\n  - csharp\n  name: Save(XmlWriter)\n  nameWithType: XStreamingElement.Save(XmlWriter)\n  fullName: XStreamingElement.Save(XmlWriter)\n  type: Method\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Serialize this streaming element to an <xref href=\"System.Xml.XmlWriter\"></xref>.\n  remarks: ''\n  example:\n  - \"The following example creates an <xref:System.Xml.Linq.XStreamingElement> and writes it to an <xref:System.Xml.XmlWriter>.  \\n  \\n```csharp  \\n  \\n                XElement srcTree = new XElement(\\\"Root\\\",  \\n                       new XElement(\\\"Child\\\", 1),  \\n                       new XElement(\\\"Child\\\", 2),  \\n                       new XElement(\\\"Child\\\", 3),  \\n                       new XElement(\\\"Child\\\", 4),  \\n                       new XElement(\\\"Child\\\", 5)  \\n                   );  \\n  \\nStringBuilder sb = new StringBuilder();  \\nXmlWriterSettings xws = new XmlWriterSettings();  \\nxws.OmitXmlDeclaration = true;  \\nusing (XmlWriter xw = XmlWriter.Create(sb, xws))  \\n{  \\n    XStreamingElement dstTree = new XStreamingElement(\\\"NewRoot\\\",  \\n                            from el in srcTree.Elements()  \\n                            where (int)el == 5  \\n                            select new XElement(\\\"DifferentChild\\\", (int)el)  \\n                        );  \\n  \\n    dstTree.Save(xw);  \\n}  \\nConsole.WriteLine(sb.ToString());  \\n```  \\n  \\n```vb  \\n  \\n                Dim srcTree As XElement = _  \\n    <Root>  \\n        <Child>1</Child>  \\n        <Child>2</Child>  \\n        <Child>3</Child>  \\n        <Child>4</Child>  \\n        <Child>5</Child>  \\n    </Root>  \\n  \\nDim sb As StringBuilder = New StringBuilder()  \\nDim xws As XmlWriterSettings = New XmlWriterSettings()  \\nxws.OmitXmlDeclaration = True  \\nUsing xw As XmlWriter = XmlWriter.Create(sb, xws)  \\n    Dim dstTree As XStreamingElement = New XStreamingElement(\\\"NewRoot\\\", _  \\n                            From el In srcTree.Elements() _  \\n                            Where el.Value = 5 _  \\n                            Select <DifferentChild><%= el.Value %></DifferentChild> _  \\n                        )  \\n    dstTree.Save(xw)  \\nEnd Using  \\nConsole.WriteLine(sb.ToString())  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```xml  \\n  \\n<NewRoot><DifferentChild>5</DifferentChild></NewRoot>  \\n```\"\n  syntax:\n    content: public void Save (System.Xml.XmlWriter writer);\n    parameters:\n    - id: writer\n      type: System.Xml.XmlWriter\n      description: A <xref href=\"System.Xml.XmlWriter\"></xref> that the <xref href=\"System.Xml.Linq.XElement\"></xref> will be written to.\n  overload: System.Xml.Linq.XStreamingElement.Save*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XStreamingElement.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XStreamingElement.Save(System.IO.Stream,System.Xml.Linq.SaveOptions)\n  commentId: M:System.Xml.Linq.XStreamingElement.Save(System.IO.Stream,System.Xml.Linq.SaveOptions)\n  id: Save(System.IO.Stream,System.Xml.Linq.SaveOptions)\n  parent: System.Xml.Linq.XStreamingElement\n  langs:\n  - csharp\n  name: Save(Stream, SaveOptions)\n  nameWithType: XStreamingElement.Save(Stream, SaveOptions)\n  fullName: XStreamingElement.Save(Stream, SaveOptions)\n  type: Method\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Outputs this <xref href=\"System.Xml.Linq.XStreamingElement\"></xref> to the specified <xref href=\"System.IO.Stream\"></xref>, optionally specifying formatting behavior.\n  remarks: \"By default the `options` are set to <xref:System.Xml.Linq.SaveOptions.None>. This option will remove all extraneous insignificant white space, and add appropriate insignificant white space so that the XML is properly indented.  \\n  \\n If you want to save unindented XML, specify the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> flag for `options`. This will cause the writer to write all white spaces exactly as represented in the XML tree.  \\n  \\n Use <xref:System.Xml.Linq.SaveOptions.OmitDuplicateNamespaces> option if you want to remove duplicate namespace declarations.\"\n  syntax:\n    content: public void Save (System.IO.Stream stream, System.Xml.Linq.SaveOptions options);\n    parameters:\n    - id: stream\n      type: System.IO.Stream\n      description: The stream to output this <xref href=\"System.Xml.Linq.XDocument\"></xref> to.\n    - id: options\n      type: System.Xml.Linq.SaveOptions\n      description: A <xref href=\"System.Xml.Linq.SaveOptions\"></xref> object that specifies formatting behavior.\n  overload: System.Xml.Linq.XStreamingElement.Save*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XStreamingElement.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XStreamingElement.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)\n  commentId: M:System.Xml.Linq.XStreamingElement.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)\n  id: Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)\n  parent: System.Xml.Linq.XStreamingElement\n  langs:\n  - csharp\n  name: Save(TextWriter, SaveOptions)\n  nameWithType: XStreamingElement.Save(TextWriter, SaveOptions)\n  fullName: XStreamingElement.Save(TextWriter, SaveOptions)\n  type: Method\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Serialize this streaming element to a <xref href=\"System.IO.TextWriter\"></xref>, optionally disabling formatting.\n  remarks: \"If you want to save unindented XML, specify the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> flag for `options`. This will cause the writer to write all white space exactly as represented in the XML tree.  \\n  \\n If you want to save indented XML, do not specify the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> flag for `options`. This will remove all extraneous insignificant white space, and add appropriate insignificant white space so that the XML is properly indented. This is the default behavior, and the behavior of the overloads of the <xref:System.Xml.Linq.XElement.Save%2A> methods that do not take `options` as a parameter.  \\n  \\n For more information, see [Preserving White Space while Loading or Parsing XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).\"\n  example:\n  - \"The following example shows two uses of this method. The first use preserves white space. The second one serializes the <xref:System.Xml.Linq.XStreamingElement> with formatting.  \\n  \\n```csharp  \\n  \\n                XElement srcTree = new XElement(\\\"Root\\\",  \\n                       new XElement(\\\"Child\\\", 1),  \\n                       new XElement(\\\"Child\\\", 2),  \\n                       new XElement(\\\"Child\\\", 3),  \\n                       new XElement(\\\"Child\\\", 4),  \\n                       new XElement(\\\"Child\\\", 5)  \\n                   );  \\n  \\nXStreamingElement dstTree = new XStreamingElement(\\\"NewRoot\\\",  \\n                        from el in srcTree.Elements()  \\n                        where (int)el == 3  \\n                        select new XElement(\\\"DifferentChild\\\", (int)el)  \\n                    );  \\n  \\nStringBuilder sb = new StringBuilder();  \\ndstTree.Save(new StringWriter(sb), SaveOptions.DisableFormatting);  \\nConsole.WriteLine(sb.ToString());  \\nConsole.WriteLine(\\\"------\\\");  \\nsb = new StringBuilder();  \\ndstTree.Save(new StringWriter(sb), SaveOptions.None);  \\nConsole.WriteLine(sb.ToString());  \\n```  \\n  \\n```vb  \\n  \\n                Dim srcTree As XElement = _  \\n    <Root>  \\n        <Child>1</Child>  \\n        <Child>2</Child>  \\n        <Child>3</Child>  \\n        <Child>4</Child>  \\n        <Child>5</Child>  \\n    </Root>  \\n  \\nDim dstTree As XStreamingElement = New XStreamingElement(\\\"NewRoot\\\", _  \\n                        From el In srcTree.Elements() _  \\n                        Where el.Value = 3 _  \\n                        Select <DifferentChild><%= el.Value %></DifferentChild> _  \\n                    )  \\n  \\nDim sb As StringBuilder = New StringBuilder()  \\ndstTree.Save(New StringWriter(sb), SaveOptions.DisableFormatting)  \\nConsole.WriteLine(sb.ToString())  \\nConsole.WriteLine(\\\"------\\\")  \\nsb = New StringBuilder()  \\ndstTree.Save(New StringWriter(sb), SaveOptions.None)  \\nConsole.WriteLine(sb.ToString())  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```xml  \\n  \\n                <?xml version=\\\"1.0\\\" encoding=\\\"utf-16\\\"?><NewRoot><DifferentChild>3</DifferentChild></NewRoot>  \\n------  \\n<?xml version=\\\"1.0\\\" encoding=\\\"utf-16\\\"?>  \\n<NewRoot>  \\n  <DifferentChild>3</DifferentChild>  \\n</NewRoot>  \\n```\"\n  syntax:\n    content: public void Save (System.IO.TextWriter textWriter, System.Xml.Linq.SaveOptions options);\n    parameters:\n    - id: textWriter\n      type: System.IO.TextWriter\n      description: The <xref href=\"System.IO.TextWriter\"></xref> to output the XML to.\n    - id: options\n      type: System.Xml.Linq.SaveOptions\n      description: A <xref href=\"System.Xml.Linq.SaveOptions\"></xref> that specifies formatting behavior.\n  overload: System.Xml.Linq.XStreamingElement.Save*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XStreamingElement.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XStreamingElement.Save(System.String,System.Xml.Linq.SaveOptions)\n  commentId: M:System.Xml.Linq.XStreamingElement.Save(System.String,System.Xml.Linq.SaveOptions)\n  id: Save(System.String,System.Xml.Linq.SaveOptions)\n  parent: System.Xml.Linq.XStreamingElement\n  langs:\n  - csharp\n  name: Save(String, SaveOptions)\n  nameWithType: XStreamingElement.Save(String, SaveOptions)\n  fullName: XStreamingElement.Save(String, SaveOptions)\n  type: Method\n  assemblies:\n  - System.Xml.Linq\n  - netstandard\n  - System.Xml.XDocument\n  namespace: System.Xml.Linq\n  summary: Serialize this streaming element to a file, optionally disabling formatting.\n  remarks: \"If you want to save unindented XML, specify the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> flag for `options`. This will cause the writer to write all white space exactly as represented in the XML tree.  \\n  \\n If you want to save indented XML, do not specify the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> flag for `options`. This will remove all extraneous insignificant white space, and add appropriate insignificant white space so that the XML is properly indented. This is the default behavior, and the behavior of the overloads of the <xref:System.Xml.Linq.XElement.Save%2A> methods that do not take `options` as a parameter.  \\n  \\n For more information, see [Preserving White Space while Loading or Parsing XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).\"\n  example:\n  - \"The following example shows two uses of this method. The first use preserves white space. The second one serializes the <xref:System.Xml.Linq.XStreamingElement> with formatting.  \\n  \\n```csharp  \\n  \\n                XElement srcTree = new XElement(\\\"Root\\\",  \\n                       new XElement(\\\"Child\\\", 1),  \\n                       new XElement(\\\"Child\\\", 2),  \\n                       new XElement(\\\"Child\\\", 3),  \\n                       new XElement(\\\"Child\\\", 4),  \\n                       new XElement(\\\"Child\\\", 5)  \\n                   );  \\n  \\nXStreamingElement dstTree = new XStreamingElement(\\\"NewRoot\\\",  \\n                        from el in srcTree.Elements()  \\n                        where (int)el == 3  \\n                        select new XElement(\\\"DifferentChild\\\", (int)el)  \\n                    );  \\n  \\ndstTree.Save(\\\"Test1.xml\\\", SaveOptions.DisableFormatting);  \\ndstTree.Save(\\\"Test2.xml\\\", SaveOptions.None);  \\nConsole.WriteLine(File.ReadAllText(\\\"Test1.xml\\\"));  \\nConsole.WriteLine(\\\"------\\\");  \\nConsole.WriteLine(File.ReadAllText(\\\"Test2.xml\\\"));  \\n```  \\n  \\n```vb  \\n  \\n                Dim srcTree As XElement = _  \\n    <Root>  \\n        <Child>1</Child>  \\n        <Child>2</Child>  \\n        <Child>3</Child>  \\n        <Child>4</Child>  \\n        <Child>5</Child>  \\n    </Root>  \\n  \\nDim dstTree As XStreamingElement = New XStreamingElement(\\\"NewRoot\\\", _  \\n                        From el In srcTree.Elements() _  \\n                        Where el.Value = 3 _  \\n                        Select <DifferentChild><%= el.Value %></DifferentChild> _  \\n                    )  \\n  \\ndstTree.Save(\\\"Test1.xml\\\", SaveOptions.DisableFormatting)  \\ndstTree.Save(\\\"Test2.xml\\\", SaveOptions.None)  \\nConsole.WriteLine(File.ReadAllText(\\\"Test1.xml\\\"))  \\nConsole.WriteLine(\\\"------\\\")  \\nConsole.WriteLine(File.ReadAllText(\\\"Test2.xml\\\"))  \\n  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```  \\n  \\n                <?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?><NewRoot><DifferentChild>3</DifferentChild></NewRoot>  \\n------  \\n<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>  \\n<NewRoot>  \\n  <DifferentChild>3</DifferentChild>  \\n</NewRoot>  \\n```\"\n  syntax:\n    content: public void Save (string fileName, System.Xml.Linq.SaveOptions options);\n    parameters:\n    - id: fileName\n      type: System.String\n      description: A <xref href=\"System.String\"></xref> that contains the name of the file.\n    - id: options\n      type: System.Xml.Linq.SaveOptions\n      description: A <xref href=\"System.Xml.Linq.SaveOptions\"></xref> object that specifies formatting behavior.\n  overload: System.Xml.Linq.XStreamingElement.Save*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XStreamingElement.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XStreamingElement.ToString\n  commentId: M:System.Xml.Linq.XStreamingElement.ToString\n  id: ToString\n  parent: System.Xml.Linq.XStreamingElement\n  langs:\n  - csharp\n  name: ToString()\n  nameWithType: XStreamingElement.ToString()\n  fullName: XStreamingElement.ToString()\n  type: Method\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Returns the formatted (indented) XML for this streaming element.\n  remarks: Note that when debugging a program that uses <xref:System.Xml.Linq.XStreamingElement>, displaying the value of an object causes its <xref:System.Xml.Linq.XStreamingElement.ToString%2A> method to be called. This causes the XML to be serialized. If the semantics of your streaming element query are such that the streaming element can only be streamed once, this may cause undesirable behavior in your debugging experience.\n  example:\n  - \"The following example shows two uses of <xref:System.Xml.Linq.XStreamingElement.ToString%2A>. The first use preserves white space. The second one serializes the <xref:System.Xml.Linq.XStreamingElement> with formatting.  \\n  \\n```csharp  \\n  \\n                XElement srcTree = new XElement(\\\"Root\\\",  \\n                       new XElement(\\\"Child\\\", 1),  \\n                       new XElement(\\\"Child\\\", 2),  \\n                       new XElement(\\\"Child\\\", 3),  \\n                       new XElement(\\\"Child\\\", 4),  \\n                       new XElement(\\\"Child\\\", 5)  \\n                   );  \\n  \\nXStreamingElement dstTree = new XStreamingElement(\\\"NewRoot\\\",  \\n                        from el in srcTree.Elements()  \\n                        where (int)el == 3  \\n                        select new XElement(\\\"DifferentChild\\\", (int)el)  \\n                    );  \\n  \\nConsole.WriteLine(dstTree.ToString(SaveOptions.DisableFormatting));  \\nConsole.WriteLine(\\\"------\\\");  \\nConsole.WriteLine(dstTree.ToString());  \\n```  \\n  \\n```vb  \\n  \\n                Dim srcTree As XElement = _  \\n    <Root>  \\n        <Child>1</Child>  \\n        <Child>2</Child>  \\n        <Child>3</Child>  \\n        <Child>4</Child>  \\n        <Child>5</Child>  \\n    </Root>  \\n  \\nDim dstTree As XStreamingElement = New XStreamingElement(\\\"NewRoot\\\", _  \\n                        From el In srcTree.Elements() _  \\n                        Where el.Value = 3 _  \\n                        Select <DifferentChild><%= el.Value %></DifferentChild> _  \\n                    )  \\n  \\nConsole.WriteLine(dstTree.ToString(SaveOptions.DisableFormatting))  \\nConsole.WriteLine(\\\"------\\\")  \\nConsole.WriteLine(dstTree.ToString())  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```  \\n  \\n                <NewRoot><DifferentChild>3</DifferentChild></NewRoot>  \\n------  \\n<NewRoot>  \\n  <DifferentChild>3</DifferentChild>  \\n</NewRoot>  \\n```\"\n  syntax:\n    content: public override string ToString ();\n    parameters: []\n    return:\n      type: System.String\n      description: A <xref href=\"System.String\"></xref> containing the indented XML.\n  overload: System.Xml.Linq.XStreamingElement.ToString*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XStreamingElement.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XStreamingElement.ToString(System.Xml.Linq.SaveOptions)\n  commentId: M:System.Xml.Linq.XStreamingElement.ToString(System.Xml.Linq.SaveOptions)\n  id: ToString(System.Xml.Linq.SaveOptions)\n  parent: System.Xml.Linq.XStreamingElement\n  langs:\n  - csharp\n  name: ToString(SaveOptions)\n  nameWithType: XStreamingElement.ToString(SaveOptions)\n  fullName: XStreamingElement.ToString(SaveOptions)\n  type: Method\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Returns the XML for this streaming element, optionally disabling formatting.\n  remarks: Note that when debugging a program that uses <xref:System.Xml.Linq.XStreamingElement>, displaying the value of an object causes its <xref:System.Xml.Linq.XStreamingElement.ToString%2A> method to be called. This causes the XML to be serialized. If the semantics of your streaming element query are such that the streaming element can only be streamed once, this may cause undesirable behavior in your debugging experience.\n  example:\n  - \"The following example shows two uses of <xref:System.Xml.Linq.XStreamingElement.ToString%2A>. The first use preserves white space. The second one serializes the <xref:System.Xml.Linq.XStreamingElement> with formatting.  \\n  \\n```csharp  \\n  \\n                XElement srcTree = new XElement(\\\"Root\\\",  \\n                       new XElement(\\\"Child\\\", 1),  \\n                       new XElement(\\\"Child\\\", 2),  \\n                       new XElement(\\\"Child\\\", 3),  \\n                       new XElement(\\\"Child\\\", 4),  \\n                       new XElement(\\\"Child\\\", 5)  \\n                   );  \\n  \\nXStreamingElement dstTree = new XStreamingElement(\\\"NewRoot\\\",  \\n                        from el in srcTree.Elements()  \\n                        where (int)el == 3  \\n                        select new XElement(\\\"DifferentChild\\\", (int)el)  \\n                    );  \\n  \\nConsole.WriteLine(dstTree.ToString(SaveOptions.DisableFormatting));  \\nConsole.WriteLine(\\\"------\\\");  \\nConsole.WriteLine(dstTree.ToString());  \\n```  \\n  \\n```vb  \\n  \\n                Dim srcTree As XElement = _  \\n    <Root>  \\n        <Child>1</Child>  \\n        <Child>2</Child>  \\n        <Child>3</Child>  \\n        <Child>4</Child>  \\n        <Child>5</Child>  \\n    </Root>  \\n  \\nDim dstTree As XStreamingElement = New XStreamingElement(\\\"NewRoot\\\", _  \\n                        From el In srcTree.Elements() _  \\n                        Where el.Value = 3 _  \\n                        Select <DifferentChild><%= el.Value %></DifferentChild> _  \\n                    )  \\n  \\nConsole.WriteLine(dstTree.ToString(SaveOptions.DisableFormatting))  \\nConsole.WriteLine(\\\"------\\\")  \\nConsole.WriteLine(dstTree.ToString())  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```  \\n  \\n                <NewRoot><DifferentChild>3</DifferentChild></NewRoot>  \\n------  \\n<NewRoot>  \\n  <DifferentChild>3</DifferentChild>  \\n</NewRoot>  \\n```\"\n  syntax:\n    content: public string ToString (System.Xml.Linq.SaveOptions options);\n    parameters:\n    - id: options\n      type: System.Xml.Linq.SaveOptions\n      description: A <xref href=\"System.Xml.Linq.SaveOptions\"></xref> that specifies formatting behavior.\n    return:\n      type: System.String\n      description: A <xref href=\"System.String\"></xref> containing the XML.\n  overload: System.Xml.Linq.XStreamingElement.ToString*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XStreamingElement.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XStreamingElement.WriteTo(System.Xml.XmlWriter)\n  commentId: M:System.Xml.Linq.XStreamingElement.WriteTo(System.Xml.XmlWriter)\n  id: WriteTo(System.Xml.XmlWriter)\n  parent: System.Xml.Linq.XStreamingElement\n  langs:\n  - csharp\n  name: WriteTo(XmlWriter)\n  nameWithType: XStreamingElement.WriteTo(XmlWriter)\n  fullName: XStreamingElement.WriteTo(XmlWriter)\n  type: Method\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Writes this streaming element to an <xref href=\"System.Xml.XmlWriter\"></xref>.\n  remarks: ''\n  example:\n  - \"The following example creates an XML tree using <xref:System.Xml.Linq.XStreamingElement>. It then writes the streaming element to an <xref:System.Xml.XmlWriter>.  \\n  \\n```csharp  \\n  \\n                XElement srcTree = new XElement(\\\"Root\\\",  \\n                       new XElement(\\\"Child\\\", 1),  \\n                       new XElement(\\\"Child\\\", 2),  \\n                       new XElement(\\\"Child\\\", 3),  \\n                       new XElement(\\\"Child\\\", 4),  \\n                       new XElement(\\\"Child\\\", 5)  \\n                   );  \\n  \\nXStreamingElement dstTree = new XStreamingElement(\\\"NewRoot\\\",  \\n                        from el in srcTree.Elements()  \\n                        where (int)el == 3  \\n                        select new XElement(\\\"DifferentChild\\\", (int)el)  \\n                    );  \\n  \\nStringBuilder sb = new StringBuilder();  \\nXmlWriterSettings xws = new XmlWriterSettings();  \\nxws.OmitXmlDeclaration = true;  \\nxws.Indent = true;  \\n  \\nusing (XmlWriter xw = XmlWriter.Create(sb, xws))  \\n{  \\n    dstTree.WriteTo(xw);  \\n}  \\nConsole.WriteLine(sb.ToString());  \\n```  \\n  \\n```vb  \\n  \\n                Dim srcTree As XElement = _  \\n    <Root>  \\n        <Child>1</Child>  \\n        <Child>2</Child>  \\n        <Child>3</Child>  \\n        <Child>4</Child>  \\n        <Child>5</Child>  \\n    </Root>  \\n  \\nDim dstTree As XStreamingElement = _   \\n    New XStreamingElement(\\\"NewRoot\\\", _  \\n        From el In srcTree.Elements() _  \\n        Where el.Value = 3 _  \\n        Select <DifferentChild><%= el.Value %></DifferentChild> )  \\n  \\nDim sb As StringBuilder = New StringBuilder()  \\nDim xws As XmlWriterSettings = New XmlWriterSettings()  \\nxws.OmitXmlDeclaration = True  \\nxws.Indent = True  \\n  \\nUsing xw As XmlWriter = XmlWriter.Create(sb, xws)  \\n    dstTree.WriteTo(xw)  \\nEnd Using  \\nConsole.WriteLine(sb.ToString())  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```xml  \\n  \\n                <NewRoot>  \\n  <DifferentChild>3</DifferentChild>  \\n</NewRoot>  \\n```\"\n  syntax:\n    content: public void WriteTo (System.Xml.XmlWriter writer);\n    parameters:\n    - id: writer\n      type: System.Xml.XmlWriter\n      description: An <xref href=\"System.Xml.XmlWriter\"></xref> into which this method will write.\n  overload: System.Xml.Linq.XStreamingElement.WriteTo*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XStreamingElement.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Xml.Linq.XStreamingElement.#ctor(System.Xml.Linq.XName)\n  parent: System.Xml.Linq.XStreamingElement\n  isExternal: false\n  name: XStreamingElement(XName)\n  nameWithType: XStreamingElement.XStreamingElement(XName)\n  fullName: XStreamingElement.XStreamingElement(XName)\n- uid: System.Xml.Linq.XName\n  parent: System.Xml.Linq\n  isExternal: false\n  name: XName\n  nameWithType: XName\n  fullName: System.Xml.Linq.XName\n- uid: System.Xml.Linq.XStreamingElement.#ctor(System.Xml.Linq.XName,System.Object)\n  parent: System.Xml.Linq.XStreamingElement\n  isExternal: false\n  name: XStreamingElement(XName, Object)\n  nameWithType: XStreamingElement.XStreamingElement(XName, Object)\n  fullName: XStreamingElement.XStreamingElement(XName, Object)\n- uid: System.Xml.Linq.XStreamingElement.#ctor(System.Xml.Linq.XName,System.Object[])\n  parent: System.Xml.Linq.XStreamingElement\n  isExternal: false\n  name: XStreamingElement(XName, Object[])\n  nameWithType: XStreamingElement.XStreamingElement(XName, Object[])\n  fullName: XStreamingElement.XStreamingElement(XName, Object[])\n- uid: System.Object[]\n  parent: System\n  isExternal: false\n  name: Object[]\n  nameWithType: Object[]\n  fullName: System.Object[]\n  spec.csharp:\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Xml.Linq.XStreamingElement.Add(System.Object)\n  parent: System.Xml.Linq.XStreamingElement\n  isExternal: false\n  name: Add(Object)\n  nameWithType: XStreamingElement.Add(Object)\n  fullName: XStreamingElement.Add(Object)\n- uid: System.Xml.Linq.XStreamingElement.Add(System.Object[])\n  parent: System.Xml.Linq.XStreamingElement\n  isExternal: false\n  name: Add(Object[])\n  nameWithType: XStreamingElement.Add(Object[])\n  fullName: XStreamingElement.Add(Object[])\n- uid: System.Xml.Linq.XStreamingElement.Name\n  parent: System.Xml.Linq.XStreamingElement\n  isExternal: false\n  name: Name\n  nameWithType: XStreamingElement.Name\n  fullName: XStreamingElement.Name\n- uid: System.Xml.Linq.XStreamingElement.Save(System.IO.Stream)\n  parent: System.Xml.Linq.XStreamingElement\n  isExternal: false\n  name: Save(Stream)\n  nameWithType: XStreamingElement.Save(Stream)\n  fullName: XStreamingElement.Save(Stream)\n- uid: System.IO.Stream\n  parent: System.IO\n  isExternal: false\n  name: Stream\n  nameWithType: Stream\n  fullName: System.IO.Stream\n- uid: System.Xml.Linq.XStreamingElement.Save(System.IO.TextWriter)\n  parent: System.Xml.Linq.XStreamingElement\n  isExternal: false\n  name: Save(TextWriter)\n  nameWithType: XStreamingElement.Save(TextWriter)\n  fullName: XStreamingElement.Save(TextWriter)\n- uid: System.IO.TextWriter\n  parent: System.IO\n  isExternal: false\n  name: TextWriter\n  nameWithType: TextWriter\n  fullName: System.IO.TextWriter\n- uid: System.Xml.Linq.XStreamingElement.Save(System.String)\n  parent: System.Xml.Linq.XStreamingElement\n  isExternal: false\n  name: Save(String)\n  nameWithType: XStreamingElement.Save(String)\n  fullName: XStreamingElement.Save(String)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Xml.Linq.XStreamingElement.Save(System.Xml.XmlWriter)\n  parent: System.Xml.Linq.XStreamingElement\n  isExternal: false\n  name: Save(XmlWriter)\n  nameWithType: XStreamingElement.Save(XmlWriter)\n  fullName: XStreamingElement.Save(XmlWriter)\n- uid: System.Xml.XmlWriter\n  parent: System.Xml\n  isExternal: false\n  name: XmlWriter\n  nameWithType: XmlWriter\n  fullName: System.Xml.XmlWriter\n- uid: System.Xml.Linq.XStreamingElement.Save(System.IO.Stream,System.Xml.Linq.SaveOptions)\n  parent: System.Xml.Linq.XStreamingElement\n  isExternal: false\n  name: Save(Stream, SaveOptions)\n  nameWithType: XStreamingElement.Save(Stream, SaveOptions)\n  fullName: XStreamingElement.Save(Stream, SaveOptions)\n- uid: System.Xml.Linq.SaveOptions\n  parent: System.Xml.Linq\n  isExternal: false\n  name: SaveOptions\n  nameWithType: SaveOptions\n  fullName: System.Xml.Linq.SaveOptions\n- uid: System.Xml.Linq.XStreamingElement.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)\n  parent: System.Xml.Linq.XStreamingElement\n  isExternal: false\n  name: Save(TextWriter, SaveOptions)\n  nameWithType: XStreamingElement.Save(TextWriter, SaveOptions)\n  fullName: XStreamingElement.Save(TextWriter, SaveOptions)\n- uid: System.Xml.Linq.XStreamingElement.Save(System.String,System.Xml.Linq.SaveOptions)\n  parent: System.Xml.Linq.XStreamingElement\n  isExternal: false\n  name: Save(String, SaveOptions)\n  nameWithType: XStreamingElement.Save(String, SaveOptions)\n  fullName: XStreamingElement.Save(String, SaveOptions)\n- uid: System.Xml.Linq.XStreamingElement.ToString\n  parent: System.Xml.Linq.XStreamingElement\n  isExternal: false\n  name: ToString()\n  nameWithType: XStreamingElement.ToString()\n  fullName: XStreamingElement.ToString()\n- uid: System.Xml.Linq.XStreamingElement.ToString(System.Xml.Linq.SaveOptions)\n  parent: System.Xml.Linq.XStreamingElement\n  isExternal: false\n  name: ToString(SaveOptions)\n  nameWithType: XStreamingElement.ToString(SaveOptions)\n  fullName: XStreamingElement.ToString(SaveOptions)\n- uid: System.Xml.Linq.XStreamingElement.WriteTo(System.Xml.XmlWriter)\n  parent: System.Xml.Linq.XStreamingElement\n  isExternal: false\n  name: WriteTo(XmlWriter)\n  nameWithType: XStreamingElement.WriteTo(XmlWriter)\n  fullName: XStreamingElement.WriteTo(XmlWriter)\n- uid: System.Xml.Linq.XStreamingElement.#ctor*\n  parent: System.Xml.Linq.XStreamingElement\n  isExternal: false\n  name: XStreamingElement\n  nameWithType: XStreamingElement.XStreamingElement\n  fullName: XStreamingElement.XStreamingElement\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XStreamingElement.xml\n- uid: System.Xml.Linq.XStreamingElement.ToString*\n  parent: System.Xml.Linq.XStreamingElement\n  isExternal: false\n  name: ToString\n  nameWithType: XStreamingElement.ToString\n  fullName: XStreamingElement.ToString\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XStreamingElement.xml\n- uid: System.Xml.Linq.XStreamingElement.Add*\n  parent: System.Xml.Linq.XStreamingElement\n  isExternal: false\n  name: Add\n  nameWithType: XStreamingElement.Add\n  fullName: XStreamingElement.Add\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XStreamingElement.xml\n- uid: System.Xml.Linq.XStreamingElement.Name*\n  parent: System.Xml.Linq.XStreamingElement\n  isExternal: false\n  name: Name\n  nameWithType: XStreamingElement.Name\n  fullName: XStreamingElement.Name\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XStreamingElement.xml\n- uid: System.Xml.Linq.XStreamingElement.Save*\n  parent: System.Xml.Linq.XStreamingElement\n  isExternal: false\n  name: Save\n  nameWithType: XStreamingElement.Save\n  fullName: XStreamingElement.Save\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XStreamingElement.xml\n- uid: System.Xml.Linq.XStreamingElement.WriteTo*\n  parent: System.Xml.Linq.XStreamingElement\n  isExternal: false\n  name: WriteTo\n  nameWithType: XStreamingElement.WriteTo\n  fullName: XStreamingElement.WriteTo\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XStreamingElement.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n"}