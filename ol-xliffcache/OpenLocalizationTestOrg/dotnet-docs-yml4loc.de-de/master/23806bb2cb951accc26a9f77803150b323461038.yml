### YamlMime:ManagedReference
items:
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  commentId: T:System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  id: InMemorySymmetricSecurityKey
  children:
  - System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.#ctor(System.Byte[])
  - System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.#ctor(System.Byte[],System.Boolean)
  - System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.DecryptKey(System.String,System.Byte[])
  - System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.EncryptKey(System.String,System.Byte[])
  - System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GenerateDerivedKey(System.String,System.Byte[],System.Byte[],System.Int32,System.Int32)
  - System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetDecryptionTransform(System.String,System.Byte[])
  - System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetEncryptionTransform(System.String,System.Byte[])
  - System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetIVSize(System.String)
  - System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetKeyedHashAlgorithm(System.String)
  - System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetSymmetricAlgorithm(System.String)
  - System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetSymmetricKey
  - System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsAsymmetricAlgorithm(System.String)
  - System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsSupportedAlgorithm(System.String)
  - System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsSymmetricAlgorithm(System.String)
  - System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.KeySize
  langs:
  - csharp
  name: InMemorySymmetricSecurityKey
  nameWithType: InMemorySymmetricSecurityKey
  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  type: Class
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: Represents keys that are generated using symmetric algorithms and are only stored in the local computer's random access memory.
  remarks: Typically, this class is only used by the infrastructure to transform XML using a symmetric key.
  syntax:
    content: 'public class InMemorySymmetricSecurityKey : System.IdentityModel.Tokens.SymmetricSecurityKey'
  inheritance:
  - System.Object
  - System.IdentityModel.Tokens.SecurityKey
  - System.IdentityModel.Tokens.SymmetricSecurityKey
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/InMemorySymmetricSecurityKey.xml
  ms.technology:
  - dotnet-standard
  ms.author: v-jibran
  manager: markgal
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.#ctor(System.Byte[])
  commentId: M:System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.#ctor(System.Byte[])
  id: '#ctor(System.Byte[])'
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  langs:
  - csharp
  name: InMemorySymmetricSecurityKey(Byte[])
  nameWithType: InMemorySymmetricSecurityKey.InMemorySymmetricSecurityKey(Byte[])
  fullName: InMemorySymmetricSecurityKey.InMemorySymmetricSecurityKey(Byte[])
  type: Constructor
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: Initializes a new instance of the <xref href="System.IdentityModel.Tokens.InMemorySymmetricSecurityKey"></xref> class using the specified symmetric key.
  syntax:
    content: public InMemorySymmetricSecurityKey (byte[] key);
    parameters:
    - id: symmetricKey
      type: System.Byte[]
      description: ''
  overload: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>key</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>key</code> is zero length.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/InMemorySymmetricSecurityKey.xml
  ms.technology:
  - dotnet-standard
  ms.author: v-jibran
  manager: markgal
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.#ctor(System.Byte[],System.Boolean)
  commentId: M:System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.#ctor(System.Byte[],System.Boolean)
  id: '#ctor(System.Byte[],System.Boolean)'
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  langs:
  - csharp
  name: InMemorySymmetricSecurityKey(Byte[], Boolean)
  nameWithType: InMemorySymmetricSecurityKey.InMemorySymmetricSecurityKey(Byte[], Boolean)
  fullName: InMemorySymmetricSecurityKey.InMemorySymmetricSecurityKey(Byte[], Boolean)
  type: Constructor
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: Initializes a new instance of the <xref href="System.IdentityModel.Tokens.InMemorySymmetricSecurityKey"></xref> class using the specified symmetric key and a value that indicates whether the binary data must be cloned.
  syntax:
    content: public InMemorySymmetricSecurityKey (byte[] key, bool clone);
    parameters:
    - id: symmetricKey
      type: System.Byte[]
      description: ''
    - id: cloneBuffer
      type: System.Boolean
      description: ''
  overload: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>symmetricKey</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>symmetricKey</code> is zero length.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/InMemorySymmetricSecurityKey.xml
  ms.technology:
  - dotnet-standard
  ms.author: v-jibran
  manager: markgal
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.DecryptKey(System.String,System.Byte[])
  commentId: M:System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.DecryptKey(System.String,System.Byte[])
  id: DecryptKey(System.String,System.Byte[])
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  langs:
  - csharp
  name: DecryptKey(String, Byte[])
  nameWithType: InMemorySymmetricSecurityKey.DecryptKey(String, Byte[])
  fullName: InMemorySymmetricSecurityKey.DecryptKey(String, Byte[])
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: Decrypts the specified encrypted key.
  remarks: Use the static fields of the <xref:System.IdentityModel.Tokens.SecurityAlgorithms> class to specify the algorithm.
  syntax:
    content: public override byte[] DecryptKey (string algorithm, byte[] keyData);
    parameters:
    - id: algorithm
      type: System.String
      description: The cryptographic algorithm that was used to encrypt the key.
    - id: keyData
      type: System.Byte[]
      description: An array of <xref href="System.Byte"></xref> that contains the encrypted key.
    return:
      type: System.Byte[]
      description: An array of <xref href="System.Byte"></xref> that contains the decrypted key.
  overload: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.DecryptKey*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: <code>algorithm</code> is not supported. The supported algorithms are <xref href="System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesKeyWrap"></xref>, <xref href="System.IdentityModel.Tokens.SecurityAlgorithms.Aes128KeyWrap"></xref>, <xref href="System.IdentityModel.Tokens.SecurityAlgorithms.Aes192KeyWrap"></xref>, and <xref href="System.IdentityModel.Tokens.SecurityAlgorithms.Aes256KeyWrap"></xref>.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/InMemorySymmetricSecurityKey.xml
  ms.technology:
  - dotnet-standard
  ms.author: v-jibran
  manager: markgal
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.EncryptKey(System.String,System.Byte[])
  commentId: M:System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.EncryptKey(System.String,System.Byte[])
  id: EncryptKey(System.String,System.Byte[])
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  langs:
  - csharp
  name: EncryptKey(String, Byte[])
  nameWithType: InMemorySymmetricSecurityKey.EncryptKey(String, Byte[])
  fullName: InMemorySymmetricSecurityKey.EncryptKey(String, Byte[])
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: Encrypts the specified key.
  remarks: Use the static fields of the <xref:System.IdentityModel.Tokens.SecurityAlgorithms> class to specify the algorithm.
  syntax:
    content: public override byte[] EncryptKey (string algorithm, byte[] keyData);
    parameters:
    - id: algorithm
      type: System.String
      description: The cryptographic algorithm to encrypt the key with.
    - id: keyData
      type: System.Byte[]
      description: An array of <xref href="System.Byte"></xref> that contains the key.
    return:
      type: System.Byte[]
      description: An array of <xref href="System.Byte"></xref> that contains the encrypted key.
  overload: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.EncryptKey*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: <code>algorithm</code> is not supported. The supported algorithms are <xref href="System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesKeyWrap"></xref>, <xref href="System.IdentityModel.Tokens.SecurityAlgorithms.Aes128KeyWrap"></xref>, <xref href="System.IdentityModel.Tokens.SecurityAlgorithms.Aes192KeyWrap"></xref>, or <xref href="System.IdentityModel.Tokens.SecurityAlgorithms.Aes256KeyWrap"></xref>.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/InMemorySymmetricSecurityKey.xml
  ms.technology:
  - dotnet-standard
  ms.author: v-jibran
  manager: markgal
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GenerateDerivedKey(System.String,System.Byte[],System.Byte[],System.Int32,System.Int32)
  commentId: M:System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GenerateDerivedKey(System.String,System.Byte[],System.Byte[],System.Int32,System.Int32)
  id: GenerateDerivedKey(System.String,System.Byte[],System.Byte[],System.Int32,System.Int32)
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  langs:
  - csharp
  name: GenerateDerivedKey(String, Byte[], Byte[], Int32, Int32)
  nameWithType: InMemorySymmetricSecurityKey.GenerateDerivedKey(String, Byte[], Byte[], Int32, Int32)
  fullName: InMemorySymmetricSecurityKey.GenerateDerivedKey(String, Byte[], Byte[], Int32, Int32)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: Generates a derived key using the specified cryptographic algorithm and parameters for the current key.
  remarks: To specify P-SHA1 as the cryptographic algorithm, use the <xref:System.IdentityModel.Tokens.SecurityAlgorithms.Psha1KeyDerivation> field.
  syntax:
    content: public override byte[] GenerateDerivedKey (string algorithm, byte[] label, byte[] nonce, int derivedKeyLength, int offset);
    parameters:
    - id: algorithm
      type: System.String
      description: A URI that represents the cryptographic algorithm to use to generate the derived key.
    - id: label
      type: System.Byte[]
      description: An array of <xref href="System.Byte"></xref> that contains the label parameter for the cryptographic algorithm.
    - id: nonce
      type: System.Byte[]
      description: An array of <xref href="System.Byte"></xref> that contains the nonce that is used to create a derived key.
    - id: derivedKeyLength
      type: System.Int32
      description: The size of the derived key.
    - id: offset
      type: System.Int32
      description: The position at which the derived key is located in the byte array that is returned from this method.
    return:
      type: System.Byte[]
      description: An array of <xref href="System.Byte"></xref> that contains the derived key.
  overload: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GenerateDerivedKey*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: <code>algorithm</code> is not supported. The supported algorithms is <xref href="System.IdentityModel.Tokens.SecurityAlgorithms.Psha1KeyDerivation"></xref>.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/InMemorySymmetricSecurityKey.xml
  ms.technology:
  - dotnet-standard
  ms.author: v-jibran
  manager: markgal
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetDecryptionTransform(System.String,System.Byte[])
  commentId: M:System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetDecryptionTransform(System.String,System.Byte[])
  id: GetDecryptionTransform(System.String,System.Byte[])
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  langs:
  - csharp
  name: GetDecryptionTransform(String, Byte[])
  nameWithType: InMemorySymmetricSecurityKey.GetDecryptionTransform(String, Byte[])
  fullName: InMemorySymmetricSecurityKey.GetDecryptionTransform(String, Byte[])
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: Gets a transform that decrypts cipher text using the specified cryptographic algorithm.
  remarks: Use the fields that represent decryption algorithms in the <xref:System.IdentityModel.Tokens.SecurityAlgorithms> class to specify the algorithm.
  syntax:
    content: public override System.Security.Cryptography.ICryptoTransform GetDecryptionTransform (string algorithm, byte[] iv);
    parameters:
    - id: algorithm
      type: System.String
      description: A cryptographic algorithm that decrypts cipher text, such as encrypted XML.
    - id: iv
      type: System.Byte[]
      description: An array of <xref href="System.Byte"></xref> that contains the initialization vector (`IV`) for the specified algorithm.
    return:
      type: System.Security.Cryptography.ICryptoTransform
      description: An <xref href="System.Security.Cryptography.ICryptoTransform"></xref> that represents the decryption transform.
  overload: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetDecryptionTransform*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: <code>algorithm</code> is not supported. The supported algorithms are <xref href="System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesEncryption"></xref>, <xref href="System.IdentityModel.Tokens.SecurityAlgorithms.Aes128Encryption"></xref>, <xref href="System.IdentityModel.Tokens.SecurityAlgorithms.Aes192Encryption"></xref>, and <xref href="System.IdentityModel.Tokens.SecurityAlgorithms.Aes256Encryption"></xref>.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/InMemorySymmetricSecurityKey.xml
  ms.technology:
  - dotnet-standard
  ms.author: v-jibran
  manager: markgal
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetEncryptionTransform(System.String,System.Byte[])
  commentId: M:System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetEncryptionTransform(System.String,System.Byte[])
  id: GetEncryptionTransform(System.String,System.Byte[])
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  langs:
  - csharp
  name: GetEncryptionTransform(String, Byte[])
  nameWithType: InMemorySymmetricSecurityKey.GetEncryptionTransform(String, Byte[])
  fullName: InMemorySymmetricSecurityKey.GetEncryptionTransform(String, Byte[])
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: Gets a transform that encrypts XML using the specified cryptographic algorithm.
  remarks: Use the fields that represent encryption algorithms in the <xref:System.IdentityModel.Tokens.SecurityAlgorithms> class to specify the algorithm.
  syntax:
    content: public override System.Security.Cryptography.ICryptoTransform GetEncryptionTransform (string algorithm, byte[] iv);
    parameters:
    - id: algorithm
      type: System.String
      description: A cryptographic algorithm that encrypts XML.
    - id: iv
      type: System.Byte[]
      description: An array of <xref href="System.Byte"></xref> that contains the initialization vector (`IV`) for the specified algorithm.
    return:
      type: System.Security.Cryptography.ICryptoTransform
      description: An <xref href="System.Security.Cryptography.ICryptoTransform"></xref> that represents the encryption transform.
  overload: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetEncryptionTransform*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: <code>algorithm</code> is not supported. The supported algorithms are <xref href="System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesEncryption"></xref>, <xref href="System.IdentityModel.Tokens.SecurityAlgorithms.Aes128Encryption"></xref>, <xref href="System.IdentityModel.Tokens.SecurityAlgorithms.Aes192Encryption"></xref>, and <xref href="System.IdentityModel.Tokens.SecurityAlgorithms.Aes256Encryption"></xref>.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/InMemorySymmetricSecurityKey.xml
  ms.technology:
  - dotnet-standard
  ms.author: v-jibran
  manager: markgal
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetIVSize(System.String)
  commentId: M:System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetIVSize(System.String)
  id: GetIVSize(System.String)
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  langs:
  - csharp
  name: GetIVSize(String)
  nameWithType: InMemorySymmetricSecurityKey.GetIVSize(String)
  fullName: InMemorySymmetricSecurityKey.GetIVSize(String)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: Gets the size, in bits, of the initialization vector (`IV`) that is required for the specified cryptographic algorithm.
  remarks: Use the fields that represent encryption algorithms in the <xref:System.IdentityModel.Tokens.SecurityAlgorithms> class to specify the algorithm.
  syntax:
    content: public override int GetIVSize (string algorithm);
    parameters:
    - id: algorithm
      type: System.String
      description: The cryptographic algorithm to get the size of the initialization vector (`IV`).
    return:
      type: System.Int32
      description: The size, in bits, of the initialization vector (`IV`) that is required for the cryptographic algorithm specified in the <code>algorithm</code> parameter.
  overload: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetIVSize*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: <code>algorithm</code> is not supported. The supported algorithms are <xref href="System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesEncryption"></xref>, <xref href="System.IdentityModel.Tokens.SecurityAlgorithms.Aes128Encryption"></xref>, <xref href="System.IdentityModel.Tokens.SecurityAlgorithms.Aes192Encryption"></xref>, and <xref href="System.IdentityModel.Tokens.SecurityAlgorithms.Aes256Encryption"></xref>.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/InMemorySymmetricSecurityKey.xml
  ms.technology:
  - dotnet-standard
  ms.author: v-jibran
  manager: markgal
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetKeyedHashAlgorithm(System.String)
  commentId: M:System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetKeyedHashAlgorithm(System.String)
  id: GetKeyedHashAlgorithm(System.String)
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  langs:
  - csharp
  name: GetKeyedHashAlgorithm(String)
  nameWithType: InMemorySymmetricSecurityKey.GetKeyedHashAlgorithm(String)
  fullName: InMemorySymmetricSecurityKey.GetKeyedHashAlgorithm(String)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: Gets an instance of the specified keyed hash algorithm.
  syntax:
    content: public override System.Security.Cryptography.KeyedHashAlgorithm GetKeyedHashAlgorithm (string algorithm);
    parameters:
    - id: algorithm
      type: System.String
      description: The keyed hash algorithm to get an instance of.
    return:
      type: System.Security.Cryptography.KeyedHashAlgorithm
      description: A <xref href="System.Security.Cryptography.KeyedHashAlgorithm"></xref> that represents the keyed hash algorithm.
  overload: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetKeyedHashAlgorithm*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: <code>algorithm</code> is not supported. The supported algorithms is <xref href="System.IdentityModel.Tokens.SecurityAlgorithms.HmacSha1Signature"></xref>.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/InMemorySymmetricSecurityKey.xml
  ms.technology:
  - dotnet-standard
  ms.author: v-jibran
  manager: markgal
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetSymmetricAlgorithm(System.String)
  commentId: M:System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetSymmetricAlgorithm(System.String)
  id: GetSymmetricAlgorithm(System.String)
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  langs:
  - csharp
  name: GetSymmetricAlgorithm(String)
  nameWithType: InMemorySymmetricSecurityKey.GetSymmetricAlgorithm(String)
  fullName: InMemorySymmetricSecurityKey.GetSymmetricAlgorithm(String)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: Gets an instance of the specified symmetric algorithm.
  syntax:
    content: public override System.Security.Cryptography.SymmetricAlgorithm GetSymmetricAlgorithm (string algorithm);
    parameters:
    - id: algorithm
      type: System.String
      description: The symmetric algorithm to get an instance of.
    return:
      type: System.Security.Cryptography.SymmetricAlgorithm
      description: A <xref href="System.Security.Cryptography.SymmetricAlgorithm"></xref> that represents the symmetric algorithm.
  overload: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetSymmetricAlgorithm*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: <code>algorithm</code> is not supported. The supported algorithms are <xref href="System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesEncryption"></xref>, <xref href="System.IdentityModel.Tokens.SecurityAlgorithms.Aes128Encryption"></xref>, <xref href="System.IdentityModel.Tokens.SecurityAlgorithms.Aes192Encryption"></xref>,  <xref href="System.IdentityModel.Tokens.SecurityAlgorithms.Aes256Encryption"></xref>, <xref href="System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesKeyWrap"></xref>, <xref href="System.IdentityModel.Tokens.SecurityAlgorithms.Aes128KeyWrap"></xref>, <xref href="System.IdentityModel.Tokens.SecurityAlgorithms.Aes192KeyWrap"></xref>, and <xref href="System.IdentityModel.Tokens.SecurityAlgorithms.Aes256KeyWrap"></xref>
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/InMemorySymmetricSecurityKey.xml
  ms.technology:
  - dotnet-standard
  ms.author: v-jibran
  manager: markgal
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetSymmetricKey
  commentId: M:System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetSymmetricKey
  id: GetSymmetricKey
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  langs:
  - csharp
  name: GetSymmetricKey()
  nameWithType: InMemorySymmetricSecurityKey.GetSymmetricKey()
  fullName: InMemorySymmetricSecurityKey.GetSymmetricKey()
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: Gets the bytes that represent the symmetric key.
  syntax:
    content: public override byte[] GetSymmetricKey ();
    parameters: []
    return:
      type: System.Byte[]
      description: An array of <xref href="System.Byte"></xref> that contains the symmetric key.
  overload: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetSymmetricKey*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/InMemorySymmetricSecurityKey.xml
  ms.technology:
  - dotnet-standard
  ms.author: v-jibran
  manager: markgal
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsAsymmetricAlgorithm(System.String)
  commentId: M:System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsAsymmetricAlgorithm(System.String)
  id: IsAsymmetricAlgorithm(System.String)
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  langs:
  - csharp
  name: IsAsymmetricAlgorithm(String)
  nameWithType: InMemorySymmetricSecurityKey.IsAsymmetricAlgorithm(String)
  fullName: InMemorySymmetricSecurityKey.IsAsymmetricAlgorithm(String)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: Gets a value that indicates whether the specified algorithm uses asymmetric keys.
  syntax:
    content: public override bool IsAsymmetricAlgorithm (string algorithm);
    parameters:
    - id: algorithm
      type: System.String
      description: The cryptographic algorithm.
    return:
      type: System.Boolean
      description: '`true` when the specified algorithm uses asymmetric keys; otherwise, `false`.'
  overload: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsAsymmetricAlgorithm*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/InMemorySymmetricSecurityKey.xml
  ms.technology:
  - dotnet-standard
  ms.author: v-jibran
  manager: markgal
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsSupportedAlgorithm(System.String)
  commentId: M:System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsSupportedAlgorithm(System.String)
  id: IsSupportedAlgorithm(System.String)
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  langs:
  - csharp
  name: IsSupportedAlgorithm(String)
  nameWithType: InMemorySymmetricSecurityKey.IsSupportedAlgorithm(String)
  fullName: InMemorySymmetricSecurityKey.IsSupportedAlgorithm(String)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: Gets a value that indicates whether the specified algorithm is supported by this class.
  remarks: "The symmetric algorithms that are supported by this class are the algorithms represented by the following fields:  \n  \n-   <xref:System.IdentityModel.Tokens.SecurityAlgorithms.HmacSha1Signature>  \n  \n-   <xref:System.IdentityModel.Tokens.SecurityAlgorithms.Psha1KeyDerivation>  \n  \n-   <xref:System.IdentityModel.Tokens.SecurityAlgorithms.Aes128Encryption>  \n  \n-   <xref:System.IdentityModel.Tokens.SecurityAlgorithms.Aes128KeyWrap>  \n  \n-   <xref:System.IdentityModel.Tokens.SecurityAlgorithms.Aes192Encryption>  \n  \n-   <xref:System.IdentityModel.Tokens.SecurityAlgorithms.Aes192KeyWrap>  \n  \n-   <xref:System.IdentityModel.Tokens.SecurityAlgorithms.Aes256Encryption>  \n  \n-   <xref:System.IdentityModel.Tokens.SecurityAlgorithms.Aes256KeyWrap>  \n  \n-   <xref:System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesEncryption>  \n  \n-   <xref:System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesKeyWrap>"
  syntax:
    content: public override bool IsSupportedAlgorithm (string algorithm);
    parameters:
    - id: algorithm
      type: System.String
      description: The cryptographic algorithm.
    return:
      type: System.Boolean
      description: '`true` when the specified algorithm is supported by this class; otherwise, `false`.'
  overload: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsSupportedAlgorithm*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/InMemorySymmetricSecurityKey.xml
  ms.technology:
  - dotnet-standard
  ms.author: v-jibran
  manager: markgal
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsSymmetricAlgorithm(System.String)
  commentId: M:System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsSymmetricAlgorithm(System.String)
  id: IsSymmetricAlgorithm(System.String)
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  langs:
  - csharp
  name: IsSymmetricAlgorithm(String)
  nameWithType: InMemorySymmetricSecurityKey.IsSymmetricAlgorithm(String)
  fullName: InMemorySymmetricSecurityKey.IsSymmetricAlgorithm(String)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: Gets a value that indicates whether the specified algorithm uses symmetric keys.
  syntax:
    content: public override bool IsSymmetricAlgorithm (string algorithm);
    parameters:
    - id: algorithm
      type: System.String
      description: The cryptographic algorithm.
    return:
      type: System.Boolean
      description: '`true` when the specified algorithm uses symmetric keys; otherwise, `false`.'
  overload: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsSymmetricAlgorithm*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/InMemorySymmetricSecurityKey.xml
  ms.technology:
  - dotnet-standard
  ms.author: v-jibran
  manager: markgal
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.KeySize
  commentId: P:System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.KeySize
  id: KeySize
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  langs:
  - csharp
  name: KeySize
  nameWithType: InMemorySymmetricSecurityKey.KeySize
  fullName: InMemorySymmetricSecurityKey.KeySize
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: Gets the size, in bits, of the key.
  syntax:
    content: public override int KeySize { get; }
    return:
      type: System.Int32
      description: The size, in bits, of the key.
  overload: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.KeySize*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/InMemorySymmetricSecurityKey.xml
  ms.technology:
  - dotnet-standard
  ms.author: v-jibran
  manager: markgal
references:
- uid: System.IdentityModel.Tokens.SymmetricSecurityKey
  parent: System.IdentityModel.Tokens
  isExternal: false
  name: SymmetricSecurityKey
  nameWithType: SymmetricSecurityKey
  fullName: System.IdentityModel.Tokens.SymmetricSecurityKey
- uid: System.ArgumentNullException
  parent: System
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  nameWithType: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.#ctor(System.Byte[])
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: InMemorySymmetricSecurityKey(Byte[])
  nameWithType: InMemorySymmetricSecurityKey.InMemorySymmetricSecurityKey(Byte[])
  fullName: InMemorySymmetricSecurityKey.InMemorySymmetricSecurityKey(Byte[])
- uid: System.Byte
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: System.Byte[]
  parent: System
  isExternal: false
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.#ctor(System.Byte[],System.Boolean)
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: InMemorySymmetricSecurityKey(Byte[], Boolean)
  nameWithType: InMemorySymmetricSecurityKey.InMemorySymmetricSecurityKey(Byte[], Boolean)
  fullName: InMemorySymmetricSecurityKey.InMemorySymmetricSecurityKey(Byte[], Boolean)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.DecryptKey(System.String,System.Byte[])
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: DecryptKey(String, Byte[])
  nameWithType: InMemorySymmetricSecurityKey.DecryptKey(String, Byte[])
  fullName: InMemorySymmetricSecurityKey.DecryptKey(String, Byte[])
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.EncryptKey(System.String,System.Byte[])
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: EncryptKey(String, Byte[])
  nameWithType: InMemorySymmetricSecurityKey.EncryptKey(String, Byte[])
  fullName: InMemorySymmetricSecurityKey.EncryptKey(String, Byte[])
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GenerateDerivedKey(System.String,System.Byte[],System.Byte[],System.Int32,System.Int32)
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: GenerateDerivedKey(String, Byte[], Byte[], Int32, Int32)
  nameWithType: InMemorySymmetricSecurityKey.GenerateDerivedKey(String, Byte[], Byte[], Int32, Int32)
  fullName: InMemorySymmetricSecurityKey.GenerateDerivedKey(String, Byte[], Byte[], Int32, Int32)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetDecryptionTransform(System.String,System.Byte[])
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: GetDecryptionTransform(String, Byte[])
  nameWithType: InMemorySymmetricSecurityKey.GetDecryptionTransform(String, Byte[])
  fullName: InMemorySymmetricSecurityKey.GetDecryptionTransform(String, Byte[])
- uid: System.Security.Cryptography.ICryptoTransform
  parent: System.Security.Cryptography
  isExternal: false
  name: ICryptoTransform
  nameWithType: ICryptoTransform
  fullName: System.Security.Cryptography.ICryptoTransform
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetEncryptionTransform(System.String,System.Byte[])
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: GetEncryptionTransform(String, Byte[])
  nameWithType: InMemorySymmetricSecurityKey.GetEncryptionTransform(String, Byte[])
  fullName: InMemorySymmetricSecurityKey.GetEncryptionTransform(String, Byte[])
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetIVSize(System.String)
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: GetIVSize(String)
  nameWithType: InMemorySymmetricSecurityKey.GetIVSize(String)
  fullName: InMemorySymmetricSecurityKey.GetIVSize(String)
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetKeyedHashAlgorithm(System.String)
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: GetKeyedHashAlgorithm(String)
  nameWithType: InMemorySymmetricSecurityKey.GetKeyedHashAlgorithm(String)
  fullName: InMemorySymmetricSecurityKey.GetKeyedHashAlgorithm(String)
- uid: System.Security.Cryptography.KeyedHashAlgorithm
  parent: System.Security.Cryptography
  isExternal: false
  name: KeyedHashAlgorithm
  nameWithType: KeyedHashAlgorithm
  fullName: System.Security.Cryptography.KeyedHashAlgorithm
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetSymmetricAlgorithm(System.String)
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: GetSymmetricAlgorithm(String)
  nameWithType: InMemorySymmetricSecurityKey.GetSymmetricAlgorithm(String)
  fullName: InMemorySymmetricSecurityKey.GetSymmetricAlgorithm(String)
- uid: System.Security.Cryptography.SymmetricAlgorithm
  parent: System.Security.Cryptography
  isExternal: false
  name: SymmetricAlgorithm
  nameWithType: SymmetricAlgorithm
  fullName: System.Security.Cryptography.SymmetricAlgorithm
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetSymmetricKey
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: GetSymmetricKey()
  nameWithType: InMemorySymmetricSecurityKey.GetSymmetricKey()
  fullName: InMemorySymmetricSecurityKey.GetSymmetricKey()
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsAsymmetricAlgorithm(System.String)
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: IsAsymmetricAlgorithm(String)
  nameWithType: InMemorySymmetricSecurityKey.IsAsymmetricAlgorithm(String)
  fullName: InMemorySymmetricSecurityKey.IsAsymmetricAlgorithm(String)
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsSupportedAlgorithm(System.String)
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: IsSupportedAlgorithm(String)
  nameWithType: InMemorySymmetricSecurityKey.IsSupportedAlgorithm(String)
  fullName: InMemorySymmetricSecurityKey.IsSupportedAlgorithm(String)
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsSymmetricAlgorithm(System.String)
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: IsSymmetricAlgorithm(String)
  nameWithType: InMemorySymmetricSecurityKey.IsSymmetricAlgorithm(String)
  fullName: InMemorySymmetricSecurityKey.IsSymmetricAlgorithm(String)
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.KeySize
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: KeySize
  nameWithType: InMemorySymmetricSecurityKey.KeySize
  fullName: InMemorySymmetricSecurityKey.KeySize
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.#ctor*
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: InMemorySymmetricSecurityKey
  nameWithType: InMemorySymmetricSecurityKey.InMemorySymmetricSecurityKey
  fullName: InMemorySymmetricSecurityKey.InMemorySymmetricSecurityKey
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/InMemorySymmetricSecurityKey.xml
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.DecryptKey*
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: DecryptKey
  nameWithType: InMemorySymmetricSecurityKey.DecryptKey
  fullName: InMemorySymmetricSecurityKey.DecryptKey
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/InMemorySymmetricSecurityKey.xml
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.EncryptKey*
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: EncryptKey
  nameWithType: InMemorySymmetricSecurityKey.EncryptKey
  fullName: InMemorySymmetricSecurityKey.EncryptKey
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/InMemorySymmetricSecurityKey.xml
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GenerateDerivedKey*
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: GenerateDerivedKey
  nameWithType: InMemorySymmetricSecurityKey.GenerateDerivedKey
  fullName: InMemorySymmetricSecurityKey.GenerateDerivedKey
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/InMemorySymmetricSecurityKey.xml
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetDecryptionTransform*
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: GetDecryptionTransform
  nameWithType: InMemorySymmetricSecurityKey.GetDecryptionTransform
  fullName: InMemorySymmetricSecurityKey.GetDecryptionTransform
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/InMemorySymmetricSecurityKey.xml
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetEncryptionTransform*
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: GetEncryptionTransform
  nameWithType: InMemorySymmetricSecurityKey.GetEncryptionTransform
  fullName: InMemorySymmetricSecurityKey.GetEncryptionTransform
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/InMemorySymmetricSecurityKey.xml
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetIVSize*
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: GetIVSize
  nameWithType: InMemorySymmetricSecurityKey.GetIVSize
  fullName: InMemorySymmetricSecurityKey.GetIVSize
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/InMemorySymmetricSecurityKey.xml
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetKeyedHashAlgorithm*
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: GetKeyedHashAlgorithm
  nameWithType: InMemorySymmetricSecurityKey.GetKeyedHashAlgorithm
  fullName: InMemorySymmetricSecurityKey.GetKeyedHashAlgorithm
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/InMemorySymmetricSecurityKey.xml
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetSymmetricAlgorithm*
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: GetSymmetricAlgorithm
  nameWithType: InMemorySymmetricSecurityKey.GetSymmetricAlgorithm
  fullName: InMemorySymmetricSecurityKey.GetSymmetricAlgorithm
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/InMemorySymmetricSecurityKey.xml
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetSymmetricKey*
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: GetSymmetricKey
  nameWithType: InMemorySymmetricSecurityKey.GetSymmetricKey
  fullName: InMemorySymmetricSecurityKey.GetSymmetricKey
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/InMemorySymmetricSecurityKey.xml
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsAsymmetricAlgorithm*
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: IsAsymmetricAlgorithm
  nameWithType: InMemorySymmetricSecurityKey.IsAsymmetricAlgorithm
  fullName: InMemorySymmetricSecurityKey.IsAsymmetricAlgorithm
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/InMemorySymmetricSecurityKey.xml
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsSupportedAlgorithm*
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: IsSupportedAlgorithm
  nameWithType: InMemorySymmetricSecurityKey.IsSupportedAlgorithm
  fullName: InMemorySymmetricSecurityKey.IsSupportedAlgorithm
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/InMemorySymmetricSecurityKey.xml
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsSymmetricAlgorithm*
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: IsSymmetricAlgorithm
  nameWithType: InMemorySymmetricSecurityKey.IsSymmetricAlgorithm
  fullName: InMemorySymmetricSecurityKey.IsSymmetricAlgorithm
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/InMemorySymmetricSecurityKey.xml
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.KeySize*
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: KeySize
  nameWithType: InMemorySymmetricSecurityKey.KeySize
  fullName: InMemorySymmetricSecurityKey.KeySize
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/InMemorySymmetricSecurityKey.xml
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: Object.Equals(Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: Object.Equals(Object, Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: false
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: Object.GetHashCode()
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  nameWithType: Object.GetType()
  fullName: Object.GetType()
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: Object.MemberwiseClone()
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: Object.ReferenceEquals(Object, Object)
- uid: System.Object.ToString
  parent: System.Object
  isExternal: false
  name: ToString()
  nameWithType: Object.ToString()
  fullName: Object.ToString()
