{"nodes":[{"content":"Implements a markup extension that returns a <xref href=\"System.Type\"></xref> based on a string input.","nodes":[{"pos":[0,102],"content":"Implements a markup extension that returns a <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> based on a string input.","source":"Implements a markup extension that returns a <xref href=\"System.Type\"></xref> based on a string input."}],"pos":[710,813],"yaml":true},{"content":"For [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] usage information, see [x:Type Markup Extension](~/docs/framework/xaml-services/x-type-markup-extension.md).  \n  \n> [!NOTE]\n>  The `{x:Type}` functionality is generally for user code invocation from markup. For code that is implementing XAML support, type resolution services come from <xref:System.Windows.Markup.IXamlTypeResolver> and are related to the implementation of the acting XAML schema context. Do not attempt to reference <xref:System.Windows.Markup.TypeExtension.ProvideValue%2A> as a substitute for a <xref:System.Windows.Markup.IXamlTypeResolver> service provider; the context you pass in might not be valid for a type resolution, and attempts to call without valid services will fail.  \n  \n## WPF Usage Notes  \n Type references are commonly used for style, template, and databinding feature areas in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], when these features are referenced by XAML.  \n  \n<a name=\"xamlTextUsage_TypeExtension\"></a>   \n## XAML Text Usage","nodes":[{"pos":[0,174],"content":"For <ph id=\"ph1\">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> usage information, see <bpt id=\"p1\">[</bpt>x:Type Markup Extension<ept id=\"p1\">](~/docs/framework/xaml-services/x-type-markup-extension.md)</ept>.","source":"For [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] usage information, see [x:Type Markup Extension](~/docs/framework/xaml-services/x-type-markup-extension.md)."},{"pos":[182,766],"content":"[!NOTE]\n The `{x:Type}` functionality is generally for user code invocation from markup. For code that is implementing XAML support, type resolution services come from <xref:System.Windows.Markup.IXamlTypeResolver> and are related to the implementation of the acting XAML schema context. Do not attempt to reference <xref:System.Windows.Markup.TypeExtension.ProvideValue%2A> as a substitute for a <xref:System.Windows.Markup.IXamlTypeResolver> service provider; the context you pass in might not be valid for a type resolution, and attempts to call without valid services will fail.","leadings":["","> "],"nodes":[{"content":" The `{x:Type}` functionality is generally for user code invocation from markup. For code that is implementing XAML support, type resolution services come from <xref:System.Windows.Markup.IXamlTypeResolver> and are related to the implementation of the acting XAML schema context. Do not attempt to reference <xref:System.Windows.Markup.TypeExtension.ProvideValue%2A> as a substitute for a <xref:System.Windows.Markup.IXamlTypeResolver> service provider; the context you pass in might not be valid for a type resolution, and attempts to call without valid services will fail.","pos":[8,582],"nodes":[{"content":"The <ph id=\"ph1\">`{x:Type}`</ph> functionality is generally for user code invocation from markup.","pos":[1,80],"source":" The `{x:Type}` functionality is generally for user code invocation from markup."},{"content":"For code that is implementing XAML support, type resolution services come from <ph id=\"ph1\">&lt;xref:System.Windows.Markup.IXamlTypeResolver&gt;</ph> and are related to the implementation of the acting XAML schema context.","pos":[81,279],"source":" For code that is implementing XAML support, type resolution services come from <xref:System.Windows.Markup.IXamlTypeResolver> and are related to the implementation of the acting XAML schema context."},{"content":"Do not attempt to reference <ph id=\"ph1\">&lt;xref:System.Windows.Markup.TypeExtension.ProvideValue%2A&gt;</ph> as a substitute for a <ph id=\"ph2\">&lt;xref:System.Windows.Markup.IXamlTypeResolver&gt;</ph> service provider; the context you pass in might not be valid for a type resolution, and attempts to call without valid services will fail.","pos":[280,574],"source":" Do not attempt to reference <xref:System.Windows.Markup.TypeExtension.ProvideValue%2A> as a substitute for a <xref:System.Windows.Markup.IXamlTypeResolver> service provider; the context you pass in might not be valid for a type resolution, and attempts to call without valid services will fail."}]}]},{"pos":[775,790],"content":"WPF Usage Notes","linkify":"WPF Usage Notes","nodes":[{"content":"WPF Usage Notes","pos":[0,15]}]},{"pos":[794,998],"content":"Type references are commonly used for style, template, and databinding feature areas in <ph id=\"ph1\">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph>, when these features are referenced by XAML.","source":"Type references are commonly used for style, template, and databinding feature areas in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], when these features are referenced by XAML."},{"pos":[1053,1068],"content":"XAML Text Usage","linkify":"XAML Text Usage","nodes":[{"content":"XAML Text Usage","pos":[0,15]}]}],"pos":[824,1906],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Windows.Markup.TypeExtension\"></xref> class.","nodes":[{"pos":[0,97],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Markup.TypeExtension\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.Windows.Markup.TypeExtension\"></xref> class."}],"pos":[3589,3687],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Windows.Markup.TypeExtension\"></xref> class, initializing the <xref href=\"System.Windows.Markup.TypeExtension.TypeName\"></xref> value based on the provided <code>typeName</code> string.","nodes":[{"pos":[0,238],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Markup.TypeExtension\"&gt;&lt;/xref&gt;</ph> class, initializing the <ph id=\"ph2\">&lt;xref href=\"System.Windows.Markup.TypeExtension.TypeName\"&gt;&lt;/xref&gt;</ph> value based on the provided <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph3\">typeName</ph><ept id=\"p1\">&lt;/code&gt;</ept> string.","source":"Initializes a new instance of the <xref href=\"System.Windows.Markup.TypeExtension\"></xref> class, initializing the <xref href=\"System.Windows.Markup.TypeExtension.TypeName\"></xref> value based on the provided <code>typeName</code> string."}],"pos":[4774,5013],"yaml":true},{"content":"This value is not evaluated when you set it in the constructor. If the value is not `null`, the value will be initially accepted. The actual parsing and evaluation of the value is deferred until <xref:System.Windows.Markup.TypeExtension.ProvideValue%2A> is called on this extension, when XAML is parsed and with available service contexts active. At this time the `typeName` is expected to be resolvable as a type within a XAML schema context, and that type is returned.","nodes":[{"pos":[0,470],"content":"This value is not evaluated when you set it in the constructor. If the value is not `null`, the value will be initially accepted. The actual parsing and evaluation of the value is deferred until <xref:System.Windows.Markup.TypeExtension.ProvideValue%2A> is called on this extension, when XAML is parsed and with available service contexts active. At this time the `typeName` is expected to be resolvable as a type within a XAML schema context, and that type is returned.","nodes":[{"content":"This value is not evaluated when you set it in the constructor.","pos":[0,63]},{"content":"If the value is not <ph id=\"ph1\">`null`</ph>, the value will be initially accepted.","pos":[64,129],"source":" If the value is not `null`, the value will be initially accepted."},{"content":"The actual parsing and evaluation of the value is deferred until <ph id=\"ph1\">&lt;xref:System.Windows.Markup.TypeExtension.ProvideValue%2A&gt;</ph> is called on this extension, when XAML is parsed and with available service contexts active.","pos":[130,346],"source":" The actual parsing and evaluation of the value is deferred until <xref:System.Windows.Markup.TypeExtension.ProvideValue%2A> is called on this extension, when XAML is parsed and with available service contexts active."},{"content":"At this time the <ph id=\"ph1\">`typeName`</ph> is expected to be resolvable as a type within a XAML schema context, and that type is returned.","pos":[347,470],"source":" At this time the `typeName` is expected to be resolvable as a type within a XAML schema context, and that type is returned."}]}],"pos":[5024,5495],"yaml":true,"extradata":"MT"},{"content":"A string that identifies the type to make a reference to. This string uses the format <code>prefix:className</code>. <code>prefix</code> is the mapping prefix for a XAML namespace, and is only required to reference types that are not mapped to the default XAML namespace.","nodes":[{"pos":[0,271],"content":"A string that identifies the type to make a reference to. This string uses the format <code>prefix:className</code>. <code>prefix</code> is the mapping prefix for a XAML namespace, and is only required to reference types that are not mapped to the default XAML namespace.","nodes":[{"content":"A string that identifies the type to make a reference to.","pos":[0,57]},{"content":"This string uses the format <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">prefix:className</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","pos":[58,116],"source":" This string uses the format <code>prefix:className</code>."},{"content":"<bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">prefix</ph><ept id=\"p1\">&lt;/code&gt;</ept> is the mapping prefix for a XAML namespace, and is only required to reference types that are not mapped to the default XAML namespace.","pos":[117,271],"source":"<code>prefix</code> is the mapping prefix for a XAML namespace, and is only required to reference types that are not mapped to the default XAML namespace."}]}],"pos":[5638,5910],"yaml":true},{"content":"Attempted to specify <code>typeName</code> as `null`.","nodes":[{"pos":[0,53],"content":"Attempted to specify <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">typeName</ph><ept id=\"p1\">&lt;/code&gt;</ept> as <ph id=\"ph2\">`null`</ph>.","source":"Attempted to specify <code>typeName</code> as `null`."}],"pos":[6081,6135],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Windows.Markup.TypeExtension\"></xref> class, declaring the type directly.","nodes":[{"pos":[0,126],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Markup.TypeExtension\"&gt;&lt;/xref&gt;</ph> class, declaring the type directly.","source":"Initializes a new instance of the <xref href=\"System.Windows.Markup.TypeExtension\"></xref> class, declaring the type directly."}],"pos":[7071,7198],"yaml":true},{"content":"This is a helper method for run time code usages of <xref:System.Windows.Markup.TypeExtension> and is not part of the normal implementation pattern for a markup extension.","nodes":[{"pos":[0,171],"content":"This is a helper method for run time code usages of <xref:System.Windows.Markup.TypeExtension> and is not part of the normal implementation pattern for a markup extension.","nodes":[{"content":"This is a helper method for run time code usages of <ph id=\"ph1\">&lt;xref:System.Windows.Markup.TypeExtension&gt;</ph> and is not part of the normal implementation pattern for a markup extension.","pos":[0,171],"source":"This is a helper method for run time code usages of <xref:System.Windows.Markup.TypeExtension> and is not part of the normal implementation pattern for a markup extension."}]}],"pos":[7209,7381],"yaml":true,"extradata":"MT"},{"content":"The type to be represented by this <xref href=\"System.Windows.Markup.TypeExtension\"></xref>.","nodes":[{"pos":[0,92],"content":"The type to be represented by this <ph id=\"ph1\">&lt;xref href=\"System.Windows.Markup.TypeExtension\"&gt;&lt;/xref&gt;</ph>.","source":"The type to be represented by this <xref href=\"System.Windows.Markup.TypeExtension\"></xref>."}],"pos":[7512,7605],"yaml":true},{"content":"<code>type</code> is `null`","nodes":[{"pos":[0,27],"content":"<ph id=\"ph1\">&lt;code&gt;type&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>","source":"<code>type</code> is `null`"}],"pos":[7776,7804],"yaml":true},{"content":"Returns an object that should be set on the property where this extension is applied. For <xref href=\"System.Windows.Markup.TypeExtension\"></xref> , this is the <xref href=\"System.Type\"></xref> value as evaluated for the requested type name.","nodes":[{"pos":[0,241],"content":"Returns an object that should be set on the property where this extension is applied. For <xref href=\"System.Windows.Markup.TypeExtension\"></xref> , this is the <xref href=\"System.Type\"></xref> value as evaluated for the requested type name.","nodes":[{"content":"Returns an object that should be set on the property where this extension is applied.","pos":[0,85]},{"content":"For <ph id=\"ph1\">&lt;xref href=\"System.Windows.Markup.TypeExtension\"&gt;&lt;/xref&gt;</ph> , this is the <ph id=\"ph2\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> value as evaluated for the requested type name.","pos":[86,241],"source":" For <xref href=\"System.Windows.Markup.TypeExtension\"></xref> , this is the <xref href=\"System.Type\"></xref> value as evaluated for the requested type name."}]}],"pos":[8823,9065],"yaml":true},{"content":"You can pass `null` for `serviceProvider`, but only if this <xref:System.Windows.Markup.TypeExtension> instance was established with an initial true type in the constructor rather than a `typeName`. Otherwise, this markup extension implementation relies on services based on the passed `serviceProvider`. It must not be `null`. The `serviceProvider` is expected to provide a service for <xref:System.Windows.Markup.IXamlTypeResolver>.","nodes":[{"pos":[0,434],"content":"You can pass `null` for `serviceProvider`, but only if this <xref:System.Windows.Markup.TypeExtension> instance was established with an initial true type in the constructor rather than a `typeName`. Otherwise, this markup extension implementation relies on services based on the passed `serviceProvider`. It must not be `null`. The `serviceProvider` is expected to provide a service for <xref:System.Windows.Markup.IXamlTypeResolver>.","nodes":[{"content":"You can pass <ph id=\"ph1\">`null`</ph> for <ph id=\"ph2\">`serviceProvider`</ph>, but only if this <ph id=\"ph3\">&lt;xref:System.Windows.Markup.TypeExtension&gt;</ph> instance was established with an initial true type in the constructor rather than a <ph id=\"ph4\">`typeName`</ph>.","pos":[0,198],"source":"You can pass `null` for `serviceProvider`, but only if this <xref:System.Windows.Markup.TypeExtension> instance was established with an initial true type in the constructor rather than a `typeName`."},{"content":"Otherwise, this markup extension implementation relies on services based on the passed <ph id=\"ph1\">`serviceProvider`</ph>.","pos":[199,304],"source":" Otherwise, this markup extension implementation relies on services based on the passed `serviceProvider`."},{"content":"It must not be <ph id=\"ph1\">`null`</ph>.","pos":[305,327],"source":" It must not be `null`."},{"content":"The <ph id=\"ph1\">`serviceProvider`</ph> is expected to provide a service for <ph id=\"ph2\">&lt;xref:System.Windows.Markup.IXamlTypeResolver&gt;</ph>.","pos":[328,434],"source":" The `serviceProvider` is expected to provide a service for <xref:System.Windows.Markup.IXamlTypeResolver>."}]}],"pos":[9076,9511],"yaml":true,"extradata":"MT"},{"content":"Object that can provide services for the markup extension. The provider is expected to provide a service for <xref href=\"System.Windows.Markup.IXamlTypeResolver\"></xref>.","nodes":[{"pos":[0,170],"content":"Object that can provide services for the markup extension. The provider is expected to provide a service for <xref href=\"System.Windows.Markup.IXamlTypeResolver\"></xref>.","nodes":[{"content":"Object that can provide services for the markup extension.","pos":[0,58]},{"content":"The provider is expected to provide a service for <ph id=\"ph1\">&lt;xref href=\"System.Windows.Markup.IXamlTypeResolver\"&gt;&lt;/xref&gt;</ph>.","pos":[59,170],"source":" The provider is expected to provide a service for <xref href=\"System.Windows.Markup.IXamlTypeResolver\"></xref>."}]}],"pos":[9703,9874],"yaml":true},{"content":"The <xref href=\"System.Type\"></xref> to set on the property where the extension is applied.","nodes":[{"pos":[0,91],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> to set on the property where the extension is applied.","source":"The <xref href=\"System.Type\"></xref> to set on the property where the extension is applied."}],"pos":[9931,10023],"yaml":true},{"content":"<code>member</code> value for the extension is `null`.","nodes":[{"pos":[0,54],"content":"<ph id=\"ph1\">&lt;code&gt;member&lt;/code&gt;</ph> value for the extension is <ph id=\"ph2\">`null`</ph>.","source":"<code>member</code> value for the extension is `null`."}],"pos":[10209,10264],"yaml":true},{"content":"Some part of the <code>typeName</code> string did not parse properly.  \n  \n -or-  \n  \n <code>serviceProvider</code> did not provide a service for <xref href=\"System.Windows.Markup.IXamlTypeResolver\"></xref>  \n  \n -or-  \n  \n <code>typeName</code> value did not resolve to a type.","nodes":[{"pos":[0,69],"content":"Some part of the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">typeName</ph><ept id=\"p1\">&lt;/code&gt;</ept> string did not parse properly.","source":"Some part of the <code>typeName</code> string did not parse properly."},{"pos":[76,80],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[87,206],"content":"<ph id=\"ph1\">&lt;code&gt;serviceProvider&lt;/code&gt;</ph> did not provide a service for <ph id=\"ph2\">&lt;xref href=\"System.Windows.Markup.IXamlTypeResolver\"&gt;&lt;/xref&gt;</ph>","source":"<code>serviceProvider</code> did not provide a service for <xref href=\"System.Windows.Markup.IXamlTypeResolver\"></xref>"},{"pos":[213,217],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[224,278],"content":"<ph id=\"ph1\">&lt;code&gt;typeName&lt;/code&gt;</ph> value did not resolve to a type.","source":"<code>typeName</code> value did not resolve to a type."}],"pos":[10358,10649],"yaml":true},{"content":"<code>serviceProvider</code> is `null`","nodes":[{"pos":[0,38],"content":"<ph id=\"ph1\">&lt;code&gt;serviceProvider&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>","source":"<code>serviceProvider</code> is `null`"}],"pos":[10751,10790],"yaml":true},{"content":"Gets or sets the type information for this extension.","nodes":[{"pos":[0,53],"content":"Gets or sets the type information for this extension.","nodes":[{"content":"Gets or sets the type information for this extension.","pos":[0,53]}]}],"pos":[11634,11688],"yaml":true},{"content":"Unless this instance was deliberately instantiated with the <xref:System.Windows.Markup.TypeExtension.%23ctor%28System.Type%29> signature constructor, this value will be `null`. This property will not be reset when <xref:System.Windows.Markup.TypeExtension.ProvideValue%2A> is called. If you want the true type represented you should always call <xref:System.Windows.Markup.TypeExtension.ProvideValue%2A> rather than check this property.  \n  \n This property is settable per usual rules regarding markup extension usage. However, if you are setting with a <xref:System.Type>, then the purpose of this markup extension is irrelevant, because the same <xref:System.Type> is returned from a <xref:System.Windows.Markup.TypeExtension.ProvideValue%2A> call.  \n  \n<a name=\"xamlTextUsage_Type\"></a>   \n## XAML Text Usage","nodes":[{"pos":[0,437],"content":"Unless this instance was deliberately instantiated with the <xref:System.Windows.Markup.TypeExtension.%23ctor%28System.Type%29> signature constructor, this value will be `null`. This property will not be reset when <xref:System.Windows.Markup.TypeExtension.ProvideValue%2A> is called. If you want the true type represented you should always call <xref:System.Windows.Markup.TypeExtension.ProvideValue%2A> rather than check this property.","nodes":[{"content":"Unless this instance was deliberately instantiated with the <ph id=\"ph1\">&lt;xref:System.Windows.Markup.TypeExtension.%23ctor%28System.Type%29&gt;</ph> signature constructor, this value will be <ph id=\"ph2\">`null`</ph>.","pos":[0,177],"source":"Unless this instance was deliberately instantiated with the <xref:System.Windows.Markup.TypeExtension.%23ctor%28System.Type%29> signature constructor, this value will be `null`."},{"content":"This property will not be reset when <ph id=\"ph1\">&lt;xref:System.Windows.Markup.TypeExtension.ProvideValue%2A&gt;</ph> is called.","pos":[178,284],"source":" This property will not be reset when <xref:System.Windows.Markup.TypeExtension.ProvideValue%2A> is called."},{"content":"If you want the true type represented you should always call <ph id=\"ph1\">&lt;xref:System.Windows.Markup.TypeExtension.ProvideValue%2A&gt;</ph> rather than check this property.","pos":[285,437],"source":" If you want the true type represented you should always call <xref:System.Windows.Markup.TypeExtension.ProvideValue%2A> rather than check this property."}]},{"pos":[444,751],"content":"This property is settable per usual rules regarding markup extension usage. However, if you are setting with a <xref:System.Type>, then the purpose of this markup extension is irrelevant, because the same <xref:System.Type> is returned from a <xref:System.Windows.Markup.TypeExtension.ProvideValue%2A> call.","nodes":[{"content":"This property is settable per usual rules regarding markup extension usage. However, if you are setting with a <xref:System.Type>, then the purpose of this markup extension is irrelevant, because the same <xref:System.Type> is returned from a <xref:System.Windows.Markup.TypeExtension.ProvideValue%2A> call.","pos":[0,307],"nodes":[{"content":"This property is settable per usual rules regarding markup extension usage.","pos":[0,75]},{"content":"However, if you are setting with a <ph id=\"ph1\">&lt;xref:System.Type&gt;</ph>, then the purpose of this markup extension is irrelevant, because the same <ph id=\"ph2\">&lt;xref:System.Type&gt;</ph> is returned from a <ph id=\"ph3\">&lt;xref:System.Windows.Markup.TypeExtension.ProvideValue%2A&gt;</ph> call.","pos":[76,307],"source":" However, if you are setting with a <xref:System.Type>, then the purpose of this markup extension is irrelevant, because the same <xref:System.Type> is returned from a <xref:System.Windows.Markup.TypeExtension.ProvideValue%2A> call."}]}]},{"pos":[797,812],"content":"XAML Text Usage","linkify":"XAML Text Usage","nodes":[{"content":"XAML Text Usage","pos":[0,15]}]}],"pos":[11699,12521],"yaml":true,"extradata":"MT"},{"content":"The established type. For runtime purposes, this may be `null` for get access, but cannot be set to `null`.","nodes":[{"pos":[0,107],"content":"The established type. For runtime purposes, this may be `null` for get access, but cannot be set to `null`.","nodes":[{"content":"The established type.","pos":[0,21]},{"content":"For runtime purposes, this may be <ph id=\"ph1\">`null`</ph> for get access, but cannot be set to <ph id=\"ph2\">`null`</ph>.","pos":[22,107],"source":" For runtime purposes, this may be `null` for get access, but cannot be set to `null`."}]}],"pos":[12630,12738],"yaml":true},{"content":"Attempted to set to `null`.","nodes":[{"pos":[0,27],"content":"Attempted to set to <ph id=\"ph1\">`null`</ph>.","source":"Attempted to set to `null`."}],"pos":[12908,12936],"yaml":true},{"content":"Gets or sets the type name represented by this markup extension.","nodes":[{"pos":[0,64],"content":"Gets or sets the type name represented by this markup extension.","nodes":[{"content":"Gets or sets the type name represented by this markup extension.","pos":[0,64]}]}],"pos":[13821,13886],"yaml":true},{"content":"<a name=\"xamlTextUsage_TypeName\"></a>   \n## XAML Text Usage","nodes":[{"pos":[44,59],"content":"XAML Text Usage","linkify":"XAML Text Usage","nodes":[{"content":"XAML Text Usage","pos":[0,15]}]}],"pos":[13897,13962],"yaml":true,"extradata":"MT"},{"content":"A string that identifies the type. This string uses the format *prefix*<code>:</code>*className*. (*prefix* is the mapping prefix for an XML namespace, and is only required to reference types that are not mapped to the default XML namespace for WPF ([!INCLUDE[TLA#tla_wpfxmlnsv1](~/includes/tlasharptla-wpfxmlnsv1-md.md)]).","nodes":[{"pos":[0,323],"content":"A string that identifies the type. This string uses the format *prefix*<code>:</code>*className*. (*prefix* is the mapping prefix for an XML namespace, and is only required to reference types that are not mapped to the default XML namespace for WPF ([!INCLUDE[TLA#tla_wpfxmlnsv1](~/includes/tlasharptla-wpfxmlnsv1-md.md)]).","nodes":[{"content":"A string that identifies the type.","pos":[0,34]},{"content":"This string uses the format <bpt id=\"p1\">*</bpt>prefix<ept id=\"p1\">*</ept><bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">:</ph><ept id=\"p2\">&lt;/code&gt;</ept><bpt id=\"p3\">*</bpt>className<ept id=\"p3\">*</ept>.","pos":[35,97],"source":" This string uses the format *prefix*<code>:</code>*className*."},{"content":"(<bpt id=\"p1\">*</bpt>prefix<ept id=\"p1\">*</ept> is the mapping prefix for an XML namespace, and is only required to reference types that are not mapped to the default XML namespace for WPF (<ph id=\"ph1\">[!INCLUDE[TLA#tla_wpfxmlnsv1](~/includes/tlasharptla-wpfxmlnsv1-md.md)]</ph>).","pos":[98,323],"source":" (*prefix* is the mapping prefix for an XML namespace, and is only required to reference types that are not mapped to the default XML namespace for WPF ([!INCLUDE[TLA#tla_wpfxmlnsv1](~/includes/tlasharptla-wpfxmlnsv1-md.md)])."}]}],"pos":[14079,14403],"yaml":true},{"content":"Attempted to set to `null`.","nodes":[{"pos":[0,27],"content":"Attempted to set to <ph id=\"ph1\">`null`</ph>.","source":"Attempted to set to `null`."}],"pos":[14577,14605],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Windows.Markup.TypeExtension\n  commentId: T:System.Windows.Markup.TypeExtension\n  id: TypeExtension\n  children:\n  - System.Windows.Markup.TypeExtension.#ctor\n  - System.Windows.Markup.TypeExtension.#ctor(System.String)\n  - System.Windows.Markup.TypeExtension.#ctor(System.Type)\n  - System.Windows.Markup.TypeExtension.ProvideValue(System.IServiceProvider)\n  - System.Windows.Markup.TypeExtension.Type\n  - System.Windows.Markup.TypeExtension.TypeName\n  langs:\n  - csharp\n  name: TypeExtension\n  nameWithType: TypeExtension\n  fullName: System.Windows.Markup.TypeExtension\n  type: Class\n  assemblies:\n  - System.Xaml\n  namespace: System.Windows.Markup\n  summary: Implements a markup extension that returns a <xref href=\"System.Type\"></xref> based on a string input.\n  remarks: \"For [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] usage information, see [x:Type Markup Extension](~/docs/framework/xaml-services/x-type-markup-extension.md).  \\n  \\n> [!NOTE]\\n>  The `{x:Type}` functionality is generally for user code invocation from markup. For code that is implementing XAML support, type resolution services come from <xref:System.Windows.Markup.IXamlTypeResolver> and are related to the implementation of the acting XAML schema context. Do not attempt to reference <xref:System.Windows.Markup.TypeExtension.ProvideValue%2A> as a substitute for a <xref:System.Windows.Markup.IXamlTypeResolver> service provider; the context you pass in might not be valid for a type resolution, and attempts to call without valid services will fail.  \\n  \\n## WPF Usage Notes  \\n Type references are commonly used for style, template, and databinding feature areas in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], when these features are referenced by XAML.  \\n  \\n<a name=\\\"xamlTextUsage_TypeExtension\\\"></a>   \\n## XAML Text Usage\"\n  syntax:\n    content: >-\n      [System.ComponentModel.TypeConverter(typeof(System.Windows.Markup.TypeExtensionConverter))]\n\n      [System.Windows.Markup.MarkupExtensionReturnType(typeof(System.Type))]\n\n      public class TypeExtension : System.Windows.Markup.MarkupExtension\n  inheritance:\n  - System.Object\n  - System.Windows.Markup.MarkupExtension\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  attributes:\n  - type: System.ComponentModel.TypeConverterAttribute\n  - type: System.Windows.Markup.MarkupExtensionReturnTypeAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Markup/TypeExtension.xml\n  ms.technology:\n  - dotnet-wpf\n  manager: martinek\n- uid: System.Windows.Markup.TypeExtension.#ctor\n  commentId: M:System.Windows.Markup.TypeExtension.#ctor\n  id: '#ctor'\n  parent: System.Windows.Markup.TypeExtension\n  langs:\n  - csharp\n  name: TypeExtension()\n  nameWithType: TypeExtension.TypeExtension()\n  fullName: TypeExtension.TypeExtension()\n  type: Constructor\n  assemblies:\n  - System.Xaml\n  namespace: System.Windows.Markup\n  summary: Initializes a new instance of the <xref href=\"System.Windows.Markup.TypeExtension\"></xref> class.\n  syntax:\n    content: public TypeExtension ();\n    parameters: []\n  overload: System.Windows.Markup.TypeExtension.#ctor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Markup/TypeExtension.xml\n  ms.technology:\n  - dotnet-wpf\n  manager: martinek\n- uid: System.Windows.Markup.TypeExtension.#ctor(System.String)\n  commentId: M:System.Windows.Markup.TypeExtension.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.Windows.Markup.TypeExtension\n  langs:\n  - csharp\n  name: TypeExtension(String)\n  nameWithType: TypeExtension.TypeExtension(String)\n  fullName: TypeExtension.TypeExtension(String)\n  type: Constructor\n  assemblies:\n  - System.Xaml\n  namespace: System.Windows.Markup\n  summary: Initializes a new instance of the <xref href=\"System.Windows.Markup.TypeExtension\"></xref> class, initializing the <xref href=\"System.Windows.Markup.TypeExtension.TypeName\"></xref> value based on the provided <code>typeName</code> string.\n  remarks: This value is not evaluated when you set it in the constructor. If the value is not `null`, the value will be initially accepted. The actual parsing and evaluation of the value is deferred until <xref:System.Windows.Markup.TypeExtension.ProvideValue%2A> is called on this extension, when XAML is parsed and with available service contexts active. At this time the `typeName` is expected to be resolvable as a type within a XAML schema context, and that type is returned.\n  syntax:\n    content: public TypeExtension (string typeName);\n    parameters:\n    - id: typeName\n      type: System.String\n      description: A string that identifies the type to make a reference to. This string uses the format <code>prefix:className</code>. <code>prefix</code> is the mapping prefix for a XAML namespace, and is only required to reference types that are not mapped to the default XAML namespace.\n  overload: System.Windows.Markup.TypeExtension.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: Attempted to specify <code>typeName</code> as `null`.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Markup/TypeExtension.xml\n  ms.technology:\n  - dotnet-wpf\n  manager: martinek\n- uid: System.Windows.Markup.TypeExtension.#ctor(System.Type)\n  commentId: M:System.Windows.Markup.TypeExtension.#ctor(System.Type)\n  id: '#ctor(System.Type)'\n  parent: System.Windows.Markup.TypeExtension\n  langs:\n  - csharp\n  name: TypeExtension(Type)\n  nameWithType: TypeExtension.TypeExtension(Type)\n  fullName: TypeExtension.TypeExtension(Type)\n  type: Constructor\n  assemblies:\n  - System.Xaml\n  namespace: System.Windows.Markup\n  summary: Initializes a new instance of the <xref href=\"System.Windows.Markup.TypeExtension\"></xref> class, declaring the type directly.\n  remarks: This is a helper method for run time code usages of <xref:System.Windows.Markup.TypeExtension> and is not part of the normal implementation pattern for a markup extension.\n  syntax:\n    content: public TypeExtension (Type type);\n    parameters:\n    - id: type\n      type: System.Type\n      description: The type to be represented by this <xref href=\"System.Windows.Markup.TypeExtension\"></xref>.\n  overload: System.Windows.Markup.TypeExtension.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>type</code> is `null`\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Markup/TypeExtension.xml\n  ms.technology:\n  - dotnet-wpf\n  manager: martinek\n- uid: System.Windows.Markup.TypeExtension.ProvideValue(System.IServiceProvider)\n  commentId: M:System.Windows.Markup.TypeExtension.ProvideValue(System.IServiceProvider)\n  id: ProvideValue(System.IServiceProvider)\n  parent: System.Windows.Markup.TypeExtension\n  langs:\n  - csharp\n  name: ProvideValue(IServiceProvider)\n  nameWithType: TypeExtension.ProvideValue(IServiceProvider)\n  fullName: TypeExtension.ProvideValue(IServiceProvider)\n  type: Method\n  assemblies:\n  - System.Xaml\n  namespace: System.Windows.Markup\n  summary: Returns an object that should be set on the property where this extension is applied. For <xref href=\"System.Windows.Markup.TypeExtension\"></xref> , this is the <xref href=\"System.Type\"></xref> value as evaluated for the requested type name.\n  remarks: You can pass `null` for `serviceProvider`, but only if this <xref:System.Windows.Markup.TypeExtension> instance was established with an initial true type in the constructor rather than a `typeName`. Otherwise, this markup extension implementation relies on services based on the passed `serviceProvider`. It must not be `null`. The `serviceProvider` is expected to provide a service for <xref:System.Windows.Markup.IXamlTypeResolver>.\n  syntax:\n    content: public override object ProvideValue (IServiceProvider serviceProvider);\n    parameters:\n    - id: serviceProvider\n      type: System.IServiceProvider\n      description: Object that can provide services for the markup extension. The provider is expected to provide a service for <xref href=\"System.Windows.Markup.IXamlTypeResolver\"></xref>.\n    return:\n      type: System.Object\n      description: The <xref href=\"System.Type\"></xref> to set on the property where the extension is applied.\n  overload: System.Windows.Markup.TypeExtension.ProvideValue*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <code>member</code> value for the extension is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"Some part of the <code>typeName</code> string did not parse properly.  \\n  \\n -or-  \\n  \\n <code>serviceProvider</code> did not provide a service for <xref href=\\\"System.Windows.Markup.IXamlTypeResolver\\\"></xref>  \\n  \\n -or-  \\n  \\n <code>typeName</code> value did not resolve to a type.\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>serviceProvider</code> is `null`\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Markup/TypeExtension.xml\n  ms.technology:\n  - dotnet-wpf\n  manager: martinek\n- uid: System.Windows.Markup.TypeExtension.Type\n  commentId: P:System.Windows.Markup.TypeExtension.Type\n  id: Type\n  parent: System.Windows.Markup.TypeExtension\n  langs:\n  - csharp\n  name: Type\n  nameWithType: TypeExtension.Type\n  fullName: TypeExtension.Type\n  type: Property\n  assemblies:\n  - System.Xaml\n  namespace: System.Windows.Markup\n  summary: Gets or sets the type information for this extension.\n  remarks: \"Unless this instance was deliberately instantiated with the <xref:System.Windows.Markup.TypeExtension.%23ctor%28System.Type%29> signature constructor, this value will be `null`. This property will not be reset when <xref:System.Windows.Markup.TypeExtension.ProvideValue%2A> is called. If you want the true type represented you should always call <xref:System.Windows.Markup.TypeExtension.ProvideValue%2A> rather than check this property.  \\n  \\n This property is settable per usual rules regarding markup extension usage. However, if you are setting with a <xref:System.Type>, then the purpose of this markup extension is irrelevant, because the same <xref:System.Type> is returned from a <xref:System.Windows.Markup.TypeExtension.ProvideValue%2A> call.  \\n  \\n<a name=\\\"xamlTextUsage_Type\\\"></a>   \\n## XAML Text Usage\"\n  syntax:\n    content: public Type Type { get; set; }\n    return:\n      type: System.Type\n      description: The established type. For runtime purposes, this may be `null` for get access, but cannot be set to `null`.\n  overload: System.Windows.Markup.TypeExtension.Type*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: Attempted to set to `null`.\n  attributes: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Markup/TypeExtension.xml\n  ms.technology:\n  - dotnet-wpf\n  manager: martinek\n- uid: System.Windows.Markup.TypeExtension.TypeName\n  commentId: P:System.Windows.Markup.TypeExtension.TypeName\n  id: TypeName\n  parent: System.Windows.Markup.TypeExtension\n  langs:\n  - csharp\n  name: TypeName\n  nameWithType: TypeExtension.TypeName\n  fullName: TypeExtension.TypeName\n  type: Property\n  assemblies:\n  - System.Xaml\n  namespace: System.Windows.Markup\n  summary: Gets or sets the type name represented by this markup extension.\n  remarks: \"<a name=\\\"xamlTextUsage_TypeName\\\"></a>   \\n## XAML Text Usage\"\n  syntax:\n    content: public string TypeName { get; set; }\n    return:\n      type: System.String\n      description: A string that identifies the type. This string uses the format *prefix*<code>:</code>*className*. (*prefix* is the mapping prefix for an XML namespace, and is only required to reference types that are not mapped to the default XML namespace for WPF ([!INCLUDE[TLA#tla_wpfxmlnsv1](~/includes/tlasharptla-wpfxmlnsv1-md.md)]).\n  overload: System.Windows.Markup.TypeExtension.TypeName*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: Attempted to set to `null`.\n  attributes: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Markup/TypeExtension.xml\n  ms.technology:\n  - dotnet-wpf\n  manager: martinek\nreferences:\n- uid: System.Windows.Markup.MarkupExtension\n  parent: System.Windows.Markup\n  isExternal: false\n  name: MarkupExtension\n  nameWithType: MarkupExtension\n  fullName: System.Windows.Markup.MarkupExtension\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  nameWithType: InvalidOperationException\n  fullName: System.InvalidOperationException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.Windows.Markup.TypeExtension.#ctor\n  parent: System.Windows.Markup.TypeExtension\n  isExternal: false\n  name: TypeExtension()\n  nameWithType: TypeExtension.TypeExtension()\n  fullName: TypeExtension.TypeExtension()\n- uid: System.Windows.Markup.TypeExtension.#ctor(System.String)\n  parent: System.Windows.Markup.TypeExtension\n  isExternal: false\n  name: TypeExtension(String)\n  nameWithType: TypeExtension.TypeExtension(String)\n  fullName: TypeExtension.TypeExtension(String)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Windows.Markup.TypeExtension.#ctor(System.Type)\n  parent: System.Windows.Markup.TypeExtension\n  isExternal: false\n  name: TypeExtension(Type)\n  nameWithType: TypeExtension.TypeExtension(Type)\n  fullName: TypeExtension.TypeExtension(Type)\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Windows.Markup.TypeExtension.ProvideValue(System.IServiceProvider)\n  parent: System.Windows.Markup.TypeExtension\n  isExternal: false\n  name: ProvideValue(IServiceProvider)\n  nameWithType: TypeExtension.ProvideValue(IServiceProvider)\n  fullName: TypeExtension.ProvideValue(IServiceProvider)\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.IServiceProvider\n  parent: System\n  isExternal: false\n  name: IServiceProvider\n  nameWithType: IServiceProvider\n  fullName: System.IServiceProvider\n- uid: System.Windows.Markup.TypeExtension.Type\n  parent: System.Windows.Markup.TypeExtension\n  isExternal: false\n  name: Type\n  nameWithType: TypeExtension.Type\n  fullName: TypeExtension.Type\n- uid: System.Windows.Markup.TypeExtension.TypeName\n  parent: System.Windows.Markup.TypeExtension\n  isExternal: false\n  name: TypeName\n  nameWithType: TypeExtension.TypeName\n  fullName: TypeExtension.TypeName\n- uid: System.Windows.Markup.TypeExtension.#ctor*\n  parent: System.Windows.Markup.TypeExtension\n  isExternal: false\n  name: TypeExtension\n  nameWithType: TypeExtension.TypeExtension\n  fullName: TypeExtension.TypeExtension\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Markup/TypeExtension.xml\n- uid: System.Windows.Markup.TypeExtension.ProvideValue*\n  parent: System.Windows.Markup.TypeExtension\n  isExternal: false\n  name: ProvideValue\n  nameWithType: TypeExtension.ProvideValue\n  fullName: TypeExtension.ProvideValue\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Markup/TypeExtension.xml\n- uid: System.Windows.Markup.TypeExtension.Type*\n  parent: System.Windows.Markup.TypeExtension\n  isExternal: false\n  name: Type\n  nameWithType: TypeExtension.Type\n  fullName: TypeExtension.Type\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Markup/TypeExtension.xml\n- uid: System.Windows.Markup.TypeExtension.TypeName*\n  parent: System.Windows.Markup.TypeExtension\n  isExternal: false\n  name: TypeName\n  nameWithType: TypeExtension.TypeName\n  fullName: TypeExtension.TypeName\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Markup/TypeExtension.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n"}