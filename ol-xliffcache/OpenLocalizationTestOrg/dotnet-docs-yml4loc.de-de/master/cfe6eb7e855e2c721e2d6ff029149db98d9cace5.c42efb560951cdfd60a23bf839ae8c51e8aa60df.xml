{"nodes":[{"content":"Manages a compact array of bit values, which are represented as Booleans, where `true` indicates that the bit is on (1) and `false` indicates the bit is off (0).","nodes":[{"pos":[0,161],"content":"Manages a compact array of bit values, which are represented as Booleans, where <ph id=\"ph1\">`true`</ph> indicates that the bit is on (1) and <ph id=\"ph2\">`false`</ph> indicates the bit is off (0).","source":"Manages a compact array of bit values, which are represented as Booleans, where `true` indicates that the bit is on (1) and `false` indicates the bit is off (0)."}],"pos":[1953,2115],"yaml":true},{"content":"The <xref:System.Collections.BitArray> class is a collection class in which the capacity is always the same as the count. Elements are added to a <xref:System.Collections.BitArray> by increasing the <xref:System.Collections.BitArray.Length%2A> property; elements are deleted by decreasing the <xref:System.Collections.BitArray.Length%2A> property. The size of a <xref:System.Collections.BitArray> is controlled by the client; indexing past the end of the <xref:System.Collections.BitArray> throws an <xref:System.ArgumentException>.The <xref:System.Collections.BitArray> class provides methods that are not found in other collections, including those that allow multiple elements to be modified at once using a filter, such as <xref:System.Collections.BitArray.And%2A>, <xref:System.Collections.BitArray.Or%2A>, <xref:System.Collections.BitArray.Xor%2A> , <xref:System.Collections.BitArray.Not%2A>, and <xref:System.Collections.BitArray.SetAll%2A>.  \n  \n The <xref:System.Collections.Specialized.BitVector32> class is a structure that provides the same functionality as <xref:System.Collections.BitArray>, but with faster performance. <xref:System.Collections.Specialized.BitVector32> is faster because it is a value type and therefore allocated on the stack, whereas <xref:System.Collections.BitArray> is a reference type and, therefore, allocated on the heap.  \n  \n <xref:System.Collections.Specialized.BitVector32?displayProperty=fullName> can store exactly 32 bits, whereas <xref:System.Collections.BitArray> can store a variable number of bits. <xref:System.Collections.Specialized.BitVector32> stores both bit flags and small integers, thereby making it ideal for data that is not exposed to the user. However, if the number of required bit flags is unknown, is variable, or is greater than 32, use <xref:System.Collections.BitArray> instead.  \n  \n <xref:System.Collections.BitArray> is in the <xref:System.Collections> namespace; <xref:System.Collections.Specialized.BitVector32> is in the <xref:System.Collections.Specialized> namespace.  \n  \n Elements in this collection can be accessed using an integer index.  Indexes in this collection are zero-based.","nodes":[{"pos":[0,948],"content":"The <xref:System.Collections.BitArray> class is a collection class in which the capacity is always the same as the count. Elements are added to a <xref:System.Collections.BitArray> by increasing the <xref:System.Collections.BitArray.Length%2A> property; elements are deleted by decreasing the <xref:System.Collections.BitArray.Length%2A> property. The size of a <xref:System.Collections.BitArray> is controlled by the client; indexing past the end of the <xref:System.Collections.BitArray> throws an <xref:System.ArgumentException>.The <xref:System.Collections.BitArray> class provides methods that are not found in other collections, including those that allow multiple elements to be modified at once using a filter, such as <xref:System.Collections.BitArray.And%2A>, <xref:System.Collections.BitArray.Or%2A>, <xref:System.Collections.BitArray.Xor%2A> , <xref:System.Collections.BitArray.Not%2A>, and <xref:System.Collections.BitArray.SetAll%2A>.","nodes":[{"content":"The <xref:System.Collections.BitArray> class is a collection class in which the capacity is always the same as the count. Elements are added to a <xref:System.Collections.BitArray> by increasing the <xref:System.Collections.BitArray.Length%2A> property; elements are deleted by decreasing the <xref:System.Collections.BitArray.Length%2A> property. The size of a <xref:System.Collections.BitArray> is controlled by the client; indexing past the end of the <xref:System.Collections.BitArray> throws an <xref:System.ArgumentException>.The <xref:System.Collections.BitArray> class provides methods that are not found in other collections, including those that allow multiple elements to be modified at once using a filter, such as <xref:System.Collections.BitArray.And%2A>, <xref:System.Collections.BitArray.Or%2A>, <xref:System.Collections.BitArray.Xor%2A> , <xref:System.Collections.BitArray.Not%2A>, and <xref:System.Collections.BitArray.SetAll%2A>.","pos":[0,948],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Collections.BitArray&gt;</ph> class is a collection class in which the capacity is always the same as the count.","pos":[0,121],"source":"The <xref:System.Collections.BitArray> class is a collection class in which the capacity is always the same as the count."},{"content":"Elements are added to a <ph id=\"ph1\">&lt;xref:System.Collections.BitArray&gt;</ph> by increasing the <ph id=\"ph2\">&lt;xref:System.Collections.BitArray.Length%2A&gt;</ph> property; elements are deleted by decreasing the <ph id=\"ph3\">&lt;xref:System.Collections.BitArray.Length%2A&gt;</ph> property.","pos":[122,347],"source":" Elements are added to a <xref:System.Collections.BitArray> by increasing the <xref:System.Collections.BitArray.Length%2A> property; elements are deleted by decreasing the <xref:System.Collections.BitArray.Length%2A> property."},{"content":"The size of a <ph id=\"ph1\">&lt;xref:System.Collections.BitArray&gt;</ph> is controlled by the client; indexing past the end of the <ph id=\"ph2\">&lt;xref:System.Collections.BitArray&gt;</ph> throws an <ph id=\"ph3\">&lt;xref:System.ArgumentException&gt;</ph>.The <ph id=\"ph4\">&lt;xref:System.Collections.BitArray&gt;</ph> class provides methods that are not found in other collections, including those that allow multiple elements to be modified at once using a filter, such as <ph id=\"ph5\">&lt;xref:System.Collections.BitArray.And%2A&gt;</ph>, <ph id=\"ph6\">&lt;xref:System.Collections.BitArray.Or%2A&gt;</ph>, <ph id=\"ph7\">&lt;xref:System.Collections.BitArray.Xor%2A&gt;</ph> , <ph id=\"ph8\">&lt;xref:System.Collections.BitArray.Not%2A&gt;</ph>, and <ph id=\"ph9\">&lt;xref:System.Collections.BitArray.SetAll%2A&gt;</ph>.","pos":[348,948],"source":" The size of a <xref:System.Collections.BitArray> is controlled by the client; indexing past the end of the <xref:System.Collections.BitArray> throws an <xref:System.ArgumentException>.The <xref:System.Collections.BitArray> class provides methods that are not found in other collections, including those that allow multiple elements to be modified at once using a filter, such as <xref:System.Collections.BitArray.And%2A>, <xref:System.Collections.BitArray.Or%2A>, <xref:System.Collections.BitArray.Xor%2A> , <xref:System.Collections.BitArray.Not%2A>, and <xref:System.Collections.BitArray.SetAll%2A>."}]}]},{"pos":[955,1361],"content":"The <xref:System.Collections.Specialized.BitVector32> class is a structure that provides the same functionality as <xref:System.Collections.BitArray>, but with faster performance. <xref:System.Collections.Specialized.BitVector32> is faster because it is a value type and therefore allocated on the stack, whereas <xref:System.Collections.BitArray> is a reference type and, therefore, allocated on the heap.","nodes":[{"content":"The <xref:System.Collections.Specialized.BitVector32> class is a structure that provides the same functionality as <xref:System.Collections.BitArray>, but with faster performance. <xref:System.Collections.Specialized.BitVector32> is faster because it is a value type and therefore allocated on the stack, whereas <xref:System.Collections.BitArray> is a reference type and, therefore, allocated on the heap.","pos":[0,406],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph> class is a structure that provides the same functionality as <ph id=\"ph2\">&lt;xref:System.Collections.BitArray&gt;</ph>, but with faster performance.","pos":[0,179],"source":"The <xref:System.Collections.Specialized.BitVector32> class is a structure that provides the same functionality as <xref:System.Collections.BitArray>, but with faster performance."},{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph> is faster because it is a value type and therefore allocated on the stack, whereas <ph id=\"ph2\">&lt;xref:System.Collections.BitArray&gt;</ph> is a reference type and, therefore, allocated on the heap.","pos":[180,406],"source":" <xref:System.Collections.Specialized.BitVector32> is faster because it is a value type and therefore allocated on the stack, whereas <xref:System.Collections.BitArray> is a reference type and, therefore, allocated on the heap."}]}]},{"pos":[1368,1848],"content":"<xref:System.Collections.Specialized.BitVector32?displayProperty=fullName> can store exactly 32 bits, whereas <xref:System.Collections.BitArray> can store a variable number of bits. <xref:System.Collections.Specialized.BitVector32> stores both bit flags and small integers, thereby making it ideal for data that is not exposed to the user. However, if the number of required bit flags is unknown, is variable, or is greater than 32, use <xref:System.Collections.BitArray> instead.","nodes":[{"content":"<xref:System.Collections.Specialized.BitVector32?displayProperty=fullName> can store exactly 32 bits, whereas <xref:System.Collections.BitArray> can store a variable number of bits. <xref:System.Collections.Specialized.BitVector32> stores both bit flags and small integers, thereby making it ideal for data that is not exposed to the user. However, if the number of required bit flags is unknown, is variable, or is greater than 32, use <xref:System.Collections.BitArray> instead.","pos":[0,480],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.Specialized.BitVector32?displayProperty=fullName&gt;</ph> can store exactly 32 bits, whereas <ph id=\"ph2\">&lt;xref:System.Collections.BitArray&gt;</ph> can store a variable number of bits.","pos":[0,181],"source":"<xref:System.Collections.Specialized.BitVector32?displayProperty=fullName> can store exactly 32 bits, whereas <xref:System.Collections.BitArray> can store a variable number of bits."},{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph> stores both bit flags and small integers, thereby making it ideal for data that is not exposed to the user.","pos":[182,339],"source":" <xref:System.Collections.Specialized.BitVector32> stores both bit flags and small integers, thereby making it ideal for data that is not exposed to the user."},{"content":"However, if the number of required bit flags is unknown, is variable, or is greater than 32, use <ph id=\"ph1\">&lt;xref:System.Collections.BitArray&gt;</ph> instead.","pos":[340,480],"source":" However, if the number of required bit flags is unknown, is variable, or is greater than 32, use <xref:System.Collections.BitArray> instead."}]}]},{"pos":[1855,2045],"content":"<xref:System.Collections.BitArray> is in the <xref:System.Collections> namespace; <xref:System.Collections.Specialized.BitVector32> is in the <xref:System.Collections.Specialized> namespace.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.BitArray&gt;</ph> is in the <ph id=\"ph2\">&lt;xref:System.Collections&gt;</ph> namespace; <ph id=\"ph3\">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph> is in the <ph id=\"ph4\">&lt;xref:System.Collections.Specialized&gt;</ph> namespace.","pos":[0,190],"source":"<xref:System.Collections.BitArray> is in the <xref:System.Collections> namespace; <xref:System.Collections.Specialized.BitVector32> is in the <xref:System.Collections.Specialized> namespace."}]},{"pos":[2052,2163],"content":"Elements in this collection can be accessed using an integer index.  Indexes in this collection are zero-based.","nodes":[{"content":"Elements in this collection can be accessed using an integer index.  Indexes in this collection are zero-based.","pos":[0,111],"nodes":[{"content":"Elements in this collection can be accessed using an integer index.","pos":[0,67]},{"content":"Indexes in this collection are zero-based.","pos":[69,111]}]}]}],"pos":[2126,4300],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Collections.BitArray\"></xref> class that contains bit values copied from the specified array of Booleans.","nodes":[{"pos":[0,158],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Collections.BitArray\"&gt;&lt;/xref&gt;</ph> class that contains bit values copied from the specified array of Booleans.","source":"Initializes a new instance of the <xref href=\"System.Collections.BitArray\"></xref> class that contains bit values copied from the specified array of Booleans."}],"pos":[7284,7443],"yaml":true},{"content":"This constructor is an O(`n`) operation, where `n` is the number of elements in `values`.","nodes":[{"pos":[0,89],"content":"This constructor is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is the number of elements in <ph id=\"ph3\">`values`</ph>.","source":"This constructor is an O(`n`) operation, where `n` is the number of elements in `values`."}],"pos":[7454,7544],"yaml":true,"extradata":"MT"},{"content":"An array of Booleans to copy.","nodes":[{"pos":[0,29],"content":"An array of Booleans to copy.","nodes":[{"content":"An array of Booleans to copy.","pos":[0,29]}]}],"pos":[7681,7711],"yaml":true},{"content":"<code>values</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;values&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>values</code> is `null`."}],"pos":[7874,7905],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Collections.BitArray\"></xref> class that contains bit values copied from the specified array of bytes.","nodes":[{"pos":[0,155],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Collections.BitArray\"&gt;&lt;/xref&gt;</ph> class that contains bit values copied from the specified array of bytes.","source":"Initializes a new instance of the <xref href=\"System.Collections.BitArray\"></xref> class that contains bit values copied from the specified array of bytes."}],"pos":[9371,9527],"yaml":true},{"content":"The first byte in the array represents bits 0 through 7, the second byte represents bits 8 through 15, and so on. The Least Significant Bit of each byte represents the lowest index value: \" `bytes` [0] & 1\" represents bit 0, \" `bytes` [0] & 2\" represents bit 1, \" `bytes` [0] & 4\" represents bit 2, and so on.  \n  \n This constructor is an O(`n`) operation, where `n` is the number of elements in `bytes`.","nodes":[{"pos":[0,309],"content":"The first byte in the array represents bits 0 through 7, the second byte represents bits 8 through 15, and so on. The Least Significant Bit of each byte represents the lowest index value: \" `bytes` [0] & 1\" represents bit 0, \" `bytes` [0] & 2\" represents bit 1, \" `bytes` [0] & 4\" represents bit 2, and so on.","nodes":[{"content":"The first byte in the array represents bits 0 through 7, the second byte represents bits 8 through 15, and so on.","pos":[0,113]},{"content":"The Least Significant Bit of each byte represents the lowest index value: \" <ph id=\"ph1\">`bytes`</ph> [0] &amp; 1\" represents bit 0, \" <ph id=\"ph2\">`bytes`</ph> [0] &amp; 2\" represents bit 1, \" <ph id=\"ph3\">`bytes`</ph> [0] &amp; 4\" represents bit 2, and so on.","pos":[114,309],"source":" The Least Significant Bit of each byte represents the lowest index value: \" `bytes` [0] & 1\" represents bit 0, \" `bytes` [0] & 2\" represents bit 1, \" `bytes` [0] & 4\" represents bit 2, and so on."}]},{"pos":[316,404],"content":"This constructor is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is the number of elements in <ph id=\"ph3\">`bytes`</ph>.","source":"This constructor is an O(`n`) operation, where `n` is the number of elements in `bytes`."}],"pos":[9538,9953],"yaml":true,"extradata":"MT"},{"content":"An array of bytes containing the values to copy, where each byte represents eight consecutive bits.","nodes":[{"pos":[0,99],"content":"An array of bytes containing the values to copy, where each byte represents eight consecutive bits.","nodes":[{"content":"An array of bytes containing the values to copy, where each byte represents eight consecutive bits.","pos":[0,99]}]}],"pos":[10085,10185],"yaml":true},{"content":"<code>bytes</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;bytes&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>bytes</code> is `null`."}],"pos":[10348,10378],"yaml":true},{"content":"The length of <code>bytes</code> is greater than <xref href=\"System.Int32.MaxValue\"></xref>.","nodes":[{"pos":[0,92],"content":"The length of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">bytes</ph><ept id=\"p1\">&lt;/code&gt;</ept> is greater than <ph id=\"ph2\">&lt;xref href=\"System.Int32.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"The length of <code>bytes</code> is greater than <xref href=\"System.Int32.MaxValue\"></xref>."}],"pos":[10472,10565],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Collections.BitArray\"></xref> class that contains bit values copied from the specified <xref href=\"System.Collections.BitArray\"></xref>.","nodes":[{"pos":[0,189],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Collections.BitArray\"&gt;&lt;/xref&gt;</ph> class that contains bit values copied from the specified <ph id=\"ph2\">&lt;xref href=\"System.Collections.BitArray\"&gt;&lt;/xref&gt;</ph>.","source":"Initializes a new instance of the <xref href=\"System.Collections.BitArray\"></xref> class that contains bit values copied from the specified <xref href=\"System.Collections.BitArray\"></xref>."}],"pos":[12079,12269],"yaml":true},{"content":"This constructor is an O(`n`) operation, where `n` is the number of elements in `bits`.","nodes":[{"pos":[0,87],"content":"This constructor is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is the number of elements in <ph id=\"ph3\">`bits`</ph>.","source":"This constructor is an O(`n`) operation, where `n` is the number of elements in `bits`."}],"pos":[12280,12368],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Collections.BitArray\"></xref> to copy.","nodes":[{"pos":[0,61],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.BitArray\"&gt;&lt;/xref&gt;</ph> to copy.","source":"The <xref href=\"System.Collections.BitArray\"></xref> to copy."}],"pos":[12533,12595],"yaml":true},{"content":"<code>bits</code> is `null`.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;bits&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>bits</code> is `null`."}],"pos":[12758,12787],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Collections.BitArray\"></xref> class that can hold the specified number of bit values, which are initially set to `false`.","nodes":[{"pos":[0,174],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Collections.BitArray\"&gt;&lt;/xref&gt;</ph> class that can hold the specified number of bit values, which are initially set to <ph id=\"ph2\">`false`</ph>.","source":"Initializes a new instance of the <xref href=\"System.Collections.BitArray\"></xref> class that can hold the specified number of bit values, which are initially set to `false`."}],"pos":[14247,14422],"yaml":true},{"content":"This constructor is an O(`n`) operation, where `n` is `length`.","nodes":[{"pos":[0,63],"content":"This constructor is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is <ph id=\"ph3\">`length`</ph>.","source":"This constructor is an O(`n`) operation, where `n` is `length`."}],"pos":[14433,14497],"yaml":true,"extradata":"MT"},{"content":"The number of bit values in the new <xref href=\"System.Collections.BitArray\"></xref>.","nodes":[{"pos":[0,85],"content":"The number of bit values in the new <ph id=\"ph1\">&lt;xref href=\"System.Collections.BitArray\"&gt;&lt;/xref&gt;</ph>.","source":"The number of bit values in the new <xref href=\"System.Collections.BitArray\"></xref>."}],"pos":[14627,14713],"yaml":true},{"content":"<code>length</code> is less than zero.","nodes":[{"pos":[0,38],"content":"<ph id=\"ph1\">&lt;code&gt;length&lt;/code&gt;</ph> is less than zero.","source":"<code>length</code> is less than zero."}],"pos":[14888,14927],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Collections.BitArray\"></xref> class that contains bit values copied from the specified array of 32-bit integers.","nodes":[{"pos":[0,165],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Collections.BitArray\"&gt;&lt;/xref&gt;</ph> class that contains bit values copied from the specified array of 32-bit integers.","source":"Initializes a new instance of the <xref href=\"System.Collections.BitArray\"></xref> class that contains bit values copied from the specified array of 32-bit integers."}],"pos":[16399,16565],"yaml":true},{"content":"The number in the first `values` array element represents bits 0 through 31, the second number in the array represents bits 32 through 63, and so on. The Least Significant Bit of each integer represents the lowest index value: \" `values` [0] & 1\" represents bit 0, \" `values` [0] & 2\" represents bit 1, \" `values` [0] & 4\" represents bit 2, and so on.  \n  \n This constructor is an O(`n`) operation, where `n` is the number of elements in `values`.","nodes":[{"pos":[0,351],"content":"The number in the first `values` array element represents bits 0 through 31, the second number in the array represents bits 32 through 63, and so on. The Least Significant Bit of each integer represents the lowest index value: \" `values` [0] & 1\" represents bit 0, \" `values` [0] & 2\" represents bit 1, \" `values` [0] & 4\" represents bit 2, and so on.","nodes":[{"content":"The number in the first <ph id=\"ph1\">`values`</ph> array element represents bits 0 through 31, the second number in the array represents bits 32 through 63, and so on.","pos":[0,149],"source":"The number in the first `values` array element represents bits 0 through 31, the second number in the array represents bits 32 through 63, and so on."},{"content":"The Least Significant Bit of each integer represents the lowest index value: \" <ph id=\"ph1\">`values`</ph> [0] &amp; 1\" represents bit 0, \" <ph id=\"ph2\">`values`</ph> [0] &amp; 2\" represents bit 1, \" <ph id=\"ph3\">`values`</ph> [0] &amp; 4\" represents bit 2, and so on.","pos":[150,351],"source":" The Least Significant Bit of each integer represents the lowest index value: \" `values` [0] & 1\" represents bit 0, \" `values` [0] & 2\" represents bit 1, \" `values` [0] & 4\" represents bit 2, and so on."}]},{"pos":[358,447],"content":"This constructor is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is the number of elements in <ph id=\"ph3\">`values`</ph>.","source":"This constructor is an O(`n`) operation, where `n` is the number of elements in `values`."}],"pos":[16576,17034],"yaml":true,"extradata":"MT"},{"content":"An array of integers containing the values to copy, where each integer represents 32 consecutive bits.","nodes":[{"pos":[0,102],"content":"An array of integers containing the values to copy, where each integer represents 32 consecutive bits.","nodes":[{"content":"An array of integers containing the values to copy, where each integer represents 32 consecutive bits.","pos":[0,102]}]}],"pos":[17168,17271],"yaml":true},{"content":"<code>values</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;values&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>values</code> is `null`."}],"pos":[17434,17465],"yaml":true},{"content":"The length of <code>values</code> is greater than <xref href=\"System.Int32.MaxValue\"></xref>","nodes":[{"pos":[0,92],"content":"The length of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">values</ph><ept id=\"p1\">&lt;/code&gt;</ept> is greater than <ph id=\"ph2\">&lt;xref href=\"System.Int32.MaxValue\"&gt;&lt;/xref&gt;</ph>","source":"The length of <code>values</code> is greater than <xref href=\"System.Int32.MaxValue\"></xref>"}],"pos":[17559,17652],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Collections.BitArray\"></xref> class that can hold the specified number of bit values, which are initially set to the specified value.","nodes":[{"pos":[0,186],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Collections.BitArray\"&gt;&lt;/xref&gt;</ph> class that can hold the specified number of bit values, which are initially set to the specified value.","source":"Initializes a new instance of the <xref href=\"System.Collections.BitArray\"></xref> class that can hold the specified number of bit values, which are initially set to the specified value."}],"pos":[19184,19371],"yaml":true},{"content":"This constructor is an O(`n`) operation, where `n` is `length`.","nodes":[{"pos":[0,63],"content":"This constructor is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is <ph id=\"ph3\">`length`</ph>.","source":"This constructor is an O(`n`) operation, where `n` is `length`."}],"pos":[19382,19446],"yaml":true,"extradata":"MT"},{"content":"The number of bit values in the new <xref href=\"System.Collections.BitArray\"></xref>.","nodes":[{"pos":[0,85],"content":"The number of bit values in the new <ph id=\"ph1\">&lt;xref href=\"System.Collections.BitArray\"&gt;&lt;/xref&gt;</ph>.","source":"The number of bit values in the new <xref href=\"System.Collections.BitArray\"></xref>."}],"pos":[19595,19681],"yaml":true},{"content":"The Boolean value to assign to each bit.","nodes":[{"pos":[0,40],"content":"The Boolean value to assign to each bit.","nodes":[{"content":"The Boolean value to assign to each bit.","pos":[0,40]}]}],"pos":[19750,19791],"yaml":true},{"content":"<code>length</code> is less than zero.","nodes":[{"pos":[0,38],"content":"<ph id=\"ph1\">&lt;code&gt;length&lt;/code&gt;</ph> is less than zero.","source":"<code>length</code> is less than zero."}],"pos":[19966,20005],"yaml":true},{"content":"Performs the bitwise AND operation between the elements of the current <xref href=\"System.Collections.BitArray\"></xref> object and the corresponding elements in the specified array. The current <xref href=\"System.Collections.BitArray\"></xref> object will be modified to store the result of the bitwise AND operation.","nodes":[{"pos":[0,316],"content":"Performs the bitwise AND operation between the elements of the current <xref href=\"System.Collections.BitArray\"></xref> object and the corresponding elements in the specified array. The current <xref href=\"System.Collections.BitArray\"></xref> object will be modified to store the result of the bitwise AND operation.","nodes":[{"content":"Performs the bitwise AND operation between the elements of the current <ph id=\"ph1\">&lt;xref href=\"System.Collections.BitArray\"&gt;&lt;/xref&gt;</ph> object and the corresponding elements in the specified array.","pos":[0,181],"source":"Performs the bitwise AND operation between the elements of the current <xref href=\"System.Collections.BitArray\"></xref> object and the corresponding elements in the specified array."},{"content":"The current <ph id=\"ph1\">&lt;xref href=\"System.Collections.BitArray\"&gt;&lt;/xref&gt;</ph> object will be modified to store the result of the bitwise AND operation.","pos":[182,316],"source":" The current <xref href=\"System.Collections.BitArray\"></xref> object will be modified to store the result of the bitwise AND operation."}]}],"pos":[21491,21808],"yaml":true},{"content":"The bitwise AND operation returns `true` if both operands are `true`, and returns `false` if one or both operands are `false`.  \n  \n This method is an O(`n`) operation, where `n` is <xref:System.Collections.BitArray.Count%2A>.","nodes":[{"pos":[0,126],"content":"The bitwise AND operation returns <ph id=\"ph1\">`true`</ph> if both operands are <ph id=\"ph2\">`true`</ph>, and returns <ph id=\"ph3\">`false`</ph> if one or both operands are <ph id=\"ph4\">`false`</ph>.","source":"The bitwise AND operation returns `true` if both operands are `true`, and returns `false` if one or both operands are `false`."},{"pos":[133,226],"content":"This method is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is <ph id=\"ph3\">&lt;xref:System.Collections.BitArray.Count%2A&gt;</ph>.","source":"This method is an O(`n`) operation, where `n` is <xref:System.Collections.BitArray.Count%2A>."}],"pos":[21819,22050],"yaml":true,"extradata":"MT"},{"content":"The array with which to perform the bitwise AND operation.","nodes":[{"pos":[0,58],"content":"The array with which to perform the bitwise AND operation.","nodes":[{"content":"The array with which to perform the bitwise AND operation.","pos":[0,58]}]}],"pos":[22822,22881],"yaml":true},{"content":"An array containing the result of the bitwise AND operation, which is a reference to the current <xref href=\"System.Collections.BitArray\"></xref> object.","nodes":[{"pos":[0,153],"content":"An array containing the result of the bitwise AND operation, which is a reference to the current <ph id=\"ph1\">&lt;xref href=\"System.Collections.BitArray\"&gt;&lt;/xref&gt;</ph> object.","source":"An array containing the result of the bitwise AND operation, which is a reference to the current <xref href=\"System.Collections.BitArray\"></xref> object."}],"pos":[22952,23106],"yaml":true},{"content":"<code>value</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>value</code> is `null`."}],"pos":[23267,23297],"yaml":true},{"content":"<code>value</code> and the current <xref href=\"System.Collections.BitArray\"></xref> do not have the same number of elements.","nodes":[{"pos":[0,124],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> and the current <ph id=\"ph2\">&lt;xref href=\"System.Collections.BitArray\"&gt;&lt;/xref&gt;</ph> do not have the same number of elements.","source":"<code>value</code> and the current <xref href=\"System.Collections.BitArray\"></xref> do not have the same number of elements."}],"pos":[23391,23516],"yaml":true},{"content":"Creates a shallow copy of the <xref href=\"System.Collections.BitArray\"></xref>.","nodes":[{"pos":[0,79],"content":"Creates a shallow copy of the <ph id=\"ph1\">&lt;xref href=\"System.Collections.BitArray\"&gt;&lt;/xref&gt;</ph>.","source":"Creates a shallow copy of the <xref href=\"System.Collections.BitArray\"></xref>."}],"pos":[24903,24983],"yaml":true},{"content":"A shallow copy of a collection copies only the elements of the collection, whether they are reference types or value types, but it does not copy the objects that the references refer to. The references in the new collection point to the same objects that the references in the original collection point to.  \n  \n In contrast, a deep copy of a collection copies the elements and everything directly or indirectly referenced by the elements.  \n  \n This method is an O(`n`) operation, where `n` is <xref:System.Collections.BitArray.Count%2A>.","nodes":[{"pos":[0,306],"content":"A shallow copy of a collection copies only the elements of the collection, whether they are reference types or value types, but it does not copy the objects that the references refer to. The references in the new collection point to the same objects that the references in the original collection point to.","nodes":[{"content":"A shallow copy of a collection copies only the elements of the collection, whether they are reference types or value types, but it does not copy the objects that the references refer to. The references in the new collection point to the same objects that the references in the original collection point to.","pos":[0,306],"nodes":[{"content":"A shallow copy of a collection copies only the elements of the collection, whether they are reference types or value types, but it does not copy the objects that the references refer to.","pos":[0,186]},{"content":"The references in the new collection point to the same objects that the references in the original collection point to.","pos":[187,306]}]}]},{"pos":[313,439],"content":"In contrast, a deep copy of a collection copies the elements and everything directly or indirectly referenced by the elements.","nodes":[{"content":"In contrast, a deep copy of a collection copies the elements and everything directly or indirectly referenced by the elements.","pos":[0,126]}]},{"pos":[446,539],"content":"This method is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is <ph id=\"ph3\">&lt;xref:System.Collections.BitArray.Count%2A&gt;</ph>.","source":"This method is an O(`n`) operation, where `n` is <xref:System.Collections.BitArray.Count%2A>."}],"pos":[24994,25540],"yaml":true,"extradata":"MT"},{"content":"A shallow copy of the <xref href=\"System.Collections.BitArray\"></xref>.","nodes":[{"pos":[0,71],"content":"A shallow copy of the <ph id=\"ph1\">&lt;xref href=\"System.Collections.BitArray\"&gt;&lt;/xref&gt;</ph>.","source":"A shallow copy of the <xref href=\"System.Collections.BitArray\"></xref>."}],"pos":[25663,25735],"yaml":true},{"content":"Copies the entire <xref href=\"System.Collections.BitArray\"></xref> to a compatible one-dimensional <xref href=\"System.Array\"></xref>, starting at the specified index of the target array.","nodes":[{"pos":[0,186],"content":"Copies the entire <ph id=\"ph1\">&lt;xref href=\"System.Collections.BitArray\"&gt;&lt;/xref&gt;</ph> to a compatible one-dimensional <ph id=\"ph2\">&lt;xref href=\"System.Array\"&gt;&lt;/xref&gt;</ph>, starting at the specified index of the target array.","source":"Copies the entire <xref href=\"System.Collections.BitArray\"></xref> to a compatible one-dimensional <xref href=\"System.Array\"></xref>, starting at the specified index of the target array."}],"pos":[27005,27192],"yaml":true},{"content":"The specified array must be of a compatible type. Only `bool`, `int`, and `byte` types of arrays are supported.  \n  \n This method uses <xref:System.Array.Copy%2A?displayProperty=fullName> to copy the elements.  \n  \n This method is an O(`n`) operation, where `n` is <xref:System.Collections.BitArray.Count%2A>.","nodes":[{"pos":[0,111],"content":"The specified array must be of a compatible type. Only `bool`, `int`, and `byte` types of arrays are supported.","nodes":[{"content":"The specified array must be of a compatible type.","pos":[0,49]},{"content":"Only <ph id=\"ph1\">`bool`</ph>, <ph id=\"ph2\">`int`</ph>, and <ph id=\"ph3\">`byte`</ph> types of arrays are supported.","pos":[50,111],"source":" Only `bool`, `int`, and `byte` types of arrays are supported."}]},{"pos":[118,209],"content":"This method uses <xref:System.Array.Copy%2A?displayProperty=fullName> to copy the elements.","nodes":[{"content":"This method uses <ph id=\"ph1\">&lt;xref:System.Array.Copy%2A?displayProperty=fullName&gt;</ph> to copy the elements.","pos":[0,91],"source":"This method uses <xref:System.Array.Copy%2A?displayProperty=fullName> to copy the elements."}]},{"pos":[216,309],"content":"This method is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is <ph id=\"ph3\">&lt;xref:System.Collections.BitArray.Count%2A&gt;</ph>.","source":"This method is an O(`n`) operation, where `n` is <xref:System.Collections.BitArray.Count%2A>."}],"pos":[27203,27519],"yaml":true,"extradata":"MT"},{"content":"The one-dimensional <xref href=\"System.Array\"></xref> that is the destination of the elements copied from <xref href=\"System.Collections.BitArray\"></xref>. The <xref href=\"System.Array\"></xref> must have zero-based indexing.","nodes":[{"pos":[0,224],"content":"The one-dimensional <xref href=\"System.Array\"></xref> that is the destination of the elements copied from <xref href=\"System.Collections.BitArray\"></xref>. The <xref href=\"System.Array\"></xref> must have zero-based indexing.","nodes":[{"content":"The one-dimensional <ph id=\"ph1\">&lt;xref href=\"System.Array\"&gt;&lt;/xref&gt;</ph> that is the destination of the elements copied from <ph id=\"ph2\">&lt;xref href=\"System.Collections.BitArray\"&gt;&lt;/xref&gt;</ph>.","pos":[0,155],"source":"The one-dimensional <xref href=\"System.Array\"></xref> that is the destination of the elements copied from <xref href=\"System.Collections.BitArray\"></xref>."},{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Array\"&gt;&lt;/xref&gt;</ph> must have zero-based indexing.","pos":[156,224],"source":" The <xref href=\"System.Array\"></xref> must have zero-based indexing."}]}],"pos":[28259,28484],"yaml":true},{"content":"The zero-based index in <code>array</code> at which copying begins.","nodes":[{"pos":[0,67],"content":"The zero-based index in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">array</ph><ept id=\"p1\">&lt;/code&gt;</ept> at which copying begins.","source":"The zero-based index in <code>array</code> at which copying begins."}],"pos":[28544,28612],"yaml":true},{"content":"<code>array</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;array&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>array</code> is `null`."}],"pos":[28776,28806],"yaml":true},{"content":"<code>index</code> is less than zero.","nodes":[{"pos":[0,37],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is less than zero.","source":"<code>index</code> is less than zero."}],"pos":[28920,28958],"yaml":true},{"content":"<code>array</code> is multidimensional.  \n  \n -or-  \n  \n The number of elements in the source <xref href=\"System.Collections.BitArray\"></xref> is greater than the available space from <code>index</code> to the end of the destination <code>array</code>.","nodes":[{"pos":[0,39],"content":"<ph id=\"ph1\">&lt;code&gt;array&lt;/code&gt;</ph> is multidimensional.","source":"<code>array</code> is multidimensional."},{"pos":[46,50],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[57,252],"content":"The number of elements in the source <ph id=\"ph1\">&lt;xref href=\"System.Collections.BitArray\"&gt;&lt;/xref&gt;</ph> is greater than the available space from <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">index</ph><ept id=\"p1\">&lt;/code&gt;</ept> to the end of the destination <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">array</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"The number of elements in the source <xref href=\"System.Collections.BitArray\"></xref> is greater than the available space from <code>index</code> to the end of the destination <code>array</code>."}],"pos":[29052,29313],"yaml":true},{"content":"The type of the source <xref href=\"System.Collections.BitArray\"></xref> cannot be cast automatically to the type of the destination <code>array</code>.","nodes":[{"pos":[0,151],"content":"The type of the source <ph id=\"ph1\">&lt;xref href=\"System.Collections.BitArray\"&gt;&lt;/xref&gt;</ph> cannot be cast automatically to the type of the destination <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">array</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the source <xref href=\"System.Collections.BitArray\"></xref> cannot be cast automatically to the type of the destination <code>array</code>."}],"pos":[29413,29565],"yaml":true},{"content":"Gets the number of elements contained in the <xref href=\"System.Collections.BitArray\"></xref>.","nodes":[{"pos":[0,94],"content":"Gets the number of elements contained in the <ph id=\"ph1\">&lt;xref href=\"System.Collections.BitArray\"&gt;&lt;/xref&gt;</ph>.","source":"Gets the number of elements contained in the <xref href=\"System.Collections.BitArray\"></xref>."}],"pos":[30644,30739],"yaml":true},{"content":"<xref:System.Collections.BitArray.Length%2A> and <xref:System.Collections.BitArray.Count%2A> return the same value. <xref:System.Collections.BitArray.Length%2A> can be set to a specific value, but <xref:System.Collections.BitArray.Count%2A> is read-only.  \n  \n Retrieving the value of this property is an O(1) operation.","nodes":[{"pos":[0,254],"content":"<xref:System.Collections.BitArray.Length%2A> and <xref:System.Collections.BitArray.Count%2A> return the same value. <xref:System.Collections.BitArray.Length%2A> can be set to a specific value, but <xref:System.Collections.BitArray.Count%2A> is read-only.","nodes":[{"content":"<xref:System.Collections.BitArray.Length%2A> and <xref:System.Collections.BitArray.Count%2A> return the same value. <xref:System.Collections.BitArray.Length%2A> can be set to a specific value, but <xref:System.Collections.BitArray.Count%2A> is read-only.","pos":[0,254],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.BitArray.Length%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Collections.BitArray.Count%2A&gt;</ph> return the same value.","pos":[0,115],"source":"<xref:System.Collections.BitArray.Length%2A> and <xref:System.Collections.BitArray.Count%2A> return the same value."},{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.BitArray.Length%2A&gt;</ph> can be set to a specific value, but <ph id=\"ph2\">&lt;xref:System.Collections.BitArray.Count%2A&gt;</ph> is read-only.","pos":[116,254],"source":" <xref:System.Collections.BitArray.Length%2A> can be set to a specific value, but <xref:System.Collections.BitArray.Count%2A> is read-only."}]}]},{"pos":[261,320],"content":"Retrieving the value of this property is an O(1) operation.","nodes":[{"content":"Retrieving the value of this property is an O(1) operation.","pos":[0,59]}]}],"pos":[30750,31075],"yaml":true,"extradata":"MT"},{"content":"The number of elements contained in the <xref href=\"System.Collections.BitArray\"></xref>.","nodes":[{"pos":[0,89],"content":"The number of elements contained in the <ph id=\"ph1\">&lt;xref href=\"System.Collections.BitArray\"&gt;&lt;/xref&gt;</ph>.","source":"The number of elements contained in the <xref href=\"System.Collections.BitArray\"></xref>."}],"pos":[31180,31270],"yaml":true},{"content":"Gets the value of the bit at a specific position in the <xref href=\"System.Collections.BitArray\"></xref>.","nodes":[{"pos":[0,105],"content":"Gets the value of the bit at a specific position in the <ph id=\"ph1\">&lt;xref href=\"System.Collections.BitArray\"&gt;&lt;/xref&gt;</ph>.","source":"Gets the value of the bit at a specific position in the <xref href=\"System.Collections.BitArray\"></xref>."}],"pos":[32462,32568],"yaml":true},{"content":"This method is an O(1) operation.","nodes":[{"pos":[0,33],"content":"This method is an O(1) operation.","nodes":[{"content":"This method is an O(1) operation.","pos":[0,33]}]}],"pos":[32579,32613],"yaml":true,"extradata":"MT"},{"content":"The zero-based index of the value to get.","nodes":[{"pos":[0,41],"content":"The zero-based index of the value to get.","nodes":[{"content":"The zero-based index of the value to get.","pos":[0,41]}]}],"pos":[33304,33346],"yaml":true},{"content":"The value of the bit at position <code>index</code>.","nodes":[{"pos":[0,52],"content":"The value of the bit at position <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">index</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The value of the bit at position <code>index</code>."}],"pos":[33404,33457],"yaml":true},{"content":"<code>index</code> is less than zero.  \n  \n -or-  \n  \n <code>index</code> is greater than or equal to the number of elements in the <xref href=\"System.Collections.BitArray\"></xref>.","nodes":[{"pos":[0,37],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is less than zero.","source":"<code>index</code> is less than zero."},{"pos":[44,48],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[55,181],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is greater than or equal to the number of elements in the <ph id=\"ph2\">&lt;xref href=\"System.Collections.BitArray\"&gt;&lt;/xref&gt;</ph>.","source":"<code>index</code> is greater than or equal to the number of elements in the <xref href=\"System.Collections.BitArray\"></xref>."}],"pos":[33630,33820],"yaml":true},{"content":"Returns an enumerator that iterates through the <xref href=\"System.Collections.BitArray\"></xref>.","nodes":[{"pos":[0,97],"content":"Returns an enumerator that iterates through the <ph id=\"ph1\">&lt;xref href=\"System.Collections.BitArray\"&gt;&lt;/xref&gt;</ph>.","source":"Returns an enumerator that iterates through the <xref href=\"System.Collections.BitArray\"></xref>."}],"pos":[35255,35353],"yaml":true},{"content":"The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators.  Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.  \n  \n Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.  \n  \n Initially, the enumerator is positioned before the first element in the collection. <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.  At this position, <xref:System.Collections.IEnumerator.Current%2A> is undefined. Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.  \n  \n <xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.  \n  \n If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`. When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`. If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined. To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.  \n  \n An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.  \n  \n The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.  \n  \n This method is an O(1) operation.","nodes":[{"pos":[0,205],"content":"The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators.  Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.","nodes":[{"content":"The <ph id=\"ph1\">`foreach`</ph> statement of the C# language (<ph id=\"ph2\">`for each`</ph> in Visual Basic) hides the complexity of the enumerators.","pos":[0,112],"source":"The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators."},{"content":"Therefore, using <ph id=\"ph1\">`foreach`</ph> is recommended, instead of directly manipulating the enumerator.","pos":[114,205],"source":"  Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator."}]},{"pos":[212,332],"content":"Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.","nodes":[{"content":"Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.","pos":[0,120]}]},{"pos":[339,819],"content":"Initially, the enumerator is positioned before the first element in the collection. <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.  At this position, <xref:System.Collections.IEnumerator.Current%2A> is undefined. Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.","nodes":[{"content":"Initially, the enumerator is positioned before the first element in the collection. <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.  At this position, <xref:System.Collections.IEnumerator.Current%2A> is undefined. Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.","pos":[0,480],"nodes":[{"content":"Initially, the enumerator is positioned before the first element in the collection.","pos":[0,83]},{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> also brings the enumerator back to this position.","pos":[84,180],"source":" <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position."},{"content":"At this position, <ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> is undefined.","pos":[182,262],"source":"  At this position, <xref:System.Collections.IEnumerator.Current%2A> is undefined."},{"content":"Therefore, you must call <ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> to advance the enumerator to the first element of the collection before reading the value of <ph id=\"ph2\">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>.","pos":[263,480],"source":" Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>."}]}]},{"pos":[826,1147],"content":"<xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.","nodes":[{"content":"<xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.","pos":[0,321],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> returns the same object until either <ph id=\"ph2\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> or <ph id=\"ph3\">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> is called.","pos":[0,196],"source":"<xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called."},{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> sets <ph id=\"ph2\">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> to the next element.","pos":[197,321],"source":" <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element."}]}]},{"pos":[1154,1889],"content":"If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`. When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`. If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined. To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.","nodes":[{"content":"If <ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> passes the end of the collection, the enumerator is positioned after the last element in the collection and <ph id=\"ph2\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returns <ph id=\"ph3\">`false`</ph>.","pos":[0,227],"source":"If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`."},{"content":"When the enumerator is at this position, subsequent calls to <ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> also return <ph id=\"ph2\">`false`</ph>.","pos":[228,359],"source":" When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`."},{"content":"If the last call to <ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returned <ph id=\"ph2\">`false`</ph>, <ph id=\"ph3\">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> is undefined.","pos":[360,510],"source":" If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined."},{"content":"To set <ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> to the first element of the collection again, you can call <ph id=\"ph2\">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> followed by <ph id=\"ph3\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>.","pos":[511,735],"source":" To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>."}]},{"pos":[1896,2131],"content":"An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.","nodes":[{"content":"An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.","pos":[0,235],"nodes":[{"content":"An enumerator remains valid as long as the collection remains unchanged.","pos":[0,72]},{"content":"If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.","pos":[73,235]}]}]},{"pos":[2138,2529],"content":"The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.","nodes":[{"content":"The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.","pos":[0,391],"nodes":[{"content":"The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.","pos":[0,154]},{"content":"To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.","pos":[156,261]},{"content":"To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.","pos":[263,391]}]}]},{"pos":[2536,2569],"content":"This method is an O(1) operation.","nodes":[{"content":"This method is an O(1) operation.","pos":[0,33]}]}],"pos":[35364,37950],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Collections.IEnumerator\"></xref> for the entire <xref href=\"System.Collections.BitArray\"></xref>.","nodes":[{"pos":[0,119],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.IEnumerator\"&gt;&lt;/xref&gt;</ph> for the entire <ph id=\"ph2\">&lt;xref href=\"System.Collections.BitArray\"&gt;&lt;/xref&gt;</ph>.","source":"An <xref href=\"System.Collections.IEnumerator\"></xref> for the entire <xref href=\"System.Collections.BitArray\"></xref>."}],"pos":[38122,38242],"yaml":true},{"content":"Gets a value indicating whether the <xref href=\"System.Collections.BitArray\"></xref> is read-only.","nodes":[{"pos":[0,98],"content":"Gets a value indicating whether the <ph id=\"ph1\">&lt;xref href=\"System.Collections.BitArray\"&gt;&lt;/xref&gt;</ph> is read-only.","source":"Gets a value indicating whether the <xref href=\"System.Collections.BitArray\"></xref> is read-only."}],"pos":[39727,39826],"yaml":true},{"content":"<xref:System.Collections.BitArray> implements the <xref:System.Collections.BitArray.IsReadOnly%2A> property because it is required by the <xref:System.Collections.IList?displayProperty=fullName> interface.  \n  \n A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.  \n  \n A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.  \n  \n This method is an O(1) operation.","nodes":[{"pos":[0,205],"content":"<xref:System.Collections.BitArray> implements the <xref:System.Collections.BitArray.IsReadOnly%2A> property because it is required by the <xref:System.Collections.IList?displayProperty=fullName> interface.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.BitArray&gt;</ph> implements the <ph id=\"ph2\">&lt;xref:System.Collections.BitArray.IsReadOnly%2A&gt;</ph> property because it is required by the <ph id=\"ph3\">&lt;xref:System.Collections.IList?displayProperty=fullName&gt;</ph> interface.","pos":[0,205],"source":"<xref:System.Collections.BitArray> implements the <xref:System.Collections.BitArray.IsReadOnly%2A> property because it is required by the <xref:System.Collections.IList?displayProperty=fullName> interface."}]},{"pos":[212,341],"content":"A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.","nodes":[{"content":"A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.","pos":[0,129]}]},{"pos":[348,566],"content":"A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.","nodes":[{"content":"A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.","pos":[0,218]}]},{"pos":[573,606],"content":"This method is an O(1) operation.","nodes":[{"content":"This method is an O(1) operation.","pos":[0,33]}]}],"pos":[39837,40452],"yaml":true,"extradata":"MT"},{"content":"This property is always `false`.","nodes":[{"pos":[0,32],"content":"This property is always <ph id=\"ph1\">`false`</ph>.","source":"This property is always `false`."}],"pos":[40565,40598],"yaml":true},{"content":"Gets a value indicating whether access to the <xref href=\"System.Collections.BitArray\"></xref> is synchronized (thread safe).","nodes":[{"pos":[0,125],"content":"Gets a value indicating whether access to the <ph id=\"ph1\">&lt;xref href=\"System.Collections.BitArray\"&gt;&lt;/xref&gt;</ph> is synchronized (thread safe).","source":"Gets a value indicating whether access to the <xref href=\"System.Collections.BitArray\"></xref> is synchronized (thread safe)."}],"pos":[41800,41926],"yaml":true},{"content":"<xref:System.Collections.BitArray> implements the <xref:System.Collections.BitArray.IsSynchronized%2A> property because it is required by the <xref:System.Collections.ICollection?displayProperty=fullName> interface.  \n  \n Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.","nodes":[{"pos":[0,215],"content":"<xref:System.Collections.BitArray> implements the <xref:System.Collections.BitArray.IsSynchronized%2A> property because it is required by the <xref:System.Collections.ICollection?displayProperty=fullName> interface.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.BitArray&gt;</ph> implements the <ph id=\"ph2\">&lt;xref:System.Collections.BitArray.IsSynchronized%2A&gt;</ph> property because it is required by the <ph id=\"ph3\">&lt;xref:System.Collections.ICollection?displayProperty=fullName&gt;</ph> interface.","pos":[0,215],"source":"<xref:System.Collections.BitArray> implements the <xref:System.Collections.BitArray.IsSynchronized%2A> property because it is required by the <xref:System.Collections.ICollection?displayProperty=fullName> interface."}]},{"pos":[222,620],"content":"Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.","nodes":[{"content":"Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.","pos":[0,398],"nodes":[{"content":"Enumerating through a collection is intrinsically not a thread-safe procedure.","pos":[0,78]},{"content":"Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.","pos":[79,216]},{"content":"To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.","pos":[217,398]}]}]}],"pos":[41937,42562],"yaml":true,"extradata":"MT"},{"content":"This property is always `false`.","nodes":[{"pos":[0,32],"content":"This property is always <ph id=\"ph1\">`false`</ph>.","source":"This property is always `false`."}],"pos":[43300,43333],"yaml":true},{"content":"Gets or sets the value of the bit at a specific position in the <xref href=\"System.Collections.BitArray\"></xref>.","nodes":[{"pos":[0,113],"content":"Gets or sets the value of the bit at a specific position in the <ph id=\"ph1\">&lt;xref href=\"System.Collections.BitArray\"&gt;&lt;/xref&gt;</ph>.","source":"Gets or sets the value of the bit at a specific position in the <xref href=\"System.Collections.BitArray\"></xref>."}],"pos":[44542,44656],"yaml":true},{"content":"This property provides the ability to access a specific element in the collection by using the following syntax: `myCollection[index]`.  \n  \n The C# language uses the  keyword to define the indexers instead of implementing the <xref:System.Collections.BitArray.Item%2A> property. Visual Basic implements <xref:System.Collections.BitArray.Item%2A> as a default property, which provides the same indexing functionality.  \n  \n Retrieving the value of this property is an O(1) operation; setting the property is also an O(1) operation.","nodes":[{"pos":[0,135],"content":"This property provides the ability to access a specific element in the collection by using the following syntax: <ph id=\"ph1\">`myCollection[index]`</ph>.","source":"This property provides the ability to access a specific element in the collection by using the following syntax: `myCollection[index]`."},{"pos":[142,417],"content":"The C# language uses the  keyword to define the indexers instead of implementing the <xref:System.Collections.BitArray.Item%2A> property. Visual Basic implements <xref:System.Collections.BitArray.Item%2A> as a default property, which provides the same indexing functionality.","nodes":[{"content":"The C# language uses the  keyword to define the indexers instead of implementing the <xref:System.Collections.BitArray.Item%2A> property. Visual Basic implements <xref:System.Collections.BitArray.Item%2A> as a default property, which provides the same indexing functionality.","pos":[0,275],"nodes":[{"content":"The C# language uses the  keyword to define the indexers instead of implementing the <ph id=\"ph1\">&lt;xref:System.Collections.BitArray.Item%2A&gt;</ph> property.","pos":[0,137],"source":"The C# language uses the  keyword to define the indexers instead of implementing the <xref:System.Collections.BitArray.Item%2A> property."},{"content":"Visual Basic implements <ph id=\"ph1\">&lt;xref:System.Collections.BitArray.Item%2A&gt;</ph> as a default property, which provides the same indexing functionality.","pos":[138,275],"source":" Visual Basic implements <xref:System.Collections.BitArray.Item%2A> as a default property, which provides the same indexing functionality."}]}]},{"pos":[424,531],"content":"Retrieving the value of this property is an O(1) operation; setting the property is also an O(1) operation.","nodes":[{"content":"Retrieving the value of this property is an O(1) operation; setting the property is also an O(1) operation.","pos":[0,107]}]}],"pos":[44667,45205],"yaml":true,"extradata":"MT"},{"content":"The zero-based index of the value to get or set.","nodes":[{"pos":[0,48],"content":"The zero-based index of the value to get or set.","nodes":[{"content":"The zero-based index of the value to get or set.","pos":[0,48]}]}],"pos":[45346,45395],"yaml":true},{"content":"The value of the bit at position <code>index</code>.","nodes":[{"pos":[0,52],"content":"The value of the bit at position <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">index</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The value of the bit at position <code>index</code>."}],"pos":[45453,45506],"yaml":true},{"content":"<code>index</code> is less than zero.  \n  \n -or-  \n  \n <code>index</code> is equal to or greater than <xref href=\"System.Collections.BitArray.Count\"></xref>.","nodes":[{"pos":[0,37],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is less than zero.","source":"<code>index</code> is less than zero."},{"pos":[44,48],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[55,157],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is equal to or greater than <ph id=\"ph2\">&lt;xref href=\"System.Collections.BitArray.Count\"&gt;&lt;/xref&gt;</ph>.","source":"<code>index</code> is equal to or greater than <xref href=\"System.Collections.BitArray.Count\"></xref>."}],"pos":[45680,45846],"yaml":true},{"content":"Gets or sets the number of elements in the <xref href=\"System.Collections.BitArray\"></xref>.","nodes":[{"pos":[0,92],"content":"Gets or sets the number of elements in the <ph id=\"ph1\">&lt;xref href=\"System.Collections.BitArray\"&gt;&lt;/xref&gt;</ph>.","source":"Gets or sets the number of elements in the <xref href=\"System.Collections.BitArray\"></xref>."}],"pos":[48093,48186],"yaml":true},{"content":"<xref:System.Collections.BitArray.Length%2A> and <xref:System.Collections.BitArray.Count%2A> return the same value. <xref:System.Collections.BitArray.Length%2A> can be set to a specific value, but <xref:System.Collections.BitArray.Count%2A> is read-only.  \n  \n If <xref:System.Collections.BitArray.Length%2A> is set to a value that is less than <xref:System.Collections.BitArray.Count%2A>, the <xref:System.Collections.BitArray> is truncated and the elements after the index `value` -1 are deleted.  \n  \n If <xref:System.Collections.BitArray.Length%2A> is set to a value that is greater than <xref:System.Collections.BitArray.Count%2A>, the new elements are set to `false`.  \n  \n Retrieving the value of this property is an O(1) operation. Setting this property is an O(`n`) operation.","nodes":[{"pos":[0,254],"content":"<xref:System.Collections.BitArray.Length%2A> and <xref:System.Collections.BitArray.Count%2A> return the same value. <xref:System.Collections.BitArray.Length%2A> can be set to a specific value, but <xref:System.Collections.BitArray.Count%2A> is read-only.","nodes":[{"content":"<xref:System.Collections.BitArray.Length%2A> and <xref:System.Collections.BitArray.Count%2A> return the same value. <xref:System.Collections.BitArray.Length%2A> can be set to a specific value, but <xref:System.Collections.BitArray.Count%2A> is read-only.","pos":[0,254],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.BitArray.Length%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Collections.BitArray.Count%2A&gt;</ph> return the same value.","pos":[0,115],"source":"<xref:System.Collections.BitArray.Length%2A> and <xref:System.Collections.BitArray.Count%2A> return the same value."},{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.BitArray.Length%2A&gt;</ph> can be set to a specific value, but <ph id=\"ph2\">&lt;xref:System.Collections.BitArray.Count%2A&gt;</ph> is read-only.","pos":[116,254],"source":" <xref:System.Collections.BitArray.Length%2A> can be set to a specific value, but <xref:System.Collections.BitArray.Count%2A> is read-only."}]}]},{"pos":[261,498],"content":"If <ph id=\"ph1\">&lt;xref:System.Collections.BitArray.Length%2A&gt;</ph> is set to a value that is less than <ph id=\"ph2\">&lt;xref:System.Collections.BitArray.Count%2A&gt;</ph>, the <ph id=\"ph3\">&lt;xref:System.Collections.BitArray&gt;</ph> is truncated and the elements after the index <ph id=\"ph4\">`value`</ph> -1 are deleted.","source":"If <xref:System.Collections.BitArray.Length%2A> is set to a value that is less than <xref:System.Collections.BitArray.Count%2A>, the <xref:System.Collections.BitArray> is truncated and the elements after the index `value` -1 are deleted."},{"pos":[505,673],"content":"If <ph id=\"ph1\">&lt;xref:System.Collections.BitArray.Length%2A&gt;</ph> is set to a value that is greater than <ph id=\"ph2\">&lt;xref:System.Collections.BitArray.Count%2A&gt;</ph>, the new elements are set to <ph id=\"ph3\">`false`</ph>.","source":"If <xref:System.Collections.BitArray.Length%2A> is set to a value that is greater than <xref:System.Collections.BitArray.Count%2A>, the new elements are set to `false`."},{"pos":[680,785],"content":"Retrieving the value of this property is an O(1) operation. Setting this property is an O(`n`) operation.","nodes":[{"content":"Retrieving the value of this property is an O(1) operation.","pos":[0,59]},{"content":"Setting this property is an O(<ph id=\"ph1\">`n`</ph>) operation.","pos":[60,105],"source":" Setting this property is an O(`n`) operation."}]}],"pos":[48197,48991],"yaml":true,"extradata":"MT"},{"content":"The number of elements in the <xref href=\"System.Collections.BitArray\"></xref>.","nodes":[{"pos":[0,79],"content":"The number of elements in the <ph id=\"ph1\">&lt;xref href=\"System.Collections.BitArray\"&gt;&lt;/xref&gt;</ph>.","source":"The number of elements in the <xref href=\"System.Collections.BitArray\"></xref>."}],"pos":[49102,49182],"yaml":true},{"content":"The property is set to a value that is less than zero.","nodes":[{"pos":[0,54],"content":"The property is set to a value that is less than zero.","nodes":[{"content":"The property is set to a value that is less than zero.","pos":[0,54]}]}],"pos":[49358,49413],"yaml":true},{"content":"Inverts all the bit values in the current <xref href=\"System.Collections.BitArray\"></xref>, so that elements set to `true` are changed to `false`, and elements set to `false` are changed to `true`.","nodes":[{"pos":[0,197],"content":"Inverts all the bit values in the current <ph id=\"ph1\">&lt;xref href=\"System.Collections.BitArray\"&gt;&lt;/xref&gt;</ph>, so that elements set to <ph id=\"ph2\">`true`</ph> are changed to <ph id=\"ph3\">`false`</ph>, and elements set to <ph id=\"ph4\">`false`</ph> are changed to <ph id=\"ph5\">`true`</ph>.","source":"Inverts all the bit values in the current <xref href=\"System.Collections.BitArray\"></xref>, so that elements set to `true` are changed to `false`, and elements set to `false` are changed to `true`."}],"pos":[50788,50986],"yaml":true},{"content":"This method is an O(`n`) operation, where `n` is <xref:System.Collections.BitArray.Count%2A>.","nodes":[{"pos":[0,93],"content":"This method is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is <ph id=\"ph3\">&lt;xref:System.Collections.BitArray.Count%2A&gt;</ph>.","source":"This method is an O(`n`) operation, where `n` is <xref:System.Collections.BitArray.Count%2A>."}],"pos":[50997,51091],"yaml":true,"extradata":"MT"},{"content":"The current instance with inverted bit values.","nodes":[{"pos":[0,46],"content":"The current instance with inverted bit values.","nodes":[{"content":"The current instance with inverted bit values.","pos":[0,46]}]}],"pos":[51790,51837],"yaml":true},{"content":"Performs the bitwise OR operation between the elements of the current <xref href=\"System.Collections.BitArray\"></xref> object and the corresponding elements in the specified array. The current <xref href=\"System.Collections.BitArray\"></xref> object will be modified to store the result of the bitwise OR operation.","nodes":[{"pos":[0,314],"content":"Performs the bitwise OR operation between the elements of the current <xref href=\"System.Collections.BitArray\"></xref> object and the corresponding elements in the specified array. The current <xref href=\"System.Collections.BitArray\"></xref> object will be modified to store the result of the bitwise OR operation.","nodes":[{"content":"Performs the bitwise OR operation between the elements of the current <ph id=\"ph1\">&lt;xref href=\"System.Collections.BitArray\"&gt;&lt;/xref&gt;</ph> object and the corresponding elements in the specified array.","pos":[0,180],"source":"Performs the bitwise OR operation between the elements of the current <xref href=\"System.Collections.BitArray\"></xref> object and the corresponding elements in the specified array."},{"content":"The current <ph id=\"ph1\">&lt;xref href=\"System.Collections.BitArray\"&gt;&lt;/xref&gt;</ph> object will be modified to store the result of the bitwise OR operation.","pos":[181,314],"source":" The current <xref href=\"System.Collections.BitArray\"></xref> object will be modified to store the result of the bitwise OR operation."}]}],"pos":[53379,53694],"yaml":true},{"content":"The bitwise OR operation returns `true` if one or both operands are `true`, and returns `false` if both operands are `false`.  \n  \n This method is an O(`n`) operation, where `n` is <xref:System.Collections.BitArray.Count%2A>.","nodes":[{"pos":[0,125],"content":"The bitwise OR operation returns <ph id=\"ph1\">`true`</ph> if one or both operands are <ph id=\"ph2\">`true`</ph>, and returns <ph id=\"ph3\">`false`</ph> if both operands are <ph id=\"ph4\">`false`</ph>.","source":"The bitwise OR operation returns `true` if one or both operands are `true`, and returns `false` if both operands are `false`."},{"pos":[132,225],"content":"This method is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is <ph id=\"ph3\">&lt;xref:System.Collections.BitArray.Count%2A&gt;</ph>.","source":"This method is an O(`n`) operation, where `n` is <xref:System.Collections.BitArray.Count%2A>."}],"pos":[53705,53935],"yaml":true,"extradata":"MT"},{"content":"The array with which to perform the bitwise OR operation.","nodes":[{"pos":[0,57],"content":"The array with which to perform the bitwise OR operation.","nodes":[{"content":"The array with which to perform the bitwise OR operation.","pos":[0,57]}]}],"pos":[54691,54749],"yaml":true},{"content":"An array containing the result of the bitwise OR operation, which is a reference to the current <xref href=\"System.Collections.BitArray\"></xref> object.","nodes":[{"pos":[0,152],"content":"An array containing the result of the bitwise OR operation, which is a reference to the current <ph id=\"ph1\">&lt;xref href=\"System.Collections.BitArray\"&gt;&lt;/xref&gt;</ph> object.","source":"An array containing the result of the bitwise OR operation, which is a reference to the current <xref href=\"System.Collections.BitArray\"></xref> object."}],"pos":[54820,54973],"yaml":true},{"content":"<code>value</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>value</code> is `null`."}],"pos":[55133,55163],"yaml":true},{"content":"<code>value</code> and the current <xref href=\"System.Collections.BitArray\"></xref> do not have the same number of elements.","nodes":[{"pos":[0,124],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> and the current <ph id=\"ph2\">&lt;xref href=\"System.Collections.BitArray\"&gt;&lt;/xref&gt;</ph> do not have the same number of elements.","source":"<code>value</code> and the current <xref href=\"System.Collections.BitArray\"></xref> do not have the same number of elements."}],"pos":[55257,55382],"yaml":true},{"content":"Sets the bit at a specific position in the <xref href=\"System.Collections.BitArray\"></xref> to the specified value.","nodes":[{"pos":[0,115],"content":"Sets the bit at a specific position in the <ph id=\"ph1\">&lt;xref href=\"System.Collections.BitArray\"&gt;&lt;/xref&gt;</ph> to the specified value.","source":"Sets the bit at a specific position in the <xref href=\"System.Collections.BitArray\"></xref> to the specified value."}],"pos":[57752,57868],"yaml":true},{"content":"This method is an O(1) operation.","nodes":[{"pos":[0,33],"content":"This method is an O(1) operation.","nodes":[{"content":"This method is an O(1) operation.","pos":[0,33]}]}],"pos":[57879,57913],"yaml":true,"extradata":"MT"},{"content":"The zero-based index of the bit to set.","nodes":[{"pos":[0,39],"content":"The zero-based index of the bit to set.","nodes":[{"content":"The zero-based index of the bit to set.","pos":[0,39]}]}],"pos":[58616,58656],"yaml":true},{"content":"The Boolean value to assign to the bit.","nodes":[{"pos":[0,39],"content":"The Boolean value to assign to the bit.","nodes":[{"content":"The Boolean value to assign to the bit.","pos":[0,39]}]}],"pos":[58718,58758],"yaml":true},{"content":"<code>index</code> is less than zero.  \n  \n -or-  \n  \n <code>index</code> is greater than or equal to the number of elements in the <xref href=\"System.Collections.BitArray\"></xref>.","nodes":[{"pos":[0,37],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is less than zero.","source":"<code>index</code> is less than zero."},{"pos":[44,48],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[55,181],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is greater than or equal to the number of elements in the <ph id=\"ph2\">&lt;xref href=\"System.Collections.BitArray\"&gt;&lt;/xref&gt;</ph>.","source":"<code>index</code> is greater than or equal to the number of elements in the <xref href=\"System.Collections.BitArray\"></xref>."}],"pos":[58931,59121],"yaml":true},{"content":"Sets all bits in the <xref href=\"System.Collections.BitArray\"></xref> to the specified value.","nodes":[{"pos":[0,93],"content":"Sets all bits in the <ph id=\"ph1\">&lt;xref href=\"System.Collections.BitArray\"&gt;&lt;/xref&gt;</ph> to the specified value.","source":"Sets all bits in the <xref href=\"System.Collections.BitArray\"></xref> to the specified value."}],"pos":[60583,60677],"yaml":true},{"content":"This method is an O(`n`) operation, where `n` is <xref:System.Collections.BitArray.Count%2A>.","nodes":[{"pos":[0,93],"content":"This method is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is <ph id=\"ph3\">&lt;xref:System.Collections.BitArray.Count%2A&gt;</ph>.","source":"This method is an O(`n`) operation, where `n` is <xref:System.Collections.BitArray.Count%2A>."}],"pos":[60688,60782],"yaml":true,"extradata":"MT"},{"content":"The Boolean value to assign to all bits.","nodes":[{"pos":[0,40],"content":"The Boolean value to assign to all bits.","nodes":[{"content":"The Boolean value to assign to all bits.","pos":[0,40]}]}],"pos":[61479,61520],"yaml":true},{"content":"Gets an object that can be used to synchronize access to the <xref href=\"System.Collections.BitArray\"></xref>.","nodes":[{"pos":[0,110],"content":"Gets an object that can be used to synchronize access to the <ph id=\"ph1\">&lt;xref href=\"System.Collections.BitArray\"&gt;&lt;/xref&gt;</ph>.","source":"Gets an object that can be used to synchronize access to the <xref href=\"System.Collections.BitArray\"></xref>."}],"pos":[62986,63097],"yaml":true},{"content":"Derived classes can provide their own synchronized version of the <xref:System.Collections.BitArray> using the <xref:System.Collections.BitArray.SyncRoot%2A> property. The synchronizing code must perform operations on the <xref:System.Collections.BitArray.SyncRoot%2A> of the <xref:System.Collections.BitArray>, not directly on the <xref:System.Collections.BitArray>. This ensures proper operation of collections that are derived from other objects. Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the <xref:System.Collections.BitArray> object.  \n  \n Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.","nodes":[{"pos":[0,604],"content":"Derived classes can provide their own synchronized version of the <xref:System.Collections.BitArray> using the <xref:System.Collections.BitArray.SyncRoot%2A> property. The synchronizing code must perform operations on the <xref:System.Collections.BitArray.SyncRoot%2A> of the <xref:System.Collections.BitArray>, not directly on the <xref:System.Collections.BitArray>. This ensures proper operation of collections that are derived from other objects. Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the <xref:System.Collections.BitArray> object.","nodes":[{"content":"Derived classes can provide their own synchronized version of the <xref:System.Collections.BitArray> using the <xref:System.Collections.BitArray.SyncRoot%2A> property. The synchronizing code must perform operations on the <xref:System.Collections.BitArray.SyncRoot%2A> of the <xref:System.Collections.BitArray>, not directly on the <xref:System.Collections.BitArray>. This ensures proper operation of collections that are derived from other objects. Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the <xref:System.Collections.BitArray> object.","pos":[0,604],"nodes":[{"content":"Derived classes can provide their own synchronized version of the <ph id=\"ph1\">&lt;xref:System.Collections.BitArray&gt;</ph> using the <ph id=\"ph2\">&lt;xref:System.Collections.BitArray.SyncRoot%2A&gt;</ph> property.","pos":[0,167],"source":"Derived classes can provide their own synchronized version of the <xref:System.Collections.BitArray> using the <xref:System.Collections.BitArray.SyncRoot%2A> property."},{"content":"The synchronizing code must perform operations on the <ph id=\"ph1\">&lt;xref:System.Collections.BitArray.SyncRoot%2A&gt;</ph> of the <ph id=\"ph2\">&lt;xref:System.Collections.BitArray&gt;</ph>, not directly on the <ph id=\"ph3\">&lt;xref:System.Collections.BitArray&gt;</ph>.","pos":[168,367],"source":" The synchronizing code must perform operations on the <xref:System.Collections.BitArray.SyncRoot%2A> of the <xref:System.Collections.BitArray>, not directly on the <xref:System.Collections.BitArray>."},{"content":"This ensures proper operation of collections that are derived from other objects.","pos":[368,449]},{"content":"Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the <ph id=\"ph1\">&lt;xref:System.Collections.BitArray&gt;</ph> object.","pos":[450,604],"source":" Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the <xref:System.Collections.BitArray> object."}]}]},{"pos":[611,1009],"content":"Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.","nodes":[{"content":"Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.","pos":[0,398],"nodes":[{"content":"Enumerating through a collection is intrinsically not a thread-safe procedure.","pos":[0,78]},{"content":"Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.","pos":[79,216]},{"content":"To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.","pos":[217,398]}]}]}],"pos":[63108,64122],"yaml":true,"extradata":"MT"},{"content":"An object that can be used to synchronize access to the <xref href=\"System.Collections.BitArray\"></xref>.","nodes":[{"pos":[0,105],"content":"An object that can be used to synchronize access to the <ph id=\"ph1\">&lt;xref href=\"System.Collections.BitArray\"&gt;&lt;/xref&gt;</ph>.","source":"An object that can be used to synchronize access to the <xref href=\"System.Collections.BitArray\"></xref>."}],"pos":[64881,64987],"yaml":true},{"content":"Performs the bitwise exclusive OR operation between the elements of the current <xref href=\"System.Collections.BitArray\"></xref> object against the corresponding elements in the specified array. The current <xref href=\"System.Collections.BitArray\"></xref> object will be modified to store the result of the bitwise exclusive OR operation.","nodes":[{"pos":[0,338],"content":"Performs the bitwise exclusive OR operation between the elements of the current <xref href=\"System.Collections.BitArray\"></xref> object against the corresponding elements in the specified array. The current <xref href=\"System.Collections.BitArray\"></xref> object will be modified to store the result of the bitwise exclusive OR operation.","nodes":[{"content":"Performs the bitwise exclusive OR operation between the elements of the current <ph id=\"ph1\">&lt;xref href=\"System.Collections.BitArray\"&gt;&lt;/xref&gt;</ph> object against the corresponding elements in the specified array.","pos":[0,194],"source":"Performs the bitwise exclusive OR operation between the elements of the current <xref href=\"System.Collections.BitArray\"></xref> object against the corresponding elements in the specified array."},{"content":"The current <ph id=\"ph1\">&lt;xref href=\"System.Collections.BitArray\"&gt;&lt;/xref&gt;</ph> object will be modified to store the result of the bitwise exclusive OR operation.","pos":[195,338],"source":" The current <xref href=\"System.Collections.BitArray\"></xref> object will be modified to store the result of the bitwise exclusive OR operation."}]}],"pos":[66236,66575],"yaml":true},{"content":"The bitwise exclusive OR operation returns `true` if exactly one operand is `true`, and returns `false` if both operands have the same Boolean value.  \n  \n This method is an O(`n`) operation, where `n` is <xref:System.Collections.BitArray.Count%2A>.","nodes":[{"pos":[0,149],"content":"The bitwise exclusive OR operation returns <ph id=\"ph1\">`true`</ph> if exactly one operand is <ph id=\"ph2\">`true`</ph>, and returns <ph id=\"ph3\">`false`</ph> if both operands have the same Boolean value.","source":"The bitwise exclusive OR operation returns `true` if exactly one operand is `true`, and returns `false` if both operands have the same Boolean value."},{"pos":[156,249],"content":"This method is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is <ph id=\"ph3\">&lt;xref:System.Collections.BitArray.Count%2A&gt;</ph>.","source":"This method is an O(`n`) operation, where `n` is <xref:System.Collections.BitArray.Count%2A>."}],"pos":[66586,66840],"yaml":true,"extradata":"MT"},{"content":"The array with which to perform the bitwise exclusive OR operation.","nodes":[{"pos":[0,67],"content":"The array with which to perform the bitwise exclusive OR operation.","nodes":[{"content":"The array with which to perform the bitwise exclusive OR operation.","pos":[0,67]}]}],"pos":[67604,67672],"yaml":true},{"content":"An array containing the result of the bitwise exclusive OR operation, which is a reference to the current <xref href=\"System.Collections.BitArray\"></xref> object.","nodes":[{"pos":[0,162],"content":"An array containing the result of the bitwise exclusive OR operation, which is a reference to the current <ph id=\"ph1\">&lt;xref href=\"System.Collections.BitArray\"&gt;&lt;/xref&gt;</ph> object.","source":"An array containing the result of the bitwise exclusive OR operation, which is a reference to the current <xref href=\"System.Collections.BitArray\"></xref> object."}],"pos":[67743,67906],"yaml":true},{"content":"<code>value</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>value</code> is `null`."}],"pos":[68067,68097],"yaml":true},{"content":"<code>value</code> and the current <xref href=\"System.Collections.BitArray\"></xref> do not have the same number of elements.","nodes":[{"pos":[0,124],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> and the current <ph id=\"ph2\">&lt;xref href=\"System.Collections.BitArray\"&gt;&lt;/xref&gt;</ph> do not have the same number of elements.","source":"<code>value</code> and the current <xref href=\"System.Collections.BitArray\"></xref> do not have the same number of elements."}],"pos":[68191,68316],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Collections.BitArray\n  commentId: T:System.Collections.BitArray\n  id: BitArray\n  children:\n  - System.Collections.BitArray.#ctor(System.Boolean[])\n  - System.Collections.BitArray.#ctor(System.Byte[])\n  - System.Collections.BitArray.#ctor(System.Collections.BitArray)\n  - System.Collections.BitArray.#ctor(System.Int32)\n  - System.Collections.BitArray.#ctor(System.Int32[])\n  - System.Collections.BitArray.#ctor(System.Int32,System.Boolean)\n  - System.Collections.BitArray.And(System.Collections.BitArray)\n  - System.Collections.BitArray.Clone\n  - System.Collections.BitArray.CopyTo(System.Array,System.Int32)\n  - System.Collections.BitArray.Count\n  - System.Collections.BitArray.Get(System.Int32)\n  - System.Collections.BitArray.GetEnumerator\n  - System.Collections.BitArray.IsReadOnly\n  - System.Collections.BitArray.IsSynchronized\n  - System.Collections.BitArray.Item(System.Int32)\n  - System.Collections.BitArray.LeftShift(System.Int32)\n  - System.Collections.BitArray.Length\n  - System.Collections.BitArray.Not\n  - System.Collections.BitArray.Or(System.Collections.BitArray)\n  - System.Collections.BitArray.RightShift(System.Int32)\n  - System.Collections.BitArray.Set(System.Int32,System.Boolean)\n  - System.Collections.BitArray.SetAll(System.Boolean)\n  - System.Collections.BitArray.SyncRoot\n  - System.Collections.BitArray.Xor(System.Collections.BitArray)\n  - System.Collections.BitArray.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  - System.Collections.BitArray.System#Collections#ICollection#Count\n  - System.Collections.BitArray.System#Collections#ICollection#IsSynchronized\n  - System.Collections.BitArray.System#Collections#ICollection#SyncRoot\n  langs:\n  - csharp\n  name: BitArray\n  nameWithType: BitArray\n  fullName: System.Collections.BitArray\n  type: Class\n  assemblies:\n  - System.Collections\n  - mscorlib\n  - netstandard\n  namespace: System.Collections\n  summary: Manages a compact array of bit values, which are represented as Booleans, where `true` indicates that the bit is on (1) and `false` indicates the bit is off (0).\n  remarks: \"The <xref:System.Collections.BitArray> class is a collection class in which the capacity is always the same as the count. Elements are added to a <xref:System.Collections.BitArray> by increasing the <xref:System.Collections.BitArray.Length%2A> property; elements are deleted by decreasing the <xref:System.Collections.BitArray.Length%2A> property. The size of a <xref:System.Collections.BitArray> is controlled by the client; indexing past the end of the <xref:System.Collections.BitArray> throws an <xref:System.ArgumentException>.The <xref:System.Collections.BitArray> class provides methods that are not found in other collections, including those that allow multiple elements to be modified at once using a filter, such as <xref:System.Collections.BitArray.And%2A>, <xref:System.Collections.BitArray.Or%2A>, <xref:System.Collections.BitArray.Xor%2A> , <xref:System.Collections.BitArray.Not%2A>, and <xref:System.Collections.BitArray.SetAll%2A>.  \\n  \\n The <xref:System.Collections.Specialized.BitVector32> class is a structure that provides the same functionality as <xref:System.Collections.BitArray>, but with faster performance. <xref:System.Collections.Specialized.BitVector32> is faster because it is a value type and therefore allocated on the stack, whereas <xref:System.Collections.BitArray> is a reference type and, therefore, allocated on the heap.  \\n  \\n <xref:System.Collections.Specialized.BitVector32?displayProperty=fullName> can store exactly 32 bits, whereas <xref:System.Collections.BitArray> can store a variable number of bits. <xref:System.Collections.Specialized.BitVector32> stores both bit flags and small integers, thereby making it ideal for data that is not exposed to the user. However, if the number of required bit flags is unknown, is variable, or is greater than 32, use <xref:System.Collections.BitArray> instead.  \\n  \\n <xref:System.Collections.BitArray> is in the <xref:System.Collections> namespace; <xref:System.Collections.Specialized.BitVector32> is in the <xref:System.Collections.Specialized> namespace.  \\n  \\n Elements in this collection can be accessed using an integer index.  Indexes in this collection are zero-based.\"\n  example:\n  - \"The following code example shows how to create and initialize a <xref:System.Collections.BitArray> and how to print out its values.  \\n  \\n [!code-cpp[Classic BitArray Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic BitArray Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic BitArray Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic BitArray Example/CS/source.cs#1)]\\n [!code-vb[Classic BitArray Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic BitArray Example/VB/source.vb#1)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public sealed class BitArray : ICloneable, System.Collections.ICollection\n  inheritance:\n  - System.Object\n  implements:\n  - System.Collections.ICollection\n  - System.ICloneable\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  extensionMethods:\n  - System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  - System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  - System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  - System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/BitArray.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.BitArray.#ctor(System.Boolean[])\n  commentId: M:System.Collections.BitArray.#ctor(System.Boolean[])\n  id: '#ctor(System.Boolean[])'\n  parent: System.Collections.BitArray\n  langs:\n  - csharp\n  name: BitArray(Boolean[])\n  nameWithType: BitArray.BitArray(Boolean[])\n  fullName: BitArray.BitArray(Boolean[])\n  type: Constructor\n  assemblies:\n  - System.Collections\n  - mscorlib\n  - netstandard\n  namespace: System.Collections\n  summary: Initializes a new instance of the <xref href=\"System.Collections.BitArray\"></xref> class that contains bit values copied from the specified array of Booleans.\n  remarks: This constructor is an O(`n`) operation, where `n` is the number of elements in `values`.\n  syntax:\n    content: public BitArray (bool[] values);\n    parameters:\n    - id: values\n      type: System.Boolean[]\n      description: An array of Booleans to copy.\n  overload: System.Collections.BitArray.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>values</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/BitArray.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.BitArray.#ctor(System.Byte[])\n  commentId: M:System.Collections.BitArray.#ctor(System.Byte[])\n  id: '#ctor(System.Byte[])'\n  parent: System.Collections.BitArray\n  langs:\n  - csharp\n  name: BitArray(Byte[])\n  nameWithType: BitArray.BitArray(Byte[])\n  fullName: BitArray.BitArray(Byte[])\n  type: Constructor\n  assemblies:\n  - System.Collections\n  - mscorlib\n  - netstandard\n  namespace: System.Collections\n  summary: Initializes a new instance of the <xref href=\"System.Collections.BitArray\"></xref> class that contains bit values copied from the specified array of bytes.\n  remarks: \"The first byte in the array represents bits 0 through 7, the second byte represents bits 8 through 15, and so on. The Least Significant Bit of each byte represents the lowest index value: \\\" `bytes` [0] & 1\\\" represents bit 0, \\\" `bytes` [0] & 2\\\" represents bit 1, \\\" `bytes` [0] & 4\\\" represents bit 2, and so on.  \\n  \\n This constructor is an O(`n`) operation, where `n` is the number of elements in `bytes`.\"\n  syntax:\n    content: public BitArray (byte[] bytes);\n    parameters:\n    - id: bytes\n      type: System.Byte[]\n      description: An array of bytes containing the values to copy, where each byte represents eight consecutive bits.\n  overload: System.Collections.BitArray.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>bytes</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The length of <code>bytes</code> is greater than <xref href=\"System.Int32.MaxValue\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/BitArray.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.BitArray.#ctor(System.Collections.BitArray)\n  commentId: M:System.Collections.BitArray.#ctor(System.Collections.BitArray)\n  id: '#ctor(System.Collections.BitArray)'\n  parent: System.Collections.BitArray\n  langs:\n  - csharp\n  name: BitArray(BitArray)\n  nameWithType: BitArray.BitArray(BitArray)\n  fullName: BitArray.BitArray(BitArray)\n  type: Constructor\n  assemblies:\n  - System.Collections\n  - mscorlib\n  - netstandard\n  namespace: System.Collections\n  summary: Initializes a new instance of the <xref href=\"System.Collections.BitArray\"></xref> class that contains bit values copied from the specified <xref href=\"System.Collections.BitArray\"></xref>.\n  remarks: This constructor is an O(`n`) operation, where `n` is the number of elements in `bits`.\n  syntax:\n    content: public BitArray (System.Collections.BitArray bits);\n    parameters:\n    - id: bits\n      type: System.Collections.BitArray\n      description: The <xref href=\"System.Collections.BitArray\"></xref> to copy.\n  overload: System.Collections.BitArray.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>bits</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/BitArray.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.BitArray.#ctor(System.Int32)\n  commentId: M:System.Collections.BitArray.#ctor(System.Int32)\n  id: '#ctor(System.Int32)'\n  parent: System.Collections.BitArray\n  langs:\n  - csharp\n  name: BitArray(Int32)\n  nameWithType: BitArray.BitArray(Int32)\n  fullName: BitArray.BitArray(Int32)\n  type: Constructor\n  assemblies:\n  - System.Collections\n  - mscorlib\n  - netstandard\n  namespace: System.Collections\n  summary: Initializes a new instance of the <xref href=\"System.Collections.BitArray\"></xref> class that can hold the specified number of bit values, which are initially set to `false`.\n  remarks: This constructor is an O(`n`) operation, where `n` is `length`.\n  syntax:\n    content: public BitArray (int length);\n    parameters:\n    - id: length\n      type: System.Int32\n      description: The number of bit values in the new <xref href=\"System.Collections.BitArray\"></xref>.\n  overload: System.Collections.BitArray.#ctor*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>length</code> is less than zero.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/BitArray.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.BitArray.#ctor(System.Int32[])\n  commentId: M:System.Collections.BitArray.#ctor(System.Int32[])\n  id: '#ctor(System.Int32[])'\n  parent: System.Collections.BitArray\n  langs:\n  - csharp\n  name: BitArray(Int32[])\n  nameWithType: BitArray.BitArray(Int32[])\n  fullName: BitArray.BitArray(Int32[])\n  type: Constructor\n  assemblies:\n  - System.Collections\n  - mscorlib\n  - netstandard\n  namespace: System.Collections\n  summary: Initializes a new instance of the <xref href=\"System.Collections.BitArray\"></xref> class that contains bit values copied from the specified array of 32-bit integers.\n  remarks: \"The number in the first `values` array element represents bits 0 through 31, the second number in the array represents bits 32 through 63, and so on. The Least Significant Bit of each integer represents the lowest index value: \\\" `values` [0] & 1\\\" represents bit 0, \\\" `values` [0] & 2\\\" represents bit 1, \\\" `values` [0] & 4\\\" represents bit 2, and so on.  \\n  \\n This constructor is an O(`n`) operation, where `n` is the number of elements in `values`.\"\n  syntax:\n    content: public BitArray (int[] values);\n    parameters:\n    - id: values\n      type: System.Int32[]\n      description: An array of integers containing the values to copy, where each integer represents 32 consecutive bits.\n  overload: System.Collections.BitArray.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>values</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The length of <code>values</code> is greater than <xref href=\"System.Int32.MaxValue\"></xref>\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/BitArray.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.BitArray.#ctor(System.Int32,System.Boolean)\n  commentId: M:System.Collections.BitArray.#ctor(System.Int32,System.Boolean)\n  id: '#ctor(System.Int32,System.Boolean)'\n  parent: System.Collections.BitArray\n  langs:\n  - csharp\n  name: BitArray(Int32, Boolean)\n  nameWithType: BitArray.BitArray(Int32, Boolean)\n  fullName: BitArray.BitArray(Int32, Boolean)\n  type: Constructor\n  assemblies:\n  - System.Collections\n  - mscorlib\n  - netstandard\n  namespace: System.Collections\n  summary: Initializes a new instance of the <xref href=\"System.Collections.BitArray\"></xref> class that can hold the specified number of bit values, which are initially set to the specified value.\n  remarks: This constructor is an O(`n`) operation, where `n` is `length`.\n  syntax:\n    content: public BitArray (int length, bool defaultValue);\n    parameters:\n    - id: length\n      type: System.Int32\n      description: The number of bit values in the new <xref href=\"System.Collections.BitArray\"></xref>.\n    - id: defaultValue\n      type: System.Boolean\n      description: The Boolean value to assign to each bit.\n  overload: System.Collections.BitArray.#ctor*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>length</code> is less than zero.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/BitArray.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.BitArray.And(System.Collections.BitArray)\n  commentId: M:System.Collections.BitArray.And(System.Collections.BitArray)\n  id: And(System.Collections.BitArray)\n  parent: System.Collections.BitArray\n  langs:\n  - csharp\n  name: And(BitArray)\n  nameWithType: BitArray.And(BitArray)\n  fullName: BitArray.And(BitArray)\n  type: Method\n  assemblies:\n  - System.Collections\n  - mscorlib\n  - netstandard\n  namespace: System.Collections\n  summary: Performs the bitwise AND operation between the elements of the current <xref href=\"System.Collections.BitArray\"></xref> object and the corresponding elements in the specified array. The current <xref href=\"System.Collections.BitArray\"></xref> object will be modified to store the result of the bitwise AND operation.\n  remarks: \"The bitwise AND operation returns `true` if both operands are `true`, and returns `false` if one or both operands are `false`.  \\n  \\n This method is an O(`n`) operation, where `n` is <xref:System.Collections.BitArray.Count%2A>.\"\n  example:\n  - \"The following code example shows how to perform the bitwise AND operation between two <xref:System.Collections.BitArray> objects.  \\n  \\n [!code-cpp[Classic BitArray.And Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic BitArray.And Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic BitArray.And Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic BitArray.And Example/CS/source.cs#1)]\\n [!code-vb[Classic BitArray.And Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic BitArray.And Example/VB/source.vb#1)]\"\n  syntax:\n    content: public System.Collections.BitArray And (System.Collections.BitArray value);\n    parameters:\n    - id: value\n      type: System.Collections.BitArray\n      description: The array with which to perform the bitwise AND operation.\n    return:\n      type: System.Collections.BitArray\n      description: An array containing the result of the bitwise AND operation, which is a reference to the current <xref href=\"System.Collections.BitArray\"></xref> object.\n  overload: System.Collections.BitArray.And*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>value</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>value</code> and the current <xref href=\"System.Collections.BitArray\"></xref> do not have the same number of elements.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/BitArray.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.BitArray.Clone\n  commentId: M:System.Collections.BitArray.Clone\n  id: Clone\n  parent: System.Collections.BitArray\n  langs:\n  - csharp\n  name: Clone()\n  nameWithType: BitArray.Clone()\n  fullName: BitArray.Clone()\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Collections\n  namespace: System.Collections\n  summary: Creates a shallow copy of the <xref href=\"System.Collections.BitArray\"></xref>.\n  remarks: \"A shallow copy of a collection copies only the elements of the collection, whether they are reference types or value types, but it does not copy the objects that the references refer to. The references in the new collection point to the same objects that the references in the original collection point to.  \\n  \\n In contrast, a deep copy of a collection copies the elements and everything directly or indirectly referenced by the elements.  \\n  \\n This method is an O(`n`) operation, where `n` is <xref:System.Collections.BitArray.Count%2A>.\"\n  syntax:\n    content: public object Clone ();\n    parameters: []\n    return:\n      type: System.Object\n      description: A shallow copy of the <xref href=\"System.Collections.BitArray\"></xref>.\n  overload: System.Collections.BitArray.Clone*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/BitArray.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.BitArray.CopyTo(System.Array,System.Int32)\n  commentId: M:System.Collections.BitArray.CopyTo(System.Array,System.Int32)\n  id: CopyTo(System.Array,System.Int32)\n  parent: System.Collections.BitArray\n  langs:\n  - csharp\n  name: CopyTo(Array, Int32)\n  nameWithType: BitArray.CopyTo(Array, Int32)\n  fullName: BitArray.CopyTo(Array, Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Collections\n  namespace: System.Collections\n  summary: Copies the entire <xref href=\"System.Collections.BitArray\"></xref> to a compatible one-dimensional <xref href=\"System.Array\"></xref>, starting at the specified index of the target array.\n  remarks: \"The specified array must be of a compatible type. Only `bool`, `int`, and `byte` types of arrays are supported.  \\n  \\n This method uses <xref:System.Array.Copy%2A?displayProperty=fullName> to copy the elements.  \\n  \\n This method is an O(`n`) operation, where `n` is <xref:System.Collections.BitArray.Count%2A>.\"\n  example:\n  - \"The following code example shows how to copy a <xref:System.Collections.BitArray> into a one-dimensional <xref:System.Array>.  \\n  \\n [!code-cpp[Classic BitArray.CopyTo Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic BitArray.CopyTo Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic BitArray.CopyTo Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic BitArray.CopyTo Example/CS/source.cs#1)]\\n [!code-vb[Classic BitArray.CopyTo Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic BitArray.CopyTo Example/VB/source.vb#1)]\"\n  syntax:\n    content: public void CopyTo (Array array, int index);\n    parameters:\n    - id: array\n      type: System.Array\n      description: The one-dimensional <xref href=\"System.Array\"></xref> that is the destination of the elements copied from <xref href=\"System.Collections.BitArray\"></xref>. The <xref href=\"System.Array\"></xref> must have zero-based indexing.\n    - id: index\n      type: System.Int32\n      description: The zero-based index in <code>array</code> at which copying begins.\n  overload: System.Collections.BitArray.CopyTo*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>array</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>index</code> is less than zero.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>array</code> is multidimensional.  \\n  \\n -or-  \\n  \\n The number of elements in the source <xref href=\\\"System.Collections.BitArray\\\"></xref> is greater than the available space from <code>index</code> to the end of the destination <code>array</code>.\"\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: The type of the source <xref href=\"System.Collections.BitArray\"></xref> cannot be cast automatically to the type of the destination <code>array</code>.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/BitArray.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.BitArray.Count\n  commentId: P:System.Collections.BitArray.Count\n  id: Count\n  parent: System.Collections.BitArray\n  langs:\n  - csharp\n  name: Count\n  nameWithType: BitArray.Count\n  fullName: BitArray.Count\n  type: Property\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Collections\n  namespace: System.Collections\n  summary: Gets the number of elements contained in the <xref href=\"System.Collections.BitArray\"></xref>.\n  remarks: \"<xref:System.Collections.BitArray.Length%2A> and <xref:System.Collections.BitArray.Count%2A> return the same value. <xref:System.Collections.BitArray.Length%2A> can be set to a specific value, but <xref:System.Collections.BitArray.Count%2A> is read-only.  \\n  \\n Retrieving the value of this property is an O(1) operation.\"\n  syntax:\n    content: public int Count { get; }\n    return:\n      type: System.Int32\n      description: The number of elements contained in the <xref href=\"System.Collections.BitArray\"></xref>.\n  overload: System.Collections.BitArray.Count*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/BitArray.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.BitArray.Get(System.Int32)\n  commentId: M:System.Collections.BitArray.Get(System.Int32)\n  id: Get(System.Int32)\n  parent: System.Collections.BitArray\n  langs:\n  - csharp\n  name: Get(Int32)\n  nameWithType: BitArray.Get(Int32)\n  fullName: BitArray.Get(Int32)\n  type: Method\n  assemblies:\n  - System.Collections\n  - mscorlib\n  - netstandard\n  namespace: System.Collections\n  summary: Gets the value of the bit at a specific position in the <xref href=\"System.Collections.BitArray\"></xref>.\n  remarks: This method is an O(1) operation.\n  example:\n  - \"The following code example shows how to set and get specific elements in a <xref:System.Collections.BitArray>.  \\n  \\n [!code-cpp[Classic BitArray.Get Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic BitArray.Get Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic BitArray.Get Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic BitArray.Get Example/CS/source.cs#1)]\\n [!code-vb[Classic BitArray.Get Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic BitArray.Get Example/VB/source.vb#1)]\"\n  syntax:\n    content: public bool Get (int index);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: The zero-based index of the value to get.\n    return:\n      type: System.Boolean\n      description: The value of the bit at position <code>index</code>.\n  overload: System.Collections.BitArray.Get*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>index</code> is less than zero.  \\n  \\n -or-  \\n  \\n <code>index</code> is greater than or equal to the number of elements in the <xref href=\\\"System.Collections.BitArray\\\"></xref>.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/BitArray.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.BitArray.GetEnumerator\n  commentId: M:System.Collections.BitArray.GetEnumerator\n  id: GetEnumerator\n  parent: System.Collections.BitArray\n  langs:\n  - csharp\n  name: GetEnumerator()\n  nameWithType: BitArray.GetEnumerator()\n  fullName: BitArray.GetEnumerator()\n  type: Method\n  assemblies:\n  - System.Collections\n  - mscorlib\n  - netstandard\n  namespace: System.Collections\n  summary: Returns an enumerator that iterates through the <xref href=\"System.Collections.BitArray\"></xref>.\n  remarks: \"The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators.  Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.  \\n  \\n Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.  \\n  \\n Initially, the enumerator is positioned before the first element in the collection. <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.  At this position, <xref:System.Collections.IEnumerator.Current%2A> is undefined. Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.  \\n  \\n <xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.  \\n  \\n If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`. When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`. If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined. To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.  \\n  \\n An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.  \\n  \\n The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.  \\n  \\n This method is an O(1) operation.\"\n  syntax:\n    content: public System.Collections.IEnumerator GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.IEnumerator\n      description: An <xref href=\"System.Collections.IEnumerator\"></xref> for the entire <xref href=\"System.Collections.BitArray\"></xref>.\n  overload: System.Collections.BitArray.GetEnumerator*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/BitArray.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.BitArray.IsReadOnly\n  commentId: P:System.Collections.BitArray.IsReadOnly\n  id: IsReadOnly\n  parent: System.Collections.BitArray\n  langs:\n  - csharp\n  name: IsReadOnly\n  nameWithType: BitArray.IsReadOnly\n  fullName: BitArray.IsReadOnly\n  type: Property\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Collections\n  namespace: System.Collections\n  summary: Gets a value indicating whether the <xref href=\"System.Collections.BitArray\"></xref> is read-only.\n  remarks: \"<xref:System.Collections.BitArray> implements the <xref:System.Collections.BitArray.IsReadOnly%2A> property because it is required by the <xref:System.Collections.IList?displayProperty=fullName> interface.  \\n  \\n A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.  \\n  \\n A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.  \\n  \\n This method is an O(1) operation.\"\n  syntax:\n    content: public bool IsReadOnly { get; }\n    return:\n      type: System.Boolean\n      description: This property is always `false`.\n  overload: System.Collections.BitArray.IsReadOnly*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/BitArray.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.BitArray.IsSynchronized\n  commentId: P:System.Collections.BitArray.IsSynchronized\n  id: IsSynchronized\n  parent: System.Collections.BitArray\n  langs:\n  - csharp\n  name: IsSynchronized\n  nameWithType: BitArray.IsSynchronized\n  fullName: BitArray.IsSynchronized\n  type: Property\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Collections\n  namespace: System.Collections\n  summary: Gets a value indicating whether access to the <xref href=\"System.Collections.BitArray\"></xref> is synchronized (thread safe).\n  remarks: \"<xref:System.Collections.BitArray> implements the <xref:System.Collections.BitArray.IsSynchronized%2A> property because it is required by the <xref:System.Collections.ICollection?displayProperty=fullName> interface.  \\n  \\n Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.\"\n  example:\n  - \"The following code example shows how to lock the collection using the <xref:System.Collections.BitArray.SyncRoot%2A> during the entire enumeration.  \\n  \\n [!code-cpp[Classic BitArray Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic BitArray Example/CPP/source2.cpp#2)]\\n [!code-csharp[Classic BitArray Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic BitArray Example/CS/source2.cs#2)]\\n [!code-vb[Classic BitArray Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic BitArray Example/VB/source2.vb#2)]  \\n  \\n This method is an O(1) operation.\"\n  syntax:\n    content: public bool IsSynchronized { get; }\n    return:\n      type: System.Boolean\n      description: This property is always `false`.\n  overload: System.Collections.BitArray.IsSynchronized*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/BitArray.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.BitArray.Item(System.Int32)\n  commentId: P:System.Collections.BitArray.Item(System.Int32)\n  id: Item(System.Int32)\n  parent: System.Collections.BitArray\n  langs:\n  - csharp\n  name: Item(Int32)\n  nameWithType: BitArray.Item(Int32)\n  fullName: BitArray.Item(Int32)\n  type: Property\n  assemblies:\n  - System.Collections\n  - mscorlib\n  - netstandard\n  namespace: System.Collections\n  summary: Gets or sets the value of the bit at a specific position in the <xref href=\"System.Collections.BitArray\"></xref>.\n  remarks: \"This property provides the ability to access a specific element in the collection by using the following syntax: `myCollection[index]`.  \\n  \\n The C# language uses the  keyword to define the indexers instead of implementing the <xref:System.Collections.BitArray.Item%2A> property. Visual Basic implements <xref:System.Collections.BitArray.Item%2A> as a default property, which provides the same indexing functionality.  \\n  \\n Retrieving the value of this property is an O(1) operation; setting the property is also an O(1) operation.\"\n  syntax:\n    content: public bool this[int index] { get; set; }\n    parameters:\n    - id: index\n      type: System.Int32\n      description: The zero-based index of the value to get or set.\n    return:\n      type: System.Boolean\n      description: The value of the bit at position <code>index</code>.\n  overload: System.Collections.BitArray.Item*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>index</code> is less than zero.  \\n  \\n -or-  \\n  \\n <code>index</code> is equal to or greater than <xref href=\\\"System.Collections.BitArray.Count\\\"></xref>.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/BitArray.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.BitArray.LeftShift(System.Int32)\n  commentId: M:System.Collections.BitArray.LeftShift(System.Int32)\n  id: LeftShift(System.Int32)\n  parent: System.Collections.BitArray\n  langs:\n  - csharp\n  name: LeftShift(Int32)\n  nameWithType: BitArray.LeftShift(Int32)\n  fullName: BitArray.LeftShift(Int32)\n  type: Method\n  assemblies:\n  - System.Collections\n  namespace: System.Collections\n  syntax:\n    content: public System.Collections.BitArray LeftShift (int count);\n    parameters:\n    - id: count\n      type: System.Int32\n      description: ''\n    return:\n      type: System.Collections.BitArray\n      description: ''\n  overload: System.Collections.BitArray.LeftShift*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/BitArray.xml\n- uid: System.Collections.BitArray.Length\n  commentId: P:System.Collections.BitArray.Length\n  id: Length\n  parent: System.Collections.BitArray\n  langs:\n  - csharp\n  name: Length\n  nameWithType: BitArray.Length\n  fullName: BitArray.Length\n  type: Property\n  assemblies:\n  - System.Collections\n  - mscorlib\n  - netstandard\n  namespace: System.Collections\n  summary: Gets or sets the number of elements in the <xref href=\"System.Collections.BitArray\"></xref>.\n  remarks: \"<xref:System.Collections.BitArray.Length%2A> and <xref:System.Collections.BitArray.Count%2A> return the same value. <xref:System.Collections.BitArray.Length%2A> can be set to a specific value, but <xref:System.Collections.BitArray.Count%2A> is read-only.  \\n  \\n If <xref:System.Collections.BitArray.Length%2A> is set to a value that is less than <xref:System.Collections.BitArray.Count%2A>, the <xref:System.Collections.BitArray> is truncated and the elements after the index `value` -1 are deleted.  \\n  \\n If <xref:System.Collections.BitArray.Length%2A> is set to a value that is greater than <xref:System.Collections.BitArray.Count%2A>, the new elements are set to `false`.  \\n  \\n Retrieving the value of this property is an O(1) operation. Setting this property is an O(`n`) operation.\"\n  syntax:\n    content: public int Length { get; set; }\n    return:\n      type: System.Int32\n      description: The number of elements in the <xref href=\"System.Collections.BitArray\"></xref>.\n  overload: System.Collections.BitArray.Length*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The property is set to a value that is less than zero.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/BitArray.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.BitArray.Not\n  commentId: M:System.Collections.BitArray.Not\n  id: Not\n  parent: System.Collections.BitArray\n  langs:\n  - csharp\n  name: Not()\n  nameWithType: BitArray.Not()\n  fullName: BitArray.Not()\n  type: Method\n  assemblies:\n  - System.Collections\n  - mscorlib\n  - netstandard\n  namespace: System.Collections\n  summary: Inverts all the bit values in the current <xref href=\"System.Collections.BitArray\"></xref>, so that elements set to `true` are changed to `false`, and elements set to `false` are changed to `true`.\n  remarks: This method is an O(`n`) operation, where `n` is <xref:System.Collections.BitArray.Count%2A>.\n  example:\n  - \"The following code example shows how to apply NOT to a <xref:System.Collections.BitArray>.  \\n  \\n [!code-cpp[Classic BitArray.Not Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic BitArray.Not Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic BitArray.Not Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic BitArray.Not Example/CS/source.cs#1)]\\n [!code-vb[Classic BitArray.Not Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic BitArray.Not Example/VB/source.vb#1)]\"\n  syntax:\n    content: public System.Collections.BitArray Not ();\n    parameters: []\n    return:\n      type: System.Collections.BitArray\n      description: The current instance with inverted bit values.\n  overload: System.Collections.BitArray.Not*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/BitArray.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.BitArray.Or(System.Collections.BitArray)\n  commentId: M:System.Collections.BitArray.Or(System.Collections.BitArray)\n  id: Or(System.Collections.BitArray)\n  parent: System.Collections.BitArray\n  langs:\n  - csharp\n  name: Or(BitArray)\n  nameWithType: BitArray.Or(BitArray)\n  fullName: BitArray.Or(BitArray)\n  type: Method\n  assemblies:\n  - System.Collections\n  - mscorlib\n  - netstandard\n  namespace: System.Collections\n  summary: Performs the bitwise OR operation between the elements of the current <xref href=\"System.Collections.BitArray\"></xref> object and the corresponding elements in the specified array. The current <xref href=\"System.Collections.BitArray\"></xref> object will be modified to store the result of the bitwise OR operation.\n  remarks: \"The bitwise OR operation returns `true` if one or both operands are `true`, and returns `false` if both operands are `false`.  \\n  \\n This method is an O(`n`) operation, where `n` is <xref:System.Collections.BitArray.Count%2A>.\"\n  example:\n  - \"The following code example shows how to perform the OR operation between two <xref:System.Collections.BitArray> objects.  \\n  \\n [!code-cpp[Classic BitArray.Or Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic BitArray.Or Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic BitArray.Or Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic BitArray.Or Example/CS/source.cs#1)]\\n [!code-vb[Classic BitArray.Or Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic BitArray.Or Example/VB/source.vb#1)]\"\n  syntax:\n    content: public System.Collections.BitArray Or (System.Collections.BitArray value);\n    parameters:\n    - id: value\n      type: System.Collections.BitArray\n      description: The array with which to perform the bitwise OR operation.\n    return:\n      type: System.Collections.BitArray\n      description: An array containing the result of the bitwise OR operation, which is a reference to the current <xref href=\"System.Collections.BitArray\"></xref> object.\n  overload: System.Collections.BitArray.Or*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>value</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>value</code> and the current <xref href=\"System.Collections.BitArray\"></xref> do not have the same number of elements.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/BitArray.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.BitArray.RightShift(System.Int32)\n  commentId: M:System.Collections.BitArray.RightShift(System.Int32)\n  id: RightShift(System.Int32)\n  parent: System.Collections.BitArray\n  langs:\n  - csharp\n  name: RightShift(Int32)\n  nameWithType: BitArray.RightShift(Int32)\n  fullName: BitArray.RightShift(Int32)\n  type: Method\n  assemblies:\n  - System.Collections\n  namespace: System.Collections\n  syntax:\n    content: public System.Collections.BitArray RightShift (int count);\n    parameters:\n    - id: count\n      type: System.Int32\n      description: ''\n    return:\n      type: System.Collections.BitArray\n      description: ''\n  overload: System.Collections.BitArray.RightShift*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/BitArray.xml\n- uid: System.Collections.BitArray.Set(System.Int32,System.Boolean)\n  commentId: M:System.Collections.BitArray.Set(System.Int32,System.Boolean)\n  id: Set(System.Int32,System.Boolean)\n  parent: System.Collections.BitArray\n  langs:\n  - csharp\n  name: Set(Int32, Boolean)\n  nameWithType: BitArray.Set(Int32, Boolean)\n  fullName: BitArray.Set(Int32, Boolean)\n  type: Method\n  assemblies:\n  - System.Collections\n  - mscorlib\n  - netstandard\n  namespace: System.Collections\n  summary: Sets the bit at a specific position in the <xref href=\"System.Collections.BitArray\"></xref> to the specified value.\n  remarks: This method is an O(1) operation.\n  example:\n  - \"The following code example shows how to set and get specific elements in a <xref:System.Collections.BitArray>.  \\n  \\n [!code-cpp[Classic BitArray.Get Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic BitArray.Get Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic BitArray.Get Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic BitArray.Get Example/CS/source.cs#1)]\\n [!code-vb[Classic BitArray.Get Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic BitArray.Get Example/VB/source.vb#1)]\"\n  syntax:\n    content: public void Set (int index, bool value);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: The zero-based index of the bit to set.\n    - id: value\n      type: System.Boolean\n      description: The Boolean value to assign to the bit.\n  overload: System.Collections.BitArray.Set*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>index</code> is less than zero.  \\n  \\n -or-  \\n  \\n <code>index</code> is greater than or equal to the number of elements in the <xref href=\\\"System.Collections.BitArray\\\"></xref>.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/BitArray.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.BitArray.SetAll(System.Boolean)\n  commentId: M:System.Collections.BitArray.SetAll(System.Boolean)\n  id: SetAll(System.Boolean)\n  parent: System.Collections.BitArray\n  langs:\n  - csharp\n  name: SetAll(Boolean)\n  nameWithType: BitArray.SetAll(Boolean)\n  fullName: BitArray.SetAll(Boolean)\n  type: Method\n  assemblies:\n  - System.Collections\n  - mscorlib\n  - netstandard\n  namespace: System.Collections\n  summary: Sets all bits in the <xref href=\"System.Collections.BitArray\"></xref> to the specified value.\n  remarks: This method is an O(`n`) operation, where `n` is <xref:System.Collections.BitArray.Count%2A>.\n  example:\n  - \"The following code example shows how to set and get specific elements in a <xref:System.Collections.BitArray>.  \\n  \\n [!code-cpp[Classic BitArray.Get Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic BitArray.Get Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic BitArray.Get Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic BitArray.Get Example/CS/source.cs#1)]\\n [!code-vb[Classic BitArray.Get Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic BitArray.Get Example/VB/source.vb#1)]\"\n  syntax:\n    content: public void SetAll (bool value);\n    parameters:\n    - id: value\n      type: System.Boolean\n      description: The Boolean value to assign to all bits.\n  overload: System.Collections.BitArray.SetAll*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/BitArray.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.BitArray.SyncRoot\n  commentId: P:System.Collections.BitArray.SyncRoot\n  id: SyncRoot\n  parent: System.Collections.BitArray\n  langs:\n  - csharp\n  name: SyncRoot\n  nameWithType: BitArray.SyncRoot\n  fullName: BitArray.SyncRoot\n  type: Property\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Collections\n  namespace: System.Collections\n  summary: Gets an object that can be used to synchronize access to the <xref href=\"System.Collections.BitArray\"></xref>.\n  remarks: \"Derived classes can provide their own synchronized version of the <xref:System.Collections.BitArray> using the <xref:System.Collections.BitArray.SyncRoot%2A> property. The synchronizing code must perform operations on the <xref:System.Collections.BitArray.SyncRoot%2A> of the <xref:System.Collections.BitArray>, not directly on the <xref:System.Collections.BitArray>. This ensures proper operation of collections that are derived from other objects. Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the <xref:System.Collections.BitArray> object.  \\n  \\n Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.\"\n  example:\n  - \"The following code example shows how to lock the collection using the <xref:System.Collections.BitArray.SyncRoot%2A> during the entire enumeration.  \\n  \\n [!code-cpp[Classic BitArray Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic BitArray Example/CPP/source2.cpp#2)]\\n [!code-csharp[Classic BitArray Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic BitArray Example/CS/source2.cs#2)]\\n [!code-vb[Classic BitArray Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic BitArray Example/VB/source2.vb#2)]  \\n  \\n Retrieving the value of this property is an O(1) operation.\"\n  syntax:\n    content: public object SyncRoot { get; }\n    return:\n      type: System.Object\n      description: An object that can be used to synchronize access to the <xref href=\"System.Collections.BitArray\"></xref>.\n  overload: System.Collections.BitArray.SyncRoot*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/BitArray.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.BitArray.Xor(System.Collections.BitArray)\n  commentId: M:System.Collections.BitArray.Xor(System.Collections.BitArray)\n  id: Xor(System.Collections.BitArray)\n  parent: System.Collections.BitArray\n  langs:\n  - csharp\n  name: Xor(BitArray)\n  nameWithType: BitArray.Xor(BitArray)\n  fullName: BitArray.Xor(BitArray)\n  type: Method\n  assemblies:\n  - System.Collections\n  - mscorlib\n  - netstandard\n  namespace: System.Collections\n  summary: Performs the bitwise exclusive OR operation between the elements of the current <xref href=\"System.Collections.BitArray\"></xref> object against the corresponding elements in the specified array. The current <xref href=\"System.Collections.BitArray\"></xref> object will be modified to store the result of the bitwise exclusive OR operation.\n  remarks: \"The bitwise exclusive OR operation returns `true` if exactly one operand is `true`, and returns `false` if both operands have the same Boolean value.  \\n  \\n This method is an O(`n`) operation, where `n` is <xref:System.Collections.BitArray.Count%2A>.\"\n  example:\n  - \"The following code example shows how to perform the XOR operation between two <xref:System.Collections.BitArray> objects.  \\n  \\n [!code-cpp[Classic BitArray.Xor Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic BitArray.Xor Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic BitArray.Xor Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic BitArray.Xor Example/CS/source.cs#1)]\\n [!code-vb[Classic BitArray.Xor Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic BitArray.Xor Example/VB/source.vb#1)]\"\n  syntax:\n    content: public System.Collections.BitArray Xor (System.Collections.BitArray value);\n    parameters:\n    - id: value\n      type: System.Collections.BitArray\n      description: The array with which to perform the bitwise exclusive OR operation.\n    return:\n      type: System.Collections.BitArray\n      description: An array containing the result of the bitwise exclusive OR operation, which is a reference to the current <xref href=\"System.Collections.BitArray\"></xref> object.\n  overload: System.Collections.BitArray.Xor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>value</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>value</code> and the current <xref href=\"System.Collections.BitArray\"></xref> do not have the same number of elements.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/BitArray.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.BitArray.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  commentId: M:System.Collections.BitArray.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  isEii: true\n  parent: System.Collections.BitArray\n  langs:\n  - csharp\n  name: ICollection.CopyTo(Array, Int32)\n  nameWithType: BitArray.ICollection.CopyTo(Array, Int32)\n  fullName: BitArray.ICollection.CopyTo(Array, Int32)\n  type: Method\n  assemblies:\n  - System.Collections\n  namespace: System.Collections\n  syntax:\n    content: void ICollection.CopyTo (Array array, int index);\n    parameters:\n    - id: array\n      type: System.Array\n      description: ''\n    - id: index\n      type: System.Int32\n      description: ''\n  overload: System.Collections.BitArray.System#Collections#ICollection#CopyTo*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/BitArray.xml\n- uid: System.Collections.BitArray.System#Collections#ICollection#Count\n  commentId: P:System.Collections.BitArray.System#Collections#ICollection#Count\n  id: System#Collections#ICollection#Count\n  isEii: true\n  parent: System.Collections.BitArray\n  langs:\n  - csharp\n  name: ICollection.Count\n  nameWithType: BitArray.ICollection.Count\n  fullName: BitArray.ICollection.Count\n  type: Property\n  assemblies:\n  - System.Collections\n  namespace: System.Collections\n  syntax:\n    content: int System.Collections.ICollection.Count { get; }\n    return:\n      type: System.Int32\n      description: ''\n  overload: System.Collections.BitArray.System#Collections#ICollection#Count*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/BitArray.xml\n- uid: System.Collections.BitArray.System#Collections#ICollection#IsSynchronized\n  commentId: P:System.Collections.BitArray.System#Collections#ICollection#IsSynchronized\n  id: System#Collections#ICollection#IsSynchronized\n  isEii: true\n  parent: System.Collections.BitArray\n  langs:\n  - csharp\n  name: ICollection.IsSynchronized\n  nameWithType: BitArray.ICollection.IsSynchronized\n  fullName: BitArray.ICollection.IsSynchronized\n  type: Property\n  assemblies:\n  - System.Collections\n  namespace: System.Collections\n  syntax:\n    content: bool System.Collections.ICollection.IsSynchronized { get; }\n    return:\n      type: System.Boolean\n      description: ''\n  overload: System.Collections.BitArray.System#Collections#ICollection#IsSynchronized*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/BitArray.xml\n- uid: System.Collections.BitArray.System#Collections#ICollection#SyncRoot\n  commentId: P:System.Collections.BitArray.System#Collections#ICollection#SyncRoot\n  id: System#Collections#ICollection#SyncRoot\n  isEii: true\n  parent: System.Collections.BitArray\n  langs:\n  - csharp\n  name: ICollection.SyncRoot\n  nameWithType: BitArray.ICollection.SyncRoot\n  fullName: BitArray.ICollection.SyncRoot\n  type: Property\n  assemblies:\n  - System.Collections\n  namespace: System.Collections\n  syntax:\n    content: object System.Collections.ICollection.SyncRoot { get; }\n    return:\n      type: System.Object\n      description: ''\n  overload: System.Collections.BitArray.System#Collections#ICollection#SyncRoot*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/BitArray.xml\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.ArgumentOutOfRangeException\n  parent: System\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n- uid: System.InvalidCastException\n  parent: System\n  isExternal: false\n  name: InvalidCastException\n  nameWithType: InvalidCastException\n  fullName: System.InvalidCastException\n- uid: System.Collections.BitArray.#ctor(System.Boolean[])\n  parent: System.Collections.BitArray\n  isExternal: false\n  name: BitArray(Boolean[])\n  nameWithType: BitArray.BitArray(Boolean[])\n  fullName: BitArray.BitArray(Boolean[])\n- uid: System.Boolean\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Boolean[]\n  parent: System\n  isExternal: false\n  name: Boolean[]\n  nameWithType: Boolean[]\n  fullName: System.Boolean[]\n  spec.csharp:\n  - uid: System.Boolean\n    name: Boolean\n    nameWithType: Boolean\n    fullName: System.Boolean\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Collections.BitArray.#ctor(System.Byte[])\n  parent: System.Collections.BitArray\n  isExternal: false\n  name: BitArray(Byte[])\n  nameWithType: BitArray.BitArray(Byte[])\n  fullName: BitArray.BitArray(Byte[])\n- uid: System.Byte\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte\n- uid: System.Byte[]\n  parent: System\n  isExternal: false\n  name: Byte[]\n  nameWithType: Byte[]\n  fullName: System.Byte[]\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: System.Byte\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Collections.BitArray.#ctor(System.Collections.BitArray)\n  parent: System.Collections.BitArray\n  isExternal: false\n  name: BitArray(BitArray)\n  nameWithType: BitArray.BitArray(BitArray)\n  fullName: BitArray.BitArray(BitArray)\n- uid: System.Collections.BitArray\n  parent: System.Collections\n  isExternal: false\n  name: BitArray\n  nameWithType: BitArray\n  fullName: System.Collections.BitArray\n- uid: System.Collections.BitArray.#ctor(System.Int32)\n  parent: System.Collections.BitArray\n  isExternal: false\n  name: BitArray(Int32)\n  nameWithType: BitArray.BitArray(Int32)\n  fullName: BitArray.BitArray(Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Collections.BitArray.#ctor(System.Int32[])\n  parent: System.Collections.BitArray\n  isExternal: false\n  name: BitArray(Int32[])\n  nameWithType: BitArray.BitArray(Int32[])\n  fullName: BitArray.BitArray(Int32[])\n- uid: System.Int32[]\n  parent: System\n  isExternal: false\n  name: Int32[]\n  nameWithType: Int32[]\n  fullName: System.Int32[]\n  spec.csharp:\n  - uid: System.Int32\n    name: Int32\n    nameWithType: Int32\n    fullName: System.Int32\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Collections.BitArray.#ctor(System.Int32,System.Boolean)\n  parent: System.Collections.BitArray\n  isExternal: false\n  name: BitArray(Int32, Boolean)\n  nameWithType: BitArray.BitArray(Int32, Boolean)\n  fullName: BitArray.BitArray(Int32, Boolean)\n- uid: System.Collections.BitArray.And(System.Collections.BitArray)\n  parent: System.Collections.BitArray\n  isExternal: false\n  name: And(BitArray)\n  nameWithType: BitArray.And(BitArray)\n  fullName: BitArray.And(BitArray)\n- uid: System.Collections.BitArray.Clone\n  parent: System.Collections.BitArray\n  isExternal: false\n  name: Clone()\n  nameWithType: BitArray.Clone()\n  fullName: BitArray.Clone()\n- uid: System.Collections.BitArray.CopyTo(System.Array,System.Int32)\n  parent: System.Collections.BitArray\n  isExternal: false\n  name: CopyTo(Array, Int32)\n  nameWithType: BitArray.CopyTo(Array, Int32)\n  fullName: BitArray.CopyTo(Array, Int32)\n- uid: System.Array\n  parent: System\n  isExternal: false\n  name: Array\n  nameWithType: Array\n  fullName: System.Array\n- uid: System.Collections.BitArray.Count\n  parent: System.Collections.BitArray\n  isExternal: false\n  name: Count\n  nameWithType: BitArray.Count\n  fullName: BitArray.Count\n- uid: System.Collections.BitArray.Get(System.Int32)\n  parent: System.Collections.BitArray\n  isExternal: false\n  name: Get(Int32)\n  nameWithType: BitArray.Get(Int32)\n  fullName: BitArray.Get(Int32)\n- uid: System.Collections.BitArray.GetEnumerator\n  parent: System.Collections.BitArray\n  isExternal: false\n  name: GetEnumerator()\n  nameWithType: BitArray.GetEnumerator()\n  fullName: BitArray.GetEnumerator()\n- uid: System.Collections.IEnumerator\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerator\n  nameWithType: IEnumerator\n  fullName: System.Collections.IEnumerator\n- uid: System.Collections.BitArray.IsReadOnly\n  parent: System.Collections.BitArray\n  isExternal: false\n  name: IsReadOnly\n  nameWithType: BitArray.IsReadOnly\n  fullName: BitArray.IsReadOnly\n- uid: System.Collections.BitArray.IsSynchronized\n  parent: System.Collections.BitArray\n  isExternal: false\n  name: IsSynchronized\n  nameWithType: BitArray.IsSynchronized\n  fullName: BitArray.IsSynchronized\n- uid: System.Collections.BitArray.Item(System.Int32)\n  parent: System.Collections.BitArray\n  isExternal: false\n  name: Item(Int32)\n  nameWithType: BitArray.Item(Int32)\n  fullName: BitArray.Item(Int32)\n- uid: System.Collections.BitArray.LeftShift(System.Int32)\n  parent: System.Collections.BitArray\n  isExternal: false\n  name: LeftShift(Int32)\n  nameWithType: BitArray.LeftShift(Int32)\n  fullName: BitArray.LeftShift(Int32)\n- uid: System.Collections.BitArray.Length\n  parent: System.Collections.BitArray\n  isExternal: false\n  name: Length\n  nameWithType: BitArray.Length\n  fullName: BitArray.Length\n- uid: System.Collections.BitArray.Not\n  parent: System.Collections.BitArray\n  isExternal: false\n  name: Not()\n  nameWithType: BitArray.Not()\n  fullName: BitArray.Not()\n- uid: System.Collections.BitArray.Or(System.Collections.BitArray)\n  parent: System.Collections.BitArray\n  isExternal: false\n  name: Or(BitArray)\n  nameWithType: BitArray.Or(BitArray)\n  fullName: BitArray.Or(BitArray)\n- uid: System.Collections.BitArray.RightShift(System.Int32)\n  parent: System.Collections.BitArray\n  isExternal: false\n  name: RightShift(Int32)\n  nameWithType: BitArray.RightShift(Int32)\n  fullName: BitArray.RightShift(Int32)\n- uid: System.Collections.BitArray.Set(System.Int32,System.Boolean)\n  parent: System.Collections.BitArray\n  isExternal: false\n  name: Set(Int32, Boolean)\n  nameWithType: BitArray.Set(Int32, Boolean)\n  fullName: BitArray.Set(Int32, Boolean)\n- uid: System.Collections.BitArray.SetAll(System.Boolean)\n  parent: System.Collections.BitArray\n  isExternal: false\n  name: SetAll(Boolean)\n  nameWithType: BitArray.SetAll(Boolean)\n  fullName: BitArray.SetAll(Boolean)\n- uid: System.Collections.BitArray.SyncRoot\n  parent: System.Collections.BitArray\n  isExternal: false\n  name: SyncRoot\n  nameWithType: BitArray.SyncRoot\n  fullName: BitArray.SyncRoot\n- uid: System.Collections.BitArray.Xor(System.Collections.BitArray)\n  parent: System.Collections.BitArray\n  isExternal: false\n  name: Xor(BitArray)\n  nameWithType: BitArray.Xor(BitArray)\n  fullName: BitArray.Xor(BitArray)\n- uid: System.Collections.BitArray.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  parent: System.Collections.BitArray\n  isExternal: false\n  name: ICollection.CopyTo(Array, Int32)\n  nameWithType: BitArray.ICollection.CopyTo(Array, Int32)\n  fullName: BitArray.ICollection.CopyTo(Array, Int32)\n- uid: System.Collections.BitArray.System#Collections#ICollection#Count\n  parent: System.Collections.BitArray\n  isExternal: false\n  name: ICollection.Count\n  nameWithType: BitArray.ICollection.Count\n  fullName: BitArray.ICollection.Count\n- uid: System.Collections.BitArray.System#Collections#ICollection#IsSynchronized\n  parent: System.Collections.BitArray\n  isExternal: false\n  name: ICollection.IsSynchronized\n  nameWithType: BitArray.ICollection.IsSynchronized\n  fullName: BitArray.ICollection.IsSynchronized\n- uid: System.Collections.BitArray.System#Collections#ICollection#SyncRoot\n  parent: System.Collections.BitArray\n  isExternal: false\n  name: ICollection.SyncRoot\n  nameWithType: BitArray.ICollection.SyncRoot\n  fullName: BitArray.ICollection.SyncRoot\n- uid: System.Collections.BitArray.#ctor*\n  parent: System.Collections.BitArray\n  isExternal: false\n  name: BitArray\n  nameWithType: BitArray.BitArray\n  fullName: BitArray.BitArray\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/BitArray.xml\n- uid: System.Collections.BitArray.And*\n  parent: System.Collections.BitArray\n  isExternal: false\n  name: And\n  nameWithType: BitArray.And\n  fullName: BitArray.And\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/BitArray.xml\n- uid: System.Collections.BitArray.Clone*\n  parent: System.Collections.BitArray\n  isExternal: false\n  name: Clone\n  nameWithType: BitArray.Clone\n  fullName: BitArray.Clone\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/BitArray.xml\n- uid: System.Collections.BitArray.CopyTo*\n  parent: System.Collections.BitArray\n  isExternal: false\n  name: CopyTo\n  nameWithType: BitArray.CopyTo\n  fullName: BitArray.CopyTo\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/BitArray.xml\n- uid: System.Collections.BitArray.Count*\n  parent: System.Collections.BitArray\n  isExternal: false\n  name: Count\n  nameWithType: BitArray.Count\n  fullName: BitArray.Count\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/BitArray.xml\n- uid: System.Collections.BitArray.Get*\n  parent: System.Collections.BitArray\n  isExternal: false\n  name: Get\n  nameWithType: BitArray.Get\n  fullName: BitArray.Get\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/BitArray.xml\n- uid: System.Collections.BitArray.GetEnumerator*\n  parent: System.Collections.BitArray\n  isExternal: false\n  name: GetEnumerator\n  nameWithType: BitArray.GetEnumerator\n  fullName: BitArray.GetEnumerator\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/BitArray.xml\n- uid: System.Collections.BitArray.IsReadOnly*\n  parent: System.Collections.BitArray\n  isExternal: false\n  name: IsReadOnly\n  nameWithType: BitArray.IsReadOnly\n  fullName: BitArray.IsReadOnly\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/BitArray.xml\n- uid: System.Collections.BitArray.IsSynchronized*\n  parent: System.Collections.BitArray\n  isExternal: false\n  name: IsSynchronized\n  nameWithType: BitArray.IsSynchronized\n  fullName: BitArray.IsSynchronized\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/BitArray.xml\n- uid: System.Collections.BitArray.Item*\n  parent: System.Collections.BitArray\n  isExternal: false\n  name: Item\n  nameWithType: BitArray.Item\n  fullName: BitArray.Item\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/BitArray.xml\n- uid: System.Collections.BitArray.LeftShift*\n  parent: System.Collections.BitArray\n  isExternal: false\n  name: LeftShift\n  nameWithType: BitArray.LeftShift\n  fullName: BitArray.LeftShift\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/BitArray.xml\n- uid: System.Collections.BitArray.Length*\n  parent: System.Collections.BitArray\n  isExternal: false\n  name: Length\n  nameWithType: BitArray.Length\n  fullName: BitArray.Length\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/BitArray.xml\n- uid: System.Collections.BitArray.Not*\n  parent: System.Collections.BitArray\n  isExternal: false\n  name: Not\n  nameWithType: BitArray.Not\n  fullName: BitArray.Not\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/BitArray.xml\n- uid: System.Collections.BitArray.Or*\n  parent: System.Collections.BitArray\n  isExternal: false\n  name: Or\n  nameWithType: BitArray.Or\n  fullName: BitArray.Or\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/BitArray.xml\n- uid: System.Collections.BitArray.RightShift*\n  parent: System.Collections.BitArray\n  isExternal: false\n  name: RightShift\n  nameWithType: BitArray.RightShift\n  fullName: BitArray.RightShift\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/BitArray.xml\n- uid: System.Collections.BitArray.Set*\n  parent: System.Collections.BitArray\n  isExternal: false\n  name: Set\n  nameWithType: BitArray.Set\n  fullName: BitArray.Set\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/BitArray.xml\n- uid: System.Collections.BitArray.SetAll*\n  parent: System.Collections.BitArray\n  isExternal: false\n  name: SetAll\n  nameWithType: BitArray.SetAll\n  fullName: BitArray.SetAll\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/BitArray.xml\n- uid: System.Collections.BitArray.SyncRoot*\n  parent: System.Collections.BitArray\n  isExternal: false\n  name: SyncRoot\n  nameWithType: BitArray.SyncRoot\n  fullName: BitArray.SyncRoot\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/BitArray.xml\n- uid: System.Collections.BitArray.Xor*\n  parent: System.Collections.BitArray\n  isExternal: false\n  name: Xor\n  nameWithType: BitArray.Xor\n  fullName: BitArray.Xor\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/BitArray.xml\n- uid: System.Collections.BitArray.System#Collections#ICollection#CopyTo*\n  parent: System.Collections.BitArray\n  isExternal: false\n  name: System.Collections.ICollection.CopyTo\n  nameWithType: BitArray.System.Collections.ICollection.CopyTo\n  fullName: BitArray.System.Collections.ICollection.CopyTo\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/BitArray.xml\n- uid: System.Collections.BitArray.System#Collections#ICollection#Count*\n  parent: System.Collections.BitArray\n  isExternal: false\n  name: System.Collections.ICollection.Count\n  nameWithType: BitArray.System.Collections.ICollection.Count\n  fullName: BitArray.System.Collections.ICollection.Count\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/BitArray.xml\n- uid: System.Collections.BitArray.System#Collections#ICollection#IsSynchronized*\n  parent: System.Collections.BitArray\n  isExternal: false\n  name: System.Collections.ICollection.IsSynchronized\n  nameWithType: BitArray.System.Collections.ICollection.IsSynchronized\n  fullName: BitArray.System.Collections.ICollection.IsSynchronized\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/BitArray.xml\n- uid: System.Collections.BitArray.System#Collections#ICollection#SyncRoot*\n  parent: System.Collections.BitArray\n  isExternal: false\n  name: System.Collections.ICollection.SyncRoot\n  nameWithType: BitArray.System.Collections.ICollection.SyncRoot\n  fullName: BitArray.System.Collections.ICollection.SyncRoot\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/BitArray.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Cast<TResult>(IEnumerable)\n  nameWithType: Enumerable.Cast<TResult>(IEnumerable)\n  fullName: Enumerable.Cast<TResult>(IEnumerable)\n- uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: OfType<TResult>(IEnumerable)\n  nameWithType: Enumerable.OfType<TResult>(IEnumerable)\n  fullName: Enumerable.OfType<TResult>(IEnumerable)\n- uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  parent: System.Linq.ParallelEnumerable\n  isExternal: false\n  name: AsParallel(IEnumerable)\n  nameWithType: ParallelEnumerable.AsParallel(IEnumerable)\n  fullName: ParallelEnumerable.AsParallel(IEnumerable)\n- uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: AsQueryable(IEnumerable)\n  nameWithType: Queryable.AsQueryable(IEnumerable)\n  fullName: Queryable.AsQueryable(IEnumerable)\n- uid: System.Collections.ICollection\n  parent: System.Collections\n  isExternal: false\n  name: ICollection\n  nameWithType: ICollection\n  fullName: System.Collections.ICollection\n- uid: System.ICloneable\n  parent: System\n  isExternal: false\n  name: ICloneable\n  nameWithType: ICloneable\n  fullName: System.ICloneable\n"}