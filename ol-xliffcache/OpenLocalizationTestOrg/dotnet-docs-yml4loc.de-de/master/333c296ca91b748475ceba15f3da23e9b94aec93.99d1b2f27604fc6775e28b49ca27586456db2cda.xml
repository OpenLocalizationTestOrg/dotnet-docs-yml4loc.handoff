{"nodes":[{"content":"Provides data for the <xref href=\"System.Web.UI.WebControls.LinqDataSource.Updating\"></xref> event.","nodes":[{"pos":[0,99],"content":"Provides data for the <ph id=\"ph1\">&lt;xref href=\"System.Web.UI.WebControls.LinqDataSource.Updating\"&gt;&lt;/xref&gt;</ph> event.","source":"Provides data for the <xref href=\"System.Web.UI.WebControls.LinqDataSource.Updating\"></xref> event."}],"pos":[1008,1108],"yaml":true},{"content":"The <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs> object is passed to any event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event. You can use the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs> object to examine the data before the update operation is executed in the data source. You can then validate the data, examine validation exceptions thrown by the data class, or change a value before the update. You can also cancel the update operation.  \n  \n The <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> object contains the data that was originally retrieved from the data source. The <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> object contains the data that will be saved in the data source during the update operation.  \n  \n If the object that represents the data source throws a validation exception before updating the data, the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception%2A> property contains an instance of the <xref:System.Web.UI.WebControls.LinqDataSourceValidationException> class. You can retrieve all the validation exceptions through the <xref:System.Web.UI.WebControls.LinqDataSourceValidationException.InnerExceptions%2A> property. If no validation exception is thrown, the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception%2A> property contains `null`. If you handle the validation exceptions and do not want the exception to be re-thrown, set the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.ExceptionHandled%2A> property to `true`.  \n  \n By default, the <xref:System.Web.UI.WebControls.LinqDataSource> control stores the original values from the data source in view state on the Web page, except those whose <xref:System.Data.Linq.Mapping.ColumnAttribute> attribute is marked as `UpdateCheck.Never`. LINQ to SQL automatically checks the integrity of the data before updating the data. It does this by comparing the current values in the data source with the original values stored in view state. LINQ to SQL raises an exception if the values in the data source have changed. You can perform additional data validation by creating a handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event.","nodes":[{"pos":[0,509],"content":"The <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs> object is passed to any event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event. You can use the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs> object to examine the data before the update operation is executed in the data source. You can then validate the data, examine validation exceptions thrown by the data class, or change a value before the update. You can also cancel the update operation.","nodes":[{"content":"The <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs> object is passed to any event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event. You can use the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs> object to examine the data before the update operation is executed in the data source. You can then validate the data, examine validation exceptions thrown by the data class, or change a value before the update. You can also cancel the update operation.","pos":[0,509],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs&gt;</ph> object is passed to any event handler for the <ph id=\"ph2\">&lt;xref:System.Web.UI.WebControls.LinqDataSource.Updating&gt;</ph> event.","pos":[0,176],"source":"The <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs> object is passed to any event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event."},{"content":"You can use the <ph id=\"ph1\">&lt;xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs&gt;</ph> object to examine the data before the update operation is executed in the data source.","pos":[177,342],"source":" You can use the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs> object to examine the data before the update operation is executed in the data source."},{"content":"You can then validate the data, examine validation exceptions thrown by the data class, or change a value before the update.","pos":[343,467]},{"content":"You can also cancel the update operation.","pos":[468,509]}]}]},{"pos":[516,849],"content":"The <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> object contains the data that was originally retrieved from the data source. The <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> object contains the data that will be saved in the data source during the update operation.","nodes":[{"content":"The <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> object contains the data that was originally retrieved from the data source. The <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> object contains the data that will be saved in the data source during the update operation.","pos":[0,333],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A&gt;</ph> object contains the data that was originally retrieved from the data source.","pos":[0,161],"source":"The <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> object contains the data that was originally retrieved from the data source."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A&gt;</ph> object contains the data that will be saved in the data source during the update operation.","pos":[162,333],"source":" The <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> object contains the data that will be saved in the data source during the update operation."}]}]},{"pos":[856,1645],"content":"If the object that represents the data source throws a validation exception before updating the data, the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception%2A> property contains an instance of the <xref:System.Web.UI.WebControls.LinqDataSourceValidationException> class. You can retrieve all the validation exceptions through the <xref:System.Web.UI.WebControls.LinqDataSourceValidationException.InnerExceptions%2A> property. If no validation exception is thrown, the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception%2A> property contains `null`. If you handle the validation exceptions and do not want the exception to be re-thrown, set the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.ExceptionHandled%2A> property to `true`.","nodes":[{"content":"If the object that represents the data source throws a validation exception before updating the data, the <ph id=\"ph1\">&lt;xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception%2A&gt;</ph> property contains an instance of the <ph id=\"ph2\">&lt;xref:System.Web.UI.WebControls.LinqDataSourceValidationException&gt;</ph> class.","pos":[0,292],"source":"If the object that represents the data source throws a validation exception before updating the data, the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception%2A> property contains an instance of the <xref:System.Web.UI.WebControls.LinqDataSourceValidationException> class."},{"content":"You can retrieve all the validation exceptions through the <ph id=\"ph1\">&lt;xref:System.Web.UI.WebControls.LinqDataSourceValidationException.InnerExceptions%2A&gt;</ph> property.","pos":[293,447],"source":" You can retrieve all the validation exceptions through the <xref:System.Web.UI.WebControls.LinqDataSourceValidationException.InnerExceptions%2A> property."},{"content":"If no validation exception is thrown, the <ph id=\"ph1\">&lt;xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception%2A&gt;</ph> property contains <ph id=\"ph2\">`null`</ph>.","pos":[448,591],"source":" If no validation exception is thrown, the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception%2A> property contains `null`."},{"content":"If you handle the validation exceptions and do not want the exception to be re-thrown, set the <ph id=\"ph1\">&lt;xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.ExceptionHandled%2A&gt;</ph> property to <ph id=\"ph2\">`true`</ph>.","pos":[592,789],"source":" If you handle the validation exceptions and do not want the exception to be re-thrown, set the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.ExceptionHandled%2A> property to `true`."}]},{"pos":[1652,2325],"content":"By default, the <xref:System.Web.UI.WebControls.LinqDataSource> control stores the original values from the data source in view state on the Web page, except those whose <xref:System.Data.Linq.Mapping.ColumnAttribute> attribute is marked as `UpdateCheck.Never`. LINQ to SQL automatically checks the integrity of the data before updating the data. It does this by comparing the current values in the data source with the original values stored in view state. LINQ to SQL raises an exception if the values in the data source have changed. You can perform additional data validation by creating a handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event.","nodes":[{"content":"By default, the <ph id=\"ph1\">&lt;xref:System.Web.UI.WebControls.LinqDataSource&gt;</ph> control stores the original values from the data source in view state on the Web page, except those whose <ph id=\"ph2\">&lt;xref:System.Data.Linq.Mapping.ColumnAttribute&gt;</ph> attribute is marked as <ph id=\"ph3\">`UpdateCheck.Never`</ph>.","pos":[0,261],"source":"By default, the <xref:System.Web.UI.WebControls.LinqDataSource> control stores the original values from the data source in view state on the Web page, except those whose <xref:System.Data.Linq.Mapping.ColumnAttribute> attribute is marked as `UpdateCheck.Never`."},{"content":"LINQ to SQL automatically checks the integrity of the data before updating the data.","pos":[262,346]},{"content":"It does this by comparing the current values in the data source with the original values stored in view state.","pos":[347,457]},{"content":"LINQ to SQL raises an exception if the values in the data source have changed.","pos":[458,536]},{"content":"You can perform additional data validation by creating a handler for the <ph id=\"ph1\">&lt;xref:System.Web.UI.WebControls.LinqDataSource.Updating&gt;</ph> event.","pos":[537,673],"source":" You can perform additional data validation by creating a handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event."}]}],"pos":[1119,3453],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs\"></xref> class with the specified exception.","nodes":[{"pos":[0,146],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs\"&gt;&lt;/xref&gt;</ph> class with the specified exception.","source":"Initializes a new instance of the <xref href=\"System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs\"></xref> class with the specified exception."}],"pos":[7634,7781],"yaml":true},{"content":"The exception that occurred when validating the data to update.","nodes":[{"pos":[0,63],"content":"The exception that occurred when validating the data to update.","nodes":[{"content":"The exception that occurred when validating the data to update.","pos":[0,63]}]}],"pos":[8041,8105],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs\"></xref> class.","nodes":[{"pos":[0,117],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs\"></xref> class."}],"pos":[9431,9549],"yaml":true},{"content":"An object of the type specified in the <xref href=\"System.Web.UI.WebControls.LinqDataSource.TableName\"></xref> property that contains the initial values that were retrieved from the data source.","nodes":[{"pos":[0,194],"content":"An object of the type specified in the <ph id=\"ph1\">&lt;xref href=\"System.Web.UI.WebControls.LinqDataSource.TableName\"&gt;&lt;/xref&gt;</ph> property that contains the initial values that were retrieved from the data source.","source":"An object of the type specified in the <xref href=\"System.Web.UI.WebControls.LinqDataSource.TableName\"></xref> property that contains the initial values that were retrieved from the data source."}],"pos":[9738,9933],"yaml":true},{"content":"An object of the type specified in the <xref href=\"System.Web.UI.WebControls.LinqDataSource.TableName\"></xref> property that contains the values that will be saved in the data source.","nodes":[{"pos":[0,183],"content":"An object of the type specified in the <ph id=\"ph1\">&lt;xref href=\"System.Web.UI.WebControls.LinqDataSource.TableName\"&gt;&lt;/xref&gt;</ph> property that contains the values that will be saved in the data source.","source":"An object of the type specified in the <xref href=\"System.Web.UI.WebControls.LinqDataSource.TableName\"></xref> property that contains the values that will be saved in the data source."}],"pos":[9998,10182],"yaml":true},{"content":"Gets the exception that was thrown while the data was being validated before the update operation.","nodes":[{"pos":[0,98],"content":"Gets the exception that was thrown while the data was being validated before the update operation.","nodes":[{"content":"Gets the exception that was thrown while the data was being validated before the update operation.","pos":[0,98]}]}],"pos":[11320,11419],"yaml":true},{"content":"If a validation exception is raised before the update operation is performed, the exception is stored in the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception%2A> property. In an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event, you can retrieve the exception through the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception%2A> property.","nodes":[{"pos":[0,415],"content":"If a validation exception is raised before the update operation is performed, the exception is stored in the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception%2A> property. In an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event, you can retrieve the exception through the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception%2A> property.","nodes":[{"content":"If a validation exception is raised before the update operation is performed, the exception is stored in the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception%2A> property. In an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event, you can retrieve the exception through the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception%2A> property.","pos":[0,415],"nodes":[{"content":"If a validation exception is raised before the update operation is performed, the exception is stored in the <ph id=\"ph1\">&lt;xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception%2A&gt;</ph> property.","pos":[0,194],"source":"If a validation exception is raised before the update operation is performed, the exception is stored in the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception%2A> property."},{"content":"In an event handler for the <ph id=\"ph1\">&lt;xref:System.Web.UI.WebControls.LinqDataSource.Updating&gt;</ph> event, you can retrieve the exception through the <ph id=\"ph2\">&lt;xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception%2A&gt;</ph> property.","pos":[195,415],"source":" In an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event, you can retrieve the exception through the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception%2A> property."}]}]}],"pos":[11430,11846],"yaml":true,"extradata":"MT"},{"content":"The exception, if an error occurred; otherwise, `null`.","nodes":[{"pos":[0,55],"content":"The exception, if an error occurred; otherwise, <ph id=\"ph1\">`null`</ph>.","source":"The exception, if an error occurred; otherwise, `null`."}],"pos":[13286,13342],"yaml":true},{"content":"Gets or sets a value that indicates whether the exception was handled and that it should not be thrown again.","nodes":[{"pos":[0,109],"content":"Gets or sets a value that indicates whether the exception was handled and that it should not be thrown again.","nodes":[{"content":"Gets or sets a value that indicates whether the exception was handled and that it should not be thrown again.","pos":[0,109]}]}],"pos":[14526,14636],"yaml":true},{"content":"You can create an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event to examine validation exceptions that occurred before the update operation. If you handle the exception and do not want it to be thrown again, set the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.ExceptionHandled%2A> property to `true`. If you do not set the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.ExceptionHandled%2A> property to `true`, the exception will be propagated to the next event handler in the call stack.","nodes":[{"pos":[0,559],"content":"You can create an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event to examine validation exceptions that occurred before the update operation. If you handle the exception and do not want it to be thrown again, set the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.ExceptionHandled%2A> property to `true`. If you do not set the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.ExceptionHandled%2A> property to `true`, the exception will be propagated to the next event handler in the call stack.","nodes":[{"content":"You can create an event handler for the <ph id=\"ph1\">&lt;xref:System.Web.UI.WebControls.LinqDataSource.Updating&gt;</ph> event to examine validation exceptions that occurred before the update operation.","pos":[0,178],"source":"You can create an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event to examine validation exceptions that occurred before the update operation."},{"content":"If you handle the exception and do not want it to be thrown again, set the <ph id=\"ph1\">&lt;xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.ExceptionHandled%2A&gt;</ph> property to <ph id=\"ph2\">`true`</ph>.","pos":[179,356],"source":" If you handle the exception and do not want it to be thrown again, set the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.ExceptionHandled%2A> property to `true`."},{"content":"If you do not set the <ph id=\"ph1\">&lt;xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.ExceptionHandled%2A&gt;</ph> property to <ph id=\"ph2\">`true`</ph>, the exception will be propagated to the next event handler in the call stack.","pos":[357,559],"source":" If you do not set the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.ExceptionHandled%2A> property to `true`, the exception will be propagated to the next event handler in the call stack."}]}],"pos":[14647,15207],"yaml":true,"extradata":"MT"},{"content":"`true` if the exception was handled; otherwise, `false`.","nodes":[{"pos":[0,56],"content":"<ph id=\"ph1\">`true`</ph> if the exception was handled; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the exception was handled; otherwise, `false`."}],"pos":[16559,16618],"yaml":true},{"content":"Gets the object that contains the values that will be saved in the data source.","nodes":[{"pos":[0,79],"content":"Gets the object that contains the values that will be saved in the data source.","nodes":[{"content":"Gets the object that contains the values that will be saved in the data source.","pos":[0,79]}]}],"pos":[17767,17847],"yaml":true},{"content":"Create an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event and retrieve the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> property to validate the data. You can also change the data or cancel the update operation.","nodes":[{"pos":[0,279],"content":"Create an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event and retrieve the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> property to validate the data. You can also change the data or cancel the update operation.","nodes":[{"content":"Create an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event and retrieve the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> property to validate the data. You can also change the data or cancel the update operation.","pos":[0,279],"nodes":[{"content":"Create an event handler for the <ph id=\"ph1\">&lt;xref:System.Web.UI.WebControls.LinqDataSource.Updating&gt;</ph> event and retrieve the <ph id=\"ph2\">&lt;xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A&gt;</ph> property to validate the data.","pos":[0,218],"source":"Create an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event and retrieve the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> property to validate the data."},{"content":"You can also change the data or cancel the update operation.","pos":[219,279]}]}]}],"pos":[17858,18138],"yaml":true,"extradata":"MT"},{"content":"An object of the type specified in the <xref href=\"System.Web.UI.WebControls.LinqDataSource.TableName\"></xref> property that contains the data to save.","nodes":[{"pos":[0,151],"content":"An object of the type specified in the <ph id=\"ph1\">&lt;xref href=\"System.Web.UI.WebControls.LinqDataSource.TableName\"&gt;&lt;/xref&gt;</ph> property that contains the data to save.","source":"An object of the type specified in the <xref href=\"System.Web.UI.WebControls.LinqDataSource.TableName\"></xref> property that contains the data to save."}],"pos":[19235,19387],"yaml":true},{"content":"Gets the object that contains the values that were originally retrieved from the data source.","nodes":[{"pos":[0,93],"content":"Gets the object that contains the values that were originally retrieved from the data source.","nodes":[{"content":"Gets the object that contains the values that were originally retrieved from the data source.","pos":[0,93]}]}],"pos":[20559,20653],"yaml":true},{"content":"You can use the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> property to check the original values against the current values in the data source and to cancel the update operation or take other action.  \n  \n The <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> property contains values for only the properties that are persisted in view state in the Web page. A property is persisted under these circumstances:  \n  \n-   When it is displayed in a data-bound control.  \n  \n-   When the <xref:System.Data.Linq.Mapping.ColumnAttribute.UpdateCheck%2A?displayProperty=fullName> property of the <xref:System.Data.Linq.Mapping.ColumnAttribute?displayProperty=fullName> attribute is set to `Always` or `WhenChanged`.  \n  \n If the <xref:System.Data.Linq.Mapping.ColumnAttribute.UpdateCheck%2A> property is set to `Never` and the value is not displayed in a data-bound control, the value is not stored in the Web page. In that case, it cannot be assigned to the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> property.","nodes":[{"pos":[0,237],"content":"You can use the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> property to check the original values against the current values in the data source and to cancel the update operation or take other action.","nodes":[{"content":"You can use the <ph id=\"ph1\">&lt;xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A&gt;</ph> property to check the original values against the current values in the data source and to cancel the update operation or take other action.","pos":[0,237],"source":"You can use the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> property to check the original values against the current values in the data source and to cancel the update operation or take other action."}]},{"pos":[244,478],"content":"The <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> property contains values for only the properties that are persisted in view state in the Web page. A property is persisted under these circumstances:","nodes":[{"content":"The <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> property contains values for only the properties that are persisted in view state in the Web page. A property is persisted under these circumstances:","pos":[0,234],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A&gt;</ph> property contains values for only the properties that are persisted in view state in the Web page.","pos":[0,183],"source":"The <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> property contains values for only the properties that are persisted in view state in the Web page."},{"content":"A property is persisted under these circumstances:","pos":[184,234]}]}]},{"pos":[488,533],"content":"When it is displayed in a data-bound control.","nodes":[{"content":"When it is displayed in a data-bound control.","pos":[0,45]}]},{"pos":[543,775],"content":"When the <ph id=\"ph1\">&lt;xref:System.Data.Linq.Mapping.ColumnAttribute.UpdateCheck%2A?displayProperty=fullName&gt;</ph> property of the <ph id=\"ph2\">&lt;xref:System.Data.Linq.Mapping.ColumnAttribute?displayProperty=fullName&gt;</ph> attribute is set to <ph id=\"ph3\">`Always`</ph> or <ph id=\"ph4\">`WhenChanged`</ph>.","source":"When the <xref:System.Data.Linq.Mapping.ColumnAttribute.UpdateCheck%2A?displayProperty=fullName> property of the <xref:System.Data.Linq.Mapping.ColumnAttribute?displayProperty=fullName> attribute is set to `Always` or `WhenChanged`."},{"pos":[782,1109],"content":"If the <xref:System.Data.Linq.Mapping.ColumnAttribute.UpdateCheck%2A> property is set to `Never` and the value is not displayed in a data-bound control, the value is not stored in the Web page. In that case, it cannot be assigned to the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> property.","nodes":[{"content":"If the <ph id=\"ph1\">&lt;xref:System.Data.Linq.Mapping.ColumnAttribute.UpdateCheck%2A&gt;</ph> property is set to <ph id=\"ph2\">`Never`</ph> and the value is not displayed in a data-bound control, the value is not stored in the Web page.","pos":[0,193],"source":"If the <xref:System.Data.Linq.Mapping.ColumnAttribute.UpdateCheck%2A> property is set to `Never` and the value is not displayed in a data-bound control, the value is not stored in the Web page."},{"content":"In that case, it cannot be assigned to the <ph id=\"ph1\">&lt;xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A&gt;</ph> property.","pos":[194,327],"source":" In that case, it cannot be assigned to the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> property."}]}],"pos":[20664,21784],"yaml":true,"extradata":"MT"},{"content":"An object of the type specified in the <xref href=\"System.Web.UI.WebControls.LinqDataSource.TableName\"></xref> property that contains the data that was retrieved from the data source.","nodes":[{"pos":[0,183],"content":"An object of the type specified in the <ph id=\"ph1\">&lt;xref href=\"System.Web.UI.WebControls.LinqDataSource.TableName\"&gt;&lt;/xref&gt;</ph> property that contains the data that was retrieved from the data source.","source":"An object of the type specified in the <xref href=\"System.Web.UI.WebControls.LinqDataSource.TableName\"></xref> property that contains the data that was retrieved from the data source."}],"pos":[22886,23070],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs\n  commentId: T:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs\n  id: LinqDataSourceUpdateEventArgs\n  children:\n  - System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.#ctor(System.Web.UI.WebControls.LinqDataSourceValidationException)\n  - System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.#ctor(System.Object,System.Object)\n  - System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception\n  - System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.ExceptionHandled\n  - System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject\n  - System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject\n  langs:\n  - csharp\n  name: LinqDataSourceUpdateEventArgs\n  nameWithType: LinqDataSourceUpdateEventArgs\n  fullName: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs\n  type: Class\n  assemblies:\n  - System.Web.Extensions\n  namespace: System.Web.UI.WebControls\n  summary: Provides data for the <xref href=\"System.Web.UI.WebControls.LinqDataSource.Updating\"></xref> event.\n  remarks: \"The <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs> object is passed to any event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event. You can use the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs> object to examine the data before the update operation is executed in the data source. You can then validate the data, examine validation exceptions thrown by the data class, or change a value before the update. You can also cancel the update operation.  \\n  \\n The <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> object contains the data that was originally retrieved from the data source. The <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> object contains the data that will be saved in the data source during the update operation.  \\n  \\n If the object that represents the data source throws a validation exception before updating the data, the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception%2A> property contains an instance of the <xref:System.Web.UI.WebControls.LinqDataSourceValidationException> class. You can retrieve all the validation exceptions through the <xref:System.Web.UI.WebControls.LinqDataSourceValidationException.InnerExceptions%2A> property. If no validation exception is thrown, the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception%2A> property contains `null`. If you handle the validation exceptions and do not want the exception to be re-thrown, set the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.ExceptionHandled%2A> property to `true`.  \\n  \\n By default, the <xref:System.Web.UI.WebControls.LinqDataSource> control stores the original values from the data source in view state on the Web page, except those whose <xref:System.Data.Linq.Mapping.ColumnAttribute> attribute is marked as `UpdateCheck.Never`. LINQ to SQL automatically checks the integrity of the data before updating the data. It does this by comparing the current values in the data source with the original values stored in view state. LINQ to SQL raises an exception if the values in the data source have changed. You can perform additional data validation by creating a handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event.\"\n  example:\n  - \"The following example shows an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event. The example shows how to compare properties from the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> property and the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> property to determine whether the value in the `Category` property has changed. If so, the `CategoryChanged` property of the object in the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> property is set to `true`.  \\n  \\n [!code-csharp[System.Web.UI.WebControls.LinqDataSource.Updating#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Updating/cs/Default.aspx.cs#1)]\\n [!code-vb[System.Web.UI.WebControls.LinqDataSource.Updating#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Updating/vb/Default.aspx.vb#1)]  \\n  \\n The following example shows an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event. It displays any validation exception messages by using a <xref:System.Web.UI.WebControls.Label> control.  \\n  \\n```vb  \\nProtected Sub LinqDataSource_Updating(ByVal sender As Object, _  \\n        ByVal e As LinqDataSourceUpdateEventArgs)  \\n    If (e.Exception IsNot Nothing) Then  \\n        For Each innerException As KeyValuePair(Of String, Exception) _  \\n               In e.Exception.InnerExceptions  \\n            Label1.Text &= innerException.Key & \\\": \\\" & _  \\n                innerException.Value.Message & \\\"<br />\\\"  \\n        Next  \\n        e.ExceptionHandled = True  \\n    End If  \\nEnd Sub  \\n```  \\n  \\n```csharp  \\nprotected void LinqDataSource_Updating(object sender,   \\n        LinqDataSourceUpdateEventArgs e)  \\n{  \\n    if (e.Exception != null)  \\n    {  \\n        foreach (KeyValuePair<string, Exception> innerException in   \\n             e.Exception.InnerExceptions)  \\n        {  \\n        Label1.Text += innerException.Key + \\\": \\\" +   \\n            innerException.Value.Message + \\\"<br />\\\";  \\n        }  \\n        e.ExceptionHandled = true;  \\n    }  \\n}  \\n```\"\n  syntax:\n    content: 'public class LinqDataSourceUpdateEventArgs : System.ComponentModel.CancelEventArgs'\n  inheritance:\n  - System.Object\n  - System.EventArgs\n  - System.ComponentModel.CancelEventArgs\n  implements: []\n  inheritedMembers:\n  - System.ComponentModel.CancelEventArgs.Cancel\n  - System.EventArgs.Empty\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.UI.WebControls/LinqDataSourceUpdateEventArgs.xml\n  ms.technology:\n  - dotnet-webforms\n  author: tdykstra\n  ms.author: tdykstra\n  manager: wpickett\n- uid: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.#ctor(System.Web.UI.WebControls.LinqDataSourceValidationException)\n  commentId: M:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.#ctor(System.Web.UI.WebControls.LinqDataSourceValidationException)\n  id: '#ctor(System.Web.UI.WebControls.LinqDataSourceValidationException)'\n  parent: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs\n  langs:\n  - csharp\n  name: LinqDataSourceUpdateEventArgs(LinqDataSourceValidationException)\n  nameWithType: LinqDataSourceUpdateEventArgs.LinqDataSourceUpdateEventArgs(LinqDataSourceValidationException)\n  fullName: LinqDataSourceUpdateEventArgs.LinqDataSourceUpdateEventArgs(LinqDataSourceValidationException)\n  type: Constructor\n  assemblies:\n  - System.Web.Extensions\n  namespace: System.Web.UI.WebControls\n  summary: Initializes a new instance of the <xref href=\"System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs\"></xref> class with the specified exception.\n  syntax:\n    content: public LinqDataSourceUpdateEventArgs (System.Web.UI.WebControls.LinqDataSourceValidationException exception);\n    parameters:\n    - id: exception\n      type: System.Web.UI.WebControls.LinqDataSourceValidationException\n      description: The exception that occurred when validating the data to update.\n  overload: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.#ctor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.UI.WebControls/LinqDataSourceUpdateEventArgs.xml\n  ms.technology:\n  - dotnet-webforms\n  author: tdykstra\n  ms.author: tdykstra\n  manager: wpickett\n- uid: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.#ctor(System.Object,System.Object)\n  commentId: M:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.#ctor(System.Object,System.Object)\n  id: '#ctor(System.Object,System.Object)'\n  parent: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs\n  langs:\n  - csharp\n  name: LinqDataSourceUpdateEventArgs(Object, Object)\n  nameWithType: LinqDataSourceUpdateEventArgs.LinqDataSourceUpdateEventArgs(Object, Object)\n  fullName: LinqDataSourceUpdateEventArgs.LinqDataSourceUpdateEventArgs(Object, Object)\n  type: Constructor\n  assemblies:\n  - System.Web.Extensions\n  namespace: System.Web.UI.WebControls\n  summary: Initializes a new instance of the <xref href=\"System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs\"></xref> class.\n  syntax:\n    content: public LinqDataSourceUpdateEventArgs (object originalObject, object newObject);\n    parameters:\n    - id: originalObject\n      type: System.Object\n      description: An object of the type specified in the <xref href=\"System.Web.UI.WebControls.LinqDataSource.TableName\"></xref> property that contains the initial values that were retrieved from the data source.\n    - id: newObject\n      type: System.Object\n      description: An object of the type specified in the <xref href=\"System.Web.UI.WebControls.LinqDataSource.TableName\"></xref> property that contains the values that will be saved in the data source.\n  overload: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.#ctor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.UI.WebControls/LinqDataSourceUpdateEventArgs.xml\n  ms.technology:\n  - dotnet-webforms\n  author: tdykstra\n  ms.author: tdykstra\n  manager: wpickett\n- uid: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception\n  commentId: P:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception\n  id: Exception\n  parent: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs\n  langs:\n  - csharp\n  name: Exception\n  nameWithType: LinqDataSourceUpdateEventArgs.Exception\n  fullName: LinqDataSourceUpdateEventArgs.Exception\n  type: Property\n  assemblies:\n  - System.Web.Extensions\n  namespace: System.Web.UI.WebControls\n  summary: Gets the exception that was thrown while the data was being validated before the update operation.\n  remarks: If a validation exception is raised before the update operation is performed, the exception is stored in the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception%2A> property. In an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event, you can retrieve the exception through the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception%2A> property.\n  example:\n  - \"The following example shows an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event. It displays any validation exception messages by using a <xref:System.Web.UI.WebControls.Label> control.  \\n  \\n```vb  \\nProtected Sub LinqDataSource_Updating(ByVal sender As Object, _  \\n        ByVal e As LinqDataSourceUpdateEventArgs)  \\n    If (e.Exception IsNot Nothing) Then  \\n        For Each innerException As KeyValuePair(Of String, Exception) _  \\n               In e.Exception.InnerExceptions  \\n            Label1.Text &= innerException.Key & \\\": \\\" & _  \\n                innerException.Value.Message & \\\"<br />\\\"  \\n        Next  \\n        e.ExceptionHandled = True  \\n    End If  \\nEnd Sub  \\n```  \\n  \\n```csharp  \\nprotected void LinqDataSource_Updating(object sender,   \\n        LinqDataSourceUpdateEventArgs e)  \\n{  \\n    if (e.Exception != null)  \\n    {  \\n        foreach (KeyValuePair<string, Exception> innerException in   \\n             e.Exception.InnerExceptions)  \\n        {  \\n        Label1.Text += innerException.Key + \\\": \\\" +   \\n            innerException.Value.Message + \\\"<br />\\\";  \\n        }  \\n        e.ExceptionHandled = true;  \\n    }  \\n}  \\n```\"\n  syntax:\n    content: public System.Web.UI.WebControls.LinqDataSourceValidationException Exception { get; }\n    return:\n      type: System.Web.UI.WebControls.LinqDataSourceValidationException\n      description: The exception, if an error occurred; otherwise, `null`.\n  overload: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.UI.WebControls/LinqDataSourceUpdateEventArgs.xml\n  ms.technology:\n  - dotnet-webforms\n  author: tdykstra\n  ms.author: tdykstra\n  manager: wpickett\n- uid: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.ExceptionHandled\n  commentId: P:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.ExceptionHandled\n  id: ExceptionHandled\n  parent: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs\n  langs:\n  - csharp\n  name: ExceptionHandled\n  nameWithType: LinqDataSourceUpdateEventArgs.ExceptionHandled\n  fullName: LinqDataSourceUpdateEventArgs.ExceptionHandled\n  type: Property\n  assemblies:\n  - System.Web.Extensions\n  namespace: System.Web.UI.WebControls\n  summary: Gets or sets a value that indicates whether the exception was handled and that it should not be thrown again.\n  remarks: You can create an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event to examine validation exceptions that occurred before the update operation. If you handle the exception and do not want it to be thrown again, set the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.ExceptionHandled%2A> property to `true`. If you do not set the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.ExceptionHandled%2A> property to `true`, the exception will be propagated to the next event handler in the call stack.\n  example:\n  - \"The following example shows an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event. It displays any validation exception messages by using a <xref:System.Web.UI.WebControls.Label> control.  \\n  \\n```vb  \\nProtected Sub LinqDataSource_Updating(ByVal sender As Object, _  \\n        ByVal e As LinqDataSourceUpdateEventArgs)  \\n    If (e.Exception IsNot Nothing) Then  \\n        For Each innerException As KeyValuePair(Of String, Exception) _  \\n               In e.Exception.InnerExceptions  \\n            Label1.Text &= innerException.Key & \\\": \\\" & _  \\n                innerException.Value.Message & \\\"<br />\\\"  \\n        Next  \\n        e.ExceptionHandled = True  \\n    End If  \\nEnd Sub  \\n```  \\n  \\n```csharp  \\nprotected void LinqDataSource_Updating(object sender,   \\n        LinqDataSourceUpdateEventArgs e)  \\n{  \\n    if (e.Exception != null)  \\n    {  \\n        foreach (KeyValuePair<string, Exception> innerException in   \\n             e.Exception.InnerExceptions)  \\n        {  \\n        Label1.Text += innerException.Key + \\\": \\\" +   \\n            innerException.Value.Message + \\\"<br />\\\";  \\n        }  \\n        e.ExceptionHandled = true;  \\n    }  \\n}  \\n```\"\n  syntax:\n    content: public bool ExceptionHandled { get; set; }\n    return:\n      type: System.Boolean\n      description: '`true` if the exception was handled; otherwise, `false`.'\n  overload: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.ExceptionHandled*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.UI.WebControls/LinqDataSourceUpdateEventArgs.xml\n  ms.technology:\n  - dotnet-webforms\n  author: tdykstra\n  ms.author: tdykstra\n  manager: wpickett\n- uid: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject\n  commentId: P:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject\n  id: NewObject\n  parent: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs\n  langs:\n  - csharp\n  name: NewObject\n  nameWithType: LinqDataSourceUpdateEventArgs.NewObject\n  fullName: LinqDataSourceUpdateEventArgs.NewObject\n  type: Property\n  assemblies:\n  - System.Web.Extensions\n  namespace: System.Web.UI.WebControls\n  summary: Gets the object that contains the values that will be saved in the data source.\n  remarks: Create an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event and retrieve the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> property to validate the data. You can also change the data or cancel the update operation.\n  example:\n  - \"The following example shows an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event. The example shows how to compare properties from the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> property and the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> property to determine whether the value in the `Category` property has changed. If so, the `CategoryChanged` property of the object in the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> property is set to `true`.  \\n  \\n [!code-csharp[System.Web.UI.WebControls.LinqDataSource.Updating#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Updating/cs/Default.aspx.cs#1)]\\n [!code-vb[System.Web.UI.WebControls.LinqDataSource.Updating#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Updating/vb/Default.aspx.vb#1)]\"\n  syntax:\n    content: public object NewObject { get; }\n    return:\n      type: System.Object\n      description: An object of the type specified in the <xref href=\"System.Web.UI.WebControls.LinqDataSource.TableName\"></xref> property that contains the data to save.\n  overload: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.UI.WebControls/LinqDataSourceUpdateEventArgs.xml\n  ms.technology:\n  - dotnet-webforms\n  author: tdykstra\n  ms.author: tdykstra\n  manager: wpickett\n- uid: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject\n  commentId: P:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject\n  id: OriginalObject\n  parent: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs\n  langs:\n  - csharp\n  name: OriginalObject\n  nameWithType: LinqDataSourceUpdateEventArgs.OriginalObject\n  fullName: LinqDataSourceUpdateEventArgs.OriginalObject\n  type: Property\n  assemblies:\n  - System.Web.Extensions\n  namespace: System.Web.UI.WebControls\n  summary: Gets the object that contains the values that were originally retrieved from the data source.\n  remarks: \"You can use the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> property to check the original values against the current values in the data source and to cancel the update operation or take other action.  \\n  \\n The <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> property contains values for only the properties that are persisted in view state in the Web page. A property is persisted under these circumstances:  \\n  \\n-   When it is displayed in a data-bound control.  \\n  \\n-   When the <xref:System.Data.Linq.Mapping.ColumnAttribute.UpdateCheck%2A?displayProperty=fullName> property of the <xref:System.Data.Linq.Mapping.ColumnAttribute?displayProperty=fullName> attribute is set to `Always` or `WhenChanged`.  \\n  \\n If the <xref:System.Data.Linq.Mapping.ColumnAttribute.UpdateCheck%2A> property is set to `Never` and the value is not displayed in a data-bound control, the value is not stored in the Web page. In that case, it cannot be assigned to the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> property.\"\n  example:\n  - \"The following example shows an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event. The example shows how to compare properties from the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> property and the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> property to determine whether the value in the `Category` property has changed. If so, the `CategoryChanged` property of the object in the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> property is set to `true`.  \\n  \\n [!code-csharp[System.Web.UI.WebControls.LinqDataSource.Updating#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Updating/cs/Default.aspx.cs#1)]\\n [!code-vb[System.Web.UI.WebControls.LinqDataSource.Updating#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Updating/vb/Default.aspx.vb#1)]\"\n  syntax:\n    content: public object OriginalObject { get; }\n    return:\n      type: System.Object\n      description: An object of the type specified in the <xref href=\"System.Web.UI.WebControls.LinqDataSource.TableName\"></xref> property that contains the data that was retrieved from the data source.\n  overload: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.UI.WebControls/LinqDataSourceUpdateEventArgs.xml\n  ms.technology:\n  - dotnet-webforms\n  author: tdykstra\n  ms.author: tdykstra\n  manager: wpickett\nreferences:\n- uid: System.ComponentModel.CancelEventArgs\n  parent: System.ComponentModel\n  isExternal: false\n  name: CancelEventArgs\n  nameWithType: CancelEventArgs\n  fullName: System.ComponentModel.CancelEventArgs\n- uid: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.#ctor(System.Web.UI.WebControls.LinqDataSourceValidationException)\n  parent: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs\n  isExternal: false\n  name: LinqDataSourceUpdateEventArgs(LinqDataSourceValidationException)\n  nameWithType: LinqDataSourceUpdateEventArgs.LinqDataSourceUpdateEventArgs(LinqDataSourceValidationException)\n  fullName: LinqDataSourceUpdateEventArgs.LinqDataSourceUpdateEventArgs(LinqDataSourceValidationException)\n- uid: System.Web.UI.WebControls.LinqDataSourceValidationException\n  parent: System.Web.UI.WebControls\n  isExternal: false\n  name: LinqDataSourceValidationException\n  nameWithType: LinqDataSourceValidationException\n  fullName: System.Web.UI.WebControls.LinqDataSourceValidationException\n- uid: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.#ctor(System.Object,System.Object)\n  parent: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs\n  isExternal: false\n  name: LinqDataSourceUpdateEventArgs(Object, Object)\n  nameWithType: LinqDataSourceUpdateEventArgs.LinqDataSourceUpdateEventArgs(Object, Object)\n  fullName: LinqDataSourceUpdateEventArgs.LinqDataSourceUpdateEventArgs(Object, Object)\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception\n  parent: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs\n  isExternal: false\n  name: Exception\n  nameWithType: LinqDataSourceUpdateEventArgs.Exception\n  fullName: LinqDataSourceUpdateEventArgs.Exception\n- uid: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.ExceptionHandled\n  parent: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs\n  isExternal: false\n  name: ExceptionHandled\n  nameWithType: LinqDataSourceUpdateEventArgs.ExceptionHandled\n  fullName: LinqDataSourceUpdateEventArgs.ExceptionHandled\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject\n  parent: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs\n  isExternal: false\n  name: NewObject\n  nameWithType: LinqDataSourceUpdateEventArgs.NewObject\n  fullName: LinqDataSourceUpdateEventArgs.NewObject\n- uid: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject\n  parent: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs\n  isExternal: false\n  name: OriginalObject\n  nameWithType: LinqDataSourceUpdateEventArgs.OriginalObject\n  fullName: LinqDataSourceUpdateEventArgs.OriginalObject\n- uid: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.#ctor*\n  parent: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs\n  isExternal: false\n  name: LinqDataSourceUpdateEventArgs\n  nameWithType: LinqDataSourceUpdateEventArgs.LinqDataSourceUpdateEventArgs\n  fullName: LinqDataSourceUpdateEventArgs.LinqDataSourceUpdateEventArgs\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.UI.WebControls/LinqDataSourceUpdateEventArgs.xml\n- uid: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception*\n  parent: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs\n  isExternal: false\n  name: Exception\n  nameWithType: LinqDataSourceUpdateEventArgs.Exception\n  fullName: LinqDataSourceUpdateEventArgs.Exception\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.UI.WebControls/LinqDataSourceUpdateEventArgs.xml\n- uid: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.ExceptionHandled*\n  parent: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs\n  isExternal: false\n  name: ExceptionHandled\n  nameWithType: LinqDataSourceUpdateEventArgs.ExceptionHandled\n  fullName: LinqDataSourceUpdateEventArgs.ExceptionHandled\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.UI.WebControls/LinqDataSourceUpdateEventArgs.xml\n- uid: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject*\n  parent: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs\n  isExternal: false\n  name: NewObject\n  nameWithType: LinqDataSourceUpdateEventArgs.NewObject\n  fullName: LinqDataSourceUpdateEventArgs.NewObject\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.UI.WebControls/LinqDataSourceUpdateEventArgs.xml\n- uid: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject*\n  parent: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs\n  isExternal: false\n  name: OriginalObject\n  nameWithType: LinqDataSourceUpdateEventArgs.OriginalObject\n  fullName: LinqDataSourceUpdateEventArgs.OriginalObject\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.UI.WebControls/LinqDataSourceUpdateEventArgs.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.EventArgs.Empty\n  parent: System.EventArgs\n  isExternal: false\n  name: Empty\n  nameWithType: EventArgs.Empty\n  fullName: EventArgs.Empty\n- uid: System.ComponentModel.CancelEventArgs.Cancel\n  parent: System.ComponentModel.CancelEventArgs\n  isExternal: false\n  name: Cancel\n  nameWithType: CancelEventArgs.Cancel\n  fullName: CancelEventArgs.Cancel\n"}