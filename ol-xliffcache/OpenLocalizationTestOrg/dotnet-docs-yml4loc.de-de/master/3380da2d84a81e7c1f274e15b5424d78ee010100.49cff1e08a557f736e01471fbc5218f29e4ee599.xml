{"nodes":[{"content":"Allows security actions for <xref href=\"System.Security.Permissions.SecurityPermission\"></xref> to be applied to code using declarative security. This class cannot be inherited.","nodes":[{"pos":[0,177],"content":"Allows security actions for <xref href=\"System.Security.Permissions.SecurityPermission\"></xref> to be applied to code using declarative security. This class cannot be inherited.","nodes":[{"content":"Allows security actions for <ph id=\"ph1\">&lt;xref href=\"System.Security.Permissions.SecurityPermission\"&gt;&lt;/xref&gt;</ph> to be applied to code using declarative security.","pos":[0,145],"source":"Allows security actions for <xref href=\"System.Security.Permissions.SecurityPermission\"></xref> to be applied to code using declarative security."},{"content":"This class cannot be inherited.","pos":[146,177]}]}],"pos":[1842,2020],"yaml":true},{"content":"The scope of the declaration that is allowed depends on the <xref:System.Security.Permissions.SecurityAction> that is used.  \n  \n The security information declared by a security attribute is stored in the metadata of the attribute target and is accessed by the system at run time. Security attributes are used only for declarative security. For imperative security, use the corresponding permission class.  \n  \n When you use the <xref:System.Security.Permissions.SecurityPermissionAttribute> class, follow the security action with the permission(s) that are being requested. Each security permission that can be requested, as defined in the <xref:System.Security.Permissions.SecurityPermissionFlag> enumeration, has a corresponding property in the <xref:System.Security.Permissions.SecurityPermissionAttribute> class. For example, to demand the ability to access unmanaged code, follow the demand statement with the property setting that is being requested, as follows: `SecurityPermissionAttribute(SecurityAction.Demand, UnmanagedCode=true)`.  \n  \n> [!NOTE]\n>  An exception to the equivalence between the <xref:System.Security.Permissions.SecurityPermissionFlag> enumeration and the <xref:System.Security.Permissions.SecurityPermissionAttribute> properties is that the <xref:System.Security.Permissions.SecurityPermissionFlag.AllFlags> enumeration value is represented by the <xref:System.Security.Permissions.SecurityAttribute.Unrestricted%2A> property (inherited from the <xref:System.Security.Permissions.SecurityAttribute> class). To demand all security permissions, specify `Unrestricted=true`.","nodes":[{"pos":[0,123],"content":"The scope of the declaration that is allowed depends on the <xref:System.Security.Permissions.SecurityAction> that is used.","nodes":[{"content":"The scope of the declaration that is allowed depends on the <ph id=\"ph1\">&lt;xref:System.Security.Permissions.SecurityAction&gt;</ph> that is used.","pos":[0,123],"source":"The scope of the declaration that is allowed depends on the <xref:System.Security.Permissions.SecurityAction> that is used."}]},{"pos":[130,405],"content":"The security information declared by a security attribute is stored in the metadata of the attribute target and is accessed by the system at run time. Security attributes are used only for declarative security. For imperative security, use the corresponding permission class.","nodes":[{"content":"The security information declared by a security attribute is stored in the metadata of the attribute target and is accessed by the system at run time. Security attributes are used only for declarative security. For imperative security, use the corresponding permission class.","pos":[0,275],"nodes":[{"content":"The security information declared by a security attribute is stored in the metadata of the attribute target and is accessed by the system at run time.","pos":[0,150]},{"content":"Security attributes are used only for declarative security.","pos":[151,210]},{"content":"For imperative security, use the corresponding permission class.","pos":[211,275]}]}]},{"pos":[412,1043],"content":"When you use the <xref:System.Security.Permissions.SecurityPermissionAttribute> class, follow the security action with the permission(s) that are being requested. Each security permission that can be requested, as defined in the <xref:System.Security.Permissions.SecurityPermissionFlag> enumeration, has a corresponding property in the <xref:System.Security.Permissions.SecurityPermissionAttribute> class. For example, to demand the ability to access unmanaged code, follow the demand statement with the property setting that is being requested, as follows: `SecurityPermissionAttribute(SecurityAction.Demand, UnmanagedCode=true)`.","nodes":[{"content":"When you use the <ph id=\"ph1\">&lt;xref:System.Security.Permissions.SecurityPermissionAttribute&gt;</ph> class, follow the security action with the permission(s) that are being requested.","pos":[0,162],"source":"When you use the <xref:System.Security.Permissions.SecurityPermissionAttribute> class, follow the security action with the permission(s) that are being requested."},{"content":"Each security permission that can be requested, as defined in the <ph id=\"ph1\">&lt;xref:System.Security.Permissions.SecurityPermissionFlag&gt;</ph> enumeration, has a corresponding property in the <ph id=\"ph2\">&lt;xref:System.Security.Permissions.SecurityPermissionAttribute&gt;</ph> class.","pos":[163,405],"source":" Each security permission that can be requested, as defined in the <xref:System.Security.Permissions.SecurityPermissionFlag> enumeration, has a corresponding property in the <xref:System.Security.Permissions.SecurityPermissionAttribute> class."},{"content":"For example, to demand the ability to access unmanaged code, follow the demand statement with the property setting that is being requested, as follows: <ph id=\"ph1\">`SecurityPermissionAttribute(SecurityAction.Demand, UnmanagedCode=true)`</ph>.","pos":[406,631],"source":" For example, to demand the ability to access unmanaged code, follow the demand statement with the property setting that is being requested, as follows: `SecurityPermissionAttribute(SecurityAction.Demand, UnmanagedCode=true)`."}]},{"pos":[1051,1600],"content":"[!NOTE]\n An exception to the equivalence between the <xref:System.Security.Permissions.SecurityPermissionFlag> enumeration and the <xref:System.Security.Permissions.SecurityPermissionAttribute> properties is that the <xref:System.Security.Permissions.SecurityPermissionFlag.AllFlags> enumeration value is represented by the <xref:System.Security.Permissions.SecurityAttribute.Unrestricted%2A> property (inherited from the <xref:System.Security.Permissions.SecurityAttribute> class). To demand all security permissions, specify `Unrestricted=true`.","leadings":["","> "],"nodes":[{"content":" An exception to the equivalence between the <xref:System.Security.Permissions.SecurityPermissionFlag> enumeration and the <xref:System.Security.Permissions.SecurityPermissionAttribute> properties is that the <xref:System.Security.Permissions.SecurityPermissionFlag.AllFlags> enumeration value is represented by the <xref:System.Security.Permissions.SecurityAttribute.Unrestricted%2A> property (inherited from the <xref:System.Security.Permissions.SecurityAttribute> class). To demand all security permissions, specify `Unrestricted=true`.","pos":[8,547],"nodes":[{"content":"An exception to the equivalence between the <ph id=\"ph1\">&lt;xref:System.Security.Permissions.SecurityPermissionFlag&gt;</ph> enumeration and the <ph id=\"ph2\">&lt;xref:System.Security.Permissions.SecurityPermissionAttribute&gt;</ph> properties is that the <ph id=\"ph3\">&lt;xref:System.Security.Permissions.SecurityPermissionFlag.AllFlags&gt;</ph> enumeration value is represented by the <ph id=\"ph4\">&lt;xref:System.Security.Permissions.SecurityAttribute.Unrestricted%2A&gt;</ph> property (inherited from the <ph id=\"ph5\">&lt;xref:System.Security.Permissions.SecurityAttribute&gt;</ph> class).","pos":[1,474],"source":" An exception to the equivalence between the <xref:System.Security.Permissions.SecurityPermissionFlag> enumeration and the <xref:System.Security.Permissions.SecurityPermissionAttribute> properties is that the <xref:System.Security.Permissions.SecurityPermissionFlag.AllFlags> enumeration value is represented by the <xref:System.Security.Permissions.SecurityAttribute.Unrestricted%2A> property (inherited from the <xref:System.Security.Permissions.SecurityAttribute> class)."},{"content":"To demand all security permissions, specify <ph id=\"ph1\">`Unrestricted=true`</ph>.","pos":[475,539],"source":" To demand all security permissions, specify `Unrestricted=true`."}]}]}],"pos":[2031,3641],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Security.Permissions.SecurityPermissionAttribute\"></xref> class with the specified <xref href=\"System.Security.Permissions.SecurityAction\"></xref>.","nodes":[{"pos":[0,200],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Security.Permissions.SecurityPermissionAttribute\"&gt;&lt;/xref&gt;</ph> class with the specified <ph id=\"ph2\">&lt;xref href=\"System.Security.Permissions.SecurityAction\"&gt;&lt;/xref&gt;</ph>.","source":"Initializes a new instance of the <xref href=\"System.Security.Permissions.SecurityPermissionAttribute\"></xref> class with the specified <xref href=\"System.Security.Permissions.SecurityAction\"></xref>."}],"pos":[9627,9828],"yaml":true},{"content":"One of the <xref href=\"System.Security.Permissions.SecurityAction\"></xref> values.","nodes":[{"pos":[0,82],"content":"One of the <ph id=\"ph1\">&lt;xref href=\"System.Security.Permissions.SecurityAction\"&gt;&lt;/xref&gt;</ph> values.","source":"One of the <xref href=\"System.Security.Permissions.SecurityAction\"></xref> values."}],"pos":[10046,10129],"yaml":true},{"content":"Gets or sets a value indicating whether permission to assert that all this code's callers have the requisite permission for the operation is declared.","nodes":[{"pos":[0,150],"content":"Gets or sets a value indicating whether permission to assert that all this code's callers have the requisite permission for the operation is declared.","nodes":[{"content":"Gets or sets a value indicating whether permission to assert that all this code's callers have the requisite permission for the operation is declared.","pos":[0,150]}]}],"pos":[11490,11641],"yaml":true},{"content":"`true` if permission to assert is declared; otherwise, `false`.","nodes":[{"pos":[0,63],"content":"<ph id=\"ph1\">`true`</ph> if permission to assert is declared; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if permission to assert is declared; otherwise, `false`."}],"pos":[11758,11824],"yaml":true},{"content":"Gets or sets a value that indicates whether code has permission to perform binding redirection in the application configuration file.","nodes":[{"pos":[0,133],"content":"Gets or sets a value that indicates whether code has permission to perform binding redirection in the application configuration file.","nodes":[{"content":"Gets or sets a value that indicates whether code has permission to perform binding redirection in the application configuration file.","pos":[0,133]}]}],"pos":[13231,13365],"yaml":true},{"content":"This permission allows redirection of .NET Framework assemblies that have been unified, as well as other assemblies found outside the .NET Framework.","nodes":[{"pos":[0,149],"content":"This permission allows redirection of .NET Framework assemblies that have been unified, as well as other assemblies found outside the .NET Framework.","nodes":[{"content":"This permission allows redirection of .NET Framework assemblies that have been unified, as well as other assemblies found outside the .NET Framework.","pos":[0,149]}]}],"pos":[13376,13526],"yaml":true,"extradata":"MT"},{"content":"`true` if code can perform binding redirects; otherwise, `false`.","nodes":[{"pos":[0,65],"content":"<ph id=\"ph1\">`true`</ph> if code can perform binding redirects; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if code can perform binding redirects; otherwise, `false`."}],"pos":[13650,13718],"yaml":true},{"content":"Gets or sets a value indicating whether permission to manipulate <xref href=\"System.AppDomain\"></xref> is declared.","nodes":[{"pos":[0,115],"content":"Gets or sets a value indicating whether permission to manipulate <ph id=\"ph1\">&lt;xref href=\"System.AppDomain\"&gt;&lt;/xref&gt;</ph> is declared.","source":"Gets or sets a value indicating whether permission to manipulate <xref href=\"System.AppDomain\"></xref> is declared."}],"pos":[15132,15248],"yaml":true},{"content":"`true` if permission to manipulate <xref href=\"System.AppDomain\"></xref> is declared; otherwise, `false`.","nodes":[{"pos":[0,105],"content":"<ph id=\"ph1\">`true`</ph> if permission to manipulate <ph id=\"ph2\">&lt;xref href=\"System.AppDomain\"&gt;&lt;/xref&gt;</ph> is declared; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if permission to manipulate <xref href=\"System.AppDomain\"></xref> is declared; otherwise, `false`."}],"pos":[15372,15480],"yaml":true},{"content":"Gets or sets a value indicating whether permission to alter or manipulate domain security policy is declared.","nodes":[{"pos":[0,109],"content":"Gets or sets a value indicating whether permission to alter or manipulate domain security policy is declared.","nodes":[{"content":"Gets or sets a value indicating whether permission to alter or manipulate domain security policy is declared.","pos":[0,109]}]}],"pos":[16912,17022],"yaml":true},{"content":"`true` if permission to alter or manipulate security policy in an application domain is declared; otherwise, `false`.","nodes":[{"pos":[0,117],"content":"<ph id=\"ph1\">`true`</ph> if permission to alter or manipulate security policy in an application domain is declared; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if permission to alter or manipulate security policy in an application domain is declared; otherwise, `false`."}],"pos":[17149,17269],"yaml":true},{"content":"Gets or sets a value indicating whether permission to alter or manipulate evidence is declared.","nodes":[{"pos":[0,95],"content":"Gets or sets a value indicating whether permission to alter or manipulate evidence is declared.","nodes":[{"content":"Gets or sets a value indicating whether permission to alter or manipulate evidence is declared.","pos":[0,95]}]}],"pos":[18680,18776],"yaml":true},{"content":"`true` if the ability to alter or manipulate evidence is declared; otherwise, `false`.","nodes":[{"pos":[0,86],"content":"<ph id=\"ph1\">`true`</ph> if the ability to alter or manipulate evidence is declared; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the ability to alter or manipulate evidence is declared; otherwise, `false`."}],"pos":[18899,18988],"yaml":true},{"content":"Gets or sets a value indicating whether permission to view and manipulate security policy is declared.","nodes":[{"pos":[0,102],"content":"Gets or sets a value indicating whether permission to view and manipulate security policy is declared.","nodes":[{"content":"Gets or sets a value indicating whether permission to view and manipulate security policy is declared.","pos":[0,102]}]}],"pos":[20383,20486],"yaml":true},{"content":"`true` if permission to manipulate security policy is declared; otherwise, `false`.","nodes":[{"pos":[0,83],"content":"<ph id=\"ph1\">`true`</ph> if permission to manipulate security policy is declared; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if permission to manipulate security policy is declared; otherwise, `false`."}],"pos":[20607,20693],"yaml":true},{"content":"Gets or sets a value indicating whether permission to manipulate the current principal is declared.","nodes":[{"pos":[0,99],"content":"Gets or sets a value indicating whether permission to manipulate the current principal is declared.","nodes":[{"content":"Gets or sets a value indicating whether permission to manipulate the current principal is declared.","pos":[0,99]}]}],"pos":[22104,22204],"yaml":true},{"content":"`true` if permission to manipulate the current principal is declared; otherwise, `false`.","nodes":[{"pos":[0,89],"content":"<ph id=\"ph1\">`true`</ph> if permission to manipulate the current principal is declared; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if permission to manipulate the current principal is declared; otherwise, `false`."}],"pos":[22328,22420],"yaml":true},{"content":"Gets or sets a value indicating whether permission to manipulate threads is declared.","nodes":[{"pos":[0,85],"content":"Gets or sets a value indicating whether permission to manipulate threads is declared.","nodes":[{"content":"Gets or sets a value indicating whether permission to manipulate threads is declared.","pos":[0,85]}]}],"pos":[23816,23902],"yaml":true},{"content":"For more information, see <xref:System.Threading.Thread>.","nodes":[{"pos":[0,57],"content":"For more information, see <xref:System.Threading.Thread>.","nodes":[{"content":"For more information, see <ph id=\"ph1\">&lt;xref:System.Threading.Thread&gt;</ph>.","pos":[0,57],"source":"For more information, see <xref:System.Threading.Thread>."}]}],"pos":[23913,23971],"yaml":true,"extradata":"MT"},{"content":"`true` if permission to manipulate threads is declared; otherwise, `false`.","nodes":[{"pos":[0,75],"content":"<ph id=\"ph1\">`true`</ph> if permission to manipulate threads is declared; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if permission to manipulate threads is declared; otherwise, `false`."}],"pos":[24092,24170],"yaml":true},{"content":"Creates and returns a new <xref href=\"System.Security.Permissions.SecurityPermission\"></xref>.","nodes":[{"pos":[0,94],"content":"Creates and returns a new <ph id=\"ph1\">&lt;xref href=\"System.Security.Permissions.SecurityPermission\"&gt;&lt;/xref&gt;</ph>.","source":"Creates and returns a new <xref href=\"System.Security.Permissions.SecurityPermission\"></xref>."}],"pos":[25585,25680],"yaml":true},{"content":"This method should only be called by the security system, never by application code.  \n  \n At compile time, attributes convert security declarations to a serialized form in metadata. Declarative security data in metadata is created from the permission that this method returns that corresponds to this attribute.","nodes":[{"pos":[0,84],"content":"This method should only be called by the security system, never by application code.","nodes":[{"content":"This method should only be called by the security system, never by application code.","pos":[0,84]}]},{"pos":[91,312],"content":"At compile time, attributes convert security declarations to a serialized form in metadata. Declarative security data in metadata is created from the permission that this method returns that corresponds to this attribute.","nodes":[{"content":"At compile time, attributes convert security declarations to a serialized form in metadata. Declarative security data in metadata is created from the permission that this method returns that corresponds to this attribute.","pos":[0,221],"nodes":[{"content":"At compile time, attributes convert security declarations to a serialized form in metadata.","pos":[0,91]},{"content":"Declarative security data in metadata is created from the permission that this method returns that corresponds to this attribute.","pos":[92,221]}]}]}],"pos":[25691,26008],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Security.Permissions.SecurityPermission\"></xref> that corresponds to this attribute.","nodes":[{"pos":[0,105],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Security.Permissions.SecurityPermission\"&gt;&lt;/xref&gt;</ph> that corresponds to this attribute.","source":"A <xref href=\"System.Security.Permissions.SecurityPermission\"></xref> that corresponds to this attribute."}],"pos":[26186,26292],"yaml":true},{"content":"Gets or sets a value indicating whether permission to execute code is declared.","nodes":[{"pos":[0,79],"content":"Gets or sets a value indicating whether permission to execute code is declared.","nodes":[{"content":"Gets or sets a value indicating whether permission to execute code is declared.","pos":[0,79]}]}],"pos":[27664,27744],"yaml":true},{"content":"A demand for <xref:System.Security.Permissions.SecurityPermissionFlag.Execution> permission at the assembly level is ignored. If an assembly has the right to execute, <xref:System.Security.Permissions.SecurityPermissionFlag.Execution> permission is automatically granted, and setting the <xref:System.Security.Permissions.SecurityPermissionAttribute.Execution%2A> property to either `true` or `false` has no effect.","nodes":[{"pos":[0,415],"content":"A demand for <xref:System.Security.Permissions.SecurityPermissionFlag.Execution> permission at the assembly level is ignored. If an assembly has the right to execute, <xref:System.Security.Permissions.SecurityPermissionFlag.Execution> permission is automatically granted, and setting the <xref:System.Security.Permissions.SecurityPermissionAttribute.Execution%2A> property to either `true` or `false` has no effect.","nodes":[{"content":"A demand for <ph id=\"ph1\">&lt;xref:System.Security.Permissions.SecurityPermissionFlag.Execution&gt;</ph> permission at the assembly level is ignored.","pos":[0,125],"source":"A demand for <xref:System.Security.Permissions.SecurityPermissionFlag.Execution> permission at the assembly level is ignored."},{"content":"If an assembly has the right to execute, <ph id=\"ph1\">&lt;xref:System.Security.Permissions.SecurityPermissionFlag.Execution&gt;</ph> permission is automatically granted, and setting the <ph id=\"ph2\">&lt;xref:System.Security.Permissions.SecurityPermissionAttribute.Execution%2A&gt;</ph> property to either <ph id=\"ph3\">`true`</ph> or <ph id=\"ph4\">`false`</ph> has no effect.","pos":[126,415],"source":" If an assembly has the right to execute, <xref:System.Security.Permissions.SecurityPermissionFlag.Execution> permission is automatically granted, and setting the <xref:System.Security.Permissions.SecurityPermissionAttribute.Execution%2A> property to either `true` or `false` has no effect."}]}],"pos":[27755,28171],"yaml":true,"extradata":"MT"},{"content":"`true` if permission to execute code is declared; otherwise, `false`.","nodes":[{"pos":[0,69],"content":"<ph id=\"ph1\">`true`</ph> if permission to execute code is declared; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if permission to execute code is declared; otherwise, `false`."}],"pos":[28288,28360],"yaml":true},{"content":"Gets or sets all permission flags comprising the <xref href=\"System.Security.Permissions.SecurityPermission\"></xref> permissions.","nodes":[{"pos":[0,129],"content":"Gets or sets all permission flags comprising the <ph id=\"ph1\">&lt;xref href=\"System.Security.Permissions.SecurityPermission\"&gt;&lt;/xref&gt;</ph> permissions.","source":"Gets or sets all permission flags comprising the <xref href=\"System.Security.Permissions.SecurityPermission\"></xref> permissions."}],"pos":[29701,29831],"yaml":true},{"content":"One or more of the <xref href=\"System.Security.Permissions.SecurityPermissionFlag\"></xref> values combined using a bitwise OR.","nodes":[{"pos":[0,126],"content":"One or more of the <ph id=\"ph1\">&lt;xref href=\"System.Security.Permissions.SecurityPermissionFlag\"&gt;&lt;/xref&gt;</ph> values combined using a bitwise OR.","source":"One or more of the <xref href=\"System.Security.Permissions.SecurityPermissionFlag\"></xref> values combined using a bitwise OR."}],"pos":[30026,30153],"yaml":true},{"content":"An attempt is made to set this property to an invalid value. See <xref href=\"System.Security.Permissions.SecurityPermissionFlag\"></xref> for the valid values.","nodes":[{"pos":[0,158],"content":"An attempt is made to set this property to an invalid value. See <xref href=\"System.Security.Permissions.SecurityPermissionFlag\"></xref> for the valid values.","nodes":[{"content":"An attempt is made to set this property to an invalid value.","pos":[0,60]},{"content":"See <ph id=\"ph1\">&lt;xref href=\"System.Security.Permissions.SecurityPermissionFlag\"&gt;&lt;/xref&gt;</ph> for the valid values.","pos":[61,158],"source":" See <xref href=\"System.Security.Permissions.SecurityPermissionFlag\"></xref> for the valid values."}]}],"pos":[30336,30495],"yaml":true},{"content":"Gets or sets a value indicating whether code can plug into the common language runtime infrastructure, such as adding Remoting Context Sinks, Envoy Sinks and Dynamic Sinks.","nodes":[{"pos":[0,172],"content":"Gets or sets a value indicating whether code can plug into the common language runtime infrastructure, such as adding Remoting Context Sinks, Envoy Sinks and Dynamic Sinks.","nodes":[{"content":"Gets or sets a value indicating whether code can plug into the common language runtime infrastructure, such as adding Remoting Context Sinks, Envoy Sinks and Dynamic Sinks.","pos":[0,172]}]}],"pos":[31794,31967],"yaml":true},{"content":"`true` if code can plug into the common language runtime infrastructure; otherwise, `false`.","nodes":[{"pos":[0,92],"content":"<ph id=\"ph1\">`true`</ph> if code can plug into the common language runtime infrastructure; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if code can plug into the common language runtime infrastructure; otherwise, `false`."}],"pos":[32155,32250],"yaml":true},{"content":"Gets or sets a value indicating whether code can configure remoting types and channels.","nodes":[{"pos":[0,87],"content":"Gets or sets a value indicating whether code can configure remoting types and channels.","nodes":[{"content":"Gets or sets a value indicating whether code can configure remoting types and channels.","pos":[0,87]}]}],"pos":[33767,33855],"yaml":true},{"content":"`true` if code can configure remoting types and channels; otherwise, `false`.","nodes":[{"pos":[0,77],"content":"<ph id=\"ph1\">`true`</ph> if code can configure remoting types and channels; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if code can configure remoting types and channels; otherwise, `false`."}],"pos":[33984,34064],"yaml":true},{"content":"Gets or sets a value indicating whether code can use a serialization formatter to serialize or deserialize an object.","nodes":[{"pos":[0,117],"content":"Gets or sets a value indicating whether code can use a serialization formatter to serialize or deserialize an object.","nodes":[{"content":"Gets or sets a value indicating whether code can use a serialization formatter to serialize or deserialize an object.","pos":[0,117]}]}],"pos":[35519,35637],"yaml":true},{"content":"`true` if code can use a serialization formatter to serialize or deserialize an object; otherwise, `false`.","nodes":[{"pos":[0,107],"content":"<ph id=\"ph1\">`true`</ph> if code can use a serialization formatter to serialize or deserialize an object; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if code can use a serialization formatter to serialize or deserialize an object; otherwise, `false`."}],"pos":[35767,35877],"yaml":true},{"content":"Gets or sets a value indicating whether permission to bypass code verification is declared.","nodes":[{"pos":[0,91],"content":"Gets or sets a value indicating whether permission to bypass code verification is declared.","nodes":[{"content":"Gets or sets a value indicating whether permission to bypass code verification is declared.","pos":[0,91]}]}],"pos":[37297,37389],"yaml":true},{"content":"> [!CAUTION]\n>  This is a powerful permission that should be granted only to highly trusted code.","nodes":[{"pos":[2,97],"content":"[!CAUTION]\n This is a powerful permission that should be granted only to highly trusted code.","leadings":["","> "],"nodes":[{"content":"This is a powerful permission that should be granted only to highly trusted code.","pos":[12,93]}]}],"pos":[37400,37510],"yaml":true,"extradata":"MT"},{"content":"`true` if permission to bypass code verification is declared; otherwise, `false`.","nodes":[{"pos":[0,81],"content":"<ph id=\"ph1\">`true`</ph> if permission to bypass code verification is declared; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if permission to bypass code verification is declared; otherwise, `false`."}],"pos":[37634,37718],"yaml":true},{"content":"Gets or sets a value indicating whether permission to call unmanaged code is declared.","nodes":[{"pos":[0,86],"content":"Gets or sets a value indicating whether permission to call unmanaged code is declared.","nodes":[{"content":"Gets or sets a value indicating whether permission to call unmanaged code is declared.","pos":[0,86]}]}],"pos":[39114,39201],"yaml":true},{"content":"`true` if permission to call unmanaged code is declared; otherwise, `false`.","nodes":[{"pos":[0,76],"content":"<ph id=\"ph1\">`true`</ph> if permission to call unmanaged code is declared; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if permission to call unmanaged code is declared; otherwise, `false`."}],"pos":[39322,39401],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.Permissions.SecurityPermissionAttribute\n  commentId: T:System.Security.Permissions.SecurityPermissionAttribute\n  id: SecurityPermissionAttribute\n  children:\n  - System.Security.Permissions.SecurityPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)\n  - System.Security.Permissions.SecurityPermissionAttribute.Assertion\n  - System.Security.Permissions.SecurityPermissionAttribute.BindingRedirects\n  - System.Security.Permissions.SecurityPermissionAttribute.ControlAppDomain\n  - System.Security.Permissions.SecurityPermissionAttribute.ControlDomainPolicy\n  - System.Security.Permissions.SecurityPermissionAttribute.ControlEvidence\n  - System.Security.Permissions.SecurityPermissionAttribute.ControlPolicy\n  - System.Security.Permissions.SecurityPermissionAttribute.ControlPrincipal\n  - System.Security.Permissions.SecurityPermissionAttribute.ControlThread\n  - System.Security.Permissions.SecurityPermissionAttribute.CreatePermission\n  - System.Security.Permissions.SecurityPermissionAttribute.Execution\n  - System.Security.Permissions.SecurityPermissionAttribute.Flags\n  - System.Security.Permissions.SecurityPermissionAttribute.Infrastructure\n  - System.Security.Permissions.SecurityPermissionAttribute.RemotingConfiguration\n  - System.Security.Permissions.SecurityPermissionAttribute.SerializationFormatter\n  - System.Security.Permissions.SecurityPermissionAttribute.SkipVerification\n  - System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode\n  langs:\n  - csharp\n  name: SecurityPermissionAttribute\n  nameWithType: SecurityPermissionAttribute\n  fullName: System.Security.Permissions.SecurityPermissionAttribute\n  type: Class\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.Security.Permissions\n  summary: Allows security actions for <xref href=\"System.Security.Permissions.SecurityPermission\"></xref> to be applied to code using declarative security. This class cannot be inherited.\n  remarks: \"The scope of the declaration that is allowed depends on the <xref:System.Security.Permissions.SecurityAction> that is used.  \\n  \\n The security information declared by a security attribute is stored in the metadata of the attribute target and is accessed by the system at run time. Security attributes are used only for declarative security. For imperative security, use the corresponding permission class.  \\n  \\n When you use the <xref:System.Security.Permissions.SecurityPermissionAttribute> class, follow the security action with the permission(s) that are being requested. Each security permission that can be requested, as defined in the <xref:System.Security.Permissions.SecurityPermissionFlag> enumeration, has a corresponding property in the <xref:System.Security.Permissions.SecurityPermissionAttribute> class. For example, to demand the ability to access unmanaged code, follow the demand statement with the property setting that is being requested, as follows: `SecurityPermissionAttribute(SecurityAction.Demand, UnmanagedCode=true)`.  \\n  \\n> [!NOTE]\\n>  An exception to the equivalence between the <xref:System.Security.Permissions.SecurityPermissionFlag> enumeration and the <xref:System.Security.Permissions.SecurityPermissionAttribute> properties is that the <xref:System.Security.Permissions.SecurityPermissionFlag.AllFlags> enumeration value is represented by the <xref:System.Security.Permissions.SecurityAttribute.Unrestricted%2A> property (inherited from the <xref:System.Security.Permissions.SecurityAttribute> class). To demand all security permissions, specify `Unrestricted=true`.\"\n  syntax:\n    content: >-\n      [System.AttributeUsage(System.AttributeTargets.Assembly | System.AttributeTargets.Class | System.AttributeTargets.Struct | System.AttributeTargets.Constructor | System.AttributeTargets.Method, AllowMultiple=true, Inherited=false)]\n\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public sealed class SecurityPermissionAttribute : System.Security.Permissions.CodeAccessSecurityAttribute\n  inheritance:\n  - System.Object\n  - System.Attribute\n  - System.Security.Permissions.SecurityAttribute\n  - System.Security.Permissions.CodeAccessSecurityAttribute\n  implements: []\n  inheritedMembers:\n  - System.Attribute.Equals(System.Object)\n  - System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type)\n  - System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type,System.Boolean)\n  - System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type)\n  - System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  - System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type)\n  - System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type,System.Boolean)\n  - System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type)\n  - System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type,System.Boolean)\n  - System.Attribute.GetCustomAttributes(System.Reflection.Assembly)\n  - System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Boolean)\n  - System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type)\n  - System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type,System.Boolean)\n  - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo)\n  - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)\n  - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type)\n  - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  - System.Attribute.GetCustomAttributes(System.Reflection.Module)\n  - System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Boolean)\n  - System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type)\n  - System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type,System.Boolean)\n  - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo)\n  - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Boolean)\n  - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type)\n  - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type,System.Boolean)\n  - System.Attribute.GetHashCode\n  - System.Attribute.IsDefaultAttribute\n  - System.Attribute.IsDefined(System.Reflection.Assembly,System.Type)\n  - System.Attribute.IsDefined(System.Reflection.Assembly,System.Type,System.Boolean)\n  - System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type)\n  - System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  - System.Attribute.IsDefined(System.Reflection.Module,System.Type)\n  - System.Attribute.IsDefined(System.Reflection.Module,System.Type,System.Boolean)\n  - System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type)\n  - System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type,System.Boolean)\n  - System.Attribute.Match(System.Object)\n  - System.Attribute.System#Runtime#InteropServices#_Attribute#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  - System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  - System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfoCount(System.UInt32@)\n  - System.Attribute.System#Runtime#InteropServices#_Attribute#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  - System.Attribute.TypeId\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  - System.Security.Permissions.SecurityAttribute.Action\n  - System.Security.Permissions.SecurityAttribute.Unrestricted\n  attributes:\n  - type: System.AttributeUsageAttribute\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/SecurityPermissionAttribute.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Permissions.SecurityPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)\n  commentId: M:System.Security.Permissions.SecurityPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)\n  id: '#ctor(System.Security.Permissions.SecurityAction)'\n  parent: System.Security.Permissions.SecurityPermissionAttribute\n  langs:\n  - csharp\n  name: SecurityPermissionAttribute(SecurityAction)\n  nameWithType: SecurityPermissionAttribute.SecurityPermissionAttribute(SecurityAction)\n  fullName: SecurityPermissionAttribute.SecurityPermissionAttribute(SecurityAction)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.Security.Permissions\n  summary: Initializes a new instance of the <xref href=\"System.Security.Permissions.SecurityPermissionAttribute\"></xref> class with the specified <xref href=\"System.Security.Permissions.SecurityAction\"></xref>.\n  syntax:\n    content: public SecurityPermissionAttribute (System.Security.Permissions.SecurityAction action);\n    parameters:\n    - id: action\n      type: System.Security.Permissions.SecurityAction\n      description: One of the <xref href=\"System.Security.Permissions.SecurityAction\"></xref> values.\n  overload: System.Security.Permissions.SecurityPermissionAttribute.#ctor*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/SecurityPermissionAttribute.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Permissions.SecurityPermissionAttribute.Assertion\n  commentId: P:System.Security.Permissions.SecurityPermissionAttribute.Assertion\n  id: Assertion\n  parent: System.Security.Permissions.SecurityPermissionAttribute\n  langs:\n  - csharp\n  name: Assertion\n  nameWithType: SecurityPermissionAttribute.Assertion\n  fullName: SecurityPermissionAttribute.Assertion\n  type: Property\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.Security.Permissions\n  summary: Gets or sets a value indicating whether permission to assert that all this code's callers have the requisite permission for the operation is declared.\n  syntax:\n    content: public bool Assertion { get; set; }\n    return:\n      type: System.Boolean\n      description: '`true` if permission to assert is declared; otherwise, `false`.'\n  overload: System.Security.Permissions.SecurityPermissionAttribute.Assertion*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/SecurityPermissionAttribute.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Permissions.SecurityPermissionAttribute.BindingRedirects\n  commentId: P:System.Security.Permissions.SecurityPermissionAttribute.BindingRedirects\n  id: BindingRedirects\n  parent: System.Security.Permissions.SecurityPermissionAttribute\n  langs:\n  - csharp\n  name: BindingRedirects\n  nameWithType: SecurityPermissionAttribute.BindingRedirects\n  fullName: SecurityPermissionAttribute.BindingRedirects\n  type: Property\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.Security.Permissions\n  summary: Gets or sets a value that indicates whether code has permission to perform binding redirection in the application configuration file.\n  remarks: This permission allows redirection of .NET Framework assemblies that have been unified, as well as other assemblies found outside the .NET Framework.\n  syntax:\n    content: public bool BindingRedirects { get; set; }\n    return:\n      type: System.Boolean\n      description: '`true` if code can perform binding redirects; otherwise, `false`.'\n  overload: System.Security.Permissions.SecurityPermissionAttribute.BindingRedirects*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/SecurityPermissionAttribute.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Permissions.SecurityPermissionAttribute.ControlAppDomain\n  commentId: P:System.Security.Permissions.SecurityPermissionAttribute.ControlAppDomain\n  id: ControlAppDomain\n  parent: System.Security.Permissions.SecurityPermissionAttribute\n  langs:\n  - csharp\n  name: ControlAppDomain\n  nameWithType: SecurityPermissionAttribute.ControlAppDomain\n  fullName: SecurityPermissionAttribute.ControlAppDomain\n  type: Property\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.Security.Permissions\n  summary: Gets or sets a value indicating whether permission to manipulate <xref href=\"System.AppDomain\"></xref> is declared.\n  syntax:\n    content: public bool ControlAppDomain { get; set; }\n    return:\n      type: System.Boolean\n      description: '`true` if permission to manipulate <xref href=\"System.AppDomain\"></xref> is declared; otherwise, `false`.'\n  overload: System.Security.Permissions.SecurityPermissionAttribute.ControlAppDomain*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/SecurityPermissionAttribute.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Permissions.SecurityPermissionAttribute.ControlDomainPolicy\n  commentId: P:System.Security.Permissions.SecurityPermissionAttribute.ControlDomainPolicy\n  id: ControlDomainPolicy\n  parent: System.Security.Permissions.SecurityPermissionAttribute\n  langs:\n  - csharp\n  name: ControlDomainPolicy\n  nameWithType: SecurityPermissionAttribute.ControlDomainPolicy\n  fullName: SecurityPermissionAttribute.ControlDomainPolicy\n  type: Property\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.Security.Permissions\n  summary: Gets or sets a value indicating whether permission to alter or manipulate domain security policy is declared.\n  syntax:\n    content: public bool ControlDomainPolicy { get; set; }\n    return:\n      type: System.Boolean\n      description: '`true` if permission to alter or manipulate security policy in an application domain is declared; otherwise, `false`.'\n  overload: System.Security.Permissions.SecurityPermissionAttribute.ControlDomainPolicy*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/SecurityPermissionAttribute.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Permissions.SecurityPermissionAttribute.ControlEvidence\n  commentId: P:System.Security.Permissions.SecurityPermissionAttribute.ControlEvidence\n  id: ControlEvidence\n  parent: System.Security.Permissions.SecurityPermissionAttribute\n  langs:\n  - csharp\n  name: ControlEvidence\n  nameWithType: SecurityPermissionAttribute.ControlEvidence\n  fullName: SecurityPermissionAttribute.ControlEvidence\n  type: Property\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.Security.Permissions\n  summary: Gets or sets a value indicating whether permission to alter or manipulate evidence is declared.\n  syntax:\n    content: public bool ControlEvidence { get; set; }\n    return:\n      type: System.Boolean\n      description: '`true` if the ability to alter or manipulate evidence is declared; otherwise, `false`.'\n  overload: System.Security.Permissions.SecurityPermissionAttribute.ControlEvidence*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/SecurityPermissionAttribute.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Permissions.SecurityPermissionAttribute.ControlPolicy\n  commentId: P:System.Security.Permissions.SecurityPermissionAttribute.ControlPolicy\n  id: ControlPolicy\n  parent: System.Security.Permissions.SecurityPermissionAttribute\n  langs:\n  - csharp\n  name: ControlPolicy\n  nameWithType: SecurityPermissionAttribute.ControlPolicy\n  fullName: SecurityPermissionAttribute.ControlPolicy\n  type: Property\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.Security.Permissions\n  summary: Gets or sets a value indicating whether permission to view and manipulate security policy is declared.\n  syntax:\n    content: public bool ControlPolicy { get; set; }\n    return:\n      type: System.Boolean\n      description: '`true` if permission to manipulate security policy is declared; otherwise, `false`.'\n  overload: System.Security.Permissions.SecurityPermissionAttribute.ControlPolicy*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/SecurityPermissionAttribute.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Permissions.SecurityPermissionAttribute.ControlPrincipal\n  commentId: P:System.Security.Permissions.SecurityPermissionAttribute.ControlPrincipal\n  id: ControlPrincipal\n  parent: System.Security.Permissions.SecurityPermissionAttribute\n  langs:\n  - csharp\n  name: ControlPrincipal\n  nameWithType: SecurityPermissionAttribute.ControlPrincipal\n  fullName: SecurityPermissionAttribute.ControlPrincipal\n  type: Property\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.Security.Permissions\n  summary: Gets or sets a value indicating whether permission to manipulate the current principal is declared.\n  syntax:\n    content: public bool ControlPrincipal { get; set; }\n    return:\n      type: System.Boolean\n      description: '`true` if permission to manipulate the current principal is declared; otherwise, `false`.'\n  overload: System.Security.Permissions.SecurityPermissionAttribute.ControlPrincipal*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/SecurityPermissionAttribute.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Permissions.SecurityPermissionAttribute.ControlThread\n  commentId: P:System.Security.Permissions.SecurityPermissionAttribute.ControlThread\n  id: ControlThread\n  parent: System.Security.Permissions.SecurityPermissionAttribute\n  langs:\n  - csharp\n  name: ControlThread\n  nameWithType: SecurityPermissionAttribute.ControlThread\n  fullName: SecurityPermissionAttribute.ControlThread\n  type: Property\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.Security.Permissions\n  summary: Gets or sets a value indicating whether permission to manipulate threads is declared.\n  remarks: For more information, see <xref:System.Threading.Thread>.\n  syntax:\n    content: public bool ControlThread { get; set; }\n    return:\n      type: System.Boolean\n      description: '`true` if permission to manipulate threads is declared; otherwise, `false`.'\n  overload: System.Security.Permissions.SecurityPermissionAttribute.ControlThread*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/SecurityPermissionAttribute.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Permissions.SecurityPermissionAttribute.CreatePermission\n  commentId: M:System.Security.Permissions.SecurityPermissionAttribute.CreatePermission\n  id: CreatePermission\n  parent: System.Security.Permissions.SecurityPermissionAttribute\n  langs:\n  - csharp\n  name: CreatePermission()\n  nameWithType: SecurityPermissionAttribute.CreatePermission()\n  fullName: SecurityPermissionAttribute.CreatePermission()\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.Security.Permissions\n  summary: Creates and returns a new <xref href=\"System.Security.Permissions.SecurityPermission\"></xref>.\n  remarks: \"This method should only be called by the security system, never by application code.  \\n  \\n At compile time, attributes convert security declarations to a serialized form in metadata. Declarative security data in metadata is created from the permission that this method returns that corresponds to this attribute.\"\n  syntax:\n    content: public override System.Security.IPermission CreatePermission ();\n    parameters: []\n    return:\n      type: System.Security.IPermission\n      description: A <xref href=\"System.Security.Permissions.SecurityPermission\"></xref> that corresponds to this attribute.\n  overload: System.Security.Permissions.SecurityPermissionAttribute.CreatePermission*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/SecurityPermissionAttribute.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Permissions.SecurityPermissionAttribute.Execution\n  commentId: P:System.Security.Permissions.SecurityPermissionAttribute.Execution\n  id: Execution\n  parent: System.Security.Permissions.SecurityPermissionAttribute\n  langs:\n  - csharp\n  name: Execution\n  nameWithType: SecurityPermissionAttribute.Execution\n  fullName: SecurityPermissionAttribute.Execution\n  type: Property\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.Security.Permissions\n  summary: Gets or sets a value indicating whether permission to execute code is declared.\n  remarks: A demand for <xref:System.Security.Permissions.SecurityPermissionFlag.Execution> permission at the assembly level is ignored. If an assembly has the right to execute, <xref:System.Security.Permissions.SecurityPermissionFlag.Execution> permission is automatically granted, and setting the <xref:System.Security.Permissions.SecurityPermissionAttribute.Execution%2A> property to either `true` or `false` has no effect.\n  syntax:\n    content: public bool Execution { get; set; }\n    return:\n      type: System.Boolean\n      description: '`true` if permission to execute code is declared; otherwise, `false`.'\n  overload: System.Security.Permissions.SecurityPermissionAttribute.Execution*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/SecurityPermissionAttribute.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Permissions.SecurityPermissionAttribute.Flags\n  commentId: P:System.Security.Permissions.SecurityPermissionAttribute.Flags\n  id: Flags\n  parent: System.Security.Permissions.SecurityPermissionAttribute\n  langs:\n  - csharp\n  name: Flags\n  nameWithType: SecurityPermissionAttribute.Flags\n  fullName: SecurityPermissionAttribute.Flags\n  type: Property\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.Security.Permissions\n  summary: Gets or sets all permission flags comprising the <xref href=\"System.Security.Permissions.SecurityPermission\"></xref> permissions.\n  syntax:\n    content: public System.Security.Permissions.SecurityPermissionFlag Flags { get; set; }\n    return:\n      type: System.Security.Permissions.SecurityPermissionFlag\n      description: One or more of the <xref href=\"System.Security.Permissions.SecurityPermissionFlag\"></xref> values combined using a bitwise OR.\n  overload: System.Security.Permissions.SecurityPermissionAttribute.Flags*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: An attempt is made to set this property to an invalid value. See <xref href=\"System.Security.Permissions.SecurityPermissionFlag\"></xref> for the valid values.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/SecurityPermissionAttribute.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Permissions.SecurityPermissionAttribute.Infrastructure\n  commentId: P:System.Security.Permissions.SecurityPermissionAttribute.Infrastructure\n  id: Infrastructure\n  parent: System.Security.Permissions.SecurityPermissionAttribute\n  langs:\n  - csharp\n  name: Infrastructure\n  nameWithType: SecurityPermissionAttribute.Infrastructure\n  fullName: SecurityPermissionAttribute.Infrastructure\n  type: Property\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.Security.Permissions\n  summary: Gets or sets a value indicating whether code can plug into the common language runtime infrastructure, such as adding Remoting Context Sinks, Envoy Sinks and Dynamic Sinks.\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public bool Infrastructure { get; set; }\n    return:\n      type: System.Boolean\n      description: '`true` if code can plug into the common language runtime infrastructure; otherwise, `false`.'\n  overload: System.Security.Permissions.SecurityPermissionAttribute.Infrastructure*\n  exceptions: []\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/SecurityPermissionAttribute.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Permissions.SecurityPermissionAttribute.RemotingConfiguration\n  commentId: P:System.Security.Permissions.SecurityPermissionAttribute.RemotingConfiguration\n  id: RemotingConfiguration\n  parent: System.Security.Permissions.SecurityPermissionAttribute\n  langs:\n  - csharp\n  name: RemotingConfiguration\n  nameWithType: SecurityPermissionAttribute.RemotingConfiguration\n  fullName: SecurityPermissionAttribute.RemotingConfiguration\n  type: Property\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.Security.Permissions\n  summary: Gets or sets a value indicating whether code can configure remoting types and channels.\n  syntax:\n    content: public bool RemotingConfiguration { get; set; }\n    return:\n      type: System.Boolean\n      description: '`true` if code can configure remoting types and channels; otherwise, `false`.'\n  overload: System.Security.Permissions.SecurityPermissionAttribute.RemotingConfiguration*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/SecurityPermissionAttribute.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Permissions.SecurityPermissionAttribute.SerializationFormatter\n  commentId: P:System.Security.Permissions.SecurityPermissionAttribute.SerializationFormatter\n  id: SerializationFormatter\n  parent: System.Security.Permissions.SecurityPermissionAttribute\n  langs:\n  - csharp\n  name: SerializationFormatter\n  nameWithType: SecurityPermissionAttribute.SerializationFormatter\n  fullName: SecurityPermissionAttribute.SerializationFormatter\n  type: Property\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.Security.Permissions\n  summary: Gets or sets a value indicating whether code can use a serialization formatter to serialize or deserialize an object.\n  syntax:\n    content: public bool SerializationFormatter { get; set; }\n    return:\n      type: System.Boolean\n      description: '`true` if code can use a serialization formatter to serialize or deserialize an object; otherwise, `false`.'\n  overload: System.Security.Permissions.SecurityPermissionAttribute.SerializationFormatter*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/SecurityPermissionAttribute.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Permissions.SecurityPermissionAttribute.SkipVerification\n  commentId: P:System.Security.Permissions.SecurityPermissionAttribute.SkipVerification\n  id: SkipVerification\n  parent: System.Security.Permissions.SecurityPermissionAttribute\n  langs:\n  - csharp\n  name: SkipVerification\n  nameWithType: SecurityPermissionAttribute.SkipVerification\n  fullName: SecurityPermissionAttribute.SkipVerification\n  type: Property\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.Security.Permissions\n  summary: Gets or sets a value indicating whether permission to bypass code verification is declared.\n  remarks: >-\n    > [!CAUTION]\n\n    >  This is a powerful permission that should be granted only to highly trusted code.\n  syntax:\n    content: public bool SkipVerification { get; set; }\n    return:\n      type: System.Boolean\n      description: '`true` if permission to bypass code verification is declared; otherwise, `false`.'\n  overload: System.Security.Permissions.SecurityPermissionAttribute.SkipVerification*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/SecurityPermissionAttribute.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode\n  commentId: P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode\n  id: UnmanagedCode\n  parent: System.Security.Permissions.SecurityPermissionAttribute\n  langs:\n  - csharp\n  name: UnmanagedCode\n  nameWithType: SecurityPermissionAttribute.UnmanagedCode\n  fullName: SecurityPermissionAttribute.UnmanagedCode\n  type: Property\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.Security.Permissions\n  summary: Gets or sets a value indicating whether permission to call unmanaged code is declared.\n  syntax:\n    content: public bool UnmanagedCode { get; set; }\n    return:\n      type: System.Boolean\n      description: '`true` if permission to call unmanaged code is declared; otherwise, `false`.'\n  overload: System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/SecurityPermissionAttribute.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\nreferences:\n- uid: System.Security.Permissions.CodeAccessSecurityAttribute\n  parent: System.Security.Permissions\n  isExternal: false\n  name: CodeAccessSecurityAttribute\n  nameWithType: CodeAccessSecurityAttribute\n  fullName: System.Security.Permissions.CodeAccessSecurityAttribute\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.Security.Permissions.SecurityPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)\n  parent: System.Security.Permissions.SecurityPermissionAttribute\n  isExternal: false\n  name: SecurityPermissionAttribute(SecurityAction)\n  nameWithType: SecurityPermissionAttribute.SecurityPermissionAttribute(SecurityAction)\n  fullName: SecurityPermissionAttribute.SecurityPermissionAttribute(SecurityAction)\n- uid: System.Security.Permissions.SecurityAction\n  parent: System.Security.Permissions\n  isExternal: false\n  name: SecurityAction\n  nameWithType: SecurityAction\n  fullName: System.Security.Permissions.SecurityAction\n- uid: System.Security.Permissions.SecurityPermissionAttribute.Assertion\n  parent: System.Security.Permissions.SecurityPermissionAttribute\n  isExternal: false\n  name: Assertion\n  nameWithType: SecurityPermissionAttribute.Assertion\n  fullName: SecurityPermissionAttribute.Assertion\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Security.Permissions.SecurityPermissionAttribute.BindingRedirects\n  parent: System.Security.Permissions.SecurityPermissionAttribute\n  isExternal: false\n  name: BindingRedirects\n  nameWithType: SecurityPermissionAttribute.BindingRedirects\n  fullName: SecurityPermissionAttribute.BindingRedirects\n- uid: System.Security.Permissions.SecurityPermissionAttribute.ControlAppDomain\n  parent: System.Security.Permissions.SecurityPermissionAttribute\n  isExternal: false\n  name: ControlAppDomain\n  nameWithType: SecurityPermissionAttribute.ControlAppDomain\n  fullName: SecurityPermissionAttribute.ControlAppDomain\n- uid: System.Security.Permissions.SecurityPermissionAttribute.ControlDomainPolicy\n  parent: System.Security.Permissions.SecurityPermissionAttribute\n  isExternal: false\n  name: ControlDomainPolicy\n  nameWithType: SecurityPermissionAttribute.ControlDomainPolicy\n  fullName: SecurityPermissionAttribute.ControlDomainPolicy\n- uid: System.Security.Permissions.SecurityPermissionAttribute.ControlEvidence\n  parent: System.Security.Permissions.SecurityPermissionAttribute\n  isExternal: false\n  name: ControlEvidence\n  nameWithType: SecurityPermissionAttribute.ControlEvidence\n  fullName: SecurityPermissionAttribute.ControlEvidence\n- uid: System.Security.Permissions.SecurityPermissionAttribute.ControlPolicy\n  parent: System.Security.Permissions.SecurityPermissionAttribute\n  isExternal: false\n  name: ControlPolicy\n  nameWithType: SecurityPermissionAttribute.ControlPolicy\n  fullName: SecurityPermissionAttribute.ControlPolicy\n- uid: System.Security.Permissions.SecurityPermissionAttribute.ControlPrincipal\n  parent: System.Security.Permissions.SecurityPermissionAttribute\n  isExternal: false\n  name: ControlPrincipal\n  nameWithType: SecurityPermissionAttribute.ControlPrincipal\n  fullName: SecurityPermissionAttribute.ControlPrincipal\n- uid: System.Security.Permissions.SecurityPermissionAttribute.ControlThread\n  parent: System.Security.Permissions.SecurityPermissionAttribute\n  isExternal: false\n  name: ControlThread\n  nameWithType: SecurityPermissionAttribute.ControlThread\n  fullName: SecurityPermissionAttribute.ControlThread\n- uid: System.Security.Permissions.SecurityPermissionAttribute.CreatePermission\n  parent: System.Security.Permissions.SecurityPermissionAttribute\n  isExternal: false\n  name: CreatePermission()\n  nameWithType: SecurityPermissionAttribute.CreatePermission()\n  fullName: SecurityPermissionAttribute.CreatePermission()\n- uid: System.Security.IPermission\n  parent: System.Security\n  isExternal: false\n  name: IPermission\n  nameWithType: IPermission\n  fullName: System.Security.IPermission\n- uid: System.Security.Permissions.SecurityPermissionAttribute.Execution\n  parent: System.Security.Permissions.SecurityPermissionAttribute\n  isExternal: false\n  name: Execution\n  nameWithType: SecurityPermissionAttribute.Execution\n  fullName: SecurityPermissionAttribute.Execution\n- uid: System.Security.Permissions.SecurityPermissionAttribute.Flags\n  parent: System.Security.Permissions.SecurityPermissionAttribute\n  isExternal: false\n  name: Flags\n  nameWithType: SecurityPermissionAttribute.Flags\n  fullName: SecurityPermissionAttribute.Flags\n- uid: System.Security.Permissions.SecurityPermissionFlag\n  parent: System.Security.Permissions\n  isExternal: false\n  name: SecurityPermissionFlag\n  nameWithType: SecurityPermissionFlag\n  fullName: System.Security.Permissions.SecurityPermissionFlag\n- uid: System.Security.Permissions.SecurityPermissionAttribute.Infrastructure\n  parent: System.Security.Permissions.SecurityPermissionAttribute\n  isExternal: false\n  name: Infrastructure\n  nameWithType: SecurityPermissionAttribute.Infrastructure\n  fullName: SecurityPermissionAttribute.Infrastructure\n- uid: System.Security.Permissions.SecurityPermissionAttribute.RemotingConfiguration\n  parent: System.Security.Permissions.SecurityPermissionAttribute\n  isExternal: false\n  name: RemotingConfiguration\n  nameWithType: SecurityPermissionAttribute.RemotingConfiguration\n  fullName: SecurityPermissionAttribute.RemotingConfiguration\n- uid: System.Security.Permissions.SecurityPermissionAttribute.SerializationFormatter\n  parent: System.Security.Permissions.SecurityPermissionAttribute\n  isExternal: false\n  name: SerializationFormatter\n  nameWithType: SecurityPermissionAttribute.SerializationFormatter\n  fullName: SecurityPermissionAttribute.SerializationFormatter\n- uid: System.Security.Permissions.SecurityPermissionAttribute.SkipVerification\n  parent: System.Security.Permissions.SecurityPermissionAttribute\n  isExternal: false\n  name: SkipVerification\n  nameWithType: SecurityPermissionAttribute.SkipVerification\n  fullName: SecurityPermissionAttribute.SkipVerification\n- uid: System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode\n  parent: System.Security.Permissions.SecurityPermissionAttribute\n  isExternal: false\n  name: UnmanagedCode\n  nameWithType: SecurityPermissionAttribute.UnmanagedCode\n  fullName: SecurityPermissionAttribute.UnmanagedCode\n- uid: System.Security.Permissions.SecurityPermissionAttribute.#ctor*\n  parent: System.Security.Permissions.SecurityPermissionAttribute\n  isExternal: false\n  name: SecurityPermissionAttribute\n  nameWithType: SecurityPermissionAttribute.SecurityPermissionAttribute\n  fullName: SecurityPermissionAttribute.SecurityPermissionAttribute\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/SecurityPermissionAttribute.xml\n- uid: System.Security.Permissions.SecurityPermissionAttribute.Assertion*\n  parent: System.Security.Permissions.SecurityPermissionAttribute\n  isExternal: false\n  name: Assertion\n  nameWithType: SecurityPermissionAttribute.Assertion\n  fullName: SecurityPermissionAttribute.Assertion\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/SecurityPermissionAttribute.xml\n- uid: System.Security.Permissions.SecurityPermissionAttribute.BindingRedirects*\n  parent: System.Security.Permissions.SecurityPermissionAttribute\n  isExternal: false\n  name: BindingRedirects\n  nameWithType: SecurityPermissionAttribute.BindingRedirects\n  fullName: SecurityPermissionAttribute.BindingRedirects\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/SecurityPermissionAttribute.xml\n- uid: System.Security.Permissions.SecurityPermissionAttribute.ControlAppDomain*\n  parent: System.Security.Permissions.SecurityPermissionAttribute\n  isExternal: false\n  name: ControlAppDomain\n  nameWithType: SecurityPermissionAttribute.ControlAppDomain\n  fullName: SecurityPermissionAttribute.ControlAppDomain\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/SecurityPermissionAttribute.xml\n- uid: System.Security.Permissions.SecurityPermissionAttribute.ControlDomainPolicy*\n  parent: System.Security.Permissions.SecurityPermissionAttribute\n  isExternal: false\n  name: ControlDomainPolicy\n  nameWithType: SecurityPermissionAttribute.ControlDomainPolicy\n  fullName: SecurityPermissionAttribute.ControlDomainPolicy\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/SecurityPermissionAttribute.xml\n- uid: System.Security.Permissions.SecurityPermissionAttribute.ControlEvidence*\n  parent: System.Security.Permissions.SecurityPermissionAttribute\n  isExternal: false\n  name: ControlEvidence\n  nameWithType: SecurityPermissionAttribute.ControlEvidence\n  fullName: SecurityPermissionAttribute.ControlEvidence\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/SecurityPermissionAttribute.xml\n- uid: System.Security.Permissions.SecurityPermissionAttribute.ControlPolicy*\n  parent: System.Security.Permissions.SecurityPermissionAttribute\n  isExternal: false\n  name: ControlPolicy\n  nameWithType: SecurityPermissionAttribute.ControlPolicy\n  fullName: SecurityPermissionAttribute.ControlPolicy\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/SecurityPermissionAttribute.xml\n- uid: System.Security.Permissions.SecurityPermissionAttribute.ControlPrincipal*\n  parent: System.Security.Permissions.SecurityPermissionAttribute\n  isExternal: false\n  name: ControlPrincipal\n  nameWithType: SecurityPermissionAttribute.ControlPrincipal\n  fullName: SecurityPermissionAttribute.ControlPrincipal\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/SecurityPermissionAttribute.xml\n- uid: System.Security.Permissions.SecurityPermissionAttribute.ControlThread*\n  parent: System.Security.Permissions.SecurityPermissionAttribute\n  isExternal: false\n  name: ControlThread\n  nameWithType: SecurityPermissionAttribute.ControlThread\n  fullName: SecurityPermissionAttribute.ControlThread\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/SecurityPermissionAttribute.xml\n- uid: System.Security.Permissions.SecurityPermissionAttribute.CreatePermission*\n  parent: System.Security.Permissions.SecurityPermissionAttribute\n  isExternal: false\n  name: CreatePermission\n  nameWithType: SecurityPermissionAttribute.CreatePermission\n  fullName: SecurityPermissionAttribute.CreatePermission\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/SecurityPermissionAttribute.xml\n- uid: System.Security.Permissions.SecurityPermissionAttribute.Execution*\n  parent: System.Security.Permissions.SecurityPermissionAttribute\n  isExternal: false\n  name: Execution\n  nameWithType: SecurityPermissionAttribute.Execution\n  fullName: SecurityPermissionAttribute.Execution\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/SecurityPermissionAttribute.xml\n- uid: System.Security.Permissions.SecurityPermissionAttribute.Flags*\n  parent: System.Security.Permissions.SecurityPermissionAttribute\n  isExternal: false\n  name: Flags\n  nameWithType: SecurityPermissionAttribute.Flags\n  fullName: SecurityPermissionAttribute.Flags\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/SecurityPermissionAttribute.xml\n- uid: System.Security.Permissions.SecurityPermissionAttribute.Infrastructure*\n  parent: System.Security.Permissions.SecurityPermissionAttribute\n  isExternal: false\n  name: Infrastructure\n  nameWithType: SecurityPermissionAttribute.Infrastructure\n  fullName: SecurityPermissionAttribute.Infrastructure\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/SecurityPermissionAttribute.xml\n- uid: System.Security.Permissions.SecurityPermissionAttribute.RemotingConfiguration*\n  parent: System.Security.Permissions.SecurityPermissionAttribute\n  isExternal: false\n  name: RemotingConfiguration\n  nameWithType: SecurityPermissionAttribute.RemotingConfiguration\n  fullName: SecurityPermissionAttribute.RemotingConfiguration\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/SecurityPermissionAttribute.xml\n- uid: System.Security.Permissions.SecurityPermissionAttribute.SerializationFormatter*\n  parent: System.Security.Permissions.SecurityPermissionAttribute\n  isExternal: false\n  name: SerializationFormatter\n  nameWithType: SecurityPermissionAttribute.SerializationFormatter\n  fullName: SecurityPermissionAttribute.SerializationFormatter\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/SecurityPermissionAttribute.xml\n- uid: System.Security.Permissions.SecurityPermissionAttribute.SkipVerification*\n  parent: System.Security.Permissions.SecurityPermissionAttribute\n  isExternal: false\n  name: SkipVerification\n  nameWithType: SecurityPermissionAttribute.SkipVerification\n  fullName: SecurityPermissionAttribute.SkipVerification\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/SecurityPermissionAttribute.xml\n- uid: System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode*\n  parent: System.Security.Permissions.SecurityPermissionAttribute\n  isExternal: false\n  name: UnmanagedCode\n  nameWithType: SecurityPermissionAttribute.UnmanagedCode\n  fullName: SecurityPermissionAttribute.UnmanagedCode\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/SecurityPermissionAttribute.xml\n- uid: System.Attribute.Equals(System.Object)\n  parent: System.Attribute\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Attribute.Equals(Object)\n  fullName: Attribute.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Attribute.GetHashCode\n  parent: System.Attribute\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Attribute.GetHashCode()\n  fullName: Attribute.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttribute(ParameterInfo, Type, Boolean)\n  nameWithType: Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean)\n  fullName: Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean)\n- uid: System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttribute(MemberInfo, Type, Boolean)\n  nameWithType: Attribute.GetCustomAttribute(MemberInfo, Type, Boolean)\n  fullName: Attribute.GetCustomAttribute(MemberInfo, Type, Boolean)\n- uid: System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttribute(Assembly, Type, Boolean)\n  nameWithType: Attribute.GetCustomAttribute(Assembly, Type, Boolean)\n  fullName: Attribute.GetCustomAttribute(Assembly, Type, Boolean)\n- uid: System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttribute(Module, Type, Boolean)\n  nameWithType: Attribute.GetCustomAttribute(Module, Type, Boolean)\n  fullName: Attribute.GetCustomAttribute(Module, Type, Boolean)\n- uid: System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttribute(Module, Type)\n  nameWithType: Attribute.GetCustomAttribute(Module, Type)\n  fullName: Attribute.GetCustomAttribute(Module, Type)\n- uid: System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttribute(MemberInfo, Type)\n  nameWithType: Attribute.GetCustomAttribute(MemberInfo, Type)\n  fullName: Attribute.GetCustomAttribute(MemberInfo, Type)\n- uid: System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttribute(Assembly, Type)\n  nameWithType: Attribute.GetCustomAttribute(Assembly, Type)\n  fullName: Attribute.GetCustomAttribute(Assembly, Type)\n- uid: System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttribute(ParameterInfo, Type)\n  nameWithType: Attribute.GetCustomAttribute(ParameterInfo, Type)\n  fullName: Attribute.GetCustomAttribute(ParameterInfo, Type)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(Module, Type)\n  nameWithType: Attribute.GetCustomAttributes(Module, Type)\n  fullName: Attribute.GetCustomAttributes(Module, Type)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(ParameterInfo, Type, Boolean)\n  nameWithType: Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean)\n  fullName: Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(Module, Type, Boolean)\n  nameWithType: Attribute.GetCustomAttributes(Module, Type, Boolean)\n  fullName: Attribute.GetCustomAttributes(Module, Type, Boolean)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(MemberInfo, Type, Boolean)\n  nameWithType: Attribute.GetCustomAttributes(MemberInfo, Type, Boolean)\n  fullName: Attribute.GetCustomAttributes(MemberInfo, Type, Boolean)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(Assembly, Type, Boolean)\n  nameWithType: Attribute.GetCustomAttributes(Assembly, Type, Boolean)\n  fullName: Attribute.GetCustomAttributes(Assembly, Type, Boolean)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(ParameterInfo, Type)\n  nameWithType: Attribute.GetCustomAttributes(ParameterInfo, Type)\n  fullName: Attribute.GetCustomAttributes(ParameterInfo, Type)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(Module, Boolean)\n  nameWithType: Attribute.GetCustomAttributes(Module, Boolean)\n  fullName: Attribute.GetCustomAttributes(Module, Boolean)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(ParameterInfo, Boolean)\n  nameWithType: Attribute.GetCustomAttributes(ParameterInfo, Boolean)\n  fullName: Attribute.GetCustomAttributes(ParameterInfo, Boolean)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(MemberInfo, Boolean)\n  nameWithType: Attribute.GetCustomAttributes(MemberInfo, Boolean)\n  fullName: Attribute.GetCustomAttributes(MemberInfo, Boolean)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(Assembly, Type)\n  nameWithType: Attribute.GetCustomAttributes(Assembly, Type)\n  fullName: Attribute.GetCustomAttributes(Assembly, Type)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(Assembly, Boolean)\n  nameWithType: Attribute.GetCustomAttributes(Assembly, Boolean)\n  fullName: Attribute.GetCustomAttributes(Assembly, Boolean)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(ParameterInfo)\n  nameWithType: Attribute.GetCustomAttributes(ParameterInfo)\n  fullName: Attribute.GetCustomAttributes(ParameterInfo)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.Module)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(Module)\n  nameWithType: Attribute.GetCustomAttributes(Module)\n  fullName: Attribute.GetCustomAttributes(Module)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(MemberInfo)\n  nameWithType: Attribute.GetCustomAttributes(MemberInfo)\n  fullName: Attribute.GetCustomAttributes(MemberInfo)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.Assembly)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(Assembly)\n  nameWithType: Attribute.GetCustomAttributes(Assembly)\n  fullName: Attribute.GetCustomAttributes(Assembly)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(MemberInfo, Type)\n  nameWithType: Attribute.GetCustomAttributes(MemberInfo, Type)\n  fullName: Attribute.GetCustomAttributes(MemberInfo, Type)\n- uid: System.Attribute.IsDefaultAttribute\n  parent: System.Attribute\n  isExternal: false\n  name: IsDefaultAttribute()\n  nameWithType: Attribute.IsDefaultAttribute()\n  fullName: Attribute.IsDefaultAttribute()\n- uid: System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: IsDefined(ParameterInfo, Type, Boolean)\n  nameWithType: Attribute.IsDefined(ParameterInfo, Type, Boolean)\n  fullName: Attribute.IsDefined(ParameterInfo, Type, Boolean)\n- uid: System.Attribute.IsDefined(System.Reflection.Module,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: IsDefined(Module, Type, Boolean)\n  nameWithType: Attribute.IsDefined(Module, Type, Boolean)\n  fullName: Attribute.IsDefined(Module, Type, Boolean)\n- uid: System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: IsDefined(MemberInfo, Type, Boolean)\n  nameWithType: Attribute.IsDefined(MemberInfo, Type, Boolean)\n  fullName: Attribute.IsDefined(MemberInfo, Type, Boolean)\n- uid: System.Attribute.IsDefined(System.Reflection.Assembly,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: IsDefined(Assembly, Type, Boolean)\n  nameWithType: Attribute.IsDefined(Assembly, Type, Boolean)\n  fullName: Attribute.IsDefined(Assembly, Type, Boolean)\n- uid: System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: IsDefined(MemberInfo, Type)\n  nameWithType: Attribute.IsDefined(MemberInfo, Type)\n  fullName: Attribute.IsDefined(MemberInfo, Type)\n- uid: System.Attribute.IsDefined(System.Reflection.Module,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: IsDefined(Module, Type)\n  nameWithType: Attribute.IsDefined(Module, Type)\n  fullName: Attribute.IsDefined(Module, Type)\n- uid: System.Attribute.IsDefined(System.Reflection.Assembly,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: IsDefined(Assembly, Type)\n  nameWithType: Attribute.IsDefined(Assembly, Type)\n  fullName: Attribute.IsDefined(Assembly, Type)\n- uid: System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: IsDefined(ParameterInfo, Type)\n  nameWithType: Attribute.IsDefined(ParameterInfo, Type)\n  fullName: Attribute.IsDefined(ParameterInfo, Type)\n- uid: System.Attribute.Match(System.Object)\n  parent: System.Attribute\n  isExternal: false\n  name: Match(Object)\n  nameWithType: Attribute.Match(Object)\n  fullName: Attribute.Match(Object)\n- uid: System.Attribute.TypeId\n  parent: System.Attribute\n  isExternal: false\n  name: TypeId\n  nameWithType: Attribute.TypeId\n  fullName: Attribute.TypeId\n- uid: System.Attribute.System#Runtime#InteropServices#_Attribute#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  parent: System.Attribute\n  isExternal: false\n  name: _Attribute.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n  nameWithType: Attribute._Attribute.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n  fullName: Attribute._Attribute.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n- uid: System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  parent: System.Attribute\n  isExternal: false\n  name: _Attribute.GetTypeInfo(UInt32, UInt32, IntPtr)\n  nameWithType: Attribute._Attribute.GetTypeInfo(UInt32, UInt32, IntPtr)\n  fullName: Attribute._Attribute.GetTypeInfo(UInt32, UInt32, IntPtr)\n- uid: System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfoCount(System.UInt32@)\n  parent: System.Attribute\n  isExternal: false\n  name: _Attribute.GetTypeInfoCount(UInt32)\n  nameWithType: Attribute._Attribute.GetTypeInfoCount(UInt32)\n  fullName: Attribute._Attribute.GetTypeInfoCount(UInt32)\n- uid: System.Attribute.System#Runtime#InteropServices#_Attribute#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  parent: System.Attribute\n  isExternal: false\n  name: _Attribute.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n  nameWithType: Attribute._Attribute.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n  fullName: Attribute._Attribute.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n- uid: System.Security.Permissions.SecurityAttribute.Action\n  parent: System.Security.Permissions.SecurityAttribute\n  isExternal: false\n  name: Action\n  nameWithType: SecurityAttribute.Action\n  fullName: SecurityAttribute.Action\n- uid: System.Security.Permissions.SecurityAttribute.Unrestricted\n  parent: System.Security.Permissions.SecurityAttribute\n  isExternal: false\n  name: Unrestricted\n  nameWithType: SecurityAttribute.Unrestricted\n  fullName: SecurityAttribute.Unrestricted\n"}