### YamlMime:ManagedReference
items:
- uid: System.ServiceModel.Security.WindowsClientCredential
  commentId: T:System.ServiceModel.Security.WindowsClientCredential
  id: WindowsClientCredential
  children:
  - System.ServiceModel.Security.WindowsClientCredential.AllowedImpersonationLevel
  - System.ServiceModel.Security.WindowsClientCredential.AllowNtlm
  - System.ServiceModel.Security.WindowsClientCredential.ClientCredential
  langs:
  - csharp
  name: WindowsClientCredential
  nameWithType: WindowsClientCredential
  fullName: System.ServiceModel.Security.WindowsClientCredential
  type: Class
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Security
  summary: Allows you to specify properties related to Windows credentials to be used to represent the client.
  remarks: The <xref:System.ServiceModel.Security.WindowsClientCredential> enables the setting of Windows client properties used when communicating with a service. The <xref:System.ServiceModel.Security.WindowsClientCredential.AllowedImpersonationLevel%2A> sets the level of impersonation the service can assume when impersonating the client. The <xref:System.ServiceModel.Security.WindowsClientCredential.ClientCredential%2A> enables a client to authenticate with username and password to the service. The <xref:System.ServiceModel.Security.WindowsClientCredential.AllowNtlm%2A> determines whether NTLM can be used to authenticate the client if Kerberos is not used.
  example:
  - "The following example creates a client and gets a reference to the <xref:System.ServiceModel.Security.WindowsClientCredential>. The code then changes the <xref:System.ServiceModel.Security.WindowsClientCredential.AllowedImpersonationLevel%2A> to a new value.  \n  \n [!code-csharp[WindowsClientCredential#1](~/samples/snippets/csharp/VS_Snippets_CFX/windowsclientcredential/cs/source.cs#1)]\n [!code-vb[WindowsClientCredential#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/windowsclientcredential/vb/source.vb#1)]"
  syntax:
    content: public sealed class WindowsClientCredential
  inheritance:
  - System.Object
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel.Security/WindowsClientCredential.xml
  ms.technology:
  - dotnet-standard
  author: Erikre
  ms.author: erikre
  manager: erikre
- uid: System.ServiceModel.Security.WindowsClientCredential.AllowedImpersonationLevel
  commentId: P:System.ServiceModel.Security.WindowsClientCredential.AllowedImpersonationLevel
  id: AllowedImpersonationLevel
  parent: System.ServiceModel.Security.WindowsClientCredential
  langs:
  - csharp
  name: AllowedImpersonationLevel
  nameWithType: WindowsClientCredential.AllowedImpersonationLevel
  fullName: WindowsClientCredential.AllowedImpersonationLevel
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Security
  summary: Gets or sets the allowed impersonation level.
  remarks: "This property specifies the impersonation level granted by the client to the server when using Windows SSPI Negotiate authentication. Note that the impersonation level obtained by the server when it impersonates the client token is not solely a function of this setting. It is also a function of the associated privileges and domain settings for the account in which the service is running.  \n  \n The client must explicitly set the allowed impersonation level using this property.  \n  \n When the client specifies anonymous impersonation the client always authenticates to the service as anonymous even when no impersonation is performed on the service. This is due to underlying Windows operating system behavior.  \n  \n [!INCLUDE[crabout](~/includes/crabout-md.md)] Windows impersonation, go to [Impersonating and Reverting](http://go.microsoft.com/fwlink/?LinkId=96178). [!INCLUDE[crabout](~/includes/crabout-md.md)] impersonation using [!INCLUDE[indigo1](~/includes/indigo1-md.md)], see [Delegation and Impersonation](~/docs/framework/wcf/feature-details/delegation-and-impersonation-with-wcf.md)."
  example:
  - "The following example shows how to set this property.  \n  \n [!code-csharp[WindowsClientCredential#1](~/samples/snippets/csharp/VS_Snippets_CFX/windowsclientcredential/cs/source.cs#1)]\n [!code-vb[WindowsClientCredential#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/windowsclientcredential/vb/source.vb#1)]"
  syntax:
    content: public System.Security.Principal.TokenImpersonationLevel AllowedImpersonationLevel { get; set; }
    return:
      type: System.Security.Principal.TokenImpersonationLevel
      description: One of the <xref href="System.Security.Principal.TokenImpersonationLevel"></xref> values.
  overload: System.ServiceModel.Security.WindowsClientCredential.AllowedImpersonationLevel*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel.Security/WindowsClientCredential.xml
  ms.technology:
  - dotnet-standard
  author: Erikre
  ms.author: erikre
  manager: erikre
- uid: System.ServiceModel.Security.WindowsClientCredential.AllowNtlm
  commentId: P:System.ServiceModel.Security.WindowsClientCredential.AllowNtlm
  id: AllowNtlm
  parent: System.ServiceModel.Security.WindowsClientCredential
  langs:
  - csharp
  name: AllowNtlm
  nameWithType: WindowsClientCredential.AllowNtlm
  fullName: WindowsClientCredential.AllowNtlm
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Security
  summary: Gets or sets a value that indicates whether NTLM authentication should be allowed as Windows SSPI Negotiate authentication.
  remarks: "Setting this property to `true` allows authentication to downgrade to NTLM if Kerberos is not available.  \n  \n Setting this property to `false` causes [!INCLUDE[indigo1](~/includes/indigo1-md.md)] to make a best-effort to throw an exception if NTLM is used. Note that setting this property to `false` may not prevent NTLM credentials from being sent over the wire.  \n  \n Certain deployments such as workgroups and local accounts require NTLM authentication. Setting this flag to `false` in such deployments result in authentication failures when using [!INCLUDE[indigo2](~/includes/indigo2-md.md)]. In a deployment that requires mutual authentication (only supported by Kerberos), set this flag to `false`.  \n  \n NTLM (Windows NT LAN Manager) is the authentication protocol used on networks that include systems running the Windows NT operating system, and on stand-alone systems.  \n  \n The Microsoft Kerberos security package adds greater security than NTLM to systems on a network. Although Microsoft Kerberos is the protocol of choice, NTLM is still supported and must be used for network authentication if the network includes systems running versions of Windows NT 4.0 and earlier, and on stand-alone systems."
  syntax:
    content: public bool AllowNtlm { get; set; }
    return:
      type: System.Boolean
      description: '`true` if NTLM authentication should be allowed as Windows SSPI Negotiate authentication, `false` otherwise. The default is `true`.'
  overload: System.ServiceModel.Security.WindowsClientCredential.AllowNtlm*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel.Security/WindowsClientCredential.xml
  ms.technology:
  - dotnet-standard
  author: Erikre
  ms.author: erikre
  manager: erikre
- uid: System.ServiceModel.Security.WindowsClientCredential.ClientCredential
  commentId: P:System.ServiceModel.Security.WindowsClientCredential.ClientCredential
  id: ClientCredential
  parent: System.ServiceModel.Security.WindowsClientCredential
  langs:
  - csharp
  name: ClientCredential
  nameWithType: WindowsClientCredential.ClientCredential
  fullName: WindowsClientCredential.ClientCredential
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Security
  summary: Gets or sets the Windows client credential.
  remarks: "By default, the current thread's credentials are used by [!INCLUDE[indigo2](~/includes/indigo2-md.md)] for doing Windows SSPI Negotiate authentication.  \n  \n To authenticate the client as another principal, change the properties of the instance of the <xref:System.Net.NetworkCredential> class that is returned by this property. Alternatively, create a new instance of the <xref:System.Net.NetworkCredential> class and assign it to this property."
  example:
  - "The following code examples show how to authenticate the client as a different principal.  \n  \n This is how to change the properties of the instance of the <xref:System.Net.NetworkCredential> class that is returned by this property.  \n  \n [!code-csharp[WindowsClientCredential#2](~/samples/snippets/csharp/VS_Snippets_CFX/windowsclientcredential/cs/source.cs#2)]  \n  \n This is how to create a new instance of the <xref:System.Net.NetworkCredential> class and assign it to this property.  \n  \n [!code-csharp[WindowsClientCredential#3](~/samples/snippets/csharp/VS_Snippets_CFX/windowsclientcredential/cs/source.cs#3)]"
  syntax:
    content: public System.Net.NetworkCredential ClientCredential { get; set; }
    return:
      type: System.Net.NetworkCredential
      description: The <xref href="System.Net.NetworkCredential"></xref> for the client.
  overload: System.ServiceModel.Security.WindowsClientCredential.ClientCredential*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel.Security/WindowsClientCredential.xml
  ms.technology:
  - dotnet-standard
  author: Erikre
  ms.author: erikre
  manager: erikre
references:
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.ServiceModel.Security.WindowsClientCredential.AllowedImpersonationLevel
  parent: System.ServiceModel.Security.WindowsClientCredential
  isExternal: false
  name: AllowedImpersonationLevel
  nameWithType: WindowsClientCredential.AllowedImpersonationLevel
  fullName: WindowsClientCredential.AllowedImpersonationLevel
- uid: System.Security.Principal.TokenImpersonationLevel
  parent: System.Security.Principal
  isExternal: false
  name: TokenImpersonationLevel
  nameWithType: TokenImpersonationLevel
  fullName: System.Security.Principal.TokenImpersonationLevel
- uid: System.ServiceModel.Security.WindowsClientCredential.AllowNtlm
  parent: System.ServiceModel.Security.WindowsClientCredential
  isExternal: false
  name: AllowNtlm
  nameWithType: WindowsClientCredential.AllowNtlm
  fullName: WindowsClientCredential.AllowNtlm
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ServiceModel.Security.WindowsClientCredential.ClientCredential
  parent: System.ServiceModel.Security.WindowsClientCredential
  isExternal: false
  name: ClientCredential
  nameWithType: WindowsClientCredential.ClientCredential
  fullName: WindowsClientCredential.ClientCredential
- uid: System.Net.NetworkCredential
  parent: System.Net
  isExternal: false
  name: NetworkCredential
  nameWithType: NetworkCredential
  fullName: System.Net.NetworkCredential
- uid: System.ServiceModel.Security.WindowsClientCredential.AllowedImpersonationLevel*
  parent: System.ServiceModel.Security.WindowsClientCredential
  isExternal: false
  name: AllowedImpersonationLevel
  nameWithType: WindowsClientCredential.AllowedImpersonationLevel
  fullName: WindowsClientCredential.AllowedImpersonationLevel
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel.Security/WindowsClientCredential.xml
- uid: System.ServiceModel.Security.WindowsClientCredential.AllowNtlm*
  parent: System.ServiceModel.Security.WindowsClientCredential
  isExternal: false
  name: AllowNtlm
  nameWithType: WindowsClientCredential.AllowNtlm
  fullName: WindowsClientCredential.AllowNtlm
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel.Security/WindowsClientCredential.xml
- uid: System.ServiceModel.Security.WindowsClientCredential.ClientCredential*
  parent: System.ServiceModel.Security.WindowsClientCredential
  isExternal: false
  name: ClientCredential
  nameWithType: WindowsClientCredential.ClientCredential
  fullName: WindowsClientCredential.ClientCredential
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel.Security/WindowsClientCredential.xml
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: Object.Equals(Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: Object.Equals(Object, Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: false
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: Object.GetHashCode()
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  nameWithType: Object.GetType()
  fullName: Object.GetType()
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: Object.MemberwiseClone()
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: Object.ReferenceEquals(Object, Object)
- uid: System.Object.ToString
  parent: System.Object
  isExternal: false
  name: ToString()
  nameWithType: Object.ToString()
  fullName: Object.ToString()
