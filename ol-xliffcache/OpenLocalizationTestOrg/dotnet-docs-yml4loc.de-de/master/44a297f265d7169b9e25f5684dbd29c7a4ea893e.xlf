<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">44a297f265d7169b9e25f5684dbd29c7a4ea893e</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.ComponentModel.BackgroundWorker.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6603994b62e8b718a3e9cde2167c3e107ec0d19f</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">587e53001c878d2f5afe090b90a1e05be0fe5704</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Executes an operation on a separate thread.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> class allows you to run an operation on a separate, dedicated thread.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>Time-consuming operations like downloads and database transactions can cause your user interface (UI) to seem as though it has stopped responding while they are running.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you want a responsive UI and you are faced with long delays associated with such operations, the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> class provides a convenient solution.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>To execute a time-consuming operation in the background, create a <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> and listen for events that report the progress of your operation and signal when your operation is finished.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can create the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> programmatically or you can drag it onto your form from the <bpt id="p1">**</bpt>Components<ept id="p1">**</ept> tab of the <bpt id="p2">**</bpt>Toolbox<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you create the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> in the Windows Forms Designer, it will appear in the Component Tray, and its properties will be displayed in the Properties window.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>To set up for a background operation, add an event handler for the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>Call your time-consuming operation in this event handler.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>To start the operation, call <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>To receive notifications of progress updates, handle the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.ProgressChanged&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>To receive a notification when the operation is completed, handle the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>You must be careful not to manipulate any user-interface objects in your <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> event handler.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>Instead, communicate to the user interface through the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.ProgressChanged&gt;</ph> and <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted&gt;</ph> events.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> events are not marshaled across <ph id="ph2">&lt;xref:System.AppDomain&gt;</ph> boundaries.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>Do not use a <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> component to perform multithreaded operations in more than one <ph id="ph2">&lt;xref:System.AppDomain&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>If your background operation requires a parameter, call <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A&gt;</ph> with your parameter.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>Inside the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> event handler, you can extract the parameter from the <ph id="ph2">&lt;xref:System.ComponentModel.DoWorkEventArgs.Argument%2A?displayProperty=fullName&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph>, see <bpt id="p1">[</bpt>How to: Run an Operation in the Background<ept id="p1">](~/docs/framework/winforms/controls/how-to-run-an-operation-in-the-background.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.ComponentModel.BackgroundWorker"&gt;&lt;/xref&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>This constructor initializes a <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Requests cancellation of a pending background operation.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A&gt;</ph> submits a request to terminate the pending background operation and sets the <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A&gt;</ph> property to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you call <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A&gt;</ph>, your worker method has an opportunity to stop its execution and exit.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>The worker code should periodically check the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A&gt;</ph> property to see if it has been set to <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>Be aware that your code in the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> event handler may finish its work as a cancellation request is being made, and your polling loop may miss <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A&gt;</ph> being set to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case, the <ph id="ph1">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A&gt;</ph> flag of <ph id="ph2">&lt;xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=fullName&gt;</ph> in your <ph id="ph3">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted&gt;</ph> event handler will not be set to <ph id="ph4">`true`</ph>, even though a cancellation request was made.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>This situation is called a <bpt id="p1">*</bpt>race condition<ept id="p1">*</ept> and is a common concern in multithreaded programming.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about multithreading design issues, see <bpt id="p1">[</bpt>Managed Threading Best Practices<ept id="p1">](~/docs/standard/threading/managed-threading-best-practices.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation"&gt;&lt;/xref&gt;</ph> is <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Gets a value indicating whether the application has requested cancellation of a background operation.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A&gt;</ph> is <ph id="ph2">`true`</ph>, then the <ph id="ph3">&lt;xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A&gt;</ph> method has been called on the <ph id="ph4">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property is meant for use by the worker thread, which should periodically check <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A&gt;</ph> and abort the background operation when it is set to <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the application has requested cancellation of a background operation; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Occurs when <ph id="ph1">&lt;xref href="System.ComponentModel.BackgroundWorker.RunWorkerAsync"&gt;&lt;/xref&gt;</ph> is called.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event is raised when you call the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is where you start the operation that performs the potentially time-consuming work.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>Your code in the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> event handler should periodically check the <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A&gt;</ph> property value and abort the operation if it is <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>When this occurs, you can set the <ph id="ph1">&lt;xref:System.ComponentModel.CancelEventArgs.Cancel%2A&gt;</ph> flag of <ph id="ph2">&lt;xref:System.ComponentModel.DoWorkEventArgs?displayProperty=fullName&gt;</ph> to <ph id="ph3">`true`</ph>, and the <ph id="ph4">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A&gt;</ph> flag of <ph id="ph5">&lt;xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=fullName&gt;</ph> in your <ph id="ph6">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted&gt;</ph> event handler will be set to <ph id="ph7">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>Be aware that your code in the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> event handler may finish its work as a cancellation request is being made, and your polling loop may miss <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A&gt;</ph> being set to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case, the <ph id="ph1">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A&gt;</ph> flag of <ph id="ph2">&lt;xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=fullName&gt;</ph> in your <ph id="ph3">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted&gt;</ph> event handler will not be set to <ph id="ph4">`true`</ph>, even though a cancellation request was made.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source>This situation is called a <bpt id="p1">*</bpt>race condition<ept id="p1">*</ept> and is a common concern in multithreaded programming.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about multithreading design issues, see <bpt id="p1">[</bpt>Managed Threading Best Practices<ept id="p1">](~/docs/standard/threading/managed-threading-best-practices.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT">
          <source>If your operation produces a result, you can assign the result to the <ph id="ph1">&lt;xref:System.ComponentModel.DoWorkEventArgs.Result%2A?displayProperty=fullName&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source>This will be available to the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted&gt;</ph> event handler in the <ph id="ph2">&lt;xref:System.ComponentModel.RunWorkerCompletedEventArgs.Result%2A?displayProperty=fullName&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the operation raises an exception that your code does not handle, the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> catches the exception and passes it into the <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted&gt;</ph> event handler, where it is exposed as the <ph id="ph3">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A&gt;</ph> property of <ph id="ph4">&lt;xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you are running under the Visual Studio debugger, the debugger will break at the point in the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> event handler where the unhandled exception was raised.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you have more than one <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph>, you should not reference any of them directly, as this would couple your <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> event handler to a specific instance of <ph id="ph3">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT">
          <source>Instead, you should access your <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> by casting the <ph id="ph2">`sender`</ph> parameter in your <ph id="ph3">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> event handler.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT">
          <source>You must be careful not to manipulate any user-interface objects in your <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> event handler.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT">
          <source>Instead, communicate to the user interface through the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> events.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>NIB: Consuming Events<ept id="p1">](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)</ept>.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Gets a value indicating whether the <ph id="ph1">&lt;xref href="System.ComponentModel.BackgroundWorker"&gt;&lt;/xref&gt;</ph> is running an asynchronous operation.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> starts an asynchronous operation when you call <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph>, if the <ph id="ph2">&lt;xref href="System.ComponentModel.BackgroundWorker"&gt;&lt;/xref&gt;</ph> is running an asynchronous operation; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.ComponentModel.BackgroundWorker.DoWork"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.EventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.ComponentModel.BackgroundWorker.ProgressChanged"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>NIB: Raising an Event<ept id="p1">](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)</ept>.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.OnProgressChanged%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the preferred technique for handling the event in a derived class.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.EventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.ComponentModel.BackgroundWorker.RunWorkerCompleted"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>NIB: Raising an Event<ept id="p1">](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)</ept>.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the preferred technique for handling the event in a derived class.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.EventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Occurs when <ph id="ph1">&lt;xref href="System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)"&gt;&lt;/xref&gt;</ph> is called.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event is raised when you call the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>NIB: Consuming Events<ept id="p1">](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)</ept>.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.ComponentModel.BackgroundWorker.ProgressChanged"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you need the background operation to report on its progress, you can call the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A&gt;</ph> method to raise the <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.ProgressChanged&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.WorkerReportsProgress%2A&gt;</ph> property value must be <ph id="ph2">`true`</ph>, or <ph id="ph3">&lt;xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A&gt;</ph> will throw an <ph id="ph4">&lt;xref:System.InvalidOperationException&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is up to you to implement a meaningful way of measuring your background operation's progress as a percentage of the total task completed.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT">
          <source>The call to the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A&gt;</ph> method is asynchronous and returns immediately.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.ProgressChanged&gt;</ph> event handler executes on the thread that created the <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The percentage, from 0 to 100, of the background operation that is complete.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.ComponentModel.BackgroundWorker.WorkerReportsProgress"&gt;&lt;/xref&gt;</ph> property is set to <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.ComponentModel.BackgroundWorker.ProgressChanged"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you need the background operation to report on its progress, you can call the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A&gt;</ph> method to raise the <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.ProgressChanged&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.WorkerReportsProgress%2A&gt;</ph> property value must <ph id="ph2">`true`</ph>, or <ph id="ph3">&lt;xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A&gt;</ph> will throw an <ph id="ph4">&lt;xref:System.InvalidOperationException&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is up to you to implement a meaningful way of measuring your background operation's progress as a percentage of the total task completed.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The percentage, from 0 to 100, of the background operation that is complete.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The state object passed to <ph id="ph1">&lt;xref href="System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.ComponentModel.BackgroundWorker.WorkerReportsProgress"&gt;&lt;/xref&gt;</ph> property is set to <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Starts execution of a background operation.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A&gt;</ph> method submits a request to start the operation running asynchronously.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the request is serviced, the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> event is raised, which in turn starts execution of your background operation.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the background operation is already running, calling <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A&gt;</ph> again will raise an <ph id="ph2">&lt;xref:System.InvalidOperationException&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.ComponentModel.BackgroundWorker.IsBusy"&gt;&lt;/xref&gt;</ph> is <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Starts execution of a background operation.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A&gt;</ph> method submits a request to start the operation running asynchronously.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the request is serviced, the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> event is raised, which in turn starts execution of your background operation.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT">
          <source>If your operation requires a parameter, you can provide it as the <ph id="ph1">`argument`</ph> parameter to <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the background operation is already running, calling <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A&gt;</ph> again will raise an <ph id="ph2">&lt;xref:System.InvalidOperationException&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>A parameter for use by the background operation to be executed in the <ph id="ph1">&lt;xref href="System.ComponentModel.BackgroundWorker.DoWork"&gt;&lt;/xref&gt;</ph> event handler.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.ComponentModel.BackgroundWorker.IsBusy"&gt;&lt;/xref&gt;</ph> is <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Occurs when the background operation has completed, has been canceled, or has raised an exception.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event is raised when the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> event handler returns.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the operation completes successfully and its result is assigned in the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> event handler, you can access the result through the <ph id="ph2">&lt;xref:System.ComponentModel.RunWorkerCompletedEventArgs.Result%2A?displayProperty=fullName&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A&gt;</ph> property of <ph id="ph2">&lt;xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=fullName&gt;</ph> indicates that an exception was thrown by the operation.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A&gt;</ph> property of <ph id="ph2">&lt;xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=fullName&gt;</ph> indicates whether a cancellation request was processed by the background operation.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT">
          <source>If your code in the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> event handler detects a cancellation request by checking the <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A&gt;</ph> flag and setting the <ph id="ph3">&lt;xref:System.ComponentModel.CancelEventArgs.Cancel%2A&gt;</ph> flag of <ph id="ph4">&lt;xref:System.ComponentModel.DoWorkEventArgs?displayProperty=fullName&gt;</ph> to <ph id="ph5">`true`</ph>, the <ph id="ph6">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A&gt;</ph> flag of <ph id="ph7">&lt;xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=fullName&gt;</ph> also will be set to <ph id="ph8">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT">
          <source>Be aware that your code in the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> event handler may finish its work as a cancellation request is being made, and your polling loop may miss <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A&gt;</ph> being set to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case, the <ph id="ph1">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A&gt;</ph> flag of <ph id="ph2">&lt;xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=fullName&gt;</ph> in your <ph id="ph3">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted&gt;</ph> event handler will not be set to <ph id="ph4">`true`</ph>, even though a cancellation request was made.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT">
          <source>This situation is called a <bpt id="p1">*</bpt>race condition<ept id="p1">*</ept> and is a common concern in multithreaded programming.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about multithreading design issues, see <bpt id="p1">[</bpt>Managed Threading Best Practices<ept id="p1">](~/docs/standard/threading/managed-threading-best-practices.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT">
          <source>Your <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted&gt;</ph> event handler should always check the <ph id="ph2">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A?displayProperty=fullName&gt;</ph> and <ph id="ph3">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A?displayProperty=fullName&gt;</ph> properties before accessing the <ph id="ph4">&lt;xref:System.ComponentModel.RunWorkerCompletedEventArgs.Result%2A?displayProperty=fullName&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT">
          <source>If an exception was raised or if the operation was canceled, accessing the <ph id="ph1">&lt;xref:System.ComponentModel.RunWorkerCompletedEventArgs.Result%2A?displayProperty=fullName&gt;</ph> property raises an exception.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Gets or sets a value indicating whether the <ph id="ph1">&lt;xref href="System.ComponentModel.BackgroundWorker"&gt;&lt;/xref&gt;</ph> can report progress updates.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT">
          <source>Set the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.WorkerReportsProgress%2A&gt;</ph> property to <ph id="ph2">`true`</ph> if you want the <ph id="ph3">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> to support progress updates.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT">
          <source>When this property is <ph id="ph1">`true`</ph>, user code can call the <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A&gt;</ph> method to raise the <ph id="ph3">&lt;xref:System.ComponentModel.BackgroundWorker.ProgressChanged&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the <ph id="ph2">&lt;xref href="System.ComponentModel.BackgroundWorker"&gt;&lt;/xref&gt;</ph> supports progress updates; otherwise <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Gets or sets a value indicating whether the <ph id="ph1">&lt;xref href="System.ComponentModel.BackgroundWorker"&gt;&lt;/xref&gt;</ph> supports asynchronous cancellation.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT">
          <source>Set the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation%2A&gt;</ph> property to <ph id="ph2">`true`</ph> if you want the <ph id="ph3">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> to support cancellation.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT">
          <source>When this property is <ph id="ph1">`true`</ph>, you can call the <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A&gt;</ph> method to interrupt a background operation.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the <ph id="ph2">&lt;xref href="System.ComponentModel.BackgroundWorker"&gt;&lt;/xref&gt;</ph> supports cancellation; otherwise <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>