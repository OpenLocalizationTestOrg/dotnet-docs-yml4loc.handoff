{"nodes":[{"content":"Represents a wrapper class for a wait handle.","nodes":[{"pos":[0,45],"content":"Represents a wrapper class for a wait handle.","nodes":[{"content":"Represents a wrapper class for a wait handle.","pos":[0,45]}]}],"pos":[662,708],"yaml":true},{"content":"The <xref:Microsoft.Win32.SafeHandles.SafeWaitHandle> class is used by the <xref:System.Threading.WaitHandle?displayProperty=fullName> class. It is a wrapper for Win32 mutexes and auto and manual reset events.  \n  \n> [!IMPORTANT]\n>  This type implements the <xref:System.IDisposable> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see the \"Using an Object that Implements IDisposable\" section in the <xref:System.IDisposable> interface topic.","nodes":[{"pos":[0,209],"content":"The <xref:Microsoft.Win32.SafeHandles.SafeWaitHandle> class is used by the <xref:System.Threading.WaitHandle?displayProperty=fullName> class. It is a wrapper for Win32 mutexes and auto and manual reset events.","nodes":[{"content":"The <xref:Microsoft.Win32.SafeHandles.SafeWaitHandle> class is used by the <xref:System.Threading.WaitHandle?displayProperty=fullName> class. It is a wrapper for Win32 mutexes and auto and manual reset events.","pos":[0,209],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:Microsoft.Win32.SafeHandles.SafeWaitHandle&gt;</ph> class is used by the <ph id=\"ph2\">&lt;xref:System.Threading.WaitHandle?displayProperty=fullName&gt;</ph> class.","pos":[0,141],"source":"The <xref:Microsoft.Win32.SafeHandles.SafeWaitHandle> class is used by the <xref:System.Threading.WaitHandle?displayProperty=fullName> class."},{"content":"It is a wrapper for Win32 mutexes and auto and manual reset events.","pos":[142,209]}]}]},{"pos":[217,743],"content":"[!IMPORTANT]\n This type implements the <xref:System.IDisposable> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see the \"Using an Object that Implements IDisposable\" section in the <xref:System.IDisposable> interface topic.","leadings":["","> "],"nodes":[{"content":" This type implements the <xref:System.IDisposable> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see the \"Using an Object that Implements IDisposable\" section in the <xref:System.IDisposable> interface topic.","pos":[13,524],"nodes":[{"content":"This type implements the <ph id=\"ph1\">&lt;xref:System.IDisposable&gt;</ph> interface.","pos":[1,62],"source":" This type implements the <xref:System.IDisposable> interface."},{"content":"When you have finished using the type, you should dispose of it either directly or indirectly.","pos":[63,157]},{"content":"To dispose of the type directly, call its <ph id=\"ph1\">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method in a <ph id=\"ph2\">`try`</ph><ph id=\"ph3\">/</ph><ph id=\"ph4\">`catch`</ph> block.","pos":[158,269],"source":" To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block."},{"content":"To dispose of it indirectly, use a language construct such as <ph id=\"ph1\">`using`</ph> (in C#) or <ph id=\"ph2\">`Using`</ph> (in Visual Basic).","pos":[270,377],"source":" To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic)."},{"content":"For more information, see the \"Using an Object that Implements IDisposable\" section in the <ph id=\"ph1\">&lt;xref:System.IDisposable&gt;</ph> interface topic.","pos":[378,511],"source":" For more information, see the \"Using an Object that Implements IDisposable\" section in the <xref:System.IDisposable> interface topic."}]}]}],"pos":[719,1470],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"Microsoft.Win32.SafeHandles.SafeWaitHandle\"></xref> class.","nodes":[{"pos":[0,104],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"Microsoft.Win32.SafeHandles.SafeWaitHandle\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"Microsoft.Win32.SafeHandles.SafeWaitHandle\"></xref> class."}],"pos":[4803,4908],"yaml":true},{"content":"An <xref href=\"System.IntPtr\"></xref> object that represents the pre-existing handle to use.","nodes":[{"pos":[0,92],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.IntPtr\"&gt;&lt;/xref&gt;</ph> object that represents the pre-existing handle to use.","source":"An <xref href=\"System.IntPtr\"></xref> object that represents the pre-existing handle to use."}],"pos":[5652,5745],"yaml":true},{"content":"`true` to reliably release the handle during the finalization phase; `false` to prevent reliable release (not recommended).","nodes":[{"pos":[0,123],"content":"<ph id=\"ph1\">`true`</ph> to reliably release the handle during the finalization phase; <ph id=\"ph2\">`false`</ph> to prevent reliable release (not recommended).","source":"`true` to reliably release the handle during the finalization phase; `false` to prevent reliable release (not recommended)."}],"pos":[5812,5938],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: Microsoft.Win32.SafeHandles.SafeWaitHandle\n  commentId: T:Microsoft.Win32.SafeHandles.SafeWaitHandle\n  id: SafeWaitHandle\n  children:\n  - Microsoft.Win32.SafeHandles.SafeWaitHandle.#ctor(System.IntPtr,System.Boolean)\n  - Microsoft.Win32.SafeHandles.SafeWaitHandle.IsInvalid\n  - Microsoft.Win32.SafeHandles.SafeWaitHandle.ReleaseHandle\n  langs:\n  - csharp\n  name: SafeWaitHandle\n  nameWithType: SafeWaitHandle\n  fullName: Microsoft.Win32.SafeHandles.SafeWaitHandle\n  type: Class\n  assemblies:\n  - System.Runtime.Handles\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: Microsoft.Win32.SafeHandles\n  summary: Represents a wrapper class for a wait handle.\n  remarks: \"The <xref:Microsoft.Win32.SafeHandles.SafeWaitHandle> class is used by the <xref:System.Threading.WaitHandle?displayProperty=fullName> class. It is a wrapper for Win32 mutexes and auto and manual reset events.  \\n  \\n> [!IMPORTANT]\\n>  This type implements the <xref:System.IDisposable> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see the \\\"Using an Object that Implements IDisposable\\\" section in the <xref:System.IDisposable> interface topic.\"\n  example:\n  - \"The following code example demonstrates how to use interop to create a mutex using the <xref:Microsoft.Win32.SafeHandles.SafeWaitHandle> class and the unmanaged `CreateMutex` function.  \\n  \\n [!code-csharp[Microsoft.Win32.SafeHandles.SafeWaitHandle#1](~/samples/snippets/csharp/VS_Snippets_CLR/Microsoft.Win32.SafeHandles.SafeWaitHandle/cs/sample.cs#1)]\\n [!code-vb[Microsoft.Win32.SafeHandles.SafeWaitHandle#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Microsoft.Win32.SafeHandles.SafeWaitHandle/vb/sample.vb#1)]\"\n  syntax:\n    content: >-\n      [System.Security.SecurityCritical]\n\n      public sealed class SafeWaitHandle : Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid\n  inheritance:\n  - System.Object\n  - System.Runtime.InteropServices.SafeHandle\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  - System.Runtime.InteropServices.SafeHandle.Close\n  - System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean@)\n  - System.Runtime.InteropServices.SafeHandle.DangerousGetHandle\n  - System.Runtime.InteropServices.SafeHandle.DangerousRelease\n  - System.Runtime.InteropServices.SafeHandle.Dispose\n  - System.Runtime.InteropServices.SafeHandle.Dispose(System.Boolean)\n  - System.Runtime.InteropServices.SafeHandle.handle\n  - System.Runtime.InteropServices.SafeHandle.IsClosed\n  - System.Runtime.InteropServices.SafeHandle.SetHandle(System.IntPtr)\n  - System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.Win32.SafeHandles/SafeWaitHandle.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: Microsoft.Win32.SafeHandles.SafeWaitHandle.#ctor(System.IntPtr,System.Boolean)\n  commentId: M:Microsoft.Win32.SafeHandles.SafeWaitHandle.#ctor(System.IntPtr,System.Boolean)\n  id: '#ctor(System.IntPtr,System.Boolean)'\n  parent: Microsoft.Win32.SafeHandles.SafeWaitHandle\n  langs:\n  - csharp\n  name: SafeWaitHandle(IntPtr, Boolean)\n  nameWithType: SafeWaitHandle.SafeWaitHandle(IntPtr, Boolean)\n  fullName: SafeWaitHandle.SafeWaitHandle(IntPtr, Boolean)\n  type: Constructor\n  assemblies:\n  - System.Runtime.Handles\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: Microsoft.Win32.SafeHandles\n  summary: Initializes a new instance of the <xref href=\"Microsoft.Win32.SafeHandles.SafeWaitHandle\"></xref> class.\n  remarks: ''\n  example:\n  - \"The following code example demonstrates how to use interop to create a mutex using the <xref:Microsoft.Win32.SafeHandles.SafeWaitHandle> class and the unmanaged `CreateMutex` function.  \\n  \\n [!code-csharp[Microsoft.Win32.SafeHandles.SafeWaitHandle-ctor#1](~/samples/snippets/csharp/VS_Snippets_CLR/Microsoft.Win32.SafeHandles.SafeWaitHandle-ctor/cs/sample.cs#1)]\\n [!code-vb[Microsoft.Win32.SafeHandles.SafeWaitHandle-ctor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Microsoft.Win32.SafeHandles.SafeWaitHandle-ctor/vb/sample.vb#1)]\"\n  syntax:\n    content: public SafeWaitHandle (IntPtr existingHandle, bool ownsHandle);\n    parameters:\n    - id: existingHandle\n      type: System.IntPtr\n      description: An <xref href=\"System.IntPtr\"></xref> object that represents the pre-existing handle to use.\n    - id: ownsHandle\n      type: System.Boolean\n      description: '`true` to reliably release the handle during the finalization phase; `false` to prevent reliable release (not recommended).'\n  overload: Microsoft.Win32.SafeHandles.SafeWaitHandle.#ctor*\n  exceptions: []\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.Win32.SafeHandles/SafeWaitHandle.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: Microsoft.Win32.SafeHandles.SafeWaitHandle.IsInvalid\n  commentId: P:Microsoft.Win32.SafeHandles.SafeWaitHandle.IsInvalid\n  id: IsInvalid\n  parent: Microsoft.Win32.SafeHandles.SafeWaitHandle\n  langs:\n  - csharp\n  name: IsInvalid\n  nameWithType: SafeWaitHandle.IsInvalid\n  fullName: SafeWaitHandle.IsInvalid\n  type: Property\n  assemblies:\n  - System.Runtime.Handles\n  namespace: Microsoft.Win32.SafeHandles\n  syntax:\n    content: >-\n      [get: System.Security.SecurityCritical]\n\n      public override bool IsInvalid { get; }\n    return:\n      type: System.Boolean\n      description: ''\n  overload: Microsoft.Win32.SafeHandles.SafeWaitHandle.IsInvalid*\n  exceptions: []\n  attributes:\n  - type: 'get: System.Security.SecurityCritical'\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.Win32.SafeHandles/SafeWaitHandle.xml\n- uid: Microsoft.Win32.SafeHandles.SafeWaitHandle.ReleaseHandle\n  commentId: M:Microsoft.Win32.SafeHandles.SafeWaitHandle.ReleaseHandle\n  id: ReleaseHandle\n  parent: Microsoft.Win32.SafeHandles.SafeWaitHandle\n  langs:\n  - csharp\n  name: ReleaseHandle()\n  nameWithType: SafeWaitHandle.ReleaseHandle()\n  fullName: SafeWaitHandle.ReleaseHandle()\n  type: Method\n  assemblies:\n  - System.Runtime.Handles\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: Microsoft.Win32.SafeHandles\n  syntax:\n    content: >-\n      [System.Security.SecurityCritical]\n\n      protected override bool ReleaseHandle ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: ''\n  overload: Microsoft.Win32.SafeHandles.SafeWaitHandle.ReleaseHandle*\n  exceptions: []\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.Win32.SafeHandles/SafeWaitHandle.xml\nreferences:\n- uid: System.Runtime.InteropServices.SafeHandle\n  parent: System.Runtime.InteropServices\n  isExternal: false\n  name: SafeHandle\n  nameWithType: SafeHandle\n  fullName: System.Runtime.InteropServices.SafeHandle\n- uid: Microsoft.Win32.SafeHandles.SafeWaitHandle.#ctor(System.IntPtr,System.Boolean)\n  parent: Microsoft.Win32.SafeHandles.SafeWaitHandle\n  isExternal: false\n  name: SafeWaitHandle(IntPtr, Boolean)\n  nameWithType: SafeWaitHandle.SafeWaitHandle(IntPtr, Boolean)\n  fullName: SafeWaitHandle.SafeWaitHandle(IntPtr, Boolean)\n- uid: System.IntPtr\n  parent: System\n  isExternal: false\n  name: IntPtr\n  nameWithType: IntPtr\n  fullName: System.IntPtr\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: Microsoft.Win32.SafeHandles.SafeWaitHandle.IsInvalid\n  parent: Microsoft.Win32.SafeHandles.SafeWaitHandle\n  isExternal: false\n  name: IsInvalid\n  nameWithType: SafeWaitHandle.IsInvalid\n  fullName: SafeWaitHandle.IsInvalid\n- uid: Microsoft.Win32.SafeHandles.SafeWaitHandle.ReleaseHandle\n  parent: Microsoft.Win32.SafeHandles.SafeWaitHandle\n  isExternal: false\n  name: ReleaseHandle()\n  nameWithType: SafeWaitHandle.ReleaseHandle()\n  fullName: SafeWaitHandle.ReleaseHandle()\n- uid: Microsoft.Win32.SafeHandles.SafeWaitHandle.#ctor*\n  parent: Microsoft.Win32.SafeHandles.SafeWaitHandle\n  isExternal: false\n  name: SafeWaitHandle\n  nameWithType: SafeWaitHandle.SafeWaitHandle\n  fullName: SafeWaitHandle.SafeWaitHandle\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.Win32.SafeHandles/SafeWaitHandle.xml\n- uid: Microsoft.Win32.SafeHandles.SafeWaitHandle.IsInvalid*\n  parent: Microsoft.Win32.SafeHandles.SafeWaitHandle\n  isExternal: false\n  name: IsInvalid\n  nameWithType: SafeWaitHandle.IsInvalid\n  fullName: SafeWaitHandle.IsInvalid\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.Win32.SafeHandles/SafeWaitHandle.xml\n- uid: Microsoft.Win32.SafeHandles.SafeWaitHandle.ReleaseHandle*\n  parent: Microsoft.Win32.SafeHandles.SafeWaitHandle\n  isExternal: false\n  name: ReleaseHandle\n  nameWithType: SafeWaitHandle.ReleaseHandle\n  fullName: SafeWaitHandle.ReleaseHandle\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.Win32.SafeHandles/SafeWaitHandle.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.Runtime.InteropServices.SafeHandle.Close\n  parent: System.Runtime.InteropServices.SafeHandle\n  isExternal: false\n  name: Close()\n  nameWithType: SafeHandle.Close()\n  fullName: SafeHandle.Close()\n- uid: System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean@)\n  parent: System.Runtime.InteropServices.SafeHandle\n  isExternal: false\n  name: DangerousAddRef(Boolean)\n  nameWithType: SafeHandle.DangerousAddRef(Boolean)\n  fullName: SafeHandle.DangerousAddRef(Boolean)\n- uid: System.Runtime.InteropServices.SafeHandle.DangerousGetHandle\n  parent: System.Runtime.InteropServices.SafeHandle\n  isExternal: false\n  name: DangerousGetHandle()\n  nameWithType: SafeHandle.DangerousGetHandle()\n  fullName: SafeHandle.DangerousGetHandle()\n- uid: System.Runtime.InteropServices.SafeHandle.DangerousRelease\n  parent: System.Runtime.InteropServices.SafeHandle\n  isExternal: false\n  name: DangerousRelease()\n  nameWithType: SafeHandle.DangerousRelease()\n  fullName: SafeHandle.DangerousRelease()\n- uid: System.Runtime.InteropServices.SafeHandle.Dispose\n  parent: System.Runtime.InteropServices.SafeHandle\n  isExternal: false\n  name: Dispose()\n  nameWithType: SafeHandle.Dispose()\n  fullName: SafeHandle.Dispose()\n- uid: System.Runtime.InteropServices.SafeHandle.Dispose(System.Boolean)\n  parent: System.Runtime.InteropServices.SafeHandle\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: SafeHandle.Dispose(Boolean)\n  fullName: SafeHandle.Dispose(Boolean)\n- uid: System.Runtime.InteropServices.SafeHandle.handle\n  parent: System.Runtime.InteropServices.SafeHandle\n  isExternal: false\n  name: handle\n  nameWithType: SafeHandle.handle\n  fullName: SafeHandle.handle\n- uid: System.Runtime.InteropServices.SafeHandle.IsClosed\n  parent: System.Runtime.InteropServices.SafeHandle\n  isExternal: false\n  name: IsClosed\n  nameWithType: SafeHandle.IsClosed\n  fullName: SafeHandle.IsClosed\n- uid: System.Runtime.InteropServices.SafeHandle.SetHandle(System.IntPtr)\n  parent: System.Runtime.InteropServices.SafeHandle\n  isExternal: false\n  name: SetHandle(IntPtr)\n  nameWithType: SafeHandle.SetHandle(IntPtr)\n  fullName: SafeHandle.SetHandle(IntPtr)\n- uid: System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid\n  parent: System.Runtime.InteropServices.SafeHandle\n  isExternal: false\n  name: SetHandleAsInvalid()\n  nameWithType: SafeHandle.SetHandleAsInvalid()\n  fullName: SafeHandle.SetHandleAsInvalid()\n"}