{"nodes":[{"content":"Provides a means for invoking a workflow as if it were a method call.","nodes":[{"pos":[0,69],"content":"Provides a means for invoking a workflow as if it were a method call.","nodes":[{"content":"Provides a means for invoking a workflow as if it were a method call.","pos":[0,69]}]}],"pos":[3434,3504],"yaml":true},{"content":"<xref:System.Activities.WorkflowInvoker> contains both instance and static methods for invoking workflows synchronously, and instance methods for invoking workflows asynchronously.  \n  \n <xref:System.Activities.WorkflowInvoker> does not allow instance control such as persisting, unloading, or resuming bookmarks. If instance control is desired, use <xref:System.Activities.WorkflowApplication> instead.  \n  \n To execute workflows synchronously with no instance control, call the <xref:System.Activities.WorkflowInvoker.Invoke%2A> method. To execute a workflow asynchronously with no instance control, use the <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A> and <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> method pairs, or the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> method.","nodes":[{"pos":[0,180],"content":"<xref:System.Activities.WorkflowInvoker> contains both instance and static methods for invoking workflows synchronously, and instance methods for invoking workflows asynchronously.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Activities.WorkflowInvoker&gt;</ph> contains both instance and static methods for invoking workflows synchronously, and instance methods for invoking workflows asynchronously.","pos":[0,180],"source":"<xref:System.Activities.WorkflowInvoker> contains both instance and static methods for invoking workflows synchronously, and instance methods for invoking workflows asynchronously."}]},{"pos":[187,403],"content":"<xref:System.Activities.WorkflowInvoker> does not allow instance control such as persisting, unloading, or resuming bookmarks. If instance control is desired, use <xref:System.Activities.WorkflowApplication> instead.","nodes":[{"content":"<xref:System.Activities.WorkflowInvoker> does not allow instance control such as persisting, unloading, or resuming bookmarks. If instance control is desired, use <xref:System.Activities.WorkflowApplication> instead.","pos":[0,216],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Activities.WorkflowInvoker&gt;</ph> does not allow instance control such as persisting, unloading, or resuming bookmarks.","pos":[0,126],"source":"<xref:System.Activities.WorkflowInvoker> does not allow instance control such as persisting, unloading, or resuming bookmarks."},{"content":"If instance control is desired, use <ph id=\"ph1\">&lt;xref:System.Activities.WorkflowApplication&gt;</ph> instead.","pos":[127,216],"source":" If instance control is desired, use <xref:System.Activities.WorkflowApplication> instead."}]}]},{"pos":[410,808],"content":"To execute workflows synchronously with no instance control, call the <xref:System.Activities.WorkflowInvoker.Invoke%2A> method. To execute a workflow asynchronously with no instance control, use the <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A> and <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> method pairs, or the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> method.","nodes":[{"content":"To execute workflows synchronously with no instance control, call the <xref:System.Activities.WorkflowInvoker.Invoke%2A> method. To execute a workflow asynchronously with no instance control, use the <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A> and <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> method pairs, or the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> method.","pos":[0,398],"nodes":[{"content":"To execute workflows synchronously with no instance control, call the <ph id=\"ph1\">&lt;xref:System.Activities.WorkflowInvoker.Invoke%2A&gt;</ph> method.","pos":[0,128],"source":"To execute workflows synchronously with no instance control, call the <xref:System.Activities.WorkflowInvoker.Invoke%2A> method."},{"content":"To execute a workflow asynchronously with no instance control, use the <ph id=\"ph1\">&lt;xref:System.Activities.WorkflowInvoker.BeginInvoke%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Activities.WorkflowInvoker.EndInvoke%2A&gt;</ph> method pairs, or the <ph id=\"ph3\">&lt;xref:System.Activities.WorkflowInvoker.InvokeAsync%2A&gt;</ph> method.","pos":[129,398],"source":" To execute a workflow asynchronously with no instance control, use the <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A> and <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> method pairs, or the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> method."}]}]}],"pos":[3515,4330],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Activities.WorkflowInvoker\"></xref> class.","nodes":[{"pos":[0,95],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Activities.WorkflowInvoker\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.Activities.WorkflowInvoker\"></xref> class."}],"pos":[6107,6203],"yaml":true},{"content":"<xref:System.Activities.WorkflowInvoker> contains both instance and static methods for invoking workflows synchronously, and instance methods for invoking workflows asynchronously.","nodes":[{"pos":[0,180],"content":"<xref:System.Activities.WorkflowInvoker> contains both instance and static methods for invoking workflows synchronously, and instance methods for invoking workflows asynchronously.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Activities.WorkflowInvoker&gt;</ph> contains both instance and static methods for invoking workflows synchronously, and instance methods for invoking workflows asynchronously.","pos":[0,180],"source":"<xref:System.Activities.WorkflowInvoker> contains both instance and static methods for invoking workflows synchronously, and instance methods for invoking workflows asynchronously."}]}],"pos":[6214,6395],"yaml":true,"extradata":"MT"},{"content":"The workflow definition of the workflow to be invoked by this instance of the <xref href=\"System.Activities.WorkflowInvoker\"></xref> class.","nodes":[{"pos":[0,139],"content":"The workflow definition of the workflow to be invoked by this instance of the <ph id=\"ph1\">&lt;xref href=\"System.Activities.WorkflowInvoker\"&gt;&lt;/xref&gt;</ph> class.","source":"The workflow definition of the workflow to be invoked by this instance of the <xref href=\"System.Activities.WorkflowInvoker\"></xref> class."}],"pos":[6849,6989],"yaml":true},{"content":"Invokes a workflow asynchronously using the specified <xref href=\"System.AsyncCallback\"></xref> and user-provided state.","nodes":[{"pos":[0,120],"content":"Invokes a workflow asynchronously using the specified <ph id=\"ph1\">&lt;xref href=\"System.AsyncCallback\"&gt;&lt;/xref&gt;</ph> and user-provided state.","source":"Invokes a workflow asynchronously using the specified <xref href=\"System.AsyncCallback\"></xref> and user-provided state."}],"pos":[8158,8279],"yaml":true},{"content":"To be notified when the workflow is complete and retrieve the output parameters of the workflow, call <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> from the `callback` method. If <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> is called before the workflow completes, it blocks until the workflow completes. To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A> overloads that take a <xref:System.TimeSpan>.  \n  \n This method invokes a workflow asynchronously using the <xref:System.IAsyncResult> asynchronous design pattern. [!INCLUDE[crdefault](~/includes/crdefault-md.md)][Asynchronous Programming Overview](http://go.microsoft.com/fwlink/?LinkId=141764).","nodes":[{"pos":[0,508],"content":"To be notified when the workflow is complete and retrieve the output parameters of the workflow, call <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> from the `callback` method. If <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> is called before the workflow completes, it blocks until the workflow completes. To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A> overloads that take a <xref:System.TimeSpan>.","nodes":[{"content":"To be notified when the workflow is complete and retrieve the output parameters of the workflow, call <ph id=\"ph1\">&lt;xref:System.Activities.WorkflowInvoker.EndInvoke%2A&gt;</ph> from the <ph id=\"ph2\">`callback`</ph> method.","pos":[0,183],"source":"To be notified when the workflow is complete and retrieve the output parameters of the workflow, call <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> from the `callback` method."},{"content":"If <ph id=\"ph1\">&lt;xref:System.Activities.WorkflowInvoker.EndInvoke%2A&gt;</ph> is called before the workflow completes, it blocks until the workflow completes.","pos":[184,321],"source":" If <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> is called before the workflow completes, it blocks until the workflow completes."},{"content":"To configure a time-out interval in which the workflow must complete, use one of the <ph id=\"ph1\">&lt;xref:System.Activities.WorkflowInvoker.BeginInvoke%2A&gt;</ph> overloads that take a <ph id=\"ph2\">&lt;xref:System.TimeSpan&gt;</ph>.","pos":[322,508],"source":" To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A> overloads that take a <xref:System.TimeSpan>."}]},{"pos":[515,759],"content":"This method invokes a workflow asynchronously using the <xref:System.IAsyncResult> asynchronous design pattern. [!INCLUDE[crdefault](~/includes/crdefault-md.md)][Asynchronous Programming Overview](http://go.microsoft.com/fwlink/?LinkId=141764).","nodes":[{"content":"This method invokes a workflow asynchronously using the <ph id=\"ph1\">&lt;xref:System.IAsyncResult&gt;</ph> asynchronous design pattern.","pos":[0,111],"source":"This method invokes a workflow asynchronously using the <xref:System.IAsyncResult> asynchronous design pattern."},{"content":"<ph id=\"ph1\">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph><bpt id=\"p1\">[</bpt>Asynchronous Programming Overview<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=141764)</ept>.","pos":[112,244],"source":"[!INCLUDE[crdefault](~/includes/crdefault-md.md)][Asynchronous Programming Overview](http://go.microsoft.com/fwlink/?LinkId=141764)."}]}],"pos":[8290,9054],"yaml":true,"extradata":"MT"},{"content":"The method to be called when the workflow has completed.","nodes":[{"pos":[0,56],"content":"The method to be called when the workflow has completed.","nodes":[{"content":"The method to be called when the workflow has completed.","pos":[0,56]}]}],"pos":[9991,10048],"yaml":true},{"content":"An optional application-specific object that contains information about the asynchronous operation.","nodes":[{"pos":[0,99],"content":"An optional application-specific object that contains information about the asynchronous operation.","nodes":[{"content":"An optional application-specific object that contains information about the asynchronous operation.","pos":[0,99]}]}],"pos":[10109,10209],"yaml":true},{"content":"A reference to the asynchronous invoke operation.","nodes":[{"pos":[0,49],"content":"A reference to the asynchronous invoke operation.","nodes":[{"content":"A reference to the asynchronous invoke operation.","pos":[0,49]}]}],"pos":[10272,10322],"yaml":true},{"content":"Invokes a workflow asynchronously using the specified <xref href=\"System.Collections.Generic.IDictionary`2\"></xref> of input parameters, <xref href=\"System.AsyncCallback\"></xref>, and user-provided state.","nodes":[{"pos":[0,204],"content":"Invokes a workflow asynchronously using the specified <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IDictionary`2\"&gt;&lt;/xref&gt;</ph> of input parameters, <ph id=\"ph2\">&lt;xref href=\"System.AsyncCallback\"&gt;&lt;/xref&gt;</ph>, and user-provided state.","source":"Invokes a workflow asynchronously using the specified <xref href=\"System.Collections.Generic.IDictionary`2\"></xref> of input parameters, <xref href=\"System.AsyncCallback\"></xref>, and user-provided state."}],"pos":[11785,11990],"yaml":true},{"content":"To be notified when the workflow is complete and retrieve the output parameters of the workflow, call <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> from the `callback` method. If <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> is called before the workflow completes, it blocks until the workflow completes.  To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A> overloads that take a <xref:System.TimeSpan>.  \n  \n This method invokes a workflow asynchronously using the <xref:System.IAsyncResult> asynchronous design pattern. [!INCLUDE[crdefault](~/includes/crdefault-md.md)][Asynchronous Programming Overview](http://go.microsoft.com/fwlink/?LinkId=141764).","nodes":[{"pos":[0,509],"content":"To be notified when the workflow is complete and retrieve the output parameters of the workflow, call <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> from the `callback` method. If <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> is called before the workflow completes, it blocks until the workflow completes.  To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A> overloads that take a <xref:System.TimeSpan>.","nodes":[{"content":"To be notified when the workflow is complete and retrieve the output parameters of the workflow, call <ph id=\"ph1\">&lt;xref:System.Activities.WorkflowInvoker.EndInvoke%2A&gt;</ph> from the <ph id=\"ph2\">`callback`</ph> method.","pos":[0,183],"source":"To be notified when the workflow is complete and retrieve the output parameters of the workflow, call <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> from the `callback` method."},{"content":"If <ph id=\"ph1\">&lt;xref:System.Activities.WorkflowInvoker.EndInvoke%2A&gt;</ph> is called before the workflow completes, it blocks until the workflow completes.","pos":[184,321],"source":" If <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> is called before the workflow completes, it blocks until the workflow completes."},{"content":"To configure a time-out interval in which the workflow must complete, use one of the <ph id=\"ph1\">&lt;xref:System.Activities.WorkflowInvoker.BeginInvoke%2A&gt;</ph> overloads that take a <ph id=\"ph2\">&lt;xref:System.TimeSpan&gt;</ph>.","pos":[323,509],"source":"  To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A> overloads that take a <xref:System.TimeSpan>."}]},{"pos":[516,760],"content":"This method invokes a workflow asynchronously using the <xref:System.IAsyncResult> asynchronous design pattern. [!INCLUDE[crdefault](~/includes/crdefault-md.md)][Asynchronous Programming Overview](http://go.microsoft.com/fwlink/?LinkId=141764).","nodes":[{"content":"This method invokes a workflow asynchronously using the <ph id=\"ph1\">&lt;xref:System.IAsyncResult&gt;</ph> asynchronous design pattern.","pos":[0,111],"source":"This method invokes a workflow asynchronously using the <xref:System.IAsyncResult> asynchronous design pattern."},{"content":"<ph id=\"ph1\">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph><bpt id=\"p1\">[</bpt>Asynchronous Programming Overview<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=141764)</ept>.","pos":[112,244],"source":"[!INCLUDE[crdefault](~/includes/crdefault-md.md)][Asynchronous Programming Overview](http://go.microsoft.com/fwlink/?LinkId=141764)."}]}],"pos":[12001,12766],"yaml":true,"extradata":"MT"},{"content":"The dictionary of input parameters to the workflow, keyed by argument name.","nodes":[{"pos":[0,75],"content":"The dictionary of input parameters to the workflow, keyed by argument name.","nodes":[{"content":"The dictionary of input parameters to the workflow, keyed by argument name.","pos":[0,75]}]}],"pos":[13810,13886],"yaml":true},{"content":"The method to be called when the workflow has completed.","nodes":[{"pos":[0,56],"content":"The method to be called when the workflow has completed.","nodes":[{"content":"The method to be called when the workflow has completed.","pos":[0,56]}]}],"pos":[13957,14014],"yaml":true},{"content":"An optional application-specific object that contains information about the asynchronous operation.","nodes":[{"pos":[0,99],"content":"An optional application-specific object that contains information about the asynchronous operation.","nodes":[{"content":"An optional application-specific object that contains information about the asynchronous operation.","pos":[0,99]}]}],"pos":[14075,14175],"yaml":true},{"content":"A reference to the asynchronous invoke operation.","nodes":[{"pos":[0,49],"content":"A reference to the asynchronous invoke operation.","nodes":[{"content":"A reference to the asynchronous invoke operation.","pos":[0,49]}]}],"pos":[14238,14288],"yaml":true},{"content":"Invokes a workflow asynchronously using the specified time-out interval, <xref href=\"System.AsyncCallback\"></xref>, and user-provided state.","nodes":[{"pos":[0,140],"content":"Invokes a workflow asynchronously using the specified time-out interval, <ph id=\"ph1\">&lt;xref href=\"System.AsyncCallback\"&gt;&lt;/xref&gt;</ph>, and user-provided state.","source":"Invokes a workflow asynchronously using the specified time-out interval, <xref href=\"System.AsyncCallback\"></xref>, and user-provided state."}],"pos":[15541,15682],"yaml":true},{"content":"To be notified when the workflow is complete and retrieve the output parameters of the workflow, call <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> from the `callback` method. If <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> is called before the workflow completes, it blocks until the workflow completes. If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown when the <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> method is called.  \n  \n> [!NOTE]\n>  The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution. A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.  \n  \n This method invokes a workflow asynchronously using the <xref:System.IAsyncResult> asynchronous design pattern. [!INCLUDE[crdefault](~/includes/crdefault-md.md)][Asynchronous Programming Overview](http://go.microsoft.com/fwlink/?LinkId=141764).","nodes":[{"pos":[0,546],"content":"To be notified when the workflow is complete and retrieve the output parameters of the workflow, call <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> from the `callback` method. If <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> is called before the workflow completes, it blocks until the workflow completes. If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown when the <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> method is called.","nodes":[{"content":"To be notified when the workflow is complete and retrieve the output parameters of the workflow, call <ph id=\"ph1\">&lt;xref:System.Activities.WorkflowInvoker.EndInvoke%2A&gt;</ph> from the <ph id=\"ph2\">`callback`</ph> method.","pos":[0,183],"source":"To be notified when the workflow is complete and retrieve the output parameters of the workflow, call <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> from the `callback` method."},{"content":"If <ph id=\"ph1\">&lt;xref:System.Activities.WorkflowInvoker.EndInvoke%2A&gt;</ph> is called before the workflow completes, it blocks until the workflow completes.","pos":[184,321],"source":" If <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> is called before the workflow completes, it blocks until the workflow completes."},{"content":"If the workflow does not complete within the specified time-out interval the workflow is aborted and a <ph id=\"ph1\">&lt;xref:System.TimeoutException&gt;</ph> is thrown when the <ph id=\"ph2\">&lt;xref:System.Activities.WorkflowInvoker.EndInvoke%2A&gt;</ph> method is called.","pos":[322,546],"source":" If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown when the <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> method is called."}]},{"pos":[554,834],"content":"[!NOTE]\n The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution. A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.","leadings":["","> "],"nodes":[{"content":" The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution. A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.","pos":[8,278],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.TimeoutException&gt;</ph> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.","pos":[1,131],"source":" The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution."},{"content":"A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.","pos":[132,270]}]}]},{"pos":[841,1085],"content":"This method invokes a workflow asynchronously using the <xref:System.IAsyncResult> asynchronous design pattern. [!INCLUDE[crdefault](~/includes/crdefault-md.md)][Asynchronous Programming Overview](http://go.microsoft.com/fwlink/?LinkId=141764).","nodes":[{"content":"This method invokes a workflow asynchronously using the <ph id=\"ph1\">&lt;xref:System.IAsyncResult&gt;</ph> asynchronous design pattern.","pos":[0,111],"source":"This method invokes a workflow asynchronously using the <xref:System.IAsyncResult> asynchronous design pattern."},{"content":"<ph id=\"ph1\">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph><bpt id=\"p1\">[</bpt>Asynchronous Programming Overview<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=141764)</ept>.","pos":[112,244],"source":"[!INCLUDE[crdefault](~/includes/crdefault-md.md)][Asynchronous Programming Overview](http://go.microsoft.com/fwlink/?LinkId=141764)."}]}],"pos":[15693,16786],"yaml":true,"extradata":"MT"},{"content":"The interval in which the workflow must complete before it is aborted and a <xref href=\"System.TimeoutException\"></xref> is thrown.","nodes":[{"pos":[0,131],"content":"The interval in which the workflow must complete before it is aborted and a <ph id=\"ph1\">&lt;xref href=\"System.TimeoutException\"&gt;&lt;/xref&gt;</ph> is thrown.","source":"The interval in which the workflow must complete before it is aborted and a <xref href=\"System.TimeoutException\"></xref> is thrown."}],"pos":[17735,17867],"yaml":true},{"content":"The method to be called when the workflow has completed.","nodes":[{"pos":[0,56],"content":"The method to be called when the workflow has completed.","nodes":[{"content":"The method to be called when the workflow has completed.","pos":[0,56]}]}],"pos":[17938,17995],"yaml":true},{"content":"An optional application-specific object that contains information about the asynchronous operation.","nodes":[{"pos":[0,99],"content":"An optional application-specific object that contains information about the asynchronous operation.","nodes":[{"content":"An optional application-specific object that contains information about the asynchronous operation.","pos":[0,99]}]}],"pos":[18056,18156],"yaml":true},{"content":"A reference to the asynchronous invoke operation.","nodes":[{"pos":[0,49],"content":"A reference to the asynchronous invoke operation.","nodes":[{"content":"A reference to the asynchronous invoke operation.","pos":[0,49]}]}],"pos":[18219,18269],"yaml":true},{"content":"Invokes a workflow asynchronously using the specified <xref href=\"System.Collections.Generic.IDictionary`2\"></xref> of input parameters, time-out interval, <xref href=\"System.AsyncCallback\"></xref>, and user-provided state.","nodes":[{"pos":[0,223],"content":"Invokes a workflow asynchronously using the specified <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IDictionary`2\"&gt;&lt;/xref&gt;</ph> of input parameters, time-out interval, <ph id=\"ph2\">&lt;xref href=\"System.AsyncCallback\"&gt;&lt;/xref&gt;</ph>, and user-provided state.","source":"Invokes a workflow asynchronously using the specified <xref href=\"System.Collections.Generic.IDictionary`2\"></xref> of input parameters, time-out interval, <xref href=\"System.AsyncCallback\"></xref>, and user-provided state."}],"pos":[19810,20034],"yaml":true},{"content":"To be notified when the workflow is complete and retrieve the output parameters of the workflow, call <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> from the `callback` method. If <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> is called before the workflow completes, it blocks until the workflow completes. If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown when <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> is called.  \n  \n> [!NOTE]\n>  The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution. A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.  \n  \n This method invokes a workflow asynchronously using the <xref:System.IAsyncResult> asynchronous design pattern. [!INCLUDE[crdefault](~/includes/crdefault-md.md)][Asynchronous Programming Overview](http://go.microsoft.com/fwlink/?LinkId=141764).","nodes":[{"pos":[0,535],"content":"To be notified when the workflow is complete and retrieve the output parameters of the workflow, call <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> from the `callback` method. If <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> is called before the workflow completes, it blocks until the workflow completes. If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown when <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> is called.","nodes":[{"content":"To be notified when the workflow is complete and retrieve the output parameters of the workflow, call <ph id=\"ph1\">&lt;xref:System.Activities.WorkflowInvoker.EndInvoke%2A&gt;</ph> from the <ph id=\"ph2\">`callback`</ph> method.","pos":[0,183],"source":"To be notified when the workflow is complete and retrieve the output parameters of the workflow, call <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> from the `callback` method."},{"content":"If <ph id=\"ph1\">&lt;xref:System.Activities.WorkflowInvoker.EndInvoke%2A&gt;</ph> is called before the workflow completes, it blocks until the workflow completes.","pos":[184,321],"source":" If <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> is called before the workflow completes, it blocks until the workflow completes."},{"content":"If the workflow does not complete within the specified time-out interval the workflow is aborted and a <ph id=\"ph1\">&lt;xref:System.TimeoutException&gt;</ph> is thrown when <ph id=\"ph2\">&lt;xref:System.Activities.WorkflowInvoker.EndInvoke%2A&gt;</ph> is called.","pos":[322,535],"source":" If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown when <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> is called."}]},{"pos":[543,823],"content":"[!NOTE]\n The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution. A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.","leadings":["","> "],"nodes":[{"content":" The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution. A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.","pos":[8,278],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.TimeoutException&gt;</ph> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.","pos":[1,131],"source":" The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution."},{"content":"A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.","pos":[132,270]}]}]},{"pos":[830,1074],"content":"This method invokes a workflow asynchronously using the <xref:System.IAsyncResult> asynchronous design pattern. [!INCLUDE[crdefault](~/includes/crdefault-md.md)][Asynchronous Programming Overview](http://go.microsoft.com/fwlink/?LinkId=141764).","nodes":[{"content":"This method invokes a workflow asynchronously using the <ph id=\"ph1\">&lt;xref:System.IAsyncResult&gt;</ph> asynchronous design pattern.","pos":[0,111],"source":"This method invokes a workflow asynchronously using the <xref:System.IAsyncResult> asynchronous design pattern."},{"content":"<ph id=\"ph1\">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph><bpt id=\"p1\">[</bpt>Asynchronous Programming Overview<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=141764)</ept>.","pos":[112,244],"source":"[!INCLUDE[crdefault](~/includes/crdefault-md.md)][Asynchronous Programming Overview](http://go.microsoft.com/fwlink/?LinkId=141764)."}]}],"pos":[20045,21127],"yaml":true,"extradata":"MT"},{"content":"The dictionary of input parameters to the workflow, keyed by argument name.","nodes":[{"pos":[0,75],"content":"The dictionary of input parameters to the workflow, keyed by argument name.","nodes":[{"content":"The dictionary of input parameters to the workflow, keyed by argument name.","pos":[0,75]}]}],"pos":[22189,22265],"yaml":true},{"content":"The interval in which the workflow must complete before it is aborted and a <xref href=\"System.TimeoutException\"></xref> is thrown.","nodes":[{"pos":[0,131],"content":"The interval in which the workflow must complete before it is aborted and a <ph id=\"ph1\">&lt;xref href=\"System.TimeoutException\"&gt;&lt;/xref&gt;</ph> is thrown.","source":"The interval in which the workflow must complete before it is aborted and a <xref href=\"System.TimeoutException\"></xref> is thrown."}],"pos":[22330,22462],"yaml":true},{"content":"The method to be called when the workflow has completed.","nodes":[{"pos":[0,56],"content":"The method to be called when the workflow has completed.","nodes":[{"content":"The method to be called when the workflow has completed.","pos":[0,56]}]}],"pos":[22533,22590],"yaml":true},{"content":"An optional application-specific object that contains information about the asynchronous operation.","nodes":[{"pos":[0,99],"content":"An optional application-specific object that contains information about the asynchronous operation.","nodes":[{"content":"An optional application-specific object that contains information about the asynchronous operation.","pos":[0,99]}]}],"pos":[22651,22751],"yaml":true},{"content":"A reference to the asynchronous invoke operation.","nodes":[{"pos":[0,49],"content":"A reference to the asynchronous invoke operation.","nodes":[{"content":"A reference to the asynchronous invoke operation.","pos":[0,49]}]}],"pos":[22814,22864],"yaml":true},{"content":"Attempts to cancel the workflow that was invoked with the specified <code>userState</code>.","nodes":[{"pos":[0,91],"content":"Attempts to cancel the workflow that was invoked with the specified <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">userState</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"Attempts to cancel the workflow that was invoked with the specified <code>userState</code>."}],"pos":[23931,24023],"yaml":true},{"content":"Only a workflow invoked by one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads that takes a `userState` parameter can be canceled.  \n  \n If the cancellation succeeds, the <xref:System.ComponentModel.Cancelled%2A> property of the <xref:System.Activities.InvokeCompletedEventArgs> passed to the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler is set to `true`; otherwise, it is set to `false`.","nodes":[{"pos":[0,155],"content":"Only a workflow invoked by one of the <ph id=\"ph1\">&lt;xref:System.Activities.WorkflowInvoker.InvokeAsync%2A&gt;</ph> overloads that takes a <ph id=\"ph2\">`userState`</ph> parameter can be canceled.","source":"Only a workflow invoked by one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads that takes a `userState` parameter can be canceled."},{"pos":[162,433],"content":"If the cancellation succeeds, the <ph id=\"ph1\">&lt;xref:System.ComponentModel.Cancelled%2A&gt;</ph> property of the <ph id=\"ph2\">&lt;xref:System.Activities.InvokeCompletedEventArgs&gt;</ph> passed to the <ph id=\"ph3\">&lt;xref:System.Activities.WorkflowInvoker.InvokeCompleted&gt;</ph> handler is set to <ph id=\"ph4\">`true`</ph>; otherwise, it is set to <ph id=\"ph5\">`false`</ph>.","source":"If the cancellation succeeds, the <xref:System.ComponentModel.Cancelled%2A> property of the <xref:System.Activities.InvokeCompletedEventArgs> passed to the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler is set to `true`; otherwise, it is set to `false`."}],"pos":[24034,24472],"yaml":true,"extradata":"MT"},{"content":"The token for the workflow to cancel.","nodes":[{"pos":[0,37],"content":"The token for the workflow to cancel.","nodes":[{"content":"The token for the workflow to cancel.","pos":[0,37]}]}],"pos":[25197,25235],"yaml":true},{"content":"Returns the results of a workflow that was invoked using one of the <xref href=\"System.Activities.WorkflowInvoker.BeginInvoke*\"></xref> overloads.","nodes":[{"pos":[0,146],"content":"Returns the results of a workflow that was invoked using one of the <ph id=\"ph1\">&lt;xref href=\"System.Activities.WorkflowInvoker.BeginInvoke*\"&gt;&lt;/xref&gt;</ph> overloads.","source":"Returns the results of a workflow that was invoked using one of the <xref href=\"System.Activities.WorkflowInvoker.BeginInvoke*\"></xref> overloads."}],"pos":[26326,26473],"yaml":true},{"content":"To be notified when the workflow is complete and retrieve the output parameters of the workflow, call <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> from the `callback` method specified by <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A>. If <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> is called before the workflow completes, it blocks until the workflow completes.  \n  \n This method returns the result of a workflow invoked asynchronously using the <xref:System.IAsyncResult> asynchronous design pattern. [!INCLUDE[crdefault](~/includes/crdefault-md.md)][Asynchronous Programming Overview](http://go.microsoft.com/fwlink/?LinkId=141764).","nodes":[{"pos":[0,390],"content":"To be notified when the workflow is complete and retrieve the output parameters of the workflow, call <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> from the `callback` method specified by <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A>. If <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> is called before the workflow completes, it blocks until the workflow completes.","nodes":[{"content":"To be notified when the workflow is complete and retrieve the output parameters of the workflow, call <ph id=\"ph1\">&lt;xref:System.Activities.WorkflowInvoker.EndInvoke%2A&gt;</ph> from the <ph id=\"ph2\">`callback`</ph> method specified by <ph id=\"ph3\">&lt;xref:System.Activities.WorkflowInvoker.BeginInvoke%2A&gt;</ph>.","pos":[0,252],"source":"To be notified when the workflow is complete and retrieve the output parameters of the workflow, call <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> from the `callback` method specified by <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A>."},{"content":"If <ph id=\"ph1\">&lt;xref:System.Activities.WorkflowInvoker.EndInvoke%2A&gt;</ph> is called before the workflow completes, it blocks until the workflow completes.","pos":[253,390],"source":" If <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> is called before the workflow completes, it blocks until the workflow completes."}]},{"pos":[397,663],"content":"This method returns the result of a workflow invoked asynchronously using the <xref:System.IAsyncResult> asynchronous design pattern. [!INCLUDE[crdefault](~/includes/crdefault-md.md)][Asynchronous Programming Overview](http://go.microsoft.com/fwlink/?LinkId=141764).","nodes":[{"content":"This method returns the result of a workflow invoked asynchronously using the <ph id=\"ph1\">&lt;xref:System.IAsyncResult&gt;</ph> asynchronous design pattern.","pos":[0,133],"source":"This method returns the result of a workflow invoked asynchronously using the <xref:System.IAsyncResult> asynchronous design pattern."},{"content":"<ph id=\"ph1\">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph><bpt id=\"p1\">[</bpt>Asynchronous Programming Overview<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=141764)</ept>.","pos":[134,266],"source":"[!INCLUDE[crdefault](~/includes/crdefault-md.md)][Asynchronous Programming Overview](http://go.microsoft.com/fwlink/?LinkId=141764)."}]}],"pos":[26484,27152],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.IAsyncResult\"></xref> that references the <xref href=\"System.Activities.WorkflowInvoker.BeginInvoke*\"></xref> operation that started the workflow.","nodes":[{"pos":[0,169],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.IAsyncResult\"&gt;&lt;/xref&gt;</ph> that references the <ph id=\"ph2\">&lt;xref href=\"System.Activities.WorkflowInvoker.BeginInvoke*\"&gt;&lt;/xref&gt;</ph> operation that started the workflow.","source":"The <xref href=\"System.IAsyncResult\"></xref> that references the <xref href=\"System.Activities.WorkflowInvoker.BeginInvoke*\"></xref> operation that started the workflow."}],"pos":[28108,28278],"yaml":true},{"content":"A dictionary of the root activity’s <xref href=\"System.Activities.OutArgument\"></xref> and <xref href=\"System.Activities.InOutArgument\"></xref> values keyed by argument name that represent the outputs of the workflow.","nodes":[{"pos":[0,217],"content":"A dictionary of the root activity’s <ph id=\"ph1\">&lt;xref href=\"System.Activities.OutArgument\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph2\">&lt;xref href=\"System.Activities.InOutArgument\"&gt;&lt;/xref&gt;</ph> values keyed by argument name that represent the outputs of the workflow.","source":"A dictionary of the root activity’s <xref href=\"System.Activities.OutArgument\"></xref> and <xref href=\"System.Activities.InOutArgument\"></xref> values keyed by argument name that represent the outputs of the workflow."}],"pos":[28389,28607],"yaml":true},{"content":"Gets the <xref href=\"System.Collections.ObjectModel.Collection`1\"></xref> of extensions that are available to workflows invoked by a <xref href=\"System.Activities.WorkflowInvoker\"></xref> instance.","nodes":[{"pos":[0,197],"content":"Gets the <ph id=\"ph1\">&lt;xref href=\"System.Collections.ObjectModel.Collection`1\"&gt;&lt;/xref&gt;</ph> of extensions that are available to workflows invoked by a <ph id=\"ph2\">&lt;xref href=\"System.Activities.WorkflowInvoker\"&gt;&lt;/xref&gt;</ph> instance.","source":"Gets the <xref href=\"System.Collections.ObjectModel.Collection`1\"></xref> of extensions that are available to workflows invoked by a <xref href=\"System.Activities.WorkflowInvoker\"></xref> instance."}],"pos":[29599,29797],"yaml":true},{"content":"This property is used by workflow host authors to add extensions to the <xref:System.Activities.WorkflowInvoker> instance so they will be available to workflows invoked by it.","nodes":[{"pos":[0,175],"content":"This property is used by workflow host authors to add extensions to the <xref:System.Activities.WorkflowInvoker> instance so they will be available to workflows invoked by it.","nodes":[{"content":"This property is used by workflow host authors to add extensions to the <ph id=\"ph1\">&lt;xref:System.Activities.WorkflowInvoker&gt;</ph> instance so they will be available to workflows invoked by it.","pos":[0,175],"source":"This property is used by workflow host authors to add extensions to the <xref:System.Activities.WorkflowInvoker> instance so they will be available to workflows invoked by it."}]}],"pos":[29808,29984],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Collections.ObjectModel.Collection`1\"></xref> of extensions that are available to workflows invoked by a <xref href=\"System.Activities.WorkflowInvoker\"></xref> instance.","nodes":[{"pos":[0,192],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.ObjectModel.Collection`1\"&gt;&lt;/xref&gt;</ph> of extensions that are available to workflows invoked by a <ph id=\"ph2\">&lt;xref href=\"System.Activities.WorkflowInvoker\"&gt;&lt;/xref&gt;</ph> instance.","source":"The <xref href=\"System.Collections.ObjectModel.Collection`1\"></xref> of extensions that are available to workflows invoked by a <xref href=\"System.Activities.WorkflowInvoker\"></xref> instance."}],"pos":[30711,30904],"yaml":true},{"content":"Invokes a workflow synchronously using the specified workflow definition, <xref href=\"System.Collections.Generic.IDictionary`2\"></xref> of input parameters, and time-out interval.","nodes":[{"pos":[0,179],"content":"Invokes a workflow synchronously using the specified workflow definition, <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IDictionary`2\"&gt;&lt;/xref&gt;</ph> of input parameters, and time-out interval.","source":"Invokes a workflow synchronously using the specified workflow definition, <xref href=\"System.Collections.Generic.IDictionary`2\"></xref> of input parameters, and time-out interval."}],"pos":[32351,32531],"yaml":true},{"content":"This method blocks until the workflow has completed, including idle time. All workflow execution is guaranteed to execute on the invoking thread. If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.  \n  \n> [!NOTE]\n>  The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution. A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.","nodes":[{"pos":[0,290],"content":"This method blocks until the workflow has completed, including idle time. All workflow execution is guaranteed to execute on the invoking thread. If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.","nodes":[{"content":"This method blocks until the workflow has completed, including idle time. All workflow execution is guaranteed to execute on the invoking thread. If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.","pos":[0,290],"nodes":[{"content":"This method blocks until the workflow has completed, including idle time.","pos":[0,73]},{"content":"All workflow execution is guaranteed to execute on the invoking thread.","pos":[74,145]},{"content":"If the workflow does not complete within the specified time-out interval the workflow is aborted and a <ph id=\"ph1\">&lt;xref:System.TimeoutException&gt;</ph> is thrown.","pos":[146,290],"source":" If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown."}]}]},{"pos":[298,578],"content":"[!NOTE]\n The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution. A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.","leadings":["","> "],"nodes":[{"content":" The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution. A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.","pos":[8,278],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.TimeoutException&gt;</ph> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.","pos":[1,131],"source":" The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution."},{"content":"A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.","pos":[132,270]}]}]}],"pos":[32542,33126],"yaml":true,"extradata":"MT"},{"content":"The workflow definition of the workflow to invoke.","nodes":[{"pos":[0,50],"content":"The workflow definition of the workflow to invoke.","nodes":[{"content":"The workflow definition of the workflow to invoke.","pos":[0,50]}]}],"pos":[34339,34390],"yaml":true},{"content":"The dictionary of input parameters to the workflow, keyed by argument name.","nodes":[{"pos":[0,75],"content":"The dictionary of input parameters to the workflow, keyed by argument name.","nodes":[{"content":"The dictionary of input parameters to the workflow, keyed by argument name.","pos":[0,75]}]}],"pos":[34506,34582],"yaml":true},{"content":"The interval in which the workflow must complete before it is aborted and a <xref href=\"System.TimeoutException\"></xref> is thrown.","nodes":[{"pos":[0,131],"content":"The interval in which the workflow must complete before it is aborted and a <ph id=\"ph1\">&lt;xref href=\"System.TimeoutException\"&gt;&lt;/xref&gt;</ph> is thrown.","source":"The interval in which the workflow must complete before it is aborted and a <xref href=\"System.TimeoutException\"></xref> is thrown."}],"pos":[34647,34779],"yaml":true},{"content":"A dictionary of the root activity’s <xref href=\"System.Activities.OutArgument\"></xref> and <xref href=\"System.Activities.InOutArgument\"></xref> values keyed by argument name that represent the outputs of the workflow.","nodes":[{"pos":[0,217],"content":"A dictionary of the root activity’s <ph id=\"ph1\">&lt;xref href=\"System.Activities.OutArgument\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph2\">&lt;xref href=\"System.Activities.InOutArgument\"&gt;&lt;/xref&gt;</ph> values keyed by argument name that represent the outputs of the workflow.","source":"A dictionary of the root activity’s <xref href=\"System.Activities.OutArgument\"></xref> and <xref href=\"System.Activities.InOutArgument\"></xref> values keyed by argument name that represent the outputs of the workflow."}],"pos":[34890,35108],"yaml":true},{"content":"Invokes a workflow synchronously using the specified workflow definition and time-out interval.","nodes":[{"pos":[0,95],"content":"Invokes a workflow synchronously using the specified workflow definition and time-out interval.","nodes":[{"content":"Invokes a workflow synchronously using the specified workflow definition and time-out interval.","pos":[0,95]}]}],"pos":[36263,36359],"yaml":true},{"content":"This method blocks until the workflow has completed, including idle time. All workflow execution is guaranteed to execute on the invoking thread. If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.  \n  \n> [!NOTE]\n>  The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution. A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.","nodes":[{"pos":[0,290],"content":"This method blocks until the workflow has completed, including idle time. All workflow execution is guaranteed to execute on the invoking thread. If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.","nodes":[{"content":"This method blocks until the workflow has completed, including idle time. All workflow execution is guaranteed to execute on the invoking thread. If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.","pos":[0,290],"nodes":[{"content":"This method blocks until the workflow has completed, including idle time.","pos":[0,73]},{"content":"All workflow execution is guaranteed to execute on the invoking thread.","pos":[74,145]},{"content":"If the workflow does not complete within the specified time-out interval the workflow is aborted and a <ph id=\"ph1\">&lt;xref:System.TimeoutException&gt;</ph> is thrown.","pos":[146,290],"source":" If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown."}]}]},{"pos":[298,578],"content":"[!NOTE]\n The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution. A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.","leadings":["","> "],"nodes":[{"content":" The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution. A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.","pos":[8,278],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.TimeoutException&gt;</ph> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.","pos":[1,131],"source":" The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution."},{"content":"A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.","pos":[132,270]}]}]}],"pos":[36370,36954],"yaml":true,"extradata":"MT"},{"content":"The workflow definition of the workflow to invoke.","nodes":[{"pos":[0,50],"content":"The workflow definition of the workflow to invoke.","nodes":[{"content":"The workflow definition of the workflow to invoke.","pos":[0,50]}]}],"pos":[38095,38146],"yaml":true},{"content":"The interval in which the workflow must complete before it is aborted and a <xref href=\"System.TimeoutException\"></xref> is thrown.","nodes":[{"pos":[0,131],"content":"The interval in which the workflow must complete before it is aborted and a <ph id=\"ph1\">&lt;xref href=\"System.TimeoutException\"&gt;&lt;/xref&gt;</ph> is thrown.","source":"The interval in which the workflow must complete before it is aborted and a <xref href=\"System.TimeoutException\"></xref> is thrown."}],"pos":[38211,38343],"yaml":true},{"content":"A dictionary of the root activity’s <xref href=\"System.Activities.OutArgument\"></xref> and <xref href=\"System.Activities.InOutArgument\"></xref> values keyed by argument name that represent the outputs of the workflow.","nodes":[{"pos":[0,217],"content":"A dictionary of the root activity’s <ph id=\"ph1\">&lt;xref href=\"System.Activities.OutArgument\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph2\">&lt;xref href=\"System.Activities.InOutArgument\"&gt;&lt;/xref&gt;</ph> values keyed by argument name that represent the outputs of the workflow.","source":"A dictionary of the root activity’s <xref href=\"System.Activities.OutArgument\"></xref> and <xref href=\"System.Activities.InOutArgument\"></xref> values keyed by argument name that represent the outputs of the workflow."}],"pos":[38454,38672],"yaml":true},{"content":"Invokes a workflow synchronously using the specified workflow definition and <xref href=\"System.Collections.Generic.IDictionary`2\"></xref> of input parameters.","nodes":[{"pos":[0,159],"content":"Invokes a workflow synchronously using the specified workflow definition and <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IDictionary`2\"&gt;&lt;/xref&gt;</ph> of input parameters.","source":"Invokes a workflow synchronously using the specified workflow definition and <xref href=\"System.Collections.Generic.IDictionary`2\"></xref> of input parameters."}],"pos":[40037,40197],"yaml":true},{"content":"This method blocks until the workflow has completed, including idle time. All workflow execution is guaranteed to execute on the invoking thread. To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>.","nodes":[{"pos":[0,327],"content":"This method blocks until the workflow has completed, including idle time. All workflow execution is guaranteed to execute on the invoking thread. To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>.","nodes":[{"content":"This method blocks until the workflow has completed, including idle time. All workflow execution is guaranteed to execute on the invoking thread. To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>.","pos":[0,327],"nodes":[{"content":"This method blocks until the workflow has completed, including idle time.","pos":[0,73]},{"content":"All workflow execution is guaranteed to execute on the invoking thread.","pos":[74,145]},{"content":"To configure a time-out interval in which the workflow must complete, use one of the <ph id=\"ph1\">&lt;xref:System.Activities.WorkflowInvoker.Invoke%2A&gt;</ph> overloads that take a <ph id=\"ph2\">&lt;xref:System.TimeSpan&gt;</ph>.","pos":[146,327],"source":" To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>."}]}]}],"pos":[40208,40536],"yaml":true,"extradata":"MT"},{"content":"The workflow definition of the workflow to invoke.","nodes":[{"pos":[0,50],"content":"The workflow definition of the workflow to invoke.","nodes":[{"content":"The workflow definition of the workflow to invoke.","pos":[0,50]}]}],"pos":[42549,42600],"yaml":true},{"content":"The dictionary of input parameters to the workflow, keyed by argument name.","nodes":[{"pos":[0,75],"content":"The dictionary of input parameters to the workflow, keyed by argument name.","nodes":[{"content":"The dictionary of input parameters to the workflow, keyed by argument name.","pos":[0,75]}]}],"pos":[42716,42792],"yaml":true},{"content":"A dictionary of the root activity’s <xref href=\"System.Activities.OutArgument\"></xref> and <xref href=\"System.Activities.InOutArgument\"></xref> values keyed by argument name that represent the outputs of the workflow.","nodes":[{"pos":[0,217],"content":"A dictionary of the root activity’s <ph id=\"ph1\">&lt;xref href=\"System.Activities.OutArgument\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph2\">&lt;xref href=\"System.Activities.InOutArgument\"&gt;&lt;/xref&gt;</ph> values keyed by argument name that represent the outputs of the workflow.","source":"A dictionary of the root activity’s <xref href=\"System.Activities.OutArgument\"></xref> and <xref href=\"System.Activities.InOutArgument\"></xref> values keyed by argument name that represent the outputs of the workflow."}],"pos":[42903,43121],"yaml":true},{"content":"Invokes the activity passed to the <xref href=\"System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)\"></xref> constructor synchronously with the specified <xref href=\"System.Collections.Generic.IDictionary`2\"></xref> of input parameters and the specified time-out interval.","nodes":[{"pos":[0,287],"content":"Invokes the activity passed to the <ph id=\"ph1\">&lt;xref href=\"System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)\"&gt;&lt;/xref&gt;</ph> constructor synchronously with the specified <ph id=\"ph2\">&lt;xref href=\"System.Collections.Generic.IDictionary`2\"&gt;&lt;/xref&gt;</ph> of input parameters and the specified time-out interval.","source":"Invokes the activity passed to the <xref href=\"System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)\"></xref> constructor synchronously with the specified <xref href=\"System.Collections.Generic.IDictionary`2\"></xref> of input parameters and the specified time-out interval."}],"pos":[44453,44741],"yaml":true},{"content":"This method blocks until the workflow has completed, including idle time. All workflow execution is guaranteed to execute on the invoking thread. If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.  \n  \n> [!NOTE]\n>  The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution. A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.","nodes":[{"pos":[0,290],"content":"This method blocks until the workflow has completed, including idle time. All workflow execution is guaranteed to execute on the invoking thread. If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.","nodes":[{"content":"This method blocks until the workflow has completed, including idle time. All workflow execution is guaranteed to execute on the invoking thread. If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.","pos":[0,290],"nodes":[{"content":"This method blocks until the workflow has completed, including idle time.","pos":[0,73]},{"content":"All workflow execution is guaranteed to execute on the invoking thread.","pos":[74,145]},{"content":"If the workflow does not complete within the specified time-out interval the workflow is aborted and a <ph id=\"ph1\">&lt;xref:System.TimeoutException&gt;</ph> is thrown.","pos":[146,290],"source":" If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown."}]}]},{"pos":[298,578],"content":"[!NOTE]\n The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution. A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.","leadings":["","> "],"nodes":[{"content":" The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution. A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.","pos":[8,278],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.TimeoutException&gt;</ph> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.","pos":[1,131],"source":" The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution."},{"content":"A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.","pos":[132,270]}]}]}],"pos":[44752,45336],"yaml":true,"extradata":"MT"},{"content":"The dictionary of input parameters to the workflow, keyed by argument name.","nodes":[{"pos":[0,75],"content":"The dictionary of input parameters to the workflow, keyed by argument name.","nodes":[{"content":"The dictionary of input parameters to the workflow, keyed by argument name.","pos":[0,75]}]}],"pos":[46767,46843],"yaml":true},{"content":"The interval in which the workflow must complete before it is aborted and a <xref href=\"System.TimeoutException\"></xref> is thrown.","nodes":[{"pos":[0,131],"content":"The interval in which the workflow must complete before it is aborted and a <ph id=\"ph1\">&lt;xref href=\"System.TimeoutException\"&gt;&lt;/xref&gt;</ph> is thrown.","source":"The interval in which the workflow must complete before it is aborted and a <xref href=\"System.TimeoutException\"></xref> is thrown."}],"pos":[46908,47040],"yaml":true},{"content":"A dictionary of the root activity’s <xref href=\"System.Activities.OutArgument\"></xref> and <xref href=\"System.Activities.InOutArgument\"></xref> values keyed by argument name that represent the outputs of the workflow.","nodes":[{"pos":[0,217],"content":"A dictionary of the root activity’s <ph id=\"ph1\">&lt;xref href=\"System.Activities.OutArgument\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph2\">&lt;xref href=\"System.Activities.InOutArgument\"&gt;&lt;/xref&gt;</ph> values keyed by argument name that represent the outputs of the workflow.","source":"A dictionary of the root activity’s <xref href=\"System.Activities.OutArgument\"></xref> and <xref href=\"System.Activities.InOutArgument\"></xref> values keyed by argument name that represent the outputs of the workflow."}],"pos":[47151,47369],"yaml":true},{"content":"Invokes the activity passed to the <xref href=\"System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)\"></xref> constructor synchronously with the specified <xref href=\"System.Collections.Generic.IDictionary`2\"></xref> of input parameters.","nodes":[{"pos":[0,251],"content":"Invokes the activity passed to the <ph id=\"ph1\">&lt;xref href=\"System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)\"&gt;&lt;/xref&gt;</ph> constructor synchronously with the specified <ph id=\"ph2\">&lt;xref href=\"System.Collections.Generic.IDictionary`2\"&gt;&lt;/xref&gt;</ph> of input parameters.","source":"Invokes the activity passed to the <xref href=\"System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)\"></xref> constructor synchronously with the specified <xref href=\"System.Collections.Generic.IDictionary`2\"></xref> of input parameters."}],"pos":[48623,48875],"yaml":true},{"content":"This method blocks until the workflow has completed, including idle time. All workflow execution is guaranteed to execute on the invoking thread. To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>.","nodes":[{"pos":[0,327],"content":"This method blocks until the workflow has completed, including idle time. All workflow execution is guaranteed to execute on the invoking thread. To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>.","nodes":[{"content":"This method blocks until the workflow has completed, including idle time. All workflow execution is guaranteed to execute on the invoking thread. To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>.","pos":[0,327],"nodes":[{"content":"This method blocks until the workflow has completed, including idle time.","pos":[0,73]},{"content":"All workflow execution is guaranteed to execute on the invoking thread.","pos":[74,145]},{"content":"To configure a time-out interval in which the workflow must complete, use one of the <ph id=\"ph1\">&lt;xref:System.Activities.WorkflowInvoker.Invoke%2A&gt;</ph> overloads that take a <ph id=\"ph2\">&lt;xref:System.TimeSpan&gt;</ph>.","pos":[146,327],"source":" To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>."}]}]}],"pos":[48886,49214],"yaml":true,"extradata":"MT"},{"content":"The dictionary of input parameters to the workflow, keyed by argument name.","nodes":[{"pos":[0,75],"content":"The dictionary of input parameters to the workflow, keyed by argument name.","nodes":[{"content":"The dictionary of input parameters to the workflow, keyed by argument name.","pos":[0,75]}]}],"pos":[51247,51323],"yaml":true},{"content":"A dictionary of the root activity’s <xref href=\"System.Activities.OutArgument\"></xref> and <xref href=\"System.Activities.InOutArgument\"></xref> values keyed by argument name that represent the outputs of the workflow.","nodes":[{"pos":[0,217],"content":"A dictionary of the root activity’s <ph id=\"ph1\">&lt;xref href=\"System.Activities.OutArgument\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph2\">&lt;xref href=\"System.Activities.InOutArgument\"&gt;&lt;/xref&gt;</ph> values keyed by argument name that represent the outputs of the workflow.","source":"A dictionary of the root activity’s <xref href=\"System.Activities.OutArgument\"></xref> and <xref href=\"System.Activities.InOutArgument\"></xref> values keyed by argument name that represent the outputs of the workflow."}],"pos":[51434,51652],"yaml":true},{"content":"Invokes a workflow synchronously using the specified workflow definition.","nodes":[{"pos":[0,73],"content":"Invokes a workflow synchronously using the specified workflow definition.","nodes":[{"content":"Invokes a workflow synchronously using the specified workflow definition.","pos":[0,73]}]}],"pos":[52729,52803],"yaml":true},{"content":"This method blocks until the workflow has completed, including idle time. All workflow execution is guaranteed to execute on the invoking thread. To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>.","nodes":[{"pos":[0,327],"content":"This method blocks until the workflow has completed, including idle time. All workflow execution is guaranteed to execute on the invoking thread. To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>.","nodes":[{"content":"This method blocks until the workflow has completed, including idle time. All workflow execution is guaranteed to execute on the invoking thread. To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>.","pos":[0,327],"nodes":[{"content":"This method blocks until the workflow has completed, including idle time.","pos":[0,73]},{"content":"All workflow execution is guaranteed to execute on the invoking thread.","pos":[74,145]},{"content":"To configure a time-out interval in which the workflow must complete, use one of the <ph id=\"ph1\">&lt;xref:System.Activities.WorkflowInvoker.Invoke%2A&gt;</ph> overloads that take a <ph id=\"ph2\">&lt;xref:System.TimeSpan&gt;</ph>.","pos":[146,327],"source":" To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>."}]}]}],"pos":[52814,53142],"yaml":true,"extradata":"MT"},{"content":"The workflow definition of the workflow to invoke.","nodes":[{"pos":[0,50],"content":"The workflow definition of the workflow to invoke.","nodes":[{"content":"The workflow definition of the workflow to invoke.","pos":[0,50]}]}],"pos":[54405,54456],"yaml":true},{"content":"A dictionary of the root activity’s <xref href=\"System.Activities.OutArgument\"></xref> and <xref href=\"System.Activities.InOutArgument\"></xref> values keyed by argument name that represent the outputs of the workflow.","nodes":[{"pos":[0,217],"content":"A dictionary of the root activity’s <ph id=\"ph1\">&lt;xref href=\"System.Activities.OutArgument\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph2\">&lt;xref href=\"System.Activities.InOutArgument\"&gt;&lt;/xref&gt;</ph> values keyed by argument name that represent the outputs of the workflow.","source":"A dictionary of the root activity’s <xref href=\"System.Activities.OutArgument\"></xref> and <xref href=\"System.Activities.InOutArgument\"></xref> values keyed by argument name that represent the outputs of the workflow."}],"pos":[54567,54785],"yaml":true},{"content":"Invokes a workflow synchronously using the workflow definition passed to the <xref href=\"System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)\"></xref> constructor.","nodes":[{"pos":[0,178],"content":"Invokes a workflow synchronously using the workflow definition passed to the <ph id=\"ph1\">&lt;xref href=\"System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)\"&gt;&lt;/xref&gt;</ph> constructor.","source":"Invokes a workflow synchronously using the workflow definition passed to the <xref href=\"System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)\"></xref> constructor."}],"pos":[55754,55933],"yaml":true},{"content":"This method blocks until the workflow has completed, including idle time. All workflow execution is guaranteed to execute on the invoking thread. To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>.","nodes":[{"pos":[0,327],"content":"This method blocks until the workflow has completed, including idle time. All workflow execution is guaranteed to execute on the invoking thread. To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>.","nodes":[{"content":"This method blocks until the workflow has completed, including idle time. All workflow execution is guaranteed to execute on the invoking thread. To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>.","pos":[0,327],"nodes":[{"content":"This method blocks until the workflow has completed, including idle time.","pos":[0,73]},{"content":"All workflow execution is guaranteed to execute on the invoking thread.","pos":[74,145]},{"content":"To configure a time-out interval in which the workflow must complete, use one of the <ph id=\"ph1\">&lt;xref:System.Activities.WorkflowInvoker.Invoke%2A&gt;</ph> overloads that take a <ph id=\"ph2\">&lt;xref:System.TimeSpan&gt;</ph>.","pos":[146,327],"source":" To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>."}]}]}],"pos":[55944,56272],"yaml":true,"extradata":"MT"},{"content":"A dictionary of the root activity’s <xref href=\"System.Activities.OutArgument\"></xref> and <xref href=\"System.Activities.InOutArgument\"></xref> values keyed by argument name that represent the outputs of the workflow.","nodes":[{"pos":[0,217],"content":"A dictionary of the root activity’s <ph id=\"ph1\">&lt;xref href=\"System.Activities.OutArgument\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph2\">&lt;xref href=\"System.Activities.InOutArgument\"&gt;&lt;/xref&gt;</ph> values keyed by argument name that represent the outputs of the workflow.","source":"A dictionary of the root activity’s <xref href=\"System.Activities.OutArgument\"></xref> and <xref href=\"System.Activities.InOutArgument\"></xref> values keyed by argument name that represent the outputs of the workflow."}],"pos":[57641,57859],"yaml":true},{"content":"Invokes a workflow synchronously with the specified time-out interval.","nodes":[{"pos":[0,70],"content":"Invokes a workflow synchronously with the specified time-out interval.","nodes":[{"content":"Invokes a workflow synchronously with the specified time-out interval.","pos":[0,70]}]}],"pos":[58903,58974],"yaml":true},{"content":"This method blocks until the workflow has completed, including idle time. All workflow execution is guaranteed to execute on the invoking thread. If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.  \n  \n> [!NOTE]\n>  The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution. A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.","nodes":[{"pos":[0,290],"content":"This method blocks until the workflow has completed, including idle time. All workflow execution is guaranteed to execute on the invoking thread. If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.","nodes":[{"content":"This method blocks until the workflow has completed, including idle time. All workflow execution is guaranteed to execute on the invoking thread. If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.","pos":[0,290],"nodes":[{"content":"This method blocks until the workflow has completed, including idle time.","pos":[0,73]},{"content":"All workflow execution is guaranteed to execute on the invoking thread.","pos":[74,145]},{"content":"If the workflow does not complete within the specified time-out interval the workflow is aborted and a <ph id=\"ph1\">&lt;xref:System.TimeoutException&gt;</ph> is thrown.","pos":[146,290],"source":" If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown."}]}]},{"pos":[298,578],"content":"[!NOTE]\n The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution. A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.","leadings":["","> "],"nodes":[{"content":" The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution. A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.","pos":[8,278],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.TimeoutException&gt;</ph> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.","pos":[1,131],"source":" The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution."},{"content":"A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.","pos":[132,270]}]}]}],"pos":[58985,59569],"yaml":true,"extradata":"MT"},{"content":"The interval in which the workflow must complete before it is aborted and a <xref href=\"System.TimeoutException\"></xref> is thrown.","nodes":[{"pos":[0,131],"content":"The interval in which the workflow must complete before it is aborted and a <ph id=\"ph1\">&lt;xref href=\"System.TimeoutException\"&gt;&lt;/xref&gt;</ph> is thrown.","source":"The interval in which the workflow must complete before it is aborted and a <xref href=\"System.TimeoutException\"></xref> is thrown."}],"pos":[60877,61009],"yaml":true},{"content":"A dictionary of the root activity’s <xref href=\"System.Activities.OutArgument\"></xref> and <xref href=\"System.Activities.InOutArgument\"></xref> values keyed by argument name that represent the outputs of the workflow.","nodes":[{"pos":[0,217],"content":"A dictionary of the root activity’s <ph id=\"ph1\">&lt;xref href=\"System.Activities.OutArgument\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph2\">&lt;xref href=\"System.Activities.InOutArgument\"&gt;&lt;/xref&gt;</ph> values keyed by argument name that represent the outputs of the workflow.","source":"A dictionary of the root activity’s <xref href=\"System.Activities.OutArgument\"></xref> and <xref href=\"System.Activities.InOutArgument\"></xref> values keyed by argument name that represent the outputs of the workflow."}],"pos":[61120,61338],"yaml":true},{"content":"Invokes a workflow synchronously using the workflow definition passed to the <xref href=\"System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)\"></xref> constructor.","nodes":[{"pos":[0,178],"content":"Invokes a workflow synchronously using the workflow definition passed to the <ph id=\"ph1\">&lt;xref href=\"System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)\"&gt;&lt;/xref&gt;</ph> constructor.","source":"Invokes a workflow synchronously using the workflow definition passed to the <xref href=\"System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)\"></xref> constructor."}],"pos":[62493,62672],"yaml":true},{"content":"This method blocks until the workflow has completed, including idle time. All workflow execution is guaranteed to execute on the invoking thread. To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>.","nodes":[{"pos":[0,327],"content":"This method blocks until the workflow has completed, including idle time. All workflow execution is guaranteed to execute on the invoking thread. To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>.","nodes":[{"content":"This method blocks until the workflow has completed, including idle time. All workflow execution is guaranteed to execute on the invoking thread. To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>.","pos":[0,327],"nodes":[{"content":"This method blocks until the workflow has completed, including idle time.","pos":[0,73]},{"content":"All workflow execution is guaranteed to execute on the invoking thread.","pos":[74,145]},{"content":"To configure a time-out interval in which the workflow must complete, use one of the <ph id=\"ph1\">&lt;xref:System.Activities.WorkflowInvoker.Invoke%2A&gt;</ph> overloads that take a <ph id=\"ph2\">&lt;xref:System.TimeSpan&gt;</ph>.","pos":[146,327],"source":" To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>."}]}]}],"pos":[62683,63011],"yaml":true,"extradata":"MT"},{"content":"The workflow definition of the workflow to invoke. The workflow definition needs to derive from <xref href=\"System.Activities.ActivityWithResult\"></xref>.","nodes":[{"pos":[0,154],"content":"The workflow definition of the workflow to invoke. The workflow definition needs to derive from <xref href=\"System.Activities.ActivityWithResult\"></xref>.","nodes":[{"content":"The workflow definition of the workflow to invoke.","pos":[0,50]},{"content":"The workflow definition needs to derive from <ph id=\"ph1\">&lt;xref href=\"System.Activities.ActivityWithResult\"&gt;&lt;/xref&gt;</ph>.","pos":[51,154],"source":" The workflow definition needs to derive from <xref href=\"System.Activities.ActivityWithResult\"></xref>."}]}],"pos":[64199,64354],"yaml":true},{"content":"The type of the workflow.","nodes":[{"pos":[0,25],"content":"The type of the workflow.","nodes":[{"content":"The type of the workflow.","pos":[0,25]}]}],"pos":[64411,64437],"yaml":true},{"content":"A value of type TResult with the result of the execution of the activity.","nodes":[{"pos":[0,73],"content":"A value of type TResult with the result of the execution of the activity.","nodes":[{"content":"A value of type TResult with the result of the execution of the activity.","pos":[0,73]}]}],"pos":[64488,64562],"yaml":true},{"content":"Invokes a workflow synchronously using the specified workflow definition and <xref href=\"System.Collections.Generic.IDictionary`2\"></xref> of input parameters.","nodes":[{"pos":[0,159],"content":"Invokes a workflow synchronously using the specified workflow definition and <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IDictionary`2\"&gt;&lt;/xref&gt;</ph> of input parameters.","source":"Invokes a workflow synchronously using the specified workflow definition and <xref href=\"System.Collections.Generic.IDictionary`2\"></xref> of input parameters."}],"pos":[66008,66168],"yaml":true},{"content":"This method blocks until the workflow has completed, including idle time. All workflow execution is guaranteed to execute on the invoking thread. To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>.  \n  \n> [!NOTE]\n>  The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution. A workflow that takes longer than the specified time-out interval to complete, completes successfully if the workflow does not become idle.","nodes":[{"pos":[0,327],"content":"This method blocks until the workflow has completed, including idle time. All workflow execution is guaranteed to execute on the invoking thread. To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>.","nodes":[{"content":"This method blocks until the workflow has completed, including idle time. All workflow execution is guaranteed to execute on the invoking thread. To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>.","pos":[0,327],"nodes":[{"content":"This method blocks until the workflow has completed, including idle time.","pos":[0,73]},{"content":"All workflow execution is guaranteed to execute on the invoking thread.","pos":[74,145]},{"content":"To configure a time-out interval in which the workflow must complete, use one of the <ph id=\"ph1\">&lt;xref:System.Activities.WorkflowInvoker.Invoke%2A&gt;</ph> overloads that take a <ph id=\"ph2\">&lt;xref:System.TimeSpan&gt;</ph>.","pos":[146,327],"source":" To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>."}]}]},{"pos":[335,616],"content":"[!NOTE]\n The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution. A workflow that takes longer than the specified time-out interval to complete, completes successfully if the workflow does not become idle.","leadings":["","> "],"nodes":[{"content":" The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution. A workflow that takes longer than the specified time-out interval to complete, completes successfully if the workflow does not become idle.","pos":[8,279],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.TimeoutException&gt;</ph> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.","pos":[1,131],"source":" The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution."},{"content":"A workflow that takes longer than the specified time-out interval to complete, completes successfully if the workflow does not become idle.","pos":[132,271]}]}]}],"pos":[66179,66801],"yaml":true,"extradata":"MT"},{"content":"The workflow definition of the workflow to invoke.","nodes":[{"pos":[0,50],"content":"The workflow definition of the workflow to invoke.","nodes":[{"content":"The workflow definition of the workflow to invoke.","pos":[0,50]}]}],"pos":[68051,68102],"yaml":true},{"content":"The dictionary of input parameters to the workflow, keyed by argument name.","nodes":[{"pos":[0,75],"content":"The dictionary of input parameters to the workflow, keyed by argument name.","nodes":[{"content":"The dictionary of input parameters to the workflow, keyed by argument name.","pos":[0,75]}]}],"pos":[68218,68294],"yaml":true},{"content":"The type of the workflow.","nodes":[{"pos":[0,25],"content":"The type of the workflow.","nodes":[{"content":"The type of the workflow.","pos":[0,25]}]}],"pos":[68351,68377],"yaml":true},{"content":"A value of type TResult with the result of the execution of the activity.","nodes":[{"pos":[0,73],"content":"A value of type TResult with the result of the execution of the activity.","nodes":[{"content":"A value of type TResult with the result of the execution of the activity.","pos":[0,73]}]}],"pos":[68428,68502],"yaml":true},{"content":"Invokes a workflow synchronously using the specified workflow definition, <xref href=\"System.Collections.Generic.IDictionary`2\"></xref> of input parameters, and time-out interval.","nodes":[{"pos":[0,179],"content":"Invokes a workflow synchronously using the specified workflow definition, <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IDictionary`2\"&gt;&lt;/xref&gt;</ph> of input parameters, and time-out interval.","source":"Invokes a workflow synchronously using the specified workflow definition, <xref href=\"System.Collections.Generic.IDictionary`2\"></xref> of input parameters, and time-out interval."}],"pos":[70026,70206],"yaml":true},{"content":"This method blocks until the workflow has completed, including idle time. All workflow execution is guaranteed to execute on the invoking thread. If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.  \n  \n> [!NOTE]\n>  The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution. A workflow that takes longer than the specified time-out interval to complete, completes successfully if the workflow does not become idle.","nodes":[{"pos":[0,290],"content":"This method blocks until the workflow has completed, including idle time. All workflow execution is guaranteed to execute on the invoking thread. If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.","nodes":[{"content":"This method blocks until the workflow has completed, including idle time. All workflow execution is guaranteed to execute on the invoking thread. If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.","pos":[0,290],"nodes":[{"content":"This method blocks until the workflow has completed, including idle time.","pos":[0,73]},{"content":"All workflow execution is guaranteed to execute on the invoking thread.","pos":[74,145]},{"content":"If the workflow does not complete within the specified time-out interval the workflow is aborted and a <ph id=\"ph1\">&lt;xref:System.TimeoutException&gt;</ph> is thrown.","pos":[146,290],"source":" If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown."}]}]},{"pos":[298,579],"content":"[!NOTE]\n The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution. A workflow that takes longer than the specified time-out interval to complete, completes successfully if the workflow does not become idle.","leadings":["","> "],"nodes":[{"content":" The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution. A workflow that takes longer than the specified time-out interval to complete, completes successfully if the workflow does not become idle.","pos":[8,279],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.TimeoutException&gt;</ph> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.","pos":[1,131],"source":" The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution."},{"content":"A workflow that takes longer than the specified time-out interval to complete, completes successfully if the workflow does not become idle.","pos":[132,271]}]}]}],"pos":[70217,70802],"yaml":true,"extradata":"MT"},{"content":"The workflow definition of the workflow to invoke.","nodes":[{"pos":[0,50],"content":"The workflow definition of the workflow to invoke.","nodes":[{"content":"The workflow definition of the workflow to invoke.","pos":[0,50]}]}],"pos":[72070,72121],"yaml":true},{"content":"The dictionary of input parameters to the workflow, keyed by argument name.","nodes":[{"pos":[0,75],"content":"The dictionary of input parameters to the workflow, keyed by argument name.","nodes":[{"content":"The dictionary of input parameters to the workflow, keyed by argument name.","pos":[0,75]}]}],"pos":[72237,72313],"yaml":true},{"content":"The interval in which the workflow must complete before it is aborted and a <xref href=\"System.TimeoutException\"></xref> is thrown.","nodes":[{"pos":[0,131],"content":"The interval in which the workflow must complete before it is aborted and a <ph id=\"ph1\">&lt;xref href=\"System.TimeoutException\"&gt;&lt;/xref&gt;</ph> is thrown.","source":"The interval in which the workflow must complete before it is aborted and a <xref href=\"System.TimeoutException\"></xref> is thrown."}],"pos":[72378,72510],"yaml":true},{"content":"The type of the workflow.","nodes":[{"pos":[0,25],"content":"The type of the workflow.","nodes":[{"content":"The type of the workflow.","pos":[0,25]}]}],"pos":[72567,72593],"yaml":true},{"content":"A value of type TResult with the result of the execution of the activity.","nodes":[{"pos":[0,73],"content":"A value of type TResult with the result of the execution of the activity.","nodes":[{"content":"A value of type TResult with the result of the execution of the activity.","pos":[0,73]}]}],"pos":[72644,72718],"yaml":true},{"content":"Invokes a workflow synchronously using the specified workflow definition, <xref href=\"System.Collections.Generic.IDictionary`2\"></xref> of input parameters, <xref href=\"System.Collections.Generic.IDictionary`2\"></xref> of additional output parameters, and time-out interval.","nodes":[{"pos":[0,274],"content":"Invokes a workflow synchronously using the specified workflow definition, <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IDictionary`2\"&gt;&lt;/xref&gt;</ph> of input parameters, <ph id=\"ph2\">&lt;xref href=\"System.Collections.Generic.IDictionary`2\"&gt;&lt;/xref&gt;</ph> of additional output parameters, and time-out interval.","source":"Invokes a workflow synchronously using the specified workflow definition, <xref href=\"System.Collections.Generic.IDictionary`2\"></xref> of input parameters, <xref href=\"System.Collections.Generic.IDictionary`2\"></xref> of additional output parameters, and time-out interval."}],"pos":[74533,74808],"yaml":true},{"content":"This method blocks until the workflow has completed, including idle time. All workflow execution is guaranteed to execute on the invoking thread. If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.  \n  \n> [!NOTE]\n>  The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution. A workflow that takes longer than the specified time-out interval to complete, completes successfully if the workflow does not become idle.","nodes":[{"pos":[0,290],"content":"This method blocks until the workflow has completed, including idle time. All workflow execution is guaranteed to execute on the invoking thread. If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.","nodes":[{"content":"This method blocks until the workflow has completed, including idle time. All workflow execution is guaranteed to execute on the invoking thread. If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.","pos":[0,290],"nodes":[{"content":"This method blocks until the workflow has completed, including idle time.","pos":[0,73]},{"content":"All workflow execution is guaranteed to execute on the invoking thread.","pos":[74,145]},{"content":"If the workflow does not complete within the specified time-out interval the workflow is aborted and a <ph id=\"ph1\">&lt;xref:System.TimeoutException&gt;</ph> is thrown.","pos":[146,290],"source":" If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown."}]}]},{"pos":[298,579],"content":"[!NOTE]\n The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution. A workflow that takes longer than the specified time-out interval to complete, completes successfully if the workflow does not become idle.","leadings":["","> "],"nodes":[{"content":" The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution. A workflow that takes longer than the specified time-out interval to complete, completes successfully if the workflow does not become idle.","pos":[8,279],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.TimeoutException&gt;</ph> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.","pos":[1,131],"source":" The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution."},{"content":"A workflow that takes longer than the specified time-out interval to complete, completes successfully if the workflow does not become idle.","pos":[132,271]}]}]}],"pos":[74819,75404],"yaml":true,"extradata":"MT"},{"content":"The workflow definition of the workflow to invoke.","nodes":[{"pos":[0,50],"content":"The workflow definition of the workflow to invoke.","nodes":[{"content":"The workflow definition of the workflow to invoke.","pos":[0,50]}]}],"pos":[76749,76800],"yaml":true},{"content":"The dictionary of input parameters to the workflow, keyed by argument name.","nodes":[{"pos":[0,75],"content":"The dictionary of input parameters to the workflow, keyed by argument name.","nodes":[{"content":"The dictionary of input parameters to the workflow, keyed by argument name.","pos":[0,75]}]}],"pos":[76916,76992],"yaml":true},{"content":"The dictionary of additional output parameters of the workflow, keyed by argument name.","nodes":[{"pos":[0,87],"content":"The dictionary of additional output parameters of the workflow, keyed by argument name.","nodes":[{"content":"The dictionary of additional output parameters of the workflow, keyed by argument name.","pos":[0,87]}]}],"pos":[77119,77207],"yaml":true},{"content":"The interval in which the workflow must complete before it is aborted and a <xref href=\"System.TimeoutException\"></xref> is thrown.","nodes":[{"pos":[0,131],"content":"The interval in which the workflow must complete before it is aborted and a <ph id=\"ph1\">&lt;xref href=\"System.TimeoutException\"&gt;&lt;/xref&gt;</ph> is thrown.","source":"The interval in which the workflow must complete before it is aborted and a <xref href=\"System.TimeoutException\"></xref> is thrown."}],"pos":[77272,77404],"yaml":true},{"content":"The type of the workflow.","nodes":[{"pos":[0,25],"content":"The type of the workflow.","nodes":[{"content":"The type of the workflow.","pos":[0,25]}]}],"pos":[77461,77487],"yaml":true},{"content":"A value of type TResult with the result of the execution of the activity.","nodes":[{"pos":[0,73],"content":"A value of type TResult with the result of the execution of the activity.","nodes":[{"content":"A value of type TResult with the result of the execution of the activity.","pos":[0,73]}]}],"pos":[77538,77612],"yaml":true},{"content":"Invokes a workflow asynchronously with the specified time-out interval and a unique identifier.","nodes":[{"pos":[0,95],"content":"Invokes a workflow asynchronously with the specified time-out interval and a unique identifier.","nodes":[{"content":"Invokes a workflow asynchronously with the specified time-out interval and a unique identifier.","pos":[0,95]}]}],"pos":[78755,78851],"yaml":true},{"content":"The `userState` parameter must be unique across all currently running <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> operations for the current activity. If `userState` is not unique, an <xref:System.ArgumentException> is thrown. `userState` is used to identify the workflow in <xref:System.Activities.WorkflowInvoker.InvokeCompleted>, and to cancel the workflow using <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>.  \n  \n To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>. If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.  \n  \n> [!NOTE]\n>  The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution. A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.  \n  \n This method invokes a workflow asynchronously using the event-based asynchronous design pattern. [!INCLUDE[crdefault](~/includes/crdefault-md.md)][Event-based Asynchronous Pattern Overview](http://go.microsoft.com/fwlink/?LinkId=141765).","nodes":[{"pos":[0,434],"content":"The `userState` parameter must be unique across all currently running <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> operations for the current activity. If `userState` is not unique, an <xref:System.ArgumentException> is thrown. `userState` is used to identify the workflow in <xref:System.Activities.WorkflowInvoker.InvokeCompleted>, and to cancel the workflow using <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>.","nodes":[{"content":"The <ph id=\"ph1\">`userState`</ph> parameter must be unique across all currently running <ph id=\"ph2\">&lt;xref:System.Activities.WorkflowInvoker.InvokeAsync%2A&gt;</ph> operations for the current activity.","pos":[0,162],"source":"The `userState` parameter must be unique across all currently running <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> operations for the current activity."},{"content":"If <ph id=\"ph1\">`userState`</ph> is not unique, an <ph id=\"ph2\">&lt;xref:System.ArgumentException&gt;</ph> is thrown.","pos":[163,238],"source":" If `userState` is not unique, an <xref:System.ArgumentException> is thrown."},{"content":"<ph id=\"ph1\">`userState`</ph> is used to identify the workflow in <ph id=\"ph2\">&lt;xref:System.Activities.WorkflowInvoker.InvokeCompleted&gt;</ph>, and to cancel the workflow using <ph id=\"ph3\">&lt;xref:System.Activities.WorkflowInvoker.CancelAsync%2A&gt;</ph>.","pos":[239,434],"source":"`userState` is used to identify the workflow in <xref:System.Activities.WorkflowInvoker.InvokeCompleted>, and to cancel the workflow using <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>."}]},{"pos":[441,696],"content":"To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>. If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.","nodes":[{"content":"To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>. If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.","pos":[0,255],"nodes":[{"content":"To be notified when the workflow is complete, handle <ph id=\"ph1\">&lt;xref:System.Activities.WorkflowInvoker.InvokeCompleted&gt;</ph>.","pos":[0,110],"source":"To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>."},{"content":"If the workflow does not complete within the specified time-out interval the workflow is aborted and a <ph id=\"ph1\">&lt;xref:System.TimeoutException&gt;</ph> is thrown.","pos":[111,255],"source":" If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown."}]}]},{"pos":[704,984],"content":"[!NOTE]\n The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution. A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.","leadings":["","> "],"nodes":[{"content":" The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution. A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.","pos":[8,278],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.TimeoutException&gt;</ph> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.","pos":[1,131],"source":" The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution."},{"content":"A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.","pos":[132,270]}]}]},{"pos":[991,1228],"content":"This method invokes a workflow asynchronously using the event-based asynchronous design pattern. [!INCLUDE[crdefault](~/includes/crdefault-md.md)][Event-based Asynchronous Pattern Overview](http://go.microsoft.com/fwlink/?LinkId=141765).","nodes":[{"content":"This method invokes a workflow asynchronously using the event-based asynchronous design pattern.","pos":[0,96]},{"content":"<ph id=\"ph1\">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph><bpt id=\"p1\">[</bpt>Event-based Asynchronous Pattern Overview<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=141765)</ept>.","pos":[97,237],"source":"[!INCLUDE[crdefault](~/includes/crdefault-md.md)][Event-based Asynchronous Pattern Overview](http://go.microsoft.com/fwlink/?LinkId=141765)."}]}],"pos":[78862,80100],"yaml":true,"extradata":"MT"},{"content":"The interval in which the workflow must complete before it is aborted and a <xref href=\"System.TimeoutException\"></xref> is thrown.","nodes":[{"pos":[0,131],"content":"The interval in which the workflow must complete before it is aborted and a <ph id=\"ph1\">&lt;xref href=\"System.TimeoutException\"&gt;&lt;/xref&gt;</ph> is thrown.","source":"The interval in which the workflow must complete before it is aborted and a <xref href=\"System.TimeoutException\"></xref> is thrown."}],"pos":[80892,81024],"yaml":true},{"content":"A user-provided object used to distinguish this particular asynchronous invoke operation from other current asynchronous invoke operations.","nodes":[{"pos":[0,139],"content":"A user-provided object used to distinguish this particular asynchronous invoke operation from other current asynchronous invoke operations.","nodes":[{"content":"A user-provided object used to distinguish this particular asynchronous invoke operation from other current asynchronous invoke operations.","pos":[0,139]}]}],"pos":[81089,81229],"yaml":true},{"content":"Invokes a workflow asynchronously with the specified <xref href=\"System.Collections.Generic.IDictionary`2\"></xref> of input parameters and the specified time-out interval.","nodes":[{"pos":[0,171],"content":"Invokes a workflow asynchronously with the specified <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IDictionary`2\"&gt;&lt;/xref&gt;</ph> of input parameters and the specified time-out interval.","source":"Invokes a workflow asynchronously with the specified <xref href=\"System.Collections.Generic.IDictionary`2\"></xref> of input parameters and the specified time-out interval."}],"pos":[82596,82768],"yaml":true},{"content":"To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>. If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.  \n  \n> [!NOTE]\n>  The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution. A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.  \n  \n This method invokes a workflow asynchronously using the event-based asynchronous design pattern. [!INCLUDE[crdefault](~/includes/crdefault-md.md)][Event-based Asynchronous Pattern Overview](http://go.microsoft.com/fwlink/?LinkId=141765).","nodes":[{"pos":[0,255],"content":"To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>. If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.","nodes":[{"content":"To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>. If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.","pos":[0,255],"nodes":[{"content":"To be notified when the workflow is complete, handle <ph id=\"ph1\">&lt;xref:System.Activities.WorkflowInvoker.InvokeCompleted&gt;</ph>.","pos":[0,110],"source":"To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>."},{"content":"If the workflow does not complete within the specified time-out interval the workflow is aborted and a <ph id=\"ph1\">&lt;xref:System.TimeoutException&gt;</ph> is thrown.","pos":[111,255],"source":" If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown."}]}]},{"pos":[263,543],"content":"[!NOTE]\n The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution. A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.","leadings":["","> "],"nodes":[{"content":" The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution. A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.","pos":[8,278],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.TimeoutException&gt;</ph> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.","pos":[1,131],"source":" The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution."},{"content":"A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.","pos":[132,270]}]}]},{"pos":[550,787],"content":"This method invokes a workflow asynchronously using the event-based asynchronous design pattern. [!INCLUDE[crdefault](~/includes/crdefault-md.md)][Event-based Asynchronous Pattern Overview](http://go.microsoft.com/fwlink/?LinkId=141765).","nodes":[{"content":"This method invokes a workflow asynchronously using the event-based asynchronous design pattern.","pos":[0,96]},{"content":"<ph id=\"ph1\">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph><bpt id=\"p1\">[</bpt>Event-based Asynchronous Pattern Overview<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=141765)</ept>.","pos":[97,237],"source":"[!INCLUDE[crdefault](~/includes/crdefault-md.md)][Event-based Asynchronous Pattern Overview](http://go.microsoft.com/fwlink/?LinkId=141765)."}]}],"pos":[82779,83574],"yaml":true,"extradata":"MT"},{"content":"The dictionary of input parameters to the workflow, keyed by argument name.","nodes":[{"pos":[0,75],"content":"The dictionary of input parameters to the workflow, keyed by argument name.","nodes":[{"content":"The dictionary of input parameters to the workflow, keyed by argument name.","pos":[0,75]}]}],"pos":[84461,84537],"yaml":true},{"content":"The interval in which the workflow must complete before it is aborted and a <xref href=\"System.TimeoutException\"></xref> is thrown.","nodes":[{"pos":[0,131],"content":"The interval in which the workflow must complete before it is aborted and a <ph id=\"ph1\">&lt;xref href=\"System.TimeoutException\"&gt;&lt;/xref&gt;</ph> is thrown.","source":"The interval in which the workflow must complete before it is aborted and a <xref href=\"System.TimeoutException\"></xref> is thrown."}],"pos":[84602,84734],"yaml":true},{"content":"Invokes a workflow asynchronously using the specified <xref href=\"System.Collections.Generic.IDictionary`2\"></xref> of input parameters and a unique identifier.","nodes":[{"pos":[0,160],"content":"Invokes a workflow asynchronously using the specified <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IDictionary`2\"&gt;&lt;/xref&gt;</ph> of input parameters and a unique identifier.","source":"Invokes a workflow asynchronously using the specified <xref href=\"System.Collections.Generic.IDictionary`2\"></xref> of input parameters and a unique identifier."}],"pos":[86089,86250],"yaml":true},{"content":"The `userState` parameter must be unique across all currently running <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> operations for the current activity. If `userState` is not unique, an <xref:System.ArgumentException> is thrown. `userState` is used to identify the workflow in <xref:System.Activities.WorkflowInvoker.InvokeCompleted>, and to cancel the workflow using <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>.  \n  \n To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>. To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads that take a <xref:System.TimeSpan>.  \n  \n This method invokes a workflow asynchronously using the event-based asynchronous design pattern. [!INCLUDE[crdefault](~/includes/crdefault-md.md)][Event-based Asynchronous Pattern Overview](http://go.microsoft.com/fwlink/?LinkId=141765).","nodes":[{"pos":[0,434],"content":"The `userState` parameter must be unique across all currently running <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> operations for the current activity. If `userState` is not unique, an <xref:System.ArgumentException> is thrown. `userState` is used to identify the workflow in <xref:System.Activities.WorkflowInvoker.InvokeCompleted>, and to cancel the workflow using <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>.","nodes":[{"content":"The <ph id=\"ph1\">`userState`</ph> parameter must be unique across all currently running <ph id=\"ph2\">&lt;xref:System.Activities.WorkflowInvoker.InvokeAsync%2A&gt;</ph> operations for the current activity.","pos":[0,162],"source":"The `userState` parameter must be unique across all currently running <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> operations for the current activity."},{"content":"If <ph id=\"ph1\">`userState`</ph> is not unique, an <ph id=\"ph2\">&lt;xref:System.ArgumentException&gt;</ph> is thrown.","pos":[163,238],"source":" If `userState` is not unique, an <xref:System.ArgumentException> is thrown."},{"content":"<ph id=\"ph1\">`userState`</ph> is used to identify the workflow in <ph id=\"ph2\">&lt;xref:System.Activities.WorkflowInvoker.InvokeCompleted&gt;</ph>, and to cancel the workflow using <ph id=\"ph3\">&lt;xref:System.Activities.WorkflowInvoker.CancelAsync%2A&gt;</ph>.","pos":[239,434],"source":"`userState` is used to identify the workflow in <xref:System.Activities.WorkflowInvoker.InvokeCompleted>, and to cancel the workflow using <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>."}]},{"pos":[441,738],"content":"To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>. To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads that take a <xref:System.TimeSpan>.","nodes":[{"content":"To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>. To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads that take a <xref:System.TimeSpan>.","pos":[0,297],"nodes":[{"content":"To be notified when the workflow is complete, handle <ph id=\"ph1\">&lt;xref:System.Activities.WorkflowInvoker.InvokeCompleted&gt;</ph>.","pos":[0,110],"source":"To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>."},{"content":"To configure a time-out interval in which the workflow must complete, use one of the <ph id=\"ph1\">&lt;xref:System.Activities.WorkflowInvoker.InvokeAsync%2A&gt;</ph> overloads that take a <ph id=\"ph2\">&lt;xref:System.TimeSpan&gt;</ph>.","pos":[111,297],"source":" To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads that take a <xref:System.TimeSpan>."}]}]},{"pos":[745,982],"content":"This method invokes a workflow asynchronously using the event-based asynchronous design pattern. [!INCLUDE[crdefault](~/includes/crdefault-md.md)][Event-based Asynchronous Pattern Overview](http://go.microsoft.com/fwlink/?LinkId=141765).","nodes":[{"content":"This method invokes a workflow asynchronously using the event-based asynchronous design pattern.","pos":[0,96]},{"content":"<ph id=\"ph1\">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph><bpt id=\"p1\">[</bpt>Event-based Asynchronous Pattern Overview<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=141765)</ept>.","pos":[97,237],"source":"[!INCLUDE[crdefault](~/includes/crdefault-md.md)][Event-based Asynchronous Pattern Overview](http://go.microsoft.com/fwlink/?LinkId=141765)."}]}],"pos":[86261,87250],"yaml":true,"extradata":"MT"},{"content":"The dictionary of input parameters to the workflow, keyed by argument name.","nodes":[{"pos":[0,75],"content":"The dictionary of input parameters to the workflow, keyed by argument name.","nodes":[{"content":"The dictionary of input parameters to the workflow, keyed by argument name.","pos":[0,75]}]}],"pos":[88137,88213],"yaml":true},{"content":"A user-provided object used to distinguish this particular asynchronous invoke operation from other current asynchronous invoke operations.","nodes":[{"pos":[0,139],"content":"A user-provided object used to distinguish this particular asynchronous invoke operation from other current asynchronous invoke operations.","nodes":[{"content":"A user-provided object used to distinguish this particular asynchronous invoke operation from other current asynchronous invoke operations.","pos":[0,139]}]}],"pos":[88278,88418],"yaml":true},{"content":"Invokes a workflow asynchronously.","nodes":[{"pos":[0,34],"content":"Invokes a workflow asynchronously.","nodes":[{"content":"Invokes a workflow asynchronously.","pos":[0,34]}]}],"pos":[89422,89457],"yaml":true},{"content":"To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>. To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads that take a <xref:System.TimeSpan>.  \n  \n This method invokes a workflow asynchronously using the event-based asynchronous design pattern. [!INCLUDE[crdefault](~/includes/crdefault-md.md)][Event-based Asynchronous Pattern Overview](http://go.microsoft.com/fwlink/?LinkId=141765).","nodes":[{"pos":[0,297],"content":"To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>. To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads that take a <xref:System.TimeSpan>.","nodes":[{"content":"To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>. To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads that take a <xref:System.TimeSpan>.","pos":[0,297],"nodes":[{"content":"To be notified when the workflow is complete, handle <ph id=\"ph1\">&lt;xref:System.Activities.WorkflowInvoker.InvokeCompleted&gt;</ph>.","pos":[0,110],"source":"To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>."},{"content":"To configure a time-out interval in which the workflow must complete, use one of the <ph id=\"ph1\">&lt;xref:System.Activities.WorkflowInvoker.InvokeAsync%2A&gt;</ph> overloads that take a <ph id=\"ph2\">&lt;xref:System.TimeSpan&gt;</ph>.","pos":[111,297],"source":" To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads that take a <xref:System.TimeSpan>."}]}]},{"pos":[304,541],"content":"This method invokes a workflow asynchronously using the event-based asynchronous design pattern. [!INCLUDE[crdefault](~/includes/crdefault-md.md)][Event-based Asynchronous Pattern Overview](http://go.microsoft.com/fwlink/?LinkId=141765).","nodes":[{"content":"This method invokes a workflow asynchronously using the event-based asynchronous design pattern.","pos":[0,96]},{"content":"<ph id=\"ph1\">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph><bpt id=\"p1\">[</bpt>Event-based Asynchronous Pattern Overview<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=141765)</ept>.","pos":[97,237],"source":"[!INCLUDE[crdefault](~/includes/crdefault-md.md)][Event-based Asynchronous Pattern Overview](http://go.microsoft.com/fwlink/?LinkId=141765)."}]}],"pos":[89468,90014],"yaml":true,"extradata":"MT"},{"content":"Invokes a workflow asynchronously using the specified unique identifier.","nodes":[{"pos":[0,72],"content":"Invokes a workflow asynchronously using the specified unique identifier.","nodes":[{"content":"Invokes a workflow asynchronously using the specified unique identifier.","pos":[0,72]}]}],"pos":[91777,91850],"yaml":true},{"content":"The `userState` parameter must be unique across all currently running <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> operations for the current activity. If the `userState` parameter is not unique, an <xref:System.ArgumentException> is thrown. `userState` is used to identify the workflow in <xref:System.Activities.WorkflowInvoker.InvokeCompleted>, and to cancel the workflow using <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>.  \n  \n To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>. To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads that take a <xref:System.TimeSpan>.  \n  \n This method invokes a workflow asynchronously using the event-based asynchronous design pattern. [!INCLUDE[crdefault](~/includes/crdefault-md.md)][Event-based Asynchronous Pattern Overview](http://go.microsoft.com/fwlink/?LinkId=141765).","nodes":[{"pos":[0,448],"content":"The `userState` parameter must be unique across all currently running <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> operations for the current activity. If the `userState` parameter is not unique, an <xref:System.ArgumentException> is thrown. `userState` is used to identify the workflow in <xref:System.Activities.WorkflowInvoker.InvokeCompleted>, and to cancel the workflow using <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>.","nodes":[{"content":"The <ph id=\"ph1\">`userState`</ph> parameter must be unique across all currently running <ph id=\"ph2\">&lt;xref:System.Activities.WorkflowInvoker.InvokeAsync%2A&gt;</ph> operations for the current activity.","pos":[0,162],"source":"The `userState` parameter must be unique across all currently running <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> operations for the current activity."},{"content":"If the <ph id=\"ph1\">`userState`</ph> parameter is not unique, an <ph id=\"ph2\">&lt;xref:System.ArgumentException&gt;</ph> is thrown.","pos":[163,252],"source":" If the `userState` parameter is not unique, an <xref:System.ArgumentException> is thrown."},{"content":"<ph id=\"ph1\">`userState`</ph> is used to identify the workflow in <ph id=\"ph2\">&lt;xref:System.Activities.WorkflowInvoker.InvokeCompleted&gt;</ph>, and to cancel the workflow using <ph id=\"ph3\">&lt;xref:System.Activities.WorkflowInvoker.CancelAsync%2A&gt;</ph>.","pos":[253,448],"source":"`userState` is used to identify the workflow in <xref:System.Activities.WorkflowInvoker.InvokeCompleted>, and to cancel the workflow using <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>."}]},{"pos":[455,752],"content":"To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>. To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads that take a <xref:System.TimeSpan>.","nodes":[{"content":"To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>. To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads that take a <xref:System.TimeSpan>.","pos":[0,297],"nodes":[{"content":"To be notified when the workflow is complete, handle <ph id=\"ph1\">&lt;xref:System.Activities.WorkflowInvoker.InvokeCompleted&gt;</ph>.","pos":[0,110],"source":"To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>."},{"content":"To configure a time-out interval in which the workflow must complete, use one of the <ph id=\"ph1\">&lt;xref:System.Activities.WorkflowInvoker.InvokeAsync%2A&gt;</ph> overloads that take a <ph id=\"ph2\">&lt;xref:System.TimeSpan&gt;</ph>.","pos":[111,297],"source":" To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads that take a <xref:System.TimeSpan>."}]}]},{"pos":[759,996],"content":"This method invokes a workflow asynchronously using the event-based asynchronous design pattern. [!INCLUDE[crdefault](~/includes/crdefault-md.md)][Event-based Asynchronous Pattern Overview](http://go.microsoft.com/fwlink/?LinkId=141765).","nodes":[{"content":"This method invokes a workflow asynchronously using the event-based asynchronous design pattern.","pos":[0,96]},{"content":"<ph id=\"ph1\">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph><bpt id=\"p1\">[</bpt>Event-based Asynchronous Pattern Overview<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=141765)</ept>.","pos":[97,237],"source":"[!INCLUDE[crdefault](~/includes/crdefault-md.md)][Event-based Asynchronous Pattern Overview](http://go.microsoft.com/fwlink/?LinkId=141765)."}]}],"pos":[91861,92864],"yaml":true,"extradata":"MT"},{"content":"A user-provided object used to distinguish this particular asynchronous invoke operation from other current asynchronous invoke operations.","nodes":[{"pos":[0,139],"content":"A user-provided object used to distinguish this particular asynchronous invoke operation from other current asynchronous invoke operations.","nodes":[{"content":"A user-provided object used to distinguish this particular asynchronous invoke operation from other current asynchronous invoke operations.","pos":[0,139]}]}],"pos":[93638,93778],"yaml":true},{"content":"Invokes a workflow asynchronously using the specified <xref href=\"System.Collections.Generic.IDictionary`2\"></xref> of input parameters.","nodes":[{"pos":[0,136],"content":"Invokes a workflow asynchronously using the specified <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IDictionary`2\"&gt;&lt;/xref&gt;</ph> of input parameters.","source":"Invokes a workflow asynchronously using the specified <xref href=\"System.Collections.Generic.IDictionary`2\"></xref> of input parameters."}],"pos":[95067,95204],"yaml":true},{"content":"To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>. To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads that take a <xref:System.TimeSpan>.  \n  \n This method invokes a workflow asynchronously using the event-based asynchronous design pattern. [!INCLUDE[crdefault](~/includes/crdefault-md.md)][Event-based Asynchronous Pattern Overview](http://go.microsoft.com/fwlink/?LinkId=141765).","nodes":[{"pos":[0,297],"content":"To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>. To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads that take a <xref:System.TimeSpan>.","nodes":[{"content":"To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>. To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads that take a <xref:System.TimeSpan>.","pos":[0,297],"nodes":[{"content":"To be notified when the workflow is complete, handle <ph id=\"ph1\">&lt;xref:System.Activities.WorkflowInvoker.InvokeCompleted&gt;</ph>.","pos":[0,110],"source":"To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>."},{"content":"To configure a time-out interval in which the workflow must complete, use one of the <ph id=\"ph1\">&lt;xref:System.Activities.WorkflowInvoker.InvokeAsync%2A&gt;</ph> overloads that take a <ph id=\"ph2\">&lt;xref:System.TimeSpan&gt;</ph>.","pos":[111,297],"source":" To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads that take a <xref:System.TimeSpan>."}]}]},{"pos":[304,541],"content":"This method invokes a workflow asynchronously using the event-based asynchronous design pattern. [!INCLUDE[crdefault](~/includes/crdefault-md.md)][Event-based Asynchronous Pattern Overview](http://go.microsoft.com/fwlink/?LinkId=141765).","nodes":[{"content":"This method invokes a workflow asynchronously using the event-based asynchronous design pattern.","pos":[0,96]},{"content":"<ph id=\"ph1\">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph><bpt id=\"p1\">[</bpt>Event-based Asynchronous Pattern Overview<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=141765)</ept>.","pos":[97,237],"source":"[!INCLUDE[crdefault](~/includes/crdefault-md.md)][Event-based Asynchronous Pattern Overview](http://go.microsoft.com/fwlink/?LinkId=141765)."}]}],"pos":[95215,95761],"yaml":true,"extradata":"MT"},{"content":"The dictionary of input parameters to the workflow, keyed by argument name.","nodes":[{"pos":[0,75],"content":"The dictionary of input parameters to the workflow, keyed by argument name.","nodes":[{"content":"The dictionary of input parameters to the workflow, keyed by argument name.","pos":[0,75]}]}],"pos":[96630,96706],"yaml":true},{"content":"Invokes a workflow asynchronously with the specified <xref href=\"System.Collections.Generic.IDictionary`2\"></xref> of input parameters, the specified time-out interval, and a unique identifier.","nodes":[{"pos":[0,193],"content":"Invokes a workflow asynchronously with the specified <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IDictionary`2\"&gt;&lt;/xref&gt;</ph> of input parameters, the specified time-out interval, and a unique identifier.","source":"Invokes a workflow asynchronously with the specified <xref href=\"System.Collections.Generic.IDictionary`2\"></xref> of input parameters, the specified time-out interval, and a unique identifier."}],"pos":[98139,98333],"yaml":true},{"content":"The `userState` parameter must be unique across all currently running <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> operations for the current activity. If `userState` is not unique, an <xref:System.ArgumentException> is thrown. `userState` is used to identify the workflow in <xref:System.Activities.WorkflowInvoker.InvokeCompleted>, and to cancel the workflow using <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>.  \n  \n To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>. If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.  \n  \n> [!NOTE]\n>  The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution. A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.  \n  \n This method invokes a workflow asynchronously using the event-based asynchronous design pattern. [!INCLUDE[crdefault](~/includes/crdefault-md.md)][Event-based Asynchronous Pattern Overview](http://go.microsoft.com/fwlink/?LinkId=141765).","nodes":[{"pos":[0,434],"content":"The `userState` parameter must be unique across all currently running <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> operations for the current activity. If `userState` is not unique, an <xref:System.ArgumentException> is thrown. `userState` is used to identify the workflow in <xref:System.Activities.WorkflowInvoker.InvokeCompleted>, and to cancel the workflow using <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>.","nodes":[{"content":"The <ph id=\"ph1\">`userState`</ph> parameter must be unique across all currently running <ph id=\"ph2\">&lt;xref:System.Activities.WorkflowInvoker.InvokeAsync%2A&gt;</ph> operations for the current activity.","pos":[0,162],"source":"The `userState` parameter must be unique across all currently running <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> operations for the current activity."},{"content":"If <ph id=\"ph1\">`userState`</ph> is not unique, an <ph id=\"ph2\">&lt;xref:System.ArgumentException&gt;</ph> is thrown.","pos":[163,238],"source":" If `userState` is not unique, an <xref:System.ArgumentException> is thrown."},{"content":"<ph id=\"ph1\">`userState`</ph> is used to identify the workflow in <ph id=\"ph2\">&lt;xref:System.Activities.WorkflowInvoker.InvokeCompleted&gt;</ph>, and to cancel the workflow using <ph id=\"ph3\">&lt;xref:System.Activities.WorkflowInvoker.CancelAsync%2A&gt;</ph>.","pos":[239,434],"source":"`userState` is used to identify the workflow in <xref:System.Activities.WorkflowInvoker.InvokeCompleted>, and to cancel the workflow using <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>."}]},{"pos":[441,696],"content":"To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>. If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.","nodes":[{"content":"To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>. If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.","pos":[0,255],"nodes":[{"content":"To be notified when the workflow is complete, handle <ph id=\"ph1\">&lt;xref:System.Activities.WorkflowInvoker.InvokeCompleted&gt;</ph>.","pos":[0,110],"source":"To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>."},{"content":"If the workflow does not complete within the specified time-out interval the workflow is aborted and a <ph id=\"ph1\">&lt;xref:System.TimeoutException&gt;</ph> is thrown.","pos":[111,255],"source":" If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown."}]}]},{"pos":[704,984],"content":"[!NOTE]\n The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution. A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.","leadings":["","> "],"nodes":[{"content":" The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution. A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.","pos":[8,278],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.TimeoutException&gt;</ph> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.","pos":[1,131],"source":" The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution."},{"content":"A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.","pos":[132,270]}]}]},{"pos":[991,1228],"content":"This method invokes a workflow asynchronously using the event-based asynchronous design pattern. [!INCLUDE[crdefault](~/includes/crdefault-md.md)][Event-based Asynchronous Pattern Overview](http://go.microsoft.com/fwlink/?LinkId=141765).","nodes":[{"content":"This method invokes a workflow asynchronously using the event-based asynchronous design pattern.","pos":[0,96]},{"content":"<ph id=\"ph1\">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph><bpt id=\"p1\">[</bpt>Event-based Asynchronous Pattern Overview<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=141765)</ept>.","pos":[97,237],"source":"[!INCLUDE[crdefault](~/includes/crdefault-md.md)][Event-based Asynchronous Pattern Overview](http://go.microsoft.com/fwlink/?LinkId=141765)."}]}],"pos":[98344,99582],"yaml":true,"extradata":"MT"},{"content":"The dictionary of input parameters to the workflow, keyed by argument name.","nodes":[{"pos":[0,75],"content":"The dictionary of input parameters to the workflow, keyed by argument name.","nodes":[{"content":"The dictionary of input parameters to the workflow, keyed by argument name.","pos":[0,75]}]}],"pos":[100487,100563],"yaml":true},{"content":"The interval in which the workflow must complete before it is aborted and a <xref href=\"System.TimeoutException\"></xref> is thrown.","nodes":[{"pos":[0,131],"content":"The interval in which the workflow must complete before it is aborted and a <ph id=\"ph1\">&lt;xref href=\"System.TimeoutException\"&gt;&lt;/xref&gt;</ph> is thrown.","source":"The interval in which the workflow must complete before it is aborted and a <xref href=\"System.TimeoutException\"></xref> is thrown."}],"pos":[100628,100760],"yaml":true},{"content":"A user-provided object used to distinguish this particular asynchronous invoke operation from other current asynchronous invoke operations.","nodes":[{"pos":[0,139],"content":"A user-provided object used to distinguish this particular asynchronous invoke operation from other current asynchronous invoke operations.","nodes":[{"content":"A user-provided object used to distinguish this particular asynchronous invoke operation from other current asynchronous invoke operations.","pos":[0,139]}]}],"pos":[100825,100965],"yaml":true},{"content":"Invokes a workflow asynchronously with the specified time-out interval.","nodes":[{"pos":[0,71],"content":"Invokes a workflow asynchronously with the specified time-out interval.","nodes":[{"content":"Invokes a workflow asynchronously with the specified time-out interval.","pos":[0,71]}]}],"pos":[102044,102116],"yaml":true},{"content":"To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>. If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.  \n  \n> [!NOTE]\n>  The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution. A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.  \n  \n This method invokes a workflow asynchronously using the event-based asynchronous design pattern. [!INCLUDE[crdefault](~/includes/crdefault-md.md)][Event-based Asynchronous Pattern Overview](http://go.microsoft.com/fwlink/?LinkId=141765).","nodes":[{"pos":[0,255],"content":"To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>. If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.","nodes":[{"content":"To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>. If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.","pos":[0,255],"nodes":[{"content":"To be notified when the workflow is complete, handle <ph id=\"ph1\">&lt;xref:System.Activities.WorkflowInvoker.InvokeCompleted&gt;</ph>.","pos":[0,110],"source":"To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>."},{"content":"If the workflow does not complete within the specified time-out interval the workflow is aborted and a <ph id=\"ph1\">&lt;xref:System.TimeoutException&gt;</ph> is thrown.","pos":[111,255],"source":" If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown."}]}]},{"pos":[263,543],"content":"[!NOTE]\n The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution. A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.","leadings":["","> "],"nodes":[{"content":" The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution. A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.","pos":[8,278],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.TimeoutException&gt;</ph> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.","pos":[1,131],"source":" The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution."},{"content":"A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.","pos":[132,270]}]}]},{"pos":[550,787],"content":"This method invokes a workflow asynchronously using the event-based asynchronous design pattern. [!INCLUDE[crdefault](~/includes/crdefault-md.md)][Event-based Asynchronous Pattern Overview](http://go.microsoft.com/fwlink/?LinkId=141765).","nodes":[{"content":"This method invokes a workflow asynchronously using the event-based asynchronous design pattern.","pos":[0,96]},{"content":"<ph id=\"ph1\">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph><bpt id=\"p1\">[</bpt>Event-based Asynchronous Pattern Overview<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=141765)</ept>.","pos":[97,237],"source":"[!INCLUDE[crdefault](~/includes/crdefault-md.md)][Event-based Asynchronous Pattern Overview](http://go.microsoft.com/fwlink/?LinkId=141765)."}]}],"pos":[102127,102922],"yaml":true,"extradata":"MT"},{"content":"The interval in which the workflow must complete before it is aborted and a <xref href=\"System.TimeoutException\"></xref> is thrown.","nodes":[{"pos":[0,131],"content":"The interval in which the workflow must complete before it is aborted and a <ph id=\"ph1\">&lt;xref href=\"System.TimeoutException\"&gt;&lt;/xref&gt;</ph> is thrown.","source":"The interval in which the workflow must complete before it is aborted and a <xref href=\"System.TimeoutException\"></xref> is thrown."}],"pos":[103696,103828],"yaml":true},{"content":"Occurs when the workflow invoked by one of the <xref href=\"System.Activities.WorkflowInvoker.InvokeAsync*\"></xref> overloads is completed or canceled.","nodes":[{"pos":[0,150],"content":"Occurs when the workflow invoked by one of the <ph id=\"ph1\">&lt;xref href=\"System.Activities.WorkflowInvoker.InvokeAsync*\"&gt;&lt;/xref&gt;</ph> overloads is completed or canceled.","source":"Occurs when the workflow invoked by one of the <xref href=\"System.Activities.WorkflowInvoker.InvokeAsync*\"></xref> overloads is completed or canceled."}],"pos":[104849,105000],"yaml":true},{"content":"Handle this to determine whether a workflow invoked with one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads completed successfully and to retrieve the output arguments of the completed workflow.","nodes":[{"pos":[0,220],"content":"Handle this to determine whether a workflow invoked with one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads completed successfully and to retrieve the output arguments of the completed workflow.","nodes":[{"content":"Handle this to determine whether a workflow invoked with one of the <ph id=\"ph1\">&lt;xref:System.Activities.WorkflowInvoker.InvokeAsync%2A&gt;</ph> overloads completed successfully and to retrieve the output arguments of the completed workflow.","pos":[0,220],"source":"Handle this to determine whether a workflow invoked with one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads completed successfully and to retrieve the output arguments of the completed workflow."}]}],"pos":[105011,105232],"yaml":true,"extradata":"MT"}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Activities.WorkflowInvoker\n  commentId: T:System.Activities.WorkflowInvoker\n  id: WorkflowInvoker\n  children:\n  - System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)\n  - System.Activities.WorkflowInvoker.BeginInvoke(System.AsyncCallback,System.Object)\n  - System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.AsyncCallback,System.Object)\n  - System.Activities.WorkflowInvoker.BeginInvoke(System.TimeSpan,System.AsyncCallback,System.Object)\n  - System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.AsyncCallback,System.Object)\n  - System.Activities.WorkflowInvoker.CancelAsync(System.Object)\n  - System.Activities.WorkflowInvoker.EndInvoke(System.IAsyncResult)\n  - System.Activities.WorkflowInvoker.Extensions\n  - System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)\n  - System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.TimeSpan)\n  - System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object})\n  - System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)\n  - System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object})\n  - System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity)\n  - System.Activities.WorkflowInvoker.Invoke\n  - System.Activities.WorkflowInvoker.Invoke(System.TimeSpan)\n  - System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0})\n  - System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object})\n  - System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)\n  - System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object}@,System.TimeSpan)\n  - System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan,System.Object)\n  - System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)\n  - System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)\n  - System.Activities.WorkflowInvoker.InvokeAsync\n  - System.Activities.WorkflowInvoker.InvokeAsync(System.Object)\n  - System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object})\n  - System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.Object)\n  - System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan)\n  - System.Activities.WorkflowInvoker.InvokeCompleted\n  langs:\n  - csharp\n  name: WorkflowInvoker\n  nameWithType: WorkflowInvoker\n  fullName: System.Activities.WorkflowInvoker\n  type: Class\n  assemblies:\n  - System.Activities\n  namespace: System.Activities\n  summary: Provides a means for invoking a workflow as if it were a method call.\n  remarks: \"<xref:System.Activities.WorkflowInvoker> contains both instance and static methods for invoking workflows synchronously, and instance methods for invoking workflows asynchronously.  \\n  \\n <xref:System.Activities.WorkflowInvoker> does not allow instance control such as persisting, unloading, or resuming bookmarks. If instance control is desired, use <xref:System.Activities.WorkflowApplication> instead.  \\n  \\n To execute workflows synchronously with no instance control, call the <xref:System.Activities.WorkflowInvoker.Invoke%2A> method. To execute a workflow asynchronously with no instance control, use the <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A> and <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> method pairs, or the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> method.\"\n  example:\n  - \"The following example synchronously invokes a workflow consisting of a single <xref:System.Activities.Statements.WriteLine> activity using <xref:System.Activities.WorkflowInvoker>.  \\n  \\n [!code-csharp[CFX_WorkflowInvokerExample#1](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#1)]\"\n  syntax:\n    content: public sealed class WorkflowInvoker\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Activities/WorkflowInvoker.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)\n  commentId: M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)\n  id: '#ctor(System.Activities.Activity)'\n  parent: System.Activities.WorkflowInvoker\n  langs:\n  - csharp\n  name: WorkflowInvoker(Activity)\n  nameWithType: WorkflowInvoker.WorkflowInvoker(Activity)\n  fullName: WorkflowInvoker.WorkflowInvoker(Activity)\n  type: Constructor\n  assemblies:\n  - System.Activities\n  namespace: System.Activities\n  summary: Initializes a new instance of the <xref href=\"System.Activities.WorkflowInvoker\"></xref> class.\n  remarks: <xref:System.Activities.WorkflowInvoker> contains both instance and static methods for invoking workflows synchronously, and instance methods for invoking workflows asynchronously.\n  example:\n  - \"The following example invokes a workflow consisting of a single <xref:System.Activities.Statements.WriteLine> activity.  \\n  \\n [!code-csharp[CFX_WorkflowInvokerExample#2](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#2)]\"\n  syntax:\n    content: public WorkflowInvoker (System.Activities.Activity workflow);\n    parameters:\n    - id: workflow\n      type: System.Activities.Activity\n      description: The workflow definition of the workflow to be invoked by this instance of the <xref href=\"System.Activities.WorkflowInvoker\"></xref> class.\n  overload: System.Activities.WorkflowInvoker.#ctor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Activities/WorkflowInvoker.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Activities.WorkflowInvoker.BeginInvoke(System.AsyncCallback,System.Object)\n  commentId: M:System.Activities.WorkflowInvoker.BeginInvoke(System.AsyncCallback,System.Object)\n  id: BeginInvoke(System.AsyncCallback,System.Object)\n  parent: System.Activities.WorkflowInvoker\n  langs:\n  - csharp\n  name: BeginInvoke(AsyncCallback, Object)\n  nameWithType: WorkflowInvoker.BeginInvoke(AsyncCallback, Object)\n  fullName: WorkflowInvoker.BeginInvoke(AsyncCallback, Object)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities\n  summary: Invokes a workflow asynchronously using the specified <xref href=\"System.AsyncCallback\"></xref> and user-provided state.\n  remarks: \"To be notified when the workflow is complete and retrieve the output parameters of the workflow, call <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> from the `callback` method. If <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> is called before the workflow completes, it blocks until the workflow completes. To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A> overloads that take a <xref:System.TimeSpan>.  \\n  \\n This method invokes a workflow asynchronously using the <xref:System.IAsyncResult> asynchronous design pattern. [!INCLUDE[crdefault](~/includes/crdefault-md.md)][Asynchronous Programming Overview](http://go.microsoft.com/fwlink/?LinkId=141764).\"\n  example:\n  - \"The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity. The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation. These are retrieved by calling <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>. When the call to <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> returns, each output argument is returned in the outputs dictionary, keyed by argument name.  \\n  \\n [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  \\n  \\n [!code-csharp[CFX_WorkflowInvokerExample#32](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#32)]\"\n  syntax:\n    content: public IAsyncResult BeginInvoke (AsyncCallback callback, object state);\n    parameters:\n    - id: callback\n      type: System.AsyncCallback\n      description: The method to be called when the workflow has completed.\n    - id: state\n      type: System.Object\n      description: An optional application-specific object that contains information about the asynchronous operation.\n    return:\n      type: System.IAsyncResult\n      description: A reference to the asynchronous invoke operation.\n  overload: System.Activities.WorkflowInvoker.BeginInvoke*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Activities/WorkflowInvoker.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.AsyncCallback,System.Object)\n  commentId: M:System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.AsyncCallback,System.Object)\n  id: BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.AsyncCallback,System.Object)\n  parent: System.Activities.WorkflowInvoker\n  langs:\n  - csharp\n  name: BeginInvoke(IDictionary<String,Object>, AsyncCallback, Object)\n  nameWithType: WorkflowInvoker.BeginInvoke(IDictionary<String,Object>, AsyncCallback, Object)\n  fullName: WorkflowInvoker.BeginInvoke(IDictionary<String,Object>, AsyncCallback, Object)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities\n  summary: Invokes a workflow asynchronously using the specified <xref href=\"System.Collections.Generic.IDictionary`2\"></xref> of input parameters, <xref href=\"System.AsyncCallback\"></xref>, and user-provided state.\n  remarks: \"To be notified when the workflow is complete and retrieve the output parameters of the workflow, call <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> from the `callback` method. If <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> is called before the workflow completes, it blocks until the workflow completes.  To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A> overloads that take a <xref:System.TimeSpan>.  \\n  \\n This method invokes a workflow asynchronously using the <xref:System.IAsyncResult> asynchronous design pattern. [!INCLUDE[crdefault](~/includes/crdefault-md.md)][Asynchronous Programming Overview](http://go.microsoft.com/fwlink/?LinkId=141764).\"\n  example:\n  - \"The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity. The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation. These are retrieved by calling <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>. When the call to <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> returns, each output argument is returned in the outputs dictionary, keyed by argument name.  \\n  \\n [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  \\n  \\n [!code-csharp[CFX_WorkflowInvokerExample#32](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#32)]\"\n  syntax:\n    content: public IAsyncResult BeginInvoke (System.Collections.Generic.IDictionary<string,object> inputs, AsyncCallback callback, object state);\n    parameters:\n    - id: inputs\n      type: System.Collections.Generic.IDictionary{System.String,System.Object}\n      description: The dictionary of input parameters to the workflow, keyed by argument name.\n    - id: callback\n      type: System.AsyncCallback\n      description: The method to be called when the workflow has completed.\n    - id: state\n      type: System.Object\n      description: An optional application-specific object that contains information about the asynchronous operation.\n    return:\n      type: System.IAsyncResult\n      description: A reference to the asynchronous invoke operation.\n  overload: System.Activities.WorkflowInvoker.BeginInvoke*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Activities/WorkflowInvoker.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Activities.WorkflowInvoker.BeginInvoke(System.TimeSpan,System.AsyncCallback,System.Object)\n  commentId: M:System.Activities.WorkflowInvoker.BeginInvoke(System.TimeSpan,System.AsyncCallback,System.Object)\n  id: BeginInvoke(System.TimeSpan,System.AsyncCallback,System.Object)\n  parent: System.Activities.WorkflowInvoker\n  langs:\n  - csharp\n  name: BeginInvoke(TimeSpan, AsyncCallback, Object)\n  nameWithType: WorkflowInvoker.BeginInvoke(TimeSpan, AsyncCallback, Object)\n  fullName: WorkflowInvoker.BeginInvoke(TimeSpan, AsyncCallback, Object)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities\n  summary: Invokes a workflow asynchronously using the specified time-out interval, <xref href=\"System.AsyncCallback\"></xref>, and user-provided state.\n  remarks: \"To be notified when the workflow is complete and retrieve the output parameters of the workflow, call <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> from the `callback` method. If <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> is called before the workflow completes, it blocks until the workflow completes. If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown when the <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> method is called.  \\n  \\n> [!NOTE]\\n>  The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution. A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.  \\n  \\n This method invokes a workflow asynchronously using the <xref:System.IAsyncResult> asynchronous design pattern. [!INCLUDE[crdefault](~/includes/crdefault-md.md)][Asynchronous Programming Overview](http://go.microsoft.com/fwlink/?LinkId=141764).\"\n  example:\n  - \"The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity. The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation. These are retrieved by calling <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>. When the call to <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> returns, each output argument is returned in the outputs dictionary, keyed by argument name.  \\n  \\n [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  \\n  \\n [!code-csharp[CFX_WorkflowInvokerExample#32](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#32)]\"\n  syntax:\n    content: public IAsyncResult BeginInvoke (TimeSpan timeout, AsyncCallback callback, object state);\n    parameters:\n    - id: timeout\n      type: System.TimeSpan\n      description: The interval in which the workflow must complete before it is aborted and a <xref href=\"System.TimeoutException\"></xref> is thrown.\n    - id: callback\n      type: System.AsyncCallback\n      description: The method to be called when the workflow has completed.\n    - id: state\n      type: System.Object\n      description: An optional application-specific object that contains information about the asynchronous operation.\n    return:\n      type: System.IAsyncResult\n      description: A reference to the asynchronous invoke operation.\n  overload: System.Activities.WorkflowInvoker.BeginInvoke*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Activities/WorkflowInvoker.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.AsyncCallback,System.Object)\n  commentId: M:System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.AsyncCallback,System.Object)\n  id: BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.AsyncCallback,System.Object)\n  parent: System.Activities.WorkflowInvoker\n  langs:\n  - csharp\n  name: BeginInvoke(IDictionary<String,Object>, TimeSpan, AsyncCallback, Object)\n  nameWithType: WorkflowInvoker.BeginInvoke(IDictionary<String,Object>, TimeSpan, AsyncCallback, Object)\n  fullName: WorkflowInvoker.BeginInvoke(IDictionary<String,Object>, TimeSpan, AsyncCallback, Object)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities\n  summary: Invokes a workflow asynchronously using the specified <xref href=\"System.Collections.Generic.IDictionary`2\"></xref> of input parameters, time-out interval, <xref href=\"System.AsyncCallback\"></xref>, and user-provided state.\n  remarks: \"To be notified when the workflow is complete and retrieve the output parameters of the workflow, call <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> from the `callback` method. If <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> is called before the workflow completes, it blocks until the workflow completes. If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown when <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> is called.  \\n  \\n> [!NOTE]\\n>  The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution. A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.  \\n  \\n This method invokes a workflow asynchronously using the <xref:System.IAsyncResult> asynchronous design pattern. [!INCLUDE[crdefault](~/includes/crdefault-md.md)][Asynchronous Programming Overview](http://go.microsoft.com/fwlink/?LinkId=141764).\"\n  example:\n  - \"The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity. The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation. These are retrieved by calling <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>. When the call to <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> returns, each output argument is returned in the outputs dictionary, keyed by argument name.  \\n  \\n [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  \\n  \\n [!code-csharp[CFX_WorkflowInvokerExample#32](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#32)]\"\n  syntax:\n    content: public IAsyncResult BeginInvoke (System.Collections.Generic.IDictionary<string,object> inputs, TimeSpan timeout, AsyncCallback callback, object state);\n    parameters:\n    - id: inputs\n      type: System.Collections.Generic.IDictionary{System.String,System.Object}\n      description: The dictionary of input parameters to the workflow, keyed by argument name.\n    - id: timeout\n      type: System.TimeSpan\n      description: The interval in which the workflow must complete before it is aborted and a <xref href=\"System.TimeoutException\"></xref> is thrown.\n    - id: callback\n      type: System.AsyncCallback\n      description: The method to be called when the workflow has completed.\n    - id: state\n      type: System.Object\n      description: An optional application-specific object that contains information about the asynchronous operation.\n    return:\n      type: System.IAsyncResult\n      description: A reference to the asynchronous invoke operation.\n  overload: System.Activities.WorkflowInvoker.BeginInvoke*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Activities/WorkflowInvoker.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Activities.WorkflowInvoker.CancelAsync(System.Object)\n  commentId: M:System.Activities.WorkflowInvoker.CancelAsync(System.Object)\n  id: CancelAsync(System.Object)\n  parent: System.Activities.WorkflowInvoker\n  langs:\n  - csharp\n  name: CancelAsync(Object)\n  nameWithType: WorkflowInvoker.CancelAsync(Object)\n  fullName: WorkflowInvoker.CancelAsync(Object)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities\n  summary: Attempts to cancel the workflow that was invoked with the specified <code>userState</code>.\n  remarks: \"Only a workflow invoked by one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads that takes a `userState` parameter can be canceled.  \\n  \\n If the cancellation succeeds, the <xref:System.ComponentModel.Cancelled%2A> property of the <xref:System.Activities.InvokeCompletedEventArgs> passed to the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler is set to `true`; otherwise, it is set to `false`.\"\n  example:\n  - \"The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity. The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation. Once the workflow is invoked, the host attempts to cancel the workflow.  \\n  \\n [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  \\n  \\n [!code-csharp[CFX_WorkflowInvokerExample#34](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#34)]\"\n  syntax:\n    content: public void CancelAsync (object userState);\n    parameters:\n    - id: userState\n      type: System.Object\n      description: The token for the workflow to cancel.\n  overload: System.Activities.WorkflowInvoker.CancelAsync*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Activities/WorkflowInvoker.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Activities.WorkflowInvoker.EndInvoke(System.IAsyncResult)\n  commentId: M:System.Activities.WorkflowInvoker.EndInvoke(System.IAsyncResult)\n  id: EndInvoke(System.IAsyncResult)\n  parent: System.Activities.WorkflowInvoker\n  langs:\n  - csharp\n  name: EndInvoke(IAsyncResult)\n  nameWithType: WorkflowInvoker.EndInvoke(IAsyncResult)\n  fullName: WorkflowInvoker.EndInvoke(IAsyncResult)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities\n  summary: Returns the results of a workflow that was invoked using one of the <xref href=\"System.Activities.WorkflowInvoker.BeginInvoke*\"></xref> overloads.\n  remarks: \"To be notified when the workflow is complete and retrieve the output parameters of the workflow, call <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> from the `callback` method specified by <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A>. If <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> is called before the workflow completes, it blocks until the workflow completes.  \\n  \\n This method returns the result of a workflow invoked asynchronously using the <xref:System.IAsyncResult> asynchronous design pattern. [!INCLUDE[crdefault](~/includes/crdefault-md.md)][Asynchronous Programming Overview](http://go.microsoft.com/fwlink/?LinkId=141764).\"\n  example:\n  - \"The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity. The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation. These are retrieved by calling <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>. When the call to <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> returns, each output argument is returned in the outputs dictionary, keyed by argument name.  \\n  \\n [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  \\n  \\n [!code-csharp[CFX_WorkflowInvokerExample#32](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#32)]\"\n  syntax:\n    content: public System.Collections.Generic.IDictionary<string,object> EndInvoke (IAsyncResult result);\n    parameters:\n    - id: result\n      type: System.IAsyncResult\n      description: The <xref href=\"System.IAsyncResult\"></xref> that references the <xref href=\"System.Activities.WorkflowInvoker.BeginInvoke*\"></xref> operation that started the workflow.\n    return:\n      type: System.Collections.Generic.IDictionary{System.String,System.Object}\n      description: A dictionary of the root activity’s <xref href=\"System.Activities.OutArgument\"></xref> and <xref href=\"System.Activities.InOutArgument\"></xref> values keyed by argument name that represent the outputs of the workflow.\n  overload: System.Activities.WorkflowInvoker.EndInvoke*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Activities/WorkflowInvoker.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Activities.WorkflowInvoker.Extensions\n  commentId: P:System.Activities.WorkflowInvoker.Extensions\n  id: Extensions\n  parent: System.Activities.WorkflowInvoker\n  langs:\n  - csharp\n  name: Extensions\n  nameWithType: WorkflowInvoker.Extensions\n  fullName: WorkflowInvoker.Extensions\n  type: Property\n  assemblies:\n  - System.Activities\n  namespace: System.Activities\n  summary: Gets the <xref href=\"System.Collections.ObjectModel.Collection`1\"></xref> of extensions that are available to workflows invoked by a <xref href=\"System.Activities.WorkflowInvoker\"></xref> instance.\n  remarks: This property is used by workflow host authors to add extensions to the <xref:System.Activities.WorkflowInvoker> instance so they will be available to workflows invoked by it.\n  example:\n  - \"The following example registers a custom <xref:System.Activities.Tracking.TrackingParticipant> with the <xref:System.Activities.WorkflowInvoker.Extensions%2A> collection of a <xref:System.Activities.WorkflowInvoker> instance. This code example is part of the [Custom Tracking](~/docs/framework/windows-workflow-foundation/samples/custom-tracking.md) sample.  \\n  \\n [!code-csharp[CFX_WorkflowInvokerExample#40](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#40)]\"\n  syntax:\n    content: public System.Activities.Hosting.WorkflowInstanceExtensionManager Extensions { get; }\n    return:\n      type: System.Activities.Hosting.WorkflowInstanceExtensionManager\n      description: The <xref href=\"System.Collections.ObjectModel.Collection`1\"></xref> of extensions that are available to workflows invoked by a <xref href=\"System.Activities.WorkflowInvoker\"></xref> instance.\n  overload: System.Activities.WorkflowInvoker.Extensions*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Activities/WorkflowInvoker.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)\n  commentId: M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)\n  id: Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)\n  parent: System.Activities.WorkflowInvoker\n  langs:\n  - csharp\n  name: Invoke(Activity, IDictionary<String,Object>, TimeSpan)\n  nameWithType: WorkflowInvoker.Invoke(Activity, IDictionary<String,Object>, TimeSpan)\n  fullName: WorkflowInvoker.Invoke(Activity, IDictionary<String,Object>, TimeSpan)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities\n  summary: Invokes a workflow synchronously using the specified workflow definition, <xref href=\"System.Collections.Generic.IDictionary`2\"></xref> of input parameters, and time-out interval.\n  remarks: \"This method blocks until the workflow has completed, including idle time. All workflow execution is guaranteed to execute on the invoking thread. If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.  \\n  \\n> [!NOTE]\\n>  The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution. A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.\"\n  example:\n  - \"The following example invokes a workflow that contains two <xref:System.Activities.Statements.WriteLine> activities and a <xref:System.Activities.Statements.Delay> activity configured with a <xref:System.Activities.Statements.Delay.Duration%2A> of one minute. This workflow is invoked twice; the first time with a time-out interval of two minutes, and the second time with a time-out interval of 30 seconds. The first workflow completes successfully, but the second one does not and a <xref:System.TimeoutException> is thrown.  \\n  \\n [!code-csharp[CFX_WorkflowInvokerExample#50](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#50)]  \\n  \\n For an example of using `Invoke` with input and output arguments, see the overload of <xref:System.Activities.WorkflowInvoker.Invoke%2A> with the same parameters as this overload without the time-out interval.\"\n  syntax:\n    content: public static System.Collections.Generic.IDictionary<string,object> Invoke (System.Activities.Activity workflow, System.Collections.Generic.IDictionary<string,object> inputs, TimeSpan timeout);\n    parameters:\n    - id: workflow\n      type: System.Activities.Activity\n      description: The workflow definition of the workflow to invoke.\n    - id: inputs\n      type: System.Collections.Generic.IDictionary{System.String,System.Object}\n      description: The dictionary of input parameters to the workflow, keyed by argument name.\n    - id: timeout\n      type: System.TimeSpan\n      description: The interval in which the workflow must complete before it is aborted and a <xref href=\"System.TimeoutException\"></xref> is thrown.\n    return:\n      type: System.Collections.Generic.IDictionary{System.String,System.Object}\n      description: A dictionary of the root activity’s <xref href=\"System.Activities.OutArgument\"></xref> and <xref href=\"System.Activities.InOutArgument\"></xref> values keyed by argument name that represent the outputs of the workflow.\n  overload: System.Activities.WorkflowInvoker.Invoke*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Activities/WorkflowInvoker.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.TimeSpan)\n  commentId: M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.TimeSpan)\n  id: Invoke(System.Activities.Activity,System.TimeSpan)\n  parent: System.Activities.WorkflowInvoker\n  langs:\n  - csharp\n  name: Invoke(Activity, TimeSpan)\n  nameWithType: WorkflowInvoker.Invoke(Activity, TimeSpan)\n  fullName: WorkflowInvoker.Invoke(Activity, TimeSpan)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities\n  summary: Invokes a workflow synchronously using the specified workflow definition and time-out interval.\n  remarks: \"This method blocks until the workflow has completed, including idle time. All workflow execution is guaranteed to execute on the invoking thread. If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.  \\n  \\n> [!NOTE]\\n>  The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution. A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.\"\n  example:\n  - \"The following example invokes a workflow that contains two <xref:System.Activities.Statements.WriteLine> activities and a <xref:System.Activities.Statements.Delay> activity configured with a <xref:System.Activities.Statements.Delay.Duration%2A> of one minute. This workflow is invoked twice; the first time with a time-out interval of two minutes, and the second time with a time-out interval of 30 seconds. The first workflow completes successfully, but the second one does not and a <xref:System.TimeoutException> is thrown.  \\n  \\n [!code-csharp[CFX_WorkflowInvokerExample#50](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#50)]  \\n  \\n For an example of using `Invoke` with output arguments, see the overload of <xref:System.Activities.WorkflowInvoker.Invoke%2A> with the same parameters as this overload without the time-out interval.\"\n  syntax:\n    content: public static System.Collections.Generic.IDictionary<string,object> Invoke (System.Activities.Activity workflow, TimeSpan timeout);\n    parameters:\n    - id: workflow\n      type: System.Activities.Activity\n      description: The workflow definition of the workflow to invoke.\n    - id: timeout\n      type: System.TimeSpan\n      description: The interval in which the workflow must complete before it is aborted and a <xref href=\"System.TimeoutException\"></xref> is thrown.\n    return:\n      type: System.Collections.Generic.IDictionary{System.String,System.Object}\n      description: A dictionary of the root activity’s <xref href=\"System.Activities.OutArgument\"></xref> and <xref href=\"System.Activities.InOutArgument\"></xref> values keyed by argument name that represent the outputs of the workflow.\n  overload: System.Activities.WorkflowInvoker.Invoke*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Activities/WorkflowInvoker.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object})\n  commentId: M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object})\n  id: Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object})\n  parent: System.Activities.WorkflowInvoker\n  langs:\n  - csharp\n  name: Invoke(Activity, IDictionary<String,Object>)\n  nameWithType: WorkflowInvoker.Invoke(Activity, IDictionary<String,Object>)\n  fullName: WorkflowInvoker.Invoke(Activity, IDictionary<String,Object>)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities\n  summary: Invokes a workflow synchronously using the specified workflow definition and <xref href=\"System.Collections.Generic.IDictionary`2\"></xref> of input parameters.\n  remarks: This method blocks until the workflow has completed, including idle time. All workflow execution is guaranteed to execute on the invoking thread. To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>.\n  example:\n  - \"The following example invokes a workflow consisting of a single `Divide` activity that has two input arguments and two output arguments. When the workflow is invoked, the `arguments` dictionary is passed which contains the values for each input argument, keyed by argument name. When the call to `Invoke` returns, each output argument is returned in the `outputs` dictionary, also keyed by argument name.  \\n  \\n [!code-csharp[CFX_WorkflowInvokerExample#120](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#120)]  \\n  \\n [!code-csharp[CFX_WorkflowInvokerExample#20](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#20)]  \\n  \\n If the workflow derives from <xref:System.Activities.ActivityWithResult>, such as `CodeActivity<TResult>` or `Activity<TResult>`, and there are output arguments in addition to the well-defined <xref:System.Activities.Activity%601.Result%2A> output argument, a non-generic overload of `Invoke`, such as this one, must be used in order to retrieve the additional arguments. To do this, the workflow definition passed into `Invoke` must be of type <xref:System.Activities.Activity>. In this example the `Divide` activity derives from `CodeActivity<int>`, but is declared as <xref:System.Activities.Activity> so that this overload of `Invoke`, which returns a dictionary of arguments instead of a single return value, is used.  \\n  \\n [!code-csharp[CFX_WorkflowInvokerExample#121](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#121)]  \\n  \\n [!code-csharp[CFX_WorkflowInvokerExample#21](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#21)]\"\n  syntax:\n    content: public static System.Collections.Generic.IDictionary<string,object> Invoke (System.Activities.Activity workflow, System.Collections.Generic.IDictionary<string,object> inputs);\n    parameters:\n    - id: workflow\n      type: System.Activities.Activity\n      description: The workflow definition of the workflow to invoke.\n    - id: inputs\n      type: System.Collections.Generic.IDictionary{System.String,System.Object}\n      description: The dictionary of input parameters to the workflow, keyed by argument name.\n    return:\n      type: System.Collections.Generic.IDictionary{System.String,System.Object}\n      description: A dictionary of the root activity’s <xref href=\"System.Activities.OutArgument\"></xref> and <xref href=\"System.Activities.InOutArgument\"></xref> values keyed by argument name that represent the outputs of the workflow.\n  overload: System.Activities.WorkflowInvoker.Invoke*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Activities/WorkflowInvoker.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)\n  commentId: M:System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)\n  id: Invoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)\n  parent: System.Activities.WorkflowInvoker\n  langs:\n  - csharp\n  name: Invoke(IDictionary<String,Object>, TimeSpan)\n  nameWithType: WorkflowInvoker.Invoke(IDictionary<String,Object>, TimeSpan)\n  fullName: WorkflowInvoker.Invoke(IDictionary<String,Object>, TimeSpan)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities\n  summary: Invokes the activity passed to the <xref href=\"System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)\"></xref> constructor synchronously with the specified <xref href=\"System.Collections.Generic.IDictionary`2\"></xref> of input parameters and the specified time-out interval.\n  remarks: \"This method blocks until the workflow has completed, including idle time. All workflow execution is guaranteed to execute on the invoking thread. If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.  \\n  \\n> [!NOTE]\\n>  The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution. A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.\"\n  example:\n  - \"The following example invokes a workflow that contains two <xref:System.Activities.Statements.WriteLine> activities and a <xref:System.Activities.Statements.Delay> activity configured with a <xref:System.Activities.Statements.Delay.Duration%2A> of one minute. This workflow is invoked twice; the first time with a time-out interval of two minutes, and the second time with a time-out interval of 30 seconds. The first workflow completes successfully, but the second one does not and a <xref:System.TimeoutException> is thrown and the following message is displayed.  \\n  \\n```Output  \\nThe operation did not complete within the allotted timeout of 00:00:30.   \\nThe time allotted to this operation may have been a portion of a longer timeout.  \\n```  \\n  \\n [!code-csharp[CFX_WorkflowInvokerExample#51](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#51)]  \\n  \\n For an example of using `Invoke` with input and output arguments, see the overload of <xref:System.Activities.WorkflowInvoker.Invoke%2A> with the same parameters as this overload without the time-out interval.\"\n  syntax:\n    content: public System.Collections.Generic.IDictionary<string,object> Invoke (System.Collections.Generic.IDictionary<string,object> inputs, TimeSpan timeout);\n    parameters:\n    - id: inputs\n      type: System.Collections.Generic.IDictionary{System.String,System.Object}\n      description: The dictionary of input parameters to the workflow, keyed by argument name.\n    - id: timeout\n      type: System.TimeSpan\n      description: The interval in which the workflow must complete before it is aborted and a <xref href=\"System.TimeoutException\"></xref> is thrown.\n    return:\n      type: System.Collections.Generic.IDictionary{System.String,System.Object}\n      description: A dictionary of the root activity’s <xref href=\"System.Activities.OutArgument\"></xref> and <xref href=\"System.Activities.InOutArgument\"></xref> values keyed by argument name that represent the outputs of the workflow.\n  overload: System.Activities.WorkflowInvoker.Invoke*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Activities/WorkflowInvoker.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object})\n  commentId: M:System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object})\n  id: Invoke(System.Collections.Generic.IDictionary{System.String,System.Object})\n  parent: System.Activities.WorkflowInvoker\n  langs:\n  - csharp\n  name: Invoke(IDictionary<String,Object>)\n  nameWithType: WorkflowInvoker.Invoke(IDictionary<String,Object>)\n  fullName: WorkflowInvoker.Invoke(IDictionary<String,Object>)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities\n  summary: Invokes the activity passed to the <xref href=\"System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)\"></xref> constructor synchronously with the specified <xref href=\"System.Collections.Generic.IDictionary`2\"></xref> of input parameters.\n  remarks: This method blocks until the workflow has completed, including idle time. All workflow execution is guaranteed to execute on the invoking thread. To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>.\n  example:\n  - \"The following example invokes a workflow consisting of a single `Divide` activity that has two input arguments and two output arguments. When the workflow is invoked, the `arguments` dictionary is passed which contains the values for each input argument, keyed by argument name. When the call to `Invoke` returns, each output argument is returned in the `outputs` dictionary, also keyed by argument name.  \\n  \\n [!code-csharp[CFX_WorkflowInvokerExample#120](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#120)]  \\n  \\n [!code-csharp[CFX_WorkflowInvokerExample#22](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#22)]  \\n  \\n If the workflow derives from <xref:System.Activities.ActivityWithResult>, such as `CodeActivity<TResult>` or `Activity<TResult>`, and there are output arguments in addition to the well-defined <xref:System.Activities.Activity%601.Result%2A> output argument, a non-generic overload of `Invoke`, such as this one, must be used in order to retrieve the additional arguments. To do this, the workflow definition passed into the `WorkflowInvoker` constructor must be of type <xref:System.Activities.Activity>. In this example the `Divide` activity derives from `CodeActivity<int>`, but is declared as <xref:System.Activities.Activity> so that this overload of `Invoke`, which returns a dictionary of arguments instead of a single return value, is used.  \\n  \\n [!code-csharp[CFX_WorkflowInvokerExample#121](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#121)]  \\n  \\n [!code-csharp[CFX_WorkflowInvokerExample#23](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#23)]\"\n  syntax:\n    content: public System.Collections.Generic.IDictionary<string,object> Invoke (System.Collections.Generic.IDictionary<string,object> inputs);\n    parameters:\n    - id: inputs\n      type: System.Collections.Generic.IDictionary{System.String,System.Object}\n      description: The dictionary of input parameters to the workflow, keyed by argument name.\n    return:\n      type: System.Collections.Generic.IDictionary{System.String,System.Object}\n      description: A dictionary of the root activity’s <xref href=\"System.Activities.OutArgument\"></xref> and <xref href=\"System.Activities.InOutArgument\"></xref> values keyed by argument name that represent the outputs of the workflow.\n  overload: System.Activities.WorkflowInvoker.Invoke*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Activities/WorkflowInvoker.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity)\n  commentId: M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity)\n  id: Invoke(System.Activities.Activity)\n  parent: System.Activities.WorkflowInvoker\n  langs:\n  - csharp\n  name: Invoke(Activity)\n  nameWithType: WorkflowInvoker.Invoke(Activity)\n  fullName: WorkflowInvoker.Invoke(Activity)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities\n  summary: Invokes a workflow synchronously using the specified workflow definition.\n  remarks: This method blocks until the workflow has completed, including idle time. All workflow execution is guaranteed to execute on the invoking thread. To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>.\n  example:\n  - \"The following example invokes a workflow consisting of a single `DiceRoll` activity. The `DiceRoll` activity has two output arguments that represent the results of the dice roll operation. When the call to `Invoke` returns, each output argument is returned in the outputs dictionary, keyed by argument name.  \\n  \\n [!code-csharp[CFX_WorkflowInvokerExample#130](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#130)]  \\n  \\n [!code-csharp[CFX_WorkflowInvokerExample#30](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#30)]  \\n  \\n If the workflow's root activity has no output arguments or they are not needed by the host, they can be disregarded. The following example invokes a workflow consisting of a single <xref:System.Activities.Statements.WriteLine> activity that does not have any output arguments.  \\n  \\n [!code-csharp[CFX_WorkflowInvokerExample#1](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#1)]\"\n  syntax:\n    content: public static System.Collections.Generic.IDictionary<string,object> Invoke (System.Activities.Activity workflow);\n    parameters:\n    - id: workflow\n      type: System.Activities.Activity\n      description: The workflow definition of the workflow to invoke.\n    return:\n      type: System.Collections.Generic.IDictionary{System.String,System.Object}\n      description: A dictionary of the root activity’s <xref href=\"System.Activities.OutArgument\"></xref> and <xref href=\"System.Activities.InOutArgument\"></xref> values keyed by argument name that represent the outputs of the workflow.\n  overload: System.Activities.WorkflowInvoker.Invoke*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Activities/WorkflowInvoker.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Activities.WorkflowInvoker.Invoke\n  commentId: M:System.Activities.WorkflowInvoker.Invoke\n  id: Invoke\n  parent: System.Activities.WorkflowInvoker\n  langs:\n  - csharp\n  name: Invoke()\n  nameWithType: WorkflowInvoker.Invoke()\n  fullName: WorkflowInvoker.Invoke()\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities\n  summary: Invokes a workflow synchronously using the workflow definition passed to the <xref href=\"System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)\"></xref> constructor.\n  remarks: This method blocks until the workflow has completed, including idle time. All workflow execution is guaranteed to execute on the invoking thread. To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>.\n  example:\n  - \"The following example invokes a workflow consisting of a single `DiceRoll` activity. The `DiceRoll` activity has two output arguments that represent the results of the dice roll operation. When the call to `Invoke` returns, each output argument is returned in the outputs dictionary, keyed by argument name. The workflow is invoked twice, using the workflow definition passed into to the `WorkflowInvoker` constructor.  \\n  \\n [!code-csharp[CFX_WorkflowInvokerExample#130](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#130)]  \\n  \\n [!code-csharp[CFX_WorkflowInvokerExample#31](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#31)]  \\n  \\n If the workflow's root activity has no output arguments or they are not needed by the host, they can be disregarded. The following example invokes a workflow consisting of a single <xref:System.Activities.Statements.WriteLine> activity that does not have any output arguments.  \\n  \\n [!code-csharp[CFX_WorkflowInvokerExample#2](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#2)]\"\n  syntax:\n    content: public System.Collections.Generic.IDictionary<string,object> Invoke ();\n    parameters: []\n    return:\n      type: System.Collections.Generic.IDictionary{System.String,System.Object}\n      description: A dictionary of the root activity’s <xref href=\"System.Activities.OutArgument\"></xref> and <xref href=\"System.Activities.InOutArgument\"></xref> values keyed by argument name that represent the outputs of the workflow.\n  overload: System.Activities.WorkflowInvoker.Invoke*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Activities/WorkflowInvoker.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Activities.WorkflowInvoker.Invoke(System.TimeSpan)\n  commentId: M:System.Activities.WorkflowInvoker.Invoke(System.TimeSpan)\n  id: Invoke(System.TimeSpan)\n  parent: System.Activities.WorkflowInvoker\n  langs:\n  - csharp\n  name: Invoke(TimeSpan)\n  nameWithType: WorkflowInvoker.Invoke(TimeSpan)\n  fullName: WorkflowInvoker.Invoke(TimeSpan)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities\n  summary: Invokes a workflow synchronously with the specified time-out interval.\n  remarks: \"This method blocks until the workflow has completed, including idle time. All workflow execution is guaranteed to execute on the invoking thread. If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.  \\n  \\n> [!NOTE]\\n>  The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution. A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.\"\n  example:\n  - \"The following example invokes a workflow that contains two <xref:System.Activities.Statements.WriteLine> activities and a <xref:System.Activities.Statements.Delay> activity configured with a <xref:System.Activities.Statements.Delay.Duration%2A> of one minute. This workflow is invoked twice; the first time with a time-out interval of two minutes, and the second time with a time-out interval of 30 seconds. The first workflow completes successfully, but the second one does not and a <xref:System.TimeoutException> is thrown and the following message is displayed.  \\n  \\n```Output  \\nThe operation did not complete within the allotted timeout of 00:00:30.   \\nThe time allotted to this operation may have been a portion of a longer timeout.  \\n```  \\n  \\n [!code-csharp[CFX_WorkflowInvokerExample#51](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#51)]  \\n  \\n For an example of using `Invoke` with output arguments, see the overload of <xref:System.Activities.WorkflowInvoker.Invoke%2A> with the same parameters as this overload without the time-out interval.\"\n  syntax:\n    content: public System.Collections.Generic.IDictionary<string,object> Invoke (TimeSpan timeout);\n    parameters:\n    - id: timeout\n      type: System.TimeSpan\n      description: The interval in which the workflow must complete before it is aborted and a <xref href=\"System.TimeoutException\"></xref> is thrown.\n    return:\n      type: System.Collections.Generic.IDictionary{System.String,System.Object}\n      description: A dictionary of the root activity’s <xref href=\"System.Activities.OutArgument\"></xref> and <xref href=\"System.Activities.InOutArgument\"></xref> values keyed by argument name that represent the outputs of the workflow.\n  overload: System.Activities.WorkflowInvoker.Invoke*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Activities/WorkflowInvoker.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0})\n  commentId: M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0})\n  id: Invoke``1(System.Activities.Activity{``0})\n  parent: System.Activities.WorkflowInvoker\n  langs:\n  - csharp\n  name: Invoke<TResult>(Activity<TResult>)\n  nameWithType: WorkflowInvoker.Invoke<TResult>(Activity<TResult>)\n  fullName: WorkflowInvoker.Invoke<TResult>(Activity<TResult>)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities\n  summary: Invokes a workflow synchronously using the workflow definition passed to the <xref href=\"System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)\"></xref> constructor.\n  remarks: This method blocks until the workflow has completed, including idle time. All workflow execution is guaranteed to execute on the invoking thread. To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>.\n  example:\n  - \"The following example invokes a workflow consisting of a single `Add` activity that has two input arguments and since it derives from `CodeActivity<int>` it has one well-defined <xref:System.Activities.Activity%601.Result%2A> output argument. When the workflow is invoked, the `arguments` dictionary is passed which contains the values for each input argument, keyed by argument name. When the call to `Invoke` returns, the value of the <xref:System.Activities.Activity%601.Result%2A> output argument is returned. This code example is based off of the [Using the WorkflowInvoker Class](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md) sample.  \\n  \\n [!code-csharp[CFX_WorkflowInvokerExample#110](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#110)]  \\n  \\n [!code-csharp[CFX_WorkflowInvokerExample#10](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#10)]\"\n  syntax:\n    content: public static TResult Invoke<TResult> (System.Activities.Activity<TResult> workflow);\n    parameters:\n    - id: workflow\n      type: System.Activities.Activity`1\n      description: The workflow definition of the workflow to invoke. The workflow definition needs to derive from <xref href=\"System.Activities.ActivityWithResult\"></xref>.\n    typeParameters:\n    - id: TResult\n      description: The type of the workflow.\n    return:\n      type: TResult\n      description: A value of type TResult with the result of the execution of the activity.\n  overload: System.Activities.WorkflowInvoker.Invoke``1*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Activities/WorkflowInvoker.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object})\n  commentId: M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object})\n  id: Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object})\n  parent: System.Activities.WorkflowInvoker\n  langs:\n  - csharp\n  name: Invoke<TResult>(Activity<TResult>, IDictionary<String,Object>)\n  nameWithType: WorkflowInvoker.Invoke<TResult>(Activity<TResult>, IDictionary<String,Object>)\n  fullName: WorkflowInvoker.Invoke<TResult>(Activity<TResult>, IDictionary<String,Object>)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities\n  summary: Invokes a workflow synchronously using the specified workflow definition and <xref href=\"System.Collections.Generic.IDictionary`2\"></xref> of input parameters.\n  remarks: \"This method blocks until the workflow has completed, including idle time. All workflow execution is guaranteed to execute on the invoking thread. To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>.  \\n  \\n> [!NOTE]\\n>  The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution. A workflow that takes longer than the specified time-out interval to complete, completes successfully if the workflow does not become idle.\"\n  example:\n  - \"The following example invokes a workflow consisting of a single `Add` activity that has two input arguments and since it derives from `CodeActivity<int>` it has one well-defined <xref:System.Activities.Activity%601.Result%2A> output argument. When the workflow is invoked, the `arguments` dictionary is passed which contains the values for each input argument, keyed by argument name. When the call to `Invoke` returns, the value of the <xref:System.Activities.Activity%601.Result%2A> output argument is returned. This code example is based off of the [Using the WorkflowInvoker Class](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md) sample.  \\n  \\n [!code-csharp[CFX_WorkflowInvokerExample#110](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#110)]  \\n  \\n [!code-csharp[CFX_WorkflowInvokerExample#10](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#10)]\"\n  syntax:\n    content: public static TResult Invoke<TResult> (System.Activities.Activity<TResult> workflow, System.Collections.Generic.IDictionary<string,object> inputs);\n    parameters:\n    - id: workflow\n      type: System.Activities.Activity`1\n      description: The workflow definition of the workflow to invoke.\n    - id: inputs\n      type: System.Collections.Generic.IDictionary{System.String,System.Object}\n      description: The dictionary of input parameters to the workflow, keyed by argument name.\n    typeParameters:\n    - id: TResult\n      description: The type of the workflow.\n    return:\n      type: TResult\n      description: A value of type TResult with the result of the execution of the activity.\n  overload: System.Activities.WorkflowInvoker.Invoke``1*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Activities/WorkflowInvoker.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)\n  commentId: M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)\n  id: Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)\n  parent: System.Activities.WorkflowInvoker\n  langs:\n  - csharp\n  name: Invoke<TResult>(Activity<TResult>, IDictionary<String,Object>, TimeSpan)\n  nameWithType: WorkflowInvoker.Invoke<TResult>(Activity<TResult>, IDictionary<String,Object>, TimeSpan)\n  fullName: WorkflowInvoker.Invoke<TResult>(Activity<TResult>, IDictionary<String,Object>, TimeSpan)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities\n  summary: Invokes a workflow synchronously using the specified workflow definition, <xref href=\"System.Collections.Generic.IDictionary`2\"></xref> of input parameters, and time-out interval.\n  remarks: \"This method blocks until the workflow has completed, including idle time. All workflow execution is guaranteed to execute on the invoking thread. If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.  \\n  \\n> [!NOTE]\\n>  The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution. A workflow that takes longer than the specified time-out interval to complete, completes successfully if the workflow does not become idle.\"\n  example:\n  - \"The following example invokes a workflow consisting of a single `Add` activity that has two input arguments and since it derives from `CodeActivity<int>` it has one well-defined <xref:System.Activities.Activity%601.Result%2A> output argument. When the workflow is invoked, the `arguments` dictionary is passed which contains the values for each input argument, keyed by argument name. When the call to `Invoke` returns, the value of the <xref:System.Activities.Activity%601.Result%2A> output argument is returned. This code example is based off of the [Using the WorkflowInvoker Class](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md) sample.  \\n  \\n [!code-csharp[CFX_WorkflowInvokerExample#110](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#110)]  \\n  \\n [!code-csharp[CFX_WorkflowInvokerExample#10](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#10)]\"\n  syntax:\n    content: public static TResult Invoke<TResult> (System.Activities.Activity<TResult> workflow, System.Collections.Generic.IDictionary<string,object> inputs, TimeSpan timeout);\n    parameters:\n    - id: workflow\n      type: System.Activities.Activity`1\n      description: The workflow definition of the workflow to invoke.\n    - id: inputs\n      type: System.Collections.Generic.IDictionary{System.String,System.Object}\n      description: The dictionary of input parameters to the workflow, keyed by argument name.\n    - id: timeout\n      type: System.TimeSpan\n      description: The interval in which the workflow must complete before it is aborted and a <xref href=\"System.TimeoutException\"></xref> is thrown.\n    typeParameters:\n    - id: TResult\n      description: The type of the workflow.\n    return:\n      type: TResult\n      description: A value of type TResult with the result of the execution of the activity.\n  overload: System.Activities.WorkflowInvoker.Invoke``1*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Activities/WorkflowInvoker.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object}@,System.TimeSpan)\n  commentId: M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object}@,System.TimeSpan)\n  id: Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object}@,System.TimeSpan)\n  parent: System.Activities.WorkflowInvoker\n  langs:\n  - csharp\n  name: Invoke<TResult>(Activity<TResult>, IDictionary<String,Object>, IDictionary<String,Object>, TimeSpan)\n  nameWithType: WorkflowInvoker.Invoke<TResult>(Activity<TResult>, IDictionary<String,Object>, IDictionary<String,Object>, TimeSpan)\n  fullName: WorkflowInvoker.Invoke<TResult>(Activity<TResult>, IDictionary<String,Object>, IDictionary<String,Object>, TimeSpan)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities\n  summary: Invokes a workflow synchronously using the specified workflow definition, <xref href=\"System.Collections.Generic.IDictionary`2\"></xref> of input parameters, <xref href=\"System.Collections.Generic.IDictionary`2\"></xref> of additional output parameters, and time-out interval.\n  remarks: \"This method blocks until the workflow has completed, including idle time. All workflow execution is guaranteed to execute on the invoking thread. If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.  \\n  \\n> [!NOTE]\\n>  The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution. A workflow that takes longer than the specified time-out interval to complete, completes successfully if the workflow does not become idle.\"\n  example:\n  - \"The following example invokes a workflow consisting of a single `Add` activity that has two input arguments and since it derives from `CodeActivity<int>` it has one well-defined <xref:System.Activities.Activity%601.Result%2A> output argument. When the workflow is invoked, the `arguments` dictionary is passed which contains the values for each input argument, keyed by argument name. When the call to `Invoke` returns, the value of the <xref:System.Activities.Activity%601.Result%2A> output argument is returned. This code example is based off of the [Using the WorkflowInvoker Class](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md) sample.  \\n  \\n [!code-csharp[CFX_WorkflowInvokerExample#110](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#110)]  \\n  \\n [!code-csharp[CFX_WorkflowInvokerExample#10](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#10)]\"\n  syntax:\n    content: public static TResult Invoke<TResult> (System.Activities.Activity<TResult> workflow, System.Collections.Generic.IDictionary<string,object> inputs, out System.Collections.Generic.IDictionary<string,object> additionalOutputs, TimeSpan timeout);\n    parameters:\n    - id: workflow\n      type: System.Activities.Activity`1\n      description: The workflow definition of the workflow to invoke.\n    - id: inputs\n      type: System.Collections.Generic.IDictionary{System.String,System.Object}\n      description: The dictionary of input parameters to the workflow, keyed by argument name.\n    - id: additionalOutputs\n      type: System.Collections.Generic.IDictionary{System.String,System.Object}\n      description: The dictionary of additional output parameters of the workflow, keyed by argument name.\n    - id: timeout\n      type: System.TimeSpan\n      description: The interval in which the workflow must complete before it is aborted and a <xref href=\"System.TimeoutException\"></xref> is thrown.\n    typeParameters:\n    - id: TResult\n      description: The type of the workflow.\n    return:\n      type: TResult\n      description: A value of type TResult with the result of the execution of the activity.\n  overload: System.Activities.WorkflowInvoker.Invoke``1*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Activities/WorkflowInvoker.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan,System.Object)\n  commentId: M:System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan,System.Object)\n  id: InvokeAsync(System.TimeSpan,System.Object)\n  parent: System.Activities.WorkflowInvoker\n  langs:\n  - csharp\n  name: InvokeAsync(TimeSpan, Object)\n  nameWithType: WorkflowInvoker.InvokeAsync(TimeSpan, Object)\n  fullName: WorkflowInvoker.InvokeAsync(TimeSpan, Object)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities\n  summary: Invokes a workflow asynchronously with the specified time-out interval and a unique identifier.\n  remarks: \"The `userState` parameter must be unique across all currently running <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> operations for the current activity. If `userState` is not unique, an <xref:System.ArgumentException> is thrown. `userState` is used to identify the workflow in <xref:System.Activities.WorkflowInvoker.InvokeCompleted>, and to cancel the workflow using <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>.  \\n  \\n To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>. If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.  \\n  \\n> [!NOTE]\\n>  The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution. A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.  \\n  \\n This method invokes a workflow asynchronously using the event-based asynchronous design pattern. [!INCLUDE[crdefault](~/includes/crdefault-md.md)][Event-based Asynchronous Pattern Overview](http://go.microsoft.com/fwlink/?LinkId=141765).\"\n  example:\n  - \"The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity. The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation. When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.  \\n  \\n [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  \\n  \\n [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]\"\n  syntax:\n    content: public void InvokeAsync (TimeSpan timeout, object userState);\n    parameters:\n    - id: timeout\n      type: System.TimeSpan\n      description: The interval in which the workflow must complete before it is aborted and a <xref href=\"System.TimeoutException\"></xref> is thrown.\n    - id: userState\n      type: System.Object\n      description: A user-provided object used to distinguish this particular asynchronous invoke operation from other current asynchronous invoke operations.\n  overload: System.Activities.WorkflowInvoker.InvokeAsync*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Activities/WorkflowInvoker.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)\n  commentId: M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)\n  id: InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)\n  parent: System.Activities.WorkflowInvoker\n  langs:\n  - csharp\n  name: InvokeAsync(IDictionary<String,Object>, TimeSpan)\n  nameWithType: WorkflowInvoker.InvokeAsync(IDictionary<String,Object>, TimeSpan)\n  fullName: WorkflowInvoker.InvokeAsync(IDictionary<String,Object>, TimeSpan)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities\n  summary: Invokes a workflow asynchronously with the specified <xref href=\"System.Collections.Generic.IDictionary`2\"></xref> of input parameters and the specified time-out interval.\n  remarks: \"To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>. If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.  \\n  \\n> [!NOTE]\\n>  The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution. A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.  \\n  \\n This method invokes a workflow asynchronously using the event-based asynchronous design pattern. [!INCLUDE[crdefault](~/includes/crdefault-md.md)][Event-based Asynchronous Pattern Overview](http://go.microsoft.com/fwlink/?LinkId=141765).\"\n  example:\n  - \"The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity. The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation. When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.  \\n  \\n [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  \\n  \\n [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]\"\n  syntax:\n    content: public void InvokeAsync (System.Collections.Generic.IDictionary<string,object> inputs, TimeSpan timeout);\n    parameters:\n    - id: inputs\n      type: System.Collections.Generic.IDictionary{System.String,System.Object}\n      description: The dictionary of input parameters to the workflow, keyed by argument name.\n    - id: timeout\n      type: System.TimeSpan\n      description: The interval in which the workflow must complete before it is aborted and a <xref href=\"System.TimeoutException\"></xref> is thrown.\n  overload: System.Activities.WorkflowInvoker.InvokeAsync*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Activities/WorkflowInvoker.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)\n  commentId: M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)\n  id: InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)\n  parent: System.Activities.WorkflowInvoker\n  langs:\n  - csharp\n  name: InvokeAsync(IDictionary<String,Object>, Object)\n  nameWithType: WorkflowInvoker.InvokeAsync(IDictionary<String,Object>, Object)\n  fullName: WorkflowInvoker.InvokeAsync(IDictionary<String,Object>, Object)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities\n  summary: Invokes a workflow asynchronously using the specified <xref href=\"System.Collections.Generic.IDictionary`2\"></xref> of input parameters and a unique identifier.\n  remarks: \"The `userState` parameter must be unique across all currently running <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> operations for the current activity. If `userState` is not unique, an <xref:System.ArgumentException> is thrown. `userState` is used to identify the workflow in <xref:System.Activities.WorkflowInvoker.InvokeCompleted>, and to cancel the workflow using <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>.  \\n  \\n To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>. To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads that take a <xref:System.TimeSpan>.  \\n  \\n This method invokes a workflow asynchronously using the event-based asynchronous design pattern. [!INCLUDE[crdefault](~/includes/crdefault-md.md)][Event-based Asynchronous Pattern Overview](http://go.microsoft.com/fwlink/?LinkId=141765).\"\n  example:\n  - \"The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity. The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation. When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.  \\n  \\n [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  \\n  \\n [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]\"\n  syntax:\n    content: public void InvokeAsync (System.Collections.Generic.IDictionary<string,object> inputs, object userState);\n    parameters:\n    - id: inputs\n      type: System.Collections.Generic.IDictionary{System.String,System.Object}\n      description: The dictionary of input parameters to the workflow, keyed by argument name.\n    - id: userState\n      type: System.Object\n      description: A user-provided object used to distinguish this particular asynchronous invoke operation from other current asynchronous invoke operations.\n  overload: System.Activities.WorkflowInvoker.InvokeAsync*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Activities/WorkflowInvoker.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Activities.WorkflowInvoker.InvokeAsync\n  commentId: M:System.Activities.WorkflowInvoker.InvokeAsync\n  id: InvokeAsync\n  parent: System.Activities.WorkflowInvoker\n  langs:\n  - csharp\n  name: InvokeAsync()\n  nameWithType: WorkflowInvoker.InvokeAsync()\n  fullName: WorkflowInvoker.InvokeAsync()\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities\n  summary: Invokes a workflow asynchronously.\n  remarks: \"To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>. To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads that take a <xref:System.TimeSpan>.  \\n  \\n This method invokes a workflow asynchronously using the event-based asynchronous design pattern. [!INCLUDE[crdefault](~/includes/crdefault-md.md)][Event-based Asynchronous Pattern Overview](http://go.microsoft.com/fwlink/?LinkId=141765).\"\n  example:\n  - \"The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity. The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation. When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.  \\n  \\n [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  \\n  \\n [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]\"\n  syntax:\n    content: public void InvokeAsync ();\n    parameters: []\n  overload: System.Activities.WorkflowInvoker.InvokeAsync*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Activities/WorkflowInvoker.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Activities.WorkflowInvoker.InvokeAsync(System.Object)\n  commentId: M:System.Activities.WorkflowInvoker.InvokeAsync(System.Object)\n  id: InvokeAsync(System.Object)\n  parent: System.Activities.WorkflowInvoker\n  langs:\n  - csharp\n  name: InvokeAsync(Object)\n  nameWithType: WorkflowInvoker.InvokeAsync(Object)\n  fullName: WorkflowInvoker.InvokeAsync(Object)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities\n  summary: Invokes a workflow asynchronously using the specified unique identifier.\n  remarks: \"The `userState` parameter must be unique across all currently running <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> operations for the current activity. If the `userState` parameter is not unique, an <xref:System.ArgumentException> is thrown. `userState` is used to identify the workflow in <xref:System.Activities.WorkflowInvoker.InvokeCompleted>, and to cancel the workflow using <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>.  \\n  \\n To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>. To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads that take a <xref:System.TimeSpan>.  \\n  \\n This method invokes a workflow asynchronously using the event-based asynchronous design pattern. [!INCLUDE[crdefault](~/includes/crdefault-md.md)][Event-based Asynchronous Pattern Overview](http://go.microsoft.com/fwlink/?LinkId=141765).\"\n  example:\n  - \"The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity. The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation. When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.  \\n  \\n [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  \\n  \\n [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]\"\n  syntax:\n    content: public void InvokeAsync (object userState);\n    parameters:\n    - id: userState\n      type: System.Object\n      description: A user-provided object used to distinguish this particular asynchronous invoke operation from other current asynchronous invoke operations.\n  overload: System.Activities.WorkflowInvoker.InvokeAsync*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Activities/WorkflowInvoker.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object})\n  commentId: M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object})\n  id: InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object})\n  parent: System.Activities.WorkflowInvoker\n  langs:\n  - csharp\n  name: InvokeAsync(IDictionary<String,Object>)\n  nameWithType: WorkflowInvoker.InvokeAsync(IDictionary<String,Object>)\n  fullName: WorkflowInvoker.InvokeAsync(IDictionary<String,Object>)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities\n  summary: Invokes a workflow asynchronously using the specified <xref href=\"System.Collections.Generic.IDictionary`2\"></xref> of input parameters.\n  remarks: \"To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>. To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads that take a <xref:System.TimeSpan>.  \\n  \\n This method invokes a workflow asynchronously using the event-based asynchronous design pattern. [!INCLUDE[crdefault](~/includes/crdefault-md.md)][Event-based Asynchronous Pattern Overview](http://go.microsoft.com/fwlink/?LinkId=141765).\"\n  example:\n  - \"The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity. The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation. When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.  \\n  \\n [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  \\n  \\n [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]\"\n  syntax:\n    content: public void InvokeAsync (System.Collections.Generic.IDictionary<string,object> inputs);\n    parameters:\n    - id: inputs\n      type: System.Collections.Generic.IDictionary{System.String,System.Object}\n      description: The dictionary of input parameters to the workflow, keyed by argument name.\n  overload: System.Activities.WorkflowInvoker.InvokeAsync*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Activities/WorkflowInvoker.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.Object)\n  commentId: M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.Object)\n  id: InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.Object)\n  parent: System.Activities.WorkflowInvoker\n  langs:\n  - csharp\n  name: InvokeAsync(IDictionary<String,Object>, TimeSpan, Object)\n  nameWithType: WorkflowInvoker.InvokeAsync(IDictionary<String,Object>, TimeSpan, Object)\n  fullName: WorkflowInvoker.InvokeAsync(IDictionary<String,Object>, TimeSpan, Object)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities\n  summary: Invokes a workflow asynchronously with the specified <xref href=\"System.Collections.Generic.IDictionary`2\"></xref> of input parameters, the specified time-out interval, and a unique identifier.\n  remarks: \"The `userState` parameter must be unique across all currently running <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> operations for the current activity. If `userState` is not unique, an <xref:System.ArgumentException> is thrown. `userState` is used to identify the workflow in <xref:System.Activities.WorkflowInvoker.InvokeCompleted>, and to cancel the workflow using <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>.  \\n  \\n To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>. If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.  \\n  \\n> [!NOTE]\\n>  The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution. A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.  \\n  \\n This method invokes a workflow asynchronously using the event-based asynchronous design pattern. [!INCLUDE[crdefault](~/includes/crdefault-md.md)][Event-based Asynchronous Pattern Overview](http://go.microsoft.com/fwlink/?LinkId=141765).\"\n  example:\n  - \"The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity. The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation. When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.  \\n  \\n [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  \\n  \\n [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]\"\n  syntax:\n    content: public void InvokeAsync (System.Collections.Generic.IDictionary<string,object> inputs, TimeSpan timeout, object userState);\n    parameters:\n    - id: inputs\n      type: System.Collections.Generic.IDictionary{System.String,System.Object}\n      description: The dictionary of input parameters to the workflow, keyed by argument name.\n    - id: timeout\n      type: System.TimeSpan\n      description: The interval in which the workflow must complete before it is aborted and a <xref href=\"System.TimeoutException\"></xref> is thrown.\n    - id: userState\n      type: System.Object\n      description: A user-provided object used to distinguish this particular asynchronous invoke operation from other current asynchronous invoke operations.\n  overload: System.Activities.WorkflowInvoker.InvokeAsync*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Activities/WorkflowInvoker.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan)\n  commentId: M:System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan)\n  id: InvokeAsync(System.TimeSpan)\n  parent: System.Activities.WorkflowInvoker\n  langs:\n  - csharp\n  name: InvokeAsync(TimeSpan)\n  nameWithType: WorkflowInvoker.InvokeAsync(TimeSpan)\n  fullName: WorkflowInvoker.InvokeAsync(TimeSpan)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities\n  summary: Invokes a workflow asynchronously with the specified time-out interval.\n  remarks: \"To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>. If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.  \\n  \\n> [!NOTE]\\n>  The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution. A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.  \\n  \\n This method invokes a workflow asynchronously using the event-based asynchronous design pattern. [!INCLUDE[crdefault](~/includes/crdefault-md.md)][Event-based Asynchronous Pattern Overview](http://go.microsoft.com/fwlink/?LinkId=141765).\"\n  example:\n  - \"The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity. The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation. When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.  \\n  \\n [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  \\n  \\n [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]\"\n  syntax:\n    content: public void InvokeAsync (TimeSpan timeout);\n    parameters:\n    - id: timeout\n      type: System.TimeSpan\n      description: The interval in which the workflow must complete before it is aborted and a <xref href=\"System.TimeoutException\"></xref> is thrown.\n  overload: System.Activities.WorkflowInvoker.InvokeAsync*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Activities/WorkflowInvoker.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Activities.WorkflowInvoker.InvokeCompleted\n  commentId: E:System.Activities.WorkflowInvoker.InvokeCompleted\n  id: InvokeCompleted\n  parent: System.Activities.WorkflowInvoker\n  langs:\n  - csharp\n  name: InvokeCompleted\n  nameWithType: WorkflowInvoker.InvokeCompleted\n  fullName: WorkflowInvoker.InvokeCompleted\n  type: Event\n  assemblies:\n  - System.Activities\n  namespace: System.Activities\n  summary: Occurs when the workflow invoked by one of the <xref href=\"System.Activities.WorkflowInvoker.InvokeAsync*\"></xref> overloads is completed or canceled.\n  remarks: Handle this to determine whether a workflow invoked with one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads completed successfully and to retrieve the output arguments of the completed workflow.\n  example:\n  - \"The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity. The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation. When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.  \\n  \\n [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  \\n  \\n [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]\"\n  syntax:\n    content: public event EventHandler<System.Activities.InvokeCompletedEventArgs> InvokeCompleted;\n    return:\n      type: System.EventHandler{System.Activities.InvokeCompletedEventArgs}\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Activities/WorkflowInvoker.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)\n  parent: System.Activities.WorkflowInvoker\n  isExternal: false\n  name: WorkflowInvoker(Activity)\n  nameWithType: WorkflowInvoker.WorkflowInvoker(Activity)\n  fullName: WorkflowInvoker.WorkflowInvoker(Activity)\n- uid: System.Activities.Activity\n  parent: System.Activities\n  isExternal: false\n  name: Activity\n  nameWithType: Activity\n  fullName: System.Activities.Activity\n- uid: System.Activities.WorkflowInvoker.BeginInvoke(System.AsyncCallback,System.Object)\n  parent: System.Activities.WorkflowInvoker\n  isExternal: false\n  name: BeginInvoke(AsyncCallback, Object)\n  nameWithType: WorkflowInvoker.BeginInvoke(AsyncCallback, Object)\n  fullName: WorkflowInvoker.BeginInvoke(AsyncCallback, Object)\n- uid: System.IAsyncResult\n  parent: System\n  isExternal: false\n  name: IAsyncResult\n  nameWithType: IAsyncResult\n  fullName: System.IAsyncResult\n- uid: System.AsyncCallback\n  parent: System\n  isExternal: false\n  name: AsyncCallback\n  nameWithType: AsyncCallback\n  fullName: System.AsyncCallback\n- uid: System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.AsyncCallback,System.Object)\n  parent: System.Activities.WorkflowInvoker\n  isExternal: false\n  name: BeginInvoke(IDictionary<String,Object>, AsyncCallback, Object)\n  nameWithType: WorkflowInvoker.BeginInvoke(IDictionary<String,Object>, AsyncCallback, Object)\n  fullName: WorkflowInvoker.BeginInvoke(IDictionary<String,Object>, AsyncCallback, Object)\n- uid: System.Collections.Generic.IDictionary`2\n  name: IDictionary<TKey,TValue>\n  nameWithType: IDictionary<TKey,TValue>\n  fullName: System.Collections.Generic.IDictionary<TKey,TValue>\n- uid: System.String\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Collections.Generic.IDictionary{System.String,System.Object}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IDictionary<String,Object>\n  nameWithType: IDictionary<String,Object>\n  fullName: System.Collections.Generic.IDictionary<System.String,System.Object>\n  spec.csharp:\n  - uid: System.Collections.Generic.IDictionary`2\n    name: IDictionary\n    nameWithType: IDictionary\n    fullName: System.Collections.Generic.IDictionary\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.String\n    name: String\n    nameWithType: String\n    fullName: System.String\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Activities.WorkflowInvoker.BeginInvoke(System.TimeSpan,System.AsyncCallback,System.Object)\n  parent: System.Activities.WorkflowInvoker\n  isExternal: false\n  name: BeginInvoke(TimeSpan, AsyncCallback, Object)\n  nameWithType: WorkflowInvoker.BeginInvoke(TimeSpan, AsyncCallback, Object)\n  fullName: WorkflowInvoker.BeginInvoke(TimeSpan, AsyncCallback, Object)\n- uid: System.TimeSpan\n  parent: System\n  isExternal: false\n  name: TimeSpan\n  nameWithType: TimeSpan\n  fullName: System.TimeSpan\n- uid: System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.AsyncCallback,System.Object)\n  parent: System.Activities.WorkflowInvoker\n  isExternal: false\n  name: BeginInvoke(IDictionary<String,Object>, TimeSpan, AsyncCallback, Object)\n  nameWithType: WorkflowInvoker.BeginInvoke(IDictionary<String,Object>, TimeSpan, AsyncCallback, Object)\n  fullName: WorkflowInvoker.BeginInvoke(IDictionary<String,Object>, TimeSpan, AsyncCallback, Object)\n- uid: System.Activities.WorkflowInvoker.CancelAsync(System.Object)\n  parent: System.Activities.WorkflowInvoker\n  isExternal: false\n  name: CancelAsync(Object)\n  nameWithType: WorkflowInvoker.CancelAsync(Object)\n  fullName: WorkflowInvoker.CancelAsync(Object)\n- uid: System.Activities.WorkflowInvoker.EndInvoke(System.IAsyncResult)\n  parent: System.Activities.WorkflowInvoker\n  isExternal: false\n  name: EndInvoke(IAsyncResult)\n  nameWithType: WorkflowInvoker.EndInvoke(IAsyncResult)\n  fullName: WorkflowInvoker.EndInvoke(IAsyncResult)\n- uid: System.Activities.WorkflowInvoker.Extensions\n  parent: System.Activities.WorkflowInvoker\n  isExternal: false\n  name: Extensions\n  nameWithType: WorkflowInvoker.Extensions\n  fullName: WorkflowInvoker.Extensions\n- uid: System.Activities.Hosting.WorkflowInstanceExtensionManager\n  parent: System.Activities.Hosting\n  isExternal: false\n  name: WorkflowInstanceExtensionManager\n  nameWithType: WorkflowInstanceExtensionManager\n  fullName: System.Activities.Hosting.WorkflowInstanceExtensionManager\n- uid: System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)\n  parent: System.Activities.WorkflowInvoker\n  isExternal: false\n  name: Invoke(Activity, IDictionary<String,Object>, TimeSpan)\n  nameWithType: WorkflowInvoker.Invoke(Activity, IDictionary<String,Object>, TimeSpan)\n  fullName: WorkflowInvoker.Invoke(Activity, IDictionary<String,Object>, TimeSpan)\n- uid: System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.TimeSpan)\n  parent: System.Activities.WorkflowInvoker\n  isExternal: false\n  name: Invoke(Activity, TimeSpan)\n  nameWithType: WorkflowInvoker.Invoke(Activity, TimeSpan)\n  fullName: WorkflowInvoker.Invoke(Activity, TimeSpan)\n- uid: System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object})\n  parent: System.Activities.WorkflowInvoker\n  isExternal: false\n  name: Invoke(Activity, IDictionary<String,Object>)\n  nameWithType: WorkflowInvoker.Invoke(Activity, IDictionary<String,Object>)\n  fullName: WorkflowInvoker.Invoke(Activity, IDictionary<String,Object>)\n- uid: System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)\n  parent: System.Activities.WorkflowInvoker\n  isExternal: false\n  name: Invoke(IDictionary<String,Object>, TimeSpan)\n  nameWithType: WorkflowInvoker.Invoke(IDictionary<String,Object>, TimeSpan)\n  fullName: WorkflowInvoker.Invoke(IDictionary<String,Object>, TimeSpan)\n- uid: System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object})\n  parent: System.Activities.WorkflowInvoker\n  isExternal: false\n  name: Invoke(IDictionary<String,Object>)\n  nameWithType: WorkflowInvoker.Invoke(IDictionary<String,Object>)\n  fullName: WorkflowInvoker.Invoke(IDictionary<String,Object>)\n- uid: System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity)\n  parent: System.Activities.WorkflowInvoker\n  isExternal: false\n  name: Invoke(Activity)\n  nameWithType: WorkflowInvoker.Invoke(Activity)\n  fullName: WorkflowInvoker.Invoke(Activity)\n- uid: System.Activities.WorkflowInvoker.Invoke\n  parent: System.Activities.WorkflowInvoker\n  isExternal: false\n  name: Invoke()\n  nameWithType: WorkflowInvoker.Invoke()\n  fullName: WorkflowInvoker.Invoke()\n- uid: System.Activities.WorkflowInvoker.Invoke(System.TimeSpan)\n  parent: System.Activities.WorkflowInvoker\n  isExternal: false\n  name: Invoke(TimeSpan)\n  nameWithType: WorkflowInvoker.Invoke(TimeSpan)\n  fullName: WorkflowInvoker.Invoke(TimeSpan)\n- uid: System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0})\n  parent: System.Activities.WorkflowInvoker\n  isExternal: false\n  name: Invoke<TResult>(Activity<TResult>)\n  nameWithType: WorkflowInvoker.Invoke<TResult>(Activity<TResult>)\n  fullName: WorkflowInvoker.Invoke<TResult>(Activity<TResult>)\n- uid: TResult\n  isExternal: true\n  name: TResult\n  nameWithType: TResult\n  fullName: TResult\n- uid: System.Activities.Activity`1\n  parent: System.Activities\n  isExternal: false\n  name: Activity<TResult>\n  nameWithType: Activity<TResult>\n  fullName: System.Activities.Activity<TResult>\n- uid: System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object})\n  parent: System.Activities.WorkflowInvoker\n  isExternal: false\n  name: Invoke<TResult>(Activity<TResult>, IDictionary<String,Object>)\n  nameWithType: WorkflowInvoker.Invoke<TResult>(Activity<TResult>, IDictionary<String,Object>)\n  fullName: WorkflowInvoker.Invoke<TResult>(Activity<TResult>, IDictionary<String,Object>)\n- uid: System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)\n  parent: System.Activities.WorkflowInvoker\n  isExternal: false\n  name: Invoke<TResult>(Activity<TResult>, IDictionary<String,Object>, TimeSpan)\n  nameWithType: WorkflowInvoker.Invoke<TResult>(Activity<TResult>, IDictionary<String,Object>, TimeSpan)\n  fullName: WorkflowInvoker.Invoke<TResult>(Activity<TResult>, IDictionary<String,Object>, TimeSpan)\n- uid: System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object}@,System.TimeSpan)\n  parent: System.Activities.WorkflowInvoker\n  isExternal: false\n  name: Invoke<TResult>(Activity<TResult>, IDictionary<String,Object>, IDictionary<String,Object>, TimeSpan)\n  nameWithType: WorkflowInvoker.Invoke<TResult>(Activity<TResult>, IDictionary<String,Object>, IDictionary<String,Object>, TimeSpan)\n  fullName: WorkflowInvoker.Invoke<TResult>(Activity<TResult>, IDictionary<String,Object>, IDictionary<String,Object>, TimeSpan)\n- uid: System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan,System.Object)\n  parent: System.Activities.WorkflowInvoker\n  isExternal: false\n  name: InvokeAsync(TimeSpan, Object)\n  nameWithType: WorkflowInvoker.InvokeAsync(TimeSpan, Object)\n  fullName: WorkflowInvoker.InvokeAsync(TimeSpan, Object)\n- uid: System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)\n  parent: System.Activities.WorkflowInvoker\n  isExternal: false\n  name: InvokeAsync(IDictionary<String,Object>, TimeSpan)\n  nameWithType: WorkflowInvoker.InvokeAsync(IDictionary<String,Object>, TimeSpan)\n  fullName: WorkflowInvoker.InvokeAsync(IDictionary<String,Object>, TimeSpan)\n- uid: System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)\n  parent: System.Activities.WorkflowInvoker\n  isExternal: false\n  name: InvokeAsync(IDictionary<String,Object>, Object)\n  nameWithType: WorkflowInvoker.InvokeAsync(IDictionary<String,Object>, Object)\n  fullName: WorkflowInvoker.InvokeAsync(IDictionary<String,Object>, Object)\n- uid: System.Activities.WorkflowInvoker.InvokeAsync\n  parent: System.Activities.WorkflowInvoker\n  isExternal: false\n  name: InvokeAsync()\n  nameWithType: WorkflowInvoker.InvokeAsync()\n  fullName: WorkflowInvoker.InvokeAsync()\n- uid: System.Activities.WorkflowInvoker.InvokeAsync(System.Object)\n  parent: System.Activities.WorkflowInvoker\n  isExternal: false\n  name: InvokeAsync(Object)\n  nameWithType: WorkflowInvoker.InvokeAsync(Object)\n  fullName: WorkflowInvoker.InvokeAsync(Object)\n- uid: System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object})\n  parent: System.Activities.WorkflowInvoker\n  isExternal: false\n  name: InvokeAsync(IDictionary<String,Object>)\n  nameWithType: WorkflowInvoker.InvokeAsync(IDictionary<String,Object>)\n  fullName: WorkflowInvoker.InvokeAsync(IDictionary<String,Object>)\n- uid: System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.Object)\n  parent: System.Activities.WorkflowInvoker\n  isExternal: false\n  name: InvokeAsync(IDictionary<String,Object>, TimeSpan, Object)\n  nameWithType: WorkflowInvoker.InvokeAsync(IDictionary<String,Object>, TimeSpan, Object)\n  fullName: WorkflowInvoker.InvokeAsync(IDictionary<String,Object>, TimeSpan, Object)\n- uid: System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan)\n  parent: System.Activities.WorkflowInvoker\n  isExternal: false\n  name: InvokeAsync(TimeSpan)\n  nameWithType: WorkflowInvoker.InvokeAsync(TimeSpan)\n  fullName: WorkflowInvoker.InvokeAsync(TimeSpan)\n- uid: System.Activities.WorkflowInvoker.InvokeCompleted\n  parent: System.Activities.WorkflowInvoker\n  isExternal: false\n  name: InvokeCompleted\n  nameWithType: WorkflowInvoker.InvokeCompleted\n  fullName: WorkflowInvoker.InvokeCompleted\n- uid: System.EventHandler`1\n  name: EventHandler<TEventArgs>\n  nameWithType: EventHandler<TEventArgs>\n  fullName: System.EventHandler<TEventArgs>\n- uid: System.Activities.InvokeCompletedEventArgs\n  name: InvokeCompletedEventArgs\n  nameWithType: InvokeCompletedEventArgs\n  fullName: System.Activities.InvokeCompletedEventArgs\n- uid: System.EventHandler{System.Activities.InvokeCompletedEventArgs}\n  parent: System\n  isExternal: false\n  name: EventHandler<InvokeCompletedEventArgs>\n  nameWithType: EventHandler<InvokeCompletedEventArgs>\n  fullName: System.EventHandler<System.Activities.InvokeCompletedEventArgs>\n  spec.csharp:\n  - uid: System.EventHandler`1\n    name: EventHandler\n    nameWithType: EventHandler\n    fullName: System.EventHandler\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Activities.InvokeCompletedEventArgs\n    name: InvokeCompletedEventArgs\n    nameWithType: InvokeCompletedEventArgs\n    fullName: System.Activities.InvokeCompletedEventArgs\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Activities.WorkflowInvoker.BeginInvoke*\n  parent: System.Activities.WorkflowInvoker\n  isExternal: false\n  name: BeginInvoke\n  nameWithType: WorkflowInvoker.BeginInvoke\n  fullName: WorkflowInvoker.BeginInvoke\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Activities/WorkflowInvoker.xml\n- uid: System.Activities.WorkflowInvoker.Invoke*\n  parent: System.Activities.WorkflowInvoker\n  isExternal: false\n  name: Invoke\n  nameWithType: WorkflowInvoker.Invoke\n  fullName: WorkflowInvoker.Invoke\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Activities/WorkflowInvoker.xml\n- uid: System.Activities.WorkflowInvoker.InvokeAsync*\n  parent: System.Activities.WorkflowInvoker\n  isExternal: false\n  name: InvokeAsync\n  nameWithType: WorkflowInvoker.InvokeAsync\n  fullName: WorkflowInvoker.InvokeAsync\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Activities/WorkflowInvoker.xml\n- uid: System.Activities.WorkflowInvoker.#ctor*\n  parent: System.Activities.WorkflowInvoker\n  isExternal: false\n  name: WorkflowInvoker\n  nameWithType: WorkflowInvoker.WorkflowInvoker\n  fullName: WorkflowInvoker.WorkflowInvoker\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Activities/WorkflowInvoker.xml\n- uid: System.Activities.WorkflowInvoker.CancelAsync*\n  parent: System.Activities.WorkflowInvoker\n  isExternal: false\n  name: CancelAsync\n  nameWithType: WorkflowInvoker.CancelAsync\n  fullName: WorkflowInvoker.CancelAsync\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Activities/WorkflowInvoker.xml\n- uid: System.Activities.WorkflowInvoker.EndInvoke*\n  parent: System.Activities.WorkflowInvoker\n  isExternal: false\n  name: EndInvoke\n  nameWithType: WorkflowInvoker.EndInvoke\n  fullName: WorkflowInvoker.EndInvoke\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Activities/WorkflowInvoker.xml\n- uid: System.Activities.WorkflowInvoker.Extensions*\n  parent: System.Activities.WorkflowInvoker\n  isExternal: false\n  name: Extensions\n  nameWithType: WorkflowInvoker.Extensions\n  fullName: WorkflowInvoker.Extensions\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Activities/WorkflowInvoker.xml\n- uid: System.Activities.WorkflowInvoker.Invoke``1*\n  parent: System.Activities.WorkflowInvoker\n  isExternal: false\n  name: Invoke<TResult>\n  nameWithType: WorkflowInvoker.Invoke<TResult>\n  fullName: WorkflowInvoker.Invoke<TResult>\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Activities/WorkflowInvoker.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n"}