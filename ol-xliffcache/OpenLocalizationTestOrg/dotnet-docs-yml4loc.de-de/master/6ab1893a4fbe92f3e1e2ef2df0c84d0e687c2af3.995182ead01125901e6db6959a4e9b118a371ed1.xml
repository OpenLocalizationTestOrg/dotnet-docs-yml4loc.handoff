{"nodes":[{"content":"Allows an assembly to be called by partially trusted code. Without this declaration, only fully trusted callers are able to use the assembly. This class cannot be inherited.","nodes":[{"pos":[0,173],"content":"Allows an assembly to be called by partially trusted code. Without this declaration, only fully trusted callers are able to use the assembly. This class cannot be inherited.","nodes":[{"content":"Allows an assembly to be called by partially trusted code. Without this declaration, only fully trusted callers are able to use the assembly. This class cannot be inherited.","pos":[0,173],"nodes":[{"content":"Allows an assembly to be called by partially trusted code.","pos":[0,58]},{"content":"Without this declaration, only fully trusted callers are able to use the assembly.","pos":[59,141]},{"content":"This class cannot be inherited.","pos":[142,173]}]}]}],"pos":[674,848],"yaml":true},{"content":"> [!NOTE]\n>  The [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] introduces new security rules that affect the behavior of the <xref:System.Security.AllowPartiallyTrustedCallersAttribute> attribute (see [Security-Transparent Code, Level 2](~/docs/framework/misc/security-transparent-code-level-2.md)). In the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], all code defaults to security-transparent, that is, partially trusted. However, you can annotate individual types and members to assign them other transparency attributes. For this and other security changes, see [Security Changes](~/docs/framework/security/security-changes.md).  \n  \n .NET Framework version 2.0 () assemblies must be strong-named to effectively use the <xref:System.Security.AllowPartiallyTrustedCallersAttribute> (APTCA) attribute. [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] () assemblies do not have to be strong-named for the APTCA attribute to be effective, and they can contain transparent, security-critical and security-safe-critical code. For more information about applying attributes at the assembly level, see [Applying Attributes](~/docs/standard/attributes/applying-attributes.md).  \n  \n By default, if a strong-named,  assembly does not explicitly apply this attribute at the assembly level, it can be called only by other assemblies that are granted full trust. This restriction is enforced by placing a <xref:System.Security.Permissions.SecurityAction.LinkDemand> for `FullTrust` on every public or protected method on every publicly accessible class in the assembly. Assemblies that are intended to be called by partially trusted code can declare their intent through the use of <xref:System.Security.AllowPartiallyTrustedCallersAttribute>. An example of the declaration in C# is `[assembly:AllowPartiallyTrustedCallers]`; an example in Visual Basic is `<assembly:AllowPartiallyTrustedCallers>`.  \n  \n> [!CAUTION]\n>  The presence of this assembly-level attribute prevents the default behavior of placing `FullTrust`<xref:System.Security.Permissions.SecurityAction.LinkDemand> security checks, and makes the assembly callable from any other (partially or fully trusted) assembly.  \n  \n When the APTCA attribute is present, all other security checks function as intended, including any class-level or method-level declarative security attributes that are present. This attribute blocks only the implicit, fully trusted caller demand.  \n  \n This is not a declarative security attribute, but a regular attribute (it derives from <xref:System.Attribute?displayProperty=fullName>, not from <xref:System.Security.Permissions.SecurityAttribute?displayProperty=fullName>).  \n  \n For more information, see [Using Libraries from Partially Trusted Code](~/docs/framework/misc/using-libraries-from-partially-trusted-code.md).","nodes":[{"pos":[2,655],"content":"[!NOTE]\n The [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] introduces new security rules that affect the behavior of the <xref:System.Security.AllowPartiallyTrustedCallersAttribute> attribute (see [Security-Transparent Code, Level 2](~/docs/framework/misc/security-transparent-code-level-2.md)). In the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], all code defaults to security-transparent, that is, partially trusted. However, you can annotate individual types and members to assign them other transparency attributes. For this and other security changes, see [Security Changes](~/docs/framework/security/security-changes.md).","leadings":["","> "],"nodes":[{"content":" The [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] introduces new security rules that affect the behavior of the <xref:System.Security.AllowPartiallyTrustedCallersAttribute> attribute (see [Security-Transparent Code, Level 2](~/docs/framework/misc/security-transparent-code-level-2.md)). In the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], all code defaults to security-transparent, that is, partially trusted. However, you can annotate individual types and members to assign them other transparency attributes. For this and other security changes, see [Security Changes](~/docs/framework/security/security-changes.md).","pos":[8,651],"nodes":[{"content":"The <ph id=\"ph1\">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph> introduces new security rules that affect the behavior of the <ph id=\"ph2\">&lt;xref:System.Security.AllowPartiallyTrustedCallersAttribute&gt;</ph> attribute (see <bpt id=\"p1\">[</bpt>Security-Transparent Code, Level 2<ept id=\"p1\">](~/docs/framework/misc/security-transparent-code-level-2.md)</ept>).","pos":[1,297],"source":" The [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] introduces new security rules that affect the behavior of the <xref:System.Security.AllowPartiallyTrustedCallersAttribute> attribute (see [Security-Transparent Code, Level 2](~/docs/framework/misc/security-transparent-code-level-2.md))."},{"content":"In the <ph id=\"ph1\">[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]</ph>, all code defaults to security-transparent, that is, partially trusted.","pos":[298,434],"source":" In the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], all code defaults to security-transparent, that is, partially trusted."},{"content":"However, you can annotate individual types and members to assign them other transparency attributes.","pos":[435,535]},{"content":"For this and other security changes, see <bpt id=\"p1\">[</bpt>Security Changes<ept id=\"p1\">](~/docs/framework/security/security-changes.md)</ept>.","pos":[536,643],"source":" For this and other security changes, see [Security Changes](~/docs/framework/security/security-changes.md)."}]}]},{"pos":[662,1203],"content":".NET Framework version 2.0 () assemblies must be strong-named to effectively use the <xref:System.Security.AllowPartiallyTrustedCallersAttribute> (APTCA) attribute. [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] () assemblies do not have to be strong-named for the APTCA attribute to be effective, and they can contain transparent, security-critical and security-safe-critical code. For more information about applying attributes at the assembly level, see [Applying Attributes](~/docs/standard/attributes/applying-attributes.md).","nodes":[{"content":".NET Framework version 2.0 () assemblies must be strong-named to effectively use the <ph id=\"ph1\">&lt;xref:System.Security.AllowPartiallyTrustedCallersAttribute&gt;</ph> (APTCA) attribute.","pos":[0,164],"source":".NET Framework version 2.0 () assemblies must be strong-named to effectively use the <xref:System.Security.AllowPartiallyTrustedCallersAttribute> (APTCA) attribute."},{"content":"<ph id=\"ph1\">[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]</ph> () assemblies do not have to be strong-named for the APTCA attribute to be effective, and they can contain transparent, security-critical and security-safe-critical code.","pos":[165,393],"source":"[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] () assemblies do not have to be strong-named for the APTCA attribute to be effective, and they can contain transparent, security-critical and security-safe-critical code."},{"content":"For more information about applying attributes at the assembly level, see <bpt id=\"p1\">[</bpt>Applying Attributes<ept id=\"p1\">](~/docs/standard/attributes/applying-attributes.md)</ept>.","pos":[394,541],"source":" For more information about applying attributes at the assembly level, see [Applying Attributes](~/docs/standard/attributes/applying-attributes.md)."}]},{"pos":[1210,1921],"content":"By default, if a strong-named,  assembly does not explicitly apply this attribute at the assembly level, it can be called only by other assemblies that are granted full trust. This restriction is enforced by placing a <xref:System.Security.Permissions.SecurityAction.LinkDemand> for `FullTrust` on every public or protected method on every publicly accessible class in the assembly. Assemblies that are intended to be called by partially trusted code can declare their intent through the use of <xref:System.Security.AllowPartiallyTrustedCallersAttribute>. An example of the declaration in C# is `[assembly:AllowPartiallyTrustedCallers]`; an example in Visual Basic is `<assembly:AllowPartiallyTrustedCallers>`.","nodes":[{"content":"By default, if a strong-named,  assembly does not explicitly apply this attribute at the assembly level, it can be called only by other assemblies that are granted full trust.","pos":[0,175]},{"content":"This restriction is enforced by placing a <ph id=\"ph1\">&lt;xref:System.Security.Permissions.SecurityAction.LinkDemand&gt;</ph> for <ph id=\"ph2\">`FullTrust`</ph> on every public or protected method on every publicly accessible class in the assembly.","pos":[176,382],"source":" This restriction is enforced by placing a <xref:System.Security.Permissions.SecurityAction.LinkDemand> for `FullTrust` on every public or protected method on every publicly accessible class in the assembly."},{"content":"Assemblies that are intended to be called by partially trusted code can declare their intent through the use of <ph id=\"ph1\">&lt;xref:System.Security.AllowPartiallyTrustedCallersAttribute&gt;</ph>.","pos":[383,556],"source":" Assemblies that are intended to be called by partially trusted code can declare their intent through the use of <xref:System.Security.AllowPartiallyTrustedCallersAttribute>."},{"content":"An example of the declaration in C# is <ph id=\"ph1\">`[assembly:AllowPartiallyTrustedCallers]`</ph>; an example in Visual Basic is <ph id=\"ph2\">`&lt;assembly:AllowPartiallyTrustedCallers&gt;`</ph>.","pos":[557,711],"source":" An example of the declaration in C# is `[assembly:AllowPartiallyTrustedCallers]`; an example in Visual Basic is `<assembly:AllowPartiallyTrustedCallers>`."}]},{"pos":[1929,2204],"content":"[!CAUTION]\n The presence of this assembly-level attribute prevents the default behavior of placing `FullTrust`<xref:System.Security.Permissions.SecurityAction.LinkDemand> security checks, and makes the assembly callable from any other (partially or fully trusted) assembly.","leadings":["","> "],"nodes":[{"content":"The presence of this assembly-level attribute prevents the default behavior of placing <ph id=\"ph1\">`FullTrust`</ph><ph id=\"ph2\">&lt;xref:System.Security.Permissions.SecurityAction.LinkDemand&gt;</ph> security checks, and makes the assembly callable from any other (partially or fully trusted) assembly.","pos":[12,273],"source":" The presence of this assembly-level attribute prevents the default behavior of placing `FullTrust`<xref:System.Security.Permissions.SecurityAction.LinkDemand> security checks, and makes the assembly callable from any other (partially or fully trusted) assembly."}]},{"pos":[2211,2457],"content":"When the APTCA attribute is present, all other security checks function as intended, including any class-level or method-level declarative security attributes that are present. This attribute blocks only the implicit, fully trusted caller demand.","nodes":[{"content":"When the APTCA attribute is present, all other security checks function as intended, including any class-level or method-level declarative security attributes that are present. This attribute blocks only the implicit, fully trusted caller demand.","pos":[0,246],"nodes":[{"content":"When the APTCA attribute is present, all other security checks function as intended, including any class-level or method-level declarative security attributes that are present.","pos":[0,176]},{"content":"This attribute blocks only the implicit, fully trusted caller demand.","pos":[177,246]}]}]},{"pos":[2464,2689],"content":"This is not a declarative security attribute, but a regular attribute (it derives from <xref:System.Attribute?displayProperty=fullName>, not from <xref:System.Security.Permissions.SecurityAttribute?displayProperty=fullName>).","nodes":[{"content":"This is not a declarative security attribute, but a regular attribute (it derives from <ph id=\"ph1\">&lt;xref:System.Attribute?displayProperty=fullName&gt;</ph>, not from <ph id=\"ph2\">&lt;xref:System.Security.Permissions.SecurityAttribute?displayProperty=fullName&gt;</ph>).","pos":[0,225],"source":"This is not a declarative security attribute, but a regular attribute (it derives from <xref:System.Attribute?displayProperty=fullName>, not from <xref:System.Security.Permissions.SecurityAttribute?displayProperty=fullName>)."}]},{"pos":[2696,2838],"content":"For more information, see <bpt id=\"p1\">[</bpt>Using Libraries from Partially Trusted Code<ept id=\"p1\">](~/docs/framework/misc/using-libraries-from-partially-trusted-code.md)</ept>.","source":"For more information, see [Using Libraries from Partially Trusted Code](~/docs/framework/misc/using-libraries-from-partially-trusted-code.md)."}],"pos":[859,3714],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Security.AllowPartiallyTrustedCallersAttribute\"></xref> class.","nodes":[{"pos":[0,115],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Security.AllowPartiallyTrustedCallersAttribute\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.Security.AllowPartiallyTrustedCallersAttribute\"></xref> class."}],"pos":[10291,10407],"yaml":true},{"content":"This attribute should be applied only at the assembly level.","nodes":[{"pos":[0,60],"content":"This attribute should be applied only at the assembly level.","nodes":[{"content":"This attribute should be applied only at the assembly level.","pos":[0,60]}]}],"pos":[10418,10479],"yaml":true,"extradata":"MT"},{"content":"Gets or sets the default partial trust visibility for code that is marked with the <xref href=\"System.Security.AllowPartiallyTrustedCallersAttribute\"></xref> (APTCA) attribute.","nodes":[{"pos":[0,176],"content":"Gets or sets the default partial trust visibility for code that is marked with the <ph id=\"ph1\">&lt;xref href=\"System.Security.AllowPartiallyTrustedCallersAttribute\"&gt;&lt;/xref&gt;</ph> (APTCA) attribute.","source":"Gets or sets the default partial trust visibility for code that is marked with the <xref href=\"System.Security.AllowPartiallyTrustedCallersAttribute\"></xref> (APTCA) attribute."}],"pos":[12538,12715],"yaml":true},{"content":"The following examples demonstrate how to use this property.  \n  \n-   Default, unconditional APTCA:  \n  \n    ```  \n    [assembly: AllowPartiallyTrustedCallers]  \n    ```  \n  \n     Defaults to <xref:System.Security.PartialTrustVisibilityLevel.VisibleToAllHosts>.  \n  \n-   Explicit, unconditional APTCA:  \n  \n    ```  \n    [assembly: AllowPartiallyTrustedCallers(PartialTrustVisibilityLevel=VisibleToAllHosts)]  \n    ```  \n  \n     The assembly can always be called by partial-trust code.  \n  \n-   Explicit, conditional APTCA:  \n  \n    ```  \n    [assembly: AllowPartiallyTrustedCallers(PartialTrustVisibilityLevel=NotVisibleByDefault)]  \n    ```  \n  \n     The assembly has been audited for partial trust, but it is not visible to partial-trust code by default. To make the assembly visible to partial-trust code, add it to the <xref:System.AppDomainSetup.PartialTrustVisibleAssemblies%2A?displayProperty=fullName> property.","nodes":[{"pos":[0,60],"content":"The following examples demonstrate how to use this property.","nodes":[{"content":"The following examples demonstrate how to use this property.","pos":[0,60]}]},{"pos":[70,99],"content":"Default, unconditional APTCA:","nodes":[{"content":"Default, unconditional APTCA:","pos":[0,29]}]},{"pos":[180,261],"content":"Defaults to <xref:System.Security.PartialTrustVisibilityLevel.VisibleToAllHosts>.","nodes":[{"content":"Defaults to <ph id=\"ph1\">&lt;xref:System.Security.PartialTrustVisibilityLevel.VisibleToAllHosts&gt;</ph>.","pos":[0,81],"source":"Defaults to <xref:System.Security.PartialTrustVisibilityLevel.VisibleToAllHosts>."}]},{"pos":[271,301],"content":"Explicit, unconditional APTCA:","nodes":[{"content":"Explicit, unconditional APTCA:","pos":[0,30]}]},{"pos":[429,485],"content":"The assembly can always be called by partial-trust code.","nodes":[{"content":"The assembly can always be called by partial-trust code.","pos":[0,56]}]},{"pos":[495,523],"content":"Explicit, conditional APTCA:","nodes":[{"content":"Explicit, conditional APTCA:","pos":[0,28]}]},{"pos":[653,920],"content":"The assembly has been audited for partial trust, but it is not visible to partial-trust code by default. To make the assembly visible to partial-trust code, add it to the <xref:System.AppDomainSetup.PartialTrustVisibleAssemblies%2A?displayProperty=fullName> property.","nodes":[{"content":"The assembly has been audited for partial trust, but it is not visible to partial-trust code by default. To make the assembly visible to partial-trust code, add it to the <xref:System.AppDomainSetup.PartialTrustVisibleAssemblies%2A?displayProperty=fullName> property.","pos":[0,267],"nodes":[{"content":"The assembly has been audited for partial trust, but it is not visible to partial-trust code by default.","pos":[0,104]},{"content":"To make the assembly visible to partial-trust code, add it to the <ph id=\"ph1\">&lt;xref:System.AppDomainSetup.PartialTrustVisibleAssemblies%2A?displayProperty=fullName&gt;</ph> property.","pos":[105,267],"source":" To make the assembly visible to partial-trust code, add it to the <xref:System.AppDomainSetup.PartialTrustVisibleAssemblies%2A?displayProperty=fullName> property."}]}]}],"pos":[12726,13673],"yaml":true,"extradata":"MT"},{"content":"One of the enumeration values. The default is <xref href=\"System.Security.PartialTrustVisibilityLevel.VisibleToAllHosts\"></xref>.","nodes":[{"pos":[0,129],"content":"One of the enumeration values. The default is <xref href=\"System.Security.PartialTrustVisibilityLevel.VisibleToAllHosts\"></xref>.","nodes":[{"content":"One of the enumeration values.","pos":[0,30]},{"content":"The default is <ph id=\"ph1\">&lt;xref href=\"System.Security.PartialTrustVisibilityLevel.VisibleToAllHosts\"&gt;&lt;/xref&gt;</ph>.","pos":[31,129],"source":" The default is <xref href=\"System.Security.PartialTrustVisibilityLevel.VisibleToAllHosts\"></xref>."}]}],"pos":[13876,14006],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.AllowPartiallyTrustedCallersAttribute\n  commentId: T:System.Security.AllowPartiallyTrustedCallersAttribute\n  id: AllowPartiallyTrustedCallersAttribute\n  children:\n  - System.Security.AllowPartiallyTrustedCallersAttribute.#ctor\n  - System.Security.AllowPartiallyTrustedCallersAttribute.PartialTrustVisibilityLevel\n  langs:\n  - csharp\n  name: AllowPartiallyTrustedCallersAttribute\n  nameWithType: AllowPartiallyTrustedCallersAttribute\n  fullName: System.Security.AllowPartiallyTrustedCallersAttribute\n  type: Class\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System.Security\n  summary: Allows an assembly to be called by partially trusted code. Without this declaration, only fully trusted callers are able to use the assembly. This class cannot be inherited.\n  remarks: \"> [!NOTE]\\n>  The [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] introduces new security rules that affect the behavior of the <xref:System.Security.AllowPartiallyTrustedCallersAttribute> attribute (see [Security-Transparent Code, Level 2](~/docs/framework/misc/security-transparent-code-level-2.md)). In the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], all code defaults to security-transparent, that is, partially trusted. However, you can annotate individual types and members to assign them other transparency attributes. For this and other security changes, see [Security Changes](~/docs/framework/security/security-changes.md).  \\n  \\n .NET Framework version 2.0 () assemblies must be strong-named to effectively use the <xref:System.Security.AllowPartiallyTrustedCallersAttribute> (APTCA) attribute. [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] () assemblies do not have to be strong-named for the APTCA attribute to be effective, and they can contain transparent, security-critical and security-safe-critical code. For more information about applying attributes at the assembly level, see [Applying Attributes](~/docs/standard/attributes/applying-attributes.md).  \\n  \\n By default, if a strong-named,  assembly does not explicitly apply this attribute at the assembly level, it can be called only by other assemblies that are granted full trust. This restriction is enforced by placing a <xref:System.Security.Permissions.SecurityAction.LinkDemand> for `FullTrust` on every public or protected method on every publicly accessible class in the assembly. Assemblies that are intended to be called by partially trusted code can declare their intent through the use of <xref:System.Security.AllowPartiallyTrustedCallersAttribute>. An example of the declaration in C# is `[assembly:AllowPartiallyTrustedCallers]`; an example in Visual Basic is `<assembly:AllowPartiallyTrustedCallers>`.  \\n  \\n> [!CAUTION]\\n>  The presence of this assembly-level attribute prevents the default behavior of placing `FullTrust`<xref:System.Security.Permissions.SecurityAction.LinkDemand> security checks, and makes the assembly callable from any other (partially or fully trusted) assembly.  \\n  \\n When the APTCA attribute is present, all other security checks function as intended, including any class-level or method-level declarative security attributes that are present. This attribute blocks only the implicit, fully trusted caller demand.  \\n  \\n This is not a declarative security attribute, but a regular attribute (it derives from <xref:System.Attribute?displayProperty=fullName>, not from <xref:System.Security.Permissions.SecurityAttribute?displayProperty=fullName>).  \\n  \\n For more information, see [Using Libraries from Partially Trusted Code](~/docs/framework/misc/using-libraries-from-partially-trusted-code.md).\"\n  example:\n  - \"The following example shows how to use the <xref:System.Security.AllowPartiallyTrustedCallersAttribute> class.  \\n  \\n [!code-cpp[System.Security.AllowPartiallyTrustedCallersAttribute#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.AllowPartiallyTrustedCallersAttribute/CPP/AllowPartiallyTrustedCallersAttribute.cpp#1)]\\n [!code-csharp[System.Security.AllowPartiallyTrustedCallersAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AllowPartiallyTrustedCallersAttribute/CS/AllowPartiallyTrustedCallersAttribute.cs#1)]\\n [!code-vb[System.Security.AllowPartiallyTrustedCallersAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AllowPartiallyTrustedCallersAttribute/VB/allowpartiallytrustedcallersattribute.vb#1)]\"\n  syntax:\n    content: >-\n      [System.AttributeUsage(System.AttributeTargets.Assembly, AllowMultiple=false, Inherited=false)]\n\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public sealed class AllowPartiallyTrustedCallersAttribute : Attribute\n  inheritance:\n  - System.Object\n  - System.Attribute\n  implements: []\n  inheritedMembers:\n  - System.Attribute.Equals(System.Object)\n  - System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type)\n  - System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type,System.Boolean)\n  - System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type)\n  - System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  - System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type)\n  - System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type,System.Boolean)\n  - System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type)\n  - System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type,System.Boolean)\n  - System.Attribute.GetCustomAttributes(System.Reflection.Assembly)\n  - System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Boolean)\n  - System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type)\n  - System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type,System.Boolean)\n  - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo)\n  - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)\n  - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type)\n  - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  - System.Attribute.GetCustomAttributes(System.Reflection.Module)\n  - System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Boolean)\n  - System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type)\n  - System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type,System.Boolean)\n  - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo)\n  - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Boolean)\n  - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type)\n  - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type,System.Boolean)\n  - System.Attribute.GetHashCode\n  - System.Attribute.IsDefaultAttribute\n  - System.Attribute.IsDefined(System.Reflection.Assembly,System.Type)\n  - System.Attribute.IsDefined(System.Reflection.Assembly,System.Type,System.Boolean)\n  - System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type)\n  - System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  - System.Attribute.IsDefined(System.Reflection.Module,System.Type)\n  - System.Attribute.IsDefined(System.Reflection.Module,System.Type,System.Boolean)\n  - System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type)\n  - System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type,System.Boolean)\n  - System.Attribute.Match(System.Object)\n  - System.Attribute.System#Runtime#InteropServices#_Attribute#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  - System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  - System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfoCount(System.UInt32@)\n  - System.Attribute.System#Runtime#InteropServices#_Attribute#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  - System.Attribute.TypeId\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  attributes:\n  - type: System.AttributeUsageAttribute\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/AllowPartiallyTrustedCallersAttribute.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.AllowPartiallyTrustedCallersAttribute.#ctor\n  commentId: M:System.Security.AllowPartiallyTrustedCallersAttribute.#ctor\n  id: '#ctor'\n  parent: System.Security.AllowPartiallyTrustedCallersAttribute\n  langs:\n  - csharp\n  name: AllowPartiallyTrustedCallersAttribute()\n  nameWithType: AllowPartiallyTrustedCallersAttribute.AllowPartiallyTrustedCallersAttribute()\n  fullName: AllowPartiallyTrustedCallersAttribute.AllowPartiallyTrustedCallersAttribute()\n  type: Constructor\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System.Security\n  summary: Initializes a new instance of the <xref href=\"System.Security.AllowPartiallyTrustedCallersAttribute\"></xref> class.\n  remarks: This attribute should be applied only at the assembly level.\n  example:\n  - For an example of how to use this constructor, see the code example provided for the <xref:System.Security.AllowPartiallyTrustedCallersAttribute> class.\n  syntax:\n    content: public AllowPartiallyTrustedCallersAttribute ();\n    parameters: []\n  overload: System.Security.AllowPartiallyTrustedCallersAttribute.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/AllowPartiallyTrustedCallersAttribute.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.AllowPartiallyTrustedCallersAttribute.PartialTrustVisibilityLevel\n  commentId: P:System.Security.AllowPartiallyTrustedCallersAttribute.PartialTrustVisibilityLevel\n  id: PartialTrustVisibilityLevel\n  parent: System.Security.AllowPartiallyTrustedCallersAttribute\n  langs:\n  - csharp\n  name: PartialTrustVisibilityLevel\n  nameWithType: AllowPartiallyTrustedCallersAttribute.PartialTrustVisibilityLevel\n  fullName: AllowPartiallyTrustedCallersAttribute.PartialTrustVisibilityLevel\n  type: Property\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Security\n  summary: Gets or sets the default partial trust visibility for code that is marked with the <xref href=\"System.Security.AllowPartiallyTrustedCallersAttribute\"></xref> (APTCA) attribute.\n  remarks: \"The following examples demonstrate how to use this property.  \\n  \\n-   Default, unconditional APTCA:  \\n  \\n    ```  \\n    [assembly: AllowPartiallyTrustedCallers]  \\n    ```  \\n  \\n     Defaults to <xref:System.Security.PartialTrustVisibilityLevel.VisibleToAllHosts>.  \\n  \\n-   Explicit, unconditional APTCA:  \\n  \\n    ```  \\n    [assembly: AllowPartiallyTrustedCallers(PartialTrustVisibilityLevel=VisibleToAllHosts)]  \\n    ```  \\n  \\n     The assembly can always be called by partial-trust code.  \\n  \\n-   Explicit, conditional APTCA:  \\n  \\n    ```  \\n    [assembly: AllowPartiallyTrustedCallers(PartialTrustVisibilityLevel=NotVisibleByDefault)]  \\n    ```  \\n  \\n     The assembly has been audited for partial trust, but it is not visible to partial-trust code by default. To make the assembly visible to partial-trust code, add it to the <xref:System.AppDomainSetup.PartialTrustVisibleAssemblies%2A?displayProperty=fullName> property.\"\n  syntax:\n    content: public System.Security.PartialTrustVisibilityLevel PartialTrustVisibilityLevel { get; set; }\n    return:\n      type: System.Security.PartialTrustVisibilityLevel\n      description: One of the enumeration values. The default is <xref href=\"System.Security.PartialTrustVisibilityLevel.VisibleToAllHosts\"></xref>.\n  overload: System.Security.AllowPartiallyTrustedCallersAttribute.PartialTrustVisibilityLevel*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/AllowPartiallyTrustedCallersAttribute.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\nreferences:\n- uid: System.Attribute\n  parent: System\n  isExternal: false\n  name: Attribute\n  nameWithType: Attribute\n  fullName: System.Attribute\n- uid: System.Security.AllowPartiallyTrustedCallersAttribute.#ctor\n  parent: System.Security.AllowPartiallyTrustedCallersAttribute\n  isExternal: false\n  name: AllowPartiallyTrustedCallersAttribute()\n  nameWithType: AllowPartiallyTrustedCallersAttribute.AllowPartiallyTrustedCallersAttribute()\n  fullName: AllowPartiallyTrustedCallersAttribute.AllowPartiallyTrustedCallersAttribute()\n- uid: System.Security.AllowPartiallyTrustedCallersAttribute.PartialTrustVisibilityLevel\n  parent: System.Security.AllowPartiallyTrustedCallersAttribute\n  isExternal: false\n  name: PartialTrustVisibilityLevel\n  nameWithType: AllowPartiallyTrustedCallersAttribute.PartialTrustVisibilityLevel\n  fullName: AllowPartiallyTrustedCallersAttribute.PartialTrustVisibilityLevel\n- uid: System.Security.PartialTrustVisibilityLevel\n  parent: System.Security\n  isExternal: false\n  name: PartialTrustVisibilityLevel\n  nameWithType: PartialTrustVisibilityLevel\n  fullName: System.Security.PartialTrustVisibilityLevel\n- uid: System.Security.AllowPartiallyTrustedCallersAttribute.#ctor*\n  parent: System.Security.AllowPartiallyTrustedCallersAttribute\n  isExternal: false\n  name: AllowPartiallyTrustedCallersAttribute\n  nameWithType: AllowPartiallyTrustedCallersAttribute.AllowPartiallyTrustedCallersAttribute\n  fullName: AllowPartiallyTrustedCallersAttribute.AllowPartiallyTrustedCallersAttribute\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/AllowPartiallyTrustedCallersAttribute.xml\n- uid: System.Security.AllowPartiallyTrustedCallersAttribute.PartialTrustVisibilityLevel*\n  parent: System.Security.AllowPartiallyTrustedCallersAttribute\n  isExternal: false\n  name: PartialTrustVisibilityLevel\n  nameWithType: AllowPartiallyTrustedCallersAttribute.PartialTrustVisibilityLevel\n  fullName: AllowPartiallyTrustedCallersAttribute.PartialTrustVisibilityLevel\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/AllowPartiallyTrustedCallersAttribute.xml\n- uid: System.Attribute.Equals(System.Object)\n  parent: System.Attribute\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Attribute.Equals(Object)\n  fullName: Attribute.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Attribute.GetHashCode\n  parent: System.Attribute\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Attribute.GetHashCode()\n  fullName: Attribute.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttribute(ParameterInfo, Type, Boolean)\n  nameWithType: Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean)\n  fullName: Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean)\n- uid: System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttribute(MemberInfo, Type, Boolean)\n  nameWithType: Attribute.GetCustomAttribute(MemberInfo, Type, Boolean)\n  fullName: Attribute.GetCustomAttribute(MemberInfo, Type, Boolean)\n- uid: System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttribute(Assembly, Type, Boolean)\n  nameWithType: Attribute.GetCustomAttribute(Assembly, Type, Boolean)\n  fullName: Attribute.GetCustomAttribute(Assembly, Type, Boolean)\n- uid: System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttribute(Module, Type, Boolean)\n  nameWithType: Attribute.GetCustomAttribute(Module, Type, Boolean)\n  fullName: Attribute.GetCustomAttribute(Module, Type, Boolean)\n- uid: System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttribute(Module, Type)\n  nameWithType: Attribute.GetCustomAttribute(Module, Type)\n  fullName: Attribute.GetCustomAttribute(Module, Type)\n- uid: System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttribute(MemberInfo, Type)\n  nameWithType: Attribute.GetCustomAttribute(MemberInfo, Type)\n  fullName: Attribute.GetCustomAttribute(MemberInfo, Type)\n- uid: System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttribute(Assembly, Type)\n  nameWithType: Attribute.GetCustomAttribute(Assembly, Type)\n  fullName: Attribute.GetCustomAttribute(Assembly, Type)\n- uid: System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttribute(ParameterInfo, Type)\n  nameWithType: Attribute.GetCustomAttribute(ParameterInfo, Type)\n  fullName: Attribute.GetCustomAttribute(ParameterInfo, Type)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(Module, Type)\n  nameWithType: Attribute.GetCustomAttributes(Module, Type)\n  fullName: Attribute.GetCustomAttributes(Module, Type)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(ParameterInfo, Type, Boolean)\n  nameWithType: Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean)\n  fullName: Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(Module, Type, Boolean)\n  nameWithType: Attribute.GetCustomAttributes(Module, Type, Boolean)\n  fullName: Attribute.GetCustomAttributes(Module, Type, Boolean)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(MemberInfo, Type, Boolean)\n  nameWithType: Attribute.GetCustomAttributes(MemberInfo, Type, Boolean)\n  fullName: Attribute.GetCustomAttributes(MemberInfo, Type, Boolean)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(Assembly, Type, Boolean)\n  nameWithType: Attribute.GetCustomAttributes(Assembly, Type, Boolean)\n  fullName: Attribute.GetCustomAttributes(Assembly, Type, Boolean)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(ParameterInfo, Type)\n  nameWithType: Attribute.GetCustomAttributes(ParameterInfo, Type)\n  fullName: Attribute.GetCustomAttributes(ParameterInfo, Type)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(Module, Boolean)\n  nameWithType: Attribute.GetCustomAttributes(Module, Boolean)\n  fullName: Attribute.GetCustomAttributes(Module, Boolean)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(ParameterInfo, Boolean)\n  nameWithType: Attribute.GetCustomAttributes(ParameterInfo, Boolean)\n  fullName: Attribute.GetCustomAttributes(ParameterInfo, Boolean)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(MemberInfo, Boolean)\n  nameWithType: Attribute.GetCustomAttributes(MemberInfo, Boolean)\n  fullName: Attribute.GetCustomAttributes(MemberInfo, Boolean)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(Assembly, Type)\n  nameWithType: Attribute.GetCustomAttributes(Assembly, Type)\n  fullName: Attribute.GetCustomAttributes(Assembly, Type)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(Assembly, Boolean)\n  nameWithType: Attribute.GetCustomAttributes(Assembly, Boolean)\n  fullName: Attribute.GetCustomAttributes(Assembly, Boolean)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(ParameterInfo)\n  nameWithType: Attribute.GetCustomAttributes(ParameterInfo)\n  fullName: Attribute.GetCustomAttributes(ParameterInfo)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.Module)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(Module)\n  nameWithType: Attribute.GetCustomAttributes(Module)\n  fullName: Attribute.GetCustomAttributes(Module)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(MemberInfo)\n  nameWithType: Attribute.GetCustomAttributes(MemberInfo)\n  fullName: Attribute.GetCustomAttributes(MemberInfo)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.Assembly)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(Assembly)\n  nameWithType: Attribute.GetCustomAttributes(Assembly)\n  fullName: Attribute.GetCustomAttributes(Assembly)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(MemberInfo, Type)\n  nameWithType: Attribute.GetCustomAttributes(MemberInfo, Type)\n  fullName: Attribute.GetCustomAttributes(MemberInfo, Type)\n- uid: System.Attribute.IsDefaultAttribute\n  parent: System.Attribute\n  isExternal: false\n  name: IsDefaultAttribute()\n  nameWithType: Attribute.IsDefaultAttribute()\n  fullName: Attribute.IsDefaultAttribute()\n- uid: System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: IsDefined(ParameterInfo, Type, Boolean)\n  nameWithType: Attribute.IsDefined(ParameterInfo, Type, Boolean)\n  fullName: Attribute.IsDefined(ParameterInfo, Type, Boolean)\n- uid: System.Attribute.IsDefined(System.Reflection.Module,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: IsDefined(Module, Type, Boolean)\n  nameWithType: Attribute.IsDefined(Module, Type, Boolean)\n  fullName: Attribute.IsDefined(Module, Type, Boolean)\n- uid: System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: IsDefined(MemberInfo, Type, Boolean)\n  nameWithType: Attribute.IsDefined(MemberInfo, Type, Boolean)\n  fullName: Attribute.IsDefined(MemberInfo, Type, Boolean)\n- uid: System.Attribute.IsDefined(System.Reflection.Assembly,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: IsDefined(Assembly, Type, Boolean)\n  nameWithType: Attribute.IsDefined(Assembly, Type, Boolean)\n  fullName: Attribute.IsDefined(Assembly, Type, Boolean)\n- uid: System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: IsDefined(MemberInfo, Type)\n  nameWithType: Attribute.IsDefined(MemberInfo, Type)\n  fullName: Attribute.IsDefined(MemberInfo, Type)\n- uid: System.Attribute.IsDefined(System.Reflection.Module,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: IsDefined(Module, Type)\n  nameWithType: Attribute.IsDefined(Module, Type)\n  fullName: Attribute.IsDefined(Module, Type)\n- uid: System.Attribute.IsDefined(System.Reflection.Assembly,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: IsDefined(Assembly, Type)\n  nameWithType: Attribute.IsDefined(Assembly, Type)\n  fullName: Attribute.IsDefined(Assembly, Type)\n- uid: System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: IsDefined(ParameterInfo, Type)\n  nameWithType: Attribute.IsDefined(ParameterInfo, Type)\n  fullName: Attribute.IsDefined(ParameterInfo, Type)\n- uid: System.Attribute.Match(System.Object)\n  parent: System.Attribute\n  isExternal: false\n  name: Match(Object)\n  nameWithType: Attribute.Match(Object)\n  fullName: Attribute.Match(Object)\n- uid: System.Attribute.TypeId\n  parent: System.Attribute\n  isExternal: false\n  name: TypeId\n  nameWithType: Attribute.TypeId\n  fullName: Attribute.TypeId\n- uid: System.Attribute.System#Runtime#InteropServices#_Attribute#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  parent: System.Attribute\n  isExternal: false\n  name: _Attribute.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n  nameWithType: Attribute._Attribute.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n  fullName: Attribute._Attribute.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n- uid: System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  parent: System.Attribute\n  isExternal: false\n  name: _Attribute.GetTypeInfo(UInt32, UInt32, IntPtr)\n  nameWithType: Attribute._Attribute.GetTypeInfo(UInt32, UInt32, IntPtr)\n  fullName: Attribute._Attribute.GetTypeInfo(UInt32, UInt32, IntPtr)\n- uid: System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfoCount(System.UInt32@)\n  parent: System.Attribute\n  isExternal: false\n  name: _Attribute.GetTypeInfoCount(UInt32)\n  nameWithType: Attribute._Attribute.GetTypeInfoCount(UInt32)\n  fullName: Attribute._Attribute.GetTypeInfoCount(UInt32)\n- uid: System.Attribute.System#Runtime#InteropServices#_Attribute#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  parent: System.Attribute\n  isExternal: false\n  name: _Attribute.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n  nameWithType: Attribute._Attribute.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n  fullName: Attribute._Attribute.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n"}