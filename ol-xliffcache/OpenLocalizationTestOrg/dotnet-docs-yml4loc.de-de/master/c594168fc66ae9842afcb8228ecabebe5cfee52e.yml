### YamlMime:ManagedReference
items:
- uid: System.Threading.ManualResetEvent
  commentId: T:System.Threading.ManualResetEvent
  id: ManualResetEvent
  children:
  - System.Threading.ManualResetEvent.#ctor(System.Boolean)
  langs:
  - csharp
  name: ManualResetEvent
  nameWithType: ManualResetEvent
  fullName: System.Threading.ManualResetEvent
  type: Class
  assemblies:
  - System.Threading
  - mscorlib
  - netstandard
  namespace: System.Threading
  summary: Notifies one or more waiting threads that an event has occurred. This class cannot be inherited.
  remarks: "In the .NET Framework version 2.0, <xref:System.Threading.ManualResetEvent> derives from the new <xref:System.Threading.EventWaitHandle> class. A <xref:System.Threading.ManualResetEvent> is functionally equivalent to an <xref:System.Threading.EventWaitHandle> created with <xref:System.Threading.EventResetMode?displayProperty=fullName>.  \n  \n> [!NOTE]\n>  Unlike the <xref:System.Threading.ManualResetEvent> class, the <xref:System.Threading.EventWaitHandle> class provides access to named system synchronization events.  \n  \n <xref:System.Threading.ManualResetEvent> allows threads to communicate with each other by signaling. Typically, this communication concerns a task which one thread must complete before other threads can proceed.  \n  \n When a thread begins an activity that must complete before other threads proceed, it calls <xref:System.Threading.EventWaitHandle.Reset%2A> to put `ManualResetEvent` in the non-signaled state. This thread can be thought of as controlling the `ManualResetEvent`. Threads that call <xref:System.Threading.WaitHandle.WaitOne%2A> on the `ManualResetEvent` will block, awaiting the signal. When the controlling thread completes the activity, it calls <xref:System.Threading.EventWaitHandle.Set%2A> to signal that the waiting threads can proceed. All waiting threads are released.  \n  \n Once it has been signaled, `ManualResetEvent` remains signaled until it is manually reset. That is, calls to `WaitOne` return immediately.  \n  \n You can control the initial state of a `ManualResetEvent` by passing a Boolean value to the constructor, `true` if the initial state is signaled and `false` otherwise.  \n  \n `ManualResetEvent` can also be used with the `static`<xref:System.Threading.WaitHandle.WaitAll%2A> and <xref:System.Threading.WaitHandle.WaitAny%2A> methods.  \n  \n For more information about thread synchronization mechanisms, see [ManualResetEvent and ManualResetEventSlim](~/docs/standard/threading/manualresetevent-and-manualreseteventslim.md) in the conceptual documentation."
  example:
  - "The following example demonstrates how <xref:System.Threading.ManualResetEvent> works. The example starts with a <xref:System.Threading.ManualResetEvent> in the unsignaled state (that is, `false` is passed to the constructor). The example creates three threads, each of which blocks on the <xref:System.Threading.ManualResetEvent> by calling its <xref:System.Threading.WaitHandle.WaitOne%2A> method. When the user presses the **Enter** key, the example calls the <xref:System.Threading.EventWaitHandle.Set%2A> method, which releases all three threads. Contrast this with the behavior of the <xref:System.Threading.AutoResetEvent> class, which releases threads one at a time, resetting automatically after each release.  \n  \n Pressing the **Enter** key again demonstrates that the <xref:System.Threading.ManualResetEvent> remains in the signaled state until its <xref:System.Threading.EventWaitHandle.Reset%2A> method is called: The example starts two more threads. These threads do not block when they call the <xref:System.Threading.WaitHandle.WaitOne%2A> method, but instead run to completion.  \n  \n Pressing the **Enter** key again causes the example to call the <xref:System.Threading.EventWaitHandle.Reset%2A> method and to start one more thread, which blocks when it calls <xref:System.Threading.WaitHandle.WaitOne%2A>. Pressing the **Enter** key one final time calls <xref:System.Threading.EventWaitHandle.Set%2A> to release the last thread, and the program ends.  \n  \n [!code-cpp[System.Threading.ManualResetEvent#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ManualResetEvent/CPP/source.cpp#1)]\n [!code-csharp[System.Threading.ManualResetEvent#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ManualResetEvent/CS/source.cs#1)]\n [!code-vb[System.Threading.ManualResetEvent#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ManualResetEvent/VB/source.vb#1)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public sealed class ManualResetEvent : System.Threading.EventWaitHandle
  inheritance:
  - System.Object
  - System.Threading.WaitHandle
  - System.Threading.EventWaitHandle
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  - System.Threading.EventWaitHandle.GetAccessControl
  - System.Threading.EventWaitHandle.OpenExisting(System.String)
  - System.Threading.EventWaitHandle.OpenExisting(System.String,System.Security.AccessControl.EventWaitHandleRights)
  - System.Threading.EventWaitHandle.Reset
  - System.Threading.EventWaitHandle.Set
  - System.Threading.EventWaitHandle.SetAccessControl(System.Security.AccessControl.EventWaitHandleSecurity)
  - System.Threading.EventWaitHandle.TryOpenExisting(System.String,System.Security.AccessControl.EventWaitHandleRights,System.Threading.EventWaitHandle@)
  - System.Threading.EventWaitHandle.TryOpenExisting(System.String,System.Threading.EventWaitHandle@)
  - System.Threading.WaitHandle.Close
  - System.Threading.WaitHandle.Dispose
  - System.Threading.WaitHandle.Dispose(System.Boolean)
  - System.Threading.WaitHandle.Handle
  - System.Threading.WaitHandle.InvalidHandle
  - System.Threading.WaitHandle.SafeWaitHandle
  - System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle)
  - System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.Int32,System.Boolean)
  - System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.TimeSpan,System.Boolean)
  - System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[])
  - System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32)
  - System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32,System.Boolean)
  - System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan)
  - System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)
  - System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[])
  - System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32)
  - System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)
  - System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan)
  - System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)
  - System.Threading.WaitHandle.WaitOne
  - System.Threading.WaitHandle.WaitOne(System.Int32)
  - System.Threading.WaitHandle.WaitOne(System.Int32,System.Boolean)
  - System.Threading.WaitHandle.WaitOne(System.TimeSpan)
  - System.Threading.WaitHandle.WaitOne(System.TimeSpan,System.Boolean)
  - System.Threading.WaitHandle.WaitTimeout
  extensionMethods:
  - System.Threading.ThreadingAclExtensions.GetAccessControl(System.Threading.EventWaitHandle)
  - System.Threading.ThreadingAclExtensions.SetAccessControl(System.Threading.EventWaitHandle,System.Security.AccessControl.EventWaitHandleSecurity)
  - System.Threading.WaitHandleExtensions.GetSafeWaitHandle(System.Threading.WaitHandle)
  - System.Threading.WaitHandleExtensions.SetSafeWaitHandle(System.Threading.WaitHandle,Microsoft.Win32.SafeHandles.SafeWaitHandle)
  attributes:
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/ManualResetEvent.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.ManualResetEvent.#ctor(System.Boolean)
  commentId: M:System.Threading.ManualResetEvent.#ctor(System.Boolean)
  id: '#ctor(System.Boolean)'
  parent: System.Threading.ManualResetEvent
  langs:
  - csharp
  name: ManualResetEvent(Boolean)
  nameWithType: ManualResetEvent.ManualResetEvent(Boolean)
  fullName: ManualResetEvent.ManualResetEvent(Boolean)
  type: Constructor
  assemblies:
  - System.Threading
  - mscorlib
  - netstandard
  namespace: System.Threading
  summary: Initializes a new instance of the <xref href="System.Threading.ManualResetEvent"></xref> class with a Boolean value indicating whether to set the initial state to signaled.
  remarks: If the initial state of a <xref:System.Threading.ManualResetEvent> is signaled (that is, if it is created by passing `true` for `initialState`), threads that wait on the <xref:System.Threading.ManualResetEvent> do not block. If the initial state is nonsignaled, threads block until the <xref:System.Threading.EventWaitHandle.Set%2A> method is called.
  syntax:
    content: public ManualResetEvent (bool initialState);
    parameters:
    - id: initialState
      type: System.Boolean
      description: '`true` to set the initial state signaled; `false` to set the initial state to nonsignaled.'
  overload: System.Threading.ManualResetEvent.#ctor*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/ManualResetEvent.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
references:
- uid: System.Threading.EventWaitHandle
  parent: System.Threading
  isExternal: false
  name: EventWaitHandle
  nameWithType: EventWaitHandle
  fullName: System.Threading.EventWaitHandle
- uid: System.Threading.ManualResetEvent.#ctor(System.Boolean)
  parent: System.Threading.ManualResetEvent
  isExternal: false
  name: ManualResetEvent(Boolean)
  nameWithType: ManualResetEvent.ManualResetEvent(Boolean)
  fullName: ManualResetEvent.ManualResetEvent(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Threading.ManualResetEvent.#ctor*
  parent: System.Threading.ManualResetEvent
  isExternal: false
  name: ManualResetEvent
  nameWithType: ManualResetEvent.ManualResetEvent
  fullName: ManualResetEvent.ManualResetEvent
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/ManualResetEvent.xml
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: Object.Equals(Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: Object.Equals(Object, Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: false
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: Object.GetHashCode()
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  nameWithType: Object.GetType()
  fullName: Object.GetType()
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: Object.MemberwiseClone()
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: Object.ReferenceEquals(Object, Object)
- uid: System.Object.ToString
  parent: System.Object
  isExternal: false
  name: ToString()
  nameWithType: Object.ToString()
  fullName: Object.ToString()
- uid: System.Threading.WaitHandle.Close
  parent: System.Threading.WaitHandle
  isExternal: false
  name: Close()
  nameWithType: WaitHandle.Close()
  fullName: WaitHandle.Close()
- uid: System.Threading.WaitHandle.Dispose
  parent: System.Threading.WaitHandle
  isExternal: false
  name: Dispose()
  nameWithType: WaitHandle.Dispose()
  fullName: WaitHandle.Dispose()
- uid: System.Threading.WaitHandle.Dispose(System.Boolean)
  parent: System.Threading.WaitHandle
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: WaitHandle.Dispose(Boolean)
  fullName: WaitHandle.Dispose(Boolean)
- uid: System.Threading.WaitHandle.Handle
  parent: System.Threading.WaitHandle
  isExternal: false
  name: Handle
  nameWithType: WaitHandle.Handle
  fullName: WaitHandle.Handle
- uid: System.Threading.WaitHandle.InvalidHandle
  parent: System.Threading.WaitHandle
  isExternal: false
  name: InvalidHandle
  nameWithType: WaitHandle.InvalidHandle
  fullName: WaitHandle.InvalidHandle
- uid: System.Threading.WaitHandle.SafeWaitHandle
  parent: System.Threading.WaitHandle
  isExternal: false
  name: SafeWaitHandle
  nameWithType: WaitHandle.SafeWaitHandle
  fullName: WaitHandle.SafeWaitHandle
- uid: System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle)
  parent: System.Threading.WaitHandle
  isExternal: false
  name: SignalAndWait(WaitHandle, WaitHandle)
  nameWithType: WaitHandle.SignalAndWait(WaitHandle, WaitHandle)
  fullName: WaitHandle.SignalAndWait(WaitHandle, WaitHandle)
- uid: System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.Int32,System.Boolean)
  parent: System.Threading.WaitHandle
  isExternal: false
  name: SignalAndWait(WaitHandle, WaitHandle, Int32, Boolean)
  nameWithType: WaitHandle.SignalAndWait(WaitHandle, WaitHandle, Int32, Boolean)
  fullName: WaitHandle.SignalAndWait(WaitHandle, WaitHandle, Int32, Boolean)
- uid: System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.TimeSpan,System.Boolean)
  parent: System.Threading.WaitHandle
  isExternal: false
  name: SignalAndWait(WaitHandle, WaitHandle, TimeSpan, Boolean)
  nameWithType: WaitHandle.SignalAndWait(WaitHandle, WaitHandle, TimeSpan, Boolean)
  fullName: WaitHandle.SignalAndWait(WaitHandle, WaitHandle, TimeSpan, Boolean)
- uid: System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)
  parent: System.Threading.WaitHandle
  isExternal: false
  name: WaitAll(WaitHandle[], TimeSpan, Boolean)
  nameWithType: WaitHandle.WaitAll(WaitHandle[], TimeSpan, Boolean)
  fullName: WaitHandle.WaitAll(WaitHandle[], TimeSpan, Boolean)
- uid: System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32,System.Boolean)
  parent: System.Threading.WaitHandle
  isExternal: false
  name: WaitAll(WaitHandle[], Int32, Boolean)
  nameWithType: WaitHandle.WaitAll(WaitHandle[], Int32, Boolean)
  fullName: WaitHandle.WaitAll(WaitHandle[], Int32, Boolean)
- uid: System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan)
  parent: System.Threading.WaitHandle
  isExternal: false
  name: WaitAll(WaitHandle[], TimeSpan)
  nameWithType: WaitHandle.WaitAll(WaitHandle[], TimeSpan)
  fullName: WaitHandle.WaitAll(WaitHandle[], TimeSpan)
- uid: System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32)
  parent: System.Threading.WaitHandle
  isExternal: false
  name: WaitAll(WaitHandle[], Int32)
  nameWithType: WaitHandle.WaitAll(WaitHandle[], Int32)
  fullName: WaitHandle.WaitAll(WaitHandle[], Int32)
- uid: System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[])
  parent: System.Threading.WaitHandle
  isExternal: false
  name: WaitAll(WaitHandle[])
  nameWithType: WaitHandle.WaitAll(WaitHandle[])
  fullName: WaitHandle.WaitAll(WaitHandle[])
- uid: System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[])
  parent: System.Threading.WaitHandle
  isExternal: false
  name: WaitAny(WaitHandle[])
  nameWithType: WaitHandle.WaitAny(WaitHandle[])
  fullName: WaitHandle.WaitAny(WaitHandle[])
- uid: System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32)
  parent: System.Threading.WaitHandle
  isExternal: false
  name: WaitAny(WaitHandle[], Int32)
  nameWithType: WaitHandle.WaitAny(WaitHandle[], Int32)
  fullName: WaitHandle.WaitAny(WaitHandle[], Int32)
- uid: System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan)
  parent: System.Threading.WaitHandle
  isExternal: false
  name: WaitAny(WaitHandle[], TimeSpan)
  nameWithType: WaitHandle.WaitAny(WaitHandle[], TimeSpan)
  fullName: WaitHandle.WaitAny(WaitHandle[], TimeSpan)
- uid: System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)
  parent: System.Threading.WaitHandle
  isExternal: false
  name: WaitAny(WaitHandle[], Int32, Boolean)
  nameWithType: WaitHandle.WaitAny(WaitHandle[], Int32, Boolean)
  fullName: WaitHandle.WaitAny(WaitHandle[], Int32, Boolean)
- uid: System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)
  parent: System.Threading.WaitHandle
  isExternal: false
  name: WaitAny(WaitHandle[], TimeSpan, Boolean)
  nameWithType: WaitHandle.WaitAny(WaitHandle[], TimeSpan, Boolean)
  fullName: WaitHandle.WaitAny(WaitHandle[], TimeSpan, Boolean)
- uid: System.Threading.WaitHandle.WaitOne
  parent: System.Threading.WaitHandle
  isExternal: false
  name: WaitOne()
  nameWithType: WaitHandle.WaitOne()
  fullName: WaitHandle.WaitOne()
- uid: System.Threading.WaitHandle.WaitOne(System.Int32)
  parent: System.Threading.WaitHandle
  isExternal: false
  name: WaitOne(Int32)
  nameWithType: WaitHandle.WaitOne(Int32)
  fullName: WaitHandle.WaitOne(Int32)
- uid: System.Threading.WaitHandle.WaitOne(System.TimeSpan)
  parent: System.Threading.WaitHandle
  isExternal: false
  name: WaitOne(TimeSpan)
  nameWithType: WaitHandle.WaitOne(TimeSpan)
  fullName: WaitHandle.WaitOne(TimeSpan)
- uid: System.Threading.WaitHandle.WaitOne(System.Int32,System.Boolean)
  parent: System.Threading.WaitHandle
  isExternal: false
  name: WaitOne(Int32, Boolean)
  nameWithType: WaitHandle.WaitOne(Int32, Boolean)
  fullName: WaitHandle.WaitOne(Int32, Boolean)
- uid: System.Threading.WaitHandle.WaitOne(System.TimeSpan,System.Boolean)
  parent: System.Threading.WaitHandle
  isExternal: false
  name: WaitOne(TimeSpan, Boolean)
  nameWithType: WaitHandle.WaitOne(TimeSpan, Boolean)
  fullName: WaitHandle.WaitOne(TimeSpan, Boolean)
- uid: System.Threading.WaitHandle.WaitTimeout
  parent: System.Threading.WaitHandle
  isExternal: false
  name: WaitTimeout
  nameWithType: WaitHandle.WaitTimeout
  fullName: WaitHandle.WaitTimeout
- uid: System.Threading.EventWaitHandle.GetAccessControl
  parent: System.Threading.EventWaitHandle
  isExternal: false
  name: GetAccessControl()
  nameWithType: EventWaitHandle.GetAccessControl()
  fullName: EventWaitHandle.GetAccessControl()
- uid: System.Threading.EventWaitHandle.OpenExisting(System.String)
  parent: System.Threading.EventWaitHandle
  isExternal: false
  name: OpenExisting(String)
  nameWithType: EventWaitHandle.OpenExisting(String)
  fullName: EventWaitHandle.OpenExisting(String)
- uid: System.Threading.EventWaitHandle.OpenExisting(System.String,System.Security.AccessControl.EventWaitHandleRights)
  parent: System.Threading.EventWaitHandle
  isExternal: false
  name: OpenExisting(String, EventWaitHandleRights)
  nameWithType: EventWaitHandle.OpenExisting(String, EventWaitHandleRights)
  fullName: EventWaitHandle.OpenExisting(String, EventWaitHandleRights)
- uid: System.Threading.EventWaitHandle.Reset
  parent: System.Threading.EventWaitHandle
  isExternal: false
  name: Reset()
  nameWithType: EventWaitHandle.Reset()
  fullName: EventWaitHandle.Reset()
- uid: System.Threading.EventWaitHandle.Set
  parent: System.Threading.EventWaitHandle
  isExternal: false
  name: Set()
  nameWithType: EventWaitHandle.Set()
  fullName: EventWaitHandle.Set()
- uid: System.Threading.EventWaitHandle.SetAccessControl(System.Security.AccessControl.EventWaitHandleSecurity)
  parent: System.Threading.EventWaitHandle
  isExternal: false
  name: SetAccessControl(EventWaitHandleSecurity)
  nameWithType: EventWaitHandle.SetAccessControl(EventWaitHandleSecurity)
  fullName: EventWaitHandle.SetAccessControl(EventWaitHandleSecurity)
- uid: System.Threading.EventWaitHandle.TryOpenExisting(System.String,System.Threading.EventWaitHandle@)
  parent: System.Threading.EventWaitHandle
  isExternal: false
  name: TryOpenExisting(String, EventWaitHandle)
  nameWithType: EventWaitHandle.TryOpenExisting(String, EventWaitHandle)
  fullName: EventWaitHandle.TryOpenExisting(String, EventWaitHandle)
- uid: System.Threading.EventWaitHandle.TryOpenExisting(System.String,System.Security.AccessControl.EventWaitHandleRights,System.Threading.EventWaitHandle@)
  parent: System.Threading.EventWaitHandle
  isExternal: false
  name: TryOpenExisting(String, EventWaitHandleRights, EventWaitHandle)
  nameWithType: EventWaitHandle.TryOpenExisting(String, EventWaitHandleRights, EventWaitHandle)
  fullName: EventWaitHandle.TryOpenExisting(String, EventWaitHandleRights, EventWaitHandle)
- uid: System.Threading.ThreadingAclExtensions.GetAccessControl(System.Threading.EventWaitHandle)
  parent: System.Threading.ThreadingAclExtensions
  isExternal: false
  name: GetAccessControl(EventWaitHandle)
  nameWithType: ThreadingAclExtensions.GetAccessControl(EventWaitHandle)
  fullName: ThreadingAclExtensions.GetAccessControl(EventWaitHandle)
- uid: System.Threading.ThreadingAclExtensions.SetAccessControl(System.Threading.EventWaitHandle,System.Security.AccessControl.EventWaitHandleSecurity)
  parent: System.Threading.ThreadingAclExtensions
  isExternal: false
  name: SetAccessControl(EventWaitHandle, EventWaitHandleSecurity)
  nameWithType: ThreadingAclExtensions.SetAccessControl(EventWaitHandle, EventWaitHandleSecurity)
  fullName: ThreadingAclExtensions.SetAccessControl(EventWaitHandle, EventWaitHandleSecurity)
- uid: System.Threading.WaitHandleExtensions.GetSafeWaitHandle(System.Threading.WaitHandle)
  parent: System.Threading.WaitHandleExtensions
  isExternal: false
  name: GetSafeWaitHandle(WaitHandle)
  nameWithType: WaitHandleExtensions.GetSafeWaitHandle(WaitHandle)
  fullName: WaitHandleExtensions.GetSafeWaitHandle(WaitHandle)
- uid: System.Threading.WaitHandleExtensions.SetSafeWaitHandle(System.Threading.WaitHandle,Microsoft.Win32.SafeHandles.SafeWaitHandle)
  parent: System.Threading.WaitHandleExtensions
  isExternal: false
  name: SetSafeWaitHandle(WaitHandle, SafeWaitHandle)
  nameWithType: WaitHandleExtensions.SetSafeWaitHandle(WaitHandle, SafeWaitHandle)
  fullName: WaitHandleExtensions.SetSafeWaitHandle(WaitHandle, SafeWaitHandle)
