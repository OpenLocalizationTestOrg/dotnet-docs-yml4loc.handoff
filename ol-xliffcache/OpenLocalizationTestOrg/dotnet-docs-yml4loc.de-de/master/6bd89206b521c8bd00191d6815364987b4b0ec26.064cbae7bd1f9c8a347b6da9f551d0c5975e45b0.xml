{"nodes":[{"content":"Represents a nongeneric collection of key/value pairs.","nodes":[{"pos":[0,54],"content":"Represents a nongeneric collection of key/value pairs.","nodes":[{"content":"Represents a nongeneric collection of key/value pairs.","pos":[0,54]}]}],"pos":[888,943],"yaml":true},{"content":"The <xref:System.Collections.IDictionary> interface is the base interface for nongeneric collections of key/value pairs. For the generic version of this interface, see <xref:System.Collections.Generic.IDictionary%602?displayProperty=fullName>.  \n  \n Each element is a key/value pair stored in a <xref:System.Collections.DictionaryEntry> object.  \n  \n Each pair must have a unique key. Implementations can vary in whether they allow the key to be null.  The value can be null and does not have to be unique. The <xref:System.Collections.IDictionary> interface allows the contained keys and values to be enumerated, but it does not imply any particular sort order.  \n  \n <xref:System.Collections.IDictionary> implementations fall into three categories: read-only, fixed-size, variable-size. A read-only <xref:System.Collections.IDictionary> object cannot be modified. A fixed-size <xref:System.Collections.IDictionary> object does not allow the addition or removal of elements, but does allow the modification of existing elements. A variable-size <xref:System.Collections.IDictionary> object allows the addition, removal, and modification of elements.  \n  \n The `foreach` statement of the C# language (`For Each` in Visual Basic) returns an object of the type of the elements in the collection. Since each element of the <xref:System.Collections.IDictionary> object is a key/value pair, the element type is not the type of the key or the type of the value. Instead, the element type is <xref:System.Collections.DictionaryEntry>. For example:  \n  \n [!code-cpp[Dictionary#14](~/samples/snippets/cpp/VS_Snippets_CLR/Dictionary/cpp/remarks.cpp#14)]\n [!code-csharp[Dictionary#14](~/samples/snippets/csharp/VS_Snippets_CLR/Dictionary/CS/remarks.cs#14)]\n [!code-vb[Dictionary#14](~/samples/snippets/visualbasic/VS_Snippets_CLR/Dictionary/VB/remarks.vb#14)]  \n  \n The `foreach` statement is a wrapper around the enumerator, which allows only reading from but not writing to the collection.","nodes":[{"pos":[0,243],"content":"The <xref:System.Collections.IDictionary> interface is the base interface for nongeneric collections of key/value pairs. For the generic version of this interface, see <xref:System.Collections.Generic.IDictionary%602?displayProperty=fullName>.","nodes":[{"content":"The <xref:System.Collections.IDictionary> interface is the base interface for nongeneric collections of key/value pairs. For the generic version of this interface, see <xref:System.Collections.Generic.IDictionary%602?displayProperty=fullName>.","pos":[0,243],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Collections.IDictionary&gt;</ph> interface is the base interface for nongeneric collections of key/value pairs.","pos":[0,120],"source":"The <xref:System.Collections.IDictionary> interface is the base interface for nongeneric collections of key/value pairs."},{"content":"For the generic version of this interface, see <ph id=\"ph1\">&lt;xref:System.Collections.Generic.IDictionary%602?displayProperty=fullName&gt;</ph>.","pos":[121,243],"source":" For the generic version of this interface, see <xref:System.Collections.Generic.IDictionary%602?displayProperty=fullName>."}]}]},{"pos":[250,344],"content":"Each element is a key/value pair stored in a <xref:System.Collections.DictionaryEntry> object.","nodes":[{"content":"Each element is a key/value pair stored in a <ph id=\"ph1\">&lt;xref:System.Collections.DictionaryEntry&gt;</ph> object.","pos":[0,94],"source":"Each element is a key/value pair stored in a <xref:System.Collections.DictionaryEntry> object."}]},{"pos":[351,662],"content":"Each pair must have a unique key. Implementations can vary in whether they allow the key to be null.  The value can be null and does not have to be unique. The <xref:System.Collections.IDictionary> interface allows the contained keys and values to be enumerated, but it does not imply any particular sort order.","nodes":[{"content":"Each pair must have a unique key. Implementations can vary in whether they allow the key to be null.  The value can be null and does not have to be unique. The <xref:System.Collections.IDictionary> interface allows the contained keys and values to be enumerated, but it does not imply any particular sort order.","pos":[0,311],"nodes":[{"content":"Each pair must have a unique key.","pos":[0,33]},{"content":"Implementations can vary in whether they allow the key to be null.","pos":[34,100]},{"content":"The value can be null and does not have to be unique.","pos":[102,155]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Collections.IDictionary&gt;</ph> interface allows the contained keys and values to be enumerated, but it does not imply any particular sort order.","pos":[156,311],"source":" The <xref:System.Collections.IDictionary> interface allows the contained keys and values to be enumerated, but it does not imply any particular sort order."}]}]},{"pos":[669,1150],"content":"<xref:System.Collections.IDictionary> implementations fall into three categories: read-only, fixed-size, variable-size. A read-only <xref:System.Collections.IDictionary> object cannot be modified. A fixed-size <xref:System.Collections.IDictionary> object does not allow the addition or removal of elements, but does allow the modification of existing elements. A variable-size <xref:System.Collections.IDictionary> object allows the addition, removal, and modification of elements.","nodes":[{"content":"<xref:System.Collections.IDictionary> implementations fall into three categories: read-only, fixed-size, variable-size. A read-only <xref:System.Collections.IDictionary> object cannot be modified. A fixed-size <xref:System.Collections.IDictionary> object does not allow the addition or removal of elements, but does allow the modification of existing elements. A variable-size <xref:System.Collections.IDictionary> object allows the addition, removal, and modification of elements.","pos":[0,481],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.IDictionary&gt;</ph> implementations fall into three categories: read-only, fixed-size, variable-size.","pos":[0,119],"source":"<xref:System.Collections.IDictionary> implementations fall into three categories: read-only, fixed-size, variable-size."},{"content":"A read-only <ph id=\"ph1\">&lt;xref:System.Collections.IDictionary&gt;</ph> object cannot be modified.","pos":[120,196],"source":" A read-only <xref:System.Collections.IDictionary> object cannot be modified."},{"content":"A fixed-size <ph id=\"ph1\">&lt;xref:System.Collections.IDictionary&gt;</ph> object does not allow the addition or removal of elements, but does allow the modification of existing elements.","pos":[197,360],"source":" A fixed-size <xref:System.Collections.IDictionary> object does not allow the addition or removal of elements, but does allow the modification of existing elements."},{"content":"A variable-size <ph id=\"ph1\">&lt;xref:System.Collections.IDictionary&gt;</ph> object allows the addition, removal, and modification of elements.","pos":[361,481],"source":" A variable-size <xref:System.Collections.IDictionary> object allows the addition, removal, and modification of elements."}]}]},{"pos":[1157,1540],"content":"The `foreach` statement of the C# language (`For Each` in Visual Basic) returns an object of the type of the elements in the collection. Since each element of the <xref:System.Collections.IDictionary> object is a key/value pair, the element type is not the type of the key or the type of the value. Instead, the element type is <xref:System.Collections.DictionaryEntry>. For example:","nodes":[{"content":"The <ph id=\"ph1\">`foreach`</ph> statement of the C# language (<ph id=\"ph2\">`For Each`</ph> in Visual Basic) returns an object of the type of the elements in the collection.","pos":[0,136],"source":"The `foreach` statement of the C# language (`For Each` in Visual Basic) returns an object of the type of the elements in the collection."},{"content":"Since each element of the <ph id=\"ph1\">&lt;xref:System.Collections.IDictionary&gt;</ph> object is a key/value pair, the element type is not the type of the key or the type of the value.","pos":[137,298],"source":" Since each element of the <xref:System.Collections.IDictionary> object is a key/value pair, the element type is not the type of the key or the type of the value."},{"content":"Instead, the element type is <ph id=\"ph1\">&lt;xref:System.Collections.DictionaryEntry&gt;</ph>.","pos":[299,370],"source":" Instead, the element type is <xref:System.Collections.DictionaryEntry>."},{"content":"For example:","pos":[371,383]}]},{"pos":[1547,1848],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>Dictionary#14<ept id=\"p2\">](~/samples/snippets/cpp/VS_Snippets_CLR/Dictionary/cpp/remarks.cpp#14)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-csharp</bpt><bpt id=\"p4\">[</bpt>Dictionary#14<ept id=\"p4\">](~/samples/snippets/csharp/VS_Snippets_CLR/Dictionary/CS/remarks.cs#14)</ept><ept id=\"p3\">]</ept> <bpt id=\"p5\">[!code-vb</bpt><bpt id=\"p6\">[</bpt>Dictionary#14<ept id=\"p6\">](~/samples/snippets/visualbasic/VS_Snippets_CLR/Dictionary/VB/remarks.vb#14)</ept><ept id=\"p5\">]</ept>","source":"[!code-cpp[Dictionary#14](~/samples/snippets/cpp/VS_Snippets_CLR/Dictionary/cpp/remarks.cpp#14)]\n [!code-csharp[Dictionary#14](~/samples/snippets/csharp/VS_Snippets_CLR/Dictionary/CS/remarks.cs#14)]\n [!code-vb[Dictionary#14](~/samples/snippets/visualbasic/VS_Snippets_CLR/Dictionary/VB/remarks.vb#14)]"},{"pos":[1855,1980],"content":"The <ph id=\"ph1\">`foreach`</ph> statement is a wrapper around the enumerator, which allows only reading from but not writing to the collection.","source":"The `foreach` statement is a wrapper around the enumerator, which allows only reading from but not writing to the collection."}],"pos":[954,2951],"yaml":true,"extradata":"MT"},{"content":"Adds an element with the provided key and value to the <xref href=\"System.Collections.IDictionary\"></xref> object.","nodes":[{"pos":[0,114],"content":"Adds an element with the provided key and value to the <ph id=\"ph1\">&lt;xref href=\"System.Collections.IDictionary\"&gt;&lt;/xref&gt;</ph> object.","source":"Adds an element with the provided key and value to the <xref href=\"System.Collections.IDictionary\"></xref> object."}],"pos":[7027,7142],"yaml":true},{"content":"You can also use the <xref:System.Collections.IDictionary.Item%2A> property to add new elements by setting the value of a key that does not exist in the dictionary (for example, `myCollection[\"myNonexistentKey\"] = myValue`). However, if the specified key already exists in the dictionary, setting the <xref:System.Collections.IDictionary.Item%2A> property overwrites the old value. In contrast, the <xref:System.Collections.IDictionary.Add%2A> method does not modify existing elements.  \n  \n Implementations can vary in whether they allow the key to be `null`.","nodes":[{"pos":[0,485],"content":"You can also use the <xref:System.Collections.IDictionary.Item%2A> property to add new elements by setting the value of a key that does not exist in the dictionary (for example, `myCollection[\"myNonexistentKey\"] = myValue`). However, if the specified key already exists in the dictionary, setting the <xref:System.Collections.IDictionary.Item%2A> property overwrites the old value. In contrast, the <xref:System.Collections.IDictionary.Add%2A> method does not modify existing elements.","nodes":[{"content":"You can also use the <ph id=\"ph1\">&lt;xref:System.Collections.IDictionary.Item%2A&gt;</ph> property to add new elements by setting the value of a key that does not exist in the dictionary (for example, <ph id=\"ph2\">`myCollection[\"myNonexistentKey\"] = myValue`</ph>).","pos":[0,224],"source":"You can also use the <xref:System.Collections.IDictionary.Item%2A> property to add new elements by setting the value of a key that does not exist in the dictionary (for example, `myCollection[\"myNonexistentKey\"] = myValue`)."},{"content":"However, if the specified key already exists in the dictionary, setting the <ph id=\"ph1\">&lt;xref:System.Collections.IDictionary.Item%2A&gt;</ph> property overwrites the old value.","pos":[225,381],"source":" However, if the specified key already exists in the dictionary, setting the <xref:System.Collections.IDictionary.Item%2A> property overwrites the old value."},{"content":"In contrast, the <ph id=\"ph1\">&lt;xref:System.Collections.IDictionary.Add%2A&gt;</ph> method does not modify existing elements.","pos":[382,485],"source":" In contrast, the <xref:System.Collections.IDictionary.Add%2A> method does not modify existing elements."}]},{"pos":[492,560],"content":"Implementations can vary in whether they allow the key to be <ph id=\"ph1\">`null`</ph>.","source":"Implementations can vary in whether they allow the key to be `null`."}],"pos":[7153,7720],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Object\"></xref> to use as the key of the element to add.","nodes":[{"pos":[0,79],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Object\"&gt;&lt;/xref&gt;</ph> to use as the key of the element to add.","source":"The <xref href=\"System.Object\"></xref> to use as the key of the element to add."}],"pos":[8416,8496],"yaml":true},{"content":"The <xref href=\"System.Object\"></xref> to use as the value of the element to add.","nodes":[{"pos":[0,81],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Object\"&gt;&lt;/xref&gt;</ph> to use as the value of the element to add.","source":"The <xref href=\"System.Object\"></xref> to use as the value of the element to add."}],"pos":[8557,8639],"yaml":true},{"content":"<code>key</code> is `null`.","nodes":[{"pos":[0,27],"content":"<ph id=\"ph1\">&lt;code&gt;key&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>key</code> is `null`."}],"pos":[8803,8831],"yaml":true},{"content":"An element with the same key already exists in the <xref href=\"System.Collections.IDictionary\"></xref> object.","nodes":[{"pos":[0,110],"content":"An element with the same key already exists in the <ph id=\"ph1\">&lt;xref href=\"System.Collections.IDictionary\"&gt;&lt;/xref&gt;</ph> object.","source":"An element with the same key already exists in the <xref href=\"System.Collections.IDictionary\"></xref> object."}],"pos":[8925,9036],"yaml":true},{"content":"The <xref href=\"System.Collections.IDictionary\"></xref> is read-only.  \n  \n -or-  \n  \n The <xref href=\"System.Collections.IDictionary\"></xref> has a fixed size.","nodes":[{"pos":[0,69],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.IDictionary\"&gt;&lt;/xref&gt;</ph> is read-only.","source":"The <xref href=\"System.Collections.IDictionary\"></xref> is read-only."},{"pos":[76,80],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[87,160],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.IDictionary\"&gt;&lt;/xref&gt;</ph> has a fixed size.","source":"The <xref href=\"System.Collections.IDictionary\"></xref> has a fixed size."}],"pos":[9138,9309],"yaml":true},{"content":"Removes all elements from the <xref href=\"System.Collections.IDictionary\"></xref> object.","nodes":[{"pos":[0,89],"content":"Removes all elements from the <ph id=\"ph1\">&lt;xref href=\"System.Collections.IDictionary\"&gt;&lt;/xref&gt;</ph> object.","source":"Removes all elements from the <xref href=\"System.Collections.IDictionary\"></xref> object."}],"pos":[10750,10840],"yaml":true},{"content":"The <xref href=\"System.Collections.IDictionary\"></xref> object is read-only.","nodes":[{"pos":[0,76],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.IDictionary\"&gt;&lt;/xref&gt;</ph> object is read-only.","source":"The <xref href=\"System.Collections.IDictionary\"></xref> object is read-only."}],"pos":[11640,11717],"yaml":true},{"content":"Determines whether the <xref href=\"System.Collections.IDictionary\"></xref> object contains an element with the specified key.","nodes":[{"pos":[0,125],"content":"Determines whether the <ph id=\"ph1\">&lt;xref href=\"System.Collections.IDictionary\"&gt;&lt;/xref&gt;</ph> object contains an element with the specified key.","source":"Determines whether the <xref href=\"System.Collections.IDictionary\"></xref> object contains an element with the specified key."}],"pos":[13239,13365],"yaml":true},{"content":"Implementations can vary in whether they allow the key to be `null`.  \n  \n Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `item` to determine whether `item` exists. In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection.","nodes":[{"pos":[0,68],"content":"Implementations can vary in whether they allow the key to be <ph id=\"ph1\">`null`</ph>.","source":"Implementations can vary in whether they allow the key to be `null`."},{"pos":[75,511],"content":"Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `item` to determine whether `item` exists. In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection.","nodes":[{"content":"Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <ph id=\"ph1\">&lt;xref:System.Object.Equals%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.IComparable.CompareTo%2A&gt;</ph> methods on <ph id=\"ph3\">`item`</ph> to determine whether <ph id=\"ph4\">`item`</ph> exists.","pos":[0,208],"source":"Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `item` to determine whether `item` exists."},{"content":"In the earlier versions of the .NET Framework, this determination was made by using the <ph id=\"ph1\">&lt;xref:System.Object.Equals%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.IComparable.CompareTo%2A&gt;</ph> methods of the <ph id=\"ph3\">`item`</ph> parameter on the objects in the collection.","pos":[209,436],"source":" In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection."}]}],"pos":[13376,13892],"yaml":true,"extradata":"MT"},{"content":"The key to locate in the <xref href=\"System.Collections.IDictionary\"></xref> object.","nodes":[{"pos":[0,84],"content":"The key to locate in the <ph id=\"ph1\">&lt;xref href=\"System.Collections.IDictionary\"&gt;&lt;/xref&gt;</ph> object.","source":"The key to locate in the <xref href=\"System.Collections.IDictionary\"></xref> object."}],"pos":[14584,14669],"yaml":true},{"content":"`true` if the <xref href=\"System.Collections.IDictionary\"></xref> contains an element with the key; otherwise, `false`.","nodes":[{"pos":[0,119],"content":"<ph id=\"ph1\">`true`</ph> if the <ph id=\"ph2\">&lt;xref href=\"System.Collections.IDictionary\"&gt;&lt;/xref&gt;</ph> contains an element with the key; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if the <xref href=\"System.Collections.IDictionary\"></xref> contains an element with the key; otherwise, `false`."}],"pos":[14727,14849],"yaml":true},{"content":"<code>key</code> is `null`.","nodes":[{"pos":[0,27],"content":"<ph id=\"ph1\">&lt;code&gt;key&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>key</code> is `null`."}],"pos":[15018,15046],"yaml":true},{"content":"Returns an <xref href=\"System.Collections.IDictionaryEnumerator\"></xref> object for the <xref href=\"System.Collections.IDictionary\"></xref> object.","nodes":[{"pos":[0,147],"content":"Returns an <ph id=\"ph1\">&lt;xref href=\"System.Collections.IDictionaryEnumerator\"&gt;&lt;/xref&gt;</ph> object for the <ph id=\"ph2\">&lt;xref href=\"System.Collections.IDictionary\"&gt;&lt;/xref&gt;</ph> object.","source":"Returns an <xref href=\"System.Collections.IDictionaryEnumerator\"></xref> object for the <xref href=\"System.Collections.IDictionary\"></xref> object."}],"pos":[16535,16683],"yaml":true},{"content":"[Visual Basic, C#]  \n  \n The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators.  Therefore, using `foreach` is recommended instead of directly manipulating the enumerator.  \n  \n Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.  \n  \n Initially, the enumerator is positioned before the first element in the collection. <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.  At this position, the <xref:System.Collections.IEnumerator.Current%2A> property is undefined. Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.  \n  \n <xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.  \n  \n If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`. When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`. If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined. To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.  \n  \n An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.  \n  \n The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.","nodes":[{"pos":[0,18],"content":"[Visual Basic, C#]","nodes":[{"content":"[Visual Basic, C#]","pos":[0,18]}]},{"pos":[25,229],"content":"The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators.  Therefore, using `foreach` is recommended instead of directly manipulating the enumerator.","nodes":[{"content":"The <ph id=\"ph1\">`foreach`</ph> statement of the C# language (<ph id=\"ph2\">`for each`</ph> in Visual Basic) hides the complexity of the enumerators.","pos":[0,112],"source":"The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators."},{"content":"Therefore, using <ph id=\"ph1\">`foreach`</ph> is recommended instead of directly manipulating the enumerator.","pos":[114,204],"source":"  Therefore, using `foreach` is recommended instead of directly manipulating the enumerator."}]},{"pos":[236,356],"content":"Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.","nodes":[{"content":"Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.","pos":[0,120]}]},{"pos":[363,856],"content":"Initially, the enumerator is positioned before the first element in the collection. <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.  At this position, the <xref:System.Collections.IEnumerator.Current%2A> property is undefined. Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.","nodes":[{"content":"Initially, the enumerator is positioned before the first element in the collection. <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.  At this position, the <xref:System.Collections.IEnumerator.Current%2A> property is undefined. Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.","pos":[0,493],"nodes":[{"content":"Initially, the enumerator is positioned before the first element in the collection.","pos":[0,83]},{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> also brings the enumerator back to this position.","pos":[84,180],"source":" <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position."},{"content":"At this position, the <ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> property is undefined.","pos":[182,275],"source":"  At this position, the <xref:System.Collections.IEnumerator.Current%2A> property is undefined."},{"content":"Therefore, you must call <ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> to advance the enumerator to the first element of the collection before reading the value of <ph id=\"ph2\">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>.","pos":[276,493],"source":" Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>."}]}]},{"pos":[863,1184],"content":"<xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.","nodes":[{"content":"<xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.","pos":[0,321],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> returns the same object until either <ph id=\"ph2\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> or <ph id=\"ph3\">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> is called.","pos":[0,196],"source":"<xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called."},{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> sets <ph id=\"ph2\">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> to the next element.","pos":[197,321],"source":" <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element."}]}]},{"pos":[1191,1926],"content":"If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`. When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`. If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined. To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.","nodes":[{"content":"If <ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> passes the end of the collection, the enumerator is positioned after the last element in the collection and <ph id=\"ph2\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returns <ph id=\"ph3\">`false`</ph>.","pos":[0,227],"source":"If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`."},{"content":"When the enumerator is at this position, subsequent calls to <ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> also return <ph id=\"ph2\">`false`</ph>.","pos":[228,359],"source":" When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`."},{"content":"If the last call to <ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returned <ph id=\"ph2\">`false`</ph>, <ph id=\"ph3\">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> is undefined.","pos":[360,510],"source":" If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined."},{"content":"To set <ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> to the first element of the collection again, you can call <ph id=\"ph2\">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> followed by <ph id=\"ph3\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>.","pos":[511,735],"source":" To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>."}]},{"pos":[1933,2168],"content":"An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.","nodes":[{"content":"An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.","pos":[0,235],"nodes":[{"content":"An enumerator remains valid as long as the collection remains unchanged.","pos":[0,72]},{"content":"If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.","pos":[73,235]}]}]},{"pos":[2175,2566],"content":"The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.","nodes":[{"content":"The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.","pos":[0,391],"nodes":[{"content":"The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.","pos":[0,154]},{"content":"To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.","pos":[156,261]},{"content":"To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.","pos":[263,391]}]}]}],"pos":[16694,19277],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Collections.IDictionaryEnumerator\"></xref> object for the <xref href=\"System.Collections.IDictionary\"></xref> object.","nodes":[{"pos":[0,139],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.IDictionaryEnumerator\"&gt;&lt;/xref&gt;</ph> object for the <ph id=\"ph2\">&lt;xref href=\"System.Collections.IDictionary\"&gt;&lt;/xref&gt;</ph> object.","source":"An <xref href=\"System.Collections.IDictionaryEnumerator\"></xref> object for the <xref href=\"System.Collections.IDictionary\"></xref> object."}],"pos":[19469,19609],"yaml":true},{"content":"Gets a value indicating whether the <xref href=\"System.Collections.IDictionary\"></xref> object has a fixed size.","nodes":[{"pos":[0,112],"content":"Gets a value indicating whether the <ph id=\"ph1\">&lt;xref href=\"System.Collections.IDictionary\"&gt;&lt;/xref&gt;</ph> object has a fixed size.","source":"Gets a value indicating whether the <xref href=\"System.Collections.IDictionary\"></xref> object has a fixed size."}],"pos":[21157,21270],"yaml":true},{"content":"A collection with a fixed size does not allow the addition or removal of elements after the collection is created, but does allow the modification of existing elements.  \n  \n A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements; therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.","nodes":[{"pos":[0,168],"content":"A collection with a fixed size does not allow the addition or removal of elements after the collection is created, but does allow the modification of existing elements.","nodes":[{"content":"A collection with a fixed size does not allow the addition or removal of elements after the collection is created, but does allow the modification of existing elements.","pos":[0,168]}]},{"pos":[175,445],"content":"A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements; therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.","nodes":[{"content":"A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements; therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.","pos":[0,270]}]}],"pos":[21281,21731],"yaml":true,"extradata":"MT"},{"content":"`true` if the <xref href=\"System.Collections.IDictionary\"></xref> object has a fixed size; otherwise, `false`.","nodes":[{"pos":[0,110],"content":"<ph id=\"ph1\">`true`</ph> if the <ph id=\"ph2\">&lt;xref href=\"System.Collections.IDictionary\"&gt;&lt;/xref&gt;</ph> object has a fixed size; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if the <xref href=\"System.Collections.IDictionary\"></xref> object has a fixed size; otherwise, `false`."}],"pos":[22409,22522],"yaml":true},{"content":"Gets a value indicating whether the <xref href=\"System.Collections.IDictionary\"></xref> object is read-only.","nodes":[{"pos":[0,108],"content":"Gets a value indicating whether the <ph id=\"ph1\">&lt;xref href=\"System.Collections.IDictionary\"&gt;&lt;/xref&gt;</ph> object is read-only.","source":"Gets a value indicating whether the <xref href=\"System.Collections.IDictionary\"></xref> object is read-only."}],"pos":[24062,24171],"yaml":true},{"content":"A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.","nodes":[{"pos":[0,129],"content":"A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.","nodes":[{"content":"A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.","pos":[0,129]}]}],"pos":[24182,24312],"yaml":true,"extradata":"MT"},{"content":"`true` if the <xref href=\"System.Collections.IDictionary\"></xref> object is read-only; otherwise, `false`.","nodes":[{"pos":[0,106],"content":"<ph id=\"ph1\">`true`</ph> if the <ph id=\"ph2\">&lt;xref href=\"System.Collections.IDictionary\"&gt;&lt;/xref&gt;</ph> object is read-only; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if the <xref href=\"System.Collections.IDictionary\"></xref> object is read-only; otherwise, `false`."}],"pos":[24988,25097],"yaml":true},{"content":"Gets or sets the element with the specified key.","nodes":[{"pos":[0,48],"content":"Gets or sets the element with the specified key.","nodes":[{"content":"Gets or sets the element with the specified key.","pos":[0,48]}]}],"pos":[26669,26718],"yaml":true},{"content":"This property provides the ability to access a specific element in the collection by using the following syntax: `myCollection[key]`.  \n  \n You can also use the <xref:System.Collections.IDictionary.Item%2A> property to add new elements by setting the value of a key that does not exist in the dictionary (for example, `myCollection[\"myNonexistentKey\"] = myValue`). However, if the specified key already exists in the dictionary, setting the <xref:System.Collections.IDictionary.Item%2A> property overwrites the old value. In contrast, the <xref:System.Collections.IDictionary.Add%2A> method does not modify existing elements.  \n  \n Implementations can vary in whether they allow the key to be `null`.  \n  \n The C# language uses the `this`[this](~/docs/csharp/language-reference/keywords/this.md) keyword to define the indexers instead of implementing the <xref:System.Collections.IDictionary.Item%2A> property. Visual Basic implements <xref:System.Collections.IDictionary.Item%2A> as a default property, which provides the same indexing functionality.","nodes":[{"pos":[0,133],"content":"This property provides the ability to access a specific element in the collection by using the following syntax: <ph id=\"ph1\">`myCollection[key]`</ph>.","source":"This property provides the ability to access a specific element in the collection by using the following syntax: `myCollection[key]`."},{"pos":[140,625],"content":"You can also use the <xref:System.Collections.IDictionary.Item%2A> property to add new elements by setting the value of a key that does not exist in the dictionary (for example, `myCollection[\"myNonexistentKey\"] = myValue`). However, if the specified key already exists in the dictionary, setting the <xref:System.Collections.IDictionary.Item%2A> property overwrites the old value. In contrast, the <xref:System.Collections.IDictionary.Add%2A> method does not modify existing elements.","nodes":[{"content":"You can also use the <ph id=\"ph1\">&lt;xref:System.Collections.IDictionary.Item%2A&gt;</ph> property to add new elements by setting the value of a key that does not exist in the dictionary (for example, <ph id=\"ph2\">`myCollection[\"myNonexistentKey\"] = myValue`</ph>).","pos":[0,224],"source":"You can also use the <xref:System.Collections.IDictionary.Item%2A> property to add new elements by setting the value of a key that does not exist in the dictionary (for example, `myCollection[\"myNonexistentKey\"] = myValue`)."},{"content":"However, if the specified key already exists in the dictionary, setting the <ph id=\"ph1\">&lt;xref:System.Collections.IDictionary.Item%2A&gt;</ph> property overwrites the old value.","pos":[225,381],"source":" However, if the specified key already exists in the dictionary, setting the <xref:System.Collections.IDictionary.Item%2A> property overwrites the old value."},{"content":"In contrast, the <ph id=\"ph1\">&lt;xref:System.Collections.IDictionary.Add%2A&gt;</ph> method does not modify existing elements.","pos":[382,485],"source":" In contrast, the <xref:System.Collections.IDictionary.Add%2A> method does not modify existing elements."}]},{"pos":[632,700],"content":"Implementations can vary in whether they allow the key to be <ph id=\"ph1\">`null`</ph>.","source":"Implementations can vary in whether they allow the key to be `null`."},{"pos":[707,1051],"content":"The C# language uses the `this`[this](~/docs/csharp/language-reference/keywords/this.md) keyword to define the indexers instead of implementing the <xref:System.Collections.IDictionary.Item%2A> property. Visual Basic implements <xref:System.Collections.IDictionary.Item%2A> as a default property, which provides the same indexing functionality.","nodes":[{"content":"The C# language uses the <ph id=\"ph1\">`this`</ph><bpt id=\"p1\">[</bpt>this<ept id=\"p1\">](~/docs/csharp/language-reference/keywords/this.md)</ept> keyword to define the indexers instead of implementing the <ph id=\"ph2\">&lt;xref:System.Collections.IDictionary.Item%2A&gt;</ph> property.","pos":[0,203],"source":"The C# language uses the `this`[this](~/docs/csharp/language-reference/keywords/this.md) keyword to define the indexers instead of implementing the <xref:System.Collections.IDictionary.Item%2A> property."},{"content":"Visual Basic implements <ph id=\"ph1\">&lt;xref:System.Collections.IDictionary.Item%2A&gt;</ph> as a default property, which provides the same indexing functionality.","pos":[204,344],"source":" Visual Basic implements <xref:System.Collections.IDictionary.Item%2A> as a default property, which provides the same indexing functionality."}]}],"pos":[26729,27791],"yaml":true,"extradata":"MT"},{"content":"The key of the element to get or set.","nodes":[{"pos":[0,37],"content":"The key of the element to get or set.","nodes":[{"content":"The key of the element to get or set.","pos":[0,37]}]}],"pos":[28497,28535],"yaml":true},{"content":"The element with the specified key, or `null` if the key does not exist.","nodes":[{"pos":[0,72],"content":"The element with the specified key, or <ph id=\"ph1\">`null`</ph> if the key does not exist.","source":"The element with the specified key, or `null` if the key does not exist."}],"pos":[28592,28665],"yaml":true},{"content":"<code>key</code> is `null`.","nodes":[{"pos":[0,27],"content":"<ph id=\"ph1\">&lt;code&gt;key&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>key</code> is `null`."}],"pos":[28830,28858],"yaml":true},{"content":"The property is set and the <xref href=\"System.Collections.IDictionary\"></xref> object is read-only.  \n  \n -or-  \n  \n The property is set, <code>key</code> does not exist in the collection, and the <xref href=\"System.Collections.IDictionary\"></xref> has a fixed size.","nodes":[{"pos":[0,100],"content":"The property is set and the <ph id=\"ph1\">&lt;xref href=\"System.Collections.IDictionary\"&gt;&lt;/xref&gt;</ph> object is read-only.","source":"The property is set and the <xref href=\"System.Collections.IDictionary\"></xref> object is read-only."},{"pos":[107,111],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[118,267],"content":"The property is set, <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">key</ph><ept id=\"p1\">&lt;/code&gt;</ept> does not exist in the collection, and the <ph id=\"ph2\">&lt;xref href=\"System.Collections.IDictionary\"&gt;&lt;/xref&gt;</ph> has a fixed size.","source":"The property is set, <code>key</code> does not exist in the collection, and the <xref href=\"System.Collections.IDictionary\"></xref> has a fixed size."}],"pos":[28960,29238],"yaml":true},{"content":"Gets an <xref href=\"System.Collections.ICollection\"></xref> object containing the keys of the <xref href=\"System.Collections.IDictionary\"></xref> object.","nodes":[{"pos":[0,153],"content":"Gets an <ph id=\"ph1\">&lt;xref href=\"System.Collections.ICollection\"&gt;&lt;/xref&gt;</ph> object containing the keys of the <ph id=\"ph2\">&lt;xref href=\"System.Collections.IDictionary\"&gt;&lt;/xref&gt;</ph> object.","source":"Gets an <xref href=\"System.Collections.ICollection\"></xref> object containing the keys of the <xref href=\"System.Collections.IDictionary\"></xref> object."}],"pos":[30669,30823],"yaml":true},{"content":"The order of the keys in the returned <xref:System.Collections.ICollection> object is unspecified, but is guaranteed to be the same order as the corresponding values in the <xref:System.Collections.ICollection> returned by the <xref:System.Collections.IDictionary.Values%2A> property.","nodes":[{"pos":[0,284],"content":"The order of the keys in the returned <xref:System.Collections.ICollection> object is unspecified, but is guaranteed to be the same order as the corresponding values in the <xref:System.Collections.ICollection> returned by the <xref:System.Collections.IDictionary.Values%2A> property.","nodes":[{"content":"The order of the keys in the returned <ph id=\"ph1\">&lt;xref:System.Collections.ICollection&gt;</ph> object is unspecified, but is guaranteed to be the same order as the corresponding values in the <ph id=\"ph2\">&lt;xref:System.Collections.ICollection&gt;</ph> returned by the <ph id=\"ph3\">&lt;xref:System.Collections.IDictionary.Values%2A&gt;</ph> property.","pos":[0,284],"source":"The order of the keys in the returned <xref:System.Collections.ICollection> object is unspecified, but is guaranteed to be the same order as the corresponding values in the <xref:System.Collections.ICollection> returned by the <xref:System.Collections.IDictionary.Values%2A> property."}]}],"pos":[30834,31119],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Collections.ICollection\"></xref> object containing the keys of the <xref href=\"System.Collections.IDictionary\"></xref> object.","nodes":[{"pos":[0,148],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.ICollection\"&gt;&lt;/xref&gt;</ph> object containing the keys of the <ph id=\"ph2\">&lt;xref href=\"System.Collections.IDictionary\"&gt;&lt;/xref&gt;</ph> object.","source":"An <xref href=\"System.Collections.ICollection\"></xref> object containing the keys of the <xref href=\"System.Collections.IDictionary\"></xref> object."}],"pos":[31831,31980],"yaml":true},{"content":"Removes the element with the specified key from the <xref href=\"System.Collections.IDictionary\"></xref> object.","nodes":[{"pos":[0,111],"content":"Removes the element with the specified key from the <ph id=\"ph1\">&lt;xref href=\"System.Collections.IDictionary\"&gt;&lt;/xref&gt;</ph> object.","source":"Removes the element with the specified key from the <xref href=\"System.Collections.IDictionary\"></xref> object."}],"pos":[33556,33668],"yaml":true},{"content":"If the <xref:System.Collections.IDictionary> object does not contain an element with the specified key, the <xref:System.Collections.IDictionary> remains unchanged. No exception is thrown.","nodes":[{"pos":[0,188],"content":"If the <xref:System.Collections.IDictionary> object does not contain an element with the specified key, the <xref:System.Collections.IDictionary> remains unchanged. No exception is thrown.","nodes":[{"content":"If the <xref:System.Collections.IDictionary> object does not contain an element with the specified key, the <xref:System.Collections.IDictionary> remains unchanged. No exception is thrown.","pos":[0,188],"nodes":[{"content":"If the <ph id=\"ph1\">&lt;xref:System.Collections.IDictionary&gt;</ph> object does not contain an element with the specified key, the <ph id=\"ph2\">&lt;xref:System.Collections.IDictionary&gt;</ph> remains unchanged.","pos":[0,164],"source":"If the <xref:System.Collections.IDictionary> object does not contain an element with the specified key, the <xref:System.Collections.IDictionary> remains unchanged."},{"content":"No exception is thrown.","pos":[165,188]}]}]}],"pos":[33679,33868],"yaml":true,"extradata":"MT"},{"content":"The key of the element to remove.","nodes":[{"pos":[0,33],"content":"The key of the element to remove.","nodes":[{"content":"The key of the element to remove.","pos":[0,33]}]}],"pos":[34556,34590],"yaml":true},{"content":"<code>key</code> is `null`.","nodes":[{"pos":[0,27],"content":"<ph id=\"ph1\">&lt;code&gt;key&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>key</code> is `null`."}],"pos":[34757,34785],"yaml":true},{"content":"The <xref href=\"System.Collections.IDictionary\"></xref> object is read-only.  \n  \n -or-  \n  \n The <xref href=\"System.Collections.IDictionary\"></xref> has a fixed size.","nodes":[{"pos":[0,76],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.IDictionary\"&gt;&lt;/xref&gt;</ph> object is read-only.","source":"The <xref href=\"System.Collections.IDictionary\"></xref> object is read-only."},{"pos":[83,87],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[94,167],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.IDictionary\"&gt;&lt;/xref&gt;</ph> has a fixed size.","source":"The <xref href=\"System.Collections.IDictionary\"></xref> has a fixed size."}],"pos":[34887,35065],"yaml":true},{"content":"Gets an <xref href=\"System.Collections.ICollection\"></xref> object containing the values in the <xref href=\"System.Collections.IDictionary\"></xref> object.","nodes":[{"pos":[0,155],"content":"Gets an <ph id=\"ph1\">&lt;xref href=\"System.Collections.ICollection\"&gt;&lt;/xref&gt;</ph> object containing the values in the <ph id=\"ph2\">&lt;xref href=\"System.Collections.IDictionary\"&gt;&lt;/xref&gt;</ph> object.","source":"Gets an <xref href=\"System.Collections.ICollection\"></xref> object containing the values in the <xref href=\"System.Collections.IDictionary\"></xref> object."}],"pos":[36508,36664],"yaml":true},{"content":"The order of the values in the returned <xref:System.Collections.ICollection> object is unspecified, but is guaranteed to be the same order as the corresponding keys in the <xref:System.Collections.ICollection> returned by the <xref:System.Collections.IDictionary.Keys%2A> property.","nodes":[{"pos":[0,282],"content":"The order of the values in the returned <xref:System.Collections.ICollection> object is unspecified, but is guaranteed to be the same order as the corresponding keys in the <xref:System.Collections.ICollection> returned by the <xref:System.Collections.IDictionary.Keys%2A> property.","nodes":[{"content":"The order of the values in the returned <ph id=\"ph1\">&lt;xref:System.Collections.ICollection&gt;</ph> object is unspecified, but is guaranteed to be the same order as the corresponding keys in the <ph id=\"ph2\">&lt;xref:System.Collections.ICollection&gt;</ph> returned by the <ph id=\"ph3\">&lt;xref:System.Collections.IDictionary.Keys%2A&gt;</ph> property.","pos":[0,282],"source":"The order of the values in the returned <xref:System.Collections.ICollection> object is unspecified, but is guaranteed to be the same order as the corresponding keys in the <xref:System.Collections.ICollection> returned by the <xref:System.Collections.IDictionary.Keys%2A> property."}]}],"pos":[36675,36958],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Collections.ICollection\"></xref> object containing the values in the <xref href=\"System.Collections.IDictionary\"></xref> object.","nodes":[{"pos":[0,150],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.ICollection\"&gt;&lt;/xref&gt;</ph> object containing the values in the <ph id=\"ph2\">&lt;xref href=\"System.Collections.IDictionary\"&gt;&lt;/xref&gt;</ph> object.","source":"An <xref href=\"System.Collections.ICollection\"></xref> object containing the values in the <xref href=\"System.Collections.IDictionary\"></xref> object."}],"pos":[37674,37825],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Collections.IDictionary\n  commentId: T:System.Collections.IDictionary\n  id: IDictionary\n  children:\n  - System.Collections.IDictionary.Add(System.Object,System.Object)\n  - System.Collections.IDictionary.Clear\n  - System.Collections.IDictionary.Contains(System.Object)\n  - System.Collections.IDictionary.GetEnumerator\n  - System.Collections.IDictionary.IsFixedSize\n  - System.Collections.IDictionary.IsReadOnly\n  - System.Collections.IDictionary.Item(System.Object)\n  - System.Collections.IDictionary.Keys\n  - System.Collections.IDictionary.Remove(System.Object)\n  - System.Collections.IDictionary.Values\n  langs:\n  - csharp\n  name: IDictionary\n  nameWithType: IDictionary\n  fullName: System.Collections.IDictionary\n  type: Interface\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System.Collections\n  summary: Represents a nongeneric collection of key/value pairs.\n  remarks: \"The <xref:System.Collections.IDictionary> interface is the base interface for nongeneric collections of key/value pairs. For the generic version of this interface, see <xref:System.Collections.Generic.IDictionary%602?displayProperty=fullName>.  \\n  \\n Each element is a key/value pair stored in a <xref:System.Collections.DictionaryEntry> object.  \\n  \\n Each pair must have a unique key. Implementations can vary in whether they allow the key to be null.  The value can be null and does not have to be unique. The <xref:System.Collections.IDictionary> interface allows the contained keys and values to be enumerated, but it does not imply any particular sort order.  \\n  \\n <xref:System.Collections.IDictionary> implementations fall into three categories: read-only, fixed-size, variable-size. A read-only <xref:System.Collections.IDictionary> object cannot be modified. A fixed-size <xref:System.Collections.IDictionary> object does not allow the addition or removal of elements, but does allow the modification of existing elements. A variable-size <xref:System.Collections.IDictionary> object allows the addition, removal, and modification of elements.  \\n  \\n The `foreach` statement of the C# language (`For Each` in Visual Basic) returns an object of the type of the elements in the collection. Since each element of the <xref:System.Collections.IDictionary> object is a key/value pair, the element type is not the type of the key or the type of the value. Instead, the element type is <xref:System.Collections.DictionaryEntry>. For example:  \\n  \\n [!code-cpp[Dictionary#14](~/samples/snippets/cpp/VS_Snippets_CLR/Dictionary/cpp/remarks.cpp#14)]\\n [!code-csharp[Dictionary#14](~/samples/snippets/csharp/VS_Snippets_CLR/Dictionary/CS/remarks.cs#14)]\\n [!code-vb[Dictionary#14](~/samples/snippets/visualbasic/VS_Snippets_CLR/Dictionary/VB/remarks.vb#14)]  \\n  \\n The `foreach` statement is a wrapper around the enumerator, which allows only reading from but not writing to the collection.\"\n  example:\n  - \"The following code example demonstrates how to define a simple dictionary class that implements the <xref:System.Collections.IDictionary> interface.  \\n  \\n [!code-cpp[Dictionary#1](~/samples/snippets/cpp/VS_Snippets_CLR/Dictionary/cpp/Dictionary.cpp#1)]\\n [!code-csharp[Dictionary#1](~/samples/snippets/csharp/VS_Snippets_CLR/Dictionary/CS/Dictionary.cs#1)]\\n [!code-vb[Dictionary#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Dictionary/VB/Dictionary.vb#1)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public interface IDictionary : System.Collections.ICollection\n  derivedClasses:\n  - System.Activities.Presentation.Model.ModelItemDictionary\n  - System.Collections.DictionaryBase\n  - System.Collections.Hashtable\n  - System.Collections.SortedList\n  - System.Collections.Concurrent.ConcurrentDictionary`2\n  - System.Collections.Generic.Dictionary`2\n  - System.Collections.Generic.SortedDictionary`2\n  - System.Collections.Generic.SortedList`2\n  - System.Collections.Immutable.ImmutableDictionary`2.Builder\n  - System.Collections.Immutable.ImmutableDictionary`2\n  - System.Collections.Immutable.ImmutableSortedDictionary`2.Builder\n  - System.Collections.Immutable.ImmutableSortedDictionary`2\n  - System.Collections.ObjectModel.ReadOnlyDictionary`2\n  - System.Collections.Specialized.HybridDictionary\n  - System.Collections.Specialized.IOrderedDictionary\n  - System.Collections.Specialized.ListDictionary\n  - System.Collections.Specialized.OrderedDictionary\n  - System.ComponentModel.PropertyDescriptorCollection\n  - System.Data.Common.DbConnectionStringBuilder\n  - System.DirectoryServices.PropertyCollection\n  - System.Runtime.Remoting.Channels.BaseChannelObjectWithProperties\n  - System.Web.UI.StateBag\n  - System.Web.UI.WebControls.WebParts.PersonalizationDictionary\n  - System.Windows.ResourceDictionary\n  - System.Windows.Markup.XmlnsDictionary\n  - System.Windows.Markup.Localizer.BamlLocalizationDictionary\n  - System.Windows.Media.CharacterMetricsDictionary\n  - System.Windows.Media.LanguageSpecificStringDictionary\n  implements:\n  - System.Collections.ICollection\n  extensionMethods:\n  - System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  - System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  - System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  - System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/IDictionary.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.IDictionary.Add(System.Object,System.Object)\n  commentId: M:System.Collections.IDictionary.Add(System.Object,System.Object)\n  id: Add(System.Object,System.Object)\n  parent: System.Collections.IDictionary\n  langs:\n  - csharp\n  name: Add(Object, Object)\n  nameWithType: IDictionary.Add(Object, Object)\n  fullName: IDictionary.Add(Object, Object)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System.Collections\n  summary: Adds an element with the provided key and value to the <xref href=\"System.Collections.IDictionary\"></xref> object.\n  remarks: \"You can also use the <xref:System.Collections.IDictionary.Item%2A> property to add new elements by setting the value of a key that does not exist in the dictionary (for example, `myCollection[\\\"myNonexistentKey\\\"] = myValue`). However, if the specified key already exists in the dictionary, setting the <xref:System.Collections.IDictionary.Item%2A> property overwrites the old value. In contrast, the <xref:System.Collections.IDictionary.Add%2A> method does not modify existing elements.  \\n  \\n Implementations can vary in whether they allow the key to be `null`.\"\n  example:\n  - \"The following code example demonstrates how to implement the <xref:System.Collections.IDictionary.Add%2A> method. This code example is part of a larger example provided for the <xref:System.Collections.IDictionary> class.  \\n  \\n [!code-cpp[Dictionary#9](~/samples/snippets/cpp/VS_Snippets_CLR/Dictionary/cpp/Dictionary.cpp#9)]\\n [!code-csharp[Dictionary#9](~/samples/snippets/csharp/VS_Snippets_CLR/Dictionary/CS/Dictionary.cs#9)]\\n [!code-vb[Dictionary#9](~/samples/snippets/visualbasic/VS_Snippets_CLR/Dictionary/VB/Dictionary.vb#9)]\"\n  syntax:\n    content: public void Add (object key, object value);\n    parameters:\n    - id: key\n      type: System.Object\n      description: The <xref href=\"System.Object\"></xref> to use as the key of the element to add.\n    - id: value\n      type: System.Object\n      description: The <xref href=\"System.Object\"></xref> to use as the value of the element to add.\n  overload: System.Collections.IDictionary.Add*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>key</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: An element with the same key already exists in the <xref href=\"System.Collections.IDictionary\"></xref> object.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"The <xref href=\\\"System.Collections.IDictionary\\\"></xref> is read-only.  \\n  \\n -or-  \\n  \\n The <xref href=\\\"System.Collections.IDictionary\\\"></xref> has a fixed size.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/IDictionary.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.IDictionary.Clear\n  commentId: M:System.Collections.IDictionary.Clear\n  id: Clear\n  parent: System.Collections.IDictionary\n  langs:\n  - csharp\n  name: Clear()\n  nameWithType: IDictionary.Clear()\n  fullName: IDictionary.Clear()\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System.Collections\n  summary: Removes all elements from the <xref href=\"System.Collections.IDictionary\"></xref> object.\n  remarks: ''\n  example:\n  - \"The following code example demonstrates how to implement the <xref:System.Collections.IDictionary.Clear%2A> method. This code example is part of a larger example provided for the <xref:System.Collections.IDictionary> class.  \\n  \\n [!code-cpp[Dictionary#8](~/samples/snippets/cpp/VS_Snippets_CLR/Dictionary/cpp/Dictionary.cpp#8)]\\n [!code-csharp[Dictionary#8](~/samples/snippets/csharp/VS_Snippets_CLR/Dictionary/CS/Dictionary.cs#8)]\\n [!code-vb[Dictionary#8](~/samples/snippets/visualbasic/VS_Snippets_CLR/Dictionary/VB/Dictionary.vb#8)]\"\n  syntax:\n    content: public void Clear ();\n    parameters: []\n  overload: System.Collections.IDictionary.Clear*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The <xref href=\"System.Collections.IDictionary\"></xref> object is read-only.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/IDictionary.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.IDictionary.Contains(System.Object)\n  commentId: M:System.Collections.IDictionary.Contains(System.Object)\n  id: Contains(System.Object)\n  parent: System.Collections.IDictionary\n  langs:\n  - csharp\n  name: Contains(Object)\n  nameWithType: IDictionary.Contains(Object)\n  fullName: IDictionary.Contains(Object)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System.Collections\n  summary: Determines whether the <xref href=\"System.Collections.IDictionary\"></xref> object contains an element with the specified key.\n  remarks: \"Implementations can vary in whether they allow the key to be `null`.  \\n  \\n Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `item` to determine whether `item` exists. In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection.\"\n  example:\n  - \"The following code example demonstrates how to implement the <xref:System.Collections.IDictionary.Contains%2A> method. This code example is part of a larger example provided for the <xref:System.Collections.IDictionary> class.  \\n  \\n [!code-cpp[Dictionary#5](~/samples/snippets/cpp/VS_Snippets_CLR/Dictionary/cpp/Dictionary.cpp#5)]\\n [!code-csharp[Dictionary#5](~/samples/snippets/csharp/VS_Snippets_CLR/Dictionary/CS/Dictionary.cs#5)]\\n [!code-vb[Dictionary#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/Dictionary/VB/Dictionary.vb#5)]\"\n  syntax:\n    content: public bool Contains (object key);\n    parameters:\n    - id: key\n      type: System.Object\n      description: The key to locate in the <xref href=\"System.Collections.IDictionary\"></xref> object.\n    return:\n      type: System.Boolean\n      description: '`true` if the <xref href=\"System.Collections.IDictionary\"></xref> contains an element with the key; otherwise, `false`.'\n  overload: System.Collections.IDictionary.Contains*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>key</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/IDictionary.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.IDictionary.GetEnumerator\n  commentId: M:System.Collections.IDictionary.GetEnumerator\n  id: GetEnumerator\n  parent: System.Collections.IDictionary\n  langs:\n  - csharp\n  name: GetEnumerator()\n  nameWithType: IDictionary.GetEnumerator()\n  fullName: IDictionary.GetEnumerator()\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System.Collections\n  summary: Returns an <xref href=\"System.Collections.IDictionaryEnumerator\"></xref> object for the <xref href=\"System.Collections.IDictionary\"></xref> object.\n  remarks: \"[Visual Basic, C#]  \\n  \\n The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators.  Therefore, using `foreach` is recommended instead of directly manipulating the enumerator.  \\n  \\n Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.  \\n  \\n Initially, the enumerator is positioned before the first element in the collection. <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.  At this position, the <xref:System.Collections.IEnumerator.Current%2A> property is undefined. Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.  \\n  \\n <xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.  \\n  \\n If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`. When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`. If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined. To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.  \\n  \\n An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.  \\n  \\n The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.\"\n  syntax:\n    content: public System.Collections.IDictionaryEnumerator GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.IDictionaryEnumerator\n      description: An <xref href=\"System.Collections.IDictionaryEnumerator\"></xref> object for the <xref href=\"System.Collections.IDictionary\"></xref> object.\n  overload: System.Collections.IDictionary.GetEnumerator*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/IDictionary.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.IDictionary.IsFixedSize\n  commentId: P:System.Collections.IDictionary.IsFixedSize\n  id: IsFixedSize\n  parent: System.Collections.IDictionary\n  langs:\n  - csharp\n  name: IsFixedSize\n  nameWithType: IDictionary.IsFixedSize\n  fullName: IDictionary.IsFixedSize\n  type: Property\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System.Collections\n  summary: Gets a value indicating whether the <xref href=\"System.Collections.IDictionary\"></xref> object has a fixed size.\n  remarks: \"A collection with a fixed size does not allow the addition or removal of elements after the collection is created, but does allow the modification of existing elements.  \\n  \\n A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements; therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.\"\n  example:\n  - \"The following code example demonstrates how to implement the <xref:System.Collections.IDictionary.IsFixedSize%2A> property. This code example is part of a larger example provided for the <xref:System.Collections.IDictionary> class.  \\n  \\n [!code-cpp[Dictionary#6](~/samples/snippets/cpp/VS_Snippets_CLR/Dictionary/cpp/Dictionary.cpp#6)]\\n [!code-csharp[Dictionary#6](~/samples/snippets/csharp/VS_Snippets_CLR/Dictionary/CS/Dictionary.cs#6)]\\n [!code-vb[Dictionary#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/Dictionary/VB/Dictionary.vb#6)]\"\n  syntax:\n    content: public bool IsFixedSize { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the <xref href=\"System.Collections.IDictionary\"></xref> object has a fixed size; otherwise, `false`.'\n  overload: System.Collections.IDictionary.IsFixedSize*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/IDictionary.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.IDictionary.IsReadOnly\n  commentId: P:System.Collections.IDictionary.IsReadOnly\n  id: IsReadOnly\n  parent: System.Collections.IDictionary\n  langs:\n  - csharp\n  name: IsReadOnly\n  nameWithType: IDictionary.IsReadOnly\n  fullName: IDictionary.IsReadOnly\n  type: Property\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System.Collections\n  summary: Gets a value indicating whether the <xref href=\"System.Collections.IDictionary\"></xref> object is read-only.\n  remarks: A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.\n  example:\n  - \"The following code example demonstrates how to implement the <xref:System.Collections.IDictionary.IsReadOnly%2A> property. This code example is part of a larger example provided for the <xref:System.Collections.IDictionary> class.  \\n  \\n [!code-cpp[Dictionary#4](~/samples/snippets/cpp/VS_Snippets_CLR/Dictionary/cpp/Dictionary.cpp#4)]\\n [!code-csharp[Dictionary#4](~/samples/snippets/csharp/VS_Snippets_CLR/Dictionary/CS/Dictionary.cs#4)]\\n [!code-vb[Dictionary#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/Dictionary/VB/Dictionary.vb#4)]\"\n  syntax:\n    content: public bool IsReadOnly { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the <xref href=\"System.Collections.IDictionary\"></xref> object is read-only; otherwise, `false`.'\n  overload: System.Collections.IDictionary.IsReadOnly*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/IDictionary.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.IDictionary.Item(System.Object)\n  commentId: P:System.Collections.IDictionary.Item(System.Object)\n  id: Item(System.Object)\n  parent: System.Collections.IDictionary\n  langs:\n  - csharp\n  name: Item(Object)\n  nameWithType: IDictionary.Item(Object)\n  fullName: IDictionary.Item(Object)\n  type: Property\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System.Collections\n  summary: Gets or sets the element with the specified key.\n  remarks: \"This property provides the ability to access a specific element in the collection by using the following syntax: `myCollection[key]`.  \\n  \\n You can also use the <xref:System.Collections.IDictionary.Item%2A> property to add new elements by setting the value of a key that does not exist in the dictionary (for example, `myCollection[\\\"myNonexistentKey\\\"] = myValue`). However, if the specified key already exists in the dictionary, setting the <xref:System.Collections.IDictionary.Item%2A> property overwrites the old value. In contrast, the <xref:System.Collections.IDictionary.Add%2A> method does not modify existing elements.  \\n  \\n Implementations can vary in whether they allow the key to be `null`.  \\n  \\n The C# language uses the `this`[this](~/docs/csharp/language-reference/keywords/this.md) keyword to define the indexers instead of implementing the <xref:System.Collections.IDictionary.Item%2A> property. Visual Basic implements <xref:System.Collections.IDictionary.Item%2A> as a default property, which provides the same indexing functionality.\"\n  example:\n  - \"The following code example demonstrates how to implement the <xref:System.Collections.IDictionary.Item%2A> property. This code example is part of a larger example provided for the <xref:System.Collections.IDictionary> class.  \\n  \\n [!code-cpp[Dictionary#13](~/samples/snippets/cpp/VS_Snippets_CLR/Dictionary/cpp/Dictionary.cpp#13)]\\n [!code-csharp[Dictionary#13](~/samples/snippets/csharp/VS_Snippets_CLR/Dictionary/CS/Dictionary.cs#13)]\\n [!code-vb[Dictionary#13](~/samples/snippets/visualbasic/VS_Snippets_CLR/Dictionary/VB/Dictionary.vb#13)]\"\n  syntax:\n    content: public object this[object key] { get; set; }\n    parameters:\n    - id: key\n      type: System.Object\n      description: The key of the element to get or set.\n    return:\n      type: System.Object\n      description: The element with the specified key, or `null` if the key does not exist.\n  overload: System.Collections.IDictionary.Item*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>key</code> is `null`.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"The property is set and the <xref href=\\\"System.Collections.IDictionary\\\"></xref> object is read-only.  \\n  \\n -or-  \\n  \\n The property is set, <code>key</code> does not exist in the collection, and the <xref href=\\\"System.Collections.IDictionary\\\"></xref> has a fixed size.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/IDictionary.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.IDictionary.Keys\n  commentId: P:System.Collections.IDictionary.Keys\n  id: Keys\n  parent: System.Collections.IDictionary\n  langs:\n  - csharp\n  name: Keys\n  nameWithType: IDictionary.Keys\n  fullName: IDictionary.Keys\n  type: Property\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System.Collections\n  summary: Gets an <xref href=\"System.Collections.ICollection\"></xref> object containing the keys of the <xref href=\"System.Collections.IDictionary\"></xref> object.\n  remarks: The order of the keys in the returned <xref:System.Collections.ICollection> object is unspecified, but is guaranteed to be the same order as the corresponding values in the <xref:System.Collections.ICollection> returned by the <xref:System.Collections.IDictionary.Values%2A> property.\n  example:\n  - \"The following code example demonstrates how to implement the <xref:System.Collections.IDictionary.Keys%2A> property. This code example is part of a larger example provided for the <xref:System.Collections.IDictionary> class.  \\n  \\n [!code-cpp[Dictionary#10](~/samples/snippets/cpp/VS_Snippets_CLR/Dictionary/cpp/Dictionary.cpp#10)]\\n [!code-csharp[Dictionary#10](~/samples/snippets/csharp/VS_Snippets_CLR/Dictionary/CS/Dictionary.cs#10)]\\n [!code-vb[Dictionary#10](~/samples/snippets/visualbasic/VS_Snippets_CLR/Dictionary/VB/Dictionary.vb#10)]\"\n  syntax:\n    content: public System.Collections.ICollection Keys { get; }\n    return:\n      type: System.Collections.ICollection\n      description: An <xref href=\"System.Collections.ICollection\"></xref> object containing the keys of the <xref href=\"System.Collections.IDictionary\"></xref> object.\n  overload: System.Collections.IDictionary.Keys*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/IDictionary.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.IDictionary.Remove(System.Object)\n  commentId: M:System.Collections.IDictionary.Remove(System.Object)\n  id: Remove(System.Object)\n  parent: System.Collections.IDictionary\n  langs:\n  - csharp\n  name: Remove(Object)\n  nameWithType: IDictionary.Remove(Object)\n  fullName: IDictionary.Remove(Object)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System.Collections\n  summary: Removes the element with the specified key from the <xref href=\"System.Collections.IDictionary\"></xref> object.\n  remarks: If the <xref:System.Collections.IDictionary> object does not contain an element with the specified key, the <xref:System.Collections.IDictionary> remains unchanged. No exception is thrown.\n  example:\n  - \"The following code example demonstrates how to implement the <xref:System.Collections.IDictionary.Remove%2A> method. This code example is part of a larger example provided for the <xref:System.Collections.IDictionary> class.  \\n  \\n [!code-cpp[Dictionary#7](~/samples/snippets/cpp/VS_Snippets_CLR/Dictionary/cpp/Dictionary.cpp#7)]\\n [!code-csharp[Dictionary#7](~/samples/snippets/csharp/VS_Snippets_CLR/Dictionary/CS/Dictionary.cs#7)]\\n [!code-vb[Dictionary#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/Dictionary/VB/Dictionary.vb#7)]\"\n  syntax:\n    content: public void Remove (object key);\n    parameters:\n    - id: key\n      type: System.Object\n      description: The key of the element to remove.\n  overload: System.Collections.IDictionary.Remove*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>key</code> is `null`.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"The <xref href=\\\"System.Collections.IDictionary\\\"></xref> object is read-only.  \\n  \\n -or-  \\n  \\n The <xref href=\\\"System.Collections.IDictionary\\\"></xref> has a fixed size.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/IDictionary.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.IDictionary.Values\n  commentId: P:System.Collections.IDictionary.Values\n  id: Values\n  parent: System.Collections.IDictionary\n  langs:\n  - csharp\n  name: Values\n  nameWithType: IDictionary.Values\n  fullName: IDictionary.Values\n  type: Property\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System.Collections\n  summary: Gets an <xref href=\"System.Collections.ICollection\"></xref> object containing the values in the <xref href=\"System.Collections.IDictionary\"></xref> object.\n  remarks: The order of the values in the returned <xref:System.Collections.ICollection> object is unspecified, but is guaranteed to be the same order as the corresponding keys in the <xref:System.Collections.ICollection> returned by the <xref:System.Collections.IDictionary.Keys%2A> property.\n  example:\n  - \"The following code example demonstrates how to implement the <xref:System.Collections.IDictionary.Values%2A> property. This code example is part of a larger example provided for the <xref:System.Collections.IDictionary> class.  \\n  \\n [!code-cpp[Dictionary#11](~/samples/snippets/cpp/VS_Snippets_CLR/Dictionary/cpp/Dictionary.cpp#11)]\\n [!code-csharp[Dictionary#11](~/samples/snippets/csharp/VS_Snippets_CLR/Dictionary/CS/Dictionary.cs#11)]\\n [!code-vb[Dictionary#11](~/samples/snippets/visualbasic/VS_Snippets_CLR/Dictionary/VB/Dictionary.vb#11)]\"\n  syntax:\n    content: public System.Collections.ICollection Values { get; }\n    return:\n      type: System.Collections.ICollection\n      description: An <xref href=\"System.Collections.ICollection\"></xref> object containing the values in the <xref href=\"System.Collections.IDictionary\"></xref> object.\n  overload: System.Collections.IDictionary.Values*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/IDictionary.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\nreferences:\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.NotSupportedException\n  parent: System\n  isExternal: false\n  name: NotSupportedException\n  nameWithType: NotSupportedException\n  fullName: System.NotSupportedException\n- uid: System.Collections.IDictionary.Add(System.Object,System.Object)\n  parent: System.Collections.IDictionary\n  isExternal: false\n  name: Add(Object, Object)\n  nameWithType: IDictionary.Add(Object, Object)\n  fullName: IDictionary.Add(Object, Object)\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Collections.IDictionary.Clear\n  parent: System.Collections.IDictionary\n  isExternal: false\n  name: Clear()\n  nameWithType: IDictionary.Clear()\n  fullName: IDictionary.Clear()\n- uid: System.Collections.IDictionary.Contains(System.Object)\n  parent: System.Collections.IDictionary\n  isExternal: false\n  name: Contains(Object)\n  nameWithType: IDictionary.Contains(Object)\n  fullName: IDictionary.Contains(Object)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Collections.IDictionary.GetEnumerator\n  parent: System.Collections.IDictionary\n  isExternal: false\n  name: GetEnumerator()\n  nameWithType: IDictionary.GetEnumerator()\n  fullName: IDictionary.GetEnumerator()\n- uid: System.Collections.IDictionaryEnumerator\n  parent: System.Collections\n  isExternal: false\n  name: IDictionaryEnumerator\n  nameWithType: IDictionaryEnumerator\n  fullName: System.Collections.IDictionaryEnumerator\n- uid: System.Collections.IDictionary.IsFixedSize\n  parent: System.Collections.IDictionary\n  isExternal: false\n  name: IsFixedSize\n  nameWithType: IDictionary.IsFixedSize\n  fullName: IDictionary.IsFixedSize\n- uid: System.Collections.IDictionary.IsReadOnly\n  parent: System.Collections.IDictionary\n  isExternal: false\n  name: IsReadOnly\n  nameWithType: IDictionary.IsReadOnly\n  fullName: IDictionary.IsReadOnly\n- uid: System.Collections.IDictionary.Item(System.Object)\n  parent: System.Collections.IDictionary\n  isExternal: false\n  name: Item(Object)\n  nameWithType: IDictionary.Item(Object)\n  fullName: IDictionary.Item(Object)\n- uid: System.Collections.IDictionary.Keys\n  parent: System.Collections.IDictionary\n  isExternal: false\n  name: Keys\n  nameWithType: IDictionary.Keys\n  fullName: IDictionary.Keys\n- uid: System.Collections.ICollection\n  parent: System.Collections\n  isExternal: false\n  name: ICollection\n  nameWithType: ICollection\n  fullName: System.Collections.ICollection\n- uid: System.Collections.IDictionary.Remove(System.Object)\n  parent: System.Collections.IDictionary\n  isExternal: false\n  name: Remove(Object)\n  nameWithType: IDictionary.Remove(Object)\n  fullName: IDictionary.Remove(Object)\n- uid: System.Collections.IDictionary.Values\n  parent: System.Collections.IDictionary\n  isExternal: false\n  name: Values\n  nameWithType: IDictionary.Values\n  fullName: IDictionary.Values\n- uid: System.Collections.IDictionary.Add*\n  parent: System.Collections.IDictionary\n  isExternal: false\n  name: Add\n  nameWithType: IDictionary.Add\n  fullName: IDictionary.Add\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/IDictionary.xml\n- uid: System.Collections.IDictionary.Clear*\n  parent: System.Collections.IDictionary\n  isExternal: false\n  name: Clear\n  nameWithType: IDictionary.Clear\n  fullName: IDictionary.Clear\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/IDictionary.xml\n- uid: System.Collections.IDictionary.Contains*\n  parent: System.Collections.IDictionary\n  isExternal: false\n  name: Contains\n  nameWithType: IDictionary.Contains\n  fullName: IDictionary.Contains\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/IDictionary.xml\n- uid: System.Collections.IDictionary.GetEnumerator*\n  parent: System.Collections.IDictionary\n  isExternal: false\n  name: GetEnumerator\n  nameWithType: IDictionary.GetEnumerator\n  fullName: IDictionary.GetEnumerator\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/IDictionary.xml\n- uid: System.Collections.IDictionary.IsFixedSize*\n  parent: System.Collections.IDictionary\n  isExternal: false\n  name: IsFixedSize\n  nameWithType: IDictionary.IsFixedSize\n  fullName: IDictionary.IsFixedSize\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/IDictionary.xml\n- uid: System.Collections.IDictionary.IsReadOnly*\n  parent: System.Collections.IDictionary\n  isExternal: false\n  name: IsReadOnly\n  nameWithType: IDictionary.IsReadOnly\n  fullName: IDictionary.IsReadOnly\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/IDictionary.xml\n- uid: System.Collections.IDictionary.Item*\n  parent: System.Collections.IDictionary\n  isExternal: false\n  name: Item\n  nameWithType: IDictionary.Item\n  fullName: IDictionary.Item\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/IDictionary.xml\n- uid: System.Collections.IDictionary.Keys*\n  parent: System.Collections.IDictionary\n  isExternal: false\n  name: Keys\n  nameWithType: IDictionary.Keys\n  fullName: IDictionary.Keys\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/IDictionary.xml\n- uid: System.Collections.IDictionary.Remove*\n  parent: System.Collections.IDictionary\n  isExternal: false\n  name: Remove\n  nameWithType: IDictionary.Remove\n  fullName: IDictionary.Remove\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/IDictionary.xml\n- uid: System.Collections.IDictionary.Values*\n  parent: System.Collections.IDictionary\n  isExternal: false\n  name: Values\n  nameWithType: IDictionary.Values\n  fullName: IDictionary.Values\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/IDictionary.xml\n- uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Cast<TResult>(IEnumerable)\n  nameWithType: Enumerable.Cast<TResult>(IEnumerable)\n  fullName: Enumerable.Cast<TResult>(IEnumerable)\n- uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: OfType<TResult>(IEnumerable)\n  nameWithType: Enumerable.OfType<TResult>(IEnumerable)\n  fullName: Enumerable.OfType<TResult>(IEnumerable)\n- uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  parent: System.Linq.ParallelEnumerable\n  isExternal: false\n  name: AsParallel(IEnumerable)\n  nameWithType: ParallelEnumerable.AsParallel(IEnumerable)\n  fullName: ParallelEnumerable.AsParallel(IEnumerable)\n- uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: AsQueryable(IEnumerable)\n  nameWithType: Queryable.AsQueryable(IEnumerable)\n  fullName: Queryable.AsQueryable(IEnumerable)\n"}