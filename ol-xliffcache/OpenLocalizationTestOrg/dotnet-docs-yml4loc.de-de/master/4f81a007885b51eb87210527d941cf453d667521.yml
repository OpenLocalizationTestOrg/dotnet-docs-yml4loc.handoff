### YamlMime:ManagedReference
items:
- uid: System.Array
  commentId: T:System.Array
  id: Array
  children:
  - System.Array.AsReadOnly``1(``0[])
  - System.Array.BinarySearch(System.Array,System.Object)
  - System.Array.BinarySearch(System.Array,System.Object,System.Collections.IComparer)
  - System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)
  - System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object,System.Collections.IComparer)
  - System.Array.BinarySearch``1(``0[],``0)
  - System.Array.BinarySearch``1(``0[],``0,System.Collections.Generic.IComparer{``0})
  - System.Array.BinarySearch``1(``0[],System.Int32,System.Int32,``0)
  - System.Array.BinarySearch``1(``0[],System.Int32,System.Int32,``0,System.Collections.Generic.IComparer{``0})
  - System.Array.Clear(System.Array,System.Int32,System.Int32)
  - System.Array.Clone
  - System.Array.ConstrainedCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)
  - System.Array.ConvertAll``2(``0[],System.Converter{``0,``1})
  - System.Array.Copy(System.Array,System.Int64,System.Array,System.Int64,System.Int64)
  - System.Array.Copy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)
  - System.Array.Copy(System.Array,System.Array,System.Int64)
  - System.Array.Copy(System.Array,System.Array,System.Int32)
  - System.Array.CopyTo(System.Array,System.Int32)
  - System.Array.CopyTo(System.Array,System.Int64)
  - System.Array.CreateInstance(System.Type,System.Int32)
  - System.Array.CreateInstance(System.Type,System.Int32[])
  - System.Array.CreateInstance(System.Type,System.Int64[])
  - System.Array.CreateInstance(System.Type,System.Int32,System.Int32)
  - System.Array.CreateInstance(System.Type,System.Int32[],System.Int32[])
  - System.Array.CreateInstance(System.Type,System.Int32,System.Int32,System.Int32)
  - System.Array.Empty``1
  - System.Array.Exists``1(``0[],System.Predicate{``0})
  - System.Array.Fill``1(``0[],``0)
  - System.Array.Fill``1(``0[],``0,System.Int32,System.Int32)
  - System.Array.Find``1(``0[],System.Predicate{``0})
  - System.Array.FindAll``1(``0[],System.Predicate{``0})
  - System.Array.FindIndex``1(``0[],System.Predicate{``0})
  - System.Array.FindIndex``1(``0[],System.Int32,System.Predicate{``0})
  - System.Array.FindIndex``1(``0[],System.Int32,System.Int32,System.Predicate{``0})
  - System.Array.FindLast``1(``0[],System.Predicate{``0})
  - System.Array.FindLastIndex``1(``0[],System.Predicate{``0})
  - System.Array.FindLastIndex``1(``0[],System.Int32,System.Predicate{``0})
  - System.Array.FindLastIndex``1(``0[],System.Int32,System.Int32,System.Predicate{``0})
  - System.Array.ForEach``1(``0[],System.Action{``0})
  - System.Array.GetEnumerator
  - System.Array.GetLength(System.Int32)
  - System.Array.GetLongLength(System.Int32)
  - System.Array.GetLowerBound(System.Int32)
  - System.Array.GetUpperBound(System.Int32)
  - System.Array.GetValue(System.Int64,System.Int64,System.Int64)
  - System.Array.GetValue(System.Int32,System.Int32,System.Int32)
  - System.Array.GetValue(System.Int64,System.Int64)
  - System.Array.GetValue(System.Int32,System.Int32)
  - System.Array.GetValue(System.Int32)
  - System.Array.GetValue(System.Int64)
  - System.Array.GetValue(System.Int32[])
  - System.Array.GetValue(System.Int64[])
  - System.Array.IndexOf(System.Array,System.Object)
  - System.Array.IndexOf(System.Array,System.Object,System.Int32)
  - System.Array.IndexOf(System.Array,System.Object,System.Int32,System.Int32)
  - System.Array.IndexOf``1(``0[],``0,System.Int32,System.Int32)
  - System.Array.IndexOf``1(``0[],``0)
  - System.Array.IndexOf``1(``0[],``0,System.Int32)
  - System.Array.Initialize
  - System.Array.IsFixedSize
  - System.Array.IsReadOnly
  - System.Array.IsSynchronized
  - System.Array.LastIndexOf(System.Array,System.Object)
  - System.Array.LastIndexOf(System.Array,System.Object,System.Int32)
  - System.Array.LastIndexOf(System.Array,System.Object,System.Int32,System.Int32)
  - System.Array.LastIndexOf``1(``0[],``0)
  - System.Array.LastIndexOf``1(``0[],``0,System.Int32)
  - System.Array.LastIndexOf``1(``0[],``0,System.Int32,System.Int32)
  - System.Array.Length
  - System.Array.LongLength
  - System.Array.Rank
  - System.Array.Resize``1(``0[]@,System.Int32)
  - System.Array.Reverse(System.Array,System.Int32,System.Int32)
  - System.Array.Reverse(System.Array)
  - System.Array.Reverse``1(``0[])
  - System.Array.Reverse``1(``0[],System.Int32,System.Int32)
  - System.Array.SetValue(System.Object,System.Int32)
  - System.Array.SetValue(System.Object,System.Int32[])
  - System.Array.SetValue(System.Object,System.Int64)
  - System.Array.SetValue(System.Object,System.Int64[])
  - System.Array.SetValue(System.Object,System.Int32,System.Int32)
  - System.Array.SetValue(System.Object,System.Int64,System.Int64)
  - System.Array.SetValue(System.Object,System.Int32,System.Int32,System.Int32)
  - System.Array.SetValue(System.Object,System.Int64,System.Int64,System.Int64)
  - System.Array.Sort(System.Array,System.Int32,System.Int32,System.Collections.IComparer)
  - System.Array.Sort(System.Array,System.Array,System.Int32,System.Int32,System.Collections.IComparer)
  - System.Array.Sort(System.Array,System.Int32,System.Int32)
  - System.Array.Sort(System.Array,System.Array,System.Int32,System.Int32)
  - System.Array.Sort(System.Array,System.Collections.IComparer)
  - System.Array.Sort(System.Array,System.Array,System.Collections.IComparer)
  - System.Array.Sort(System.Array,System.Array)
  - System.Array.Sort(System.Array)
  - System.Array.Sort``1(``0[])
  - System.Array.Sort``1(``0[],System.Collections.Generic.IComparer{``0})
  - System.Array.Sort``1(``0[],System.Comparison{``0})
  - System.Array.Sort``1(``0[],System.Int32,System.Int32)
  - System.Array.Sort``1(``0[],System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})
  - System.Array.Sort``2(``0[],``1[])
  - System.Array.Sort``2(``0[],``1[],System.Collections.Generic.IComparer{``0})
  - System.Array.Sort``2(``0[],``1[],System.Int32,System.Int32)
  - System.Array.Sort``2(``0[],``1[],System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})
  - System.Array.SyncRoot
  - System.Array.TrueForAll``1(``0[],System.Predicate{``0})
  - System.Array.System#Collections#ICollection#Count
  - System.Array.System#Collections#ICollection#IsSynchronized
  - System.Array.System#Collections#ICollection#SyncRoot
  - System.Array.System#Collections#IList#Add(System.Object)
  - System.Array.System#Collections#IList#Clear
  - System.Array.System#Collections#IList#Contains(System.Object)
  - System.Array.System#Collections#IList#IndexOf(System.Object)
  - System.Array.System#Collections#IList#Insert(System.Int32,System.Object)
  - System.Array.System#Collections#IList#IsFixedSize
  - System.Array.System#Collections#IList#IsReadOnly
  - System.Array.System#Collections#IList#Item(System.Int32)
  - System.Array.System#Collections#IList#Remove(System.Object)
  - System.Array.System#Collections#IList#RemoveAt(System.Int32)
  - System.Array.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)
  - System.Array.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)
  - System.Array.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)
  langs:
  - csharp
  name: Array
  nameWithType: Array
  fullName: System.Array
  type: Class
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Provides methods for creating, manipulating, searching, and sorting arrays, thereby serving as the base class for all arrays in the common language runtime.
  remarks: "> [!NOTE]\n>  To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/array.cs#156e066ecc4ccedf). You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/).  \n  \n The <xref:System.Array> class is not part of the <xref:System.Collections> namespaces. However, it is still considered a collection because it is based on the <xref:System.Collections.IList> interface.  \n  \n The <xref:System.Array> class is the base class for language implementations that support arrays. However, only the system and compilers can derive explicitly from the <xref:System.Array> class. Users should employ the array constructs provided by the language.  \n  \n An element is a value in an <xref:System.Array>. The length of an <xref:System.Array> is the total number of elements it can contain. The lower bound of an <xref:System.Array> is the index of its first element. An <xref:System.Array> can have any lower bound, but it has a lower bound of zero by default. A different lower bound can be defined when creating an instance of the <xref:System.Array> class using <xref:System.Array.CreateInstance%2A>.A multidimensional <xref:System.Array> can have different bounds for each dimension. An array can have a maximum of 32 dimensions.  \n  \n Unlike the classes in the <xref:System.Collections> namespaces, <xref:System.Array> has a fixed capacity. To increase the capacity, you must create a new <xref:System.Array> object with the required capacity, copy the elements from the old <xref:System.Array> object to the new one, and delete the old <xref:System.Array>.  \n  \n By default, the maximum size of an <xref:System.Array> is 2 gigabytes (GB). In a 64-bit environment, you can avoid the size restriction by setting the `enabled` attribute of the [gcAllowVeryLargeObjects](~/docs/framework/configure-apps/file-schema/runtime/gcallowverylargeobjects-element.md) configuration element to `true` in the run-time environment. However, the array will still be limited to a total of 4 billion elements, and to a maximum index of 0X7FEFFFFF in any given dimension (0X7FFFFFC7 for byte arrays and arrays of single-byte structures).  \n  \n Single-dimensional arrays implement the <xref:System.Collections.Generic.IList%601?displayProperty=fullName>, <xref:System.Collections.Generic.ICollection%601?displayProperty=fullName>, <xref:System.Collections.Generic.IEnumerable%601?displayProperty=fullName>, <xref:System.Collections.Generic.IReadOnlyList%601?displayProperty=fullName> and <xref:System.Collections.Generic.IReadOnlyCollection%601?displayProperty=fullName> generic interfaces. The implementations are provided to arrays at run time, and as a result, the generic interfaces do not appear in the declaration syntax for the <xref:System.Array> class. In addition,  there are no reference topics for interface members that are accessible only by casting an array to the generic interface type (explicit interface implementations). The key thing to be aware of when you cast an array to one of these interfaces is that members which add, insert, or remove elements throw <xref:System.NotSupportedException>.  \n  \n <xref:System.Type> objects provide information about array type declarations. <xref:System.Array> objects with the same array type share the same <xref:System.Type> object.  \n  \n <xref:System.Type.IsArray%2A?displayProperty=fullName> and <xref:System.Type.GetElementType%2A?displayProperty=fullName> might not return the expected results with <xref:System.Array> because if an array is cast to the type <xref:System.Array>, the result is an object, not an array. That is, `typeof(System.Array).IsArray` returns `false`, and `typeof(System.Array).GetElementType` returns `null`.  \n  \n The <xref:System.Array.Copy%2A?displayProperty=fullName> method copies elements not only between arrays of the same type but also between standard arrays of different types; it handles type casting automatically.  \n  \n Some methods, such as <xref:System.Array.CreateInstance%2A>, <xref:System.Array.Copy%2A>, <xref:System.Array.CopyTo%2A>, <xref:System.Array.GetValue%2A>, and <xref:System.Array.SetValue%2A>, provide overloads that accept 64-bit integers as parameters to accommodate large capacity arrays. <xref:System.Array.LongLength%2A> and <xref:System.Array.GetLongLength%2A> return 64-bit integers indicating the length of the array.  \n  \n The <xref:System.Array> is not guaranteed to be sorted.  You must sort the <xref:System.Array> prior to performing operations (such as <xref:System.Array.BinarySearch%2A>) that require the <xref:System.Array> to be sorted.  \n  \n Using an <xref:System.Array> object of pointers in native code is not supported and will throw a <xref:System.NotSupportedException> for several methods."
  example:
  - "The following code example shows how <xref:System.Array.Copy%2A?displayProperty=fullName> copies elements between an array of type integer and an array of type <xref:System.Object>.  \n  \n [!code-cpp[Classic Array Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Array Example/CPP/source.cpp#1)]\n [!code-csharp[Classic Array Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Array Example/CS/source.cs#1)]\n [!code-vb[Classic Array Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Array Example/VB/source.vb#1)]  \n  \n The following code example creates and initializes an <xref:System.Array> and displays its properties and its elements.  \n  \n [!code-cpp[Classic Array Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Array Example/CPP/source3.cpp#2)]\n [!code-csharp[Classic Array Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Array Example/CS/source3.cs#2)]\n [!code-vb[Classic Array Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Array Example/VB/source3.vb#2)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public abstract class Array : ICloneable, System.Collections.IList, System.Collections.IStructuralComparable, System.Collections.IStructuralEquatable
  inheritance:
  - System.Object
  implements:
  - System.Collections.IList
  - System.Collections.IStructuralComparable
  - System.Collections.IStructuralEquatable
  - System.ICloneable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)
  - System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)
  - System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)
  - System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)
  - System.SpanExtensions.AsSpan``1(``0[])
  - System.SpanExtensions.CopyTo``1(``0[],System.Span{``0})
  attributes:
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Array.AsReadOnly``1(``0[])
  commentId: M:System.Array.AsReadOnly``1(``0[])
  id: AsReadOnly``1(``0[])
  parent: System.Array
  langs:
  - csharp
  name: AsReadOnly<T>(T[])
  nameWithType: Array.AsReadOnly<T>(T[])
  fullName: Array.AsReadOnly<T>(T[])
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Returns a read-only wrapper for the specified array.
  remarks: "To prevent any modifications to the array, expose the array only through this wrapper.  \n  \n A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.  \n  \n This method is an O(1) operation."
  example:
  - "The following example wraps an array in a read-only <xref:System.Collections.ObjectModel.ReadOnlyCollection%601>.  \n  \n [!code-cpp[System.Array.AsReadOnly#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Array.AsReadOnly/CPP/arrayasreadonly.cpp#1)]\n [!code-csharp[System.Array.AsReadOnly#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Array.AsReadOnly/CS/arrayasreadonly.cs#1)]\n [!code-vb[System.Array.AsReadOnly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Array.AsReadOnly/VB/arrayasreadonly.vb#1)]"
  syntax:
    content: public static System.Collections.ObjectModel.ReadOnlyCollection<T> AsReadOnly<T> (T[] array);
    parameters:
    - id: array
      type: T[]
      description: The one-dimensional, zero-based array to wrap in a read-only <xref href="System.Collections.ObjectModel.ReadOnlyCollection`1"></xref> wrapper.
    typeParameters:
    - id: T
      description: The type of the elements of the array.
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection`1
      description: A read-only <xref href="System.Collections.ObjectModel.ReadOnlyCollection`1"></xref> wrapper for the specified array.
  overload: System.Array.AsReadOnly``1*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>array</code> is `null`.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Array.BinarySearch(System.Array,System.Object)
  commentId: M:System.Array.BinarySearch(System.Array,System.Object)
  id: BinarySearch(System.Array,System.Object)
  parent: System.Array
  langs:
  - csharp
  name: BinarySearch(Array, Object)
  nameWithType: Array.BinarySearch(Array, Object)
  fullName: Array.BinarySearch(Array, Object)
  type: Method
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Searches an entire one-dimensional sorted array for a specific element, using the <xref href="System.IComparable"></xref> interface implemented by each element of the array and by the specified object.
  remarks: "This method does not support searching arrays that contain negative indexes. `array` must be sorted before calling this method.  \n  \n If the <xref:System.Array> does not contain the specified value, the method returns a negative integer. You can apply the bitwise complement operator (~ in C#, `Not` in Visual Basic) to the negative result  to produce an index. If this index is one greater than the upper bound of the array, there are no elements larger than `value` in the array. Otherwise, it is the index of the first element that is larger than `value`.  \n  \n Either `value` or every element of `array` must implement the <xref:System.IComparable> interface, which is used for comparisons. The elements of `array` must already be sorted in increasing value according to the sort order defined by the <xref:System.IComparable> implementation; otherwise, the result might be incorrect.  \n  \n> [!NOTE]\n>  If`value` does not implement the <xref:System.IComparable> interface, the elements of `array` are not tested for <xref:System.IComparable> before the search begins. An exception is thrown if the search encounters an element that does not implement <xref:System.IComparable>.  \n  \n Duplicate elements are allowed. If the <xref:System.Array> contains more than one element equal to `value`, the method returns the index of only one of the occurrences, and not necessarily the first one.  \n  \n `null` can always be compared with any other reference type; therefore, comparisons with `null` do not generate an exception.  \n  \n> [!NOTE]\n>  For every element tested, `value` is passed to the appropriate <xref:System.IComparable> implementation, even if `value` is `null`. That is, the <xref:System.IComparable> implementation determines how a given element compares to `null`.  \n  \n This method is an O(log `n`) operation, where `n` is the <xref:System.Array.Length%2A> of `array`."
  example:
  - "The following code example shows how to use <xref:System.Array.BinarySearch%2A> to locate a specific object in an <xref:System.Array>.  \n  \n> [!NOTE]\n>  The array is created with its elements in ascending sort order. The <xref:System.Array.BinarySearch%2A> method requires the array to be sorted in ascending order.  \n  \n [!code-cpp[Classic Array.BinarySearch Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Array.BinarySearch Example/CPP/source.cpp#1)]\n [!code-csharp[Classic Array.BinarySearch Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Array.BinarySearch Example/CS/source.cs#1)]\n [!code-vb[Classic Array.BinarySearch Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Array.BinarySearch Example/VB/source.vb#1)]"
  syntax:
    content: public static int BinarySearch (Array array, object value);
    parameters:
    - id: array
      type: System.Array
      description: The sorted one-dimensional <xref href="System.Array"></xref> to search.
    - id: value
      type: System.Object
      description: The object to search for.
    return:
      type: System.Int32
      description: The index of the specified <code>value</code> in the specified <code>array</code>, if <code>value</code> is found; otherwise, a negative number. If <code>value</code> is not found and <code>value</code> is less than one or more elements in <code>array</code>, the negative number returned is the bitwise complement of the index of the first element that is larger than <code>value</code>. If <code>value</code> is not found and <code>value</code> is greater than all elements in <code>array</code>, the negative number returned is the bitwise complement of (the index of the last element plus 1). If this method is called with a non-sorted <code>array</code>, the return value can be incorrect and a negative number could be returned, even if <code>value</code> is present in <code>array</code>.
  overload: System.Array.BinarySearch*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>array</code> is `null`.
  - type: System.RankException
    commentId: T:System.RankException
    description: <code>array</code> is multidimensional.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>value</code> is of a type that is not compatible with the elements of <code>array</code>.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: <code>value</code> does not implement the <xref href="System.IComparable"></xref> interface, and the search encounters an element that does not implement the <xref href="System.IComparable"></xref> interface.
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Array.BinarySearch(System.Array,System.Object,System.Collections.IComparer)
  commentId: M:System.Array.BinarySearch(System.Array,System.Object,System.Collections.IComparer)
  id: BinarySearch(System.Array,System.Object,System.Collections.IComparer)
  parent: System.Array
  langs:
  - csharp
  name: BinarySearch(Array, Object, IComparer)
  nameWithType: Array.BinarySearch(Array, Object, IComparer)
  fullName: Array.BinarySearch(Array, Object, IComparer)
  type: Method
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Searches an entire one-dimensional sorted array for a value using the specified <xref href="System.Collections.IComparer"></xref> interface.
  remarks: "This method does not support searching arrays that contain negative indexes. `array` must be sorted before calling this method.  \n  \n If the <xref:System.Array> does not contain the specified value, the method returns a negative integer. You can apply the bitwise complement operator (~ in C#, `Not` in Visual Basic) to the negative result  to produce an index. If this index is one greater than the upper bound of the array, there are no elements larger than `value` in the array. Otherwise, it is the index of the first element that is larger than `value`.  \n  \n The comparer customizes how the elements are compared. For example, you can use a <xref:System.Collections.CaseInsensitiveComparer?displayProperty=fullName> as the comparer to perform case-insensitive string searches.  \n  \n If `comparer` is not `null`, the elements of `array` are compared to the specified value using the specified <xref:System.Collections.IComparer> implementation. The elements of `array` must already be sorted in increasing value according to the sort order defined by `comparer`; otherwise, the result might be incorrect.  \n  \n If`comparer` is `null`, the comparison is done using the <xref:System.IComparable> implementation provided by the element itself or by the specified value. The elements of `array` must already be sorted in increasing value according to the sort order defined by the <xref:System.IComparable> implementation; otherwise, the result might be incorrect.  \n  \n> [!NOTE]\n>  If `comparer` is `null` and `value` does not implement the <xref:System.IComparable> interface, the elements of `array` are not tested for <xref:System.IComparable> before the search begins. An exception is thrown if the search encounters an element that does not implement <xref:System.IComparable>.  \n  \n Duplicate elements are allowed. If the <xref:System.Array> contains more than one element equal to `value`, the method returns the index of only one of the occurrences, and not necessarily the first one.  \n  \n `null` can always be compared with any other reference type; therefore, comparisons with `null` do not generate an exception.  \n  \n> [!NOTE]\n>  For every element tested, `value` is passed to the appropriate <xref:System.IComparable> implementation, even if `value` is `null`. That is, the <xref:System.IComparable> implementation determines how a given element compares to `null`.  \n  \n This method is an O(log `n`) operation, where `n` is the <xref:System.Array.Length%2A> of `array`."
  syntax:
    content: public static int BinarySearch (Array array, object value, System.Collections.IComparer comparer);
    parameters:
    - id: array
      type: System.Array
      description: The sorted one-dimensional <xref href="System.Array"></xref> to search.
    - id: value
      type: System.Object
      description: The object to search for.
    - id: comparer
      type: System.Collections.IComparer
      description: "The <xref href=\"System.Collections.IComparer\"></xref> implementation to use when comparing elements.  \n  \n -or-  \n  \n `null` to use the <xref href=\"System.IComparable\"></xref> implementation of each element."
    return:
      type: System.Int32
      description: The index of the specified <code>value</code> in the specified <code>array</code>, if <code>value</code> is found; otherwise, a negative number. If <code>value</code> is not found and <code>value</code> is less than one or more elements in <code>array</code>, the negative number returned is the bitwise complement of the index of the first element that is larger than <code>value</code>. If <code>value</code> is not found and <code>value</code> is greater than all elements in <code>array</code>, the negative number returned is the bitwise complement of (the index of the last element plus 1). If this method is called with a non-sorted <code>array</code>, the return value can be incorrect and a negative number could be returned, even if <code>value</code> is present in <code>array</code>.
  overload: System.Array.BinarySearch*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>array</code> is `null`.
  - type: System.RankException
    commentId: T:System.RankException
    description: <code>array</code> is multidimensional.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>comparer</code> is `null`, and <code>value</code> is of a type that is not compatible with the elements of <code>array</code>.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: <code>comparer</code> is `null`, <code>value</code> does not implement the <xref href="System.IComparable"></xref> interface, and the search encounters an element that does not implement the <xref href="System.IComparable"></xref> interface.
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)
  commentId: M:System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)
  id: BinarySearch(System.Array,System.Int32,System.Int32,System.Object)
  parent: System.Array
  langs:
  - csharp
  name: BinarySearch(Array, Int32, Int32, Object)
  nameWithType: Array.BinarySearch(Array, Int32, Int32, Object)
  fullName: Array.BinarySearch(Array, Int32, Int32, Object)
  type: Method
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Searches a range of elements in a one-dimensional sorted array for a value, using the <xref href="System.IComparable"></xref> interface implemented by each element of the array and by the specified value.
  remarks: "This method does not support searching arrays that contain negative indexes. `array` must be sorted before calling this method.  \n  \n If the <xref:System.Array> does not contain the specified value, the method returns a negative integer. You can apply the bitwise complement operator (~ in C#, `Not` in Visual Basic) to the negative result to produce an index. If this index is one greater than the upper bound of the array, there are no elements larger than `value` in the array. Otherwise, it is the index of the first element that is larger than `value`.  \n  \n Either `value` or every element of `array` must implement the <xref:System.IComparable> interface, which is used for comparisons. The elements of `array` must already be sorted in increasing value according to the sort order defined by the <xref:System.IComparable> implementation; otherwise, the result might be incorrect.  \n  \n> [!NOTE]\n>  If `value` does not implement the <xref:System.IComparable> interface, the elements of `array` are not tested for <xref:System.IComparable> before the search begins. An exception is thrown if the search encounters an element that does not implement <xref:System.IComparable>.  \n  \n Duplicate elements are allowed. If the <xref:System.Array> contains more than one element equal to `value`, the method returns the index of only one of the occurrences, and not necessarily the first one.  \n  \n `null` can always be compared with any other reference type; therefore, comparisons with `null` do not generate an exception.  \n  \n> [!NOTE]\n>  For every element tested, `value` is passed to the appropriate <xref:System.IComparable> implementation, even if `value` is `null`. That is, the <xref:System.IComparable> implementation determines how a given element compares to `null`.  \n  \n This method is an O(log `n`) operation, where `n` is `length`."
  syntax:
    content: public static int BinarySearch (Array array, int index, int length, object value);
    parameters:
    - id: array
      type: System.Array
      description: The sorted one-dimensional <xref href="System.Array"></xref> to search.
    - id: index
      type: System.Int32
      description: The starting index of the range to search.
    - id: length
      type: System.Int32
      description: The length of the range to search.
    - id: value
      type: System.Object
      description: The object to search for.
    return:
      type: System.Int32
      description: The index of the specified <code>value</code> in the specified <code>array</code>, if <code>value</code> is found; otherwise, a negative number. If <code>value</code> is not found and <code>value</code> is less than one or more elements in <code>array</code>, the negative number returned is the bitwise complement of the index of the first element that is larger than <code>value</code>. If <code>value</code> is not found and <code>value</code> is greater than all elements in <code>array</code>, the negative number returned is the bitwise complement of (the index of the last element plus 1). If this method is called with a non-sorted <code>array</code>, the return value can be incorrect and a negative number could be returned, even if <code>value</code> is present in <code>array</code>.
  overload: System.Array.BinarySearch*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>array</code> is `null`.
  - type: System.RankException
    commentId: T:System.RankException
    description: <code>array</code> is multidimensional.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code> is less than the lower bound of <code>array</code>.  \n  \n -or-  \n  \n <code>length</code> is less than zero."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>index</code> and <code>length</code> do not specify a valid range in <code>array</code>.  \n  \n -or-  \n  \n <code>value</code> is of a type that is not compatible with the elements of <code>array</code>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: <code>value</code> does not implement the <xref href="System.IComparable"></xref> interface, and the search encounters an element that does not implement the <xref href="System.IComparable"></xref> interface.
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object,System.Collections.IComparer)
  commentId: M:System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object,System.Collections.IComparer)
  id: BinarySearch(System.Array,System.Int32,System.Int32,System.Object,System.Collections.IComparer)
  parent: System.Array
  langs:
  - csharp
  name: BinarySearch(Array, Int32, Int32, Object, IComparer)
  nameWithType: Array.BinarySearch(Array, Int32, Int32, Object, IComparer)
  fullName: Array.BinarySearch(Array, Int32, Int32, Object, IComparer)
  type: Method
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Searches a range of elements in a one-dimensional sorted array for a value, using the specified <xref href="System.Collections.IComparer"></xref> interface.
  remarks: "This method does not support searching arrays that contain negative indexes. `array` must be sorted before calling this method.  \n  \n If the <xref:System.Array> does not contain the specified value, the method returns a negative integer. You can apply the bitwise complement operator (~ in C#, `Not` in Visual Basic) to the negative result  to produce an index. If this index is one greater than the upper bound of the array, there are no elements larger than `value` in the array. Otherwise, it is the index of the first element that is larger than `value`.  \n  \n The comparer customizes how the elements are compared. For example, you can use a <xref:System.Collections.CaseInsensitiveComparer?displayProperty=fullName> as the comparer to perform case-insensitive string searches.  \n  \n If `comparer` is not `null`, the elements of `array` are compared to the specified value using the specified <xref:System.Collections.IComparer> implementation. The elements of `array` must already be sorted in increasing value according to the sort order defined by `comparer`; otherwise, the result might be incorrect.  \n  \n If `comparer` is `null`, the comparison is done using the <xref:System.IComparable> implementation provided by the element itself or by the specified value. The elements of `array` must already be sorted in increasing value according to the sort order defined by the <xref:System.IComparable> implementation; otherwise, the result might be incorrect.  \n  \n> [!NOTE]\n>  If `comparer` is `null` and `value` does not implement the <xref:System.IComparable> interface, the elements of `array` are not tested for <xref:System.IComparable> before the search begins. An exception is thrown if the search encounters an element that does not implement <xref:System.IComparable>.  \n  \n Duplicate elements are allowed. If the <xref:System.Array> contains more than one element equal to `value`, the method returns the index of only one of the occurrences, and not necessarily the first one.  \n  \n `null` can always be compared with any other reference type; therefore, comparisons with `null` do not generate an exception when using <xref:System.IComparable>.  \n  \n> [!NOTE]\n>  For every element tested, `value` is passed to the appropriate <xref:System.IComparable> implementation, even if `value` is `null`. That is, the <xref:System.IComparable> implementation determines how a given element compares to `null`.  \n  \n This method is an O(log `n`) operation, where `n` is `length`."
  syntax:
    content: public static int BinarySearch (Array array, int index, int length, object value, System.Collections.IComparer comparer);
    parameters:
    - id: array
      type: System.Array
      description: The sorted one-dimensional <xref href="System.Array"></xref> to search.
    - id: index
      type: System.Int32
      description: The starting index of the range to search.
    - id: length
      type: System.Int32
      description: The length of the range to search.
    - id: value
      type: System.Object
      description: The object to search for.
    - id: comparer
      type: System.Collections.IComparer
      description: "The <xref href=\"System.Collections.IComparer\"></xref> implementation to use when comparing elements.  \n  \n -or-  \n  \n `null` to use the <xref href=\"System.IComparable\"></xref> implementation of each element."
    return:
      type: System.Int32
      description: The index of the specified <code>value</code> in the specified <code>array</code>, if <code>value</code> is found; otherwise, a negative number. If <code>value</code> is not found and <code>value</code> is less than one or more elements in <code>array</code>, the negative number returned is the bitwise complement of the index of the first element that is larger than <code>value</code>. If <code>value</code> is not found and <code>value</code> is greater than all elements in <code>array</code>, the negative number returned is the bitwise complement of (the index of the last element plus 1). If this method is called with a non-sorted <code>array</code>, the return value can be incorrect and a negative number could be returned, even if <code>value</code> is present in <code>array</code>.
  overload: System.Array.BinarySearch*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>array</code> is `null`.
  - type: System.RankException
    commentId: T:System.RankException
    description: <code>array</code> is multidimensional.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code> is less than the lower bound of <code>array</code>.  \n  \n -or-  \n  \n <code>length</code> is less than zero."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>index</code> and <code>length</code> do not specify a valid range in <code>array</code>.  \n  \n -or-  \n  \n <code>comparer</code> is `null`, and <code>value</code> is of a type that is not compatible with the elements of <code>array</code>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: <code>comparer</code> is `null`, <code>value</code> does not implement the <xref href="System.IComparable"></xref> interface, and the search encounters an element that does not implement the <xref href="System.IComparable"></xref> interface.
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Array.BinarySearch``1(``0[],``0)
  commentId: M:System.Array.BinarySearch``1(``0[],``0)
  id: BinarySearch``1(``0[],``0)
  parent: System.Array
  langs:
  - csharp
  name: BinarySearch<T>(T[], T)
  nameWithType: Array.BinarySearch<T>(T[], T)
  fullName: Array.BinarySearch<T>(T[], T)
  type: Method
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Searches an entire one-dimensional sorted array for a specific element, using the <xref href="System.IComparable`1"></xref> generic interface implemented by each element of the <xref href="System.Array"></xref> and by the specified object.
  remarks: "This method does not support searching arrays that contain negative indexes. `array` must be sorted before calling this method.  \n  \n If `array` does not contain the specified value, the method returns a negative integer. You can apply the bitwise complement operator (~ in C#, `Not` in Visual Basic) to the negative result  to produce an index. If this index is equal to the size of the array, there are no elements larger than `value` in the array. Otherwise, it is the index of the first element that is larger than `value`.  \n  \n `T` must implement the <xref:System.IComparable%601> generic interface, which is used for comparisons. The elements of `array` must already be sorted in increasing value according to the sort order defined by the <xref:System.IComparable%601> implementation; otherwise, the result might be incorrect.  \n  \n Duplicate elements are allowed. If the <xref:System.Array> contains more than one element equal to `value`, the method returns the index of only one of the occurrences, and not necessarily the first one.  \n  \n `null` can always be compared with any other reference type; therefore, comparisons with `null` do not generate an exception.  \n  \n> [!NOTE]\n>  For every element tested, `value` is passed to the appropriate <xref:System.IComparable%601> implementation, even if `value` is `null`. That is, the <xref:System.IComparable%601> implementation determines how a given element compares to `null`.  \n  \n This method is an O(log `n`) operation, where `n` is the <xref:System.Array.Length%2A> of `array`."
  example:
  - "The following code example demonstrates the <xref:System.Array.Sort%60%601%28%60%600%5B%5D%29> generic method overload and the <xref:System.Array.BinarySearch%60%601%28%60%600%5B%5D%2C%60%600%29> generic method overload. An array of strings is created, in no particular order.  \n  \n The array is displayed, sorted, and displayed again. Arrays must be sorted in order to use the <xref:System.Array.BinarySearch%2A> method.  \n  \n> [!NOTE]\n>  The calls to the <xref:System.Array.Sort%2A> and <xref:System.Array.BinarySearch%2A> generic methods do not look any different from calls to their nongeneric counterparts, because Visual Basic, C#, and C++ infer the type of the generic type parameter from the type of the first argument. If you use the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) to examine the Microsoft intermediate language (MSIL), you can see that the generic methods are being called.  \n  \n The <xref:System.Array.BinarySearch%60%601%28%60%600%5B%5D%2C%60%600%29> generic method overload is then used to search for two strings, one that is not in the array and one that is. The array and the return value of the <xref:System.Array.BinarySearch%2A> method are passed to the `ShowWhere` generic method, which displays the index value if the string is found, and otherwise the elements the search string would fall between if it were in the array. The index is negative if the string is not in the array, so the `ShowWhere` method takes the bitwise complement (the ~ operator in C# and Visual C++, `Xor`-1 in Visual Basic) to obtain the index of the first element in the list that is larger than the search string.  \n  \n [!code-cpp[Array_SortSearch#1](~/samples/snippets/cpp/VS_Snippets_CLR/Array_SortSearch/cpp/source.cpp#1)]\n [!code-csharp[Array_SortSearch#1](~/samples/snippets/csharp/VS_Snippets_CLR/Array_SortSearch/cs/source.cs#1)]\n [!code-vb[Array_SortSearch#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Array_SortSearch/vb/source.vb#1)]"
  syntax:
    content: public static int BinarySearch<T> (T[] array, T value);
    parameters:
    - id: array
      type: T[]
      description: The sorted one-dimensional, zero-based <xref href="System.Array"></xref> to search.
    - id: value
      type: T
      description: The object to search for.
    typeParameters:
    - id: T
      description: The type of the elements of the array.
    return:
      type: System.Int32
      description: The index of the specified <code>value</code> in the specified <code>array</code>, if <code>value</code> is found; otherwise, a negative number. If <code>value</code> is not found and <code>value</code> is less than one or more elements in <code>array</code>, the negative number returned is the bitwise complement of the index of the first element that is larger than <code>value</code>. If <code>value</code> is not found and <code>value</code> is greater than all elements in <code>array</code>, the negative number returned is the bitwise complement of (the index of the last element plus 1). If this method is called with a non-sorted <code>array</code>, the return value can be incorrect and a negative number could be returned, even if <code>value</code> is present in <code>array</code>.
  overload: System.Array.BinarySearch``1*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>array</code> is `null`.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: <code>T</code> does not implement the <xref href="System.IComparable`1"></xref> generic interface.
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Array.BinarySearch``1(``0[],``0,System.Collections.Generic.IComparer{``0})
  commentId: M:System.Array.BinarySearch``1(``0[],``0,System.Collections.Generic.IComparer{``0})
  id: BinarySearch``1(``0[],``0,System.Collections.Generic.IComparer{``0})
  parent: System.Array
  langs:
  - csharp
  name: BinarySearch<T>(T[], T, IComparer<T>)
  nameWithType: Array.BinarySearch<T>(T[], T, IComparer<T>)
  fullName: Array.BinarySearch<T>(T[], T, IComparer<T>)
  type: Method
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Searches an entire one-dimensional sorted array for a value using the specified <xref href="System.Collections.Generic.IComparer`1"></xref> generic interface.
  remarks: "This method does not support searching arrays that contain negative indexes. `array` must be sorted before calling this method.  \n  \n If the <xref:System.Array> does not contain the specified value, the method returns a negative integer. You can apply the bitwise complement operator (~ in C#, `Not` in Visual Basic) to the negative result to produce an index. If this index is equal to the size of the array, there are no elements larger than `value` in the array. Otherwise, it is the index of the first element that is larger than `value`.  \n  \n The comparer customizes how the elements are compared. For example, you can use a <xref:System.Collections.CaseInsensitiveComparer?displayProperty=fullName> as the comparer to perform case-insensitive string searches.  \n  \n If `comparer` is not `null`, the elements of `array` are compared to the specified value using the specified <xref:System.Collections.Generic.IComparer%601> generic interface implementation. The elements of `array` must already be sorted in increasing value according to the sort order defined by `comparer`; otherwise, the result might be incorrect.  \n  \n If `comparer` is `null`, the comparison is done using the <xref:System.IComparable%601> generic interface implementation provided by `T`. The elements of `array` must already be sorted in increasing value according to the sort order defined by the <xref:System.IComparable%601> implementation; otherwise, the result might be incorrect.  \n  \n> [!NOTE]\n>  If `comparer` is `null` and `value` does not implement the <xref:System.IComparable%601> generic interface, the elements of `array` are not tested for <xref:System.IComparable%601> before the search begins. An exception is thrown if the search encounters an element that does not implement <xref:System.IComparable%601>.  \n  \n Duplicate elements are allowed. If the <xref:System.Array> contains more than one element equal to `value`, the method returns the index of only one of the occurrences, and not necessarily the first one.  \n  \n `null` can always be compared with any other reference type; therefore, comparisons with `null` do not generate an exception.  \n  \n> [!NOTE]\n>  For every element tested, `value` is passed to the appropriate <xref:System.IComparable%601> implementation, even if `value` is `null`. That is, the <xref:System.IComparable%601> implementation determines how a given element compares to `null`.  \n  \n This method is an O(log `n`) operation, where `n` is the <xref:System.Array.Length%2A> of `array`."
  example:
  - "The following example demonstrates the <xref:System.Array.Sort%60%601%28%60%600%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29> generic method overload and the <xref:System.Array.BinarySearch%60%601%28%60%600%5B%5D%2C%60%600%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29> generic method overload.  \n  \n The code example defines an alternative comparer for strings, named `ReverseCompare`, which implements the `IComparer<string>` (`IComparer(Of String)` in Visual Basic, `IComparer<String^>` in Visual C++) generic interface. The comparer calls the <xref:System.String.CompareTo%28System.String%29> method, reversing the order of the comparands so that the strings sort high-to-low instead of low-to-high.  \n  \n The array is displayed, sorted, and displayed again. Arrays must be sorted in order to use the<xref:System.Array.BinarySearch%2A> method.  \n  \n> [!NOTE]\n>  The calls to the <xref:System.Array.Sort%60%601%28%60%600%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29> and <xref:System.Array.BinarySearch%60%601%28%60%600%5B%5D%2C%60%600%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29> generic methods do not look any different from calls to their nongeneric counterparts, because Visual Basic, C#, and C++ infer the type of the generic type parameter from the type of the first argument. If you use the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) to examine the Microsoft intermediate language (MSIL), you can see that the generic methods are being called.  \n  \n The <xref:System.Array.BinarySearch%60%601%28%60%600%5B%5D%2C%60%600%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29> generic method overload is then used to search for two strings, one that is not in the array and one that is. The array and the return value of the <xref:System.Array.BinarySearch%60%601%28%60%600%5B%5D%2C%60%600%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29> method are passed to the `ShowWhere` generic method, which displays the index value if the string is found, and otherwise the elements the search string would fall between if it were in the array. The index is negative if the string is not n the array, so the `ShowWhere` method takes the bitwise complement (the ~ operator in C# and Visual C++, `Xor` -1 in Visual Basic) to obtain the index of the first element in the list that is larger than the search string.  \n  \n [!code-cpp[Array_SortSearchComparer#1](~/samples/snippets/cpp/VS_Snippets_CLR/Array_SortSearchComparer/cpp/source.cpp#1)]\n [!code-csharp[Array_SortSearchComparer#1](~/samples/snippets/csharp/VS_Snippets_CLR/Array_SortSearchComparer/cs/source.cs#1)]\n [!code-vb[Array_SortSearchComparer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Array_SortSearchComparer/vb/source.vb#1)]"
  syntax:
    content: public static int BinarySearch<T> (T[] array, T value, System.Collections.Generic.IComparer<T> comparer);
    parameters:
    - id: array
      type: T[]
      description: The sorted one-dimensional, zero-based <xref href="System.Array"></xref> to search.
    - id: value
      type: T
      description: The object to search for.
    - id: comparer
      type: System.Collections.Generic.IComparer`1
      description: "The <xref href=\"System.Collections.Generic.IComparer`1\"></xref> implementation to use when comparing elements.  \n  \n -or-  \n  \n `null` to use the <xref href=\"System.IComparable`1\"></xref> implementation of each element."
    typeParameters:
    - id: T
      description: The type of the elements of the array.
    return:
      type: System.Int32
      description: The index of the specified <code>value</code> in the specified <code>array</code>, if <code>value</code> is found; otherwise, a negative number. If <code>value</code> is not found and <code>value</code> is less than one or more elements in <code>array</code>, the negative number returned is the bitwise complement of the index of the first element that is larger than <code>value</code>. If <code>value</code> is not found and <code>value</code> is greater than all elements in <code>array</code>, the negative number returned is the bitwise complement of (the index of the last element plus 1). If this method is called with a non-sorted <code>array</code>, the return value can be incorrect and a negative number could be returned, even if <code>value</code> is present in <code>array</code>.
  overload: System.Array.BinarySearch``1*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>array</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>comparer</code> is `null`, and <code>value</code> is of a type that is not compatible with the elements of <code>array</code>.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: <code>comparer</code> is `null`, and <code>T</code> does not implement the <xref href="System.IComparable`1"></xref> generic interface
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Array.BinarySearch``1(``0[],System.Int32,System.Int32,``0)
  commentId: M:System.Array.BinarySearch``1(``0[],System.Int32,System.Int32,``0)
  id: BinarySearch``1(``0[],System.Int32,System.Int32,``0)
  parent: System.Array
  langs:
  - csharp
  name: BinarySearch<T>(T[], Int32, Int32, T)
  nameWithType: Array.BinarySearch<T>(T[], Int32, Int32, T)
  fullName: Array.BinarySearch<T>(T[], Int32, Int32, T)
  type: Method
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Searches a range of elements in a one-dimensional sorted array for a value, using the <xref href="System.IComparable`1"></xref> generic interface implemented by each element of the <xref href="System.Array"></xref> and by the specified value.
  remarks: "This method does not support searching arrays that contain negative indexes. `array` must be sorted before calling this method.  \n  \n If the array does not contain the specified value, the method returns a negative integer. You can apply the bitwise complement operator (~ in C#, `Not` in Visual Basic) to the negative result  to produce an index. If this index is equal to the size of the array, there are no elements larger than `value` in the array. Otherwise, it is the index of the first element that is larger than `value`.  \n  \n `T` must implement the <xref:System.IComparable%601> generic interface, which is used for comparisons. The elements of `array` must already be sorted in increasing value according to the sort order defined by the <xref:System.IComparable%601> implementation; otherwise, the result might be incorrect.  \n  \n Duplicate elements are allowed. If the <xref:System.Array> contains more than one element equal to `value`, the method returns the index of only one of the occurrences, and not necessarily the first one.  \n  \n `null` can always be compared with any other reference type; therefore, comparisons with `null` do not generate an exception.  \n  \n> [!NOTE]\n>  For every element tested, `value` is passed to the appropriate <xref:System.IComparable%601> implementation, even if `value` is `null`. That is, the <xref:System.IComparable%601> implementation determines how a given element compares to `null`.  \n  \n This method is an O(log `n`) operation, where `n` is `length`."
  syntax:
    content: public static int BinarySearch<T> (T[] array, int index, int length, T value);
    parameters:
    - id: array
      type: T[]
      description: The sorted one-dimensional, zero-based <xref href="System.Array"></xref> to search.
    - id: index
      type: System.Int32
      description: The starting index of the range to search.
    - id: length
      type: System.Int32
      description: The length of the range to search.
    - id: value
      type: T
      description: The object to search for.
    typeParameters:
    - id: T
      description: The type of the elements of the array.
    return:
      type: System.Int32
      description: The index of the specified <code>value</code> in the specified <code>array</code>, if <code>value</code> is found; otherwise, a negative number. If <code>value</code> is not found and <code>value</code> is less than one or more elements in <code>array</code>, the negative number returned is the bitwise complement of the index of the first element that is larger than <code>value</code>. If <code>value</code> is not found and <code>value</code> is greater than all elements in <code>array</code>, the negative number returned is the bitwise complement of (the index of the last element plus 1). If this method is called with a non-sorted <code>array</code>, the return value can be incorrect and a negative number could be returned, even if <code>value</code> is present in <code>array</code>.
  overload: System.Array.BinarySearch``1*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>array</code> is `null`.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code> is less than the lower bound of <code>array</code>.  \n  \n -or-  \n  \n <code>length</code> is less than zero."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>index</code> and <code>length</code> do not specify a valid range in <code>array</code>.  \n  \n -or-  \n  \n <code>value</code> is of a type that is not compatible with the elements of <code>array</code>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: <code>T</code> does not implement the <xref href="System.IComparable`1"></xref> generic interface.
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Array.BinarySearch``1(``0[],System.Int32,System.Int32,``0,System.Collections.Generic.IComparer{``0})
  commentId: M:System.Array.BinarySearch``1(``0[],System.Int32,System.Int32,``0,System.Collections.Generic.IComparer{``0})
  id: BinarySearch``1(``0[],System.Int32,System.Int32,``0,System.Collections.Generic.IComparer{``0})
  parent: System.Array
  langs:
  - csharp
  name: BinarySearch<T>(T[], Int32, Int32, T, IComparer<T>)
  nameWithType: Array.BinarySearch<T>(T[], Int32, Int32, T, IComparer<T>)
  fullName: Array.BinarySearch<T>(T[], Int32, Int32, T, IComparer<T>)
  type: Method
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Searches a range of elements in a one-dimensional sorted array for a value, using the specified <xref href="System.Collections.Generic.IComparer`1"></xref> generic interface.
  remarks: "This method does not support searching arrays that contain negative indexes. `array` must be sorted before calling this method.  \n  \n If the array does not contain the specified value, the method returns a negative integer. You can apply the bitwise complement operator (~ in C#, `Not` in Visual Basic) to the negative result  to produce an index. If this index is equal to the size of the array, there are no elements larger than `value` in the array. Otherwise, it is the index of the first element that is larger than `value`.  \n  \n The comparer customizes how the elements are compared. For example, you can use a <xref:System.Collections.CaseInsensitiveComparer?displayProperty=fullName> as the comparer to perform case-insensitive string searches.  \n  \n If `comparer` is not `null`, the elements of `array` are compared to the specified value using the specified <xref:System.Collections.Generic.IComparer%601> generic interface implementation. The elements of `array` must already be sorted in increasing value according to the sort order defined by `comparer`; otherwise, the result might be incorrect.  \n  \n If `comparer` is `null`, the comparison is done using the <xref:System.IComparable%601> generic interface implementation provided for type `T`. The elements of `array` must already be sorted in increasing value according to the sort order defined by the <xref:System.IComparable%601> implementation; otherwise, the result might be incorrect.  \n  \n Duplicate elements are allowed. If the <xref:System.Array> contains more than one element equal to `value`, the method returns the index of only one of the occurrences, and not necessarily the first one.  \n  \n `null` can always be compared with any other reference type; therefore, comparisons with `null` do not generate an exception when using <xref:System.IComparable%601>.  \n  \n> [!NOTE]\n>  For every element tested, `value` is passed to the appropriate <xref:System.IComparable%601> implementation, even if `value` is `null`. That is, the <xref:System.IComparable%601> implementation determines how a given element compares to `null`.  \n  \n This method is an O(log `n`) operation, where `n` is `length`."
  syntax:
    content: public static int BinarySearch<T> (T[] array, int index, int length, T value, System.Collections.Generic.IComparer<T> comparer);
    parameters:
    - id: array
      type: T[]
      description: The sorted one-dimensional, zero-based <xref href="System.Array"></xref> to search.
    - id: index
      type: System.Int32
      description: The starting index of the range to search.
    - id: length
      type: System.Int32
      description: The length of the range to search.
    - id: value
      type: T
      description: The object to search for.
    - id: comparer
      type: System.Collections.Generic.IComparer`1
      description: "The <xref href=\"System.Collections.Generic.IComparer`1\"></xref> implementation to use when comparing elements.  \n  \n -or-  \n  \n `null` to use the <xref href=\"System.IComparable`1\"></xref> implementation of each element."
    typeParameters:
    - id: T
      description: The type of the elements of the array.
    return:
      type: System.Int32
      description: The index of the specified <code>value</code> in the specified <code>array</code>, if <code>value</code> is found; otherwise, a negative number. If <code>value</code> is not found and <code>value</code> is less than one or more elements in <code>array</code>, the negative number returned is the bitwise complement of the index of the first element that is larger than <code>value</code>. If <code>value</code> is not found and <code>value</code> is greater than all elements in <code>array</code>, the negative number returned is the bitwise complement of (the index of the last element plus 1). If this method is called with a non-sorted <code>array</code>, the return value can be incorrect and a negative number could be returned, even if <code>value</code> is present in <code>array</code>.
  overload: System.Array.BinarySearch``1*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>array</code> is `null`.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code> is less than the lower bound of <code>array</code>.  \n  \n -or-  \n  \n <code>length</code> is less than zero."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>index</code> and <code>length</code> do not specify a valid range in <code>array</code>.  \n  \n -or-  \n  \n <code>comparer</code> is `null`, and <code>value</code> is of a type that is not compatible with the elements of <code>array</code>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: <code>comparer</code> is `null`, and <code>T</code> does not implement the <xref href="System.IComparable`1"></xref> generic interface.
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Array.Clear(System.Array,System.Int32,System.Int32)
  commentId: M:System.Array.Clear(System.Array,System.Int32,System.Int32)
  id: Clear(System.Array,System.Int32,System.Int32)
  parent: System.Array
  langs:
  - csharp
  name: Clear(Array, Int32, Int32)
  nameWithType: Array.Clear(Array, Int32, Int32)
  fullName: Array.Clear(Array, Int32, Int32)
  type: Method
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Sets a range of elements in an array to the default value of each element type.
  remarks: "This method resets each element in an array to the element type's default value. It sets elements of reference types (including <xref:System.String> elements) to `null`, and sets elements of value types to the default values shown in the following table.  \n  \n|Type|Value|  \n|----------|-----------|  \n|<xref:System.Boolean>|`false`|  \n|All integral and floating point numeric types|0 (zero)|  \n|<xref:System.DateTime>|<xref:System.DateTime.MinValue?displayProperty=fullName>|  \n|Other value types|Default value of the type's fields|  \n  \n The range of cleared elements wrap from row to row in a multi-dimensional array.  \n  \n This method only clears the values of the elements; it does not delete the elements themselves. An array has a fixed size; therefore, elements cannot be added or removed.  \n  \n This method is an O(`n`) operation, where `n` is `length`."
  example:
  - "The following example uses the <xref:System.Array.Clear%2A> method to reset integer values in a one-dimensional, two-dimensional, and three-dimensional array.  \n  \n [!code-csharp[System.Array.Clear#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Array.Clear/cs/example.cs#1)]\n [!code-vb[System.Array.Clear#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Array.Clear/vb/example.vb#1)]  \n  \n The following example defines a `TimeZoneTime` structure that includes a <xref:System.TimeZoneInfo> field and a <xref:System.DateTimeOffset> field. It then calls the <xref:System.Array.Clear%2A> method to clear one element in a two-element array of `TimeZoneTime` values. The method sets the value of the cleared element to the default value of a <xref:System.TimeZoneInfo> object, which is `null`, and the default value of a <xref:System.DateTimeOffset> object, which is <xref:System.DateTimeOffset.MinValue?displayProperty=fullName>.  \n  \n [!code-csharp[System.Array.Clear#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Array.Clear/cs/clearstruct1.cs#2)]\n [!code-vb[System.Array.Clear#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Array.Clear/vb/clearstruct1.vb#2)]"
  syntax:
    content: public static void Clear (Array array, int index, int length);
    parameters:
    - id: array
      type: System.Array
      description: The array whose elements need to be cleared.
    - id: index
      type: System.Int32
      description: The starting index of the range of elements to clear.
    - id: length
      type: System.Int32
      description: The number of elements to clear.
  overload: System.Array.Clear*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>array</code> is `null`.
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "<code>index</code> is less than the lower bound of <code>array</code>.  \n  \n -or-  \n  \n <code>length</code> is less than zero.  \n  \n -or-  \n  \n The sum of <code>index</code> and <code>length</code> is greater than the size of <code>array</code>."
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Array.Clone
  commentId: M:System.Array.Clone
  id: Clone
  parent: System.Array
  langs:
  - csharp
  name: Clone()
  nameWithType: Array.Clone()
  fullName: Array.Clone()
  type: Method
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Creates a shallow copy of the <xref href="System.Array"></xref>.
  remarks: "A shallow copy of an <xref:System.Array> copies only the elements of the <xref:System.Array>, whether they are reference types or value types, but it does not copy the objects that the references refer to. The references in the new <xref:System.Array> point to the same objects that the references in the original <xref:System.Array> point to.  \n  \n In contrast, a deep copy of an <xref:System.Array> copies the elements and everything directly or indirectly referenced by the elements.  \n  \n The clone is of the same <xref:System.Type> as the original <xref:System.Array>.  \n  \n This method is an O(`n`) operation, where `n` is <xref:System.Array.Length%2A>."
  example:
  - "The following code example clones a <xref:System.Globalization.CultureInfo?displayProperty=fullName> array and demonstrates the behavior of a shallow copy.  \n  \n [!code-cpp[System.Array.Clone#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Array.Clone/CPP/arrayclone.cpp#1)]\n [!code-csharp[System.Array.Clone#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Array.Clone/CS/arrayclone.cs#1)]\n [!code-vb[System.Array.Clone#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Array.Clone/VB/arrayclone.vb#1)]"
  syntax:
    content: public object Clone ();
    parameters: []
    return:
      type: System.Object
      description: A shallow copy of the <xref href="System.Array"></xref>.
  overload: System.Array.Clone*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Array.ConstrainedCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)
  commentId: M:System.Array.ConstrainedCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)
  id: ConstrainedCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)
  parent: System.Array
  langs:
  - csharp
  name: ConstrainedCopy(Array, Int32, Array, Int32, Int32)
  nameWithType: Array.ConstrainedCopy(Array, Int32, Array, Int32, Int32)
  fullName: Array.ConstrainedCopy(Array, Int32, Array, Int32, Int32)
  type: Method
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Copies a range of elements from an <xref href="System.Array"></xref> starting at the specified source index and pastes them to another <xref href="System.Array"></xref> starting at the specified destination index.  Guarantees that all changes are undone if the copy does not succeed completely.
  remarks: "The `sourceArray` and `destinationArray` parameters must have the same number of dimensions.  The `sourceArray` type must be the same as or derived from the `destinationArray` type; otherwise, an <xref:System.ArrayTypeMismatchException> is thrown.  Unlike <xref:System.Array.Copy%2A>, <xref:System.Array.ConstrainedCopy%2A> verifies the compatibility of the array types before performing any operation.  \n  \n When copying between multidimensional arrays, the array behaves like a long one-dimensional array, where the rows (or columns) are conceptually laid end-to-end. For example, if an array has three rows (or columns) with four elements each, copying six elements from the beginning of the array would copy all four elements of the first row (or column) and the first two elements of the second row (or column). To start copying from the second element of the third row (or column), `sourceIndex` must be the upper bound of the first row (or column) plus the length of the second row (or column) plus two.  \n  \n If `sourceArray` and `destinationArray` overlap, this method behaves as if the original values of `sourceArray` were preserved in a temporary location before `destinationArray` is overwritten.  \n  \n [C++]  \n  \n This method is equivalent to the standard C/C++ function `memmove`, not `memcpy`.  \n  \n The arrays can be reference-type arrays or value-type arrays.  If `sourceArray` and `destinationArray` are both reference-type arrays or are both arrays of type <xref:System.Object>, a shallow copy is performed. A shallow copy of an <xref:System.Array> is a new <xref:System.Array> containing references to the same elements as the original <xref:System.Array>. The elements themselves or anything referenced by the elements are not copied. In contrast, a deep copy of an <xref:System.Array> copies the elements and everything directly or indirectly referenced by the elements.  \n  \n If this method throws an exception while copying, the `destinationArray` remains unchanged; therefore, <xref:System.Array.ConstrainedCopy%2A> can be used within a constrained execution region (<xref:System.Runtime.ConstrainedExecution.Cer>).  \n  \n This method is an O(`n`) operation, where `n` is `length`."
  syntax:
    content: public static void ConstrainedCopy (Array sourceArray, int sourceIndex, Array destinationArray, int destinationIndex, int length);
    parameters:
    - id: sourceArray
      type: System.Array
      description: The <xref href="System.Array"></xref> that contains the data to copy.
    - id: sourceIndex
      type: System.Int32
      description: A 32-bit integer that represents the index in the <code>sourceArray</code> at which copying begins.
    - id: destinationArray
      type: System.Array
      description: The <xref href="System.Array"></xref> that receives the data.
    - id: destinationIndex
      type: System.Int32
      description: A 32-bit integer that represents the index in the <code>destinationArray</code> at which storing begins.
    - id: length
      type: System.Int32
      description: A 32-bit integer that represents the number of elements to copy.
  overload: System.Array.ConstrainedCopy*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>sourceArray</code> is `null`.  \n  \n -or-  \n  \n <code>destinationArray</code> is `null`."
  - type: System.RankException
    commentId: T:System.RankException
    description: <code>sourceArray</code> and <code>destinationArray</code> have different ranks.
  - type: System.ArrayTypeMismatchException
    commentId: T:System.ArrayTypeMismatchException
    description: The <code>sourceArray</code> type is neither the same as nor derived from the <code>destinationArray</code> type.
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: At least one element in <code>sourceArray</code> cannot be cast to the type of <code>destinationArray</code>.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>sourceIndex</code> is less than the lower bound of the first dimension of <code>sourceArray</code>.  \n  \n -or-  \n  \n <code>destinationIndex</code> is less than the lower bound of the first dimension of <code>destinationArray</code>.  \n  \n -or-  \n  \n <code>length</code> is less than zero."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>length</code> is greater than the number of elements from <code>sourceIndex</code> to the end of <code>sourceArray</code>.  \n  \n -or-  \n  \n <code>length</code> is greater than the number of elements from <code>destinationIndex</code> to the end of <code>destinationArray</code>."
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Array.ConvertAll``2(``0[],System.Converter{``0,``1})
  commentId: M:System.Array.ConvertAll``2(``0[],System.Converter{``0,``1})
  id: ConvertAll``2(``0[],System.Converter{``0,``1})
  parent: System.Array
  langs:
  - csharp
  name: ConvertAll<TInput,TOutput>(TInput[], Converter<TInput,TOutput>)
  nameWithType: Array.ConvertAll<TInput,TOutput>(TInput[], Converter<TInput,TOutput>)
  fullName: Array.ConvertAll<TInput,TOutput>(TInput[], Converter<TInput,TOutput>)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Converts an array of one type to an array of another type.
  remarks: "The <xref:System.Converter%602> is a delegate to a method that converts an object to the target type.  The elements of `array` are individually passed to the <xref:System.Converter%602>, and the converted elements are saved in the new array.  \n  \n The source `array` remains unchanged.  \n  \n This method is an O(`n`) operation, where `n` is the <xref:System.Array.Length%2A> of `array`."
  example:
  - "The following code example defines a method named `PointFToPoint` that converts a <xref:System.Drawing.PointF> structure to a <xref:System.Drawing.Point> structure. The example then creates an array of <xref:System.Drawing.PointF> structures, creates a `Converter<PointF, Point>` delegate (`Converter(Of PointF, Point)` in Visual Basic) to represent the `PointFToPoint` method, and passes the delegate to the <xref:System.Array.ConvertAll%2A> method. The <xref:System.Array.ConvertAll%2A> method passes each element of the input list to the `PointFToPoint` method and puts the converted elements into a new list of <xref:System.Drawing.Point> structures. Both lists are displayed.  \n  \n [!code-cpp[Array_ConvertAll#1](~/samples/snippets/cpp/VS_Snippets_CLR/Array_ConvertAll/cpp/source.cpp#1)]\n [!code-csharp[Array_ConvertAll#1](~/samples/snippets/csharp/VS_Snippets_CLR/Array_ConvertAll/cs/source.cs#1)]\n [!code-vb[Array_ConvertAll#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Array_ConvertAll/vb/source.vb#1)]"
  syntax:
    content: public static TOutput[] ConvertAll<TInput,TOutput> (TInput[] array, Converter<TInput,TOutput> converter);
    parameters:
    - id: array
      type: TInput[]
      description: The one-dimensional, zero-based <xref href="System.Array"></xref> to convert to a target type.
    - id: converter
      type: System.Converter`2
      description: A <xref href="System.Converter`2"></xref> that converts each element from one type to another type.
    typeParameters:
    - id: TInput
      description: The type of the elements of the source array.
    - id: TOutput
      description: The type of the elements of the target array.
    return:
      type: TOutput[]
      description: An array of the target type containing the converted elements from the source array.
  overload: System.Array.ConvertAll``2*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>array</code> is `null`.  \n  \n -or-  \n  \n <code>converter</code> is `null`."
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Array.Copy(System.Array,System.Int64,System.Array,System.Int64,System.Int64)
  commentId: M:System.Array.Copy(System.Array,System.Int64,System.Array,System.Int64,System.Int64)
  id: Copy(System.Array,System.Int64,System.Array,System.Int64,System.Int64)
  parent: System.Array
  langs:
  - csharp
  name: Copy(Array, Int64, Array, Int64, Int64)
  nameWithType: Array.Copy(Array, Int64, Array, Int64, Int64)
  fullName: Array.Copy(Array, Int64, Array, Int64, Int64)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Copies a range of elements from an <xref href="System.Array"></xref> starting at the specified source index and pastes them to another <xref href="System.Array"></xref> starting at the specified destination index. The length and the indexes are specified as 64-bit integers.
  remarks: "The `sourceArray` and `destinationArray` parameters must have the same number of dimensions. In addition, `destinationArray` must already have been dimensioned and must have a sufficient number of elements starting from the `destinationIndex` position to accommodate the copied data.  \n  \n When copying between multidimensional arrays, the array behaves like a long one-dimensional array, where the rows (or columns) are conceptually laid end-to-end. For example, if an array has three rows (or columns) with four elements each, copying six elements from the beginning of the array would copy all four elements of the first row (or column) and the first two elements of the second row (or column). To start copying from the second element of the third row (or column), `sourceIndex` must be the upper bound of the first row (or column) plus the length of the second row (or column) plus two.  \n  \n If `sourceArray` and `destinationArray` overlap, this method behaves as if the original values of `sourceArray` were preserved in a temporary location before `destinationArray` is overwritten.  \n  \n [C++]  \n  \n This method is equivalent to the standard C/C++ function `memmove`, not `memcpy`.  \n  \n The arrays can be reference-type arrays or value-type arrays. Type downcasting is performed, as required.  \n  \n-   When copying from a reference-type array to a value-type array, each element is unboxed and then copied. When copying from a value-type array to a reference-type array, each element is boxed and then copied.  \n  \n-   When copying from a reference-type or value-type array to an <xref:System.Object> array, an <xref:System.Object> is created to hold each value or reference and then copied. When copying from an <xref:System.Object> array to a reference-type or value-type array and the assignment is not possible, an <xref:System.InvalidCastException> is thrown.  \n  \n-   If `sourceArray` and `destinationArray` are both reference-type arrays or are both arrays of type <xref:System.Object>, a shallow copy is performed. A shallow copy of an <xref:System.Array> is a new <xref:System.Array>containing references to the same elements as the original <xref:System.Array>. The elements themselves or anything referenced by the elements are not copied. In contrast, a deep copy of an <xref:System.Array> copies the elements and everything directly or indirectly referenced by the elements.  \n  \n An <xref:System.ArrayTypeMismatchException> is thrown if the arrays are of incompatible types. Type compatibility is defined as follows:  \n  \n-   A type is compatible with itself.  \n  \n-   A value type is compatible with <xref:System.Object> and with an interface type implemented by that value type. A value type is considered connected to an interface only if it implements that interface directly. Disconnected types are not compatible.  \n  \n-   Two intrinsic (predefined) value types are compatible if copying from the source type to the destination type is a widening conversion. A widening conversion never loses information, whereas a narrowing conversion can lose information. For example, converting a 32-bit signed integer to a 64-bit signed integer is a widening conversion, and converting a 64-bit signed integer to a 32-bit signed integer is a narrowing conversion. For more information about conversions, see <xref:System.Convert>.  \n  \n-   A nonintrinsic (user-defined) value type is compatible only with itself.  \n  \n-   Enumerations have an implicit conversion to <xref:System.Enum> and to their underlying type.  \n  \n If every element in `sourceArray` requires a downcast (for example, from a base class to a derived class or from an interface to an object) and one or more elements cannot be cast to the corresponding type in `destinationArray`, an <xref:System.InvalidCastException> is thrown.  \n  \n If this method throws an exception while copying, the state of `destinationArray` is undefined.  \n  \n This method is an O(`n`) operation, where `n` is `length`."
  example:
  - "The following code example shows how to copy from one <xref:System.Array> of type <xref:System.Object> to another <xref:System.Array> of type integer.  \n  \n [!code-cpp[Classic Array.Copy1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Array.Copy1 Example/CPP/source.cpp#1)]\n [!code-csharp[Classic Array.Copy1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Array.Copy1 Example/CS/source.cs#1)]\n [!code-vb[Classic Array.Copy1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Array.Copy1 Example/VB/source.vb#1)]"
  syntax:
    content: public static void Copy (Array sourceArray, long sourceIndex, Array destinationArray, long destinationIndex, long length);
    parameters:
    - id: sourceArray
      type: System.Array
      description: The <xref href="System.Array"></xref> that contains the data to copy.
    - id: sourceIndex
      type: System.Int64
      description: A 64-bit integer that represents the index in the <code>sourceArray</code> at which copying begins.
    - id: destinationArray
      type: System.Array
      description: The <xref href="System.Array"></xref> that receives the data.
    - id: destinationIndex
      type: System.Int64
      description: A 64-bit integer that represents the index in the <code>destinationArray</code> at which storing begins.
    - id: length
      type: System.Int64
      description: A 64-bit integer that represents the number of elements to copy. The integer must be between zero and <xref href="System.Int32.MaxValue"></xref>, inclusive.
  overload: System.Array.Copy*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>sourceArray</code> is `null`.  \n  \n -or-  \n  \n <code>destinationArray</code> is `null`."
  - type: System.RankException
    commentId: T:System.RankException
    description: <code>sourceArray</code> and <code>destinationArray</code> have different ranks.
  - type: System.ArrayTypeMismatchException
    commentId: T:System.ArrayTypeMismatchException
    description: <code>sourceArray</code> and <code>destinationArray</code> are of incompatible types.
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: At least one element in <code>sourceArray</code> cannot be cast to the type of <code>destinationArray</code>.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>sourceIndex</code> is outside the range of valid indexes for the <code>sourceArray</code>.  \n  \n -or-  \n  \n <code>destinationIndex</code> is outside the range of valid indexes for the <code>destinationArray</code>.  \n  \n -or-  \n  \n <code>length</code> is less than 0 or greater than <xref href=\"System.Int32.MaxValue\"></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>length</code> is greater than the number of elements from <code>sourceIndex</code> to the end of <code>sourceArray</code>.  \n  \n -or-  \n  \n <code>length</code> is greater than the number of elements from <code>destinationIndex</code> to the end of <code>destinationArray</code>."
  attributes: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Array.Copy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)
  commentId: M:System.Array.Copy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)
  id: Copy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)
  parent: System.Array
  langs:
  - csharp
  name: Copy(Array, Int32, Array, Int32, Int32)
  nameWithType: Array.Copy(Array, Int32, Array, Int32, Int32)
  fullName: Array.Copy(Array, Int32, Array, Int32, Int32)
  type: Method
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Copies a range of elements from an <xref href="System.Array"></xref> starting at the specified source index and pastes them to another <xref href="System.Array"></xref> starting at the specified destination index. The length and the indexes are specified as 32-bit integers.
  remarks: "The `sourceArray` and `destinationArray` parameters must have the same number of dimensions. In addition, `destinationArray` must already have been dimensioned and must have a sufficient number of elements starting from the `destinationIndex` position to accommodate the copied data.  \n  \n When copying between multidimensional arrays, the array behaves like a long one-dimensional array, where the rows (or columns) are conceptually laid end-to-end. For example, if an array has three rows (or columns) with four elements each, copying six elements from the beginning of the array would copy all four elements of the first row (or column) and the first two elements of the second row (or column). To start copying from the second element of the third row (or column), `sourceIndex` must be the upper bound of the first row (or column) plus the length of the second row (or column) plus two.  \n  \n If `sourceArray` and `destinationArray` overlap, this method behaves as if the original values of `sourceArray` were preserved in a temporary location before `destinationArray` is overwritten.  \n  \n [C++]  \n  \n This method is equivalent to the standard C/C++ function `memmove`, not `memcpy`.  \n  \n The arrays can be reference-type arrays or value-type arrays. Type downcasting is performed, as required.  \n  \n-   When copying from a reference-type array to a value-type array, each element is unboxed and then copied. When copying from a value-type array to a reference-type array, each element is boxed and then copied.  \n  \n-   When copying from a reference-type or value-type array to an <xref:System.Object> array, an <xref:System.Object> is created to hold each value or reference and then copied. When copying from an <xref:System.Object> array to a reference-type or value-type array and the assignment is not possible, an <xref:System.InvalidCastException> is thrown.  \n  \n-   If `sourceArray` and `destinationArray` are both reference-type arrays or are both arrays of type <xref:System.Object>, a shallow copy is performed. A shallow copy of an <xref:System.Array> is a new <xref:System.Array> containing references to the same elements as the original <xref:System.Array>. The elements themselves or anything referenced by the elements are not copied. In contrast, a deep copy of an <xref:System.Array> copies the elements and everything directly or indirectly referenced by the elements.  \n  \n An <xref:System.ArrayTypeMismatchException> is thrown if the arrays are of incompatible types. Type compatibility is defined as follows:  \n  \n-   A type is compatible with itself.  \n  \n-   A value type is compatible with <xref:System.Object> and with an interface type implemented by that value type. A value type is considered connected to an interface only if it implements that interface directly. Disconnected types are not compatible.  \n  \n-   Two intrinsic (predefined) value types are compatible if copying from the source type to the destination type is a widening conversion. A widening conversion never loses information, whereas a narrowing conversion can lose information. For example, converting a 32-bit signed integer to a 64-bit signed integer is a widening conversion, and converting a 64-bit signed integer to a 32-bit signed integer is a narrowing conversion. For more information about conversions, see <xref:System.Convert>.  \n  \n-   A nonintrinsic (user-defined) value type is compatible only with itself.  \n  \n-   Enumerations have an implicit conversion to <xref:System.Enum> and to their underlying type.  \n  \n If every element in `sourceArray` requires a downcast (for example, from a base class to a derived class or from an interface to an object) and one or more elements cannot be cast to the corresponding type in `destinationArray`, an <xref:System.InvalidCastException> is thrown.  \n  \n If this method throws an exception while copying, the state of `destinationArray` is undefined.  \n  \n This method is an O(`n`) operation, where `n` is `length`."
  example:
  - "The following code example shows how to copy from one <xref:System.Array> of type <xref:System.Object> to another <xref:System.Array> of type integer.  \n  \n [!code-cpp[Classic Array.Copy1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Array.Copy1 Example/CPP/source.cpp#1)]\n [!code-csharp[Classic Array.Copy1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Array.Copy1 Example/CS/source.cs#1)]\n [!code-vb[Classic Array.Copy1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Array.Copy1 Example/VB/source.vb#1)]"
  syntax:
    content: public static void Copy (Array sourceArray, int sourceIndex, Array destinationArray, int destinationIndex, int length);
    parameters:
    - id: sourceArray
      type: System.Array
      description: The <xref href="System.Array"></xref> that contains the data to copy.
    - id: sourceIndex
      type: System.Int32
      description: A 32-bit integer that represents the index in the <code>sourceArray</code> at which copying begins.
    - id: destinationArray
      type: System.Array
      description: The <xref href="System.Array"></xref> that receives the data.
    - id: destinationIndex
      type: System.Int32
      description: A 32-bit integer that represents the index in the <code>destinationArray</code> at which storing begins.
    - id: length
      type: System.Int32
      description: A 32-bit integer that represents the number of elements to copy.
  overload: System.Array.Copy*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>sourceArray</code> is `null`.  \n  \n -or-  \n  \n <code>destinationArray</code> is `null`."
  - type: System.RankException
    commentId: T:System.RankException
    description: <code>sourceArray</code> and <code>destinationArray</code> have different ranks.
  - type: System.ArrayTypeMismatchException
    commentId: T:System.ArrayTypeMismatchException
    description: <code>sourceArray</code> and <code>destinationArray</code> are of incompatible types.
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: At least one element in <code>sourceArray</code> cannot be cast to the type of <code>destinationArray</code>.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>sourceIndex</code> is less than the lower bound of the first dimension of <code>sourceArray</code>.  \n  \n -or-  \n  \n <code>destinationIndex</code> is less than the lower bound of the first dimension of <code>destinationArray</code>.  \n  \n -or-  \n  \n <code>length</code> is less than zero."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>length</code> is greater than the number of elements from <code>sourceIndex</code> to the end of <code>sourceArray</code>.  \n  \n -or-  \n  \n <code>length</code> is greater than the number of elements from <code>destinationIndex</code> to the end of <code>destinationArray</code>."
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Array.Copy(System.Array,System.Array,System.Int64)
  commentId: M:System.Array.Copy(System.Array,System.Array,System.Int64)
  id: Copy(System.Array,System.Array,System.Int64)
  parent: System.Array
  langs:
  - csharp
  name: Copy(Array, Array, Int64)
  nameWithType: Array.Copy(Array, Array, Int64)
  fullName: Array.Copy(Array, Array, Int64)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Copies a range of elements from an <xref href="System.Array"></xref> starting at the first element and pastes them into another <xref href="System.Array"></xref> starting at the first element. The length is specified as a 64-bit integer.
  remarks: "The `sourceArray` and `destinationArray` parameters must have the same number of dimensions. In addition, `destinationArray` must already have been dimensioned and must have a sufficient number of elements to accommodate the copied data.  \n  \n When copying between multidimensional arrays, the array behaves like a long one-dimensional array, where the rows (or columns) are conceptually laid end to end. For example, if an array has three rows (or columns) with four elements each, copying six elements from the beginning of the array would copy all four elements of the first row (or column) and the first two elements of the second row (or column).  \n  \n If `sourceArray` and `destinationArray` overlap, this method behaves as if the original values of `sourceArray` were preserved in a temporary location before `destinationArray` is overwritten.  \n  \n [C++]  \n  \n This method is equivalent to the standard C/C++ function `memmove`, not `memcpy`.  \n  \n The arrays can be reference-type arrays or value-type arrays. Type downcasting is performed, as required.  \n  \n-   When copying from a reference-type array to a value-type array, each element is unboxed and then copied. When copying from a value-type array to a reference-type array, each element is boxed and then copied.  \n  \n-   When copying from a reference-type or value-type array to an <xref:System.Object> array, an <xref:System.Object> is created to hold each value or reference and then copied. When copying from an <xref:System.Object> array to a reference-type or value-type array and the assignment is not possible, an <xref:System.InvalidCastException> is thrown.  \n  \n-   If `sourceArray` and `destinationArray` are both reference-type arrays or are both arrays of type <xref:System.Object>, a shallow copy is performed. A shallow copy of an <xref:System.Array> is a new <xref:System.Array> containing references to the same elements as the original <xref:System.Array>. The elements themselves or anything referenced by the elements are not copied. In contrast, a deep copy of an <xref:System.Array> copies the elements and everything directly or indirectly referenced by the elements.  \n  \n An <xref:System.ArrayTypeMismatchException> is thrown if the arrays are of incompatible types. Type compatibility is defined as follows:  \n  \n-   A type is compatible with itself.  \n  \n-   A value type is compatible with <xref:System.Object> and with an interface type implemented by that value type. A value type is considered connected to an interface only if it implements that interface directly. Disconnected types are not compatible.  \n  \n-   Two intrinsic (predefined) value types are compatible if copying from the source type to the destination type is a widening conversion. A widening conversion never loses information, whereas a narrowing conversion can lose information. For example, converting a 32-bit signed integer to a 64-bit signed integer is a widening conversion, and converting a 64-bit signed integer to a 32-bit signed integer is a narrowing conversion. For more information about conversions, see <xref:System.Convert>.  \n  \n-   A nonintrinsic (user-defined) value type is compatible only with itself.  \n  \n-   Enumerations have an implicit conversion to <xref:System.Enum> and to their underlying type.  \n  \n If every element in `sourceArray` requires a downcast (for example, from a base class to a derived class or from an interface to an object) and one or more elements cannot be cast to the corresponding type in `destinationArray`, an <xref:System.InvalidCastException> is thrown.  \n  \n If this method throws an exception while copying, the state of `destinationArray` is undefined.  \n  \n This method is an O(`n`) operation, where `n` is `length`."
  syntax:
    content: public static void Copy (Array sourceArray, Array destinationArray, long length);
    parameters:
    - id: sourceArray
      type: System.Array
      description: The <xref href="System.Array"></xref> that contains the data to copy.
    - id: destinationArray
      type: System.Array
      description: The <xref href="System.Array"></xref> that receives the data.
    - id: length
      type: System.Int64
      description: A 64-bit integer that represents the number of elements to copy. The integer must be between zero and <xref href="System.Int32.MaxValue"></xref>, inclusive.
  overload: System.Array.Copy*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>sourceArray</code> is `null`.  \n  \n -or-  \n  \n <code>destinationArray</code> is `null`."
  - type: System.RankException
    commentId: T:System.RankException
    description: <code>sourceArray</code> and <code>destinationArray</code> have different ranks.
  - type: System.ArrayTypeMismatchException
    commentId: T:System.ArrayTypeMismatchException
    description: <code>sourceArray</code> and <code>destinationArray</code> are of incompatible types.
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: At least one element in <code>sourceArray</code> cannot be cast to the type of <code>destinationArray</code>.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>length</code> is less than 0 or greater than <xref href="System.Int32.MaxValue"></xref>.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>length</code> is greater than the number of elements in <code>sourceArray</code>.  \n  \n -or-  \n  \n <code>length</code> is greater than the number of elements in <code>destinationArray</code>."
  attributes: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Array.Copy(System.Array,System.Array,System.Int32)
  commentId: M:System.Array.Copy(System.Array,System.Array,System.Int32)
  id: Copy(System.Array,System.Array,System.Int32)
  parent: System.Array
  langs:
  - csharp
  name: Copy(Array, Array, Int32)
  nameWithType: Array.Copy(Array, Array, Int32)
  fullName: Array.Copy(Array, Array, Int32)
  type: Method
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Copies a range of elements from an <xref href="System.Array"></xref> starting at the first element and pastes them into another <xref href="System.Array"></xref> starting at the first element. The length is specified as a 32-bit integer.
  remarks: "The `sourceArray` and `destinationArray` parameters must have the same number of dimensions. In addition, `destinationArray` must already have been dimensioned and must have a sufficient number of elements to accommodate the copied data.  \n  \n When copying between multidimensional arrays, the array behaves like a long one-dimensional array, where the rows (or columns) are conceptually laid end to end. For example, if an array has three rows (or columns) with four elements each, copying six elements from the beginning of the array would copy all four elements of the first row (or column) and the first two elements of the second row (or column).  \n  \n If `sourceArray` and `destinationArray` overlap, this method behaves as if the original values of `sourceArray` were preserved in a temporary location before `destinationArray` is overwritten.  \n  \n [C++]  \n  \n This method is equivalent to the standard C/C++ function `memmove`, not `memcpy`.  \n  \n The arrays can be reference-type arrays or value-type arrays. Type downcasting is performed, as required.  \n  \n-   When copying from a reference-type array to a value-type array, each element is unboxed and then copied. When copying from a value-type array to a reference-type array, each element is boxed and then copied.  \n  \n-   When copying from a reference-type or value-type array to an <xref:System.Object> array, an <xref:System.Object> is created to hold each value or reference and then copied. When copying from an <xref:System.Object> array to a reference-type or value-type array and the assignment is not possible, an <xref:System.InvalidCastException> is thrown.  \n  \n-   If `sourceArray` and `destinationArray` are both reference-type arrays or are both arrays of type <xref:System.Object>, a shallow copy is performed. A shallow copy of an <xref:System.Array> is a new <xref:System.Array> containing references to the same elements as the original <xref:System.Array>. The elements themselves or anything referenced by the elements are not copied. In contrast, a deep copy of an <xref:System.Array> copies the elements and everything directly or indirectly referenced by the elements.  \n  \n An <xref:System.ArrayTypeMismatchException> is thrown if the arrays are of incompatible types. Type compatibility is defined as follows:  \n  \n-   A type is compatible with itself.  \n  \n-   A value type is compatible with <xref:System.Object> and with an interface type implemented by that value type. A value type is considered connected to an interface only if it implements that interface directly. Disconnected types are not compatible.  \n  \n-   Two intrinsic (predefined) value types are compatible if copying from the source type to the destination type is a widening conversion. A widening conversion never loses information, whereas a narrowing conversion can lose information. For example, converting a 32-bit signed integer to a 64-bit signed integer is a widening conversion, and converting a 64-bit signed integer to a 32-bit signed integer is a narrowing conversion. For more information about conversions, see <xref:System.Convert>.  \n  \n-   A nonintrinsic (user-defined) value type is compatible only with itself.  \n  \n-   Enumerations have an implicit conversion to <xref:System.Enum> and to their underlying type.  \n  \n If every element in `sourceArray` requires a downcast (for example, from a base class to a derived class or from an interface to an object) and one or more elements cannot be cast to the corresponding type in `destinationArray`, an <xref:System.InvalidCastException> is thrown.  \n  \n If this method throws an exception while copying, the state of `destinationArray` is undefined.  \n  \n This method is an O(`n`) operation, where `n` is `length`."
  syntax:
    content: public static void Copy (Array sourceArray, Array destinationArray, int length);
    parameters:
    - id: sourceArray
      type: System.Array
      description: The <xref href="System.Array"></xref> that contains the data to copy.
    - id: destinationArray
      type: System.Array
      description: The <xref href="System.Array"></xref> that receives the data.
    - id: length
      type: System.Int32
      description: A 32-bit integer that represents the number of elements to copy.
  overload: System.Array.Copy*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>sourceArray</code> is `null`.  \n  \n -or-  \n  \n <code>destinationArray</code> is `null`."
  - type: System.RankException
    commentId: T:System.RankException
    description: <code>sourceArray</code> and <code>destinationArray</code> have different ranks.
  - type: System.ArrayTypeMismatchException
    commentId: T:System.ArrayTypeMismatchException
    description: <code>sourceArray</code> and <code>destinationArray</code> are of incompatible types.
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: At least one element in <code>sourceArray</code> cannot be cast to the type of <code>destinationArray</code>.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>length</code> is less than zero.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>length</code> is greater than the number of elements in <code>sourceArray</code>.  \n  \n -or-  \n  \n <code>length</code> is greater than the number of elements in <code>destinationArray</code>."
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Array.CopyTo(System.Array,System.Int32)
  commentId: M:System.Array.CopyTo(System.Array,System.Int32)
  id: CopyTo(System.Array,System.Int32)
  parent: System.Array
  langs:
  - csharp
  name: CopyTo(Array, Int32)
  nameWithType: Array.CopyTo(Array, Int32)
  fullName: Array.CopyTo(Array, Int32)
  type: Method
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Copies all the elements of the current one-dimensional array to the specified one-dimensional array starting at the specified destination array index. The index is specified as a 32-bit integer.
  remarks: "This method copies all the elements of the current array instance to the `array` destination array, starting at index `index`. The `array` destination array must already have been dimensioned and must have a sufficient number of elements to accommodate the copied elements. Otherwise, the method throws an exception.  \n  \n This method supports the <xref:System.Collections.ICollection?displayProperty=fullName> interface. If implementing <xref:System.Collections.ICollection?displayProperty=fullName> is not explicitly required, use <xref:System.Array.Copy%2A> to avoid an extra indirection.  \n  \n If this method throws an exception while copying, the state of `array` is undefined.  \n  \n This method is an O(`n`) operation, where `n` is <xref:System.Array.Length%2A>.It performs a shallow copy only."
  example:
  - "The following code example shows how to copy an <xref:System.Array> to another <xref:System.Array>.  \n  \n [!code-cpp[Classic Array.CopyTo Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Array.CopyTo Example/CPP/source.cpp#1)]\n [!code-csharp[Classic Array.CopyTo Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Array.CopyTo Example/CS/source.cs#1)]\n [!code-vb[Classic Array.CopyTo Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Array.CopyTo Example/VB/source.vb#1)]  \n  \n The following code example shows how to copy an <xref:System.Array> to another <xref:System.Array> with a nonzero lower bound. Note that the entire source <xref:System.Array> is copied, including empty elements that overwrite existing elements in the target <xref:System.Array>.  \n  \n [!code-cpp[Classic Array.CopyTo Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Array.CopyTo Example/CPP/source.cpp#2)]\n [!code-csharp[Classic Array.CopyTo Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Array.CopyTo Example/CS/source.cs#2)]\n [!code-vb[Classic Array.CopyTo Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Array.CopyTo Example/VB/source.vb#2)]"
  syntax:
    content: public void CopyTo (Array array, int index);
    parameters:
    - id: array
      type: System.Array
      description: The one-dimensional array that is the destination of the elements copied from the current array.
    - id: index
      type: System.Int32
      description: A 32-bit integer that represents the index in <code>array</code> at which copying begins.
  overload: System.Array.CopyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>array</code> is `null`.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>index</code> is less than the lower bound of <code>array</code>.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>array</code> is multidimensional.  \n  \n -or-  \n  \n The number of elements in the source array is greater than the available number of elements from <code>index</code> to the end of the destination <code>array</code>."
  - type: System.ArrayTypeMismatchException
    commentId: T:System.ArrayTypeMismatchException
    description: The type of the source <xref href="System.Array"></xref> cannot be cast automatically to the type of the destination <code>array</code>.
  - type: System.RankException
    commentId: T:System.RankException
    description: The source array is multidimensional.
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: At least one element in the source <xref href="System.Array"></xref> cannot be cast to the type of destination <code>array</code>.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Array.CopyTo(System.Array,System.Int64)
  commentId: M:System.Array.CopyTo(System.Array,System.Int64)
  id: CopyTo(System.Array,System.Int64)
  parent: System.Array
  langs:
  - csharp
  name: CopyTo(Array, Int64)
  nameWithType: Array.CopyTo(Array, Int64)
  fullName: Array.CopyTo(Array, Int64)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Copies all the elements of the current one-dimensional array to the specified one-dimensional array starting at the specified destination array index. The index is specified as a 64-bit integer.
  remarks: "This method copies all the elements of the current array instance to the `array` destination array, starting at index `index`. The `array` destination array must already have been dimensioned and must have a sufficient number of elements to accommodate the copied elements. Otherwise, the method throws an exception.  \n  \n This method supports the <xref:System.Collections.ICollection?displayProperty=fullName> interface. If implementing <xref:System.Collections.ICollection?displayProperty=fullName> is not explicitly required, use <xref:System.Array.Copy%2A> to avoid an extra indirection.  \n  \n If this method throws an exception while copying, the state of `array` is undefined.  \n  \n This method is an O(`n`) operation, where `n` is <xref:System.Array.Length%2A>.It performs a shallow copy only."
  example:
  - "The following code example shows how to copy an <xref:System.Array> to another <xref:System.Array>.  \n  \n [!code-cpp[Classic Array.CopyTo Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Array.CopyTo Example/CPP/source.cpp#1)]\n [!code-csharp[Classic Array.CopyTo Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Array.CopyTo Example/CS/source.cs#1)]\n [!code-vb[Classic Array.CopyTo Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Array.CopyTo Example/VB/source.vb#1)]  \n  \n The following code example shows how to copy an <xref:System.Array> to another <xref:System.Array> with a nonzero lower bound. Note that the entire source <xref:System.Array> is copied, including empty elements that overwrite existing elements in the target <xref:System.Array>.  \n  \n [!code-cpp[Classic Array.CopyTo Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Array.CopyTo Example/CPP/source.cpp#2)]\n [!code-csharp[Classic Array.CopyTo Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Array.CopyTo Example/CS/source.cs#2)]\n [!code-vb[Classic Array.CopyTo Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Array.CopyTo Example/VB/source.vb#2)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(false)]

      public void CopyTo (Array array, long index);
    parameters:
    - id: array
      type: System.Array
      description: The one-dimensional array that is the destination of the elements copied from the current array.
    - id: index
      type: System.Int64
      description: A 64-bit integer that represents the index in <code>array</code> at which copying begins.
  overload: System.Array.CopyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>array</code> is `null`.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>index</code> is outside the range of valid indexes for <code>array</code>.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>array</code> is multidimensional.  \n  \n -or-  \n  \n The number of elements in the source array is greater than the available number of elements from <code>index</code> to the end of the destination <code>array</code>."
  - type: System.ArrayTypeMismatchException
    commentId: T:System.ArrayTypeMismatchException
    description: The type of the source <xref href="System.Array"></xref> cannot be cast automatically to the type of the destination <code>array</code>.
  - type: System.RankException
    commentId: T:System.RankException
    description: The source <xref href="System.Array"></xref> is multidimensional.
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: At least one element in the source <xref href="System.Array"></xref> cannot be cast to the type of destination <code>array</code>.
  attributes:
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Array.CreateInstance(System.Type,System.Int32)
  commentId: M:System.Array.CreateInstance(System.Type,System.Int32)
  id: CreateInstance(System.Type,System.Int32)
  parent: System.Array
  langs:
  - csharp
  name: CreateInstance(Type, Int32)
  nameWithType: Array.CreateInstance(Type, Int32)
  fullName: Array.CreateInstance(Type, Int32)
  type: Method
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Creates a one-dimensional <xref href="System.Array"></xref> of the specified <xref href="System.Type"></xref> and length, with zero-based indexing.
  remarks: "Unlike most classes, <xref:System.Array> provides the <xref:System.Array.CreateInstance%2A> method, instead of public constructors, to allow for late bound access.  \n  \n Reference-type elements are initialized to `null`. Value-type elements are initialized to zero.  \n  \n This method is an O(`n`) operation, where `n` is `length`."
  example:
  - "The following code example shows how to create and initialize a one-dimensional <xref:System.Array>.  \n  \n [!code-cpp[Classic Array.CreateInstance Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Array.CreateInstance Example/CPP/source.cpp#1)]\n [!code-csharp[Classic Array.CreateInstance Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Array.CreateInstance Example/CS/source.cs#1)]\n [!code-vb[Classic Array.CreateInstance Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Array.CreateInstance Example/VB/source.vb#1)]"
  syntax:
    content: public static Array CreateInstance (Type elementType, int length);
    parameters:
    - id: elementType
      type: System.Type
      description: The <xref href="System.Type"></xref> of the <xref href="System.Array"></xref> to create.
    - id: length
      type: System.Int32
      description: The size of the <xref href="System.Array"></xref> to create.
    return:
      type: System.Array
      description: A new one-dimensional <xref href="System.Array"></xref> of the specified <xref href="System.Type"></xref> with the specified length, using zero-based indexing.
  overload: System.Array.CreateInstance*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>elementType</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>elementType</code> is not a valid <xref href="System.Type"></xref>.
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>elementType</code> is not supported. For example, <xref href=\"System.Void\"></xref> is not supported.  \n  \n -or-  \n  \n <code>elementType</code> is an open generic type."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>length</code> is less than zero.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Array.CreateInstance(System.Type,System.Int32[])
  commentId: M:System.Array.CreateInstance(System.Type,System.Int32[])
  id: CreateInstance(System.Type,System.Int32[])
  parent: System.Array
  langs:
  - csharp
  name: CreateInstance(Type, Int32[])
  nameWithType: Array.CreateInstance(Type, Int32[])
  fullName: Array.CreateInstance(Type, Int32[])
  type: Method
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Creates a multidimensional <xref href="System.Array"></xref> of the specified <xref href="System.Type"></xref> and dimension lengths, with zero-based indexing. The dimension lengths are specified in an array of 32-bit integers.
  remarks: "Unlike most classes, <xref:System.Array> provides the <xref:System.Array.CreateInstance%2A> method, instead of public constructors, to allow for late bound access.  \n  \n The number of elements in the `lengths` array must equal the number of dimensions in the new <xref:System.Array>. Each element of the `lengths` array must specify the length of the corresponding dimension in the new <xref:System.Array>.  \n  \n Reference-type elements are initialized to `null`. Value-type elements are initialized to zero.  \n  \n This method is an O(`n`) operation, where `n` is the product of all values in `lengths`."
  example:
  - "The following code example shows how to create and initialize a multidimensional <xref:System.Array>.  \n  \n [!code-cpp[Classic Array.CreateInstance3 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Array.CreateInstance3 Example/CPP/source.cpp#1)]\n [!code-csharp[Classic Array.CreateInstance3 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Array.CreateInstance3 Example/CS/source.cs#1)]\n [!code-vb[Classic Array.CreateInstance3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Array.CreateInstance3 Example/VB/source.vb#1)]"
  syntax:
    content: public static Array CreateInstance (Type elementType, int[] lengths);
    parameters:
    - id: elementType
      type: System.Type
      description: The <xref href="System.Type"></xref> of the <xref href="System.Array"></xref> to create.
    - id: lengths
      type: System.Int32[]
      description: An array of 32-bit integers that represent the size of each dimension of the <xref href="System.Array"></xref> to create.
    return:
      type: System.Array
      description: A new multidimensional <xref href="System.Array"></xref> of the specified <xref href="System.Type"></xref> with the specified length for each dimension, using zero-based indexing.
  overload: System.Array.CreateInstance*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>elementType</code> is `null`.  \n  \n -or-  \n  \n <code>lengths</code> is `null`."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>elementType</code> is not a valid <xref href=\"System.Type\"></xref>.  \n  \n -or-  \n  \n The <code>lengths</code> array contains less than one element."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>elementType</code> is not supported. For example, <xref href=\"System.Void\"></xref> is not supported.  \n  \n -or-  \n  \n <code>elementType</code> is an open generic type."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: Any value in <code>lengths</code> is less than zero.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Array.CreateInstance(System.Type,System.Int64[])
  commentId: M:System.Array.CreateInstance(System.Type,System.Int64[])
  id: CreateInstance(System.Type,System.Int64[])
  parent: System.Array
  langs:
  - csharp
  name: CreateInstance(Type, Int64[])
  nameWithType: Array.CreateInstance(Type, Int64[])
  fullName: Array.CreateInstance(Type, Int64[])
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Creates a multidimensional <xref href="System.Array"></xref> of the specified <xref href="System.Type"></xref> and dimension lengths, with zero-based indexing. The dimension lengths are specified in an array of 64-bit integers.
  remarks: "Unlike most classes, <xref:System.Array> provides the <xref:System.Array.CreateInstance%2A> method, instead of public constructors, to allow for late bound access.  \n  \n The number of elements in the `lengths` array must equal the number of dimensions in the new <xref:System.Array>. Each element of the `lengths` array must specify the length of the corresponding dimension in the new <xref:System.Array>.  \n  \n Reference-type elements are initialized to `null`. Value-type elements are initialized to zero.  \n  \n This method is an O(`n`) operation, where `n` is the product of all values in `lengths`."
  example:
  - "The following code example shows how to create and initialize a multidimensional <xref:System.Array>.  \n  \n [!code-cpp[Classic Array.CreateInstance3 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Array.CreateInstance3 Example/CPP/source.cpp#1)]\n [!code-csharp[Classic Array.CreateInstance3 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Array.CreateInstance3 Example/CS/source.cs#1)]\n [!code-vb[Classic Array.CreateInstance3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Array.CreateInstance3 Example/VB/source.vb#1)]"
  syntax:
    content: public static Array CreateInstance (Type elementType, long[] lengths);
    parameters:
    - id: elementType
      type: System.Type
      description: The <xref href="System.Type"></xref> of the <xref href="System.Array"></xref> to create.
    - id: lengths
      type: System.Int64[]
      description: An array of 64-bit integers that represent the size of each dimension of the <xref href="System.Array"></xref> to create. Each integer in the array must be between zero and <xref href="System.Int32.MaxValue"></xref>, inclusive.
    return:
      type: System.Array
      description: A new multidimensional <xref href="System.Array"></xref> of the specified <xref href="System.Type"></xref> with the specified length for each dimension, using zero-based indexing.
  overload: System.Array.CreateInstance*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>elementType</code> is `null`.  \n  \n -or-  \n  \n <code>lengths</code> is `null`."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>elementType</code> is not a valid <xref href=\"System.Type\"></xref>.  \n  \n -or-  \n  \n The <code>lengths</code> array contains less than one element."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>elementType</code> is not supported. For example, <xref href=\"System.Void\"></xref> is not supported.  \n  \n -or-  \n  \n <code>elementType</code> is an open generic type."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: Any value in <code>lengths</code> is less than zero or greater than <xref href="System.Int32.MaxValue"></xref>.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Array.CreateInstance(System.Type,System.Int32,System.Int32)
  commentId: M:System.Array.CreateInstance(System.Type,System.Int32,System.Int32)
  id: CreateInstance(System.Type,System.Int32,System.Int32)
  parent: System.Array
  langs:
  - csharp
  name: CreateInstance(Type, Int32, Int32)
  nameWithType: Array.CreateInstance(Type, Int32, Int32)
  fullName: Array.CreateInstance(Type, Int32, Int32)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Creates a two-dimensional <xref href="System.Array"></xref> of the specified <xref href="System.Type"></xref> and dimension lengths, with zero-based indexing.
  remarks: "Unlike most classes, <xref:System.Array> provides the<xref:System.Array.CreateInstance%2A> method, instead of public constructors, to allow for late bound access.  \n  \n Reference-type elements are initialized to `null`. Value-type elements are initialized to zero.  \n  \n This method is an O(`n`) operation, where `n` is the product of `length1` and `length2`."
  example:
  - "The following code example shows how to create and initialize a two-dimensional <xref:System.Array>.  \n  \n [!code-cpp[Classic Array.CreateInstance1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Array.CreateInstance1 Example/CPP/source.cpp#1)]\n [!code-csharp[Classic Array.CreateInstance1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Array.CreateInstance1 Example/CS/source.cs#1)]\n [!code-vb[Classic Array.CreateInstance1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Array.CreateInstance1 Example/VB/source.vb#1)]"
  syntax:
    content: public static Array CreateInstance (Type elementType, int length1, int length2);
    parameters:
    - id: elementType
      type: System.Type
      description: The <xref href="System.Type"></xref> of the <xref href="System.Array"></xref> to create.
    - id: length1
      type: System.Int32
      description: The size of the first dimension of the <xref href="System.Array"></xref> to create.
    - id: length2
      type: System.Int32
      description: The size of the second dimension of the <xref href="System.Array"></xref> to create.
    return:
      type: System.Array
      description: A new two-dimensional <xref href="System.Array"></xref> of the specified <xref href="System.Type"></xref> with the specified length for each dimension, using zero-based indexing.
  overload: System.Array.CreateInstance*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>elementType</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>elementType</code> is not a valid <xref href="System.Type"></xref>.
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>elementType</code> is not supported. For example, <xref href=\"System.Void\"></xref> is not supported.  \n  \n -or-  \n  \n <code>elementType</code> is an open generic type."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>length1</code> is less than zero.  \n  \n -or-  \n  \n <code>length2</code> is less than zero."
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Array.CreateInstance(System.Type,System.Int32[],System.Int32[])
  commentId: M:System.Array.CreateInstance(System.Type,System.Int32[],System.Int32[])
  id: CreateInstance(System.Type,System.Int32[],System.Int32[])
  parent: System.Array
  langs:
  - csharp
  name: CreateInstance(Type, Int32[], Int32[])
  nameWithType: Array.CreateInstance(Type, Int32[], Int32[])
  fullName: Array.CreateInstance(Type, Int32[], Int32[])
  type: Method
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Creates a multidimensional <xref href="System.Array"></xref> of the specified <xref href="System.Type"></xref> and dimension lengths, with the specified lower bounds.
  remarks: "Unlike most classes, <xref:System.Array> provides the <xref:System.Array.CreateInstance%2A> method, instead of public constructors, to allow for late bound access.  \n  \n The `lengths` and `lowerBounds` arrays must have the same number of elements. The number of elements in the `lengths` array must equal the number of dimensions in the new <xref:System.Array>.  \n  \n Each element of the `lengths` array must specify the length of the corresponding dimension in the new <xref:System.Array>.  \n  \n Each element of the `lowerBounds` array must specify the lower bound of the corresponding dimension in the new <xref:System.Array>. Generally, the .NET Framework class library and many programming languages do not handle nonzero lower bounds.  \n  \n Reference-type elements are initialized to `null`. Value-type elements are initialized to zero.  \n  \n This method is an O(`n`) operation, where `n` is the product of all values in `lengths`."
  example:
  - "The following code example shows how to create and initialize a multidimensional <xref:System.Array> with specified lower bounds.  \n  \n [!code-cpp[Classic Array.CreateInstance4 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Array.CreateInstance4 Example/CPP/source.cpp#1)]\n [!code-csharp[Classic Array.CreateInstance4 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Array.CreateInstance4 Example/CS/source.cs#1)]\n [!code-vb[Classic Array.CreateInstance4 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Array.CreateInstance4 Example/VB/source.vb#1)]"
  syntax:
    content: public static Array CreateInstance (Type elementType, int[] lengths, int[] lowerBounds);
    parameters:
    - id: elementType
      type: System.Type
      description: The <xref href="System.Type"></xref> of the <xref href="System.Array"></xref> to create.
    - id: lengths
      type: System.Int32[]
      description: A one-dimensional array that contains the size of each dimension of the <xref href="System.Array"></xref> to create.
    - id: lowerBounds
      type: System.Int32[]
      description: A one-dimensional array that contains the lower bound (starting index) of each dimension of the <xref href="System.Array"></xref> to create.
    return:
      type: System.Array
      description: A new multidimensional <xref href="System.Array"></xref> of the specified <xref href="System.Type"></xref> with the specified length and lower bound for each dimension.
  overload: System.Array.CreateInstance*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>elementType</code> is `null`.  \n  \n -or-  \n  \n <code>lengths</code> is `null`.  \n  \n -or-  \n  \n <code>lowerBounds</code> is `null`."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>elementType</code> is not a valid <xref href=\"System.Type\"></xref>.  \n  \n -or-  \n  \n The <code>lengths</code> array contains less than one element.  \n  \n -or-  \n  \n The <code>lengths</code> and <code>lowerBounds</code> arrays do not contain the same number of elements."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>elementType</code> is not supported. For example, <xref href=\"System.Void\"></xref> is not supported.  \n  \n -or-  \n  \n <code>elementType</code> is an open generic type."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "Any value in <code>lengths</code> is less than zero.  \n  \n -or-  \n  \n Any value in <code>lowerBounds</code> is very large, such that the sum of a dimension's lower bound and length is greater than <xref href=\"System.Int32.MaxValue\"></xref>."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Array.CreateInstance(System.Type,System.Int32,System.Int32,System.Int32)
  commentId: M:System.Array.CreateInstance(System.Type,System.Int32,System.Int32,System.Int32)
  id: CreateInstance(System.Type,System.Int32,System.Int32,System.Int32)
  parent: System.Array
  langs:
  - csharp
  name: CreateInstance(Type, Int32, Int32, Int32)
  nameWithType: Array.CreateInstance(Type, Int32, Int32, Int32)
  fullName: Array.CreateInstance(Type, Int32, Int32, Int32)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Creates a three-dimensional <xref href="System.Array"></xref> of the specified <xref href="System.Type"></xref> and dimension lengths, with zero-based indexing.
  remarks: "Unlike most classes, <xref:System.Array> provides the <xref:System.Array.CreateInstance%2A> method, instead of public constructors, to allow for late bound access.  \n  \n Reference-type elements are initialized to `null`. Value-type elements are initialized to zero.  \n  \n This method is an O(`n`) operation, where `n` is the product of `length1`, `length2`, and `length3`."
  example:
  - "The following code example shows how to create and initialize a three-dimensional <xref:System.Array>.  \n  \n [!code-cpp[Classic Array.CreateInstance2 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Array.CreateInstance2 Example/CPP/source.cpp#1)]\n [!code-csharp[Classic Array.CreateInstance2 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Array.CreateInstance2 Example/CS/source.cs#1)]\n [!code-vb[Classic Array.CreateInstance2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Array.CreateInstance2 Example/VB/source.vb#1)]"
  syntax:
    content: public static Array CreateInstance (Type elementType, int length1, int length2, int length3);
    parameters:
    - id: elementType
      type: System.Type
      description: The <xref href="System.Type"></xref> of the <xref href="System.Array"></xref> to create.
    - id: length1
      type: System.Int32
      description: The size of the first dimension of the <xref href="System.Array"></xref> to create.
    - id: length2
      type: System.Int32
      description: The size of the second dimension of the <xref href="System.Array"></xref> to create.
    - id: length3
      type: System.Int32
      description: The size of the third dimension of the <xref href="System.Array"></xref> to create.
    return:
      type: System.Array
      description: A new three-dimensional <xref href="System.Array"></xref> of the specified <xref href="System.Type"></xref> with the specified length for each dimension, using zero-based indexing.
  overload: System.Array.CreateInstance*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>elementType</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>elementType</code> is not a valid <xref href="System.Type"></xref>.
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>elementType</code> is not supported. For example, <xref href=\"System.Void\"></xref> is not supported.  \n  \n -or-  \n  \n <code>elementType</code> is an open generic type."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>length1</code> is less than zero.  \n  \n -or-  \n  \n <code>length2</code> is less than zero.  \n  \n -or-  \n  \n <code>length3</code> is less than zero."
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Array.Empty``1
  commentId: M:System.Array.Empty``1
  id: Empty``1
  parent: System.Array
  langs:
  - csharp
  name: Empty<T>()
  nameWithType: Array.Empty<T>()
  fullName: Array.Empty<T>()
  type: Method
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Returns an empty array.
  syntax:
    content: public static T[] Empty<T> ();
    parameters: []
    typeParameters:
    - id: T
      description: The type of the elements of the array.
    return:
      type: T[]
      description: Returns an empty <xref href="System.Array"></xref>.
  overload: System.Array.Empty``1*
  exceptions: []
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Array.Exists``1(``0[],System.Predicate{``0})
  commentId: M:System.Array.Exists``1(``0[],System.Predicate{``0})
  id: Exists``1(``0[],System.Predicate{``0})
  parent: System.Array
  langs:
  - csharp
  name: Exists<T>(T[], Predicate<T>)
  nameWithType: Array.Exists<T>(T[], Predicate<T>)
  fullName: Array.Exists<T>(T[], Predicate<T>)
  type: Method
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Determines whether the specified array contains elements that match the conditions defined by the specified predicate.
  remarks: "The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.  The elements of `array` are individually passed to the <xref:System.Predicate%601>, and processing is stopped when a match is found.  \n  \n> [!NOTE]\n>  In C# and Visual Basic, it is not necessary to create the <xref:System.Predicate%601> delegate explicitly. These languages infer the correct delegate from context and create it automatically.  \n  \n This method is an O(`n`) operation, where `n` is the <xref:System.Array.Length%2A> of `array`."
  example:
  - "The following example specifies the match conditions for the <xref:System.Array.Exists%2A>method usinglambda expressions to check whether a planet starts with a given letter or whether the planet is found on the given array.  \n  \n [!code-csharp[System.Array.Exists#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.array.exists/cs/exists3.cs#3)]\n [!code-vb[System.Array.Exists#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.array.exists/vb/exists3.vb#3)]  \n  \n The following example uses the <xref:System.Array.Exists%2A> method to indicate whether any names in a string array begin with a specified character. The example instantiates a `StringSearcher` object by passing the string to search for to its class constructor. The `StringSearcher.StartsWith` method has same signature as the <xref:System.Predicate%601> delegate. When the<xref:System.Array.Exists%2A> method is called, each member of the array is passed to the delegate until it returns `true` or iterates all the elements in the array.  \n  \n [!code-csharp[System.Array.Exists#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.array.exists/cs/exists1.cs#1)]\n [!code-vb[System.Array.Exists#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.array.exists/vb/exists1.vb#1)]  \n  \n You can also use a lambda expression rather than explicitly define a method whose signature corresponds to that of the delegate. The following example replaces the `StringSearcher` class and its `StartsWith` method with a lambda expression.  \n  \n [!code-csharp[System.Array.Exists#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.array.exists/cs/exists2.cs#2)]\n [!code-vb[System.Array.Exists#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.array.exists/vb/exists2.vb#2)]"
  syntax:
    content: public static bool Exists<T> (T[] array, Predicate<T> match);
    parameters:
    - id: array
      type: T[]
      description: The one-dimensional, zero-based <xref href="System.Array"></xref> to search.
    - id: match
      type: System.Predicate`1
      description: The <xref href="System.Predicate`1"></xref> that defines the conditions of the elements to search for.
    typeParameters:
    - id: T
      description: The type of the elements of the array.
    return:
      type: System.Boolean
      description: '`true` if <code>array</code> contains one or more elements that match the conditions defined by the specified predicate; otherwise, `false`.'
  overload: System.Array.Exists``1*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>array</code> is `null`.  \n  \n -or-  \n  \n <code>match</code> is `null`."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Array.Fill``1(``0[],``0)
  commentId: M:System.Array.Fill``1(``0[],``0)
  id: Fill``1(``0[],``0)
  parent: System.Array
  langs:
  - csharp
  name: Fill<T>(T[], T)
  nameWithType: Array.Fill<T>(T[], T)
  fullName: Array.Fill<T>(T[], T)
  type: Method
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: public static void Fill<T> (T[] array, T value);
    parameters:
    - id: array
      type: T[]
      description: ''
    - id: value
      type: T
      description: ''
    typeParameters:
    - id: T
      description: ''
  overload: System.Array.Fill``1*
  exceptions: []
  version:
  - netcore-2.0
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
- uid: System.Array.Fill``1(``0[],``0,System.Int32,System.Int32)
  commentId: M:System.Array.Fill``1(``0[],``0,System.Int32,System.Int32)
  id: Fill``1(``0[],``0,System.Int32,System.Int32)
  parent: System.Array
  langs:
  - csharp
  name: Fill<T>(T[], T, Int32, Int32)
  nameWithType: Array.Fill<T>(T[], T, Int32, Int32)
  fullName: Array.Fill<T>(T[], T, Int32, Int32)
  type: Method
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: public static void Fill<T> (T[] array, T value, int startIndex, int count);
    parameters:
    - id: array
      type: T[]
      description: ''
    - id: value
      type: T
      description: ''
    - id: startIndex
      type: System.Int32
      description: ''
    - id: count
      type: System.Int32
      description: ''
    typeParameters:
    - id: T
      description: ''
  overload: System.Array.Fill``1*
  exceptions: []
  version:
  - netcore-2.0
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
- uid: System.Array.Find``1(``0[],System.Predicate{``0})
  commentId: M:System.Array.Find``1(``0[],System.Predicate{``0})
  id: Find``1(``0[],System.Predicate{``0})
  parent: System.Array
  langs:
  - csharp
  name: Find<T>(T[], Predicate<T>)
  nameWithType: Array.Find<T>(T[], Predicate<T>)
  fullName: Array.Find<T>(T[], Predicate<T>)
  type: Method
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Searches for an element that matches the conditions defined by the specified predicate, and returns the first occurrence within the entire <xref href="System.Array"></xref>.
  remarks: "The <xref:System.Predicate%601> is a delegate to a method or a lambda expression that returns `true` if the object passed to it matches the conditions defined in the delegate or lambda expression.  The elements of `array` are individually passed to the <xref:System.Predicate%601>, starting with the first element and ending with the last element.  Processing is stopped when a match is found.  \n  \n This method is an O(`n`) operation, where `n` is the <xref:System.Array.Length%2A> of `array`."
  example:
  - "The following example uses a <xref:System.Predicate%601> delegate with the <xref:System.Array.Find%2A> generic method to search an array of <xref:System.Drawing.Point> structures. The method the delegate represents, `ProductGT10`, returns `true` if the product of the X and Y fields is greater than 100,000. The <xref:System.Array.Find%2A> method calls the delegate for each element of the array, returning the first point that meets the test condition.  \n  \n> [!NOTE]\n>  Visual Basic and C# users do not have to create the delegate explicitly or specify the type argument of the generic method. The compilers determine the necessary types from the method arguments you supply.  \n  \n [!code-csharp[System.Array.Find#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.array.find/cs/source.cs#1)]\n [!code-vb[System.Array.Find#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.array.find/vb/source.vb#1)]  \n  \n Rather than explicitly defining a method with the necessary signature, instantiating a <xref:System.Predicate%601> delegate, and passing the delegate to the <xref:System.Array.Find%2A> method, it is customary to use a lambda expression. The following example is identical to the previous one, except that it uses a lambda expression as the `match` argument.  \n  \n [!code-csharp[System.Array.Find#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.array.find/cs/lambda.cs#2)]\n [!code-vb[System.Array.Find#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.array.find/vb/lambda.vb#2)]"
  syntax:
    content: public static T Find<T> (T[] array, Predicate<T> match);
    parameters:
    - id: array
      type: T[]
      description: The one-dimensional, zero-based array to search.
    - id: match
      type: System.Predicate`1
      description: The predicate that defines the conditions of the element to search for.
    typeParameters:
    - id: T
      description: The type of the elements of the array.
    return:
      type: T
      description: The first element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type <code>T</code>.
  overload: System.Array.Find``1*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>array</code> is `null`.  \n  \n -or-  \n  \n <code>match</code> is `null`."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Array.FindAll``1(``0[],System.Predicate{``0})
  commentId: M:System.Array.FindAll``1(``0[],System.Predicate{``0})
  id: FindAll``1(``0[],System.Predicate{``0})
  parent: System.Array
  langs:
  - csharp
  name: FindAll<T>(T[], Predicate<T>)
  nameWithType: Array.FindAll<T>(T[], Predicate<T>)
  fullName: Array.FindAll<T>(T[], Predicate<T>)
  type: Method
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Retrieves all the elements that match the conditions defined by the specified predicate.
  remarks: "The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.  The elements of `array` are individually passed to the <xref:System.Predicate%601>, and the elements that match the conditions are saved in the returned array.  \n  \n This method is an O(`n`) operation, where `n` is the <xref:System.Array.Length%2A> of `array`."
  example:
  - "The following example creates an array of 50 random numbers with values that can range from 0 to 1,000. It then calls the <xref:System.Array.FindAll%2A> method with a lambda expression that returns the values that range from 300 to 600. Note that the lambda expression is passed a parameter named `x`;  this represents the individual array member that is passed to the <xref:System.Predicate%601>. Also note that the local `lBound` and `uBound` variables are accessible within the lambda expression.  \n  \n [!code-csharp[System.Array.FindAll#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.array.findall/cs/findall.cs#1)]\n [!code-vb[System.Array.FindAll#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.array.findall/vb/findall.vb#1)]  \n  \n The following code example demonstrates the <xref:System.Array.Find%2A>, <xref:System.Array.FindLast%2A>, and <xref:System.Array.FindAll%2A> generic methods. An array of strings is created, containing 8 dinosaur names, two of which (at positions 1 and 5) end with \"saurus\". The code example also defines a search predicate method named `EndsWithSaurus`, which accepts a string parameter and returns a Boolean value indicating whether the input string ends in \"saurus\".  \n  \n The <xref:System.Array.Find%2A> generic method traverses the array from the beginning, passing each element in turn to the `EndsWithSaurus` method. The search stops when the `EndsWithSaurus` method returns `true` for the element \"Amargasaurus\".  \n  \n> [!NOTE]\n>  In C# and Visual Basic, it is not necessary to create the `Predicate<string>` delegate (`Predicate(Of String)` in Visual Basic) explicitly. These languages infer the correct delegate from context and create it automatically.  \n  \n The <xref:System.Array.FindLast%2A> generic method is used to search the array backward from the end. It finds the element \"Dilophosaurus\" at position 5. The <xref:System.Array.FindAll%2A> generic method is used to return an array containing all the elements that end in \"saurus\". The elements are displayed.  \n  \n The code example also demonstrates the <xref:System.Array.Exists%2A> and <xref:System.Array.TrueForAll%2A> generic methods.  \n  \n [!code-cpp[Array_FindEtAl#1](~/samples/snippets/cpp/VS_Snippets_CLR/Array_FindEtAl/cpp/source.cpp#1)]\n [!code-csharp[Array_FindEtAl#1](~/samples/snippets/csharp/VS_Snippets_CLR/Array_FindEtAl/cs/source.cs#1)]\n [!code-vb[Array_FindEtAl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Array_FindEtAl/vb/source.vb#1)]"
  syntax:
    content: public static T[] FindAll<T> (T[] array, Predicate<T> match);
    parameters:
    - id: array
      type: T[]
      description: The one-dimensional, zero-based <xref href="System.Array"></xref> to search.
    - id: match
      type: System.Predicate`1
      description: The <xref href="System.Predicate`1"></xref> that defines the conditions of the elements to search for.
    typeParameters:
    - id: T
      description: The type of the elements of the array.
    return:
      type: T[]
      description: An <xref href="System.Array"></xref> containing all the elements that match the conditions defined by the specified predicate, if found; otherwise, an empty <xref href="System.Array"></xref>.
  overload: System.Array.FindAll``1*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>array</code> is `null`.  \n  \n -or-  \n  \n <code>match</code> is `null`."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Array.FindIndex``1(``0[],System.Predicate{``0})
  commentId: M:System.Array.FindIndex``1(``0[],System.Predicate{``0})
  id: FindIndex``1(``0[],System.Predicate{``0})
  parent: System.Array
  langs:
  - csharp
  name: FindIndex<T>(T[], Predicate<T>)
  nameWithType: Array.FindIndex<T>(T[], Predicate<T>)
  fullName: Array.FindIndex<T>(T[], Predicate<T>)
  type: Method
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the entire <xref href="System.Array"></xref>.
  remarks: "The <xref:System.Array> is searched forward starting at the first element and ending at the last element.  \n  \n The<xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.  The elements of `array` are individually passed to the <xref:System.Predicate%601>.  \n  \n This method is an O(`n`) operation, where `n` is the <xref:System.Array.Length%2A> of `array`."
  example:
  - "The following code example demonstrates all three overloads of the <xref:System.Array.FindIndex%2A> generic method. An array of strings is created, containing 8 dinosaur names, two of which (at positions 1 and 5) end with \"saurus\". The code example also defines a search predicate method named `EndsWithSaurus`, which accepts a string parameter and returns a Boolean value indicating whether the input string ends in \"saurus\".  \n  \n The <xref:System.Array.FindIndex%60%601%28%60%600%5B%5D%2CSystem.Predicate%7B%60%600%7D%29> method overload traverses the array from the beginning, passing each element in turn to the `EndsWithSaurus` method. The search stops when the `EndsWithSaurus` method returns `true` for the element at position 1.  \n  \n> [!NOTE]\n>  In C# and Visual Basic, it is not necessary to create the `Predicate<string>` delegate (`Predicate(Of String)` in Visual Basic) explicitly. These languages infer the correct delegate from context and create it automatically.  \n  \n The <xref:System.Array.FindIndex%60%601%28%60%600%5B%5D%2CSystem.Int32%2CSystem.Predicate%7B%60%600%7D%29> method overload is used to search the array beginning at position 2 and continuing to the end of the array. It finds the element at position 5. Finally, the <xref:System.Array.FindIndex%60%601%28%60%600%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Predicate%7B%60%600%7D%29> method overload is used to search the range of three elements beginning at position 2. It returns –1 because there are no dinosaur names in that range that end with \"saurus\".  \n  \n [!code-cpp[Array_FindIndex#1](~/samples/snippets/cpp/VS_Snippets_CLR/Array_FindIndex/cpp/source.cpp#1)]\n [!code-csharp[Array_FindIndex#1](~/samples/snippets/csharp/VS_Snippets_CLR/Array_FindIndex/cs/source.cs#1)]\n [!code-vb[Array_FindIndex#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Array_FindIndex/vb/source.vb#1)]"
  syntax:
    content: public static int FindIndex<T> (T[] array, Predicate<T> match);
    parameters:
    - id: array
      type: T[]
      description: The one-dimensional, zero-based <xref href="System.Array"></xref> to search.
    - id: match
      type: System.Predicate`1
      description: The <xref href="System.Predicate`1"></xref> that defines the conditions of the element to search for.
    typeParameters:
    - id: T
      description: The type of the elements of the array.
    return:
      type: System.Int32
      description: The zero-based index of the first occurrence of an element that matches the conditions defined by <code>match</code>, if found; otherwise, -1.
  overload: System.Array.FindIndex``1*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>array</code> is `null`.  \n  \n -or-  \n  \n <code>match</code> is `null`."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Array.FindIndex``1(``0[],System.Int32,System.Predicate{``0})
  commentId: M:System.Array.FindIndex``1(``0[],System.Int32,System.Predicate{``0})
  id: FindIndex``1(``0[],System.Int32,System.Predicate{``0})
  parent: System.Array
  langs:
  - csharp
  name: FindIndex<T>(T[], Int32, Predicate<T>)
  nameWithType: Array.FindIndex<T>(T[], Int32, Predicate<T>)
  fullName: Array.FindIndex<T>(T[], Int32, Predicate<T>)
  type: Method
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the <xref href="System.Array"></xref> that extends from the specified index to the last element.
  remarks: "The <xref:System.Array> is searched forward starting at `startIndex` and ending at the last element.  \n  \n The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.  The elements of `array` are individually passed to the <xref:System.Predicate%601>.  \n  \n This method is an O(`n`) operation, where `n` is the number of elements from `startIndex` to the end of `array`."
  example:
  - "The following code example demonstrates all three overloads of the <xref:System.Array.FindIndex%2A> generic method. An array of strings is created, containing 8 dinosaur names, two of which (at positions 1 and 5) end with \"saurus\". The code example also defines a search predicate method named `EndsWithSaurus`, which accepts a string parameter and returns a Boolean value indicating whether the input string ends in \"saurus\".  \n  \n The <xref:System.Array.FindIndex%60%601%28%60%600%5B%5D%2CSystem.Predicate%7B%60%600%7D%29> method overload traverses the array from the beginning, passing each element in turn to the `EndsWithSaurus` method. The search stops when the `EndsWithSaurus` method returns `true` for the element at position 1.  \n  \n> [!NOTE]\n>  In C# and Visual Basic, it is not necessary to create the `Predicate<string>` delegate (`Predicate(Of String)` in Visual Basic) explicitly. These languages infer the correct delegate from context and create it automatically.  \n  \n The <xref:System.Array.FindIndex%60%601%28%60%600%5B%5D%2CSystem.Int32%2CSystem.Predicate%7B%60%600%7D%29> method overload is used to search the array beginning at position 2 and continuing to the end of the array. It finds the element at position 5. Finally, the <xref:System.Array.FindIndex%60%601%28%60%600%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Predicate%7B%60%600%7D%29> method overload is used to search the range of three elements beginning at position 2. It returns –1 because there are no dinosaur names in that range that end with \"saurus\".  \n  \n [!code-cpp[Array_FindIndex#1](~/samples/snippets/cpp/VS_Snippets_CLR/Array_FindIndex/cpp/source.cpp#1)]\n [!code-csharp[Array_FindIndex#1](~/samples/snippets/csharp/VS_Snippets_CLR/Array_FindIndex/cs/source.cs#1)]\n [!code-vb[Array_FindIndex#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Array_FindIndex/vb/source.vb#1)]"
  syntax:
    content: public static int FindIndex<T> (T[] array, int startIndex, Predicate<T> match);
    parameters:
    - id: array
      type: T[]
      description: The one-dimensional, zero-based <xref href="System.Array"></xref> to search.
    - id: startIndex
      type: System.Int32
      description: The zero-based starting index of the search.
    - id: match
      type: System.Predicate`1
      description: The <xref href="System.Predicate`1"></xref> that defines the conditions of the element to search for.
    typeParameters:
    - id: T
      description: The type of the elements of the array.
    return:
      type: System.Int32
      description: The zero-based index of the first occurrence of an element that matches the conditions defined by <code>match</code>, if found; otherwise, -1.
  overload: System.Array.FindIndex``1*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>array</code> is `null`.  \n  \n -or-  \n  \n <code>match</code> is `null`."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>startIndex</code> is outside the range of valid indexes for <code>array</code>.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Array.FindIndex``1(``0[],System.Int32,System.Int32,System.Predicate{``0})
  commentId: M:System.Array.FindIndex``1(``0[],System.Int32,System.Int32,System.Predicate{``0})
  id: FindIndex``1(``0[],System.Int32,System.Int32,System.Predicate{``0})
  parent: System.Array
  langs:
  - csharp
  name: FindIndex<T>(T[], Int32, Int32, Predicate<T>)
  nameWithType: Array.FindIndex<T>(T[], Int32, Int32, Predicate<T>)
  fullName: Array.FindIndex<T>(T[], Int32, Int32, Predicate<T>)
  type: Method
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the <xref href="System.Array"></xref> that starts at the specified index and contains the specified number of elements.
  remarks: "The <xref:System.Array> is searched forward starting at `startIndex` and ending at `startIndex` plus `count` minus 1, if `count` is greater than 0.  \n  \n The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.  The elements of `array` are individually passed to the <xref:System.Predicate%601>.  \n  \n This method is an O(`n`) operation, where `n` is `count`."
  example:
  - "The following code example demonstrates all three overloads of the <xref:System.Array.FindIndex%2A> generic method. An array of strings is created, containing 8 dinosaur names, two of which (at positions 1 and 5) end with \"saurus\". The code example also defines a search predicate method named `EndsWithSaurus`, which accepts a string parameter and returns a Boolean value indicating whether the input string ends in \"saurus\".  \n  \n The <xref:System.Array.FindIndex%60%601%28%60%600%5B%5D%2CSystem.Predicate%7B%60%600%7D%29> method overload traverses the array from the beginning, passing each element in turn to the `EndsWithSaurus` method. The search stops when the `EndsWithSaurus` method returns `true` for the element at position 1.  \n  \n> [!NOTE]\n>  In C# and Visual Basic, it is not necessary to create the `Predicate<string>` delegate (`Predicate(Of String)` in Visual Basic) explicitly. These languages infer the correct delegate from context and create it automatically.  \n  \n The <xref:System.Array.FindIndex%60%601%28%60%600%5B%5D%2CSystem.Int32%2CSystem.Predicate%7B%60%600%7D%29> method overload is used to search the array beginning at position 2 and continuing to the end of the array. It finds the element at position 5. Finally, the <xref:System.Array.FindIndex%60%601%28%60%600%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Predicate%7B%60%600%7D%29> method overload is used to search the range of three elements beginning at position 2. It returns –1 because there are no dinosaur names in that range that end with \"saurus\".  \n  \n [!code-cpp[Array_FindIndex#1](~/samples/snippets/cpp/VS_Snippets_CLR/Array_FindIndex/cpp/source.cpp#1)]\n [!code-csharp[Array_FindIndex#1](~/samples/snippets/csharp/VS_Snippets_CLR/Array_FindIndex/cs/source.cs#1)]\n [!code-vb[Array_FindIndex#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Array_FindIndex/vb/source.vb#1)]"
  syntax:
    content: public static int FindIndex<T> (T[] array, int startIndex, int count, Predicate<T> match);
    parameters:
    - id: array
      type: T[]
      description: The one-dimensional, zero-based <xref href="System.Array"></xref> to search.
    - id: startIndex
      type: System.Int32
      description: The zero-based starting index of the search.
    - id: count
      type: System.Int32
      description: The number of elements in the section to search.
    - id: match
      type: System.Predicate`1
      description: The <xref href="System.Predicate`1"></xref> that defines the conditions of the element to search for.
    typeParameters:
    - id: T
      description: The type of the elements of the array.
    return:
      type: System.Int32
      description: The zero-based index of the first occurrence of an element that matches the conditions defined by <code>match</code>, if found; otherwise, -1.
  overload: System.Array.FindIndex``1*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>array</code> is `null`.  \n  \n -or-  \n  \n <code>match</code> is `null`."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>startIndex</code> is outside the range of valid indexes for <code>array</code>.  \n  \n -or-  \n  \n <code>count</code> is less than zero.  \n  \n -or-  \n  \n <code>startIndex</code> and <code>count</code> do not specify a valid section in <code>array</code>."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Array.FindLast``1(``0[],System.Predicate{``0})
  commentId: M:System.Array.FindLast``1(``0[],System.Predicate{``0})
  id: FindLast``1(``0[],System.Predicate{``0})
  parent: System.Array
  langs:
  - csharp
  name: FindLast<T>(T[], Predicate<T>)
  nameWithType: Array.FindLast<T>(T[], Predicate<T>)
  fullName: Array.FindLast<T>(T[], Predicate<T>)
  type: Method
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Searches for an element that matches the conditions defined by the specified predicate, and returns the last occurrence within the entire <xref href="System.Array"></xref>.
  remarks: "The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.  The elements of `array` are individually passed to the <xref:System.Predicate%601>, moving backward in the <xref:System.Array>, starting with the last element and ending with the first element.  Processing is stopped when a match is found.  \n  \n This method is an O(`n`) operation, where `n` is the <xref:System.Array.Length%2A> of `array`."
  example:
  - "The following code example demonstrates the <xref:System.Array.Find%2A>, <xref:System.Array.FindLast%2A>, and <xref:System.Array.FindAll%2A> generic methods. An array of strings is created, containing 8 dinosaur names, two of which (at positions 1 and 5) end with \"saurus\". The code example also defines a search predicate method named `EndsWithSaurus`, which accepts a string parameter and returns a Boolean value indicating whether the input string ends in \"saurus\".  \n  \n The <xref:System.Array.Find%2A> generic method traverses the array from the beginning, passing each element in turn to the `EndsWithSaurus` method. The search stops when the `EndsWithSaurus` method returns `true` for the element \"Amargasaurus\".  \n  \n> [!NOTE]\n>  In C# and Visual Basic, it is not necessary to create the`Predicate<string>` delegate (`Predicate(Of String)` in Visual Basic) explicitly. These languages infer the correct delegate from context and create it automatically.  \n  \n The <xref:System.Array.FindLast%2A> generic method is used to search the array backward from the end. It finds the element \"Dilophosaurus\" at position 5. The <xref:System.Array.FindAll%2A> generic method is used to return an array containing all the elements that end in \"saurus\". The elements are displayed.  \n  \n The code example also demonstrates the <xref:System.Array.Exists%2A> and <xref:System.Array.TrueForAll%2A> generic methods.  \n  \n [!code-cpp[Array_FindEtAl#1](~/samples/snippets/cpp/VS_Snippets_CLR/Array_FindEtAl/cpp/source.cpp#1)]\n [!code-csharp[Array_FindEtAl#1](~/samples/snippets/csharp/VS_Snippets_CLR/Array_FindEtAl/cs/source.cs#1)]\n [!code-vb[Array_FindEtAl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Array_FindEtAl/vb/source.vb#1)]"
  syntax:
    content: public static T FindLast<T> (T[] array, Predicate<T> match);
    parameters:
    - id: array
      type: T[]
      description: The one-dimensional, zero-based <xref href="System.Array"></xref> to search.
    - id: match
      type: System.Predicate`1
      description: The <xref href="System.Predicate`1"></xref> that defines the conditions of the element to search for.
    typeParameters:
    - id: T
      description: The type of the elements of the array.
    return:
      type: T
      description: The last element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type <code>T</code>.
  overload: System.Array.FindLast``1*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>array</code> is `null`.  \n  \n -or-  \n  \n <code>match</code> is `null`."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Array.FindLastIndex``1(``0[],System.Predicate{``0})
  commentId: M:System.Array.FindLastIndex``1(``0[],System.Predicate{``0})
  id: FindLastIndex``1(``0[],System.Predicate{``0})
  parent: System.Array
  langs:
  - csharp
  name: FindLastIndex<T>(T[], Predicate<T>)
  nameWithType: Array.FindLastIndex<T>(T[], Predicate<T>)
  fullName: Array.FindLastIndex<T>(T[], Predicate<T>)
  type: Method
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the entire <xref href="System.Array"></xref>.
  remarks: "The <xref:System.Array> is searched backward starting at the last element and ending at the first element.  \n  \n The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.  The elements of `array` are individually passed to the <xref:System.Predicate%601>.  \n  \n This method is an O(`n`) operation, where `n` is the <xref:System.Array.Length%2A> of `array`."
  example:
  - "The following code example demonstrates all three overloads of the <xref:System.Array.FindLastIndex%2A> generic method. An array of strings is created, containing 8 dinosaur names, two of which (at positions 1 and 5) end with \"saurus\". The code example also defines a search predicate method named `EndsWithSaurus`, which accepts a string parameter and returns a Boolean value indicating whether the input string ends in \"saurus\".  \n  \n The <xref:System.Array.FindLastIndex%60%601%28%60%600%5B%5D%2CSystem.Predicate%7B%60%600%7D%29> method overload traverses the array backward from the end, passing each element in turn to the `EndsWithSaurus` method. The search stops when the `EndsWithSaurus` method returns `true` for the element at position 5.  \n  \n> [!NOTE]\n>  In C# and Visual Basic, it is not necessary to create the `Predicate<string>` delegate (`Predicate(Of String)` in Visual Basic) explicitly. These languages infer the correct delegate from context and create it automatically.  \n  \n The <xref:System.Array.FindLastIndex%60%601%28%60%600%5B%5D%2CSystem.Int32%2CSystem.Predicate%7B%60%600%7D%29> method overload is used to search the array beginning at position 4 and continuing backward to the beginning of the array. It finds the element at position 1. Finally, the <xref:System.Array.FindLastIndex%60%601%28%60%600%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Predicate%7B%60%600%7D%29> method overload is used to search the range of three elements beginning at position 4 and working backward (that is, elements 4, 3, and 2). It returns –1 because there are no dinosaur names in that range that end with \"saurus\".  \n  \n [!code-cpp[Array_FindLastIndex#1](~/samples/snippets/cpp/VS_Snippets_CLR/Array_FindLastIndex/cpp/source.cpp#1)]\n [!code-csharp[Array_FindLastIndex#1](~/samples/snippets/csharp/VS_Snippets_CLR/Array_FindLastIndex/cs/source.cs#1)]\n [!code-vb[Array_FindLastIndex#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Array_FindLastIndex/vb/source.vb#1)]"
  syntax:
    content: public static int FindLastIndex<T> (T[] array, Predicate<T> match);
    parameters:
    - id: array
      type: T[]
      description: The one-dimensional, zero-based <xref href="System.Array"></xref> to search.
    - id: match
      type: System.Predicate`1
      description: The <xref href="System.Predicate`1"></xref> that defines the conditions of the element to search for.
    typeParameters:
    - id: T
      description: The type of the elements of the array.
    return:
      type: System.Int32
      description: The zero-based index of the last occurrence of an element that matches the conditions defined by <code>match</code>, if found; otherwise, –1.
  overload: System.Array.FindLastIndex``1*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>array</code> is `null`.  \n  \n -or-  \n  \n <code>match</code> is `null`."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Array.FindLastIndex``1(``0[],System.Int32,System.Predicate{``0})
  commentId: M:System.Array.FindLastIndex``1(``0[],System.Int32,System.Predicate{``0})
  id: FindLastIndex``1(``0[],System.Int32,System.Predicate{``0})
  parent: System.Array
  langs:
  - csharp
  name: FindLastIndex<T>(T[], Int32, Predicate<T>)
  nameWithType: Array.FindLastIndex<T>(T[], Int32, Predicate<T>)
  fullName: Array.FindLastIndex<T>(T[], Int32, Predicate<T>)
  type: Method
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the <xref href="System.Array"></xref> that extends from the first element to the specified index.
  remarks: "The <xref:System.Array> is searched backward starting at `startIndex` and ending at the first element.  \n  \n The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.  The elements of `array` are individually passed to the <xref:System.Predicate%601>.  \n  \n This method is an O(`n`) operation, where `n` is the number of elements from the beginning of `array` to `startIndex`."
  example:
  - "The following code example demonstrates all three overloads of the <xref:System.Array.FindLastIndex%2A> generic method. An array of strings is created, containing 8 dinosaur names, two of which (at positions 1 and 5) end with \"saurus\". The code example also defines a search predicate method named `EndsWithSaurus`, which accepts a string parameter and returns a Boolean value indicating whether the input string ends in \"saurus\".  \n  \n The <xref:System.Array.FindLastIndex%60%601%28%60%600%5B%5D%2CSystem.Predicate%7B%60%600%7D%29> method overload traverses the array backward from the end, passing each element in turn to the `EndsWithSaurus` method. The search stops when the `EndsWithSaurus` method returns `true` for the element at position 5.  \n  \n> [!NOTE]\n>  In C# and Visual Basic, it is not necessary to create the `Predicate<string>` delegate (`Predicate(Of String)` in Visual Basic) explicitly. These languages infer the correct delegate from context and create it automatically.  \n  \n The <xref:System.Array.FindLastIndex%60%601%28%60%600%5B%5D%2CSystem.Int32%2CSystem.Predicate%7B%60%600%7D%29> method overload is used to search the array beginning at position 4 and continuing backward to the beginning of the array. It finds the element at position 1. Finally, the <xref:System.Array.FindLastIndex%60%601%28%60%600%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Predicate%7B%60%600%7D%29> method overload is used to search the range of three elements beginning at position 4 and working backward (that is, elements 4, 3, and 2). It returns –1 because there are no dinosaur names in that range that end with \"saurus\".  \n  \n [!code-cpp[Array_FindLastIndex#1](~/samples/snippets/cpp/VS_Snippets_CLR/Array_FindLastIndex/cpp/source.cpp#1)]\n [!code-csharp[Array_FindLastIndex#1](~/samples/snippets/csharp/VS_Snippets_CLR/Array_FindLastIndex/cs/source.cs#1)]\n [!code-vb[Array_FindLastIndex#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Array_FindLastIndex/vb/source.vb#1)]"
  syntax:
    content: public static int FindLastIndex<T> (T[] array, int startIndex, Predicate<T> match);
    parameters:
    - id: array
      type: T[]
      description: The one-dimensional, zero-based <xref href="System.Array"></xref> to search.
    - id: startIndex
      type: System.Int32
      description: The zero-based starting index of the backward search.
    - id: match
      type: System.Predicate`1
      description: The <xref href="System.Predicate`1"></xref> that defines the conditions of the element to search for.
    typeParameters:
    - id: T
      description: The type of the elements of the array.
    return:
      type: System.Int32
      description: The zero-based index of the last occurrence of an element that matches the conditions defined by <code>match</code>, if found; otherwise, –1.
  overload: System.Array.FindLastIndex``1*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>array</code> is `null`.  \n  \n -or-  \n  \n <code>match</code> is `null`."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>startIndex</code> is outside the range of valid indexes for <code>array</code>.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Array.FindLastIndex``1(``0[],System.Int32,System.Int32,System.Predicate{``0})
  commentId: M:System.Array.FindLastIndex``1(``0[],System.Int32,System.Int32,System.Predicate{``0})
  id: FindLastIndex``1(``0[],System.Int32,System.Int32,System.Predicate{``0})
  parent: System.Array
  langs:
  - csharp
  name: FindLastIndex<T>(T[], Int32, Int32, Predicate<T>)
  nameWithType: Array.FindLastIndex<T>(T[], Int32, Int32, Predicate<T>)
  fullName: Array.FindLastIndex<T>(T[], Int32, Int32, Predicate<T>)
  type: Method
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the <xref href="System.Array"></xref> that contains the specified number of elements and ends at the specified index.
  remarks: "The <xref:System.Array> is searched backward starting at `startIndex` and ending at `startIndex` minus `count` plus 1, if `count` is greater than 0.  \n  \n The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.  The elements of `array` are individually passed to the <xref:System.Predicate%601>.  \n  \n This method is an O(`n`) operation, where `n` is `count`."
  example:
  - "The following code example demonstrates all three overloads of the <xref:System.Array.FindLastIndex%2A> generic method. An array of strings is created, containing 8 dinosaur names, two of which (at positions 1 and 5) end with \"saurus\". The code example also defines a search predicate method named `EndsWithSaurus`, which accepts a string parameter and returns a Boolean value indicating whether the input string ends in \"saurus\".  \n  \n The <xref:System.Array.FindLastIndex%60%601%28%60%600%5B%5D%2CSystem.Predicate%7B%60%600%7D%29> method overload traverses the array backward from the end, passing each element in turn to the `EndsWithSaurus` method. The search stops when the `EndsWithSaurus` method returns `true` for the element at position 5.  \n  \n> [!NOTE]\n>  In C# and Visual Basic, it is not necessary to create the `Predicate<string>` delegate (`Predicate(Of String)` in Visual Basic) explicitly. These languages infer the correct delegate from context and create it automatically.  \n  \n The <xref:System.Array.FindLastIndex%60%601%28%60%600%5B%5D%2CSystem.Int32%2CSystem.Predicate%7B%60%600%7D%29> method overload is used to search the array beginning at position 4 and continuing backward to the beginning of the array. It finds the element at position 1. Finally, the <xref:System.Array.FindLastIndex%60%601%28%60%600%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Predicate%7B%60%600%7D%29> method overload is used to search the range of three elements beginning at position 4 and working backward (that is, elements 4, 3, and 2). It returns –1 because there are no dinosaur names in that range that end with \"saurus\".  \n  \n [!code-cpp[Array_FindLastIndex#1](~/samples/snippets/cpp/VS_Snippets_CLR/Array_FindLastIndex/cpp/source.cpp#1)]\n [!code-csharp[Array_FindLastIndex#1](~/samples/snippets/csharp/VS_Snippets_CLR/Array_FindLastIndex/cs/source.cs#1)]\n [!code-vb[Array_FindLastIndex#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Array_FindLastIndex/vb/source.vb#1)]"
  syntax:
    content: public static int FindLastIndex<T> (T[] array, int startIndex, int count, Predicate<T> match);
    parameters:
    - id: array
      type: T[]
      description: The one-dimensional, zero-based <xref href="System.Array"></xref> to search.
    - id: startIndex
      type: System.Int32
      description: The zero-based starting index of the backward search.
    - id: count
      type: System.Int32
      description: The number of elements in the section to search.
    - id: match
      type: System.Predicate`1
      description: The <xref href="System.Predicate`1"></xref> that defines the conditions of the element to search for.
    typeParameters:
    - id: T
      description: The type of the elements of the array.
    return:
      type: System.Int32
      description: The zero-based index of the last occurrence of an element that matches the conditions defined by <code>match</code>, if found; otherwise, –1.
  overload: System.Array.FindLastIndex``1*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>array</code> is `null`.  \n  \n -or-  \n  \n <code>match</code> is `null`."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>startIndex</code> is outside the range of valid indexes for <code>array</code>.  \n  \n -or-  \n  \n <code>count</code> is less than zero.  \n  \n -or-  \n  \n <code>startIndex</code> and <code>count</code> do not specify a valid section in <code>array</code>."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Array.ForEach``1(``0[],System.Action{``0})
  commentId: M:System.Array.ForEach``1(``0[],System.Action{``0})
  id: ForEach``1(``0[],System.Action{``0})
  parent: System.Array
  langs:
  - csharp
  name: ForEach<T>(T[], Action<T>)
  nameWithType: Array.ForEach<T>(T[], Action<T>)
  fullName: Array.ForEach<T>(T[], Action<T>)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Performs the specified action on each element of the specified array.
  remarks: "The <xref:System.Action%601> is a delegate to a method that performs an action on the object passed to it.  The elements of `array` are individually passed to the <xref:System.Action%601>.  \n  \n This method is an O(`n`) operation, where `n` is the <xref:System.Array.Length%2A> of `array`."
  example:
  - "The following example shows how to use <xref:System.Array.ForEach%2A> to display the squares of each element in an integer array.  \n  \n [!code-cpp[System.Array.ForEach#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.array.foreach/cpp/source.cpp#1)]\n [!code-csharp[System.Array.ForEach#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.array.foreach/cs/source.cs#1)]\n [!code-vb[System.Array.ForEach#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.array.foreach/vb/source.vb#1)]"
  syntax:
    content: public static void ForEach<T> (T[] array, Action<T> action);
    parameters:
    - id: array
      type: T[]
      description: The one-dimensional, zero-based <xref href="System.Array"></xref> on whose elements the action is to be performed.
    - id: action
      type: System.Action`1
      description: The <xref href="System.Action`1"></xref> to perform on each element of <code>array</code>.
    typeParameters:
    - id: T
      description: The type of the elements of the array.
  overload: System.Array.ForEach``1*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>array</code> is `null`.  \n  \n -or-  \n  \n <code>action</code> is `null`."
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Array.GetEnumerator
  commentId: M:System.Array.GetEnumerator
  id: GetEnumerator
  parent: System.Array
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: Array.GetEnumerator()
  fullName: Array.GetEnumerator()
  type: Method
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Returns an <xref href="System.Collections.IEnumerator"></xref> for the <xref href="System.Array"></xref>.
  remarks: "[Visual Basic, C#]  \n  \n The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) hides the complexity of the enumerators. Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.  \n  \n Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.  \n  \n Initially, the enumerator is positioned before the first element in the collection. <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.  At this position, <xref:System.Collections.IEnumerator.Current%2A> is undefined. Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.  \n  \n <xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.  \n  \n If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`. When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`. If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined. To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.  \n  \n An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.  \n  \n The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.  \n  \n This method is an O(1) operation."
  example:
  - "The following code example shows how to use <xref:System.Array.GetEnumerator%2A> to list the elements of an array.  \n  \n [!code-cpp[System.Array_GetEnumerator#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Array_GetEnumerator/CPP/array_getenumerator.cpp#1)]\n [!code-csharp[System.Array_GetEnumerator#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Array_GetEnumerator/CS/array_getenumerator.cs#1)]\n [!code-vb[System.Array_GetEnumerator#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Array_GetEnumerator/VB/array_getenumerator.vb#1)]"
  syntax:
    content: public System.Collections.IEnumerator GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: An <xref href="System.Collections.IEnumerator"></xref> for the <xref href="System.Array"></xref>.
  overload: System.Array.GetEnumerator*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Array.GetLength(System.Int32)
  commentId: M:System.Array.GetLength(System.Int32)
  id: GetLength(System.Int32)
  parent: System.Array
  langs:
  - csharp
  name: GetLength(Int32)
  nameWithType: Array.GetLength(Int32)
  fullName: Array.GetLength(Int32)
  type: Method
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Gets a 32-bit integer that represents the number of elements in the specified dimension of the <xref href="System.Array"></xref>.
  remarks: "An example of <xref:System.Array.GetLength%2A> is `GetLength(0)`, which returns the number of elements in the first dimension of the <xref:System.Array>.  \n  \n This method is an O(1) operation."
  example:
  - "The following example shows how to use <xref:System.Array.GetLength%2A> to display the dimensions of two arrays with different ranks.  \n  \n [!code-cpp[System.Array.GetLength#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.array.getlength/cpp/source.cpp#1)]\n [!code-csharp[System.Array.GetLength#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.array.getlength/cs/source.cs#1)]\n [!code-vb[System.Array.GetLength#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.array.getlength/vb/source.vb#1)]"
  syntax:
    content: public int GetLength (int dimension);
    parameters:
    - id: dimension
      type: System.Int32
      description: A zero-based dimension of the <xref href="System.Array"></xref> whose length needs to be determined.
    return:
      type: System.Int32
      description: A 32-bit integer that represents the number of elements in the specified dimension.
  overload: System.Array.GetLength*
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "<code>dimension</code> is less than zero.  \n  \n -or-  \n  \n <code>dimension</code> is equal to or greater than <xref href=\"System.Array.Rank\"></xref>."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Array.GetLongLength(System.Int32)
  commentId: M:System.Array.GetLongLength(System.Int32)
  id: GetLongLength(System.Int32)
  parent: System.Array
  langs:
  - csharp
  name: GetLongLength(Int32)
  nameWithType: Array.GetLongLength(Int32)
  fullName: Array.GetLongLength(Int32)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Gets a 64-bit integer that represents the number of elements in the specified dimension of the <xref href="System.Array"></xref>.
  remarks: "An example of <xref:System.Array.GetLongLength%2A> is `GetLongLength(0)`, which returns the number of elements in the first dimension of the <xref:System.Array>.  \n  \n This method is an O(1) operation."
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(false)]

      public long GetLongLength (int dimension);
    parameters:
    - id: dimension
      type: System.Int32
      description: A zero-based dimension of the <xref href="System.Array"></xref> whose length needs to be determined.
    return:
      type: System.Int64
      description: A 64-bit integer that represents the number of elements in the specified dimension.
  overload: System.Array.GetLongLength*
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "<code>dimension</code> is less than zero.  \n  \n -or-  \n  \n <code>dimension</code> is equal to or greater than <xref href=\"System.Array.Rank\"></xref>."
  attributes:
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Array.GetLowerBound(System.Int32)
  commentId: M:System.Array.GetLowerBound(System.Int32)
  id: GetLowerBound(System.Int32)
  parent: System.Array
  langs:
  - csharp
  name: GetLowerBound(Int32)
  nameWithType: Array.GetLowerBound(Int32)
  fullName: Array.GetLowerBound(Int32)
  type: Method
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Gets the index of the first element of the specified dimension in the array.
  remarks: "`GetLowerBound(0)` returns the starting index of the first dimension of the array, and `GetLowerBound(Rank - 1)` returns the starting index of the last dimension of the array.  \n  \n The <xref:System.Array.GetLowerBound%2A> method always returns a value that indicates the index of the lower bound of the array, even if the array is empty.  \n  \n Note that, although most arrays in the .NET Framework are zero-based (that is, the <xref:System.Array.GetLowerBound%2A> method returns zero for each dimension of an array), the .NET Framework does support arrays that are not zero-based. Such arrays can be created with the <xref:System.Array.CreateInstance%28System.Type%2CSystem.Int32%5B%5D%2CSystem.Int32%5B%5D%29> method, and can also be returned from unmanaged code.  \n  \n This method is an O(1) operation."
  example:
  - "The following example uses the <xref:System.Array.GetLowerBound%2A> and <xref:System.Array.GetUpperBound%2A> methods to display the bounds of a one-dimensional and two-dimensional array and to display the values of their array elements.  \n  \n [!code-cpp[System.Array.GetUpperBound#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.array.getupperbound/cpp/source.cpp#1)]\n [!code-csharp[System.Array.GetUpperBound#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.array.getupperbound/cs/source.cs#1)]\n [!code-vb[System.Array.GetUpperBound#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.array.getupperbound/vb/source.vb#1)]"
  syntax:
    content: public int GetLowerBound (int dimension);
    parameters:
    - id: dimension
      type: System.Int32
      description: A zero-based dimension of the array whose starting index needs to be determined.
    return:
      type: System.Int32
      description: The index of the first element of the specified dimension in the array.
  overload: System.Array.GetLowerBound*
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "<code>dimension</code> is less than zero.  \n  \n -or-  \n  \n <code>dimension</code> is equal to or greater than <xref href=\"System.Array.Rank\"></xref>."
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Array.GetUpperBound(System.Int32)
  commentId: M:System.Array.GetUpperBound(System.Int32)
  id: GetUpperBound(System.Int32)
  parent: System.Array
  langs:
  - csharp
  name: GetUpperBound(Int32)
  nameWithType: Array.GetUpperBound(Int32)
  fullName: Array.GetUpperBound(Int32)
  type: Method
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Gets the index of the last element of the specified dimension in the array.
  remarks: "`GetUpperBound(0)` returns the last index in the first dimension of the array, and `GetUpperBound(Rank - 1)` returns the last index of the last dimension of the array.  \n  \n This method is an O(1) operation."
  example:
  - "The following example uses the <xref:System.Array.GetLowerBound%2A> and <xref:System.Array.GetUpperBound%2A> methods to display the bounds of a one-dimensional and two-dimensional array and to display the values of their array elements.  \n  \n [!code-cpp[System.Array.GetUpperBound#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.array.getupperbound/cpp/source.cpp#1)]\n [!code-csharp[System.Array.GetUpperBound#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.array.getupperbound/cs/source.cs#1)]\n [!code-vb[System.Array.GetUpperBound#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.array.getupperbound/vb/source.vb#1)]"
  syntax:
    content: public int GetUpperBound (int dimension);
    parameters:
    - id: dimension
      type: System.Int32
      description: A zero-based dimension of the array whose upper bound needs to be determined.
    return:
      type: System.Int32
      description: The index of the last element of the specified dimension in the array, or -1 if the specified dimension is empty.
  overload: System.Array.GetUpperBound*
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "<code>dimension</code> is less than zero.  \n  \n -or-  \n  \n <code>dimension</code> is equal to or greater than <xref href=\"System.Array.Rank\"></xref>."
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Array.GetValue(System.Int64,System.Int64,System.Int64)
  commentId: M:System.Array.GetValue(System.Int64,System.Int64,System.Int64)
  id: GetValue(System.Int64,System.Int64,System.Int64)
  parent: System.Array
  langs:
  - csharp
  name: GetValue(Int64, Int64, Int64)
  nameWithType: Array.GetValue(Int64, Int64, Int64)
  fullName: Array.GetValue(Int64, Int64, Int64)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Gets the value at the specified position in the three-dimensional <xref href="System.Array"></xref>. The indexes are specified as 64-bit integers.
  remarks: "The <xref:System.Array.GetLowerBound%2A> and <xref:System.Array.GetUpperBound%2A> methods can determine whether any of the indexes is out of bounds.  \n  \n This method is an O(1) operation."
  example:
  - "The following code example demonstrates how to set and get a specific value in a one-dimensional or multidimensional array.  \n  \n [!code-cpp[System.Array_GetSetValue#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Array_GetSetValue/CPP/array_getsetvalue.cpp#1)]\n [!code-csharp[System.Array_GetSetValue#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Array_GetSetValue/CS/array_getsetvalue.cs#1)]\n [!code-vb[System.Array_GetSetValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Array_GetSetValue/VB/array_getsetvalue.vb#1)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(false)]

      public object GetValue (long index1, long index2, long index3);
    parameters:
    - id: index1
      type: System.Int64
      description: A 64-bit integer that represents the first-dimension index of the <xref href="System.Array"></xref> element to get.
    - id: index2
      type: System.Int64
      description: A 64-bit integer that represents the second-dimension index of the <xref href="System.Array"></xref> element to get.
    - id: index3
      type: System.Int64
      description: A 64-bit integer that represents the third-dimension index of the <xref href="System.Array"></xref> element to get.
    return:
      type: System.Object
      description: The value at the specified position in the three-dimensional <xref href="System.Array"></xref>.
  overload: System.Array.GetValue*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The current <xref href="System.Array"></xref> does not have exactly three dimensions.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>index1</code> or <code>index2</code> or <code>index3</code> is outside the range of valid indexes for the corresponding dimension of the current <xref href="System.Array"></xref>.
  attributes:
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Array.GetValue(System.Int32,System.Int32,System.Int32)
  commentId: M:System.Array.GetValue(System.Int32,System.Int32,System.Int32)
  id: GetValue(System.Int32,System.Int32,System.Int32)
  parent: System.Array
  langs:
  - csharp
  name: GetValue(Int32, Int32, Int32)
  nameWithType: Array.GetValue(Int32, Int32, Int32)
  fullName: Array.GetValue(Int32, Int32, Int32)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Gets the value at the specified position in the three-dimensional <xref href="System.Array"></xref>. The indexes are specified as 32-bit integers.
  remarks: "The <xref:System.Array.GetLowerBound%2A> and <xref:System.Array.GetUpperBound%2A> methods can determine whether any of the indexes is out of bounds.  \n  \n This method is an O(1) operation."
  example:
  - "The following code example demonstrates how to set and get a specific value in a one-dimensional or multidimensional array.  \n  \n [!code-cpp[System.Array_GetSetValue#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Array_GetSetValue/CPP/array_getsetvalue.cpp#1)]\n [!code-csharp[System.Array_GetSetValue#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Array_GetSetValue/CS/array_getsetvalue.cs#1)]\n [!code-vb[System.Array_GetSetValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Array_GetSetValue/VB/array_getsetvalue.vb#1)]"
  syntax:
    content: public object GetValue (int index1, int index2, int index3);
    parameters:
    - id: index1
      type: System.Int32
      description: A 32-bit integer that represents the first-dimension index of the <xref href="System.Array"></xref> element to get.
    - id: index2
      type: System.Int32
      description: A 32-bit integer that represents the second-dimension index of the <xref href="System.Array"></xref> element to get.
    - id: index3
      type: System.Int32
      description: A 32-bit integer that represents the third-dimension index of the <xref href="System.Array"></xref> element to get.
    return:
      type: System.Object
      description: The value at the specified position in the three-dimensional <xref href="System.Array"></xref>.
  overload: System.Array.GetValue*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The current <xref href="System.Array"></xref> does not have exactly three dimensions.
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: <code>index1</code> or <code>index2</code> or <code>index3</code> is outside the range of valid indexes for the corresponding dimension of the current <xref href="System.Array"></xref>.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Array.GetValue(System.Int64,System.Int64)
  commentId: M:System.Array.GetValue(System.Int64,System.Int64)
  id: GetValue(System.Int64,System.Int64)
  parent: System.Array
  langs:
  - csharp
  name: GetValue(Int64, Int64)
  nameWithType: Array.GetValue(Int64, Int64)
  fullName: Array.GetValue(Int64, Int64)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Gets the value at the specified position in the two-dimensional <xref href="System.Array"></xref>. The indexes are specified as 64-bit integers.
  remarks: "The <xref:System.Array.GetLowerBound%2A> and <xref:System.Array.GetUpperBound%2A> methods can determine whether any of the indexes is out of bounds.  \n  \n This method is an O(1) operation."
  example:
  - "The following code example demonstrates how to set and get a specific value in a one-dimensional or multidimensional array.  \n  \n [!code-cpp[System.Array_GetSetValue#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Array_GetSetValue/CPP/array_getsetvalue.cpp#1)]\n [!code-csharp[System.Array_GetSetValue#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Array_GetSetValue/CS/array_getsetvalue.cs#1)]\n [!code-vb[System.Array_GetSetValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Array_GetSetValue/VB/array_getsetvalue.vb#1)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(false)]

      public object GetValue (long index1, long index2);
    parameters:
    - id: index1
      type: System.Int64
      description: A 64-bit integer that represents the first-dimension index of the <xref href="System.Array"></xref> element to get.
    - id: index2
      type: System.Int64
      description: A 64-bit integer that represents the second-dimension index of the <xref href="System.Array"></xref> element to get.
    return:
      type: System.Object
      description: The value at the specified position in the two-dimensional <xref href="System.Array"></xref>.
  overload: System.Array.GetValue*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The current <xref href="System.Array"></xref> does not have exactly two dimensions.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: Either <code>index1</code> or <code>index2</code> is outside the range of valid indexes for the corresponding dimension of the current <xref href="System.Array"></xref>.
  attributes:
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Array.GetValue(System.Int32,System.Int32)
  commentId: M:System.Array.GetValue(System.Int32,System.Int32)
  id: GetValue(System.Int32,System.Int32)
  parent: System.Array
  langs:
  - csharp
  name: GetValue(Int32, Int32)
  nameWithType: Array.GetValue(Int32, Int32)
  fullName: Array.GetValue(Int32, Int32)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Gets the value at the specified position in the two-dimensional <xref href="System.Array"></xref>. The indexes are specified as 32-bit integers.
  remarks: "The <xref:System.Array.GetLowerBound%2A> and <xref:System.Array.GetUpperBound%2A> methods can determine whether any of the indexes is out of bounds.  \n  \n This method is an O(1) operation."
  example:
  - "The following code example demonstrates how to set and get a specific value in a one-dimensional or multidimensional array.  \n  \n [!code-cpp[System.Array_GetSetValue#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Array_GetSetValue/CPP/array_getsetvalue.cpp#1)]\n [!code-csharp[System.Array_GetSetValue#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Array_GetSetValue/CS/array_getsetvalue.cs#1)]\n [!code-vb[System.Array_GetSetValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Array_GetSetValue/VB/array_getsetvalue.vb#1)]"
  syntax:
    content: public object GetValue (int index1, int index2);
    parameters:
    - id: index1
      type: System.Int32
      description: A 32-bit integer that represents the first-dimension index of the <xref href="System.Array"></xref> element to get.
    - id: index2
      type: System.Int32
      description: A 32-bit integer that represents the second-dimension index of the <xref href="System.Array"></xref> element to get.
    return:
      type: System.Object
      description: The value at the specified position in the two-dimensional <xref href="System.Array"></xref>.
  overload: System.Array.GetValue*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The current <xref href="System.Array"></xref> does not have exactly two dimensions.
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: Either <code>index1</code> or <code>index2</code> is outside the range of valid indexes for the corresponding dimension of the current <xref href="System.Array"></xref>.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Array.GetValue(System.Int32)
  commentId: M:System.Array.GetValue(System.Int32)
  id: GetValue(System.Int32)
  parent: System.Array
  langs:
  - csharp
  name: GetValue(Int32)
  nameWithType: Array.GetValue(Int32)
  fullName: Array.GetValue(Int32)
  type: Method
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Gets the value at the specified position in the one-dimensional <xref href="System.Array"></xref>. The index is specified as a 32-bit integer.
  remarks: "The <xref:System.Array.GetLowerBound%2A> and <xref:System.Array.GetUpperBound%2A> methods can determine whether the value of `index` is out of bounds.  \n  \n This method is an O(1) operation."
  example:
  - "The following code example demonstrates how to set and get a specific value in a one-dimensional or multidimensional array.  \n  \n [!code-cpp[System.Array_GetSetValue#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Array_GetSetValue/CPP/array_getsetvalue.cpp#1)]\n [!code-csharp[System.Array_GetSetValue#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Array_GetSetValue/CS/array_getsetvalue.cs#1)]\n [!code-vb[System.Array_GetSetValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Array_GetSetValue/VB/array_getsetvalue.vb#1)]"
  syntax:
    content: public object GetValue (int index);
    parameters:
    - id: index
      type: System.Int32
      description: A 32-bit integer that represents the position of the <xref href="System.Array"></xref> element to get.
    return:
      type: System.Object
      description: The value at the specified position in the one-dimensional <xref href="System.Array"></xref>.
  overload: System.Array.GetValue*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The current <xref href="System.Array"></xref> does not have exactly one dimension.
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: <code>index</code> is outside the range of valid indexes for the current <xref href="System.Array"></xref>.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Array.GetValue(System.Int64)
  commentId: M:System.Array.GetValue(System.Int64)
  id: GetValue(System.Int64)
  parent: System.Array
  langs:
  - csharp
  name: GetValue(Int64)
  nameWithType: Array.GetValue(Int64)
  fullName: Array.GetValue(Int64)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Gets the value at the specified position in the one-dimensional <xref href="System.Array"></xref>. The index is specified as a 64-bit integer.
  remarks: "The <xref:System.Array.GetLowerBound%2A> and <xref:System.Array.GetUpperBound%2A> methods can determine whether the value of `index` is out of bounds.  \n  \n This method is an O(1) operation."
  example:
  - "The following code example demonstrates how to set and get a specific value in a one-dimensional or multidimensional array.  \n  \n [!code-cpp[System.Array_GetSetValue#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Array_GetSetValue/CPP/array_getsetvalue.cpp#1)]\n [!code-csharp[System.Array_GetSetValue#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Array_GetSetValue/CS/array_getsetvalue.cs#1)]\n [!code-vb[System.Array_GetSetValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Array_GetSetValue/VB/array_getsetvalue.vb#1)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(false)]

      public object GetValue (long index);
    parameters:
    - id: index
      type: System.Int64
      description: A 64-bit integer that represents the position of the <xref href="System.Array"></xref> element to get.
    return:
      type: System.Object
      description: The value at the specified position in the one-dimensional <xref href="System.Array"></xref>.
  overload: System.Array.GetValue*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The current <xref href="System.Array"></xref> does not have exactly one dimension.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>index</code> is outside the range of valid indexes for the current <xref href="System.Array"></xref>.
  attributes:
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Array.GetValue(System.Int32[])
  commentId: M:System.Array.GetValue(System.Int32[])
  id: GetValue(System.Int32[])
  parent: System.Array
  langs:
  - csharp
  name: GetValue(Int32[])
  nameWithType: Array.GetValue(Int32[])
  fullName: Array.GetValue(Int32[])
  type: Method
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Gets the value at the specified position in the multidimensional <xref href="System.Array"></xref>. The indexes are specified as an array of 32-bit integers.
  remarks: "The number of elements in `indices` must equal the number of dimensions in the <xref:System.Array>. All elements in the `indices` array must collectively specify the position of the desired element in the multidimensional <xref:System.Array>.  \n  \n The <xref:System.Array.GetLowerBound%2A> and <xref:System.Array.GetUpperBound%2A> methods can determine whether any of the indexes is out of bounds.  \n  \n This method is an O(1) operation."
  example:
  - "The following code example demonstrates how to set and get a specific value in a one-dimensional or multidimensional array.  \n  \n [!code-cpp[System.Array_GetSetValue#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Array_GetSetValue/CPP/array_getsetvalue.cpp#1)]\n [!code-csharp[System.Array_GetSetValue#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Array_GetSetValue/CS/array_getsetvalue.cs#1)]\n [!code-vb[System.Array_GetSetValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Array_GetSetValue/VB/array_getsetvalue.vb#1)]"
  syntax:
    content: public object GetValue (int[] indices);
    parameters:
    - id: indices
      type: System.Int32[]
      description: A one-dimensional array of 32-bit integers that represent the indexes specifying the position of the <xref href="System.Array"></xref> element to get.
    return:
      type: System.Object
      description: The value at the specified position in the multidimensional <xref href="System.Array"></xref>.
  overload: System.Array.GetValue*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>indices</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The number of dimensions in the current <xref href="System.Array"></xref> is not equal to the number of elements in <code>indices</code>.
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: Any element in <code>indices</code> is outside the range of valid indexes for the corresponding dimension of the current <xref href="System.Array"></xref>.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Array.GetValue(System.Int64[])
  commentId: M:System.Array.GetValue(System.Int64[])
  id: GetValue(System.Int64[])
  parent: System.Array
  langs:
  - csharp
  name: GetValue(Int64[])
  nameWithType: Array.GetValue(Int64[])
  fullName: Array.GetValue(Int64[])
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Gets the value at the specified position in the multidimensional <xref href="System.Array"></xref>. The indexes are specified as an array of 64-bit integers.
  remarks: "The number of elements in `indices` must equal the number of dimensions in the <xref:System.Array>. All elements in the `indices` array must collectively specify the position of the desired element in the multidimensional <xref:System.Array>.  \n  \n The <xref:System.Array.GetLowerBound%2A> and <xref:System.Array.GetUpperBound%2A> methods can determine whether any of the indexes is out of bounds.  \n  \n This method is an O(1) operation."
  example:
  - "The following code example demonstrates how to set and get a specific value in a one-dimensional or multidimensional array.  \n  \n [!code-cpp[System.Array_GetSetValue#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Array_GetSetValue/CPP/array_getsetvalue.cpp#1)]\n [!code-csharp[System.Array_GetSetValue#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Array_GetSetValue/CS/array_getsetvalue.cs#1)]\n [!code-vb[System.Array_GetSetValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Array_GetSetValue/VB/array_getsetvalue.vb#1)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(false)]

      public object GetValue (long[] indices);
    parameters:
    - id: indices
      type: System.Int64[]
      description: A one-dimensional array of 64-bit integers that represent the indexes specifying the position of the <xref href="System.Array"></xref> element to get.
    return:
      type: System.Object
      description: The value at the specified position in the multidimensional <xref href="System.Array"></xref>.
  overload: System.Array.GetValue*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>indices</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The number of dimensions in the current <xref href="System.Array"></xref> is not equal to the number of elements in <code>indices</code>.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: Any element in <code>indices</code> is outside the range of valid indexes for the corresponding dimension of the current <xref href="System.Array"></xref>.
  attributes:
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Array.IndexOf(System.Array,System.Object)
  commentId: M:System.Array.IndexOf(System.Array,System.Object)
  id: IndexOf(System.Array,System.Object)
  parent: System.Array
  langs:
  - csharp
  name: IndexOf(Array, Object)
  nameWithType: Array.IndexOf(Array, Object)
  fullName: Array.IndexOf(Array, Object)
  type: Method
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Searches for the specified object and returns the index of its first occurrence in a one-dimensional array.
  remarks: "This method searches all the elements of a one-dimensional arrayfor `value`. To determine whether `value` exists in `array`, the method performs an equality comparison by calling each element's `Equals` method until it finds a match. This means that if the element overrides the <xref:System.Object.Equals%28System.Object%29?displayProperty=fullName> method, that override is called.  \n  \n Because most arrays have a lower bound of zero, this method generally returns –1 if`value` isn’t found. In the rare case that the lower bound of the array is equal to <xref:System.Int32.MinValue?displayProperty=fullName>(0x80000000) and `value` isn’t found, this method returns <xref:System.Int32.MaxValue?displayProperty=fullName> (0x7FFFFFFF).  \n  \n This method is an O(`n`) operation, where `n` is the <xref:System.Array.Length%2A> of `array`."
  example:
  - "The example calls the following three overloads of the <xref:System.Array.IndexOf%2A>method to find the index of a string in a string array:  \n  \n-   <xref:System.Array.IndexOf%28System.Array%2CSystem.Object%29>, to determine the first occurrence of the string \"the\" in a string array.  \n  \n-   <xref:System.Array.IndexOf%28System.Array%2CSystem.Object%2CSystem.Int32%29>, to determine the first occurrence of the string \"the\" in the fourth to the last elements of a string array.  \n  \n-   <xref:System.Array.IndexOf%28System.Array%2CSystem.Object%2CSystem.Int32%2CSystem.Int32%29>, to determine the first occurrence of the string \"the\" in a string array from the element that follows the last successful match to the end of the array.  \n  \n [!code-cpp[Classic Array.IndexOf Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Array.IndexOf Example/CPP/source.cpp#1)]\n [!code-csharp[Classic Array.IndexOf Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Array.IndexOf Example/CS/source.cs#1)]\n [!code-vb[Classic Array.IndexOf Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Array.IndexOf Example/VB/source.vb#1)]"
  syntax:
    content: public static int IndexOf (Array array, object value);
    parameters:
    - id: array
      type: System.Array
      description: The one-dimensional array to search.
    - id: value
      type: System.Object
      description: The object to locate in <code>array</code>.
    return:
      type: System.Int32
      description: The index of the first occurrence of <code>value</code> in <code>array</code>, if found; otherwise, the lower bound of the array minus 1.
  overload: System.Array.IndexOf*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>array</code> is `null`.
  - type: System.RankException
    commentId: T:System.RankException
    description: <code>array</code> is multidimensional.
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Array.IndexOf(System.Array,System.Object,System.Int32)
  commentId: M:System.Array.IndexOf(System.Array,System.Object,System.Int32)
  id: IndexOf(System.Array,System.Object,System.Int32)
  parent: System.Array
  langs:
  - csharp
  name: IndexOf(Array, Object, Int32)
  nameWithType: Array.IndexOf(Array, Object, Int32)
  fullName: Array.IndexOf(Array, Object, Int32)
  type: Method
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Searches for the specified object in a range of elements of a one-dimensional array, and returns the index of its first occurrence. The range extends from a specified index to the end of the array.
  remarks: "This method searches a one-dimensional array from the element at index `startIndex` to the last element. To determine whether `value` exists in `array`, the method performs an equality comparison by calling the `Equals` method of every element until it finds a match. This means that if the element overrides the <xref:System.Object.Equals%28System.Object%29?displayProperty=fullName> method, that override is called.  \n  \n Because most arrays have a lower bound of zero, this method generally returns –1 if `value` isn’t found. In the rare case that the lower bound of the array is equal to <xref:System.Int32.MinValue?displayProperty=fullName>(0x80000000) and `value` isn’t found, this method returns <xref:System.Int32.MaxValue?displayProperty=fullName> (0x7FFFFFFF).  \n  \n If `startIndex` equals <xref:System.Array.Length%2A?displayProperty=fullName>,the method returns -1. If `startIndex` is greater than <xref:System.Array.Length%2A?displayProperty=fullName>, the method throws an <xref:System.ArgumentOutOfRangeException>.  \n  \n This method is an O(`n`) operation, where `n` is the number of elements from `startIndex` to the end of `array`."
  example:
  - "The example calls the following three overloads of the <xref:System.Array.IndexOf%2A> method to find the index of a string in a string array:  \n  \n-   <xref:System.Array.IndexOf%28System.Array%2CSystem.Object%29>, to determine the first occurrence of the string \"the\" in a string array.  \n  \n-   <xref:System.Array.IndexOf%28System.Array%2CSystem.Object%2CSystem.Int32%29>, to determine the first occurrence of the string \"the\" in the fourth to the last elements of a string array.  \n  \n-   <xref:System.Array.IndexOf%28System.Array%2CSystem.Object%2CSystem.Int32%2CSystem.Int32%29>, to determine the first occurrence of the string \"the\" in a string array from the element that follows the last successful match to the end of the array.  \n  \n [!code-cpp[Classic Array.IndexOf Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Array.IndexOf Example/CPP/source.cpp#1)]\n [!code-csharp[Classic Array.IndexOf Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Array.IndexOf Example/CS/source.cs#1)]\n [!code-vb[Classic Array.IndexOf Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Array.IndexOf Example/VB/source.vb#1)]"
  syntax:
    content: public static int IndexOf (Array array, object value, int startIndex);
    parameters:
    - id: array
      type: System.Array
      description: The one-dimensional array to search.
    - id: value
      type: System.Object
      description: The object to locate in <code>array</code>.
    - id: startIndex
      type: System.Int32
      description: The starting index of the search. 0 (zero) is valid in an empty array.
    return:
      type: System.Int32
      description: The index of the first occurrence of <code>value</code>, if it’s found, within the range of elements in <code>array</code> that extends from <code>startIndex</code> to the last element; otherwise, the lower bound of the array minus 1.
  overload: System.Array.IndexOf*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>array</code> is `null`.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>startIndex</code> is outside the range of valid indexes for <code>array</code>.
  - type: System.RankException
    commentId: T:System.RankException
    description: <code>array</code> is multidimensional.
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Array.IndexOf(System.Array,System.Object,System.Int32,System.Int32)
  commentId: M:System.Array.IndexOf(System.Array,System.Object,System.Int32,System.Int32)
  id: IndexOf(System.Array,System.Object,System.Int32,System.Int32)
  parent: System.Array
  langs:
  - csharp
  name: IndexOf(Array, Object, Int32, Int32)
  nameWithType: Array.IndexOf(Array, Object, Int32, Int32)
  fullName: Array.IndexOf(Array, Object, Int32, Int32)
  type: Method
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Searches for the specified object in a range of elements of a one-dimensional array, and returns the index of ifs first occurrence. The range extends from a specified index for a specified number of elements.
  remarks: "This method searches the elements of a one-dimensional arrayfrom `startIndex` to `startIndex` plus `count` minus 1, if `count` is greater than 0. To determine whether `value` exists in `array`, the method performs an equality comparison by calling the `Equals` method of every element until it finds a match. This means that if the element overrides the <xref:System.Object.Equals%2A?displayProperty=fullName> method, that override is called.  \n  \n Becausemost arrays have a lower bound of zero, this method generally returns –1 when `value` isn’t found. In the rare case that the lower bound of the array is equal to <xref:System.Int32.MinValue?displayProperty=fullName> (0x80000000) and `value` isn’t found, this method returns <xref:System.Int32.MaxValue?displayProperty=fullName> (0x7FFFFFFF).  \n  \n If `startindex` equals <xref:System.Array.Length%2A?displayProperty=fullName>, the method returns -1. If `startIndex` is greater than <xref:System.Array.Length%2A?displayProperty=fullName>, the method throws an <xref:System.ArgumentOutOfRangeException>.  \n  \n This method is an O(`n`) operation, where `n` is `count`."
  example:
  - "The example calls the following three overloads of the <xref:System.Array.IndexOf%2A> method to find the index of a string in a string array:  \n  \n-   <xref:System.Array.IndexOf%28System.Array%2CSystem.Object%29>, to determine the first occurrence of the string \"the\" in a string array.  \n  \n-   <xref:System.Array.IndexOf%28System.Array%2CSystem.Object%2CSystem.Int32%29>, to determine the first occurrence of the string \"the\" in the fourth to the last elements of a string array.  \n  \n-   <xref:System.Array.IndexOf%28System.Array%2CSystem.Object%2CSystem.Int32%2CSystem.Int32%29>, to determine the first occurrence of the string \"the\" in a string array from the element that follows the last successful match to the end of the array. To determine the value of the `count` argument, it subtracts the upper bound of the array from the starting index and adds one.  \n  \n [!code-cpp[Classic Array.IndexOf Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Array.IndexOf Example/CPP/source.cpp#1)]\n [!code-csharp[Classic Array.IndexOf Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Array.IndexOf Example/CS/source.cs#1)]\n [!code-vb[Classic Array.IndexOf Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Array.IndexOf Example/VB/source.vb#1)]"
  syntax:
    content: public static int IndexOf (Array array, object value, int startIndex, int count);
    parameters:
    - id: array
      type: System.Array
      description: The one-dimensional array to search.
    - id: value
      type: System.Object
      description: The object to locate in <code>array</code>.
    - id: startIndex
      type: System.Int32
      description: The starting index of the search. 0 (zero) is valid in an empty array.
    - id: count
      type: System.Int32
      description: The number of elements to search.
    return:
      type: System.Int32
      description: The index of the first occurrence of <code>value</code>, if it’s found in the <code>array</code> from index <code>startIndex</code> to <code>startIndex</code> + <code>count</code> - 1; otherwise, the lower bound of the array minus 1.
  overload: System.Array.IndexOf*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>array</code> is `null`.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>startIndex</code> is outside the range of valid indexes for <code>array</code>.  \n  \n -or-  \n  \n <code>count</code> is less than zero.  \n  \n -or-  \n  \n <code>startIndex</code> and <code>count</code> do not specify a valid section in <code>array</code>."
  - type: System.RankException
    commentId: T:System.RankException
    description: <code>array</code> is multidimensional.
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Array.IndexOf``1(``0[],``0,System.Int32,System.Int32)
  commentId: M:System.Array.IndexOf``1(``0[],``0,System.Int32,System.Int32)
  id: IndexOf``1(``0[],``0,System.Int32,System.Int32)
  parent: System.Array
  langs:
  - csharp
  name: IndexOf<T>(T[], T, Int32, Int32)
  nameWithType: Array.IndexOf<T>(T[], T, Int32, Int32)
  fullName: Array.IndexOf<T>(T[], T, Int32, Int32)
  type: Method
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Searches for the specified object in a range of elements of a one-dimensional array, and returns the index of its first occurrence. The range extends from a specified index for a specified number of elements.
  remarks: "This method searchesthe elements of a one-dimensional array from `startIndex` to `startIndex` plus `count` minus 1, if `count` is greater than 0. To determine whether `value` exists in `array`, the method performs an equality comparison by calling the `T.Equals` method on every element. This means that if `T` overrides the <xref:System.Object.Equals%2A> method, that override is called.  \n  \n If `startIndex` equals <xref:System.Array.Length%2A?displayProperty=fullName>, the method returns -1.  If `startIndex` is greater than <xref:System.Array.Length%2A?displayProperty=fullName>, the method throws an <xref:System.ArgumentOutOfRangeException>.  \n  \n This method is an O(`n`) operation, where `n` is `count`."
  example:
  - "The following example demonstrates all three generic overloads of the <xref:System.Array.IndexOf%2A> method. An array of strings is created, with one entry that appears twice, at index location 0 and index location 5. The <xref:System.Array.IndexOf%60%601%28%60%600%5B%5D%2C%60%600%29> method overload searches the array from the beginning, and finds the first occurrence of the string. The <xref:System.Array.IndexOf%60%601%28%60%600%5B%5D%2C%60%600%2CSystem.Int32%29> method overload is used to search the array beginning with index location 3 and continuing to the end of the array, and finds the second occurrence of the string. Finally, the <xref:System.Array.IndexOf%60%601%28%60%600%5B%5D%2C%60%600%2CSystem.Int32%2CSystem.Int32%29>method overload is used to search a range of two entries, beginning at index location two; it returns –1 because there are no instances of the search string in that range.  \n  \n [!code-cpp[Array_IndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR/Array_IndexOf/cpp/source.cpp#1)]\n [!code-csharp[Array_IndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR/Array_IndexOf/cs/source.cs#1)]\n [!code-vb[Array_IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Array_IndexOf/vb/source.vb#1)]"
  syntax:
    content: public static int IndexOf<T> (T[] array, T value, int startIndex, int count);
    parameters:
    - id: array
      type: T[]
      description: The one-dimensional, zero-based array to search.
    - id: value
      type: T
      description: The object to locate in <code>array</code>.
    - id: startIndex
      type: System.Int32
      description: The zero-based starting index of the search. 0 (zero) is valid in an empty array.
    - id: count
      type: System.Int32
      description: The number of elements in the section to search.
    typeParameters:
    - id: T
      description: The type of the elements of the array.
    return:
      type: System.Int32
      description: The zero-based index of the first occurrence of <code>value</code> within the range of elements in <code>array</code> that starts at <code>startIndex</code> and contains the number of elements specified in <code>count</code>, if found; otherwise, –1.
  overload: System.Array.IndexOf``1*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>array</code> is `null`.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>startIndex</code> is outside the range of valid indexes for <code>array</code>.  \n  \n -or-  \n  \n <code>count</code> is less than zero.  \n  \n -or-  \n  \n <code>startIndex</code> and <code>count</code> do not specify a valid section in <code>array</code>."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Array.IndexOf``1(``0[],``0)
  commentId: M:System.Array.IndexOf``1(``0[],``0)
  id: IndexOf``1(``0[],``0)
  parent: System.Array
  langs:
  - csharp
  name: IndexOf<T>(T[], T)
  nameWithType: Array.IndexOf<T>(T[], T)
  fullName: Array.IndexOf<T>(T[], T)
  type: Method
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Searches for the specified object and returns the index of its first occurrence in a one-dimensional array.
  remarks: "This method searches all the elements of a one-dimensional array for `value`. To determine whether `value` exists in `array`, the method performs an equality comparison by calling the `T.Equals` method on every element. This means that if `T` overrides the <xref:System.Object.Equals%2A> method, that override is called.  \n  \n This method is an O(`n`) operation, where `n` is the <xref:System.Array.Length%2A> of `array`."
  example:
  - "The following example demonstrates all three generic overloads of the <xref:System.Array.IndexOf%2A> method. An array of strings is created, with one entry that appears twice, at index location 0 and index location 5. The <xref:System.Array.IndexOf%60%601%28%60%600%5B%5D%2C%60%600%29> method overload searches the array from the beginning, and finds the first occurrence of the string. The <xref:System.Array.IndexOf%60%601%28%60%600%5B%5D%2C%60%600%2CSystem.Int32%29> method overload is used to search the array beginning with index location 3 and continuing to the end of the array, and finds the second occurrence of the string. Finally, the <xref:System.Array.IndexOf%60%601%28%60%600%5B%5D%2C%60%600%2CSystem.Int32%2CSystem.Int32%29> method overload is used to search a range of two entries, beginning at index location two; it returns –1 because there are no instances of the search string in that range.  \n  \n [!code-cpp[Array_IndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR/Array_IndexOf/cpp/source.cpp#1)]\n [!code-csharp[Array_IndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR/Array_IndexOf/cs/source.cs#1)]\n [!code-vb[Array_IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Array_IndexOf/vb/source.vb#1)]"
  syntax:
    content: public static int IndexOf<T> (T[] array, T value);
    parameters:
    - id: array
      type: T[]
      description: The one-dimensional, zero-based array to search.
    - id: value
      type: T
      description: The object to locate in <code>array</code>.
    typeParameters:
    - id: T
      description: The type of the elements of the array.
    return:
      type: System.Int32
      description: The zero-based index of the first occurrence of <code>value</code> in the entire <code>array</code>, if found; otherwise, –1.
  overload: System.Array.IndexOf``1*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>array</code> is `null`.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Array.IndexOf``1(``0[],``0,System.Int32)
  commentId: M:System.Array.IndexOf``1(``0[],``0,System.Int32)
  id: IndexOf``1(``0[],``0,System.Int32)
  parent: System.Array
  langs:
  - csharp
  name: IndexOf<T>(T[], T, Int32)
  nameWithType: Array.IndexOf<T>(T[], T, Int32)
  fullName: Array.IndexOf<T>(T[], T, Int32)
  type: Method
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Searches for the specified object in a range of elements of a one dimensional array, and returns the index of its first occurrence. The range extends from a specified index to the end of the array.
  remarks: "This method searches a one-dimensional array from the element at `startIndex` to the end of the array. To determine whether `value` exists in `array`, the method performs an equality comparison by calling the `T.Equals` method on every element. This means that if `T` overrides the <xref:System.Object.Equals%2A> method, that override is called.  \n  \n If `startIndex` equals <xref:System.Array.Length%2A>,the method returns -1.If `startIndex` is greater than <xref:System.Array.Length%2A?displayProperty=fullName>, the method throws an <xref:System.ArgumentOutOfRangeException>.  \n  \n This method is an O(`n`) operation, where `n` is the number of elements from `startIndex` to the end of `array`."
  example:
  - "The following example demonstrates all three generic overloads of the <xref:System.Array.IndexOf%2A> method. An array of strings is created, with one entry that appears twice, at index location 0 and index location 5. The <xref:System.Array.IndexOf%60%601%28%60%600%5B%5D%2C%60%600%29> method overload searches the array from the beginning, and finds the first occurrence of the string. The <xref:System.Array.IndexOf%60%601%28%60%600%5B%5D%2C%60%600%2CSystem.Int32%29> method overload is used to search the array beginning with index location 3 and continuing to the end of the array, and finds the second occurrence of the string. Finally, the <xref:System.Array.IndexOf%60%601%28%60%600%5B%5D%2C%60%600%2CSystem.Int32%2CSystem.Int32%29> method overload is used to search a range of two entries, beginning at index location two; it returns –1 because there are no instances of the search string in that range.  \n  \n [!code-cpp[Array_IndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR/Array_IndexOf/cpp/source.cpp#1)]\n [!code-csharp[Array_IndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR/Array_IndexOf/cs/source.cs#1)]\n [!code-vb[Array_IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Array_IndexOf/vb/source.vb#1)]"
  syntax:
    content: public static int IndexOf<T> (T[] array, T value, int startIndex);
    parameters:
    - id: array
      type: T[]
      description: The one-dimensional, zero-based array to search.
    - id: value
      type: T
      description: The object to locate in <code>array</code>.
    - id: startIndex
      type: System.Int32
      description: The zero-based starting index of the search. 0 (zero) is valid in an empty array.
    typeParameters:
    - id: T
      description: The type of the elements of the array.
    return:
      type: System.Int32
      description: The zero-based index of the first occurrence of <code>value</code> within the range of elements in <code>array</code> that extends from <code>startIndex</code> to the last element, if found; otherwise, –1.
  overload: System.Array.IndexOf``1*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>array</code> is `null`.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>startIndex</code> is outside the range of valid indexes for <code>array</code>.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Array.Initialize
  commentId: M:System.Array.Initialize
  id: Initialize
  parent: System.Array
  langs:
  - csharp
  name: Initialize()
  nameWithType: Array.Initialize()
  fullName: Array.Initialize()
  type: Method
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Initializes every element of the value-type <xref href="System.Array"></xref> by calling the default constructor of the value type.
  remarks: "This method is designed to help compilers support value-type arrays; most users do not need this method. It must not be used on reference-type arrays.  \n  \n If the <xref:System.Array> is not a value-type <xref:System.Array> or if the value type does not have a default constructor, the <xref:System.Array> is not modified.  \n  \n The value-type <xref:System.Array> can have any lower bound and any number of dimensions.  \n  \n This method is an O(`n`) operation, where `n` is <xref:System.Array.Length%2A>.  \n  \n> [!CAUTION]\n>  You can use this method only on value types that have constructors; however, value types that are native to C# do not have constructors."
  syntax:
    content: public void Initialize ();
    parameters: []
  overload: System.Array.Initialize*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Array.IsFixedSize
  commentId: P:System.Array.IsFixedSize
  id: IsFixedSize
  parent: System.Array
  langs:
  - csharp
  name: IsFixedSize
  nameWithType: Array.IsFixedSize
  fullName: Array.IsFixedSize
  type: Property
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Gets a value indicating whether the <xref href="System.Array"></xref> has a fixed size.
  remarks: "<xref:System.Array> implements the <xref:System.Array.IsFixedSize%2A> property because it is required by the <xref:System.Collections.IList?displayProperty=fullName> interface.  \n  \n An array with a fixed size does not allow the addition or removal of elements after the array is created, but it allows the modification of existing elements.  \n  \n Retrieving the value of this property is an O(1) operation."
  syntax:
    content: public bool IsFixedSize { get; }
    return:
      type: System.Boolean
      description: This property is always `true` for all arrays.
  overload: System.Array.IsFixedSize*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Array.IsReadOnly
  commentId: P:System.Array.IsReadOnly
  id: IsReadOnly
  parent: System.Array
  langs:
  - csharp
  name: IsReadOnly
  nameWithType: Array.IsReadOnly
  fullName: Array.IsReadOnly
  type: Property
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Gets a value indicating whether the <xref href="System.Array"></xref> is read-only.
  remarks: "<xref:System.Array> implements the <xref:System.Array.IsReadOnly%2A> property because it is required by the <xref:System.Collections.IList?displayProperty=fullName> interface. An array that is read-only does not allow the addition, removal, or modification of elements after the array is created.  \n  \n If you require a read-only collection, use a <xref:System.Collections> class that implements the <xref:System.Collections.IList?displayProperty=fullName> interface.  \n  \n If you cast or convert an array to an <xref:System.Collections.IList> interface object, the <xref:System.Collections.IList.IsReadOnly%2A?displayProperty=fullName> property returns `false`. However, if you cast or convert an array to a <xref:System.Collections.Generic.IList%601> interface, the `IsReadOnly` property returns `true`.  \n  \n Retrieving the value of this property is an O(1) operation."
  syntax:
    content: public bool IsReadOnly { get; }
    return:
      type: System.Boolean
      description: This property is always `false` for all arrays.
  overload: System.Array.IsReadOnly*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Array.IsSynchronized
  commentId: P:System.Array.IsSynchronized
  id: IsSynchronized
  parent: System.Array
  langs:
  - csharp
  name: IsSynchronized
  nameWithType: Array.IsSynchronized
  fullName: Array.IsSynchronized
  type: Property
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Gets a value indicating whether access to the <xref href="System.Array"></xref> is synchronized (thread safe).
  remarks: "<xref:System.Array> implements the <xref:System.Array.IsSynchronized%2A> property because it is required by the <xref:System.Collections.ICollection?displayProperty=fullName> interface.  \n  \n .NET Framework classes based on <xref:System.Array> provide their own synchronized version of the collection using the <xref:System.Array.SyncRoot%2A> property.  \n  \n Classes that use arrays can also implement their own synchronization using the <xref:System.Array.SyncRoot%2A> property. The synchronizing code must perform operations on the `SyncRoot` of the collection, not directly on the collection. This ensures proper operation of collections that are derived from other objects. Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the collection. Note that some implementations of <xref:System.Array.SyncRoot%2A> might return the <xref:System.Array> itself.  \n  \n Enumerating through a collection is intrinsically not a thread safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.  \n  \n Retrieving the value of this property is an O(1) operation."
  example:
  - "The following code example shows how to lock an array during the entire enumeration by using the <xref:System.Array.SyncRoot%2A>property.  \n  \n [!code-cpp[System.Array.SyncRoot#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Array.SyncRoot/cpp/source.cpp#1)]\n [!code-csharp[System.Array.SyncRoot#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Array.SyncRoot/cs/source.cs#1)]\n [!code-vb[System.Array.SyncRoot#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Array.SyncRoot/vb/source.vb#1)]"
  syntax:
    content: public bool IsSynchronized { get; }
    return:
      type: System.Boolean
      description: This property is always `false` for all arrays.
  overload: System.Array.IsSynchronized*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Array.LastIndexOf(System.Array,System.Object)
  commentId: M:System.Array.LastIndexOf(System.Array,System.Object)
  id: LastIndexOf(System.Array,System.Object)
  parent: System.Array
  langs:
  - csharp
  name: LastIndexOf(Array, Object)
  nameWithType: Array.LastIndexOf(Array, Object)
  fullName: Array.LastIndexOf(Array, Object)
  type: Method
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Searches for the specified object and returns the index of the last occurrence within the entire one-dimensional <xref href="System.Array"></xref>.
  remarks: "The one-dimensional <xref:System.Array> is searched backward starting at the last element and ending at the first element.  \n  \n The elements are compared to the specified value using the <xref:System.Object.Equals%2A?displayProperty=fullName> method. If the element type is a nonintrinsic (user-defined) type, the `Equals` implementation of that type is used.  \n  \n Since most arrays will have a lower bound of zero, this method would generally return –1 when `value` is not found. In the rare case that the lower bound of the array is equal to <xref:System.Int32.MinValue?displayProperty=fullName> and `value` is not found, this method returns <xref:System.Int32.MaxValue?displayProperty=fullName>, which is `System.Int32.MinValue - 1`.  \n  \n This method is an O(`n`) operation, where `n` is the <xref:System.Array.Length%2A> of `array`.  \n  \n In the .NET Framework version 2.0, this method uses the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the <xref:System.Array> to determine whether the <xref:System.Object> specified by the `value` parameter exists. In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `value`<xref:System.Object> itself.  \n  \n <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection."
  example:
  - "The following code example shows how to determine the index of the last occurrence of a specified element in an array.  \n  \n [!code-cpp[Classic Array.LastIndexOf Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Array.LastIndexOf Example/CPP/source.cpp#1)]\n [!code-csharp[Classic Array.LastIndexOf Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Array.LastIndexOf Example/CS/source.cs#1)]\n [!code-vb[Classic Array.LastIndexOf Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Array.LastIndexOf Example/VB/source.vb#1)]"
  syntax:
    content: public static int LastIndexOf (Array array, object value);
    parameters:
    - id: array
      type: System.Array
      description: The one-dimensional <xref href="System.Array"></xref> to search.
    - id: value
      type: System.Object
      description: The object to locate in <code>array</code>.
    return:
      type: System.Int32
      description: The index of the last occurrence of <code>value</code> within the entire <code>array</code>, if found; otherwise, the lower bound of the array minus 1.
  overload: System.Array.LastIndexOf*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>array</code> is `null`.
  - type: System.RankException
    commentId: T:System.RankException
    description: <code>array</code> is multidimensional.
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Array.LastIndexOf(System.Array,System.Object,System.Int32)
  commentId: M:System.Array.LastIndexOf(System.Array,System.Object,System.Int32)
  id: LastIndexOf(System.Array,System.Object,System.Int32)
  parent: System.Array
  langs:
  - csharp
  name: LastIndexOf(Array, Object, Int32)
  nameWithType: Array.LastIndexOf(Array, Object, Int32)
  fullName: Array.LastIndexOf(Array, Object, Int32)
  type: Method
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Searches for the specified object and returns the index of the last occurrence within the range of elements in the one-dimensional <xref href="System.Array"></xref> that extends from the first element to the specified index.
  remarks: "The one-dimensional <xref:System.Array> is searched backward starting at `startIndex` and ending at the first element.  \n  \n The elements are compared to the specified value using the <xref:System.Object.Equals%2A?displayProperty=fullName> method. If the element type is a nonintrinsic (user-defined) type, the `Equals` implementation of that type is used.  \n  \n Since most arrays will have a lower bound of zero, this method would generally return –1 when `value` is not found. In the rare case that the lower bound of the array is equal to <xref:System.Int32.MinValue?displayProperty=fullName> and `value` is not found, this method returns <xref:System.Int32.MaxValue?displayProperty=fullName>, which is `System.Int32.MinValue - 1`.  \n  \n This method is an O(`n`) operation, where `n` is the number of elements from the beginning of `array` to `startIndex`.  \n  \n In the .NET Framework version 2.0, this method uses the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the <xref:System.Array> to determine whether the <xref:System.Object> specified by the `value` parameter exists. In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `value`<xref:System.Object> itself."
  example:
  - "The following code example shows how to determine the index of the last occurrence of a specified element in an array.  \n  \n [!code-cpp[Classic Array.LastIndexOf Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Array.LastIndexOf Example/CPP/source.cpp#1)]\n [!code-csharp[Classic Array.LastIndexOf Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Array.LastIndexOf Example/CS/source.cs#1)]\n [!code-vb[Classic Array.LastIndexOf Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Array.LastIndexOf Example/VB/source.vb#1)]"
  syntax:
    content: public static int LastIndexOf (Array array, object value, int startIndex);
    parameters:
    - id: array
      type: System.Array
      description: The one-dimensional <xref href="System.Array"></xref> to search.
    - id: value
      type: System.Object
      description: The object to locate in <code>array</code>.
    - id: startIndex
      type: System.Int32
      description: The starting index of the backward search.
    return:
      type: System.Int32
      description: The index of the last occurrence of <code>value</code> within the range of elements in <code>array</code> that extends from the first element to <code>startIndex</code>, if found; otherwise, the lower bound of the array minus 1.
  overload: System.Array.LastIndexOf*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>array</code> is `null`.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>startIndex</code> is outside the range of valid indexes for <code>array</code>.
  - type: System.RankException
    commentId: T:System.RankException
    description: <code>array</code> is multidimensional.
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Array.LastIndexOf(System.Array,System.Object,System.Int32,System.Int32)
  commentId: M:System.Array.LastIndexOf(System.Array,System.Object,System.Int32,System.Int32)
  id: LastIndexOf(System.Array,System.Object,System.Int32,System.Int32)
  parent: System.Array
  langs:
  - csharp
  name: LastIndexOf(Array, Object, Int32, Int32)
  nameWithType: Array.LastIndexOf(Array, Object, Int32, Int32)
  fullName: Array.LastIndexOf(Array, Object, Int32, Int32)
  type: Method
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Searches for the specified object and returns the index of the last occurrence within the range of elements in the one-dimensional <xref href="System.Array"></xref> that contains the specified number of elements and ends at the specified index.
  remarks: "The one-dimensional <xref:System.Array> is searched backward starting at `startIndex` and ending at `startIndex` minus `count` plus 1, if `count` is greater than 0.  \n  \n The elements are compared to the specified value using the <xref:System.Object.Equals%2A?displayProperty=fullName> method. If the element type is a nonintrinsic (user-defined) type, the`Equals` implementation of that type is used.  \n  \n Since most arrays will have a lower bound of zero, this method would generally return –1 when `value` is not found. In the rare case that the lower bound of the array is equal to <xref:System.Int32.MinValue?displayProperty=fullName> and `value` is not found, this method returns <xref:System.Int32.MaxValue?displayProperty=fullName>, which is `System.Int32.MinValue - 1`.  \n  \n This method is an O(`n`) operation, where `n` is `count`.  \n  \n In the .NET Framework version 2.0, this method uses the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the <xref:System.Array> to determine whether the <xref:System.Object> specified by the `value` parameter exists. In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `value`<xref:System.Object> itself."
  example:
  - "The following code example shows how to determine the index of the last occurrence of a specified element in an array. Note that the <xref:System.Array.LastIndexOf%2A> method is a backward search; therefore, `count` must be less than or equal to (`startIndex` minus the lower bound of the array plus 1).  \n  \n [!code-cpp[Classic Array.LastIndexOf Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Array.LastIndexOf Example/CPP/source.cpp#1)]\n [!code-csharp[Classic Array.LastIndexOf Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Array.LastIndexOf Example/CS/source.cs#1)]\n [!code-vb[Classic Array.LastIndexOf Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Array.LastIndexOf Example/VB/source.vb#1)]"
  syntax:
    content: public static int LastIndexOf (Array array, object value, int startIndex, int count);
    parameters:
    - id: array
      type: System.Array
      description: The one-dimensional <xref href="System.Array"></xref> to search.
    - id: value
      type: System.Object
      description: The object to locate in <code>array</code>.
    - id: startIndex
      type: System.Int32
      description: The starting index of the backward search.
    - id: count
      type: System.Int32
      description: The number of elements in the section to search.
    return:
      type: System.Int32
      description: The index of the last occurrence of <code>value</code> within the range of elements in <code>array</code> that contains the number of elements specified in <code>count</code> and ends at <code>startIndex</code>, if found; otherwise, the lower bound of the array minus 1.
  overload: System.Array.LastIndexOf*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>array</code> is `null`.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>startIndex</code> is outside the range of valid indexes for <code>array</code>.  \n  \n -or-  \n  \n <code>count</code> is less than zero.  \n  \n -or-  \n  \n <code>startIndex</code> and <code>count</code> do not specify a valid section in <code>array</code>."
  - type: System.RankException
    commentId: T:System.RankException
    description: <code>array</code> is multidimensional.
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Array.LastIndexOf``1(``0[],``0)
  commentId: M:System.Array.LastIndexOf``1(``0[],``0)
  id: LastIndexOf``1(``0[],``0)
  parent: System.Array
  langs:
  - csharp
  name: LastIndexOf<T>(T[], T)
  nameWithType: Array.LastIndexOf<T>(T[], T)
  fullName: Array.LastIndexOf<T>(T[], T)
  type: Method
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Searches for the specified object and returns the index of the last occurrence within the entire <xref href="System.Array"></xref>.
  remarks: "The <xref:System.Array> is searched backward starting at the last element and ending at the first element.  \n  \n The elements are compared to the specified value using the <xref:System.Object.Equals%2A?displayProperty=fullName> method. If the element type is a nonintrinsic (user-defined) type, the `Equals` implementation of that type is used.  \n  \n This method is an O(`n`) operation, where `n` is the <xref:System.Array.Length%2A> of `array`."
  example:
  - "The following code example demonstrates all three generic overloads of the <xref:System.Array.LastIndexOf%2A> method. An array of strings is created, with one entry that appears twice, at index location 0 and index location 5. The <xref:System.Array.LastIndexOf%60%601%28%60%600%5B%5D%2C%60%600%29> method overload searches the entire array from the end, and finds the second occurrence of the string. The <xref:System.Array.LastIndexOf%60%601%28%60%600%5B%5D%2C%60%600%2CSystem.Int32%29> method overload is used to search the array backward beginning with index location 3 and continuing to the beginning of the array, and finds the first occurrence of the string. Finally, the <xref:System.Array.LastIndexOf%60%601%28%60%600%5B%5D%2C%60%600%2CSystem.Int32%2CSystem.Int32%29> method overload is used to search a range of four entries, beginning at index location 4 and extending backward (that is, it searches the items at locations 4, 3, 2, and 1); this search returns –1 because there are no instances of the search string in that range.  \n  \n [!code-cpp[Array_LastIndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR/Array_LastIndexOf/cpp/source.cpp#1)]\n [!code-csharp[Array_LastIndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR/Array_LastIndexOf/cs/source.cs#1)]\n [!code-vb[Array_LastIndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Array_LastIndexOf/vb/source.vb#1)]"
  syntax:
    content: public static int LastIndexOf<T> (T[] array, T value);
    parameters:
    - id: array
      type: T[]
      description: The one-dimensional, zero-based <xref href="System.Array"></xref> to search.
    - id: value
      type: T
      description: The object to locate in <code>array</code>.
    typeParameters:
    - id: T
      description: The type of the elements of the array.
    return:
      type: System.Int32
      description: The zero-based index of the last occurrence of <code>value</code> within the entire <code>array</code>, if found; otherwise, –1.
  overload: System.Array.LastIndexOf``1*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>array</code> is `null`.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Array.LastIndexOf``1(``0[],``0,System.Int32)
  commentId: M:System.Array.LastIndexOf``1(``0[],``0,System.Int32)
  id: LastIndexOf``1(``0[],``0,System.Int32)
  parent: System.Array
  langs:
  - csharp
  name: LastIndexOf<T>(T[], T, Int32)
  nameWithType: Array.LastIndexOf<T>(T[], T, Int32)
  fullName: Array.LastIndexOf<T>(T[], T, Int32)
  type: Method
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Searches for the specified object and returns the index of the last occurrence within the range of elements in the <xref href="System.Array"></xref> that extends from the first element to the specified index.
  remarks: "The <xref:System.Array> is searched backward starting at `startIndex` and ending at the first element.  \n  \n The elements are compared to the specified value using the <xref:System.Object.Equals%2A?displayProperty=fullName> method. If the element type is a nonintrinsic (user-defined) type, the `Equals` implementation of that type is used.  \n  \n This method is an O(`n`) operation, where `n` is the number of elements from the beginning of `array` to `startIndex`."
  example:
  - "The following code example demonstrates all three generic overloads of the <xref:System.Array.LastIndexOf%2A> method. An array of strings is created, with one entry that appears twice, at index location 0 and index location 5. The <xref:System.Array.LastIndexOf%60%601%28%60%600%5B%5D%2C%60%600%29> method overload searches the entire array from the end, and finds the second occurrence of the string. The <xref:System.Array.LastIndexOf%60%601%28%60%600%5B%5D%2C%60%600%2CSystem.Int32%29> method overload is used to search the array backward beginning with index location 3 and continuing to the beginning of the array, and finds the first occurrence of the string. Finally, the <xref:System.Array.LastIndexOf%60%601%28%60%600%5B%5D%2C%60%600%2CSystem.Int32%2CSystem.Int32%29> method overload is used to search a range of four entries, beginning at index location 4 and extending backward (that is, it searches the items at locations 4, 3, 2, and 1); this search returns –1 because there are no instances of the search string in that range.  \n  \n [!code-cpp[Array_LastIndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR/Array_LastIndexOf/cpp/source.cpp#1)]\n [!code-csharp[Array_LastIndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR/Array_LastIndexOf/cs/source.cs#1)]\n [!code-vb[Array_LastIndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Array_LastIndexOf/vb/source.vb#1)]"
  syntax:
    content: public static int LastIndexOf<T> (T[] array, T value, int startIndex);
    parameters:
    - id: array
      type: T[]
      description: The one-dimensional, zero-based <xref href="System.Array"></xref> to search.
    - id: value
      type: T
      description: The object to locate in <code>array</code>.
    - id: startIndex
      type: System.Int32
      description: The zero-based starting index of the backward search.
    typeParameters:
    - id: T
      description: The type of the elements of the array.
    return:
      type: System.Int32
      description: The zero-based index of the last occurrence of <code>value</code> within the range of elements in <code>array</code> that extends from the first element to <code>startIndex</code>, if found; otherwise, –1.
  overload: System.Array.LastIndexOf``1*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>array</code> is `null`.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>startIndex</code> is outside the range of valid indexes for <code>array</code>.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Array.LastIndexOf``1(``0[],``0,System.Int32,System.Int32)
  commentId: M:System.Array.LastIndexOf``1(``0[],``0,System.Int32,System.Int32)
  id: LastIndexOf``1(``0[],``0,System.Int32,System.Int32)
  parent: System.Array
  langs:
  - csharp
  name: LastIndexOf<T>(T[], T, Int32, Int32)
  nameWithType: Array.LastIndexOf<T>(T[], T, Int32, Int32)
  fullName: Array.LastIndexOf<T>(T[], T, Int32, Int32)
  type: Method
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Searches for the specified object and returns the index of the last occurrence within the range of elements in the <xref href="System.Array"></xref> that contains the specified number of elements and ends at the specified index.
  remarks: "The <xref:System.Array> is searched backward starting at `startIndex` and ending at `startIndex` minus `count` plus 1, if `count` is greater than 0.  \n  \n The elements are compared to the specified value using the <xref:System.Object.Equals%2A?displayProperty=fullName> method. If the element type is a nonintrinsic (user-defined) type, the `Equals` implementation of that type is used.  \n  \n This method is an O(`n`) operation, where `n` is `count`."
  example:
  - "The following code example demonstrates all three generic overloads of the <xref:System.Array.LastIndexOf%2A> method. An array of strings is created, with one entry that appears twice, at index location 0 and index location 5. The <xref:System.Array.LastIndexOf%60%601%28%60%600%5B%5D%2C%60%600%29> method overload searches the entire array from the end, and finds the second occurrence of the string. The <xref:System.Array.LastIndexOf%60%601%28%60%600%5B%5D%2C%60%600%2CSystem.Int32%29> method overload is used to search the array backward beginning with index location 3 and continuing to the beginning of the array, and finds the first occurrence of the string. Finally, the <xref:System.Array.LastIndexOf%60%601%28%60%600%5B%5D%2C%60%600%2CSystem.Int32%2CSystem.Int32%29> method overload is used to search a range of four entries, beginning at index location 4 and extending backward (that is, it searches the items at locations 4, 3, 2, and 1); this search returns –1 because there are no instances of the search string in that range.  \n  \n [!code-cpp[Array_LastIndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR/Array_LastIndexOf/cpp/source.cpp#1)]\n [!code-csharp[Array_LastIndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR/Array_LastIndexOf/cs/source.cs#1)]\n [!code-vb[Array_LastIndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Array_LastIndexOf/vb/source.vb#1)]"
  syntax:
    content: public static int LastIndexOf<T> (T[] array, T value, int startIndex, int count);
    parameters:
    - id: array
      type: T[]
      description: The one-dimensional, zero-based <xref href="System.Array"></xref> to search.
    - id: value
      type: T
      description: The object to locate in <code>array</code>.
    - id: startIndex
      type: System.Int32
      description: The zero-based starting index of the backward search.
    - id: count
      type: System.Int32
      description: The number of elements in the section to search.
    typeParameters:
    - id: T
      description: The type of the elements of the array.
    return:
      type: System.Int32
      description: The zero-based index of the last occurrence of <code>value</code> within the range of elements in <code>array</code> that contains the number of elements specified in <code>count</code> and ends at <code>startIndex</code>, if found; otherwise, –1.
  overload: System.Array.LastIndexOf``1*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>array</code> is `null`.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>startIndex</code> is outside the range of valid indexes for <code>array</code>.  \n  \n -or-  \n  \n <code>count</code> is less than zero.  \n  \n -or-  \n  \n <code>startIndex</code> and <code>count</code> do not specify a valid section in <code>array</code>."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Array.Length
  commentId: P:System.Array.Length
  id: Length
  parent: System.Array
  langs:
  - csharp
  name: Length
  nameWithType: Array.Length
  fullName: Array.Length
  type: Property
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Gets the total number of elements in all the dimensions of the <xref href="System.Array"></xref>.
  remarks: Retrieving the value of this property is an O(1) operation.
  example:
  - "The following example uses the                                 <xref:System.Array.Length%2A> property to get the total number of elements in an array. It also uses the                                 <xref:System.Array.GetUpperBound%2A> method to determine the number of elements in each dimension of a multidimensional array.  \n  \n [!code-csharp[System.Array.Length#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.array.length/cs/length1.cs#1)]\n [!code-vb[System.Array.Length#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.array.length/vb/length1.vb#1)]"
  syntax:
    content: >-
      [get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)]

      public int Length { get; }
    return:
      type: System.Int32
      description: The total number of elements in all the dimensions of the <xref href="System.Array"></xref>; zero if there are no elements in the array.
  overload: System.Array.Length*
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: The array is multidimensional and contains more than <xref href="System.Int32.MaxValue"></xref> elements.
  attributes:
  - type: 'get: System.Runtime.ConstrainedExecution.ReliabilityContract'
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Array.LongLength
  commentId: P:System.Array.LongLength
  id: LongLength
  parent: System.Array
  langs:
  - csharp
  name: LongLength
  nameWithType: Array.LongLength
  fullName: Array.LongLength
  type: Property
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Gets a 64-bit integer that represents the total number of elements in all the dimensions of the <xref href="System.Array"></xref>.
  remarks: Retrieving the value of this property is an O(1) operation.
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(false)]

      [get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)]

      public long LongLength { get; }
    return:
      type: System.Int64
      description: A 64-bit integer that represents the total number of elements in all the dimensions of the <xref href="System.Array"></xref>.
  overload: System.Array.LongLength*
  exceptions: []
  attributes:
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  - type: 'get: System.Runtime.ConstrainedExecution.ReliabilityContract'
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Array.Rank
  commentId: P:System.Array.Rank
  id: Rank
  parent: System.Array
  langs:
  - csharp
  name: Rank
  nameWithType: Array.Rank
  fullName: Array.Rank
  type: Property
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Gets the rank (number of dimensions) of the <xref href="System.Array"></xref>. For example, a one-dimensional array returns 1, a two-dimensional array returns 2, and so on.
  remarks: "For example, the Visual Basic code  \n  \n```  \nDim TDArray(0,0,0) As Integer  \n```  \n  \n and the C# code  \n  \n```  \nint[,,] TDArray = new int[1,1,1];  \n```  \n  \n create an array of three dimensions with a <xref:System.Array.Rank%2A> property whose value is 3.  \n  \n A jagged array (an array of arrays) is a one-dimensional array; the value of its <xref:System.Array.Rank%2A> property is 1.  \n  \n Retrieving the value of this property is an O(1) operation."
  example:
  - "The following example initializes a one-dimensional array, a two-dimensional array, and a jagged array, and retrieves the <xref:System.Array.Rank%2A> property of each.  \n  \n [!code-csharp[System.Array.Rank#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.array.rank/cs/rank1.cs#1)]\n [!code-vb[System.Array.Rank#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.array.rank/vb/rank1.vb#1)]"
  syntax:
    content: >-
      [get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)]

      public int Rank { get; }
    return:
      type: System.Int32
      description: The rank (number of dimensions) of the <xref href="System.Array"></xref>.
  overload: System.Array.Rank*
  exceptions: []
  attributes:
  - type: 'get: System.Runtime.ConstrainedExecution.ReliabilityContract'
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Array.Resize``1(``0[]@,System.Int32)
  commentId: M:System.Array.Resize``1(``0[]@,System.Int32)
  id: Resize``1(``0[]@,System.Int32)
  parent: System.Array
  langs:
  - csharp
  name: Resize<T>(T[], Int32)
  nameWithType: Array.Resize<T>(T[], Int32)
  fullName: Array.Resize<T>(T[], Int32)
  type: Method
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Changes the number of elements of a one-dimensional array to the specified new size.
  remarks: "This method allocates a new array with the specified size, copies elements from the old array to the new one, and then replaces the old array with the new one.`array` must be a one-dimensional array.  \n  \n If `array` is `null`, this method creates a new array with the specified size.  \n  \n If `newSize` is greater than the <xref:System.Array.Length%2A> of the old array, a new array is allocated and all the elements are copied from the old array to the new one.  If `newSize` is less than the <xref:System.Array.Length%2A> of the old array, a new array is allocated and elements are copied from the old array to the new one until the new one is filled; the rest of the elements in the old array are ignored.  If `newSize` is equal to the <xref:System.Array.Length%2A> of the old array, this method does nothing.  \n  \n This method is an O(`n`) operation, where `n` is `newSize`.  \n  \n The <xref:System.Array.Resize%2A> method resizes a one-dimensional array only. The <xref:System.Array> class does not include a method for resizing multi-dimensional arrays. To do this, you must either provide your own code or call a special-purpose method in a third-party library. The following code illustrates one possible implementation for a method that resizes an array of *n* dimensions.  \n  \n [!code-csharp[System.Array.Resize#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Array.Resize/CS/resizexd.cs#2)]\n [!code-vb[System.Array.Resize#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Array.Resize/VB/resizexd.vb#2)]"
  example:
  - "The following example shows how resizing affects the array.  \n  \n [!code-cpp[System.Array.Resize#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Array.Resize/CPP/System.Array.Resize.cpp#1)]\n [!code-csharp[System.Array.Resize#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Array.Resize/CS/arrayresize.cs#1)]\n [!code-vb[System.Array.Resize#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Array.Resize/VB/arrayresize.vb#1)]"
  syntax:
    content: public static void Resize<T> (ref T[] array, int newSize);
    parameters:
    - id: array
      type: T[]
      description: The one-dimensional, zero-based array to resize, or `null` to create a new array with the specified size.
    - id: newSize
      type: System.Int32
      description: The size of the new array.
    typeParameters:
    - id: T
      description: The type of the elements of the array.
  overload: System.Array.Resize``1*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>newSize</code> is less than zero.
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Array.Reverse(System.Array,System.Int32,System.Int32)
  commentId: M:System.Array.Reverse(System.Array,System.Int32,System.Int32)
  id: Reverse(System.Array,System.Int32,System.Int32)
  parent: System.Array
  langs:
  - csharp
  name: Reverse(Array, Int32, Int32)
  nameWithType: Array.Reverse(Array, Int32, Int32)
  fullName: Array.Reverse(Array, Int32, Int32)
  type: Method
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Reverses the sequence of the elements in a range of elements in the one-dimensional <xref href="System.Array"></xref>.
  remarks: "After a call to this method, the element at `myArray[i]`, where `i` is any index in the array, moves to `myArray[j]`, where `j` equals `(myArray.Length + myArray.GetLowerBound(0)) - (i - myArray.GetLowerBound(0)) - 1`.  \n  \n The<xref:System.Array.Reverse%2A> method can be used to reverse a jagged array.  \n  \n This method is an O(`n`) operation, where `n` is `length`."
  example:
  - "The following code example shows how to reverse the sort of the values in a range of elements in an <xref:System.Array>.  \n  \n [!code-cpp[Classic Array.Reverse1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Array.Reverse1 Example/CPP/source.cpp#1)]\n [!code-csharp[Classic Array.Reverse1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Array.Reverse1 Example/CS/source.cs#1)]\n [!code-vb[Classic Array.Reverse1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Array.Reverse1 Example/VB/source.vb#1)]"
  syntax:
    content: public static void Reverse (Array array, int index, int length);
    parameters:
    - id: array
      type: System.Array
      description: The one-dimensional <xref href="System.Array"></xref> to reverse.
    - id: index
      type: System.Int32
      description: The starting index of the section to reverse.
    - id: length
      type: System.Int32
      description: The number of elements in the section to reverse.
  overload: System.Array.Reverse*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>array</code> is `null`.
  - type: System.RankException
    commentId: T:System.RankException
    description: <code>array</code> is multidimensional.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code> is less than the lower bound of <code>array</code>.  \n  \n -or-  \n  \n <code>length</code> is less than zero."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>index</code> and <code>length</code> do not specify a valid range in <code>array</code>.
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Array.Reverse(System.Array)
  commentId: M:System.Array.Reverse(System.Array)
  id: Reverse(System.Array)
  parent: System.Array
  langs:
  - csharp
  name: Reverse(Array)
  nameWithType: Array.Reverse(Array)
  fullName: Array.Reverse(Array)
  type: Method
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Reverses the sequence of the elements in the entire one-dimensional <xref href="System.Array"></xref>.
  remarks: "After a call to this method, the element at `myArray[i]`, where `i` is any index in the array, moves to `myArray[j]`, where `j` equals `(myArray.Length + myArray.GetLowerBound(0)) - (i - myArray.GetLowerBound(0)) - 1`.  \n  \n This method is an O(`n`) operation, where `n` is the <xref:System.Array.Length%2A> of `array`.  \n  \n As the following example shows, the <xref:System.Array.Reverse%2A> method can be used to reverse a jagged array. It initializes a jagged array with one element for each month of the current year in the current culture's calendar. Each element contains an array with as many elements as that month has days. The example displays the contents of the array, calls the <xref:System.Array.Reverse%2A> method, and then displays the contents of the reversed array.  \n  \n [!code-csharp[System.Array.Reverse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.array.reverse/cs/reversejagged.cs#1)]\n [!code-vb[System.Array.Reverse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.array.reverse/vb/reversejagged.vb#1)]"
  example:
  - "The following code example shows how to reverse the sort of the values in an <xref:System.Array>.  \n  \n [!code-cpp[Classic Array.Reverse Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Array.Reverse Example/CPP/source.cpp#1)]\n [!code-csharp[Classic Array.Reverse Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Array.Reverse Example/CS/source.cs#1)]\n [!code-vb[Classic Array.Reverse Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Array.Reverse Example/VB/source.vb#1)]"
  syntax:
    content: public static void Reverse (Array array);
    parameters:
    - id: array
      type: System.Array
      description: The one-dimensional <xref href="System.Array"></xref> to reverse.
  overload: System.Array.Reverse*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>array</code> is `null`.
  - type: System.RankException
    commentId: T:System.RankException
    description: <code>array</code> is multidimensional.
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Array.Reverse``1(``0[])
  commentId: M:System.Array.Reverse``1(``0[])
  id: Reverse``1(``0[])
  parent: System.Array
  langs:
  - csharp
  name: Reverse<T>(T[])
  nameWithType: Array.Reverse<T>(T[])
  fullName: Array.Reverse<T>(T[])
  type: Method
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: public static void Reverse<T> (T[] array);
    parameters:
    - id: array
      type: T[]
      description: ''
    typeParameters:
    - id: T
      description: ''
  overload: System.Array.Reverse``1*
  exceptions: []
  version:
  - netcore-2.0
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
- uid: System.Array.Reverse``1(``0[],System.Int32,System.Int32)
  commentId: M:System.Array.Reverse``1(``0[],System.Int32,System.Int32)
  id: Reverse``1(``0[],System.Int32,System.Int32)
  parent: System.Array
  langs:
  - csharp
  name: Reverse<T>(T[], Int32, Int32)
  nameWithType: Array.Reverse<T>(T[], Int32, Int32)
  fullName: Array.Reverse<T>(T[], Int32, Int32)
  type: Method
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: public static void Reverse<T> (T[] array, int index, int length);
    parameters:
    - id: array
      type: T[]
      description: ''
    - id: index
      type: System.Int32
      description: ''
    - id: length
      type: System.Int32
      description: ''
    typeParameters:
    - id: T
      description: ''
  overload: System.Array.Reverse``1*
  exceptions: []
  version:
  - netcore-2.0
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
- uid: System.Array.SetValue(System.Object,System.Int32)
  commentId: M:System.Array.SetValue(System.Object,System.Int32)
  id: SetValue(System.Object,System.Int32)
  parent: System.Array
  langs:
  - csharp
  name: SetValue(Object, Int32)
  nameWithType: Array.SetValue(Object, Int32)
  fullName: Array.SetValue(Object, Int32)
  type: Method
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Sets a value to the element at the specified position in the one-dimensional <xref href="System.Array"></xref>. The index is specified as a 32-bit integer.
  remarks: "The <xref:System.Array.GetLowerBound%2A> and <xref:System.Array.GetUpperBound%2A> methods can determine whether the value of `index` is out of bounds.  \n  \n For more information about conversions, see <xref:System.Convert>.  \n  \n This method is an O(1) operation.  \n  \n> [!NOTE]\n>  If <xref:System.Array.SetValue%2A> is used to assign `null` to an element of an array of value types, all fields of the element are initialized to zero. The value of the element is not a null reference, and cannot be found by searching for a null reference."
  example:
  - "The following code example demonstrates how to set and get a specific value in a one-dimensional or multidimensional array.  \n  \n [!code-cpp[System.Array_GetSetValue#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Array_GetSetValue/CPP/array_getsetvalue.cpp#1)]\n [!code-csharp[System.Array_GetSetValue#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Array_GetSetValue/CS/array_getsetvalue.cs#1)]\n [!code-vb[System.Array_GetSetValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Array_GetSetValue/VB/array_getsetvalue.vb#1)]"
  syntax:
    content: public void SetValue (object value, int index);
    parameters:
    - id: value
      type: System.Object
      description: The new value for the specified element.
    - id: index
      type: System.Int32
      description: A 32-bit integer that represents the position of the <xref href="System.Array"></xref> element to set.
  overload: System.Array.SetValue*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The current <xref href="System.Array"></xref> does not have exactly one dimension.
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: <code>value</code> cannot be cast to the element type of the current <xref href="System.Array"></xref>.
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: <code>index</code> is outside the range of valid indexes for the current <xref href="System.Array"></xref>.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Array.SetValue(System.Object,System.Int32[])
  commentId: M:System.Array.SetValue(System.Object,System.Int32[])
  id: SetValue(System.Object,System.Int32[])
  parent: System.Array
  langs:
  - csharp
  name: SetValue(Object, Int32[])
  nameWithType: Array.SetValue(Object, Int32[])
  fullName: Array.SetValue(Object, Int32[])
  type: Method
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Sets a value to the element at the specified position in the multidimensional <xref href="System.Array"></xref>. The indexes are specified as an array of 32-bit integers.
  remarks: "The number of elements in `indices` must equal the number of dimensions in the <xref:System.Array>. All elements in the `indices` array must collectively specify the position of the desired element in the multidimensional <xref:System.Array>.  \n  \n The <xref:System.Array.GetLowerBound%2A> and <xref:System.Array.GetUpperBound%2A> methods can determine whether any of the values in the `indices` array is out of bounds.  \n  \n For more information about conversions, see <xref:System.Convert>.  \n  \n This method is an O(1) operation.  \n  \n> [!NOTE]\n>  If <xref:System.Array.SetValue%2A> is used to assign `null` to an element of an array of value types, all fields of the element are initialized to zero. The value of the element is not a null reference, and cannot be found by searching for a null reference."
  example:
  - "The following code example demonstrates how to set and get a specific value in a one-dimensional or multidimensional array.  \n  \n [!code-cpp[System.Array_GetSetValue#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Array_GetSetValue/CPP/array_getsetvalue.cpp#1)]\n [!code-csharp[System.Array_GetSetValue#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Array_GetSetValue/CS/array_getsetvalue.cs#1)]\n [!code-vb[System.Array_GetSetValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Array_GetSetValue/VB/array_getsetvalue.vb#1)]"
  syntax:
    content: public void SetValue (object value, int[] indices);
    parameters:
    - id: value
      type: System.Object
      description: The new value for the specified element.
    - id: indices
      type: System.Int32[]
      description: A one-dimensional array of 32-bit integers that represent the indexes specifying the position of the element to set.
  overload: System.Array.SetValue*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>indices</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The number of dimensions in the current <xref href="System.Array"></xref> is not equal to the number of elements in <code>indices</code>.
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: <code>value</code> cannot be cast to the element type of the current <xref href="System.Array"></xref>.
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: Any element in <code>indices</code> is outside the range of valid indexes for the corresponding dimension of the current <xref href="System.Array"></xref>.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Array.SetValue(System.Object,System.Int64)
  commentId: M:System.Array.SetValue(System.Object,System.Int64)
  id: SetValue(System.Object,System.Int64)
  parent: System.Array
  langs:
  - csharp
  name: SetValue(Object, Int64)
  nameWithType: Array.SetValue(Object, Int64)
  fullName: Array.SetValue(Object, Int64)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Sets a value to the element at the specified position in the one-dimensional <xref href="System.Array"></xref>. The index is specified as a 64-bit integer.
  remarks: "The <xref:System.Array.GetLowerBound%2A> and <xref:System.Array.GetUpperBound%2A> methods can determine whether the value of `index` is out of bounds.  \n  \n For more information about conversions, see <xref:System.Convert>.  \n  \n This method is an O(1) operation.  \n  \n> [!NOTE]\n>  If <xref:System.Array.SetValue%2A> is used to assign `null` to an element of an array of value types, all fields of the element are initialized to zero. The value of the element is not a null reference, and cannot be found by searching for a null reference."
  example:
  - "The following code example demonstrates how to set and get a specific value in a one-dimensional or multidimensional array.  \n  \n [!code-cpp[System.Array_GetSetValue#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Array_GetSetValue/CPP/array_getsetvalue.cpp#1)]\n [!code-csharp[System.Array_GetSetValue#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Array_GetSetValue/CS/array_getsetvalue.cs#1)]\n [!code-vb[System.Array_GetSetValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Array_GetSetValue/VB/array_getsetvalue.vb#1)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(false)]

      public void SetValue (object value, long index);
    parameters:
    - id: value
      type: System.Object
      description: The new value for the specified element.
    - id: index
      type: System.Int64
      description: A 64-bit integer that represents the position of the <xref href="System.Array"></xref> element to set.
  overload: System.Array.SetValue*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The current <xref href="System.Array"></xref> does not have exactly one dimension.
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: <code>value</code> cannot be cast to the element type of the current <xref href="System.Array"></xref>.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>index</code> is outside the range of valid indexes for the current <xref href="System.Array"></xref>.
  attributes:
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Array.SetValue(System.Object,System.Int64[])
  commentId: M:System.Array.SetValue(System.Object,System.Int64[])
  id: SetValue(System.Object,System.Int64[])
  parent: System.Array
  langs:
  - csharp
  name: SetValue(Object, Int64[])
  nameWithType: Array.SetValue(Object, Int64[])
  fullName: Array.SetValue(Object, Int64[])
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Sets a value to the element at the specified position in the multidimensional <xref href="System.Array"></xref>. The indexes are specified as an array of 64-bit integers.
  remarks: "The number of elements in `indices` must equal the number of dimensions in the <xref:System.Array>. All elements in the `indices` array must collectively specify the position of the desired element in the multidimensional <xref:System.Array>.  \n  \n The <xref:System.Array.GetLowerBound%2A> and <xref:System.Array.GetUpperBound%2A> methods can determine whether any of the values in the `indices` array is out of bounds.  \n  \n For more information about conversions, see <xref:System.Convert>.  \n  \n This method is an O(1) operation.  \n  \n> [!NOTE]\n>  If <xref:System.Array.SetValue%2A> is used to assign `null` to an element of an array of value types, all fields of the element are initialized to zero. The value of the element is not a null reference, and cannot be found by searching for a null reference."
  example:
  - "The following code example demonstrates how to set and get a specific value in a one-dimensional or multidimensional array.  \n  \n [!code-cpp[System.Array_GetSetValue#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Array_GetSetValue/CPP/array_getsetvalue.cpp#1)]\n [!code-csharp[System.Array_GetSetValue#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Array_GetSetValue/CS/array_getsetvalue.cs#1)]\n [!code-vb[System.Array_GetSetValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Array_GetSetValue/VB/array_getsetvalue.vb#1)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(false)]

      public void SetValue (object value, long[] indices);
    parameters:
    - id: value
      type: System.Object
      description: The new value for the specified element.
    - id: indices
      type: System.Int64[]
      description: A one-dimensional array of 64-bit integers that represent the indexes specifying the position of the element to set.
  overload: System.Array.SetValue*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>indices</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The number of dimensions in the current <xref href="System.Array"></xref> is not equal to the number of elements in <code>indices</code>.
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: <code>value</code> cannot be cast to the element type of the current <xref href="System.Array"></xref>.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: Any element in <code>indices</code> is outside the range of valid indexes for the corresponding dimension of the current <xref href="System.Array"></xref>.
  attributes:
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Array.SetValue(System.Object,System.Int32,System.Int32)
  commentId: M:System.Array.SetValue(System.Object,System.Int32,System.Int32)
  id: SetValue(System.Object,System.Int32,System.Int32)
  parent: System.Array
  langs:
  - csharp
  name: SetValue(Object, Int32, Int32)
  nameWithType: Array.SetValue(Object, Int32, Int32)
  fullName: Array.SetValue(Object, Int32, Int32)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Sets a value to the element at the specified position in the two-dimensional <xref href="System.Array"></xref>. The indexes are specified as 32-bit integers.
  remarks: "The <xref:System.Array.GetLowerBound%2A> and <xref:System.Array.GetUpperBound%2A> methods can determine whether any of the indexes is out of bounds.  \n  \n For more information about conversions, see <xref:System.Convert>.  \n  \n This method is an O(1) operation.  \n  \n> [!NOTE]\n>  If <xref:System.Array.SetValue%2A> is used to assign `null` to an element of an array of value types, all fields of the element are initialized to zero. The value of the element is not a null reference, and cannot be found by searching for a null reference."
  example:
  - "The following code example demonstrates how to set and get a specific value in a one-dimensional or multidimensional array.  \n  \n [!code-cpp[System.Array_GetSetValue#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Array_GetSetValue/CPP/array_getsetvalue.cpp#1)]\n [!code-csharp[System.Array_GetSetValue#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Array_GetSetValue/CS/array_getsetvalue.cs#1)]\n [!code-vb[System.Array_GetSetValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Array_GetSetValue/VB/array_getsetvalue.vb#1)]"
  syntax:
    content: public void SetValue (object value, int index1, int index2);
    parameters:
    - id: value
      type: System.Object
      description: The new value for the specified element.
    - id: index1
      type: System.Int32
      description: A 32-bit integer that represents the first-dimension index of the <xref href="System.Array"></xref> element to set.
    - id: index2
      type: System.Int32
      description: A 32-bit integer that represents the second-dimension index of the <xref href="System.Array"></xref> element to set.
  overload: System.Array.SetValue*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The current <xref href="System.Array"></xref> does not have exactly two dimensions.
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: <code>value</code> cannot be cast to the element type of the current <xref href="System.Array"></xref>.
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: Either <code>index1</code> or <code>index2</code> is outside the range of valid indexes for the corresponding dimension of the current <xref href="System.Array"></xref>.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Array.SetValue(System.Object,System.Int64,System.Int64)
  commentId: M:System.Array.SetValue(System.Object,System.Int64,System.Int64)
  id: SetValue(System.Object,System.Int64,System.Int64)
  parent: System.Array
  langs:
  - csharp
  name: SetValue(Object, Int64, Int64)
  nameWithType: Array.SetValue(Object, Int64, Int64)
  fullName: Array.SetValue(Object, Int64, Int64)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Sets a value to the element at the specified position in the two-dimensional <xref href="System.Array"></xref>. The indexes are specified as 64-bit integers.
  remarks: "The <xref:System.Array.GetLowerBound%2A> and <xref:System.Array.GetUpperBound%2A> methods can determine whether any of the indexes is out of bounds.  \n  \n For more information about conversions, see <xref:System.Convert>.  \n  \n This method is an O(1) operation.  \n  \n> [!NOTE]\n>  If <xref:System.Array.SetValue%2A> is used to assign `null` to an element of an array of value types, all fields of the element are initialized to zero. The value of the element is not a null reference, and cannot be found by searching for a null reference."
  example:
  - "The following code example demonstrates how to set and get a specific value in a one-dimensional or multidimensional array.  \n  \n [!code-cpp[System.Array_GetSetValue#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Array_GetSetValue/CPP/array_getsetvalue.cpp#1)]\n [!code-csharp[System.Array_GetSetValue#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Array_GetSetValue/CS/array_getsetvalue.cs#1)]\n [!code-vb[System.Array_GetSetValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Array_GetSetValue/VB/array_getsetvalue.vb#1)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(false)]

      public void SetValue (object value, long index1, long index2);
    parameters:
    - id: value
      type: System.Object
      description: The new value for the specified element.
    - id: index1
      type: System.Int64
      description: A 64-bit integer that represents the first-dimension index of the <xref href="System.Array"></xref> element to set.
    - id: index2
      type: System.Int64
      description: A 64-bit integer that represents the second-dimension index of the <xref href="System.Array"></xref> element to set.
  overload: System.Array.SetValue*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The current <xref href="System.Array"></xref> does not have exactly two dimensions.
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: <code>value</code> cannot be cast to the element type of the current <xref href="System.Array"></xref>.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: Either <code>index1</code> or <code>index2</code> is outside the range of valid indexes for the corresponding dimension of the current <xref href="System.Array"></xref>.
  attributes:
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Array.SetValue(System.Object,System.Int32,System.Int32,System.Int32)
  commentId: M:System.Array.SetValue(System.Object,System.Int32,System.Int32,System.Int32)
  id: SetValue(System.Object,System.Int32,System.Int32,System.Int32)
  parent: System.Array
  langs:
  - csharp
  name: SetValue(Object, Int32, Int32, Int32)
  nameWithType: Array.SetValue(Object, Int32, Int32, Int32)
  fullName: Array.SetValue(Object, Int32, Int32, Int32)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Sets a value to the element at the specified position in the three-dimensional <xref href="System.Array"></xref>. The indexes are specified as 32-bit integers.
  remarks: "The <xref:System.Array.GetLowerBound%2A> and <xref:System.Array.GetUpperBound%2A> methods can determine whether any of the indexes is out of bounds.  \n  \n For more information about conversions, see <xref:System.Convert>.  \n  \n This method is an O(1) operation.  \n  \n> [!NOTE]\n>  If <xref:System.Array.SetValue%2A> is used to assign `null` to an element of an array of value types, all fields of the element are initialized to zero. The value of the element is not a null reference, and cannot be found by searching for a null reference."
  example:
  - "The following code example demonstrates how to set and get a specific value in a one-dimensional or multidimensional array.  \n  \n [!code-cpp[System.Array_GetSetValue#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Array_GetSetValue/CPP/array_getsetvalue.cpp#1)]\n [!code-csharp[System.Array_GetSetValue#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Array_GetSetValue/CS/array_getsetvalue.cs#1)]\n [!code-vb[System.Array_GetSetValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Array_GetSetValue/VB/array_getsetvalue.vb#1)]"
  syntax:
    content: public void SetValue (object value, int index1, int index2, int index3);
    parameters:
    - id: value
      type: System.Object
      description: The new value for the specified element.
    - id: index1
      type: System.Int32
      description: A 32-bit integer that represents the first-dimension index of the <xref href="System.Array"></xref> element to set.
    - id: index2
      type: System.Int32
      description: A 32-bit integer that represents the second-dimension index of the <xref href="System.Array"></xref> element to set.
    - id: index3
      type: System.Int32
      description: A 32-bit integer that represents the third-dimension index of the <xref href="System.Array"></xref> element to set.
  overload: System.Array.SetValue*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The current <xref href="System.Array"></xref> does not have exactly three dimensions.
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: <code>value</code> cannot be cast to the element type of the current <xref href="System.Array"></xref>.
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: <code>index1</code> or <code>index2</code> or <code>index3</code> is outside the range of valid indexes for the corresponding dimension of the current <xref href="System.Array"></xref>.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Array.SetValue(System.Object,System.Int64,System.Int64,System.Int64)
  commentId: M:System.Array.SetValue(System.Object,System.Int64,System.Int64,System.Int64)
  id: SetValue(System.Object,System.Int64,System.Int64,System.Int64)
  parent: System.Array
  langs:
  - csharp
  name: SetValue(Object, Int64, Int64, Int64)
  nameWithType: Array.SetValue(Object, Int64, Int64, Int64)
  fullName: Array.SetValue(Object, Int64, Int64, Int64)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Sets a value to the element at the specified position in the three-dimensional <xref href="System.Array"></xref>. The indexes are specified as 64-bit integers.
  remarks: "The <xref:System.Array.GetLowerBound%2A> and <xref:System.Array.GetUpperBound%2A> methods can determine whether any of the indexes is out of bounds.  \n  \n For more information about conversions, see <xref:System.Convert>.  \n  \n This method is an O(1) operation.  \n  \n> [!NOTE]\n>  If <xref:System.Array.SetValue%2A> is used to assign `null` to an element of an array of value types, all fields of the element are initialized to zero. The value of the element is not a null reference, and cannot be found by searching for a null reference."
  example:
  - "The following code example demonstrates how to set and get a specific value in a one-dimensional or multidimensional array.  \n  \n [!code-cpp[System.Array_GetSetValue#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Array_GetSetValue/CPP/array_getsetvalue.cpp#1)]\n [!code-csharp[System.Array_GetSetValue#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Array_GetSetValue/CS/array_getsetvalue.cs#1)]\n [!code-vb[System.Array_GetSetValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Array_GetSetValue/VB/array_getsetvalue.vb#1)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(false)]

      public void SetValue (object value, long index1, long index2, long index3);
    parameters:
    - id: value
      type: System.Object
      description: The new value for the specified element.
    - id: index1
      type: System.Int64
      description: A 64-bit integer that represents the first-dimension index of the <xref href="System.Array"></xref> element to set.
    - id: index2
      type: System.Int64
      description: A 64-bit integer that represents the second-dimension index of the <xref href="System.Array"></xref> element to set.
    - id: index3
      type: System.Int64
      description: A 64-bit integer that represents the third-dimension index of the <xref href="System.Array"></xref> element to set.
  overload: System.Array.SetValue*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The current <xref href="System.Array"></xref> does not have exactly three dimensions.
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: <code>value</code> cannot be cast to the element type of the current <xref href="System.Array"></xref>.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>index1</code> or <code>index2</code> or <code>index3</code> is outside the range of valid indexes for the corresponding dimension of the current <xref href="System.Array"></xref>.
  attributes:
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Array.Sort(System.Array,System.Int32,System.Int32,System.Collections.IComparer)
  commentId: M:System.Array.Sort(System.Array,System.Int32,System.Int32,System.Collections.IComparer)
  id: Sort(System.Array,System.Int32,System.Int32,System.Collections.IComparer)
  parent: System.Array
  langs:
  - csharp
  name: Sort(Array, Int32, Int32, IComparer)
  nameWithType: Array.Sort(Array, Int32, Int32, IComparer)
  fullName: Array.Sort(Array, Int32, Int32, IComparer)
  type: Method
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Sorts the elements in a range of elements in a one-dimensional <xref href="System.Array"></xref> using the specified <xref href="System.Collections.IComparer"></xref>.
  remarks: "If `comparer` is `null`, each element within the specified range of elements in `array` must implement the <xref:System.IComparable> interface to be capable of comparisons with every other element in `array`.  \n  \n If the sort is not successfully completed, the results are undefined.  \n  \n The .NET Framework includes predefined <xref:System.Collections.IComparer> implementations listed in the following table.  \n  \n|Implementation|Description|  \n|--------------------|-----------------|  \n|<xref:System.Collections.CaseInsensitiveComparer?displayProperty=fullName>|Compares any two objects, but performs a case-insensitive comparison of strings.|  \n|<xref:System.Collections.Comparer.Default?displayProperty=fullName>|Compares any two objects by using the sorting conventions of the current culture.|  \n|<xref:System.Collections.Comparer.DefaultInvariant?displayProperty=fullName>|Compares any two objects by using the sorting conventions of the invariant culture.|  \n|<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName>|Compares two objects of type `T` by using the type's default sort order.|  \n  \n You can also support custom comparisons by providing an instance of your own <xref:System.Collections.IComparer> implementation to the `comparer` parameter. The example does this by defining a `ReverseComparer` class that reverses the default sort order for instances of a type and performs case-insensitive string comparison.  \n  \n This method uses the introspective sort (introsort) algorithm as follows:  \n  \n-   If the partition size is fewer than 16 elements, it uses an [insertion sort](http://en.wikipedia.org/wiki/Insertion_sort) algorithm.  \n  \n-   If the number of partitions exceeds 2 * Log<sup>N</sup>, where  *N* is the range of the input array, it uses a [Heapsort](http://en.wikipedia.org/wiki/Heapsort) algorithm.  \n  \n-   Otherwise, it uses a [Quicksort](http://en.wikipedia.org/wiki/Quicksort) algorithm.  \n  \n This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved. In contrast, a stable sort preserves the order of elements that are equal.  \n  \n For arrays that are sorted by using the Heapsort and Quicksort algorithms, in the worst case, this method is an O(`n` log `n`) operation, where `n` is `length`."
  example:
  - "The following code example shows how to sort the values in an <xref:System.Array> using the default comparer and a custom comparer that reverses the sort order. Note that the result might vary depending on the current <xref:System.Globalization.CultureInfo>.  \n  \n [!code-cpp[System.Array.Sort#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Array.Sort/CPP/arraysort.cpp#1)]\n [!code-csharp[System.Array.Sort#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Array.Sort/CS/arraysort.cs#1)]\n [!code-vb[System.Array.Sort#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Array.Sort/VB/arraysort.vb#1)]"
  syntax:
    content: public static void Sort (Array array, int index, int length, System.Collections.IComparer comparer);
    parameters:
    - id: array
      type: System.Array
      description: The one-dimensional <xref href="System.Array"></xref> to sort.
    - id: index
      type: System.Int32
      description: The starting index of the range to sort.
    - id: length
      type: System.Int32
      description: The number of elements in the range to sort.
    - id: comparer
      type: System.Collections.IComparer
      description: "The <xref href=\"System.Collections.IComparer\"></xref> implementation to use when comparing elements.  \n  \n -or-  \n  \n `null` to use the <xref href=\"System.IComparable\"></xref> implementation of each element."
  overload: System.Array.Sort*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>array</code> is `null`.
  - type: System.RankException
    commentId: T:System.RankException
    description: <code>array</code> is multidimensional.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code> is less than the lower bound of <code>array</code>.  \n  \n -or-  \n  \n <code>length</code> is less than zero."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>index</code> and <code>length</code> do not specify a valid range in <code>array</code>.  \n  \n -or-  \n  \n The implementation of <code>comparer</code> caused an error during the sort. For example, <code>comparer</code> might not return 0 when comparing an item with itself."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: <code>comparer</code> is `null`, and one or more elements in <code>array</code> do not implement the <xref href="System.IComparable"></xref> interface.
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Array.Sort(System.Array,System.Array,System.Int32,System.Int32,System.Collections.IComparer)
  commentId: M:System.Array.Sort(System.Array,System.Array,System.Int32,System.Int32,System.Collections.IComparer)
  id: Sort(System.Array,System.Array,System.Int32,System.Int32,System.Collections.IComparer)
  parent: System.Array
  langs:
  - csharp
  name: Sort(Array, Array, Int32, Int32, IComparer)
  nameWithType: Array.Sort(Array, Array, Int32, Int32, IComparer)
  fullName: Array.Sort(Array, Array, Int32, Int32, IComparer)
  type: Method
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Sorts a range of elements in a pair of one-dimensional <xref href="System.Array"></xref> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <xref href="System.Array"></xref> using the specified <xref href="System.Collections.IComparer"></xref>.
  remarks: "Each key in the `keys`<xref:System.Array> has a corresponding item in the `items`<xref:System.Array>. When a key is repositioned during the sorting, the corresponding item in the `items`<xref:System.Array> is similarly repositioned. Therefore, the `items`<xref:System.Array> is sorted according to the arrangement of the corresponding keys in the `keys`<xref:System.Array>.  \n  \n If `comparer` is `null`, each key within the specified range of elements in the `keys`<xref:System.Array> must implement the <xref:System.IComparable> interface to be capable of comparisons with every other key.  \n  \n You can sort if there are more items than keys, but the items that have no corresponding keys will not be sorted. You cannot sort if there are more keys than items; doing this throws an <xref:System.ArgumentException>.  \n  \n If the sort is not successfully completed, the results are undefined.  \n  \n The .NET Framework includes predefined <xref:System.Collections.IComparer> implementations listed in the following table.  \n  \n|Implementation|Description|  \n|--------------------|-----------------|  \n|<xref:System.Collections.CaseInsensitiveComparer?displayProperty=fullName>|Compares any two objects, but performs a case-insensitive comparison of strings.|  \n|<xref:System.Collections.Comparer.Default?displayProperty=fullName>|Compares any two objects by using the sorting conventions of the current culture.|  \n|<xref:System.Collections.Comparer.DefaultInvariant?displayProperty=fullName>|Compares any two objects by using the sorting conventions of the invariant culture.|  \n|<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName>|Compares two objects of type `T` by using the type's default sort order.|  \n  \n You can also support custom comparisons by providing an instance of your own <xref:System.Collections.IComparer> implementation to the `comparer` parameter. The example does this by defining a custom <xref:System.Collections.IComparer> implementation that reverses the default sort order and performs case-insensitive string comparison.  \n  \n This method uses the introspective sort (introsort) algorithm as follows:  \n  \n-   If the partition size is fewer than 16 elements, it uses an [insertion sort](http://en.wikipedia.org/wiki/Insertion_sort) algorithm.  \n  \n-   If the number of partitions exceeds 2 * Log<sup>N</sup>, where *N* is the range of the input array, it uses a [Heapsort](http://en.wikipedia.org/wiki/Heapsort) algorithm.  \n  \n-   Otherwise, it uses a [Quicksort](http://en.wikipedia.org/wiki/Quicksort) algorithm.  \n  \n This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved. In contrast, a stable sort preserves the order of elements that are equal.  \n  \n For arrays that are sorted by using the Heapsort and Quicksort algorithms, in the worst case, this method is an O(`n` log `n`) operation, where `n` is `length`."
  example:
  - "The following code example shows how to sort two associated arrays where the first array contains the keys and the second array contains the values. Sorts are done using the default comparer and a custom comparer that reverses the sort order. Note that the result might vary depending on the current <xref:System.Globalization.CultureInfo>.  \n  \n [!code-cpp[System.Array.Sort2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Array.Sort2/CPP/arraysort2.cpp#1)]\n [!code-csharp[System.Array.Sort2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Array.Sort2/CS/arraysort2.cs#1)]\n [!code-vb[System.Array.Sort2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Array.Sort2/VB/arraysort2.vb#1)]"
  syntax:
    content: public static void Sort (Array keys, Array items, int index, int length, System.Collections.IComparer comparer);
    parameters:
    - id: keys
      type: System.Array
      description: The one-dimensional <xref href="System.Array"></xref> that contains the keys to sort.
    - id: items
      type: System.Array
      description: "The one-dimensional <xref href=\"System.Array\"></xref> that contains the items that correspond to each of the keys in the <code>keys</code><xref href=\"System.Array\"></xref>.  \n  \n -or-  \n  \n `null` to sort only the <code>keys</code><xref href=\"System.Array\"></xref>."
    - id: index
      type: System.Int32
      description: The starting index of the range to sort.
    - id: length
      type: System.Int32
      description: The number of elements in the range to sort.
    - id: comparer
      type: System.Collections.IComparer
      description: "The <xref href=\"System.Collections.IComparer\"></xref> implementation to use when comparing elements.  \n  \n -or-  \n  \n `null` to use the <xref href=\"System.IComparable\"></xref> implementation of each element."
  overload: System.Array.Sort*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>keys</code> is `null`.
  - type: System.RankException
    commentId: T:System.RankException
    description: "The <code>keys</code><xref href=\"System.Array\"></xref> is multidimensional.  \n  \n -or-  \n  \n The <code>items</code><xref href=\"System.Array\"></xref> is multidimensional."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code> is less than the lower bound of <code>keys</code>.  \n  \n -or-  \n  \n <code>length</code> is less than zero."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>items</code> is not `null`, and the lower bound of <code>keys</code> does not match the lower bound of <code>items</code>.  \n  \n -or-  \n  \n <code>items</code> is not `null`, and the length of <code>keys</code> is greater than the length of <code>items</code>.  \n  \n -or-  \n  \n <code>index</code> and <code>length</code> do not specify a valid range in the <code>keys</code><xref href=\"System.Array\"></xref>.  \n  \n -or-  \n  \n <code>items</code> is not `null`, and <code>index</code> and <code>length</code> do not specify a valid range in the <code>items</code><xref href=\"System.Array\"></xref>.  \n  \n -or-  \n  \n The implementation of <code>comparer</code> caused an error during the sort. For example, <code>comparer</code> might not return 0 when comparing an item with itself."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: <code>comparer</code> is `null`, and one or more elements in the <code>keys</code><xref href="System.Array"></xref> do not implement the <xref href="System.IComparable"></xref> interface.
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Array.Sort(System.Array,System.Int32,System.Int32)
  commentId: M:System.Array.Sort(System.Array,System.Int32,System.Int32)
  id: Sort(System.Array,System.Int32,System.Int32)
  parent: System.Array
  langs:
  - csharp
  name: Sort(Array, Int32, Int32)
  nameWithType: Array.Sort(Array, Int32, Int32)
  fullName: Array.Sort(Array, Int32, Int32)
  type: Method
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Sorts the elements in a range of elements in a one-dimensional <xref href="System.Array"></xref> using the <xref href="System.IComparable"></xref> implementation of each element of the <xref href="System.Array"></xref>.
  remarks: "Each element within the specified range of elements in `array` must implement the <xref:System.IComparable> interface to be capable of comparisons with every other element in `array`.  \n  \n If the sort is not successfully completed, the results are undefined.  \n  \n This method uses the introspective sort (introsort) algorithm as follows:  \n  \n-   If the partition size is fewer than 16 elements, it uses an [insertion sort](http://en.wikipedia.org/wiki/Insertion_sort) algorithm.  \n  \n-   If the number of partitions exceeds 2 * Log<sup>N</sup>, where  *N* is the range of the input array, it uses a [Heapsort](http://en.wikipedia.org/wiki/Heapsort) algorithm.  \n  \n-   Otherwise, it uses a [Quicksort](http://en.wikipedia.org/wiki/Quicksort) algorithm.  \n  \n This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved. In contrast, a stable sort preserves the order of elements that are equal.  \n  \n For arrays that are sorted by using the Heapsort and Quicksort algorithms, in the worst case, this method is an O(`n` log `n`) operation, where `n` is `length`."
  example:
  - "The following code example shows how to sort the values in an <xref:System.Array> using the default comparer and a custom comparer that reverses the sort order. Note that the result might vary depending on the current <xref:System.Globalization.CultureInfo>.  \n  \n [!code-cpp[System.Array.Sort#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Array.Sort/CPP/arraysort.cpp#1)]\n [!code-csharp[System.Array.Sort#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Array.Sort/CS/arraysort.cs#1)]\n [!code-vb[System.Array.Sort#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Array.Sort/VB/arraysort.vb#1)]"
  syntax:
    content: public static void Sort (Array array, int index, int length);
    parameters:
    - id: array
      type: System.Array
      description: The one-dimensional <xref href="System.Array"></xref> to sort.
    - id: index
      type: System.Int32
      description: The starting index of the range to sort.
    - id: length
      type: System.Int32
      description: The number of elements in the range to sort.
  overload: System.Array.Sort*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>array</code> is `null`.
  - type: System.RankException
    commentId: T:System.RankException
    description: <code>array</code> is multidimensional.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code> is less than the lower bound of <code>array</code>.  \n  \n -or-  \n  \n <code>length</code> is less than zero."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>index</code> and <code>length</code> do not specify a valid range in <code>array</code>.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: One or more elements in <code>array</code> do not implement the <xref href="System.IComparable"></xref> interface.
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Array.Sort(System.Array,System.Array,System.Int32,System.Int32)
  commentId: M:System.Array.Sort(System.Array,System.Array,System.Int32,System.Int32)
  id: Sort(System.Array,System.Array,System.Int32,System.Int32)
  parent: System.Array
  langs:
  - csharp
  name: Sort(Array, Array, Int32, Int32)
  nameWithType: Array.Sort(Array, Array, Int32, Int32)
  fullName: Array.Sort(Array, Array, Int32, Int32)
  type: Method
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Sorts a range of elements in a pair of one-dimensional <xref href="System.Array"></xref> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <xref href="System.Array"></xref> using the <xref href="System.IComparable"></xref> implementation of each key.
  remarks: "Each key in the `keys`<xref:System.Array> has a corresponding item in the `items`<xref:System.Array>. When a key is repositioned during the sorting, the corresponding item in the `items`<xref:System.Array> is similarly repositioned. Therefore, the `items`<xref:System.Array> is sorted according to the arrangement of the corresponding keys in the `keys`<xref:System.Array>.  \n  \n Each key within the specified range of elements in the `keys`<xref:System.Array> must implement the <xref:System.IComparable> interface to be capable of comparisons with every other key.  \n  \n You can sort if there are more items than keys, but the items that have no corresponding keys will not be sorted. You cannot sort if there are more keys than items; doing this throws an <xref:System.ArgumentException>.  \n  \n If the sort is not successfully completed, the results are undefined.  \n  \n This method uses the introspective sort (introsort) algorithm as follows:  \n  \n-   If the partition size is fewer than 16 elements, it uses an [insertion sort](http://en.wikipedia.org/wiki/Insertion_sort) algorithm.  \n  \n-   If the number of partitions exceeds 2 * Log<sup>N</sup>, where *N* is the range of the input array, it uses a [Heapsort](http://en.wikipedia.org/wiki/Heapsort) algorithm.  \n  \n-   Otherwise, it uses a [Quicksort](http://en.wikipedia.org/wiki/Quicksort) algorithm.  \n  \n This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved. In contrast, a stable sort preserves the order of elements that are equal.  \n  \n For arrays that are sorted by using the Heapsort and Quicksort algorithms, in the worst case, this method is an O(`n` log `n`) operation, where `n` is `length`."
  example:
  - "The following code example shows how to sort two associated arrays where the first array contains the keys and the second array contains the values. Sorts are done using the default comparer and a custom comparer that reverses the sort order. Note that the result might vary depending on the current <xref:System.Globalization.CultureInfo>.  \n  \n [!code-cpp[System.Array.Sort2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Array.Sort2/CPP/arraysort2.cpp#1)]\n [!code-csharp[System.Array.Sort2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Array.Sort2/CS/arraysort2.cs#1)]\n [!code-vb[System.Array.Sort2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Array.Sort2/VB/arraysort2.vb#1)]"
  syntax:
    content: public static void Sort (Array keys, Array items, int index, int length);
    parameters:
    - id: keys
      type: System.Array
      description: The one-dimensional <xref href="System.Array"></xref> that contains the keys to sort.
    - id: items
      type: System.Array
      description: "The one-dimensional <xref href=\"System.Array\"></xref> that contains the items that correspond to each of the keys in the <code>keys</code><xref href=\"System.Array\"></xref>.  \n  \n -or-  \n  \n `null` to sort only the <code>keys</code><xref href=\"System.Array\"></xref>."
    - id: index
      type: System.Int32
      description: The starting index of the range to sort.
    - id: length
      type: System.Int32
      description: The number of elements in the range to sort.
  overload: System.Array.Sort*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>keys</code> is `null`.
  - type: System.RankException
    commentId: T:System.RankException
    description: "The <code>keys</code><xref href=\"System.Array\"></xref> is multidimensional.  \n  \n -or-  \n  \n The <code>items</code><xref href=\"System.Array\"></xref> is multidimensional."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code> is less than the lower bound of <code>keys</code>.  \n  \n -or-  \n  \n <code>length</code> is less than zero."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>items</code> is not `null`, and the length of <code>keys</code> is greater than the length of <code>items</code>.  \n  \n -or-  \n  \n <code>index</code> and <code>length</code> do not specify a valid range in the <code>keys</code><xref href=\"System.Array\"></xref>.  \n  \n -or-  \n  \n <code>items</code> is not `null`, and <code>index</code> and <code>length</code> do not specify a valid range in the <code>items</code><xref href=\"System.Array\"></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: One or more elements in the <code>keys</code><xref href="System.Array"></xref> do not implement the <xref href="System.IComparable"></xref> interface.
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Array.Sort(System.Array,System.Collections.IComparer)
  commentId: M:System.Array.Sort(System.Array,System.Collections.IComparer)
  id: Sort(System.Array,System.Collections.IComparer)
  parent: System.Array
  langs:
  - csharp
  name: Sort(Array, IComparer)
  nameWithType: Array.Sort(Array, IComparer)
  fullName: Array.Sort(Array, IComparer)
  type: Method
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Sorts the elements in a one-dimensional <xref href="System.Array"></xref> using the specified <xref href="System.Collections.IComparer"></xref>.
  remarks: "If `comparer` is `null`, each element of `array` must implement the <xref:System.IComparable> interface to be capable of comparisons with every other element in `array`.  \n  \n If the sort is not successfully completed, the results are undefined.  \n  \n This method uses the introspective sort (introsort) algorithm as follows:  \n  \n-   If the partition size is fewer than 16 elements, it uses an [insertion sort](http://en.wikipedia.org/wiki/Insertion_sort) algorithm.  \n  \n-   If the number of partitions exceeds 2 * Log<sup>N</sup>, where  *N* is the range of the input array, it uses a [Heapsort](http://en.wikipedia.org/wiki/Heapsort) algorithm.  \n  \n-   Otherwise, it uses a [Quicksort](http://en.wikipedia.org/wiki/Quicksort) algorithm.  \n  \n This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved. In contrast, a stable sort preserves the order of elements that are equal.  \n  \n For arrays that are sorted by using the Heapsort and Quicksort algorithms, in the worst case, this method is an O(`n` log `n`) operation, where `n` is the <xref:System.Array.Length%2A> of `array`.  \n  \n The .NET Framework includes predefined <xref:System.Collections.IComparer> implementations listed in the following table.  \n  \n|Implementation|Description|  \n|--------------------|-----------------|  \n|<xref:System.Collections.CaseInsensitiveComparer?displayProperty=fullName>|Compares any two objects, but performs a case-insensitive comparison of strings.|  \n|<xref:System.Collections.Comparer.Default?displayProperty=fullName>|Compares any two objects by using the sorting conventions of the current culture.|  \n|<xref:System.Collections.Comparer.DefaultInvariant?displayProperty=fullName>|Compares any two objects by using the sorting conventions of the invariant culture.|  \n|<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName>|Compares two objects of type `T` by using the type's default sort order.|  \n  \n You can also support custom comparisons by providing an instance of your own <xref:System.Collections.IComparer> implementation to the `comparer` parameter. The example does this by defining a `ReverseComparer` class that reverses the default sort order for instances of a type and performs case-insensitive string comparison."
  example:
  - "The following example sorts the values in a string arrayby using the default comparer. It also defines a custom <xref:System.Collections.IComparer> implementation named `ReverseComparer` that reverses an object's default sort order while performing a case-insensitive string comparison. Note that the output might vary depending on the current culture.  \n  \n [!code-cpp[System.Array.Sort#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Array.Sort/CPP/arraysort.cpp#1)]\n [!code-csharp[System.Array.Sort#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Array.Sort/CS/arraysort.cs#1)]\n [!code-vb[System.Array.Sort#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Array.Sort/VB/arraysort.vb#1)]"
  syntax:
    content: public static void Sort (Array array, System.Collections.IComparer comparer);
    parameters:
    - id: array
      type: System.Array
      description: The one-dimensional array to sort.
    - id: comparer
      type: System.Collections.IComparer
      description: "The implementation to use when comparing elements.  \n  \n -or-  \n  \n `null` to use the <xref href=\"System.IComparable\"></xref> implementation of each element."
  overload: System.Array.Sort*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>array</code> is `null`.
  - type: System.RankException
    commentId: T:System.RankException
    description: <code>array</code> is multidimensional.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: <code>comparer</code> is `null`, and one or more elements in <code>array</code> do not implement the <xref href="System.IComparable"></xref> interface.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The implementation of <code>comparer</code> caused an error during the sort. For example, <code>comparer</code> might not return 0 when comparing an item with itself.
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Array.Sort(System.Array,System.Array,System.Collections.IComparer)
  commentId: M:System.Array.Sort(System.Array,System.Array,System.Collections.IComparer)
  id: Sort(System.Array,System.Array,System.Collections.IComparer)
  parent: System.Array
  langs:
  - csharp
  name: Sort(Array, Array, IComparer)
  nameWithType: Array.Sort(Array, Array, IComparer)
  fullName: Array.Sort(Array, Array, IComparer)
  type: Method
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Sorts a pair of one-dimensional <xref href="System.Array"></xref> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <xref href="System.Array"></xref> using the specified <xref href="System.Collections.IComparer"></xref>.
  remarks: "Each key in the `keys`<xref:System.Array> has a corresponding item in the `items`<xref:System.Array>. When a key is repositioned during the sorting, the corresponding item in the `items`<xref:System.Array> is similarly repositioned. Therefore, the `items`<xref:System.Array> is sorted according to the arrangement of the corresponding keys in the `keys`<xref:System.Array>.  \n  \n If `comparer` is `null`, each key in the `keys`<xref:System.Array> must implement the <xref:System.IComparable> interface to be capable of comparisons with every other key.  \n  \n You can sort if there are more items than keys, but the items that have no corresponding keys will not be sorted. You cannot sort if there are more keys than items; doing this throws an <xref:System.ArgumentException>.  \n  \n If the sort is not successfully completed, the results are undefined.  \n  \n The .NET Framework includes predefined <xref:System.Collections.IComparer> implementations listed in the following table.  \n  \n|Implementation|Description|  \n|--------------------|-----------------|  \n|<xref:System.Collections.CaseInsensitiveComparer?displayProperty=fullName>|Compares any two objects, but performs a case-insensitive comparison of strings.|  \n|<xref:System.Collections.Comparer.Default?displayProperty=fullName>|Compares any two objects by using the sorting conventions of the current culture.|  \n|<xref:System.Collections.Comparer.DefaultInvariant?displayProperty=fullName>|Compares any two objects by using the sorting conventions of the invariant culture.|  \n|<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName>|Compares two objects of type `T` by using the type's default sort order.|  \n  \n You can also support custom comparisons by providing an instance of your own <xref:System.Collections.IComparer> implementation to the `comparer` parameter. The example does this by defining an <xref:System.Collections.IComparer> implementation that reverses the default sort order and performs case-insensitive string comparison.  \n  \n This method uses the introspective sort (introsort) algorithm as follows:  \n  \n-   If the partition size is fewer than 16 elements, it uses an [insertion sort](http://en.wikipedia.org/wiki/Insertion_sort) algorithm.  \n  \n-   If the number of partitions exceeds 2 * Log<sup>N</sup>, where  *N* is the range of the input array, it uses a [Heapsort](http://en.wikipedia.org/wiki/Heapsort) algorithm.  \n  \n-   Otherwise, it uses a [Quicksort](http://en.wikipedia.org/wiki/Quicksort) algorithm.  \n  \n This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved. In contrast, a stable sort preserves the order of elements that are equal.  \n  \n For arrays that are sorted by using the Heapsort and Quicksort algorithms, in the worst case, this method is an O(`n` log `n`) operation, where `n` is the <xref:System.Array.Length%2A> of `keys`."
  example:
  - "The following example shows how to sort two associated arrays where the first array contains the keys and the second array contains the values. Sorts are done using the default comparer and a custom comparer that reverses the sort order. Note that the result might vary depending on the current <xref:System.Globalization.CultureInfo>.  \n  \n [!code-cpp[System.Array.Sort2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Array.Sort2/CPP/arraysort2.cpp#1)]\n [!code-csharp[System.Array.Sort2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Array.Sort2/CS/arraysort2.cs#1)]\n [!code-vb[System.Array.Sort2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Array.Sort2/VB/arraysort2.vb#1)]"
  syntax:
    content: public static void Sort (Array keys, Array items, System.Collections.IComparer comparer);
    parameters:
    - id: keys
      type: System.Array
      description: The one-dimensional <xref href="System.Array"></xref> that contains the keys to sort.
    - id: items
      type: System.Array
      description: "The one-dimensional <xref href=\"System.Array\"></xref> that contains the items that correspond to each of the keys in the <code>keys</code><xref href=\"System.Array\"></xref>.  \n  \n -or-  \n  \n `null` to sort only the <code>keys</code><xref href=\"System.Array\"></xref>."
    - id: comparer
      type: System.Collections.IComparer
      description: "The <xref href=\"System.Collections.IComparer\"></xref> implementation to use when comparing elements.  \n  \n -or-  \n  \n `null` to use the <xref href=\"System.IComparable\"></xref> implementation of each element."
  overload: System.Array.Sort*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>keys</code> is `null`.
  - type: System.RankException
    commentId: T:System.RankException
    description: "The <code>keys</code><xref href=\"System.Array\"></xref> is multidimensional.  \n  \n -or-  \n  \n The <code>items</code><xref href=\"System.Array\"></xref> is multidimensional."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>items</code> is not `null`, and the length of <code>keys</code> is greater than the length of <code>items</code>.  \n  \n -or-  \n  \n The implementation of <code>comparer</code> caused an error during the sort. For example, <code>comparer</code> might not return 0 when comparing an item with itself."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: <code>comparer</code> is `null`, and one or more elements in the <code>keys</code><xref href="System.Array"></xref> do not implement the <xref href="System.IComparable"></xref> interface.
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Array.Sort(System.Array,System.Array)
  commentId: M:System.Array.Sort(System.Array,System.Array)
  id: Sort(System.Array,System.Array)
  parent: System.Array
  langs:
  - csharp
  name: Sort(Array, Array)
  nameWithType: Array.Sort(Array, Array)
  fullName: Array.Sort(Array, Array)
  type: Method
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Sorts a pair of one-dimensional <xref href="System.Array"></xref> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <xref href="System.Array"></xref> using the <xref href="System.IComparable"></xref> implementation of each key.
  remarks: "Each key in the `keys`<xref:System.Array> has a corresponding item in the `items`<xref:System.Array>. When a key is repositioned during the sorting, the corresponding item in the `items`<xref:System.Array> is similarly repositioned. Therefore, the `items`<xref:System.Array> is sorted according to the arrangement of the corresponding keys in the `keys`<xref:System.Array>.  \n  \n Each key in the `keys`<xref:System.Array> must implement the <xref:System.IComparable> interface to be capable of comparisons with every other key.  \n  \n You can sort if there are more items than keys, but the items that have no corresponding keys will not be sorted. You cannot sort if there are more keys than items; doing this throws an <xref:System.ArgumentException>.  \n  \n If the sort is not successfully completed, the results are undefined.  \n  \n This method uses the introspective sort (introsort) algorithm as follows:  \n  \n-   If the partition size is fewer than 16 elements, it uses an [insertion sort](http://en.wikipedia.org/wiki/Insertion_sort) algorithm.  \n  \n-   If the number of partitions exceeds 2 * Log<sup>N</sup>, where *N* is the range of the input array, it uses a [Heapsort](http://en.wikipedia.org/wiki/Heapsort) algorithm.  \n  \n-   Otherwise, it uses a [Quicksort](http://en.wikipedia.org/wiki/Quicksort) algorithm.  \n  \n This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved. In contrast, a stable sort preserves the order of elements that are equal.  \n  \n For arrays that are sorted by using the Heapsort and Quicksort algorithms, in the worst case, this method is an O(`n` log `n`) operation, where `n` is the <xref:System.Array.Length%2A> of `keys`."
  example:
  - "The following example shows how to sort two associated arrays where the first array contains the keys and the second array contains the values. Sorts are done using the default comparer and a custom comparer that reverses the sort order. Note that the result might vary depending on the current <xref:System.Globalization.CultureInfo>.  \n  \n [!code-cpp[System.Array.Sort2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Array.Sort2/CPP/arraysort2.cpp#1)]\n [!code-csharp[System.Array.Sort2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Array.Sort2/CS/arraysort2.cs#1)]\n [!code-vb[System.Array.Sort2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Array.Sort2/VB/arraysort2.vb#1)]"
  syntax:
    content: public static void Sort (Array keys, Array items);
    parameters:
    - id: keys
      type: System.Array
      description: The one-dimensional <xref href="System.Array"></xref> that contains the keys to sort.
    - id: items
      type: System.Array
      description: "The one-dimensional <xref href=\"System.Array\"></xref> that contains the items that correspond to each of the keys in the <code>keys</code><xref href=\"System.Array\"></xref>.  \n  \n -or-  \n  \n `null` to sort only the <code>keys</code><xref href=\"System.Array\"></xref>."
  overload: System.Array.Sort*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>keys</code> is `null`.
  - type: System.RankException
    commentId: T:System.RankException
    description: "The <code>keys</code><xref href=\"System.Array\"></xref> is multidimensional.  \n  \n -or-  \n  \n The <code>items</code><xref href=\"System.Array\"></xref> is multidimensional."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>items</code> is not `null`, and the length of <code>keys</code> is greater than the length of <code>items</code>.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: One or more elements in the <code>keys</code><xref href="System.Array"></xref> do not implement the <xref href="System.IComparable"></xref> interface.
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Array.Sort(System.Array)
  commentId: M:System.Array.Sort(System.Array)
  id: Sort(System.Array)
  parent: System.Array
  langs:
  - csharp
  name: Sort(Array)
  nameWithType: Array.Sort(Array)
  fullName: Array.Sort(Array)
  type: Method
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Sorts the elements in an entire one-dimensional <xref href="System.Array"></xref> using the <xref href="System.IComparable"></xref> implementation of each element of the <xref href="System.Array"></xref>.
  remarks: "Each element of `array` must implement the <xref:System.IComparable> interface to be capable of comparisons with every other element in `array`.  \n  \n If the sort is not successfully completed, the results are undefined.  \n  \n This method uses the introspective sort (introsort) algorithm as follows:  \n  \n-   If the partition size is fewer than 16 elements, it uses an[insertion sort](http://en.wikipedia.org/wiki/Insertion_sort) algorithm.  \n  \n-   If the number of partitions exceeds 2 * Log<sup>N</sup>, where *N* is the range of the input array, it uses a [Heapsort](http://en.wikipedia.org/wiki/Heapsort) algorithm.  \n  \n-   Otherwise, it uses a [Quicksort](http://en.wikipedia.org/wiki/Quicksort) algorithm.  \n  \n This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved. In contrast, a stable sort preserves the order of elements that are equal.  \n  \n For arrays that are sorted by using the Heapsort and Quicksort algorithms, in the worst case, this method is an O(`n` log `n`) operation, where `n` is the <xref:System.Array.Length%2A> of `array`."
  example:
  - "The following code example shows how to sort the values in an <xref:System.Array> using the default comparer and a custom comparer that reverses the sort order. Note that the result might vary depending on the current <xref:System.Globalization.CultureInfo>.  \n  \n [!code-cpp[System.Array.Sort#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Array.Sort/CPP/arraysort.cpp#1)]\n [!code-csharp[System.Array.Sort#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Array.Sort/CS/arraysort.cs#1)]\n [!code-vb[System.Array.Sort#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Array.Sort/VB/arraysort.vb#1)]"
  syntax:
    content: public static void Sort (Array array);
    parameters:
    - id: array
      type: System.Array
      description: The one-dimensional <xref href="System.Array"></xref> to sort.
  overload: System.Array.Sort*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>array</code> is `null`.
  - type: System.RankException
    commentId: T:System.RankException
    description: <code>array</code> is multidimensional.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: One or more elements in <code>array</code> do not implement the <xref href="System.IComparable"></xref> interface.
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Array.Sort``1(``0[])
  commentId: M:System.Array.Sort``1(``0[])
  id: Sort``1(``0[])
  parent: System.Array
  langs:
  - csharp
  name: Sort<T>(T[])
  nameWithType: Array.Sort<T>(T[])
  fullName: Array.Sort<T>(T[])
  type: Method
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Sorts the elements in an entire <xref href="System.Array"></xref> using the <xref href="System.IComparable`1"></xref> generic interface implementation of each element of the <xref href="System.Array"></xref>.
  remarks: "Each element of `array` must implement the <xref:System.IComparable%601> generic interface to be capable of comparisons with every other element in `array`.  \n  \n If the sort is not successfully completed, the results are undefined.  \n  \n This method uses the introspective sort (introsort) algorithm as follows:  \n  \n-   If the partition size is fewer than 16 elements, it uses an [insertion sort](http://en.wikipedia.org/wiki/Insertion_sort) algorithm.  \n  \n-   If the number of partitions exceeds 2 * Log<sup>N</sup>, where  *N* is the range of the input array, it uses a [Heapsort](http://en.wikipedia.org/wiki/Heapsort) algorithm.  \n  \n-   Otherwise, it uses a [Quicksort](http://en.wikipedia.org/wiki/Quicksort) algorithm.  \n  \n This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved. In contrast, a stable sort preserves the order of elements that are equal.  \n  \n For arrays that are sorted by using the Heapsort and Quicksort algorithms, in the worst case, this method is an O(`n` log `n`) operation, where `n` is the <xref:System.Array.Length%2A> of `array`."
  example:
  - "The following code example demonstrates the <xref:System.Array.Sort%60%601%28%60%600%5B%5D%29> generic method overload and the<xref:System.Array.BinarySearch%60%601%28%60%600%5B%5D%2C%60%600%29> generic method overload. An array of strings is created, in no particular order.  \n  \n The array is displayed, sorted, and displayed again.  \n  \n> [!NOTE]\n>  The calls to the <xref:System.Array.Sort%2A> and <xref:System.Array.BinarySearch%2A> generic methods do not look any different from calls to their nongeneric counterparts, because Visual Basic, C#, and C++ infer the type of the generic type parameter from the type of the first argument. If you use the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) to examine the Microsoft intermediate language (MSIL), you can see that the generic methods are being called.  \n  \n The <xref:System.Array.BinarySearch%60%601%28%60%600%5B%5D%2C%60%600%29> generic method overload is then used to search for two strings, one that is not in the array and one that is. The array and the return value of the <xref:System.Array.BinarySearch%2A> method are passed to the `ShowWhere` generic method, which displays the index value if the string is found, and otherwise the elements the search string would fall between if it were in the array. The index is negative if the string is not n the array, so the `ShowWhere` method takes the bitwise complement (the ~ operator in C# and Visual C++, `Xor` -1 in Visual Basic) to obtain the index of the first element in the list that is larger than the search string.  \n  \n [!code-cpp[Array_SortSearch#1](~/samples/snippets/cpp/VS_Snippets_CLR/Array_SortSearch/cpp/source.cpp#1)]\n [!code-csharp[Array_SortSearch#1](~/samples/snippets/csharp/VS_Snippets_CLR/Array_SortSearch/cs/source.cs#1)]\n [!code-vb[Array_SortSearch#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Array_SortSearch/vb/source.vb#1)]"
  syntax:
    content: public static void Sort<T> (T[] array);
    parameters:
    - id: array
      type: T[]
      description: The one-dimensional, zero-based <xref href="System.Array"></xref> to sort.
    typeParameters:
    - id: T
      description: The type of the elements of the array.
  overload: System.Array.Sort``1*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>array</code> is `null`.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: One or more elements in <code>array</code> do not implement the <xref href="System.IComparable`1"></xref> generic interface.
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Array.Sort``1(``0[],System.Collections.Generic.IComparer{``0})
  commentId: M:System.Array.Sort``1(``0[],System.Collections.Generic.IComparer{``0})
  id: Sort``1(``0[],System.Collections.Generic.IComparer{``0})
  parent: System.Array
  langs:
  - csharp
  name: Sort<T>(T[], IComparer<T>)
  nameWithType: Array.Sort<T>(T[], IComparer<T>)
  fullName: Array.Sort<T>(T[], IComparer<T>)
  type: Method
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Sorts the elements in an <xref href="System.Array"></xref> using the specified <xref href="System.Collections.Generic.IComparer`1"></xref> generic interface.
  remarks: "If `comparer` is `null`, each element of `array` must implement the <xref:System.IComparable%601> generic interface to be capable of comparisons with every other element in `array`.  \n  \n If the sort is not successfully completed, the results are undefined.  \n  \n This method uses the introspective sort (introsort) algorithm as follows:  \n  \n-   If the partition size is fewer than 16 elements, it uses an [insertion sort](http://en.wikipedia.org/wiki/Insertion_sort) algorithm.  \n  \n-   If the number of partitions exceeds 2 * Log<sup>N</sup>, where  *N* is the range of the input array, it uses a [Heapsort](http://en.wikipedia.org/wiki/Heapsort) algorithm.  \n  \n-   Otherwise, it uses a [Quicksort](http://en.wikipedia.org/wiki/Quicksort) algorithm.  \n  \n This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved. In contrast, a stable sort preserves the order of elements that are equal.  \n  \n For arrays that are sorted by using the Heapsort and Quicksort algorithms, in the worst case, this method is an O(`n` log `n`) operation, where `n` is the <xref:System.Array.Length%2A> of `array`."
  example:
  - "The following code example demonstrates the <xref:System.Array.Sort%60%601%28%60%600%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29> generic method overload and the <xref:System.Array.BinarySearch%60%601%28%60%600%5B%5D%2C%60%600%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29> generic method overload.  \n  \n The code example defines an alternative comparer for strings, named `ReverseCompare`, which implements the `IComparer<string>` (`IComparer(Of String)` in Visual Basic, `IComparer<String^>` in Visual C++) generic interface. The comparer calls the <xref:System.String.CompareTo%28System.String%29> method, reversing the order of the comparands so that the strings sort high-to-low instead of low-to-high.  \n  \n The array is displayed, sorted, and displayed again. Arrays must be sorted in order to use the <xref:System.Array.BinarySearch%2A> method.  \n  \n> [!NOTE]\n>  The calls to the <xref:System.Array.Sort%60%601%28%60%600%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29> and <xref:System.Array.BinarySearch%60%601%28%60%600%5B%5D%2C%60%600%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29> generic methods do not look any different from calls to their nongeneric counterparts, because Visual Basic, C#, and C++ infer the type of the generic type parameter from the type of the first argument. If you use the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) to examine the Microsoft intermediate language (MSIL), you can see that the generic methods are being called.  \n  \n The <xref:System.Array.BinarySearch%60%601%28%60%600%5B%5D%2C%60%600%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29> generic method overload is then used to search for two strings, one that is not in the array and one that is. The array and the return value of the <xref:System.Array.BinarySearch%60%601%28%60%600%5B%5D%2C%60%600%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29> method are passed to the `ShowWhere` generic method, which displays the index value if the string is found, and otherwise the elements the search string would fall between if it were in the array. The index is negative if the string is not n the array, so the `ShowWhere` method takes the bitwise complement (the ~ operator in C# and Visual C++, `Xor` -1 in Visual Basic) to obtain the index of the first element in the list that is larger than the search string.  \n  \n [!code-cpp[Array_SortSearchComparer#1](~/samples/snippets/cpp/VS_Snippets_CLR/Array_SortSearchComparer/cpp/source.cpp#1)]\n [!code-csharp[Array_SortSearchComparer#1](~/samples/snippets/csharp/VS_Snippets_CLR/Array_SortSearchComparer/cs/source.cs#1)]\n [!code-vb[Array_SortSearchComparer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Array_SortSearchComparer/vb/source.vb#1)]"
  syntax:
    content: public static void Sort<T> (T[] array, System.Collections.Generic.IComparer<T> comparer);
    parameters:
    - id: array
      type: T[]
      description: The one-dimensional, zero-base <xref href="System.Array"></xref> to sort
    - id: comparer
      type: System.Collections.Generic.IComparer`1
      description: The <xref href="System.Collections.Generic.IComparer`1"></xref> generic interface implementation to use when comparing elements, or `null` to use the <xref href="System.IComparable`1"></xref> generic interface implementation of each element.
    typeParameters:
    - id: T
      description: The type of the elements of the array.
  overload: System.Array.Sort``1*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>array</code> is `null`.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: <code>comparer</code> is `null`, and one or more elements in <code>array</code> do not implement the <xref href="System.IComparable`1"></xref> generic interface.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The implementation of <code>comparer</code> caused an error during the sort. For example, <code>comparer</code> might not return 0 when comparing an item with itself.
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Array.Sort``1(``0[],System.Comparison{``0})
  commentId: M:System.Array.Sort``1(``0[],System.Comparison{``0})
  id: Sort``1(``0[],System.Comparison{``0})
  parent: System.Array
  langs:
  - csharp
  name: Sort<T>(T[], Comparison<T>)
  nameWithType: Array.Sort<T>(T[], Comparison<T>)
  fullName: Array.Sort<T>(T[], Comparison<T>)
  type: Method
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Sorts the elements in an <xref href="System.Array"></xref> using the specified <xref href="System.Comparison`1"></xref>.
  remarks: "If the sort is not successfully completed, the results are undefined.  \n  \n This method uses introspective sort (introsort) algorithm as follows:  \n  \n-   If the partition size is fewer than 16 elements, it uses an [insertion sort](http://en.wikipedia.org/wiki/Insertion_sort) algorithm.  \n  \n-   If the number of partitions exceeds 2 * Log<sup>N</sup>, where  *N* is the range of the input array, it uses a [Heapsort](http://en.wikipedia.org/wiki/Heapsort) algorithm.  \n  \n-   Otherwise, it uses a [Quicksort](http://en.wikipedia.org/wiki/Quicksort) algorithm.  \n  \n This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved. In contrast, a stable sort preserves the order of elements that are equal.  \n  \n For arrays that are sorted by using the Heapsort and Quicksort algorithms, in the worst case, this method is an O(`n` log `n`) operation, where `n` is the <xref:System.Array.Length%2A> of `array`."
  example:
  - "The following code example demonstrates the <xref:System.Collections.Generic.List%601.Sort%28System.Comparison%7B%600%7D%29> method overload.  \n  \n The code example defines an alternative comparison method for strings, named `CompareDinosByLength`. This method works as follows: First, the comparandsare tested for`null`, and a null reference is treated as less than a non-null. Second, the string lengths are compared, and the longer string is deemed to be greater. Third, if the lengths are equal, ordinary string comparison is used.  \n  \n A array of strings is created and populated with four strings, in no particular order. The list also includes an empty string and a null reference. The list is displayed, sorted using a <xref:System.Comparison%601> generic delegate representing the `CompareDinosByLength` method, and displayed again.  \n  \n [!code-cpp[Array_SortComparison#1](~/samples/snippets/cpp/VS_Snippets_CLR/Array_SortComparison/cpp/source.cpp#1)]\n [!code-csharp[Array_SortComparison#1](~/samples/snippets/csharp/VS_Snippets_CLR/Array_SortComparison/cs/source.cs#1)]\n [!code-vb[Array_SortComparison#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Array_SortComparison/vb/source.vb#1)]"
  syntax:
    content: public static void Sort<T> (T[] array, Comparison<T> comparison);
    parameters:
    - id: array
      type: T[]
      description: The one-dimensional, zero-based <xref href="System.Array"></xref> to sort
    - id: comparison
      type: System.Comparison`1
      description: The <xref href="System.Comparison`1"></xref> to use when comparing elements.
    typeParameters:
    - id: T
      description: The type of the elements of the array.
  overload: System.Array.Sort``1*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>array</code> is `null`.  \n  \n -or-  \n  \n <code>comparison</code> is `null`."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The implementation of <code>comparison</code> caused an error during the sort. For example, <code>comparison</code> might not return 0 when comparing an item with itself.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Array.Sort``1(``0[],System.Int32,System.Int32)
  commentId: M:System.Array.Sort``1(``0[],System.Int32,System.Int32)
  id: Sort``1(``0[],System.Int32,System.Int32)
  parent: System.Array
  langs:
  - csharp
  name: Sort<T>(T[], Int32, Int32)
  nameWithType: Array.Sort<T>(T[], Int32, Int32)
  fullName: Array.Sort<T>(T[], Int32, Int32)
  type: Method
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Sorts the elements in a range of elements in an <xref href="System.Array"></xref> using the <xref href="System.IComparable`1"></xref> generic interface implementation of each element of the <xref href="System.Array"></xref>.
  remarks: "Each element within the specified range of elements in `array` must implement the <xref:System.IComparable%601> generic interface to be capable of comparisons with every other element in `array`.  \n  \n If the sort is not successfully completed, the results are undefined.  \n  \n This method uses the introspective sort (introsort) algorithm as follows:  \n  \n-   If the partition size is fewer than 16 elements, it uses an [insertion sort](http://en.wikipedia.org/wiki/Insertion_sort) algorithm.  \n  \n-   If the number of partitions exceeds 2 * Log<sup>N</sup>, where  *N* is the range of the input array, it uses a [Heapsort](http://en.wikipedia.org/wiki/Heapsort) algorithm.  \n  \n-   Otherwise, it uses a [Quicksort](http://en.wikipedia.org/wiki/Quicksort) algorithm.  \n  \n This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved. In contrast, a stable sort preserves the order of elements that are equal.  \n  \n For arrays that are sorted by using the Heapsort and Quicksort algorithms, in the worst case, this method is an O(`n` log `n`) operation, where `n` is `length`."
  example:
  - "The following code example demonstrates the <xref:System.Array.Sort%60%601%28%60%600%5B%5D%2CSystem.Int32%2CSystem.Int32%29> generic method overload and the <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29> generic method overload for sorting a range in an array.  \n  \n The code example defines an alternative comparer for strings, named `ReverseCompare`, which implements the `IComparer<string>` (`IComparer(Of String)` in Visual Basic, `IComparer<String^>` in Visual C++) generic interface. The comparer calls the <xref:System.String.CompareTo%28System.String%29> method, reversing the order of the comparands so that the strings sort high-to-low instead of low-to-high.  \n  \n The code example creates and displays an array of dinosaur names, consisting of three herbivores followed by three carnivores (tyrannosaurids, to be precise). The <xref:System.Array.Sort%60%601%28%60%600%5B%5D%2CSystem.Int32%2CSystem.Int32%29> generic method overload is used to sort the last three elements of the array, which is then displayed. The <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29> generic method overload is used with `ReverseCompare` to sort the last three elements in reverse order. The thoroughly confused dinosaurs are displayed again.  \n  \n> [!NOTE]\n>  The calls to the <xref:System.Array.Sort%60%601%28%60%600%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29> and <xref:System.Array.BinarySearch%60%601%28%60%600%5B%5D%2C%60%600%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29> generic methods do not look any different from calls to their nongeneric counterparts, because Visual Basic, C#, and C++ infer the type of the generic type parameter from the type of the first argument. If you use the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) to examine the Microsoft intermediate language (MSIL), you can see that the generic methods are being called.  \n  \n [!code-cpp[Array_SortIntIntIComparer#1](~/samples/snippets/cpp/VS_Snippets_CLR/Array_SortIntIntIComparer/cpp/source.cpp#1)]\n [!code-csharp[Array_SortIntIntIComparer#1](~/samples/snippets/csharp/VS_Snippets_CLR/Array_SortIntIntIComparer/cs/source.cs#1)]\n [!code-vb[Array_SortIntIntIComparer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Array_SortIntIntIComparer/vb/source.vb#1)]"
  syntax:
    content: public static void Sort<T> (T[] array, int index, int length);
    parameters:
    - id: array
      type: T[]
      description: The one-dimensional, zero-based <xref href="System.Array"></xref> to sort
    - id: index
      type: System.Int32
      description: The starting index of the range to sort.
    - id: length
      type: System.Int32
      description: The number of elements in the range to sort.
    typeParameters:
    - id: T
      description: The type of the elements of the array.
  overload: System.Array.Sort``1*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>array</code> is `null`.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code> is less than the lower bound of <code>array</code>.  \n  \n -or-  \n  \n <code>length</code> is less than zero."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>index</code> and <code>length</code> do not specify a valid range in <code>array</code>.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: One or more elements in <code>array</code> do not implement the <xref href="System.IComparable`1"></xref> generic interface.
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Array.Sort``1(``0[],System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})
  commentId: M:System.Array.Sort``1(``0[],System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})
  id: Sort``1(``0[],System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})
  parent: System.Array
  langs:
  - csharp
  name: Sort<T>(T[], Int32, Int32, IComparer<T>)
  nameWithType: Array.Sort<T>(T[], Int32, Int32, IComparer<T>)
  fullName: Array.Sort<T>(T[], Int32, Int32, IComparer<T>)
  type: Method
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Sorts the elements in a range of elements in an <xref href="System.Array"></xref> using the specified <xref href="System.Collections.Generic.IComparer`1"></xref> generic interface.
  remarks: "If `comparer` is `null`, each element within the specified range of elements in `array` must implement the <xref:System.IComparable%601> generic interface to be capable of comparisons with every other element in `array`.  \n  \n If the sort is not successfully completed, the results are undefined.  \n  \n This method uses the introspective sort (introsort) algorithm as follows:  \n  \n-   If the partition size is fewer than 16 elements, it uses an [insertion sort](http://en.wikipedia.org/wiki/Insertion_sort) algorithm.  \n  \n-   If the number of partitions exceeds 2 * Log<sup>N</sup>, where  *N* is the range of the input array, it uses a [Heapsort](http://en.wikipedia.org/wiki/Heapsort) algorithm.  \n  \n-   Otherwise, it uses a [Quicksort](http://en.wikipedia.org/wiki/Quicksort) algorithm.  \n  \n This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved. In contrast, a stable sort preserves the order of elements that are equal.  \n  \n For arrays that are sorted by using the Heapsort and Quicksort algorithms, in the worst case, this method is an O(`n` log `n`) operation, where `n` is `length`."
  example:
  - "The following code example demonstrates the <xref:System.Array.Sort%60%601%28%60%600%5B%5D%2CSystem.Int32%2CSystem.Int32%29> generic method overload and the <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29> generic method overload for sorting a range in an array.  \n  \n The code example defines an alternative comparer for strings, named `ReverseCompare`, which implements the `IComparer<string>` (`IComparer(Of String)` in Visual Basic, `IComparer<String^>` in Visual C++) generic interface. The comparer calls the <xref:System.String.CompareTo%28System.String%29> method, reversing the order of the comparands so that the strings sort high-to-low instead of low-to-high.  \n  \n The code example creates and displays an array of dinosaur names, consisting of three herbivores followed by three carnivores (tyrannosaurids, to be precise). The <xref:System.Array.Sort%60%601%28%60%600%5B%5D%2CSystem.Int32%2CSystem.Int32%29> generic method overload is used to sort the last three elements of the array, which is then displayed. The <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29> generic method overload is used with `ReverseCompare` to sort the last three elements in reverse order. The thoroughly confused dinosaurs are displayed again.  \n  \n> [!NOTE]\n>  The calls to the <xref:System.Array.Sort%60%601%28%60%600%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29> and <xref:System.Array.BinarySearch%60%601%28%60%600%5B%5D%2C%60%600%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29> generic methods do not look any different from calls to their nongeneric counterparts, because Visual Basic, C#, and C++ infer the type of the generic type parameter from the type of the first argument. If you use the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) to examine the Microsoft intermediate language (MSIL), you can see that the generic methods are being called.  \n  \n [!code-cpp[Array_SortIntIntIComparer#1](~/samples/snippets/cpp/VS_Snippets_CLR/Array_SortIntIntIComparer/cpp/source.cpp#1)]\n [!code-csharp[Array_SortIntIntIComparer#1](~/samples/snippets/csharp/VS_Snippets_CLR/Array_SortIntIntIComparer/cs/source.cs#1)]\n [!code-vb[Array_SortIntIntIComparer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Array_SortIntIntIComparer/vb/source.vb#1)]"
  syntax:
    content: public static void Sort<T> (T[] array, int index, int length, System.Collections.Generic.IComparer<T> comparer);
    parameters:
    - id: array
      type: T[]
      description: The one-dimensional, zero-based <xref href="System.Array"></xref> to sort.
    - id: index
      type: System.Int32
      description: The starting index of the range to sort.
    - id: length
      type: System.Int32
      description: The number of elements in the range to sort.
    - id: comparer
      type: System.Collections.Generic.IComparer`1
      description: The <xref href="System.Collections.Generic.IComparer`1"></xref> generic interface implementation to use when comparing elements, or `null` to use the <xref href="System.IComparable`1"></xref> generic interface implementation of each element.
    typeParameters:
    - id: T
      description: The type of the elements of the array.
  overload: System.Array.Sort``1*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>array</code> is `null`.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code> is less than the lower bound of <code>array</code>.  \n  \n -or-  \n  \n <code>length</code> is less than zero."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>index</code> and <code>length</code> do not specify a valid range in <code>array</code>.  \n  \n -or-  \n  \n The implementation of <code>comparer</code> caused an error during the sort. For example, <code>comparer</code> might not return 0 when comparing an item with itself."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: <code>comparer</code> is `null`, and one or more elements in <code>array</code> do not implement the <xref href="System.IComparable`1"></xref> generic interface.
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Array.Sort``2(``0[],``1[])
  commentId: M:System.Array.Sort``2(``0[],``1[])
  id: Sort``2(``0[],``1[])
  parent: System.Array
  langs:
  - csharp
  name: Sort<TKey,TValue>(TKey[], TValue[])
  nameWithType: Array.Sort<TKey,TValue>(TKey[], TValue[])
  fullName: Array.Sort<TKey,TValue>(TKey[], TValue[])
  type: Method
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Sorts a pair of <xref href="System.Array"></xref> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <xref href="System.Array"></xref> using the <xref href="System.IComparable`1"></xref> generic interface implementation of each key.
  remarks: "Each key in the `keys`<xref:System.Array> has a corresponding item in the `items`<xref:System.Array>. When a key is repositioned during the sorting, the corresponding item in the `items`<xref:System.Array> is similarly repositioned. Therefore, the `items`<xref:System.Array> is sorted according to the arrangement of the corresponding keys in the `keys`<xref:System.Array>.  \n  \n Each key in the `keys`<xref:System.Array> must implement the <xref:System.IComparable%601> generic interface to be capable of comparisons with every other key.  \n  \n You can sort if there are more items than keys, but the items that have no corresponding keys will not be sorted. You cannot sort if there are more keys than items; doing this throws an<xref:System.ArgumentException>.  \n  \n If the sort is not successfully completed, the results are undefined.  \n  \n This method uses the introspective sort (introsort) algorithm as follows:  \n  \n-   If the partition size is fewer than 16 elements, it uses an [insertion sort](http://en.wikipedia.org/wiki/Insertion_sort) algorithm.  \n  \n-   If the number of partitions exceeds 2 * Log<sup>N</sup>, where  *N* is the range of the input array, it uses a [Heapsort](http://en.wikipedia.org/wiki/Heapsort) algorithm.  \n  \n-   Otherwise, it uses a [Quicksort](http://en.wikipedia.org/wiki/Quicksort) algorithm.  \n  \n This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved. In contrast, a stable sort preserves the order of elements that are equal.  \n  \n For arrays that are sorted by using the Heapsort and Quicksort algorithms, in the worst case, this method is an O(`n` log `n`) operation, where `n` is the <xref:System.Array.Length%2A> of `array`."
  example:
  - "The following code example demonstrates the <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%29>, <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29>, <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Int32%2CSystem.Int32%29>, and <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29> generic method overloads, for sorting pairs of arrays that represent keys and values.  \n  \n The code example defines an alternative comparer for strings, named `ReverseCompare`, which implements the `IComparer<string>` (`IComparer(Of String)` in Visual Basic, `IComparer<String^>` in Visual C++) generic interface. The comparer calls the <xref:System.String.CompareTo%28System.String%29> method, reversing the order of the comparands so that the strings sort high-to-low instead of low-to-high.  \n  \n The code example creates and displays an array of dinosaur names (the keys) and an array of integers representing the maximum length of each dinosaur in meters (the values). The arrays are then sorted and displayed several times:  \n  \n-   The <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%29> overload is used to sort both arrays in order of the dinosaur names in the first array.  \n  \n-   The <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29> overload and an instance of `ReverseCompare` are used to reverse the sort order of the paired arrays.  \n  \n-   The <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Int32%2CSystem.Int32%29> overload is used to sort the last three elements of both arrays.  \n  \n-   The <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29> overload is used to sort the last three elements of both arrays in reverse order.  \n  \n> [!NOTE]\n>  The calls to the generic methods do not look any different from calls to their nongeneric counterparts, because Visual Basic, C#, and C++ infer the type of the generic type parameter from the type of the first two arguments. If you use the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) to examine the Microsoft intermediate language (MSIL), you can see that the generic methods are being called.  \n  \n [!code-cpp[Array_Sort2IntIntIComparer#1](~/samples/snippets/cpp/VS_Snippets_CLR/Array_Sort2IntIntIComparer/cpp/source.cpp#1)]\n [!code-csharp[Array_Sort2IntIntIComparer#1](~/samples/snippets/csharp/VS_Snippets_CLR/Array_Sort2IntIntIComparer/cs/source.cs#1)]\n [!code-vb[Array_Sort2IntIntIComparer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Array_Sort2IntIntIComparer/vb/source.vb#1)]"
  syntax:
    content: public static void Sort<TKey,TValue> (TKey[] keys, TValue[] items);
    parameters:
    - id: keys
      type: TKey[]
      description: The one-dimensional, zero-based <xref href="System.Array"></xref> that contains the keys to sort.
    - id: items
      type: TValue[]
      description: The one-dimensional, zero-based <xref href="System.Array"></xref> that contains the items that correspond to the keys in <code>keys</code>, or `null` to sort only <code>keys</code>.
    typeParameters:
    - id: TKey
      description: The type of the elements of the key array.
    - id: TValue
      description: The type of the elements of the items array.
  overload: System.Array.Sort``2*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>keys</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>items</code> is not `null`, and the lower bound of <code>keys</code> does not match the lower bound of <code>items</code>.  \n  \n -or-  \n  \n <code>items</code> is not `null`, and the length of <code>keys</code> is greater than the length of <code>items</code>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: One or more elements in the <code>keys</code><xref href="System.Array"></xref> do not implement the <xref href="System.IComparable`1"></xref> generic interface.
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Array.Sort``2(``0[],``1[],System.Collections.Generic.IComparer{``0})
  commentId: M:System.Array.Sort``2(``0[],``1[],System.Collections.Generic.IComparer{``0})
  id: Sort``2(``0[],``1[],System.Collections.Generic.IComparer{``0})
  parent: System.Array
  langs:
  - csharp
  name: Sort<TKey,TValue>(TKey[], TValue[], IComparer<TKey>)
  nameWithType: Array.Sort<TKey,TValue>(TKey[], TValue[], IComparer<TKey>)
  fullName: Array.Sort<TKey,TValue>(TKey[], TValue[], IComparer<TKey>)
  type: Method
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Sorts a pair of <xref href="System.Array"></xref> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <xref href="System.Array"></xref> using the specified <xref href="System.Collections.Generic.IComparer`1"></xref> generic interface.
  remarks: "Each key in the `keys`<xref:System.Array> has a corresponding item in the `items`<xref:System.Array>. When a key is repositioned during the sorting, the corresponding item in the `items`<xref:System.Array> is similarly repositioned. Therefore, the `items`<xref:System.Array> is sorted according to the arrangement of the corresponding keys in the `keys`<xref:System.Array>.  \n  \n If `comparer` is `null`, each key in the `keys`<xref:System.Array> must implement the <xref:System.IComparable%601> generic interface to be capable of comparisons with every other key.  \n  \n You can sort if there are more items than keys, but the items that have no corresponding keys will not be sorted. You cannot sort if there are more keys than items; doing this throws an <xref:System.ArgumentException>.  \n  \n If the sort is not successfully completed, the results are undefined.  \n  \n This method uses the introspective sort (introsort) algorithm as follows:  \n  \n-   If the partition size is fewer than 16 elements, it uses an [insertion sort](http://en.wikipedia.org/wiki/Insertion_sort) algorithm.  \n  \n-   If the number of partitions exceeds 2 * Log<sup>N</sup>, where  *N* is the range of the input array, it uses a [Heapsort](http://en.wikipedia.org/wiki/Heapsort) algorithm.  \n  \n-   Otherwise, it uses a [Quicksort](http://en.wikipedia.org/wiki/Quicksort) algorithm.  \n  \n This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved. In contrast, a stable sort preserves the order of elements that are equal.  \n  \n For arrays that are sorted by using the Heapsort and Quicksort algorithms, in the worst case, this method is an O(`n` log `n`) operation, where `n` is the <xref:System.Array.Length%2A> of `array`."
  example:
  - "The following code example demonstrates the <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%29>, [\\], TValue\\<xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29>,<xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Int32%2CSystem.Int32%29>, and <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29> generic method overloads, for sorting pairs of arrays that represent keys and values.  \n  \n The code example defines an alternative comparer for strings, named `ReverseCompare`, which implements the `IComparer<string>` (`IComparer(Of String)` in Visual Basic, `IComparer<String^>` in Visual C++) generic interface. The comparer calls the <xref:System.String.CompareTo%28System.String%29> method, reversing the order of the comparands so that the strings sort high-to-low instead of low-to-high.  \n  \n The code example creates and displays an array of dinosaur names (the keys) and an array of integers representing the maximum length of each dinosaur in meters (the values). The arrays are then sorted and displayed several times:  \n  \n-   The <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%29> overload is used to sort both arrays in order of the dinosaur names in the first array.  \n  \n-   The [\\], TValue\\<xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29> overload and an instance of `ReverseCompare` are used to reverse the sort order of the paired arrays.  \n  \n-   The <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Int32%2CSystem.Int32%29> overload is used to sort the last three elements of both arrays.  \n  \n-   The <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29> overload is used to sort the last three elements of both arrays in reverse order.  \n  \n> [!NOTE]\n>  The calls to the generic methods do not look any different from calls to their nongeneric counterparts, because Visual Basic, C#, and C++ infer the type of the generic type parameter from the type of the first two arguments. If you use the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) to examine the Microsoft intermediate language (MSIL), you can see that the generic methods are being called.  \n  \n [!code-cpp[Array_Sort2IntIntIComparer#1](~/samples/snippets/cpp/VS_Snippets_CLR/Array_Sort2IntIntIComparer/cpp/source.cpp#1)]\n [!code-csharp[Array_Sort2IntIntIComparer#1](~/samples/snippets/csharp/VS_Snippets_CLR/Array_Sort2IntIntIComparer/cs/source.cs#1)]\n [!code-vb[Array_Sort2IntIntIComparer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Array_Sort2IntIntIComparer/vb/source.vb#1)]"
  syntax:
    content: public static void Sort<TKey,TValue> (TKey[] keys, TValue[] items, System.Collections.Generic.IComparer<TKey> comparer);
    parameters:
    - id: keys
      type: TKey[]
      description: The one-dimensional, zero-based <xref href="System.Array"></xref> that contains the keys to sort.
    - id: items
      type: TValue[]
      description: The one-dimensional, zero-based <xref href="System.Array"></xref> that contains the items that correspond to the keys in <code>keys</code>, or `null` to sort only <code>keys</code>.
    - id: comparer
      type: System.Collections.Generic.IComparer{TKey}
      description: The <xref href="System.Collections.Generic.IComparer`1"></xref> generic interface implementation to use when comparing elements, or `null` to use the <xref href="System.IComparable`1"></xref> generic interface implementation of each element.
    typeParameters:
    - id: TKey
      description: The type of the elements of the key array.
    - id: TValue
      description: The type of the elements of the items array.
  overload: System.Array.Sort``2*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>keys</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>items</code> is not `null`, and the lower bound of <code>keys</code> does not match the lower bound of <code>items</code>.  \n  \n -or-  \n  \n <code>items</code> is not `null`, and the length of <code>keys</code> is greater than the length of <code>items</code>.  \n  \n -or-  \n  \n The implementation of <code>comparer</code> caused an error during the sort. For example, <code>comparer</code> might not return 0 when comparing an item with itself."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: <code>comparer</code> is `null`, and one or more elements in the <code>keys</code><xref href="System.Array"></xref> do not implement the <xref href="System.IComparable`1"></xref> generic interface.
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Array.Sort``2(``0[],``1[],System.Int32,System.Int32)
  commentId: M:System.Array.Sort``2(``0[],``1[],System.Int32,System.Int32)
  id: Sort``2(``0[],``1[],System.Int32,System.Int32)
  parent: System.Array
  langs:
  - csharp
  name: Sort<TKey,TValue>(TKey[], TValue[], Int32, Int32)
  nameWithType: Array.Sort<TKey,TValue>(TKey[], TValue[], Int32, Int32)
  fullName: Array.Sort<TKey,TValue>(TKey[], TValue[], Int32, Int32)
  type: Method
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Sorts a range of elements in a pair of <xref href="System.Array"></xref> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <xref href="System.Array"></xref> using the <xref href="System.IComparable`1"></xref> generic interface implementation of each key.
  remarks: "Each key in the `keys`<xref:System.Array> has a corresponding item in the `items`<xref:System.Array>. When a key is repositioned during the sorting, the corresponding item in the `items`<xref:System.Array> is similarly repositioned. Therefore, the `items`<xref:System.Array> is sorted according to the arrangement of the corresponding keys in the `keys`<xref:System.Array>.  \n  \n Each key within the specified range of elements in the `keys`<xref:System.Array> must implement the <xref:System.IComparable%601> generic interface to be capable of comparisons with every other key.  \n  \n You can sort if there are more items than keys, but the items that have no corresponding keys will not be sorted. You cannot sort if there are more keys than items; doing this throws an <xref:System.ArgumentException>.  \n  \n If the sort is not successfully completed, the results are undefined.  \n  \n This method uses the introspective sort (introsort) algorithm as follows:  \n  \n-   If the partition size is fewer than 16 elements, it uses an [insertion sort](http://en.wikipedia.org/wiki/Insertion_sort) algorithm.  \n  \n-   If the number of partitions exceeds 2 * Log<sup>N</sup>, where  *N* is the range of the input array, it uses a [Heapsort](http://en.wikipedia.org/wiki/Heapsort) algorithm.  \n  \n-   Otherwise, it uses a [Quicksort](http://en.wikipedia.org/wiki/Quicksort) algorithm.  \n  \n This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved. In contrast, a stable sort preserves the order of elements that are equal.  \n  \n For arrays that are sorted by using the Heapsort and Quicksort algorithms, in the worst case, this method is an O(`n` log `n`) operation, where `n` is `length`."
  example:
  - "The following code example demonstrates the<xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%29>, <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29>, [\\], TValue\\<xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Int32%2CSystem.Int32%29>, and <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29> generic method overloads, for sorting pairs of arrays that represent keys and values.  \n  \n The code example defines an alternative comparer for strings, named `ReverseCompare`, which implements the `IComparer<string>` (`IComparer(Of String)` in Visual Basic, `IComparer<String^>` in Visual C++) generic interface. The comparer calls the <xref:System.String.CompareTo%28System.String%29> method, reversing the order of the comparands so that the strings sort high-to-low instead of low-to-high.  \n  \n The code example creates and displays an array of dinosaur names (the keys) and an array of integers representing the maximum length of each dinosaur in meters (the values). The arrays are then sorted and displayed several times:  \n  \n-   The <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%29> overload is used to sort both arrays in order of the dinosaur names in the first array.  \n  \n-   The <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29> overload and an instance of `ReverseCompare` are used to reverse the sort order of the paired arrays.  \n  \n-   The [\\], TValue\\<xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Int32%2CSystem.Int32%29> overload is used to sort the last three elements of both arrays.  \n  \n-   The <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29> overload is used to sort the last three elements of both arrays in reverse order.  \n  \n> [!NOTE]\n>  The calls to the generic methods do not look any different from calls to their nongeneric counterparts, because Visual Basic, C#, and C++ infer the type of the generic type parameter from the type of the first two arguments. If you use the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) to examine the Microsoft intermediate language (MSIL), you can see that the generic methods are being called.  \n  \n [!code-cpp[Array_Sort2IntIntIComparer#1](~/samples/snippets/cpp/VS_Snippets_CLR/Array_Sort2IntIntIComparer/cpp/source.cpp#1)]\n [!code-csharp[Array_Sort2IntIntIComparer#1](~/samples/snippets/csharp/VS_Snippets_CLR/Array_Sort2IntIntIComparer/cs/source.cs#1)]\n [!code-vb[Array_Sort2IntIntIComparer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Array_Sort2IntIntIComparer/vb/source.vb#1)]"
  syntax:
    content: public static void Sort<TKey,TValue> (TKey[] keys, TValue[] items, int index, int length);
    parameters:
    - id: keys
      type: TKey[]
      description: The one-dimensional, zero-based <xref href="System.Array"></xref> that contains the keys to sort.
    - id: items
      type: TValue[]
      description: The one-dimensional, zero-based <xref href="System.Array"></xref> that contains the items that correspond to the keys in <code>keys</code>, or `null` to sort only <code>keys</code>.
    - id: index
      type: System.Int32
      description: The starting index of the range to sort.
    - id: length
      type: System.Int32
      description: The number of elements in the range to sort.
    typeParameters:
    - id: TKey
      description: The type of the elements of the key array.
    - id: TValue
      description: The type of the elements of the items array.
  overload: System.Array.Sort``2*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>keys</code> is `null`.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code> is less than the lower bound of <code>keys</code>.  \n  \n -or-  \n  \n <code>length</code> is less than zero."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>items</code> is not `null`, and the lower bound of <code>keys</code> does not match the lower bound of <code>items</code>.  \n  \n -or-  \n  \n <code>items</code> is not `null`, and the length of <code>keys</code> is greater than the length of <code>items</code>.  \n  \n -or-  \n  \n <code>index</code> and <code>length</code> do not specify a valid range in the <code>keys</code><xref href=\"System.Array\"></xref>.  \n  \n -or-  \n  \n <code>items</code> is not `null`, and <code>index</code> and <code>length</code> do not specify a valid range in the <code>items</code><xref href=\"System.Array\"></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: One or more elements in the <code>keys</code><xref href="System.Array"></xref> do not implement the <xref href="System.IComparable`1"></xref> generic interface.
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Array.Sort``2(``0[],``1[],System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})
  commentId: M:System.Array.Sort``2(``0[],``1[],System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})
  id: Sort``2(``0[],``1[],System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})
  parent: System.Array
  langs:
  - csharp
  name: Sort<TKey,TValue>(TKey[], TValue[], Int32, Int32, IComparer<TKey>)
  nameWithType: Array.Sort<TKey,TValue>(TKey[], TValue[], Int32, Int32, IComparer<TKey>)
  fullName: Array.Sort<TKey,TValue>(TKey[], TValue[], Int32, Int32, IComparer<TKey>)
  type: Method
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Sorts a range of elements in a pair of <xref href="System.Array"></xref> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <xref href="System.Array"></xref> using the specified <xref href="System.Collections.Generic.IComparer`1"></xref> generic interface.
  remarks: "Each key in the `keys`<xref:System.Array> has a corresponding item in the `items`<xref:System.Array>. When a key is repositioned during the sorting, the corresponding item in the `items`<xref:System.Array> is similarly repositioned. Therefore, the `items`<xref:System.Array> is sorted according to the arrangement of the corresponding keys in the `keys`<xref:System.Array>.  \n  \n If `comparer` is `null`, each key within the specified range of elements in the `keys`<xref:System.Array> must implement the <xref:System.IComparable%601> generic interface to be capable of comparisons with every other key.  \n  \n You can sort if there are more items than keys, but the items that have no corresponding keys will not be sorted. You cannot sort if there are more keys than items; doing this throws an <xref:System.ArgumentException>.  \n  \n If the sort is not successfully completed, the results are undefined.  \n  \n This method uses the introspective sort (introsort) algorithm as follows:  \n  \n-   If the partition size is fewer than 16 elements, it uses an [insertion sort](http://en.wikipedia.org/wiki/Insertion_sort) algorithm.  \n  \n-   If the number of partitions exceeds 2 * Log<sup>N</sup>, where  *N* is the range of the input array, it uses a [Heapsort](http://en.wikipedia.org/wiki/Heapsort) algorithm.  \n  \n-   Otherwise, it uses a [Quicksort](http://en.wikipedia.org/wiki/Quicksort) algorithm.  \n  \n This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved. In contrast, a stable sort preserves the order of elements that are equal.  \n  \n For arrays that are sorted by using the Heapsort and Quicksort algorithms, in the worst case, this method is an O(`n` log `n`) operation, where `n` is `length`."
  example:
  - "The following code example demonstrates the <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%29>, <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29>, <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Int32%2CSystem.Int32%29>, and [\\], TValue\\<xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29> generic method overloads, for sorting pairs of arrays that represent keys and values.  \n  \n The code example defines an alternative comparer for strings, named `ReverseCompare`, which implements the `IComparer<string>`(`IComparer(Of String)` in Visual Basic, `IComparer<String^>` in Visual C++) generic interface. The comparer calls the <xref:System.String.CompareTo%28System.String%29> method, reversing the order of the comparands so that the strings sort high-to-low instead of low-to-high.  \n  \n The code example creates and displays an array of dinosaur names (the keys) and an array of integers representing the maximum length of each dinosaur in meters (the values). The arrays are then sorted and displayed several times:  \n  \n-   The <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%29> overload is used to sort both arrays in order of the dinosaur names in the first array.  \n  \n-   The <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29> overload and an instance of `ReverseCompare` are used to reverse the sort order of the paired arrays.  \n  \n-   The <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Int32%2CSystem.Int32%29> overload is used to sort the last three elements of both arrays.  \n  \n-   The [\\], TValue\\<xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29> overload is used to sort the last three elements of both arrays in reverse order.  \n  \n> [!NOTE]\n>  The calls to the generic methods do not look any different from calls to their nongeneric counterparts, because Visual Basic, C#, and C++ infer the type of the generic type parameter from the type of the first two arguments. If you use the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) to examine the Microsoft intermediate language (MSIL), you can see that the generic methods are being called.  \n  \n [!code-cpp[Array_Sort2IntIntIComparer#1](~/samples/snippets/cpp/VS_Snippets_CLR/Array_Sort2IntIntIComparer/cpp/source.cpp#1)]\n [!code-csharp[Array_Sort2IntIntIComparer#1](~/samples/snippets/csharp/VS_Snippets_CLR/Array_Sort2IntIntIComparer/cs/source.cs#1)]\n [!code-vb[Array_Sort2IntIntIComparer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Array_Sort2IntIntIComparer/vb/source.vb#1)]"
  syntax:
    content: public static void Sort<TKey,TValue> (TKey[] keys, TValue[] items, int index, int length, System.Collections.Generic.IComparer<TKey> comparer);
    parameters:
    - id: keys
      type: TKey[]
      description: The one-dimensional, zero-based <xref href="System.Array"></xref> that contains the keys to sort.
    - id: items
      type: TValue[]
      description: The one-dimensional, zero-based <xref href="System.Array"></xref> that contains the items that correspond to the keys in <code>keys</code>, or `null` to sort only <code>keys</code>.
    - id: index
      type: System.Int32
      description: The starting index of the range to sort.
    - id: length
      type: System.Int32
      description: The number of elements in the range to sort.
    - id: comparer
      type: System.Collections.Generic.IComparer{TKey}
      description: The <xref href="System.Collections.Generic.IComparer`1"></xref> generic interface implementation to use when comparing elements, or `null` to use the <xref href="System.IComparable`1"></xref> generic interface implementation of each element.
    typeParameters:
    - id: TKey
      description: The type of the elements of the key array.
    - id: TValue
      description: The type of the elements of the items array.
  overload: System.Array.Sort``2*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>keys</code> is `null`.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code> is less than the lower bound of <code>keys</code>.  \n  \n -or-  \n  \n <code>length</code> is less than zero."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>items</code> is not `null`, and the lower bound of <code>keys</code> does not match the lower bound of <code>items</code>.  \n  \n -or-  \n  \n <code>items</code> is not `null`, and the length of <code>keys</code> is greater than the length of <code>items</code>.  \n  \n -or-  \n  \n <code>index</code> and <code>length</code> do not specify a valid range in the <code>keys</code><xref href=\"System.Array\"></xref>.  \n  \n -or-  \n  \n <code>items</code> is not `null`, and <code>index</code> and <code>length</code> do not specify a valid range in the <code>items</code><xref href=\"System.Array\"></xref>.  \n  \n -or-  \n  \n The implementation of <code>comparer</code> caused an error during the sort. For example, <code>comparer</code> might not return 0 when comparing an item with itself."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: <code>comparer</code> is `null`, and one or more elements in the <code>keys</code><xref href="System.Array"></xref> do not implement the <xref href="System.IComparable`1"></xref> generic interface.
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Array.SyncRoot
  commentId: P:System.Array.SyncRoot
  id: SyncRoot
  parent: System.Array
  langs:
  - csharp
  name: SyncRoot
  nameWithType: Array.SyncRoot
  fullName: Array.SyncRoot
  type: Property
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Gets an object that can be used to synchronize access to the <xref href="System.Array"></xref>.
  remarks: "This property implements the <xref:System.Collections.ICollection?displayProperty=fullName> interface.  \n  \n .NET Framework classes based on <xref:System.Array> provide their own synchronized version of the collection using the <xref:System.Array.SyncRoot%2A> property.  \n  \n Classes that use arrays can also implement their own synchronization using the <xref:System.Array.SyncRoot%2A> property. The synchronizing code must perform operations on the `SyncRoot` of the collection, not directly on the collection. This ensures proper operation of collections that are derived from other objects. Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the collection. Note that some implementations of <xref:System.Array.SyncRoot%2A> might return the <xref:System.Array> itself.  \n  \n Enumerating through a collection is intrinsically not a thread safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.  \n  \n Retrieving the value of this property is an O(1) operation."
  example:
  - "The following code example shows how to lock an array during the entire enumeration by using the <xref:System.Array.SyncRoot%2A> property.  \n  \n [!code-cpp[System.Array.SyncRoot#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Array.SyncRoot/cpp/source.cpp#1)]\n [!code-csharp[System.Array.SyncRoot#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Array.SyncRoot/cs/source.cs#1)]\n [!code-vb[System.Array.SyncRoot#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Array.SyncRoot/vb/source.vb#1)]"
  syntax:
    content: public object SyncRoot { get; }
    return:
      type: System.Object
      description: An object that can be used to synchronize access to the <xref href="System.Array"></xref>.
  overload: System.Array.SyncRoot*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Array.TrueForAll``1(``0[],System.Predicate{``0})
  commentId: M:System.Array.TrueForAll``1(``0[],System.Predicate{``0})
  id: TrueForAll``1(``0[],System.Predicate{``0})
  parent: System.Array
  langs:
  - csharp
  name: TrueForAll<T>(T[], Predicate<T>)
  nameWithType: Array.TrueForAll<T>(T[], Predicate<T>)
  fullName: Array.TrueForAll<T>(T[], Predicate<T>)
  type: Method
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Determines whether every element in the array matches the conditions defined by the specified predicate.
  remarks: "The <xref:System.Predicate%601> is a delegate to a method that returns`true` if the object passed to it matches the conditions defined in the delegate.  The elements of `array` are individually passed to the <xref:System.Predicate%601>, and processing is stopped when the delegate returns `false` for any element.  \n  \n This method is an O(`n`) operation, where `n` is the <xref:System.Array.Length%2A> of `array`."
  example:
  - "The following example determines whether the last character of each element in a string array is a number. It creates two string arrays. The first arrayincludes both strings that end with alphabetic characters and strings that end with numeric characters.The second array consists only of strings that end with numeric characters. The example also defines an `EndWithANumber` method whose signature matches the <xref:System.Predicate%601> delegate. The example passes each array to the <xref:System.Array.TrueForAll%2A> method along with a delegate that represents the `EndsWithANumber` method.  \n  \n [!code-csharp[System.Array.TrueForAll#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.array.trueforall/cs/trueforall2.cs#2)]\n [!code-vb[System.Array.TrueForAll#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.array.trueforall/vb/trueforall2.vb#2)]  \n  \n The following example is similar to the first, except that it passes the string array to the <xref:System.Array.TrueForAll%2A> method along with  a lambda expression that determines whether a particular array element ends with the string representation of a number.  \n  \n [!code-csharp[System.Array.TrueForAll#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.array.trueforall/cs/trueforall1.cs#1)]\n [!code-vb[System.Array.TrueForAll#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.array.trueforall/vb/trueforall1.vb#1)]  \n  \n In both cases, the <xref:System.Array.TrueForAll%2A> method returns `false` as soon as it encounters the first array element that does not end in a number. Otherwise, it returns `true` after iterating all the elements in the array.  \n  \n> [!NOTE]\n>  As both examples show, in C# and Visual Basic, it is not necessary to create the `Predicate<string>` delegate (`Predicate(Of String)` in Visual Basic) explicitly. These languages infer the correct delegate from context and create it automatically."
  syntax:
    content: public static bool TrueForAll<T> (T[] array, Predicate<T> match);
    parameters:
    - id: array
      type: T[]
      description: The one-dimensional, zero-based <xref href="System.Array"></xref> to check against the conditions.
    - id: match
      type: System.Predicate`1
      description: The predicate that defines the conditions to check against the elements.
    typeParameters:
    - id: T
      description: The type of the elements of the array.
    return:
      type: System.Boolean
      description: '`true` if every element in <code>array</code> matches the conditions defined by the specified predicate; otherwise, `false`. If there are no elements in the array, the return value is `true`.'
  overload: System.Array.TrueForAll``1*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>array</code> is `null`.  \n  \n -or-  \n  \n <code>match</code> is `null`."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Array.System#Collections#ICollection#Count
  commentId: P:System.Array.System#Collections#ICollection#Count
  id: System#Collections#ICollection#Count
  isEii: true
  parent: System.Array
  langs:
  - csharp
  name: ICollection.Count
  nameWithType: Array.ICollection.Count
  fullName: Array.ICollection.Count
  type: Property
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Gets the number of elements contained in the <xref href="System.Array"></xref>.
  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Array> instance is cast to an <xref:System.Collections.ICollection> interface.
  syntax:
    content: int System.Collections.ICollection.Count { get; }
    return:
      type: System.Int32
      description: The number of elements contained in the collection.
  overload: System.Array.System#Collections#ICollection#Count*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Array.System#Collections#ICollection#IsSynchronized
  commentId: P:System.Array.System#Collections#ICollection#IsSynchronized
  id: System#Collections#ICollection#IsSynchronized
  isEii: true
  parent: System.Array
  langs:
  - csharp
  name: ICollection.IsSynchronized
  nameWithType: Array.ICollection.IsSynchronized
  fullName: Array.ICollection.IsSynchronized
  type: Property
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: bool System.Collections.ICollection.IsSynchronized { get; }
    return:
      type: System.Boolean
      description: ''
  overload: System.Array.System#Collections#ICollection#IsSynchronized*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
- uid: System.Array.System#Collections#ICollection#SyncRoot
  commentId: P:System.Array.System#Collections#ICollection#SyncRoot
  id: System#Collections#ICollection#SyncRoot
  isEii: true
  parent: System.Array
  langs:
  - csharp
  name: ICollection.SyncRoot
  nameWithType: Array.ICollection.SyncRoot
  fullName: Array.ICollection.SyncRoot
  type: Property
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: object System.Collections.ICollection.SyncRoot { get; }
    return:
      type: System.Object
      description: ''
  overload: System.Array.System#Collections#ICollection#SyncRoot*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
- uid: System.Array.System#Collections#IList#Add(System.Object)
  commentId: M:System.Array.System#Collections#IList#Add(System.Object)
  id: System#Collections#IList#Add(System.Object)
  isEii: true
  parent: System.Array
  langs:
  - csharp
  name: IList.Add(Object)
  nameWithType: Array.IList.Add(Object)
  fullName: Array.IList.Add(Object)
  type: Method
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Calling this method always throws a <xref href="System.NotSupportedException"></xref> exception.
  remarks: "Ordinarily, an <xref:System.Collections.IList.Add%2A?displayProperty=fullName> implementation adds a member to a collection. However, because arrays have a fixed size (the <xref:System.Array.IsFixedSize%2A> property always returns `true`), this method always throws a <xref:System.NotSupportedException> exception.  \n  \n This member is an explicit interface member implementation. It can be used only when the <xref:System.Array> instance is cast to an <xref:System.Collections.IList> interface."
  syntax:
    content: int IList.Add (object value);
    parameters:
    - id: value
      type: System.Object
      description: The object to be added to the <xref href="System.Collections.IList"></xref>.
    return:
      type: System.Int32
      description: Adding a value to an array is not supported. No value is returned.
  overload: System.Array.System#Collections#IList#Add*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The <xref href="System.Collections.IList"></xref> has a fixed size.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Array.System#Collections#IList#Clear
  commentId: M:System.Array.System#Collections#IList#Clear
  id: System#Collections#IList#Clear
  isEii: true
  parent: System.Array
  langs:
  - csharp
  name: IList.Clear()
  nameWithType: Array.IList.Clear()
  fullName: Array.IList.Clear()
  type: Method
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Removes all items from the <xref href="System.Collections.IList"></xref>.
  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Array> instance is cast to an <xref:System.Collections.IList> interface.
  syntax:
    content: void IList.Clear ();
    parameters: []
  overload: System.Array.System#Collections#IList#Clear*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The <xref href="System.Collections.IList"></xref> is read-only.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Array.System#Collections#IList#Contains(System.Object)
  commentId: M:System.Array.System#Collections#IList#Contains(System.Object)
  id: System#Collections#IList#Contains(System.Object)
  isEii: true
  parent: System.Array
  langs:
  - csharp
  name: IList.Contains(Object)
  nameWithType: Array.IList.Contains(Object)
  fullName: Array.IList.Contains(Object)
  type: Method
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Determines whether an element is in the <xref href="System.Collections.IList"></xref>.
  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Array> instance is cast to an <xref:System.Collections.IList> interface.
  syntax:
    content: bool IList.Contains (object value);
    parameters:
    - id: value
      type: System.Object
      description: The object to locate in the current list. The element to locate can be `null` for reference types.
    return:
      type: System.Boolean
      description: '`true` if <code>value</code> is found in the <xref href="System.Collections.IList"></xref>; otherwise, `false`.'
  overload: System.Array.System#Collections#IList#Contains*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Array.System#Collections#IList#IndexOf(System.Object)
  commentId: M:System.Array.System#Collections#IList#IndexOf(System.Object)
  id: System#Collections#IList#IndexOf(System.Object)
  isEii: true
  parent: System.Array
  langs:
  - csharp
  name: IList.IndexOf(Object)
  nameWithType: Array.IList.IndexOf(Object)
  fullName: Array.IList.IndexOf(Object)
  type: Method
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Determines the index of a specific item in the <xref href="System.Collections.IList"></xref>.
  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Array> instance is cast to an <xref:System.Collections.IList> interface.
  syntax:
    content: int IList.IndexOf (object value);
    parameters:
    - id: value
      type: System.Object
      description: The object to locate in the current list.
    return:
      type: System.Int32
      description: The index of value if found in the list; otherwise, -1.
  overload: System.Array.System#Collections#IList#IndexOf*
  exceptions: []
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Array.System#Collections#IList#Insert(System.Int32,System.Object)
  commentId: M:System.Array.System#Collections#IList#Insert(System.Int32,System.Object)
  id: System#Collections#IList#Insert(System.Int32,System.Object)
  isEii: true
  parent: System.Array
  langs:
  - csharp
  name: IList.Insert(Int32, Object)
  nameWithType: Array.IList.Insert(Int32, Object)
  fullName: Array.IList.Insert(Int32, Object)
  type: Method
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Inserts an item to the <xref href="System.Collections.IList"></xref> at the specified index.
  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Array> instance is cast to an <xref:System.Collections.IList> interface.
  syntax:
    content: void IList.Insert (int index, object value);
    parameters:
    - id: index
      type: System.Int32
      description: The index at which <code>value</code> should be inserted.
    - id: value
      type: System.Object
      description: The object to insert.
  overload: System.Array.System#Collections#IList#Insert*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>index</code> is not a valid index in the <xref href="System.Collections.IList"></xref>.
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "The <xref href=\"System.Collections.IList\"></xref> is read-only.  \n  \n -or-  \n  \n The <xref href=\"System.Collections.IList\"></xref> has a fixed size."
  - type: System.NullReferenceException
    commentId: T:System.NullReferenceException
    description: <code>value</code> is null reference in the <xref href="System.Collections.IList"></xref>.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Array.System#Collections#IList#IsFixedSize
  commentId: P:System.Array.System#Collections#IList#IsFixedSize
  id: System#Collections#IList#IsFixedSize
  isEii: true
  parent: System.Array
  langs:
  - csharp
  name: IList.IsFixedSize
  nameWithType: Array.IList.IsFixedSize
  fullName: Array.IList.IsFixedSize
  type: Property
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: bool System.Collections.IList.IsFixedSize { get; }
    return:
      type: System.Boolean
      description: ''
  overload: System.Array.System#Collections#IList#IsFixedSize*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
- uid: System.Array.System#Collections#IList#IsReadOnly
  commentId: P:System.Array.System#Collections#IList#IsReadOnly
  id: System#Collections#IList#IsReadOnly
  isEii: true
  parent: System.Array
  langs:
  - csharp
  name: IList.IsReadOnly
  nameWithType: Array.IList.IsReadOnly
  fullName: Array.IList.IsReadOnly
  type: Property
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: bool System.Collections.IList.IsReadOnly { get; }
    return:
      type: System.Boolean
      description: ''
  overload: System.Array.System#Collections#IList#IsReadOnly*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
- uid: System.Array.System#Collections#IList#Item(System.Int32)
  commentId: P:System.Array.System#Collections#IList#Item(System.Int32)
  id: System#Collections#IList#Item(System.Int32)
  isEii: true
  parent: System.Array
  langs:
  - csharp
  name: IList.Item(Int32)
  nameWithType: Array.IList.Item(Int32)
  fullName: Array.IList.Item(Int32)
  type: Property
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Gets or sets the element at the specified index.
  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Array> instance is cast to an<xref:System.Collections.IList> interface.
  syntax:
    content: object System.Collections.IList.Item[int index] { get; set; }
    parameters:
    - id: index
      type: System.Int32
      description: The index of the element to get or set.
    return:
      type: System.Object
      description: The element at the specified index.
  overload: System.Array.System#Collections#IList#Item*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code> is less than zero.  \n  \n -or-  \n  \n <code>index</code> is equal to or greater than <xref href=\"System.Collections.ICollection.Count\"></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The current <xref href="System.Array"></xref> does not have exactly one dimension.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Array.System#Collections#IList#Remove(System.Object)
  commentId: M:System.Array.System#Collections#IList#Remove(System.Object)
  id: System#Collections#IList#Remove(System.Object)
  isEii: true
  parent: System.Array
  langs:
  - csharp
  name: IList.Remove(Object)
  nameWithType: Array.IList.Remove(Object)
  fullName: Array.IList.Remove(Object)
  type: Method
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Removes the first occurrence of a specific object from the <xref href="System.Collections.IList"></xref>.
  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Array> instance is cast to an <xref:System.Collections.IList> interface.
  syntax:
    content: void IList.Remove (object value);
    parameters:
    - id: value
      type: System.Object
      description: The object to remove from the <xref href="System.Collections.IList"></xref>.
  overload: System.Array.System#Collections#IList#Remove*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "The <xref href=\"System.Collections.IList\"></xref> is read-only.  \n  \n -or-  \n  \n The <xref href=\"System.Collections.IList\"></xref> has a fixed size."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Array.System#Collections#IList#RemoveAt(System.Int32)
  commentId: M:System.Array.System#Collections#IList#RemoveAt(System.Int32)
  id: System#Collections#IList#RemoveAt(System.Int32)
  isEii: true
  parent: System.Array
  langs:
  - csharp
  name: IList.RemoveAt(Int32)
  nameWithType: Array.IList.RemoveAt(Int32)
  fullName: Array.IList.RemoveAt(Int32)
  type: Method
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Removes the <xref href="System.Collections.IList"></xref> item at the specified index.
  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Array> instance is cast to an <xref:System.Collections.IList> interface.
  syntax:
    content: void IList.RemoveAt (int index);
    parameters:
    - id: index
      type: System.Int32
      description: The index of the element to remove.
  overload: System.Array.System#Collections#IList#RemoveAt*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: index is not a valid index in the <xref href="System.Collections.IList"></xref>.
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "The <xref href=\"System.Collections.IList\"></xref> is read-only.  \n  \n -or-  \n  \n The <xref href=\"System.Collections.IList\"></xref> has a fixed size."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Array.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)
  commentId: M:System.Array.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)
  id: System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)
  isEii: true
  parent: System.Array
  langs:
  - csharp
  name: IStructuralComparable.CompareTo(Object, IComparer)
  nameWithType: Array.IStructuralComparable.CompareTo(Object, IComparer)
  fullName: Array.IStructuralComparable.CompareTo(Object, IComparer)
  type: Method
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Determines whether the current collection object precedes, occurs in the same position as, or follows another object in the sort order.
  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Array> instance is cast to an <xref:System.Collections.IStructuralComparable> interface.
  syntax:
    content: int IStructuralComparable.CompareTo (object other, System.Collections.IComparer comparer);
    parameters:
    - id: other
      type: System.Object
      description: The object to compare with the current instance.
    - id: comparer
      type: System.Collections.IComparer
      description: An object that compares the current object and <code>other</code>.
    return:
      type: System.Int32
      description: "An integer that indicates the relationship of the current collection object to other, as shown in the following table.  \n  \n <table><thead><tr><th> Return value  \n  \n </th><th> Description  \n  \n </th></tr></thead><tbody><tr><td> -1  \n  \n </td><td> The current instance precedes <code>other</code>.  \n  \n </td></tr><tr><td> 0  \n  \n </td><td> The current instance and <code>other</code> are equal.  \n  \n </td></tr><tr><td> 1  \n  \n </td><td> The current instance follows <code>other</code>.  \n  \n </td></tr></tbody></table>"
  overload: System.Array.System#Collections#IStructuralComparable#CompareTo*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Array.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)
  commentId: M:System.Array.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)
  id: System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)
  isEii: true
  parent: System.Array
  langs:
  - csharp
  name: IStructuralEquatable.Equals(Object, IEqualityComparer)
  nameWithType: Array.IStructuralEquatable.Equals(Object, IEqualityComparer)
  fullName: Array.IStructuralEquatable.Equals(Object, IEqualityComparer)
  type: Method
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Determines whether an object is equal to the current instance.
  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Array> instance is cast to an<xref:System.Collections.IStructuralEquatable>interface.
  syntax:
    content: bool IStructuralEquatable.Equals (object other, System.Collections.IEqualityComparer comparer);
    parameters:
    - id: other
      type: System.Object
      description: The object to compare with the current instance.
    - id: comparer
      type: System.Collections.IEqualityComparer
      description: An object that determines whether the current instance and <code>other</code> are equal.
    return:
      type: System.Boolean
      description: '`true` if the two objects are equal; otherwise, `false`.'
  overload: System.Array.System#Collections#IStructuralEquatable#Equals*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Array.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)
  commentId: M:System.Array.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)
  id: System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)
  isEii: true
  parent: System.Array
  langs:
  - csharp
  name: IStructuralEquatable.GetHashCode(IEqualityComparer)
  nameWithType: Array.IStructuralEquatable.GetHashCode(IEqualityComparer)
  fullName: Array.IStructuralEquatable.GetHashCode(IEqualityComparer)
  type: Method
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Returns a hash code for the current instance.
  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Array> instance is cast to an<xref:System.Collections.IStructuralEquatable>interface.
  syntax:
    content: int IStructuralEquatable.GetHashCode (System.Collections.IEqualityComparer comparer);
    parameters:
    - id: comparer
      type: System.Collections.IEqualityComparer
      description: An object that computes the hash code of the current object.
    return:
      type: System.Int32
      description: The hash code for the current instance.
  overload: System.Array.System#Collections#IStructuralEquatable#GetHashCode*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
references:
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.ArgumentNullException
  parent: System
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.RankException
  parent: System
  isExternal: false
  name: RankException
  nameWithType: RankException
  fullName: System.RankException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  nameWithType: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.ArgumentOutOfRangeException
  parent: System
  isExternal: false
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.IndexOutOfRangeException
  parent: System
  isExternal: false
  name: IndexOutOfRangeException
  nameWithType: IndexOutOfRangeException
  fullName: System.IndexOutOfRangeException
- uid: System.ArrayTypeMismatchException
  parent: System
  isExternal: false
  name: ArrayTypeMismatchException
  nameWithType: ArrayTypeMismatchException
  fullName: System.ArrayTypeMismatchException
- uid: System.InvalidCastException
  parent: System
  isExternal: false
  name: InvalidCastException
  nameWithType: InvalidCastException
  fullName: System.InvalidCastException
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  nameWithType: NotSupportedException
  fullName: System.NotSupportedException
- uid: System.OverflowException
  parent: System
  isExternal: false
  name: OverflowException
  nameWithType: OverflowException
  fullName: System.OverflowException
- uid: System.NullReferenceException
  parent: System
  isExternal: false
  name: NullReferenceException
  nameWithType: NullReferenceException
  fullName: System.NullReferenceException
- uid: System.Array.AsReadOnly``1(``0[])
  parent: System.Array
  isExternal: false
  name: AsReadOnly<T>(T[])
  nameWithType: Array.AsReadOnly<T>(T[])
  fullName: Array.AsReadOnly<T>(T[])
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1
  parent: System.Collections.ObjectModel
  isExternal: false
  name: ReadOnlyCollection<T>
  nameWithType: ReadOnlyCollection<T>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: T[]
  isExternal: true
  name: T[]
  nameWithType: T[]
  fullName: T[]
  spec.csharp:
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Array.BinarySearch(System.Array,System.Object)
  parent: System.Array
  isExternal: false
  name: BinarySearch(Array, Object)
  nameWithType: Array.BinarySearch(Array, Object)
  fullName: Array.BinarySearch(Array, Object)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Array
  parent: System
  isExternal: false
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Array.BinarySearch(System.Array,System.Object,System.Collections.IComparer)
  parent: System.Array
  isExternal: false
  name: BinarySearch(Array, Object, IComparer)
  nameWithType: Array.BinarySearch(Array, Object, IComparer)
  fullName: Array.BinarySearch(Array, Object, IComparer)
- uid: System.Collections.IComparer
  parent: System.Collections
  isExternal: false
  name: IComparer
  nameWithType: IComparer
  fullName: System.Collections.IComparer
- uid: System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)
  parent: System.Array
  isExternal: false
  name: BinarySearch(Array, Int32, Int32, Object)
  nameWithType: Array.BinarySearch(Array, Int32, Int32, Object)
  fullName: Array.BinarySearch(Array, Int32, Int32, Object)
- uid: System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object,System.Collections.IComparer)
  parent: System.Array
  isExternal: false
  name: BinarySearch(Array, Int32, Int32, Object, IComparer)
  nameWithType: Array.BinarySearch(Array, Int32, Int32, Object, IComparer)
  fullName: Array.BinarySearch(Array, Int32, Int32, Object, IComparer)
- uid: System.Array.BinarySearch``1(``0[],``0)
  parent: System.Array
  isExternal: false
  name: BinarySearch<T>(T[], T)
  nameWithType: Array.BinarySearch<T>(T[], T)
  fullName: Array.BinarySearch<T>(T[], T)
- uid: System.Array.BinarySearch``1(``0[],``0,System.Collections.Generic.IComparer{``0})
  parent: System.Array
  isExternal: false
  name: BinarySearch<T>(T[], T, IComparer<T>)
  nameWithType: Array.BinarySearch<T>(T[], T, IComparer<T>)
  fullName: Array.BinarySearch<T>(T[], T, IComparer<T>)
- uid: System.Collections.Generic.IComparer`1
  parent: System.Collections.Generic
  isExternal: false
  name: IComparer<T>
  nameWithType: IComparer<T>
  fullName: System.Collections.Generic.IComparer<T>
- uid: System.Array.BinarySearch``1(``0[],System.Int32,System.Int32,``0)
  parent: System.Array
  isExternal: false
  name: BinarySearch<T>(T[], Int32, Int32, T)
  nameWithType: Array.BinarySearch<T>(T[], Int32, Int32, T)
  fullName: Array.BinarySearch<T>(T[], Int32, Int32, T)
- uid: System.Array.BinarySearch``1(``0[],System.Int32,System.Int32,``0,System.Collections.Generic.IComparer{``0})
  parent: System.Array
  isExternal: false
  name: BinarySearch<T>(T[], Int32, Int32, T, IComparer<T>)
  nameWithType: Array.BinarySearch<T>(T[], Int32, Int32, T, IComparer<T>)
  fullName: Array.BinarySearch<T>(T[], Int32, Int32, T, IComparer<T>)
- uid: System.Array.Clear(System.Array,System.Int32,System.Int32)
  parent: System.Array
  isExternal: false
  name: Clear(Array, Int32, Int32)
  nameWithType: Array.Clear(Array, Int32, Int32)
  fullName: Array.Clear(Array, Int32, Int32)
- uid: System.Array.Clone
  parent: System.Array
  isExternal: false
  name: Clone()
  nameWithType: Array.Clone()
  fullName: Array.Clone()
- uid: System.Array.ConstrainedCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)
  parent: System.Array
  isExternal: false
  name: ConstrainedCopy(Array, Int32, Array, Int32, Int32)
  nameWithType: Array.ConstrainedCopy(Array, Int32, Array, Int32, Int32)
  fullName: Array.ConstrainedCopy(Array, Int32, Array, Int32, Int32)
- uid: System.Array.ConvertAll``2(``0[],System.Converter{``0,``1})
  parent: System.Array
  isExternal: false
  name: ConvertAll<TInput,TOutput>(TInput[], Converter<TInput,TOutput>)
  nameWithType: Array.ConvertAll<TInput,TOutput>(TInput[], Converter<TInput,TOutput>)
  fullName: Array.ConvertAll<TInput,TOutput>(TInput[], Converter<TInput,TOutput>)
- uid: TOutput
  name: TOutput
  nameWithType: TOutput
  fullName: TOutput
- uid: TOutput[]
  isExternal: true
  name: TOutput[]
  nameWithType: TOutput[]
  fullName: TOutput[]
  spec.csharp:
  - uid: TOutput
    name: TOutput
    nameWithType: TOutput
    fullName: TOutput
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: TInput
  name: TInput
  nameWithType: TInput
  fullName: TInput
- uid: TInput[]
  isExternal: true
  name: TInput[]
  nameWithType: TInput[]
  fullName: TInput[]
  spec.csharp:
  - uid: TInput
    name: TInput
    nameWithType: TInput
    fullName: TInput
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Converter`2
  parent: System
  isExternal: false
  name: Converter<TInput,TOutput>
  nameWithType: Converter<TInput,TOutput>
  fullName: System.Converter<TInput,TOutput>
- uid: System.Array.Copy(System.Array,System.Int64,System.Array,System.Int64,System.Int64)
  parent: System.Array
  isExternal: false
  name: Copy(Array, Int64, Array, Int64, Int64)
  nameWithType: Array.Copy(Array, Int64, Array, Int64, Int64)
  fullName: Array.Copy(Array, Int64, Array, Int64, Int64)
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Array.Copy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)
  parent: System.Array
  isExternal: false
  name: Copy(Array, Int32, Array, Int32, Int32)
  nameWithType: Array.Copy(Array, Int32, Array, Int32, Int32)
  fullName: Array.Copy(Array, Int32, Array, Int32, Int32)
- uid: System.Array.Copy(System.Array,System.Array,System.Int64)
  parent: System.Array
  isExternal: false
  name: Copy(Array, Array, Int64)
  nameWithType: Array.Copy(Array, Array, Int64)
  fullName: Array.Copy(Array, Array, Int64)
- uid: System.Array.Copy(System.Array,System.Array,System.Int32)
  parent: System.Array
  isExternal: false
  name: Copy(Array, Array, Int32)
  nameWithType: Array.Copy(Array, Array, Int32)
  fullName: Array.Copy(Array, Array, Int32)
- uid: System.Array.CopyTo(System.Array,System.Int32)
  parent: System.Array
  isExternal: false
  name: CopyTo(Array, Int32)
  nameWithType: Array.CopyTo(Array, Int32)
  fullName: Array.CopyTo(Array, Int32)
- uid: System.Array.CopyTo(System.Array,System.Int64)
  parent: System.Array
  isExternal: false
  name: CopyTo(Array, Int64)
  nameWithType: Array.CopyTo(Array, Int64)
  fullName: Array.CopyTo(Array, Int64)
- uid: System.Array.CreateInstance(System.Type,System.Int32)
  parent: System.Array
  isExternal: false
  name: CreateInstance(Type, Int32)
  nameWithType: Array.CreateInstance(Type, Int32)
  fullName: Array.CreateInstance(Type, Int32)
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Array.CreateInstance(System.Type,System.Int32[])
  parent: System.Array
  isExternal: false
  name: CreateInstance(Type, Int32[])
  nameWithType: Array.CreateInstance(Type, Int32[])
  fullName: Array.CreateInstance(Type, Int32[])
- uid: System.Int32[]
  parent: System
  isExternal: false
  name: Int32[]
  nameWithType: Int32[]
  fullName: System.Int32[]
  spec.csharp:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Array.CreateInstance(System.Type,System.Int64[])
  parent: System.Array
  isExternal: false
  name: CreateInstance(Type, Int64[])
  nameWithType: Array.CreateInstance(Type, Int64[])
  fullName: Array.CreateInstance(Type, Int64[])
- uid: System.Int64[]
  parent: System
  isExternal: false
  name: Int64[]
  nameWithType: Int64[]
  fullName: System.Int64[]
  spec.csharp:
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Array.CreateInstance(System.Type,System.Int32,System.Int32)
  parent: System.Array
  isExternal: false
  name: CreateInstance(Type, Int32, Int32)
  nameWithType: Array.CreateInstance(Type, Int32, Int32)
  fullName: Array.CreateInstance(Type, Int32, Int32)
- uid: System.Array.CreateInstance(System.Type,System.Int32[],System.Int32[])
  parent: System.Array
  isExternal: false
  name: CreateInstance(Type, Int32[], Int32[])
  nameWithType: Array.CreateInstance(Type, Int32[], Int32[])
  fullName: Array.CreateInstance(Type, Int32[], Int32[])
- uid: System.Array.CreateInstance(System.Type,System.Int32,System.Int32,System.Int32)
  parent: System.Array
  isExternal: false
  name: CreateInstance(Type, Int32, Int32, Int32)
  nameWithType: Array.CreateInstance(Type, Int32, Int32, Int32)
  fullName: Array.CreateInstance(Type, Int32, Int32, Int32)
- uid: System.Array.Empty``1
  parent: System.Array
  isExternal: false
  name: Empty<T>()
  nameWithType: Array.Empty<T>()
  fullName: Array.Empty<T>()
- uid: System.Array.Exists``1(``0[],System.Predicate{``0})
  parent: System.Array
  isExternal: false
  name: Exists<T>(T[], Predicate<T>)
  nameWithType: Array.Exists<T>(T[], Predicate<T>)
  fullName: Array.Exists<T>(T[], Predicate<T>)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Predicate`1
  parent: System
  isExternal: false
  name: Predicate<T>
  nameWithType: Predicate<T>
  fullName: System.Predicate<T>
- uid: System.Array.Fill``1(``0[],``0)
  parent: System.Array
  isExternal: false
  name: Fill<T>(T[], T)
  nameWithType: Array.Fill<T>(T[], T)
  fullName: Array.Fill<T>(T[], T)
- uid: System.Array.Fill``1(``0[],``0,System.Int32,System.Int32)
  parent: System.Array
  isExternal: false
  name: Fill<T>(T[], T, Int32, Int32)
  nameWithType: Array.Fill<T>(T[], T, Int32, Int32)
  fullName: Array.Fill<T>(T[], T, Int32, Int32)
- uid: System.Array.Find``1(``0[],System.Predicate{``0})
  parent: System.Array
  isExternal: false
  name: Find<T>(T[], Predicate<T>)
  nameWithType: Array.Find<T>(T[], Predicate<T>)
  fullName: Array.Find<T>(T[], Predicate<T>)
- uid: System.Array.FindAll``1(``0[],System.Predicate{``0})
  parent: System.Array
  isExternal: false
  name: FindAll<T>(T[], Predicate<T>)
  nameWithType: Array.FindAll<T>(T[], Predicate<T>)
  fullName: Array.FindAll<T>(T[], Predicate<T>)
- uid: System.Array.FindIndex``1(``0[],System.Predicate{``0})
  parent: System.Array
  isExternal: false
  name: FindIndex<T>(T[], Predicate<T>)
  nameWithType: Array.FindIndex<T>(T[], Predicate<T>)
  fullName: Array.FindIndex<T>(T[], Predicate<T>)
- uid: System.Array.FindIndex``1(``0[],System.Int32,System.Predicate{``0})
  parent: System.Array
  isExternal: false
  name: FindIndex<T>(T[], Int32, Predicate<T>)
  nameWithType: Array.FindIndex<T>(T[], Int32, Predicate<T>)
  fullName: Array.FindIndex<T>(T[], Int32, Predicate<T>)
- uid: System.Array.FindIndex``1(``0[],System.Int32,System.Int32,System.Predicate{``0})
  parent: System.Array
  isExternal: false
  name: FindIndex<T>(T[], Int32, Int32, Predicate<T>)
  nameWithType: Array.FindIndex<T>(T[], Int32, Int32, Predicate<T>)
  fullName: Array.FindIndex<T>(T[], Int32, Int32, Predicate<T>)
- uid: System.Array.FindLast``1(``0[],System.Predicate{``0})
  parent: System.Array
  isExternal: false
  name: FindLast<T>(T[], Predicate<T>)
  nameWithType: Array.FindLast<T>(T[], Predicate<T>)
  fullName: Array.FindLast<T>(T[], Predicate<T>)
- uid: System.Array.FindLastIndex``1(``0[],System.Predicate{``0})
  parent: System.Array
  isExternal: false
  name: FindLastIndex<T>(T[], Predicate<T>)
  nameWithType: Array.FindLastIndex<T>(T[], Predicate<T>)
  fullName: Array.FindLastIndex<T>(T[], Predicate<T>)
- uid: System.Array.FindLastIndex``1(``0[],System.Int32,System.Predicate{``0})
  parent: System.Array
  isExternal: false
  name: FindLastIndex<T>(T[], Int32, Predicate<T>)
  nameWithType: Array.FindLastIndex<T>(T[], Int32, Predicate<T>)
  fullName: Array.FindLastIndex<T>(T[], Int32, Predicate<T>)
- uid: System.Array.FindLastIndex``1(``0[],System.Int32,System.Int32,System.Predicate{``0})
  parent: System.Array
  isExternal: false
  name: FindLastIndex<T>(T[], Int32, Int32, Predicate<T>)
  nameWithType: Array.FindLastIndex<T>(T[], Int32, Int32, Predicate<T>)
  fullName: Array.FindLastIndex<T>(T[], Int32, Int32, Predicate<T>)
- uid: System.Array.ForEach``1(``0[],System.Action{``0})
  parent: System.Array
  isExternal: false
  name: ForEach<T>(T[], Action<T>)
  nameWithType: Array.ForEach<T>(T[], Action<T>)
  fullName: Array.ForEach<T>(T[], Action<T>)
- uid: System.Action`1
  parent: System
  isExternal: false
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
- uid: System.Array.GetEnumerator
  parent: System.Array
  isExternal: false
  name: GetEnumerator()
  nameWithType: Array.GetEnumerator()
  fullName: Array.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: false
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Array.GetLength(System.Int32)
  parent: System.Array
  isExternal: false
  name: GetLength(Int32)
  nameWithType: Array.GetLength(Int32)
  fullName: Array.GetLength(Int32)
- uid: System.Array.GetLongLength(System.Int32)
  parent: System.Array
  isExternal: false
  name: GetLongLength(Int32)
  nameWithType: Array.GetLongLength(Int32)
  fullName: Array.GetLongLength(Int32)
- uid: System.Array.GetLowerBound(System.Int32)
  parent: System.Array
  isExternal: false
  name: GetLowerBound(Int32)
  nameWithType: Array.GetLowerBound(Int32)
  fullName: Array.GetLowerBound(Int32)
- uid: System.Array.GetUpperBound(System.Int32)
  parent: System.Array
  isExternal: false
  name: GetUpperBound(Int32)
  nameWithType: Array.GetUpperBound(Int32)
  fullName: Array.GetUpperBound(Int32)
- uid: System.Array.GetValue(System.Int64,System.Int64,System.Int64)
  parent: System.Array
  isExternal: false
  name: GetValue(Int64, Int64, Int64)
  nameWithType: Array.GetValue(Int64, Int64, Int64)
  fullName: Array.GetValue(Int64, Int64, Int64)
- uid: System.Array.GetValue(System.Int32,System.Int32,System.Int32)
  parent: System.Array
  isExternal: false
  name: GetValue(Int32, Int32, Int32)
  nameWithType: Array.GetValue(Int32, Int32, Int32)
  fullName: Array.GetValue(Int32, Int32, Int32)
- uid: System.Array.GetValue(System.Int64,System.Int64)
  parent: System.Array
  isExternal: false
  name: GetValue(Int64, Int64)
  nameWithType: Array.GetValue(Int64, Int64)
  fullName: Array.GetValue(Int64, Int64)
- uid: System.Array.GetValue(System.Int32,System.Int32)
  parent: System.Array
  isExternal: false
  name: GetValue(Int32, Int32)
  nameWithType: Array.GetValue(Int32, Int32)
  fullName: Array.GetValue(Int32, Int32)
- uid: System.Array.GetValue(System.Int32)
  parent: System.Array
  isExternal: false
  name: GetValue(Int32)
  nameWithType: Array.GetValue(Int32)
  fullName: Array.GetValue(Int32)
- uid: System.Array.GetValue(System.Int64)
  parent: System.Array
  isExternal: false
  name: GetValue(Int64)
  nameWithType: Array.GetValue(Int64)
  fullName: Array.GetValue(Int64)
- uid: System.Array.GetValue(System.Int32[])
  parent: System.Array
  isExternal: false
  name: GetValue(Int32[])
  nameWithType: Array.GetValue(Int32[])
  fullName: Array.GetValue(Int32[])
- uid: System.Array.GetValue(System.Int64[])
  parent: System.Array
  isExternal: false
  name: GetValue(Int64[])
  nameWithType: Array.GetValue(Int64[])
  fullName: Array.GetValue(Int64[])
- uid: System.Array.IndexOf(System.Array,System.Object)
  parent: System.Array
  isExternal: false
  name: IndexOf(Array, Object)
  nameWithType: Array.IndexOf(Array, Object)
  fullName: Array.IndexOf(Array, Object)
- uid: System.Array.IndexOf(System.Array,System.Object,System.Int32)
  parent: System.Array
  isExternal: false
  name: IndexOf(Array, Object, Int32)
  nameWithType: Array.IndexOf(Array, Object, Int32)
  fullName: Array.IndexOf(Array, Object, Int32)
- uid: System.Array.IndexOf(System.Array,System.Object,System.Int32,System.Int32)
  parent: System.Array
  isExternal: false
  name: IndexOf(Array, Object, Int32, Int32)
  nameWithType: Array.IndexOf(Array, Object, Int32, Int32)
  fullName: Array.IndexOf(Array, Object, Int32, Int32)
- uid: System.Array.IndexOf``1(``0[],``0,System.Int32,System.Int32)
  parent: System.Array
  isExternal: false
  name: IndexOf<T>(T[], T, Int32, Int32)
  nameWithType: Array.IndexOf<T>(T[], T, Int32, Int32)
  fullName: Array.IndexOf<T>(T[], T, Int32, Int32)
- uid: System.Array.IndexOf``1(``0[],``0)
  parent: System.Array
  isExternal: false
  name: IndexOf<T>(T[], T)
  nameWithType: Array.IndexOf<T>(T[], T)
  fullName: Array.IndexOf<T>(T[], T)
- uid: System.Array.IndexOf``1(``0[],``0,System.Int32)
  parent: System.Array
  isExternal: false
  name: IndexOf<T>(T[], T, Int32)
  nameWithType: Array.IndexOf<T>(T[], T, Int32)
  fullName: Array.IndexOf<T>(T[], T, Int32)
- uid: System.Array.Initialize
  parent: System.Array
  isExternal: false
  name: Initialize()
  nameWithType: Array.Initialize()
  fullName: Array.Initialize()
- uid: System.Array.IsFixedSize
  parent: System.Array
  isExternal: false
  name: IsFixedSize
  nameWithType: Array.IsFixedSize
  fullName: Array.IsFixedSize
- uid: System.Array.IsReadOnly
  parent: System.Array
  isExternal: false
  name: IsReadOnly
  nameWithType: Array.IsReadOnly
  fullName: Array.IsReadOnly
- uid: System.Array.IsSynchronized
  parent: System.Array
  isExternal: false
  name: IsSynchronized
  nameWithType: Array.IsSynchronized
  fullName: Array.IsSynchronized
- uid: System.Array.LastIndexOf(System.Array,System.Object)
  parent: System.Array
  isExternal: false
  name: LastIndexOf(Array, Object)
  nameWithType: Array.LastIndexOf(Array, Object)
  fullName: Array.LastIndexOf(Array, Object)
- uid: System.Array.LastIndexOf(System.Array,System.Object,System.Int32)
  parent: System.Array
  isExternal: false
  name: LastIndexOf(Array, Object, Int32)
  nameWithType: Array.LastIndexOf(Array, Object, Int32)
  fullName: Array.LastIndexOf(Array, Object, Int32)
- uid: System.Array.LastIndexOf(System.Array,System.Object,System.Int32,System.Int32)
  parent: System.Array
  isExternal: false
  name: LastIndexOf(Array, Object, Int32, Int32)
  nameWithType: Array.LastIndexOf(Array, Object, Int32, Int32)
  fullName: Array.LastIndexOf(Array, Object, Int32, Int32)
- uid: System.Array.LastIndexOf``1(``0[],``0)
  parent: System.Array
  isExternal: false
  name: LastIndexOf<T>(T[], T)
  nameWithType: Array.LastIndexOf<T>(T[], T)
  fullName: Array.LastIndexOf<T>(T[], T)
- uid: System.Array.LastIndexOf``1(``0[],``0,System.Int32)
  parent: System.Array
  isExternal: false
  name: LastIndexOf<T>(T[], T, Int32)
  nameWithType: Array.LastIndexOf<T>(T[], T, Int32)
  fullName: Array.LastIndexOf<T>(T[], T, Int32)
- uid: System.Array.LastIndexOf``1(``0[],``0,System.Int32,System.Int32)
  parent: System.Array
  isExternal: false
  name: LastIndexOf<T>(T[], T, Int32, Int32)
  nameWithType: Array.LastIndexOf<T>(T[], T, Int32, Int32)
  fullName: Array.LastIndexOf<T>(T[], T, Int32, Int32)
- uid: System.Array.Length
  parent: System.Array
  isExternal: false
  name: Length
  nameWithType: Array.Length
  fullName: Array.Length
- uid: System.Array.LongLength
  parent: System.Array
  isExternal: false
  name: LongLength
  nameWithType: Array.LongLength
  fullName: Array.LongLength
- uid: System.Array.Rank
  parent: System.Array
  isExternal: false
  name: Rank
  nameWithType: Array.Rank
  fullName: Array.Rank
- uid: System.Array.Resize``1(``0[]@,System.Int32)
  parent: System.Array
  isExternal: false
  name: Resize<T>(T[], Int32)
  nameWithType: Array.Resize<T>(T[], Int32)
  fullName: Array.Resize<T>(T[], Int32)
- uid: System.Array.Reverse(System.Array,System.Int32,System.Int32)
  parent: System.Array
  isExternal: false
  name: Reverse(Array, Int32, Int32)
  nameWithType: Array.Reverse(Array, Int32, Int32)
  fullName: Array.Reverse(Array, Int32, Int32)
- uid: System.Array.Reverse(System.Array)
  parent: System.Array
  isExternal: false
  name: Reverse(Array)
  nameWithType: Array.Reverse(Array)
  fullName: Array.Reverse(Array)
- uid: System.Array.Reverse``1(``0[])
  parent: System.Array
  isExternal: false
  name: Reverse<T>(T[])
  nameWithType: Array.Reverse<T>(T[])
  fullName: Array.Reverse<T>(T[])
- uid: System.Array.Reverse``1(``0[],System.Int32,System.Int32)
  parent: System.Array
  isExternal: false
  name: Reverse<T>(T[], Int32, Int32)
  nameWithType: Array.Reverse<T>(T[], Int32, Int32)
  fullName: Array.Reverse<T>(T[], Int32, Int32)
- uid: System.Array.SetValue(System.Object,System.Int32)
  parent: System.Array
  isExternal: false
  name: SetValue(Object, Int32)
  nameWithType: Array.SetValue(Object, Int32)
  fullName: Array.SetValue(Object, Int32)
- uid: System.Array.SetValue(System.Object,System.Int32[])
  parent: System.Array
  isExternal: false
  name: SetValue(Object, Int32[])
  nameWithType: Array.SetValue(Object, Int32[])
  fullName: Array.SetValue(Object, Int32[])
- uid: System.Array.SetValue(System.Object,System.Int64)
  parent: System.Array
  isExternal: false
  name: SetValue(Object, Int64)
  nameWithType: Array.SetValue(Object, Int64)
  fullName: Array.SetValue(Object, Int64)
- uid: System.Array.SetValue(System.Object,System.Int64[])
  parent: System.Array
  isExternal: false
  name: SetValue(Object, Int64[])
  nameWithType: Array.SetValue(Object, Int64[])
  fullName: Array.SetValue(Object, Int64[])
- uid: System.Array.SetValue(System.Object,System.Int32,System.Int32)
  parent: System.Array
  isExternal: false
  name: SetValue(Object, Int32, Int32)
  nameWithType: Array.SetValue(Object, Int32, Int32)
  fullName: Array.SetValue(Object, Int32, Int32)
- uid: System.Array.SetValue(System.Object,System.Int64,System.Int64)
  parent: System.Array
  isExternal: false
  name: SetValue(Object, Int64, Int64)
  nameWithType: Array.SetValue(Object, Int64, Int64)
  fullName: Array.SetValue(Object, Int64, Int64)
- uid: System.Array.SetValue(System.Object,System.Int32,System.Int32,System.Int32)
  parent: System.Array
  isExternal: false
  name: SetValue(Object, Int32, Int32, Int32)
  nameWithType: Array.SetValue(Object, Int32, Int32, Int32)
  fullName: Array.SetValue(Object, Int32, Int32, Int32)
- uid: System.Array.SetValue(System.Object,System.Int64,System.Int64,System.Int64)
  parent: System.Array
  isExternal: false
  name: SetValue(Object, Int64, Int64, Int64)
  nameWithType: Array.SetValue(Object, Int64, Int64, Int64)
  fullName: Array.SetValue(Object, Int64, Int64, Int64)
- uid: System.Array.Sort(System.Array,System.Int32,System.Int32,System.Collections.IComparer)
  parent: System.Array
  isExternal: false
  name: Sort(Array, Int32, Int32, IComparer)
  nameWithType: Array.Sort(Array, Int32, Int32, IComparer)
  fullName: Array.Sort(Array, Int32, Int32, IComparer)
- uid: System.Array.Sort(System.Array,System.Array,System.Int32,System.Int32,System.Collections.IComparer)
  parent: System.Array
  isExternal: false
  name: Sort(Array, Array, Int32, Int32, IComparer)
  nameWithType: Array.Sort(Array, Array, Int32, Int32, IComparer)
  fullName: Array.Sort(Array, Array, Int32, Int32, IComparer)
- uid: System.Array.Sort(System.Array,System.Int32,System.Int32)
  parent: System.Array
  isExternal: false
  name: Sort(Array, Int32, Int32)
  nameWithType: Array.Sort(Array, Int32, Int32)
  fullName: Array.Sort(Array, Int32, Int32)
- uid: System.Array.Sort(System.Array,System.Array,System.Int32,System.Int32)
  parent: System.Array
  isExternal: false
  name: Sort(Array, Array, Int32, Int32)
  nameWithType: Array.Sort(Array, Array, Int32, Int32)
  fullName: Array.Sort(Array, Array, Int32, Int32)
- uid: System.Array.Sort(System.Array,System.Collections.IComparer)
  parent: System.Array
  isExternal: false
  name: Sort(Array, IComparer)
  nameWithType: Array.Sort(Array, IComparer)
  fullName: Array.Sort(Array, IComparer)
- uid: System.Array.Sort(System.Array,System.Array,System.Collections.IComparer)
  parent: System.Array
  isExternal: false
  name: Sort(Array, Array, IComparer)
  nameWithType: Array.Sort(Array, Array, IComparer)
  fullName: Array.Sort(Array, Array, IComparer)
- uid: System.Array.Sort(System.Array,System.Array)
  parent: System.Array
  isExternal: false
  name: Sort(Array, Array)
  nameWithType: Array.Sort(Array, Array)
  fullName: Array.Sort(Array, Array)
- uid: System.Array.Sort(System.Array)
  parent: System.Array
  isExternal: false
  name: Sort(Array)
  nameWithType: Array.Sort(Array)
  fullName: Array.Sort(Array)
- uid: System.Array.Sort``1(``0[])
  parent: System.Array
  isExternal: false
  name: Sort<T>(T[])
  nameWithType: Array.Sort<T>(T[])
  fullName: Array.Sort<T>(T[])
- uid: System.Array.Sort``1(``0[],System.Collections.Generic.IComparer{``0})
  parent: System.Array
  isExternal: false
  name: Sort<T>(T[], IComparer<T>)
  nameWithType: Array.Sort<T>(T[], IComparer<T>)
  fullName: Array.Sort<T>(T[], IComparer<T>)
- uid: System.Array.Sort``1(``0[],System.Comparison{``0})
  parent: System.Array
  isExternal: false
  name: Sort<T>(T[], Comparison<T>)
  nameWithType: Array.Sort<T>(T[], Comparison<T>)
  fullName: Array.Sort<T>(T[], Comparison<T>)
- uid: System.Comparison`1
  parent: System
  isExternal: false
  name: Comparison<T>
  nameWithType: Comparison<T>
  fullName: System.Comparison<T>
- uid: System.Array.Sort``1(``0[],System.Int32,System.Int32)
  parent: System.Array
  isExternal: false
  name: Sort<T>(T[], Int32, Int32)
  nameWithType: Array.Sort<T>(T[], Int32, Int32)
  fullName: Array.Sort<T>(T[], Int32, Int32)
- uid: System.Array.Sort``1(``0[],System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})
  parent: System.Array
  isExternal: false
  name: Sort<T>(T[], Int32, Int32, IComparer<T>)
  nameWithType: Array.Sort<T>(T[], Int32, Int32, IComparer<T>)
  fullName: Array.Sort<T>(T[], Int32, Int32, IComparer<T>)
- uid: System.Array.Sort``2(``0[],``1[])
  parent: System.Array
  isExternal: false
  name: Sort<TKey,TValue>(TKey[], TValue[])
  nameWithType: Array.Sort<TKey,TValue>(TKey[], TValue[])
  fullName: Array.Sort<TKey,TValue>(TKey[], TValue[])
- uid: TKey
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: TKey[]
  isExternal: true
  name: TKey[]
  nameWithType: TKey[]
  fullName: TKey[]
  spec.csharp:
  - uid: TKey
    name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: TValue
  name: TValue
  nameWithType: TValue
  fullName: TValue
- uid: TValue[]
  isExternal: true
  name: TValue[]
  nameWithType: TValue[]
  fullName: TValue[]
  spec.csharp:
  - uid: TValue
    name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Array.Sort``2(``0[],``1[],System.Collections.Generic.IComparer{``0})
  parent: System.Array
  isExternal: false
  name: Sort<TKey,TValue>(TKey[], TValue[], IComparer<TKey>)
  nameWithType: Array.Sort<TKey,TValue>(TKey[], TValue[], IComparer<TKey>)
  fullName: Array.Sort<TKey,TValue>(TKey[], TValue[], IComparer<TKey>)
- uid: System.Collections.Generic.IComparer{TKey}
  parent: System.Collections.Generic
  isExternal: false
  name: IComparer<TKey>
  nameWithType: IComparer<TKey>
  fullName: System.Collections.Generic.IComparer<TKey>
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
  - name: <
    nameWithType: <
    fullName: <
  - uid: TKey
    name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Array.Sort``2(``0[],``1[],System.Int32,System.Int32)
  parent: System.Array
  isExternal: false
  name: Sort<TKey,TValue>(TKey[], TValue[], Int32, Int32)
  nameWithType: Array.Sort<TKey,TValue>(TKey[], TValue[], Int32, Int32)
  fullName: Array.Sort<TKey,TValue>(TKey[], TValue[], Int32, Int32)
- uid: System.Array.Sort``2(``0[],``1[],System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})
  parent: System.Array
  isExternal: false
  name: Sort<TKey,TValue>(TKey[], TValue[], Int32, Int32, IComparer<TKey>)
  nameWithType: Array.Sort<TKey,TValue>(TKey[], TValue[], Int32, Int32, IComparer<TKey>)
  fullName: Array.Sort<TKey,TValue>(TKey[], TValue[], Int32, Int32, IComparer<TKey>)
- uid: System.Array.SyncRoot
  parent: System.Array
  isExternal: false
  name: SyncRoot
  nameWithType: Array.SyncRoot
  fullName: Array.SyncRoot
- uid: System.Array.TrueForAll``1(``0[],System.Predicate{``0})
  parent: System.Array
  isExternal: false
  name: TrueForAll<T>(T[], Predicate<T>)
  nameWithType: Array.TrueForAll<T>(T[], Predicate<T>)
  fullName: Array.TrueForAll<T>(T[], Predicate<T>)
- uid: System.Array.System#Collections#ICollection#Count
  parent: System.Array
  isExternal: false
  name: ICollection.Count
  nameWithType: Array.ICollection.Count
  fullName: Array.ICollection.Count
- uid: System.Array.System#Collections#ICollection#IsSynchronized
  parent: System.Array
  isExternal: false
  name: ICollection.IsSynchronized
  nameWithType: Array.ICollection.IsSynchronized
  fullName: Array.ICollection.IsSynchronized
- uid: System.Array.System#Collections#ICollection#SyncRoot
  parent: System.Array
  isExternal: false
  name: ICollection.SyncRoot
  nameWithType: Array.ICollection.SyncRoot
  fullName: Array.ICollection.SyncRoot
- uid: System.Array.System#Collections#IList#Add(System.Object)
  parent: System.Array
  isExternal: false
  name: IList.Add(Object)
  nameWithType: Array.IList.Add(Object)
  fullName: Array.IList.Add(Object)
- uid: System.Array.System#Collections#IList#Clear
  parent: System.Array
  isExternal: false
  name: IList.Clear()
  nameWithType: Array.IList.Clear()
  fullName: Array.IList.Clear()
- uid: System.Array.System#Collections#IList#Contains(System.Object)
  parent: System.Array
  isExternal: false
  name: IList.Contains(Object)
  nameWithType: Array.IList.Contains(Object)
  fullName: Array.IList.Contains(Object)
- uid: System.Array.System#Collections#IList#IndexOf(System.Object)
  parent: System.Array
  isExternal: false
  name: IList.IndexOf(Object)
  nameWithType: Array.IList.IndexOf(Object)
  fullName: Array.IList.IndexOf(Object)
- uid: System.Array.System#Collections#IList#Insert(System.Int32,System.Object)
  parent: System.Array
  isExternal: false
  name: IList.Insert(Int32, Object)
  nameWithType: Array.IList.Insert(Int32, Object)
  fullName: Array.IList.Insert(Int32, Object)
- uid: System.Array.System#Collections#IList#IsFixedSize
  parent: System.Array
  isExternal: false
  name: IList.IsFixedSize
  nameWithType: Array.IList.IsFixedSize
  fullName: Array.IList.IsFixedSize
- uid: System.Array.System#Collections#IList#IsReadOnly
  parent: System.Array
  isExternal: false
  name: IList.IsReadOnly
  nameWithType: Array.IList.IsReadOnly
  fullName: Array.IList.IsReadOnly
- uid: System.Array.System#Collections#IList#Item(System.Int32)
  parent: System.Array
  isExternal: false
  name: IList.Item(Int32)
  nameWithType: Array.IList.Item(Int32)
  fullName: Array.IList.Item(Int32)
- uid: System.Array.System#Collections#IList#Remove(System.Object)
  parent: System.Array
  isExternal: false
  name: IList.Remove(Object)
  nameWithType: Array.IList.Remove(Object)
  fullName: Array.IList.Remove(Object)
- uid: System.Array.System#Collections#IList#RemoveAt(System.Int32)
  parent: System.Array
  isExternal: false
  name: IList.RemoveAt(Int32)
  nameWithType: Array.IList.RemoveAt(Int32)
  fullName: Array.IList.RemoveAt(Int32)
- uid: System.Array.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)
  parent: System.Array
  isExternal: false
  name: IStructuralComparable.CompareTo(Object, IComparer)
  nameWithType: Array.IStructuralComparable.CompareTo(Object, IComparer)
  fullName: Array.IStructuralComparable.CompareTo(Object, IComparer)
- uid: System.Array.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)
  parent: System.Array
  isExternal: false
  name: IStructuralEquatable.Equals(Object, IEqualityComparer)
  nameWithType: Array.IStructuralEquatable.Equals(Object, IEqualityComparer)
  fullName: Array.IStructuralEquatable.Equals(Object, IEqualityComparer)
- uid: System.Collections.IEqualityComparer
  parent: System.Collections
  isExternal: false
  name: IEqualityComparer
  nameWithType: IEqualityComparer
  fullName: System.Collections.IEqualityComparer
- uid: System.Array.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)
  parent: System.Array
  isExternal: false
  name: IStructuralEquatable.GetHashCode(IEqualityComparer)
  nameWithType: Array.IStructuralEquatable.GetHashCode(IEqualityComparer)
  fullName: Array.IStructuralEquatable.GetHashCode(IEqualityComparer)
- uid: System.Array.AsReadOnly``1*
  parent: System.Array
  isExternal: false
  name: AsReadOnly<T>
  nameWithType: Array.AsReadOnly<T>
  fullName: Array.AsReadOnly<T>
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
- uid: System.Array.BinarySearch*
  parent: System.Array
  isExternal: false
  name: BinarySearch
  nameWithType: Array.BinarySearch
  fullName: Array.BinarySearch
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
- uid: System.Array.BinarySearch``1*
  parent: System.Array
  isExternal: false
  name: BinarySearch<T>
  nameWithType: Array.BinarySearch<T>
  fullName: Array.BinarySearch<T>
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
- uid: System.Array.Clear*
  parent: System.Array
  isExternal: false
  name: Clear
  nameWithType: Array.Clear
  fullName: Array.Clear
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
- uid: System.Array.Clone*
  parent: System.Array
  isExternal: false
  name: Clone
  nameWithType: Array.Clone
  fullName: Array.Clone
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
- uid: System.Array.ConstrainedCopy*
  parent: System.Array
  isExternal: false
  name: ConstrainedCopy
  nameWithType: Array.ConstrainedCopy
  fullName: Array.ConstrainedCopy
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
- uid: System.Array.ConvertAll``2*
  parent: System.Array
  isExternal: false
  name: ConvertAll<TInput,TOutput>
  nameWithType: Array.ConvertAll<TInput,TOutput>
  fullName: Array.ConvertAll<TInput,TOutput>
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
- uid: System.Array.Copy*
  parent: System.Array
  isExternal: false
  name: Copy
  nameWithType: Array.Copy
  fullName: Array.Copy
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  - netcore-1.0
  - netcore-1.1
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
- uid: System.Array.CopyTo*
  parent: System.Array
  isExternal: false
  name: CopyTo
  nameWithType: Array.CopyTo
  fullName: Array.CopyTo
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
- uid: System.Array.CreateInstance*
  parent: System.Array
  isExternal: false
  name: CreateInstance
  nameWithType: Array.CreateInstance
  fullName: Array.CreateInstance
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
- uid: System.Array.Empty``1*
  parent: System.Array
  isExternal: false
  name: Empty<T>
  nameWithType: Array.Empty<T>
  fullName: Array.Empty<T>
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
- uid: System.Array.Exists``1*
  parent: System.Array
  isExternal: false
  name: Exists<T>
  nameWithType: Array.Exists<T>
  fullName: Array.Exists<T>
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
- uid: System.Array.Fill``1*
  parent: System.Array
  isExternal: false
  name: Fill<T>
  nameWithType: Array.Fill<T>
  fullName: Array.Fill<T>
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
- uid: System.Array.Find``1*
  parent: System.Array
  isExternal: false
  name: Find<T>
  nameWithType: Array.Find<T>
  fullName: Array.Find<T>
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
- uid: System.Array.FindAll``1*
  parent: System.Array
  isExternal: false
  name: FindAll<T>
  nameWithType: Array.FindAll<T>
  fullName: Array.FindAll<T>
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
- uid: System.Array.FindIndex``1*
  parent: System.Array
  isExternal: false
  name: FindIndex<T>
  nameWithType: Array.FindIndex<T>
  fullName: Array.FindIndex<T>
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
- uid: System.Array.FindLast``1*
  parent: System.Array
  isExternal: false
  name: FindLast<T>
  nameWithType: Array.FindLast<T>
  fullName: Array.FindLast<T>
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
- uid: System.Array.FindLastIndex``1*
  parent: System.Array
  isExternal: false
  name: FindLastIndex<T>
  nameWithType: Array.FindLastIndex<T>
  fullName: Array.FindLastIndex<T>
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
- uid: System.Array.ForEach``1*
  parent: System.Array
  isExternal: false
  name: ForEach<T>
  nameWithType: Array.ForEach<T>
  fullName: Array.ForEach<T>
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
- uid: System.Array.GetEnumerator*
  parent: System.Array
  isExternal: false
  name: GetEnumerator
  nameWithType: Array.GetEnumerator
  fullName: Array.GetEnumerator
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
- uid: System.Array.GetLength*
  parent: System.Array
  isExternal: false
  name: GetLength
  nameWithType: Array.GetLength
  fullName: Array.GetLength
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
- uid: System.Array.GetLongLength*
  parent: System.Array
  isExternal: false
  name: GetLongLength
  nameWithType: Array.GetLongLength
  fullName: Array.GetLongLength
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
- uid: System.Array.GetLowerBound*
  parent: System.Array
  isExternal: false
  name: GetLowerBound
  nameWithType: Array.GetLowerBound
  fullName: Array.GetLowerBound
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
- uid: System.Array.GetUpperBound*
  parent: System.Array
  isExternal: false
  name: GetUpperBound
  nameWithType: Array.GetUpperBound
  fullName: Array.GetUpperBound
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
- uid: System.Array.GetValue*
  parent: System.Array
  isExternal: false
  name: GetValue
  nameWithType: Array.GetValue
  fullName: Array.GetValue
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  - netcore-1.0
  - netcore-1.1
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
- uid: System.Array.IndexOf*
  parent: System.Array
  isExternal: false
  name: IndexOf
  nameWithType: Array.IndexOf
  fullName: Array.IndexOf
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
- uid: System.Array.IndexOf``1*
  parent: System.Array
  isExternal: false
  name: IndexOf<T>
  nameWithType: Array.IndexOf<T>
  fullName: Array.IndexOf<T>
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
- uid: System.Array.Initialize*
  parent: System.Array
  isExternal: false
  name: Initialize
  nameWithType: Array.Initialize
  fullName: Array.Initialize
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
- uid: System.Array.IsFixedSize*
  parent: System.Array
  isExternal: false
  name: IsFixedSize
  nameWithType: Array.IsFixedSize
  fullName: Array.IsFixedSize
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
- uid: System.Array.IsReadOnly*
  parent: System.Array
  isExternal: false
  name: IsReadOnly
  nameWithType: Array.IsReadOnly
  fullName: Array.IsReadOnly
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
- uid: System.Array.IsSynchronized*
  parent: System.Array
  isExternal: false
  name: IsSynchronized
  nameWithType: Array.IsSynchronized
  fullName: Array.IsSynchronized
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
- uid: System.Array.LastIndexOf*
  parent: System.Array
  isExternal: false
  name: LastIndexOf
  nameWithType: Array.LastIndexOf
  fullName: Array.LastIndexOf
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
- uid: System.Array.LastIndexOf``1*
  parent: System.Array
  isExternal: false
  name: LastIndexOf<T>
  nameWithType: Array.LastIndexOf<T>
  fullName: Array.LastIndexOf<T>
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
- uid: System.Array.Length*
  parent: System.Array
  isExternal: false
  name: Length
  nameWithType: Array.Length
  fullName: Array.Length
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
- uid: System.Array.LongLength*
  parent: System.Array
  isExternal: false
  name: LongLength
  nameWithType: Array.LongLength
  fullName: Array.LongLength
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
- uid: System.Array.Rank*
  parent: System.Array
  isExternal: false
  name: Rank
  nameWithType: Array.Rank
  fullName: Array.Rank
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
- uid: System.Array.Resize``1*
  parent: System.Array
  isExternal: false
  name: Resize<T>
  nameWithType: Array.Resize<T>
  fullName: Array.Resize<T>
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
- uid: System.Array.Reverse*
  parent: System.Array
  isExternal: false
  name: Reverse
  nameWithType: Array.Reverse
  fullName: Array.Reverse
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
- uid: System.Array.Reverse``1*
  parent: System.Array
  isExternal: false
  name: Reverse<T>
  nameWithType: Array.Reverse<T>
  fullName: Array.Reverse<T>
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
- uid: System.Array.SetValue*
  parent: System.Array
  isExternal: false
  name: SetValue
  nameWithType: Array.SetValue
  fullName: Array.SetValue
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
- uid: System.Array.Sort*
  parent: System.Array
  isExternal: false
  name: Sort
  nameWithType: Array.Sort
  fullName: Array.Sort
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
- uid: System.Array.Sort``1*
  parent: System.Array
  isExternal: false
  name: Sort<T>
  nameWithType: Array.Sort<T>
  fullName: Array.Sort<T>
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
- uid: System.Array.Sort``2*
  parent: System.Array
  isExternal: false
  name: Sort<TKey,TValue>
  nameWithType: Array.Sort<TKey,TValue>
  fullName: Array.Sort<TKey,TValue>
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
- uid: System.Array.SyncRoot*
  parent: System.Array
  isExternal: false
  name: SyncRoot
  nameWithType: Array.SyncRoot
  fullName: Array.SyncRoot
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
- uid: System.Array.TrueForAll``1*
  parent: System.Array
  isExternal: false
  name: TrueForAll<T>
  nameWithType: Array.TrueForAll<T>
  fullName: Array.TrueForAll<T>
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
- uid: System.Array.System#Collections#ICollection#Count*
  parent: System.Array
  isExternal: false
  name: System.Collections.ICollection.Count
  nameWithType: Array.System.Collections.ICollection.Count
  fullName: Array.System.Collections.ICollection.Count
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
- uid: System.Array.System#Collections#ICollection#IsSynchronized*
  parent: System.Array
  isExternal: false
  name: System.Collections.ICollection.IsSynchronized
  nameWithType: Array.System.Collections.ICollection.IsSynchronized
  fullName: Array.System.Collections.ICollection.IsSynchronized
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
- uid: System.Array.System#Collections#ICollection#SyncRoot*
  parent: System.Array
  isExternal: false
  name: System.Collections.ICollection.SyncRoot
  nameWithType: Array.System.Collections.ICollection.SyncRoot
  fullName: Array.System.Collections.ICollection.SyncRoot
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
- uid: System.Array.System#Collections#IList#Add*
  parent: System.Array
  isExternal: false
  name: System.Collections.IList.Add
  nameWithType: Array.System.Collections.IList.Add
  fullName: Array.System.Collections.IList.Add
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
- uid: System.Array.System#Collections#IList#Clear*
  parent: System.Array
  isExternal: false
  name: System.Collections.IList.Clear
  nameWithType: Array.System.Collections.IList.Clear
  fullName: Array.System.Collections.IList.Clear
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
- uid: System.Array.System#Collections#IList#Contains*
  parent: System.Array
  isExternal: false
  name: System.Collections.IList.Contains
  nameWithType: Array.System.Collections.IList.Contains
  fullName: Array.System.Collections.IList.Contains
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
- uid: System.Array.System#Collections#IList#IndexOf*
  parent: System.Array
  isExternal: false
  name: System.Collections.IList.IndexOf
  nameWithType: Array.System.Collections.IList.IndexOf
  fullName: Array.System.Collections.IList.IndexOf
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
- uid: System.Array.System#Collections#IList#Insert*
  parent: System.Array
  isExternal: false
  name: System.Collections.IList.Insert
  nameWithType: Array.System.Collections.IList.Insert
  fullName: Array.System.Collections.IList.Insert
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
- uid: System.Array.System#Collections#IList#IsFixedSize*
  parent: System.Array
  isExternal: false
  name: System.Collections.IList.IsFixedSize
  nameWithType: Array.System.Collections.IList.IsFixedSize
  fullName: Array.System.Collections.IList.IsFixedSize
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
- uid: System.Array.System#Collections#IList#IsReadOnly*
  parent: System.Array
  isExternal: false
  name: System.Collections.IList.IsReadOnly
  nameWithType: Array.System.Collections.IList.IsReadOnly
  fullName: Array.System.Collections.IList.IsReadOnly
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
- uid: System.Array.System#Collections#IList#Item*
  parent: System.Array
  isExternal: false
  name: System.Collections.IList.Item
  nameWithType: Array.System.Collections.IList.Item
  fullName: Array.System.Collections.IList.Item
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
- uid: System.Array.System#Collections#IList#Remove*
  parent: System.Array
  isExternal: false
  name: System.Collections.IList.Remove
  nameWithType: Array.System.Collections.IList.Remove
  fullName: Array.System.Collections.IList.Remove
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
- uid: System.Array.System#Collections#IList#RemoveAt*
  parent: System.Array
  isExternal: false
  name: System.Collections.IList.RemoveAt
  nameWithType: Array.System.Collections.IList.RemoveAt
  fullName: Array.System.Collections.IList.RemoveAt
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
- uid: System.Array.System#Collections#IStructuralComparable#CompareTo*
  parent: System.Array
  isExternal: false
  name: System.Collections.IStructuralComparable.CompareTo
  nameWithType: Array.System.Collections.IStructuralComparable.CompareTo
  fullName: Array.System.Collections.IStructuralComparable.CompareTo
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
- uid: System.Array.System#Collections#IStructuralEquatable#Equals*
  parent: System.Array
  isExternal: false
  name: System.Collections.IStructuralEquatable.Equals
  nameWithType: Array.System.Collections.IStructuralEquatable.Equals
  fullName: Array.System.Collections.IStructuralEquatable.Equals
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
- uid: System.Array.System#Collections#IStructuralEquatable#GetHashCode*
  parent: System.Array
  isExternal: false
  name: System.Collections.IStructuralEquatable.GetHashCode
  nameWithType: Array.System.Collections.IStructuralEquatable.GetHashCode
  fullName: Array.System.Collections.IStructuralEquatable.GetHashCode
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Array.xml
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: Object.Equals(Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: Object.Equals(Object, Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: false
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: Object.GetHashCode()
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  nameWithType: Object.GetType()
  fullName: Object.GetType()
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: Object.MemberwiseClone()
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: Object.ReferenceEquals(Object, Object)
- uid: System.Object.ToString
  parent: System.Object
  isExternal: false
  name: ToString()
  nameWithType: Object.ToString()
  fullName: Object.ToString()
- uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)
  parent: System.Linq.Enumerable
  isExternal: false
  name: Cast<TResult>(IEnumerable)
  nameWithType: Enumerable.Cast<TResult>(IEnumerable)
  fullName: Enumerable.Cast<TResult>(IEnumerable)
- uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)
  parent: System.Linq.Enumerable
  isExternal: false
  name: OfType<TResult>(IEnumerable)
  nameWithType: Enumerable.OfType<TResult>(IEnumerable)
  fullName: Enumerable.OfType<TResult>(IEnumerable)
- uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)
  parent: System.Linq.ParallelEnumerable
  isExternal: false
  name: AsParallel(IEnumerable)
  nameWithType: ParallelEnumerable.AsParallel(IEnumerable)
  fullName: ParallelEnumerable.AsParallel(IEnumerable)
- uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)
  parent: System.Linq.Queryable
  isExternal: false
  name: AsQueryable(IEnumerable)
  nameWithType: Queryable.AsQueryable(IEnumerable)
  fullName: Queryable.AsQueryable(IEnumerable)
- uid: System.SpanExtensions.AsSpan``1(``0[])
  parent: System.SpanExtensions
  isExternal: false
  name: AsSpan<T>(T[])
  nameWithType: SpanExtensions.AsSpan<T>(T[])
  fullName: SpanExtensions.AsSpan<T>(T[])
- uid: System.SpanExtensions.CopyTo``1(``0[],System.Span{``0})
  parent: System.SpanExtensions
  isExternal: false
  name: CopyTo<T>(T[], Span<T>)
  nameWithType: SpanExtensions.CopyTo<T>(T[], Span<T>)
  fullName: SpanExtensions.CopyTo<T>(T[], Span<T>)
- uid: System.Collections.IList
  parent: System.Collections
  isExternal: false
  name: IList
  nameWithType: IList
  fullName: System.Collections.IList
- uid: System.Collections.IStructuralComparable
  parent: System.Collections
  isExternal: false
  name: IStructuralComparable
  nameWithType: IStructuralComparable
  fullName: System.Collections.IStructuralComparable
- uid: System.Collections.IStructuralEquatable
  parent: System.Collections
  isExternal: false
  name: IStructuralEquatable
  nameWithType: IStructuralEquatable
  fullName: System.Collections.IStructuralEquatable
- uid: System.ICloneable
  parent: System
  isExternal: false
  name: ICloneable
  nameWithType: ICloneable
  fullName: System.ICloneable
