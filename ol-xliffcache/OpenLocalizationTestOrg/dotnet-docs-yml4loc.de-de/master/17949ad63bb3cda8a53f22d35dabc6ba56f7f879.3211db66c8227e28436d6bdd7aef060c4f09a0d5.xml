{"nodes":[{"content":"Defines a command that implements <xref href=\"System.Windows.Input.ICommand\"></xref> and is routed through the element tree.","nodes":[{"pos":[0,124],"content":"Defines a command that implements <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.ICommand\"&gt;&lt;/xref&gt;</ph> and is routed through the element tree.","source":"Defines a command that implements <xref href=\"System.Windows.Input.ICommand\"></xref> and is routed through the element tree."}],"pos":[1181,1306],"yaml":true},{"content":"The <xref:System.Windows.Input.RoutedCommand.Execute%2A> and <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> methods on a <xref:System.Windows.Input.RoutedCommand> do not contain the application logic for the command as is the case with a typical <xref:System.Windows.Input.ICommand>, but rather, these methods raise events that traverse the element tree looking for an object with a <xref:System.Windows.Input.CommandBinding>.  The event handlers attached to the <xref:System.Windows.Input.CommandBinding> contain the command logic.  \n  \n The <xref:System.Windows.Input.RoutedCommand.Execute%2A> method raises the <xref:System.Windows.Input.CommandManager.PreviewExecuted> and <xref:System.Windows.Input.CommandManager.Executed> events.  The <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method raises the <xref:System.Windows.Input.CommandManager.PreviewCanExecute> and <xref:System.Windows.Input.CommandManager.CanExecute> events.  \n  \n<a name=\"xamlAttributeUsage_RoutedCommand\"></a>   \n## XAML Attribute Usage  \n \\<*object* *property*=\"*predefinedCommandName*\"/>  \n  \n \\- or -  \n  \n \\<*object* *property*=\"*predefinedClassName*.*predefinedCommandName*\"/>  \n  \n \\- or -  \n  \n \\<*object* *property*=\"{ *customClassName*.*customCommandName*}\"/>  \n  \n<a name=\"xamlValues_RoutedCommand\"></a>   \n## XAML Values  \n *predefinedClassName*  \n One of the predefined command classes.  \n  \n *predefinedCommandName*  \n One of the predefined commands.  \n  \n *customClassName*  \n A custom class which contains the custom command. Custom classes generally require an `xlmns` prefix mapping; see [XAML Namespaces and Namespace Mapping for WPF XAML](~/docs/framework/wpf/advanced/xaml-namespaces-and-namespace-mapping-for-wpf-xaml.md).  \n  \n *customCommandName*  \n A custom command.","nodes":[{"pos":[0,541],"content":"The <xref:System.Windows.Input.RoutedCommand.Execute%2A> and <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> methods on a <xref:System.Windows.Input.RoutedCommand> do not contain the application logic for the command as is the case with a typical <xref:System.Windows.Input.ICommand>, but rather, these methods raise events that traverse the element tree looking for an object with a <xref:System.Windows.Input.CommandBinding>.  The event handlers attached to the <xref:System.Windows.Input.CommandBinding> contain the command logic.","nodes":[{"content":"The <xref:System.Windows.Input.RoutedCommand.Execute%2A> and <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> methods on a <xref:System.Windows.Input.RoutedCommand> do not contain the application logic for the command as is the case with a typical <xref:System.Windows.Input.ICommand>, but rather, these methods raise events that traverse the element tree looking for an object with a <xref:System.Windows.Input.CommandBinding>.  The event handlers attached to the <xref:System.Windows.Input.CommandBinding> contain the command logic.","pos":[0,541],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Input.RoutedCommand.Execute%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Windows.Input.RoutedCommand.CanExecute%2A&gt;</ph> methods on a <ph id=\"ph3\">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph> do not contain the application logic for the command as is the case with a typical <ph id=\"ph4\">&lt;xref:System.Windows.Input.ICommand&gt;</ph>, but rather, these methods raise events that traverse the element tree looking for an object with a <ph id=\"ph5\">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph>.","pos":[0,435],"source":"The <xref:System.Windows.Input.RoutedCommand.Execute%2A> and <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> methods on a <xref:System.Windows.Input.RoutedCommand> do not contain the application logic for the command as is the case with a typical <xref:System.Windows.Input.ICommand>, but rather, these methods raise events that traverse the element tree looking for an object with a <xref:System.Windows.Input.CommandBinding>."},{"content":"The event handlers attached to the <ph id=\"ph1\">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph> contain the command logic.","pos":[437,541],"source":"  The event handlers attached to the <xref:System.Windows.Input.CommandBinding> contain the command logic."}]}]},{"pos":[548,951],"content":"The <xref:System.Windows.Input.RoutedCommand.Execute%2A> method raises the <xref:System.Windows.Input.CommandManager.PreviewExecuted> and <xref:System.Windows.Input.CommandManager.Executed> events.  The <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method raises the <xref:System.Windows.Input.CommandManager.PreviewCanExecute> and <xref:System.Windows.Input.CommandManager.CanExecute> events.","nodes":[{"content":"The <xref:System.Windows.Input.RoutedCommand.Execute%2A> method raises the <xref:System.Windows.Input.CommandManager.PreviewExecuted> and <xref:System.Windows.Input.CommandManager.Executed> events.  The <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method raises the <xref:System.Windows.Input.CommandManager.PreviewCanExecute> and <xref:System.Windows.Input.CommandManager.CanExecute> events.","pos":[0,403],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Input.RoutedCommand.Execute%2A&gt;</ph> method raises the <ph id=\"ph2\">&lt;xref:System.Windows.Input.CommandManager.PreviewExecuted&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.Windows.Input.CommandManager.Executed&gt;</ph> events.","pos":[0,197],"source":"The <xref:System.Windows.Input.RoutedCommand.Execute%2A> method raises the <xref:System.Windows.Input.CommandManager.PreviewExecuted> and <xref:System.Windows.Input.CommandManager.Executed> events."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Input.RoutedCommand.CanExecute%2A&gt;</ph> method raises the <ph id=\"ph2\">&lt;xref:System.Windows.Input.CommandManager.PreviewCanExecute&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.Windows.Input.CommandManager.CanExecute&gt;</ph> events.","pos":[199,403],"source":"  The <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method raises the <xref:System.Windows.Input.CommandManager.PreviewCanExecute> and <xref:System.Windows.Input.CommandManager.CanExecute> events."}]}]},{"pos":[1011,1031],"content":"XAML Attribute Usage","linkify":"XAML Attribute Usage","nodes":[{"content":"XAML Attribute Usage","pos":[0,20]}]},{"pos":[1035,1084],"content":"<ph id=\"ph1\">\\&lt;</ph><bpt id=\"p1\">*</bpt>object<ept id=\"p1\">*</ept> <bpt id=\"p2\">*</bpt>property<ept id=\"p2\">*</ept>=\"<bpt id=\"p3\">*</bpt>predefinedCommandName<ept id=\"p3\">*</ept>\"/&gt;","source":"\\<*object* *property*=\"*predefinedCommandName*\"/>"},{"pos":[1091,1098],"content":"\\- or -","nodes":[{"content":"<ph id=\"ph1\">\\-</ph> or -","pos":[0,7],"source":"\\- or -"}]},{"pos":[1105,1176],"content":"<ph id=\"ph1\">\\&lt;</ph><bpt id=\"p1\">*</bpt>object<ept id=\"p1\">*</ept> <bpt id=\"p2\">*</bpt>property<ept id=\"p2\">*</ept>=\"<bpt id=\"p3\">*</bpt>predefinedClassName<ept id=\"p3\">*</ept>.<bpt id=\"p4\">*</bpt>predefinedCommandName<ept id=\"p4\">*</ept>\"/&gt;","source":"\\<*object* *property*=\"*predefinedClassName*.*predefinedCommandName*\"/>"},{"pos":[1183,1190],"content":"\\- or -","nodes":[{"content":"<ph id=\"ph1\">\\-</ph> or -","pos":[0,7],"source":"\\- or -"}]},{"pos":[1197,1263],"content":"<ph id=\"ph1\">\\&lt;</ph><bpt id=\"p1\">*</bpt>object<ept id=\"p1\">*</ept> <bpt id=\"p2\">*</bpt>property<ept id=\"p2\">*</ept>=\"{ <bpt id=\"p3\">*</bpt>customClassName<ept id=\"p3\">*</ept>.<bpt id=\"p4\">*</bpt>customCommandName<ept id=\"p4\">*</ept>}\"/&gt;","source":"\\<*object* *property*=\"{ *customClassName*.*customCommandName*}\"/>"},{"pos":[1315,1326],"content":"XAML Values","linkify":"XAML Values","nodes":[{"content":"XAML Values","pos":[0,11]}]},{"pos":[1330,1393],"content":"*predefinedClassName*  \n One of the predefined command classes.","nodes":[{"content":"<bpt id=\"p1\">*</bpt>predefinedClassName<ept id=\"p1\">*</ept>","pos":[0,21],"source":"*predefinedClassName*"},{"content":"One of the predefined command classes.","pos":[25,63]}]},{"pos":[1400,1458],"content":"*predefinedCommandName*  \n One of the predefined commands.","nodes":[{"content":"<bpt id=\"p1\">*</bpt>predefinedCommandName<ept id=\"p1\">*</ept>","pos":[0,23],"source":"*predefinedCommandName*"},{"content":"One of the predefined commands.","pos":[27,58]}]},{"pos":[1465,1738],"content":"*customClassName*  \n A custom class which contains the custom command. Custom classes generally require an `xlmns` prefix mapping; see [XAML Namespaces and Namespace Mapping for WPF XAML](~/docs/framework/wpf/advanced/xaml-namespaces-and-namespace-mapping-for-wpf-xaml.md).","nodes":[{"content":"<bpt id=\"p1\">*</bpt>customClassName<ept id=\"p1\">*</ept>","pos":[0,17],"source":"*customClassName*"},{"content":" A custom class which contains the custom command. Custom classes generally require an `xlmns` prefix mapping; see [XAML Namespaces and Namespace Mapping for WPF XAML](~/docs/framework/wpf/advanced/xaml-namespaces-and-namespace-mapping-for-wpf-xaml.md).","pos":[20,273],"nodes":[{"content":"A custom class which contains the custom command.","pos":[1,50]},{"content":"Custom classes generally require an <ph id=\"ph1\">`xlmns`</ph> prefix mapping; see <bpt id=\"p1\">[</bpt>XAML Namespaces and Namespace Mapping for WPF XAML<ept id=\"p1\">](~/docs/framework/wpf/advanced/xaml-namespaces-and-namespace-mapping-for-wpf-xaml.md)</ept>.","pos":[51,253],"source":" Custom classes generally require an `xlmns` prefix mapping; see [XAML Namespaces and Namespace Mapping for WPF XAML](~/docs/framework/wpf/advanced/xaml-namespaces-and-namespace-mapping-for-wpf-xaml.md)."}]}]},{"pos":[1745,1785],"content":"*customCommandName*  \n A custom command.","nodes":[{"content":"<bpt id=\"p1\">*</bpt>customCommandName<ept id=\"p1\">*</ept>","pos":[0,19],"source":"*customCommandName*"},{"content":"A custom command.","pos":[23,40]}]}],"pos":[1317,3148],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Windows.Input.RoutedCommand\"></xref> class.","nodes":[{"pos":[0,96],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.RoutedCommand\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.Windows.Input.RoutedCommand\"></xref> class."}],"pos":[4855,4952],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Windows.Input.RoutedCommand\"></xref> class with the specified name and owner type.","nodes":[{"pos":[0,135],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.RoutedCommand\"&gt;&lt;/xref&gt;</ph> class with the specified name and owner type.","source":"Initializes a new instance of the <xref href=\"System.Windows.Input.RoutedCommand\"></xref> class with the specified name and owner type."}],"pos":[6131,6267],"yaml":true},{"content":"Declared name for serialization.","nodes":[{"pos":[0,32],"content":"Declared name for serialization.","nodes":[{"content":"Declared name for serialization.","pos":[0,32]}]}],"pos":[6418,6451],"yaml":true},{"content":"The type which is registering the command.","nodes":[{"pos":[0,42],"content":"The type which is registering the command.","nodes":[{"content":"The type which is registering the command.","pos":[0,42]}]}],"pos":[6514,6557],"yaml":true},{"content":"<code>name</code> is `null`.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;name&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>name</code> is `null`."}],"pos":[6727,6756],"yaml":true},{"content":"<code>ownerType</code> is `null`.","nodes":[{"pos":[0,33],"content":"<ph id=\"ph1\">&lt;code&gt;ownerType&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>ownerType</code> is `null`."}],"pos":[6850,6884],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Windows.Input.RoutedCommand\"></xref> class with the specified name, owner type, and collection of gestures.","nodes":[{"pos":[0,160],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.RoutedCommand\"&gt;&lt;/xref&gt;</ph> class with the specified name, owner type, and collection of gestures.","source":"Initializes a new instance of the <xref href=\"System.Windows.Input.RoutedCommand\"></xref> class with the specified name, owner type, and collection of gestures."}],"pos":[8129,8290],"yaml":true},{"content":"Declared name for serialization.","nodes":[{"pos":[0,32],"content":"Declared name for serialization.","nodes":[{"content":"Declared name for serialization.","pos":[0,32]}]}],"pos":[8500,8533],"yaml":true},{"content":"The type that is registering the command.","nodes":[{"pos":[0,41],"content":"The type that is registering the command.","nodes":[{"content":"The type that is registering the command.","pos":[0,41]}]}],"pos":[8596,8638],"yaml":true},{"content":"Default input gestures associated with this command.","nodes":[{"pos":[0,52],"content":"Default input gestures associated with this command.","nodes":[{"content":"Default input gestures associated with this command.","pos":[0,52]}]}],"pos":[8737,8790],"yaml":true},{"content":"<code>name</code> is `null`.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;name&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>name</code> is `null`."}],"pos":[8960,8989],"yaml":true},{"content":"the length of <code>name</code> is zero  \n  \n \\- or -  \n  \n <code>ownerType</code> is `null`.","nodes":[{"pos":[0,39],"content":"the length of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">name</ph><ept id=\"p1\">&lt;/code&gt;</ept> is zero","source":"the length of <code>name</code> is zero"},{"pos":[46,53],"content":"\\- or -","nodes":[{"content":"<ph id=\"ph1\">\\-</ph> or -","pos":[0,7],"source":"\\- or -"}]},{"pos":[60,93],"content":"<ph id=\"ph1\">&lt;code&gt;ownerType&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>ownerType</code> is `null`."}],"pos":[9083,9184],"yaml":true},{"content":"Determines whether this <xref href=\"System.Windows.Input.RoutedCommand\"></xref> can execute in its current state.","nodes":[{"pos":[0,113],"content":"Determines whether this <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.RoutedCommand\"&gt;&lt;/xref&gt;</ph> can execute in its current state.","source":"Determines whether this <xref href=\"System.Windows.Input.RoutedCommand\"></xref> can execute in its current state."}],"pos":[10280,10394],"yaml":true},{"content":"The actual logic that determines if a <xref:System.Windows.Input.RoutedCommand> can execute on the current command target is not contained in the <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> methods, rather <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> raises the <xref:System.Windows.Input.CommandManager.PreviewCanExecute> and the <xref:System.Windows.Input.CommandManager.CanExecute> events which tunnel and bubble through element tree looking for a object with a <xref:System.Windows.Input.CommandBinding>.  If a <xref:System.Windows.Input.CommandBinding> for that <xref:System.Windows.Input.RoutedCommand> is found, then the <xref:System.Windows.Input.CanExecuteRoutedEventHandler> attached to <xref:System.Windows.Input.CommandBinding> is called.  These handlers supply the programming logic for determining if the <xref:System.Windows.Input.RoutedCommand> can execute or not.  \n  \n The <xref:System.Windows.Input.CommandManager.PreviewCanExecute> and <xref:System.Windows.Input.CommandManager.PreviewExecuted> events are raised on the <xref:System.Windows.Input.ICommandSource.CommandTarget%2A>.  If the <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> is not set on the <xref:System.Windows.Input.ICommandSource>, the <xref:System.Windows.Input.CommandManager.PreviewCanExecute> and <xref:System.Windows.Input.CommandManager.CanExecute> events are raised on the element with keyboard focus.","nodes":[{"pos":[0,903],"content":"The actual logic that determines if a <xref:System.Windows.Input.RoutedCommand> can execute on the current command target is not contained in the <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> methods, rather <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> raises the <xref:System.Windows.Input.CommandManager.PreviewCanExecute> and the <xref:System.Windows.Input.CommandManager.CanExecute> events which tunnel and bubble through element tree looking for a object with a <xref:System.Windows.Input.CommandBinding>.  If a <xref:System.Windows.Input.CommandBinding> for that <xref:System.Windows.Input.RoutedCommand> is found, then the <xref:System.Windows.Input.CanExecuteRoutedEventHandler> attached to <xref:System.Windows.Input.CommandBinding> is called.  These handlers supply the programming logic for determining if the <xref:System.Windows.Input.RoutedCommand> can execute or not.","nodes":[{"content":"The actual logic that determines if a <xref:System.Windows.Input.RoutedCommand> can execute on the current command target is not contained in the <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> methods, rather <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> raises the <xref:System.Windows.Input.CommandManager.PreviewCanExecute> and the <xref:System.Windows.Input.CommandManager.CanExecute> events which tunnel and bubble through element tree looking for a object with a <xref:System.Windows.Input.CommandBinding>.  If a <xref:System.Windows.Input.CommandBinding> for that <xref:System.Windows.Input.RoutedCommand> is found, then the <xref:System.Windows.Input.CanExecuteRoutedEventHandler> attached to <xref:System.Windows.Input.CommandBinding> is called.  These handlers supply the programming logic for determining if the <xref:System.Windows.Input.RoutedCommand> can execute or not.","pos":[0,903],"nodes":[{"content":"The actual logic that determines if a <ph id=\"ph1\">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph> can execute on the current command target is not contained in the <ph id=\"ph2\">&lt;xref:System.Windows.Input.RoutedCommand.CanExecute%2A&gt;</ph> methods, rather <ph id=\"ph3\">&lt;xref:System.Windows.Input.RoutedCommand.CanExecute%2A&gt;</ph> raises the <ph id=\"ph4\">&lt;xref:System.Windows.Input.CommandManager.PreviewCanExecute&gt;</ph> and the <ph id=\"ph5\">&lt;xref:System.Windows.Input.CommandManager.CanExecute&gt;</ph> events which tunnel and bubble through element tree looking for a object with a <ph id=\"ph6\">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph>.","pos":[0,531],"source":"The actual logic that determines if a <xref:System.Windows.Input.RoutedCommand> can execute on the current command target is not contained in the <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> methods, rather <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> raises the <xref:System.Windows.Input.CommandManager.PreviewCanExecute> and the <xref:System.Windows.Input.CommandManager.CanExecute> events which tunnel and bubble through element tree looking for a object with a <xref:System.Windows.Input.CommandBinding>."},{"content":"If a <ph id=\"ph1\">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph> for that <ph id=\"ph2\">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph> is found, then the <ph id=\"ph3\">&lt;xref:System.Windows.Input.CanExecuteRoutedEventHandler&gt;</ph> attached to <ph id=\"ph4\">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph> is called.","pos":[533,773],"source":"  If a <xref:System.Windows.Input.CommandBinding> for that <xref:System.Windows.Input.RoutedCommand> is found, then the <xref:System.Windows.Input.CanExecuteRoutedEventHandler> attached to <xref:System.Windows.Input.CommandBinding> is called."},{"content":"These handlers supply the programming logic for determining if the <ph id=\"ph1\">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph> can execute or not.","pos":[775,903],"source":"  These handlers supply the programming logic for determining if the <xref:System.Windows.Input.RoutedCommand> can execute or not."}]}]},{"pos":[910,1430],"content":"The <xref:System.Windows.Input.CommandManager.PreviewCanExecute> and <xref:System.Windows.Input.CommandManager.PreviewExecuted> events are raised on the <xref:System.Windows.Input.ICommandSource.CommandTarget%2A>.  If the <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> is not set on the <xref:System.Windows.Input.ICommandSource>, the <xref:System.Windows.Input.CommandManager.PreviewCanExecute> and <xref:System.Windows.Input.CommandManager.CanExecute> events are raised on the element with keyboard focus.","nodes":[{"content":"The <xref:System.Windows.Input.CommandManager.PreviewCanExecute> and <xref:System.Windows.Input.CommandManager.PreviewExecuted> events are raised on the <xref:System.Windows.Input.ICommandSource.CommandTarget%2A>.  If the <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> is not set on the <xref:System.Windows.Input.ICommandSource>, the <xref:System.Windows.Input.CommandManager.PreviewCanExecute> and <xref:System.Windows.Input.CommandManager.CanExecute> events are raised on the element with keyboard focus.","pos":[0,520],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Input.CommandManager.PreviewCanExecute&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Windows.Input.CommandManager.PreviewExecuted&gt;</ph> events are raised on the <ph id=\"ph3\">&lt;xref:System.Windows.Input.ICommandSource.CommandTarget%2A&gt;</ph>.","pos":[0,213],"source":"The <xref:System.Windows.Input.CommandManager.PreviewCanExecute> and <xref:System.Windows.Input.CommandManager.PreviewExecuted> events are raised on the <xref:System.Windows.Input.ICommandSource.CommandTarget%2A>."},{"content":"If the <ph id=\"ph1\">&lt;xref:System.Windows.Input.ICommandSource.CommandTarget%2A&gt;</ph> is not set on the <ph id=\"ph2\">&lt;xref:System.Windows.Input.ICommandSource&gt;</ph>, the <ph id=\"ph3\">&lt;xref:System.Windows.Input.CommandManager.PreviewCanExecute&gt;</ph> and <ph id=\"ph4\">&lt;xref:System.Windows.Input.CommandManager.CanExecute&gt;</ph> events are raised on the element with keyboard focus.","pos":[215,520],"source":"  If the <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> is not set on the <xref:System.Windows.Input.ICommandSource>, the <xref:System.Windows.Input.CommandManager.PreviewCanExecute> and <xref:System.Windows.Input.CommandManager.CanExecute> events are raised on the element with keyboard focus."}]}]}],"pos":[10405,11840],"yaml":true,"extradata":"MT"},{"content":"A user defined data type.","nodes":[{"pos":[0,25],"content":"A user defined data type.","nodes":[{"content":"A user defined data type.","pos":[0,25]}]}],"pos":[13659,13685],"yaml":true},{"content":"The command target.","nodes":[{"pos":[0,19],"content":"The command target.","nodes":[{"content":"The command target.","pos":[0,19]}]}],"pos":[13762,13782],"yaml":true},{"content":"`true` if the command can execute on the current command target; otherwise, `false`.","nodes":[{"pos":[0,84],"content":"<ph id=\"ph1\">`true`</ph> if the command can execute on the current command target; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the command can execute on the current command target; otherwise, `false`."}],"pos":[13840,13927],"yaml":true},{"content":"<code>target</code> is not a <xref href=\"System.Windows.UIElement\"></xref> or <xref href=\"System.Windows.ContentElement\"></xref>.","nodes":[{"pos":[0,129],"content":"<ph id=\"ph1\">&lt;code&gt;target&lt;/code&gt;</ph> is not a <ph id=\"ph2\">&lt;xref href=\"System.Windows.UIElement\"&gt;&lt;/xref&gt;</ph> or <ph id=\"ph3\">&lt;xref href=\"System.Windows.ContentElement\"&gt;&lt;/xref&gt;</ph>.","source":"<code>target</code> is not a <xref href=\"System.Windows.UIElement\"></xref> or <xref href=\"System.Windows.ContentElement\"></xref>."}],"pos":[14110,14240],"yaml":true},{"content":"Occurs when changes to the command source are detected by the command manager. These changes often affect whether the command should execute on the current command target.","nodes":[{"pos":[0,171],"content":"Occurs when changes to the command source are detected by the command manager. These changes often affect whether the command should execute on the current command target.","nodes":[{"content":"Occurs when changes to the command source are detected by the command manager. These changes often affect whether the command should execute on the current command target.","pos":[0,171],"nodes":[{"content":"Occurs when changes to the command source are detected by the command manager.","pos":[0,78]},{"content":"These changes often affect whether the command should execute on the current command target.","pos":[79,171]}]}]}],"pos":[15264,15436],"yaml":true},{"content":"The <xref:System.Windows.Input.RoutedCommand> listens for the <xref:System.Windows.Input.CommandManager.RequerySuggested> event, which is raised by the <xref:System.Windows.Input.CommandManager>. The <xref:System.Windows.Input.CommandManager.RequerySuggested> event is raised whenever conditions are met that may change the whether the command should execute, such as a change in keyboard focus.  When the command receives the <xref:System.Windows.Input.CommandManager.RequerySuggested> event, it raises the <xref:System.Windows.Input.RoutedCommand.CanExecuteChanged> event.  Generally, the command source will listen for this event and query the <xref:System.Windows.Input.RoutedCommand> by way of the <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method.  Most command sources will disable themselves if the command cannot be executed, as part of their command binding.  An example of this is when a <xref:System.Windows.Controls.MenuItem> grays itself out when the command cannot be executed.  \n  \n In some situations, the <xref:System.Windows.Input.CommandManager> is unaware of a change in conditions that alters the ability of a command to execute.  In these cases, you can force the <xref:System.Windows.Input.CommandManager> to raises the <xref:System.Windows.Input.CommandManager.RequerySuggested> event by calling the <xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A> method, this will in turn cause the <xref:System.Windows.Input.RoutedCommand> to raise the <xref:System.Windows.Input.RoutedCommand.CanExecuteChanged> event.","nodes":[{"pos":[0,1005],"content":"The <xref:System.Windows.Input.RoutedCommand> listens for the <xref:System.Windows.Input.CommandManager.RequerySuggested> event, which is raised by the <xref:System.Windows.Input.CommandManager>. The <xref:System.Windows.Input.CommandManager.RequerySuggested> event is raised whenever conditions are met that may change the whether the command should execute, such as a change in keyboard focus.  When the command receives the <xref:System.Windows.Input.CommandManager.RequerySuggested> event, it raises the <xref:System.Windows.Input.RoutedCommand.CanExecuteChanged> event.  Generally, the command source will listen for this event and query the <xref:System.Windows.Input.RoutedCommand> by way of the <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method.  Most command sources will disable themselves if the command cannot be executed, as part of their command binding.  An example of this is when a <xref:System.Windows.Controls.MenuItem> grays itself out when the command cannot be executed.","nodes":[{"content":"The <xref:System.Windows.Input.RoutedCommand> listens for the <xref:System.Windows.Input.CommandManager.RequerySuggested> event, which is raised by the <xref:System.Windows.Input.CommandManager>. The <xref:System.Windows.Input.CommandManager.RequerySuggested> event is raised whenever conditions are met that may change the whether the command should execute, such as a change in keyboard focus.  When the command receives the <xref:System.Windows.Input.CommandManager.RequerySuggested> event, it raises the <xref:System.Windows.Input.RoutedCommand.CanExecuteChanged> event.  Generally, the command source will listen for this event and query the <xref:System.Windows.Input.RoutedCommand> by way of the <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method.  Most command sources will disable themselves if the command cannot be executed, as part of their command binding.  An example of this is when a <xref:System.Windows.Controls.MenuItem> grays itself out when the command cannot be executed.","pos":[0,1005],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph> listens for the <ph id=\"ph2\">&lt;xref:System.Windows.Input.CommandManager.RequerySuggested&gt;</ph> event, which is raised by the <ph id=\"ph3\">&lt;xref:System.Windows.Input.CommandManager&gt;</ph>.","pos":[0,195],"source":"The <xref:System.Windows.Input.RoutedCommand> listens for the <xref:System.Windows.Input.CommandManager.RequerySuggested> event, which is raised by the <xref:System.Windows.Input.CommandManager>."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Input.CommandManager.RequerySuggested&gt;</ph> event is raised whenever conditions are met that may change the whether the command should execute, such as a change in keyboard focus.","pos":[196,395],"source":" The <xref:System.Windows.Input.CommandManager.RequerySuggested> event is raised whenever conditions are met that may change the whether the command should execute, such as a change in keyboard focus."},{"content":"When the command receives the <ph id=\"ph1\">&lt;xref:System.Windows.Input.CommandManager.RequerySuggested&gt;</ph> event, it raises the <ph id=\"ph2\">&lt;xref:System.Windows.Input.RoutedCommand.CanExecuteChanged&gt;</ph> event.","pos":[397,574],"source":"  When the command receives the <xref:System.Windows.Input.CommandManager.RequerySuggested> event, it raises the <xref:System.Windows.Input.RoutedCommand.CanExecuteChanged> event."},{"content":"Generally, the command source will listen for this event and query the <ph id=\"ph1\">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph> by way of the <ph id=\"ph2\">&lt;xref:System.Windows.Input.RoutedCommand.CanExecute%2A&gt;</ph> method.","pos":[576,766],"source":"  Generally, the command source will listen for this event and query the <xref:System.Windows.Input.RoutedCommand> by way of the <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method."},{"content":"Most command sources will disable themselves if the command cannot be executed, as part of their command binding.","pos":[768,881]},{"content":"An example of this is when a <ph id=\"ph1\">&lt;xref:System.Windows.Controls.MenuItem&gt;</ph> grays itself out when the command cannot be executed.","pos":[883,1005],"source":"  An example of this is when a <xref:System.Windows.Controls.MenuItem> grays itself out when the command cannot be executed."}]}]},{"pos":[1012,1568],"content":"In some situations, the <xref:System.Windows.Input.CommandManager> is unaware of a change in conditions that alters the ability of a command to execute.  In these cases, you can force the <xref:System.Windows.Input.CommandManager> to raises the <xref:System.Windows.Input.CommandManager.RequerySuggested> event by calling the <xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A> method, this will in turn cause the <xref:System.Windows.Input.RoutedCommand> to raise the <xref:System.Windows.Input.RoutedCommand.CanExecuteChanged> event.","nodes":[{"content":"In some situations, the <xref:System.Windows.Input.CommandManager> is unaware of a change in conditions that alters the ability of a command to execute.  In these cases, you can force the <xref:System.Windows.Input.CommandManager> to raises the <xref:System.Windows.Input.CommandManager.RequerySuggested> event by calling the <xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A> method, this will in turn cause the <xref:System.Windows.Input.RoutedCommand> to raise the <xref:System.Windows.Input.RoutedCommand.CanExecuteChanged> event.","pos":[0,556],"nodes":[{"content":"In some situations, the <ph id=\"ph1\">&lt;xref:System.Windows.Input.CommandManager&gt;</ph> is unaware of a change in conditions that alters the ability of a command to execute.","pos":[0,152],"source":"In some situations, the <xref:System.Windows.Input.CommandManager> is unaware of a change in conditions that alters the ability of a command to execute."},{"content":"In these cases, you can force the <ph id=\"ph1\">&lt;xref:System.Windows.Input.CommandManager&gt;</ph> to raises the <ph id=\"ph2\">&lt;xref:System.Windows.Input.CommandManager.RequerySuggested&gt;</ph> event by calling the <ph id=\"ph3\">&lt;xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A&gt;</ph> method, this will in turn cause the <ph id=\"ph4\">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph> to raise the <ph id=\"ph5\">&lt;xref:System.Windows.Input.RoutedCommand.CanExecuteChanged&gt;</ph> event.","pos":[154,556],"source":"  In these cases, you can force the <xref:System.Windows.Input.CommandManager> to raises the <xref:System.Windows.Input.CommandManager.RequerySuggested> event by calling the <xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A> method, this will in turn cause the <xref:System.Windows.Input.RoutedCommand> to raise the <xref:System.Windows.Input.RoutedCommand.CanExecuteChanged> event."}]}]}],"pos":[15447,17020],"yaml":true,"extradata":"MT"},{"content":"Executes the <xref href=\"System.Windows.Input.RoutedCommand\"></xref> on the current command target.","nodes":[{"pos":[0,99],"content":"Executes the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.RoutedCommand\"&gt;&lt;/xref&gt;</ph> on the current command target.","source":"Executes the <xref href=\"System.Windows.Input.RoutedCommand\"></xref> on the current command target."}],"pos":[19856,19956],"yaml":true},{"content":"The actual logic that executes the <xref:System.Windows.Input.RoutedCommand> is not contained in the <xref:System.Windows.Input.RoutedCommand.Execute%2A> methods.  <xref:System.Windows.Input.RoutedCommand.Execute%2A> raises the <xref:System.Windows.Input.CommandManager.PreviewExecuted> and <xref:System.Windows.Input.CommandManager.Executed> events, which tunnel and bubble through the element tree looking for an object with a <xref:System.Windows.Input.CommandBinding>.  If a <xref:System.Windows.Input.CommandBinding> for that <xref:System.Windows.Input.RoutedCommand> is found, then the <xref:System.Windows.Input.ExecutedRoutedEventHandler> attached to <xref:System.Windows.Input.CommandBinding> is called.  These handlers supply the programming logic that performs the <xref:System.Windows.Input.RoutedCommand>.  \n  \n The <xref:System.Windows.Input.CommandManager.PreviewExecuted> and <xref:System.Windows.Input.CommandManager.Executed> events are raised on the <xref:System.Windows.Input.ICommandSource.CommandTarget%2A>.  If the <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> is not set on the <xref:System.Windows.Input.ICommandSource>, the <xref:System.Windows.Input.CommandManager.PreviewExecuted> and <xref:System.Windows.Input.CommandManager.Executed> events are raised on the element with keyboard focus.","nodes":[{"pos":[0,818],"content":"The actual logic that executes the <xref:System.Windows.Input.RoutedCommand> is not contained in the <xref:System.Windows.Input.RoutedCommand.Execute%2A> methods.  <xref:System.Windows.Input.RoutedCommand.Execute%2A> raises the <xref:System.Windows.Input.CommandManager.PreviewExecuted> and <xref:System.Windows.Input.CommandManager.Executed> events, which tunnel and bubble through the element tree looking for an object with a <xref:System.Windows.Input.CommandBinding>.  If a <xref:System.Windows.Input.CommandBinding> for that <xref:System.Windows.Input.RoutedCommand> is found, then the <xref:System.Windows.Input.ExecutedRoutedEventHandler> attached to <xref:System.Windows.Input.CommandBinding> is called.  These handlers supply the programming logic that performs the <xref:System.Windows.Input.RoutedCommand>.","nodes":[{"content":"The actual logic that executes the <xref:System.Windows.Input.RoutedCommand> is not contained in the <xref:System.Windows.Input.RoutedCommand.Execute%2A> methods.  <xref:System.Windows.Input.RoutedCommand.Execute%2A> raises the <xref:System.Windows.Input.CommandManager.PreviewExecuted> and <xref:System.Windows.Input.CommandManager.Executed> events, which tunnel and bubble through the element tree looking for an object with a <xref:System.Windows.Input.CommandBinding>.  If a <xref:System.Windows.Input.CommandBinding> for that <xref:System.Windows.Input.RoutedCommand> is found, then the <xref:System.Windows.Input.ExecutedRoutedEventHandler> attached to <xref:System.Windows.Input.CommandBinding> is called.  These handlers supply the programming logic that performs the <xref:System.Windows.Input.RoutedCommand>.","pos":[0,818],"nodes":[{"content":"The actual logic that executes the <ph id=\"ph1\">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph> is not contained in the <ph id=\"ph2\">&lt;xref:System.Windows.Input.RoutedCommand.Execute%2A&gt;</ph> methods.","pos":[0,162],"source":"The actual logic that executes the <xref:System.Windows.Input.RoutedCommand> is not contained in the <xref:System.Windows.Input.RoutedCommand.Execute%2A> methods."},{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Input.RoutedCommand.Execute%2A&gt;</ph> raises the <ph id=\"ph2\">&lt;xref:System.Windows.Input.CommandManager.PreviewExecuted&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.Windows.Input.CommandManager.Executed&gt;</ph> events, which tunnel and bubble through the element tree looking for an object with a <ph id=\"ph4\">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph>.","pos":[164,472],"source":"  <xref:System.Windows.Input.RoutedCommand.Execute%2A> raises the <xref:System.Windows.Input.CommandManager.PreviewExecuted> and <xref:System.Windows.Input.CommandManager.Executed> events, which tunnel and bubble through the element tree looking for an object with a <xref:System.Windows.Input.CommandBinding>."},{"content":"If a <ph id=\"ph1\">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph> for that <ph id=\"ph2\">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph> is found, then the <ph id=\"ph3\">&lt;xref:System.Windows.Input.ExecutedRoutedEventHandler&gt;</ph> attached to <ph id=\"ph4\">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph> is called.","pos":[474,712],"source":"  If a <xref:System.Windows.Input.CommandBinding> for that <xref:System.Windows.Input.RoutedCommand> is found, then the <xref:System.Windows.Input.ExecutedRoutedEventHandler> attached to <xref:System.Windows.Input.CommandBinding> is called."},{"content":"These handlers supply the programming logic that performs the <ph id=\"ph1\">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph>.","pos":[714,818],"source":"  These handlers supply the programming logic that performs the <xref:System.Windows.Input.RoutedCommand>."}]}]},{"pos":[825,1332],"content":"The <xref:System.Windows.Input.CommandManager.PreviewExecuted> and <xref:System.Windows.Input.CommandManager.Executed> events are raised on the <xref:System.Windows.Input.ICommandSource.CommandTarget%2A>.  If the <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> is not set on the <xref:System.Windows.Input.ICommandSource>, the <xref:System.Windows.Input.CommandManager.PreviewExecuted> and <xref:System.Windows.Input.CommandManager.Executed> events are raised on the element with keyboard focus.","nodes":[{"content":"The <xref:System.Windows.Input.CommandManager.PreviewExecuted> and <xref:System.Windows.Input.CommandManager.Executed> events are raised on the <xref:System.Windows.Input.ICommandSource.CommandTarget%2A>.  If the <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> is not set on the <xref:System.Windows.Input.ICommandSource>, the <xref:System.Windows.Input.CommandManager.PreviewExecuted> and <xref:System.Windows.Input.CommandManager.Executed> events are raised on the element with keyboard focus.","pos":[0,507],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Input.CommandManager.PreviewExecuted&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Windows.Input.CommandManager.Executed&gt;</ph> events are raised on the <ph id=\"ph3\">&lt;xref:System.Windows.Input.ICommandSource.CommandTarget%2A&gt;</ph>.","pos":[0,204],"source":"The <xref:System.Windows.Input.CommandManager.PreviewExecuted> and <xref:System.Windows.Input.CommandManager.Executed> events are raised on the <xref:System.Windows.Input.ICommandSource.CommandTarget%2A>."},{"content":"If the <ph id=\"ph1\">&lt;xref:System.Windows.Input.ICommandSource.CommandTarget%2A&gt;</ph> is not set on the <ph id=\"ph2\">&lt;xref:System.Windows.Input.ICommandSource&gt;</ph>, the <ph id=\"ph3\">&lt;xref:System.Windows.Input.CommandManager.PreviewExecuted&gt;</ph> and <ph id=\"ph4\">&lt;xref:System.Windows.Input.CommandManager.Executed&gt;</ph> events are raised on the element with keyboard focus.","pos":[206,507],"source":"  If the <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> is not set on the <xref:System.Windows.Input.ICommandSource>, the <xref:System.Windows.Input.CommandManager.PreviewExecuted> and <xref:System.Windows.Input.CommandManager.Executed> events are raised on the element with keyboard focus."}]}]}],"pos":[19967,21304],"yaml":true,"extradata":"MT"},{"content":"User defined parameter to be passed to the handler.","nodes":[{"pos":[0,51],"content":"User defined parameter to be passed to the handler.","nodes":[{"content":"User defined parameter to be passed to the handler.","pos":[0,51]}]}],"pos":[22799,22851],"yaml":true},{"content":"Element at which to begin looking for command handlers.","nodes":[{"pos":[0,55],"content":"Element at which to begin looking for command handlers.","nodes":[{"content":"Element at which to begin looking for command handlers.","pos":[0,55]}]}],"pos":[22928,22984],"yaml":true},{"content":"<code>target</code> is not a <xref href=\"System.Windows.UIElement\"></xref> or <xref href=\"System.Windows.ContentElement\"></xref>.","nodes":[{"pos":[0,129],"content":"<ph id=\"ph1\">&lt;code&gt;target&lt;/code&gt;</ph> is not a <ph id=\"ph2\">&lt;xref href=\"System.Windows.UIElement\"&gt;&lt;/xref&gt;</ph> or <ph id=\"ph3\">&lt;xref href=\"System.Windows.ContentElement\"&gt;&lt;/xref&gt;</ph>.","source":"<code>target</code> is not a <xref href=\"System.Windows.UIElement\"></xref> or <xref href=\"System.Windows.ContentElement\"></xref>."}],"pos":[23164,23294],"yaml":true},{"content":"Gets the collection of <xref href=\"System.Windows.Input.InputGesture\"></xref> objects that are associated with this command.","nodes":[{"pos":[0,124],"content":"Gets the collection of <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.InputGesture\"&gt;&lt;/xref&gt;</ph> objects that are associated with this command.","source":"Gets the collection of <xref href=\"System.Windows.Input.InputGesture\"></xref> objects that are associated with this command."}],"pos":[24297,24422],"yaml":true},{"content":"The input gestures.","nodes":[{"pos":[0,19],"content":"The input gestures.","nodes":[{"content":"The input gestures.","pos":[0,19]}]}],"pos":[25143,25163],"yaml":true},{"content":"Gets the name of the command.","nodes":[{"pos":[0,29],"content":"Gets the name of the command.","nodes":[{"content":"Gets the name of the command.","pos":[0,29]}]}],"pos":[26125,26155],"yaml":true},{"content":"This property can be used when referencing a <xref:System.Windows.Input.RoutedCommand> in [!INCLUDE[TLA#tla_titlexaml](~/includes/tlasharptla-titlexaml-md.md)].","nodes":[{"pos":[0,160],"content":"This property can be used when referencing a <ph id=\"ph1\">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph> in <ph id=\"ph2\">[!INCLUDE[TLA#tla_titlexaml](~/includes/tlasharptla-titlexaml-md.md)]</ph>.","source":"This property can be used when referencing a <xref:System.Windows.Input.RoutedCommand> in [!INCLUDE[TLA#tla_titlexaml](~/includes/tlasharptla-titlexaml-md.md)]."}],"pos":[26166,26327],"yaml":true,"extradata":"MT"},{"content":"The name of the command.","nodes":[{"pos":[0,24],"content":"The name of the command.","nodes":[{"content":"The name of the command.","pos":[0,24]}]}],"pos":[26435,26460],"yaml":true},{"content":"Gets the type that is registered with the command.","nodes":[{"pos":[0,50],"content":"Gets the type that is registered with the command.","nodes":[{"content":"Gets the type that is registered with the command.","pos":[0,50]}]}],"pos":[27443,27494],"yaml":true},{"content":"The type of the command owner.","nodes":[{"pos":[0,30],"content":"The type of the command owner.","nodes":[{"content":"The type of the command owner.","pos":[0,30]}]}],"pos":[27603,27634],"yaml":true},{"content":"For a description of this members, see <xref href=\"System.Windows.Input.ICommand.CanExecute(System.Object)\"></xref>.","nodes":[{"pos":[0,116],"content":"For a description of this members, see <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.ICommand.CanExecute(System.Object)\"&gt;&lt;/xref&gt;</ph>.","source":"For a description of this members, see <xref href=\"System.Windows.Input.ICommand.CanExecute(System.Object)\"></xref>."}],"pos":[28826,28943],"yaml":true},{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Windows.Input.RoutedCommand> instance is cast to an <xref:System.Windows.Input.ICommand> interface.","nodes":[{"pos":[0,201],"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Windows.Input.RoutedCommand> instance is cast to an <xref:System.Windows.Input.ICommand> interface.","nodes":[{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Windows.Input.RoutedCommand> instance is cast to an <xref:System.Windows.Input.ICommand> interface.","pos":[0,201],"nodes":[{"content":"This member is an explicit interface member implementation.","pos":[0,59]},{"content":"It can be used only when the <ph id=\"ph1\">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph> instance is cast to an <ph id=\"ph2\">&lt;xref:System.Windows.Input.ICommand&gt;</ph> interface.","pos":[60,201],"source":" It can be used only when the <xref:System.Windows.Input.RoutedCommand> instance is cast to an <xref:System.Windows.Input.ICommand> interface."}]}]}],"pos":[28954,29156],"yaml":true,"extradata":"MT"},{"content":"Data used by the command.  If the command does not require data to be passed, this object can be set to `null`.","nodes":[{"pos":[0,111],"content":"Data used by the command.  If the command does not require data to be passed, this object can be set to `null`.","nodes":[{"content":"Data used by the command.","pos":[0,25]},{"content":"If the command does not require data to be passed, this object can be set to <ph id=\"ph1\">`null`</ph>.","pos":[27,111],"source":"  If the command does not require data to be passed, this object can be set to `null`."}]}],"pos":[29356,29468],"yaml":true},{"content":"`true` if this command can be executed; otherwise, `false`.","nodes":[{"pos":[0,59],"content":"<ph id=\"ph1\">`true`</ph> if this command can be executed; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if this command can be executed; otherwise, `false`."}],"pos":[29526,29588],"yaml":true},{"content":"For a description of this members, see <xref href=\"System.Windows.Input.ICommand.Execute(System.Object)\"></xref>.","nodes":[{"pos":[0,113],"content":"For a description of this members, see <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.ICommand.Execute(System.Object)\"&gt;&lt;/xref&gt;</ph>.","source":"For a description of this members, see <xref href=\"System.Windows.Input.ICommand.Execute(System.Object)\"></xref>."}],"pos":[30859,30973],"yaml":true},{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Windows.Input.RoutedCommand> instance is cast to an <xref:System.Windows.Input.ICommand> interface.","nodes":[{"pos":[0,201],"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Windows.Input.RoutedCommand> instance is cast to an <xref:System.Windows.Input.ICommand> interface.","nodes":[{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Windows.Input.RoutedCommand> instance is cast to an <xref:System.Windows.Input.ICommand> interface.","pos":[0,201],"nodes":[{"content":"This member is an explicit interface member implementation.","pos":[0,59]},{"content":"It can be used only when the <ph id=\"ph1\">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph> instance is cast to an <ph id=\"ph2\">&lt;xref:System.Windows.Input.ICommand&gt;</ph> interface.","pos":[60,201],"source":" It can be used only when the <xref:System.Windows.Input.RoutedCommand> instance is cast to an <xref:System.Windows.Input.ICommand> interface."}]}]}],"pos":[30984,31186],"yaml":true,"extradata":"MT"},{"content":"Data used by the command.  If the command does not require data to be passed, this object can be set to `null`.","nodes":[{"pos":[0,111],"content":"Data used by the command.  If the command does not require data to be passed, this object can be set to `null`.","nodes":[{"content":"Data used by the command.","pos":[0,25]},{"content":"If the command does not require data to be passed, this object can be set to <ph id=\"ph1\">`null`</ph>.","pos":[27,111],"source":"  If the command does not require data to be passed, this object can be set to `null`."}]}],"pos":[31419,31531],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Windows.Input.RoutedCommand\n  commentId: T:System.Windows.Input.RoutedCommand\n  id: RoutedCommand\n  children:\n  - System.Windows.Input.RoutedCommand.#ctor\n  - System.Windows.Input.RoutedCommand.#ctor(System.String,System.Type)\n  - System.Windows.Input.RoutedCommand.#ctor(System.String,System.Type,System.Windows.Input.InputGestureCollection)\n  - System.Windows.Input.RoutedCommand.CanExecute(System.Object,System.Windows.IInputElement)\n  - System.Windows.Input.RoutedCommand.CanExecuteChanged\n  - System.Windows.Input.RoutedCommand.Execute(System.Object,System.Windows.IInputElement)\n  - System.Windows.Input.RoutedCommand.InputGestures\n  - System.Windows.Input.RoutedCommand.Name\n  - System.Windows.Input.RoutedCommand.OwnerType\n  - System.Windows.Input.RoutedCommand.System#Windows#Input#ICommand#CanExecute(System.Object)\n  - System.Windows.Input.RoutedCommand.System#Windows#Input#ICommand#Execute(System.Object)\n  langs:\n  - csharp\n  name: RoutedCommand\n  nameWithType: RoutedCommand\n  fullName: System.Windows.Input.RoutedCommand\n  type: Class\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Defines a command that implements <xref href=\"System.Windows.Input.ICommand\"></xref> and is routed through the element tree.\n  remarks: \"The <xref:System.Windows.Input.RoutedCommand.Execute%2A> and <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> methods on a <xref:System.Windows.Input.RoutedCommand> do not contain the application logic for the command as is the case with a typical <xref:System.Windows.Input.ICommand>, but rather, these methods raise events that traverse the element tree looking for an object with a <xref:System.Windows.Input.CommandBinding>.  The event handlers attached to the <xref:System.Windows.Input.CommandBinding> contain the command logic.  \\n  \\n The <xref:System.Windows.Input.RoutedCommand.Execute%2A> method raises the <xref:System.Windows.Input.CommandManager.PreviewExecuted> and <xref:System.Windows.Input.CommandManager.Executed> events.  The <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method raises the <xref:System.Windows.Input.CommandManager.PreviewCanExecute> and <xref:System.Windows.Input.CommandManager.CanExecute> events.  \\n  \\n<a name=\\\"xamlAttributeUsage_RoutedCommand\\\"></a>   \\n## XAML Attribute Usage  \\n \\\\<*object* *property*=\\\"*predefinedCommandName*\\\"/>  \\n  \\n \\\\- or -  \\n  \\n \\\\<*object* *property*=\\\"*predefinedClassName*.*predefinedCommandName*\\\"/>  \\n  \\n \\\\- or -  \\n  \\n \\\\<*object* *property*=\\\"{ *customClassName*.*customCommandName*}\\\"/>  \\n  \\n<a name=\\\"xamlValues_RoutedCommand\\\"></a>   \\n## XAML Values  \\n *predefinedClassName*  \\n One of the predefined command classes.  \\n  \\n *predefinedCommandName*  \\n One of the predefined commands.  \\n  \\n *customClassName*  \\n A custom class which contains the custom command. Custom classes generally require an `xlmns` prefix mapping; see [XAML Namespaces and Namespace Mapping for WPF XAML](~/docs/framework/wpf/advanced/xaml-namespaces-and-namespace-mapping-for-wpf-xaml.md).  \\n  \\n *customCommandName*  \\n A custom command.\"\n  syntax:\n    content: >-\n      [System.ComponentModel.TypeConverter(\"System.Windows.Input.CommandConverter, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null\")]\n\n      public class RoutedCommand : System.Windows.Input.ICommand\n  inheritance:\n  - System.Object\n  derivedClasses:\n  - System.Windows.Input.RoutedUICommand\n  implements:\n  - System.Windows.Input.ICommand\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  attributes:\n  - type: System.ComponentModel.TypeConverterAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/RoutedCommand.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Input.RoutedCommand.#ctor\n  commentId: M:System.Windows.Input.RoutedCommand.#ctor\n  id: '#ctor'\n  parent: System.Windows.Input.RoutedCommand\n  langs:\n  - csharp\n  name: RoutedCommand()\n  nameWithType: RoutedCommand.RoutedCommand()\n  fullName: RoutedCommand.RoutedCommand()\n  type: Constructor\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Initializes a new instance of the <xref href=\"System.Windows.Input.RoutedCommand\"></xref> class.\n  syntax:\n    content: public RoutedCommand ();\n    parameters: []\n  overload: System.Windows.Input.RoutedCommand.#ctor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/RoutedCommand.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Input.RoutedCommand.#ctor(System.String,System.Type)\n  commentId: M:System.Windows.Input.RoutedCommand.#ctor(System.String,System.Type)\n  id: '#ctor(System.String,System.Type)'\n  parent: System.Windows.Input.RoutedCommand\n  langs:\n  - csharp\n  name: RoutedCommand(String, Type)\n  nameWithType: RoutedCommand.RoutedCommand(String, Type)\n  fullName: RoutedCommand.RoutedCommand(String, Type)\n  type: Constructor\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Initializes a new instance of the <xref href=\"System.Windows.Input.RoutedCommand\"></xref> class with the specified name and owner type.\n  syntax:\n    content: public RoutedCommand (string name, Type ownerType);\n    parameters:\n    - id: name\n      type: System.String\n      description: Declared name for serialization.\n    - id: ownerType\n      type: System.Type\n      description: The type which is registering the command.\n  overload: System.Windows.Input.RoutedCommand.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>name</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>ownerType</code> is `null`.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/RoutedCommand.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Input.RoutedCommand.#ctor(System.String,System.Type,System.Windows.Input.InputGestureCollection)\n  commentId: M:System.Windows.Input.RoutedCommand.#ctor(System.String,System.Type,System.Windows.Input.InputGestureCollection)\n  id: '#ctor(System.String,System.Type,System.Windows.Input.InputGestureCollection)'\n  parent: System.Windows.Input.RoutedCommand\n  langs:\n  - csharp\n  name: RoutedCommand(String, Type, InputGestureCollection)\n  nameWithType: RoutedCommand.RoutedCommand(String, Type, InputGestureCollection)\n  fullName: RoutedCommand.RoutedCommand(String, Type, InputGestureCollection)\n  type: Constructor\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Initializes a new instance of the <xref href=\"System.Windows.Input.RoutedCommand\"></xref> class with the specified name, owner type, and collection of gestures.\n  syntax:\n    content: public RoutedCommand (string name, Type ownerType, System.Windows.Input.InputGestureCollection inputGestures);\n    parameters:\n    - id: name\n      type: System.String\n      description: Declared name for serialization.\n    - id: ownerType\n      type: System.Type\n      description: The type that is registering the command.\n    - id: inputGestures\n      type: System.Windows.Input.InputGestureCollection\n      description: Default input gestures associated with this command.\n  overload: System.Windows.Input.RoutedCommand.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>name</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"the length of <code>name</code> is zero  \\n  \\n \\\\- or -  \\n  \\n <code>ownerType</code> is `null`.\"\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/RoutedCommand.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.Input.RoutedCommand.CanExecute(System.Object,System.Windows.IInputElement)\n  commentId: M:System.Windows.Input.RoutedCommand.CanExecute(System.Object,System.Windows.IInputElement)\n  id: CanExecute(System.Object,System.Windows.IInputElement)\n  parent: System.Windows.Input.RoutedCommand\n  langs:\n  - csharp\n  name: CanExecute(Object, IInputElement)\n  nameWithType: RoutedCommand.CanExecute(Object, IInputElement)\n  fullName: RoutedCommand.CanExecute(Object, IInputElement)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Determines whether this <xref href=\"System.Windows.Input.RoutedCommand\"></xref> can execute in its current state.\n  remarks: \"The actual logic that determines if a <xref:System.Windows.Input.RoutedCommand> can execute on the current command target is not contained in the <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> methods, rather <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> raises the <xref:System.Windows.Input.CommandManager.PreviewCanExecute> and the <xref:System.Windows.Input.CommandManager.CanExecute> events which tunnel and bubble through element tree looking for a object with a <xref:System.Windows.Input.CommandBinding>.  If a <xref:System.Windows.Input.CommandBinding> for that <xref:System.Windows.Input.RoutedCommand> is found, then the <xref:System.Windows.Input.CanExecuteRoutedEventHandler> attached to <xref:System.Windows.Input.CommandBinding> is called.  These handlers supply the programming logic for determining if the <xref:System.Windows.Input.RoutedCommand> can execute or not.  \\n  \\n The <xref:System.Windows.Input.CommandManager.PreviewCanExecute> and <xref:System.Windows.Input.CommandManager.PreviewExecuted> events are raised on the <xref:System.Windows.Input.ICommandSource.CommandTarget%2A>.  If the <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> is not set on the <xref:System.Windows.Input.ICommandSource>, the <xref:System.Windows.Input.CommandManager.PreviewCanExecute> and <xref:System.Windows.Input.CommandManager.CanExecute> events are raised on the element with keyboard focus.\"\n  example:\n  - \"The following example is a <xref:System.Windows.Input.ICommand.CanExecuteChanged> event handler from a custom implementation of <xref:System.Windows.Input.ICommandSource>.  \\n  \\n `this.Command` in this example is the <xref:System.Windows.Input.ICommandSource.Command%2A> property on the <xref:System.Windows.Input.ICommandSource>.  If the command is not `null`, the command is cast to a <xref:System.Windows.Input.RoutedCommand>.  If the command is a <xref:System.Windows.Input.RoutedCommand>, then the <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method is called passing the <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> and the <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.  If command is not a <xref:System.Windows.Input.RoutedCommand>, it is cast to an <xref:System.Windows.Input.ICommand> and the <xref:System.Windows.Input.ICommand.CanExecute%2A> method is called passing the <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.  \\n  \\n If the <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method returns `true`, then the control is enabled; otherwise, the control is disable.  \\n  \\n [!code-csharp[ImplementICommandSource#ImplementICommandCanExecuteChanged](~/samples/snippets/csharp/VS_Snippets_Wpf/ImplementICommandSource/CSharp/CommandSlider.cs#implementicommandcanexecutechanged)]\\n [!code-vb[ImplementICommandSource#ImplementICommandCanExecuteChanged](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ImplementICommandSource/visualbasic/commandslider.vb#implementicommandcanexecutechanged)]\"\n  syntax:\n    content: >-\n      [System.Security.SecurityCritical]\n\n      public bool CanExecute (object parameter, System.Windows.IInputElement target);\n    parameters:\n    - id: parameter\n      type: System.Object\n      description: A user defined data type.\n    - id: target\n      type: System.Windows.IInputElement\n      description: The command target.\n    return:\n      type: System.Boolean\n      description: '`true` if the command can execute on the current command target; otherwise, `false`.'\n  overload: System.Windows.Input.RoutedCommand.CanExecute*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <code>target</code> is not a <xref href=\"System.Windows.UIElement\"></xref> or <xref href=\"System.Windows.ContentElement\"></xref>.\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/RoutedCommand.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Input.RoutedCommand.CanExecuteChanged\n  commentId: E:System.Windows.Input.RoutedCommand.CanExecuteChanged\n  id: CanExecuteChanged\n  parent: System.Windows.Input.RoutedCommand\n  langs:\n  - csharp\n  name: CanExecuteChanged\n  nameWithType: RoutedCommand.CanExecuteChanged\n  fullName: RoutedCommand.CanExecuteChanged\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Occurs when changes to the command source are detected by the command manager. These changes often affect whether the command should execute on the current command target.\n  remarks: \"The <xref:System.Windows.Input.RoutedCommand> listens for the <xref:System.Windows.Input.CommandManager.RequerySuggested> event, which is raised by the <xref:System.Windows.Input.CommandManager>. The <xref:System.Windows.Input.CommandManager.RequerySuggested> event is raised whenever conditions are met that may change the whether the command should execute, such as a change in keyboard focus.  When the command receives the <xref:System.Windows.Input.CommandManager.RequerySuggested> event, it raises the <xref:System.Windows.Input.RoutedCommand.CanExecuteChanged> event.  Generally, the command source will listen for this event and query the <xref:System.Windows.Input.RoutedCommand> by way of the <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method.  Most command sources will disable themselves if the command cannot be executed, as part of their command binding.  An example of this is when a <xref:System.Windows.Controls.MenuItem> grays itself out when the command cannot be executed.  \\n  \\n In some situations, the <xref:System.Windows.Input.CommandManager> is unaware of a change in conditions that alters the ability of a command to execute.  In these cases, you can force the <xref:System.Windows.Input.CommandManager> to raises the <xref:System.Windows.Input.CommandManager.RequerySuggested> event by calling the <xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A> method, this will in turn cause the <xref:System.Windows.Input.RoutedCommand> to raise the <xref:System.Windows.Input.RoutedCommand.CanExecuteChanged> event.\"\n  example:\n  - \"The following example is a <xref:System.Windows.Input.ICommand.CanExecuteChanged> event handler from a custom implementation of <xref:System.Windows.Input.ICommandSource>.  \\n  \\n `this.Command` in this example is the <xref:System.Windows.Input.ICommandSource.Command%2A> property on the <xref:System.Windows.Input.ICommandSource>.  If the command is not `null`, the command is cast to a <xref:System.Windows.Input.RoutedCommand>.  If the command is a <xref:System.Windows.Input.RoutedCommand>, then the <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method is called passing the <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> and the <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.  If command is not a <xref:System.Windows.Input.RoutedCommand>, it is cast to an <xref:System.Windows.Input.ICommand> and the <xref:System.Windows.Input.ICommand.CanExecute%2A> method is called passing the <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.  \\n  \\n If the <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method returns `true`, then the control is enabled; otherwise, the control is disabled.  \\n  \\n [!code-csharp[ImplementICommandSource#ImplementICommandCanExecuteChanged](~/samples/snippets/csharp/VS_Snippets_Wpf/ImplementICommandSource/CSharp/CommandSlider.cs#implementicommandcanexecutechanged)]\\n [!code-vb[ImplementICommandSource#ImplementICommandCanExecuteChanged](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ImplementICommandSource/visualbasic/commandslider.vb#implementicommandcanexecutechanged)]\"\n  syntax:\n    content: public event EventHandler CanExecuteChanged;\n    return:\n      type: System.EventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/RoutedCommand.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Input.RoutedCommand.Execute(System.Object,System.Windows.IInputElement)\n  commentId: M:System.Windows.Input.RoutedCommand.Execute(System.Object,System.Windows.IInputElement)\n  id: Execute(System.Object,System.Windows.IInputElement)\n  parent: System.Windows.Input.RoutedCommand\n  langs:\n  - csharp\n  name: Execute(Object, IInputElement)\n  nameWithType: RoutedCommand.Execute(Object, IInputElement)\n  fullName: RoutedCommand.Execute(Object, IInputElement)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Executes the <xref href=\"System.Windows.Input.RoutedCommand\"></xref> on the current command target.\n  remarks: \"The actual logic that executes the <xref:System.Windows.Input.RoutedCommand> is not contained in the <xref:System.Windows.Input.RoutedCommand.Execute%2A> methods.  <xref:System.Windows.Input.RoutedCommand.Execute%2A> raises the <xref:System.Windows.Input.CommandManager.PreviewExecuted> and <xref:System.Windows.Input.CommandManager.Executed> events, which tunnel and bubble through the element tree looking for an object with a <xref:System.Windows.Input.CommandBinding>.  If a <xref:System.Windows.Input.CommandBinding> for that <xref:System.Windows.Input.RoutedCommand> is found, then the <xref:System.Windows.Input.ExecutedRoutedEventHandler> attached to <xref:System.Windows.Input.CommandBinding> is called.  These handlers supply the programming logic that performs the <xref:System.Windows.Input.RoutedCommand>.  \\n  \\n The <xref:System.Windows.Input.CommandManager.PreviewExecuted> and <xref:System.Windows.Input.CommandManager.Executed> events are raised on the <xref:System.Windows.Input.ICommandSource.CommandTarget%2A>.  If the <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> is not set on the <xref:System.Windows.Input.ICommandSource>, the <xref:System.Windows.Input.CommandManager.PreviewExecuted> and <xref:System.Windows.Input.CommandManager.Executed> events are raised on the element with keyboard focus.\"\n  example:\n  - \"The following example is from a custom implementation of <xref:System.Windows.Input.ICommandSource> sample.  \\n  \\n `this.Command` in this example is the Command property on the <xref:System.Windows.Input.ICommandSource>.  If the command is not null, the command is cast to a <xref:System.Windows.Input.RoutedCommand>.  If it is a <xref:System.Windows.Input.RoutedCommand>, then the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is called passing the <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> and the <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.  If the command is not a <xref:System.Windows.Input.RoutedCommand>, it is cast to an <xref:System.Windows.Input.ICommand> and the <xref:System.Windows.Input.ICommand.Execute%2A> method is called passing the <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.  \\n  \\n [!code-csharp[ImplementICommandSource#ImplementICommandExecute](~/samples/snippets/csharp/VS_Snippets_Wpf/ImplementICommandSource/CSharp/CommandSlider.cs#implementicommandexecute)]\\n [!code-vb[ImplementICommandSource#ImplementICommandExecute](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ImplementICommandSource/visualbasic/commandslider.vb#implementicommandexecute)]\"\n  syntax:\n    content: >-\n      [System.Security.SecurityCritical]\n\n      public void Execute (object parameter, System.Windows.IInputElement target);\n    parameters:\n    - id: parameter\n      type: System.Object\n      description: User defined parameter to be passed to the handler.\n    - id: target\n      type: System.Windows.IInputElement\n      description: Element at which to begin looking for command handlers.\n  overload: System.Windows.Input.RoutedCommand.Execute*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <code>target</code> is not a <xref href=\"System.Windows.UIElement\"></xref> or <xref href=\"System.Windows.ContentElement\"></xref>.\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/RoutedCommand.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Input.RoutedCommand.InputGestures\n  commentId: P:System.Windows.Input.RoutedCommand.InputGestures\n  id: InputGestures\n  parent: System.Windows.Input.RoutedCommand\n  langs:\n  - csharp\n  name: InputGestures\n  nameWithType: RoutedCommand.InputGestures\n  fullName: RoutedCommand.InputGestures\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Gets the collection of <xref href=\"System.Windows.Input.InputGesture\"></xref> objects that are associated with this command.\n  remarks: ''\n  example:\n  - \"The following example shows how to add a new <xref:System.Windows.Input.MouseGesture> to a <xref:System.Windows.Input.RoutedCommand>.  \\n  \\n [!code-csharp[commandlibrarysnippets#MouseBindingAddedCommand](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandLibrarySnippets/CSharp/Window1.xaml.cs#mousebindingaddedcommand)]\\n [!code-vb[commandlibrarysnippets#MouseBindingAddedCommand](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandLibrarySnippets/visualbasic/window1.xaml.vb#mousebindingaddedcommand)]\"\n  syntax:\n    content: public System.Windows.Input.InputGestureCollection InputGestures { get; }\n    return:\n      type: System.Windows.Input.InputGestureCollection\n      description: The input gestures.\n  overload: System.Windows.Input.RoutedCommand.InputGestures*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/RoutedCommand.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Input.RoutedCommand.Name\n  commentId: P:System.Windows.Input.RoutedCommand.Name\n  id: Name\n  parent: System.Windows.Input.RoutedCommand\n  langs:\n  - csharp\n  name: Name\n  nameWithType: RoutedCommand.Name\n  fullName: RoutedCommand.Name\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Gets the name of the command.\n  remarks: This property can be used when referencing a <xref:System.Windows.Input.RoutedCommand> in [!INCLUDE[TLA#tla_titlexaml](~/includes/tlasharptla-titlexaml-md.md)].\n  syntax:\n    content: public string Name { get; }\n    return:\n      type: System.String\n      description: The name of the command.\n  overload: System.Windows.Input.RoutedCommand.Name*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/RoutedCommand.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Input.RoutedCommand.OwnerType\n  commentId: P:System.Windows.Input.RoutedCommand.OwnerType\n  id: OwnerType\n  parent: System.Windows.Input.RoutedCommand\n  langs:\n  - csharp\n  name: OwnerType\n  nameWithType: RoutedCommand.OwnerType\n  fullName: RoutedCommand.OwnerType\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Gets the type that is registered with the command.\n  syntax:\n    content: public Type OwnerType { get; }\n    return:\n      type: System.Type\n      description: The type of the command owner.\n  overload: System.Windows.Input.RoutedCommand.OwnerType*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/RoutedCommand.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Input.RoutedCommand.System#Windows#Input#ICommand#CanExecute(System.Object)\n  commentId: M:System.Windows.Input.RoutedCommand.System#Windows#Input#ICommand#CanExecute(System.Object)\n  id: System#Windows#Input#ICommand#CanExecute(System.Object)\n  isEii: true\n  parent: System.Windows.Input.RoutedCommand\n  langs:\n  - csharp\n  name: ICommand.CanExecute(Object)\n  nameWithType: RoutedCommand.ICommand.CanExecute(Object)\n  fullName: RoutedCommand.ICommand.CanExecute(Object)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: For a description of this members, see <xref href=\"System.Windows.Input.ICommand.CanExecute(System.Object)\"></xref>.\n  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Windows.Input.RoutedCommand> instance is cast to an <xref:System.Windows.Input.ICommand> interface.\n  syntax:\n    content: >-\n      [System.Security.SecurityCritical]\n\n      bool ICommand.CanExecute (object parameter);\n    parameters:\n    - id: parameter\n      type: System.Object\n      description: Data used by the command.  If the command does not require data to be passed, this object can be set to `null`.\n    return:\n      type: System.Boolean\n      description: '`true` if this command can be executed; otherwise, `false`.'\n  overload: System.Windows.Input.RoutedCommand.System#Windows#Input#ICommand#CanExecute*\n  exceptions: []\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/RoutedCommand.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Input.RoutedCommand.System#Windows#Input#ICommand#Execute(System.Object)\n  commentId: M:System.Windows.Input.RoutedCommand.System#Windows#Input#ICommand#Execute(System.Object)\n  id: System#Windows#Input#ICommand#Execute(System.Object)\n  isEii: true\n  parent: System.Windows.Input.RoutedCommand\n  langs:\n  - csharp\n  name: ICommand.Execute(Object)\n  nameWithType: RoutedCommand.ICommand.Execute(Object)\n  fullName: RoutedCommand.ICommand.Execute(Object)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: For a description of this members, see <xref href=\"System.Windows.Input.ICommand.Execute(System.Object)\"></xref>.\n  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Windows.Input.RoutedCommand> instance is cast to an <xref:System.Windows.Input.ICommand> interface.\n  example:\n  - \"See Also  \\n  \\n <xref:System.Windows.Input.RoutedCommand.Execute%2A>\"\n  syntax:\n    content: void ICommand.Execute (object parameter);\n    parameters:\n    - id: parameter\n      type: System.Object\n      description: Data used by the command.  If the command does not require data to be passed, this object can be set to `null`.\n  overload: System.Windows.Input.RoutedCommand.System#Windows#Input#ICommand#Execute*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/RoutedCommand.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  nameWithType: InvalidOperationException\n  fullName: System.InvalidOperationException\n- uid: System.Windows.Input.RoutedCommand.#ctor\n  parent: System.Windows.Input.RoutedCommand\n  isExternal: false\n  name: RoutedCommand()\n  nameWithType: RoutedCommand.RoutedCommand()\n  fullName: RoutedCommand.RoutedCommand()\n- uid: System.Windows.Input.RoutedCommand.#ctor(System.String,System.Type)\n  parent: System.Windows.Input.RoutedCommand\n  isExternal: false\n  name: RoutedCommand(String, Type)\n  nameWithType: RoutedCommand.RoutedCommand(String, Type)\n  fullName: RoutedCommand.RoutedCommand(String, Type)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Windows.Input.RoutedCommand.#ctor(System.String,System.Type,System.Windows.Input.InputGestureCollection)\n  parent: System.Windows.Input.RoutedCommand\n  isExternal: false\n  name: RoutedCommand(String, Type, InputGestureCollection)\n  nameWithType: RoutedCommand.RoutedCommand(String, Type, InputGestureCollection)\n  fullName: RoutedCommand.RoutedCommand(String, Type, InputGestureCollection)\n- uid: System.Windows.Input.InputGestureCollection\n  parent: System.Windows.Input\n  isExternal: false\n  name: InputGestureCollection\n  nameWithType: InputGestureCollection\n  fullName: System.Windows.Input.InputGestureCollection\n- uid: System.Windows.Input.RoutedCommand.CanExecute(System.Object,System.Windows.IInputElement)\n  parent: System.Windows.Input.RoutedCommand\n  isExternal: false\n  name: CanExecute(Object, IInputElement)\n  nameWithType: RoutedCommand.CanExecute(Object, IInputElement)\n  fullName: RoutedCommand.CanExecute(Object, IInputElement)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Windows.IInputElement\n  parent: System.Windows\n  isExternal: false\n  name: IInputElement\n  nameWithType: IInputElement\n  fullName: System.Windows.IInputElement\n- uid: System.Windows.Input.RoutedCommand.CanExecuteChanged\n  parent: System.Windows.Input.RoutedCommand\n  isExternal: false\n  name: CanExecuteChanged\n  nameWithType: RoutedCommand.CanExecuteChanged\n  fullName: RoutedCommand.CanExecuteChanged\n- uid: System.EventHandler\n  parent: System\n  isExternal: false\n  name: EventHandler\n  nameWithType: EventHandler\n  fullName: System.EventHandler\n- uid: System.Windows.Input.RoutedCommand.Execute(System.Object,System.Windows.IInputElement)\n  parent: System.Windows.Input.RoutedCommand\n  isExternal: false\n  name: Execute(Object, IInputElement)\n  nameWithType: RoutedCommand.Execute(Object, IInputElement)\n  fullName: RoutedCommand.Execute(Object, IInputElement)\n- uid: System.Windows.Input.RoutedCommand.InputGestures\n  parent: System.Windows.Input.RoutedCommand\n  isExternal: false\n  name: InputGestures\n  nameWithType: RoutedCommand.InputGestures\n  fullName: RoutedCommand.InputGestures\n- uid: System.Windows.Input.RoutedCommand.Name\n  parent: System.Windows.Input.RoutedCommand\n  isExternal: false\n  name: Name\n  nameWithType: RoutedCommand.Name\n  fullName: RoutedCommand.Name\n- uid: System.Windows.Input.RoutedCommand.OwnerType\n  parent: System.Windows.Input.RoutedCommand\n  isExternal: false\n  name: OwnerType\n  nameWithType: RoutedCommand.OwnerType\n  fullName: RoutedCommand.OwnerType\n- uid: System.Windows.Input.RoutedCommand.System#Windows#Input#ICommand#CanExecute(System.Object)\n  parent: System.Windows.Input.RoutedCommand\n  isExternal: false\n  name: ICommand.CanExecute(Object)\n  nameWithType: RoutedCommand.ICommand.CanExecute(Object)\n  fullName: RoutedCommand.ICommand.CanExecute(Object)\n- uid: System.Windows.Input.RoutedCommand.System#Windows#Input#ICommand#Execute(System.Object)\n  parent: System.Windows.Input.RoutedCommand\n  isExternal: false\n  name: ICommand.Execute(Object)\n  nameWithType: RoutedCommand.ICommand.Execute(Object)\n  fullName: RoutedCommand.ICommand.Execute(Object)\n- uid: System.Windows.Input.RoutedCommand.#ctor*\n  parent: System.Windows.Input.RoutedCommand\n  isExternal: false\n  name: RoutedCommand\n  nameWithType: RoutedCommand.RoutedCommand\n  fullName: RoutedCommand.RoutedCommand\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/RoutedCommand.xml\n- uid: System.Windows.Input.RoutedCommand.CanExecute*\n  parent: System.Windows.Input.RoutedCommand\n  isExternal: false\n  name: CanExecute\n  nameWithType: RoutedCommand.CanExecute\n  fullName: RoutedCommand.CanExecute\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/RoutedCommand.xml\n- uid: System.Windows.Input.RoutedCommand.Execute*\n  parent: System.Windows.Input.RoutedCommand\n  isExternal: false\n  name: Execute\n  nameWithType: RoutedCommand.Execute\n  fullName: RoutedCommand.Execute\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/RoutedCommand.xml\n- uid: System.Windows.Input.RoutedCommand.InputGestures*\n  parent: System.Windows.Input.RoutedCommand\n  isExternal: false\n  name: InputGestures\n  nameWithType: RoutedCommand.InputGestures\n  fullName: RoutedCommand.InputGestures\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/RoutedCommand.xml\n- uid: System.Windows.Input.RoutedCommand.Name*\n  parent: System.Windows.Input.RoutedCommand\n  isExternal: false\n  name: Name\n  nameWithType: RoutedCommand.Name\n  fullName: RoutedCommand.Name\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/RoutedCommand.xml\n- uid: System.Windows.Input.RoutedCommand.OwnerType*\n  parent: System.Windows.Input.RoutedCommand\n  isExternal: false\n  name: OwnerType\n  nameWithType: RoutedCommand.OwnerType\n  fullName: RoutedCommand.OwnerType\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/RoutedCommand.xml\n- uid: System.Windows.Input.RoutedCommand.System#Windows#Input#ICommand#CanExecute*\n  parent: System.Windows.Input.RoutedCommand\n  isExternal: false\n  name: System.Windows.Input.ICommand.CanExecute\n  nameWithType: RoutedCommand.System.Windows.Input.ICommand.CanExecute\n  fullName: RoutedCommand.System.Windows.Input.ICommand.CanExecute\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/RoutedCommand.xml\n- uid: System.Windows.Input.RoutedCommand.System#Windows#Input#ICommand#Execute*\n  parent: System.Windows.Input.RoutedCommand\n  isExternal: false\n  name: System.Windows.Input.ICommand.Execute\n  nameWithType: RoutedCommand.System.Windows.Input.ICommand.Execute\n  fullName: RoutedCommand.System.Windows.Input.ICommand.Execute\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/RoutedCommand.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.Windows.Input.ICommand\n  parent: System.Windows.Input\n  isExternal: false\n  name: ICommand\n  nameWithType: ICommand\n  fullName: System.Windows.Input.ICommand\n"}