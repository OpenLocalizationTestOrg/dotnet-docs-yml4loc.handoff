{"nodes":[{"content":"The `System.Threading.Tasks` namespace provides types that simplify the work of writing concurrent and asynchronous code. The main types are <xref href=\"System.Threading.Tasks.Task\"></xref> which represents an asynchronous operation that can be waited on and cancelled, and <xref href=\"System.Threading.Tasks.Task`1\"></xref>, which is a task that can return a value. The <xref href=\"System.Threading.Tasks.TaskFactory\"></xref> class provides static methods for creating and starting tasks, and the <xref href=\"System.Threading.Tasks.TaskScheduler\"></xref> class provides the default thread scheduling infrastructure.","nodes":[{"pos":[0,616],"content":"The `System.Threading.Tasks` namespace provides types that simplify the work of writing concurrent and asynchronous code. The main types are <xref href=\"System.Threading.Tasks.Task\"></xref> which represents an asynchronous operation that can be waited on and cancelled, and <xref href=\"System.Threading.Tasks.Task`1\"></xref>, which is a task that can return a value. The <xref href=\"System.Threading.Tasks.TaskFactory\"></xref> class provides static methods for creating and starting tasks, and the <xref href=\"System.Threading.Tasks.TaskScheduler\"></xref> class provides the default thread scheduling infrastructure.","nodes":[{"content":"The <ph id=\"ph1\">`System.Threading.Tasks`</ph> namespace provides types that simplify the work of writing concurrent and asynchronous code.","pos":[0,121],"source":"The `System.Threading.Tasks` namespace provides types that simplify the work of writing concurrent and asynchronous code."},{"content":"The main types are <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> which represents an asynchronous operation that can be waited on and cancelled, and <ph id=\"ph2\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>, which is a task that can return a value.","pos":[122,366],"source":" The main types are <xref href=\"System.Threading.Tasks.Task\"></xref> which represents an asynchronous operation that can be waited on and cancelled, and <xref href=\"System.Threading.Tasks.Task`1\"></xref>, which is a task that can return a value."},{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskFactory\"&gt;&lt;/xref&gt;</ph> class provides static methods for creating and starting tasks, and the <ph id=\"ph2\">&lt;xref href=\"System.Threading.Tasks.TaskScheduler\"&gt;&lt;/xref&gt;</ph> class provides the default thread scheduling infrastructure.","pos":[367,616],"source":" The <xref href=\"System.Threading.Tasks.TaskFactory\"></xref> class provides static methods for creating and starting tasks, and the <xref href=\"System.Threading.Tasks.TaskScheduler\"></xref> class provides the default thread scheduling infrastructure."}]}],"pos":[1104,1721],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Threading.Tasks\n  id: System.Threading.Tasks\n  children:\n  - System.Threading.Tasks.ConcurrentExclusiveSchedulerPair\n  - System.Threading.Tasks.Parallel\n  - System.Threading.Tasks.ParallelLoopResult\n  - System.Threading.Tasks.ParallelLoopState\n  - System.Threading.Tasks.ParallelOptions\n  - System.Threading.Tasks.Task\n  - System.Threading.Tasks.Task`1\n  - System.Threading.Tasks.TaskCanceledException\n  - System.Threading.Tasks.TaskCompletionSource`1\n  - System.Threading.Tasks.TaskContinuationOptions\n  - System.Threading.Tasks.TaskCreationOptions\n  - System.Threading.Tasks.TaskExtensions\n  - System.Threading.Tasks.TaskFactory\n  - System.Threading.Tasks.TaskFactory`1\n  - System.Threading.Tasks.TaskScheduler\n  - System.Threading.Tasks.TaskSchedulerException\n  - System.Threading.Tasks.TaskStatus\n  - System.Threading.Tasks.UnobservedTaskExceptionEventArgs\n  - System.Threading.Tasks.ValueTask`1\n  langs:\n  - csharp\n  name: System.Threading.Tasks\n  nameWithType: System.Threading.Tasks\n  fullName: System.Threading.Tasks\n  type: Namespace\n  summary: The `System.Threading.Tasks` namespace provides types that simplify the work of writing concurrent and asynchronous code. The main types are <xref href=\"System.Threading.Tasks.Task\"></xref> which represents an asynchronous operation that can be waited on and cancelled, and <xref href=\"System.Threading.Tasks.Task`1\"></xref>, which is a task that can return a value. The <xref href=\"System.Threading.Tasks.TaskFactory\"></xref> class provides static methods for creating and starting tasks, and the <xref href=\"System.Threading.Tasks.TaskScheduler\"></xref> class provides the default thread scheduling infrastructure.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/ns-System.Threading.Tasks.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\nreferences:\n- uid: System.Threading.Tasks.ConcurrentExclusiveSchedulerPair\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: ConcurrentExclusiveSchedulerPair\n  nameWithType: ConcurrentExclusiveSchedulerPair\n  fullName: System.Threading.Tasks.ConcurrentExclusiveSchedulerPair\n- uid: System.Threading.Tasks.Parallel\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: Parallel\n  nameWithType: Parallel\n  fullName: System.Threading.Tasks.Parallel\n- uid: System.Threading.Tasks.ParallelLoopResult\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: ParallelLoopResult\n  nameWithType: ParallelLoopResult\n  fullName: System.Threading.Tasks.ParallelLoopResult\n- uid: System.Threading.Tasks.ParallelLoopState\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: ParallelLoopState\n  nameWithType: ParallelLoopState\n  fullName: System.Threading.Tasks.ParallelLoopState\n- uid: System.Threading.Tasks.ParallelOptions\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: ParallelOptions\n  nameWithType: ParallelOptions\n  fullName: System.Threading.Tasks.ParallelOptions\n- uid: System.Threading.Tasks.Task\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: Task\n  nameWithType: Task\n  fullName: System.Threading.Tasks.Task\n- uid: System.Threading.Tasks.Task`1\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: Task<TResult>\n  nameWithType: Task<TResult>\n  fullName: System.Threading.Tasks.Task<TResult>\n- uid: System.Threading.Tasks.TaskCanceledException\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: TaskCanceledException\n  nameWithType: TaskCanceledException\n  fullName: System.Threading.Tasks.TaskCanceledException\n- uid: System.Threading.Tasks.TaskCompletionSource`1\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: TaskCompletionSource<TResult>\n  nameWithType: TaskCompletionSource<TResult>\n  fullName: System.Threading.Tasks.TaskCompletionSource<TResult>\n- uid: System.Threading.Tasks.TaskContinuationOptions\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: TaskContinuationOptions\n  nameWithType: TaskContinuationOptions\n  fullName: System.Threading.Tasks.TaskContinuationOptions\n- uid: System.Threading.Tasks.TaskCreationOptions\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: TaskCreationOptions\n  nameWithType: TaskCreationOptions\n  fullName: System.Threading.Tasks.TaskCreationOptions\n- uid: System.Threading.Tasks.TaskExtensions\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: TaskExtensions\n  nameWithType: TaskExtensions\n  fullName: System.Threading.Tasks.TaskExtensions\n- uid: System.Threading.Tasks.TaskFactory\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: TaskFactory\n  nameWithType: TaskFactory\n  fullName: System.Threading.Tasks.TaskFactory\n- uid: System.Threading.Tasks.TaskFactory`1\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: TaskFactory<TResult>\n  nameWithType: TaskFactory<TResult>\n  fullName: System.Threading.Tasks.TaskFactory<TResult>\n- uid: System.Threading.Tasks.TaskScheduler\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: TaskScheduler\n  nameWithType: TaskScheduler\n  fullName: System.Threading.Tasks.TaskScheduler\n- uid: System.Threading.Tasks.TaskSchedulerException\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: TaskSchedulerException\n  nameWithType: TaskSchedulerException\n  fullName: System.Threading.Tasks.TaskSchedulerException\n- uid: System.Threading.Tasks.TaskStatus\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: TaskStatus\n  nameWithType: TaskStatus\n  fullName: System.Threading.Tasks.TaskStatus\n- uid: System.Threading.Tasks.UnobservedTaskExceptionEventArgs\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: UnobservedTaskExceptionEventArgs\n  nameWithType: UnobservedTaskExceptionEventArgs\n  fullName: System.Threading.Tasks.UnobservedTaskExceptionEventArgs\n- uid: System.Threading.Tasks.ValueTask`1\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: ValueTask<TResult>\n  nameWithType: ValueTask<TResult>\n  fullName: System.Threading.Tasks.ValueTask<TResult>\n"}