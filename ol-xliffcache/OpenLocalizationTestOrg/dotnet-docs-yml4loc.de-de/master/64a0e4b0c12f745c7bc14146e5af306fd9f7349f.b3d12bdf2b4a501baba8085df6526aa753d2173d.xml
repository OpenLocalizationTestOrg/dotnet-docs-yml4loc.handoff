{"nodes":[{"content":"Provides the atomic unit of recognized speech.","nodes":[{"pos":[0,46],"content":"Provides the atomic unit of recognized speech.","nodes":[{"content":"Provides the atomic unit of recognized speech.","pos":[0,46]}]}],"pos":[913,960],"yaml":true},{"content":"All results returned by a recognition engine are constructed of <xref:System.Speech.Recognition.RecognizedWordUnit> objects.  \n  \n An array of <xref:System.Speech.Recognition.RecognizedWordUnit> objects is accessible for any recognition operation through the <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> property on the <xref:System.Speech.Recognition.RecognizedPhrase> object.  \n  \n In addition to providing a measure of recognition certainty (<xref:System.Speech.Recognition.RecognizedWordUnit.Confidence%2A>) a <xref:System.Speech.Recognition.RecognizedWordUnit> instance provides:  \n  \n-   Normalized and exact (or lexical) text representations for a recognized word. For more information, see <xref:System.Speech.Recognition.ReplacementText>, <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>, and <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>.  \n  \n-   Pronunciation information using characters from a supported phonetic alphabet, such as the International Phonetic Alphabet (IPA) or the Universal Phone Set (UPS). For more information see <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>.  \n  \n-   Formatting for printing. For more information see the <xref:System.Speech.Recognition.DisplayAttributes> class and its <xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A> property.","nodes":[{"pos":[0,124],"content":"All results returned by a recognition engine are constructed of <xref:System.Speech.Recognition.RecognizedWordUnit> objects.","nodes":[{"content":"All results returned by a recognition engine are constructed of <ph id=\"ph1\">&lt;xref:System.Speech.Recognition.RecognizedWordUnit&gt;</ph> objects.","pos":[0,124],"source":"All results returned by a recognition engine are constructed of <xref:System.Speech.Recognition.RecognizedWordUnit> objects."}]},{"pos":[131,391],"content":"An array of <xref:System.Speech.Recognition.RecognizedWordUnit> objects is accessible for any recognition operation through the <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> property on the <xref:System.Speech.Recognition.RecognizedPhrase> object.","nodes":[{"content":"An array of <ph id=\"ph1\">&lt;xref:System.Speech.Recognition.RecognizedWordUnit&gt;</ph> objects is accessible for any recognition operation through the <ph id=\"ph2\">&lt;xref:System.Speech.Recognition.RecognizedPhrase.Words%2A&gt;</ph> property on the <ph id=\"ph3\">&lt;xref:System.Speech.Recognition.RecognizedPhrase&gt;</ph> object.","pos":[0,260],"source":"An array of <xref:System.Speech.Recognition.RecognizedWordUnit> objects is accessible for any recognition operation through the <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> property on the <xref:System.Speech.Recognition.RecognizedPhrase> object."}]},{"pos":[398,598],"content":"In addition to providing a measure of recognition certainty (<xref:System.Speech.Recognition.RecognizedWordUnit.Confidence%2A>) a <xref:System.Speech.Recognition.RecognizedWordUnit> instance provides:","nodes":[{"content":"In addition to providing a measure of recognition certainty (<ph id=\"ph1\">&lt;xref:System.Speech.Recognition.RecognizedWordUnit.Confidence%2A&gt;</ph>) a <ph id=\"ph2\">&lt;xref:System.Speech.Recognition.RecognizedWordUnit&gt;</ph> instance provides:","pos":[0,200],"source":"In addition to providing a measure of recognition certainty (<xref:System.Speech.Recognition.RecognizedWordUnit.Confidence%2A>) a <xref:System.Speech.Recognition.RecognizedWordUnit> instance provides:"}]},{"pos":[608,894],"content":"Normalized and exact (or lexical) text representations for a recognized word. For more information, see <xref:System.Speech.Recognition.ReplacementText>, <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>, and <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>.","nodes":[{"content":"Normalized and exact (or lexical) text representations for a recognized word. For more information, see <xref:System.Speech.Recognition.ReplacementText>, <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>, and <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>.","pos":[0,286],"nodes":[{"content":"Normalized and exact (or lexical) text representations for a recognized word.","pos":[0,77]},{"content":"For more information, see <ph id=\"ph1\">&lt;xref:System.Speech.Recognition.ReplacementText&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A&gt;</ph>, and <ph id=\"ph3\">&lt;xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A&gt;</ph>.","pos":[78,286],"source":" For more information, see <xref:System.Speech.Recognition.ReplacementText>, <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>, and <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>."}]}]},{"pos":[904,1161],"content":"Pronunciation information using characters from a supported phonetic alphabet, such as the International Phonetic Alphabet (IPA) or the Universal Phone Set (UPS). For more information see <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>.","nodes":[{"content":"Pronunciation information using characters from a supported phonetic alphabet, such as the International Phonetic Alphabet (IPA) or the Universal Phone Set (UPS). For more information see <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>.","pos":[0,257],"nodes":[{"content":"Pronunciation information using characters from a supported phonetic alphabet, such as the International Phonetic Alphabet (IPA) or the Universal Phone Set (UPS).","pos":[0,162]},{"content":"For more information see <ph id=\"ph1\">&lt;xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A&gt;</ph>.","pos":[163,257],"source":" For more information see <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>."}]}]},{"pos":[1171,1372],"content":"Formatting for printing. For more information see the <xref:System.Speech.Recognition.DisplayAttributes> class and its <xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A> property.","nodes":[{"content":"Formatting for printing. For more information see the <xref:System.Speech.Recognition.DisplayAttributes> class and its <xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A> property.","pos":[0,201],"nodes":[{"content":"Formatting for printing.","pos":[0,24]},{"content":"For more information see the <ph id=\"ph1\">&lt;xref:System.Speech.Recognition.DisplayAttributes&gt;</ph> class and its <ph id=\"ph2\">&lt;xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A&gt;</ph> property.","pos":[25,201],"source":" For more information see the <xref:System.Speech.Recognition.DisplayAttributes> class and its <xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A> property."}]}]}],"pos":[971,2356],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Speech.Recognition.RecognizedWordUnit\"></xref> class.","nodes":[{"pos":[0,106],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Speech.Recognition.RecognizedWordUnit\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.Speech.Recognition.RecognizedWordUnit\"></xref> class."}],"pos":[6814,6921],"yaml":true},{"content":"If `text` or `pronunciation` are `null`, \"\", or <xref:System.String.Empty> and the <xref:System.Speech.Recognition.RecognizedWordUnit> is used in a recognition operation, the recognition engine will generate appropriate values in any output <xref:System.Speech.Recognition.RecognizedWordUnit> instance.  \n  \n Direct construction of <xref:System.Speech.Recognition.RecognizedWordUnit> instances is typically used only when emulating recognition operations using the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> methods of the <xref:System.Speech.Recognition.SpeechRecognitionEngine> class and the <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognize%2A> or <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync%2A> methods of the <xref:System.Speech.Recognition.SpeechRecognizer> class.  \n  \n For actual applications, do not directly construct <xref:System.Speech.Recognition.RecognizedWordUnit>, rather obtain it through the <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> property on the <xref:System.Speech.Recognition.RecognizedPhrase> object.","nodes":[{"pos":[0,302],"content":"If <ph id=\"ph1\">`text`</ph> or <ph id=\"ph2\">`pronunciation`</ph> are <ph id=\"ph3\">`null`</ph>, \"\", or <ph id=\"ph4\">&lt;xref:System.String.Empty&gt;</ph> and the <ph id=\"ph5\">&lt;xref:System.Speech.Recognition.RecognizedWordUnit&gt;</ph> is used in a recognition operation, the recognition engine will generate appropriate values in any output <ph id=\"ph6\">&lt;xref:System.Speech.Recognition.RecognizedWordUnit&gt;</ph> instance.","source":"If `text` or `pronunciation` are `null`, \"\", or <xref:System.String.Empty> and the <xref:System.Speech.Recognition.RecognizedWordUnit> is used in a recognition operation, the recognition engine will generate appropriate values in any output <xref:System.Speech.Recognition.RecognizedWordUnit> instance."},{"pos":[309,932],"content":"Direct construction of <xref:System.Speech.Recognition.RecognizedWordUnit> instances is typically used only when emulating recognition operations using the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> methods of the <xref:System.Speech.Recognition.SpeechRecognitionEngine> class and the <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognize%2A> or <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync%2A> methods of the <xref:System.Speech.Recognition.SpeechRecognizer> class.","nodes":[{"content":"Direct construction of <ph id=\"ph1\">&lt;xref:System.Speech.Recognition.RecognizedWordUnit&gt;</ph> instances is typically used only when emulating recognition operations using the <ph id=\"ph2\">&lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A&gt;</ph> or <ph id=\"ph3\">&lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A&gt;</ph> methods of the <ph id=\"ph4\">&lt;xref:System.Speech.Recognition.SpeechRecognitionEngine&gt;</ph> class and the <ph id=\"ph5\">&lt;xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognize%2A&gt;</ph> or <ph id=\"ph6\">&lt;xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync%2A&gt;</ph> methods of the <ph id=\"ph7\">&lt;xref:System.Speech.Recognition.SpeechRecognizer&gt;</ph> class.","pos":[0,623],"source":"Direct construction of <xref:System.Speech.Recognition.RecognizedWordUnit> instances is typically used only when emulating recognition operations using the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> methods of the <xref:System.Speech.Recognition.SpeechRecognitionEngine> class and the <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognize%2A> or <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync%2A> methods of the <xref:System.Speech.Recognition.SpeechRecognizer> class."}]},{"pos":[939,1204],"content":"For actual applications, do not directly construct <xref:System.Speech.Recognition.RecognizedWordUnit>, rather obtain it through the <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> property on the <xref:System.Speech.Recognition.RecognizedPhrase> object.","nodes":[{"content":"For actual applications, do not directly construct <ph id=\"ph1\">&lt;xref:System.Speech.Recognition.RecognizedWordUnit&gt;</ph>, rather obtain it through the <ph id=\"ph2\">&lt;xref:System.Speech.Recognition.RecognizedPhrase.Words%2A&gt;</ph> property on the <ph id=\"ph3\">&lt;xref:System.Speech.Recognition.RecognizedPhrase&gt;</ph> object.","pos":[0,265],"source":"For actual applications, do not directly construct <xref:System.Speech.Recognition.RecognizedWordUnit>, rather obtain it through the <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> property on the <xref:System.Speech.Recognition.RecognizedPhrase> object."}]}],"pos":[6932,8145],"yaml":true,"extradata":"MT"},{"content":"The normalized text for a recognized word.  \n  \n This value can be `null`, \"\", or <xref href=\"System.String.Empty\"></xref>.","nodes":[{"pos":[0,42],"content":"The normalized text for a recognized word.","nodes":[{"content":"The normalized text for a recognized word.","pos":[0,42]}]},{"pos":[49,123],"content":"This value can be <ph id=\"ph1\">`null`</ph>, \"\", or <ph id=\"ph2\">&lt;xref href=\"System.String.Empty\"&gt;&lt;/xref&gt;</ph>.","source":"This value can be `null`, \"\", or <xref href=\"System.String.Empty\"></xref>."}],"pos":[10184,10316],"yaml":true},{"content":"A `float` value from 0.0 through 1.0 indicating the certainty of word recognition.","nodes":[{"pos":[0,82],"content":"A <ph id=\"ph1\">`float`</ph> value from 0.0 through 1.0 indicating the certainty of word recognition.","source":"A `float` value from 0.0 through 1.0 indicating the certainty of word recognition."}],"pos":[10382,10465],"yaml":true},{"content":"The phonetic spelling of a recognized word.  \n  \n This value can be `null`, \"\", or <xref href=\"System.String.Empty\"></xref>.","nodes":[{"pos":[0,43],"content":"The phonetic spelling of a recognized word.","nodes":[{"content":"The phonetic spelling of a recognized word.","pos":[0,43]}]},{"pos":[50,124],"content":"This value can be <ph id=\"ph1\">`null`</ph>, \"\", or <ph id=\"ph2\">&lt;xref href=\"System.String.Empty\"&gt;&lt;/xref&gt;</ph>.","source":"This value can be `null`, \"\", or <xref href=\"System.String.Empty\"></xref>."}],"pos":[10534,10667],"yaml":true},{"content":"The unnormalized text for a recognized word.  \n  \n This argument is required and may not be `null`, \"\", or <xref href=\"System.String.Empty\"></xref>.","nodes":[{"pos":[0,44],"content":"The unnormalized text for a recognized word.","nodes":[{"content":"The unnormalized text for a recognized word.","pos":[0,44]}]},{"pos":[51,148],"content":"This argument is required and may not be <ph id=\"ph1\">`null`</ph>, \"\", or <ph id=\"ph2\">&lt;xref href=\"System.String.Empty\"&gt;&lt;/xref&gt;</ph>.","source":"This argument is required and may not be `null`, \"\", or <xref href=\"System.String.Empty\"></xref>."}],"pos":[10734,10891],"yaml":true},{"content":"Defines the use of white space to display recognized words.","nodes":[{"pos":[0,59],"content":"Defines the use of white space to display recognized words.","nodes":[{"content":"Defines the use of white space to display recognized words.","pos":[0,59]}]}],"pos":[10994,11054],"yaml":true},{"content":"The location of the recognized word in the audio input stream.  \n  \n This value can be <xref href=\"System.TimeSpan.Zero\"></xref>.","nodes":[{"pos":[0,62],"content":"The location of the recognized word in the audio input stream.","nodes":[{"content":"The location of the recognized word in the audio input stream.","pos":[0,62]}]},{"pos":[69,129],"content":"This value can be <ph id=\"ph1\">&lt;xref href=\"System.TimeSpan.Zero\"&gt;&lt;/xref&gt;</ph>.","source":"This value can be <xref href=\"System.TimeSpan.Zero\"></xref>."}],"pos":[11125,11261],"yaml":true},{"content":"The length of the audio input corresponding to the recognized word.  \n  \n This value can be <xref href=\"System.TimeSpan.Zero\"></xref>.","nodes":[{"pos":[0,67],"content":"The length of the audio input corresponding to the recognized word.","nodes":[{"content":"The length of the audio input corresponding to the recognized word.","pos":[0,67]}]},{"pos":[74,134],"content":"This value can be <ph id=\"ph1\">&lt;xref href=\"System.TimeSpan.Zero\"&gt;&lt;/xref&gt;</ph>.","source":"This value can be <xref href=\"System.TimeSpan.Zero\"></xref>."}],"pos":[11332,11473],"yaml":true},{"content":"Gets a value, assigned by the recognizer, that represents the likelihood that a recognized word matches a given input.","nodes":[{"pos":[0,118],"content":"Gets a value, assigned by the recognizer, that represents the likelihood that a recognized word matches a given input.","nodes":[{"content":"Gets a value, assigned by the recognizer, that represents the likelihood that a recognized word matches a given input.","pos":[0,118]}]}],"pos":[12510,12629],"yaml":true},{"content":"Confidence scores do not indicate the absolute likelihood that a word was recognized correctly. Instead, confidence scores provide a mechanism for comparing the relative accuracy of multiple recognition alternates for a given input. This facilitates returning the most accurate recognition result. For example, if a recognized word has a confidence score of 0.8, this does not mean that the word has an 80% chance of being the correct match for the input.  It means that the word is more likely to be the correct match for the input than other results that have confidence scores less than 0.8.  \n  \n A confidence score on its own is not meaningful unless you have alternative results to compare against, either from the same recognition operation or from previous recognitions of the same input.  \n  \n The values returned by <xref:System.Speech.Recognition.RecognizedWordUnit.Confidence%2A> are relative and unique to each recognition engine. There is no definition of how confidence values between two different recognition engines compare, nor how the <xref:System.Speech.Recognition.RecognizedWordUnit.Confidence%2A> of individual <xref:System.Speech.Recognition.RecognizedWordUnit> objects define the <xref:System.Speech.Recognition.RecognizedPhrase.Confidence%2A> of a <xref:System.Speech.Recognition.RecognizedPhrase>.  \n  \n A speech recognition engine may assign a low confidence score to spoken input for various reasons, including background interference, inarticulate speech, or unanticipated words or word sequences. If your application is using a <xref:System.Speech.Recognition.SpeechRecognitionEngine> instance, you can modify the confidence level at which speech input is accepted or rejected with one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> methods. Confidence thresholds for the shared recognizer, managed by <xref:System.Speech.Recognition.SpeechRecognizer>, are associated with a user profile and stored in the Windows registry. Applications should not write changes to the registry for the properties of the shared recognizer.","nodes":[{"pos":[0,594],"content":"Confidence scores do not indicate the absolute likelihood that a word was recognized correctly. Instead, confidence scores provide a mechanism for comparing the relative accuracy of multiple recognition alternates for a given input. This facilitates returning the most accurate recognition result. For example, if a recognized word has a confidence score of 0.8, this does not mean that the word has an 80% chance of being the correct match for the input.  It means that the word is more likely to be the correct match for the input than other results that have confidence scores less than 0.8.","nodes":[{"content":"Confidence scores do not indicate the absolute likelihood that a word was recognized correctly. Instead, confidence scores provide a mechanism for comparing the relative accuracy of multiple recognition alternates for a given input. This facilitates returning the most accurate recognition result. For example, if a recognized word has a confidence score of 0.8, this does not mean that the word has an 80% chance of being the correct match for the input.  It means that the word is more likely to be the correct match for the input than other results that have confidence scores less than 0.8.","pos":[0,594],"nodes":[{"content":"Confidence scores do not indicate the absolute likelihood that a word was recognized correctly.","pos":[0,95]},{"content":"Instead, confidence scores provide a mechanism for comparing the relative accuracy of multiple recognition alternates for a given input.","pos":[96,232]},{"content":"This facilitates returning the most accurate recognition result.","pos":[233,297]},{"content":"For example, if a recognized word has a confidence score of 0.8, this does not mean that the word has an 80% chance of being the correct match for the input.","pos":[298,455]},{"content":"It means that the word is more likely to be the correct match for the input than other results that have confidence scores less than 0.8.","pos":[457,594]}]}]},{"pos":[601,796],"content":"A confidence score on its own is not meaningful unless you have alternative results to compare against, either from the same recognition operation or from previous recognitions of the same input.","nodes":[{"content":"A confidence score on its own is not meaningful unless you have alternative results to compare against, either from the same recognition operation or from previous recognitions of the same input.","pos":[0,195]}]},{"pos":[803,1325],"content":"The values returned by <xref:System.Speech.Recognition.RecognizedWordUnit.Confidence%2A> are relative and unique to each recognition engine. There is no definition of how confidence values between two different recognition engines compare, nor how the <xref:System.Speech.Recognition.RecognizedWordUnit.Confidence%2A> of individual <xref:System.Speech.Recognition.RecognizedWordUnit> objects define the <xref:System.Speech.Recognition.RecognizedPhrase.Confidence%2A> of a <xref:System.Speech.Recognition.RecognizedPhrase>.","nodes":[{"content":"The values returned by <xref:System.Speech.Recognition.RecognizedWordUnit.Confidence%2A> are relative and unique to each recognition engine. There is no definition of how confidence values between two different recognition engines compare, nor how the <xref:System.Speech.Recognition.RecognizedWordUnit.Confidence%2A> of individual <xref:System.Speech.Recognition.RecognizedWordUnit> objects define the <xref:System.Speech.Recognition.RecognizedPhrase.Confidence%2A> of a <xref:System.Speech.Recognition.RecognizedPhrase>.","pos":[0,522],"nodes":[{"content":"The values returned by <ph id=\"ph1\">&lt;xref:System.Speech.Recognition.RecognizedWordUnit.Confidence%2A&gt;</ph> are relative and unique to each recognition engine.","pos":[0,140],"source":"The values returned by <xref:System.Speech.Recognition.RecognizedWordUnit.Confidence%2A> are relative and unique to each recognition engine."},{"content":"There is no definition of how confidence values between two different recognition engines compare, nor how the <ph id=\"ph1\">&lt;xref:System.Speech.Recognition.RecognizedWordUnit.Confidence%2A&gt;</ph> of individual <ph id=\"ph2\">&lt;xref:System.Speech.Recognition.RecognizedWordUnit&gt;</ph> objects define the <ph id=\"ph3\">&lt;xref:System.Speech.Recognition.RecognizedPhrase.Confidence%2A&gt;</ph> of a <ph id=\"ph4\">&lt;xref:System.Speech.Recognition.RecognizedPhrase&gt;</ph>.","pos":[141,522],"source":" There is no definition of how confidence values between two different recognition engines compare, nor how the <xref:System.Speech.Recognition.RecognizedWordUnit.Confidence%2A> of individual <xref:System.Speech.Recognition.RecognizedWordUnit> objects define the <xref:System.Speech.Recognition.RecognizedPhrase.Confidence%2A> of a <xref:System.Speech.Recognition.RecognizedPhrase>."}]}]},{"pos":[1332,2098],"content":"A speech recognition engine may assign a low confidence score to spoken input for various reasons, including background interference, inarticulate speech, or unanticipated words or word sequences. If your application is using a <xref:System.Speech.Recognition.SpeechRecognitionEngine> instance, you can modify the confidence level at which speech input is accepted or rejected with one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> methods. Confidence thresholds for the shared recognizer, managed by <xref:System.Speech.Recognition.SpeechRecognizer>, are associated with a user profile and stored in the Windows registry. Applications should not write changes to the registry for the properties of the shared recognizer.","nodes":[{"content":"A speech recognition engine may assign a low confidence score to spoken input for various reasons, including background interference, inarticulate speech, or unanticipated words or word sequences. If your application is using a <xref:System.Speech.Recognition.SpeechRecognitionEngine> instance, you can modify the confidence level at which speech input is accepted or rejected with one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> methods. Confidence thresholds for the shared recognizer, managed by <xref:System.Speech.Recognition.SpeechRecognizer>, are associated with a user profile and stored in the Windows registry. Applications should not write changes to the registry for the properties of the shared recognizer.","pos":[0,766],"nodes":[{"content":"A speech recognition engine may assign a low confidence score to spoken input for various reasons, including background interference, inarticulate speech, or unanticipated words or word sequences.","pos":[0,196]},{"content":"If your application is using a <ph id=\"ph1\">&lt;xref:System.Speech.Recognition.SpeechRecognitionEngine&gt;</ph> instance, you can modify the confidence level at which speech input is accepted or rejected with one of the <ph id=\"ph2\">&lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A&gt;</ph> methods.","pos":[197,485],"source":" If your application is using a <xref:System.Speech.Recognition.SpeechRecognitionEngine> instance, you can modify the confidence level at which speech input is accepted or rejected with one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> methods."},{"content":"Confidence thresholds for the shared recognizer, managed by <ph id=\"ph1\">&lt;xref:System.Speech.Recognition.SpeechRecognizer&gt;</ph>, are associated with a user profile and stored in the Windows registry.","pos":[486,667],"source":" Confidence thresholds for the shared recognizer, managed by <xref:System.Speech.Recognition.SpeechRecognizer>, are associated with a user profile and stored in the Windows registry."},{"content":"Applications should not write changes to the registry for the properties of the shared recognizer.","pos":[668,766]}]}]}],"pos":[12640,14747],"yaml":true,"extradata":"MT"},{"content":"A relative measure of the certainty of correct recognition for a word. The value is from 0.0 to 1.0, for low to high confidence, respectively.","nodes":[{"pos":[0,142],"content":"A relative measure of the certainty of correct recognition for a word. The value is from 0.0 to 1.0, for low to high confidence, respectively.","nodes":[{"content":"A relative measure of the certainty of correct recognition for a word. The value is from 0.0 to 1.0, for low to high confidence, respectively.","pos":[0,142],"nodes":[{"content":"A relative measure of the certainty of correct recognition for a word.","pos":[0,70]},{"content":"The value is from 0.0 to 1.0, for low to high confidence, respectively.","pos":[71,142]}]}]}],"pos":[14860,15003],"yaml":true},{"content":"Gets formatting information used to create the text output from the current <xref href=\"System.Speech.Recognition.RecognizedWordUnit\"></xref> instance.","nodes":[{"pos":[0,151],"content":"Gets formatting information used to create the text output from the current <ph id=\"ph1\">&lt;xref href=\"System.Speech.Recognition.RecognizedWordUnit\"&gt;&lt;/xref&gt;</ph> instance.","source":"Gets formatting information used to create the text output from the current <xref href=\"System.Speech.Recognition.RecognizedWordUnit\"></xref> instance."}],"pos":[16087,16239],"yaml":true},{"content":"The <xref:System.Speech.Recognition.DisplayAttributes> object returned by the <xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A> property specifies the leading and trailing spaces to be used with a given word, if any.  \n  \n For more information about how to use this formatting information, see the <xref:System.Speech.Recognition.DisplayAttributes> enumeration.","nodes":[{"pos":[0,239],"content":"The <xref:System.Speech.Recognition.DisplayAttributes> object returned by the <xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A> property specifies the leading and trailing spaces to be used with a given word, if any.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Speech.Recognition.DisplayAttributes&gt;</ph> object returned by the <ph id=\"ph2\">&lt;xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A&gt;</ph> property specifies the leading and trailing spaces to be used with a given word, if any.","pos":[0,239],"source":"The <xref:System.Speech.Recognition.DisplayAttributes> object returned by the <xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A> property specifies the leading and trailing spaces to be used with a given word, if any."}]},{"pos":[246,384],"content":"For more information about how to use this formatting information, see the <xref:System.Speech.Recognition.DisplayAttributes> enumeration.","nodes":[{"content":"For more information about how to use this formatting information, see the <ph id=\"ph1\">&lt;xref:System.Speech.Recognition.DisplayAttributes&gt;</ph> enumeration.","pos":[0,138],"source":"For more information about how to use this formatting information, see the <xref:System.Speech.Recognition.DisplayAttributes> enumeration."}]}],"pos":[16250,16639],"yaml":true,"extradata":"MT"},{"content":"Specifies the use of white space to display of the contents of a <xref href=\"System.Speech.Recognition.RecognizedWordUnit\"></xref> object.","nodes":[{"pos":[0,138],"content":"Specifies the use of white space to display of the contents of a <ph id=\"ph1\">&lt;xref href=\"System.Speech.Recognition.RecognizedWordUnit\"&gt;&lt;/xref&gt;</ph> object.","source":"Specifies the use of white space to display of the contents of a <xref href=\"System.Speech.Recognition.RecognizedWordUnit\"></xref> object."}],"pos":[19155,19294],"yaml":true},{"content":"Gets the unnormalized text of a recognized word.","nodes":[{"pos":[0,48],"content":"Gets the unnormalized text of a recognized word.","nodes":[{"content":"Gets the unnormalized text of a recognized word.","pos":[0,48]}]}],"pos":[20349,20398],"yaml":true},{"content":"In most cases the values returned by <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A> and <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A> are identical. However, recognition engines may use speech normalization to return more user-friendly or colloquial text representations of audio input.  \n  \n Speech normalization is the use of special constructs or symbols to express speech in writing. For example, normalization can replace the spoken words \"a dollar and sixteen cents\" with \"$1.16\" in output text.","nodes":[{"pos":[0,320],"content":"In most cases the values returned by <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A> and <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A> are identical. However, recognition engines may use speech normalization to return more user-friendly or colloquial text representations of audio input.","nodes":[{"content":"In most cases the values returned by <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A> and <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A> are identical. However, recognition engines may use speech normalization to return more user-friendly or colloquial text representations of audio input.","pos":[0,320],"nodes":[{"content":"In most cases the values returned by <ph id=\"ph1\">&lt;xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A&gt;</ph> are identical.","pos":[0,182],"source":"In most cases the values returned by <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A> and <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A> are identical."},{"content":"However, recognition engines may use speech normalization to return more user-friendly or colloquial text representations of audio input.","pos":[183,320]}]}]},{"pos":[327,535],"content":"Speech normalization is the use of special constructs or symbols to express speech in writing. For example, normalization can replace the spoken words \"a dollar and sixteen cents\" with \"$1.16\" in output text.","nodes":[{"content":"Speech normalization is the use of special constructs or symbols to express speech in writing. For example, normalization can replace the spoken words \"a dollar and sixteen cents\" with \"$1.16\" in output text.","pos":[0,208],"nodes":[{"content":"Speech normalization is the use of special constructs or symbols to express speech in writing.","pos":[0,94]},{"content":"For example, normalization can replace the spoken words \"a dollar and sixteen cents\" with \"$1.16\" in output text.","pos":[95,208]}]}]}],"pos":[20409,20953],"yaml":true,"extradata":"MT"},{"content":"Returns a <xref href=\"System.String\"></xref> containing the text of a recognized word, without any normalization.","nodes":[{"pos":[0,113],"content":"Returns a <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> containing the text of a recognized word, without any normalization.","source":"Returns a <xref href=\"System.String\"></xref> containing the text of a recognized word, without any normalization."}],"pos":[23262,23376],"yaml":true},{"content":"Gets the phonetic spelling of a recognized word.","nodes":[{"pos":[0,48],"content":"Gets the phonetic spelling of a recognized word.","nodes":[{"content":"Gets the phonetic spelling of a recognized word.","pos":[0,48]}]}],"pos":[24437,24486],"yaml":true},{"content":"The contents of <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A> indicate which pronunciation the speech recognition engine used to match speech input to one of its loaded <xref:System.Speech.Recognition.Grammar> objects. Pronunciations may be defined in the speech recognition engine's internal lexicon, in a lexicon document that is linked from a recognition grammar in a loaded <xref:System.Speech.Recognition.Grammar> object, or inline in a recognition grammar in a loaded <xref:System.Speech.Recognition.Grammar> object. A speech recognition engine may also create pronunciations for uncommon words whose pronunciations are not defined in a lexicon or grammar to which the speech recognition engine currently has access.  \n  \n Many Windows-based Unicode fonts, such as Courier New, support the display of IPA strings. For more information, see [International Phonetic Alphabet](http://go.microsoft.com/fwlink/?LinkId=58363).","nodes":[{"pos":[0,745],"content":"The contents of <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A> indicate which pronunciation the speech recognition engine used to match speech input to one of its loaded <xref:System.Speech.Recognition.Grammar> objects. Pronunciations may be defined in the speech recognition engine's internal lexicon, in a lexicon document that is linked from a recognition grammar in a loaded <xref:System.Speech.Recognition.Grammar> object, or inline in a recognition grammar in a loaded <xref:System.Speech.Recognition.Grammar> object. A speech recognition engine may also create pronunciations for uncommon words whose pronunciations are not defined in a lexicon or grammar to which the speech recognition engine currently has access.","nodes":[{"content":"The contents of <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A> indicate which pronunciation the speech recognition engine used to match speech input to one of its loaded <xref:System.Speech.Recognition.Grammar> objects. Pronunciations may be defined in the speech recognition engine's internal lexicon, in a lexicon document that is linked from a recognition grammar in a loaded <xref:System.Speech.Recognition.Grammar> object, or inline in a recognition grammar in a loaded <xref:System.Speech.Recognition.Grammar> object. A speech recognition engine may also create pronunciations for uncommon words whose pronunciations are not defined in a lexicon or grammar to which the speech recognition engine currently has access.","pos":[0,745],"nodes":[{"content":"The contents of <ph id=\"ph1\">&lt;xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A&gt;</ph> indicate which pronunciation the speech recognition engine used to match speech input to one of its loaded <ph id=\"ph2\">&lt;xref:System.Speech.Recognition.Grammar&gt;</ph> objects.","pos":[0,241],"source":"The contents of <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A> indicate which pronunciation the speech recognition engine used to match speech input to one of its loaded <xref:System.Speech.Recognition.Grammar> objects."},{"content":"Pronunciations may be defined in the speech recognition engine's internal lexicon, in a lexicon document that is linked from a recognition grammar in a loaded <ph id=\"ph1\">&lt;xref:System.Speech.Recognition.Grammar&gt;</ph> object, or inline in a recognition grammar in a loaded <ph id=\"ph2\">&lt;xref:System.Speech.Recognition.Grammar&gt;</ph> object.","pos":[242,545],"source":" Pronunciations may be defined in the speech recognition engine's internal lexicon, in a lexicon document that is linked from a recognition grammar in a loaded <xref:System.Speech.Recognition.Grammar> object, or inline in a recognition grammar in a loaded <xref:System.Speech.Recognition.Grammar> object."},{"content":"A speech recognition engine may also create pronunciations for uncommon words whose pronunciations are not defined in a lexicon or grammar to which the speech recognition engine currently has access.","pos":[546,745]}]}]},{"pos":[752,949],"content":"Many Windows-based Unicode fonts, such as Courier New, support the display of IPA strings. For more information, see [International Phonetic Alphabet](http://go.microsoft.com/fwlink/?LinkId=58363).","nodes":[{"content":"Many Windows-based Unicode fonts, such as Courier New, support the display of IPA strings.","pos":[0,90]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>International Phonetic Alphabet<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=58363)</ept>.","pos":[91,197],"source":" For more information, see [International Phonetic Alphabet](http://go.microsoft.com/fwlink/?LinkId=58363)."}]}],"pos":[24497,25451],"yaml":true,"extradata":"MT"},{"content":"A string of characters from a supported phonetic alphabet, such as the International Phonetic Alphabet (IPA) or the Universal Phone Set (UPS).","nodes":[{"pos":[0,142],"content":"A string of characters from a supported phonetic alphabet, such as the International Phonetic Alphabet (IPA) or the Universal Phone Set (UPS).","nodes":[{"content":"A string of characters from a supported phonetic alphabet, such as the International Phonetic Alphabet (IPA) or the Universal Phone Set (UPS).","pos":[0,142]}]}],"pos":[27779,27922],"yaml":true},{"content":"Gets the normalized text for a recognized word.","nodes":[{"pos":[0,47],"content":"Gets the normalized text for a recognized word.","nodes":[{"content":"Gets the normalized text for a recognized word.","pos":[0,47]}]}],"pos":[28931,28979],"yaml":true},{"content":"In most cases the values returned by <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A> and <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A> will be identical. However, recognition engines may use speech normalization to return more user-friendly or colloquial text representations of audio input.  \n  \n Speech normalization is the use of special constructs or symbols to express speech in writing. For example, normalization can replace the spoken words \"a dollar and sixteen cents\" with \"$1.16\" in output text.","nodes":[{"pos":[0,324],"content":"In most cases the values returned by <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A> and <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A> will be identical. However, recognition engines may use speech normalization to return more user-friendly or colloquial text representations of audio input.","nodes":[{"content":"In most cases the values returned by <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A> and <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A> will be identical. However, recognition engines may use speech normalization to return more user-friendly or colloquial text representations of audio input.","pos":[0,324],"nodes":[{"content":"In most cases the values returned by <ph id=\"ph1\">&lt;xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A&gt;</ph> will be identical.","pos":[0,186],"source":"In most cases the values returned by <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A> and <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A> will be identical."},{"content":"However, recognition engines may use speech normalization to return more user-friendly or colloquial text representations of audio input.","pos":[187,324]}]}]},{"pos":[331,539],"content":"Speech normalization is the use of special constructs or symbols to express speech in writing. For example, normalization can replace the spoken words \"a dollar and sixteen cents\" with \"$1.16\" in output text.","nodes":[{"content":"Speech normalization is the use of special constructs or symbols to express speech in writing. For example, normalization can replace the spoken words \"a dollar and sixteen cents\" with \"$1.16\" in output text.","pos":[0,208],"nodes":[{"content":"Speech normalization is the use of special constructs or symbols to express speech in writing.","pos":[0,94]},{"content":"For example, normalization can replace the spoken words \"a dollar and sixteen cents\" with \"$1.16\" in output text.","pos":[95,208]}]}]}],"pos":[28990,29538],"yaml":true,"extradata":"MT"},{"content":"A string that contains the normalized text output for a given input word.","nodes":[{"pos":[0,73],"content":"A string that contains the normalized text output for a given input word.","nodes":[{"content":"A string that contains the normalized text output for a given input word.","pos":[0,73]}]}],"pos":[31851,31925],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Speech.Recognition.RecognizedWordUnit\n  commentId: T:System.Speech.Recognition.RecognizedWordUnit\n  id: RecognizedWordUnit\n  children:\n  - System.Speech.Recognition.RecognizedWordUnit.#ctor(System.String,System.Single,System.String,System.String,System.Speech.Recognition.DisplayAttributes,System.TimeSpan,System.TimeSpan)\n  - System.Speech.Recognition.RecognizedWordUnit.Confidence\n  - System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes\n  - System.Speech.Recognition.RecognizedWordUnit.LexicalForm\n  - System.Speech.Recognition.RecognizedWordUnit.Pronunciation\n  - System.Speech.Recognition.RecognizedWordUnit.Text\n  langs:\n  - csharp\n  name: RecognizedWordUnit\n  nameWithType: RecognizedWordUnit\n  fullName: System.Speech.Recognition.RecognizedWordUnit\n  type: Class\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Recognition\n  summary: Provides the atomic unit of recognized speech.\n  remarks: \"All results returned by a recognition engine are constructed of <xref:System.Speech.Recognition.RecognizedWordUnit> objects.  \\n  \\n An array of <xref:System.Speech.Recognition.RecognizedWordUnit> objects is accessible for any recognition operation through the <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> property on the <xref:System.Speech.Recognition.RecognizedPhrase> object.  \\n  \\n In addition to providing a measure of recognition certainty (<xref:System.Speech.Recognition.RecognizedWordUnit.Confidence%2A>) a <xref:System.Speech.Recognition.RecognizedWordUnit> instance provides:  \\n  \\n-   Normalized and exact (or lexical) text representations for a recognized word. For more information, see <xref:System.Speech.Recognition.ReplacementText>, <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>, and <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>.  \\n  \\n-   Pronunciation information using characters from a supported phonetic alphabet, such as the International Phonetic Alphabet (IPA) or the Universal Phone Set (UPS). For more information see <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>.  \\n  \\n-   Formatting for printing. For more information see the <xref:System.Speech.Recognition.DisplayAttributes> class and its <xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A> property.\"\n  example:\n  - \"The following example shows a utility routine (`stringFromWordArray`) that generates strings. The strings contain lexical output (using <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>), normalized text (using <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>), or phonetic characters from the International Phonetic Alphabet (using <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>). Strings are formatted using <xref:System.Speech.Recognition.DisplayAttributes> objects obtained from the <xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A> property from a <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> of <xref:System.Speech.Recognition.RecognizedWordUnit> objects. The <xref:System.Speech.Recognition.RecognizedWordUnit> objects are obtained from the <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> property on the <xref:System.Speech.Recognition.RecognizedPhrase> object.  \\n  \\n```csharp  \\n  \\ninternal enum WordType   \\n{  \\n  Text,  \\n  Normalized = Text,  \\n  Lexical,  \\n  Pronunciation  \\n}  \\n```  \\n  \\n```csharp  \\ninternal static string stringFromWordArray(ReadOnlyCollection<RecognizedWordUnit> words, WordType type)   \\n{  \\n  string text = \\\"\\\";  \\n  foreach (RecognizedWordUnit word in words)   \\n  {  \\n    string wordText = \\\"\\\";  \\n    if (type == WordType.Text || type == WordType.Normalized)   \\n    {  \\n      wordText = word.Text;  \\n    }   \\n    else if (type == WordType.Lexical)   \\n    {  \\n      wordText = word.LexicalForm;  \\n    }   \\n    else if (type == WordType.Pronunciation)   \\n    {  \\n      wordText = word.Pronunciation;  \\n    }   \\n    else   \\n    {  \\n      throw new InvalidEnumArgumentException(String.Format(\\\"[0}: is not a valid input\\\", type));  \\n    }  \\n    // Use display attribute  \\n  \\n    if ((word.DisplayAttributes & DisplayAttributes.OneTrailingSpace) != 0)   \\n    {  \\n      wordText += \\\" \\\";  \\n    }  \\n    if ((word.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) != 0)  \\n    {  \\n      wordText += \\\"  \\\";  \\n    }  \\n    if ((word.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)   \\n    {  \\n      wordText = wordText.TrimStart();  \\n    }  \\n    if ((word.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)  \\n    {  \\n      wordText = wordText.TrimEnd();  \\n    }  \\n  \\n    text += wordText;  \\n  \\n  }  \\n  return text;  \\n}  \\n```\"\n  syntax:\n    content: public class RecognizedWordUnit\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  attributes: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Speech.Recognition/RecognizedWordUnit.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: kbridge\n  manager: ghogen\n- uid: System.Speech.Recognition.RecognizedWordUnit.#ctor(System.String,System.Single,System.String,System.String,System.Speech.Recognition.DisplayAttributes,System.TimeSpan,System.TimeSpan)\n  commentId: M:System.Speech.Recognition.RecognizedWordUnit.#ctor(System.String,System.Single,System.String,System.String,System.Speech.Recognition.DisplayAttributes,System.TimeSpan,System.TimeSpan)\n  id: '#ctor(System.String,System.Single,System.String,System.String,System.Speech.Recognition.DisplayAttributes,System.TimeSpan,System.TimeSpan)'\n  parent: System.Speech.Recognition.RecognizedWordUnit\n  langs:\n  - csharp\n  name: RecognizedWordUnit(String, Single, String, String, DisplayAttributes, TimeSpan, TimeSpan)\n  nameWithType: RecognizedWordUnit.RecognizedWordUnit(String, Single, String, String, DisplayAttributes, TimeSpan, TimeSpan)\n  fullName: RecognizedWordUnit.RecognizedWordUnit(String, Single, String, String, DisplayAttributes, TimeSpan, TimeSpan)\n  type: Constructor\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Recognition\n  summary: Initializes a new instance of the <xref href=\"System.Speech.Recognition.RecognizedWordUnit\"></xref> class.\n  remarks: \"If `text` or `pronunciation` are `null`, \\\"\\\", or <xref:System.String.Empty> and the <xref:System.Speech.Recognition.RecognizedWordUnit> is used in a recognition operation, the recognition engine will generate appropriate values in any output <xref:System.Speech.Recognition.RecognizedWordUnit> instance.  \\n  \\n Direct construction of <xref:System.Speech.Recognition.RecognizedWordUnit> instances is typically used only when emulating recognition operations using the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> methods of the <xref:System.Speech.Recognition.SpeechRecognitionEngine> class and the <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognize%2A> or <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync%2A> methods of the <xref:System.Speech.Recognition.SpeechRecognizer> class.  \\n  \\n For actual applications, do not directly construct <xref:System.Speech.Recognition.RecognizedWordUnit>, rather obtain it through the <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> property on the <xref:System.Speech.Recognition.RecognizedPhrase> object.\"\n  example:\n  - \"The following example is a somewhat contrived test of emulation, where new words are generated from the input and passed to the emulator, and then verified.  \\n  \\n```csharp  \\nprivate void _emulateAndVerify_Click(object sender, EventArgs e)   \\n{  \\n  char[] delimiterChars = { ' ', ',', '.', ':', ';', '\\\\t' };  \\n  string text = _emulateTextBox.Text;  \\n  string[] words = text.Split(delimiterChars);  \\n  \\n  RecognizedWordUnit[] InputWordUnits = new RecognizedWordUnit[words.Length];  \\n  for (int i = 0; i < words.Length; i++)   \\n  {  \\n    InputWordUnits[i] = new RecognizedWordUnit(  \\n        \\\"\\\",   \\n        0,   \\n        \\\"\\\",  \\n        words[i].ToLower(),   \\n        DisplayAttributes.OneTrailingSpace,   \\n        new TimeSpan(),   \\n        new TimeSpan());  \\n  }  \\n  \\n  RecognitionResult rec = _recognizer.EmulateRecognize(  \\n        InputWordUnits,   \\n        System.Globalization.CompareOptions.IgnoreCase);  \\n  if (rec == null)   \\n  {  \\n    MessageBox.Show(String.Format(\\\"Recognition emulation for {0} failed.\\\\n\\\", text));  \\n  }   \\n  else if (InputWordUnits.Length != rec.Words.Count)   \\n  {  \\n    MessageBox.Show(  \\n       String.Format(\\\"Length mismatch: Input was {0} words, Recognition has {1} words.\\\\n}\\\"));  \\n  }   \\n  else   \\n  {  \\n    for (int i = 0; i < InputWordUnits.Length; i++)   \\n    {  \\n  \\n      if (rec.Words[i].LexicalForm.ToLower() != InputWordUnits[i].LexicalForm.ToLower())   \\n      {  \\n        MessageBox.Show(  \\n          String.Format(\\\"Input word {0} \\\\\\\"{1}\\\\\\\" not found. Recognition output is {2}\\\",  \\n          i, InputWordUnits[i].LexicalForm, rec.Words[i].LexicalForm));  \\n        continue;  \\n      }  \\n    }  \\n  }  \\n}  \\n```\"\n  syntax:\n    content: public RecognizedWordUnit (string text, float confidence, string pronunciation, string lexicalForm, System.Speech.Recognition.DisplayAttributes displayAttributes, TimeSpan audioPosition, TimeSpan audioDuration);\n    parameters:\n    - id: text\n      type: System.String\n      description: \"The normalized text for a recognized word.  \\n  \\n This value can be `null`, \\\"\\\", or <xref href=\\\"System.String.Empty\\\"></xref>.\"\n    - id: confidence\n      type: System.Single\n      description: A `float` value from 0.0 through 1.0 indicating the certainty of word recognition.\n    - id: pronunciation\n      type: System.String\n      description: \"The phonetic spelling of a recognized word.  \\n  \\n This value can be `null`, \\\"\\\", or <xref href=\\\"System.String.Empty\\\"></xref>.\"\n    - id: lexicalForm\n      type: System.String\n      description: \"The unnormalized text for a recognized word.  \\n  \\n This argument is required and may not be `null`, \\\"\\\", or <xref href=\\\"System.String.Empty\\\"></xref>.\"\n    - id: displayAttributes\n      type: System.Speech.Recognition.DisplayAttributes\n      description: Defines the use of white space to display recognized words.\n    - id: audioPosition\n      type: System.TimeSpan\n      description: \"The location of the recognized word in the audio input stream.  \\n  \\n This value can be <xref href=\\\"System.TimeSpan.Zero\\\"></xref>.\"\n    - id: audioDuration\n      type: System.TimeSpan\n      description: \"The length of the audio input corresponding to the recognized word.  \\n  \\n This value can be <xref href=\\\"System.TimeSpan.Zero\\\"></xref>.\"\n  overload: System.Speech.Recognition.RecognizedWordUnit.#ctor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Speech.Recognition/RecognizedWordUnit.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: kbridge\n  manager: ghogen\n- uid: System.Speech.Recognition.RecognizedWordUnit.Confidence\n  commentId: P:System.Speech.Recognition.RecognizedWordUnit.Confidence\n  id: Confidence\n  parent: System.Speech.Recognition.RecognizedWordUnit\n  langs:\n  - csharp\n  name: Confidence\n  nameWithType: RecognizedWordUnit.Confidence\n  fullName: RecognizedWordUnit.Confidence\n  type: Property\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Recognition\n  summary: Gets a value, assigned by the recognizer, that represents the likelihood that a recognized word matches a given input.\n  remarks: \"Confidence scores do not indicate the absolute likelihood that a word was recognized correctly. Instead, confidence scores provide a mechanism for comparing the relative accuracy of multiple recognition alternates for a given input. This facilitates returning the most accurate recognition result. For example, if a recognized word has a confidence score of 0.8, this does not mean that the word has an 80% chance of being the correct match for the input.  It means that the word is more likely to be the correct match for the input than other results that have confidence scores less than 0.8.  \\n  \\n A confidence score on its own is not meaningful unless you have alternative results to compare against, either from the same recognition operation or from previous recognitions of the same input.  \\n  \\n The values returned by <xref:System.Speech.Recognition.RecognizedWordUnit.Confidence%2A> are relative and unique to each recognition engine. There is no definition of how confidence values between two different recognition engines compare, nor how the <xref:System.Speech.Recognition.RecognizedWordUnit.Confidence%2A> of individual <xref:System.Speech.Recognition.RecognizedWordUnit> objects define the <xref:System.Speech.Recognition.RecognizedPhrase.Confidence%2A> of a <xref:System.Speech.Recognition.RecognizedPhrase>.  \\n  \\n A speech recognition engine may assign a low confidence score to spoken input for various reasons, including background interference, inarticulate speech, or unanticipated words or word sequences. If your application is using a <xref:System.Speech.Recognition.SpeechRecognitionEngine> instance, you can modify the confidence level at which speech input is accepted or rejected with one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> methods. Confidence thresholds for the shared recognizer, managed by <xref:System.Speech.Recognition.SpeechRecognizer>, are associated with a user profile and stored in the Windows registry. Applications should not write changes to the registry for the properties of the shared recognizer.\"\n  syntax:\n    content: public float Confidence { get; }\n    return:\n      type: System.Single\n      description: A relative measure of the certainty of correct recognition for a word. The value is from 0.0 to 1.0, for low to high confidence, respectively.\n  overload: System.Speech.Recognition.RecognizedWordUnit.Confidence*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Speech.Recognition/RecognizedWordUnit.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: kbridge\n  manager: ghogen\n- uid: System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes\n  commentId: P:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes\n  id: DisplayAttributes\n  parent: System.Speech.Recognition.RecognizedWordUnit\n  langs:\n  - csharp\n  name: DisplayAttributes\n  nameWithType: RecognizedWordUnit.DisplayAttributes\n  fullName: RecognizedWordUnit.DisplayAttributes\n  type: Property\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Recognition\n  summary: Gets formatting information used to create the text output from the current <xref href=\"System.Speech.Recognition.RecognizedWordUnit\"></xref> instance.\n  remarks: \"The <xref:System.Speech.Recognition.DisplayAttributes> object returned by the <xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A> property specifies the leading and trailing spaces to be used with a given word, if any.  \\n  \\n For more information about how to use this formatting information, see the <xref:System.Speech.Recognition.DisplayAttributes> enumeration.\"\n  example:\n  - \"The following example shows a utility routine (`stringFromWordArray`) that generates a string that is formatted in one of three ways: lexically (using <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>), normalized (using <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>), or phonetically (using <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>). The text output is obtained from the <xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A> property on a <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> of <xref:System.Speech.Recognition.RecognizedWordUnit> objects, which is obtained from the <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> property on a <xref:System.Speech.Recognition.RecognizedPhrase> object.  \\n  \\n```csharp  \\n  \\ninternal enum WordType   \\n{  \\n  Text,  \\n  Normalized = Text,  \\n  Lexical,  \\n  Pronunciation  \\n}  \\n```  \\n  \\n```csharp  \\ninternal static string stringFromWordArray(  \\n        ReadOnlyCollection<RecognizedWordUnit> words,   \\n        WordType type)   \\n{  \\n  string text = \\\"\\\";  \\n  foreach (RecognizedWordUnit word in words)   \\n  {  \\n    string wordText = \\\"\\\";  \\n    if (type == WordType.Text || type == WordType.Normalized)   \\n    {  \\n      wordText = word.Text;  \\n    }   \\n    else if (type == WordType.Lexical)   \\n    {  \\n      wordText = word.LexicalForm;  \\n    }  \\n    else if (type == WordType.Pronunciation)   \\n    {  \\n       wordText = word.Pronunciation;  \\n    }   \\n    else   \\n    {  \\n      throw new InvalidEnumArgumentException(  \\n         String.Format(\\\"[0}: is not a valid input\\\", type));  \\n    }  \\n  \\n    // Use display attribute  \\n    if ((word.DisplayAttributes & DisplayAttributes.OneTrailingSpace) != 0)   \\n    {  \\n      wordText += \\\" \\\";  \\n    }  \\n    if ((word.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) != 0)  \\n    {  \\n      wordText += \\\"  \\\";  \\n    }  \\n    if ((word.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)   \\n    {  \\n      wordText = wordText.TrimStart();  \\n    }  \\n    if ((word.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)  \\n    {  \\n      wordText = wordText.TrimEnd();  \\n    }  \\n  \\n    text += wordText;  \\n  \\n  }  \\n  return text;  \\n}  \\n```\"\n  syntax:\n    content: public System.Speech.Recognition.DisplayAttributes DisplayAttributes { get; }\n    return:\n      type: System.Speech.Recognition.DisplayAttributes\n      description: Specifies the use of white space to display of the contents of a <xref href=\"System.Speech.Recognition.RecognizedWordUnit\"></xref> object.\n  overload: System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Speech.Recognition/RecognizedWordUnit.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: kbridge\n  manager: ghogen\n- uid: System.Speech.Recognition.RecognizedWordUnit.LexicalForm\n  commentId: P:System.Speech.Recognition.RecognizedWordUnit.LexicalForm\n  id: LexicalForm\n  parent: System.Speech.Recognition.RecognizedWordUnit\n  langs:\n  - csharp\n  name: LexicalForm\n  nameWithType: RecognizedWordUnit.LexicalForm\n  fullName: RecognizedWordUnit.LexicalForm\n  type: Property\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Recognition\n  summary: Gets the unnormalized text of a recognized word.\n  remarks: \"In most cases the values returned by <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A> and <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A> are identical. However, recognition engines may use speech normalization to return more user-friendly or colloquial text representations of audio input.  \\n  \\n Speech normalization is the use of special constructs or symbols to express speech in writing. For example, normalization can replace the spoken words \\\"a dollar and sixteen cents\\\" with \\\"$1.16\\\" in output text.\"\n  example:\n  - \"The following example shows a utility routine that generates text in one of three formats: lexical (using <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>), normalized (using <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>), and phonetic (using <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>). The text output is obtained from a <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> of <xref:System.Speech.Recognition.RecognizedWordUnit> objects, which is obtained from the <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> property on the <xref:System.Speech.Recognition.RecognizedPhrase> object.  \\n  \\n```csharp  \\n  \\ninternal enum WordType   \\n{  \\n  Text,  \\n  Normalized = Text,  \\n  Lexical,  \\n  Pronunciation  \\n}  \\n```  \\n  \\n```csharp  \\ninternal static string stringFromWordArray(  \\n         ReadOnlyCollection<RecognizedWordUnit> words,   \\n         WordType type)   \\n{  \\n  string text = \\\"\\\";  \\n  foreach (RecognizedWordUnit word in words)   \\n  {  \\n    string wordText = \\\"\\\";  \\n    if (type == WordType.Text || type == WordType.Normalized)   \\n    {  \\n      wordText = word.Text;  \\n    }   \\n    else if (type == WordType.Lexical)   \\n    {  \\n      wordText = word.LexicalForm;  \\n    }   \\n    else if (type == WordType.Pronunciation)   \\n    {  \\n      wordText = word.Pronunciation;  \\n    }   \\n    else   \\n    {  \\n      throw new InvalidEnumArgumentException(  \\n          String.Format(\\\"[0}: is not a valid input\\\", type));  \\n    }  \\n  \\n    // Use display attribute  \\n    if ((word.DisplayAttributes & DisplayAttributes.OneTrailingSpace) != 0)   \\n    {  \\n      wordText += \\\" \\\";  \\n    }  \\n    if ((word.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) != 0)  \\n    {  \\n      wordText += \\\"  \\\";  \\n    }  \\n    if ((word.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)   \\n    {  \\n      wordText = wordText.TrimStart();  \\n    }  \\n    if ((word.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)  \\n    {  \\n    wordText = wordText.TrimEnd();  \\n    }  \\n  \\n    text += wordText;  \\n  \\n  }  \\n  return text;  \\n}  \\n```\"\n  syntax:\n    content: public string LexicalForm { get; }\n    return:\n      type: System.String\n      description: Returns a <xref href=\"System.String\"></xref> containing the text of a recognized word, without any normalization.\n  overload: System.Speech.Recognition.RecognizedWordUnit.LexicalForm*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Speech.Recognition/RecognizedWordUnit.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: kbridge\n  manager: ghogen\n- uid: System.Speech.Recognition.RecognizedWordUnit.Pronunciation\n  commentId: P:System.Speech.Recognition.RecognizedWordUnit.Pronunciation\n  id: Pronunciation\n  parent: System.Speech.Recognition.RecognizedWordUnit\n  langs:\n  - csharp\n  name: Pronunciation\n  nameWithType: RecognizedWordUnit.Pronunciation\n  fullName: RecognizedWordUnit.Pronunciation\n  type: Property\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Recognition\n  summary: Gets the phonetic spelling of a recognized word.\n  remarks: \"The contents of <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A> indicate which pronunciation the speech recognition engine used to match speech input to one of its loaded <xref:System.Speech.Recognition.Grammar> objects. Pronunciations may be defined in the speech recognition engine's internal lexicon, in a lexicon document that is linked from a recognition grammar in a loaded <xref:System.Speech.Recognition.Grammar> object, or inline in a recognition grammar in a loaded <xref:System.Speech.Recognition.Grammar> object. A speech recognition engine may also create pronunciations for uncommon words whose pronunciations are not defined in a lexicon or grammar to which the speech recognition engine currently has access.  \\n  \\n Many Windows-based Unicode fonts, such as Courier New, support the display of IPA strings. For more information, see [International Phonetic Alphabet](http://go.microsoft.com/fwlink/?LinkId=58363).\"\n  example:\n  - \"The following example shows a utility routine that generates a string with one of three possible formats: lexical (using <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>), normalized (using <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>), and phonetic (using <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>). The text output is obtained from a <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> of <xref:System.Speech.Recognition.RecognizedWordUnit> objects, which is obtained from the <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> property on the <xref:System.Speech.Recognition.RecognizedPhrase> object.  \\n  \\n```csharp  \\n  \\ninternal enum WordType   \\n{  \\n  Text,  \\n  Normalized = Text,  \\n  Lexical,  \\n  Pronunciation  \\n}  \\n```  \\n  \\n```csharp  \\ninternal static string stringFromWordArray(  \\n          ReadOnlyCollection<RecognizedWordUnit> words,   \\n          WordType type)   \\n{  \\n  string text = \\\"\\\";  \\n  foreach (RecognizedWordUnit word in words)   \\n  {  \\n    string wordText = \\\"\\\";  \\n    if (type == WordType.Text || type == WordType.Normalized)   \\n    {  \\n      wordText = word.Text;  \\n    }   \\n    else if (type == WordType.Lexical)   \\n    {  \\n      wordText = word.LexicalForm;  \\n    }   \\n    else if (type == WordType.Pronunciation)   \\n    {  \\n      wordText = word.Pronunciation;  \\n    }   \\n    else   \\n    {  \\n      throw new InvalidEnumArgumentException(  \\n          String.Format(\\\"[0}: is not a valid input\\\", type));  \\n    }  \\n    // Use display attribute  \\n  \\n    if ((word.DisplayAttributes & DisplayAttributes.OneTrailingSpace) != 0)   \\n    {  \\n      wordText += \\\" \\\";  \\n    }  \\n    if ((word.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) != 0)   \\n    {  \\n      wordText += \\\"  \\\";  \\n    }  \\n    if ((word.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)   \\n    {  \\n      wordText = wordText.TrimStart();  \\n    }  \\n    if ((word.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)   \\n    {  \\n      wordText = wordText.TrimEnd();  \\n    }  \\n  \\n    text += wordText;  \\n  }  \\n  return text;  \\n}  \\n```\"\n  syntax:\n    content: public string Pronunciation { get; }\n    return:\n      type: System.String\n      description: A string of characters from a supported phonetic alphabet, such as the International Phonetic Alphabet (IPA) or the Universal Phone Set (UPS).\n  overload: System.Speech.Recognition.RecognizedWordUnit.Pronunciation*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Speech.Recognition/RecognizedWordUnit.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: kbridge\n  manager: ghogen\n- uid: System.Speech.Recognition.RecognizedWordUnit.Text\n  commentId: P:System.Speech.Recognition.RecognizedWordUnit.Text\n  id: Text\n  parent: System.Speech.Recognition.RecognizedWordUnit\n  langs:\n  - csharp\n  name: Text\n  nameWithType: RecognizedWordUnit.Text\n  fullName: RecognizedWordUnit.Text\n  type: Property\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Recognition\n  summary: Gets the normalized text for a recognized word.\n  remarks: \"In most cases the values returned by <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A> and <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A> will be identical. However, recognition engines may use speech normalization to return more user-friendly or colloquial text representations of audio input.  \\n  \\n Speech normalization is the use of special constructs or symbols to express speech in writing. For example, normalization can replace the spoken words \\\"a dollar and sixteen cents\\\" with \\\"$1.16\\\" in output text.\"\n  example:\n  - \"The following example shows a utility routine that generates a string in one of three formats: lexical (using <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>), normalized (using <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>), and phonetic (using <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>). The text output is obtained from a <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> of <xref:System.Speech.Recognition.RecognizedWordUnit> objects, which is obtained from the <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> property on the <xref:System.Speech.Recognition.RecognizedPhrase> object.  \\n  \\n```csharp  \\n  \\ninternal enum WordType   \\n{  \\n  Text,  \\n  Normalized = Text,  \\n  Lexical,  \\n  Pronunciation  \\n}  \\n```  \\n  \\n```csharp  \\ninternal static string stringFromWordArray(  \\n          ReadOnlyCollection<RecognizedWordUnit> words,   \\n          WordType type)   \\n{  \\n  string text = \\\"\\\";  \\n  foreach (RecognizedWordUnit word in words)   \\n  {  \\n    string wordText = \\\"\\\";  \\n    if (type == WordType.Text || type == WordType.Normalized)   \\n    {  \\n      wordText = word.Text;  \\n    }   \\n    else if (type == WordType.Lexical)   \\n    {  \\n      wordText = word.LexicalForm;  \\n    }   \\n    else if (type == WordType.Pronunciation)   \\n    {  \\n      wordText = word.Pronunciation;  \\n    }   \\n    else   \\n    {  \\n      throw new InvalidEnumArgumentException(  \\n           String.Format(\\\"[0}: is not a valid input\\\", type));  \\n    }  \\n  \\n    // Use display attribute  \\n    if ((word.DisplayAttributes & DisplayAttributes.OneTrailingSpace) != 0)   \\n    {  \\n      wordText += \\\" \\\";  \\n    }  \\n    if ((word.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) != 0)   \\n    {  \\n      wordText += \\\"  \\\";  \\n    }  \\n    if ((word.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)   \\n    {  \\n      wordText = wordText.TrimStart();  \\n    }  \\n    if ((word.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)   \\n    {  \\n      wordText = wordText.TrimEnd();  \\n    }  \\n  \\n    text += wordText;  \\n  \\n  }  \\n  return text;  \\n}  \\n```\"\n  syntax:\n    content: public string Text { get; }\n    return:\n      type: System.String\n      description: A string that contains the normalized text output for a given input word.\n  overload: System.Speech.Recognition.RecognizedWordUnit.Text*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Speech.Recognition/RecognizedWordUnit.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: kbridge\n  manager: ghogen\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Speech.Recognition.RecognizedWordUnit.#ctor(System.String,System.Single,System.String,System.String,System.Speech.Recognition.DisplayAttributes,System.TimeSpan,System.TimeSpan)\n  parent: System.Speech.Recognition.RecognizedWordUnit\n  isExternal: false\n  name: RecognizedWordUnit(String, Single, String, String, DisplayAttributes, TimeSpan, TimeSpan)\n  nameWithType: RecognizedWordUnit.RecognizedWordUnit(String, Single, String, String, DisplayAttributes, TimeSpan, TimeSpan)\n  fullName: RecognizedWordUnit.RecognizedWordUnit(String, Single, String, String, DisplayAttributes, TimeSpan, TimeSpan)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Single\n  parent: System\n  isExternal: false\n  name: Single\n  nameWithType: Single\n  fullName: System.Single\n- uid: System.Speech.Recognition.DisplayAttributes\n  parent: System.Speech.Recognition\n  isExternal: false\n  name: DisplayAttributes\n  nameWithType: DisplayAttributes\n  fullName: System.Speech.Recognition.DisplayAttributes\n- uid: System.TimeSpan\n  parent: System\n  isExternal: false\n  name: TimeSpan\n  nameWithType: TimeSpan\n  fullName: System.TimeSpan\n- uid: System.Speech.Recognition.RecognizedWordUnit.Confidence\n  parent: System.Speech.Recognition.RecognizedWordUnit\n  isExternal: false\n  name: Confidence\n  nameWithType: RecognizedWordUnit.Confidence\n  fullName: RecognizedWordUnit.Confidence\n- uid: System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes\n  parent: System.Speech.Recognition.RecognizedWordUnit\n  isExternal: false\n  name: DisplayAttributes\n  nameWithType: RecognizedWordUnit.DisplayAttributes\n  fullName: RecognizedWordUnit.DisplayAttributes\n- uid: System.Speech.Recognition.RecognizedWordUnit.LexicalForm\n  parent: System.Speech.Recognition.RecognizedWordUnit\n  isExternal: false\n  name: LexicalForm\n  nameWithType: RecognizedWordUnit.LexicalForm\n  fullName: RecognizedWordUnit.LexicalForm\n- uid: System.Speech.Recognition.RecognizedWordUnit.Pronunciation\n  parent: System.Speech.Recognition.RecognizedWordUnit\n  isExternal: false\n  name: Pronunciation\n  nameWithType: RecognizedWordUnit.Pronunciation\n  fullName: RecognizedWordUnit.Pronunciation\n- uid: System.Speech.Recognition.RecognizedWordUnit.Text\n  parent: System.Speech.Recognition.RecognizedWordUnit\n  isExternal: false\n  name: Text\n  nameWithType: RecognizedWordUnit.Text\n  fullName: RecognizedWordUnit.Text\n- uid: System.Speech.Recognition.RecognizedWordUnit.#ctor*\n  parent: System.Speech.Recognition.RecognizedWordUnit\n  isExternal: false\n  name: RecognizedWordUnit\n  nameWithType: RecognizedWordUnit.RecognizedWordUnit\n  fullName: RecognizedWordUnit.RecognizedWordUnit\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Speech.Recognition/RecognizedWordUnit.xml\n- uid: System.Speech.Recognition.RecognizedWordUnit.Confidence*\n  parent: System.Speech.Recognition.RecognizedWordUnit\n  isExternal: false\n  name: Confidence\n  nameWithType: RecognizedWordUnit.Confidence\n  fullName: RecognizedWordUnit.Confidence\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Speech.Recognition/RecognizedWordUnit.xml\n- uid: System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes*\n  parent: System.Speech.Recognition.RecognizedWordUnit\n  isExternal: false\n  name: DisplayAttributes\n  nameWithType: RecognizedWordUnit.DisplayAttributes\n  fullName: RecognizedWordUnit.DisplayAttributes\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Speech.Recognition/RecognizedWordUnit.xml\n- uid: System.Speech.Recognition.RecognizedWordUnit.LexicalForm*\n  parent: System.Speech.Recognition.RecognizedWordUnit\n  isExternal: false\n  name: LexicalForm\n  nameWithType: RecognizedWordUnit.LexicalForm\n  fullName: RecognizedWordUnit.LexicalForm\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Speech.Recognition/RecognizedWordUnit.xml\n- uid: System.Speech.Recognition.RecognizedWordUnit.Pronunciation*\n  parent: System.Speech.Recognition.RecognizedWordUnit\n  isExternal: false\n  name: Pronunciation\n  nameWithType: RecognizedWordUnit.Pronunciation\n  fullName: RecognizedWordUnit.Pronunciation\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Speech.Recognition/RecognizedWordUnit.xml\n- uid: System.Speech.Recognition.RecognizedWordUnit.Text*\n  parent: System.Speech.Recognition.RecognizedWordUnit\n  isExternal: false\n  name: Text\n  nameWithType: RecognizedWordUnit.Text\n  fullName: RecognizedWordUnit.Text\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Speech.Recognition/RecognizedWordUnit.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n"}