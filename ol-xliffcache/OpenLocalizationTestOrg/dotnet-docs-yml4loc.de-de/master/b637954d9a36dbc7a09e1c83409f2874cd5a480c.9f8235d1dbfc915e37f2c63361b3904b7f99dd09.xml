{"nodes":[{"content":"Selects a member from a list of candidates, and performs type conversion from actual argument type to formal argument type.","nodes":[{"pos":[0,123],"content":"Selects a member from a list of candidates, and performs type conversion from actual argument type to formal argument type.","nodes":[{"content":"Selects a member from a list of candidates, and performs type conversion from actual argument type to formal argument type.","pos":[0,123]}]}],"pos":[1370,1494],"yaml":true},{"content":"Implementations of the <xref:System.Reflection.Binder> class are used by methods such as <xref:System.Type.InvokeMember%2A?displayProperty=fullName>, which selects from a set of possible members to execute, based on a set of parameter types and argument values; <xref:System.Type.GetMethod%2A?displayProperty=fullName>, which selects a method based on parameter types; and so on.  \n  \n A default implementation of the <xref:System.Reflection.Binder> class is provided by the <xref:System.Type.DefaultBinder%2A?displayProperty=fullName> property.","nodes":[{"pos":[0,379],"content":"Implementations of the <xref:System.Reflection.Binder> class are used by methods such as <xref:System.Type.InvokeMember%2A?displayProperty=fullName>, which selects from a set of possible members to execute, based on a set of parameter types and argument values; <xref:System.Type.GetMethod%2A?displayProperty=fullName>, which selects a method based on parameter types; and so on.","nodes":[{"content":"Implementations of the <ph id=\"ph1\">&lt;xref:System.Reflection.Binder&gt;</ph> class are used by methods such as <ph id=\"ph2\">&lt;xref:System.Type.InvokeMember%2A?displayProperty=fullName&gt;</ph>, which selects from a set of possible members to execute, based on a set of parameter types and argument values; <ph id=\"ph3\">&lt;xref:System.Type.GetMethod%2A?displayProperty=fullName&gt;</ph>, which selects a method based on parameter types; and so on.","pos":[0,379],"source":"Implementations of the <xref:System.Reflection.Binder> class are used by methods such as <xref:System.Type.InvokeMember%2A?displayProperty=fullName>, which selects from a set of possible members to execute, based on a set of parameter types and argument values; <xref:System.Type.GetMethod%2A?displayProperty=fullName>, which selects a method based on parameter types; and so on."}]},{"pos":[386,545],"content":"A default implementation of the <xref:System.Reflection.Binder> class is provided by the <xref:System.Type.DefaultBinder%2A?displayProperty=fullName> property.","nodes":[{"content":"A default implementation of the <ph id=\"ph1\">&lt;xref:System.Reflection.Binder&gt;</ph> class is provided by the <ph id=\"ph2\">&lt;xref:System.Type.DefaultBinder%2A?displayProperty=fullName&gt;</ph> property.","pos":[0,159],"source":"A default implementation of the <xref:System.Reflection.Binder> class is provided by the <xref:System.Type.DefaultBinder%2A?displayProperty=fullName> property."}]}],"pos":[1505,2055],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Reflection.Binder\"></xref> class.","nodes":[{"pos":[0,86],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Binder\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.Reflection.Binder\"></xref> class."}],"pos":[4317,4404],"yaml":true},{"content":"This constructor is called by the constructors of derived classes, to initialize state in this type.","nodes":[{"pos":[0,100],"content":"This constructor is called by the constructors of derived classes, to initialize state in this type.","nodes":[{"content":"This constructor is called by the constructors of derived classes, to initialize state in this type.","pos":[0,100]}]}],"pos":[4415,4516],"yaml":true,"extradata":"MT"},{"content":"Selects a field from the given set of fields, based on the specified criteria.","nodes":[{"pos":[0,78],"content":"Selects a field from the given set of fields, based on the specified criteria.","nodes":[{"content":"Selects a field from the given set of fields, based on the specified criteria.","pos":[0,78]}]}],"pos":[6206,6285],"yaml":true},{"content":"If `bindingAttr` does not include <xref:System.Reflection.BindingFlags?displayProperty=fullName>, the default binder implementation provided by <xref:System.Type.DefaultBinder%2A?displayProperty=fullName> simply returns the first element of `match`. No selection is done.  \n  \n This method controls the binding provided by <xref:System.Type.InvokeMember%2A?displayProperty=fullName>.","nodes":[{"pos":[0,271],"content":"If `bindingAttr` does not include <xref:System.Reflection.BindingFlags?displayProperty=fullName>, the default binder implementation provided by <xref:System.Type.DefaultBinder%2A?displayProperty=fullName> simply returns the first element of `match`. No selection is done.","nodes":[{"content":"If <ph id=\"ph1\">`bindingAttr`</ph> does not include <ph id=\"ph2\">&lt;xref:System.Reflection.BindingFlags?displayProperty=fullName&gt;</ph>, the default binder implementation provided by <ph id=\"ph3\">&lt;xref:System.Type.DefaultBinder%2A?displayProperty=fullName&gt;</ph> simply returns the first element of <ph id=\"ph4\">`match`</ph>.","pos":[0,249],"source":"If `bindingAttr` does not include <xref:System.Reflection.BindingFlags?displayProperty=fullName>, the default binder implementation provided by <xref:System.Type.DefaultBinder%2A?displayProperty=fullName> simply returns the first element of `match`."},{"content":"No selection is done.","pos":[250,271]}]},{"pos":[278,383],"content":"This method controls the binding provided by <xref:System.Type.InvokeMember%2A?displayProperty=fullName>.","nodes":[{"content":"This method controls the binding provided by <ph id=\"ph1\">&lt;xref:System.Type.InvokeMember%2A?displayProperty=fullName&gt;</ph>.","pos":[0,105],"source":"This method controls the binding provided by <xref:System.Type.InvokeMember%2A?displayProperty=fullName>."}]}],"pos":[6296,6684],"yaml":true,"extradata":"MT"},{"content":"A bitwise combination of <xref href=\"System.Reflection.BindingFlags\"></xref> values.","nodes":[{"pos":[0,84],"content":"A bitwise combination of <ph id=\"ph1\">&lt;xref href=\"System.Reflection.BindingFlags\"&gt;&lt;/xref&gt;</ph> values.","source":"A bitwise combination of <xref href=\"System.Reflection.BindingFlags\"></xref> values."}],"pos":[7002,7087],"yaml":true},{"content":"The set of fields that are candidates for matching. For example, when a <xref href=\"System.Reflection.Binder\"></xref> object is used by <xref href=\"System.Type.InvokeMember*\"></xref>, this parameter specifies the set of fields that reflection has determined to be possible matches, typically because they have the correct member name. The default implementation provided by <xref href=\"System.Type.DefaultBinder\"></xref> changes the order of this array.","nodes":[{"pos":[0,453],"content":"The set of fields that are candidates for matching. For example, when a <xref href=\"System.Reflection.Binder\"></xref> object is used by <xref href=\"System.Type.InvokeMember*\"></xref>, this parameter specifies the set of fields that reflection has determined to be possible matches, typically because they have the correct member name. The default implementation provided by <xref href=\"System.Type.DefaultBinder\"></xref> changes the order of this array.","nodes":[{"content":"The set of fields that are candidates for matching.","pos":[0,51]},{"content":"For example, when a <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Binder\"&gt;&lt;/xref&gt;</ph> object is used by <ph id=\"ph2\">&lt;xref href=\"System.Type.InvokeMember*\"&gt;&lt;/xref&gt;</ph>, this parameter specifies the set of fields that reflection has determined to be possible matches, typically because they have the correct member name.","pos":[52,334],"source":" For example, when a <xref href=\"System.Reflection.Binder\"></xref> object is used by <xref href=\"System.Type.InvokeMember*\"></xref>, this parameter specifies the set of fields that reflection has determined to be possible matches, typically because they have the correct member name."},{"content":"The default implementation provided by <ph id=\"ph1\">&lt;xref href=\"System.Type.DefaultBinder\"&gt;&lt;/xref&gt;</ph> changes the order of this array.","pos":[335,453],"source":" The default implementation provided by <xref href=\"System.Type.DefaultBinder\"></xref> changes the order of this array."}]}],"pos":[7164,7618],"yaml":true},{"content":"The field value used to locate a matching field.","nodes":[{"pos":[0,48],"content":"The field value used to locate a matching field.","nodes":[{"content":"The field value used to locate a matching field.","pos":[0,48]}]}],"pos":[7679,7728],"yaml":true},{"content":"An instance of <xref href=\"System.Globalization.CultureInfo\"></xref> that is used to control the coercion of data types, in binder implementations that coerce types. If <code>culture</code> is `null`, the <xref href=\"System.Globalization.CultureInfo\"></xref> for the current thread is used.  \n  \n Note   For example, if a binder implementation allows coercion of string values to numeric types, this parameter is necessary to convert a `String` that represents 1000 to a `Double` value, because 1000 is represented differently by different cultures. The default binder does not do such string coercions.","nodes":[{"pos":[0,290],"content":"An instance of <xref href=\"System.Globalization.CultureInfo\"></xref> that is used to control the coercion of data types, in binder implementations that coerce types. If <code>culture</code> is `null`, the <xref href=\"System.Globalization.CultureInfo\"></xref> for the current thread is used.","nodes":[{"content":"An instance of <ph id=\"ph1\">&lt;xref href=\"System.Globalization.CultureInfo\"&gt;&lt;/xref&gt;</ph> that is used to control the coercion of data types, in binder implementations that coerce types.","pos":[0,165],"source":"An instance of <xref href=\"System.Globalization.CultureInfo\"></xref> that is used to control the coercion of data types, in binder implementations that coerce types."},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">culture</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">`null`</ph>, the <ph id=\"ph3\">&lt;xref href=\"System.Globalization.CultureInfo\"&gt;&lt;/xref&gt;</ph> for the current thread is used.","pos":[166,290],"source":" If <code>culture</code> is `null`, the <xref href=\"System.Globalization.CultureInfo\"></xref> for the current thread is used."}]},{"pos":[297,603],"content":"Note   For example, if a binder implementation allows coercion of string values to numeric types, this parameter is necessary to convert a `String` that represents 1000 to a `Double` value, because 1000 is represented differently by different cultures. The default binder does not do such string coercions.","nodes":[{"content":"Note   For example, if a binder implementation allows coercion of string values to numeric types, this parameter is necessary to convert a <ph id=\"ph1\">`String`</ph> that represents 1000 to a <ph id=\"ph2\">`Double`</ph> value, because 1000 is represented differently by different cultures.","pos":[0,252],"source":"Note   For example, if a binder implementation allows coercion of string values to numeric types, this parameter is necessary to convert a `String` that represents 1000 to a `Double` value, because 1000 is represented differently by different cultures."},{"content":"The default binder does not do such string coercions.","pos":[253,306]}]}],"pos":[7810,8422],"yaml":true},{"content":"The matching field.","nodes":[{"pos":[0,19],"content":"The matching field.","nodes":[{"content":"The matching field.","pos":[0,19]}]}],"pos":[8493,8513],"yaml":true},{"content":"For the default binder, <code>bindingAttr</code> includes <xref href=\"System.Reflection.BindingFlags.SetField\"></xref>, and <code>match</code> contains multiple fields that are equally good matches for <code>value</code>. For example, <code>value</code> contains a <code>MyClass</code> object that implements the <code>IMyClass</code> interface, and <code>match</code> contains a field of type <code>MyClass</code> and a field of type <code>IMyClass</code>.","nodes":[{"pos":[0,457],"content":"For the default binder, <code>bindingAttr</code> includes <xref href=\"System.Reflection.BindingFlags.SetField\"></xref>, and <code>match</code> contains multiple fields that are equally good matches for <code>value</code>. For example, <code>value</code> contains a <code>MyClass</code> object that implements the <code>IMyClass</code> interface, and <code>match</code> contains a field of type <code>MyClass</code> and a field of type <code>IMyClass</code>.","nodes":[{"content":"For the default binder, <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">bindingAttr</ph><ept id=\"p1\">&lt;/code&gt;</ept> includes <ph id=\"ph2\">&lt;xref href=\"System.Reflection.BindingFlags.SetField\"&gt;&lt;/xref&gt;</ph>, and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">match</ph><ept id=\"p2\">&lt;/code&gt;</ept> contains multiple fields that are equally good matches for <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph4\">value</ph><ept id=\"p3\">&lt;/code&gt;</ept>.","pos":[0,221],"source":"For the default binder, <code>bindingAttr</code> includes <xref href=\"System.Reflection.BindingFlags.SetField\"></xref>, and <code>match</code> contains multiple fields that are equally good matches for <code>value</code>."},{"content":"For example, <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> contains a <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">MyClass</ph><ept id=\"p2\">&lt;/code&gt;</ept> object that implements the <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph3\">IMyClass</ph><ept id=\"p3\">&lt;/code&gt;</ept> interface, and <bpt id=\"p4\">&lt;code&gt;</bpt><ph id=\"ph4\">match</ph><ept id=\"p4\">&lt;/code&gt;</ept> contains a field of type <bpt id=\"p5\">&lt;code&gt;</bpt><ph id=\"ph5\">MyClass</ph><ept id=\"p5\">&lt;/code&gt;</ept> and a field of type <bpt id=\"p6\">&lt;code&gt;</bpt><ph id=\"ph6\">IMyClass</ph><ept id=\"p6\">&lt;/code&gt;</ept>.","pos":[222,457],"source":" For example, <code>value</code> contains a <code>MyClass</code> object that implements the <code>IMyClass</code> interface, and <code>match</code> contains a field of type <code>MyClass</code> and a field of type <code>IMyClass</code>."}]}],"pos":[8705,9163],"yaml":true},{"content":"For the default binder, <code>bindingAttr</code> includes <xref href=\"System.Reflection.BindingFlags.SetField\"></xref>, and <code>match</code> contains no fields that can accept <code>value</code>.","nodes":[{"pos":[0,197],"content":"For the default binder, <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">bindingAttr</ph><ept id=\"p1\">&lt;/code&gt;</ept> includes <ph id=\"ph2\">&lt;xref href=\"System.Reflection.BindingFlags.SetField\"&gt;&lt;/xref&gt;</ph>, and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">match</ph><ept id=\"p2\">&lt;/code&gt;</ept> contains no fields that can accept <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph4\">value</ph><ept id=\"p3\">&lt;/code&gt;</ept>.","source":"For the default binder, <code>bindingAttr</code> includes <xref href=\"System.Reflection.BindingFlags.SetField\"></xref>, and <code>match</code> contains no fields that can accept <code>value</code>."}],"pos":[9265,9463],"yaml":true},{"content":"For the default binder, <code>bindingAttr</code> includes <xref href=\"System.Reflection.BindingFlags.SetField\"></xref>, and <code>match</code> is `null` or an empty array.  \n  \n -or-  \n  \n <code>bindingAttr</code> includes <xref href=\"System.Reflection.BindingFlags.SetField\"></xref>, and <code>value</code> is `null`.","nodes":[{"pos":[0,171],"content":"For the default binder, <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">bindingAttr</ph><ept id=\"p1\">&lt;/code&gt;</ept> includes <ph id=\"ph2\">&lt;xref href=\"System.Reflection.BindingFlags.SetField\"&gt;&lt;/xref&gt;</ph>, and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">match</ph><ept id=\"p2\">&lt;/code&gt;</ept> is <ph id=\"ph4\">`null`</ph> or an empty array.","source":"For the default binder, <code>bindingAttr</code> includes <xref href=\"System.Reflection.BindingFlags.SetField\"></xref>, and <code>match</code> is `null` or an empty array."},{"pos":[178,182],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[189,318],"content":"<ph id=\"ph1\">&lt;code&gt;bindingAttr&lt;/code&gt;</ph> includes <ph id=\"ph2\">&lt;xref href=\"System.Reflection.BindingFlags.SetField\"&gt;&lt;/xref&gt;</ph>, and <ph id=\"ph3\">&lt;code&gt;value&lt;/code&gt;</ph> is <ph id=\"ph4\">`null`</ph>.","source":"<code>bindingAttr</code> includes <xref href=\"System.Reflection.BindingFlags.SetField\"></xref>, and <code>value</code> is `null`."}],"pos":[9567,9896],"yaml":true},{"content":"Selects a method to invoke from the given set of methods, based on the supplied arguments.","nodes":[{"pos":[0,90],"content":"Selects a method to invoke from the given set of methods, based on the supplied arguments.","nodes":[{"content":"Selects a method to invoke from the given set of methods, based on the supplied arguments.","pos":[0,90]}]}],"pos":[11813,11904],"yaml":true},{"content":"The default binder takes into account both parameters that have values and `params` arrays (`ParamArray` arrays in Visual Basic). Thus, it is possible to find a match in cases where `args` and `match` do not contain the same number of elements.  \n  \n The binder enables a client to map the array of arguments back to its original form if the argument array has been manipulated by <xref:System.Reflection.Binder.BindToMethod%2A>. Use this remap capability to get back by-reference arguments when such arguments are present. When you pass arguments by name, the binder reorders the argument array. The `state` parameter keeps track of argument reordering, thus enabling the binder's <xref:System.Reflection.Binder.ReorderArgumentArray%2A> method to reorder the argument array to its original form.  \n  \n The <xref:System.Reflection.Binder.BindToMethod%2A> method is used by the <xref:System.Type.InvokeMember%2A?displayProperty=fullName> method.","nodes":[{"pos":[0,244],"content":"The default binder takes into account both parameters that have values and `params` arrays (`ParamArray` arrays in Visual Basic). Thus, it is possible to find a match in cases where `args` and `match` do not contain the same number of elements.","nodes":[{"content":"The default binder takes into account both parameters that have values and <ph id=\"ph1\">`params`</ph> arrays (<ph id=\"ph2\">`ParamArray`</ph> arrays in Visual Basic).","pos":[0,129],"source":"The default binder takes into account both parameters that have values and `params` arrays (`ParamArray` arrays in Visual Basic)."},{"content":"Thus, it is possible to find a match in cases where <ph id=\"ph1\">`args`</ph> and <ph id=\"ph2\">`match`</ph> do not contain the same number of elements.","pos":[130,244],"source":" Thus, it is possible to find a match in cases where `args` and `match` do not contain the same number of elements."}]},{"pos":[251,796],"content":"The binder enables a client to map the array of arguments back to its original form if the argument array has been manipulated by <xref:System.Reflection.Binder.BindToMethod%2A>. Use this remap capability to get back by-reference arguments when such arguments are present. When you pass arguments by name, the binder reorders the argument array. The `state` parameter keeps track of argument reordering, thus enabling the binder's <xref:System.Reflection.Binder.ReorderArgumentArray%2A> method to reorder the argument array to its original form.","nodes":[{"content":"The binder enables a client to map the array of arguments back to its original form if the argument array has been manipulated by <ph id=\"ph1\">&lt;xref:System.Reflection.Binder.BindToMethod%2A&gt;</ph>.","pos":[0,178],"source":"The binder enables a client to map the array of arguments back to its original form if the argument array has been manipulated by <xref:System.Reflection.Binder.BindToMethod%2A>."},{"content":"Use this remap capability to get back by-reference arguments when such arguments are present.","pos":[179,272]},{"content":"When you pass arguments by name, the binder reorders the argument array.","pos":[273,345]},{"content":"The <ph id=\"ph1\">`state`</ph> parameter keeps track of argument reordering, thus enabling the binder's <ph id=\"ph2\">&lt;xref:System.Reflection.Binder.ReorderArgumentArray%2A&gt;</ph> method to reorder the argument array to its original form.","pos":[346,545],"source":" The `state` parameter keeps track of argument reordering, thus enabling the binder's <xref:System.Reflection.Binder.ReorderArgumentArray%2A> method to reorder the argument array to its original form."}]},{"pos":[803,944],"content":"The <xref:System.Reflection.Binder.BindToMethod%2A> method is used by the <xref:System.Type.InvokeMember%2A?displayProperty=fullName> method.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Reflection.Binder.BindToMethod%2A&gt;</ph> method is used by the <ph id=\"ph2\">&lt;xref:System.Type.InvokeMember%2A?displayProperty=fullName&gt;</ph> method.","pos":[0,141],"source":"The <xref:System.Reflection.Binder.BindToMethod%2A> method is used by the <xref:System.Type.InvokeMember%2A?displayProperty=fullName> method."}]}],"pos":[11915,12866],"yaml":true,"extradata":"MT"},{"content":"A bitwise combination of <xref href=\"System.Reflection.BindingFlags\"></xref> values.","nodes":[{"pos":[0,84],"content":"A bitwise combination of <ph id=\"ph1\">&lt;xref href=\"System.Reflection.BindingFlags\"&gt;&lt;/xref&gt;</ph> values.","source":"A bitwise combination of <xref href=\"System.Reflection.BindingFlags\"></xref> values."}],"pos":[13275,13360],"yaml":true},{"content":"The set of methods that are candidates for matching. For example, when a <xref href=\"System.Reflection.Binder\"></xref> object is used by <xref href=\"System.Type.InvokeMember*\"></xref>, this parameter specifies the set of methods that reflection has determined to be possible matches, typically because they have the correct member name. The default implementation provided by <xref href=\"System.Type.DefaultBinder\"></xref> changes the order of this array.","nodes":[{"pos":[0,455],"content":"The set of methods that are candidates for matching. For example, when a <xref href=\"System.Reflection.Binder\"></xref> object is used by <xref href=\"System.Type.InvokeMember*\"></xref>, this parameter specifies the set of methods that reflection has determined to be possible matches, typically because they have the correct member name. The default implementation provided by <xref href=\"System.Type.DefaultBinder\"></xref> changes the order of this array.","nodes":[{"content":"The set of methods that are candidates for matching.","pos":[0,52]},{"content":"For example, when a <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Binder\"&gt;&lt;/xref&gt;</ph> object is used by <ph id=\"ph2\">&lt;xref href=\"System.Type.InvokeMember*\"&gt;&lt;/xref&gt;</ph>, this parameter specifies the set of methods that reflection has determined to be possible matches, typically because they have the correct member name.","pos":[53,336],"source":" For example, when a <xref href=\"System.Reflection.Binder\"></xref> object is used by <xref href=\"System.Type.InvokeMember*\"></xref>, this parameter specifies the set of methods that reflection has determined to be possible matches, typically because they have the correct member name."},{"content":"The default implementation provided by <ph id=\"ph1\">&lt;xref href=\"System.Type.DefaultBinder\"&gt;&lt;/xref&gt;</ph> changes the order of this array.","pos":[337,455],"source":" The default implementation provided by <xref href=\"System.Type.DefaultBinder\"></xref> changes the order of this array."}]}],"pos":[13438,13894],"yaml":true},{"content":"The arguments that are passed in. The binder can change the order of the arguments in this array; for example, the default binder changes the order of arguments if the <code>names</code> parameter is used to specify an order other than positional order. If a binder implementation coerces argument types, the types and values of the arguments can be changed as well.","nodes":[{"pos":[0,366],"content":"The arguments that are passed in. The binder can change the order of the arguments in this array; for example, the default binder changes the order of arguments if the <code>names</code> parameter is used to specify an order other than positional order. If a binder implementation coerces argument types, the types and values of the arguments can be changed as well.","nodes":[{"content":"The arguments that are passed in.","pos":[0,33]},{"content":"The binder can change the order of the arguments in this array; for example, the default binder changes the order of arguments if the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">names</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is used to specify an order other than positional order.","pos":[34,253],"source":" The binder can change the order of the arguments in this array; for example, the default binder changes the order of arguments if the <code>names</code> parameter is used to specify an order other than positional order."},{"content":"If a binder implementation coerces argument types, the types and values of the arguments can be changed as well.","pos":[254,366]}]}],"pos":[13956,14323],"yaml":true},{"content":"An array of parameter modifiers that enable binding to work with parameter signatures in which the types have been modified. The default binder implementation does not use this parameter.","nodes":[{"pos":[0,187],"content":"An array of parameter modifiers that enable binding to work with parameter signatures in which the types have been modified. The default binder implementation does not use this parameter.","nodes":[{"content":"An array of parameter modifiers that enable binding to work with parameter signatures in which the types have been modified. The default binder implementation does not use this parameter.","pos":[0,187],"nodes":[{"content":"An array of parameter modifiers that enable binding to work with parameter signatures in which the types have been modified.","pos":[0,124]},{"content":"The default binder implementation does not use this parameter.","pos":[125,187]}]}]}],"pos":[14412,14600],"yaml":true},{"content":"An instance of <xref href=\"System.Globalization.CultureInfo\"></xref> that is used to control the coercion of data types, in binder implementations that coerce types. If <code>culture</code> is `null`, the <xref href=\"System.Globalization.CultureInfo\"></xref> for the current thread is used.  \n  \n Note   For example, if a binder implementation allows coercion of string values to numeric types, this parameter is necessary to convert a `String` that represents 1000 to a `Double` value, because 1000 is represented differently by different cultures. The default binder does not do such string coercions.","nodes":[{"pos":[0,290],"content":"An instance of <xref href=\"System.Globalization.CultureInfo\"></xref> that is used to control the coercion of data types, in binder implementations that coerce types. If <code>culture</code> is `null`, the <xref href=\"System.Globalization.CultureInfo\"></xref> for the current thread is used.","nodes":[{"content":"An instance of <ph id=\"ph1\">&lt;xref href=\"System.Globalization.CultureInfo\"&gt;&lt;/xref&gt;</ph> that is used to control the coercion of data types, in binder implementations that coerce types.","pos":[0,165],"source":"An instance of <xref href=\"System.Globalization.CultureInfo\"></xref> that is used to control the coercion of data types, in binder implementations that coerce types."},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">culture</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">`null`</ph>, the <ph id=\"ph3\">&lt;xref href=\"System.Globalization.CultureInfo\"&gt;&lt;/xref&gt;</ph> for the current thread is used.","pos":[166,290],"source":" If <code>culture</code> is `null`, the <xref href=\"System.Globalization.CultureInfo\"></xref> for the current thread is used."}]},{"pos":[297,603],"content":"Note   For example, if a binder implementation allows coercion of string values to numeric types, this parameter is necessary to convert a `String` that represents 1000 to a `Double` value, because 1000 is represented differently by different cultures. The default binder does not do such string coercions.","nodes":[{"content":"Note   For example, if a binder implementation allows coercion of string values to numeric types, this parameter is necessary to convert a <ph id=\"ph1\">`String`</ph> that represents 1000 to a <ph id=\"ph2\">`Double`</ph> value, because 1000 is represented differently by different cultures.","pos":[0,252],"source":"Note   For example, if a binder implementation allows coercion of string values to numeric types, this parameter is necessary to convert a `String` that represents 1000 to a `Double` value, because 1000 is represented differently by different cultures."},{"content":"The default binder does not do such string coercions.","pos":[253,306]}]}],"pos":[14682,15294],"yaml":true},{"content":"The parameter names, if parameter names are to be considered when matching, or `null` if arguments are to be treated as purely positional. For example, parameter names must be used if arguments are not supplied in positional order.","nodes":[{"pos":[0,231],"content":"The parameter names, if parameter names are to be considered when matching, or `null` if arguments are to be treated as purely positional. For example, parameter names must be used if arguments are not supplied in positional order.","nodes":[{"content":"The parameter names, if parameter names are to be considered when matching, or <ph id=\"ph1\">`null`</ph> if arguments are to be treated as purely positional.","pos":[0,138],"source":"The parameter names, if parameter names are to be considered when matching, or `null` if arguments are to be treated as purely positional."},{"content":"For example, parameter names must be used if arguments are not supplied in positional order.","pos":[139,231]}]}],"pos":[15357,15589],"yaml":true},{"content":"After the method returns, <code>state</code> contains a binder-provided object that keeps track of argument reordering. The binder creates this object, and the binder is the sole consumer of this object. If <code>state</code> is not `null` when `BindToMethod` returns, you must pass <code>state</code> to the <xref href=\"System.Reflection.Binder.ReorderArgumentArray(System.Object[]@,System.Object)\"></xref> method if you want to restore <code>args</code> to its original order, for example, so that you can retrieve the values of `ref` parameters (`ByRef` parameters in Visual Basic).","nodes":[{"pos":[0,585],"content":"After the method returns, <code>state</code> contains a binder-provided object that keeps track of argument reordering. The binder creates this object, and the binder is the sole consumer of this object. If <code>state</code> is not `null` when `BindToMethod` returns, you must pass <code>state</code> to the <xref href=\"System.Reflection.Binder.ReorderArgumentArray(System.Object[]@,System.Object)\"></xref> method if you want to restore <code>args</code> to its original order, for example, so that you can retrieve the values of `ref` parameters (`ByRef` parameters in Visual Basic).","nodes":[{"content":"After the method returns, <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">state</ph><ept id=\"p1\">&lt;/code&gt;</ept> contains a binder-provided object that keeps track of argument reordering.","pos":[0,119],"source":"After the method returns, <code>state</code> contains a binder-provided object that keeps track of argument reordering."},{"content":"The binder creates this object, and the binder is the sole consumer of this object.","pos":[120,203]},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">state</ph><ept id=\"p1\">&lt;/code&gt;</ept> is not <ph id=\"ph2\">`null`</ph> when <ph id=\"ph3\">`BindToMethod`</ph> returns, you must pass <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph4\">state</ph><ept id=\"p2\">&lt;/code&gt;</ept> to the <ph id=\"ph5\">&lt;xref href=\"System.Reflection.Binder.ReorderArgumentArray(System.Object[]@,System.Object)\"&gt;&lt;/xref&gt;</ph> method if you want to restore <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph6\">args</ph><ept id=\"p3\">&lt;/code&gt;</ept> to its original order, for example, so that you can retrieve the values of <ph id=\"ph7\">`ref`</ph> parameters (<ph id=\"ph8\">`ByRef`</ph> parameters in Visual Basic).","pos":[204,585],"source":" If <code>state</code> is not `null` when `BindToMethod` returns, you must pass <code>state</code> to the <xref href=\"System.Reflection.Binder.ReorderArgumentArray(System.Object[]@,System.Object)\"></xref> method if you want to restore <code>args</code> to its original order, for example, so that you can retrieve the values of `ref` parameters (`ByRef` parameters in Visual Basic)."}]}],"pos":[15650,16236],"yaml":true},{"content":"The matching method.","nodes":[{"pos":[0,20],"content":"The matching method.","nodes":[{"content":"The matching method.","pos":[0,20]}]}],"pos":[16308,16329],"yaml":true},{"content":"For the default binder, <code>match</code> contains multiple methods that are equally good matches for <code>args</code>. For example, <code>args</code> contains a <code>MyClass</code> object that implements the <code>IMyClass</code> interface, and <code>match</code> contains a method that takes <code>MyClass</code> and a method that takes <code>IMyClass</code>.","nodes":[{"pos":[0,364],"content":"For the default binder, <code>match</code> contains multiple methods that are equally good matches for <code>args</code>. For example, <code>args</code> contains a <code>MyClass</code> object that implements the <code>IMyClass</code> interface, and <code>match</code> contains a method that takes <code>MyClass</code> and a method that takes <code>IMyClass</code>.","nodes":[{"content":"For the default binder, <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">match</ph><ept id=\"p1\">&lt;/code&gt;</ept> contains multiple methods that are equally good matches for <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">args</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","pos":[0,121],"source":"For the default binder, <code>match</code> contains multiple methods that are equally good matches for <code>args</code>."},{"content":"For example, <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">args</ph><ept id=\"p1\">&lt;/code&gt;</ept> contains a <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">MyClass</ph><ept id=\"p2\">&lt;/code&gt;</ept> object that implements the <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph3\">IMyClass</ph><ept id=\"p3\">&lt;/code&gt;</ept> interface, and <bpt id=\"p4\">&lt;code&gt;</bpt><ph id=\"ph4\">match</ph><ept id=\"p4\">&lt;/code&gt;</ept> contains a method that takes <bpt id=\"p5\">&lt;code&gt;</bpt><ph id=\"ph5\">MyClass</ph><ept id=\"p5\">&lt;/code&gt;</ept> and a method that takes <bpt id=\"p6\">&lt;code&gt;</bpt><ph id=\"ph6\">IMyClass</ph><ept id=\"p6\">&lt;/code&gt;</ept>.","pos":[122,364],"source":" For example, <code>args</code> contains a <code>MyClass</code> object that implements the <code>IMyClass</code> interface, and <code>match</code> contains a method that takes <code>MyClass</code> and a method that takes <code>IMyClass</code>."}]}],"pos":[16522,16887],"yaml":true},{"content":"For the default binder, <code>match</code> contains no methods that can accept the arguments supplied in <code>args</code>.","nodes":[{"pos":[0,123],"content":"For the default binder, <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">match</ph><ept id=\"p1\">&lt;/code&gt;</ept> contains no methods that can accept the arguments supplied in <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">args</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"For the default binder, <code>match</code> contains no methods that can accept the arguments supplied in <code>args</code>."}],"pos":[16991,17115],"yaml":true},{"content":"For the default binder, <code>match</code> is `null` or an empty array.","nodes":[{"pos":[0,71],"content":"For the default binder, <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">match</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">`null`</ph> or an empty array.","source":"For the default binder, <code>match</code> is `null` or an empty array."}],"pos":[17209,17281],"yaml":true},{"content":"Changes the type of the given `Object` to the given `Type`.","nodes":[{"pos":[0,59],"content":"Changes the type of the given <ph id=\"ph1\">`Object`</ph> to the given <ph id=\"ph2\">`Type`</ph>.","source":"Changes the type of the given `Object` to the given `Type`."}],"pos":[19872,19932],"yaml":true},{"content":"Reflection models the accessibility rules of the common type system. For example, if the caller is in the same assembly, the caller does not need special permissions for internal members. Otherwise, the caller needs <xref:System.Security.Permissions.ReflectionPermission>. This is consistent with lookup of members that are protected, private, and so on.  \n  \n The general principle is that `ChangeType` should perform only widening coercions, which never lose data. An example of a widening coercion is coercing a value that is a 32-bit signed integer to a value that is a 64-bit signed integer. This is distinguished from a narrowing coercion, which may lose data. An example of a narrowing coercion is coercing a 64-bit signed integer to a 32-bit signed integer.  \n  \n The following table lists the coercions performed by the default `ChangeType`.  \n  \n|Source type|Target type|  \n|-----------------|-----------------|  \n|Any type|Its base type.|  \n|Any type|The interface it implements.|  \n|Char|UInt16, UInt32, Int32, UInt64, Int64, Single, Double|  \n|Byte|Char, UInt16, Int16, UInt32, Int32, UInt64, Int64, Single, Double|  \n|SByte|Int16, Int32, Int64, Single, Double|  \n|UInt16|UInt32, Int32, UInt64, Int64, Single, Double|  \n|Int16|Int32, Int64, Single, Double|  \n|UInt32|UInt64, Int64, Single, Double|  \n|Int32|Int64, Single, Double|  \n|UInt64|Single, Double|  \n|Int64|Single, Double|  \n|Single|Double|  \n|Non-reference|By-reference.|","nodes":[{"pos":[0,354],"content":"Reflection models the accessibility rules of the common type system. For example, if the caller is in the same assembly, the caller does not need special permissions for internal members. Otherwise, the caller needs <xref:System.Security.Permissions.ReflectionPermission>. This is consistent with lookup of members that are protected, private, and so on.","nodes":[{"content":"Reflection models the accessibility rules of the common type system. For example, if the caller is in the same assembly, the caller does not need special permissions for internal members. Otherwise, the caller needs <xref:System.Security.Permissions.ReflectionPermission>. This is consistent with lookup of members that are protected, private, and so on.","pos":[0,354],"nodes":[{"content":"Reflection models the accessibility rules of the common type system.","pos":[0,68]},{"content":"For example, if the caller is in the same assembly, the caller does not need special permissions for internal members.","pos":[69,187]},{"content":"Otherwise, the caller needs <ph id=\"ph1\">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph>.","pos":[188,272],"source":" Otherwise, the caller needs <xref:System.Security.Permissions.ReflectionPermission>."},{"content":"This is consistent with lookup of members that are protected, private, and so on.","pos":[273,354]}]}]},{"pos":[361,765],"content":"The general principle is that `ChangeType` should perform only widening coercions, which never lose data. An example of a widening coercion is coercing a value that is a 32-bit signed integer to a value that is a 64-bit signed integer. This is distinguished from a narrowing coercion, which may lose data. An example of a narrowing coercion is coercing a 64-bit signed integer to a 32-bit signed integer.","nodes":[{"content":"The general principle is that <ph id=\"ph1\">`ChangeType`</ph> should perform only widening coercions, which never lose data.","pos":[0,105],"source":"The general principle is that `ChangeType` should perform only widening coercions, which never lose data."},{"content":"An example of a widening coercion is coercing a value that is a 32-bit signed integer to a value that is a 64-bit signed integer.","pos":[106,235]},{"content":"This is distinguished from a narrowing coercion, which may lose data.","pos":[236,305]},{"content":"An example of a narrowing coercion is coercing a 64-bit signed integer to a 32-bit signed integer.","pos":[306,404]}]},{"pos":[772,850],"content":"The following table lists the coercions performed by the default <ph id=\"ph1\">`ChangeType`</ph>.","source":"The following table lists the coercions performed by the default `ChangeType`."},{"pos":[857,868],"content":"Source type","nodes":[{"content":"Source type","pos":[0,11]}]},{"pos":[869,880],"content":"Target type","nodes":[{"content":"Target type","pos":[0,11]}]},{"pos":[925,933],"content":"Any type","nodes":[{"content":"Any type","pos":[0,8]}]},{"pos":[934,948],"content":"Its base type.","nodes":[{"content":"Its base type.","pos":[0,14]}]},{"pos":[953,961],"content":"Any type","nodes":[{"content":"Any type","pos":[0,8]}]},{"pos":[962,990],"content":"The interface it implements.","nodes":[{"content":"The interface it implements.","pos":[0,28]}]},{"pos":[995,999],"content":"Char","nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[1000,1052],"content":"UInt16, UInt32, Int32, UInt64, Int64, Single, Double","nodes":[{"content":"UInt16, UInt32, Int32, UInt64, Int64, Single, Double","pos":[0,52]}]},{"pos":[1057,1061],"content":"Byte","nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[1062,1127],"content":"Char, UInt16, Int16, UInt32, Int32, UInt64, Int64, Single, Double","nodes":[{"content":"Char, UInt16, Int16, UInt32, Int32, UInt64, Int64, Single, Double","pos":[0,65]}]},{"pos":[1132,1137],"content":"SByte","nodes":[{"content":"SByte","pos":[0,5]}]},{"pos":[1138,1173],"content":"Int16, Int32, Int64, Single, Double","nodes":[{"content":"Int16, Int32, Int64, Single, Double","pos":[0,35]}]},{"pos":[1178,1184],"content":"UInt16","nodes":[{"content":"UInt16","pos":[0,6]}]},{"pos":[1185,1229],"content":"UInt32, Int32, UInt64, Int64, Single, Double","nodes":[{"content":"UInt32, Int32, UInt64, Int64, Single, Double","pos":[0,44]}]},{"pos":[1234,1239],"content":"Int16","nodes":[{"content":"Int16","pos":[0,5]}]},{"pos":[1240,1268],"content":"Int32, Int64, Single, Double","nodes":[{"content":"Int32, Int64, Single, Double","pos":[0,28]}]},{"pos":[1273,1279],"content":"UInt32","nodes":[{"content":"UInt32","pos":[0,6]}]},{"pos":[1280,1309],"content":"UInt64, Int64, Single, Double","nodes":[{"content":"UInt64, Int64, Single, Double","pos":[0,29]}]},{"pos":[1314,1319],"content":"Int32","nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[1320,1341],"content":"Int64, Single, Double","nodes":[{"content":"Int64, Single, Double","pos":[0,21]}]},{"pos":[1346,1352],"content":"UInt64","nodes":[{"content":"UInt64","pos":[0,6]}]},{"pos":[1353,1367],"content":"Single, Double","nodes":[{"content":"Single, Double","pos":[0,14]}]},{"pos":[1372,1377],"content":"Int64","nodes":[{"content":"Int64","pos":[0,5]}]},{"pos":[1378,1392],"content":"Single, Double","nodes":[{"content":"Single, Double","pos":[0,14]}]},{"pos":[1397,1403],"content":"Single","nodes":[{"content":"Single","pos":[0,6]}]},{"pos":[1404,1410],"content":"Double","nodes":[{"content":"Double","pos":[0,6]}]},{"pos":[1415,1428],"content":"Non-reference","nodes":[{"content":"Non-reference","pos":[0,13]}]},{"pos":[1429,1442],"content":"By-reference.","nodes":[{"content":"By-reference.","pos":[0,13]}]}],"pos":[19943,21409],"yaml":true,"extradata":"MT"},{"content":"The object to change into a new `Type`.","nodes":[{"pos":[0,39],"content":"The object to change into a new <ph id=\"ph1\">`Type`</ph>.","source":"The object to change into a new `Type`."}],"pos":[21612,21652],"yaml":true},{"content":"The new `Type` that <code>value</code> will become.","nodes":[{"pos":[0,51],"content":"The new <ph id=\"ph1\">`Type`</ph> that <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> will become.","source":"The new `Type` that <code>value</code> will become."}],"pos":[21710,21762],"yaml":true},{"content":"An instance of <xref href=\"System.Globalization.CultureInfo\"></xref> that is used to control the coercion of data types. If <code>culture</code> is `null`, the <xref href=\"System.Globalization.CultureInfo\"></xref> for the current thread is used.  \n  \n Note   For example, this parameter is necessary to convert a `String` that represents 1000 to a `Double` value, because 1000 is represented differently by different cultures.","nodes":[{"pos":[0,245],"content":"An instance of <xref href=\"System.Globalization.CultureInfo\"></xref> that is used to control the coercion of data types. If <code>culture</code> is `null`, the <xref href=\"System.Globalization.CultureInfo\"></xref> for the current thread is used.","nodes":[{"content":"An instance of <ph id=\"ph1\">&lt;xref href=\"System.Globalization.CultureInfo\"&gt;&lt;/xref&gt;</ph> that is used to control the coercion of data types.","pos":[0,120],"source":"An instance of <xref href=\"System.Globalization.CultureInfo\"></xref> that is used to control the coercion of data types."},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">culture</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">`null`</ph>, the <ph id=\"ph3\">&lt;xref href=\"System.Globalization.CultureInfo\"&gt;&lt;/xref&gt;</ph> for the current thread is used.","pos":[121,245],"source":" If <code>culture</code> is `null`, the <xref href=\"System.Globalization.CultureInfo\"></xref> for the current thread is used."}]},{"pos":[252,426],"content":"Note   For example, this parameter is necessary to convert a <ph id=\"ph1\">`String`</ph> that represents 1000 to a <ph id=\"ph2\">`Double`</ph> value, because 1000 is represented differently by different cultures.","source":"Note   For example, this parameter is necessary to convert a `String` that represents 1000 to a `Double` value, because 1000 is represented differently by different cultures."}],"pos":[21844,22279],"yaml":true},{"content":"An object that contains the given value as the new type.","nodes":[{"pos":[0,56],"content":"An object that contains the given value as the new type.","nodes":[{"content":"An object that contains the given value as the new type.","pos":[0,56]}]}],"pos":[22336,22393],"yaml":true},{"content":"Upon returning from <xref href=\"System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)\"></xref>, restores the <code>args</code> argument to what it was when it came from `BindToMethod`.","nodes":[{"pos":[0,350],"content":"Upon returning from <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)\"&gt;&lt;/xref&gt;</ph>, restores the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">args</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument to what it was when it came from <ph id=\"ph3\">`BindToMethod`</ph>.","source":"Upon returning from <xref href=\"System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)\"></xref>, restores the <code>args</code> argument to what it was when it came from `BindToMethod`."}],"pos":[23758,24109],"yaml":true},{"content":"The common language runtime calls this method if `state` is not `null` after a return from `BindToMethod`.","nodes":[{"pos":[0,106],"content":"The common language runtime calls this method if <ph id=\"ph1\">`state`</ph> is not <ph id=\"ph2\">`null`</ph> after a return from <ph id=\"ph3\">`BindToMethod`</ph>.","source":"The common language runtime calls this method if `state` is not `null` after a return from `BindToMethod`."}],"pos":[24120,24227],"yaml":true,"extradata":"MT"},{"content":"The actual arguments that are passed in. Both the types and values of the arguments can be changed.","nodes":[{"pos":[0,99],"content":"The actual arguments that are passed in. Both the types and values of the arguments can be changed.","nodes":[{"content":"The actual arguments that are passed in. Both the types and values of the arguments can be changed.","pos":[0,99],"nodes":[{"content":"The actual arguments that are passed in.","pos":[0,40]},{"content":"Both the types and values of the arguments can be changed.","pos":[41,99]}]}]}],"pos":[24405,24505],"yaml":true},{"content":"A binder-provided object that keeps track of argument reordering.","nodes":[{"pos":[0,65],"content":"A binder-provided object that keeps track of argument reordering.","nodes":[{"content":"A binder-provided object that keeps track of argument reordering.","pos":[0,65]}]}],"pos":[24566,24632],"yaml":true},{"content":"Selects a method from the given set of methods, based on the argument type.","nodes":[{"pos":[0,75],"content":"Selects a method from the given set of methods, based on the argument type.","nodes":[{"content":"Selects a method from the given set of methods, based on the argument type.","pos":[0,75]}]}],"pos":[26325,26401],"yaml":true},{"content":"This method should return `null` if no method matches the criteria. This method controls the selection provided by the `GetConstructor` and `GetMethod` methods on `Type`.","nodes":[{"pos":[0,170],"content":"This method should return `null` if no method matches the criteria. This method controls the selection provided by the `GetConstructor` and `GetMethod` methods on `Type`.","nodes":[{"content":"This method should return <ph id=\"ph1\">`null`</ph> if no method matches the criteria.","pos":[0,67],"source":"This method should return `null` if no method matches the criteria."},{"content":"This method controls the selection provided by the <ph id=\"ph1\">`GetConstructor`</ph> and <ph id=\"ph2\">`GetMethod`</ph> methods on <ph id=\"ph3\">`Type`</ph>.","pos":[68,170],"source":" This method controls the selection provided by the `GetConstructor` and `GetMethod` methods on `Type`."}]}],"pos":[26412,26583],"yaml":true,"extradata":"MT"},{"content":"A bitwise combination of <xref href=\"System.Reflection.BindingFlags\"></xref> values.","nodes":[{"pos":[0,84],"content":"A bitwise combination of <ph id=\"ph1\">&lt;xref href=\"System.Reflection.BindingFlags\"&gt;&lt;/xref&gt;</ph> values.","source":"A bitwise combination of <xref href=\"System.Reflection.BindingFlags\"></xref> values."}],"pos":[26911,26996],"yaml":true},{"content":"The set of methods that are candidates for matching. For example, when a <xref href=\"System.Reflection.Binder\"></xref> object is used by <xref href=\"System.Type.InvokeMember*\"></xref>, this parameter specifies the set of methods that reflection has determined to be possible matches, typically because they have the correct member name. The default implementation provided by <xref href=\"System.Type.DefaultBinder\"></xref> changes the order of this array.","nodes":[{"pos":[0,455],"content":"The set of methods that are candidates for matching. For example, when a <xref href=\"System.Reflection.Binder\"></xref> object is used by <xref href=\"System.Type.InvokeMember*\"></xref>, this parameter specifies the set of methods that reflection has determined to be possible matches, typically because they have the correct member name. The default implementation provided by <xref href=\"System.Type.DefaultBinder\"></xref> changes the order of this array.","nodes":[{"content":"The set of methods that are candidates for matching.","pos":[0,52]},{"content":"For example, when a <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Binder\"&gt;&lt;/xref&gt;</ph> object is used by <ph id=\"ph2\">&lt;xref href=\"System.Type.InvokeMember*\"&gt;&lt;/xref&gt;</ph>, this parameter specifies the set of methods that reflection has determined to be possible matches, typically because they have the correct member name.","pos":[53,336],"source":" For example, when a <xref href=\"System.Reflection.Binder\"></xref> object is used by <xref href=\"System.Type.InvokeMember*\"></xref>, this parameter specifies the set of methods that reflection has determined to be possible matches, typically because they have the correct member name."},{"content":"The default implementation provided by <ph id=\"ph1\">&lt;xref href=\"System.Type.DefaultBinder\"&gt;&lt;/xref&gt;</ph> changes the order of this array.","pos":[337,455],"source":" The default implementation provided by <xref href=\"System.Type.DefaultBinder\"></xref> changes the order of this array."}]}],"pos":[27074,27530],"yaml":true},{"content":"The parameter types used to locate a matching method.","nodes":[{"pos":[0,53],"content":"The parameter types used to locate a matching method.","nodes":[{"content":"The parameter types used to locate a matching method.","pos":[0,53]}]}],"pos":[27591,27645],"yaml":true},{"content":"An array of parameter modifiers that enable binding to work with parameter signatures in which the types have been modified.","nodes":[{"pos":[0,124],"content":"An array of parameter modifiers that enable binding to work with parameter signatures in which the types have been modified.","nodes":[{"content":"An array of parameter modifiers that enable binding to work with parameter signatures in which the types have been modified.","pos":[0,124]}]}],"pos":[27734,27859],"yaml":true},{"content":"The matching method, if found; otherwise, `null`.","nodes":[{"pos":[0,49],"content":"The matching method, if found; otherwise, <ph id=\"ph1\">`null`</ph>.","source":"The matching method, if found; otherwise, `null`."}],"pos":[27931,27981],"yaml":true},{"content":"For the default binder, <code>match</code> contains multiple methods that are equally good matches for the parameter types described by <code>types</code>. For example, the array in <code>types</code> contains a <xref href=\"System.Type\"></xref> object for <code>MyClass</code> and the array in <code>match</code> contains a method that takes a base class of <code>MyClass</code> and a method that takes an interface that <code>MyClass</code> implements.","nodes":[{"pos":[0,453],"content":"For the default binder, <code>match</code> contains multiple methods that are equally good matches for the parameter types described by <code>types</code>. For example, the array in <code>types</code> contains a <xref href=\"System.Type\"></xref> object for <code>MyClass</code> and the array in <code>match</code> contains a method that takes a base class of <code>MyClass</code> and a method that takes an interface that <code>MyClass</code> implements.","nodes":[{"content":"For the default binder, <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">match</ph><ept id=\"p1\">&lt;/code&gt;</ept> contains multiple methods that are equally good matches for the parameter types described by <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">types</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","pos":[0,155],"source":"For the default binder, <code>match</code> contains multiple methods that are equally good matches for the parameter types described by <code>types</code>."},{"content":"For example, the array in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">types</ph><ept id=\"p1\">&lt;/code&gt;</ept> contains a <ph id=\"ph2\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> object for <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">MyClass</ph><ept id=\"p2\">&lt;/code&gt;</ept> and the array in <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph4\">match</ph><ept id=\"p3\">&lt;/code&gt;</ept> contains a method that takes a base class of <bpt id=\"p4\">&lt;code&gt;</bpt><ph id=\"ph5\">MyClass</ph><ept id=\"p4\">&lt;/code&gt;</ept> and a method that takes an interface that <bpt id=\"p5\">&lt;code&gt;</bpt><ph id=\"ph6\">MyClass</ph><ept id=\"p5\">&lt;/code&gt;</ept> implements.","pos":[156,453],"source":" For example, the array in <code>types</code> contains a <xref href=\"System.Type\"></xref> object for <code>MyClass</code> and the array in <code>match</code> contains a method that takes a base class of <code>MyClass</code> and a method that takes an interface that <code>MyClass</code> implements."}]}],"pos":[28174,28628],"yaml":true},{"content":"For the default binder, <code>match</code> is `null` or an empty array.  \n  \n -or-  \n  \n An element of <code>types</code> derives from <xref href=\"System.Type\"></xref>, but is not of type `RuntimeType`.","nodes":[{"pos":[0,71],"content":"For the default binder, <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">match</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">`null`</ph> or an empty array.","source":"For the default binder, <code>match</code> is `null` or an empty array."},{"pos":[78,82],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[89,202],"content":"An element of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">types</ph><ept id=\"p1\">&lt;/code&gt;</ept> derives from <ph id=\"ph2\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph>, but is not of type <ph id=\"ph3\">`RuntimeType`</ph>.","source":"An element of <code>types</code> derives from <xref href=\"System.Type\"></xref>, but is not of type `RuntimeType`."}],"pos":[28722,28933],"yaml":true},{"content":"Selects a property from the given set of properties, based on the specified criteria.","nodes":[{"pos":[0,85],"content":"Selects a property from the given set of properties, based on the specified criteria.","nodes":[{"content":"Selects a property from the given set of properties, based on the specified criteria.","pos":[0,85]}]}],"pos":[30628,30714],"yaml":true},{"content":"This method controls the selection provided by the `GetProperty` method on `Type`.","nodes":[{"pos":[0,82],"content":"This method controls the selection provided by the <ph id=\"ph1\">`GetProperty`</ph> method on <ph id=\"ph2\">`Type`</ph>.","source":"This method controls the selection provided by the `GetProperty` method on `Type`."}],"pos":[30725,30808],"yaml":true,"extradata":"MT"},{"content":"A bitwise combination of <xref href=\"System.Reflection.BindingFlags\"></xref> values.","nodes":[{"pos":[0,84],"content":"A bitwise combination of <ph id=\"ph1\">&lt;xref href=\"System.Reflection.BindingFlags\"&gt;&lt;/xref&gt;</ph> values.","source":"A bitwise combination of <xref href=\"System.Reflection.BindingFlags\"></xref> values."}],"pos":[31161,31246],"yaml":true},{"content":"The set of properties that are candidates for matching. For example, when a <xref href=\"System.Reflection.Binder\"></xref> object is used by <xref href=\"System.Type.InvokeMember*\"></xref>, this parameter specifies the set of properties that reflection has determined to be possible matches, typically because they have the correct member name. The default implementation provided by <xref href=\"System.Type.DefaultBinder\"></xref> changes the order of this array.","nodes":[{"pos":[0,461],"content":"The set of properties that are candidates for matching. For example, when a <xref href=\"System.Reflection.Binder\"></xref> object is used by <xref href=\"System.Type.InvokeMember*\"></xref>, this parameter specifies the set of properties that reflection has determined to be possible matches, typically because they have the correct member name. The default implementation provided by <xref href=\"System.Type.DefaultBinder\"></xref> changes the order of this array.","nodes":[{"content":"The set of properties that are candidates for matching.","pos":[0,55]},{"content":"For example, when a <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Binder\"&gt;&lt;/xref&gt;</ph> object is used by <ph id=\"ph2\">&lt;xref href=\"System.Type.InvokeMember*\"&gt;&lt;/xref&gt;</ph>, this parameter specifies the set of properties that reflection has determined to be possible matches, typically because they have the correct member name.","pos":[56,342],"source":" For example, when a <xref href=\"System.Reflection.Binder\"></xref> object is used by <xref href=\"System.Type.InvokeMember*\"></xref>, this parameter specifies the set of properties that reflection has determined to be possible matches, typically because they have the correct member name."},{"content":"The default implementation provided by <ph id=\"ph1\">&lt;xref href=\"System.Type.DefaultBinder\"&gt;&lt;/xref&gt;</ph> changes the order of this array.","pos":[343,461],"source":" The default implementation provided by <xref href=\"System.Type.DefaultBinder\"></xref> changes the order of this array."}]}],"pos":[31326,31788],"yaml":true},{"content":"The return value the matching property must have.","nodes":[{"pos":[0,49],"content":"The return value the matching property must have.","nodes":[{"content":"The return value the matching property must have.","pos":[0,49]}]}],"pos":[31852,31902],"yaml":true},{"content":"The index types of the property being searched for. Used for index properties such as the indexer for a class.","nodes":[{"pos":[0,110],"content":"The index types of the property being searched for. Used for index properties such as the indexer for a class.","nodes":[{"content":"The index types of the property being searched for. Used for index properties such as the indexer for a class.","pos":[0,110],"nodes":[{"content":"The index types of the property being searched for.","pos":[0,51]},{"content":"Used for index properties such as the indexer for a class.","pos":[52,110]}]}]}],"pos":[31965,32076],"yaml":true},{"content":"An array of parameter modifiers that enable binding to work with parameter signatures in which the types have been modified.","nodes":[{"pos":[0,124],"content":"An array of parameter modifiers that enable binding to work with parameter signatures in which the types have been modified.","nodes":[{"content":"An array of parameter modifiers that enable binding to work with parameter signatures in which the types have been modified.","pos":[0,124]}]}],"pos":[32165,32290],"yaml":true},{"content":"The matching property.","nodes":[{"pos":[0,22],"content":"The matching property.","nodes":[{"content":"The matching property.","pos":[0,22]}]}],"pos":[32364,32387],"yaml":true},{"content":"For the default binder, <code>match</code> contains multiple properties that are equally good matches for <code>returnType</code> and <code>indexes</code>.","nodes":[{"pos":[0,155],"content":"For the default binder, <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">match</ph><ept id=\"p1\">&lt;/code&gt;</ept> contains multiple properties that are equally good matches for <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">returnType</ph><ept id=\"p2\">&lt;/code&gt;</ept> and <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph3\">indexes</ph><ept id=\"p3\">&lt;/code&gt;</ept>.","source":"For the default binder, <code>match</code> contains multiple properties that are equally good matches for <code>returnType</code> and <code>indexes</code>."}],"pos":[32582,32738],"yaml":true},{"content":"For the default binder, <code>match</code> is `null` or an empty array.","nodes":[{"pos":[0,71],"content":"For the default binder, <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">match</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">`null`</ph> or an empty array.","source":"For the default binder, <code>match</code> is `null` or an empty array."}],"pos":[32832,32904],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Reflection.Binder\n  commentId: T:System.Reflection.Binder\n  id: Binder\n  children:\n  - System.Reflection.Binder.#ctor\n  - System.Reflection.Binder.BindToField(System.Reflection.BindingFlags,System.Reflection.FieldInfo[],System.Object,System.Globalization.CultureInfo)\n  - System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)\n  - System.Reflection.Binder.CanChangeType(System.Object,System.Type,System.Globalization.CultureInfo)\n  - System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)\n  - System.Reflection.Binder.ReorderArgumentArray(System.Object[]@,System.Object)\n  - System.Reflection.Binder.SelectMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Type[],System.Reflection.ParameterModifier[])\n  - System.Reflection.Binder.SelectProperty(System.Reflection.BindingFlags,System.Reflection.PropertyInfo[],System.Type,System.Type[],System.Reflection.ParameterModifier[])\n  langs:\n  - csharp\n  name: Binder\n  nameWithType: Binder\n  fullName: System.Reflection.Binder\n  type: Class\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Selects a member from a list of candidates, and performs type conversion from actual argument type to formal argument type.\n  remarks: \"Implementations of the <xref:System.Reflection.Binder> class are used by methods such as <xref:System.Type.InvokeMember%2A?displayProperty=fullName>, which selects from a set of possible members to execute, based on a set of parameter types and argument values; <xref:System.Type.GetMethod%2A?displayProperty=fullName>, which selects a method based on parameter types; and so on.  \\n  \\n A default implementation of the <xref:System.Reflection.Binder> class is provided by the <xref:System.Type.DefaultBinder%2A?displayProperty=fullName> property.\"\n  example:\n  - \"The following example implements and demonstrates all members of the `Binder` class. The private method `CanConvertFrom` finds compatible types for a given type.  \\n  \\n [!code-cpp[Binder_1#1](~/samples/snippets/cpp/VS_Snippets_CLR/Binder_1/CPP/binder.cpp#1)]\\n [!code-csharp[Binder_1#1](~/samples/snippets/csharp/VS_Snippets_CLR/Binder_1/CS/binder.cs#1)]\\n [!code-vb[Binder_1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Binder_1/VB/binder.vb#1)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.AutoDual)]\n\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public abstract class Binder\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  attributes:\n  - type: System.Runtime.InteropServices.ClassInterfaceAttribute\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Binder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Binder.#ctor\n  commentId: M:System.Reflection.Binder.#ctor\n  id: '#ctor'\n  parent: System.Reflection.Binder\n  langs:\n  - csharp\n  name: Binder()\n  nameWithType: Binder.Binder()\n  fullName: Binder.Binder()\n  type: Constructor\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Initializes a new instance of the <xref href=\"System.Reflection.Binder\"></xref> class.\n  remarks: This constructor is called by the constructors of derived classes, to initialize state in this type.\n  syntax:\n    content: protected Binder ();\n    parameters: []\n  overload: System.Reflection.Binder.#ctor*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Binder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Binder.BindToField(System.Reflection.BindingFlags,System.Reflection.FieldInfo[],System.Object,System.Globalization.CultureInfo)\n  commentId: M:System.Reflection.Binder.BindToField(System.Reflection.BindingFlags,System.Reflection.FieldInfo[],System.Object,System.Globalization.CultureInfo)\n  id: BindToField(System.Reflection.BindingFlags,System.Reflection.FieldInfo[],System.Object,System.Globalization.CultureInfo)\n  parent: System.Reflection.Binder\n  langs:\n  - csharp\n  name: BindToField(BindingFlags, FieldInfo[], Object, CultureInfo)\n  nameWithType: Binder.BindToField(BindingFlags, FieldInfo[], Object, CultureInfo)\n  fullName: Binder.BindToField(BindingFlags, FieldInfo[], Object, CultureInfo)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Selects a field from the given set of fields, based on the specified criteria.\n  remarks: \"If `bindingAttr` does not include <xref:System.Reflection.BindingFlags?displayProperty=fullName>, the default binder implementation provided by <xref:System.Type.DefaultBinder%2A?displayProperty=fullName> simply returns the first element of `match`. No selection is done.  \\n  \\n This method controls the binding provided by <xref:System.Type.InvokeMember%2A?displayProperty=fullName>.\"\n  syntax:\n    content: public abstract System.Reflection.FieldInfo BindToField (System.Reflection.BindingFlags bindingAttr, System.Reflection.FieldInfo[] match, object value, System.Globalization.CultureInfo culture);\n    parameters:\n    - id: bindingAttr\n      type: System.Reflection.BindingFlags\n      description: A bitwise combination of <xref href=\"System.Reflection.BindingFlags\"></xref> values.\n    - id: match\n      type: System.Reflection.FieldInfo[]\n      description: The set of fields that are candidates for matching. For example, when a <xref href=\"System.Reflection.Binder\"></xref> object is used by <xref href=\"System.Type.InvokeMember*\"></xref>, this parameter specifies the set of fields that reflection has determined to be possible matches, typically because they have the correct member name. The default implementation provided by <xref href=\"System.Type.DefaultBinder\"></xref> changes the order of this array.\n    - id: value\n      type: System.Object\n      description: The field value used to locate a matching field.\n    - id: culture\n      type: System.Globalization.CultureInfo\n      description: \"An instance of <xref href=\\\"System.Globalization.CultureInfo\\\"></xref> that is used to control the coercion of data types, in binder implementations that coerce types. If <code>culture</code> is `null`, the <xref href=\\\"System.Globalization.CultureInfo\\\"></xref> for the current thread is used.  \\n  \\n Note   For example, if a binder implementation allows coercion of string values to numeric types, this parameter is necessary to convert a `String` that represents 1000 to a `Double` value, because 1000 is represented differently by different cultures. The default binder does not do such string coercions.\"\n    return:\n      type: System.Reflection.FieldInfo\n      description: The matching field.\n  overload: System.Reflection.Binder.BindToField*\n  exceptions:\n  - type: System.Reflection.AmbiguousMatchException\n    commentId: T:System.Reflection.AmbiguousMatchException\n    description: For the default binder, <code>bindingAttr</code> includes <xref href=\"System.Reflection.BindingFlags.SetField\"></xref>, and <code>match</code> contains multiple fields that are equally good matches for <code>value</code>. For example, <code>value</code> contains a <code>MyClass</code> object that implements the <code>IMyClass</code> interface, and <code>match</code> contains a field of type <code>MyClass</code> and a field of type <code>IMyClass</code>.\n  - type: System.MissingFieldException\n    commentId: T:System.MissingFieldException\n    description: For the default binder, <code>bindingAttr</code> includes <xref href=\"System.Reflection.BindingFlags.SetField\"></xref>, and <code>match</code> contains no fields that can accept <code>value</code>.\n  - type: System.NullReferenceException\n    commentId: T:System.NullReferenceException\n    description: \"For the default binder, <code>bindingAttr</code> includes <xref href=\\\"System.Reflection.BindingFlags.SetField\\\"></xref>, and <code>match</code> is `null` or an empty array.  \\n  \\n -or-  \\n  \\n <code>bindingAttr</code> includes <xref href=\\\"System.Reflection.BindingFlags.SetField\\\"></xref>, and <code>value</code> is `null`.\"\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Binder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)\n  commentId: M:System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)\n  id: BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)\n  parent: System.Reflection.Binder\n  langs:\n  - csharp\n  name: BindToMethod(BindingFlags, MethodBase[], Object[], ParameterModifier[], CultureInfo, String[], Object)\n  nameWithType: Binder.BindToMethod(BindingFlags, MethodBase[], Object[], ParameterModifier[], CultureInfo, String[], Object)\n  fullName: Binder.BindToMethod(BindingFlags, MethodBase[], Object[], ParameterModifier[], CultureInfo, String[], Object)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Selects a method to invoke from the given set of methods, based on the supplied arguments.\n  remarks: \"The default binder takes into account both parameters that have values and `params` arrays (`ParamArray` arrays in Visual Basic). Thus, it is possible to find a match in cases where `args` and `match` do not contain the same number of elements.  \\n  \\n The binder enables a client to map the array of arguments back to its original form if the argument array has been manipulated by <xref:System.Reflection.Binder.BindToMethod%2A>. Use this remap capability to get back by-reference arguments when such arguments are present. When you pass arguments by name, the binder reorders the argument array. The `state` parameter keeps track of argument reordering, thus enabling the binder's <xref:System.Reflection.Binder.ReorderArgumentArray%2A> method to reorder the argument array to its original form.  \\n  \\n The <xref:System.Reflection.Binder.BindToMethod%2A> method is used by the <xref:System.Type.InvokeMember%2A?displayProperty=fullName> method.\"\n  syntax:\n    content: public abstract System.Reflection.MethodBase BindToMethod (System.Reflection.BindingFlags bindingAttr, System.Reflection.MethodBase[] match, ref object[] args, System.Reflection.ParameterModifier[] modifiers, System.Globalization.CultureInfo culture, string[] names, out object state);\n    parameters:\n    - id: bindingAttr\n      type: System.Reflection.BindingFlags\n      description: A bitwise combination of <xref href=\"System.Reflection.BindingFlags\"></xref> values.\n    - id: match\n      type: System.Reflection.MethodBase[]\n      description: The set of methods that are candidates for matching. For example, when a <xref href=\"System.Reflection.Binder\"></xref> object is used by <xref href=\"System.Type.InvokeMember*\"></xref>, this parameter specifies the set of methods that reflection has determined to be possible matches, typically because they have the correct member name. The default implementation provided by <xref href=\"System.Type.DefaultBinder\"></xref> changes the order of this array.\n    - id: args\n      type: System.Object[]\n      description: The arguments that are passed in. The binder can change the order of the arguments in this array; for example, the default binder changes the order of arguments if the <code>names</code> parameter is used to specify an order other than positional order. If a binder implementation coerces argument types, the types and values of the arguments can be changed as well.\n    - id: modifiers\n      type: System.Reflection.ParameterModifier[]\n      description: An array of parameter modifiers that enable binding to work with parameter signatures in which the types have been modified. The default binder implementation does not use this parameter.\n    - id: culture\n      type: System.Globalization.CultureInfo\n      description: \"An instance of <xref href=\\\"System.Globalization.CultureInfo\\\"></xref> that is used to control the coercion of data types, in binder implementations that coerce types. If <code>culture</code> is `null`, the <xref href=\\\"System.Globalization.CultureInfo\\\"></xref> for the current thread is used.  \\n  \\n Note   For example, if a binder implementation allows coercion of string values to numeric types, this parameter is necessary to convert a `String` that represents 1000 to a `Double` value, because 1000 is represented differently by different cultures. The default binder does not do such string coercions.\"\n    - id: names\n      type: System.String[]\n      description: The parameter names, if parameter names are to be considered when matching, or `null` if arguments are to be treated as purely positional. For example, parameter names must be used if arguments are not supplied in positional order.\n    - id: state\n      type: System.Object\n      description: After the method returns, <code>state</code> contains a binder-provided object that keeps track of argument reordering. The binder creates this object, and the binder is the sole consumer of this object. If <code>state</code> is not `null` when `BindToMethod` returns, you must pass <code>state</code> to the <xref href=\"System.Reflection.Binder.ReorderArgumentArray(System.Object[]@,System.Object)\"></xref> method if you want to restore <code>args</code> to its original order, for example, so that you can retrieve the values of `ref` parameters (`ByRef` parameters in Visual Basic).\n    return:\n      type: System.Reflection.MethodBase\n      description: The matching method.\n  overload: System.Reflection.Binder.BindToMethod*\n  exceptions:\n  - type: System.Reflection.AmbiguousMatchException\n    commentId: T:System.Reflection.AmbiguousMatchException\n    description: For the default binder, <code>match</code> contains multiple methods that are equally good matches for <code>args</code>. For example, <code>args</code> contains a <code>MyClass</code> object that implements the <code>IMyClass</code> interface, and <code>match</code> contains a method that takes <code>MyClass</code> and a method that takes <code>IMyClass</code>.\n  - type: System.MissingMethodException\n    commentId: T:System.MissingMethodException\n    description: For the default binder, <code>match</code> contains no methods that can accept the arguments supplied in <code>args</code>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: For the default binder, <code>match</code> is `null` or an empty array.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Binder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Binder.CanChangeType(System.Object,System.Type,System.Globalization.CultureInfo)\n  commentId: M:System.Reflection.Binder.CanChangeType(System.Object,System.Type,System.Globalization.CultureInfo)\n  id: CanChangeType(System.Object,System.Type,System.Globalization.CultureInfo)\n  parent: System.Reflection.Binder\n  langs:\n  - csharp\n  name: CanChangeType(Object, Type, CultureInfo)\n  nameWithType: Binder.CanChangeType(Object, Type, CultureInfo)\n  fullName: Binder.CanChangeType(Object, Type, CultureInfo)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection\n  syntax:\n    content: public virtual bool CanChangeType (object value, Type type, System.Globalization.CultureInfo culture);\n    parameters:\n    - id: value\n      type: System.Object\n      description: ''\n    - id: type\n      type: System.Type\n      description: ''\n    - id: culture\n      type: System.Globalization.CultureInfo\n      description: ''\n    return:\n      type: System.Boolean\n      description: ''\n  overload: System.Reflection.Binder.CanChangeType*\n  exceptions: []\n  version:\n  - xamarinios-10.8\n  monikers:\n  - xamarinios-10.8\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Binder.xml\n- uid: System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)\n  commentId: M:System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)\n  id: ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)\n  parent: System.Reflection.Binder\n  langs:\n  - csharp\n  name: ChangeType(Object, Type, CultureInfo)\n  nameWithType: Binder.ChangeType(Object, Type, CultureInfo)\n  fullName: Binder.ChangeType(Object, Type, CultureInfo)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Changes the type of the given `Object` to the given `Type`.\n  remarks: \"Reflection models the accessibility rules of the common type system. For example, if the caller is in the same assembly, the caller does not need special permissions for internal members. Otherwise, the caller needs <xref:System.Security.Permissions.ReflectionPermission>. This is consistent with lookup of members that are protected, private, and so on.  \\n  \\n The general principle is that `ChangeType` should perform only widening coercions, which never lose data. An example of a widening coercion is coercing a value that is a 32-bit signed integer to a value that is a 64-bit signed integer. This is distinguished from a narrowing coercion, which may lose data. An example of a narrowing coercion is coercing a 64-bit signed integer to a 32-bit signed integer.  \\n  \\n The following table lists the coercions performed by the default `ChangeType`.  \\n  \\n|Source type|Target type|  \\n|-----------------|-----------------|  \\n|Any type|Its base type.|  \\n|Any type|The interface it implements.|  \\n|Char|UInt16, UInt32, Int32, UInt64, Int64, Single, Double|  \\n|Byte|Char, UInt16, Int16, UInt32, Int32, UInt64, Int64, Single, Double|  \\n|SByte|Int16, Int32, Int64, Single, Double|  \\n|UInt16|UInt32, Int32, UInt64, Int64, Single, Double|  \\n|Int16|Int32, Int64, Single, Double|  \\n|UInt32|UInt64, Int64, Single, Double|  \\n|Int32|Int64, Single, Double|  \\n|UInt64|Single, Double|  \\n|Int64|Single, Double|  \\n|Single|Double|  \\n|Non-reference|By-reference.|\"\n  syntax:\n    content: public abstract object ChangeType (object value, Type type, System.Globalization.CultureInfo culture);\n    parameters:\n    - id: value\n      type: System.Object\n      description: The object to change into a new `Type`.\n    - id: type\n      type: System.Type\n      description: The new `Type` that <code>value</code> will become.\n    - id: culture\n      type: System.Globalization.CultureInfo\n      description: \"An instance of <xref href=\\\"System.Globalization.CultureInfo\\\"></xref> that is used to control the coercion of data types. If <code>culture</code> is `null`, the <xref href=\\\"System.Globalization.CultureInfo\\\"></xref> for the current thread is used.  \\n  \\n Note   For example, this parameter is necessary to convert a `String` that represents 1000 to a `Double` value, because 1000 is represented differently by different cultures.\"\n    return:\n      type: System.Object\n      description: An object that contains the given value as the new type.\n  overload: System.Reflection.Binder.ChangeType*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Binder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Binder.ReorderArgumentArray(System.Object[]@,System.Object)\n  commentId: M:System.Reflection.Binder.ReorderArgumentArray(System.Object[]@,System.Object)\n  id: ReorderArgumentArray(System.Object[]@,System.Object)\n  parent: System.Reflection.Binder\n  langs:\n  - csharp\n  name: ReorderArgumentArray(Object[], Object)\n  nameWithType: Binder.ReorderArgumentArray(Object[], Object)\n  fullName: Binder.ReorderArgumentArray(Object[], Object)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Upon returning from <xref href=\"System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)\"></xref>, restores the <code>args</code> argument to what it was when it came from `BindToMethod`.\n  remarks: The common language runtime calls this method if `state` is not `null` after a return from `BindToMethod`.\n  syntax:\n    content: public abstract void ReorderArgumentArray (ref object[] args, object state);\n    parameters:\n    - id: args\n      type: System.Object[]\n      description: The actual arguments that are passed in. Both the types and values of the arguments can be changed.\n    - id: state\n      type: System.Object\n      description: A binder-provided object that keeps track of argument reordering.\n  overload: System.Reflection.Binder.ReorderArgumentArray*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Binder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Binder.SelectMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Type[],System.Reflection.ParameterModifier[])\n  commentId: M:System.Reflection.Binder.SelectMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Type[],System.Reflection.ParameterModifier[])\n  id: SelectMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Type[],System.Reflection.ParameterModifier[])\n  parent: System.Reflection.Binder\n  langs:\n  - csharp\n  name: SelectMethod(BindingFlags, MethodBase[], Type[], ParameterModifier[])\n  nameWithType: Binder.SelectMethod(BindingFlags, MethodBase[], Type[], ParameterModifier[])\n  fullName: Binder.SelectMethod(BindingFlags, MethodBase[], Type[], ParameterModifier[])\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Selects a method from the given set of methods, based on the argument type.\n  remarks: This method should return `null` if no method matches the criteria. This method controls the selection provided by the `GetConstructor` and `GetMethod` methods on `Type`.\n  syntax:\n    content: public abstract System.Reflection.MethodBase SelectMethod (System.Reflection.BindingFlags bindingAttr, System.Reflection.MethodBase[] match, Type[] types, System.Reflection.ParameterModifier[] modifiers);\n    parameters:\n    - id: bindingAttr\n      type: System.Reflection.BindingFlags\n      description: A bitwise combination of <xref href=\"System.Reflection.BindingFlags\"></xref> values.\n    - id: match\n      type: System.Reflection.MethodBase[]\n      description: The set of methods that are candidates for matching. For example, when a <xref href=\"System.Reflection.Binder\"></xref> object is used by <xref href=\"System.Type.InvokeMember*\"></xref>, this parameter specifies the set of methods that reflection has determined to be possible matches, typically because they have the correct member name. The default implementation provided by <xref href=\"System.Type.DefaultBinder\"></xref> changes the order of this array.\n    - id: types\n      type: System.Type[]\n      description: The parameter types used to locate a matching method.\n    - id: modifiers\n      type: System.Reflection.ParameterModifier[]\n      description: An array of parameter modifiers that enable binding to work with parameter signatures in which the types have been modified.\n    return:\n      type: System.Reflection.MethodBase\n      description: The matching method, if found; otherwise, `null`.\n  overload: System.Reflection.Binder.SelectMethod*\n  exceptions:\n  - type: System.Reflection.AmbiguousMatchException\n    commentId: T:System.Reflection.AmbiguousMatchException\n    description: For the default binder, <code>match</code> contains multiple methods that are equally good matches for the parameter types described by <code>types</code>. For example, the array in <code>types</code> contains a <xref href=\"System.Type\"></xref> object for <code>MyClass</code> and the array in <code>match</code> contains a method that takes a base class of <code>MyClass</code> and a method that takes an interface that <code>MyClass</code> implements.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"For the default binder, <code>match</code> is `null` or an empty array.  \\n  \\n -or-  \\n  \\n An element of <code>types</code> derives from <xref href=\\\"System.Type\\\"></xref>, but is not of type `RuntimeType`.\"\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Binder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Binder.SelectProperty(System.Reflection.BindingFlags,System.Reflection.PropertyInfo[],System.Type,System.Type[],System.Reflection.ParameterModifier[])\n  commentId: M:System.Reflection.Binder.SelectProperty(System.Reflection.BindingFlags,System.Reflection.PropertyInfo[],System.Type,System.Type[],System.Reflection.ParameterModifier[])\n  id: SelectProperty(System.Reflection.BindingFlags,System.Reflection.PropertyInfo[],System.Type,System.Type[],System.Reflection.ParameterModifier[])\n  parent: System.Reflection.Binder\n  langs:\n  - csharp\n  name: SelectProperty(BindingFlags, PropertyInfo[], Type, Type[], ParameterModifier[])\n  nameWithType: Binder.SelectProperty(BindingFlags, PropertyInfo[], Type, Type[], ParameterModifier[])\n  fullName: Binder.SelectProperty(BindingFlags, PropertyInfo[], Type, Type[], ParameterModifier[])\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Selects a property from the given set of properties, based on the specified criteria.\n  remarks: This method controls the selection provided by the `GetProperty` method on `Type`.\n  syntax:\n    content: public abstract System.Reflection.PropertyInfo SelectProperty (System.Reflection.BindingFlags bindingAttr, System.Reflection.PropertyInfo[] match, Type returnType, Type[] indexes, System.Reflection.ParameterModifier[] modifiers);\n    parameters:\n    - id: bindingAttr\n      type: System.Reflection.BindingFlags\n      description: A bitwise combination of <xref href=\"System.Reflection.BindingFlags\"></xref> values.\n    - id: match\n      type: System.Reflection.PropertyInfo[]\n      description: The set of properties that are candidates for matching. For example, when a <xref href=\"System.Reflection.Binder\"></xref> object is used by <xref href=\"System.Type.InvokeMember*\"></xref>, this parameter specifies the set of properties that reflection has determined to be possible matches, typically because they have the correct member name. The default implementation provided by <xref href=\"System.Type.DefaultBinder\"></xref> changes the order of this array.\n    - id: returnType\n      type: System.Type\n      description: The return value the matching property must have.\n    - id: indexes\n      type: System.Type[]\n      description: The index types of the property being searched for. Used for index properties such as the indexer for a class.\n    - id: modifiers\n      type: System.Reflection.ParameterModifier[]\n      description: An array of parameter modifiers that enable binding to work with parameter signatures in which the types have been modified.\n    return:\n      type: System.Reflection.PropertyInfo\n      description: The matching property.\n  overload: System.Reflection.Binder.SelectProperty*\n  exceptions:\n  - type: System.Reflection.AmbiguousMatchException\n    commentId: T:System.Reflection.AmbiguousMatchException\n    description: For the default binder, <code>match</code> contains multiple properties that are equally good matches for <code>returnType</code> and <code>indexes</code>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: For the default binder, <code>match</code> is `null` or an empty array.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Binder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Reflection.AmbiguousMatchException\n  parent: System.Reflection\n  isExternal: false\n  name: AmbiguousMatchException\n  nameWithType: AmbiguousMatchException\n  fullName: System.Reflection.AmbiguousMatchException\n- uid: System.MissingFieldException\n  parent: System\n  isExternal: false\n  name: MissingFieldException\n  nameWithType: MissingFieldException\n  fullName: System.MissingFieldException\n- uid: System.NullReferenceException\n  parent: System\n  isExternal: false\n  name: NullReferenceException\n  nameWithType: NullReferenceException\n  fullName: System.NullReferenceException\n- uid: System.MissingMethodException\n  parent: System\n  isExternal: false\n  name: MissingMethodException\n  nameWithType: MissingMethodException\n  fullName: System.MissingMethodException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.Reflection.Binder.#ctor\n  parent: System.Reflection.Binder\n  isExternal: false\n  name: Binder()\n  nameWithType: Binder.Binder()\n  fullName: Binder.Binder()\n- uid: System.Reflection.Binder.BindToField(System.Reflection.BindingFlags,System.Reflection.FieldInfo[],System.Object,System.Globalization.CultureInfo)\n  parent: System.Reflection.Binder\n  isExternal: false\n  name: BindToField(BindingFlags, FieldInfo[], Object, CultureInfo)\n  nameWithType: Binder.BindToField(BindingFlags, FieldInfo[], Object, CultureInfo)\n  fullName: Binder.BindToField(BindingFlags, FieldInfo[], Object, CultureInfo)\n- uid: System.Reflection.FieldInfo\n  parent: System.Reflection\n  isExternal: false\n  name: FieldInfo\n  nameWithType: FieldInfo\n  fullName: System.Reflection.FieldInfo\n- uid: System.Reflection.BindingFlags\n  parent: System.Reflection\n  isExternal: false\n  name: BindingFlags\n  nameWithType: BindingFlags\n  fullName: System.Reflection.BindingFlags\n- uid: System.Reflection.FieldInfo[]\n  parent: System.Reflection\n  isExternal: false\n  name: FieldInfo[]\n  nameWithType: FieldInfo[]\n  fullName: System.Reflection.FieldInfo[]\n  spec.csharp:\n  - uid: System.Reflection.FieldInfo\n    name: FieldInfo\n    nameWithType: FieldInfo\n    fullName: System.Reflection.FieldInfo\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Globalization.CultureInfo\n  parent: System.Globalization\n  isExternal: false\n  name: CultureInfo\n  nameWithType: CultureInfo\n  fullName: System.Globalization.CultureInfo\n- uid: System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)\n  parent: System.Reflection.Binder\n  isExternal: false\n  name: BindToMethod(BindingFlags, MethodBase[], Object[], ParameterModifier[], CultureInfo, String[], Object)\n  nameWithType: Binder.BindToMethod(BindingFlags, MethodBase[], Object[], ParameterModifier[], CultureInfo, String[], Object)\n  fullName: Binder.BindToMethod(BindingFlags, MethodBase[], Object[], ParameterModifier[], CultureInfo, String[], Object)\n- uid: System.Reflection.MethodBase\n  parent: System.Reflection\n  isExternal: false\n  name: MethodBase\n  nameWithType: MethodBase\n  fullName: System.Reflection.MethodBase\n- uid: System.Reflection.MethodBase[]\n  parent: System.Reflection\n  isExternal: false\n  name: MethodBase[]\n  nameWithType: MethodBase[]\n  fullName: System.Reflection.MethodBase[]\n  spec.csharp:\n  - uid: System.Reflection.MethodBase\n    name: MethodBase\n    nameWithType: MethodBase\n    fullName: System.Reflection.MethodBase\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Object[]\n  parent: System\n  isExternal: false\n  name: Object[]\n  nameWithType: Object[]\n  fullName: System.Object[]\n  spec.csharp:\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Reflection.ParameterModifier\n  name: ParameterModifier\n  nameWithType: ParameterModifier\n  fullName: System.Reflection.ParameterModifier\n- uid: System.Reflection.ParameterModifier[]\n  parent: System.Reflection\n  isExternal: false\n  name: ParameterModifier[]\n  nameWithType: ParameterModifier[]\n  fullName: System.Reflection.ParameterModifier[]\n  spec.csharp:\n  - uid: System.Reflection.ParameterModifier\n    name: ParameterModifier\n    nameWithType: ParameterModifier\n    fullName: System.Reflection.ParameterModifier\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.String\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.String[]\n  parent: System\n  isExternal: false\n  name: String[]\n  nameWithType: String[]\n  fullName: System.String[]\n  spec.csharp:\n  - uid: System.String\n    name: String\n    nameWithType: String\n    fullName: System.String\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Reflection.Binder.CanChangeType(System.Object,System.Type,System.Globalization.CultureInfo)\n  parent: System.Reflection.Binder\n  isExternal: false\n  name: CanChangeType(Object, Type, CultureInfo)\n  nameWithType: Binder.CanChangeType(Object, Type, CultureInfo)\n  fullName: Binder.CanChangeType(Object, Type, CultureInfo)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)\n  parent: System.Reflection.Binder\n  isExternal: false\n  name: ChangeType(Object, Type, CultureInfo)\n  nameWithType: Binder.ChangeType(Object, Type, CultureInfo)\n  fullName: Binder.ChangeType(Object, Type, CultureInfo)\n- uid: System.Reflection.Binder.ReorderArgumentArray(System.Object[]@,System.Object)\n  parent: System.Reflection.Binder\n  isExternal: false\n  name: ReorderArgumentArray(Object[], Object)\n  nameWithType: Binder.ReorderArgumentArray(Object[], Object)\n  fullName: Binder.ReorderArgumentArray(Object[], Object)\n- uid: System.Reflection.Binder.SelectMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Type[],System.Reflection.ParameterModifier[])\n  parent: System.Reflection.Binder\n  isExternal: false\n  name: SelectMethod(BindingFlags, MethodBase[], Type[], ParameterModifier[])\n  nameWithType: Binder.SelectMethod(BindingFlags, MethodBase[], Type[], ParameterModifier[])\n  fullName: Binder.SelectMethod(BindingFlags, MethodBase[], Type[], ParameterModifier[])\n- uid: System.Type[]\n  parent: System\n  isExternal: false\n  name: Type[]\n  nameWithType: Type[]\n  fullName: System.Type[]\n  spec.csharp:\n  - uid: System.Type\n    name: Type\n    nameWithType: Type\n    fullName: System.Type\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Reflection.Binder.SelectProperty(System.Reflection.BindingFlags,System.Reflection.PropertyInfo[],System.Type,System.Type[],System.Reflection.ParameterModifier[])\n  parent: System.Reflection.Binder\n  isExternal: false\n  name: SelectProperty(BindingFlags, PropertyInfo[], Type, Type[], ParameterModifier[])\n  nameWithType: Binder.SelectProperty(BindingFlags, PropertyInfo[], Type, Type[], ParameterModifier[])\n  fullName: Binder.SelectProperty(BindingFlags, PropertyInfo[], Type, Type[], ParameterModifier[])\n- uid: System.Reflection.PropertyInfo\n  parent: System.Reflection\n  isExternal: false\n  name: PropertyInfo\n  nameWithType: PropertyInfo\n  fullName: System.Reflection.PropertyInfo\n- uid: System.Reflection.PropertyInfo[]\n  parent: System.Reflection\n  isExternal: false\n  name: PropertyInfo[]\n  nameWithType: PropertyInfo[]\n  fullName: System.Reflection.PropertyInfo[]\n  spec.csharp:\n  - uid: System.Reflection.PropertyInfo\n    name: PropertyInfo\n    nameWithType: PropertyInfo\n    fullName: System.Reflection.PropertyInfo\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Reflection.Binder.#ctor*\n  parent: System.Reflection.Binder\n  isExternal: false\n  name: Binder\n  nameWithType: Binder.Binder\n  fullName: Binder.Binder\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Binder.xml\n- uid: System.Reflection.Binder.BindToField*\n  parent: System.Reflection.Binder\n  isExternal: false\n  name: BindToField\n  nameWithType: Binder.BindToField\n  fullName: Binder.BindToField\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Binder.xml\n- uid: System.Reflection.Binder.BindToMethod*\n  parent: System.Reflection.Binder\n  isExternal: false\n  name: BindToMethod\n  nameWithType: Binder.BindToMethod\n  fullName: Binder.BindToMethod\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Binder.xml\n- uid: System.Reflection.Binder.CanChangeType*\n  parent: System.Reflection.Binder\n  isExternal: false\n  name: CanChangeType\n  nameWithType: Binder.CanChangeType\n  fullName: Binder.CanChangeType\n  monikers:\n  - xamarinios-10.8\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Binder.xml\n- uid: System.Reflection.Binder.ChangeType*\n  parent: System.Reflection.Binder\n  isExternal: false\n  name: ChangeType\n  nameWithType: Binder.ChangeType\n  fullName: Binder.ChangeType\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Binder.xml\n- uid: System.Reflection.Binder.ReorderArgumentArray*\n  parent: System.Reflection.Binder\n  isExternal: false\n  name: ReorderArgumentArray\n  nameWithType: Binder.ReorderArgumentArray\n  fullName: Binder.ReorderArgumentArray\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Binder.xml\n- uid: System.Reflection.Binder.SelectMethod*\n  parent: System.Reflection.Binder\n  isExternal: false\n  name: SelectMethod\n  nameWithType: Binder.SelectMethod\n  fullName: Binder.SelectMethod\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Binder.xml\n- uid: System.Reflection.Binder.SelectProperty*\n  parent: System.Reflection.Binder\n  isExternal: false\n  name: SelectProperty\n  nameWithType: Binder.SelectProperty\n  fullName: Binder.SelectProperty\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Binder.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n"}