{"nodes":[{"content":"Represents an in-memory cache of data.","nodes":[{"pos":[0,38],"content":"Represents an in-memory cache of data.","nodes":[{"content":"Represents an in-memory cache of data.","pos":[0,38]}]}],"pos":[6630,6669],"yaml":true},{"content":"The <xref:System.Data.DataSet>, which is an in-memory cache of data retrieved from a data source, is a major component of the ADO.NET architecture. The <xref:System.Data.DataSet> consists of a collection of <xref:System.Data.DataTable> objects that you can relate to each other with <xref:System.Data.DataRelation> objects. You can also enforce data integrity in the <xref:System.Data.DataSet> by using the <xref:System.Data.UniqueConstraint> and <xref:System.Data.ForeignKeyConstraint> objects. For further details about working with <xref:System.Data.DataSet> objects, see [DataSets, DataTables, and DataViews](~/docs/framework/data/adonet/dataset-datatable-dataview/index.md).  \n  \n Whereas <xref:System.Data.DataTable> objects contain the data, the <xref:System.Data.DataRelationCollection> allows you to navigate though the table hierarchy. The tables are contained in a <xref:System.Data.DataTableCollection> accessed through the <xref:System.Data.DataSet.Tables%2A> property. When accessing <xref:System.Data.DataTable> objects, note that they are conditionally case sensitive. For example, if one <xref:System.Data.DataTable> is named \"mydatatable\" and another is named \"Mydatatable\", a string used to search for one of the tables is regarded as case sensitive. However, if \"mydatatable\" exists and \"Mydatatable\" does not, the search string is regarded as case insensitive. For more information about working with <xref:System.Data.DataTable> objects, see [Creating a DataTable](~/docs/framework/data/adonet/dataset-datatable-dataview/creating-a-datatable.md).  \n  \n A <xref:System.Data.DataSet> can read and write data and schema as XML documents. The data and schema can then be transported across HTTP and used by any application, on any platform that is XML-enabled. You can save the schema as an XML schema with the <xref:System.Data.DataSet.WriteXmlSchema%2A> method, and both schema and data can be saved using the <xref:System.Data.DataSet.WriteXml%2A> method. To read an XML document that includes both schema and data, use the <xref:System.Data.DataSet.ReadXml%2A> method.  \n  \n In a typical multiple-tier implementation, the steps for creating and refreshing a <xref:System.Data.DataSet>, and in turn, updating the original data are to:  \n  \n1.  Build and fill each <xref:System.Data.DataTable> in a <xref:System.Data.DataSet> with data from a data source using a <xref:System.Data.Common.DataAdapter>.  \n  \n2.  Change the data in individual <xref:System.Data.DataTable> objects by adding, updating, or deleting <xref:System.Data.DataRow> objects.  \n  \n3.  Invoke the <xref:System.Data.DataSet.GetChanges%2A> method to create a second <xref:System.Data.DataSet> that features only the changes to the data.  \n  \n4.  Call the <xref:System.Data.Common.DataAdapter.Update%2A> method of the <xref:System.Data.Common.DataAdapter>, passing the second <xref:System.Data.DataSet> as an argument.  \n  \n5.  Invoke the <xref:System.Data.DataSet.Merge%2A> method to merge the changes from the second <xref:System.Data.DataSet> into the first.  \n  \n6.  Invoke the <xref:System.Data.DataSet.AcceptChanges%2A> on the <xref:System.Data.DataSet>. Alternatively, invoke <xref:System.Data.DataSet.RejectChanges%2A> to cancel the changes.  \n  \n> [!NOTE]\n>  The <xref:System.Data.DataSet> and <xref:System.Data.DataTable> objects inherit from <xref:System.ComponentModel.MarshalByValueComponent>, and support the <xref:System.Runtime.Serialization.ISerializable> interface for remoting. These are the only ADO.NET objects that can be remoted.  \n  \n> [!NOTE]\n>  Classes inherited from <xref:System.Data.DataSet> are not finalized by the garbage collector, because the finalizer has been suppressed in <xref:System.Data.DataSet>. The derived class can call the <xref:System.GC.ReRegisterForFinalize%2A> method in its constructor to allow the class to be finalized by the garbage collector.","nodes":[{"pos":[0,679],"content":"The <xref:System.Data.DataSet>, which is an in-memory cache of data retrieved from a data source, is a major component of the ADO.NET architecture. The <xref:System.Data.DataSet> consists of a collection of <xref:System.Data.DataTable> objects that you can relate to each other with <xref:System.Data.DataRelation> objects. You can also enforce data integrity in the <xref:System.Data.DataSet> by using the <xref:System.Data.UniqueConstraint> and <xref:System.Data.ForeignKeyConstraint> objects. For further details about working with <xref:System.Data.DataSet> objects, see [DataSets, DataTables, and DataViews](~/docs/framework/data/adonet/dataset-datatable-dataview/index.md).","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Data.DataSet&gt;</ph>, which is an in-memory cache of data retrieved from a data source, is a major component of the ADO.NET architecture.","pos":[0,147],"source":"The <xref:System.Data.DataSet>, which is an in-memory cache of data retrieved from a data source, is a major component of the ADO.NET architecture."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Data.DataSet&gt;</ph> consists of a collection of <ph id=\"ph2\">&lt;xref:System.Data.DataTable&gt;</ph> objects that you can relate to each other with <ph id=\"ph3\">&lt;xref:System.Data.DataRelation&gt;</ph> objects.","pos":[148,323],"source":" The <xref:System.Data.DataSet> consists of a collection of <xref:System.Data.DataTable> objects that you can relate to each other with <xref:System.Data.DataRelation> objects."},{"content":"You can also enforce data integrity in the <ph id=\"ph1\">&lt;xref:System.Data.DataSet&gt;</ph> by using the <ph id=\"ph2\">&lt;xref:System.Data.UniqueConstraint&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.Data.ForeignKeyConstraint&gt;</ph> objects.","pos":[324,495],"source":" You can also enforce data integrity in the <xref:System.Data.DataSet> by using the <xref:System.Data.UniqueConstraint> and <xref:System.Data.ForeignKeyConstraint> objects."},{"content":"For further details about working with <ph id=\"ph1\">&lt;xref:System.Data.DataSet&gt;</ph> objects, see <bpt id=\"p1\">[</bpt>DataSets, DataTables, and DataViews<ept id=\"p1\">](~/docs/framework/data/adonet/dataset-datatable-dataview/index.md)</ept>.","pos":[496,679],"source":" For further details about working with <xref:System.Data.DataSet> objects, see [DataSets, DataTables, and DataViews](~/docs/framework/data/adonet/dataset-datatable-dataview/index.md)."}]},{"pos":[686,1568],"content":"Whereas <xref:System.Data.DataTable> objects contain the data, the <xref:System.Data.DataRelationCollection> allows you to navigate though the table hierarchy. The tables are contained in a <xref:System.Data.DataTableCollection> accessed through the <xref:System.Data.DataSet.Tables%2A> property. When accessing <xref:System.Data.DataTable> objects, note that they are conditionally case sensitive. For example, if one <xref:System.Data.DataTable> is named \"mydatatable\" and another is named \"Mydatatable\", a string used to search for one of the tables is regarded as case sensitive. However, if \"mydatatable\" exists and \"Mydatatable\" does not, the search string is regarded as case insensitive. For more information about working with <xref:System.Data.DataTable> objects, see [Creating a DataTable](~/docs/framework/data/adonet/dataset-datatable-dataview/creating-a-datatable.md).","nodes":[{"content":"Whereas <ph id=\"ph1\">&lt;xref:System.Data.DataTable&gt;</ph> objects contain the data, the <ph id=\"ph2\">&lt;xref:System.Data.DataRelationCollection&gt;</ph> allows you to navigate though the table hierarchy.","pos":[0,159],"source":"Whereas <xref:System.Data.DataTable> objects contain the data, the <xref:System.Data.DataRelationCollection> allows you to navigate though the table hierarchy."},{"content":"The tables are contained in a <ph id=\"ph1\">&lt;xref:System.Data.DataTableCollection&gt;</ph> accessed through the <ph id=\"ph2\">&lt;xref:System.Data.DataSet.Tables%2A&gt;</ph> property.","pos":[160,296],"source":" The tables are contained in a <xref:System.Data.DataTableCollection> accessed through the <xref:System.Data.DataSet.Tables%2A> property."},{"content":"When accessing <ph id=\"ph1\">&lt;xref:System.Data.DataTable&gt;</ph> objects, note that they are conditionally case sensitive.","pos":[297,398],"source":" When accessing <xref:System.Data.DataTable> objects, note that they are conditionally case sensitive."},{"content":"For example, if one <ph id=\"ph1\">&lt;xref:System.Data.DataTable&gt;</ph> is named \"mydatatable\" and another is named \"Mydatatable\", a string used to search for one of the tables is regarded as case sensitive.","pos":[399,583],"source":" For example, if one <xref:System.Data.DataTable> is named \"mydatatable\" and another is named \"Mydatatable\", a string used to search for one of the tables is regarded as case sensitive."},{"content":"However, if \"mydatatable\" exists and \"Mydatatable\" does not, the search string is regarded as case insensitive.","pos":[584,695]},{"content":"For more information about working with <ph id=\"ph1\">&lt;xref:System.Data.DataTable&gt;</ph> objects, see <bpt id=\"p1\">[</bpt>Creating a DataTable<ept id=\"p1\">](~/docs/framework/data/adonet/dataset-datatable-dataview/creating-a-datatable.md)</ept>.","pos":[696,882],"source":" For more information about working with <xref:System.Data.DataTable> objects, see [Creating a DataTable](~/docs/framework/data/adonet/dataset-datatable-dataview/creating-a-datatable.md)."}]},{"pos":[1575,2090],"content":"A <xref:System.Data.DataSet> can read and write data and schema as XML documents. The data and schema can then be transported across HTTP and used by any application, on any platform that is XML-enabled. You can save the schema as an XML schema with the <xref:System.Data.DataSet.WriteXmlSchema%2A> method, and both schema and data can be saved using the <xref:System.Data.DataSet.WriteXml%2A> method. To read an XML document that includes both schema and data, use the <xref:System.Data.DataSet.ReadXml%2A> method.","nodes":[{"content":"A <xref:System.Data.DataSet> can read and write data and schema as XML documents. The data and schema can then be transported across HTTP and used by any application, on any platform that is XML-enabled. You can save the schema as an XML schema with the <xref:System.Data.DataSet.WriteXmlSchema%2A> method, and both schema and data can be saved using the <xref:System.Data.DataSet.WriteXml%2A> method. To read an XML document that includes both schema and data, use the <xref:System.Data.DataSet.ReadXml%2A> method.","pos":[0,515],"nodes":[{"content":"A <ph id=\"ph1\">&lt;xref:System.Data.DataSet&gt;</ph> can read and write data and schema as XML documents.","pos":[0,81],"source":"A <xref:System.Data.DataSet> can read and write data and schema as XML documents."},{"content":"The data and schema can then be transported across HTTP and used by any application, on any platform that is XML-enabled.","pos":[82,203]},{"content":"You can save the schema as an XML schema with the <ph id=\"ph1\">&lt;xref:System.Data.DataSet.WriteXmlSchema%2A&gt;</ph> method, and both schema and data can be saved using the <ph id=\"ph2\">&lt;xref:System.Data.DataSet.WriteXml%2A&gt;</ph> method.","pos":[204,401],"source":" You can save the schema as an XML schema with the <xref:System.Data.DataSet.WriteXmlSchema%2A> method, and both schema and data can be saved using the <xref:System.Data.DataSet.WriteXml%2A> method."},{"content":"To read an XML document that includes both schema and data, use the <ph id=\"ph1\">&lt;xref:System.Data.DataSet.ReadXml%2A&gt;</ph> method.","pos":[402,515],"source":" To read an XML document that includes both schema and data, use the <xref:System.Data.DataSet.ReadXml%2A> method."}]}]},{"pos":[2097,2255],"content":"In a typical multiple-tier implementation, the steps for creating and refreshing a <xref:System.Data.DataSet>, and in turn, updating the original data are to:","nodes":[{"content":"In a typical multiple-tier implementation, the steps for creating and refreshing a <ph id=\"ph1\">&lt;xref:System.Data.DataSet&gt;</ph>, and in turn, updating the original data are to:","pos":[0,158],"source":"In a typical multiple-tier implementation, the steps for creating and refreshing a <xref:System.Data.DataSet>, and in turn, updating the original data are to:"}]},{"pos":[2265,2421],"content":"Build and fill each <xref:System.Data.DataTable> in a <xref:System.Data.DataSet> with data from a data source using a <xref:System.Data.Common.DataAdapter>.","nodes":[{"content":"Build and fill each <ph id=\"ph1\">&lt;xref:System.Data.DataTable&gt;</ph> in a <ph id=\"ph2\">&lt;xref:System.Data.DataSet&gt;</ph> with data from a data source using a <ph id=\"ph3\">&lt;xref:System.Data.Common.DataAdapter&gt;</ph>.","pos":[0,156],"source":"Build and fill each <xref:System.Data.DataTable> in a <xref:System.Data.DataSet> with data from a data source using a <xref:System.Data.Common.DataAdapter>."}]},{"pos":[2431,2566],"content":"Change the data in individual <xref:System.Data.DataTable> objects by adding, updating, or deleting <xref:System.Data.DataRow> objects.","nodes":[{"content":"Change the data in individual <ph id=\"ph1\">&lt;xref:System.Data.DataTable&gt;</ph> objects by adding, updating, or deleting <ph id=\"ph2\">&lt;xref:System.Data.DataRow&gt;</ph> objects.","pos":[0,135],"source":"Change the data in individual <xref:System.Data.DataTable> objects by adding, updating, or deleting <xref:System.Data.DataRow> objects."}]},{"pos":[2576,2724],"content":"Invoke the <xref:System.Data.DataSet.GetChanges%2A> method to create a second <xref:System.Data.DataSet> that features only the changes to the data.","nodes":[{"content":"Invoke the <ph id=\"ph1\">&lt;xref:System.Data.DataSet.GetChanges%2A&gt;</ph> method to create a second <ph id=\"ph2\">&lt;xref:System.Data.DataSet&gt;</ph> that features only the changes to the data.","pos":[0,148],"source":"Invoke the <xref:System.Data.DataSet.GetChanges%2A> method to create a second <xref:System.Data.DataSet> that features only the changes to the data."}]},{"pos":[2734,2905],"content":"Call the <xref:System.Data.Common.DataAdapter.Update%2A> method of the <xref:System.Data.Common.DataAdapter>, passing the second <xref:System.Data.DataSet> as an argument.","nodes":[{"content":"Call the <ph id=\"ph1\">&lt;xref:System.Data.Common.DataAdapter.Update%2A&gt;</ph> method of the <ph id=\"ph2\">&lt;xref:System.Data.Common.DataAdapter&gt;</ph>, passing the second <ph id=\"ph3\">&lt;xref:System.Data.DataSet&gt;</ph> as an argument.","pos":[0,171],"source":"Call the <xref:System.Data.Common.DataAdapter.Update%2A> method of the <xref:System.Data.Common.DataAdapter>, passing the second <xref:System.Data.DataSet> as an argument."}]},{"pos":[2915,3048],"content":"Invoke the <xref:System.Data.DataSet.Merge%2A> method to merge the changes from the second <xref:System.Data.DataSet> into the first.","nodes":[{"content":"Invoke the <ph id=\"ph1\">&lt;xref:System.Data.DataSet.Merge%2A&gt;</ph> method to merge the changes from the second <ph id=\"ph2\">&lt;xref:System.Data.DataSet&gt;</ph> into the first.","pos":[0,133],"source":"Invoke the <xref:System.Data.DataSet.Merge%2A> method to merge the changes from the second <xref:System.Data.DataSet> into the first."}]},{"pos":[3058,3236],"content":"Invoke the <xref:System.Data.DataSet.AcceptChanges%2A> on the <xref:System.Data.DataSet>. Alternatively, invoke <xref:System.Data.DataSet.RejectChanges%2A> to cancel the changes.","nodes":[{"content":"Invoke the <xref:System.Data.DataSet.AcceptChanges%2A> on the <xref:System.Data.DataSet>. Alternatively, invoke <xref:System.Data.DataSet.RejectChanges%2A> to cancel the changes.","pos":[0,178],"nodes":[{"content":"Invoke the <ph id=\"ph1\">&lt;xref:System.Data.DataSet.AcceptChanges%2A&gt;</ph> on the <ph id=\"ph2\">&lt;xref:System.Data.DataSet&gt;</ph>.","pos":[0,89],"source":"Invoke the <xref:System.Data.DataSet.AcceptChanges%2A> on the <xref:System.Data.DataSet>."},{"content":"Alternatively, invoke <ph id=\"ph1\">&lt;xref:System.Data.DataSet.RejectChanges%2A&gt;</ph> to cancel the changes.","pos":[90,178],"source":" Alternatively, invoke <xref:System.Data.DataSet.RejectChanges%2A> to cancel the changes."}]}]},{"pos":[3244,3539],"content":"[!NOTE]\n The <xref:System.Data.DataSet> and <xref:System.Data.DataTable> objects inherit from <xref:System.ComponentModel.MarshalByValueComponent>, and support the <xref:System.Runtime.Serialization.ISerializable> interface for remoting. These are the only ADO.NET objects that can be remoted.","leadings":["","> "],"nodes":[{"content":" The <xref:System.Data.DataSet> and <xref:System.Data.DataTable> objects inherit from <xref:System.ComponentModel.MarshalByValueComponent>, and support the <xref:System.Runtime.Serialization.ISerializable> interface for remoting. These are the only ADO.NET objects that can be remoted.","pos":[8,293],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Data.DataSet&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Data.DataTable&gt;</ph> objects inherit from <ph id=\"ph3\">&lt;xref:System.ComponentModel.MarshalByValueComponent&gt;</ph>, and support the <ph id=\"ph4\">&lt;xref:System.Runtime.Serialization.ISerializable&gt;</ph> interface for remoting.","pos":[1,229],"source":" The <xref:System.Data.DataSet> and <xref:System.Data.DataTable> objects inherit from <xref:System.ComponentModel.MarshalByValueComponent>, and support the <xref:System.Runtime.Serialization.ISerializable> interface for remoting."},{"content":"These are the only ADO.NET objects that can be remoted.","pos":[230,285]}]}]},{"pos":[3547,3884],"content":"[!NOTE]\n Classes inherited from <xref:System.Data.DataSet> are not finalized by the garbage collector, because the finalizer has been suppressed in <xref:System.Data.DataSet>. The derived class can call the <xref:System.GC.ReRegisterForFinalize%2A> method in its constructor to allow the class to be finalized by the garbage collector.","leadings":["","> "],"nodes":[{"content":" Classes inherited from <xref:System.Data.DataSet> are not finalized by the garbage collector, because the finalizer has been suppressed in <xref:System.Data.DataSet>. The derived class can call the <xref:System.GC.ReRegisterForFinalize%2A> method in its constructor to allow the class to be finalized by the garbage collector.","pos":[8,335],"nodes":[{"content":"Classes inherited from <ph id=\"ph1\">&lt;xref:System.Data.DataSet&gt;</ph> are not finalized by the garbage collector, because the finalizer has been suppressed in <ph id=\"ph2\">&lt;xref:System.Data.DataSet&gt;</ph>.","pos":[1,167],"source":" Classes inherited from <xref:System.Data.DataSet> are not finalized by the garbage collector, because the finalizer has been suppressed in <xref:System.Data.DataSet>."},{"content":"The derived class can call the <ph id=\"ph1\">&lt;xref:System.GC.ReRegisterForFinalize%2A&gt;</ph> method in its constructor to allow the class to be finalized by the garbage collector.","pos":[168,327],"source":" The derived class can call the <xref:System.GC.ReRegisterForFinalize%2A> method in its constructor to allow the class to be finalized by the garbage collector."}]}]}],"pos":[6680,10599],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Data.DataSet\"></xref> class.","nodes":[{"pos":[0,81],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Data.DataSet\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.Data.DataSet\"></xref> class."}],"pos":[13462,13544],"yaml":true},{"content":"This implementation of the <xref:System.Data.DataSet> constructor takes no parameters, and creates a default name, \"NewDataSet,\" for the new instance.  \n  \n A name for the <xref:System.Data.DataSet> is required to ensure that the XML representation of the <xref:System.Data.DataSet> always has a name for the document element, which is the highest-level element in a schema definition.","nodes":[{"pos":[0,150],"content":"This implementation of the <xref:System.Data.DataSet> constructor takes no parameters, and creates a default name, \"NewDataSet,\" for the new instance.","nodes":[{"content":"This implementation of the <ph id=\"ph1\">&lt;xref:System.Data.DataSet&gt;</ph> constructor takes no parameters, and creates a default name, \"NewDataSet,\" for the new instance.","pos":[0,150],"source":"This implementation of the <xref:System.Data.DataSet> constructor takes no parameters, and creates a default name, \"NewDataSet,\" for the new instance."}]},{"pos":[157,385],"content":"A name for the <xref:System.Data.DataSet> is required to ensure that the XML representation of the <xref:System.Data.DataSet> always has a name for the document element, which is the highest-level element in a schema definition.","nodes":[{"content":"A name for the <ph id=\"ph1\">&lt;xref:System.Data.DataSet&gt;</ph> is required to ensure that the XML representation of the <ph id=\"ph2\">&lt;xref:System.Data.DataSet&gt;</ph> always has a name for the document element, which is the highest-level element in a schema definition.","pos":[0,228],"source":"A name for the <xref:System.Data.DataSet> is required to ensure that the XML representation of the <xref:System.Data.DataSet> always has a name for the document element, which is the highest-level element in a schema definition."}]}],"pos":[13555,13947],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of a <xref href=\"System.Data.DataSet\"></xref> class with the given name.","nodes":[{"pos":[0,99],"content":"Initializes a new instance of a <ph id=\"ph1\">&lt;xref href=\"System.Data.DataSet\"&gt;&lt;/xref&gt;</ph> class with the given name.","source":"Initializes a new instance of a <xref href=\"System.Data.DataSet\"></xref> class with the given name."}],"pos":[15496,15596],"yaml":true},{"content":"A name for the <xref:System.Data.DataSet> is required to ensure that the XML representation of the <xref:System.Data.DataSet> always has a name for the document element, which is the highest level element in a schema definition.","nodes":[{"pos":[0,228],"content":"A name for the <xref:System.Data.DataSet> is required to ensure that the XML representation of the <xref:System.Data.DataSet> always has a name for the document element, which is the highest level element in a schema definition.","nodes":[{"content":"A name for the <ph id=\"ph1\">&lt;xref:System.Data.DataSet&gt;</ph> is required to ensure that the XML representation of the <ph id=\"ph2\">&lt;xref:System.Data.DataSet&gt;</ph> always has a name for the document element, which is the highest level element in a schema definition.","pos":[0,228],"source":"A name for the <xref:System.Data.DataSet> is required to ensure that the XML representation of the <xref:System.Data.DataSet> always has a name for the document element, which is the highest level element in a schema definition."}]}],"pos":[15607,15836],"yaml":true,"extradata":"MT"},{"content":"The name of the <xref href=\"System.Data.DataSet\"></xref>.","nodes":[{"pos":[0,57],"content":"The name of the <ph id=\"ph1\">&lt;xref href=\"System.Data.DataSet\"&gt;&lt;/xref&gt;</ph>.","source":"The name of the <xref href=\"System.Data.DataSet\"></xref>."}],"pos":[16292,16350],"yaml":true},{"content":"Initializes a new instance of a <xref href=\"System.Data.DataSet\"></xref> class that has the given serialization information and context.","nodes":[{"pos":[0,136],"content":"Initializes a new instance of a <ph id=\"ph1\">&lt;xref href=\"System.Data.DataSet\"&gt;&lt;/xref&gt;</ph> class that has the given serialization information and context.","source":"Initializes a new instance of a <xref href=\"System.Data.DataSet\"></xref> class that has the given serialization information and context."}],"pos":[17855,17992],"yaml":true},{"content":"The data needed to serialize or deserialize an object.","nodes":[{"pos":[0,54],"content":"The data needed to serialize or deserialize an object.","nodes":[{"content":"The data needed to serialize or deserialize an object.","pos":[0,54]}]}],"pos":[18252,18307],"yaml":true},{"content":"The source and destination of a given serialized stream.","nodes":[{"pos":[0,56],"content":"The source and destination of a given serialized stream.","nodes":[{"content":"The source and destination of a given serialized stream.","pos":[0,56]}]}],"pos":[18402,18459],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Data.DataSet\"></xref> class.","nodes":[{"pos":[0,81],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Data.DataSet\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.Data.DataSet\"></xref> class."}],"pos":[20036,20118],"yaml":true},{"content":"The <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> object.","nodes":[{"pos":[0,79],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Runtime.Serialization.SerializationInfo\"&gt;&lt;/xref&gt;</ph> object.","source":"The <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> object."}],"pos":[20400,20480],"yaml":true},{"content":"The <xref href=\"System.Runtime.Serialization.StreamingContext\"></xref> object.","nodes":[{"pos":[0,78],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Runtime.Serialization.StreamingContext\"&gt;&lt;/xref&gt;</ph> object.","source":"The <xref href=\"System.Runtime.Serialization.StreamingContext\"></xref> object."}],"pos":[20575,20654],"yaml":true},{"content":"The boolean value.","nodes":[{"pos":[0,18],"content":"The boolean value.","nodes":[{"content":"The boolean value.","pos":[0,18]}]}],"pos":[20726,20745],"yaml":true},{"content":"Commits all the changes made to this <xref href=\"System.Data.DataSet\"></xref> since it was loaded or since the last time <xref href=\"System.Data.DataSet.AcceptChanges\"></xref> was called.","nodes":[{"pos":[0,187],"content":"Commits all the changes made to this <ph id=\"ph1\">&lt;xref href=\"System.Data.DataSet\"&gt;&lt;/xref&gt;</ph> since it was loaded or since the last time <ph id=\"ph2\">&lt;xref href=\"System.Data.DataSet.AcceptChanges\"&gt;&lt;/xref&gt;</ph> was called.","source":"Commits all the changes made to this <xref href=\"System.Data.DataSet\"></xref> since it was loaded or since the last time <xref href=\"System.Data.DataSet.AcceptChanges\"></xref> was called."}],"pos":[21898,22086],"yaml":true},{"content":"Both the <xref:System.Data.DataRow> and <xref:System.Data.DataTable> classes have <xref:System.Data.DataSet.AcceptChanges%2A> methods. Calling <xref:System.Data.DataTable.AcceptChanges%2A> at the <xref:System.Data.DataTable> level causes the <xref:System.Data.DataRow.AcceptChanges%2A> method for each <xref:System.Data.DataRow> to be called. Similarly, invoking <xref:System.Data.DataSet.AcceptChanges%2A> on the <xref:System.Data.DataSet> causes <xref:System.Data.DataTable.AcceptChanges%2A> to be called on each table within the <xref:System.Data.DataSet>. In this manner, you have multiple levels at which the method can be invoked. Calling the <xref:System.Data.DataSet.AcceptChanges%2A> of the <xref:System.Data.DataSet> enables you to invoke the method on all subordinate objects (for example, tables and rows) with one call.  \n  \n When you call `AcceptChanges` on the `DataSet`, any <xref:System.Data.DataRow> objects still in edit-mode end their edits successfully. The <xref:System.Data.DataRow.RowState%2A> property of each <xref:System.Data.DataRow> also changes; `Added` and `Modified` rows become `Unchanged`, and `Deleted` rows are removed.  \n  \n If the `DataSet` contains <xref:System.Data.ForeignKeyConstraint> objects, invoking the `AcceptChanges` method also causes the <xref:System.Data.ForeignKeyConstraint.AcceptRejectRule%2A> to be enforced.  \n  \n> [!NOTE]\n>  `AcceptChanges` and `RejectChanges` only apply to `DataRow` related changes (that is, Add, Remove, Delete, and Modify). They are not applicable to schema or structural changes.  \n>   \n>  Calling AcceptChanges will not replicate these changes back to the data source if the DataSet was filled using a DataAdapter. In that situation, call <xref:System.Data.Common.DataAdapter.Update%2A> instead. See [Updating Data Sources with DataAdapters](http://msdn.microsoft.com/library/33y2221y.aspx) for more information.","nodes":[{"pos":[0,832],"content":"Both the <xref:System.Data.DataRow> and <xref:System.Data.DataTable> classes have <xref:System.Data.DataSet.AcceptChanges%2A> methods. Calling <xref:System.Data.DataTable.AcceptChanges%2A> at the <xref:System.Data.DataTable> level causes the <xref:System.Data.DataRow.AcceptChanges%2A> method for each <xref:System.Data.DataRow> to be called. Similarly, invoking <xref:System.Data.DataSet.AcceptChanges%2A> on the <xref:System.Data.DataSet> causes <xref:System.Data.DataTable.AcceptChanges%2A> to be called on each table within the <xref:System.Data.DataSet>. In this manner, you have multiple levels at which the method can be invoked. Calling the <xref:System.Data.DataSet.AcceptChanges%2A> of the <xref:System.Data.DataSet> enables you to invoke the method on all subordinate objects (for example, tables and rows) with one call.","nodes":[{"content":"Both the <xref:System.Data.DataRow> and <xref:System.Data.DataTable> classes have <xref:System.Data.DataSet.AcceptChanges%2A> methods. Calling <xref:System.Data.DataTable.AcceptChanges%2A> at the <xref:System.Data.DataTable> level causes the <xref:System.Data.DataRow.AcceptChanges%2A> method for each <xref:System.Data.DataRow> to be called. Similarly, invoking <xref:System.Data.DataSet.AcceptChanges%2A> on the <xref:System.Data.DataSet> causes <xref:System.Data.DataTable.AcceptChanges%2A> to be called on each table within the <xref:System.Data.DataSet>. In this manner, you have multiple levels at which the method can be invoked. Calling the <xref:System.Data.DataSet.AcceptChanges%2A> of the <xref:System.Data.DataSet> enables you to invoke the method on all subordinate objects (for example, tables and rows) with one call.","pos":[0,832],"nodes":[{"content":"Both the <ph id=\"ph1\">&lt;xref:System.Data.DataRow&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Data.DataTable&gt;</ph> classes have <ph id=\"ph3\">&lt;xref:System.Data.DataSet.AcceptChanges%2A&gt;</ph> methods.","pos":[0,134],"source":"Both the <xref:System.Data.DataRow> and <xref:System.Data.DataTable> classes have <xref:System.Data.DataSet.AcceptChanges%2A> methods."},{"content":"Calling <ph id=\"ph1\">&lt;xref:System.Data.DataTable.AcceptChanges%2A&gt;</ph> at the <ph id=\"ph2\">&lt;xref:System.Data.DataTable&gt;</ph> level causes the <ph id=\"ph3\">&lt;xref:System.Data.DataRow.AcceptChanges%2A&gt;</ph> method for each <ph id=\"ph4\">&lt;xref:System.Data.DataRow&gt;</ph> to be called.","pos":[135,342],"source":" Calling <xref:System.Data.DataTable.AcceptChanges%2A> at the <xref:System.Data.DataTable> level causes the <xref:System.Data.DataRow.AcceptChanges%2A> method for each <xref:System.Data.DataRow> to be called."},{"content":"Similarly, invoking <ph id=\"ph1\">&lt;xref:System.Data.DataSet.AcceptChanges%2A&gt;</ph> on the <ph id=\"ph2\">&lt;xref:System.Data.DataSet&gt;</ph> causes <ph id=\"ph3\">&lt;xref:System.Data.DataTable.AcceptChanges%2A&gt;</ph> to be called on each table within the <ph id=\"ph4\">&lt;xref:System.Data.DataSet&gt;</ph>.","pos":[343,559],"source":" Similarly, invoking <xref:System.Data.DataSet.AcceptChanges%2A> on the <xref:System.Data.DataSet> causes <xref:System.Data.DataTable.AcceptChanges%2A> to be called on each table within the <xref:System.Data.DataSet>."},{"content":"In this manner, you have multiple levels at which the method can be invoked.","pos":[560,636]},{"content":"Calling the <ph id=\"ph1\">&lt;xref:System.Data.DataSet.AcceptChanges%2A&gt;</ph> of the <ph id=\"ph2\">&lt;xref:System.Data.DataSet&gt;</ph> enables you to invoke the method on all subordinate objects (for example, tables and rows) with one call.","pos":[637,832],"source":" Calling the <xref:System.Data.DataSet.AcceptChanges%2A> of the <xref:System.Data.DataSet> enables you to invoke the method on all subordinate objects (for example, tables and rows) with one call."}]}]},{"pos":[839,1155],"content":"When you call `AcceptChanges` on the `DataSet`, any <xref:System.Data.DataRow> objects still in edit-mode end their edits successfully. The <xref:System.Data.DataRow.RowState%2A> property of each <xref:System.Data.DataRow> also changes; `Added` and `Modified` rows become `Unchanged`, and `Deleted` rows are removed.","nodes":[{"content":"When you call <ph id=\"ph1\">`AcceptChanges`</ph> on the <ph id=\"ph2\">`DataSet`</ph>, any <ph id=\"ph3\">&lt;xref:System.Data.DataRow&gt;</ph> objects still in edit-mode end their edits successfully.","pos":[0,135],"source":"When you call `AcceptChanges` on the `DataSet`, any <xref:System.Data.DataRow> objects still in edit-mode end their edits successfully."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Data.DataRow.RowState%2A&gt;</ph> property of each <ph id=\"ph2\">&lt;xref:System.Data.DataRow&gt;</ph> also changes; <ph id=\"ph3\">`Added`</ph> and <ph id=\"ph4\">`Modified`</ph> rows become <ph id=\"ph5\">`Unchanged`</ph>, and <ph id=\"ph6\">`Deleted`</ph> rows are removed.","pos":[136,316],"source":" The <xref:System.Data.DataRow.RowState%2A> property of each <xref:System.Data.DataRow> also changes; `Added` and `Modified` rows become `Unchanged`, and `Deleted` rows are removed."}]},{"pos":[1162,1364],"content":"If the <ph id=\"ph1\">`DataSet`</ph> contains <ph id=\"ph2\">&lt;xref:System.Data.ForeignKeyConstraint&gt;</ph> objects, invoking the <ph id=\"ph3\">`AcceptChanges`</ph> method also causes the <ph id=\"ph4\">&lt;xref:System.Data.ForeignKeyConstraint.AcceptRejectRule%2A&gt;</ph> to be enforced.","source":"If the `DataSet` contains <xref:System.Data.ForeignKeyConstraint> objects, invoking the `AcceptChanges` method also causes the <xref:System.Data.ForeignKeyConstraint.AcceptRejectRule%2A> to be enforced."},{"pos":[1372,1559],"content":"[!NOTE]\n `AcceptChanges` and `RejectChanges` only apply to `DataRow` related changes (that is, Add, Remove, Delete, and Modify). They are not applicable to schema or structural changes.","leadings":["","> "],"nodes":[{"content":" `AcceptChanges` and `RejectChanges` only apply to `DataRow` related changes (that is, Add, Remove, Delete, and Modify). They are not applicable to schema or structural changes.","pos":[8,185],"nodes":[{"content":"<ph id=\"ph1\"> `AcceptChanges`</ph> and <ph id=\"ph2\">`RejectChanges`</ph> only apply to <ph id=\"ph3\">`DataRow`</ph> related changes (that is, Add, Remove, Delete, and Modify).","pos":[0,120],"source":" `AcceptChanges` and `RejectChanges` only apply to `DataRow` related changes (that is, Add, Remove, Delete, and Modify)."},{"content":"They are not applicable to schema or structural changes.","pos":[121,177]}]}]},{"pos":[1570,1893],"content":"Calling AcceptChanges will not replicate these changes back to the data source if the DataSet was filled using a DataAdapter. In that situation, call <xref:System.Data.Common.DataAdapter.Update%2A> instead. See [Updating Data Sources with DataAdapters](http://msdn.microsoft.com/library/33y2221y.aspx) for more information.","nodes":[{"content":"Calling AcceptChanges will not replicate these changes back to the data source if the DataSet was filled using a DataAdapter.","pos":[0,125]},{"content":"In that situation, call <ph id=\"ph1\">&lt;xref:System.Data.Common.DataAdapter.Update%2A&gt;</ph> instead.","pos":[126,206],"source":" In that situation, call <xref:System.Data.Common.DataAdapter.Update%2A> instead."},{"content":"See <bpt id=\"p1\">[</bpt>Updating Data Sources with DataAdapters<ept id=\"p1\">](http://msdn.microsoft.com/library/33y2221y.aspx)</ept> for more information.","pos":[207,323],"source":" See [Updating Data Sources with DataAdapters](http://msdn.microsoft.com/library/33y2221y.aspx) for more information."}]}],"pos":[22097,24002],"yaml":true,"extradata":"MT"},{"content":"Begins the initialization of a <xref href=\"System.Data.DataSet\"></xref> that is used on a form or used by another component. The initialization occurs at run time.","nodes":[{"pos":[0,163],"content":"Begins the initialization of a <xref href=\"System.Data.DataSet\"></xref> that is used on a form or used by another component. The initialization occurs at run time.","nodes":[{"content":"Begins the initialization of a <ph id=\"ph1\">&lt;xref href=\"System.Data.DataSet\"&gt;&lt;/xref&gt;</ph> that is used on a form or used by another component.","pos":[0,124],"source":"Begins the initialization of a <xref href=\"System.Data.DataSet\"></xref> that is used on a form or used by another component."},{"content":"The initialization occurs at run time.","pos":[125,163]}]}],"pos":[25856,26020],"yaml":true},{"content":"The Visual Studio .NET design environment uses this method to start the initialization of a component that is used on a form or used by another component. The <xref:System.Data.DataSet.EndInit%2A> method ends the initialization. Using the <xref:System.Data.DataSet.BeginInit%2A> and <xref:System.Data.DataSet.EndInit%2A> methods prevents the control from being used before it is fully initialized.","nodes":[{"pos":[0,397],"content":"The Visual Studio .NET design environment uses this method to start the initialization of a component that is used on a form or used by another component. The <xref:System.Data.DataSet.EndInit%2A> method ends the initialization. Using the <xref:System.Data.DataSet.BeginInit%2A> and <xref:System.Data.DataSet.EndInit%2A> methods prevents the control from being used before it is fully initialized.","nodes":[{"content":"The Visual Studio .NET design environment uses this method to start the initialization of a component that is used on a form or used by another component. The <xref:System.Data.DataSet.EndInit%2A> method ends the initialization. Using the <xref:System.Data.DataSet.BeginInit%2A> and <xref:System.Data.DataSet.EndInit%2A> methods prevents the control from being used before it is fully initialized.","pos":[0,397],"nodes":[{"content":"The Visual Studio .NET design environment uses this method to start the initialization of a component that is used on a form or used by another component.","pos":[0,154]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Data.DataSet.EndInit%2A&gt;</ph> method ends the initialization.","pos":[155,228],"source":" The <xref:System.Data.DataSet.EndInit%2A> method ends the initialization."},{"content":"Using the <ph id=\"ph1\">&lt;xref:System.Data.DataSet.BeginInit%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Data.DataSet.EndInit%2A&gt;</ph> methods prevents the control from being used before it is fully initialized.","pos":[229,397],"source":" Using the <xref:System.Data.DataSet.BeginInit%2A> and <xref:System.Data.DataSet.EndInit%2A> methods prevents the control from being used before it is fully initialized."}]}]}],"pos":[26031,26429],"yaml":true,"extradata":"MT"},{"content":"Gets or sets a value indicating whether string comparisons within <xref href=\"System.Data.DataTable\"></xref> objects are case-sensitive.","nodes":[{"pos":[0,136],"content":"Gets or sets a value indicating whether string comparisons within <ph id=\"ph1\">&lt;xref href=\"System.Data.DataTable\"&gt;&lt;/xref&gt;</ph> objects are case-sensitive.","source":"Gets or sets a value indicating whether string comparisons within <xref href=\"System.Data.DataTable\"></xref> objects are case-sensitive."}],"pos":[27650,27787],"yaml":true},{"content":"The <xref:System.Data.DataSet.CaseSensitive%2A> property affects how sorting, searching, and filtering operations are performed on each <xref:System.Data.DataTable> object contained in a <xref:System.Data.DataSet> when using the <xref:System.Data.DataTable.Select%2A> method.  \n  \n By default, setting the <xref:System.Data.DataSet.CaseSensitive%2A> property for a <xref:System.Data.DataSet> also sets the <xref:System.Data.DataTable.CaseSensitive%2A> property of each associated <xref:System.Data.DataTable> to the same value.","nodes":[{"pos":[0,275],"content":"The <xref:System.Data.DataSet.CaseSensitive%2A> property affects how sorting, searching, and filtering operations are performed on each <xref:System.Data.DataTable> object contained in a <xref:System.Data.DataSet> when using the <xref:System.Data.DataTable.Select%2A> method.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Data.DataSet.CaseSensitive%2A&gt;</ph> property affects how sorting, searching, and filtering operations are performed on each <ph id=\"ph2\">&lt;xref:System.Data.DataTable&gt;</ph> object contained in a <ph id=\"ph3\">&lt;xref:System.Data.DataSet&gt;</ph> when using the <ph id=\"ph4\">&lt;xref:System.Data.DataTable.Select%2A&gt;</ph> method.","pos":[0,275],"source":"The <xref:System.Data.DataSet.CaseSensitive%2A> property affects how sorting, searching, and filtering operations are performed on each <xref:System.Data.DataTable> object contained in a <xref:System.Data.DataSet> when using the <xref:System.Data.DataTable.Select%2A> method."}]},{"pos":[282,527],"content":"By default, setting the <xref:System.Data.DataSet.CaseSensitive%2A> property for a <xref:System.Data.DataSet> also sets the <xref:System.Data.DataTable.CaseSensitive%2A> property of each associated <xref:System.Data.DataTable> to the same value.","nodes":[{"content":"By default, setting the <ph id=\"ph1\">&lt;xref:System.Data.DataSet.CaseSensitive%2A&gt;</ph> property for a <ph id=\"ph2\">&lt;xref:System.Data.DataSet&gt;</ph> also sets the <ph id=\"ph3\">&lt;xref:System.Data.DataTable.CaseSensitive%2A&gt;</ph> property of each associated <ph id=\"ph4\">&lt;xref:System.Data.DataTable&gt;</ph> to the same value.","pos":[0,245],"source":"By default, setting the <xref:System.Data.DataSet.CaseSensitive%2A> property for a <xref:System.Data.DataSet> also sets the <xref:System.Data.DataTable.CaseSensitive%2A> property of each associated <xref:System.Data.DataTable> to the same value."}]}],"pos":[27798,28330],"yaml":true,"extradata":"MT"},{"content":"`true` if string comparisons are case-sensitive; otherwise `false`. The default is `false`.","nodes":[{"pos":[0,91],"content":"`true` if string comparisons are case-sensitive; otherwise `false`. The default is `false`.","nodes":[{"content":"<ph id=\"ph1\">`true`</ph> if string comparisons are case-sensitive; otherwise <ph id=\"ph2\">`false`</ph>.","pos":[0,67],"source":"`true` if string comparisons are case-sensitive; otherwise `false`."},{"content":"The default is <ph id=\"ph1\">`false`</ph>.","pos":[68,91],"source":" The default is `false`."}]}],"pos":[28737,28831],"yaml":true},{"content":"Clears the <xref href=\"System.Data.DataSet\"></xref> of any data by removing all rows in all tables.","nodes":[{"pos":[0,99],"content":"Clears the <ph id=\"ph1\">&lt;xref href=\"System.Data.DataSet\"&gt;&lt;/xref&gt;</ph> of any data by removing all rows in all tables.","source":"Clears the <xref href=\"System.Data.DataSet\"></xref> of any data by removing all rows in all tables."}],"pos":[29961,30061],"yaml":true},{"content":"If the <xref:System.Data.DataSet> is bound to an <xref:System.Xml.XmlDataDocument>, calling <xref:System.Data.DataSet.Clear%2A?displayProperty=fullName> or <xref:System.Data.DataTable.Clear%2A?displayProperty=fullName> raises the <xref:System.NotSupportedException>. To avoid this situation, traverse each table, removing each row one at a time.","nodes":[{"pos":[0,345],"content":"If the <xref:System.Data.DataSet> is bound to an <xref:System.Xml.XmlDataDocument>, calling <xref:System.Data.DataSet.Clear%2A?displayProperty=fullName> or <xref:System.Data.DataTable.Clear%2A?displayProperty=fullName> raises the <xref:System.NotSupportedException>. To avoid this situation, traverse each table, removing each row one at a time.","nodes":[{"content":"If the <xref:System.Data.DataSet> is bound to an <xref:System.Xml.XmlDataDocument>, calling <xref:System.Data.DataSet.Clear%2A?displayProperty=fullName> or <xref:System.Data.DataTable.Clear%2A?displayProperty=fullName> raises the <xref:System.NotSupportedException>. To avoid this situation, traverse each table, removing each row one at a time.","pos":[0,345],"nodes":[{"content":"If the <ph id=\"ph1\">&lt;xref:System.Data.DataSet&gt;</ph> is bound to an <ph id=\"ph2\">&lt;xref:System.Xml.XmlDataDocument&gt;</ph>, calling <ph id=\"ph3\">&lt;xref:System.Data.DataSet.Clear%2A?displayProperty=fullName&gt;</ph> or <ph id=\"ph4\">&lt;xref:System.Data.DataTable.Clear%2A?displayProperty=fullName&gt;</ph> raises the <ph id=\"ph5\">&lt;xref:System.NotSupportedException&gt;</ph>.","pos":[0,266],"source":"If the <xref:System.Data.DataSet> is bound to an <xref:System.Xml.XmlDataDocument>, calling <xref:System.Data.DataSet.Clear%2A?displayProperty=fullName> or <xref:System.Data.DataTable.Clear%2A?displayProperty=fullName> raises the <xref:System.NotSupportedException>."},{"content":"To avoid this situation, traverse each table, removing each row one at a time.","pos":[267,345]}]}]}],"pos":[30072,30418],"yaml":true,"extradata":"MT"},{"content":"Copies the structure of the <xref href=\"System.Data.DataSet\"></xref>, including all <xref href=\"System.Data.DataTable\"></xref> schemas, relations, and constraints. Does not copy any data.","nodes":[{"pos":[0,187],"content":"Copies the structure of the <xref href=\"System.Data.DataSet\"></xref>, including all <xref href=\"System.Data.DataTable\"></xref> schemas, relations, and constraints. Does not copy any data.","nodes":[{"content":"Copies the structure of the <ph id=\"ph1\">&lt;xref href=\"System.Data.DataSet\"&gt;&lt;/xref&gt;</ph>, including all <ph id=\"ph2\">&lt;xref href=\"System.Data.DataTable\"&gt;&lt;/xref&gt;</ph> schemas, relations, and constraints.","pos":[0,163],"source":"Copies the structure of the <xref href=\"System.Data.DataSet\"></xref>, including all <xref href=\"System.Data.DataTable\"></xref> schemas, relations, and constraints."},{"content":"Does not copy any data.","pos":[164,187]}]}],"pos":[32014,32202],"yaml":true},{"content":"> [!NOTE]\n>  If these classes have been subclassed, the clone will also be of the same subclasses.","nodes":[{"pos":[2,98],"content":"[!NOTE]\n If these classes have been subclassed, the clone will also be of the same subclasses.","leadings":["","> "],"nodes":[{"content":"If these classes have been subclassed, the clone will also be of the same subclasses.","pos":[9,94]}]}],"pos":[32213,32324],"yaml":true,"extradata":"MT"},{"content":"A new <xref href=\"System.Data.DataSet\"></xref> with the same schema as the current <xref href=\"System.Data.DataSet\"></xref>, but none of the data.","nodes":[{"pos":[0,146],"content":"A new <ph id=\"ph1\">&lt;xref href=\"System.Data.DataSet\"&gt;&lt;/xref&gt;</ph> with the same schema as the current <ph id=\"ph2\">&lt;xref href=\"System.Data.DataSet\"&gt;&lt;/xref&gt;</ph>, but none of the data.","source":"A new <xref href=\"System.Data.DataSet\"></xref> with the same schema as the current <xref href=\"System.Data.DataSet\"></xref>, but none of the data."}],"pos":[32901,33048],"yaml":true},{"content":"Copies both the structure and data for this <xref href=\"System.Data.DataSet\"></xref>.","nodes":[{"pos":[0,85],"content":"Copies both the structure and data for this <ph id=\"ph1\">&lt;xref href=\"System.Data.DataSet\"&gt;&lt;/xref&gt;</ph>.","source":"Copies both the structure and data for this <xref href=\"System.Data.DataSet\"></xref>."}],"pos":[34147,34233],"yaml":true},{"content":"A new <xref href=\"System.Data.DataSet\"></xref> with the same structure (table schemas, relations, and constraints) and data as this <xref href=\"System.Data.DataSet\"></xref>.  \n  \n <block subset=\"none\" type=\"note\"><p>  \n If these classes have been subclassed, the copy will also be of the same subclasses.  \n  \n</p></block>","nodes":[{"pos":[0,173],"content":"A new <ph id=\"ph1\">&lt;xref href=\"System.Data.DataSet\"&gt;&lt;/xref&gt;</ph> with the same structure (table schemas, relations, and constraints) and data as this <ph id=\"ph2\">&lt;xref href=\"System.Data.DataSet\"&gt;&lt;/xref&gt;</ph>.","source":"A new <xref href=\"System.Data.DataSet\"></xref> with the same structure (table schemas, relations, and constraints) and data as this <xref href=\"System.Data.DataSet\"></xref>."},{"pos":[180,304],"content":"<block subset=\"none\" type=\"note\"><p>  \n If these classes have been subclassed, the copy will also be of the same subclasses.","nodes":[{"content":"If these classes have been subclassed, the copy will also be of the same subclasses.","pos":[40,124]}]},{"pos":[310,322],"content":"</p></block>","nodes":[]}],"pos":[34858,35196],"yaml":true},{"content":"Returns a <xref href=\"System.Data.DataTableReader\"></xref> with one result set per <xref href=\"System.Data.DataTable\"></xref>.","nodes":[{"pos":[0,126],"content":"Returns a <ph id=\"ph1\">&lt;xref href=\"System.Data.DataTableReader\"&gt;&lt;/xref&gt;</ph> with one result set per <ph id=\"ph2\">&lt;xref href=\"System.Data.DataTable\"&gt;&lt;/xref&gt;</ph>.","source":"Returns a <xref href=\"System.Data.DataTableReader\"></xref> with one result set per <xref href=\"System.Data.DataTable\"></xref>."}],"pos":[36474,36601],"yaml":true},{"content":"In order to ensure that the order of the result sets within the returned <xref:System.Data.DataTableReader>, if a <xref:System.Data.DataTable> within the <xref:System.Data.DataSet> is empty, it is represented by an empty result set within the returned `DataTableReader`. Because this overloaded version allows you to supply a list of `DataTable` instances as parameters, you can specify the order in which the result sets appear within the returned `DataTableReader`.","nodes":[{"pos":[0,467],"content":"In order to ensure that the order of the result sets within the returned <xref:System.Data.DataTableReader>, if a <xref:System.Data.DataTable> within the <xref:System.Data.DataSet> is empty, it is represented by an empty result set within the returned `DataTableReader`. Because this overloaded version allows you to supply a list of `DataTable` instances as parameters, you can specify the order in which the result sets appear within the returned `DataTableReader`.","nodes":[{"content":"In order to ensure that the order of the result sets within the returned <ph id=\"ph1\">&lt;xref:System.Data.DataTableReader&gt;</ph>, if a <ph id=\"ph2\">&lt;xref:System.Data.DataTable&gt;</ph> within the <ph id=\"ph3\">&lt;xref:System.Data.DataSet&gt;</ph> is empty, it is represented by an empty result set within the returned <ph id=\"ph4\">`DataTableReader`</ph>.","pos":[0,270],"source":"In order to ensure that the order of the result sets within the returned <xref:System.Data.DataTableReader>, if a <xref:System.Data.DataTable> within the <xref:System.Data.DataSet> is empty, it is represented by an empty result set within the returned `DataTableReader`."},{"content":"Because this overloaded version allows you to supply a list of <ph id=\"ph1\">`DataTable`</ph> instances as parameters, you can specify the order in which the result sets appear within the returned <ph id=\"ph2\">`DataTableReader`</ph>.","pos":[271,467],"source":" Because this overloaded version allows you to supply a list of `DataTable` instances as parameters, you can specify the order in which the result sets appear within the returned `DataTableReader`."}]}],"pos":[36612,37080],"yaml":true,"extradata":"MT"},{"content":"An array of DataTables providing the order of the result sets to be returned in the <xref href=\"System.Data.DataTableReader\"></xref>.","nodes":[{"pos":[0,133],"content":"An array of DataTables providing the order of the result sets to be returned in the <ph id=\"ph1\">&lt;xref href=\"System.Data.DataTableReader\"&gt;&lt;/xref&gt;</ph>.","source":"An array of DataTables providing the order of the result sets to be returned in the <xref href=\"System.Data.DataTableReader\"></xref>."}],"pos":[38122,38256],"yaml":true},{"content":"A <xref href=\"System.Data.DataTableReader\"></xref> containing one or more result sets, corresponding to the <xref href=\"System.Data.DataTable\"></xref> instances contained within the source <xref href=\"System.Data.DataSet\"></xref>. The returned result sets are in the order specified by the <code>dataTables</code> parameter.","nodes":[{"pos":[0,324],"content":"A <xref href=\"System.Data.DataTableReader\"></xref> containing one or more result sets, corresponding to the <xref href=\"System.Data.DataTable\"></xref> instances contained within the source <xref href=\"System.Data.DataSet\"></xref>. The returned result sets are in the order specified by the <code>dataTables</code> parameter.","nodes":[{"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Data.DataTableReader\"&gt;&lt;/xref&gt;</ph> containing one or more result sets, corresponding to the <ph id=\"ph2\">&lt;xref href=\"System.Data.DataTable\"&gt;&lt;/xref&gt;</ph> instances contained within the source <ph id=\"ph3\">&lt;xref href=\"System.Data.DataSet\"&gt;&lt;/xref&gt;</ph>.","pos":[0,230],"source":"A <xref href=\"System.Data.DataTableReader\"></xref> containing one or more result sets, corresponding to the <xref href=\"System.Data.DataTable\"></xref> instances contained within the source <xref href=\"System.Data.DataSet\"></xref>."},{"content":"The returned result sets are in the order specified by the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">dataTables</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter.","pos":[231,324],"source":" The returned result sets are in the order specified by the <code>dataTables</code> parameter."}]}],"pos":[38327,38652],"yaml":true},{"content":"Returns a <xref href=\"System.Data.DataTableReader\"></xref> with one result set per <xref href=\"System.Data.DataTable\"></xref>, in the same sequence as the tables appear in the <xref href=\"System.Data.DataSet.Tables\"></xref> collection.","nodes":[{"pos":[0,235],"content":"Returns a <ph id=\"ph1\">&lt;xref href=\"System.Data.DataTableReader\"&gt;&lt;/xref&gt;</ph> with one result set per <ph id=\"ph2\">&lt;xref href=\"System.Data.DataTable\"&gt;&lt;/xref&gt;</ph>, in the same sequence as the tables appear in the <ph id=\"ph3\">&lt;xref href=\"System.Data.DataSet.Tables\"&gt;&lt;/xref&gt;</ph> collection.","source":"Returns a <xref href=\"System.Data.DataTableReader\"></xref> with one result set per <xref href=\"System.Data.DataTable\"></xref>, in the same sequence as the tables appear in the <xref href=\"System.Data.DataSet.Tables\"></xref> collection."}],"pos":[39834,40070],"yaml":true},{"content":"In order to ensure the order of the result sets within the returned <xref:System.Data.DataTableReader>, if a <xref:System.Data.DataTable> within the <xref:System.Data.DataSet> is empty, it is represented by an empty result set within the returned `DataTableReader`.","nodes":[{"pos":[0,265],"content":"In order to ensure the order of the result sets within the returned <ph id=\"ph1\">&lt;xref:System.Data.DataTableReader&gt;</ph>, if a <ph id=\"ph2\">&lt;xref:System.Data.DataTable&gt;</ph> within the <ph id=\"ph3\">&lt;xref:System.Data.DataSet&gt;</ph> is empty, it is represented by an empty result set within the returned <ph id=\"ph4\">`DataTableReader`</ph>.","source":"In order to ensure the order of the result sets within the returned <xref:System.Data.DataTableReader>, if a <xref:System.Data.DataTable> within the <xref:System.Data.DataSet> is empty, it is represented by an empty result set within the returned `DataTableReader`."}],"pos":[40081,40347],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Data.DataTableReader\"></xref> containing one or more result sets, corresponding to the <xref href=\"System.Data.DataTable\"></xref> instances contained within the source <xref href=\"System.Data.DataSet\"></xref>.","nodes":[{"pos":[0,230],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Data.DataTableReader\"&gt;&lt;/xref&gt;</ph> containing one or more result sets, corresponding to the <ph id=\"ph2\">&lt;xref href=\"System.Data.DataTable\"&gt;&lt;/xref&gt;</ph> instances contained within the source <ph id=\"ph3\">&lt;xref href=\"System.Data.DataSet\"&gt;&lt;/xref&gt;</ph>.","source":"A <xref href=\"System.Data.DataTableReader\"></xref> containing one or more result sets, corresponding to the <xref href=\"System.Data.DataTable\"></xref> instances contained within the source <xref href=\"System.Data.DataSet\"></xref>."}],"pos":[41258,41489],"yaml":true},{"content":"Gets or sets the name of the current <xref href=\"System.Data.DataSet\"></xref>.","nodes":[{"pos":[0,78],"content":"Gets or sets the name of the current <ph id=\"ph1\">&lt;xref href=\"System.Data.DataSet\"&gt;&lt;/xref&gt;</ph>.","source":"Gets or sets the name of the current <xref href=\"System.Data.DataSet\"></xref>."}],"pos":[42637,42716],"yaml":true},{"content":"The name of the <xref href=\"System.Data.DataSet\"></xref>.","nodes":[{"pos":[0,57],"content":"The name of the <ph id=\"ph1\">&lt;xref href=\"System.Data.DataSet\"&gt;&lt;/xref&gt;</ph>.","source":"The name of the <xref href=\"System.Data.DataSet\"></xref>."}],"pos":[43335,43393],"yaml":true},{"content":"Gets a custom view of the data contained in the <xref href=\"System.Data.DataSet\"></xref> to allow filtering, searching, and navigating using a custom <xref href=\"System.Data.DataViewManager\"></xref>.","nodes":[{"pos":[0,199],"content":"Gets a custom view of the data contained in the <ph id=\"ph1\">&lt;xref href=\"System.Data.DataSet\"&gt;&lt;/xref&gt;</ph> to allow filtering, searching, and navigating using a custom <ph id=\"ph2\">&lt;xref href=\"System.Data.DataViewManager\"&gt;&lt;/xref&gt;</ph>.","source":"Gets a custom view of the data contained in the <xref href=\"System.Data.DataSet\"></xref> to allow filtering, searching, and navigating using a custom <xref href=\"System.Data.DataViewManager\"></xref>."}],"pos":[44595,44795],"yaml":true},{"content":"The <xref:System.Data.DataViewManager> returned by the <xref:System.Data.DataSet.DefaultViewManager%2A> property allows you to create custom settings for each <xref:System.Data.DataTable> in the <xref:System.Data.DataSet>.  \n  \n When you obtain a <xref:System.Data.DataView> from a <xref:System.Data.DataTable>, the sort order, filtering, and <xref:System.Data.DataViewRowState> are configured according to the settings in the <xref:System.Data.DataSet.DefaultViewManager%2A> property.","nodes":[{"pos":[0,222],"content":"The <xref:System.Data.DataViewManager> returned by the <xref:System.Data.DataSet.DefaultViewManager%2A> property allows you to create custom settings for each <xref:System.Data.DataTable> in the <xref:System.Data.DataSet>.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Data.DataViewManager&gt;</ph> returned by the <ph id=\"ph2\">&lt;xref:System.Data.DataSet.DefaultViewManager%2A&gt;</ph> property allows you to create custom settings for each <ph id=\"ph3\">&lt;xref:System.Data.DataTable&gt;</ph> in the <ph id=\"ph4\">&lt;xref:System.Data.DataSet&gt;</ph>.","pos":[0,222],"source":"The <xref:System.Data.DataViewManager> returned by the <xref:System.Data.DataSet.DefaultViewManager%2A> property allows you to create custom settings for each <xref:System.Data.DataTable> in the <xref:System.Data.DataSet>."}]},{"pos":[229,485],"content":"When you obtain a <xref:System.Data.DataView> from a <xref:System.Data.DataTable>, the sort order, filtering, and <xref:System.Data.DataViewRowState> are configured according to the settings in the <xref:System.Data.DataSet.DefaultViewManager%2A> property.","nodes":[{"content":"When you obtain a <ph id=\"ph1\">&lt;xref:System.Data.DataView&gt;</ph> from a <ph id=\"ph2\">&lt;xref:System.Data.DataTable&gt;</ph>, the sort order, filtering, and <ph id=\"ph3\">&lt;xref:System.Data.DataViewRowState&gt;</ph> are configured according to the settings in the <ph id=\"ph4\">&lt;xref:System.Data.DataSet.DefaultViewManager%2A&gt;</ph> property.","pos":[0,256],"source":"When you obtain a <xref:System.Data.DataView> from a <xref:System.Data.DataTable>, the sort order, filtering, and <xref:System.Data.DataViewRowState> are configured according to the settings in the <xref:System.Data.DataSet.DefaultViewManager%2A> property."}]}],"pos":[44806,45296],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Data.DataViewManager\"></xref> object.","nodes":[{"pos":[0,58],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Data.DataViewManager\"&gt;&lt;/xref&gt;</ph> object.","source":"A <xref href=\"System.Data.DataViewManager\"></xref> object."}],"pos":[45913,45972],"yaml":true},{"content":"Determines the <xref href=\"System.Data.DataSet.SchemaSerializationMode\"></xref> for a <xref href=\"System.Data.DataSet\"></xref>.","nodes":[{"pos":[0,127],"content":"Determines the <ph id=\"ph1\">&lt;xref href=\"System.Data.DataSet.SchemaSerializationMode\"&gt;&lt;/xref&gt;</ph> for a <ph id=\"ph2\">&lt;xref href=\"System.Data.DataSet\"&gt;&lt;/xref&gt;</ph>.","source":"Determines the <xref href=\"System.Data.DataSet.SchemaSerializationMode\"></xref> for a <xref href=\"System.Data.DataSet\"></xref>."}],"pos":[47410,47538],"yaml":true},{"content":"This method can be called when deserializing a typed <xref:System.Data.DataSet> to determine its <xref:System.Data.DataSet.SchemaSerializationMode%2A>.","nodes":[{"pos":[0,151],"content":"This method can be called when deserializing a typed <xref:System.Data.DataSet> to determine its <xref:System.Data.DataSet.SchemaSerializationMode%2A>.","nodes":[{"content":"This method can be called when deserializing a typed <ph id=\"ph1\">&lt;xref:System.Data.DataSet&gt;</ph> to determine its <ph id=\"ph2\">&lt;xref:System.Data.DataSet.SchemaSerializationMode%2A&gt;</ph>.","pos":[0,151],"source":"This method can be called when deserializing a typed <xref:System.Data.DataSet> to determine its <xref:System.Data.DataSet.SchemaSerializationMode%2A>."}]}],"pos":[47549,47701],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Xml.XmlReader\"></xref> instance that is passed during deserialization of the <xref href=\"System.Data.DataSet\"></xref>.","nodes":[{"pos":[0,141],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Xml.XmlReader\"&gt;&lt;/xref&gt;</ph> instance that is passed during deserialization of the <ph id=\"ph2\">&lt;xref href=\"System.Data.DataSet\"&gt;&lt;/xref&gt;</ph>.","source":"The <xref href=\"System.Xml.XmlReader\"></xref> instance that is passed during deserialization of the <xref href=\"System.Data.DataSet\"></xref>."}],"pos":[47919,48061],"yaml":true},{"content":"An <xref href=\"System.Data.SchemaSerializationMode\"></xref> enumeration indicating whether schema information has been omitted from the payload.","nodes":[{"pos":[0,144],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Data.SchemaSerializationMode\"&gt;&lt;/xref&gt;</ph> enumeration indicating whether schema information has been omitted from the payload.","source":"An <xref href=\"System.Data.SchemaSerializationMode\"></xref> enumeration indicating whether schema information has been omitted from the payload."}],"pos":[48140,48285],"yaml":true},{"content":"Determines the <xref href=\"System.Data.DataSet.SchemaSerializationMode\"></xref> for a <xref href=\"System.Data.DataSet\"></xref>.","nodes":[{"pos":[0,127],"content":"Determines the <ph id=\"ph1\">&lt;xref href=\"System.Data.DataSet.SchemaSerializationMode\"&gt;&lt;/xref&gt;</ph> for a <ph id=\"ph2\">&lt;xref href=\"System.Data.DataSet\"&gt;&lt;/xref&gt;</ph>.","source":"Determines the <xref href=\"System.Data.DataSet.SchemaSerializationMode\"></xref> for a <xref href=\"System.Data.DataSet\"></xref>."}],"pos":[49966,50094],"yaml":true},{"content":"This method can be called when deserializing a typed <xref:System.Data.DataSet> to determine its <xref:System.Data.DataSet.SchemaSerializationMode%2A>.","nodes":[{"pos":[0,151],"content":"This method can be called when deserializing a typed <xref:System.Data.DataSet> to determine its <xref:System.Data.DataSet.SchemaSerializationMode%2A>.","nodes":[{"content":"This method can be called when deserializing a typed <ph id=\"ph1\">&lt;xref:System.Data.DataSet&gt;</ph> to determine its <ph id=\"ph2\">&lt;xref:System.Data.DataSet.SchemaSerializationMode%2A&gt;</ph>.","pos":[0,151],"source":"This method can be called when deserializing a typed <xref:System.Data.DataSet> to determine its <xref:System.Data.DataSet.SchemaSerializationMode%2A>."}]}],"pos":[50105,50257],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> that a `DataSet`’s protected constructor <xref href=\"System.Data.DataSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\"></xref> is invoked with during deserialization in remoting scenarios.","nodes":[{"pos":[0,315],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Runtime.Serialization.SerializationInfo\"&gt;&lt;/xref&gt;</ph> that a <ph id=\"ph2\">`DataSet`</ph>’s protected constructor <ph id=\"ph3\">&lt;xref href=\"System.Data.DataSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\"&gt;&lt;/xref&gt;</ph> is invoked with during deserialization in remoting scenarios.","source":"The <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> that a `DataSet`’s protected constructor <xref href=\"System.Data.DataSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\"></xref> is invoked with during deserialization in remoting scenarios."}],"pos":[50578,50894],"yaml":true},{"content":"The <xref href=\"System.Runtime.Serialization.StreamingContext\"></xref> that a `DataSet`’s protected constructor <xref href=\"System.Data.DataSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\"></xref> is invoked with during deserialization in remoting scenarios.","nodes":[{"pos":[0,314],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Runtime.Serialization.StreamingContext\"&gt;&lt;/xref&gt;</ph> that a <ph id=\"ph2\">`DataSet`</ph>’s protected constructor <ph id=\"ph3\">&lt;xref href=\"System.Data.DataSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\"&gt;&lt;/xref&gt;</ph> is invoked with during deserialization in remoting scenarios.","source":"The <xref href=\"System.Runtime.Serialization.StreamingContext\"></xref> that a `DataSet`’s protected constructor <xref href=\"System.Data.DataSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\"></xref> is invoked with during deserialization in remoting scenarios."}],"pos":[50989,51304],"yaml":true},{"content":"An <xref href=\"System.Data.SchemaSerializationMode\"></xref> enumeration indicating whether schema information has been omitted from the payload.","nodes":[{"pos":[0,144],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Data.SchemaSerializationMode\"&gt;&lt;/xref&gt;</ph> enumeration indicating whether schema information has been omitted from the payload.","source":"An <xref href=\"System.Data.SchemaSerializationMode\"></xref> enumeration indicating whether schema information has been omitted from the payload."}],"pos":[51383,51528],"yaml":true},{"content":"Ends the initialization of a <xref href=\"System.Data.DataSet\"></xref> that is used on a form or used by another component. The initialization occurs at run time.","nodes":[{"pos":[0,161],"content":"Ends the initialization of a <xref href=\"System.Data.DataSet\"></xref> that is used on a form or used by another component. The initialization occurs at run time.","nodes":[{"content":"Ends the initialization of a <ph id=\"ph1\">&lt;xref href=\"System.Data.DataSet\"&gt;&lt;/xref&gt;</ph> that is used on a form or used by another component.","pos":[0,122],"source":"Ends the initialization of a <xref href=\"System.Data.DataSet\"></xref> that is used on a form or used by another component."},{"content":"The initialization occurs at run time.","pos":[123,161]}]}],"pos":[52672,52834],"yaml":true},{"content":"The Visual Studio .NET design environment uses this method to end the initialization of a component that is used on a form or used by another component. The <xref:System.Data.DataSet.BeginInit%2A> method starts the initialization. Using the <xref:System.Data.DataSet.BeginInit%2A> and <xref:System.Data.DataSet.EndInit%2A> methods prevents the control from being used before it is fully initialized.","nodes":[{"pos":[0,399],"content":"The Visual Studio .NET design environment uses this method to end the initialization of a component that is used on a form or used by another component. The <xref:System.Data.DataSet.BeginInit%2A> method starts the initialization. Using the <xref:System.Data.DataSet.BeginInit%2A> and <xref:System.Data.DataSet.EndInit%2A> methods prevents the control from being used before it is fully initialized.","nodes":[{"content":"The Visual Studio .NET design environment uses this method to end the initialization of a component that is used on a form or used by another component. The <xref:System.Data.DataSet.BeginInit%2A> method starts the initialization. Using the <xref:System.Data.DataSet.BeginInit%2A> and <xref:System.Data.DataSet.EndInit%2A> methods prevents the control from being used before it is fully initialized.","pos":[0,399],"nodes":[{"content":"The Visual Studio .NET design environment uses this method to end the initialization of a component that is used on a form or used by another component.","pos":[0,152]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Data.DataSet.BeginInit%2A&gt;</ph> method starts the initialization.","pos":[153,230],"source":" The <xref:System.Data.DataSet.BeginInit%2A> method starts the initialization."},{"content":"Using the <ph id=\"ph1\">&lt;xref:System.Data.DataSet.BeginInit%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Data.DataSet.EndInit%2A&gt;</ph> methods prevents the control from being used before it is fully initialized.","pos":[231,399],"source":" Using the <xref:System.Data.DataSet.BeginInit%2A> and <xref:System.Data.DataSet.EndInit%2A> methods prevents the control from being used before it is fully initialized."}]}]}],"pos":[52845,53245],"yaml":true,"extradata":"MT"},{"content":"Gets or sets a value indicating whether constraint rules are followed when attempting any update operation.","nodes":[{"pos":[0,107],"content":"Gets or sets a value indicating whether constraint rules are followed when attempting any update operation.","nodes":[{"content":"Gets or sets a value indicating whether constraint rules are followed when attempting any update operation.","pos":[0,107]}]}],"pos":[54492,54600],"yaml":true},{"content":"Constraints are set at the <xref:System.Data.DataTable> level (<xref:System.Data.DataTable.Constraints%2A> property). For more information about creating constraints, see [DataTable Constraints](~/docs/framework/data/adonet/dataset-datatable-dataview/datatable-constraints.md).","nodes":[{"pos":[0,277],"content":"Constraints are set at the <xref:System.Data.DataTable> level (<xref:System.Data.DataTable.Constraints%2A> property). For more information about creating constraints, see [DataTable Constraints](~/docs/framework/data/adonet/dataset-datatable-dataview/datatable-constraints.md).","nodes":[{"content":"Constraints are set at the <ph id=\"ph1\">&lt;xref:System.Data.DataTable&gt;</ph> level (<ph id=\"ph2\">&lt;xref:System.Data.DataTable.Constraints%2A&gt;</ph> property).","pos":[0,117],"source":"Constraints are set at the <xref:System.Data.DataTable> level (<xref:System.Data.DataTable.Constraints%2A> property)."},{"content":"For more information about creating constraints, see <bpt id=\"p1\">[</bpt>DataTable Constraints<ept id=\"p1\">](~/docs/framework/data/adonet/dataset-datatable-dataview/datatable-constraints.md)</ept>.","pos":[118,277],"source":" For more information about creating constraints, see [DataTable Constraints](~/docs/framework/data/adonet/dataset-datatable-dataview/datatable-constraints.md)."}]}],"pos":[54611,54889],"yaml":true,"extradata":"MT"},{"content":"`true` if rules are enforced; otherwise `false`. The default is `true`.","nodes":[{"pos":[0,71],"content":"`true` if rules are enforced; otherwise `false`. The default is `true`.","nodes":[{"content":"<ph id=\"ph1\">`true`</ph> if rules are enforced; otherwise <ph id=\"ph2\">`false`</ph>.","pos":[0,48],"source":"`true` if rules are enforced; otherwise `false`."},{"content":"The default is <ph id=\"ph1\">`true`</ph>.","pos":[49,71],"source":" The default is `true`."}]}],"pos":[55826,55900],"yaml":true},{"content":"One or more constraints cannot be enforced.","nodes":[{"pos":[0,43],"content":"One or more constraints cannot be enforced.","nodes":[{"content":"One or more constraints cannot be enforced.","pos":[0,43]}]}],"pos":[56074,56118],"yaml":true},{"content":"Gets the collection of customized user information associated with the `DataSet`.","nodes":[{"pos":[0,81],"content":"Gets the collection of customized user information associated with the <ph id=\"ph1\">`DataSet`</ph>.","source":"Gets the collection of customized user information associated with the `DataSet`."}],"pos":[57258,57340],"yaml":true},{"content":"The <xref:System.Data.DataSet.ExtendedProperties%2A> property enables you to store custom information with the `DataSet`. For example, you might store a time when the data should be refreshed.  \n  \n Extended properties must be of type <xref:System.String> if you want them persisted when the <xref:System.Data.DataSet> is written as XML.","nodes":[{"pos":[0,192],"content":"The <xref:System.Data.DataSet.ExtendedProperties%2A> property enables you to store custom information with the `DataSet`. For example, you might store a time when the data should be refreshed.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Data.DataSet.ExtendedProperties%2A&gt;</ph> property enables you to store custom information with the <ph id=\"ph2\">`DataSet`</ph>.","pos":[0,121],"source":"The <xref:System.Data.DataSet.ExtendedProperties%2A> property enables you to store custom information with the `DataSet`."},{"content":"For example, you might store a time when the data should be refreshed.","pos":[122,192]}]},{"pos":[199,337],"content":"Extended properties must be of type <xref:System.String> if you want them persisted when the <xref:System.Data.DataSet> is written as XML.","nodes":[{"content":"Extended properties must be of type <ph id=\"ph1\">&lt;xref:System.String&gt;</ph> if you want them persisted when the <ph id=\"ph2\">&lt;xref:System.Data.DataSet&gt;</ph> is written as XML.","pos":[0,138],"source":"Extended properties must be of type <xref:System.String> if you want them persisted when the <xref:System.Data.DataSet> is written as XML."}]}],"pos":[57351,57693],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Data.PropertyCollection\"></xref> with all custom user information.","nodes":[{"pos":[0,87],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Data.PropertyCollection\"&gt;&lt;/xref&gt;</ph> with all custom user information.","source":"A <xref href=\"System.Data.PropertyCollection\"></xref> with all custom user information."}],"pos":[58535,58623],"yaml":true},{"content":"Gets a copy of the <xref href=\"System.Data.DataSet\"></xref> that contains all changes made to it since it was loaded or since <xref href=\"System.Data.DataSet.AcceptChanges\"></xref> was last called.","nodes":[{"pos":[0,197],"content":"Gets a copy of the <ph id=\"ph1\">&lt;xref href=\"System.Data.DataSet\"&gt;&lt;/xref&gt;</ph> that contains all changes made to it since it was loaded or since <ph id=\"ph2\">&lt;xref href=\"System.Data.DataSet.AcceptChanges\"&gt;&lt;/xref&gt;</ph> was last called.","source":"Gets a copy of the <xref href=\"System.Data.DataSet\"></xref> that contains all changes made to it since it was loaded or since <xref href=\"System.Data.DataSet.AcceptChanges\"></xref> was last called."}],"pos":[59836,60034],"yaml":true},{"content":"Creates a new <xref:System.Data.DataSet> that contains a copy of all rows in the original <xref:System.Data.DataSet> that have pending changes. Relationship constraints can cause additional unchanged rows to be added to the new <xref:System.Data.DataSet> if the unchanged rows contain primary keys corresponding to foreign keys in the changed rows. The method returns `null` if there are no rows in the original <xref:System.Data.DataSet> that have pending changes.","nodes":[{"pos":[0,465],"content":"Creates a new <xref:System.Data.DataSet> that contains a copy of all rows in the original <xref:System.Data.DataSet> that have pending changes. Relationship constraints can cause additional unchanged rows to be added to the new <xref:System.Data.DataSet> if the unchanged rows contain primary keys corresponding to foreign keys in the changed rows. The method returns `null` if there are no rows in the original <xref:System.Data.DataSet> that have pending changes.","nodes":[{"content":"Creates a new <ph id=\"ph1\">&lt;xref:System.Data.DataSet&gt;</ph> that contains a copy of all rows in the original <ph id=\"ph2\">&lt;xref:System.Data.DataSet&gt;</ph> that have pending changes.","pos":[0,143],"source":"Creates a new <xref:System.Data.DataSet> that contains a copy of all rows in the original <xref:System.Data.DataSet> that have pending changes."},{"content":"Relationship constraints can cause additional unchanged rows to be added to the new <ph id=\"ph1\">&lt;xref:System.Data.DataSet&gt;</ph> if the unchanged rows contain primary keys corresponding to foreign keys in the changed rows.","pos":[144,348],"source":" Relationship constraints can cause additional unchanged rows to be added to the new <xref:System.Data.DataSet> if the unchanged rows contain primary keys corresponding to foreign keys in the changed rows."},{"content":"The method returns <ph id=\"ph1\">`null`</ph> if there are no rows in the original <ph id=\"ph2\">&lt;xref:System.Data.DataSet&gt;</ph> that have pending changes.","pos":[349,465],"source":" The method returns `null` if there are no rows in the original <xref:System.Data.DataSet> that have pending changes."}]}],"pos":[60045,60511],"yaml":true,"extradata":"MT"},{"content":"A copy of the changes from this <xref href=\"System.Data.DataSet\"></xref> that can have actions performed on it and later be merged back in using <xref href=\"System.Data.DataSet.Merge(System.Data.DataSet)\"></xref>. If no changed rows are found, the method returns `null`.","nodes":[{"pos":[0,270],"content":"A copy of the changes from this <xref href=\"System.Data.DataSet\"></xref> that can have actions performed on it and later be merged back in using <xref href=\"System.Data.DataSet.Merge(System.Data.DataSet)\"></xref>. If no changed rows are found, the method returns `null`.","nodes":[{"content":"A copy of the changes from this <ph id=\"ph1\">&lt;xref href=\"System.Data.DataSet\"&gt;&lt;/xref&gt;</ph> that can have actions performed on it and later be merged back in using <ph id=\"ph2\">&lt;xref href=\"System.Data.DataSet.Merge(System.Data.DataSet)\"&gt;&lt;/xref&gt;</ph>.","pos":[0,213],"source":"A copy of the changes from this <xref href=\"System.Data.DataSet\"></xref> that can have actions performed on it and later be merged back in using <xref href=\"System.Data.DataSet.Merge(System.Data.DataSet)\"></xref>."},{"content":"If no changed rows are found, the method returns <ph id=\"ph1\">`null`</ph>.","pos":[214,270],"source":" If no changed rows are found, the method returns `null`."}]}],"pos":[61567,61838],"yaml":true},{"content":"Gets a copy of the <xref href=\"System.Data.DataSet\"></xref> containing all changes made to it since it was last loaded, or since <xref href=\"System.Data.DataSet.AcceptChanges\"></xref> was called, filtered by <xref href=\"System.Data.DataRowState\"></xref>.","nodes":[{"pos":[0,254],"content":"Gets a copy of the <ph id=\"ph1\">&lt;xref href=\"System.Data.DataSet\"&gt;&lt;/xref&gt;</ph> containing all changes made to it since it was last loaded, or since <ph id=\"ph2\">&lt;xref href=\"System.Data.DataSet.AcceptChanges\"&gt;&lt;/xref&gt;</ph> was called, filtered by <ph id=\"ph3\">&lt;xref href=\"System.Data.DataRowState\"&gt;&lt;/xref&gt;</ph>.","source":"Gets a copy of the <xref href=\"System.Data.DataSet\"></xref> containing all changes made to it since it was last loaded, or since <xref href=\"System.Data.DataSet.AcceptChanges\"></xref> was called, filtered by <xref href=\"System.Data.DataRowState\"></xref>."}],"pos":[63092,63347],"yaml":true},{"content":"The <xref:System.Data.DataSet.GetChanges%2A> method is used to produce a second <xref:System.Data.DataSet> object that contains only the changes introduced into the original. Use the `rowStates` argument to specify the type of changes the new object should include.  \n  \n This returned copy is designed to be merged back in to this original <xref:System.Data.DataSet>. Relationship constraints may cause parent rows marked `Unchanged` to be included. If no rows of the desired <xref:System.Data.DataRowState> are found, the <xref:System.Data.DataSet.GetChanges%2A> method returns `null`.","nodes":[{"pos":[0,265],"content":"The <xref:System.Data.DataSet.GetChanges%2A> method is used to produce a second <xref:System.Data.DataSet> object that contains only the changes introduced into the original. Use the `rowStates` argument to specify the type of changes the new object should include.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Data.DataSet.GetChanges%2A&gt;</ph> method is used to produce a second <ph id=\"ph2\">&lt;xref:System.Data.DataSet&gt;</ph> object that contains only the changes introduced into the original.","pos":[0,174],"source":"The <xref:System.Data.DataSet.GetChanges%2A> method is used to produce a second <xref:System.Data.DataSet> object that contains only the changes introduced into the original."},{"content":"Use the <ph id=\"ph1\">`rowStates`</ph> argument to specify the type of changes the new object should include.","pos":[175,265],"source":" Use the `rowStates` argument to specify the type of changes the new object should include."}]},{"pos":[272,587],"content":"This returned copy is designed to be merged back in to this original <xref:System.Data.DataSet>. Relationship constraints may cause parent rows marked `Unchanged` to be included. If no rows of the desired <xref:System.Data.DataRowState> are found, the <xref:System.Data.DataSet.GetChanges%2A> method returns `null`.","nodes":[{"content":"This returned copy is designed to be merged back in to this original <ph id=\"ph1\">&lt;xref:System.Data.DataSet&gt;</ph>.","pos":[0,96],"source":"This returned copy is designed to be merged back in to this original <xref:System.Data.DataSet>."},{"content":"Relationship constraints may cause parent rows marked <ph id=\"ph1\">`Unchanged`</ph> to be included.","pos":[97,178],"source":" Relationship constraints may cause parent rows marked `Unchanged` to be included."},{"content":"If no rows of the desired <ph id=\"ph1\">&lt;xref:System.Data.DataRowState&gt;</ph> are found, the <ph id=\"ph2\">&lt;xref:System.Data.DataSet.GetChanges%2A&gt;</ph> method returns <ph id=\"ph3\">`null`</ph>.","pos":[179,315],"source":" If no rows of the desired <xref:System.Data.DataRowState> are found, the <xref:System.Data.DataSet.GetChanges%2A> method returns `null`."}]}],"pos":[63358,63950],"yaml":true,"extradata":"MT"},{"content":"One of the <xref href=\"System.Data.DataRowState\"></xref> values.","nodes":[{"pos":[0,64],"content":"One of the <ph id=\"ph1\">&lt;xref href=\"System.Data.DataRowState\"&gt;&lt;/xref&gt;</ph> values.","source":"One of the <xref href=\"System.Data.DataRowState\"></xref> values."}],"pos":[64682,64747],"yaml":true},{"content":"A filtered copy of the <xref href=\"System.Data.DataSet\"></xref> that can have actions performed on it, and subsequently be merged back in using <xref href=\"System.Data.DataSet.Merge(System.Data.DataSet)\"></xref>. If no rows of the desired <xref href=\"System.Data.DataRowState\"></xref> are found, the method returns `null`.","nodes":[{"pos":[0,322],"content":"A filtered copy of the <xref href=\"System.Data.DataSet\"></xref> that can have actions performed on it, and subsequently be merged back in using <xref href=\"System.Data.DataSet.Merge(System.Data.DataSet)\"></xref>. If no rows of the desired <xref href=\"System.Data.DataRowState\"></xref> are found, the method returns `null`.","nodes":[{"content":"A filtered copy of the <ph id=\"ph1\">&lt;xref href=\"System.Data.DataSet\"&gt;&lt;/xref&gt;</ph> that can have actions performed on it, and subsequently be merged back in using <ph id=\"ph2\">&lt;xref href=\"System.Data.DataSet.Merge(System.Data.DataSet)\"&gt;&lt;/xref&gt;</ph>.","pos":[0,212],"source":"A filtered copy of the <xref href=\"System.Data.DataSet\"></xref> that can have actions performed on it, and subsequently be merged back in using <xref href=\"System.Data.DataSet.Merge(System.Data.DataSet)\"></xref>."},{"content":"If no rows of the desired <ph id=\"ph1\">&lt;xref href=\"System.Data.DataRowState\"&gt;&lt;/xref&gt;</ph> are found, the method returns <ph id=\"ph2\">`null`</ph>.","pos":[213,322],"source":" If no rows of the desired <xref href=\"System.Data.DataRowState\"></xref> are found, the method returns `null`."}]}],"pos":[64810,65133],"yaml":true},{"content":"Gets a copy of <xref href=\"System.Xml.Schema.XmlSchemaSet\"></xref> for the DataSet.","nodes":[{"pos":[0,83],"content":"Gets a copy of <ph id=\"ph1\">&lt;xref href=\"System.Xml.Schema.XmlSchemaSet\"&gt;&lt;/xref&gt;</ph> for the DataSet.","source":"Gets a copy of <xref href=\"System.Xml.Schema.XmlSchemaSet\"></xref> for the DataSet."}],"pos":[66441,66525],"yaml":true},{"content":"The specified schema set.","nodes":[{"pos":[0,25],"content":"The specified schema set.","nodes":[{"content":"The specified schema set.","pos":[0,25]}]}],"pos":[66760,66786],"yaml":true},{"content":"A copy of <xref href=\"System.Xml.Schema.XmlSchemaSet\"></xref>.","nodes":[{"pos":[0,62],"content":"A copy of <ph id=\"ph1\">&lt;xref href=\"System.Xml.Schema.XmlSchemaSet\"&gt;&lt;/xref&gt;</ph>.","source":"A copy of <xref href=\"System.Xml.Schema.XmlSchemaSet\"></xref>."}],"pos":[66868,66931],"yaml":true},{"content":"Populates a serialization information object with the data needed to serialize the <xref href=\"System.Data.DataSet\"></xref>.","nodes":[{"pos":[0,124],"content":"Populates a serialization information object with the data needed to serialize the <ph id=\"ph1\">&lt;xref href=\"System.Data.DataSet\"&gt;&lt;/xref&gt;</ph>.","source":"Populates a serialization information object with the data needed to serialize the <xref href=\"System.Data.DataSet\"></xref>."}],"pos":[68482,68607],"yaml":true},{"content":"A <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> that holds the serialized data associated with the <xref href=\"System.Data.DataSet\"></xref>.","nodes":[{"pos":[0,162],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Runtime.Serialization.SerializationInfo\"&gt;&lt;/xref&gt;</ph> that holds the serialized data associated with the <ph id=\"ph2\">&lt;xref href=\"System.Data.DataSet\"&gt;&lt;/xref&gt;</ph>.","source":"A <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> that holds the serialized data associated with the <xref href=\"System.Data.DataSet\"></xref>."}],"pos":[68883,69046],"yaml":true},{"content":"A <xref href=\"System.Runtime.Serialization.StreamingContext\"></xref> that contains the source and destination of the serialized stream associated with the <xref href=\"System.Data.DataSet\"></xref>.","nodes":[{"pos":[0,196],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Runtime.Serialization.StreamingContext\"&gt;&lt;/xref&gt;</ph> that contains the source and destination of the serialized stream associated with the <ph id=\"ph2\">&lt;xref href=\"System.Data.DataSet\"&gt;&lt;/xref&gt;</ph>.","source":"A <xref href=\"System.Runtime.Serialization.StreamingContext\"></xref> that contains the source and destination of the serialized stream associated with the <xref href=\"System.Data.DataSet\"></xref>."}],"pos":[69141,69338],"yaml":true},{"content":"The <code>info</code> parameter is `null`.","nodes":[{"pos":[0,42],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">info</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>info</code> parameter is `null`."}],"pos":[69501,69544],"yaml":true},{"content":"Returns a serializable <xref href=\"System.Xml.Schema.XMLSchema\"></xref> instance.","nodes":[{"pos":[0,81],"content":"Returns a serializable <ph id=\"ph1\">&lt;xref href=\"System.Xml.Schema.XMLSchema\"&gt;&lt;/xref&gt;</ph> instance.","source":"Returns a serializable <xref href=\"System.Xml.Schema.XMLSchema\"></xref> instance."}],"pos":[70689,70771],"yaml":true},{"content":"The <xref href=\"System.Xml.Schema.XMLSchema\"></xref> instance.","nodes":[{"pos":[0,62],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Xml.Schema.XMLSchema\"&gt;&lt;/xref&gt;</ph> instance.","source":"The <xref href=\"System.Xml.Schema.XMLSchema\"></xref> instance."}],"pos":[70956,71019],"yaml":true},{"content":"Deserializes the table data from the binary or XML stream.","nodes":[{"pos":[0,58],"content":"Deserializes the table data from the binary or XML stream.","nodes":[{"content":"Deserializes the table data from the binary or XML stream.","pos":[0,58]}]}],"pos":[72617,72676],"yaml":true},{"content":"The <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> instance.","nodes":[{"pos":[0,81],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Runtime.Serialization.SerializationInfo\"&gt;&lt;/xref&gt;</ph> instance.","source":"The <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> instance."}],"pos":[72954,73036],"yaml":true},{"content":"The streaming context.","nodes":[{"pos":[0,22],"content":"The streaming context.","nodes":[{"content":"The streaming context.","pos":[0,22]}]}],"pos":[73131,73154],"yaml":true},{"content":"Returns the XML representation of the data stored in the <xref href=\"System.Data.DataSet\"></xref>.","nodes":[{"pos":[0,98],"content":"Returns the XML representation of the data stored in the <ph id=\"ph1\">&lt;xref href=\"System.Data.DataSet\"&gt;&lt;/xref&gt;</ph>.","source":"Returns the XML representation of the data stored in the <xref href=\"System.Data.DataSet\"></xref>."}],"pos":[74280,74379],"yaml":true},{"content":"Calling this method is identical to calling <xref:System.Data.DataSet.WriteXml%2A> with <xref:System.Data.XmlWriteMode> set to <xref:System.Data.XmlWriteMode.IgnoreSchema>.  \n  \n <xref:System.Data.DataSet.GetXml%2A> returns XML as a string, and therefore requires more overhead than <xref:System.Data.DataSet.WriteXml%2A> to write XML to a file.  \n  \n If you build a <xref:System.Data.DataSet> using schema inference and serialize it using XML or Web services, the column ordering may change.","nodes":[{"pos":[0,172],"content":"Calling this method is identical to calling <xref:System.Data.DataSet.WriteXml%2A> with <xref:System.Data.XmlWriteMode> set to <xref:System.Data.XmlWriteMode.IgnoreSchema>.","nodes":[{"content":"Calling this method is identical to calling <ph id=\"ph1\">&lt;xref:System.Data.DataSet.WriteXml%2A&gt;</ph> with <ph id=\"ph2\">&lt;xref:System.Data.XmlWriteMode&gt;</ph> set to <ph id=\"ph3\">&lt;xref:System.Data.XmlWriteMode.IgnoreSchema&gt;</ph>.","pos":[0,172],"source":"Calling this method is identical to calling <xref:System.Data.DataSet.WriteXml%2A> with <xref:System.Data.XmlWriteMode> set to <xref:System.Data.XmlWriteMode.IgnoreSchema>."}]},{"pos":[179,345],"content":"<xref:System.Data.DataSet.GetXml%2A> returns XML as a string, and therefore requires more overhead than <xref:System.Data.DataSet.WriteXml%2A> to write XML to a file.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Data.DataSet.GetXml%2A&gt;</ph> returns XML as a string, and therefore requires more overhead than <ph id=\"ph2\">&lt;xref:System.Data.DataSet.WriteXml%2A&gt;</ph> to write XML to a file.","pos":[0,166],"source":"<xref:System.Data.DataSet.GetXml%2A> returns XML as a string, and therefore requires more overhead than <xref:System.Data.DataSet.WriteXml%2A> to write XML to a file."}]},{"pos":[352,492],"content":"If you build a <xref:System.Data.DataSet> using schema inference and serialize it using XML or Web services, the column ordering may change.","nodes":[{"content":"If you build a <ph id=\"ph1\">&lt;xref:System.Data.DataSet&gt;</ph> using schema inference and serialize it using XML or Web services, the column ordering may change.","pos":[0,140],"source":"If you build a <xref:System.Data.DataSet> using schema inference and serialize it using XML or Web services, the column ordering may change."}]}],"pos":[74390,74889],"yaml":true,"extradata":"MT"},{"content":"A string that is a representation of the data stored in the <xref href=\"System.Data.DataSet\"></xref>.","nodes":[{"pos":[0,101],"content":"A string that is a representation of the data stored in the <ph id=\"ph1\">&lt;xref href=\"System.Data.DataSet\"&gt;&lt;/xref&gt;</ph>.","source":"A string that is a representation of the data stored in the <xref href=\"System.Data.DataSet\"></xref>."}],"pos":[88887,88989],"yaml":true},{"content":"Returns the XML Schema for the XML representation of the data stored in the <xref href=\"System.Data.DataSet\"></xref>.","nodes":[{"pos":[0,117],"content":"Returns the XML Schema for the XML representation of the data stored in the <ph id=\"ph1\">&lt;xref href=\"System.Data.DataSet\"&gt;&lt;/xref&gt;</ph>.","source":"Returns the XML Schema for the XML representation of the data stored in the <xref href=\"System.Data.DataSet\"></xref>."}],"pos":[90137,90255],"yaml":true},{"content":"Calling this method is identical to calling <xref:System.Data.DataSet.WriteXmlSchema%2A>, except that only the primary schema is written.  \n  \n <xref:System.Data.DataSet.GetXmlSchema%2A> returns XML as a string, and therefore requires more overhead than <xref:System.Data.DataSet.WriteXmlSchema%2A> to write XML to a file.  \n  \n If you build a <xref:System.Data.DataSet> using schema inference and serialize it using XML or Web services, the column ordering may change.","nodes":[{"pos":[0,137],"content":"Calling this method is identical to calling <xref:System.Data.DataSet.WriteXmlSchema%2A>, except that only the primary schema is written.","nodes":[{"content":"Calling this method is identical to calling <ph id=\"ph1\">&lt;xref:System.Data.DataSet.WriteXmlSchema%2A&gt;</ph>, except that only the primary schema is written.","pos":[0,137],"source":"Calling this method is identical to calling <xref:System.Data.DataSet.WriteXmlSchema%2A>, except that only the primary schema is written."}]},{"pos":[144,322],"content":"<xref:System.Data.DataSet.GetXmlSchema%2A> returns XML as a string, and therefore requires more overhead than <xref:System.Data.DataSet.WriteXmlSchema%2A> to write XML to a file.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Data.DataSet.GetXmlSchema%2A&gt;</ph> returns XML as a string, and therefore requires more overhead than <ph id=\"ph2\">&lt;xref:System.Data.DataSet.WriteXmlSchema%2A&gt;</ph> to write XML to a file.","pos":[0,178],"source":"<xref:System.Data.DataSet.GetXmlSchema%2A> returns XML as a string, and therefore requires more overhead than <xref:System.Data.DataSet.WriteXmlSchema%2A> to write XML to a file."}]},{"pos":[329,469],"content":"If you build a <xref:System.Data.DataSet> using schema inference and serialize it using XML or Web services, the column ordering may change.","nodes":[{"content":"If you build a <ph id=\"ph1\">&lt;xref:System.Data.DataSet&gt;</ph> using schema inference and serialize it using XML or Web services, the column ordering may change.","pos":[0,140],"source":"If you build a <xref:System.Data.DataSet> using schema inference and serialize it using XML or Web services, the column ordering may change."}]}],"pos":[90266,90742],"yaml":true,"extradata":"MT"},{"content":"String that is the XML Schema for the XML representation of the data stored in the <xref href=\"System.Data.DataSet\"></xref>.","nodes":[{"pos":[0,124],"content":"String that is the XML Schema for the XML representation of the data stored in the <ph id=\"ph1\">&lt;xref href=\"System.Data.DataSet\"&gt;&lt;/xref&gt;</ph>.","source":"String that is the XML Schema for the XML representation of the data stored in the <xref href=\"System.Data.DataSet\"></xref>."}],"pos":[91377,91502],"yaml":true},{"content":"Gets a value indicating whether the <xref href=\"System.Data.DataSet\"></xref> has changes, including new, deleted, or modified rows.","nodes":[{"pos":[0,131],"content":"Gets a value indicating whether the <ph id=\"ph1\">&lt;xref href=\"System.Data.DataSet\"&gt;&lt;/xref&gt;</ph> has changes, including new, deleted, or modified rows.","source":"Gets a value indicating whether the <xref href=\"System.Data.DataSet\"></xref> has changes, including new, deleted, or modified rows."}],"pos":[92644,92776],"yaml":true},{"content":"`true` if the <xref href=\"System.Data.DataSet\"></xref> has changes; otherwise `false`.","nodes":[{"pos":[0,86],"content":"<ph id=\"ph1\">`true`</ph> if the <ph id=\"ph2\">&lt;xref href=\"System.Data.DataSet\"&gt;&lt;/xref&gt;</ph> has changes; otherwise <ph id=\"ph3\">`false`</ph>.","source":"`true` if the <xref href=\"System.Data.DataSet\"></xref> has changes; otherwise `false`."}],"pos":[93452,93541],"yaml":true},{"content":"Gets a value indicating whether the <xref href=\"System.Data.DataSet\"></xref> has changes, including new, deleted, or modified rows, filtered by <xref href=\"System.Data.DataRowState\"></xref>.","nodes":[{"pos":[0,190],"content":"Gets a value indicating whether the <ph id=\"ph1\">&lt;xref href=\"System.Data.DataSet\"&gt;&lt;/xref&gt;</ph> has changes, including new, deleted, or modified rows, filtered by <ph id=\"ph2\">&lt;xref href=\"System.Data.DataRowState\"&gt;&lt;/xref&gt;</ph>.","source":"Gets a value indicating whether the <xref href=\"System.Data.DataSet\"></xref> has changes, including new, deleted, or modified rows, filtered by <xref href=\"System.Data.DataRowState\"></xref>."}],"pos":[94795,94986],"yaml":true},{"content":"Examine the <xref:System.Data.DataSet.HasChanges%2A> property of the `DataSet` before invoking the <xref:System.Data.DataSet.GetChanges%2A> method.","nodes":[{"pos":[0,147],"content":"Examine the <ph id=\"ph1\">&lt;xref:System.Data.DataSet.HasChanges%2A&gt;</ph> property of the <ph id=\"ph2\">`DataSet`</ph> before invoking the <ph id=\"ph3\">&lt;xref:System.Data.DataSet.GetChanges%2A&gt;</ph> method.","source":"Examine the <xref:System.Data.DataSet.HasChanges%2A> property of the `DataSet` before invoking the <xref:System.Data.DataSet.GetChanges%2A> method."}],"pos":[94997,95145],"yaml":true,"extradata":"MT"},{"content":"One of the <xref href=\"System.Data.DataRowState\"></xref> values.","nodes":[{"pos":[0,64],"content":"One of the <ph id=\"ph1\">&lt;xref href=\"System.Data.DataRowState\"&gt;&lt;/xref&gt;</ph> values.","source":"One of the <xref href=\"System.Data.DataRowState\"></xref> values."}],"pos":[95862,95927],"yaml":true},{"content":"`true` if the <xref href=\"System.Data.DataSet\"></xref> has changes; otherwise `false`.","nodes":[{"pos":[0,86],"content":"<ph id=\"ph1\">`true`</ph> if the <ph id=\"ph2\">&lt;xref href=\"System.Data.DataSet\"&gt;&lt;/xref&gt;</ph> has changes; otherwise <ph id=\"ph3\">`false`</ph>.","source":"`true` if the <xref href=\"System.Data.DataSet\"></xref> has changes; otherwise `false`."}],"pos":[95985,96074],"yaml":true},{"content":"Gets a value indicating whether there are errors in any of the <xref href=\"System.Data.DataTable\"></xref> objects within this <xref href=\"System.Data.DataSet\"></xref>.","nodes":[{"pos":[0,167],"content":"Gets a value indicating whether there are errors in any of the <ph id=\"ph1\">&lt;xref href=\"System.Data.DataTable\"&gt;&lt;/xref&gt;</ph> objects within this <ph id=\"ph2\">&lt;xref href=\"System.Data.DataSet\"&gt;&lt;/xref&gt;</ph>.","source":"Gets a value indicating whether there are errors in any of the <xref href=\"System.Data.DataTable\"></xref> objects within this <xref href=\"System.Data.DataSet\"></xref>."}],"pos":[97204,97372],"yaml":true},{"content":"Each <xref:System.Data.DataTable> in a <xref:System.Data.DataSet> also has a <xref:System.Data.DataTable.HasErrors%2A> property. Use the `HasErrors` property of the `DataSet` first, to determine if any table has errors, before checking individual <xref:System.Data.DataTable> objects. If a `DataTable` has errors, the <xref:System.Data.DataTable.GetErrors%2A> method returns an array of <xref:System.Data.DataRow> objects containing the errors.","nodes":[{"pos":[0,444],"content":"Each <xref:System.Data.DataTable> in a <xref:System.Data.DataSet> also has a <xref:System.Data.DataTable.HasErrors%2A> property. Use the `HasErrors` property of the `DataSet` first, to determine if any table has errors, before checking individual <xref:System.Data.DataTable> objects. If a `DataTable` has errors, the <xref:System.Data.DataTable.GetErrors%2A> method returns an array of <xref:System.Data.DataRow> objects containing the errors.","nodes":[{"content":"Each <ph id=\"ph1\">&lt;xref:System.Data.DataTable&gt;</ph> in a <ph id=\"ph2\">&lt;xref:System.Data.DataSet&gt;</ph> also has a <ph id=\"ph3\">&lt;xref:System.Data.DataTable.HasErrors%2A&gt;</ph> property.","pos":[0,128],"source":"Each <xref:System.Data.DataTable> in a <xref:System.Data.DataSet> also has a <xref:System.Data.DataTable.HasErrors%2A> property."},{"content":"Use the <ph id=\"ph1\">`HasErrors`</ph> property of the <ph id=\"ph2\">`DataSet`</ph> first, to determine if any table has errors, before checking individual <ph id=\"ph3\">&lt;xref:System.Data.DataTable&gt;</ph> objects.","pos":[129,284],"source":" Use the `HasErrors` property of the `DataSet` first, to determine if any table has errors, before checking individual <xref:System.Data.DataTable> objects."},{"content":"If a <ph id=\"ph1\">`DataTable`</ph> has errors, the <ph id=\"ph2\">&lt;xref:System.Data.DataTable.GetErrors%2A&gt;</ph> method returns an array of <ph id=\"ph3\">&lt;xref:System.Data.DataRow&gt;</ph> objects containing the errors.","pos":[285,444],"source":" If a `DataTable` has errors, the <xref:System.Data.DataTable.GetErrors%2A> method returns an array of <xref:System.Data.DataRow> objects containing the errors."}]}],"pos":[97383,97828],"yaml":true,"extradata":"MT"},{"content":"`true` if any table contains an error;otherwise `false`.","nodes":[{"pos":[0,56],"content":"<ph id=\"ph1\">`true`</ph> if any table contains an error;otherwise <ph id=\"ph2\">`false`</ph>.","source":"`true` if any table contains an error;otherwise `false`."}],"pos":[98611,98670],"yaml":true},{"content":"Applies the XML schema from the specified <xref href=\"System.IO.Stream\"></xref> to the <xref href=\"System.Data.DataSet\"></xref>.","nodes":[{"pos":[0,128],"content":"Applies the XML schema from the specified <ph id=\"ph1\">&lt;xref href=\"System.IO.Stream\"&gt;&lt;/xref&gt;</ph> to the <ph id=\"ph2\">&lt;xref href=\"System.Data.DataSet\"&gt;&lt;/xref&gt;</ph>.","source":"Applies the XML schema from the specified <xref href=\"System.IO.Stream\"></xref> to the <xref href=\"System.Data.DataSet\"></xref>."}],"pos":[100048,100177],"yaml":true},{"content":"The `Stream` from which to read the schema.","nodes":[{"pos":[0,43],"content":"The <ph id=\"ph1\">`Stream`</ph> from which to read the schema.","source":"The `Stream` from which to read the schema."}],"pos":[100353,100397],"yaml":true},{"content":"An array of namespace Uniform Resource Identifier (URI) strings to be excluded from schema inference.","nodes":[{"pos":[0,101],"content":"An array of namespace Uniform Resource Identifier (URI) strings to be excluded from schema inference.","nodes":[{"content":"An array of namespace Uniform Resource Identifier (URI) strings to be excluded from schema inference.","pos":[0,101]}]}],"pos":[100462,100564],"yaml":true},{"content":"Applies the XML schema from the specified <xref href=\"System.IO.TextReader\"></xref> to the <xref href=\"System.Data.DataSet\"></xref>.","nodes":[{"pos":[0,132],"content":"Applies the XML schema from the specified <ph id=\"ph1\">&lt;xref href=\"System.IO.TextReader\"&gt;&lt;/xref&gt;</ph> to the <ph id=\"ph2\">&lt;xref href=\"System.Data.DataSet\"&gt;&lt;/xref&gt;</ph>.","source":"Applies the XML schema from the specified <xref href=\"System.IO.TextReader\"></xref> to the <xref href=\"System.Data.DataSet\"></xref>."}],"pos":[101906,102039],"yaml":true},{"content":"The `TextReader` from which to read the schema.","nodes":[{"pos":[0,47],"content":"The <ph id=\"ph1\">`TextReader`</ph> from which to read the schema.","source":"The `TextReader` from which to read the schema."}],"pos":[102223,102271],"yaml":true},{"content":"An array of namespace Uniform Resource Identifier (URI) strings to be excluded from schema inference.","nodes":[{"pos":[0,101],"content":"An array of namespace Uniform Resource Identifier (URI) strings to be excluded from schema inference.","nodes":[{"content":"An array of namespace Uniform Resource Identifier (URI) strings to be excluded from schema inference.","pos":[0,101]}]}],"pos":[102336,102438],"yaml":true},{"content":"Applies the XML schema from the specified file to the <xref href=\"System.Data.DataSet\"></xref>.","nodes":[{"pos":[0,95],"content":"Applies the XML schema from the specified file to the <ph id=\"ph1\">&lt;xref href=\"System.Data.DataSet\"&gt;&lt;/xref&gt;</ph>.","source":"Applies the XML schema from the specified file to the <xref href=\"System.Data.DataSet\"></xref>."}],"pos":[103747,103843],"yaml":true},{"content":"The name of the file (including the path) from which to read the schema.","nodes":[{"pos":[0,72],"content":"The name of the file (including the path) from which to read the schema.","nodes":[{"content":"The name of the file (including the path) from which to read the schema.","pos":[0,72]}]}],"pos":[104010,104083],"yaml":true},{"content":"An array of namespace Uniform Resource Identifier (URI) strings to be excluded from schema inference.","nodes":[{"pos":[0,101],"content":"An array of namespace Uniform Resource Identifier (URI) strings to be excluded from schema inference.","nodes":[{"content":"An array of namespace Uniform Resource Identifier (URI) strings to be excluded from schema inference.","pos":[0,101]}]}],"pos":[104148,104250],"yaml":true},{"content":"<xref href=\"System.Security.Permissions.FileIOPermission\"></xref> is not set to <xref href=\"System.Security.Permissions.FileIOPermissionAccess.Read\"></xref>.","nodes":[{"pos":[0,157],"content":"<ph id=\"ph1\">&lt;xref href=\"System.Security.Permissions.FileIOPermission\"&gt;&lt;/xref&gt;</ph> is not set to <ph id=\"ph2\">&lt;xref href=\"System.Security.Permissions.FileIOPermissionAccess.Read\"&gt;&lt;/xref&gt;</ph>.","source":"<xref href=\"System.Security.Permissions.FileIOPermission\"></xref> is not set to <xref href=\"System.Security.Permissions.FileIOPermissionAccess.Read\"></xref>."}],"pos":[104424,104582],"yaml":true},{"content":"Applies the XML schema from the specified <xref href=\"System.Xml.XmlReader\"></xref> to the <xref href=\"System.Data.DataSet\"></xref>.","nodes":[{"pos":[0,132],"content":"Applies the XML schema from the specified <ph id=\"ph1\">&lt;xref href=\"System.Xml.XmlReader\"&gt;&lt;/xref&gt;</ph> to the <ph id=\"ph2\">&lt;xref href=\"System.Data.DataSet\"&gt;&lt;/xref&gt;</ph>.","source":"Applies the XML schema from the specified <xref href=\"System.Xml.XmlReader\"></xref> to the <xref href=\"System.Data.DataSet\"></xref>."}],"pos":[105856,105989],"yaml":true},{"content":"The `XMLReader` from which to read the schema.","nodes":[{"pos":[0,46],"content":"The <ph id=\"ph1\">`XMLReader`</ph> from which to read the schema.","source":"The `XMLReader` from which to read the schema."}],"pos":[106173,106220],"yaml":true},{"content":"An array of namespace Uniform Resource Identifier (URI) strings to be excluded from schema inference.","nodes":[{"pos":[0,101],"content":"An array of namespace Uniform Resource Identifier (URI) strings to be excluded from schema inference.","nodes":[{"content":"An array of namespace Uniform Resource Identifier (URI) strings to be excluded from schema inference.","pos":[0,101]}]}],"pos":[106285,106387],"yaml":true},{"content":"Occurs after the <xref href=\"System.Data.DataSet\"></xref> is initialized.","nodes":[{"pos":[0,73],"content":"Occurs after the <ph id=\"ph1\">&lt;xref href=\"System.Data.DataSet\"&gt;&lt;/xref&gt;</ph> is initialized.","source":"Occurs after the <xref href=\"System.Data.DataSet\"></xref> is initialized."}],"pos":[107530,107604],"yaml":true},{"content":"For more information, see <xref:System.Data.DataSet.IsInitialized%2A>.","nodes":[{"pos":[0,70],"content":"For more information, see <xref:System.Data.DataSet.IsInitialized%2A>.","nodes":[{"content":"For more information, see <ph id=\"ph1\">&lt;xref:System.Data.DataSet.IsInitialized%2A&gt;</ph>.","pos":[0,70],"source":"For more information, see <xref:System.Data.DataSet.IsInitialized%2A>."}]}],"pos":[107615,107686],"yaml":true,"extradata":"MT"},{"content":"Deserialize all of the tables data of the DataSet from the binary or XML stream.","nodes":[{"pos":[0,80],"content":"Deserialize all of the tables data of the DataSet from the binary or XML stream.","nodes":[{"content":"Deserialize all of the tables data of the DataSet from the binary or XML stream.","pos":[0,80]}]}],"pos":[108994,109075],"yaml":true},{"content":"Inspects the format of the serialized representation of the `DataSet`.","nodes":[{"pos":[0,70],"content":"Inspects the format of the serialized representation of the <ph id=\"ph1\">`DataSet`</ph>.","source":"Inspects the format of the serialized representation of the `DataSet`."}],"pos":[110758,110829],"yaml":true},{"content":"This member supports the .NET Framework infrastructure and is not intended to be used directly from your code.","nodes":[{"pos":[0,110],"content":"This member supports the .NET Framework infrastructure and is not intended to be used directly from your code.","nodes":[{"content":"This member supports the .NET Framework infrastructure and is not intended to be used directly from your code.","pos":[0,110]}]}],"pos":[110840,110951],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> object.","nodes":[{"pos":[0,79],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Runtime.Serialization.SerializationInfo\"&gt;&lt;/xref&gt;</ph> object.","source":"The <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> object."}],"pos":[111227,111307],"yaml":true},{"content":"The <xref href=\"System.Runtime.Serialization.StreamingContext\"></xref> object.","nodes":[{"pos":[0,78],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Runtime.Serialization.StreamingContext\"&gt;&lt;/xref&gt;</ph> object.","source":"The <xref href=\"System.Runtime.Serialization.StreamingContext\"></xref> object."}],"pos":[111402,111481],"yaml":true},{"content":"`true` if the specified <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> represents a `DataSet` serialized in its binary format, `false` otherwise.","nodes":[{"pos":[0,166],"content":"<ph id=\"ph1\">`true`</ph> if the specified <ph id=\"ph2\">&lt;xref href=\"System.Runtime.Serialization.SerializationInfo\"&gt;&lt;/xref&gt;</ph> represents a <ph id=\"ph3\">`DataSet`</ph> serialized in its binary format, <ph id=\"ph4\">`false`</ph> otherwise.","source":"`true` if the specified <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> represents a `DataSet` serialized in its binary format, `false` otherwise."}],"pos":[111539,111708],"yaml":true},{"content":"Gets a value that indicates whether the <xref href=\"System.Data.DataSet\"></xref> is initialized.","nodes":[{"pos":[0,96],"content":"Gets a value that indicates whether the <ph id=\"ph1\">&lt;xref href=\"System.Data.DataSet\"&gt;&lt;/xref&gt;</ph> is initialized.","source":"Gets a value that indicates whether the <xref href=\"System.Data.DataSet\"></xref> is initialized."}],"pos":[112870,112967],"yaml":true},{"content":"Returns the status of the <xref:System.Data.DataSet> while it’s being constructed, for instance by Visual Studio. The <xref:System.Data.DataSet.BeginInit%2A> method sets it to `false` and <xref:System.Data.DataSet.EndInit%2A> method sets it to `true`.","nodes":[{"pos":[0,251],"content":"Returns the status of the <xref:System.Data.DataSet> while it’s being constructed, for instance by Visual Studio. The <xref:System.Data.DataSet.BeginInit%2A> method sets it to `false` and <xref:System.Data.DataSet.EndInit%2A> method sets it to `true`.","nodes":[{"content":"Returns the status of the <ph id=\"ph1\">&lt;xref:System.Data.DataSet&gt;</ph> while it’s being constructed, for instance by Visual Studio.","pos":[0,113],"source":"Returns the status of the <xref:System.Data.DataSet> while it’s being constructed, for instance by Visual Studio."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Data.DataSet.BeginInit%2A&gt;</ph> method sets it to <ph id=\"ph2\">`false`</ph> and <ph id=\"ph3\">&lt;xref:System.Data.DataSet.EndInit%2A&gt;</ph> method sets it to <ph id=\"ph4\">`true`</ph>.","pos":[114,251],"source":" The <xref:System.Data.DataSet.BeginInit%2A> method sets it to `false` and <xref:System.Data.DataSet.EndInit%2A> method sets it to `true`."}]}],"pos":[112978,113230],"yaml":true,"extradata":"MT"},{"content":"`true` to indicate the component has completed initialization; otherwise `false`.","nodes":[{"pos":[0,81],"content":"<ph id=\"ph1\">`true`</ph> to indicate the component has completed initialization; otherwise <ph id=\"ph2\">`false`</ph>.","source":"`true` to indicate the component has completed initialization; otherwise `false`."}],"pos":[113403,113487],"yaml":true},{"content":"Fills a <xref href=\"System.Data.DataSet\"></xref> with values from a data source using the supplied <xref href=\"System.Data.IDataReader\"></xref>, using an array of <xref href=\"System.Data.DataTable\"></xref> instances to supply the schema and namespace information.","nodes":[{"pos":[0,263],"content":"Fills a <ph id=\"ph1\">&lt;xref href=\"System.Data.DataSet\"&gt;&lt;/xref&gt;</ph> with values from a data source using the supplied <ph id=\"ph2\">&lt;xref href=\"System.Data.IDataReader\"&gt;&lt;/xref&gt;</ph>, using an array of <ph id=\"ph3\">&lt;xref href=\"System.Data.DataTable\"&gt;&lt;/xref&gt;</ph> instances to supply the schema and namespace information.","source":"Fills a <xref href=\"System.Data.DataSet\"></xref> with values from a data source using the supplied <xref href=\"System.Data.IDataReader\"></xref>, using an array of <xref href=\"System.Data.DataTable\"></xref> instances to supply the schema and namespace information."}],"pos":[114983,115247],"yaml":true},{"content":"The <xref:System.Data.DataTable.Load%2A> method provides a technique for filling a single <xref:System.Data.DataTable> with data, retrieved from an <xref:System.Data.IDataReader> instance. This method provides the same functionality, but allows you to load multiple result sets from an <xref:System.Data.IDataReader> into multiple tables within a <xref:System.Data.DataSet>.  \n  \n> [!NOTE]\n>  The load operation will fail with an <xref:System.InvalidOperationException> if any of the source data columns in the incoming `reader` are computed columns.  \n  \n The `loadOption` parameter allows you to specify how you want the imported data to interact with existing data, and can be any of the values from the <xref:System.Data.LoadOption> enumeration. See the documentation for the <xref:System.Data.DataTable><xref:System.Data.DataTable.Load%2A> method for more information on using this parameter.  \n  \n The `tables` parameter allows you to specify an array of <xref:System.Data.DataTable> instances, indicating the order of the tables corresponding to each result set loaded from the reader. The <xref:System.Data.DataSet.Load%2A>method fills each supplied <xref:System.Data.DataTable> instance with data from a single result set from the source data reader. After each result set, the <xref:System.Data.DataSet.Load%2A>method moves on to the next result set within the reader, until there are no more result sets.  \n  \n The name resolution scheme for this method is the same as that followed by the <xref:System.Data.Common.DbDataAdapter.Fill%2A> method of the <xref:System.Data.Common.DbDataAdapter> class.","nodes":[{"pos":[0,374],"content":"The <xref:System.Data.DataTable.Load%2A> method provides a technique for filling a single <xref:System.Data.DataTable> with data, retrieved from an <xref:System.Data.IDataReader> instance. This method provides the same functionality, but allows you to load multiple result sets from an <xref:System.Data.IDataReader> into multiple tables within a <xref:System.Data.DataSet>.","nodes":[{"content":"The <xref:System.Data.DataTable.Load%2A> method provides a technique for filling a single <xref:System.Data.DataTable> with data, retrieved from an <xref:System.Data.IDataReader> instance. This method provides the same functionality, but allows you to load multiple result sets from an <xref:System.Data.IDataReader> into multiple tables within a <xref:System.Data.DataSet>.","pos":[0,374],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Data.DataTable.Load%2A&gt;</ph> method provides a technique for filling a single <ph id=\"ph2\">&lt;xref:System.Data.DataTable&gt;</ph> with data, retrieved from an <ph id=\"ph3\">&lt;xref:System.Data.IDataReader&gt;</ph> instance.","pos":[0,188],"source":"The <xref:System.Data.DataTable.Load%2A> method provides a technique for filling a single <xref:System.Data.DataTable> with data, retrieved from an <xref:System.Data.IDataReader> instance."},{"content":"This method provides the same functionality, but allows you to load multiple result sets from an <ph id=\"ph1\">&lt;xref:System.Data.IDataReader&gt;</ph> into multiple tables within a <ph id=\"ph2\">&lt;xref:System.Data.DataSet&gt;</ph>.","pos":[189,374],"source":" This method provides the same functionality, but allows you to load multiple result sets from an <xref:System.Data.IDataReader> into multiple tables within a <xref:System.Data.DataSet>."}]}]},{"pos":[382,550],"content":"[!NOTE]\n The load operation will fail with an <xref:System.InvalidOperationException> if any of the source data columns in the incoming `reader` are computed columns.","leadings":["","> "],"nodes":[{"content":"The load operation will fail with an <ph id=\"ph1\">&lt;xref:System.InvalidOperationException&gt;</ph> if any of the source data columns in the incoming <ph id=\"ph2\">`reader`</ph> are computed columns.","pos":[9,166],"source":" The load operation will fail with an <xref:System.InvalidOperationException> if any of the source data columns in the incoming `reader` are computed columns."}]},{"pos":[557,897],"content":"The `loadOption` parameter allows you to specify how you want the imported data to interact with existing data, and can be any of the values from the <xref:System.Data.LoadOption> enumeration. See the documentation for the <xref:System.Data.DataTable><xref:System.Data.DataTable.Load%2A> method for more information on using this parameter.","nodes":[{"content":"The <ph id=\"ph1\">`loadOption`</ph> parameter allows you to specify how you want the imported data to interact with existing data, and can be any of the values from the <ph id=\"ph2\">&lt;xref:System.Data.LoadOption&gt;</ph> enumeration.","pos":[0,192],"source":"The `loadOption` parameter allows you to specify how you want the imported data to interact with existing data, and can be any of the values from the <xref:System.Data.LoadOption> enumeration."},{"content":"See the documentation for the <ph id=\"ph1\">&lt;xref:System.Data.DataTable&gt;</ph><ph id=\"ph2\">&lt;xref:System.Data.DataTable.Load%2A&gt;</ph> method for more information on using this parameter.","pos":[193,340],"source":" See the documentation for the <xref:System.Data.DataTable><xref:System.Data.DataTable.Load%2A> method for more information on using this parameter."}]},{"pos":[904,1415],"content":"The `tables` parameter allows you to specify an array of <xref:System.Data.DataTable> instances, indicating the order of the tables corresponding to each result set loaded from the reader. The <xref:System.Data.DataSet.Load%2A>method fills each supplied <xref:System.Data.DataTable> instance with data from a single result set from the source data reader. After each result set, the <xref:System.Data.DataSet.Load%2A>method moves on to the next result set within the reader, until there are no more result sets.","nodes":[{"content":"The <ph id=\"ph1\">`tables`</ph> parameter allows you to specify an array of <ph id=\"ph2\">&lt;xref:System.Data.DataTable&gt;</ph> instances, indicating the order of the tables corresponding to each result set loaded from the reader.","pos":[0,188],"source":"The `tables` parameter allows you to specify an array of <xref:System.Data.DataTable> instances, indicating the order of the tables corresponding to each result set loaded from the reader."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Data.DataSet.Load%2A&gt;</ph>method fills each supplied <ph id=\"ph2\">&lt;xref:System.Data.DataTable&gt;</ph> instance with data from a single result set from the source data reader.","pos":[189,355],"source":" The <xref:System.Data.DataSet.Load%2A>method fills each supplied <xref:System.Data.DataTable> instance with data from a single result set from the source data reader."},{"content":"After each result set, the <ph id=\"ph1\">&lt;xref:System.Data.DataSet.Load%2A&gt;</ph>method moves on to the next result set within the reader, until there are no more result sets.","pos":[356,511],"source":" After each result set, the <xref:System.Data.DataSet.Load%2A>method moves on to the next result set within the reader, until there are no more result sets."}]},{"pos":[1422,1609],"content":"The name resolution scheme for this method is the same as that followed by the <xref:System.Data.Common.DbDataAdapter.Fill%2A> method of the <xref:System.Data.Common.DbDataAdapter> class.","nodes":[{"content":"The name resolution scheme for this method is the same as that followed by the <ph id=\"ph1\">&lt;xref:System.Data.Common.DbDataAdapter.Fill%2A&gt;</ph> method of the <ph id=\"ph2\">&lt;xref:System.Data.Common.DbDataAdapter&gt;</ph> class.","pos":[0,187],"source":"The name resolution scheme for this method is the same as that followed by the <xref:System.Data.Common.DbDataAdapter.Fill%2A> method of the <xref:System.Data.Common.DbDataAdapter> class."}]}],"pos":[115258,116879],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Data.IDataReader\"></xref> that provides one or more result sets.","nodes":[{"pos":[0,86],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Data.IDataReader\"&gt;&lt;/xref&gt;</ph> that provides one or more result sets.","source":"An <xref href=\"System.Data.IDataReader\"></xref> that provides one or more result sets."}],"pos":[117827,117914],"yaml":true},{"content":"A value from the <xref href=\"System.Data.LoadOption\"></xref> enumeration that indicates how rows already in the <xref href=\"System.Data.DataTable\"></xref> instances within the <xref href=\"System.Data.DataSet\"></xref> will be combined with incoming rows that share the same primary key.","nodes":[{"pos":[0,285],"content":"A value from the <ph id=\"ph1\">&lt;xref href=\"System.Data.LoadOption\"&gt;&lt;/xref&gt;</ph> enumeration that indicates how rows already in the <ph id=\"ph2\">&lt;xref href=\"System.Data.DataTable\"&gt;&lt;/xref&gt;</ph> instances within the <ph id=\"ph3\">&lt;xref href=\"System.Data.DataSet\"&gt;&lt;/xref&gt;</ph> will be combined with incoming rows that share the same primary key.","source":"A value from the <xref href=\"System.Data.LoadOption\"></xref> enumeration that indicates how rows already in the <xref href=\"System.Data.DataTable\"></xref> instances within the <xref href=\"System.Data.DataSet\"></xref> will be combined with incoming rows that share the same primary key."}],"pos":[117989,118275],"yaml":true},{"content":"An array of <xref href=\"System.Data.DataTable\"></xref> instances, from which the <xref href=\"System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.DataTable[])\"></xref> method retrieves name and namespace information. Each of these tables must be a member of the <xref href=\"System.Data.DataTableCollection\"></xref> contained by this <xref href=\"System.Data.DataSet\"></xref>.","nodes":[{"pos":[0,405],"content":"An array of <xref href=\"System.Data.DataTable\"></xref> instances, from which the <xref href=\"System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.DataTable[])\"></xref> method retrieves name and namespace information. Each of these tables must be a member of the <xref href=\"System.Data.DataTableCollection\"></xref> contained by this <xref href=\"System.Data.DataSet\"></xref>.","nodes":[{"content":"An array of <ph id=\"ph1\">&lt;xref href=\"System.Data.DataTable\"&gt;&lt;/xref&gt;</ph> instances, from which the <ph id=\"ph2\">&lt;xref href=\"System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.DataTable[])\"&gt;&lt;/xref&gt;</ph> method retrieves name and namespace information.","pos":[0,247],"source":"An array of <xref href=\"System.Data.DataTable\"></xref> instances, from which the <xref href=\"System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.DataTable[])\"></xref> method retrieves name and namespace information."},{"content":"Each of these tables must be a member of the <ph id=\"ph1\">&lt;xref href=\"System.Data.DataTableCollection\"&gt;&lt;/xref&gt;</ph> contained by this <ph id=\"ph2\">&lt;xref href=\"System.Data.DataSet\"&gt;&lt;/xref&gt;</ph>.","pos":[248,405],"source":" Each of these tables must be a member of the <xref href=\"System.Data.DataTableCollection\"></xref> contained by this <xref href=\"System.Data.DataSet\"></xref>."}]}],"pos":[118347,118753],"yaml":true},{"content":"Fills a <xref href=\"System.Data.DataSet\"></xref> with values from a data source using the supplied <xref href=\"System.Data.IDataReader\"></xref>, using an array of strings to supply the names for the tables within the `DataSet`.","nodes":[{"pos":[0,227],"content":"Fills a <ph id=\"ph1\">&lt;xref href=\"System.Data.DataSet\"&gt;&lt;/xref&gt;</ph> with values from a data source using the supplied <ph id=\"ph2\">&lt;xref href=\"System.Data.IDataReader\"&gt;&lt;/xref&gt;</ph>, using an array of strings to supply the names for the tables within the <ph id=\"ph3\">`DataSet`</ph>.","source":"Fills a <xref href=\"System.Data.DataSet\"></xref> with values from a data source using the supplied <xref href=\"System.Data.IDataReader\"></xref>, using an array of strings to supply the names for the tables within the `DataSet`."}],"pos":[120142,120370],"yaml":true},{"content":"The <xref:System.Data.DataTable.Load%2A> method provides a technique for filling a single <xref:System.Data.DataTable> with data, retrieved from an <xref:System.Data.IDataReader> instance. This method provides the same functionality, but allows you to load multiple result sets from an `IDataReader` into multiple tables within a `DataSet`.  \n  \n> [!NOTE]\n>  The load operation will fail with an <xref:System.InvalidOperationException> if any of the source data columns in the incoming `reader` are computed columns.  \n  \n The `loadOption` parameter allows you to specify how you want the imported data to interact with existing data, and can be any of the values from the <xref:System.Data.LoadOption> enumeration. See the documentation for the <xref:System.Data.DataTable.Load%2A> method for more information on using this parameter.  \n  \n The `tables` parameter allows you to specify an array of table names, indicating the order of the tables corresponding to each result set loaded from the reader. The `Load` method attempts to find a table within the `DataSet` matching the name found in the array of table names, in order. If a matching table is found, that table is loaded with the content of the current result set. If no matching table is found, a table is created using the name supplied in the array of table names, and the new table's schema is inferred from the result set. After each result set, the `Load` method moves on to the next result set within the reader, until there are no more result sets.  \n  \n The default namespace associated with `DataSet`, if any, is associated with each newly created `DataTable`. The name resolution scheme for this method is the same as that followed by the <xref:System.Data.Common.DbDataAdapter.Fill%2A> method of the <xref:System.Data.Common.DbDataAdapter> class.","nodes":[{"pos":[0,340],"content":"The <xref:System.Data.DataTable.Load%2A> method provides a technique for filling a single <xref:System.Data.DataTable> with data, retrieved from an <xref:System.Data.IDataReader> instance. This method provides the same functionality, but allows you to load multiple result sets from an `IDataReader` into multiple tables within a `DataSet`.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Data.DataTable.Load%2A&gt;</ph> method provides a technique for filling a single <ph id=\"ph2\">&lt;xref:System.Data.DataTable&gt;</ph> with data, retrieved from an <ph id=\"ph3\">&lt;xref:System.Data.IDataReader&gt;</ph> instance.","pos":[0,188],"source":"The <xref:System.Data.DataTable.Load%2A> method provides a technique for filling a single <xref:System.Data.DataTable> with data, retrieved from an <xref:System.Data.IDataReader> instance."},{"content":"This method provides the same functionality, but allows you to load multiple result sets from an <ph id=\"ph1\">`IDataReader`</ph> into multiple tables within a <ph id=\"ph2\">`DataSet`</ph>.","pos":[189,340],"source":" This method provides the same functionality, but allows you to load multiple result sets from an `IDataReader` into multiple tables within a `DataSet`."}]},{"pos":[348,516],"content":"[!NOTE]\n The load operation will fail with an <xref:System.InvalidOperationException> if any of the source data columns in the incoming `reader` are computed columns.","leadings":["","> "],"nodes":[{"content":"The load operation will fail with an <ph id=\"ph1\">&lt;xref:System.InvalidOperationException&gt;</ph> if any of the source data columns in the incoming <ph id=\"ph2\">`reader`</ph> are computed columns.","pos":[9,166],"source":" The load operation will fail with an <xref:System.InvalidOperationException> if any of the source data columns in the incoming `reader` are computed columns."}]},{"pos":[523,835],"content":"The `loadOption` parameter allows you to specify how you want the imported data to interact with existing data, and can be any of the values from the <xref:System.Data.LoadOption> enumeration. See the documentation for the <xref:System.Data.DataTable.Load%2A> method for more information on using this parameter.","nodes":[{"content":"The <ph id=\"ph1\">`loadOption`</ph> parameter allows you to specify how you want the imported data to interact with existing data, and can be any of the values from the <ph id=\"ph2\">&lt;xref:System.Data.LoadOption&gt;</ph> enumeration.","pos":[0,192],"source":"The `loadOption` parameter allows you to specify how you want the imported data to interact with existing data, and can be any of the values from the <xref:System.Data.LoadOption> enumeration."},{"content":"See the documentation for the <ph id=\"ph1\">&lt;xref:System.Data.DataTable.Load%2A&gt;</ph> method for more information on using this parameter.","pos":[193,312],"source":" See the documentation for the <xref:System.Data.DataTable.Load%2A> method for more information on using this parameter."}]},{"pos":[842,1517],"content":"The `tables` parameter allows you to specify an array of table names, indicating the order of the tables corresponding to each result set loaded from the reader. The `Load` method attempts to find a table within the `DataSet` matching the name found in the array of table names, in order. If a matching table is found, that table is loaded with the content of the current result set. If no matching table is found, a table is created using the name supplied in the array of table names, and the new table's schema is inferred from the result set. After each result set, the `Load` method moves on to the next result set within the reader, until there are no more result sets.","nodes":[{"content":"The <ph id=\"ph1\">`tables`</ph> parameter allows you to specify an array of table names, indicating the order of the tables corresponding to each result set loaded from the reader.","pos":[0,161],"source":"The `tables` parameter allows you to specify an array of table names, indicating the order of the tables corresponding to each result set loaded from the reader."},{"content":"The <ph id=\"ph1\">`Load`</ph> method attempts to find a table within the <ph id=\"ph2\">`DataSet`</ph> matching the name found in the array of table names, in order.","pos":[162,288],"source":" The `Load` method attempts to find a table within the `DataSet` matching the name found in the array of table names, in order."},{"content":"If a matching table is found, that table is loaded with the content of the current result set.","pos":[289,383]},{"content":"If no matching table is found, a table is created using the name supplied in the array of table names, and the new table's schema is inferred from the result set.","pos":[384,546]},{"content":"After each result set, the <ph id=\"ph1\">`Load`</ph> method moves on to the next result set within the reader, until there are no more result sets.","pos":[547,675],"source":" After each result set, the `Load` method moves on to the next result set within the reader, until there are no more result sets."}]},{"pos":[1524,1819],"content":"The default namespace associated with `DataSet`, if any, is associated with each newly created `DataTable`. The name resolution scheme for this method is the same as that followed by the <xref:System.Data.Common.DbDataAdapter.Fill%2A> method of the <xref:System.Data.Common.DbDataAdapter> class.","nodes":[{"content":"The default namespace associated with <ph id=\"ph1\">`DataSet`</ph>, if any, is associated with each newly created <ph id=\"ph2\">`DataTable`</ph>.","pos":[0,107],"source":"The default namespace associated with `DataSet`, if any, is associated with each newly created `DataTable`."},{"content":"The name resolution scheme for this method is the same as that followed by the <ph id=\"ph1\">&lt;xref:System.Data.Common.DbDataAdapter.Fill%2A&gt;</ph> method of the <ph id=\"ph2\">&lt;xref:System.Data.Common.DbDataAdapter&gt;</ph> class.","pos":[108,295],"source":" The name resolution scheme for this method is the same as that followed by the <xref:System.Data.Common.DbDataAdapter.Fill%2A> method of the <xref:System.Data.Common.DbDataAdapter> class."}]}],"pos":[120381,122212],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Data.IDataReader\"></xref> that provides one or more result sets.","nodes":[{"pos":[0,86],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Data.IDataReader\"&gt;&lt;/xref&gt;</ph> that provides one or more result sets.","source":"An <xref href=\"System.Data.IDataReader\"></xref> that provides one or more result sets."}],"pos":[123324,123411],"yaml":true},{"content":"A value from the <xref href=\"System.Data.LoadOption\"></xref> enumeration that indicates how rows already in the <xref href=\"System.Data.DataTable\"></xref> instances within the `DataSet` will be combined with incoming rows that share the same primary key.","nodes":[{"pos":[0,254],"content":"A value from the <ph id=\"ph1\">&lt;xref href=\"System.Data.LoadOption\"&gt;&lt;/xref&gt;</ph> enumeration that indicates how rows already in the <ph id=\"ph2\">&lt;xref href=\"System.Data.DataTable\"&gt;&lt;/xref&gt;</ph> instances within the <ph id=\"ph3\">`DataSet`</ph> will be combined with incoming rows that share the same primary key.","source":"A value from the <xref href=\"System.Data.LoadOption\"></xref> enumeration that indicates how rows already in the <xref href=\"System.Data.DataTable\"></xref> instances within the `DataSet` will be combined with incoming rows that share the same primary key."}],"pos":[123486,123741],"yaml":true},{"content":"An array of strings, from which the `Load` method retrieves table name information.","nodes":[{"pos":[0,83],"content":"An array of strings, from which the <ph id=\"ph1\">`Load`</ph> method retrieves table name information.","source":"An array of strings, from which the `Load` method retrieves table name information."}],"pos":[123805,123889],"yaml":true},{"content":"Fills a <xref href=\"System.Data.DataSet\"></xref> with values from a data source using the supplied <xref href=\"System.Data.IDataReader\"></xref>, using an array of <xref href=\"System.Data.DataTable\"></xref> instances to supply the schema and namespace information.","nodes":[{"pos":[0,263],"content":"Fills a <ph id=\"ph1\">&lt;xref href=\"System.Data.DataSet\"&gt;&lt;/xref&gt;</ph> with values from a data source using the supplied <ph id=\"ph2\">&lt;xref href=\"System.Data.IDataReader\"&gt;&lt;/xref&gt;</ph>, using an array of <ph id=\"ph3\">&lt;xref href=\"System.Data.DataTable\"&gt;&lt;/xref&gt;</ph> instances to supply the schema and namespace information.","source":"Fills a <xref href=\"System.Data.DataSet\"></xref> with values from a data source using the supplied <xref href=\"System.Data.IDataReader\"></xref>, using an array of <xref href=\"System.Data.DataTable\"></xref> instances to supply the schema and namespace information."}],"pos":[125482,125746],"yaml":true},{"content":"The <xref:System.Data.DataTable.Load%2A> method provides a technique for filling a single <xref:System.Data.DataTable> with data, retrieved from an <xref:System.Data.IDataReader> instance. This method provides the same functionality, but allows you to load multiple result sets from an <xref:System.Data.IDataReader> into multiple tables within a <xref:System.Data.DataSet>.  \n  \n> [!NOTE]\n>  The load operation will fail with an <xref:System.InvalidOperationException> if any of the source data columns in the incoming `reader` are computed columns.  \n  \n The `loadOption` parameter allows you to specify how you want the imported data to interact with existing data, and can be any of the values from the <xref:System.Data.LoadOption> enumeration. See the documentation for the <xref:System.Data.DataTable><xref:System.Data.DataTable.Load%2A> method for more information on using this parameter.  \n  \n The `errorHandler` parameter is a <xref:System.Data.FillErrorEventHandler> delegate that refers to a procedure that is called when an error occurs while loading data. The <xref:System.Data.FillErrorEventArgs> parameter passed to the procedure provides properties that allow you to retrieve information about the error that occurred, the current row of data, and the <xref:System.Data.DataTable> being filled. Using this delegate mechanism, rather than a simpler try/catch block, allows you to determine the error, handle the situation, and continue processing if you like. The <xref:System.Data.FillErrorEventArgs> parameter supplies a <xref:System.Data.FillErrorEventArgs.Continue%2A> property: set this property to `true` to indicate that you have handled the error and wish to continue processing; set the property to `false` to indicate that you wish to halt processing. Be aware that setting the property to `false` causes the code that triggered the problem to throw an exception.  \n  \n The `tables` parameter allows you to specify an array of <xref:System.Data.DataTable> instances, indicating the order of the tables corresponding to each result set loaded from the reader. The <xref:System.Data.DataSet.Load%2A>method fills each supplied <xref:System.Data.DataTable> instance with data from a single result set from the source data reader. After each result set, the <xref:System.Data.DataSet.Load%2A>method moves on to the next result set within the reader, until there are no more result sets.  \n  \n The name resolution scheme for this method is the same as that followed by the <xref:System.Data.Common.DbDataAdapter.Fill%2A> method of the <xref:System.Data.Common.DbDataAdapter> class.","nodes":[{"pos":[0,374],"content":"The <xref:System.Data.DataTable.Load%2A> method provides a technique for filling a single <xref:System.Data.DataTable> with data, retrieved from an <xref:System.Data.IDataReader> instance. This method provides the same functionality, but allows you to load multiple result sets from an <xref:System.Data.IDataReader> into multiple tables within a <xref:System.Data.DataSet>.","nodes":[{"content":"The <xref:System.Data.DataTable.Load%2A> method provides a technique for filling a single <xref:System.Data.DataTable> with data, retrieved from an <xref:System.Data.IDataReader> instance. This method provides the same functionality, but allows you to load multiple result sets from an <xref:System.Data.IDataReader> into multiple tables within a <xref:System.Data.DataSet>.","pos":[0,374],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Data.DataTable.Load%2A&gt;</ph> method provides a technique for filling a single <ph id=\"ph2\">&lt;xref:System.Data.DataTable&gt;</ph> with data, retrieved from an <ph id=\"ph3\">&lt;xref:System.Data.IDataReader&gt;</ph> instance.","pos":[0,188],"source":"The <xref:System.Data.DataTable.Load%2A> method provides a technique for filling a single <xref:System.Data.DataTable> with data, retrieved from an <xref:System.Data.IDataReader> instance."},{"content":"This method provides the same functionality, but allows you to load multiple result sets from an <ph id=\"ph1\">&lt;xref:System.Data.IDataReader&gt;</ph> into multiple tables within a <ph id=\"ph2\">&lt;xref:System.Data.DataSet&gt;</ph>.","pos":[189,374],"source":" This method provides the same functionality, but allows you to load multiple result sets from an <xref:System.Data.IDataReader> into multiple tables within a <xref:System.Data.DataSet>."}]}]},{"pos":[382,550],"content":"[!NOTE]\n The load operation will fail with an <xref:System.InvalidOperationException> if any of the source data columns in the incoming `reader` are computed columns.","leadings":["","> "],"nodes":[{"content":"The load operation will fail with an <ph id=\"ph1\">&lt;xref:System.InvalidOperationException&gt;</ph> if any of the source data columns in the incoming <ph id=\"ph2\">`reader`</ph> are computed columns.","pos":[9,166],"source":" The load operation will fail with an <xref:System.InvalidOperationException> if any of the source data columns in the incoming `reader` are computed columns."}]},{"pos":[557,897],"content":"The `loadOption` parameter allows you to specify how you want the imported data to interact with existing data, and can be any of the values from the <xref:System.Data.LoadOption> enumeration. See the documentation for the <xref:System.Data.DataTable><xref:System.Data.DataTable.Load%2A> method for more information on using this parameter.","nodes":[{"content":"The <ph id=\"ph1\">`loadOption`</ph> parameter allows you to specify how you want the imported data to interact with existing data, and can be any of the values from the <ph id=\"ph2\">&lt;xref:System.Data.LoadOption&gt;</ph> enumeration.","pos":[0,192],"source":"The `loadOption` parameter allows you to specify how you want the imported data to interact with existing data, and can be any of the values from the <xref:System.Data.LoadOption> enumeration."},{"content":"See the documentation for the <ph id=\"ph1\">&lt;xref:System.Data.DataTable&gt;</ph><ph id=\"ph2\">&lt;xref:System.Data.DataTable.Load%2A&gt;</ph> method for more information on using this parameter.","pos":[193,340],"source":" See the documentation for the <xref:System.Data.DataTable><xref:System.Data.DataTable.Load%2A> method for more information on using this parameter."}]},{"pos":[904,1890],"content":"The `errorHandler` parameter is a <xref:System.Data.FillErrorEventHandler> delegate that refers to a procedure that is called when an error occurs while loading data. The <xref:System.Data.FillErrorEventArgs> parameter passed to the procedure provides properties that allow you to retrieve information about the error that occurred, the current row of data, and the <xref:System.Data.DataTable> being filled. Using this delegate mechanism, rather than a simpler try/catch block, allows you to determine the error, handle the situation, and continue processing if you like. The <xref:System.Data.FillErrorEventArgs> parameter supplies a <xref:System.Data.FillErrorEventArgs.Continue%2A> property: set this property to `true` to indicate that you have handled the error and wish to continue processing; set the property to `false` to indicate that you wish to halt processing. Be aware that setting the property to `false` causes the code that triggered the problem to throw an exception.","nodes":[{"content":"The <ph id=\"ph1\">`errorHandler`</ph> parameter is a <ph id=\"ph2\">&lt;xref:System.Data.FillErrorEventHandler&gt;</ph> delegate that refers to a procedure that is called when an error occurs while loading data.","pos":[0,166],"source":"The `errorHandler` parameter is a <xref:System.Data.FillErrorEventHandler> delegate that refers to a procedure that is called when an error occurs while loading data."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Data.FillErrorEventArgs&gt;</ph> parameter passed to the procedure provides properties that allow you to retrieve information about the error that occurred, the current row of data, and the <ph id=\"ph2\">&lt;xref:System.Data.DataTable&gt;</ph> being filled.","pos":[167,408],"source":" The <xref:System.Data.FillErrorEventArgs> parameter passed to the procedure provides properties that allow you to retrieve information about the error that occurred, the current row of data, and the <xref:System.Data.DataTable> being filled."},{"content":"Using this delegate mechanism, rather than a simpler try/catch block, allows you to determine the error, handle the situation, and continue processing if you like.","pos":[409,572]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Data.FillErrorEventArgs&gt;</ph> parameter supplies a <ph id=\"ph2\">&lt;xref:System.Data.FillErrorEventArgs.Continue%2A&gt;</ph> property: set this property to <ph id=\"ph3\">`true`</ph> to indicate that you have handled the error and wish to continue processing; set the property to <ph id=\"ph4\">`false`</ph> to indicate that you wish to halt processing.","pos":[573,874],"source":" The <xref:System.Data.FillErrorEventArgs> parameter supplies a <xref:System.Data.FillErrorEventArgs.Continue%2A> property: set this property to `true` to indicate that you have handled the error and wish to continue processing; set the property to `false` to indicate that you wish to halt processing."},{"content":"Be aware that setting the property to <ph id=\"ph1\">`false`</ph> causes the code that triggered the problem to throw an exception.","pos":[875,986],"source":" Be aware that setting the property to `false` causes the code that triggered the problem to throw an exception."}]},{"pos":[1897,2408],"content":"The `tables` parameter allows you to specify an array of <xref:System.Data.DataTable> instances, indicating the order of the tables corresponding to each result set loaded from the reader. The <xref:System.Data.DataSet.Load%2A>method fills each supplied <xref:System.Data.DataTable> instance with data from a single result set from the source data reader. After each result set, the <xref:System.Data.DataSet.Load%2A>method moves on to the next result set within the reader, until there are no more result sets.","nodes":[{"content":"The <ph id=\"ph1\">`tables`</ph> parameter allows you to specify an array of <ph id=\"ph2\">&lt;xref:System.Data.DataTable&gt;</ph> instances, indicating the order of the tables corresponding to each result set loaded from the reader.","pos":[0,188],"source":"The `tables` parameter allows you to specify an array of <xref:System.Data.DataTable> instances, indicating the order of the tables corresponding to each result set loaded from the reader."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Data.DataSet.Load%2A&gt;</ph>method fills each supplied <ph id=\"ph2\">&lt;xref:System.Data.DataTable&gt;</ph> instance with data from a single result set from the source data reader.","pos":[189,355],"source":" The <xref:System.Data.DataSet.Load%2A>method fills each supplied <xref:System.Data.DataTable> instance with data from a single result set from the source data reader."},{"content":"After each result set, the <ph id=\"ph1\">&lt;xref:System.Data.DataSet.Load%2A&gt;</ph>method moves on to the next result set within the reader, until there are no more result sets.","pos":[356,511],"source":" After each result set, the <xref:System.Data.DataSet.Load%2A>method moves on to the next result set within the reader, until there are no more result sets."}]},{"pos":[2415,2602],"content":"The name resolution scheme for this method is the same as that followed by the <xref:System.Data.Common.DbDataAdapter.Fill%2A> method of the <xref:System.Data.Common.DbDataAdapter> class.","nodes":[{"content":"The name resolution scheme for this method is the same as that followed by the <ph id=\"ph1\">&lt;xref:System.Data.Common.DbDataAdapter.Fill%2A&gt;</ph> method of the <ph id=\"ph2\">&lt;xref:System.Data.Common.DbDataAdapter&gt;</ph> class.","pos":[0,187],"source":"The name resolution scheme for this method is the same as that followed by the <xref:System.Data.Common.DbDataAdapter.Fill%2A> method of the <xref:System.Data.Common.DbDataAdapter> class."}]}],"pos":[125757,128373],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Data.IDataReader\"></xref> that provides one or more result sets.","nodes":[{"pos":[0,86],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Data.IDataReader\"&gt;&lt;/xref&gt;</ph> that provides one or more result sets.","source":"An <xref href=\"System.Data.IDataReader\"></xref> that provides one or more result sets."}],"pos":[129356,129443],"yaml":true},{"content":"A value from the <xref href=\"System.Data.LoadOption\"></xref> enumeration that indicates how rows already in the <xref href=\"System.Data.DataTable\"></xref> instances within the <xref href=\"System.Data.DataSet\"></xref> will be combined with incoming rows that share the same primary key.","nodes":[{"pos":[0,285],"content":"A value from the <ph id=\"ph1\">&lt;xref href=\"System.Data.LoadOption\"&gt;&lt;/xref&gt;</ph> enumeration that indicates how rows already in the <ph id=\"ph2\">&lt;xref href=\"System.Data.DataTable\"&gt;&lt;/xref&gt;</ph> instances within the <ph id=\"ph3\">&lt;xref href=\"System.Data.DataSet\"&gt;&lt;/xref&gt;</ph> will be combined with incoming rows that share the same primary key.","source":"A value from the <xref href=\"System.Data.LoadOption\"></xref> enumeration that indicates how rows already in the <xref href=\"System.Data.DataTable\"></xref> instances within the <xref href=\"System.Data.DataSet\"></xref> will be combined with incoming rows that share the same primary key."}],"pos":[129518,129804],"yaml":true},{"content":"A <xref href=\"System.Data.FillErrorEventHandler\"></xref> delegate to call when an error occurs while loading data.","nodes":[{"pos":[0,114],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Data.FillErrorEventHandler\"&gt;&lt;/xref&gt;</ph> delegate to call when an error occurs while loading data.","source":"A <xref href=\"System.Data.FillErrorEventHandler\"></xref> delegate to call when an error occurs while loading data."}],"pos":[129892,130007],"yaml":true},{"content":"An array of <xref href=\"System.Data.DataTable\"></xref> instances, from which the <xref href=\"System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler,System.Data.DataTable[])\"></xref> method retrieves name and namespace information.","nodes":[{"pos":[0,281],"content":"An array of <ph id=\"ph1\">&lt;xref href=\"System.Data.DataTable\"&gt;&lt;/xref&gt;</ph> instances, from which the <ph id=\"ph2\">&lt;xref href=\"System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler,System.Data.DataTable[])\"&gt;&lt;/xref&gt;</ph> method retrieves name and namespace information.","source":"An array of <xref href=\"System.Data.DataTable\"></xref> instances, from which the <xref href=\"System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler,System.Data.DataTable[])\"></xref> method retrieves name and namespace information."}],"pos":[130079,130361],"yaml":true},{"content":"Gets or sets the locale information used to compare strings within the table.","nodes":[{"pos":[0,77],"content":"Gets or sets the locale information used to compare strings within the table.","nodes":[{"content":"Gets or sets the locale information used to compare strings within the table.","pos":[0,77]}]}],"pos":[131467,131545],"yaml":true},{"content":"The <xref:System.Data.DataSet.Locale%2A> property specifies the locale for which sorting applies.  \n  \n By default, setting the <xref:System.Data.DataSet.Locale%2A> for a <xref:System.Data.DataSet> also sets the <xref:System.Data.DataSet.Locale%2A> for each <xref:System.Data.DataTable> object in that `DataSet` to the same value.  \n  \n> [!NOTE]\n>  In columns that contain expressions, the <xref:System.StringComparison.InvariantCulture> is used. The <xref:System.StringComparison.CurrentCulture> is ignored.","nodes":[{"pos":[0,97],"content":"The <xref:System.Data.DataSet.Locale%2A> property specifies the locale for which sorting applies.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Data.DataSet.Locale%2A&gt;</ph> property specifies the locale for which sorting applies.","pos":[0,97],"source":"The <xref:System.Data.DataSet.Locale%2A> property specifies the locale for which sorting applies."}]},{"pos":[104,330],"content":"By default, setting the <ph id=\"ph1\">&lt;xref:System.Data.DataSet.Locale%2A&gt;</ph> for a <ph id=\"ph2\">&lt;xref:System.Data.DataSet&gt;</ph> also sets the <ph id=\"ph3\">&lt;xref:System.Data.DataSet.Locale%2A&gt;</ph> for each <ph id=\"ph4\">&lt;xref:System.Data.DataTable&gt;</ph> object in that <ph id=\"ph5\">`DataSet`</ph> to the same value.","source":"By default, setting the <xref:System.Data.DataSet.Locale%2A> for a <xref:System.Data.DataSet> also sets the <xref:System.Data.DataSet.Locale%2A> for each <xref:System.Data.DataTable> object in that `DataSet` to the same value."},{"pos":[338,508],"content":"[!NOTE]\n In columns that contain expressions, the <xref:System.StringComparison.InvariantCulture> is used. The <xref:System.StringComparison.CurrentCulture> is ignored.","leadings":["","> "],"nodes":[{"content":" In columns that contain expressions, the <xref:System.StringComparison.InvariantCulture> is used. The <xref:System.StringComparison.CurrentCulture> is ignored.","pos":[8,168],"nodes":[{"content":"In columns that contain expressions, the <ph id=\"ph1\">&lt;xref:System.StringComparison.InvariantCulture&gt;</ph> is used.","pos":[1,98],"source":" In columns that contain expressions, the <xref:System.StringComparison.InvariantCulture> is used."},{"content":"The <ph id=\"ph1\">&lt;xref:System.StringComparison.CurrentCulture&gt;</ph> is ignored.","pos":[99,160],"source":" The <xref:System.StringComparison.CurrentCulture> is ignored."}]}]}],"pos":[131556,132072],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Globalization.CultureInfo\"></xref> that contains data about the user's machine locale. The default is `null`.","nodes":[{"pos":[0,130],"content":"A <xref href=\"System.Globalization.CultureInfo\"></xref> that contains data about the user's machine locale. The default is `null`.","nodes":[{"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Globalization.CultureInfo\"&gt;&lt;/xref&gt;</ph> that contains data about the user's machine locale.","pos":[0,107],"source":"A <xref href=\"System.Globalization.CultureInfo\"></xref> that contains data about the user's machine locale."},{"content":"The default is <ph id=\"ph1\">`null`</ph>.","pos":[108,130],"source":" The default is `null`."}]}],"pos":[132661,132792],"yaml":true},{"content":"Merges an array of <xref href=\"System.Data.DataRow\"></xref> objects into the current <xref href=\"System.Data.DataSet\"></xref>.","nodes":[{"pos":[0,126],"content":"Merges an array of <ph id=\"ph1\">&lt;xref href=\"System.Data.DataRow\"&gt;&lt;/xref&gt;</ph> objects into the current <ph id=\"ph2\">&lt;xref href=\"System.Data.DataSet\"&gt;&lt;/xref&gt;</ph>.","source":"Merges an array of <xref href=\"System.Data.DataRow\"></xref> objects into the current <xref href=\"System.Data.DataSet\"></xref>."}],"pos":[133994,134121],"yaml":true},{"content":"The <xref:System.Data.DataSet.Merge%2A> method is used to merge two <xref:System.Data.DataSet> objects that have largely similar schemas. A merge is typically used on a client application to incorporate the latest changes from a data source into an existing <xref:System.Data.DataSet>. This allows the client application to have a refreshed <xref:System.Data.DataSet> with the latest data from the data source.  \n  \n The <xref:System.Data.DataSet.Merge%2A> method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing <xref:System.Data.DataSet>.  \n  \n In a client application, it is common to have a single button that the user can click that gathers the changed data and validates it before sending it back to a middle-tier component. In this scenario, the <xref:System.Data.DataSet.GetChanges%2A> method is first invoked. That method returns a second <xref:System.Data.DataSet> optimized for validating and merging. This second <xref:System.Data.DataSet> object contains only the <xref:System.Data.DataTable> and <xref:System.Data.DataRow> objects that were changed, resulting in a subset of the original <xref:System.Data.DataSet>. This subset is generally smaller and thus more efficiently passed back to a middle-tier component. The middle-tier component then updates the original data source with the changes through stored procedures. The middle tier can then send back either a new <xref:System.Data.DataSet> that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source. (For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned <xref:System.Data.DataSet> can be merged back into the client application's original <xref:System.Data.DataSet> with the <xref:System.Data.DataSet.Merge%2A> method.  \n  \n When the <xref:System.Data.DataSet.Merge%2A> method is called, the schemas of the two <xref:System.Data.DataSet> objects are compared because it is possible that the schemas may have been changed. For example, in a business-to-business scenario, new columns may have been added to an XML schema by an automated process. If the source <xref:System.Data.DataSet> contains schema elements (added <xref:System.Data.DataColumn> objects) that are missing in the target, the schema elements can be added to the target by setting the `missingSchemaAction` argument to `MissingSchemaAction.Add`. In that case, the merged <xref:System.Data.DataSet> contains the added schema and data.  \n  \n After merging schemas, the data is merged.  \n  \n When merging a new source <xref:System.Data.DataSet> into the target, any source rows with a <xref:System.Data.DataRowState> value of `Unchanged`, `Modified`, or `Deleted` are matched to target rows with the same primary key values. Source rows with a <xref:System.Data.DataRowState> value of `Added` are matched to new target rows with the same primary key values as the new source rows.  \n  \n During a merge, constraints are disabled. If any constraints cannot be enabled at the end of a merge, a <xref:System.Data.ConstraintException> is generated and the merged data is retained while the constraints are disabled. In this case, the <xref:System.Data.DataSet.EnforceConstraints%2A> property is set to `false`, and all rows that are invalid are marked in error. The errors must be resolved before attempting to reset the <xref:System.Data.DataSet.EnforceConstraints%2A> property to `true`.","nodes":[{"pos":[0,410],"content":"The <xref:System.Data.DataSet.Merge%2A> method is used to merge two <xref:System.Data.DataSet> objects that have largely similar schemas. A merge is typically used on a client application to incorporate the latest changes from a data source into an existing <xref:System.Data.DataSet>. This allows the client application to have a refreshed <xref:System.Data.DataSet> with the latest data from the data source.","nodes":[{"content":"The <xref:System.Data.DataSet.Merge%2A> method is used to merge two <xref:System.Data.DataSet> objects that have largely similar schemas. A merge is typically used on a client application to incorporate the latest changes from a data source into an existing <xref:System.Data.DataSet>. This allows the client application to have a refreshed <xref:System.Data.DataSet> with the latest data from the data source.","pos":[0,410],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Data.DataSet.Merge%2A&gt;</ph> method is used to merge two <ph id=\"ph2\">&lt;xref:System.Data.DataSet&gt;</ph> objects that have largely similar schemas.","pos":[0,137],"source":"The <xref:System.Data.DataSet.Merge%2A> method is used to merge two <xref:System.Data.DataSet> objects that have largely similar schemas."},{"content":"A merge is typically used on a client application to incorporate the latest changes from a data source into an existing <ph id=\"ph1\">&lt;xref:System.Data.DataSet&gt;</ph>.","pos":[138,285],"source":" A merge is typically used on a client application to incorporate the latest changes from a data source into an existing <xref:System.Data.DataSet>."},{"content":"This allows the client application to have a refreshed <ph id=\"ph1\">&lt;xref:System.Data.DataSet&gt;</ph> with the latest data from the data source.","pos":[286,410],"source":" This allows the client application to have a refreshed <xref:System.Data.DataSet> with the latest data from the data source."}]}]},{"pos":[417,680],"content":"The <xref:System.Data.DataSet.Merge%2A> method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing <xref:System.Data.DataSet>.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Data.DataSet.Merge%2A&gt;</ph> method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing <ph id=\"ph2\">&lt;xref:System.Data.DataSet&gt;</ph>.","pos":[0,263],"source":"The <xref:System.Data.DataSet.Merge%2A> method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing <xref:System.Data.DataSet>."}]},{"pos":[687,2095],"content":"In a client application, it is common to have a single button that the user can click that gathers the changed data and validates it before sending it back to a middle-tier component. In this scenario, the <xref:System.Data.DataSet.GetChanges%2A> method is first invoked. That method returns a second <xref:System.Data.DataSet> optimized for validating and merging. This second <xref:System.Data.DataSet> object contains only the <xref:System.Data.DataTable> and <xref:System.Data.DataRow> objects that were changed, resulting in a subset of the original <xref:System.Data.DataSet>. This subset is generally smaller and thus more efficiently passed back to a middle-tier component. The middle-tier component then updates the original data source with the changes through stored procedures. The middle tier can then send back either a new <xref:System.Data.DataSet> that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source. (For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned <xref:System.Data.DataSet> can be merged back into the client application's original <xref:System.Data.DataSet> with the <xref:System.Data.DataSet.Merge%2A> method.","nodes":[{"content":"In a client application, it is common to have a single button that the user can click that gathers the changed data and validates it before sending it back to a middle-tier component. In this scenario, the <xref:System.Data.DataSet.GetChanges%2A> method is first invoked. That method returns a second <xref:System.Data.DataSet> optimized for validating and merging. This second <xref:System.Data.DataSet> object contains only the <xref:System.Data.DataTable> and <xref:System.Data.DataRow> objects that were changed, resulting in a subset of the original <xref:System.Data.DataSet>. This subset is generally smaller and thus more efficiently passed back to a middle-tier component. The middle-tier component then updates the original data source with the changes through stored procedures. The middle tier can then send back either a new <xref:System.Data.DataSet> that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source. (For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned <xref:System.Data.DataSet> can be merged back into the client application's original <xref:System.Data.DataSet> with the <xref:System.Data.DataSet.Merge%2A> method.","pos":[0,1408],"nodes":[{"content":"In a client application, it is common to have a single button that the user can click that gathers the changed data and validates it before sending it back to a middle-tier component.","pos":[0,183]},{"content":"In this scenario, the <ph id=\"ph1\">&lt;xref:System.Data.DataSet.GetChanges%2A&gt;</ph> method is first invoked.","pos":[184,271],"source":" In this scenario, the <xref:System.Data.DataSet.GetChanges%2A> method is first invoked."},{"content":"That method returns a second <ph id=\"ph1\">&lt;xref:System.Data.DataSet&gt;</ph> optimized for validating and merging.","pos":[272,365],"source":" That method returns a second <xref:System.Data.DataSet> optimized for validating and merging."},{"content":"This second <ph id=\"ph1\">&lt;xref:System.Data.DataSet&gt;</ph> object contains only the <ph id=\"ph2\">&lt;xref:System.Data.DataTable&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.Data.DataRow&gt;</ph> objects that were changed, resulting in a subset of the original <ph id=\"ph4\">&lt;xref:System.Data.DataSet&gt;</ph>.","pos":[366,582],"source":" This second <xref:System.Data.DataSet> object contains only the <xref:System.Data.DataTable> and <xref:System.Data.DataRow> objects that were changed, resulting in a subset of the original <xref:System.Data.DataSet>."},{"content":"This subset is generally smaller and thus more efficiently passed back to a middle-tier component.","pos":[583,681]},{"content":"The middle-tier component then updates the original data source with the changes through stored procedures.","pos":[682,789]},{"content":"The middle tier can then send back either a new <ph id=\"ph1\">&lt;xref:System.Data.DataSet&gt;</ph> that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source.","pos":[790,1068],"source":" The middle tier can then send back either a new <xref:System.Data.DataSet> that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source."},{"content":"(For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned <ph id=\"ph1\">&lt;xref:System.Data.DataSet&gt;</ph> can be merged back into the client application's original <ph id=\"ph2\">&lt;xref:System.Data.DataSet&gt;</ph> with the <ph id=\"ph3\">&lt;xref:System.Data.DataSet.Merge%2A&gt;</ph> method.","pos":[1069,1408],"source":" (For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned <xref:System.Data.DataSet> can be merged back into the client application's original <xref:System.Data.DataSet> with the <xref:System.Data.DataSet.Merge%2A> method."}]}]},{"pos":[2102,2776],"content":"When the <xref:System.Data.DataSet.Merge%2A> method is called, the schemas of the two <xref:System.Data.DataSet> objects are compared because it is possible that the schemas may have been changed. For example, in a business-to-business scenario, new columns may have been added to an XML schema by an automated process. If the source <xref:System.Data.DataSet> contains schema elements (added <xref:System.Data.DataColumn> objects) that are missing in the target, the schema elements can be added to the target by setting the `missingSchemaAction` argument to `MissingSchemaAction.Add`. In that case, the merged <xref:System.Data.DataSet> contains the added schema and data.","nodes":[{"content":"When the <ph id=\"ph1\">&lt;xref:System.Data.DataSet.Merge%2A&gt;</ph> method is called, the schemas of the two <ph id=\"ph2\">&lt;xref:System.Data.DataSet&gt;</ph> objects are compared because it is possible that the schemas may have been changed.","pos":[0,196],"source":"When the <xref:System.Data.DataSet.Merge%2A> method is called, the schemas of the two <xref:System.Data.DataSet> objects are compared because it is possible that the schemas may have been changed."},{"content":"For example, in a business-to-business scenario, new columns may have been added to an XML schema by an automated process.","pos":[197,319]},{"content":"If the source <ph id=\"ph1\">&lt;xref:System.Data.DataSet&gt;</ph> contains schema elements (added <ph id=\"ph2\">&lt;xref:System.Data.DataColumn&gt;</ph> objects) that are missing in the target, the schema elements can be added to the target by setting the <ph id=\"ph3\">`missingSchemaAction`</ph> argument to <ph id=\"ph4\">`MissingSchemaAction.Add`</ph>.","pos":[320,586],"source":" If the source <xref:System.Data.DataSet> contains schema elements (added <xref:System.Data.DataColumn> objects) that are missing in the target, the schema elements can be added to the target by setting the `missingSchemaAction` argument to `MissingSchemaAction.Add`."},{"content":"In that case, the merged <ph id=\"ph1\">&lt;xref:System.Data.DataSet&gt;</ph> contains the added schema and data.","pos":[587,674],"source":" In that case, the merged <xref:System.Data.DataSet> contains the added schema and data."}]},{"pos":[2783,2825],"content":"After merging schemas, the data is merged.","nodes":[{"content":"After merging schemas, the data is merged.","pos":[0,42]}]},{"pos":[2832,3220],"content":"When merging a new source <xref:System.Data.DataSet> into the target, any source rows with a <xref:System.Data.DataRowState> value of `Unchanged`, `Modified`, or `Deleted` are matched to target rows with the same primary key values. Source rows with a <xref:System.Data.DataRowState> value of `Added` are matched to new target rows with the same primary key values as the new source rows.","nodes":[{"content":"When merging a new source <ph id=\"ph1\">&lt;xref:System.Data.DataSet&gt;</ph> into the target, any source rows with a <ph id=\"ph2\">&lt;xref:System.Data.DataRowState&gt;</ph> value of <ph id=\"ph3\">`Unchanged`</ph>, <ph id=\"ph4\">`Modified`</ph>, or <ph id=\"ph5\">`Deleted`</ph> are matched to target rows with the same primary key values.","pos":[0,232],"source":"When merging a new source <xref:System.Data.DataSet> into the target, any source rows with a <xref:System.Data.DataRowState> value of `Unchanged`, `Modified`, or `Deleted` are matched to target rows with the same primary key values."},{"content":"Source rows with a <ph id=\"ph1\">&lt;xref:System.Data.DataRowState&gt;</ph> value of <ph id=\"ph2\">`Added`</ph> are matched to new target rows with the same primary key values as the new source rows.","pos":[233,388],"source":" Source rows with a <xref:System.Data.DataRowState> value of `Added` are matched to new target rows with the same primary key values as the new source rows."}]},{"pos":[3227,3724],"content":"During a merge, constraints are disabled. If any constraints cannot be enabled at the end of a merge, a <xref:System.Data.ConstraintException> is generated and the merged data is retained while the constraints are disabled. In this case, the <xref:System.Data.DataSet.EnforceConstraints%2A> property is set to `false`, and all rows that are invalid are marked in error. The errors must be resolved before attempting to reset the <xref:System.Data.DataSet.EnforceConstraints%2A> property to `true`.","nodes":[{"content":"During a merge, constraints are disabled.","pos":[0,41]},{"content":"If any constraints cannot be enabled at the end of a merge, a <ph id=\"ph1\">&lt;xref:System.Data.ConstraintException&gt;</ph> is generated and the merged data is retained while the constraints are disabled.","pos":[42,223],"source":" If any constraints cannot be enabled at the end of a merge, a <xref:System.Data.ConstraintException> is generated and the merged data is retained while the constraints are disabled."},{"content":"In this case, the <ph id=\"ph1\">&lt;xref:System.Data.DataSet.EnforceConstraints%2A&gt;</ph> property is set to <ph id=\"ph2\">`false`</ph>, and all rows that are invalid are marked in error.","pos":[224,369],"source":" In this case, the <xref:System.Data.DataSet.EnforceConstraints%2A> property is set to `false`, and all rows that are invalid are marked in error."},{"content":"The errors must be resolved before attempting to reset the <ph id=\"ph1\">&lt;xref:System.Data.DataSet.EnforceConstraints%2A&gt;</ph> property to <ph id=\"ph2\">`true`</ph>.","pos":[370,497],"source":" The errors must be resolved before attempting to reset the <xref:System.Data.DataSet.EnforceConstraints%2A> property to `true`."}]}],"pos":[134132,137871],"yaml":true,"extradata":"MT"},{"content":"The array of `DataRow` objects to be merged into the `DataSet`.","nodes":[{"pos":[0,63],"content":"The array of <ph id=\"ph1\">`DataRow`</ph> objects to be merged into the <ph id=\"ph2\">`DataSet`</ph>.","source":"The array of `DataRow` objects to be merged into the `DataSet`."}],"pos":[138026,138090],"yaml":true},{"content":"Merges a specified <xref href=\"System.Data.DataSet\"></xref> and its schema into the current `DataSet`.","nodes":[{"pos":[0,102],"content":"Merges a specified <ph id=\"ph1\">&lt;xref href=\"System.Data.DataSet\"&gt;&lt;/xref&gt;</ph> and its schema into the current <ph id=\"ph2\">`DataSet`</ph>.","source":"Merges a specified <xref href=\"System.Data.DataSet\"></xref> and its schema into the current `DataSet`."}],"pos":[139279,139382],"yaml":true},{"content":"The <xref:System.Data.DataSet.Merge%2A> method is used to merge two <xref:System.Data.DataSet> objects that have largely similar schemas. A merge is typically used on a client application to incorporate the latest changes from a data source into an existing <xref:System.Data.DataSet>. This allows the client application to have a refreshed <xref:System.Data.DataSet> with the latest data from the data source.  \n  \n The <xref:System.Data.DataSet.Merge%2A> method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing <xref:System.Data.DataSet>.  \n  \n In a client application, it is common to have a single button that the user can click that gathers the changed data and validates it before sending it back to a middle-tier component. In this scenario, the <xref:System.Data.DataSet.GetChanges%2A> method is first invoked. That method returns a second <xref:System.Data.DataSet> optimized for validating and merging. This second <xref:System.Data.DataSet> object contains only the <xref:System.Data.DataTable> and <xref:System.Data.DataRow> objects that were changed, resulting in a subset of the original <xref:System.Data.DataSet>. This subset is generally smaller, and thus more efficiently passed back to a middle-tier component. The middle-tier component then updates the original data source with the changes through stored procedures. The middle tier can then send back either a new <xref:System.Data.DataSet> that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source. (For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned <xref:System.Data.DataSet> can be merged back into the client application's original <xref:System.Data.DataSet> with the <xref:System.Data.DataSet.Merge%2A> method.  \n  \n When the <xref:System.Data.DataSet.Merge%2A> method is called, the schemas of the two <xref:System.Data.DataSet> objects are compared because it is possible that the schemas may have been changed. For example, in a business-to-business scenario, new columns may have been added to an XML schema by an automated process. If the source <xref:System.Data.DataSet> contains schema elements (added <xref:System.Data.DataColumn> objects) that are missing in the target, the schema elements can be added to the target by setting the `missingSchemaAction` argument to `MissingSchemaAction.Add`. In that case, the merged <xref:System.Data.DataSet> contains the added schema and data.  \n  \n After merging schemas, the data is merged.  \n  \n When merging a new source <xref:System.Data.DataSet> into the target, any source rows with a <xref:System.Data.DataRowState> value of `Unchanged`, `Modified`, or `Deleted` are matched to target rows with the same primary key values. Source rows with a `DataRowState` value of `Added` are matched to new target rows with the same primary key values as the new source rows.  \n  \n During a merge, constraints are disabled. If any constraints cannot be enabled at the end of merge, a <xref:System.Data.ConstraintException> is generated and the merged data is retained while the constraints are disabled. In this case, the <xref:System.Data.DataSet.EnforceConstraints%2A> property is set to `false`, and all rows that are invalid are marked in error. The errors must be resolved before attempting to reset the <xref:System.Data.DataSet.EnforceConstraints%2A> property to `true`.","nodes":[{"pos":[0,410],"content":"The <xref:System.Data.DataSet.Merge%2A> method is used to merge two <xref:System.Data.DataSet> objects that have largely similar schemas. A merge is typically used on a client application to incorporate the latest changes from a data source into an existing <xref:System.Data.DataSet>. This allows the client application to have a refreshed <xref:System.Data.DataSet> with the latest data from the data source.","nodes":[{"content":"The <xref:System.Data.DataSet.Merge%2A> method is used to merge two <xref:System.Data.DataSet> objects that have largely similar schemas. A merge is typically used on a client application to incorporate the latest changes from a data source into an existing <xref:System.Data.DataSet>. This allows the client application to have a refreshed <xref:System.Data.DataSet> with the latest data from the data source.","pos":[0,410],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Data.DataSet.Merge%2A&gt;</ph> method is used to merge two <ph id=\"ph2\">&lt;xref:System.Data.DataSet&gt;</ph> objects that have largely similar schemas.","pos":[0,137],"source":"The <xref:System.Data.DataSet.Merge%2A> method is used to merge two <xref:System.Data.DataSet> objects that have largely similar schemas."},{"content":"A merge is typically used on a client application to incorporate the latest changes from a data source into an existing <ph id=\"ph1\">&lt;xref:System.Data.DataSet&gt;</ph>.","pos":[138,285],"source":" A merge is typically used on a client application to incorporate the latest changes from a data source into an existing <xref:System.Data.DataSet>."},{"content":"This allows the client application to have a refreshed <ph id=\"ph1\">&lt;xref:System.Data.DataSet&gt;</ph> with the latest data from the data source.","pos":[286,410],"source":" This allows the client application to have a refreshed <xref:System.Data.DataSet> with the latest data from the data source."}]}]},{"pos":[417,680],"content":"The <xref:System.Data.DataSet.Merge%2A> method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing <xref:System.Data.DataSet>.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Data.DataSet.Merge%2A&gt;</ph> method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing <ph id=\"ph2\">&lt;xref:System.Data.DataSet&gt;</ph>.","pos":[0,263],"source":"The <xref:System.Data.DataSet.Merge%2A> method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing <xref:System.Data.DataSet>."}]},{"pos":[687,2096],"content":"In a client application, it is common to have a single button that the user can click that gathers the changed data and validates it before sending it back to a middle-tier component. In this scenario, the <xref:System.Data.DataSet.GetChanges%2A> method is first invoked. That method returns a second <xref:System.Data.DataSet> optimized for validating and merging. This second <xref:System.Data.DataSet> object contains only the <xref:System.Data.DataTable> and <xref:System.Data.DataRow> objects that were changed, resulting in a subset of the original <xref:System.Data.DataSet>. This subset is generally smaller, and thus more efficiently passed back to a middle-tier component. The middle-tier component then updates the original data source with the changes through stored procedures. The middle tier can then send back either a new <xref:System.Data.DataSet> that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source. (For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned <xref:System.Data.DataSet> can be merged back into the client application's original <xref:System.Data.DataSet> with the <xref:System.Data.DataSet.Merge%2A> method.","nodes":[{"content":"In a client application, it is common to have a single button that the user can click that gathers the changed data and validates it before sending it back to a middle-tier component. In this scenario, the <xref:System.Data.DataSet.GetChanges%2A> method is first invoked. That method returns a second <xref:System.Data.DataSet> optimized for validating and merging. This second <xref:System.Data.DataSet> object contains only the <xref:System.Data.DataTable> and <xref:System.Data.DataRow> objects that were changed, resulting in a subset of the original <xref:System.Data.DataSet>. This subset is generally smaller, and thus more efficiently passed back to a middle-tier component. The middle-tier component then updates the original data source with the changes through stored procedures. The middle tier can then send back either a new <xref:System.Data.DataSet> that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source. (For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned <xref:System.Data.DataSet> can be merged back into the client application's original <xref:System.Data.DataSet> with the <xref:System.Data.DataSet.Merge%2A> method.","pos":[0,1409],"nodes":[{"content":"In a client application, it is common to have a single button that the user can click that gathers the changed data and validates it before sending it back to a middle-tier component.","pos":[0,183]},{"content":"In this scenario, the <ph id=\"ph1\">&lt;xref:System.Data.DataSet.GetChanges%2A&gt;</ph> method is first invoked.","pos":[184,271],"source":" In this scenario, the <xref:System.Data.DataSet.GetChanges%2A> method is first invoked."},{"content":"That method returns a second <ph id=\"ph1\">&lt;xref:System.Data.DataSet&gt;</ph> optimized for validating and merging.","pos":[272,365],"source":" That method returns a second <xref:System.Data.DataSet> optimized for validating and merging."},{"content":"This second <ph id=\"ph1\">&lt;xref:System.Data.DataSet&gt;</ph> object contains only the <ph id=\"ph2\">&lt;xref:System.Data.DataTable&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.Data.DataRow&gt;</ph> objects that were changed, resulting in a subset of the original <ph id=\"ph4\">&lt;xref:System.Data.DataSet&gt;</ph>.","pos":[366,582],"source":" This second <xref:System.Data.DataSet> object contains only the <xref:System.Data.DataTable> and <xref:System.Data.DataRow> objects that were changed, resulting in a subset of the original <xref:System.Data.DataSet>."},{"content":"This subset is generally smaller, and thus more efficiently passed back to a middle-tier component.","pos":[583,682]},{"content":"The middle-tier component then updates the original data source with the changes through stored procedures.","pos":[683,790]},{"content":"The middle tier can then send back either a new <ph id=\"ph1\">&lt;xref:System.Data.DataSet&gt;</ph> that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source.","pos":[791,1069],"source":" The middle tier can then send back either a new <xref:System.Data.DataSet> that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source."},{"content":"(For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned <ph id=\"ph1\">&lt;xref:System.Data.DataSet&gt;</ph> can be merged back into the client application's original <ph id=\"ph2\">&lt;xref:System.Data.DataSet&gt;</ph> with the <ph id=\"ph3\">&lt;xref:System.Data.DataSet.Merge%2A&gt;</ph> method.","pos":[1070,1409],"source":" (For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned <xref:System.Data.DataSet> can be merged back into the client application's original <xref:System.Data.DataSet> with the <xref:System.Data.DataSet.Merge%2A> method."}]}]},{"pos":[2103,2777],"content":"When the <xref:System.Data.DataSet.Merge%2A> method is called, the schemas of the two <xref:System.Data.DataSet> objects are compared because it is possible that the schemas may have been changed. For example, in a business-to-business scenario, new columns may have been added to an XML schema by an automated process. If the source <xref:System.Data.DataSet> contains schema elements (added <xref:System.Data.DataColumn> objects) that are missing in the target, the schema elements can be added to the target by setting the `missingSchemaAction` argument to `MissingSchemaAction.Add`. In that case, the merged <xref:System.Data.DataSet> contains the added schema and data.","nodes":[{"content":"When the <ph id=\"ph1\">&lt;xref:System.Data.DataSet.Merge%2A&gt;</ph> method is called, the schemas of the two <ph id=\"ph2\">&lt;xref:System.Data.DataSet&gt;</ph> objects are compared because it is possible that the schemas may have been changed.","pos":[0,196],"source":"When the <xref:System.Data.DataSet.Merge%2A> method is called, the schemas of the two <xref:System.Data.DataSet> objects are compared because it is possible that the schemas may have been changed."},{"content":"For example, in a business-to-business scenario, new columns may have been added to an XML schema by an automated process.","pos":[197,319]},{"content":"If the source <ph id=\"ph1\">&lt;xref:System.Data.DataSet&gt;</ph> contains schema elements (added <ph id=\"ph2\">&lt;xref:System.Data.DataColumn&gt;</ph> objects) that are missing in the target, the schema elements can be added to the target by setting the <ph id=\"ph3\">`missingSchemaAction`</ph> argument to <ph id=\"ph4\">`MissingSchemaAction.Add`</ph>.","pos":[320,586],"source":" If the source <xref:System.Data.DataSet> contains schema elements (added <xref:System.Data.DataColumn> objects) that are missing in the target, the schema elements can be added to the target by setting the `missingSchemaAction` argument to `MissingSchemaAction.Add`."},{"content":"In that case, the merged <ph id=\"ph1\">&lt;xref:System.Data.DataSet&gt;</ph> contains the added schema and data.","pos":[587,674],"source":" In that case, the merged <xref:System.Data.DataSet> contains the added schema and data."}]},{"pos":[2784,2826],"content":"After merging schemas, the data is merged.","nodes":[{"content":"After merging schemas, the data is merged.","pos":[0,42]}]},{"pos":[2833,3204],"content":"When merging a new source <xref:System.Data.DataSet> into the target, any source rows with a <xref:System.Data.DataRowState> value of `Unchanged`, `Modified`, or `Deleted` are matched to target rows with the same primary key values. Source rows with a `DataRowState` value of `Added` are matched to new target rows with the same primary key values as the new source rows.","nodes":[{"content":"When merging a new source <ph id=\"ph1\">&lt;xref:System.Data.DataSet&gt;</ph> into the target, any source rows with a <ph id=\"ph2\">&lt;xref:System.Data.DataRowState&gt;</ph> value of <ph id=\"ph3\">`Unchanged`</ph>, <ph id=\"ph4\">`Modified`</ph>, or <ph id=\"ph5\">`Deleted`</ph> are matched to target rows with the same primary key values.","pos":[0,232],"source":"When merging a new source <xref:System.Data.DataSet> into the target, any source rows with a <xref:System.Data.DataRowState> value of `Unchanged`, `Modified`, or `Deleted` are matched to target rows with the same primary key values."},{"content":"Source rows with a <ph id=\"ph1\">`DataRowState`</ph> value of <ph id=\"ph2\">`Added`</ph> are matched to new target rows with the same primary key values as the new source rows.","pos":[233,371],"source":" Source rows with a `DataRowState` value of `Added` are matched to new target rows with the same primary key values as the new source rows."}]},{"pos":[3211,3706],"content":"During a merge, constraints are disabled. If any constraints cannot be enabled at the end of merge, a <xref:System.Data.ConstraintException> is generated and the merged data is retained while the constraints are disabled. In this case, the <xref:System.Data.DataSet.EnforceConstraints%2A> property is set to `false`, and all rows that are invalid are marked in error. The errors must be resolved before attempting to reset the <xref:System.Data.DataSet.EnforceConstraints%2A> property to `true`.","nodes":[{"content":"During a merge, constraints are disabled.","pos":[0,41]},{"content":"If any constraints cannot be enabled at the end of merge, a <ph id=\"ph1\">&lt;xref:System.Data.ConstraintException&gt;</ph> is generated and the merged data is retained while the constraints are disabled.","pos":[42,221],"source":" If any constraints cannot be enabled at the end of merge, a <xref:System.Data.ConstraintException> is generated and the merged data is retained while the constraints are disabled."},{"content":"In this case, the <ph id=\"ph1\">&lt;xref:System.Data.DataSet.EnforceConstraints%2A&gt;</ph> property is set to <ph id=\"ph2\">`false`</ph>, and all rows that are invalid are marked in error.","pos":[222,367],"source":" In this case, the <xref:System.Data.DataSet.EnforceConstraints%2A> property is set to `false`, and all rows that are invalid are marked in error."},{"content":"The errors must be resolved before attempting to reset the <ph id=\"ph1\">&lt;xref:System.Data.DataSet.EnforceConstraints%2A&gt;</ph> property to <ph id=\"ph2\">`true`</ph>.","pos":[368,495],"source":" The errors must be resolved before attempting to reset the <xref:System.Data.DataSet.EnforceConstraints%2A> property to `true`."}]}],"pos":[139393,143114],"yaml":true,"extradata":"MT"},{"content":"The `DataSet` whose data and schema will be merged.","nodes":[{"pos":[0,51],"content":"The <ph id=\"ph1\">`DataSet`</ph> whose data and schema will be merged.","source":"The `DataSet` whose data and schema will be merged."}],"pos":[143773,143825],"yaml":true},{"content":"One or more constraints cannot be enabled.","nodes":[{"pos":[0,42],"content":"One or more constraints cannot be enabled.","nodes":[{"content":"One or more constraints cannot be enabled.","pos":[0,42]}]}],"pos":[143986,144029],"yaml":true},{"content":"The <code>dataSet</code> is `null`.","nodes":[{"pos":[0,35],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">dataSet</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">`null`</ph>.","source":"The <code>dataSet</code> is `null`."}],"pos":[144131,144167],"yaml":true},{"content":"Merges a specified <xref href=\"System.Data.DataTable\"></xref> and its schema into the current <xref href=\"System.Data.DataSet\"></xref>.","nodes":[{"pos":[0,135],"content":"Merges a specified <ph id=\"ph1\">&lt;xref href=\"System.Data.DataTable\"&gt;&lt;/xref&gt;</ph> and its schema into the current <ph id=\"ph2\">&lt;xref href=\"System.Data.DataSet\"&gt;&lt;/xref&gt;</ph>.","source":"Merges a specified <xref href=\"System.Data.DataTable\"></xref> and its schema into the current <xref href=\"System.Data.DataSet\"></xref>."}],"pos":[145312,145448],"yaml":true},{"content":"The <xref:System.Data.DataSet.Merge%2A> method is used to merge two <xref:System.Data.DataSet> objects that have largely similar schemas. A merge is typically used on a client application to incorporate the latest changes from a data source into an existing <xref:System.Data.DataSet>. This allows the client application to have a refreshed <xref:System.Data.DataSet> with the latest data from the data source.  \n  \n The <xref:System.Data.DataSet.Merge%2A> method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing <xref:System.Data.DataSet>.  \n  \n In a client application, it is common to have a single button that the user can click that gathers the changed data and validates it before sending it back to a middle-tier component. In this scenario, the <xref:System.Data.DataSet.GetChanges%2A> method is first invoked. That method returns a second <xref:System.Data.DataSet> optimized for validating and merging. This second <xref:System.Data.DataSet> object contains only the <xref:System.Data.DataTable> and <xref:System.Data.DataRow> objects that were changed, resulting in a subset of the original <xref:System.Data.DataSet>. This subset is generally smaller, and thus more efficiently passed back to a middle-tier component. The middle-tier component then updates the original data source with the changes through stored procedures. The middle tier can then send back either a new <xref:System.Data.DataSet> that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source. (For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned <xref:System.Data.DataSet> can be merged back into the client application's original <xref:System.Data.DataSet> with the <xref:System.Data.DataSet.Merge%2A> method.  \n  \n When the <xref:System.Data.DataSet.Merge%2A> method is called, the schemas of the two <xref:System.Data.DataSet> objects are compared because it is possible that the schemas may have been changed. For example, in a business-to-business scenario, new columns may have been added to an XML schema by an automated process. If the source <xref:System.Data.DataSet> contains schema elements (added <xref:System.Data.DataColumn> objects) that are missing in the target, the schema elements can be added to the target by setting the `missingSchemaAction` argument to `MissingSchemaAction.Add`. In that case, the merged <xref:System.Data.DataSet> contains the added schema and data.  \n  \n After merging schemas, the data is merged.  \n  \n When merging a new source <xref:System.Data.DataSet> into the target, any source rows with a <xref:System.Data.DataRowState> value of `Unchanged`, `Modified`, or `Deleted` are matched to target rows with the same primary key values. Source rows with a `DataRowState` value of `Added` are matched to new target rows with the same primary key values as the new source rows.  \n  \n During a merge, constraints are disabled. If any constraints cannot be enabled at the end of merge, a <xref:System.Data.ConstraintException> is generated and the merged data is retained while the constraints are disabled. In this case, the <xref:System.Data.DataSet.EnforceConstraints%2A> property is set to `false`, and all rows that are invalid are marked in error. The errors must be resolved before attempting to reset the <xref:System.Data.DataSet.EnforceConstraints%2A> property to `true`.","nodes":[{"pos":[0,410],"content":"The <xref:System.Data.DataSet.Merge%2A> method is used to merge two <xref:System.Data.DataSet> objects that have largely similar schemas. A merge is typically used on a client application to incorporate the latest changes from a data source into an existing <xref:System.Data.DataSet>. This allows the client application to have a refreshed <xref:System.Data.DataSet> with the latest data from the data source.","nodes":[{"content":"The <xref:System.Data.DataSet.Merge%2A> method is used to merge two <xref:System.Data.DataSet> objects that have largely similar schemas. A merge is typically used on a client application to incorporate the latest changes from a data source into an existing <xref:System.Data.DataSet>. This allows the client application to have a refreshed <xref:System.Data.DataSet> with the latest data from the data source.","pos":[0,410],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Data.DataSet.Merge%2A&gt;</ph> method is used to merge two <ph id=\"ph2\">&lt;xref:System.Data.DataSet&gt;</ph> objects that have largely similar schemas.","pos":[0,137],"source":"The <xref:System.Data.DataSet.Merge%2A> method is used to merge two <xref:System.Data.DataSet> objects that have largely similar schemas."},{"content":"A merge is typically used on a client application to incorporate the latest changes from a data source into an existing <ph id=\"ph1\">&lt;xref:System.Data.DataSet&gt;</ph>.","pos":[138,285],"source":" A merge is typically used on a client application to incorporate the latest changes from a data source into an existing <xref:System.Data.DataSet>."},{"content":"This allows the client application to have a refreshed <ph id=\"ph1\">&lt;xref:System.Data.DataSet&gt;</ph> with the latest data from the data source.","pos":[286,410],"source":" This allows the client application to have a refreshed <xref:System.Data.DataSet> with the latest data from the data source."}]}]},{"pos":[417,680],"content":"The <xref:System.Data.DataSet.Merge%2A> method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing <xref:System.Data.DataSet>.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Data.DataSet.Merge%2A&gt;</ph> method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing <ph id=\"ph2\">&lt;xref:System.Data.DataSet&gt;</ph>.","pos":[0,263],"source":"The <xref:System.Data.DataSet.Merge%2A> method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing <xref:System.Data.DataSet>."}]},{"pos":[687,2096],"content":"In a client application, it is common to have a single button that the user can click that gathers the changed data and validates it before sending it back to a middle-tier component. In this scenario, the <xref:System.Data.DataSet.GetChanges%2A> method is first invoked. That method returns a second <xref:System.Data.DataSet> optimized for validating and merging. This second <xref:System.Data.DataSet> object contains only the <xref:System.Data.DataTable> and <xref:System.Data.DataRow> objects that were changed, resulting in a subset of the original <xref:System.Data.DataSet>. This subset is generally smaller, and thus more efficiently passed back to a middle-tier component. The middle-tier component then updates the original data source with the changes through stored procedures. The middle tier can then send back either a new <xref:System.Data.DataSet> that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source. (For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned <xref:System.Data.DataSet> can be merged back into the client application's original <xref:System.Data.DataSet> with the <xref:System.Data.DataSet.Merge%2A> method.","nodes":[{"content":"In a client application, it is common to have a single button that the user can click that gathers the changed data and validates it before sending it back to a middle-tier component. In this scenario, the <xref:System.Data.DataSet.GetChanges%2A> method is first invoked. That method returns a second <xref:System.Data.DataSet> optimized for validating and merging. This second <xref:System.Data.DataSet> object contains only the <xref:System.Data.DataTable> and <xref:System.Data.DataRow> objects that were changed, resulting in a subset of the original <xref:System.Data.DataSet>. This subset is generally smaller, and thus more efficiently passed back to a middle-tier component. The middle-tier component then updates the original data source with the changes through stored procedures. The middle tier can then send back either a new <xref:System.Data.DataSet> that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source. (For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned <xref:System.Data.DataSet> can be merged back into the client application's original <xref:System.Data.DataSet> with the <xref:System.Data.DataSet.Merge%2A> method.","pos":[0,1409],"nodes":[{"content":"In a client application, it is common to have a single button that the user can click that gathers the changed data and validates it before sending it back to a middle-tier component.","pos":[0,183]},{"content":"In this scenario, the <ph id=\"ph1\">&lt;xref:System.Data.DataSet.GetChanges%2A&gt;</ph> method is first invoked.","pos":[184,271],"source":" In this scenario, the <xref:System.Data.DataSet.GetChanges%2A> method is first invoked."},{"content":"That method returns a second <ph id=\"ph1\">&lt;xref:System.Data.DataSet&gt;</ph> optimized for validating and merging.","pos":[272,365],"source":" That method returns a second <xref:System.Data.DataSet> optimized for validating and merging."},{"content":"This second <ph id=\"ph1\">&lt;xref:System.Data.DataSet&gt;</ph> object contains only the <ph id=\"ph2\">&lt;xref:System.Data.DataTable&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.Data.DataRow&gt;</ph> objects that were changed, resulting in a subset of the original <ph id=\"ph4\">&lt;xref:System.Data.DataSet&gt;</ph>.","pos":[366,582],"source":" This second <xref:System.Data.DataSet> object contains only the <xref:System.Data.DataTable> and <xref:System.Data.DataRow> objects that were changed, resulting in a subset of the original <xref:System.Data.DataSet>."},{"content":"This subset is generally smaller, and thus more efficiently passed back to a middle-tier component.","pos":[583,682]},{"content":"The middle-tier component then updates the original data source with the changes through stored procedures.","pos":[683,790]},{"content":"The middle tier can then send back either a new <ph id=\"ph1\">&lt;xref:System.Data.DataSet&gt;</ph> that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source.","pos":[791,1069],"source":" The middle tier can then send back either a new <xref:System.Data.DataSet> that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source."},{"content":"(For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned <ph id=\"ph1\">&lt;xref:System.Data.DataSet&gt;</ph> can be merged back into the client application's original <ph id=\"ph2\">&lt;xref:System.Data.DataSet&gt;</ph> with the <ph id=\"ph3\">&lt;xref:System.Data.DataSet.Merge%2A&gt;</ph> method.","pos":[1070,1409],"source":" (For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned <xref:System.Data.DataSet> can be merged back into the client application's original <xref:System.Data.DataSet> with the <xref:System.Data.DataSet.Merge%2A> method."}]}]},{"pos":[2103,2777],"content":"When the <xref:System.Data.DataSet.Merge%2A> method is called, the schemas of the two <xref:System.Data.DataSet> objects are compared because it is possible that the schemas may have been changed. For example, in a business-to-business scenario, new columns may have been added to an XML schema by an automated process. If the source <xref:System.Data.DataSet> contains schema elements (added <xref:System.Data.DataColumn> objects) that are missing in the target, the schema elements can be added to the target by setting the `missingSchemaAction` argument to `MissingSchemaAction.Add`. In that case, the merged <xref:System.Data.DataSet> contains the added schema and data.","nodes":[{"content":"When the <ph id=\"ph1\">&lt;xref:System.Data.DataSet.Merge%2A&gt;</ph> method is called, the schemas of the two <ph id=\"ph2\">&lt;xref:System.Data.DataSet&gt;</ph> objects are compared because it is possible that the schemas may have been changed.","pos":[0,196],"source":"When the <xref:System.Data.DataSet.Merge%2A> method is called, the schemas of the two <xref:System.Data.DataSet> objects are compared because it is possible that the schemas may have been changed."},{"content":"For example, in a business-to-business scenario, new columns may have been added to an XML schema by an automated process.","pos":[197,319]},{"content":"If the source <ph id=\"ph1\">&lt;xref:System.Data.DataSet&gt;</ph> contains schema elements (added <ph id=\"ph2\">&lt;xref:System.Data.DataColumn&gt;</ph> objects) that are missing in the target, the schema elements can be added to the target by setting the <ph id=\"ph3\">`missingSchemaAction`</ph> argument to <ph id=\"ph4\">`MissingSchemaAction.Add`</ph>.","pos":[320,586],"source":" If the source <xref:System.Data.DataSet> contains schema elements (added <xref:System.Data.DataColumn> objects) that are missing in the target, the schema elements can be added to the target by setting the `missingSchemaAction` argument to `MissingSchemaAction.Add`."},{"content":"In that case, the merged <ph id=\"ph1\">&lt;xref:System.Data.DataSet&gt;</ph> contains the added schema and data.","pos":[587,674],"source":" In that case, the merged <xref:System.Data.DataSet> contains the added schema and data."}]},{"pos":[2784,2826],"content":"After merging schemas, the data is merged.","nodes":[{"content":"After merging schemas, the data is merged.","pos":[0,42]}]},{"pos":[2833,3204],"content":"When merging a new source <xref:System.Data.DataSet> into the target, any source rows with a <xref:System.Data.DataRowState> value of `Unchanged`, `Modified`, or `Deleted` are matched to target rows with the same primary key values. Source rows with a `DataRowState` value of `Added` are matched to new target rows with the same primary key values as the new source rows.","nodes":[{"content":"When merging a new source <ph id=\"ph1\">&lt;xref:System.Data.DataSet&gt;</ph> into the target, any source rows with a <ph id=\"ph2\">&lt;xref:System.Data.DataRowState&gt;</ph> value of <ph id=\"ph3\">`Unchanged`</ph>, <ph id=\"ph4\">`Modified`</ph>, or <ph id=\"ph5\">`Deleted`</ph> are matched to target rows with the same primary key values.","pos":[0,232],"source":"When merging a new source <xref:System.Data.DataSet> into the target, any source rows with a <xref:System.Data.DataRowState> value of `Unchanged`, `Modified`, or `Deleted` are matched to target rows with the same primary key values."},{"content":"Source rows with a <ph id=\"ph1\">`DataRowState`</ph> value of <ph id=\"ph2\">`Added`</ph> are matched to new target rows with the same primary key values as the new source rows.","pos":[233,371],"source":" Source rows with a `DataRowState` value of `Added` are matched to new target rows with the same primary key values as the new source rows."}]},{"pos":[3211,3706],"content":"During a merge, constraints are disabled. If any constraints cannot be enabled at the end of merge, a <xref:System.Data.ConstraintException> is generated and the merged data is retained while the constraints are disabled. In this case, the <xref:System.Data.DataSet.EnforceConstraints%2A> property is set to `false`, and all rows that are invalid are marked in error. The errors must be resolved before attempting to reset the <xref:System.Data.DataSet.EnforceConstraints%2A> property to `true`.","nodes":[{"content":"During a merge, constraints are disabled.","pos":[0,41]},{"content":"If any constraints cannot be enabled at the end of merge, a <ph id=\"ph1\">&lt;xref:System.Data.ConstraintException&gt;</ph> is generated and the merged data is retained while the constraints are disabled.","pos":[42,221],"source":" If any constraints cannot be enabled at the end of merge, a <xref:System.Data.ConstraintException> is generated and the merged data is retained while the constraints are disabled."},{"content":"In this case, the <ph id=\"ph1\">&lt;xref:System.Data.DataSet.EnforceConstraints%2A&gt;</ph> property is set to <ph id=\"ph2\">`false`</ph>, and all rows that are invalid are marked in error.","pos":[222,367],"source":" In this case, the <xref:System.Data.DataSet.EnforceConstraints%2A> property is set to `false`, and all rows that are invalid are marked in error."},{"content":"The errors must be resolved before attempting to reset the <ph id=\"ph1\">&lt;xref:System.Data.DataSet.EnforceConstraints%2A&gt;</ph> property to <ph id=\"ph2\">`true`</ph>.","pos":[368,495],"source":" The errors must be resolved before attempting to reset the <xref:System.Data.DataSet.EnforceConstraints%2A> property to `true`."}]}],"pos":[145459,149180],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Data.DataTable\"></xref> whose data and schema will be merged.","nodes":[{"pos":[0,84],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Data.DataTable\"&gt;&lt;/xref&gt;</ph> whose data and schema will be merged.","source":"The <xref href=\"System.Data.DataTable\"></xref> whose data and schema will be merged."}],"pos":[149969,150054],"yaml":true},{"content":"The <code>table</code> is `null`.","nodes":[{"pos":[0,33],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">table</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">`null`</ph>.","source":"The <code>table</code> is `null`."}],"pos":[150209,150243],"yaml":true},{"content":"Merges a specified <xref href=\"System.Data.DataSet\"></xref> and its schema into the current `DataSet`, preserving or discarding any changes in this `DataSet` according to the given argument.","nodes":[{"pos":[0,190],"content":"Merges a specified <ph id=\"ph1\">&lt;xref href=\"System.Data.DataSet\"&gt;&lt;/xref&gt;</ph> and its schema into the current <ph id=\"ph2\">`DataSet`</ph>, preserving or discarding any changes in this <ph id=\"ph3\">`DataSet`</ph> according to the given argument.","source":"Merges a specified <xref href=\"System.Data.DataSet\"></xref> and its schema into the current `DataSet`, preserving or discarding any changes in this `DataSet` according to the given argument."}],"pos":[151448,151639],"yaml":true},{"content":"The <xref:System.Data.DataSet.Merge%2A> method is used to merge two <xref:System.Data.DataSet> objects that have largely similar schemas. A merge is typically used on a client application to incorporate the latest changes from a data source into an existing <xref:System.Data.DataSet>. This allows the client application to have a refreshed <xref:System.Data.DataSet> with the latest data from the data source.  \n  \n The <xref:System.Data.DataSet.Merge%2A> method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing <xref:System.Data.DataSet>.  \n  \n In a client application, it is common to have a single button that the user can click that gathers the changed data and validates it before sending it back to a middle-tier component. In this scenario, the <xref:System.Data.DataSet.GetChanges%2A> method is first invoked. That method returns a second <xref:System.Data.DataSet> optimized for validating and merging. This second <xref:System.Data.DataSet> object contains only the <xref:System.Data.DataTable> and <xref:System.Data.DataRow> objects that were changed, resulting in a subset of the original <xref:System.Data.DataSet>. This subset is generally smaller, and thus more efficiently passed back to a middle-tier component. The middle-tier component then updates the original data source with the changes through stored procedures. The middle tier can then send back either a new <xref:System.Data.DataSet> that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source. (For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned <xref:System.Data.DataSet> can be merged back into the client application's original <xref:System.Data.DataSet> with the <xref:System.Data.DataSet.Merge%2A> method.  \n  \n When the <xref:System.Data.DataSet.Merge%2A> method is called, the schemas of the two <xref:System.Data.DataSet> objects are compared because it is possible that the schemas may have been changed. For example, in a business-to-business scenario, new columns may have been added to an XML schema by an automated process. If the source <xref:System.Data.DataSet> contains schema elements (added <xref:System.Data.DataColumn> objects) that are missing in the target, the schema elements can be added to the target by setting the `missingSchemaAction` argument to `MissingSchemaAction.Add`. In that case, the merged <xref:System.Data.DataSet> contains the added schema and data.  \n  \n After merging schemas, the data is merged.  \n  \n When merging a new source <xref:System.Data.DataSet> into the target, any source rows with a <xref:System.Data.DataRowState> value of `Unchanged`, `Modified`, or `Deleted` are matched to target rows with the same primary key values. Source rows with a `DataRowState` value of `Added` are matched to new target rows with the same primary key values as the new source rows.  \n  \n During a merge, constraints are disabled. If any constraints cannot be enabled at the end of merge, a <xref:System.Data.ConstraintException> is generated and the merged data is retained while the constraints are disabled. In this case, the <xref:System.Data.DataSet.EnforceConstraints%2A> property is set to `false`, and all rows that are invalid are marked in error. The errors must be resolved before attempting to reset the <xref:System.Data.DataSet.EnforceConstraints%2A> property to `true`.","nodes":[{"pos":[0,410],"content":"The <xref:System.Data.DataSet.Merge%2A> method is used to merge two <xref:System.Data.DataSet> objects that have largely similar schemas. A merge is typically used on a client application to incorporate the latest changes from a data source into an existing <xref:System.Data.DataSet>. This allows the client application to have a refreshed <xref:System.Data.DataSet> with the latest data from the data source.","nodes":[{"content":"The <xref:System.Data.DataSet.Merge%2A> method is used to merge two <xref:System.Data.DataSet> objects that have largely similar schemas. A merge is typically used on a client application to incorporate the latest changes from a data source into an existing <xref:System.Data.DataSet>. This allows the client application to have a refreshed <xref:System.Data.DataSet> with the latest data from the data source.","pos":[0,410],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Data.DataSet.Merge%2A&gt;</ph> method is used to merge two <ph id=\"ph2\">&lt;xref:System.Data.DataSet&gt;</ph> objects that have largely similar schemas.","pos":[0,137],"source":"The <xref:System.Data.DataSet.Merge%2A> method is used to merge two <xref:System.Data.DataSet> objects that have largely similar schemas."},{"content":"A merge is typically used on a client application to incorporate the latest changes from a data source into an existing <ph id=\"ph1\">&lt;xref:System.Data.DataSet&gt;</ph>.","pos":[138,285],"source":" A merge is typically used on a client application to incorporate the latest changes from a data source into an existing <xref:System.Data.DataSet>."},{"content":"This allows the client application to have a refreshed <ph id=\"ph1\">&lt;xref:System.Data.DataSet&gt;</ph> with the latest data from the data source.","pos":[286,410],"source":" This allows the client application to have a refreshed <xref:System.Data.DataSet> with the latest data from the data source."}]}]},{"pos":[417,680],"content":"The <xref:System.Data.DataSet.Merge%2A> method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing <xref:System.Data.DataSet>.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Data.DataSet.Merge%2A&gt;</ph> method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing <ph id=\"ph2\">&lt;xref:System.Data.DataSet&gt;</ph>.","pos":[0,263],"source":"The <xref:System.Data.DataSet.Merge%2A> method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing <xref:System.Data.DataSet>."}]},{"pos":[687,2096],"content":"In a client application, it is common to have a single button that the user can click that gathers the changed data and validates it before sending it back to a middle-tier component. In this scenario, the <xref:System.Data.DataSet.GetChanges%2A> method is first invoked. That method returns a second <xref:System.Data.DataSet> optimized for validating and merging. This second <xref:System.Data.DataSet> object contains only the <xref:System.Data.DataTable> and <xref:System.Data.DataRow> objects that were changed, resulting in a subset of the original <xref:System.Data.DataSet>. This subset is generally smaller, and thus more efficiently passed back to a middle-tier component. The middle-tier component then updates the original data source with the changes through stored procedures. The middle tier can then send back either a new <xref:System.Data.DataSet> that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source. (For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned <xref:System.Data.DataSet> can be merged back into the client application's original <xref:System.Data.DataSet> with the <xref:System.Data.DataSet.Merge%2A> method.","nodes":[{"content":"In a client application, it is common to have a single button that the user can click that gathers the changed data and validates it before sending it back to a middle-tier component. In this scenario, the <xref:System.Data.DataSet.GetChanges%2A> method is first invoked. That method returns a second <xref:System.Data.DataSet> optimized for validating and merging. This second <xref:System.Data.DataSet> object contains only the <xref:System.Data.DataTable> and <xref:System.Data.DataRow> objects that were changed, resulting in a subset of the original <xref:System.Data.DataSet>. This subset is generally smaller, and thus more efficiently passed back to a middle-tier component. The middle-tier component then updates the original data source with the changes through stored procedures. The middle tier can then send back either a new <xref:System.Data.DataSet> that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source. (For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned <xref:System.Data.DataSet> can be merged back into the client application's original <xref:System.Data.DataSet> with the <xref:System.Data.DataSet.Merge%2A> method.","pos":[0,1409],"nodes":[{"content":"In a client application, it is common to have a single button that the user can click that gathers the changed data and validates it before sending it back to a middle-tier component.","pos":[0,183]},{"content":"In this scenario, the <ph id=\"ph1\">&lt;xref:System.Data.DataSet.GetChanges%2A&gt;</ph> method is first invoked.","pos":[184,271],"source":" In this scenario, the <xref:System.Data.DataSet.GetChanges%2A> method is first invoked."},{"content":"That method returns a second <ph id=\"ph1\">&lt;xref:System.Data.DataSet&gt;</ph> optimized for validating and merging.","pos":[272,365],"source":" That method returns a second <xref:System.Data.DataSet> optimized for validating and merging."},{"content":"This second <ph id=\"ph1\">&lt;xref:System.Data.DataSet&gt;</ph> object contains only the <ph id=\"ph2\">&lt;xref:System.Data.DataTable&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.Data.DataRow&gt;</ph> objects that were changed, resulting in a subset of the original <ph id=\"ph4\">&lt;xref:System.Data.DataSet&gt;</ph>.","pos":[366,582],"source":" This second <xref:System.Data.DataSet> object contains only the <xref:System.Data.DataTable> and <xref:System.Data.DataRow> objects that were changed, resulting in a subset of the original <xref:System.Data.DataSet>."},{"content":"This subset is generally smaller, and thus more efficiently passed back to a middle-tier component.","pos":[583,682]},{"content":"The middle-tier component then updates the original data source with the changes through stored procedures.","pos":[683,790]},{"content":"The middle tier can then send back either a new <ph id=\"ph1\">&lt;xref:System.Data.DataSet&gt;</ph> that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source.","pos":[791,1069],"source":" The middle tier can then send back either a new <xref:System.Data.DataSet> that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source."},{"content":"(For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned <ph id=\"ph1\">&lt;xref:System.Data.DataSet&gt;</ph> can be merged back into the client application's original <ph id=\"ph2\">&lt;xref:System.Data.DataSet&gt;</ph> with the <ph id=\"ph3\">&lt;xref:System.Data.DataSet.Merge%2A&gt;</ph> method.","pos":[1070,1409],"source":" (For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned <xref:System.Data.DataSet> can be merged back into the client application's original <xref:System.Data.DataSet> with the <xref:System.Data.DataSet.Merge%2A> method."}]}]},{"pos":[2103,2777],"content":"When the <xref:System.Data.DataSet.Merge%2A> method is called, the schemas of the two <xref:System.Data.DataSet> objects are compared because it is possible that the schemas may have been changed. For example, in a business-to-business scenario, new columns may have been added to an XML schema by an automated process. If the source <xref:System.Data.DataSet> contains schema elements (added <xref:System.Data.DataColumn> objects) that are missing in the target, the schema elements can be added to the target by setting the `missingSchemaAction` argument to `MissingSchemaAction.Add`. In that case, the merged <xref:System.Data.DataSet> contains the added schema and data.","nodes":[{"content":"When the <ph id=\"ph1\">&lt;xref:System.Data.DataSet.Merge%2A&gt;</ph> method is called, the schemas of the two <ph id=\"ph2\">&lt;xref:System.Data.DataSet&gt;</ph> objects are compared because it is possible that the schemas may have been changed.","pos":[0,196],"source":"When the <xref:System.Data.DataSet.Merge%2A> method is called, the schemas of the two <xref:System.Data.DataSet> objects are compared because it is possible that the schemas may have been changed."},{"content":"For example, in a business-to-business scenario, new columns may have been added to an XML schema by an automated process.","pos":[197,319]},{"content":"If the source <ph id=\"ph1\">&lt;xref:System.Data.DataSet&gt;</ph> contains schema elements (added <ph id=\"ph2\">&lt;xref:System.Data.DataColumn&gt;</ph> objects) that are missing in the target, the schema elements can be added to the target by setting the <ph id=\"ph3\">`missingSchemaAction`</ph> argument to <ph id=\"ph4\">`MissingSchemaAction.Add`</ph>.","pos":[320,586],"source":" If the source <xref:System.Data.DataSet> contains schema elements (added <xref:System.Data.DataColumn> objects) that are missing in the target, the schema elements can be added to the target by setting the `missingSchemaAction` argument to `MissingSchemaAction.Add`."},{"content":"In that case, the merged <ph id=\"ph1\">&lt;xref:System.Data.DataSet&gt;</ph> contains the added schema and data.","pos":[587,674],"source":" In that case, the merged <xref:System.Data.DataSet> contains the added schema and data."}]},{"pos":[2784,2826],"content":"After merging schemas, the data is merged.","nodes":[{"content":"After merging schemas, the data is merged.","pos":[0,42]}]},{"pos":[2833,3204],"content":"When merging a new source <xref:System.Data.DataSet> into the target, any source rows with a <xref:System.Data.DataRowState> value of `Unchanged`, `Modified`, or `Deleted` are matched to target rows with the same primary key values. Source rows with a `DataRowState` value of `Added` are matched to new target rows with the same primary key values as the new source rows.","nodes":[{"content":"When merging a new source <ph id=\"ph1\">&lt;xref:System.Data.DataSet&gt;</ph> into the target, any source rows with a <ph id=\"ph2\">&lt;xref:System.Data.DataRowState&gt;</ph> value of <ph id=\"ph3\">`Unchanged`</ph>, <ph id=\"ph4\">`Modified`</ph>, or <ph id=\"ph5\">`Deleted`</ph> are matched to target rows with the same primary key values.","pos":[0,232],"source":"When merging a new source <xref:System.Data.DataSet> into the target, any source rows with a <xref:System.Data.DataRowState> value of `Unchanged`, `Modified`, or `Deleted` are matched to target rows with the same primary key values."},{"content":"Source rows with a <ph id=\"ph1\">`DataRowState`</ph> value of <ph id=\"ph2\">`Added`</ph> are matched to new target rows with the same primary key values as the new source rows.","pos":[233,371],"source":" Source rows with a `DataRowState` value of `Added` are matched to new target rows with the same primary key values as the new source rows."}]},{"pos":[3211,3706],"content":"During a merge, constraints are disabled. If any constraints cannot be enabled at the end of merge, a <xref:System.Data.ConstraintException> is generated and the merged data is retained while the constraints are disabled. In this case, the <xref:System.Data.DataSet.EnforceConstraints%2A> property is set to `false`, and all rows that are invalid are marked in error. The errors must be resolved before attempting to reset the <xref:System.Data.DataSet.EnforceConstraints%2A> property to `true`.","nodes":[{"content":"During a merge, constraints are disabled.","pos":[0,41]},{"content":"If any constraints cannot be enabled at the end of merge, a <ph id=\"ph1\">&lt;xref:System.Data.ConstraintException&gt;</ph> is generated and the merged data is retained while the constraints are disabled.","pos":[42,221],"source":" If any constraints cannot be enabled at the end of merge, a <xref:System.Data.ConstraintException> is generated and the merged data is retained while the constraints are disabled."},{"content":"In this case, the <ph id=\"ph1\">&lt;xref:System.Data.DataSet.EnforceConstraints%2A&gt;</ph> property is set to <ph id=\"ph2\">`false`</ph>, and all rows that are invalid are marked in error.","pos":[222,367],"source":" In this case, the <xref:System.Data.DataSet.EnforceConstraints%2A> property is set to `false`, and all rows that are invalid are marked in error."},{"content":"The errors must be resolved before attempting to reset the <ph id=\"ph1\">&lt;xref:System.Data.DataSet.EnforceConstraints%2A&gt;</ph> property to <ph id=\"ph2\">`true`</ph>.","pos":[368,495],"source":" The errors must be resolved before attempting to reset the <xref:System.Data.DataSet.EnforceConstraints%2A> property to `true`."}]}],"pos":[151650,155371],"yaml":true,"extradata":"MT"},{"content":"The `DataSet` whose data and schema will be merged.","nodes":[{"pos":[0,51],"content":"The <ph id=\"ph1\">`DataSet`</ph> whose data and schema will be merged.","source":"The `DataSet` whose data and schema will be merged."}],"pos":[156285,156337],"yaml":true},{"content":"`true` to preserve changes in the current `DataSet`; otherwise `false`.","nodes":[{"pos":[0,71],"content":"<ph id=\"ph1\">`true`</ph> to preserve changes in the current <ph id=\"ph2\">`DataSet`</ph>; otherwise <ph id=\"ph3\">`false`</ph>.","source":"`true` to preserve changes in the current `DataSet`; otherwise `false`."}],"pos":[156409,156483],"yaml":true},{"content":"Merges an array of <xref href=\"System.Data.DataRow\"></xref> objects into the current <xref href=\"System.Data.DataSet\"></xref>, preserving or discarding changes in the `DataSet` and handling an incompatible schema according to the given arguments.","nodes":[{"pos":[0,246],"content":"Merges an array of <ph id=\"ph1\">&lt;xref href=\"System.Data.DataRow\"&gt;&lt;/xref&gt;</ph> objects into the current <ph id=\"ph2\">&lt;xref href=\"System.Data.DataSet\"&gt;&lt;/xref&gt;</ph>, preserving or discarding changes in the <ph id=\"ph3\">`DataSet`</ph> and handling an incompatible schema according to the given arguments.","source":"Merges an array of <xref href=\"System.Data.DataRow\"></xref> objects into the current <xref href=\"System.Data.DataSet\"></xref>, preserving or discarding changes in the `DataSet` and handling an incompatible schema according to the given arguments."}],"pos":[157915,158162],"yaml":true},{"content":"The <xref:System.Data.DataSet.Merge%2A> method is used to merge two <xref:System.Data.DataSet> objects that have largely similar schemas. A merge is typically used on a client application to incorporate the latest changes from a data source into an existing <xref:System.Data.DataSet>. This allows the client application to have a refreshed <xref:System.Data.DataSet> with the latest data from the data source.  \n  \n The <xref:System.Data.DataSet.Merge%2A> method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing <xref:System.Data.DataSet>.  \n  \n In a client application, it is common to have a single button that the user can click that gathers the changed data and validates it before sending it back to a middle-tier component. In this scenario, the <xref:System.Data.DataSet.GetChanges%2A> method is first invoked. That method returns a second <xref:System.Data.DataSet> optimized for validating and merging. This second <xref:System.Data.DataSet> object contains only the <xref:System.Data.DataTable> and <xref:System.Data.DataRow> objects that were changed, resulting in a subset of the original <xref:System.Data.DataSet>. This subset is generally smaller, and thus more efficiently passed back to a middle-tier component. The middle-tier component then updates the original data source with the changes through stored procedures. The middle tier can then send back either a new <xref:System.Data.DataSet> that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source. (For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned <xref:System.Data.DataSet> can be merged back into the client application's original <xref:System.Data.DataSet> with the <xref:System.Data.DataSet.Merge%2A> method.  \n  \n To facilitate explanation of the <xref:System.Data.DataSet.Merge%2A> method, we use \"target\" to signify the current <xref:System.Data.DataSet>, and \"source\" to name the second (parameter) <xref:System.Data.DataSet>. The target <xref:System.Data.DataSet> is so named because it is the object upon which an action (the merge) occurs. The second <xref:System.Data.DataSet> is called a \"source\" because the information it contains does not change, but instead is merged into the current <xref:System.Data.DataSet>.  \n  \n When the <xref:System.Data.DataSet.Merge%2A> method is called, the schemas of the two <xref:System.Data.DataSet> objects are compared because it is possible that the schemas may have been changed. For example, in a business-to-business scenario, new columns may have been added to an XML schema by an automated process. If the source <xref:System.Data.DataSet> contains schema elements (added <xref:System.Data.DataColumn> objects) that are missing in the target, the schema elements can be added to the target by setting the `missingSchemaAction` argument to `MissingSchemaAction.Add`. In that case, the merged <xref:System.Data.DataSet> contains the added schema and data.  \n  \n After merging schemas, the data is merged.  \n  \n When merging a new source <xref:System.Data.DataSet> into the target, any source rows with a <xref:System.Data.DataRowState> value of `Unchanged`, `Modified`, or `Deleted` are matched to target rows with the same primary key values. Source rows with a `DataRowState` value of `Added` are matched to new target rows with the same primary key values as the new source rows.  \n  \n During a merge, constraints are disabled. If any constraints cannot be enabled at the end of merge, a <xref:System.Data.ConstraintException> is generated and the merged data is retained while the constraints are disabled. In this case, the <xref:System.Data.DataSet.EnforceConstraints%2A> property is set to `false`, and all rows that are invalid are marked in error. The errors must be resolved before attempting to reset the <xref:System.Data.DataSet.EnforceConstraints%2A> property to `true`.","nodes":[{"pos":[0,410],"content":"The <xref:System.Data.DataSet.Merge%2A> method is used to merge two <xref:System.Data.DataSet> objects that have largely similar schemas. A merge is typically used on a client application to incorporate the latest changes from a data source into an existing <xref:System.Data.DataSet>. This allows the client application to have a refreshed <xref:System.Data.DataSet> with the latest data from the data source.","nodes":[{"content":"The <xref:System.Data.DataSet.Merge%2A> method is used to merge two <xref:System.Data.DataSet> objects that have largely similar schemas. A merge is typically used on a client application to incorporate the latest changes from a data source into an existing <xref:System.Data.DataSet>. This allows the client application to have a refreshed <xref:System.Data.DataSet> with the latest data from the data source.","pos":[0,410],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Data.DataSet.Merge%2A&gt;</ph> method is used to merge two <ph id=\"ph2\">&lt;xref:System.Data.DataSet&gt;</ph> objects that have largely similar schemas.","pos":[0,137],"source":"The <xref:System.Data.DataSet.Merge%2A> method is used to merge two <xref:System.Data.DataSet> objects that have largely similar schemas."},{"content":"A merge is typically used on a client application to incorporate the latest changes from a data source into an existing <ph id=\"ph1\">&lt;xref:System.Data.DataSet&gt;</ph>.","pos":[138,285],"source":" A merge is typically used on a client application to incorporate the latest changes from a data source into an existing <xref:System.Data.DataSet>."},{"content":"This allows the client application to have a refreshed <ph id=\"ph1\">&lt;xref:System.Data.DataSet&gt;</ph> with the latest data from the data source.","pos":[286,410],"source":" This allows the client application to have a refreshed <xref:System.Data.DataSet> with the latest data from the data source."}]}]},{"pos":[417,680],"content":"The <xref:System.Data.DataSet.Merge%2A> method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing <xref:System.Data.DataSet>.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Data.DataSet.Merge%2A&gt;</ph> method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing <ph id=\"ph2\">&lt;xref:System.Data.DataSet&gt;</ph>.","pos":[0,263],"source":"The <xref:System.Data.DataSet.Merge%2A> method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing <xref:System.Data.DataSet>."}]},{"pos":[687,2096],"content":"In a client application, it is common to have a single button that the user can click that gathers the changed data and validates it before sending it back to a middle-tier component. In this scenario, the <xref:System.Data.DataSet.GetChanges%2A> method is first invoked. That method returns a second <xref:System.Data.DataSet> optimized for validating and merging. This second <xref:System.Data.DataSet> object contains only the <xref:System.Data.DataTable> and <xref:System.Data.DataRow> objects that were changed, resulting in a subset of the original <xref:System.Data.DataSet>. This subset is generally smaller, and thus more efficiently passed back to a middle-tier component. The middle-tier component then updates the original data source with the changes through stored procedures. The middle tier can then send back either a new <xref:System.Data.DataSet> that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source. (For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned <xref:System.Data.DataSet> can be merged back into the client application's original <xref:System.Data.DataSet> with the <xref:System.Data.DataSet.Merge%2A> method.","nodes":[{"content":"In a client application, it is common to have a single button that the user can click that gathers the changed data and validates it before sending it back to a middle-tier component. In this scenario, the <xref:System.Data.DataSet.GetChanges%2A> method is first invoked. That method returns a second <xref:System.Data.DataSet> optimized for validating and merging. This second <xref:System.Data.DataSet> object contains only the <xref:System.Data.DataTable> and <xref:System.Data.DataRow> objects that were changed, resulting in a subset of the original <xref:System.Data.DataSet>. This subset is generally smaller, and thus more efficiently passed back to a middle-tier component. The middle-tier component then updates the original data source with the changes through stored procedures. The middle tier can then send back either a new <xref:System.Data.DataSet> that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source. (For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned <xref:System.Data.DataSet> can be merged back into the client application's original <xref:System.Data.DataSet> with the <xref:System.Data.DataSet.Merge%2A> method.","pos":[0,1409],"nodes":[{"content":"In a client application, it is common to have a single button that the user can click that gathers the changed data and validates it before sending it back to a middle-tier component.","pos":[0,183]},{"content":"In this scenario, the <ph id=\"ph1\">&lt;xref:System.Data.DataSet.GetChanges%2A&gt;</ph> method is first invoked.","pos":[184,271],"source":" In this scenario, the <xref:System.Data.DataSet.GetChanges%2A> method is first invoked."},{"content":"That method returns a second <ph id=\"ph1\">&lt;xref:System.Data.DataSet&gt;</ph> optimized for validating and merging.","pos":[272,365],"source":" That method returns a second <xref:System.Data.DataSet> optimized for validating and merging."},{"content":"This second <ph id=\"ph1\">&lt;xref:System.Data.DataSet&gt;</ph> object contains only the <ph id=\"ph2\">&lt;xref:System.Data.DataTable&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.Data.DataRow&gt;</ph> objects that were changed, resulting in a subset of the original <ph id=\"ph4\">&lt;xref:System.Data.DataSet&gt;</ph>.","pos":[366,582],"source":" This second <xref:System.Data.DataSet> object contains only the <xref:System.Data.DataTable> and <xref:System.Data.DataRow> objects that were changed, resulting in a subset of the original <xref:System.Data.DataSet>."},{"content":"This subset is generally smaller, and thus more efficiently passed back to a middle-tier component.","pos":[583,682]},{"content":"The middle-tier component then updates the original data source with the changes through stored procedures.","pos":[683,790]},{"content":"The middle tier can then send back either a new <ph id=\"ph1\">&lt;xref:System.Data.DataSet&gt;</ph> that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source.","pos":[791,1069],"source":" The middle tier can then send back either a new <xref:System.Data.DataSet> that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source."},{"content":"(For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned <ph id=\"ph1\">&lt;xref:System.Data.DataSet&gt;</ph> can be merged back into the client application's original <ph id=\"ph2\">&lt;xref:System.Data.DataSet&gt;</ph> with the <ph id=\"ph3\">&lt;xref:System.Data.DataSet.Merge%2A&gt;</ph> method.","pos":[1070,1409],"source":" (For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned <xref:System.Data.DataSet> can be merged back into the client application's original <xref:System.Data.DataSet> with the <xref:System.Data.DataSet.Merge%2A> method."}]}]},{"pos":[2103,2613],"content":"To facilitate explanation of the <xref:System.Data.DataSet.Merge%2A> method, we use \"target\" to signify the current <xref:System.Data.DataSet>, and \"source\" to name the second (parameter) <xref:System.Data.DataSet>. The target <xref:System.Data.DataSet> is so named because it is the object upon which an action (the merge) occurs. The second <xref:System.Data.DataSet> is called a \"source\" because the information it contains does not change, but instead is merged into the current <xref:System.Data.DataSet>.","nodes":[{"content":"To facilitate explanation of the <xref:System.Data.DataSet.Merge%2A> method, we use \"target\" to signify the current <xref:System.Data.DataSet>, and \"source\" to name the second (parameter) <xref:System.Data.DataSet>. The target <xref:System.Data.DataSet> is so named because it is the object upon which an action (the merge) occurs. The second <xref:System.Data.DataSet> is called a \"source\" because the information it contains does not change, but instead is merged into the current <xref:System.Data.DataSet>.","pos":[0,510],"nodes":[{"content":"To facilitate explanation of the <ph id=\"ph1\">&lt;xref:System.Data.DataSet.Merge%2A&gt;</ph> method, we use \"target\" to signify the current <ph id=\"ph2\">&lt;xref:System.Data.DataSet&gt;</ph>, and \"source\" to name the second (parameter) <ph id=\"ph3\">&lt;xref:System.Data.DataSet&gt;</ph>.","pos":[0,215],"source":"To facilitate explanation of the <xref:System.Data.DataSet.Merge%2A> method, we use \"target\" to signify the current <xref:System.Data.DataSet>, and \"source\" to name the second (parameter) <xref:System.Data.DataSet>."},{"content":"The target <ph id=\"ph1\">&lt;xref:System.Data.DataSet&gt;</ph> is so named because it is the object upon which an action (the merge) occurs.","pos":[216,331],"source":" The target <xref:System.Data.DataSet> is so named because it is the object upon which an action (the merge) occurs."},{"content":"The second <ph id=\"ph1\">&lt;xref:System.Data.DataSet&gt;</ph> is called a \"source\" because the information it contains does not change, but instead is merged into the current <ph id=\"ph2\">&lt;xref:System.Data.DataSet&gt;</ph>.","pos":[332,510],"source":" The second <xref:System.Data.DataSet> is called a \"source\" because the information it contains does not change, but instead is merged into the current <xref:System.Data.DataSet>."}]}]},{"pos":[2620,3294],"content":"When the <xref:System.Data.DataSet.Merge%2A> method is called, the schemas of the two <xref:System.Data.DataSet> objects are compared because it is possible that the schemas may have been changed. For example, in a business-to-business scenario, new columns may have been added to an XML schema by an automated process. If the source <xref:System.Data.DataSet> contains schema elements (added <xref:System.Data.DataColumn> objects) that are missing in the target, the schema elements can be added to the target by setting the `missingSchemaAction` argument to `MissingSchemaAction.Add`. In that case, the merged <xref:System.Data.DataSet> contains the added schema and data.","nodes":[{"content":"When the <ph id=\"ph1\">&lt;xref:System.Data.DataSet.Merge%2A&gt;</ph> method is called, the schemas of the two <ph id=\"ph2\">&lt;xref:System.Data.DataSet&gt;</ph> objects are compared because it is possible that the schemas may have been changed.","pos":[0,196],"source":"When the <xref:System.Data.DataSet.Merge%2A> method is called, the schemas of the two <xref:System.Data.DataSet> objects are compared because it is possible that the schemas may have been changed."},{"content":"For example, in a business-to-business scenario, new columns may have been added to an XML schema by an automated process.","pos":[197,319]},{"content":"If the source <ph id=\"ph1\">&lt;xref:System.Data.DataSet&gt;</ph> contains schema elements (added <ph id=\"ph2\">&lt;xref:System.Data.DataColumn&gt;</ph> objects) that are missing in the target, the schema elements can be added to the target by setting the <ph id=\"ph3\">`missingSchemaAction`</ph> argument to <ph id=\"ph4\">`MissingSchemaAction.Add`</ph>.","pos":[320,586],"source":" If the source <xref:System.Data.DataSet> contains schema elements (added <xref:System.Data.DataColumn> objects) that are missing in the target, the schema elements can be added to the target by setting the `missingSchemaAction` argument to `MissingSchemaAction.Add`."},{"content":"In that case, the merged <ph id=\"ph1\">&lt;xref:System.Data.DataSet&gt;</ph> contains the added schema and data.","pos":[587,674],"source":" In that case, the merged <xref:System.Data.DataSet> contains the added schema and data."}]},{"pos":[3301,3343],"content":"After merging schemas, the data is merged.","nodes":[{"content":"After merging schemas, the data is merged.","pos":[0,42]}]},{"pos":[3350,3721],"content":"When merging a new source <xref:System.Data.DataSet> into the target, any source rows with a <xref:System.Data.DataRowState> value of `Unchanged`, `Modified`, or `Deleted` are matched to target rows with the same primary key values. Source rows with a `DataRowState` value of `Added` are matched to new target rows with the same primary key values as the new source rows.","nodes":[{"content":"When merging a new source <ph id=\"ph1\">&lt;xref:System.Data.DataSet&gt;</ph> into the target, any source rows with a <ph id=\"ph2\">&lt;xref:System.Data.DataRowState&gt;</ph> value of <ph id=\"ph3\">`Unchanged`</ph>, <ph id=\"ph4\">`Modified`</ph>, or <ph id=\"ph5\">`Deleted`</ph> are matched to target rows with the same primary key values.","pos":[0,232],"source":"When merging a new source <xref:System.Data.DataSet> into the target, any source rows with a <xref:System.Data.DataRowState> value of `Unchanged`, `Modified`, or `Deleted` are matched to target rows with the same primary key values."},{"content":"Source rows with a <ph id=\"ph1\">`DataRowState`</ph> value of <ph id=\"ph2\">`Added`</ph> are matched to new target rows with the same primary key values as the new source rows.","pos":[233,371],"source":" Source rows with a `DataRowState` value of `Added` are matched to new target rows with the same primary key values as the new source rows."}]},{"pos":[3728,4223],"content":"During a merge, constraints are disabled. If any constraints cannot be enabled at the end of merge, a <xref:System.Data.ConstraintException> is generated and the merged data is retained while the constraints are disabled. In this case, the <xref:System.Data.DataSet.EnforceConstraints%2A> property is set to `false`, and all rows that are invalid are marked in error. The errors must be resolved before attempting to reset the <xref:System.Data.DataSet.EnforceConstraints%2A> property to `true`.","nodes":[{"content":"During a merge, constraints are disabled.","pos":[0,41]},{"content":"If any constraints cannot be enabled at the end of merge, a <ph id=\"ph1\">&lt;xref:System.Data.ConstraintException&gt;</ph> is generated and the merged data is retained while the constraints are disabled.","pos":[42,221],"source":" If any constraints cannot be enabled at the end of merge, a <xref:System.Data.ConstraintException> is generated and the merged data is retained while the constraints are disabled."},{"content":"In this case, the <ph id=\"ph1\">&lt;xref:System.Data.DataSet.EnforceConstraints%2A&gt;</ph> property is set to <ph id=\"ph2\">`false`</ph>, and all rows that are invalid are marked in error.","pos":[222,367],"source":" In this case, the <xref:System.Data.DataSet.EnforceConstraints%2A> property is set to `false`, and all rows that are invalid are marked in error."},{"content":"The errors must be resolved before attempting to reset the <ph id=\"ph1\">&lt;xref:System.Data.DataSet.EnforceConstraints%2A&gt;</ph> property to <ph id=\"ph2\">`true`</ph>.","pos":[368,495],"source":" The errors must be resolved before attempting to reset the <xref:System.Data.DataSet.EnforceConstraints%2A> property to `true`."}]}],"pos":[158173,162419],"yaml":true,"extradata":"MT"},{"content":"The array of <xref href=\"System.Data.DataRow\"></xref> objects to be merged into the `DataSet`.","nodes":[{"pos":[0,94],"content":"The array of <ph id=\"ph1\">&lt;xref href=\"System.Data.DataRow\"&gt;&lt;/xref&gt;</ph> objects to be merged into the <ph id=\"ph2\">`DataSet`</ph>.","source":"The array of <xref href=\"System.Data.DataRow\"></xref> objects to be merged into the `DataSet`."}],"pos":[162649,162744],"yaml":true},{"content":"`true` to preserve changes in the `DataSet`; otherwise `false`.","nodes":[{"pos":[0,63],"content":"<ph id=\"ph1\">`true`</ph> to preserve changes in the <ph id=\"ph2\">`DataSet`</ph>; otherwise <ph id=\"ph3\">`false`</ph>.","source":"`true` to preserve changes in the `DataSet`; otherwise `false`."}],"pos":[162816,162882],"yaml":true},{"content":"One of the <xref href=\"System.Data.MissingSchemaAction\"></xref> values.","nodes":[{"pos":[0,71],"content":"One of the <ph id=\"ph1\">&lt;xref href=\"System.Data.MissingSchemaAction\"&gt;&lt;/xref&gt;</ph> values.","source":"One of the <xref href=\"System.Data.MissingSchemaAction\"></xref> values."}],"pos":[162975,163047],"yaml":true},{"content":"Merges a specified <xref href=\"System.Data.DataSet\"></xref> and its schema with the current `DataSet`, preserving or discarding changes in the current `DataSet` and handling an incompatible schema according to the given arguments.","nodes":[{"pos":[0,230],"content":"Merges a specified <ph id=\"ph1\">&lt;xref href=\"System.Data.DataSet\"&gt;&lt;/xref&gt;</ph> and its schema with the current <ph id=\"ph2\">`DataSet`</ph>, preserving or discarding changes in the current <ph id=\"ph3\">`DataSet`</ph> and handling an incompatible schema according to the given arguments.","source":"Merges a specified <xref href=\"System.Data.DataSet\"></xref> and its schema with the current `DataSet`, preserving or discarding changes in the current `DataSet` and handling an incompatible schema according to the given arguments."}],"pos":[164467,164698],"yaml":true},{"content":"The <xref:System.Data.DataSet.Merge%2A> method is used to merge two <xref:System.Data.DataSet> objects that have largely similar schemas. A merge is typically used on a client application to incorporate the latest changes from a data source into an existing <xref:System.Data.DataSet>. This allows the client application to have a refreshed <xref:System.Data.DataSet> with the latest data from the data source.  \n  \n The <xref:System.Data.DataSet.Merge%2A> method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing <xref:System.Data.DataSet>.  \n  \n In a client application, it is common to have a single button that the user can click that gathers the changed data and validates it before sending it back to a middle-tier component. In this scenario, the <xref:System.Data.DataSet.GetChanges%2A> method is first invoked. That method returns a second <xref:System.Data.DataSet> optimized for validating and merging. This second <xref:System.Data.DataSet> object contains only the <xref:System.Data.DataTable> and <xref:System.Data.DataRow> objects that were changed, resulting in a subset of the original <xref:System.Data.DataSet>. This subset is generally smaller, and thus more efficiently passed back to a middle-tier component. The middle-tier component then updates the original data source with the changes through stored procedures. The middle tier can then send back either a new <xref:System.Data.DataSet> that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source. (For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned <xref:System.Data.DataSet> can be merged back into the client application's original <xref:System.Data.DataSet> with the <xref:System.Data.DataSet.Merge%2A> method.  \n  \n To facilitate explanation of the <xref:System.Data.DataSet.Merge%2A> method, we use \"target\" to signify the current <xref:System.Data.DataSet>, and \"source\" to name the second (parameter) <xref:System.Data.DataSet>. The target <xref:System.Data.DataSet> is so named because it is the object upon which an action (the merge) occurs. The second <xref:System.Data.DataSet> is called a \"source\" because the information it contains does not change, but instead is merged into the current <xref:System.Data.DataSet>.  \n  \n When the <xref:System.Data.DataSet.Merge%2A> method is called, the schemas of the two <xref:System.Data.DataSet> objects are compared because it is possible that the schemas may have been changed. For example, in a business-to-business scenario, new columns may have been added to an XML schema by an automated process. If the source <xref:System.Data.DataSet> contains schema elements (added <xref:System.Data.DataColumn> objects) that are missing in the target, the schema elements can be added to the target by setting the `missingSchemaAction` argument to `MissingSchemaAction.Add`. In that case, the merged <xref:System.Data.DataSet> contains the added schema and data.  \n  \n After merging schemas, the data is merged.  \n  \n When merging a new source <xref:System.Data.DataSet> into the target, any source rows with a <xref:System.Data.DataRowState> value of `Unchanged`, `Modified`, or `Deleted` are matched to target rows with the same primary key values. Source rows with a `DataRowState` value of `Added` are matched to new target rows with the same primary key values as the new source rows.  \n  \n During a merge, constraints are disabled. If any constraints cannot be enabled at the end of merge, a <xref:System.Data.ConstraintException> is generated and the merged data is retained while the constraints are disabled. In this case, the <xref:System.Data.DataSet.EnforceConstraints%2A> property is set to `false`, and all rows that are invalid are marked in error. The errors must be resolved before attempting to reset the <xref:System.Data.DataSet.EnforceConstraints%2A> property to `true`.","nodes":[{"pos":[0,410],"content":"The <xref:System.Data.DataSet.Merge%2A> method is used to merge two <xref:System.Data.DataSet> objects that have largely similar schemas. A merge is typically used on a client application to incorporate the latest changes from a data source into an existing <xref:System.Data.DataSet>. This allows the client application to have a refreshed <xref:System.Data.DataSet> with the latest data from the data source.","nodes":[{"content":"The <xref:System.Data.DataSet.Merge%2A> method is used to merge two <xref:System.Data.DataSet> objects that have largely similar schemas. A merge is typically used on a client application to incorporate the latest changes from a data source into an existing <xref:System.Data.DataSet>. This allows the client application to have a refreshed <xref:System.Data.DataSet> with the latest data from the data source.","pos":[0,410],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Data.DataSet.Merge%2A&gt;</ph> method is used to merge two <ph id=\"ph2\">&lt;xref:System.Data.DataSet&gt;</ph> objects that have largely similar schemas.","pos":[0,137],"source":"The <xref:System.Data.DataSet.Merge%2A> method is used to merge two <xref:System.Data.DataSet> objects that have largely similar schemas."},{"content":"A merge is typically used on a client application to incorporate the latest changes from a data source into an existing <ph id=\"ph1\">&lt;xref:System.Data.DataSet&gt;</ph>.","pos":[138,285],"source":" A merge is typically used on a client application to incorporate the latest changes from a data source into an existing <xref:System.Data.DataSet>."},{"content":"This allows the client application to have a refreshed <ph id=\"ph1\">&lt;xref:System.Data.DataSet&gt;</ph> with the latest data from the data source.","pos":[286,410],"source":" This allows the client application to have a refreshed <xref:System.Data.DataSet> with the latest data from the data source."}]}]},{"pos":[417,680],"content":"The <xref:System.Data.DataSet.Merge%2A> method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing <xref:System.Data.DataSet>.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Data.DataSet.Merge%2A&gt;</ph> method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing <ph id=\"ph2\">&lt;xref:System.Data.DataSet&gt;</ph>.","pos":[0,263],"source":"The <xref:System.Data.DataSet.Merge%2A> method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing <xref:System.Data.DataSet>."}]},{"pos":[687,2096],"content":"In a client application, it is common to have a single button that the user can click that gathers the changed data and validates it before sending it back to a middle-tier component. In this scenario, the <xref:System.Data.DataSet.GetChanges%2A> method is first invoked. That method returns a second <xref:System.Data.DataSet> optimized for validating and merging. This second <xref:System.Data.DataSet> object contains only the <xref:System.Data.DataTable> and <xref:System.Data.DataRow> objects that were changed, resulting in a subset of the original <xref:System.Data.DataSet>. This subset is generally smaller, and thus more efficiently passed back to a middle-tier component. The middle-tier component then updates the original data source with the changes through stored procedures. The middle tier can then send back either a new <xref:System.Data.DataSet> that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source. (For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned <xref:System.Data.DataSet> can be merged back into the client application's original <xref:System.Data.DataSet> with the <xref:System.Data.DataSet.Merge%2A> method.","nodes":[{"content":"In a client application, it is common to have a single button that the user can click that gathers the changed data and validates it before sending it back to a middle-tier component. In this scenario, the <xref:System.Data.DataSet.GetChanges%2A> method is first invoked. That method returns a second <xref:System.Data.DataSet> optimized for validating and merging. This second <xref:System.Data.DataSet> object contains only the <xref:System.Data.DataTable> and <xref:System.Data.DataRow> objects that were changed, resulting in a subset of the original <xref:System.Data.DataSet>. This subset is generally smaller, and thus more efficiently passed back to a middle-tier component. The middle-tier component then updates the original data source with the changes through stored procedures. The middle tier can then send back either a new <xref:System.Data.DataSet> that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source. (For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned <xref:System.Data.DataSet> can be merged back into the client application's original <xref:System.Data.DataSet> with the <xref:System.Data.DataSet.Merge%2A> method.","pos":[0,1409],"nodes":[{"content":"In a client application, it is common to have a single button that the user can click that gathers the changed data and validates it before sending it back to a middle-tier component.","pos":[0,183]},{"content":"In this scenario, the <ph id=\"ph1\">&lt;xref:System.Data.DataSet.GetChanges%2A&gt;</ph> method is first invoked.","pos":[184,271],"source":" In this scenario, the <xref:System.Data.DataSet.GetChanges%2A> method is first invoked."},{"content":"That method returns a second <ph id=\"ph1\">&lt;xref:System.Data.DataSet&gt;</ph> optimized for validating and merging.","pos":[272,365],"source":" That method returns a second <xref:System.Data.DataSet> optimized for validating and merging."},{"content":"This second <ph id=\"ph1\">&lt;xref:System.Data.DataSet&gt;</ph> object contains only the <ph id=\"ph2\">&lt;xref:System.Data.DataTable&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.Data.DataRow&gt;</ph> objects that were changed, resulting in a subset of the original <ph id=\"ph4\">&lt;xref:System.Data.DataSet&gt;</ph>.","pos":[366,582],"source":" This second <xref:System.Data.DataSet> object contains only the <xref:System.Data.DataTable> and <xref:System.Data.DataRow> objects that were changed, resulting in a subset of the original <xref:System.Data.DataSet>."},{"content":"This subset is generally smaller, and thus more efficiently passed back to a middle-tier component.","pos":[583,682]},{"content":"The middle-tier component then updates the original data source with the changes through stored procedures.","pos":[683,790]},{"content":"The middle tier can then send back either a new <ph id=\"ph1\">&lt;xref:System.Data.DataSet&gt;</ph> that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source.","pos":[791,1069],"source":" The middle tier can then send back either a new <xref:System.Data.DataSet> that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source."},{"content":"(For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned <ph id=\"ph1\">&lt;xref:System.Data.DataSet&gt;</ph> can be merged back into the client application's original <ph id=\"ph2\">&lt;xref:System.Data.DataSet&gt;</ph> with the <ph id=\"ph3\">&lt;xref:System.Data.DataSet.Merge%2A&gt;</ph> method.","pos":[1070,1409],"source":" (For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned <xref:System.Data.DataSet> can be merged back into the client application's original <xref:System.Data.DataSet> with the <xref:System.Data.DataSet.Merge%2A> method."}]}]},{"pos":[2103,2613],"content":"To facilitate explanation of the <xref:System.Data.DataSet.Merge%2A> method, we use \"target\" to signify the current <xref:System.Data.DataSet>, and \"source\" to name the second (parameter) <xref:System.Data.DataSet>. The target <xref:System.Data.DataSet> is so named because it is the object upon which an action (the merge) occurs. The second <xref:System.Data.DataSet> is called a \"source\" because the information it contains does not change, but instead is merged into the current <xref:System.Data.DataSet>.","nodes":[{"content":"To facilitate explanation of the <xref:System.Data.DataSet.Merge%2A> method, we use \"target\" to signify the current <xref:System.Data.DataSet>, and \"source\" to name the second (parameter) <xref:System.Data.DataSet>. The target <xref:System.Data.DataSet> is so named because it is the object upon which an action (the merge) occurs. The second <xref:System.Data.DataSet> is called a \"source\" because the information it contains does not change, but instead is merged into the current <xref:System.Data.DataSet>.","pos":[0,510],"nodes":[{"content":"To facilitate explanation of the <ph id=\"ph1\">&lt;xref:System.Data.DataSet.Merge%2A&gt;</ph> method, we use \"target\" to signify the current <ph id=\"ph2\">&lt;xref:System.Data.DataSet&gt;</ph>, and \"source\" to name the second (parameter) <ph id=\"ph3\">&lt;xref:System.Data.DataSet&gt;</ph>.","pos":[0,215],"source":"To facilitate explanation of the <xref:System.Data.DataSet.Merge%2A> method, we use \"target\" to signify the current <xref:System.Data.DataSet>, and \"source\" to name the second (parameter) <xref:System.Data.DataSet>."},{"content":"The target <ph id=\"ph1\">&lt;xref:System.Data.DataSet&gt;</ph> is so named because it is the object upon which an action (the merge) occurs.","pos":[216,331],"source":" The target <xref:System.Data.DataSet> is so named because it is the object upon which an action (the merge) occurs."},{"content":"The second <ph id=\"ph1\">&lt;xref:System.Data.DataSet&gt;</ph> is called a \"source\" because the information it contains does not change, but instead is merged into the current <ph id=\"ph2\">&lt;xref:System.Data.DataSet&gt;</ph>.","pos":[332,510],"source":" The second <xref:System.Data.DataSet> is called a \"source\" because the information it contains does not change, but instead is merged into the current <xref:System.Data.DataSet>."}]}]},{"pos":[2620,3294],"content":"When the <xref:System.Data.DataSet.Merge%2A> method is called, the schemas of the two <xref:System.Data.DataSet> objects are compared because it is possible that the schemas may have been changed. For example, in a business-to-business scenario, new columns may have been added to an XML schema by an automated process. If the source <xref:System.Data.DataSet> contains schema elements (added <xref:System.Data.DataColumn> objects) that are missing in the target, the schema elements can be added to the target by setting the `missingSchemaAction` argument to `MissingSchemaAction.Add`. In that case, the merged <xref:System.Data.DataSet> contains the added schema and data.","nodes":[{"content":"When the <ph id=\"ph1\">&lt;xref:System.Data.DataSet.Merge%2A&gt;</ph> method is called, the schemas of the two <ph id=\"ph2\">&lt;xref:System.Data.DataSet&gt;</ph> objects are compared because it is possible that the schemas may have been changed.","pos":[0,196],"source":"When the <xref:System.Data.DataSet.Merge%2A> method is called, the schemas of the two <xref:System.Data.DataSet> objects are compared because it is possible that the schemas may have been changed."},{"content":"For example, in a business-to-business scenario, new columns may have been added to an XML schema by an automated process.","pos":[197,319]},{"content":"If the source <ph id=\"ph1\">&lt;xref:System.Data.DataSet&gt;</ph> contains schema elements (added <ph id=\"ph2\">&lt;xref:System.Data.DataColumn&gt;</ph> objects) that are missing in the target, the schema elements can be added to the target by setting the <ph id=\"ph3\">`missingSchemaAction`</ph> argument to <ph id=\"ph4\">`MissingSchemaAction.Add`</ph>.","pos":[320,586],"source":" If the source <xref:System.Data.DataSet> contains schema elements (added <xref:System.Data.DataColumn> objects) that are missing in the target, the schema elements can be added to the target by setting the `missingSchemaAction` argument to `MissingSchemaAction.Add`."},{"content":"In that case, the merged <ph id=\"ph1\">&lt;xref:System.Data.DataSet&gt;</ph> contains the added schema and data.","pos":[587,674],"source":" In that case, the merged <xref:System.Data.DataSet> contains the added schema and data."}]},{"pos":[3301,3343],"content":"After merging schemas, the data is merged.","nodes":[{"content":"After merging schemas, the data is merged.","pos":[0,42]}]},{"pos":[3350,3721],"content":"When merging a new source <xref:System.Data.DataSet> into the target, any source rows with a <xref:System.Data.DataRowState> value of `Unchanged`, `Modified`, or `Deleted` are matched to target rows with the same primary key values. Source rows with a `DataRowState` value of `Added` are matched to new target rows with the same primary key values as the new source rows.","nodes":[{"content":"When merging a new source <ph id=\"ph1\">&lt;xref:System.Data.DataSet&gt;</ph> into the target, any source rows with a <ph id=\"ph2\">&lt;xref:System.Data.DataRowState&gt;</ph> value of <ph id=\"ph3\">`Unchanged`</ph>, <ph id=\"ph4\">`Modified`</ph>, or <ph id=\"ph5\">`Deleted`</ph> are matched to target rows with the same primary key values.","pos":[0,232],"source":"When merging a new source <xref:System.Data.DataSet> into the target, any source rows with a <xref:System.Data.DataRowState> value of `Unchanged`, `Modified`, or `Deleted` are matched to target rows with the same primary key values."},{"content":"Source rows with a <ph id=\"ph1\">`DataRowState`</ph> value of <ph id=\"ph2\">`Added`</ph> are matched to new target rows with the same primary key values as the new source rows.","pos":[233,371],"source":" Source rows with a `DataRowState` value of `Added` are matched to new target rows with the same primary key values as the new source rows."}]},{"pos":[3728,4223],"content":"During a merge, constraints are disabled. If any constraints cannot be enabled at the end of merge, a <xref:System.Data.ConstraintException> is generated and the merged data is retained while the constraints are disabled. In this case, the <xref:System.Data.DataSet.EnforceConstraints%2A> property is set to `false`, and all rows that are invalid are marked in error. The errors must be resolved before attempting to reset the <xref:System.Data.DataSet.EnforceConstraints%2A> property to `true`.","nodes":[{"content":"During a merge, constraints are disabled.","pos":[0,41]},{"content":"If any constraints cannot be enabled at the end of merge, a <ph id=\"ph1\">&lt;xref:System.Data.ConstraintException&gt;</ph> is generated and the merged data is retained while the constraints are disabled.","pos":[42,221],"source":" If any constraints cannot be enabled at the end of merge, a <xref:System.Data.ConstraintException> is generated and the merged data is retained while the constraints are disabled."},{"content":"In this case, the <ph id=\"ph1\">&lt;xref:System.Data.DataSet.EnforceConstraints%2A&gt;</ph> property is set to <ph id=\"ph2\">`false`</ph>, and all rows that are invalid are marked in error.","pos":[222,367],"source":" In this case, the <xref:System.Data.DataSet.EnforceConstraints%2A> property is set to `false`, and all rows that are invalid are marked in error."},{"content":"The errors must be resolved before attempting to reset the <ph id=\"ph1\">&lt;xref:System.Data.DataSet.EnforceConstraints%2A&gt;</ph> property to <ph id=\"ph2\">`true`</ph>.","pos":[368,495],"source":" The errors must be resolved before attempting to reset the <xref:System.Data.DataSet.EnforceConstraints%2A> property to `true`."}]}],"pos":[164709,168955],"yaml":true,"extradata":"MT"},{"content":"The `DataSet` whose data and schema will be merged.","nodes":[{"pos":[0,51],"content":"The <ph id=\"ph1\">`DataSet`</ph> whose data and schema will be merged.","source":"The `DataSet` whose data and schema will be merged."}],"pos":[170080,170132],"yaml":true},{"content":"`true` to preserve changes in the current `DataSet`; otherwise `false`.","nodes":[{"pos":[0,71],"content":"<ph id=\"ph1\">`true`</ph> to preserve changes in the current <ph id=\"ph2\">`DataSet`</ph>; otherwise <ph id=\"ph3\">`false`</ph>.","source":"`true` to preserve changes in the current `DataSet`; otherwise `false`."}],"pos":[170204,170278],"yaml":true},{"content":"One of the <xref href=\"System.Data.MissingSchemaAction\"></xref> values.","nodes":[{"pos":[0,71],"content":"One of the <ph id=\"ph1\">&lt;xref href=\"System.Data.MissingSchemaAction\"&gt;&lt;/xref&gt;</ph> values.","source":"One of the <xref href=\"System.Data.MissingSchemaAction\"></xref> values."}],"pos":[170371,170443],"yaml":true},{"content":"The <code>dataSet</code> is `null`.","nodes":[{"pos":[0,35],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">dataSet</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">`null`</ph>.","source":"The <code>dataSet</code> is `null`."}],"pos":[170598,170634],"yaml":true},{"content":"Merges a specified <xref href=\"System.Data.DataTable\"></xref> and its schema into the current `DataSet`, preserving or discarding changes in the `DataSet` and handling an incompatible schema according to the given arguments.","nodes":[{"pos":[0,224],"content":"Merges a specified <ph id=\"ph1\">&lt;xref href=\"System.Data.DataTable\"&gt;&lt;/xref&gt;</ph> and its schema into the current <ph id=\"ph2\">`DataSet`</ph>, preserving or discarding changes in the <ph id=\"ph3\">`DataSet`</ph> and handling an incompatible schema according to the given arguments.","source":"Merges a specified <xref href=\"System.Data.DataTable\"></xref> and its schema into the current `DataSet`, preserving or discarding changes in the `DataSet` and handling an incompatible schema according to the given arguments."}],"pos":[172010,172235],"yaml":true},{"content":"The <xref:System.Data.DataSet.Merge%2A> method is used to merge two <xref:System.Data.DataSet> objects that have largely similar schemas. A merge is typically used on a client application to incorporate the latest changes from a data source into an existing <xref:System.Data.DataSet>. This allows the client application to have a refreshed <xref:System.Data.DataSet> with the latest data from the data source.  \n  \n The <xref:System.Data.DataSet.Merge%2A> method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing <xref:System.Data.DataSet>.  \n  \n iOn a client application, it is common to have a single button that the user can click that gathers the changed data and validates it before sending it back to a middle-tier component. In this scenario, the <xref:System.Data.DataSet.GetChanges%2A> method is first invoked. That method returns a second <xref:System.Data.DataSet> optimized for validating and merging. This second <xref:System.Data.DataSet> object contains only the <xref:System.Data.DataTable> and <xref:System.Data.DataRow> objects that were changed, resulting in a subset of the original <xref:System.Data.DataSet>. This subset is generally smaller, and thus more efficiently passed back to a middle-tier component. The middle-tier component then updates the original data source with the changes through stored procedures. The middle tier can then send back either a new <xref:System.Data.DataSet> that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source. (For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned <xref:System.Data.DataSet> can be merged back into the client application's original <xref:System.Data.DataSet> with the <xref:System.Data.DataSet.Merge%2A> method.  \n  \n When the <xref:System.Data.DataSet.Merge%2A> method is called, the schemas of the two <xref:System.Data.DataSet> objects are compared because it is possible that the schemas may have been changed. For example, in a business-to-business scenario, new columns may have been added to an XML schema by an automated process. If the source <xref:System.Data.DataSet> contains schema elements (added <xref:System.Data.DataColumn> objects) that are missing in the target, the schema elements can be added to the target by setting the `missingSchemaAction` argument to `MissingSchemaAction.Add`. In that case, the merged <xref:System.Data.DataSet> contains the added schema and data.  \n  \n After merging schemas, the data is merged.  \n  \n When merging a new source <xref:System.Data.DataSet> into the target, any source rows with a <xref:System.Data.DataRowState> value of `Unchanged`, `Modified`, or `Deleted` are matched to target rows with the same primary key values. Source rows with a `DataRowState` value of `Added` are matched to new target rows with the same primary key values as the new source rows.  \n  \n During a merge, constraints are disabled. If any constraints cannot be enabled at the end of merge, a <xref:System.Data.ConstraintException> is generated and the merged data is retained while the constraints are disabled. In this case, the <xref:System.Data.DataSet.EnforceConstraints%2A> property is set to `false`, and all rows that are invalid are marked in error. The errors must be resolved before attempting to reset the <xref:System.Data.DataSet.EnforceConstraints%2A> property to `true`.","nodes":[{"pos":[0,410],"content":"The <xref:System.Data.DataSet.Merge%2A> method is used to merge two <xref:System.Data.DataSet> objects that have largely similar schemas. A merge is typically used on a client application to incorporate the latest changes from a data source into an existing <xref:System.Data.DataSet>. This allows the client application to have a refreshed <xref:System.Data.DataSet> with the latest data from the data source.","nodes":[{"content":"The <xref:System.Data.DataSet.Merge%2A> method is used to merge two <xref:System.Data.DataSet> objects that have largely similar schemas. A merge is typically used on a client application to incorporate the latest changes from a data source into an existing <xref:System.Data.DataSet>. This allows the client application to have a refreshed <xref:System.Data.DataSet> with the latest data from the data source.","pos":[0,410],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Data.DataSet.Merge%2A&gt;</ph> method is used to merge two <ph id=\"ph2\">&lt;xref:System.Data.DataSet&gt;</ph> objects that have largely similar schemas.","pos":[0,137],"source":"The <xref:System.Data.DataSet.Merge%2A> method is used to merge two <xref:System.Data.DataSet> objects that have largely similar schemas."},{"content":"A merge is typically used on a client application to incorporate the latest changes from a data source into an existing <ph id=\"ph1\">&lt;xref:System.Data.DataSet&gt;</ph>.","pos":[138,285],"source":" A merge is typically used on a client application to incorporate the latest changes from a data source into an existing <xref:System.Data.DataSet>."},{"content":"This allows the client application to have a refreshed <ph id=\"ph1\">&lt;xref:System.Data.DataSet&gt;</ph> with the latest data from the data source.","pos":[286,410],"source":" This allows the client application to have a refreshed <xref:System.Data.DataSet> with the latest data from the data source."}]}]},{"pos":[417,680],"content":"The <xref:System.Data.DataSet.Merge%2A> method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing <xref:System.Data.DataSet>.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Data.DataSet.Merge%2A&gt;</ph> method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing <ph id=\"ph2\">&lt;xref:System.Data.DataSet&gt;</ph>.","pos":[0,263],"source":"The <xref:System.Data.DataSet.Merge%2A> method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing <xref:System.Data.DataSet>."}]},{"pos":[687,2097],"content":"iOn a client application, it is common to have a single button that the user can click that gathers the changed data and validates it before sending it back to a middle-tier component. In this scenario, the <xref:System.Data.DataSet.GetChanges%2A> method is first invoked. That method returns a second <xref:System.Data.DataSet> optimized for validating and merging. This second <xref:System.Data.DataSet> object contains only the <xref:System.Data.DataTable> and <xref:System.Data.DataRow> objects that were changed, resulting in a subset of the original <xref:System.Data.DataSet>. This subset is generally smaller, and thus more efficiently passed back to a middle-tier component. The middle-tier component then updates the original data source with the changes through stored procedures. The middle tier can then send back either a new <xref:System.Data.DataSet> that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source. (For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned <xref:System.Data.DataSet> can be merged back into the client application's original <xref:System.Data.DataSet> with the <xref:System.Data.DataSet.Merge%2A> method.","nodes":[{"content":"iOn a client application, it is common to have a single button that the user can click that gathers the changed data and validates it before sending it back to a middle-tier component. In this scenario, the <xref:System.Data.DataSet.GetChanges%2A> method is first invoked. That method returns a second <xref:System.Data.DataSet> optimized for validating and merging. This second <xref:System.Data.DataSet> object contains only the <xref:System.Data.DataTable> and <xref:System.Data.DataRow> objects that were changed, resulting in a subset of the original <xref:System.Data.DataSet>. This subset is generally smaller, and thus more efficiently passed back to a middle-tier component. The middle-tier component then updates the original data source with the changes through stored procedures. The middle tier can then send back either a new <xref:System.Data.DataSet> that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source. (For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned <xref:System.Data.DataSet> can be merged back into the client application's original <xref:System.Data.DataSet> with the <xref:System.Data.DataSet.Merge%2A> method.","pos":[0,1410],"nodes":[{"content":"iOn a client application, it is common to have a single button that the user can click that gathers the changed data and validates it before sending it back to a middle-tier component.","pos":[0,184]},{"content":"In this scenario, the <ph id=\"ph1\">&lt;xref:System.Data.DataSet.GetChanges%2A&gt;</ph> method is first invoked.","pos":[185,272],"source":" In this scenario, the <xref:System.Data.DataSet.GetChanges%2A> method is first invoked."},{"content":"That method returns a second <ph id=\"ph1\">&lt;xref:System.Data.DataSet&gt;</ph> optimized for validating and merging.","pos":[273,366],"source":" That method returns a second <xref:System.Data.DataSet> optimized for validating and merging."},{"content":"This second <ph id=\"ph1\">&lt;xref:System.Data.DataSet&gt;</ph> object contains only the <ph id=\"ph2\">&lt;xref:System.Data.DataTable&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.Data.DataRow&gt;</ph> objects that were changed, resulting in a subset of the original <ph id=\"ph4\">&lt;xref:System.Data.DataSet&gt;</ph>.","pos":[367,583],"source":" This second <xref:System.Data.DataSet> object contains only the <xref:System.Data.DataTable> and <xref:System.Data.DataRow> objects that were changed, resulting in a subset of the original <xref:System.Data.DataSet>."},{"content":"This subset is generally smaller, and thus more efficiently passed back to a middle-tier component.","pos":[584,683]},{"content":"The middle-tier component then updates the original data source with the changes through stored procedures.","pos":[684,791]},{"content":"The middle tier can then send back either a new <ph id=\"ph1\">&lt;xref:System.Data.DataSet&gt;</ph> that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source.","pos":[792,1070],"source":" The middle tier can then send back either a new <xref:System.Data.DataSet> that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source."},{"content":"(For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned <ph id=\"ph1\">&lt;xref:System.Data.DataSet&gt;</ph> can be merged back into the client application's original <ph id=\"ph2\">&lt;xref:System.Data.DataSet&gt;</ph> with the <ph id=\"ph3\">&lt;xref:System.Data.DataSet.Merge%2A&gt;</ph> method.","pos":[1071,1410],"source":" (For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned <xref:System.Data.DataSet> can be merged back into the client application's original <xref:System.Data.DataSet> with the <xref:System.Data.DataSet.Merge%2A> method."}]}]},{"pos":[2104,2778],"content":"When the <xref:System.Data.DataSet.Merge%2A> method is called, the schemas of the two <xref:System.Data.DataSet> objects are compared because it is possible that the schemas may have been changed. For example, in a business-to-business scenario, new columns may have been added to an XML schema by an automated process. If the source <xref:System.Data.DataSet> contains schema elements (added <xref:System.Data.DataColumn> objects) that are missing in the target, the schema elements can be added to the target by setting the `missingSchemaAction` argument to `MissingSchemaAction.Add`. In that case, the merged <xref:System.Data.DataSet> contains the added schema and data.","nodes":[{"content":"When the <ph id=\"ph1\">&lt;xref:System.Data.DataSet.Merge%2A&gt;</ph> method is called, the schemas of the two <ph id=\"ph2\">&lt;xref:System.Data.DataSet&gt;</ph> objects are compared because it is possible that the schemas may have been changed.","pos":[0,196],"source":"When the <xref:System.Data.DataSet.Merge%2A> method is called, the schemas of the two <xref:System.Data.DataSet> objects are compared because it is possible that the schemas may have been changed."},{"content":"For example, in a business-to-business scenario, new columns may have been added to an XML schema by an automated process.","pos":[197,319]},{"content":"If the source <ph id=\"ph1\">&lt;xref:System.Data.DataSet&gt;</ph> contains schema elements (added <ph id=\"ph2\">&lt;xref:System.Data.DataColumn&gt;</ph> objects) that are missing in the target, the schema elements can be added to the target by setting the <ph id=\"ph3\">`missingSchemaAction`</ph> argument to <ph id=\"ph4\">`MissingSchemaAction.Add`</ph>.","pos":[320,586],"source":" If the source <xref:System.Data.DataSet> contains schema elements (added <xref:System.Data.DataColumn> objects) that are missing in the target, the schema elements can be added to the target by setting the `missingSchemaAction` argument to `MissingSchemaAction.Add`."},{"content":"In that case, the merged <ph id=\"ph1\">&lt;xref:System.Data.DataSet&gt;</ph> contains the added schema and data.","pos":[587,674],"source":" In that case, the merged <xref:System.Data.DataSet> contains the added schema and data."}]},{"pos":[2785,2827],"content":"After merging schemas, the data is merged.","nodes":[{"content":"After merging schemas, the data is merged.","pos":[0,42]}]},{"pos":[2834,3205],"content":"When merging a new source <xref:System.Data.DataSet> into the target, any source rows with a <xref:System.Data.DataRowState> value of `Unchanged`, `Modified`, or `Deleted` are matched to target rows with the same primary key values. Source rows with a `DataRowState` value of `Added` are matched to new target rows with the same primary key values as the new source rows.","nodes":[{"content":"When merging a new source <ph id=\"ph1\">&lt;xref:System.Data.DataSet&gt;</ph> into the target, any source rows with a <ph id=\"ph2\">&lt;xref:System.Data.DataRowState&gt;</ph> value of <ph id=\"ph3\">`Unchanged`</ph>, <ph id=\"ph4\">`Modified`</ph>, or <ph id=\"ph5\">`Deleted`</ph> are matched to target rows with the same primary key values.","pos":[0,232],"source":"When merging a new source <xref:System.Data.DataSet> into the target, any source rows with a <xref:System.Data.DataRowState> value of `Unchanged`, `Modified`, or `Deleted` are matched to target rows with the same primary key values."},{"content":"Source rows with a <ph id=\"ph1\">`DataRowState`</ph> value of <ph id=\"ph2\">`Added`</ph> are matched to new target rows with the same primary key values as the new source rows.","pos":[233,371],"source":" Source rows with a `DataRowState` value of `Added` are matched to new target rows with the same primary key values as the new source rows."}]},{"pos":[3212,3707],"content":"During a merge, constraints are disabled. If any constraints cannot be enabled at the end of merge, a <xref:System.Data.ConstraintException> is generated and the merged data is retained while the constraints are disabled. In this case, the <xref:System.Data.DataSet.EnforceConstraints%2A> property is set to `false`, and all rows that are invalid are marked in error. The errors must be resolved before attempting to reset the <xref:System.Data.DataSet.EnforceConstraints%2A> property to `true`.","nodes":[{"content":"During a merge, constraints are disabled.","pos":[0,41]},{"content":"If any constraints cannot be enabled at the end of merge, a <ph id=\"ph1\">&lt;xref:System.Data.ConstraintException&gt;</ph> is generated and the merged data is retained while the constraints are disabled.","pos":[42,221],"source":" If any constraints cannot be enabled at the end of merge, a <xref:System.Data.ConstraintException> is generated and the merged data is retained while the constraints are disabled."},{"content":"In this case, the <ph id=\"ph1\">&lt;xref:System.Data.DataSet.EnforceConstraints%2A&gt;</ph> property is set to <ph id=\"ph2\">`false`</ph>, and all rows that are invalid are marked in error.","pos":[222,367],"source":" In this case, the <xref:System.Data.DataSet.EnforceConstraints%2A> property is set to `false`, and all rows that are invalid are marked in error."},{"content":"The errors must be resolved before attempting to reset the <ph id=\"ph1\">&lt;xref:System.Data.DataSet.EnforceConstraints%2A&gt;</ph> property to <ph id=\"ph2\">`true`</ph>.","pos":[368,495],"source":" The errors must be resolved before attempting to reset the <xref:System.Data.DataSet.EnforceConstraints%2A> property to `true`."}]}],"pos":[172246,175968],"yaml":true,"extradata":"MT"},{"content":"The `DataTable` whose data and schema will be merged.","nodes":[{"pos":[0,53],"content":"The <ph id=\"ph1\">`DataTable`</ph> whose data and schema will be merged.","source":"The `DataTable` whose data and schema will be merged."}],"pos":[177016,177070],"yaml":true},{"content":"One of the <xref href=\"System.Data.MissingSchemaAction\"></xref> values.","nodes":[{"pos":[0,71],"content":"One of the <ph id=\"ph1\">&lt;xref href=\"System.Data.MissingSchemaAction\"&gt;&lt;/xref&gt;</ph> values.","source":"One of the <xref href=\"System.Data.MissingSchemaAction\"></xref> values."}],"pos":[177142,177214],"yaml":true},{"content":"`true` to preserve changes in the `DataSet`; otherwise `false`.","nodes":[{"pos":[0,63],"content":"<ph id=\"ph1\">`true`</ph> to preserve changes in the <ph id=\"ph2\">`DataSet`</ph>; otherwise <ph id=\"ph3\">`false`</ph>.","source":"`true` to preserve changes in the `DataSet`; otherwise `false`."}],"pos":[177307,177373],"yaml":true},{"content":"The <code>dataSet</code> is `null`.","nodes":[{"pos":[0,35],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">dataSet</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">`null`</ph>.","source":"The <code>dataSet</code> is `null`."}],"pos":[177528,177564],"yaml":true},{"content":"Occurs when a target and source <xref href=\"System.Data.DataRow\"></xref> have the same primary key value, and <xref href=\"System.Data.DataSet.EnforceConstraints\"></xref> is set to true.","nodes":[{"pos":[0,185],"content":"Occurs when a target and source <ph id=\"ph1\">&lt;xref href=\"System.Data.DataRow\"&gt;&lt;/xref&gt;</ph> have the same primary key value, and <ph id=\"ph2\">&lt;xref href=\"System.Data.DataSet.EnforceConstraints\"&gt;&lt;/xref&gt;</ph> is set to true.","source":"Occurs when a target and source <xref href=\"System.Data.DataRow\"></xref> have the same primary key value, and <xref href=\"System.Data.DataSet.EnforceConstraints\"></xref> is set to true."}],"pos":[178642,178828],"yaml":true},{"content":"For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).","nodes":[{"pos":[0,142],"content":"For more information about handling events, see <bpt id=\"p1\">[</bpt>NIB: Consuming Events<ept id=\"p1\">](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)</ept>.","source":"For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)."}],"pos":[178839,178984],"yaml":true,"extradata":"MT"},{"content":"Gets or sets the namespace of the <xref href=\"System.Data.DataSet\"></xref>.","nodes":[{"pos":[0,75],"content":"Gets or sets the namespace of the <ph id=\"ph1\">&lt;xref href=\"System.Data.DataSet\"&gt;&lt;/xref&gt;</ph>.","source":"Gets or sets the namespace of the <xref href=\"System.Data.DataSet\"></xref>."}],"pos":[180697,180773],"yaml":true},{"content":"The <xref:System.Data.DataSet.Namespace%2A> property is used when reading and writing an XML document into the <xref:System.Data.DataSet> using the <xref:System.Data.DataSet.ReadXml%2A>, <xref:System.Data.DataSet.WriteXml%2A>, <xref:System.Data.DataSet.ReadXmlSchema%2A>, or <xref:System.Data.DataSet.WriteXmlSchema%2A> methods.  \n  \n The namespace of an XML document is used to scope XML attributes and elements when read into a <xref:System.Data.DataSet>. For example, if a <xref:System.Data.DataSet> contains a schema that was read from a document with the namespace \"myCompany,\" and an attempt is made to read data only from a document with a different namespace, any data that does not correspond to the existing schema is ignored.","nodes":[{"pos":[0,328],"content":"The <xref:System.Data.DataSet.Namespace%2A> property is used when reading and writing an XML document into the <xref:System.Data.DataSet> using the <xref:System.Data.DataSet.ReadXml%2A>, <xref:System.Data.DataSet.WriteXml%2A>, <xref:System.Data.DataSet.ReadXmlSchema%2A>, or <xref:System.Data.DataSet.WriteXmlSchema%2A> methods.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Data.DataSet.Namespace%2A&gt;</ph> property is used when reading and writing an XML document into the <ph id=\"ph2\">&lt;xref:System.Data.DataSet&gt;</ph> using the <ph id=\"ph3\">&lt;xref:System.Data.DataSet.ReadXml%2A&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.Data.DataSet.WriteXml%2A&gt;</ph>, <ph id=\"ph5\">&lt;xref:System.Data.DataSet.ReadXmlSchema%2A&gt;</ph>, or <ph id=\"ph6\">&lt;xref:System.Data.DataSet.WriteXmlSchema%2A&gt;</ph> methods.","pos":[0,328],"source":"The <xref:System.Data.DataSet.Namespace%2A> property is used when reading and writing an XML document into the <xref:System.Data.DataSet> using the <xref:System.Data.DataSet.ReadXml%2A>, <xref:System.Data.DataSet.WriteXml%2A>, <xref:System.Data.DataSet.ReadXmlSchema%2A>, or <xref:System.Data.DataSet.WriteXmlSchema%2A> methods."}]},{"pos":[335,736],"content":"The namespace of an XML document is used to scope XML attributes and elements when read into a <xref:System.Data.DataSet>. For example, if a <xref:System.Data.DataSet> contains a schema that was read from a document with the namespace \"myCompany,\" and an attempt is made to read data only from a document with a different namespace, any data that does not correspond to the existing schema is ignored.","nodes":[{"content":"The namespace of an XML document is used to scope XML attributes and elements when read into a <xref:System.Data.DataSet>. For example, if a <xref:System.Data.DataSet> contains a schema that was read from a document with the namespace \"myCompany,\" and an attempt is made to read data only from a document with a different namespace, any data that does not correspond to the existing schema is ignored.","pos":[0,401],"nodes":[{"content":"The namespace of an XML document is used to scope XML attributes and elements when read into a <ph id=\"ph1\">&lt;xref:System.Data.DataSet&gt;</ph>.","pos":[0,122],"source":"The namespace of an XML document is used to scope XML attributes and elements when read into a <xref:System.Data.DataSet>."},{"content":"For example, if a <ph id=\"ph1\">&lt;xref:System.Data.DataSet&gt;</ph> contains a schema that was read from a document with the namespace \"myCompany,\" and an attempt is made to read data only from a document with a different namespace, any data that does not correspond to the existing schema is ignored.","pos":[123,401],"source":" For example, if a <xref:System.Data.DataSet> contains a schema that was read from a document with the namespace \"myCompany,\" and an attempt is made to read data only from a document with a different namespace, any data that does not correspond to the existing schema is ignored."}]}]}],"pos":[180784,181527],"yaml":true,"extradata":"MT"},{"content":"The namespace of the <xref href=\"System.Data.DataSet\"></xref>.","nodes":[{"pos":[0,62],"content":"The namespace of the <ph id=\"ph1\">&lt;xref href=\"System.Data.DataSet\"&gt;&lt;/xref&gt;</ph>.","source":"The namespace of the <xref href=\"System.Data.DataSet\"></xref>."}],"pos":[182134,182197],"yaml":true},{"content":"The namespace already has data.","nodes":[{"pos":[0,31],"content":"The namespace already has data.","nodes":[{"content":"The namespace already has data.","pos":[0,31]}]}],"pos":[182348,182380],"yaml":true},{"content":"Raises the <xref href=\"System.Data.DataSet.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)\"></xref> event.","nodes":[{"pos":[0,125],"content":"Raises the <ph id=\"ph1\">&lt;xref href=\"System.Data.DataSet.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)\"&gt;&lt;/xref&gt;</ph> event.","source":"Raises the <xref href=\"System.Data.DataSet.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)\"></xref> event."}],"pos":[183740,183866],"yaml":true},{"content":"Raising an event invokes the event handler through a delegate. For an overview, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).","nodes":[{"pos":[0,178],"content":"Raising an event invokes the event handler through a delegate. For an overview, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).","nodes":[{"content":"Raising an event invokes the event handler through a delegate.","pos":[0,62]},{"content":"For an overview, see <bpt id=\"p1\">[</bpt>NIB: Raising an Event<ept id=\"p1\">](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)</ept>.","pos":[63,178],"source":" For an overview, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)."}]}],"pos":[183877,184058],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.ComponentModel.PropertyChangedEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,99],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.ComponentModel.PropertyChangedEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"A <xref href=\"System.ComponentModel.PropertyChangedEventArgs\"></xref> that contains the event data."}],"pos":[184293,184393],"yaml":true},{"content":"Occurs when a <xref href=\"System.Data.DataRelation\"></xref> object is removed from a <xref href=\"System.Data.DataTable\"></xref>.","nodes":[{"pos":[0,128],"content":"Occurs when a <ph id=\"ph1\">&lt;xref href=\"System.Data.DataRelation\"&gt;&lt;/xref&gt;</ph> object is removed from a <ph id=\"ph2\">&lt;xref href=\"System.Data.DataTable\"&gt;&lt;/xref&gt;</ph>.","source":"Occurs when a <xref href=\"System.Data.DataRelation\"></xref> object is removed from a <xref href=\"System.Data.DataTable\"></xref>."}],"pos":[185691,185820],"yaml":true},{"content":"This method should be overridden by subclasses to restrict tables being removed","nodes":[{"pos":[0,79],"content":"This method should be overridden by subclasses to restrict tables being removed","nodes":[{"content":"This method should be overridden by subclasses to restrict tables being removed","pos":[0,79]}]}],"pos":[185831,185911],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Data.DataRelation\"></xref> being removed.","nodes":[{"pos":[0,64],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Data.DataRelation\"&gt;&lt;/xref&gt;</ph> being removed.","source":"The <xref href=\"System.Data.DataRelation\"></xref> being removed."}],"pos":[186102,186167],"yaml":true},{"content":"Occurs when a <xref href=\"System.Data.DataTable\"></xref> is removed from a <xref href=\"System.Data.DataSet\"></xref>.","nodes":[{"pos":[0,116],"content":"Occurs when a <ph id=\"ph1\">&lt;xref href=\"System.Data.DataTable\"&gt;&lt;/xref&gt;</ph> is removed from a <ph id=\"ph2\">&lt;xref href=\"System.Data.DataSet\"&gt;&lt;/xref&gt;</ph>.","source":"Occurs when a <xref href=\"System.Data.DataTable\"></xref> is removed from a <xref href=\"System.Data.DataSet\"></xref>."}],"pos":[187427,187544],"yaml":true},{"content":"This method can be overridden by subclasses to restrict tables from being removed.","nodes":[{"pos":[0,82],"content":"This method can be overridden by subclasses to restrict tables from being removed.","nodes":[{"content":"This method can be overridden by subclasses to restrict tables from being removed.","pos":[0,82]}]}],"pos":[187555,187638],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Data.DataTable\"></xref> being removed.","nodes":[{"pos":[0,61],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Data.DataTable\"&gt;&lt;/xref&gt;</ph> being removed.","source":"The <xref href=\"System.Data.DataTable\"></xref> being removed."}],"pos":[188338,188400],"yaml":true},{"content":"Gets or sets an XML prefix that aliases the namespace of the <xref href=\"System.Data.DataSet\"></xref>.","nodes":[{"pos":[0,102],"content":"Gets or sets an XML prefix that aliases the namespace of the <ph id=\"ph1\">&lt;xref href=\"System.Data.DataSet\"&gt;&lt;/xref&gt;</ph>.","source":"Gets or sets an XML prefix that aliases the namespace of the <xref href=\"System.Data.DataSet\"></xref>."}],"pos":[189515,189618],"yaml":true},{"content":"The <xref:System.Data.DataSet.Prefix%2A> property is used throughout an XML document to identify elements which belong to the namespace of the <xref:System.Data.DataSet> object (as set by the <xref:System.Data.DataSet.Namespace%2A> property).","nodes":[{"pos":[0,242],"content":"The <xref:System.Data.DataSet.Prefix%2A> property is used throughout an XML document to identify elements which belong to the namespace of the <xref:System.Data.DataSet> object (as set by the <xref:System.Data.DataSet.Namespace%2A> property).","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Data.DataSet.Prefix%2A&gt;</ph> property is used throughout an XML document to identify elements which belong to the namespace of the <ph id=\"ph2\">&lt;xref:System.Data.DataSet&gt;</ph> object (as set by the <ph id=\"ph3\">&lt;xref:System.Data.DataSet.Namespace%2A&gt;</ph> property).","pos":[0,242],"source":"The <xref:System.Data.DataSet.Prefix%2A> property is used throughout an XML document to identify elements which belong to the namespace of the <xref:System.Data.DataSet> object (as set by the <xref:System.Data.DataSet.Namespace%2A> property)."}]}],"pos":[189629,189872],"yaml":true,"extradata":"MT"},{"content":"The XML prefix for the <xref href=\"System.Data.DataSet\"></xref> namespace.","nodes":[{"pos":[0,74],"content":"The XML prefix for the <ph id=\"ph1\">&lt;xref href=\"System.Data.DataSet\"&gt;&lt;/xref&gt;</ph> namespace.","source":"The XML prefix for the <xref href=\"System.Data.DataSet\"></xref> namespace."}],"pos":[190476,190551],"yaml":true},{"content":"Sends a notification that the specified <xref href=\"System.Data.DataSet\"></xref> property is about to change.","nodes":[{"pos":[0,109],"content":"Sends a notification that the specified <ph id=\"ph1\">&lt;xref href=\"System.Data.DataSet\"&gt;&lt;/xref&gt;</ph> property is about to change.","source":"Sends a notification that the specified <xref href=\"System.Data.DataSet\"></xref> property is about to change."}],"pos":[191833,191943],"yaml":true},{"content":"The name of the property that is about to change.","nodes":[{"pos":[0,49],"content":"The name of the property that is about to change.","nodes":[{"content":"The name of the property that is about to change.","pos":[0,49]}]}],"pos":[192094,192144],"yaml":true},{"content":"Reads XML schema and data into the <xref href=\"System.Data.DataSet\"></xref> using the specified <xref href=\"System.Xml.XmlReader\"></xref> and <xref href=\"System.Data.XmlReadMode\"></xref>.","nodes":[{"pos":[0,187],"content":"Reads XML schema and data into the <ph id=\"ph1\">&lt;xref href=\"System.Data.DataSet\"&gt;&lt;/xref&gt;</ph> using the specified <ph id=\"ph2\">&lt;xref href=\"System.Xml.XmlReader\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph3\">&lt;xref href=\"System.Data.XmlReadMode\"&gt;&lt;/xref&gt;</ph>.","source":"Reads XML schema and data into the <xref href=\"System.Data.DataSet\"></xref> using the specified <xref href=\"System.Xml.XmlReader\"></xref> and <xref href=\"System.Data.XmlReadMode\"></xref>."}],"pos":[193481,193669],"yaml":true},{"content":"The <xref:System.Data.DataSet.ReadXml%2A> method provides a way to read either data only, or both data and schema into a <xref:System.Data.DataSet> from an XML document, whereas the <xref:System.Data.DataSet.ReadXmlSchema%2A> method reads only the schema. To read both data and schema, use one of the `ReadXML` overloads that includes the `mode` parameter, and set its value to `ReadSchema`.  \n  \n Note that the same is true for the <xref:System.Data.DataSet.WriteXml%2A> and <xref:System.Data.DataSet.WriteXmlSchema%2A> methods, respectively. To write XML data, or both schema and data from the `DataSet`, use the `WriteXml` method. To write just the schema, use the `WriteXmlSchema` method.  \n  \n> [!NOTE]\n>  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.  \n  \n If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data. If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.  \n  \n If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document. If the schema cannot be extended through inference in order to expose all data, an exception is raised.  \n  \n> [!NOTE]\n>  The `DataSet` does not associate an XML element with its corresponding `DataColumn` or `DataTable` when legal XML characters like (\"_\") are escaped in the serialized XML. The `DataSet` itself only escapes illegal XML characters in XML element names and hence can only consume the same. When legal characters in XML element name are escaped, the element is ignored while processing.  \n  \n If the XML Schema for a <xref:System.Data.DataSet> includes a `targetNamespace`, data may not be read, and you may encounter exceptions when calling <xref:System.Data.DataSet.ReadXml%2A> to load the <xref:System.Data.DataSet> with XML that contains elements with no qualifying namespace. To read unqualified elements, set `elementFormDefault` equal to \"qualified\" in your XML Schema as the following example demonstrates.  \n  \n```  \n<xsd:schema id=\"MyDataSet\"   \n   elementFormDefault=\"qualified\"   \n   targetNamespace=\"http://www.tempuri.org/MyDataSet.xsd\"   \n   xmlns=\"http://www.tempuri.org/MyDataSet.xsd\"   \n   xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"   \n   xmlns:msdata=\"urn:schemas-microsoft-com:xml-msdata\">  \n</xsd:schema>  \n```  \n  \n> [!NOTE]\n>  If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXml%2A> by specifying `XmlReadMode.ReadSchema`. This exception does not occur if you are using .NET Framework version 1.0.","nodes":[{"pos":[0,391],"content":"The <xref:System.Data.DataSet.ReadXml%2A> method provides a way to read either data only, or both data and schema into a <xref:System.Data.DataSet> from an XML document, whereas the <xref:System.Data.DataSet.ReadXmlSchema%2A> method reads only the schema. To read both data and schema, use one of the `ReadXML` overloads that includes the `mode` parameter, and set its value to `ReadSchema`.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Data.DataSet.ReadXml%2A&gt;</ph> method provides a way to read either data only, or both data and schema into a <ph id=\"ph2\">&lt;xref:System.Data.DataSet&gt;</ph> from an XML document, whereas the <ph id=\"ph3\">&lt;xref:System.Data.DataSet.ReadXmlSchema%2A&gt;</ph> method reads only the schema.","pos":[0,255],"source":"The <xref:System.Data.DataSet.ReadXml%2A> method provides a way to read either data only, or both data and schema into a <xref:System.Data.DataSet> from an XML document, whereas the <xref:System.Data.DataSet.ReadXmlSchema%2A> method reads only the schema."},{"content":"To read both data and schema, use one of the <ph id=\"ph1\">`ReadXML`</ph> overloads that includes the <ph id=\"ph2\">`mode`</ph> parameter, and set its value to <ph id=\"ph3\">`ReadSchema`</ph>.","pos":[256,391],"source":" To read both data and schema, use one of the `ReadXML` overloads that includes the `mode` parameter, and set its value to `ReadSchema`."}]},{"pos":[398,692],"content":"Note that the same is true for the <xref:System.Data.DataSet.WriteXml%2A> and <xref:System.Data.DataSet.WriteXmlSchema%2A> methods, respectively. To write XML data, or both schema and data from the `DataSet`, use the `WriteXml` method. To write just the schema, use the `WriteXmlSchema` method.","nodes":[{"content":"Note that the same is true for the <ph id=\"ph1\">&lt;xref:System.Data.DataSet.WriteXml%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Data.DataSet.WriteXmlSchema%2A&gt;</ph> methods, respectively.","pos":[0,145],"source":"Note that the same is true for the <xref:System.Data.DataSet.WriteXml%2A> and <xref:System.Data.DataSet.WriteXmlSchema%2A> methods, respectively."},{"content":"To write XML data, or both schema and data from the <ph id=\"ph1\">`DataSet`</ph>, use the <ph id=\"ph2\">`WriteXml`</ph> method.","pos":[146,235],"source":" To write XML data, or both schema and data from the `DataSet`, use the `WriteXml` method."},{"content":"To write just the schema, use the <ph id=\"ph1\">`WriteXmlSchema`</ph> method.","pos":[236,294],"source":" To write just the schema, use the `WriteXmlSchema` method."}]},{"pos":[700,965],"content":"[!NOTE]\n An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.","leadings":["","> "],"nodes":[{"content":"An <ph id=\"ph1\">&lt;xref:System.InvalidOperationException&gt;</ph> will be thrown if a column type in the <ph id=\"ph2\">`DataRow`</ph> being read from or written to implements <ph id=\"ph3\">&lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt;</ph> and does not implement <ph id=\"ph4\">&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;</ph>.","pos":[9,263],"source":" An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>."}]},{"pos":[972,1238],"content":"If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data. If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.","nodes":[{"content":"If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data. If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.","pos":[0,266],"nodes":[{"content":"If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data.","pos":[0,132]},{"content":"If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.","pos":[133,266]}]}]},{"pos":[1245,1501],"content":"If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document. If the schema cannot be extended through inference in order to expose all data, an exception is raised.","nodes":[{"content":"If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document. If the schema cannot be extended through inference in order to expose all data, an exception is raised.","pos":[0,256],"nodes":[{"content":"If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document.","pos":[0,152]},{"content":"If the schema cannot be extended through inference in order to expose all data, an exception is raised.","pos":[153,256]}]}]},{"pos":[1509,1901],"content":"[!NOTE]\n The `DataSet` does not associate an XML element with its corresponding `DataColumn` or `DataTable` when legal XML characters like (\"_\") are escaped in the serialized XML. The `DataSet` itself only escapes illegal XML characters in XML element names and hence can only consume the same. When legal characters in XML element name are escaped, the element is ignored while processing.","leadings":["","> "],"nodes":[{"content":" The `DataSet` does not associate an XML element with its corresponding `DataColumn` or `DataTable` when legal XML characters like (\"_\") are escaped in the serialized XML. The `DataSet` itself only escapes illegal XML characters in XML element names and hence can only consume the same. When legal characters in XML element name are escaped, the element is ignored while processing.","pos":[8,390],"nodes":[{"content":"The <ph id=\"ph1\">`DataSet`</ph> does not associate an XML element with its corresponding <ph id=\"ph2\">`DataColumn`</ph> or <ph id=\"ph3\">`DataTable`</ph> when legal XML characters like (\"_\") are escaped in the serialized XML.","pos":[1,171],"source":" The `DataSet` does not associate an XML element with its corresponding `DataColumn` or `DataTable` when legal XML characters like (\"_\") are escaped in the serialized XML."},{"content":"The <ph id=\"ph1\">`DataSet`</ph> itself only escapes illegal XML characters in XML element names and hence can only consume the same.","pos":[172,286],"source":" The `DataSet` itself only escapes illegal XML characters in XML element names and hence can only consume the same."},{"content":"When legal characters in XML element name are escaped, the element is ignored while processing.","pos":[287,382]}]}]},{"pos":[1908,2329],"content":"If the XML Schema for a <xref:System.Data.DataSet> includes a `targetNamespace`, data may not be read, and you may encounter exceptions when calling <xref:System.Data.DataSet.ReadXml%2A> to load the <xref:System.Data.DataSet> with XML that contains elements with no qualifying namespace. To read unqualified elements, set `elementFormDefault` equal to \"qualified\" in your XML Schema as the following example demonstrates.","nodes":[{"content":"If the XML Schema for a <ph id=\"ph1\">&lt;xref:System.Data.DataSet&gt;</ph> includes a <ph id=\"ph2\">`targetNamespace`</ph>, data may not be read, and you may encounter exceptions when calling <ph id=\"ph3\">&lt;xref:System.Data.DataSet.ReadXml%2A&gt;</ph> to load the <ph id=\"ph4\">&lt;xref:System.Data.DataSet&gt;</ph> with XML that contains elements with no qualifying namespace.","pos":[0,287],"source":"If the XML Schema for a <xref:System.Data.DataSet> includes a `targetNamespace`, data may not be read, and you may encounter exceptions when calling <xref:System.Data.DataSet.ReadXml%2A> to load the <xref:System.Data.DataSet> with XML that contains elements with no qualifying namespace."},{"content":"To read unqualified elements, set <ph id=\"ph1\">`elementFormDefault`</ph> equal to \"qualified\" in your XML Schema as the following example demonstrates.","pos":[288,421],"source":" To read unqualified elements, set `elementFormDefault` equal to \"qualified\" in your XML Schema as the following example demonstrates."}]},{"pos":[2656,3048],"content":"[!NOTE]\n If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXml%2A> by specifying `XmlReadMode.ReadSchema`. This exception does not occur if you are using .NET Framework version 1.0.","leadings":["","> "],"nodes":[{"content":" If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXml%2A> by specifying `XmlReadMode.ReadSchema`. This exception does not occur if you are using .NET Framework version 1.0.","pos":[8,390],"nodes":[{"content":"If the schema for your <ph id=\"ph1\">&lt;xref:System.Data.DataSet&gt;</ph> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <ph id=\"ph2\">&lt;xref:System.Data.DataSet&gt;</ph> with <ph id=\"ph3\">&lt;xref:System.Data.DataSet.ReadXml%2A&gt;</ph> by specifying <ph id=\"ph4\">`XmlReadMode.ReadSchema`</ph>.","pos":[1,307],"source":" If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXml%2A> by specifying `XmlReadMode.ReadSchema`."},{"content":"This exception does not occur if you are using .NET Framework version 1.0.","pos":[308,382]}]}]}],"pos":[193680,196774],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Xml.XmlReader\"></xref> from which to read.","nodes":[{"pos":[0,65],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Xml.XmlReader\"&gt;&lt;/xref&gt;</ph> from which to read.","source":"The <xref href=\"System.Xml.XmlReader\"></xref> from which to read."}],"pos":[196982,197048],"yaml":true},{"content":"One of the <xref href=\"System.Data.XmlReadMode\"></xref> values.","nodes":[{"pos":[0,63],"content":"One of the <ph id=\"ph1\">&lt;xref href=\"System.Data.XmlReadMode\"&gt;&lt;/xref&gt;</ph> values.","source":"One of the <xref href=\"System.Data.XmlReadMode\"></xref> values."}],"pos":[197118,197182],"yaml":true},{"content":"The `XmlReadMode` used to read the data.","nodes":[{"pos":[0,40],"content":"The <ph id=\"ph1\">`XmlReadMode`</ph> used to read the data.","source":"The `XmlReadMode` used to read the data."}],"pos":[197249,197290],"yaml":true},{"content":"Reads XML schema and data into the <xref href=\"System.Data.DataSet\"></xref> using the specified file and <xref href=\"System.Data.XmlReadMode\"></xref>.","nodes":[{"pos":[0,150],"content":"Reads XML schema and data into the <ph id=\"ph1\">&lt;xref href=\"System.Data.DataSet\"&gt;&lt;/xref&gt;</ph> using the specified file and <ph id=\"ph2\">&lt;xref href=\"System.Data.XmlReadMode\"&gt;&lt;/xref&gt;</ph>.","source":"Reads XML schema and data into the <xref href=\"System.Data.DataSet\"></xref> using the specified file and <xref href=\"System.Data.XmlReadMode\"></xref>."}],"pos":[198583,198734],"yaml":true},{"content":"The <xref:System.Data.DataSet.ReadXml%2A> method provides a way to read either data only, or both data and schema into a <xref:System.Data.DataSet> from an XML document, whereas the <xref:System.Data.DataSet.ReadXmlSchema%2A> method reads only the schema. To read both data and schema, use one of the `ReadXML` overloads that includes the `mode` parameter, and set its value to `ReadSchema`.  \n  \n Note that the same is true for the <xref:System.Data.DataSet.WriteXml%2A> and <xref:System.Data.DataSet.WriteXmlSchema%2A> methods, respectively. To write XML data, or both schema and data from the `DataSet`, use the `WriteXml` method. To write just the schema, use the `WriteXmlSchema` method.  \n  \n> [!NOTE]\n>  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.  \n  \n If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data. If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.  \n  \n If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document. If the schema cannot be extended through inference in order to expose all data, an exception is raised.  \n  \n> [!NOTE]\n>  The `DataSet` does not associate an XML element with its corresponding `DataColumn` or `DataTable` when legal XML characters like (\"_\") are escaped in the serialized XML. The `DataSet` itself only escapes illegal XML characters in XML element names and hence can only consume the same. When legal characters in XML element name are escaped, the element is ignored while processing.  \n  \n If the XML Schema for a <xref:System.Data.DataSet> includes a `targetNamespace`, data may not be read, and you may encounter exceptions when calling <xref:System.Data.DataSet.ReadXml%2A> to load the <xref:System.Data.DataSet> with XML that contains elements with no qualifying namespace. To read unqualified elements, set `elementFormDefault` equal to \"qualified\" in your XML Schema as the following example demonstrates.  \n  \n```  \n<xsd:schema id=\"MyDataSet\"   \n   elementFormDefault=\"qualified\"   \n   targetNamespace=\"http://www.tempuri.org/MyDataSet.xsd\"   \n   xmlns=\"http://www.tempuri.org/MyDataSet.xsd\"   \n   xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"   \n   xmlns:msdata=\"urn:schemas-microsoft-com:xml-msdata\">  \n</xsd:schema>  \n```  \n  \n> [!NOTE]\n>  If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXml%2A> by specifying `XmlReadMode.ReadSchema`. This exception does not occur if you are using .NET Framework version 1.0.","nodes":[{"pos":[0,391],"content":"The <xref:System.Data.DataSet.ReadXml%2A> method provides a way to read either data only, or both data and schema into a <xref:System.Data.DataSet> from an XML document, whereas the <xref:System.Data.DataSet.ReadXmlSchema%2A> method reads only the schema. To read both data and schema, use one of the `ReadXML` overloads that includes the `mode` parameter, and set its value to `ReadSchema`.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Data.DataSet.ReadXml%2A&gt;</ph> method provides a way to read either data only, or both data and schema into a <ph id=\"ph2\">&lt;xref:System.Data.DataSet&gt;</ph> from an XML document, whereas the <ph id=\"ph3\">&lt;xref:System.Data.DataSet.ReadXmlSchema%2A&gt;</ph> method reads only the schema.","pos":[0,255],"source":"The <xref:System.Data.DataSet.ReadXml%2A> method provides a way to read either data only, or both data and schema into a <xref:System.Data.DataSet> from an XML document, whereas the <xref:System.Data.DataSet.ReadXmlSchema%2A> method reads only the schema."},{"content":"To read both data and schema, use one of the <ph id=\"ph1\">`ReadXML`</ph> overloads that includes the <ph id=\"ph2\">`mode`</ph> parameter, and set its value to <ph id=\"ph3\">`ReadSchema`</ph>.","pos":[256,391],"source":" To read both data and schema, use one of the `ReadXML` overloads that includes the `mode` parameter, and set its value to `ReadSchema`."}]},{"pos":[398,692],"content":"Note that the same is true for the <xref:System.Data.DataSet.WriteXml%2A> and <xref:System.Data.DataSet.WriteXmlSchema%2A> methods, respectively. To write XML data, or both schema and data from the `DataSet`, use the `WriteXml` method. To write just the schema, use the `WriteXmlSchema` method.","nodes":[{"content":"Note that the same is true for the <ph id=\"ph1\">&lt;xref:System.Data.DataSet.WriteXml%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Data.DataSet.WriteXmlSchema%2A&gt;</ph> methods, respectively.","pos":[0,145],"source":"Note that the same is true for the <xref:System.Data.DataSet.WriteXml%2A> and <xref:System.Data.DataSet.WriteXmlSchema%2A> methods, respectively."},{"content":"To write XML data, or both schema and data from the <ph id=\"ph1\">`DataSet`</ph>, use the <ph id=\"ph2\">`WriteXml`</ph> method.","pos":[146,235],"source":" To write XML data, or both schema and data from the `DataSet`, use the `WriteXml` method."},{"content":"To write just the schema, use the <ph id=\"ph1\">`WriteXmlSchema`</ph> method.","pos":[236,294],"source":" To write just the schema, use the `WriteXmlSchema` method."}]},{"pos":[700,965],"content":"[!NOTE]\n An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.","leadings":["","> "],"nodes":[{"content":"An <ph id=\"ph1\">&lt;xref:System.InvalidOperationException&gt;</ph> will be thrown if a column type in the <ph id=\"ph2\">`DataRow`</ph> being read from or written to implements <ph id=\"ph3\">&lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt;</ph> and does not implement <ph id=\"ph4\">&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;</ph>.","pos":[9,263],"source":" An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>."}]},{"pos":[972,1238],"content":"If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data. If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.","nodes":[{"content":"If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data. If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.","pos":[0,266],"nodes":[{"content":"If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data.","pos":[0,132]},{"content":"If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.","pos":[133,266]}]}]},{"pos":[1245,1501],"content":"If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document. If the schema cannot be extended through inference in order to expose all data, an exception is raised.","nodes":[{"content":"If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document. If the schema cannot be extended through inference in order to expose all data, an exception is raised.","pos":[0,256],"nodes":[{"content":"If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document.","pos":[0,152]},{"content":"If the schema cannot be extended through inference in order to expose all data, an exception is raised.","pos":[153,256]}]}]},{"pos":[1509,1901],"content":"[!NOTE]\n The `DataSet` does not associate an XML element with its corresponding `DataColumn` or `DataTable` when legal XML characters like (\"_\") are escaped in the serialized XML. The `DataSet` itself only escapes illegal XML characters in XML element names and hence can only consume the same. When legal characters in XML element name are escaped, the element is ignored while processing.","leadings":["","> "],"nodes":[{"content":" The `DataSet` does not associate an XML element with its corresponding `DataColumn` or `DataTable` when legal XML characters like (\"_\") are escaped in the serialized XML. The `DataSet` itself only escapes illegal XML characters in XML element names and hence can only consume the same. When legal characters in XML element name are escaped, the element is ignored while processing.","pos":[8,390],"nodes":[{"content":"The <ph id=\"ph1\">`DataSet`</ph> does not associate an XML element with its corresponding <ph id=\"ph2\">`DataColumn`</ph> or <ph id=\"ph3\">`DataTable`</ph> when legal XML characters like (\"_\") are escaped in the serialized XML.","pos":[1,171],"source":" The `DataSet` does not associate an XML element with its corresponding `DataColumn` or `DataTable` when legal XML characters like (\"_\") are escaped in the serialized XML."},{"content":"The <ph id=\"ph1\">`DataSet`</ph> itself only escapes illegal XML characters in XML element names and hence can only consume the same.","pos":[172,286],"source":" The `DataSet` itself only escapes illegal XML characters in XML element names and hence can only consume the same."},{"content":"When legal characters in XML element name are escaped, the element is ignored while processing.","pos":[287,382]}]}]},{"pos":[1908,2329],"content":"If the XML Schema for a <xref:System.Data.DataSet> includes a `targetNamespace`, data may not be read, and you may encounter exceptions when calling <xref:System.Data.DataSet.ReadXml%2A> to load the <xref:System.Data.DataSet> with XML that contains elements with no qualifying namespace. To read unqualified elements, set `elementFormDefault` equal to \"qualified\" in your XML Schema as the following example demonstrates.","nodes":[{"content":"If the XML Schema for a <ph id=\"ph1\">&lt;xref:System.Data.DataSet&gt;</ph> includes a <ph id=\"ph2\">`targetNamespace`</ph>, data may not be read, and you may encounter exceptions when calling <ph id=\"ph3\">&lt;xref:System.Data.DataSet.ReadXml%2A&gt;</ph> to load the <ph id=\"ph4\">&lt;xref:System.Data.DataSet&gt;</ph> with XML that contains elements with no qualifying namespace.","pos":[0,287],"source":"If the XML Schema for a <xref:System.Data.DataSet> includes a `targetNamespace`, data may not be read, and you may encounter exceptions when calling <xref:System.Data.DataSet.ReadXml%2A> to load the <xref:System.Data.DataSet> with XML that contains elements with no qualifying namespace."},{"content":"To read unqualified elements, set <ph id=\"ph1\">`elementFormDefault`</ph> equal to \"qualified\" in your XML Schema as the following example demonstrates.","pos":[288,421],"source":" To read unqualified elements, set `elementFormDefault` equal to \"qualified\" in your XML Schema as the following example demonstrates."}]},{"pos":[2656,3048],"content":"[!NOTE]\n If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXml%2A> by specifying `XmlReadMode.ReadSchema`. This exception does not occur if you are using .NET Framework version 1.0.","leadings":["","> "],"nodes":[{"content":" If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXml%2A> by specifying `XmlReadMode.ReadSchema`. This exception does not occur if you are using .NET Framework version 1.0.","pos":[8,390],"nodes":[{"content":"If the schema for your <ph id=\"ph1\">&lt;xref:System.Data.DataSet&gt;</ph> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <ph id=\"ph2\">&lt;xref:System.Data.DataSet&gt;</ph> with <ph id=\"ph3\">&lt;xref:System.Data.DataSet.ReadXml%2A&gt;</ph> by specifying <ph id=\"ph4\">`XmlReadMode.ReadSchema`</ph>.","pos":[1,307],"source":" If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXml%2A> by specifying `XmlReadMode.ReadSchema`."},{"content":"This exception does not occur if you are using .NET Framework version 1.0.","pos":[308,382]}]}]}],"pos":[198745,201839],"yaml":true,"extradata":"MT"},{"content":"The filename (including the path) from which to read.","nodes":[{"pos":[0,53],"content":"The filename (including the path) from which to read.","nodes":[{"content":"The filename (including the path) from which to read.","pos":[0,53]}]}],"pos":[202030,202084],"yaml":true},{"content":"One of the <xref href=\"System.Data.XmlReadMode\"></xref> values.","nodes":[{"pos":[0,63],"content":"One of the <ph id=\"ph1\">&lt;xref href=\"System.Data.XmlReadMode\"&gt;&lt;/xref&gt;</ph> values.","source":"One of the <xref href=\"System.Data.XmlReadMode\"></xref> values."}],"pos":[202154,202218],"yaml":true},{"content":"The `XmlReadMode` used to read the data.","nodes":[{"pos":[0,40],"content":"The <ph id=\"ph1\">`XmlReadMode`</ph> used to read the data.","source":"The `XmlReadMode` used to read the data."}],"pos":[202285,202326],"yaml":true},{"content":"<xref href=\"System.Security.Permissions.FileIOPermission\"></xref> is not set to <xref href=\"System.Security.Permissions.FileIOPermissionAccess.Read\"></xref>.","nodes":[{"pos":[0,157],"content":"<ph id=\"ph1\">&lt;xref href=\"System.Security.Permissions.FileIOPermission\"&gt;&lt;/xref&gt;</ph> is not set to <ph id=\"ph2\">&lt;xref href=\"System.Security.Permissions.FileIOPermissionAccess.Read\"&gt;&lt;/xref&gt;</ph>.","source":"<xref href=\"System.Security.Permissions.FileIOPermission\"></xref> is not set to <xref href=\"System.Security.Permissions.FileIOPermissionAccess.Read\"></xref>."}],"pos":[202493,202651],"yaml":true},{"content":"Reads XML schema and data into the <xref href=\"System.Data.DataSet\"></xref> using the specified <xref href=\"System.IO.Stream\"></xref> and <xref href=\"System.Data.XmlReadMode\"></xref>.","nodes":[{"pos":[0,183],"content":"Reads XML schema and data into the <ph id=\"ph1\">&lt;xref href=\"System.Data.DataSet\"&gt;&lt;/xref&gt;</ph> using the specified <ph id=\"ph2\">&lt;xref href=\"System.IO.Stream\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph3\">&lt;xref href=\"System.Data.XmlReadMode\"&gt;&lt;/xref&gt;</ph>.","source":"Reads XML schema and data into the <xref href=\"System.Data.DataSet\"></xref> using the specified <xref href=\"System.IO.Stream\"></xref> and <xref href=\"System.Data.XmlReadMode\"></xref>."}],"pos":[203895,204079],"yaml":true},{"content":"The <xref:System.Data.DataSet.ReadXml%2A> method provides a way to read either data only, or both data and schema into a <xref:System.Data.DataSet> from an XML document, whereas the <xref:System.Data.DataSet.ReadXmlSchema%2A> method reads only the schema. To read both data and schema, use one of the `ReadXML` overloads that includes the `mode` parameter, and set its value to `ReadSchema`.  \n  \n The same is true for the <xref:System.Data.DataSet.WriteXml%2A> and <xref:System.Data.DataSet.WriteXmlSchema%2A> methods, respectively. To write XML data, or both schema and data from the `DataSet`, use the `WriteXml` method. To write just the schema, use the `WriteXmlSchema` method.  \n  \n> [!NOTE]\n>  When you use <xref:System.Data.DataSet.ReadXml%2A> and you set <xref:System.Data.XmlReadMode> to `Diffgram`, the content of the target `DataSet` and the original `DataSet` may differ because of how the diffgram is generated and processed. For more information on diffgrams, see [DiffGrams](~/docs/framework/data/adonet/dataset-datatable-dataview/diffgrams.md).  \n  \n> [!NOTE]\n>  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.  \n  \n If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data. If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.  \n  \n If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document. If the schema cannot be extended through inference in order to expose all data, an exception is raised.  \n  \n> [!NOTE]\n>  The `DataSet` does not associate an XML element with its corresponding `DataColumn` or `DataTable` when legal XML characters like (\"_\") are escaped in the serialized XML. The `DataSet` itself only escapes illegal XML characters in XML element names and hence can only consume the same. When legal characters in XML element name are escaped, the element is ignored while processing.  \n  \n If the XML Schema for a <xref:System.Data.DataSet> includes `targetNamespace`, data may not be read, and you may encounter exceptions when calling <xref:System.Data.DataSet.ReadXml%2A> to load the <xref:System.Data.DataSet> with XML that contains elements with no qualifying namespace. To read unqualified elements, set `elementFormDefault` equal to \"qualified\" in your XML Schema as the following example demonstrates.  \n  \n```  \n<xsd:schema id=\"MyDataSet\"   \n   elementFormDefault=\"qualified\"   \n   targetNamespace=\"http://www.tempuri.org/MyDataSet.xsd\"   \n   xmlns=\"http://www.tempuri.org/MyDataSet.xsd\"   \n   xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"   \n   xmlns:msdata=\"urn:schemas-microsoft-com:xml-msdata\">  \n</xsd:schema>  \n```  \n  \n> [!NOTE]\n>  If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXml%2A> by specifying `XmlReadMode.ReadSchema`. This exception does not occur if you are using .NET Framework version 1.0.","nodes":[{"pos":[0,391],"content":"The <xref:System.Data.DataSet.ReadXml%2A> method provides a way to read either data only, or both data and schema into a <xref:System.Data.DataSet> from an XML document, whereas the <xref:System.Data.DataSet.ReadXmlSchema%2A> method reads only the schema. To read both data and schema, use one of the `ReadXML` overloads that includes the `mode` parameter, and set its value to `ReadSchema`.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Data.DataSet.ReadXml%2A&gt;</ph> method provides a way to read either data only, or both data and schema into a <ph id=\"ph2\">&lt;xref:System.Data.DataSet&gt;</ph> from an XML document, whereas the <ph id=\"ph3\">&lt;xref:System.Data.DataSet.ReadXmlSchema%2A&gt;</ph> method reads only the schema.","pos":[0,255],"source":"The <xref:System.Data.DataSet.ReadXml%2A> method provides a way to read either data only, or both data and schema into a <xref:System.Data.DataSet> from an XML document, whereas the <xref:System.Data.DataSet.ReadXmlSchema%2A> method reads only the schema."},{"content":"To read both data and schema, use one of the <ph id=\"ph1\">`ReadXML`</ph> overloads that includes the <ph id=\"ph2\">`mode`</ph> parameter, and set its value to <ph id=\"ph3\">`ReadSchema`</ph>.","pos":[256,391],"source":" To read both data and schema, use one of the `ReadXML` overloads that includes the `mode` parameter, and set its value to `ReadSchema`."}]},{"pos":[398,682],"content":"The same is true for the <xref:System.Data.DataSet.WriteXml%2A> and <xref:System.Data.DataSet.WriteXmlSchema%2A> methods, respectively. To write XML data, or both schema and data from the `DataSet`, use the `WriteXml` method. To write just the schema, use the `WriteXmlSchema` method.","nodes":[{"content":"The same is true for the <ph id=\"ph1\">&lt;xref:System.Data.DataSet.WriteXml%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Data.DataSet.WriteXmlSchema%2A&gt;</ph> methods, respectively.","pos":[0,135],"source":"The same is true for the <xref:System.Data.DataSet.WriteXml%2A> and <xref:System.Data.DataSet.WriteXmlSchema%2A> methods, respectively."},{"content":"To write XML data, or both schema and data from the <ph id=\"ph1\">`DataSet`</ph>, use the <ph id=\"ph2\">`WriteXml`</ph> method.","pos":[136,225],"source":" To write XML data, or both schema and data from the `DataSet`, use the `WriteXml` method."},{"content":"To write just the schema, use the <ph id=\"ph1\">`WriteXmlSchema`</ph> method.","pos":[226,284],"source":" To write just the schema, use the `WriteXmlSchema` method."}]},{"pos":[690,1061],"content":"[!NOTE]\n When you use <xref:System.Data.DataSet.ReadXml%2A> and you set <xref:System.Data.XmlReadMode> to `Diffgram`, the content of the target `DataSet` and the original `DataSet` may differ because of how the diffgram is generated and processed. For more information on diffgrams, see [DiffGrams](~/docs/framework/data/adonet/dataset-datatable-dataview/diffgrams.md).","leadings":["","> "],"nodes":[{"content":" When you use <xref:System.Data.DataSet.ReadXml%2A> and you set <xref:System.Data.XmlReadMode> to `Diffgram`, the content of the target `DataSet` and the original `DataSet` may differ because of how the diffgram is generated and processed. For more information on diffgrams, see [DiffGrams](~/docs/framework/data/adonet/dataset-datatable-dataview/diffgrams.md).","pos":[8,369],"nodes":[{"content":"When you use <ph id=\"ph1\">&lt;xref:System.Data.DataSet.ReadXml%2A&gt;</ph> and you set <ph id=\"ph2\">&lt;xref:System.Data.XmlReadMode&gt;</ph> to <ph id=\"ph3\">`Diffgram`</ph>, the content of the target <ph id=\"ph4\">`DataSet`</ph> and the original <ph id=\"ph5\">`DataSet`</ph> may differ because of how the diffgram is generated and processed.","pos":[1,239],"source":" When you use <xref:System.Data.DataSet.ReadXml%2A> and you set <xref:System.Data.XmlReadMode> to `Diffgram`, the content of the target `DataSet` and the original `DataSet` may differ because of how the diffgram is generated and processed."},{"content":"For more information on diffgrams, see <bpt id=\"p1\">[</bpt>DiffGrams<ept id=\"p1\">](~/docs/framework/data/adonet/dataset-datatable-dataview/diffgrams.md)</ept>.","pos":[240,361],"source":" For more information on diffgrams, see [DiffGrams](~/docs/framework/data/adonet/dataset-datatable-dataview/diffgrams.md)."}]}]},{"pos":[1069,1334],"content":"[!NOTE]\n An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.","leadings":["","> "],"nodes":[{"content":"An <ph id=\"ph1\">&lt;xref:System.InvalidOperationException&gt;</ph> will be thrown if a column type in the <ph id=\"ph2\">`DataRow`</ph> being read from or written to implements <ph id=\"ph3\">&lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt;</ph> and does not implement <ph id=\"ph4\">&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;</ph>.","pos":[9,263],"source":" An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>."}]},{"pos":[1341,1607],"content":"If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data. If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.","nodes":[{"content":"If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data. If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.","pos":[0,266],"nodes":[{"content":"If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data.","pos":[0,132]},{"content":"If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.","pos":[133,266]}]}]},{"pos":[1614,1870],"content":"If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document. If the schema cannot be extended through inference in order to expose all data, an exception is raised.","nodes":[{"content":"If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document. If the schema cannot be extended through inference in order to expose all data, an exception is raised.","pos":[0,256],"nodes":[{"content":"If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document.","pos":[0,152]},{"content":"If the schema cannot be extended through inference in order to expose all data, an exception is raised.","pos":[153,256]}]}]},{"pos":[1878,2270],"content":"[!NOTE]\n The `DataSet` does not associate an XML element with its corresponding `DataColumn` or `DataTable` when legal XML characters like (\"_\") are escaped in the serialized XML. The `DataSet` itself only escapes illegal XML characters in XML element names and hence can only consume the same. When legal characters in XML element name are escaped, the element is ignored while processing.","leadings":["","> "],"nodes":[{"content":" The `DataSet` does not associate an XML element with its corresponding `DataColumn` or `DataTable` when legal XML characters like (\"_\") are escaped in the serialized XML. The `DataSet` itself only escapes illegal XML characters in XML element names and hence can only consume the same. When legal characters in XML element name are escaped, the element is ignored while processing.","pos":[8,390],"nodes":[{"content":"The <ph id=\"ph1\">`DataSet`</ph> does not associate an XML element with its corresponding <ph id=\"ph2\">`DataColumn`</ph> or <ph id=\"ph3\">`DataTable`</ph> when legal XML characters like (\"_\") are escaped in the serialized XML.","pos":[1,171],"source":" The `DataSet` does not associate an XML element with its corresponding `DataColumn` or `DataTable` when legal XML characters like (\"_\") are escaped in the serialized XML."},{"content":"The <ph id=\"ph1\">`DataSet`</ph> itself only escapes illegal XML characters in XML element names and hence can only consume the same.","pos":[172,286],"source":" The `DataSet` itself only escapes illegal XML characters in XML element names and hence can only consume the same."},{"content":"When legal characters in XML element name are escaped, the element is ignored while processing.","pos":[287,382]}]}]},{"pos":[2277,2696],"content":"If the XML Schema for a <xref:System.Data.DataSet> includes `targetNamespace`, data may not be read, and you may encounter exceptions when calling <xref:System.Data.DataSet.ReadXml%2A> to load the <xref:System.Data.DataSet> with XML that contains elements with no qualifying namespace. To read unqualified elements, set `elementFormDefault` equal to \"qualified\" in your XML Schema as the following example demonstrates.","nodes":[{"content":"If the XML Schema for a <ph id=\"ph1\">&lt;xref:System.Data.DataSet&gt;</ph> includes <ph id=\"ph2\">`targetNamespace`</ph>, data may not be read, and you may encounter exceptions when calling <ph id=\"ph3\">&lt;xref:System.Data.DataSet.ReadXml%2A&gt;</ph> to load the <ph id=\"ph4\">&lt;xref:System.Data.DataSet&gt;</ph> with XML that contains elements with no qualifying namespace.","pos":[0,285],"source":"If the XML Schema for a <xref:System.Data.DataSet> includes `targetNamespace`, data may not be read, and you may encounter exceptions when calling <xref:System.Data.DataSet.ReadXml%2A> to load the <xref:System.Data.DataSet> with XML that contains elements with no qualifying namespace."},{"content":"To read unqualified elements, set <ph id=\"ph1\">`elementFormDefault`</ph> equal to \"qualified\" in your XML Schema as the following example demonstrates.","pos":[286,419],"source":" To read unqualified elements, set `elementFormDefault` equal to \"qualified\" in your XML Schema as the following example demonstrates."}]},{"pos":[3023,3415],"content":"[!NOTE]\n If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXml%2A> by specifying `XmlReadMode.ReadSchema`. This exception does not occur if you are using .NET Framework version 1.0.","leadings":["","> "],"nodes":[{"content":" If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXml%2A> by specifying `XmlReadMode.ReadSchema`. This exception does not occur if you are using .NET Framework version 1.0.","pos":[8,390],"nodes":[{"content":"If the schema for your <ph id=\"ph1\">&lt;xref:System.Data.DataSet&gt;</ph> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <ph id=\"ph2\">&lt;xref:System.Data.DataSet&gt;</ph> with <ph id=\"ph3\">&lt;xref:System.Data.DataSet.ReadXml%2A&gt;</ph> by specifying <ph id=\"ph4\">`XmlReadMode.ReadSchema`</ph>.","pos":[1,307],"source":" If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXml%2A> by specifying `XmlReadMode.ReadSchema`."},{"content":"This exception does not occur if you are using .NET Framework version 1.0.","pos":[308,382]}]}]}],"pos":[204090,207554],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.IO.Stream\"></xref> from which to read.","nodes":[{"pos":[0,61],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.IO.Stream\"&gt;&lt;/xref&gt;</ph> from which to read.","source":"The <xref href=\"System.IO.Stream\"></xref> from which to read."}],"pos":[207754,207816],"yaml":true},{"content":"One of the <xref href=\"System.Data.XmlReadMode\"></xref> values.","nodes":[{"pos":[0,63],"content":"One of the <ph id=\"ph1\">&lt;xref href=\"System.Data.XmlReadMode\"&gt;&lt;/xref&gt;</ph> values.","source":"One of the <xref href=\"System.Data.XmlReadMode\"></xref> values."}],"pos":[207886,207950],"yaml":true},{"content":"The `XmlReadMode` used to read the data.","nodes":[{"pos":[0,40],"content":"The <ph id=\"ph1\">`XmlReadMode`</ph> used to read the data.","source":"The `XmlReadMode` used to read the data."}],"pos":[208017,208058],"yaml":true},{"content":"Reads XML schema and data into the <xref href=\"System.Data.DataSet\"></xref> using the specified <xref href=\"System.IO.TextReader\"></xref> and <xref href=\"System.Data.XmlReadMode\"></xref>.","nodes":[{"pos":[0,187],"content":"Reads XML schema and data into the <ph id=\"ph1\">&lt;xref href=\"System.Data.DataSet\"&gt;&lt;/xref&gt;</ph> using the specified <ph id=\"ph2\">&lt;xref href=\"System.IO.TextReader\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph3\">&lt;xref href=\"System.Data.XmlReadMode\"&gt;&lt;/xref&gt;</ph>.","source":"Reads XML schema and data into the <xref href=\"System.Data.DataSet\"></xref> using the specified <xref href=\"System.IO.TextReader\"></xref> and <xref href=\"System.Data.XmlReadMode\"></xref>."}],"pos":[209384,209572],"yaml":true},{"content":"The <xref:System.Data.DataSet.ReadXml%2A> method provides a way to read either data only, or both data and schema into a <xref:System.Data.DataSet> from an XML document, whereas the <xref:System.Data.DataSet.ReadXmlSchema%2A> method reads only the schema. To read both data and schema, use one of the `ReadXML` overloads that includes the `mode` parameter, and set its value to `ReadSchema`.  \n  \n Note that the same is true for the <xref:System.Data.DataSet.WriteXml%2A> and <xref:System.Data.DataSet.WriteXmlSchema%2A> methods, respectively. To write XML data, or both schema and data from the `DataSet`, use the `WriteXml` method. To write just the schema, use the `WriteXmlSchema` method.  \n  \n> [!NOTE]\n>  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.  \n  \n If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data. If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.  \n  \n If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document. If the schema cannot be extended through inference in order to expose all data, an exception is raised.  \n  \n> [!NOTE]\n>  The `DataSet` does not associate an XML element with its corresponding `DataColumn` or `DataTable` when legal XML characters like (\"_\") are escaped in the serialized XML. The `DataSet` itself only escapes illegal XML characters in XML element names and hence can only consume the same. When legal characters in XML element name are escaped, the element is ignored while processing.  \n  \n If the XML Schema for a <xref:System.Data.DataSet> includes `targetNamespace`, data may not be read, and you may encounter exceptions when calling <xref:System.Data.DataSet.ReadXml%2A> to load the <xref:System.Data.DataSet> with XML that contains elements with no qualifying namespace. To read unqualified elements, set `elementFormDefault` equal to \"qualified\" in your XML Schema as the following example demonstrates.  \n  \n```  \n<xsd:schema id=\"MyDataSet\"   \n   elementFormDefault=\"qualified\"   \n   targetNamespace=\"http://www.tempuri.org/MyDataSet.xsd\"   \n   xmlns=\"http://www.tempuri.org/MyDataSet.xsd\"   \n   xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"   \n   xmlns:msdata=\"urn:schemas-microsoft-com:xml-msdata\">  \n</xsd:schema>  \n```  \n  \n> [!NOTE]\n>  If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXml%2A> by specifying `XmlReadMode.ReadSchema`. This exception does not occur if you are using .NET Framework version 1.0.","nodes":[{"pos":[0,391],"content":"The <xref:System.Data.DataSet.ReadXml%2A> method provides a way to read either data only, or both data and schema into a <xref:System.Data.DataSet> from an XML document, whereas the <xref:System.Data.DataSet.ReadXmlSchema%2A> method reads only the schema. To read both data and schema, use one of the `ReadXML` overloads that includes the `mode` parameter, and set its value to `ReadSchema`.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Data.DataSet.ReadXml%2A&gt;</ph> method provides a way to read either data only, or both data and schema into a <ph id=\"ph2\">&lt;xref:System.Data.DataSet&gt;</ph> from an XML document, whereas the <ph id=\"ph3\">&lt;xref:System.Data.DataSet.ReadXmlSchema%2A&gt;</ph> method reads only the schema.","pos":[0,255],"source":"The <xref:System.Data.DataSet.ReadXml%2A> method provides a way to read either data only, or both data and schema into a <xref:System.Data.DataSet> from an XML document, whereas the <xref:System.Data.DataSet.ReadXmlSchema%2A> method reads only the schema."},{"content":"To read both data and schema, use one of the <ph id=\"ph1\">`ReadXML`</ph> overloads that includes the <ph id=\"ph2\">`mode`</ph> parameter, and set its value to <ph id=\"ph3\">`ReadSchema`</ph>.","pos":[256,391],"source":" To read both data and schema, use one of the `ReadXML` overloads that includes the `mode` parameter, and set its value to `ReadSchema`."}]},{"pos":[398,692],"content":"Note that the same is true for the <xref:System.Data.DataSet.WriteXml%2A> and <xref:System.Data.DataSet.WriteXmlSchema%2A> methods, respectively. To write XML data, or both schema and data from the `DataSet`, use the `WriteXml` method. To write just the schema, use the `WriteXmlSchema` method.","nodes":[{"content":"Note that the same is true for the <ph id=\"ph1\">&lt;xref:System.Data.DataSet.WriteXml%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Data.DataSet.WriteXmlSchema%2A&gt;</ph> methods, respectively.","pos":[0,145],"source":"Note that the same is true for the <xref:System.Data.DataSet.WriteXml%2A> and <xref:System.Data.DataSet.WriteXmlSchema%2A> methods, respectively."},{"content":"To write XML data, or both schema and data from the <ph id=\"ph1\">`DataSet`</ph>, use the <ph id=\"ph2\">`WriteXml`</ph> method.","pos":[146,235],"source":" To write XML data, or both schema and data from the `DataSet`, use the `WriteXml` method."},{"content":"To write just the schema, use the <ph id=\"ph1\">`WriteXmlSchema`</ph> method.","pos":[236,294],"source":" To write just the schema, use the `WriteXmlSchema` method."}]},{"pos":[700,965],"content":"[!NOTE]\n An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.","leadings":["","> "],"nodes":[{"content":"An <ph id=\"ph1\">&lt;xref:System.InvalidOperationException&gt;</ph> will be thrown if a column type in the <ph id=\"ph2\">`DataRow`</ph> being read from or written to implements <ph id=\"ph3\">&lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt;</ph> and does not implement <ph id=\"ph4\">&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;</ph>.","pos":[9,263],"source":" An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>."}]},{"pos":[972,1238],"content":"If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data. If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.","nodes":[{"content":"If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data. If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.","pos":[0,266],"nodes":[{"content":"If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data.","pos":[0,132]},{"content":"If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.","pos":[133,266]}]}]},{"pos":[1245,1501],"content":"If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document. If the schema cannot be extended through inference in order to expose all data, an exception is raised.","nodes":[{"content":"If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document. If the schema cannot be extended through inference in order to expose all data, an exception is raised.","pos":[0,256],"nodes":[{"content":"If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document.","pos":[0,152]},{"content":"If the schema cannot be extended through inference in order to expose all data, an exception is raised.","pos":[153,256]}]}]},{"pos":[1509,1901],"content":"[!NOTE]\n The `DataSet` does not associate an XML element with its corresponding `DataColumn` or `DataTable` when legal XML characters like (\"_\") are escaped in the serialized XML. The `DataSet` itself only escapes illegal XML characters in XML element names and hence can only consume the same. When legal characters in XML element name are escaped, the element is ignored while processing.","leadings":["","> "],"nodes":[{"content":" The `DataSet` does not associate an XML element with its corresponding `DataColumn` or `DataTable` when legal XML characters like (\"_\") are escaped in the serialized XML. The `DataSet` itself only escapes illegal XML characters in XML element names and hence can only consume the same. When legal characters in XML element name are escaped, the element is ignored while processing.","pos":[8,390],"nodes":[{"content":"The <ph id=\"ph1\">`DataSet`</ph> does not associate an XML element with its corresponding <ph id=\"ph2\">`DataColumn`</ph> or <ph id=\"ph3\">`DataTable`</ph> when legal XML characters like (\"_\") are escaped in the serialized XML.","pos":[1,171],"source":" The `DataSet` does not associate an XML element with its corresponding `DataColumn` or `DataTable` when legal XML characters like (\"_\") are escaped in the serialized XML."},{"content":"The <ph id=\"ph1\">`DataSet`</ph> itself only escapes illegal XML characters in XML element names and hence can only consume the same.","pos":[172,286],"source":" The `DataSet` itself only escapes illegal XML characters in XML element names and hence can only consume the same."},{"content":"When legal characters in XML element name are escaped, the element is ignored while processing.","pos":[287,382]}]}]},{"pos":[1908,2327],"content":"If the XML Schema for a <xref:System.Data.DataSet> includes `targetNamespace`, data may not be read, and you may encounter exceptions when calling <xref:System.Data.DataSet.ReadXml%2A> to load the <xref:System.Data.DataSet> with XML that contains elements with no qualifying namespace. To read unqualified elements, set `elementFormDefault` equal to \"qualified\" in your XML Schema as the following example demonstrates.","nodes":[{"content":"If the XML Schema for a <ph id=\"ph1\">&lt;xref:System.Data.DataSet&gt;</ph> includes <ph id=\"ph2\">`targetNamespace`</ph>, data may not be read, and you may encounter exceptions when calling <ph id=\"ph3\">&lt;xref:System.Data.DataSet.ReadXml%2A&gt;</ph> to load the <ph id=\"ph4\">&lt;xref:System.Data.DataSet&gt;</ph> with XML that contains elements with no qualifying namespace.","pos":[0,285],"source":"If the XML Schema for a <xref:System.Data.DataSet> includes `targetNamespace`, data may not be read, and you may encounter exceptions when calling <xref:System.Data.DataSet.ReadXml%2A> to load the <xref:System.Data.DataSet> with XML that contains elements with no qualifying namespace."},{"content":"To read unqualified elements, set <ph id=\"ph1\">`elementFormDefault`</ph> equal to \"qualified\" in your XML Schema as the following example demonstrates.","pos":[286,419],"source":" To read unqualified elements, set `elementFormDefault` equal to \"qualified\" in your XML Schema as the following example demonstrates."}]},{"pos":[2654,3046],"content":"[!NOTE]\n If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXml%2A> by specifying `XmlReadMode.ReadSchema`. This exception does not occur if you are using .NET Framework version 1.0.","leadings":["","> "],"nodes":[{"content":" If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXml%2A> by specifying `XmlReadMode.ReadSchema`. This exception does not occur if you are using .NET Framework version 1.0.","pos":[8,390],"nodes":[{"content":"If the schema for your <ph id=\"ph1\">&lt;xref:System.Data.DataSet&gt;</ph> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <ph id=\"ph2\">&lt;xref:System.Data.DataSet&gt;</ph> with <ph id=\"ph3\">&lt;xref:System.Data.DataSet.ReadXml%2A&gt;</ph> by specifying <ph id=\"ph4\">`XmlReadMode.ReadSchema`</ph>.","pos":[1,307],"source":" If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXml%2A> by specifying `XmlReadMode.ReadSchema`."},{"content":"This exception does not occur if you are using .NET Framework version 1.0.","pos":[308,382]}]}]}],"pos":[209583,212675],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.IO.TextReader\"></xref> from which to read.","nodes":[{"pos":[0,65],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.IO.TextReader\"&gt;&lt;/xref&gt;</ph> from which to read.","source":"The <xref href=\"System.IO.TextReader\"></xref> from which to read."}],"pos":[212883,212949],"yaml":true},{"content":"One of the <xref href=\"System.Data.XmlReadMode\"></xref> values.","nodes":[{"pos":[0,63],"content":"One of the <ph id=\"ph1\">&lt;xref href=\"System.Data.XmlReadMode\"&gt;&lt;/xref&gt;</ph> values.","source":"One of the <xref href=\"System.Data.XmlReadMode\"></xref> values."}],"pos":[213019,213083],"yaml":true},{"content":"The `XmlReadMode` used to read the data.","nodes":[{"pos":[0,40],"content":"The <ph id=\"ph1\">`XmlReadMode`</ph> used to read the data.","source":"The `XmlReadMode` used to read the data."}],"pos":[213150,213191],"yaml":true},{"content":"Reads XML schema and data into the <xref href=\"System.Data.DataSet\"></xref> using the specified file.","nodes":[{"pos":[0,101],"content":"Reads XML schema and data into the <ph id=\"ph1\">&lt;xref href=\"System.Data.DataSet\"&gt;&lt;/xref&gt;</ph> using the specified file.","source":"Reads XML schema and data into the <xref href=\"System.Data.DataSet\"></xref> using the specified file."}],"pos":[214373,214475],"yaml":true},{"content":"The <xref:System.Data.DataSet.ReadXml%2A> method provides a way to read either data only, or both data and schema into a <xref:System.Data.DataSet> from an XML document, whereas the <xref:System.Data.DataSet.ReadXmlSchema%2A> method reads only the schema. To read both data and schema, use one of the `ReadXML` overloads that includes the `mode` parameter, and set its value to `ReadSchema`.  \n  \n Note that the same is true for the <xref:System.Data.DataSet.WriteXml%2A> and <xref:System.Data.DataSet.WriteXmlSchema%2A> methods, respectively. To write XML data, or both schema and data from the `DataSet`, use the `WriteXml` method. To write just the schema, use the `WriteXmlSchema` method.  \n  \n> [!NOTE]\n>  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.  \n  \n If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data. If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.  \n  \n If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document. If the schema cannot be extended through inference in order to expose all data, an exception is raised.  \n  \n> [!NOTE]\n>  The `DataSet` does not associate an XML element with its corresponding `DataColumn` or `DataTable` when legal XML characters like (\"_\") are escaped in the serialized XML. The `DataSet` itself only escapes illegal XML characters in XML element names and hence can only consume the same. When legal characters in XML element name are escaped, the element is ignored while processing.  \n  \n If the XML Schema for a <xref:System.Data.DataSet> includes a `targetNamespace`, data may not be read, and you may encounter exceptions when calling <xref:System.Data.DataSet.ReadXml%2A> to load the <xref:System.Data.DataSet> with XML that contains elements with no qualifying namespace. To read unqualified elements, set `elementFormDefault` equal to \"qualified\" in your XML Schema as the following example demonstrates.  \n  \n```  \n<xsd:schema id=\"MyDataSet\"   \n   elementFormDefault=\"qualified\"   \n   targetNamespace=\"http://www.tempuri.org/MyDataSet.xsd\"   \n   xmlns=\"http://www.tempuri.org/MyDataSet.xsd\"   \n   xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"   \n   xmlns:msdata=\"urn:schemas-microsoft-com:xml-msdata\">  \n</xsd:schema>  \n```  \n  \n> [!NOTE]\n>  If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXml%2A> by specifying `XmlReadMode.ReadSchema`. This exception does not occur if you are using .NET Framework version 1.0.","nodes":[{"pos":[0,391],"content":"The <xref:System.Data.DataSet.ReadXml%2A> method provides a way to read either data only, or both data and schema into a <xref:System.Data.DataSet> from an XML document, whereas the <xref:System.Data.DataSet.ReadXmlSchema%2A> method reads only the schema. To read both data and schema, use one of the `ReadXML` overloads that includes the `mode` parameter, and set its value to `ReadSchema`.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Data.DataSet.ReadXml%2A&gt;</ph> method provides a way to read either data only, or both data and schema into a <ph id=\"ph2\">&lt;xref:System.Data.DataSet&gt;</ph> from an XML document, whereas the <ph id=\"ph3\">&lt;xref:System.Data.DataSet.ReadXmlSchema%2A&gt;</ph> method reads only the schema.","pos":[0,255],"source":"The <xref:System.Data.DataSet.ReadXml%2A> method provides a way to read either data only, or both data and schema into a <xref:System.Data.DataSet> from an XML document, whereas the <xref:System.Data.DataSet.ReadXmlSchema%2A> method reads only the schema."},{"content":"To read both data and schema, use one of the <ph id=\"ph1\">`ReadXML`</ph> overloads that includes the <ph id=\"ph2\">`mode`</ph> parameter, and set its value to <ph id=\"ph3\">`ReadSchema`</ph>.","pos":[256,391],"source":" To read both data and schema, use one of the `ReadXML` overloads that includes the `mode` parameter, and set its value to `ReadSchema`."}]},{"pos":[398,692],"content":"Note that the same is true for the <xref:System.Data.DataSet.WriteXml%2A> and <xref:System.Data.DataSet.WriteXmlSchema%2A> methods, respectively. To write XML data, or both schema and data from the `DataSet`, use the `WriteXml` method. To write just the schema, use the `WriteXmlSchema` method.","nodes":[{"content":"Note that the same is true for the <ph id=\"ph1\">&lt;xref:System.Data.DataSet.WriteXml%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Data.DataSet.WriteXmlSchema%2A&gt;</ph> methods, respectively.","pos":[0,145],"source":"Note that the same is true for the <xref:System.Data.DataSet.WriteXml%2A> and <xref:System.Data.DataSet.WriteXmlSchema%2A> methods, respectively."},{"content":"To write XML data, or both schema and data from the <ph id=\"ph1\">`DataSet`</ph>, use the <ph id=\"ph2\">`WriteXml`</ph> method.","pos":[146,235],"source":" To write XML data, or both schema and data from the `DataSet`, use the `WriteXml` method."},{"content":"To write just the schema, use the <ph id=\"ph1\">`WriteXmlSchema`</ph> method.","pos":[236,294],"source":" To write just the schema, use the `WriteXmlSchema` method."}]},{"pos":[700,965],"content":"[!NOTE]\n An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.","leadings":["","> "],"nodes":[{"content":"An <ph id=\"ph1\">&lt;xref:System.InvalidOperationException&gt;</ph> will be thrown if a column type in the <ph id=\"ph2\">`DataRow`</ph> being read from or written to implements <ph id=\"ph3\">&lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt;</ph> and does not implement <ph id=\"ph4\">&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;</ph>.","pos":[9,263],"source":" An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>."}]},{"pos":[972,1238],"content":"If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data. If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.","nodes":[{"content":"If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data. If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.","pos":[0,266],"nodes":[{"content":"If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data.","pos":[0,132]},{"content":"If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.","pos":[133,266]}]}]},{"pos":[1245,1501],"content":"If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document. If the schema cannot be extended through inference in order to expose all data, an exception is raised.","nodes":[{"content":"If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document. If the schema cannot be extended through inference in order to expose all data, an exception is raised.","pos":[0,256],"nodes":[{"content":"If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document.","pos":[0,152]},{"content":"If the schema cannot be extended through inference in order to expose all data, an exception is raised.","pos":[153,256]}]}]},{"pos":[1509,1901],"content":"[!NOTE]\n The `DataSet` does not associate an XML element with its corresponding `DataColumn` or `DataTable` when legal XML characters like (\"_\") are escaped in the serialized XML. The `DataSet` itself only escapes illegal XML characters in XML element names and hence can only consume the same. When legal characters in XML element name are escaped, the element is ignored while processing.","leadings":["","> "],"nodes":[{"content":" The `DataSet` does not associate an XML element with its corresponding `DataColumn` or `DataTable` when legal XML characters like (\"_\") are escaped in the serialized XML. The `DataSet` itself only escapes illegal XML characters in XML element names and hence can only consume the same. When legal characters in XML element name are escaped, the element is ignored while processing.","pos":[8,390],"nodes":[{"content":"The <ph id=\"ph1\">`DataSet`</ph> does not associate an XML element with its corresponding <ph id=\"ph2\">`DataColumn`</ph> or <ph id=\"ph3\">`DataTable`</ph> when legal XML characters like (\"_\") are escaped in the serialized XML.","pos":[1,171],"source":" The `DataSet` does not associate an XML element with its corresponding `DataColumn` or `DataTable` when legal XML characters like (\"_\") are escaped in the serialized XML."},{"content":"The <ph id=\"ph1\">`DataSet`</ph> itself only escapes illegal XML characters in XML element names and hence can only consume the same.","pos":[172,286],"source":" The `DataSet` itself only escapes illegal XML characters in XML element names and hence can only consume the same."},{"content":"When legal characters in XML element name are escaped, the element is ignored while processing.","pos":[287,382]}]}]},{"pos":[1908,2329],"content":"If the XML Schema for a <xref:System.Data.DataSet> includes a `targetNamespace`, data may not be read, and you may encounter exceptions when calling <xref:System.Data.DataSet.ReadXml%2A> to load the <xref:System.Data.DataSet> with XML that contains elements with no qualifying namespace. To read unqualified elements, set `elementFormDefault` equal to \"qualified\" in your XML Schema as the following example demonstrates.","nodes":[{"content":"If the XML Schema for a <ph id=\"ph1\">&lt;xref:System.Data.DataSet&gt;</ph> includes a <ph id=\"ph2\">`targetNamespace`</ph>, data may not be read, and you may encounter exceptions when calling <ph id=\"ph3\">&lt;xref:System.Data.DataSet.ReadXml%2A&gt;</ph> to load the <ph id=\"ph4\">&lt;xref:System.Data.DataSet&gt;</ph> with XML that contains elements with no qualifying namespace.","pos":[0,287],"source":"If the XML Schema for a <xref:System.Data.DataSet> includes a `targetNamespace`, data may not be read, and you may encounter exceptions when calling <xref:System.Data.DataSet.ReadXml%2A> to load the <xref:System.Data.DataSet> with XML that contains elements with no qualifying namespace."},{"content":"To read unqualified elements, set <ph id=\"ph1\">`elementFormDefault`</ph> equal to \"qualified\" in your XML Schema as the following example demonstrates.","pos":[288,421],"source":" To read unqualified elements, set `elementFormDefault` equal to \"qualified\" in your XML Schema as the following example demonstrates."}]},{"pos":[2656,3048],"content":"[!NOTE]\n If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXml%2A> by specifying `XmlReadMode.ReadSchema`. This exception does not occur if you are using .NET Framework version 1.0.","leadings":["","> "],"nodes":[{"content":" If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXml%2A> by specifying `XmlReadMode.ReadSchema`. This exception does not occur if you are using .NET Framework version 1.0.","pos":[8,390],"nodes":[{"content":"If the schema for your <ph id=\"ph1\">&lt;xref:System.Data.DataSet&gt;</ph> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <ph id=\"ph2\">&lt;xref:System.Data.DataSet&gt;</ph> with <ph id=\"ph3\">&lt;xref:System.Data.DataSet.ReadXml%2A&gt;</ph> by specifying <ph id=\"ph4\">`XmlReadMode.ReadSchema`</ph>.","pos":[1,307],"source":" If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXml%2A> by specifying `XmlReadMode.ReadSchema`."},{"content":"This exception does not occur if you are using .NET Framework version 1.0.","pos":[308,382]}]}]}],"pos":[214486,217580],"yaml":true,"extradata":"MT"},{"content":"The filename (including the path) from which to read.","nodes":[{"pos":[0,53],"content":"The filename (including the path) from which to read.","nodes":[{"content":"The filename (including the path) from which to read.","pos":[0,53]}]}],"pos":[218502,218556],"yaml":true},{"content":"The `XmlReadMode` used to read the data.","nodes":[{"pos":[0,40],"content":"The <ph id=\"ph1\">`XmlReadMode`</ph> used to read the data.","source":"The `XmlReadMode` used to read the data."}],"pos":[218623,218664],"yaml":true},{"content":"<xref href=\"System.Security.Permissions.FileIOPermission\"></xref> is not set to <xref href=\"System.Security.Permissions.FileIOPermissionAccess.Read\"></xref>.","nodes":[{"pos":[0,157],"content":"<ph id=\"ph1\">&lt;xref href=\"System.Security.Permissions.FileIOPermission\"&gt;&lt;/xref&gt;</ph> is not set to <ph id=\"ph2\">&lt;xref href=\"System.Security.Permissions.FileIOPermissionAccess.Read\"&gt;&lt;/xref&gt;</ph>.","source":"<xref href=\"System.Security.Permissions.FileIOPermission\"></xref> is not set to <xref href=\"System.Security.Permissions.FileIOPermissionAccess.Read\"></xref>."}],"pos":[218831,218989],"yaml":true},{"content":"Reads XML schema and data into the <xref href=\"System.Data.DataSet\"></xref> using the specified <xref href=\"System.IO.TextReader\"></xref>.","nodes":[{"pos":[0,138],"content":"Reads XML schema and data into the <ph id=\"ph1\">&lt;xref href=\"System.Data.DataSet\"&gt;&lt;/xref&gt;</ph> using the specified <ph id=\"ph2\">&lt;xref href=\"System.IO.TextReader\"&gt;&lt;/xref&gt;</ph>.","source":"Reads XML schema and data into the <xref href=\"System.Data.DataSet\"></xref> using the specified <xref href=\"System.IO.TextReader\"></xref>."}],"pos":[220146,220285],"yaml":true},{"content":"The <xref:System.Data.DataSet.ReadXml%2A> method provides a way to read either data only, or both data and schema into a <xref:System.Data.DataSet> from an XML document, whereas the <xref:System.Data.DataSet.ReadXmlSchema%2A> method reads only the schema. To read both data and schema, use one of the `ReadXML` overloads that includes the `mode` parameter, and set its value to `ReadSchema`.  \n  \n Note that the same is true for the <xref:System.Data.DataSet.WriteXml%2A> and <xref:System.Data.DataSet.WriteXmlSchema%2A> methods, respectively. To write XML data, or both schema and data from the `DataSet`, use the `WriteXml` method. To write just the schema, use the `WriteXmlSchema` method.  \n  \n> [!NOTE]\n>  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.  \n  \n If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data. If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.  \n  \n If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document. If the schema cannot be extended through inference in order to expose all data, an exception is raised.  \n  \n> [!NOTE]\n>  The `DataSet` does not associate an XML element with its corresponding `DataColumn` or `DataTable` when legal XML characters like (\"_\") are escaped in the serialized XML. The `DataSet` itself only escapes illegal XML characters in XML element names and hence can only consume the same. When legal characters in XML element name are escaped, the element is ignored while processing.  \n  \n If the XML Schema for a <xref:System.Data.DataSet> includes `targetNamespace`, data may not be read, and you may encounter exceptions when calling <xref:System.Data.DataSet.ReadXml%2A> to load the <xref:System.Data.DataSet> with XML that contains elements with no qualifying namespace. To read unqualified elements, set `elementFormDefault` equal to \"qualified\" in your XML Schema as the following example demonstrates.  \n  \n```  \n<xsd:schema id=\"MyDataSet\"   \n   elementFormDefault=\"qualified\"   \n   targetNamespace=\"http://www.tempuri.org/MyDataSet.xsd\"   \n   xmlns=\"http://www.tempuri.org/MyDataSet.xsd\"   \n   xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"   \n   xmlns:msdata=\"urn:schemas-microsoft-com:xml-msdata\">  \n</xsd:schema>  \n```  \n  \n Classes that inherit from the <xref:System.IO.TextReader> class include the <xref:System.IO.StreamReader> and <xref:System.IO.StringReader> classes.  \n  \n> [!NOTE]\n>  If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXml%2A> by specifying `XmlReadMode.ReadSchema`. This exception does not occur if you are using .NET Framework version 1.0.","nodes":[{"pos":[0,391],"content":"The <xref:System.Data.DataSet.ReadXml%2A> method provides a way to read either data only, or both data and schema into a <xref:System.Data.DataSet> from an XML document, whereas the <xref:System.Data.DataSet.ReadXmlSchema%2A> method reads only the schema. To read both data and schema, use one of the `ReadXML` overloads that includes the `mode` parameter, and set its value to `ReadSchema`.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Data.DataSet.ReadXml%2A&gt;</ph> method provides a way to read either data only, or both data and schema into a <ph id=\"ph2\">&lt;xref:System.Data.DataSet&gt;</ph> from an XML document, whereas the <ph id=\"ph3\">&lt;xref:System.Data.DataSet.ReadXmlSchema%2A&gt;</ph> method reads only the schema.","pos":[0,255],"source":"The <xref:System.Data.DataSet.ReadXml%2A> method provides a way to read either data only, or both data and schema into a <xref:System.Data.DataSet> from an XML document, whereas the <xref:System.Data.DataSet.ReadXmlSchema%2A> method reads only the schema."},{"content":"To read both data and schema, use one of the <ph id=\"ph1\">`ReadXML`</ph> overloads that includes the <ph id=\"ph2\">`mode`</ph> parameter, and set its value to <ph id=\"ph3\">`ReadSchema`</ph>.","pos":[256,391],"source":" To read both data and schema, use one of the `ReadXML` overloads that includes the `mode` parameter, and set its value to `ReadSchema`."}]},{"pos":[398,692],"content":"Note that the same is true for the <xref:System.Data.DataSet.WriteXml%2A> and <xref:System.Data.DataSet.WriteXmlSchema%2A> methods, respectively. To write XML data, or both schema and data from the `DataSet`, use the `WriteXml` method. To write just the schema, use the `WriteXmlSchema` method.","nodes":[{"content":"Note that the same is true for the <ph id=\"ph1\">&lt;xref:System.Data.DataSet.WriteXml%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Data.DataSet.WriteXmlSchema%2A&gt;</ph> methods, respectively.","pos":[0,145],"source":"Note that the same is true for the <xref:System.Data.DataSet.WriteXml%2A> and <xref:System.Data.DataSet.WriteXmlSchema%2A> methods, respectively."},{"content":"To write XML data, or both schema and data from the <ph id=\"ph1\">`DataSet`</ph>, use the <ph id=\"ph2\">`WriteXml`</ph> method.","pos":[146,235],"source":" To write XML data, or both schema and data from the `DataSet`, use the `WriteXml` method."},{"content":"To write just the schema, use the <ph id=\"ph1\">`WriteXmlSchema`</ph> method.","pos":[236,294],"source":" To write just the schema, use the `WriteXmlSchema` method."}]},{"pos":[700,965],"content":"[!NOTE]\n An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.","leadings":["","> "],"nodes":[{"content":"An <ph id=\"ph1\">&lt;xref:System.InvalidOperationException&gt;</ph> will be thrown if a column type in the <ph id=\"ph2\">`DataRow`</ph> being read from or written to implements <ph id=\"ph3\">&lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt;</ph> and does not implement <ph id=\"ph4\">&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;</ph>.","pos":[9,263],"source":" An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>."}]},{"pos":[972,1238],"content":"If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data. If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.","nodes":[{"content":"If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data. If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.","pos":[0,266],"nodes":[{"content":"If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data.","pos":[0,132]},{"content":"If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.","pos":[133,266]}]}]},{"pos":[1245,1501],"content":"If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document. If the schema cannot be extended through inference in order to expose all data, an exception is raised.","nodes":[{"content":"If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document. If the schema cannot be extended through inference in order to expose all data, an exception is raised.","pos":[0,256],"nodes":[{"content":"If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document.","pos":[0,152]},{"content":"If the schema cannot be extended through inference in order to expose all data, an exception is raised.","pos":[153,256]}]}]},{"pos":[1509,1901],"content":"[!NOTE]\n The `DataSet` does not associate an XML element with its corresponding `DataColumn` or `DataTable` when legal XML characters like (\"_\") are escaped in the serialized XML. The `DataSet` itself only escapes illegal XML characters in XML element names and hence can only consume the same. When legal characters in XML element name are escaped, the element is ignored while processing.","leadings":["","> "],"nodes":[{"content":" The `DataSet` does not associate an XML element with its corresponding `DataColumn` or `DataTable` when legal XML characters like (\"_\") are escaped in the serialized XML. The `DataSet` itself only escapes illegal XML characters in XML element names and hence can only consume the same. When legal characters in XML element name are escaped, the element is ignored while processing.","pos":[8,390],"nodes":[{"content":"The <ph id=\"ph1\">`DataSet`</ph> does not associate an XML element with its corresponding <ph id=\"ph2\">`DataColumn`</ph> or <ph id=\"ph3\">`DataTable`</ph> when legal XML characters like (\"_\") are escaped in the serialized XML.","pos":[1,171],"source":" The `DataSet` does not associate an XML element with its corresponding `DataColumn` or `DataTable` when legal XML characters like (\"_\") are escaped in the serialized XML."},{"content":"The <ph id=\"ph1\">`DataSet`</ph> itself only escapes illegal XML characters in XML element names and hence can only consume the same.","pos":[172,286],"source":" The `DataSet` itself only escapes illegal XML characters in XML element names and hence can only consume the same."},{"content":"When legal characters in XML element name are escaped, the element is ignored while processing.","pos":[287,382]}]}]},{"pos":[1908,2327],"content":"If the XML Schema for a <xref:System.Data.DataSet> includes `targetNamespace`, data may not be read, and you may encounter exceptions when calling <xref:System.Data.DataSet.ReadXml%2A> to load the <xref:System.Data.DataSet> with XML that contains elements with no qualifying namespace. To read unqualified elements, set `elementFormDefault` equal to \"qualified\" in your XML Schema as the following example demonstrates.","nodes":[{"content":"If the XML Schema for a <ph id=\"ph1\">&lt;xref:System.Data.DataSet&gt;</ph> includes <ph id=\"ph2\">`targetNamespace`</ph>, data may not be read, and you may encounter exceptions when calling <ph id=\"ph3\">&lt;xref:System.Data.DataSet.ReadXml%2A&gt;</ph> to load the <ph id=\"ph4\">&lt;xref:System.Data.DataSet&gt;</ph> with XML that contains elements with no qualifying namespace.","pos":[0,285],"source":"If the XML Schema for a <xref:System.Data.DataSet> includes `targetNamespace`, data may not be read, and you may encounter exceptions when calling <xref:System.Data.DataSet.ReadXml%2A> to load the <xref:System.Data.DataSet> with XML that contains elements with no qualifying namespace."},{"content":"To read unqualified elements, set <ph id=\"ph1\">`elementFormDefault`</ph> equal to \"qualified\" in your XML Schema as the following example demonstrates.","pos":[286,419],"source":" To read unqualified elements, set `elementFormDefault` equal to \"qualified\" in your XML Schema as the following example demonstrates."}]},{"pos":[2653,2801],"content":"Classes that inherit from the <xref:System.IO.TextReader> class include the <xref:System.IO.StreamReader> and <xref:System.IO.StringReader> classes.","nodes":[{"content":"Classes that inherit from the <ph id=\"ph1\">&lt;xref:System.IO.TextReader&gt;</ph> class include the <ph id=\"ph2\">&lt;xref:System.IO.StreamReader&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.IO.StringReader&gt;</ph> classes.","pos":[0,148],"source":"Classes that inherit from the <xref:System.IO.TextReader> class include the <xref:System.IO.StreamReader> and <xref:System.IO.StringReader> classes."}]},{"pos":[2809,3201],"content":"[!NOTE]\n If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXml%2A> by specifying `XmlReadMode.ReadSchema`. This exception does not occur if you are using .NET Framework version 1.0.","leadings":["","> "],"nodes":[{"content":" If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXml%2A> by specifying `XmlReadMode.ReadSchema`. This exception does not occur if you are using .NET Framework version 1.0.","pos":[8,390],"nodes":[{"content":"If the schema for your <ph id=\"ph1\">&lt;xref:System.Data.DataSet&gt;</ph> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <ph id=\"ph2\">&lt;xref:System.Data.DataSet&gt;</ph> with <ph id=\"ph3\">&lt;xref:System.Data.DataSet.ReadXml%2A&gt;</ph> by specifying <ph id=\"ph4\">`XmlReadMode.ReadSchema`</ph>.","pos":[1,307],"source":" If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXml%2A> by specifying `XmlReadMode.ReadSchema`."},{"content":"This exception does not occur if you are using .NET Framework version 1.0.","pos":[308,382]}]}]}],"pos":[220296,223545],"yaml":true,"extradata":"MT"},{"content":"The `TextReader` from which to read the schema and data.","nodes":[{"pos":[0,56],"content":"The <ph id=\"ph1\">`TextReader`</ph> from which to read the schema and data.","source":"The `TextReader` from which to read the schema and data."}],"pos":[224484,224541],"yaml":true},{"content":"The <xref href=\"System.Data.XmlReadMode\"></xref> used to read the data.","nodes":[{"pos":[0,71],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Data.XmlReadMode\"&gt;&lt;/xref&gt;</ph> used to read the data.","source":"The <xref href=\"System.Data.XmlReadMode\"></xref> used to read the data."}],"pos":[224608,224680],"yaml":true},{"content":"Reads XML schema and data into the <xref href=\"System.Data.DataSet\"></xref> using the specified <xref href=\"System.IO.Stream\"></xref>.","nodes":[{"pos":[0,134],"content":"Reads XML schema and data into the <ph id=\"ph1\">&lt;xref href=\"System.Data.DataSet\"&gt;&lt;/xref&gt;</ph> using the specified <ph id=\"ph2\">&lt;xref href=\"System.IO.Stream\"&gt;&lt;/xref&gt;</ph>.","source":"Reads XML schema and data into the <xref href=\"System.Data.DataSet\"></xref> using the specified <xref href=\"System.IO.Stream\"></xref>."}],"pos":[225871,226006],"yaml":true},{"content":"The <xref:System.Data.DataSet.ReadXml%2A> method provides a way to read either data only, or both data and schema into a <xref:System.Data.DataSet> from an XML document, whereas the <xref:System.Data.DataSet.ReadXmlSchema%2A> method reads only the schema. To read both data and schema, use one of the `ReadXML` overloads that includes the `mode` parameter, and set its value to `ReadSchema`.  \n  \n Note that the same is true for the <xref:System.Data.DataSet.WriteXml%2A> and <xref:System.Data.DataSet.WriteXmlSchema%2A> methods, respectively. To write XML data, or both schema and data from the `DataSet`, use the `WriteXml` method. To write just the schema, use the `WriteXmlSchema` method.  \n  \n> [!NOTE]\n>  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.  \n  \n If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data. If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.  \n  \n If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document. If the schema cannot be extended through inference in order to expose all data, an exception is raised.  \n  \n> [!NOTE]\n>  The `DataSet` does not associate an XML element with its corresponding `DataColumn` or `DataTable` when legal XML characters like (\"_\") are escaped in the serialized XML. The `DataSet` itself only escapes illegal XML characters in XML element names and hence can only consume the same. When legal characters in XML element name are escaped, the element is ignored while processing.  \n  \n If the XML Schema for a <xref:System.Data.DataSet> includes `targetNamespace`, data may not be read, and you may encounter exceptions when calling <xref:System.Data.DataSet.ReadXml%2A> to load the <xref:System.Data.DataSet> with XML that contains elements with no qualifying namespace. To read unqualified elements, set `elementFormDefault` equal to \"qualified\" in your XML Schema, as the following example demonstrates.  \n  \n```  \n<xsd:schema id=\"MyDataSet\"   \n   elementFormDefault=\"qualified\"   \n   targetNamespace=\"http://www.tempuri.org/MyDataSet.xsd\"   \n   xmlns=\"http://www.tempuri.org/MyDataSet.xsd\"   \n   xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"   \n   xmlns:msdata=\"urn:schemas-microsoft-com:xml-msdata\">  \n</xsd:schema>  \n```  \n  \n> [!NOTE]\n>  If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXml%2A> by specifying `XmlReadMode.ReadSchema`. This exception does not occur if you are using .NET Framework version 1.0.","nodes":[{"pos":[0,391],"content":"The <xref:System.Data.DataSet.ReadXml%2A> method provides a way to read either data only, or both data and schema into a <xref:System.Data.DataSet> from an XML document, whereas the <xref:System.Data.DataSet.ReadXmlSchema%2A> method reads only the schema. To read both data and schema, use one of the `ReadXML` overloads that includes the `mode` parameter, and set its value to `ReadSchema`.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Data.DataSet.ReadXml%2A&gt;</ph> method provides a way to read either data only, or both data and schema into a <ph id=\"ph2\">&lt;xref:System.Data.DataSet&gt;</ph> from an XML document, whereas the <ph id=\"ph3\">&lt;xref:System.Data.DataSet.ReadXmlSchema%2A&gt;</ph> method reads only the schema.","pos":[0,255],"source":"The <xref:System.Data.DataSet.ReadXml%2A> method provides a way to read either data only, or both data and schema into a <xref:System.Data.DataSet> from an XML document, whereas the <xref:System.Data.DataSet.ReadXmlSchema%2A> method reads only the schema."},{"content":"To read both data and schema, use one of the <ph id=\"ph1\">`ReadXML`</ph> overloads that includes the <ph id=\"ph2\">`mode`</ph> parameter, and set its value to <ph id=\"ph3\">`ReadSchema`</ph>.","pos":[256,391],"source":" To read both data and schema, use one of the `ReadXML` overloads that includes the `mode` parameter, and set its value to `ReadSchema`."}]},{"pos":[398,692],"content":"Note that the same is true for the <xref:System.Data.DataSet.WriteXml%2A> and <xref:System.Data.DataSet.WriteXmlSchema%2A> methods, respectively. To write XML data, or both schema and data from the `DataSet`, use the `WriteXml` method. To write just the schema, use the `WriteXmlSchema` method.","nodes":[{"content":"Note that the same is true for the <ph id=\"ph1\">&lt;xref:System.Data.DataSet.WriteXml%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Data.DataSet.WriteXmlSchema%2A&gt;</ph> methods, respectively.","pos":[0,145],"source":"Note that the same is true for the <xref:System.Data.DataSet.WriteXml%2A> and <xref:System.Data.DataSet.WriteXmlSchema%2A> methods, respectively."},{"content":"To write XML data, or both schema and data from the <ph id=\"ph1\">`DataSet`</ph>, use the <ph id=\"ph2\">`WriteXml`</ph> method.","pos":[146,235],"source":" To write XML data, or both schema and data from the `DataSet`, use the `WriteXml` method."},{"content":"To write just the schema, use the <ph id=\"ph1\">`WriteXmlSchema`</ph> method.","pos":[236,294],"source":" To write just the schema, use the `WriteXmlSchema` method."}]},{"pos":[700,965],"content":"[!NOTE]\n An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.","leadings":["","> "],"nodes":[{"content":"An <ph id=\"ph1\">&lt;xref:System.InvalidOperationException&gt;</ph> will be thrown if a column type in the <ph id=\"ph2\">`DataRow`</ph> being read from or written to implements <ph id=\"ph3\">&lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt;</ph> and does not implement <ph id=\"ph4\">&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;</ph>.","pos":[9,263],"source":" An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>."}]},{"pos":[972,1238],"content":"If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data. If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.","nodes":[{"content":"If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data. If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.","pos":[0,266],"nodes":[{"content":"If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data.","pos":[0,132]},{"content":"If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.","pos":[133,266]}]}]},{"pos":[1245,1501],"content":"If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document. If the schema cannot be extended through inference in order to expose all data, an exception is raised.","nodes":[{"content":"If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document. If the schema cannot be extended through inference in order to expose all data, an exception is raised.","pos":[0,256],"nodes":[{"content":"If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document.","pos":[0,152]},{"content":"If the schema cannot be extended through inference in order to expose all data, an exception is raised.","pos":[153,256]}]}]},{"pos":[1509,1901],"content":"[!NOTE]\n The `DataSet` does not associate an XML element with its corresponding `DataColumn` or `DataTable` when legal XML characters like (\"_\") are escaped in the serialized XML. The `DataSet` itself only escapes illegal XML characters in XML element names and hence can only consume the same. When legal characters in XML element name are escaped, the element is ignored while processing.","leadings":["","> "],"nodes":[{"content":" The `DataSet` does not associate an XML element with its corresponding `DataColumn` or `DataTable` when legal XML characters like (\"_\") are escaped in the serialized XML. The `DataSet` itself only escapes illegal XML characters in XML element names and hence can only consume the same. When legal characters in XML element name are escaped, the element is ignored while processing.","pos":[8,390],"nodes":[{"content":"The <ph id=\"ph1\">`DataSet`</ph> does not associate an XML element with its corresponding <ph id=\"ph2\">`DataColumn`</ph> or <ph id=\"ph3\">`DataTable`</ph> when legal XML characters like (\"_\") are escaped in the serialized XML.","pos":[1,171],"source":" The `DataSet` does not associate an XML element with its corresponding `DataColumn` or `DataTable` when legal XML characters like (\"_\") are escaped in the serialized XML."},{"content":"The <ph id=\"ph1\">`DataSet`</ph> itself only escapes illegal XML characters in XML element names and hence can only consume the same.","pos":[172,286],"source":" The `DataSet` itself only escapes illegal XML characters in XML element names and hence can only consume the same."},{"content":"When legal characters in XML element name are escaped, the element is ignored while processing.","pos":[287,382]}]}]},{"pos":[1908,2328],"content":"If the XML Schema for a <xref:System.Data.DataSet> includes `targetNamespace`, data may not be read, and you may encounter exceptions when calling <xref:System.Data.DataSet.ReadXml%2A> to load the <xref:System.Data.DataSet> with XML that contains elements with no qualifying namespace. To read unqualified elements, set `elementFormDefault` equal to \"qualified\" in your XML Schema, as the following example demonstrates.","nodes":[{"content":"If the XML Schema for a <ph id=\"ph1\">&lt;xref:System.Data.DataSet&gt;</ph> includes <ph id=\"ph2\">`targetNamespace`</ph>, data may not be read, and you may encounter exceptions when calling <ph id=\"ph3\">&lt;xref:System.Data.DataSet.ReadXml%2A&gt;</ph> to load the <ph id=\"ph4\">&lt;xref:System.Data.DataSet&gt;</ph> with XML that contains elements with no qualifying namespace.","pos":[0,285],"source":"If the XML Schema for a <xref:System.Data.DataSet> includes `targetNamespace`, data may not be read, and you may encounter exceptions when calling <xref:System.Data.DataSet.ReadXml%2A> to load the <xref:System.Data.DataSet> with XML that contains elements with no qualifying namespace."},{"content":"To read unqualified elements, set <ph id=\"ph1\">`elementFormDefault`</ph> equal to \"qualified\" in your XML Schema, as the following example demonstrates.","pos":[286,420],"source":" To read unqualified elements, set `elementFormDefault` equal to \"qualified\" in your XML Schema, as the following example demonstrates."}]},{"pos":[2655,3047],"content":"[!NOTE]\n If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXml%2A> by specifying `XmlReadMode.ReadSchema`. This exception does not occur if you are using .NET Framework version 1.0.","leadings":["","> "],"nodes":[{"content":" If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXml%2A> by specifying `XmlReadMode.ReadSchema`. This exception does not occur if you are using .NET Framework version 1.0.","pos":[8,390],"nodes":[{"content":"If the schema for your <ph id=\"ph1\">&lt;xref:System.Data.DataSet&gt;</ph> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <ph id=\"ph2\">&lt;xref:System.Data.DataSet&gt;</ph> with <ph id=\"ph3\">&lt;xref:System.Data.DataSet.ReadXml%2A&gt;</ph> by specifying <ph id=\"ph4\">`XmlReadMode.ReadSchema`</ph>.","pos":[1,307],"source":" If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXml%2A> by specifying `XmlReadMode.ReadSchema`."},{"content":"This exception does not occur if you are using .NET Framework version 1.0.","pos":[308,382]}]}]}],"pos":[226017,229110],"yaml":true,"extradata":"MT"},{"content":"An object that derives from <xref href=\"System.IO.Stream\"></xref>.","nodes":[{"pos":[0,66],"content":"An object that derives from <ph id=\"ph1\">&lt;xref href=\"System.IO.Stream\"&gt;&lt;/xref&gt;</ph>.","source":"An object that derives from <xref href=\"System.IO.Stream\"></xref>."}],"pos":[230041,230108],"yaml":true},{"content":"The <xref href=\"System.Data.XmlReadMode\"></xref> used to read the data.","nodes":[{"pos":[0,71],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Data.XmlReadMode\"&gt;&lt;/xref&gt;</ph> used to read the data.","source":"The <xref href=\"System.Data.XmlReadMode\"></xref> used to read the data."}],"pos":[230175,230247],"yaml":true},{"content":"Reads XML schema and data into the <xref href=\"System.Data.DataSet\"></xref> using the specified <xref href=\"System.Xml.XmlReader\"></xref>.","nodes":[{"pos":[0,138],"content":"Reads XML schema and data into the <ph id=\"ph1\">&lt;xref href=\"System.Data.DataSet\"&gt;&lt;/xref&gt;</ph> using the specified <ph id=\"ph2\">&lt;xref href=\"System.Xml.XmlReader\"&gt;&lt;/xref&gt;</ph>.","source":"Reads XML schema and data into the <xref href=\"System.Data.DataSet\"></xref> using the specified <xref href=\"System.Xml.XmlReader\"></xref>."}],"pos":[231459,231598],"yaml":true},{"content":"The <xref:System.Data.DataSet.ReadXml%2A> method provides a way to read either data only, or both data and schema into a <xref:System.Data.DataSet> from an XML document, whereas the <xref:System.Data.DataSet.ReadXmlSchema%2A> method reads only the schema. To read both data and schema, use one of the `ReadXML` overloads that includes the `mode` parameter, and set its value to `ReadSchema`.  \n  \n Note that the same is true for the <xref:System.Data.DataSet.WriteXml%2A> and <xref:System.Data.DataSet.WriteXmlSchema%2A> methods, respectively. To write XML data, or both schema and data from the `DataSet`, use the `WriteXml` method. To write just the schema, use the `WriteXmlSchema` method.  \n  \n> [!NOTE]\n>  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.  \n  \n If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data. If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.  \n  \n If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document. If the schema cannot be extended through inference in order to expose all data, an exception is raised.  \n  \n> [!NOTE]\n>  The `DataSet` does not associate an XML element with its corresponding `DataColumn` or `DataTable` when legal XML characters like (\"_\") are escaped in the serialized XML. The `DataSet` itself only escapes illegal XML characters in XML element names and hence can only consume the same. When legal characters in XML element name are escaped, the element is ignored while processing.  \n  \n If the XML Schema for a <xref:System.Data.DataSet> includes a `targetNamespace`, data may not be read, and you may encounter exceptions when calling <xref:System.Data.DataSet.ReadXml%2A> to load the <xref:System.Data.DataSet> with XML that contains elements with no qualifying namespace. To read unqualified elements, set `elementFormDefault` equal to \"qualified\" in your XML Schema as the following example demonstrates.  \n  \n```  \n<xsd:schema id=\"MyDataSet\"   \n   elementFormDefault=\"qualified\"   \n   targetNamespace=\"http://www.tempuri.org/MyDataSet.xsd\"   \n   xmlns=\"http://www.tempuri.org/MyDataSet.xsd\"   \n   xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"   \n   xmlns:msdata=\"urn:schemas-microsoft-com:xml-msdata\">  \n</xsd:schema>  \n```  \n  \n <xref:System.Xml.XmlTextReader?displayProperty=fullName> inherits from <xref:System.Xml.XmlReader>.  \n  \n> [!NOTE]\n>  If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXml%2A> by specifying `XmlReadMode.ReadSchema`. This exception does not occur if you are using .NET Framework version 1.0.","nodes":[{"pos":[0,391],"content":"The <xref:System.Data.DataSet.ReadXml%2A> method provides a way to read either data only, or both data and schema into a <xref:System.Data.DataSet> from an XML document, whereas the <xref:System.Data.DataSet.ReadXmlSchema%2A> method reads only the schema. To read both data and schema, use one of the `ReadXML` overloads that includes the `mode` parameter, and set its value to `ReadSchema`.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Data.DataSet.ReadXml%2A&gt;</ph> method provides a way to read either data only, or both data and schema into a <ph id=\"ph2\">&lt;xref:System.Data.DataSet&gt;</ph> from an XML document, whereas the <ph id=\"ph3\">&lt;xref:System.Data.DataSet.ReadXmlSchema%2A&gt;</ph> method reads only the schema.","pos":[0,255],"source":"The <xref:System.Data.DataSet.ReadXml%2A> method provides a way to read either data only, or both data and schema into a <xref:System.Data.DataSet> from an XML document, whereas the <xref:System.Data.DataSet.ReadXmlSchema%2A> method reads only the schema."},{"content":"To read both data and schema, use one of the <ph id=\"ph1\">`ReadXML`</ph> overloads that includes the <ph id=\"ph2\">`mode`</ph> parameter, and set its value to <ph id=\"ph3\">`ReadSchema`</ph>.","pos":[256,391],"source":" To read both data and schema, use one of the `ReadXML` overloads that includes the `mode` parameter, and set its value to `ReadSchema`."}]},{"pos":[398,692],"content":"Note that the same is true for the <xref:System.Data.DataSet.WriteXml%2A> and <xref:System.Data.DataSet.WriteXmlSchema%2A> methods, respectively. To write XML data, or both schema and data from the `DataSet`, use the `WriteXml` method. To write just the schema, use the `WriteXmlSchema` method.","nodes":[{"content":"Note that the same is true for the <ph id=\"ph1\">&lt;xref:System.Data.DataSet.WriteXml%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Data.DataSet.WriteXmlSchema%2A&gt;</ph> methods, respectively.","pos":[0,145],"source":"Note that the same is true for the <xref:System.Data.DataSet.WriteXml%2A> and <xref:System.Data.DataSet.WriteXmlSchema%2A> methods, respectively."},{"content":"To write XML data, or both schema and data from the <ph id=\"ph1\">`DataSet`</ph>, use the <ph id=\"ph2\">`WriteXml`</ph> method.","pos":[146,235],"source":" To write XML data, or both schema and data from the `DataSet`, use the `WriteXml` method."},{"content":"To write just the schema, use the <ph id=\"ph1\">`WriteXmlSchema`</ph> method.","pos":[236,294],"source":" To write just the schema, use the `WriteXmlSchema` method."}]},{"pos":[700,965],"content":"[!NOTE]\n An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.","leadings":["","> "],"nodes":[{"content":"An <ph id=\"ph1\">&lt;xref:System.InvalidOperationException&gt;</ph> will be thrown if a column type in the <ph id=\"ph2\">`DataRow`</ph> being read from or written to implements <ph id=\"ph3\">&lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt;</ph> and does not implement <ph id=\"ph4\">&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;</ph>.","pos":[9,263],"source":" An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>."}]},{"pos":[972,1238],"content":"If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data. If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.","nodes":[{"content":"If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data. If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.","pos":[0,266],"nodes":[{"content":"If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data.","pos":[0,132]},{"content":"If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.","pos":[133,266]}]}]},{"pos":[1245,1501],"content":"If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document. If the schema cannot be extended through inference in order to expose all data, an exception is raised.","nodes":[{"content":"If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document. If the schema cannot be extended through inference in order to expose all data, an exception is raised.","pos":[0,256],"nodes":[{"content":"If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document.","pos":[0,152]},{"content":"If the schema cannot be extended through inference in order to expose all data, an exception is raised.","pos":[153,256]}]}]},{"pos":[1509,1901],"content":"[!NOTE]\n The `DataSet` does not associate an XML element with its corresponding `DataColumn` or `DataTable` when legal XML characters like (\"_\") are escaped in the serialized XML. The `DataSet` itself only escapes illegal XML characters in XML element names and hence can only consume the same. When legal characters in XML element name are escaped, the element is ignored while processing.","leadings":["","> "],"nodes":[{"content":" The `DataSet` does not associate an XML element with its corresponding `DataColumn` or `DataTable` when legal XML characters like (\"_\") are escaped in the serialized XML. The `DataSet` itself only escapes illegal XML characters in XML element names and hence can only consume the same. When legal characters in XML element name are escaped, the element is ignored while processing.","pos":[8,390],"nodes":[{"content":"The <ph id=\"ph1\">`DataSet`</ph> does not associate an XML element with its corresponding <ph id=\"ph2\">`DataColumn`</ph> or <ph id=\"ph3\">`DataTable`</ph> when legal XML characters like (\"_\") are escaped in the serialized XML.","pos":[1,171],"source":" The `DataSet` does not associate an XML element with its corresponding `DataColumn` or `DataTable` when legal XML characters like (\"_\") are escaped in the serialized XML."},{"content":"The <ph id=\"ph1\">`DataSet`</ph> itself only escapes illegal XML characters in XML element names and hence can only consume the same.","pos":[172,286],"source":" The `DataSet` itself only escapes illegal XML characters in XML element names and hence can only consume the same."},{"content":"When legal characters in XML element name are escaped, the element is ignored while processing.","pos":[287,382]}]}]},{"pos":[1908,2329],"content":"If the XML Schema for a <xref:System.Data.DataSet> includes a `targetNamespace`, data may not be read, and you may encounter exceptions when calling <xref:System.Data.DataSet.ReadXml%2A> to load the <xref:System.Data.DataSet> with XML that contains elements with no qualifying namespace. To read unqualified elements, set `elementFormDefault` equal to \"qualified\" in your XML Schema as the following example demonstrates.","nodes":[{"content":"If the XML Schema for a <ph id=\"ph1\">&lt;xref:System.Data.DataSet&gt;</ph> includes a <ph id=\"ph2\">`targetNamespace`</ph>, data may not be read, and you may encounter exceptions when calling <ph id=\"ph3\">&lt;xref:System.Data.DataSet.ReadXml%2A&gt;</ph> to load the <ph id=\"ph4\">&lt;xref:System.Data.DataSet&gt;</ph> with XML that contains elements with no qualifying namespace.","pos":[0,287],"source":"If the XML Schema for a <xref:System.Data.DataSet> includes a `targetNamespace`, data may not be read, and you may encounter exceptions when calling <xref:System.Data.DataSet.ReadXml%2A> to load the <xref:System.Data.DataSet> with XML that contains elements with no qualifying namespace."},{"content":"To read unqualified elements, set <ph id=\"ph1\">`elementFormDefault`</ph> equal to \"qualified\" in your XML Schema as the following example demonstrates.","pos":[288,421],"source":" To read unqualified elements, set `elementFormDefault` equal to \"qualified\" in your XML Schema as the following example demonstrates."}]},{"pos":[2655,2754],"content":"<xref:System.Xml.XmlTextReader?displayProperty=fullName> inherits from <xref:System.Xml.XmlReader>.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Xml.XmlTextReader?displayProperty=fullName&gt;</ph> inherits from <ph id=\"ph2\">&lt;xref:System.Xml.XmlReader&gt;</ph>.","pos":[0,99],"source":"<xref:System.Xml.XmlTextReader?displayProperty=fullName> inherits from <xref:System.Xml.XmlReader>."}]},{"pos":[2762,3154],"content":"[!NOTE]\n If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXml%2A> by specifying `XmlReadMode.ReadSchema`. This exception does not occur if you are using .NET Framework version 1.0.","leadings":["","> "],"nodes":[{"content":" If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXml%2A> by specifying `XmlReadMode.ReadSchema`. This exception does not occur if you are using .NET Framework version 1.0.","pos":[8,390],"nodes":[{"content":"If the schema for your <ph id=\"ph1\">&lt;xref:System.Data.DataSet&gt;</ph> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <ph id=\"ph2\">&lt;xref:System.Data.DataSet&gt;</ph> with <ph id=\"ph3\">&lt;xref:System.Data.DataSet.ReadXml%2A&gt;</ph> by specifying <ph id=\"ph4\">`XmlReadMode.ReadSchema`</ph>.","pos":[1,307],"source":" If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXml%2A> by specifying `XmlReadMode.ReadSchema`."},{"content":"This exception does not occur if you are using .NET Framework version 1.0.","pos":[308,382]}]}]}],"pos":[231609,234811],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Xml.XmlReader\"></xref> from which to read.","nodes":[{"pos":[0,65],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Xml.XmlReader\"&gt;&lt;/xref&gt;</ph> from which to read.","source":"The <xref href=\"System.Xml.XmlReader\"></xref> from which to read."}],"pos":[235746,235812],"yaml":true},{"content":"The `XmlReadMode` used to read the data.","nodes":[{"pos":[0,40],"content":"The <ph id=\"ph1\">`XmlReadMode`</ph> used to read the data.","source":"The `XmlReadMode` used to read the data."}],"pos":[235879,235920],"yaml":true},{"content":"Reads the XML schema from the specified <xref href=\"System.IO.Stream\"></xref> into the <xref href=\"System.Data.DataSet\"></xref>.","nodes":[{"pos":[0,128],"content":"Reads the XML schema from the specified <ph id=\"ph1\">&lt;xref href=\"System.IO.Stream\"&gt;&lt;/xref&gt;</ph> into the <ph id=\"ph2\">&lt;xref href=\"System.Data.DataSet\"&gt;&lt;/xref&gt;</ph>.","source":"Reads the XML schema from the specified <xref href=\"System.IO.Stream\"></xref> into the <xref href=\"System.Data.DataSet\"></xref>."}],"pos":[237147,237276],"yaml":true},{"content":"Use the <xref:System.Data.DataSet.ReadXmlSchema%2A> method to create the schema for a <xref:System.Data.DataSet>. The schema includes table, relation, and constraint definitions. To write a schema to an XML document, use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method.  \n  \n The XML schema is written using the XSD standard.  \n  \n> [!NOTE]\n>  Data corruption can occur if the msdata:DataType and the xs:type types do not match. No exception will be thrown.  \n  \n The <xref:System.Data.DataSet.ReadXmlSchema%2A> method is generally invoked before invoking the <xref:System.Data.DataSet.ReadXml%2A> method which is used to fill the <xref:System.Data.DataSet>.  \n  \n Classes that derive from the <xref:System.IO.Stream> class include <xref:System.IO.BufferedStream>, <xref:System.IO.FileStream>, <xref:System.IO.MemoryStream>, and <xref:System.Net.Sockets.NetworkStream>.  \n  \n> [!NOTE]\n>  If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is be thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXmlSchema%2A>. This exception does not occur if you are using .NET Framework version 1.0.","nodes":[{"pos":[0,277],"content":"Use the <xref:System.Data.DataSet.ReadXmlSchema%2A> method to create the schema for a <xref:System.Data.DataSet>. The schema includes table, relation, and constraint definitions. To write a schema to an XML document, use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method.","nodes":[{"content":"Use the <xref:System.Data.DataSet.ReadXmlSchema%2A> method to create the schema for a <xref:System.Data.DataSet>. The schema includes table, relation, and constraint definitions. To write a schema to an XML document, use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method.","pos":[0,277],"nodes":[{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Data.DataSet.ReadXmlSchema%2A&gt;</ph> method to create the schema for a <ph id=\"ph2\">&lt;xref:System.Data.DataSet&gt;</ph>.","pos":[0,113],"source":"Use the <xref:System.Data.DataSet.ReadXmlSchema%2A> method to create the schema for a <xref:System.Data.DataSet>."},{"content":"The schema includes table, relation, and constraint definitions.","pos":[114,178]},{"content":"To write a schema to an XML document, use the <ph id=\"ph1\">&lt;xref:System.Data.DataSet.WriteXmlSchema%2A&gt;</ph> method.","pos":[179,277],"source":" To write a schema to an XML document, use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method."}]}]},{"pos":[284,333],"content":"The XML schema is written using the XSD standard.","nodes":[{"content":"The XML schema is written using the XSD standard.","pos":[0,49]}]},{"pos":[341,465],"content":"[!NOTE]\n Data corruption can occur if the msdata:DataType and the xs:type types do not match. No exception will be thrown.","leadings":["","> "],"nodes":[{"content":" Data corruption can occur if the msdata:DataType and the xs:type types do not match. No exception will be thrown.","pos":[8,122],"nodes":[{"content":"Data corruption can occur if the msdata:DataType and the xs:type types do not match.","pos":[1,85]},{"content":"No exception will be thrown.","pos":[86,114]}]}]},{"pos":[472,666],"content":"The <xref:System.Data.DataSet.ReadXmlSchema%2A> method is generally invoked before invoking the <xref:System.Data.DataSet.ReadXml%2A> method which is used to fill the <xref:System.Data.DataSet>.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Data.DataSet.ReadXmlSchema%2A&gt;</ph> method is generally invoked before invoking the <ph id=\"ph2\">&lt;xref:System.Data.DataSet.ReadXml%2A&gt;</ph> method which is used to fill the <ph id=\"ph3\">&lt;xref:System.Data.DataSet&gt;</ph>.","pos":[0,194],"source":"The <xref:System.Data.DataSet.ReadXmlSchema%2A> method is generally invoked before invoking the <xref:System.Data.DataSet.ReadXml%2A> method which is used to fill the <xref:System.Data.DataSet>."}]},{"pos":[673,877],"content":"Classes that derive from the <xref:System.IO.Stream> class include <xref:System.IO.BufferedStream>, <xref:System.IO.FileStream>, <xref:System.IO.MemoryStream>, and <xref:System.Net.Sockets.NetworkStream>.","nodes":[{"content":"Classes that derive from the <ph id=\"ph1\">&lt;xref:System.IO.Stream&gt;</ph> class include <ph id=\"ph2\">&lt;xref:System.IO.BufferedStream&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.IO.FileStream&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.IO.MemoryStream&gt;</ph>, and <ph id=\"ph5\">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>.","pos":[0,204],"source":"Classes that derive from the <xref:System.IO.Stream> class include <xref:System.IO.BufferedStream>, <xref:System.IO.FileStream>, <xref:System.IO.MemoryStream>, and <xref:System.Net.Sockets.NetworkStream>."}]},{"pos":[885,1247],"content":"[!NOTE]\n If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is be thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXmlSchema%2A>. This exception does not occur if you are using .NET Framework version 1.0.","leadings":["","> "],"nodes":[{"content":" If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is be thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXmlSchema%2A>. This exception does not occur if you are using .NET Framework version 1.0.","pos":[8,360],"nodes":[{"content":"If the schema for your <ph id=\"ph1\">&lt;xref:System.Data.DataSet&gt;</ph> contains elements of the same name, but different type, in the same namespace, an exception is be thrown when you attempt to read the schema into the <ph id=\"ph2\">&lt;xref:System.Data.DataSet&gt;</ph> with <ph id=\"ph3\">&lt;xref:System.Data.DataSet.ReadXmlSchema%2A&gt;</ph>.","pos":[1,277],"source":" If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is be thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXmlSchema%2A>."},{"content":"This exception does not occur if you are using .NET Framework version 1.0.","pos":[278,352]}]}]}],"pos":[237287,238549],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.IO.Stream\"></xref> from which to read.","nodes":[{"pos":[0,61],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.IO.Stream\"&gt;&lt;/xref&gt;</ph> from which to read.","source":"The <xref href=\"System.IO.Stream\"></xref> from which to read."}],"pos":[239261,239323],"yaml":true},{"content":"Reads the XML schema from the specified <xref href=\"System.IO.TextReader\"></xref> into the <xref href=\"System.Data.DataSet\"></xref>.","nodes":[{"pos":[0,132],"content":"Reads the XML schema from the specified <ph id=\"ph1\">&lt;xref href=\"System.IO.TextReader\"&gt;&lt;/xref&gt;</ph> into the <ph id=\"ph2\">&lt;xref href=\"System.Data.DataSet\"&gt;&lt;/xref&gt;</ph>.","source":"Reads the XML schema from the specified <xref href=\"System.IO.TextReader\"></xref> into the <xref href=\"System.Data.DataSet\"></xref>."}],"pos":[240580,240713],"yaml":true},{"content":"Use the <xref:System.Data.DataSet.ReadXmlSchema%2A> method to create the schema for a <xref:System.Data.DataSet>. The schema includes table, relation, and constraint definitions. To write a schema to an XML document, use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method.  \n  \n The XML schema is written using the XSD standard.  \n  \n> [!NOTE]\n>  Data corruption can occur if the msdata:DataType and the xs:type types do not match. No exception will be thrown.  \n  \n The <xref:System.Data.DataSet.ReadXmlSchema%2A> method is generally invoked before invoking the <xref:System.Data.DataSet.ReadXml%2A> method which is used to fill the <xref:System.Data.DataSet>.  \n  \n Classes that inherit from the <xref:System.IO.TextReader> class include the <xref:System.IO.StreamReader> and <xref:System.IO.StringReader> classes.  \n  \n> [!NOTE]\n>  If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is be thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXmlSchema%2A>. This exception does not occur if you are using .NET Framework version 1.0.","nodes":[{"pos":[0,277],"content":"Use the <xref:System.Data.DataSet.ReadXmlSchema%2A> method to create the schema for a <xref:System.Data.DataSet>. The schema includes table, relation, and constraint definitions. To write a schema to an XML document, use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method.","nodes":[{"content":"Use the <xref:System.Data.DataSet.ReadXmlSchema%2A> method to create the schema for a <xref:System.Data.DataSet>. The schema includes table, relation, and constraint definitions. To write a schema to an XML document, use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method.","pos":[0,277],"nodes":[{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Data.DataSet.ReadXmlSchema%2A&gt;</ph> method to create the schema for a <ph id=\"ph2\">&lt;xref:System.Data.DataSet&gt;</ph>.","pos":[0,113],"source":"Use the <xref:System.Data.DataSet.ReadXmlSchema%2A> method to create the schema for a <xref:System.Data.DataSet>."},{"content":"The schema includes table, relation, and constraint definitions.","pos":[114,178]},{"content":"To write a schema to an XML document, use the <ph id=\"ph1\">&lt;xref:System.Data.DataSet.WriteXmlSchema%2A&gt;</ph> method.","pos":[179,277],"source":" To write a schema to an XML document, use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method."}]}]},{"pos":[284,333],"content":"The XML schema is written using the XSD standard.","nodes":[{"content":"The XML schema is written using the XSD standard.","pos":[0,49]}]},{"pos":[341,465],"content":"[!NOTE]\n Data corruption can occur if the msdata:DataType and the xs:type types do not match. No exception will be thrown.","leadings":["","> "],"nodes":[{"content":" Data corruption can occur if the msdata:DataType and the xs:type types do not match. No exception will be thrown.","pos":[8,122],"nodes":[{"content":"Data corruption can occur if the msdata:DataType and the xs:type types do not match.","pos":[1,85]},{"content":"No exception will be thrown.","pos":[86,114]}]}]},{"pos":[472,666],"content":"The <xref:System.Data.DataSet.ReadXmlSchema%2A> method is generally invoked before invoking the <xref:System.Data.DataSet.ReadXml%2A> method which is used to fill the <xref:System.Data.DataSet>.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Data.DataSet.ReadXmlSchema%2A&gt;</ph> method is generally invoked before invoking the <ph id=\"ph2\">&lt;xref:System.Data.DataSet.ReadXml%2A&gt;</ph> method which is used to fill the <ph id=\"ph3\">&lt;xref:System.Data.DataSet&gt;</ph>.","pos":[0,194],"source":"The <xref:System.Data.DataSet.ReadXmlSchema%2A> method is generally invoked before invoking the <xref:System.Data.DataSet.ReadXml%2A> method which is used to fill the <xref:System.Data.DataSet>."}]},{"pos":[673,821],"content":"Classes that inherit from the <xref:System.IO.TextReader> class include the <xref:System.IO.StreamReader> and <xref:System.IO.StringReader> classes.","nodes":[{"content":"Classes that inherit from the <ph id=\"ph1\">&lt;xref:System.IO.TextReader&gt;</ph> class include the <ph id=\"ph2\">&lt;xref:System.IO.StreamReader&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.IO.StringReader&gt;</ph> classes.","pos":[0,148],"source":"Classes that inherit from the <xref:System.IO.TextReader> class include the <xref:System.IO.StreamReader> and <xref:System.IO.StringReader> classes."}]},{"pos":[829,1191],"content":"[!NOTE]\n If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is be thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXmlSchema%2A>. This exception does not occur if you are using .NET Framework version 1.0.","leadings":["","> "],"nodes":[{"content":" If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is be thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXmlSchema%2A>. This exception does not occur if you are using .NET Framework version 1.0.","pos":[8,360],"nodes":[{"content":"If the schema for your <ph id=\"ph1\">&lt;xref:System.Data.DataSet&gt;</ph> contains elements of the same name, but different type, in the same namespace, an exception is be thrown when you attempt to read the schema into the <ph id=\"ph2\">&lt;xref:System.Data.DataSet&gt;</ph> with <ph id=\"ph3\">&lt;xref:System.Data.DataSet.ReadXmlSchema%2A&gt;</ph>.","pos":[1,277],"source":" If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is be thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXmlSchema%2A>."},{"content":"This exception does not occur if you are using .NET Framework version 1.0.","pos":[278,352]}]}]}],"pos":[240724,241930],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.IO.TextReader\"></xref> from which to read.","nodes":[{"pos":[0,65],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.IO.TextReader\"&gt;&lt;/xref&gt;</ph> from which to read.","source":"The <xref href=\"System.IO.TextReader\"></xref> from which to read."}],"pos":[242647,242713],"yaml":true},{"content":"Reads the XML schema from the specified file into the <xref href=\"System.Data.DataSet\"></xref>.","nodes":[{"pos":[0,95],"content":"Reads the XML schema from the specified file into the <ph id=\"ph1\">&lt;xref href=\"System.Data.DataSet\"&gt;&lt;/xref&gt;</ph>.","source":"Reads the XML schema from the specified file into the <xref href=\"System.Data.DataSet\"></xref>."}],"pos":[243937,244033],"yaml":true},{"content":"Use the <xref:System.Data.DataSet.ReadXmlSchema%2A> method to create the schema for a <xref:System.Data.DataSet>. The schema includes table, relation, and constraint definitions. To write a schema to an XML document, use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method.  \n  \n The XML schema is written using the XSD standard.  \n  \n> [!NOTE]\n>  Data corruption can occur if the msdata:DataType and the xs:type types do not match. No exception will be thrown.  \n  \n The <xref:System.Data.DataSet.ReadXmlSchema%2A> method is generally invoked before invoking the <xref:System.Data.DataSet.ReadXml%2A> method which is used to fill the <xref:System.Data.DataSet>.  \n  \n> [!NOTE]\n>  If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXmlSchema%2A>. This exception does not occur if you are using .NET Framework version 1.0.","nodes":[{"pos":[0,277],"content":"Use the <xref:System.Data.DataSet.ReadXmlSchema%2A> method to create the schema for a <xref:System.Data.DataSet>. The schema includes table, relation, and constraint definitions. To write a schema to an XML document, use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method.","nodes":[{"content":"Use the <xref:System.Data.DataSet.ReadXmlSchema%2A> method to create the schema for a <xref:System.Data.DataSet>. The schema includes table, relation, and constraint definitions. To write a schema to an XML document, use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method.","pos":[0,277],"nodes":[{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Data.DataSet.ReadXmlSchema%2A&gt;</ph> method to create the schema for a <ph id=\"ph2\">&lt;xref:System.Data.DataSet&gt;</ph>.","pos":[0,113],"source":"Use the <xref:System.Data.DataSet.ReadXmlSchema%2A> method to create the schema for a <xref:System.Data.DataSet>."},{"content":"The schema includes table, relation, and constraint definitions.","pos":[114,178]},{"content":"To write a schema to an XML document, use the <ph id=\"ph1\">&lt;xref:System.Data.DataSet.WriteXmlSchema%2A&gt;</ph> method.","pos":[179,277],"source":" To write a schema to an XML document, use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method."}]}]},{"pos":[284,333],"content":"The XML schema is written using the XSD standard.","nodes":[{"content":"The XML schema is written using the XSD standard.","pos":[0,49]}]},{"pos":[341,465],"content":"[!NOTE]\n Data corruption can occur if the msdata:DataType and the xs:type types do not match. No exception will be thrown.","leadings":["","> "],"nodes":[{"content":" Data corruption can occur if the msdata:DataType and the xs:type types do not match. No exception will be thrown.","pos":[8,122],"nodes":[{"content":"Data corruption can occur if the msdata:DataType and the xs:type types do not match.","pos":[1,85]},{"content":"No exception will be thrown.","pos":[86,114]}]}]},{"pos":[472,666],"content":"The <xref:System.Data.DataSet.ReadXmlSchema%2A> method is generally invoked before invoking the <xref:System.Data.DataSet.ReadXml%2A> method which is used to fill the <xref:System.Data.DataSet>.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Data.DataSet.ReadXmlSchema%2A&gt;</ph> method is generally invoked before invoking the <ph id=\"ph2\">&lt;xref:System.Data.DataSet.ReadXml%2A&gt;</ph> method which is used to fill the <ph id=\"ph3\">&lt;xref:System.Data.DataSet&gt;</ph>.","pos":[0,194],"source":"The <xref:System.Data.DataSet.ReadXmlSchema%2A> method is generally invoked before invoking the <xref:System.Data.DataSet.ReadXml%2A> method which is used to fill the <xref:System.Data.DataSet>."}]},{"pos":[674,1033],"content":"[!NOTE]\n If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXmlSchema%2A>. This exception does not occur if you are using .NET Framework version 1.0.","leadings":["","> "],"nodes":[{"content":" If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXmlSchema%2A>. This exception does not occur if you are using .NET Framework version 1.0.","pos":[8,357],"nodes":[{"content":"If the schema for your <ph id=\"ph1\">&lt;xref:System.Data.DataSet&gt;</ph> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <ph id=\"ph2\">&lt;xref:System.Data.DataSet&gt;</ph> with <ph id=\"ph3\">&lt;xref:System.Data.DataSet.ReadXmlSchema%2A&gt;</ph>.","pos":[1,274],"source":" If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXmlSchema%2A>."},{"content":"This exception does not occur if you are using .NET Framework version 1.0.","pos":[275,349]}]}]}],"pos":[244044,245090],"yaml":true,"extradata":"MT"},{"content":"The file name (including the path) from which to read.","nodes":[{"pos":[0,54],"content":"The file name (including the path) from which to read.","nodes":[{"content":"The file name (including the path) from which to read.","pos":[0,54]}]}],"pos":[245614,245669],"yaml":true},{"content":"<xref href=\"System.Security.Permissions.FileIOPermission\"></xref> is not set to <xref href=\"System.Security.Permissions.FileIOPermissionAccess.Read\"></xref>.","nodes":[{"pos":[0,157],"content":"<ph id=\"ph1\">&lt;xref href=\"System.Security.Permissions.FileIOPermission\"&gt;&lt;/xref&gt;</ph> is not set to <ph id=\"ph2\">&lt;xref href=\"System.Security.Permissions.FileIOPermissionAccess.Read\"&gt;&lt;/xref&gt;</ph>.","source":"<xref href=\"System.Security.Permissions.FileIOPermission\"></xref> is not set to <xref href=\"System.Security.Permissions.FileIOPermissionAccess.Read\"></xref>."}],"pos":[245842,246000],"yaml":true},{"content":"Reads the XML schema from the specified <xref href=\"System.Xml.XmlReader\"></xref> into the <xref href=\"System.Data.DataSet\"></xref>.","nodes":[{"pos":[0,132],"content":"Reads the XML schema from the specified <ph id=\"ph1\">&lt;xref href=\"System.Xml.XmlReader\"&gt;&lt;/xref&gt;</ph> into the <ph id=\"ph2\">&lt;xref href=\"System.Data.DataSet\"&gt;&lt;/xref&gt;</ph>.","source":"Reads the XML schema from the specified <xref href=\"System.Xml.XmlReader\"></xref> into the <xref href=\"System.Data.DataSet\"></xref>."}],"pos":[247190,247323],"yaml":true},{"content":"Use the <xref:System.Data.DataSet.ReadXmlSchema%2A> method to create the schema for a <xref:System.Data.DataSet>. The schema includes table, relation, and constraint definitions.  \n  \n The XML schema is written using the XSD standard.  \n  \n> [!NOTE]\n>  Data corruption can occur if the msdata:DataType and the xs:type types do not match. No exception will be thrown.  \n  \n The <xref:System.Data.DataSet.ReadXmlSchema%2A> method is generally invoked before invoking the <xref:System.Data.DataSet.ReadXml%2A> method which is used to fill the <xref:System.Data.DataSet>.  \n  \n The <xref:System.Xml.XmlReader?displayProperty=fullName> class is abstract. A class that inherits from the `XmlReader` is the <xref:System.Xml.XmlTextReader?displayProperty=fullName> class.  \n  \n> [!NOTE]\n>  If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is be thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXmlSchema%2A>. This exception does not occur if you are using .NET Framework version 1.0.","nodes":[{"pos":[0,178],"content":"Use the <xref:System.Data.DataSet.ReadXmlSchema%2A> method to create the schema for a <xref:System.Data.DataSet>. The schema includes table, relation, and constraint definitions.","nodes":[{"content":"Use the <xref:System.Data.DataSet.ReadXmlSchema%2A> method to create the schema for a <xref:System.Data.DataSet>. The schema includes table, relation, and constraint definitions.","pos":[0,178],"nodes":[{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Data.DataSet.ReadXmlSchema%2A&gt;</ph> method to create the schema for a <ph id=\"ph2\">&lt;xref:System.Data.DataSet&gt;</ph>.","pos":[0,113],"source":"Use the <xref:System.Data.DataSet.ReadXmlSchema%2A> method to create the schema for a <xref:System.Data.DataSet>."},{"content":"The schema includes table, relation, and constraint definitions.","pos":[114,178]}]}]},{"pos":[185,234],"content":"The XML schema is written using the XSD standard.","nodes":[{"content":"The XML schema is written using the XSD standard.","pos":[0,49]}]},{"pos":[242,366],"content":"[!NOTE]\n Data corruption can occur if the msdata:DataType and the xs:type types do not match. No exception will be thrown.","leadings":["","> "],"nodes":[{"content":" Data corruption can occur if the msdata:DataType and the xs:type types do not match. No exception will be thrown.","pos":[8,122],"nodes":[{"content":"Data corruption can occur if the msdata:DataType and the xs:type types do not match.","pos":[1,85]},{"content":"No exception will be thrown.","pos":[86,114]}]}]},{"pos":[373,567],"content":"The <xref:System.Data.DataSet.ReadXmlSchema%2A> method is generally invoked before invoking the <xref:System.Data.DataSet.ReadXml%2A> method which is used to fill the <xref:System.Data.DataSet>.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Data.DataSet.ReadXmlSchema%2A&gt;</ph> method is generally invoked before invoking the <ph id=\"ph2\">&lt;xref:System.Data.DataSet.ReadXml%2A&gt;</ph> method which is used to fill the <ph id=\"ph3\">&lt;xref:System.Data.DataSet&gt;</ph>.","pos":[0,194],"source":"The <xref:System.Data.DataSet.ReadXmlSchema%2A> method is generally invoked before invoking the <xref:System.Data.DataSet.ReadXml%2A> method which is used to fill the <xref:System.Data.DataSet>."}]},{"pos":[574,763],"content":"The <xref:System.Xml.XmlReader?displayProperty=fullName> class is abstract. A class that inherits from the `XmlReader` is the <xref:System.Xml.XmlTextReader?displayProperty=fullName> class.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Xml.XmlReader?displayProperty=fullName&gt;</ph> class is abstract.","pos":[0,75],"source":"The <xref:System.Xml.XmlReader?displayProperty=fullName> class is abstract."},{"content":"A class that inherits from the <ph id=\"ph1\">`XmlReader`</ph> is the <ph id=\"ph2\">&lt;xref:System.Xml.XmlTextReader?displayProperty=fullName&gt;</ph> class.","pos":[76,189],"source":" A class that inherits from the `XmlReader` is the <xref:System.Xml.XmlTextReader?displayProperty=fullName> class."}]},{"pos":[771,1133],"content":"[!NOTE]\n If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is be thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXmlSchema%2A>. This exception does not occur if you are using .NET Framework version 1.0.","leadings":["","> "],"nodes":[{"content":" If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is be thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXmlSchema%2A>. This exception does not occur if you are using .NET Framework version 1.0.","pos":[8,360],"nodes":[{"content":"If the schema for your <ph id=\"ph1\">&lt;xref:System.Data.DataSet&gt;</ph> contains elements of the same name, but different type, in the same namespace, an exception is be thrown when you attempt to read the schema into the <ph id=\"ph2\">&lt;xref:System.Data.DataSet&gt;</ph> with <ph id=\"ph3\">&lt;xref:System.Data.DataSet.ReadXmlSchema%2A&gt;</ph>.","pos":[1,277],"source":" If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is be thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXmlSchema%2A>."},{"content":"This exception does not occur if you are using .NET Framework version 1.0.","pos":[278,352]}]}]}],"pos":[247334,248482],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Xml.XmlReader\"></xref> from which to read.","nodes":[{"pos":[0,65],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Xml.XmlReader\"&gt;&lt;/xref&gt;</ph> from which to read.","source":"The <xref href=\"System.Xml.XmlReader\"></xref> from which to read."}],"pos":[249394,249460],"yaml":true},{"content":"Ignores attributes and returns an empty DataSet.","nodes":[{"pos":[0,48],"content":"Ignores attributes and returns an empty DataSet.","nodes":[{"content":"Ignores attributes and returns an empty DataSet.","pos":[0,48]}]}],"pos":[250750,250799],"yaml":true},{"content":"The specified XML reader.","nodes":[{"pos":[0,25],"content":"The specified XML reader.","nodes":[{"content":"The specified XML reader.","pos":[0,25]}]}],"pos":[250981,251007],"yaml":true},{"content":"Rolls back all the changes made to the <xref href=\"System.Data.DataSet\"></xref> since it was created, or since the last time <xref href=\"System.Data.DataSet.AcceptChanges\"></xref> was called.","nodes":[{"pos":[0,191],"content":"Rolls back all the changes made to the <ph id=\"ph1\">&lt;xref href=\"System.Data.DataSet\"&gt;&lt;/xref&gt;</ph> since it was created, or since the last time <ph id=\"ph2\">&lt;xref href=\"System.Data.DataSet.AcceptChanges\"&gt;&lt;/xref&gt;</ph> was called.","source":"Rolls back all the changes made to the <xref href=\"System.Data.DataSet\"></xref> since it was created, or since the last time <xref href=\"System.Data.DataSet.AcceptChanges\"></xref> was called."}],"pos":[252174,252366],"yaml":true},{"content":"Invoke the <xref:System.Data.DataSet.RejectChanges%2A?displayProperty=fullName> to call the <xref:System.Data.DataTable.RejectChanges%2A?displayProperty=fullName> method on all <xref:System.Data.DataTable> objects contained by the <xref:System.Data.DataSet>.  \n  \n <xref:System.Data.DataRow> objects contained by the <xref:System.Data.DataSet> can each be set into edit mode by invoking the <xref:System.Data.DataRow.BeginEdit%2A?displayProperty=fullName> method. After invoking the <xref:System.Data.DataRow.EndEdit%2A?displayProperty=fullName> method, changes can be rejected by calling the <xref:System.Data.DataTable.RejectChanges%2A?displayProperty=fullName> on the <xref:System.Data.DataTable> to which the <xref:System.Data.DataRow> objects belong.  \n  \n When the <xref:System.Data.DataTable.RejectChanges%2A?displayProperty=fullName> method is called, any rows still in edit-mode cancel their edits. New rows are removed. Modified and deleted rows return back to their original state (`DataRowState.Unchanged`).  \n  \n AcceptChanges and RejectChanges only apply to <xref:System.Data.DataRow> related changes (that is, `Add`, `Remove`, `Delete`, and `Modify`). They are not applicable to schema or structural changes.","nodes":[{"pos":[0,258],"content":"Invoke the <xref:System.Data.DataSet.RejectChanges%2A?displayProperty=fullName> to call the <xref:System.Data.DataTable.RejectChanges%2A?displayProperty=fullName> method on all <xref:System.Data.DataTable> objects contained by the <xref:System.Data.DataSet>.","nodes":[{"content":"Invoke the <ph id=\"ph1\">&lt;xref:System.Data.DataSet.RejectChanges%2A?displayProperty=fullName&gt;</ph> to call the <ph id=\"ph2\">&lt;xref:System.Data.DataTable.RejectChanges%2A?displayProperty=fullName&gt;</ph> method on all <ph id=\"ph3\">&lt;xref:System.Data.DataTable&gt;</ph> objects contained by the <ph id=\"ph4\">&lt;xref:System.Data.DataSet&gt;</ph>.","pos":[0,258],"source":"Invoke the <xref:System.Data.DataSet.RejectChanges%2A?displayProperty=fullName> to call the <xref:System.Data.DataTable.RejectChanges%2A?displayProperty=fullName> method on all <xref:System.Data.DataTable> objects contained by the <xref:System.Data.DataSet>."}]},{"pos":[265,755],"content":"<xref:System.Data.DataRow> objects contained by the <xref:System.Data.DataSet> can each be set into edit mode by invoking the <xref:System.Data.DataRow.BeginEdit%2A?displayProperty=fullName> method. After invoking the <xref:System.Data.DataRow.EndEdit%2A?displayProperty=fullName> method, changes can be rejected by calling the <xref:System.Data.DataTable.RejectChanges%2A?displayProperty=fullName> on the <xref:System.Data.DataTable> to which the <xref:System.Data.DataRow> objects belong.","nodes":[{"content":"<xref:System.Data.DataRow> objects contained by the <xref:System.Data.DataSet> can each be set into edit mode by invoking the <xref:System.Data.DataRow.BeginEdit%2A?displayProperty=fullName> method. After invoking the <xref:System.Data.DataRow.EndEdit%2A?displayProperty=fullName> method, changes can be rejected by calling the <xref:System.Data.DataTable.RejectChanges%2A?displayProperty=fullName> on the <xref:System.Data.DataTable> to which the <xref:System.Data.DataRow> objects belong.","pos":[0,490],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Data.DataRow&gt;</ph> objects contained by the <ph id=\"ph2\">&lt;xref:System.Data.DataSet&gt;</ph> can each be set into edit mode by invoking the <ph id=\"ph3\">&lt;xref:System.Data.DataRow.BeginEdit%2A?displayProperty=fullName&gt;</ph> method.","pos":[0,198],"source":"<xref:System.Data.DataRow> objects contained by the <xref:System.Data.DataSet> can each be set into edit mode by invoking the <xref:System.Data.DataRow.BeginEdit%2A?displayProperty=fullName> method."},{"content":"After invoking the <ph id=\"ph1\">&lt;xref:System.Data.DataRow.EndEdit%2A?displayProperty=fullName&gt;</ph> method, changes can be rejected by calling the <ph id=\"ph2\">&lt;xref:System.Data.DataTable.RejectChanges%2A?displayProperty=fullName&gt;</ph> on the <ph id=\"ph3\">&lt;xref:System.Data.DataTable&gt;</ph> to which the <ph id=\"ph4\">&lt;xref:System.Data.DataRow&gt;</ph> objects belong.","pos":[199,490],"source":" After invoking the <xref:System.Data.DataRow.EndEdit%2A?displayProperty=fullName> method, changes can be rejected by calling the <xref:System.Data.DataTable.RejectChanges%2A?displayProperty=fullName> on the <xref:System.Data.DataTable> to which the <xref:System.Data.DataRow> objects belong."}]}]},{"pos":[762,1019],"content":"When the <xref:System.Data.DataTable.RejectChanges%2A?displayProperty=fullName> method is called, any rows still in edit-mode cancel their edits. New rows are removed. Modified and deleted rows return back to their original state (`DataRowState.Unchanged`).","nodes":[{"content":"When the <ph id=\"ph1\">&lt;xref:System.Data.DataTable.RejectChanges%2A?displayProperty=fullName&gt;</ph> method is called, any rows still in edit-mode cancel their edits.","pos":[0,145],"source":"When the <xref:System.Data.DataTable.RejectChanges%2A?displayProperty=fullName> method is called, any rows still in edit-mode cancel their edits."},{"content":"New rows are removed.","pos":[146,167]},{"content":"Modified and deleted rows return back to their original state (<ph id=\"ph1\">`DataRowState.Unchanged`</ph>).","pos":[168,257],"source":" Modified and deleted rows return back to their original state (`DataRowState.Unchanged`)."}]},{"pos":[1026,1223],"content":"AcceptChanges and RejectChanges only apply to <xref:System.Data.DataRow> related changes (that is, `Add`, `Remove`, `Delete`, and `Modify`). They are not applicable to schema or structural changes.","nodes":[{"content":"AcceptChanges and RejectChanges only apply to <ph id=\"ph1\">&lt;xref:System.Data.DataRow&gt;</ph> related changes (that is, <ph id=\"ph2\">`Add`</ph>, <ph id=\"ph3\">`Remove`</ph>, <ph id=\"ph4\">`Delete`</ph>, and <ph id=\"ph5\">`Modify`</ph>).","pos":[0,140],"source":"AcceptChanges and RejectChanges only apply to <xref:System.Data.DataRow> related changes (that is, `Add`, `Remove`, `Delete`, and `Modify`)."},{"content":"They are not applicable to schema or structural changes.","pos":[141,197]}]}],"pos":[252377,253609],"yaml":true,"extradata":"MT"},{"content":"Get the collection of relations that link tables and allow navigation from parent tables to child tables.","nodes":[{"pos":[0,105],"content":"Get the collection of relations that link tables and allow navigation from parent tables to child tables.","nodes":[{"content":"Get the collection of relations that link tables and allow navigation from parent tables to child tables.","pos":[0,105]}]}],"pos":[255370,255476],"yaml":true},{"content":"A <xref href=\"System.Data.DataRelationCollection\"></xref> that contains a collection of <xref href=\"System.Data.DataRelation\"></xref> objects. An empty collection is returned if no <xref href=\"System.Data.DataRelation\"></xref> objects exist.","nodes":[{"pos":[0,241],"content":"A <xref href=\"System.Data.DataRelationCollection\"></xref> that contains a collection of <xref href=\"System.Data.DataRelation\"></xref> objects. An empty collection is returned if no <xref href=\"System.Data.DataRelation\"></xref> objects exist.","nodes":[{"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Data.DataRelationCollection\"&gt;&lt;/xref&gt;</ph> that contains a collection of <ph id=\"ph2\">&lt;xref href=\"System.Data.DataRelation\"&gt;&lt;/xref&gt;</ph> objects.","pos":[0,142],"source":"A <xref href=\"System.Data.DataRelationCollection\"></xref> that contains a collection of <xref href=\"System.Data.DataRelation\"></xref> objects."},{"content":"An empty collection is returned if no <ph id=\"ph1\">&lt;xref href=\"System.Data.DataRelation\"&gt;&lt;/xref&gt;</ph> objects exist.","pos":[143,241],"source":" An empty collection is returned if no <xref href=\"System.Data.DataRelation\"></xref> objects exist."}]}],"pos":[255969,256211],"yaml":true},{"content":"Gets or sets a <xref href=\"System.Data.SerializationFormat\"></xref> for the <xref href=\"System.Data.DataSet\"></xref> used during remoting.","nodes":[{"pos":[0,138],"content":"Gets or sets a <ph id=\"ph1\">&lt;xref href=\"System.Data.SerializationFormat\"&gt;&lt;/xref&gt;</ph> for the <ph id=\"ph2\">&lt;xref href=\"System.Data.DataSet\"&gt;&lt;/xref&gt;</ph> used during remoting.","source":"Gets or sets a <xref href=\"System.Data.SerializationFormat\"></xref> for the <xref href=\"System.Data.DataSet\"></xref> used during remoting."}],"pos":[257387,257526],"yaml":true},{"content":"A <xref href=\"System.Data.SerializationFormat\"></xref> object.","nodes":[{"pos":[0,62],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Data.SerializationFormat\"&gt;&lt;/xref&gt;</ph> object.","source":"A <xref href=\"System.Data.SerializationFormat\"></xref> object."}],"pos":[257692,257755],"yaml":true},{"content":"Clears all tables and removes all relations, foreign constraints, and tables from the <xref href=\"System.Data.DataSet\"></xref>. Subclasses should override <xref href=\"System.Data.DataSet.Reset\"></xref> to restore a <xref href=\"System.Data.DataSet\"></xref> to its original state.","nodes":[{"pos":[0,278],"content":"Clears all tables and removes all relations, foreign constraints, and tables from the <xref href=\"System.Data.DataSet\"></xref>. Subclasses should override <xref href=\"System.Data.DataSet.Reset\"></xref> to restore a <xref href=\"System.Data.DataSet\"></xref> to its original state.","nodes":[{"content":"Clears all tables and removes all relations, foreign constraints, and tables from the <ph id=\"ph1\">&lt;xref href=\"System.Data.DataSet\"&gt;&lt;/xref&gt;</ph>.","pos":[0,127],"source":"Clears all tables and removes all relations, foreign constraints, and tables from the <xref href=\"System.Data.DataSet\"></xref>."},{"content":"Subclasses should override <ph id=\"ph1\">&lt;xref href=\"System.Data.DataSet.Reset\"&gt;&lt;/xref&gt;</ph> to restore a <ph id=\"ph2\">&lt;xref href=\"System.Data.DataSet\"&gt;&lt;/xref&gt;</ph> to its original state.","pos":[128,278],"source":" Subclasses should override <xref href=\"System.Data.DataSet.Reset\"></xref> to restore a <xref href=\"System.Data.DataSet\"></xref> to its original state."}]}],"pos":[258886,259165],"yaml":true},{"content":"Gets or sets a <xref href=\"System.Data.SchemaSerializationMode\"></xref> for a <xref href=\"System.Data.DataSet\"></xref>.","nodes":[{"pos":[0,119],"content":"Gets or sets a <ph id=\"ph1\">&lt;xref href=\"System.Data.SchemaSerializationMode\"&gt;&lt;/xref&gt;</ph> for a <ph id=\"ph2\">&lt;xref href=\"System.Data.DataSet\"&gt;&lt;/xref&gt;</ph>.","source":"Gets or sets a <xref href=\"System.Data.SchemaSerializationMode\"></xref> for a <xref href=\"System.Data.DataSet\"></xref>."}],"pos":[260446,260566],"yaml":true},{"content":"A <xref:System.Data.DataSet> serializes its schema and instance data by default in Web services and remoting scenarios. Setting the <xref:System.Data.DataSet.SchemaSerializationMode%2A> property of a typed `DataSet` to <xref:System.Data.SchemaSerializationMode.ExcludeSchema> causes schema information to be excluded from the serialization payload.  \n  \n <xref:System.Data.SchemaSerializationMode.ExcludeSchema> is supported only for a typed `DataSet`. For an un-typed `DataSet` this property can only be set to <xref:System.Data.SchemaSerializationMode.IncludeSchema>.  \n  \n <xref:System.Data.SchemaSerializationMode.ExcludeSchema> should only be used in cases where the schema information of the underlying typed `DataTables`, `DataRelations` and `Constraints` has not been modified. If modifications have occurred, complete schema information should be serialized with <xref:System.Data.SchemaSerializationMode.IncludeSchema>.  \n  \n <xref:System.Data.SchemaSerializationMode.ExcludeSchema> is supported in version 2.0 of the .NET Framework or later.  \n  \n When <xref:System.Data.SchemaSerializationMode.ExcludeSchema> is set, only the top level runtime properties present on the <xref:System.Data.DataSet> are serialized. In addition, they are serialized only if they happen to be different from the default values. None of the `Tables`, `Relations` or `Constraints` are serialized. The serialized runtime properties include <xref:System.Data.DataSet.DataSetName%2A>, <xref:System.Data.DataSet.Namespace%2A>, <xref:System.Data.DataSet.Prefix%2A>, <xref:System.Data.DataSet.Locale%2A>, <xref:System.Data.DataSet.EnforceConstraints%2A>, and <xref:System.Data.DataSet.CaseSensitive%2A>. These properties are serialized to make sure that overall runtime data integrity is preserved.","nodes":[{"pos":[0,348],"content":"A <xref:System.Data.DataSet> serializes its schema and instance data by default in Web services and remoting scenarios. Setting the <xref:System.Data.DataSet.SchemaSerializationMode%2A> property of a typed `DataSet` to <xref:System.Data.SchemaSerializationMode.ExcludeSchema> causes schema information to be excluded from the serialization payload.","nodes":[{"content":"A <ph id=\"ph1\">&lt;xref:System.Data.DataSet&gt;</ph> serializes its schema and instance data by default in Web services and remoting scenarios.","pos":[0,119],"source":"A <xref:System.Data.DataSet> serializes its schema and instance data by default in Web services and remoting scenarios."},{"content":"Setting the <ph id=\"ph1\">&lt;xref:System.Data.DataSet.SchemaSerializationMode%2A&gt;</ph> property of a typed <ph id=\"ph2\">`DataSet`</ph> to <ph id=\"ph3\">&lt;xref:System.Data.SchemaSerializationMode.ExcludeSchema&gt;</ph> causes schema information to be excluded from the serialization payload.","pos":[120,348],"source":" Setting the <xref:System.Data.DataSet.SchemaSerializationMode%2A> property of a typed `DataSet` to <xref:System.Data.SchemaSerializationMode.ExcludeSchema> causes schema information to be excluded from the serialization payload."}]},{"pos":[355,569],"content":"<xref:System.Data.SchemaSerializationMode.ExcludeSchema> is supported only for a typed `DataSet`. For an un-typed `DataSet` this property can only be set to <xref:System.Data.SchemaSerializationMode.IncludeSchema>.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Data.SchemaSerializationMode.ExcludeSchema&gt;</ph> is supported only for a typed <ph id=\"ph2\">`DataSet`</ph>.","pos":[0,97],"source":"<xref:System.Data.SchemaSerializationMode.ExcludeSchema> is supported only for a typed `DataSet`."},{"content":"For an un-typed <ph id=\"ph1\">`DataSet`</ph> this property can only be set to <ph id=\"ph2\">&lt;xref:System.Data.SchemaSerializationMode.IncludeSchema&gt;</ph>.","pos":[98,214],"source":" For an un-typed `DataSet` this property can only be set to <xref:System.Data.SchemaSerializationMode.IncludeSchema>."}]},{"pos":[576,929],"content":"<xref:System.Data.SchemaSerializationMode.ExcludeSchema> should only be used in cases where the schema information of the underlying typed `DataTables`, `DataRelations` and `Constraints` has not been modified. If modifications have occurred, complete schema information should be serialized with <xref:System.Data.SchemaSerializationMode.IncludeSchema>.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Data.SchemaSerializationMode.ExcludeSchema&gt;</ph> should only be used in cases where the schema information of the underlying typed <ph id=\"ph2\">`DataTables`</ph>, <ph id=\"ph3\">`DataRelations`</ph> and <ph id=\"ph4\">`Constraints`</ph> has not been modified.","pos":[0,209],"source":"<xref:System.Data.SchemaSerializationMode.ExcludeSchema> should only be used in cases where the schema information of the underlying typed `DataTables`, `DataRelations` and `Constraints` has not been modified."},{"content":"If modifications have occurred, complete schema information should be serialized with <ph id=\"ph1\">&lt;xref:System.Data.SchemaSerializationMode.IncludeSchema&gt;</ph>.","pos":[210,353],"source":" If modifications have occurred, complete schema information should be serialized with <xref:System.Data.SchemaSerializationMode.IncludeSchema>."}]},{"pos":[936,1052],"content":"<xref:System.Data.SchemaSerializationMode.ExcludeSchema> is supported in version 2.0 of the .NET Framework or later.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Data.SchemaSerializationMode.ExcludeSchema&gt;</ph> is supported in version 2.0 of the .NET Framework or later.","pos":[0,116],"source":"<xref:System.Data.SchemaSerializationMode.ExcludeSchema> is supported in version 2.0 of the .NET Framework or later."}]},{"pos":[1059,1781],"content":"When <xref:System.Data.SchemaSerializationMode.ExcludeSchema> is set, only the top level runtime properties present on the <xref:System.Data.DataSet> are serialized. In addition, they are serialized only if they happen to be different from the default values. None of the `Tables`, `Relations` or `Constraints` are serialized. The serialized runtime properties include <xref:System.Data.DataSet.DataSetName%2A>, <xref:System.Data.DataSet.Namespace%2A>, <xref:System.Data.DataSet.Prefix%2A>, <xref:System.Data.DataSet.Locale%2A>, <xref:System.Data.DataSet.EnforceConstraints%2A>, and <xref:System.Data.DataSet.CaseSensitive%2A>. These properties are serialized to make sure that overall runtime data integrity is preserved.","nodes":[{"content":"When <ph id=\"ph1\">&lt;xref:System.Data.SchemaSerializationMode.ExcludeSchema&gt;</ph> is set, only the top level runtime properties present on the <ph id=\"ph2\">&lt;xref:System.Data.DataSet&gt;</ph> are serialized.","pos":[0,165],"source":"When <xref:System.Data.SchemaSerializationMode.ExcludeSchema> is set, only the top level runtime properties present on the <xref:System.Data.DataSet> are serialized."},{"content":"In addition, they are serialized only if they happen to be different from the default values.","pos":[166,259]},{"content":"None of the <ph id=\"ph1\">`Tables`</ph>, <ph id=\"ph2\">`Relations`</ph> or <ph id=\"ph3\">`Constraints`</ph> are serialized.","pos":[260,326],"source":" None of the `Tables`, `Relations` or `Constraints` are serialized."},{"content":"The serialized runtime properties include <ph id=\"ph1\">&lt;xref:System.Data.DataSet.DataSetName%2A&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Data.DataSet.Namespace%2A&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Data.DataSet.Prefix%2A&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.Data.DataSet.Locale%2A&gt;</ph>, <ph id=\"ph5\">&lt;xref:System.Data.DataSet.EnforceConstraints%2A&gt;</ph>, and <ph id=\"ph6\">&lt;xref:System.Data.DataSet.CaseSensitive%2A&gt;</ph>.","pos":[327,627],"source":" The serialized runtime properties include <xref:System.Data.DataSet.DataSetName%2A>, <xref:System.Data.DataSet.Namespace%2A>, <xref:System.Data.DataSet.Prefix%2A>, <xref:System.Data.DataSet.Locale%2A>, <xref:System.Data.DataSet.EnforceConstraints%2A>, and <xref:System.Data.DataSet.CaseSensitive%2A>."},{"content":"These properties are serialized to make sure that overall runtime data integrity is preserved.","pos":[628,722]}]}],"pos":[260577,262369],"yaml":true,"extradata":"MT"},{"content":"Gets or sets a <xref href=\"System.Data.SchemaSerializationMode\"></xref> for a <xref href=\"System.Data.DataSet\"></xref>.","nodes":[{"pos":[0,119],"content":"Gets or sets a <ph id=\"ph1\">&lt;xref href=\"System.Data.SchemaSerializationMode\"&gt;&lt;/xref&gt;</ph> for a <ph id=\"ph2\">&lt;xref href=\"System.Data.DataSet\"&gt;&lt;/xref&gt;</ph>.","source":"Gets or sets a <xref href=\"System.Data.SchemaSerializationMode\"></xref> for a <xref href=\"System.Data.DataSet\"></xref>."}],"pos":[262617,262737],"yaml":true},{"content":"Gets a value indicating whether <xref href=\"System.Data.DataSet.Relations\"></xref> property should be persisted.","nodes":[{"pos":[0,112],"content":"Gets a value indicating whether <ph id=\"ph1\">&lt;xref href=\"System.Data.DataSet.Relations\"&gt;&lt;/xref&gt;</ph> property should be persisted.","source":"Gets a value indicating whether <xref href=\"System.Data.DataSet.Relations\"></xref> property should be persisted."}],"pos":[264039,264152],"yaml":true},{"content":"You typically use this method if you are either creating a designer for the <xref:System.Data.DataSet>, or creating your own control incorporating the <xref:System.Data.DataSet>.","nodes":[{"pos":[0,178],"content":"You typically use this method if you are either creating a designer for the <xref:System.Data.DataSet>, or creating your own control incorporating the <xref:System.Data.DataSet>.","nodes":[{"content":"You typically use this method if you are either creating a designer for the <ph id=\"ph1\">&lt;xref:System.Data.DataSet&gt;</ph>, or creating your own control incorporating the <ph id=\"ph2\">&lt;xref:System.Data.DataSet&gt;</ph>.","pos":[0,178],"source":"You typically use this method if you are either creating a designer for the <xref:System.Data.DataSet>, or creating your own control incorporating the <xref:System.Data.DataSet>."}]}],"pos":[264163,264342],"yaml":true,"extradata":"MT"},{"content":"`true` if the property value has been changed from its default; otherwise `false`.","nodes":[{"pos":[0,82],"content":"<ph id=\"ph1\">`true`</ph> if the property value has been changed from its default; otherwise <ph id=\"ph2\">`false`</ph>.","source":"`true` if the property value has been changed from its default; otherwise `false`."}],"pos":[265160,265245],"yaml":true},{"content":"Gets a value indicating whether <xref href=\"System.Data.DataSet.Tables\"></xref> property should be persisted.","nodes":[{"pos":[0,109],"content":"Gets a value indicating whether <ph id=\"ph1\">&lt;xref href=\"System.Data.DataSet.Tables\"&gt;&lt;/xref&gt;</ph> property should be persisted.","source":"Gets a value indicating whether <xref href=\"System.Data.DataSet.Tables\"></xref> property should be persisted."}],"pos":[266465,266575],"yaml":true},{"content":"You typically use this method only if you are either creating a designer for the <xref:System.Data.DataSet>, or creating your own control incorporating the <xref:System.Data.DataSet>.","nodes":[{"pos":[0,183],"content":"You typically use this method only if you are either creating a designer for the <xref:System.Data.DataSet>, or creating your own control incorporating the <xref:System.Data.DataSet>.","nodes":[{"content":"You typically use this method only if you are either creating a designer for the <ph id=\"ph1\">&lt;xref:System.Data.DataSet&gt;</ph>, or creating your own control incorporating the <ph id=\"ph2\">&lt;xref:System.Data.DataSet&gt;</ph>.","pos":[0,183],"source":"You typically use this method only if you are either creating a designer for the <xref:System.Data.DataSet>, or creating your own control incorporating the <xref:System.Data.DataSet>."}]}],"pos":[266586,266770],"yaml":true,"extradata":"MT"},{"content":"`true` if the property value has been changed from its default; otherwise `false`.","nodes":[{"pos":[0,82],"content":"<ph id=\"ph1\">`true`</ph> if the property value has been changed from its default; otherwise <ph id=\"ph2\">`false`</ph>.","source":"`true` if the property value has been changed from its default; otherwise `false`."}],"pos":[267527,267612],"yaml":true},{"content":"Gets or sets an <xref href=\"System.ComponentModel.ISite\"></xref> for the <xref href=\"System.Data.DataSet\"></xref>.","nodes":[{"pos":[0,114],"content":"Gets or sets an <ph id=\"ph1\">&lt;xref href=\"System.ComponentModel.ISite\"&gt;&lt;/xref&gt;</ph> for the <ph id=\"ph2\">&lt;xref href=\"System.Data.DataSet\"&gt;&lt;/xref&gt;</ph>.","source":"Gets or sets an <xref href=\"System.ComponentModel.ISite\"></xref> for the <xref href=\"System.Data.DataSet\"></xref>."}],"pos":[268723,268838],"yaml":true},{"content":"Sites bind a <xref:System.ComponentModel.Component> to a <xref:System.ComponentModel.Container> and enable communication between them, as well as provide a way for the container to manage its components.","nodes":[{"pos":[0,203],"content":"Sites bind a <xref:System.ComponentModel.Component> to a <xref:System.ComponentModel.Container> and enable communication between them, as well as provide a way for the container to manage its components.","nodes":[{"content":"Sites bind a <ph id=\"ph1\">&lt;xref:System.ComponentModel.Component&gt;</ph> to a <ph id=\"ph2\">&lt;xref:System.ComponentModel.Container&gt;</ph> and enable communication between them, as well as provide a way for the container to manage its components.","pos":[0,203],"source":"Sites bind a <xref:System.ComponentModel.Component> to a <xref:System.ComponentModel.Container> and enable communication between them, as well as provide a way for the container to manage its components."}]}],"pos":[268849,269053],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.ComponentModel.ISite\"></xref> for the <xref href=\"System.Data.DataSet\"></xref>.","nodes":[{"pos":[0,101],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.ComponentModel.ISite\"&gt;&lt;/xref&gt;</ph> for the <ph id=\"ph2\">&lt;xref href=\"System.Data.DataSet\"&gt;&lt;/xref&gt;</ph>.","source":"An <xref href=\"System.ComponentModel.ISite\"></xref> for the <xref href=\"System.Data.DataSet\"></xref>."}],"pos":[269267,269369],"yaml":true},{"content":"Gets the collection of tables contained in the <xref href=\"System.Data.DataSet\"></xref>.","nodes":[{"pos":[0,88],"content":"Gets the collection of tables contained in the <ph id=\"ph1\">&lt;xref href=\"System.Data.DataSet\"&gt;&lt;/xref&gt;</ph>.","source":"Gets the collection of tables contained in the <xref href=\"System.Data.DataSet\"></xref>."}],"pos":[270540,270629],"yaml":true},{"content":"To add tables to the collection, use <xref:System.Data.DataTableCollection.Add%2A> method of the <xref:System.Data.DataTableCollection>. To remove tables, use the <xref:System.Data.DataTableCollection.Remove%2A> method.","nodes":[{"pos":[0,219],"content":"To add tables to the collection, use <xref:System.Data.DataTableCollection.Add%2A> method of the <xref:System.Data.DataTableCollection>. To remove tables, use the <xref:System.Data.DataTableCollection.Remove%2A> method.","nodes":[{"content":"To add tables to the collection, use <xref:System.Data.DataTableCollection.Add%2A> method of the <xref:System.Data.DataTableCollection>. To remove tables, use the <xref:System.Data.DataTableCollection.Remove%2A> method.","pos":[0,219],"nodes":[{"content":"To add tables to the collection, use <ph id=\"ph1\">&lt;xref:System.Data.DataTableCollection.Add%2A&gt;</ph> method of the <ph id=\"ph2\">&lt;xref:System.Data.DataTableCollection&gt;</ph>.","pos":[0,136],"source":"To add tables to the collection, use <xref:System.Data.DataTableCollection.Add%2A> method of the <xref:System.Data.DataTableCollection>."},{"content":"To remove tables, use the <ph id=\"ph1\">&lt;xref:System.Data.DataTableCollection.Remove%2A&gt;</ph> method.","pos":[137,219],"source":" To remove tables, use the <xref:System.Data.DataTableCollection.Remove%2A> method."}]}]}],"pos":[270640,270860],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Data.DataTableCollection\"></xref> contained by this <xref href=\"System.Data.DataSet\"></xref>. An empty collection is returned if no <xref href=\"System.Data.DataTable\"></xref> objects exist.","nodes":[{"pos":[0,212],"content":"The <xref href=\"System.Data.DataTableCollection\"></xref> contained by this <xref href=\"System.Data.DataSet\"></xref>. An empty collection is returned if no <xref href=\"System.Data.DataTable\"></xref> objects exist.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Data.DataTableCollection\"&gt;&lt;/xref&gt;</ph> contained by this <ph id=\"ph2\">&lt;xref href=\"System.Data.DataSet\"&gt;&lt;/xref&gt;</ph>.","pos":[0,116],"source":"The <xref href=\"System.Data.DataTableCollection\"></xref> contained by this <xref href=\"System.Data.DataSet\"></xref>."},{"content":"An empty collection is returned if no <ph id=\"ph1\">&lt;xref href=\"System.Data.DataTable\"&gt;&lt;/xref&gt;</ph> objects exist.","pos":[117,212],"source":" An empty collection is returned if no <xref href=\"System.Data.DataTable\"></xref> objects exist."}]}],"pos":[271514,271727],"yaml":true},{"content":"Writes the current data, and optionally the schema, for the <xref href=\"System.Data.DataSet\"></xref> using the specified <xref href=\"System.Xml.XmlWriter\"></xref> and <xref href=\"System.Data.XmlWriteMode\"></xref>. To write the schema, set the value for the <code>mode</code> parameter to `WriteSchema`.","nodes":[{"pos":[0,302],"content":"Writes the current data, and optionally the schema, for the <xref href=\"System.Data.DataSet\"></xref> using the specified <xref href=\"System.Xml.XmlWriter\"></xref> and <xref href=\"System.Data.XmlWriteMode\"></xref>. To write the schema, set the value for the <code>mode</code> parameter to `WriteSchema`.","nodes":[{"content":"Writes the current data, and optionally the schema, for the <ph id=\"ph1\">&lt;xref href=\"System.Data.DataSet\"&gt;&lt;/xref&gt;</ph> using the specified <ph id=\"ph2\">&lt;xref href=\"System.Xml.XmlWriter\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph3\">&lt;xref href=\"System.Data.XmlWriteMode\"&gt;&lt;/xref&gt;</ph>.","pos":[0,213],"source":"Writes the current data, and optionally the schema, for the <xref href=\"System.Data.DataSet\"></xref> using the specified <xref href=\"System.Xml.XmlWriter\"></xref> and <xref href=\"System.Data.XmlWriteMode\"></xref>."},{"content":"To write the schema, set the value for the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">mode</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter to <ph id=\"ph2\">`WriteSchema`</ph>.","pos":[214,302],"source":" To write the schema, set the value for the <code>mode</code> parameter to `WriteSchema`."}]}],"pos":[273078,273381],"yaml":true},{"content":"The `WriteXml` method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataSet> into an XML document, whereas the <xref:System.Data.DataSet.WriteXmlSchema%2A> method writes only the schema. To write both data and schema, set the `mode` parameter to `WriteSchema`.  \n  \n Note that the same is true for the <xref:System.Data.DataSet.ReadXml%2A> and <xref:System.Data.DataSet.ReadXmlSchema%2A> methods, respectively. To read XML data, or both schema and data into the `DataSet`, use the `ReadXml` method. To read just the schema, use the `ReadXmlSchema` method.  \n  \n> [!NOTE]\n>  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.","nodes":[{"pos":[0,305],"content":"The `WriteXml` method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataSet> into an XML document, whereas the <xref:System.Data.DataSet.WriteXmlSchema%2A> method writes only the schema. To write both data and schema, set the `mode` parameter to `WriteSchema`.","nodes":[{"content":"The <ph id=\"ph1\">`WriteXml`</ph> method provides a way to write either data only, or both data and schema from a <ph id=\"ph2\">&lt;xref:System.Data.DataSet&gt;</ph> into an XML document, whereas the <ph id=\"ph3\">&lt;xref:System.Data.DataSet.WriteXmlSchema%2A&gt;</ph> method writes only the schema.","pos":[0,231],"source":"The `WriteXml` method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataSet> into an XML document, whereas the <xref:System.Data.DataSet.WriteXmlSchema%2A> method writes only the schema."},{"content":"To write both data and schema, set the <ph id=\"ph1\">`mode`</ph> parameter to <ph id=\"ph2\">`WriteSchema`</ph>.","pos":[232,305],"source":" To write both data and schema, set the `mode` parameter to `WriteSchema`."}]},{"pos":[312,600],"content":"Note that the same is true for the <xref:System.Data.DataSet.ReadXml%2A> and <xref:System.Data.DataSet.ReadXmlSchema%2A> methods, respectively. To read XML data, or both schema and data into the `DataSet`, use the `ReadXml` method. To read just the schema, use the `ReadXmlSchema` method.","nodes":[{"content":"Note that the same is true for the <ph id=\"ph1\">&lt;xref:System.Data.DataSet.ReadXml%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Data.DataSet.ReadXmlSchema%2A&gt;</ph> methods, respectively.","pos":[0,143],"source":"Note that the same is true for the <xref:System.Data.DataSet.ReadXml%2A> and <xref:System.Data.DataSet.ReadXmlSchema%2A> methods, respectively."},{"content":"To read XML data, or both schema and data into the <ph id=\"ph1\">`DataSet`</ph>, use the <ph id=\"ph2\">`ReadXml`</ph> method.","pos":[144,231],"source":" To read XML data, or both schema and data into the `DataSet`, use the `ReadXml` method."},{"content":"To read just the schema, use the <ph id=\"ph1\">`ReadXmlSchema`</ph> method.","pos":[232,288],"source":" To read just the schema, use the `ReadXmlSchema` method."}]},{"pos":[608,873],"content":"[!NOTE]\n An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.","leadings":["","> "],"nodes":[{"content":"An <ph id=\"ph1\">&lt;xref:System.InvalidOperationException&gt;</ph> will be thrown if a column type in the <ph id=\"ph2\">`DataRow`</ph> being read from or written to implements <ph id=\"ph3\">&lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt;</ph> and does not implement <ph id=\"ph4\">&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;</ph>.","pos":[9,263],"source":" An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>."}]}],"pos":[273392,274273],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Xml.XmlWriter\"></xref> with which to write.","nodes":[{"pos":[0,66],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Xml.XmlWriter\"&gt;&lt;/xref&gt;</ph> with which to write.","source":"The <xref href=\"System.Xml.XmlWriter\"></xref> with which to write."}],"pos":[275131,275198],"yaml":true},{"content":"One of the <xref href=\"System.Data.XmlWriteMode\"></xref> values.","nodes":[{"pos":[0,64],"content":"One of the <ph id=\"ph1\">&lt;xref href=\"System.Data.XmlWriteMode\"&gt;&lt;/xref&gt;</ph> values.","source":"One of the <xref href=\"System.Data.XmlWriteMode\"></xref> values."}],"pos":[275269,275334],"yaml":true},{"content":"Writes the current data, and optionally the schema, for the <xref href=\"System.Data.DataSet\"></xref> to the specified file using the specified <xref href=\"System.Data.XmlWriteMode\"></xref>. To write the schema, set the value for the <code>mode</code> parameter to `WriteSchema`.","nodes":[{"pos":[0,278],"content":"Writes the current data, and optionally the schema, for the <xref href=\"System.Data.DataSet\"></xref> to the specified file using the specified <xref href=\"System.Data.XmlWriteMode\"></xref>. To write the schema, set the value for the <code>mode</code> parameter to `WriteSchema`.","nodes":[{"content":"Writes the current data, and optionally the schema, for the <ph id=\"ph1\">&lt;xref href=\"System.Data.DataSet\"&gt;&lt;/xref&gt;</ph> to the specified file using the specified <ph id=\"ph2\">&lt;xref href=\"System.Data.XmlWriteMode\"&gt;&lt;/xref&gt;</ph>.","pos":[0,189],"source":"Writes the current data, and optionally the schema, for the <xref href=\"System.Data.DataSet\"></xref> to the specified file using the specified <xref href=\"System.Data.XmlWriteMode\"></xref>."},{"content":"To write the schema, set the value for the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">mode</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter to <ph id=\"ph2\">`WriteSchema`</ph>.","pos":[190,278],"source":" To write the schema, set the value for the <code>mode</code> parameter to `WriteSchema`."}]}],"pos":[276640,276919],"yaml":true},{"content":"The `WriteXml` method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataSet> into an XML document, whereas the <xref:System.Data.DataSet.WriteXmlSchema%2A> method writes only the schema. To write both data and schema, set the `mode` parameter to `WriteSchema`.  \n  \n Note that the same is true for the <xref:System.Data.DataSet.ReadXml%2A> and <xref:System.Data.DataSet.ReadXmlSchema%2A> methods, respectively. To read XML data, or both schema and data into the `DataSet`, use the `ReadXml` method. To read just the schema, use the `ReadXmlSchema` method.  \n  \n> [!NOTE]\n>  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.","nodes":[{"pos":[0,305],"content":"The `WriteXml` method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataSet> into an XML document, whereas the <xref:System.Data.DataSet.WriteXmlSchema%2A> method writes only the schema. To write both data and schema, set the `mode` parameter to `WriteSchema`.","nodes":[{"content":"The <ph id=\"ph1\">`WriteXml`</ph> method provides a way to write either data only, or both data and schema from a <ph id=\"ph2\">&lt;xref:System.Data.DataSet&gt;</ph> into an XML document, whereas the <ph id=\"ph3\">&lt;xref:System.Data.DataSet.WriteXmlSchema%2A&gt;</ph> method writes only the schema.","pos":[0,231],"source":"The `WriteXml` method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataSet> into an XML document, whereas the <xref:System.Data.DataSet.WriteXmlSchema%2A> method writes only the schema."},{"content":"To write both data and schema, set the <ph id=\"ph1\">`mode`</ph> parameter to <ph id=\"ph2\">`WriteSchema`</ph>.","pos":[232,305],"source":" To write both data and schema, set the `mode` parameter to `WriteSchema`."}]},{"pos":[312,600],"content":"Note that the same is true for the <xref:System.Data.DataSet.ReadXml%2A> and <xref:System.Data.DataSet.ReadXmlSchema%2A> methods, respectively. To read XML data, or both schema and data into the `DataSet`, use the `ReadXml` method. To read just the schema, use the `ReadXmlSchema` method.","nodes":[{"content":"Note that the same is true for the <ph id=\"ph1\">&lt;xref:System.Data.DataSet.ReadXml%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Data.DataSet.ReadXmlSchema%2A&gt;</ph> methods, respectively.","pos":[0,143],"source":"Note that the same is true for the <xref:System.Data.DataSet.ReadXml%2A> and <xref:System.Data.DataSet.ReadXmlSchema%2A> methods, respectively."},{"content":"To read XML data, or both schema and data into the <ph id=\"ph1\">`DataSet`</ph>, use the <ph id=\"ph2\">`ReadXml`</ph> method.","pos":[144,231],"source":" To read XML data, or both schema and data into the `DataSet`, use the `ReadXml` method."},{"content":"To read just the schema, use the <ph id=\"ph1\">`ReadXmlSchema`</ph> method.","pos":[232,288],"source":" To read just the schema, use the `ReadXmlSchema` method."}]},{"pos":[608,873],"content":"[!NOTE]\n An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.","leadings":["","> "],"nodes":[{"content":"An <ph id=\"ph1\">&lt;xref:System.InvalidOperationException&gt;</ph> will be thrown if a column type in the <ph id=\"ph2\">`DataRow`</ph> being read from or written to implements <ph id=\"ph3\">&lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt;</ph> and does not implement <ph id=\"ph4\">&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;</ph>.","pos":[9,263],"source":" An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>."}]}],"pos":[276930,277811],"yaml":true,"extradata":"MT"},{"content":"The file name (including the path) to which to write.","nodes":[{"pos":[0,53],"content":"The file name (including the path) to which to write.","nodes":[{"content":"The file name (including the path) to which to write.","pos":[0,53]}]}],"pos":[278444,278498],"yaml":true},{"content":"One of the <xref href=\"System.Data.XmlWriteMode\"></xref> values.","nodes":[{"pos":[0,64],"content":"One of the <ph id=\"ph1\">&lt;xref href=\"System.Data.XmlWriteMode\"&gt;&lt;/xref&gt;</ph> values.","source":"One of the <xref href=\"System.Data.XmlWriteMode\"></xref> values."}],"pos":[278569,278634],"yaml":true},{"content":"<xref href=\"System.Security.Permissions.FileIOPermission\"></xref> is not set to <xref href=\"System.Security.Permissions.FileIOPermissionAccess.Write\"></xref>.","nodes":[{"pos":[0,158],"content":"<ph id=\"ph1\">&lt;xref href=\"System.Security.Permissions.FileIOPermission\"&gt;&lt;/xref&gt;</ph> is not set to <ph id=\"ph2\">&lt;xref href=\"System.Security.Permissions.FileIOPermissionAccess.Write\"&gt;&lt;/xref&gt;</ph>.","source":"<xref href=\"System.Security.Permissions.FileIOPermission\"></xref> is not set to <xref href=\"System.Security.Permissions.FileIOPermissionAccess.Write\"></xref>."}],"pos":[278802,278961],"yaml":true},{"content":"Writes the current data, and optionally the schema, for the <xref href=\"System.Data.DataSet\"></xref> using the specified <xref href=\"System.IO.TextWriter\"></xref> and <xref href=\"System.Data.XmlWriteMode\"></xref>. To write the schema, set the value for the <code>mode</code> parameter to `WriteSchema`.","nodes":[{"pos":[0,302],"content":"Writes the current data, and optionally the schema, for the <xref href=\"System.Data.DataSet\"></xref> using the specified <xref href=\"System.IO.TextWriter\"></xref> and <xref href=\"System.Data.XmlWriteMode\"></xref>. To write the schema, set the value for the <code>mode</code> parameter to `WriteSchema`.","nodes":[{"content":"Writes the current data, and optionally the schema, for the <ph id=\"ph1\">&lt;xref href=\"System.Data.DataSet\"&gt;&lt;/xref&gt;</ph> using the specified <ph id=\"ph2\">&lt;xref href=\"System.IO.TextWriter\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph3\">&lt;xref href=\"System.Data.XmlWriteMode\"&gt;&lt;/xref&gt;</ph>.","pos":[0,213],"source":"Writes the current data, and optionally the schema, for the <xref href=\"System.Data.DataSet\"></xref> using the specified <xref href=\"System.IO.TextWriter\"></xref> and <xref href=\"System.Data.XmlWriteMode\"></xref>."},{"content":"To write the schema, set the value for the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">mode</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter to <ph id=\"ph2\">`WriteSchema`</ph>.","pos":[214,302],"source":" To write the schema, set the value for the <code>mode</code> parameter to `WriteSchema`."}]}],"pos":[280241,280544],"yaml":true},{"content":"The `WriteXml` method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataSet> into an XML document, whereas the <xref:System.Data.DataSet.WriteXmlSchema%2A> method writes only the schema. To write both data and schema, set the `mode` parameter to `WriteSchema`.  \n  \n Note that the same is true for the <xref:System.Data.DataSet.ReadXml%2A> and <xref:System.Data.DataSet.ReadXmlSchema%2A> methods, respectively. To read XML data, or both schema and data into the `DataSet`, use the `ReadXml` method. To read just the schema, use the `ReadXmlSchema` method.  \n  \n> [!NOTE]\n>  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.","nodes":[{"pos":[0,305],"content":"The `WriteXml` method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataSet> into an XML document, whereas the <xref:System.Data.DataSet.WriteXmlSchema%2A> method writes only the schema. To write both data and schema, set the `mode` parameter to `WriteSchema`.","nodes":[{"content":"The <ph id=\"ph1\">`WriteXml`</ph> method provides a way to write either data only, or both data and schema from a <ph id=\"ph2\">&lt;xref:System.Data.DataSet&gt;</ph> into an XML document, whereas the <ph id=\"ph3\">&lt;xref:System.Data.DataSet.WriteXmlSchema%2A&gt;</ph> method writes only the schema.","pos":[0,231],"source":"The `WriteXml` method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataSet> into an XML document, whereas the <xref:System.Data.DataSet.WriteXmlSchema%2A> method writes only the schema."},{"content":"To write both data and schema, set the <ph id=\"ph1\">`mode`</ph> parameter to <ph id=\"ph2\">`WriteSchema`</ph>.","pos":[232,305],"source":" To write both data and schema, set the `mode` parameter to `WriteSchema`."}]},{"pos":[312,600],"content":"Note that the same is true for the <xref:System.Data.DataSet.ReadXml%2A> and <xref:System.Data.DataSet.ReadXmlSchema%2A> methods, respectively. To read XML data, or both schema and data into the `DataSet`, use the `ReadXml` method. To read just the schema, use the `ReadXmlSchema` method.","nodes":[{"content":"Note that the same is true for the <ph id=\"ph1\">&lt;xref:System.Data.DataSet.ReadXml%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Data.DataSet.ReadXmlSchema%2A&gt;</ph> methods, respectively.","pos":[0,143],"source":"Note that the same is true for the <xref:System.Data.DataSet.ReadXml%2A> and <xref:System.Data.DataSet.ReadXmlSchema%2A> methods, respectively."},{"content":"To read XML data, or both schema and data into the <ph id=\"ph1\">`DataSet`</ph>, use the <ph id=\"ph2\">`ReadXml`</ph> method.","pos":[144,231],"source":" To read XML data, or both schema and data into the `DataSet`, use the `ReadXml` method."},{"content":"To read just the schema, use the <ph id=\"ph1\">`ReadXmlSchema`</ph> method.","pos":[232,288],"source":" To read just the schema, use the `ReadXmlSchema` method."}]},{"pos":[608,873],"content":"[!NOTE]\n An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.","leadings":["","> "],"nodes":[{"content":"An <ph id=\"ph1\">&lt;xref:System.InvalidOperationException&gt;</ph> will be thrown if a column type in the <ph id=\"ph2\">`DataRow`</ph> being read from or written to implements <ph id=\"ph3\">&lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt;</ph> and does not implement <ph id=\"ph4\">&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;</ph>.","pos":[9,263],"source":" An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>."}]}],"pos":[280555,281436],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.IO.TextWriter\"></xref> object used to write the document.","nodes":[{"pos":[0,78],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.IO.TextWriter\"&gt;&lt;/xref&gt;</ph> object used to write the document.","source":"A <xref href=\"System.IO.TextWriter\"></xref> object used to write the document."}],"pos":[282388,282467],"yaml":true},{"content":"One of the <xref href=\"System.Data.XmlWriteMode\"></xref> values.","nodes":[{"pos":[0,64],"content":"One of the <ph id=\"ph1\">&lt;xref href=\"System.Data.XmlWriteMode\"&gt;&lt;/xref&gt;</ph> values.","source":"One of the <xref href=\"System.Data.XmlWriteMode\"></xref> values."}],"pos":[282538,282603],"yaml":true},{"content":"Writes the current data, and optionally the schema, for the <xref href=\"System.Data.DataSet\"></xref> using the specified <xref href=\"System.IO.Stream\"></xref> and <xref href=\"System.Data.XmlWriteMode\"></xref>. To write the schema, set the value for the <code>mode</code> parameter to `WriteSchema`.","nodes":[{"pos":[0,298],"content":"Writes the current data, and optionally the schema, for the <xref href=\"System.Data.DataSet\"></xref> using the specified <xref href=\"System.IO.Stream\"></xref> and <xref href=\"System.Data.XmlWriteMode\"></xref>. To write the schema, set the value for the <code>mode</code> parameter to `WriteSchema`.","nodes":[{"content":"Writes the current data, and optionally the schema, for the <ph id=\"ph1\">&lt;xref href=\"System.Data.DataSet\"&gt;&lt;/xref&gt;</ph> using the specified <ph id=\"ph2\">&lt;xref href=\"System.IO.Stream\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph3\">&lt;xref href=\"System.Data.XmlWriteMode\"&gt;&lt;/xref&gt;</ph>.","pos":[0,209],"source":"Writes the current data, and optionally the schema, for the <xref href=\"System.Data.DataSet\"></xref> using the specified <xref href=\"System.IO.Stream\"></xref> and <xref href=\"System.Data.XmlWriteMode\"></xref>."},{"content":"To write the schema, set the value for the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">mode</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter to <ph id=\"ph2\">`WriteSchema`</ph>.","pos":[210,298],"source":" To write the schema, set the value for the <code>mode</code> parameter to `WriteSchema`."}]}],"pos":[283918,284217],"yaml":true},{"content":"The `WriteXml` method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataSet> into an XML document, whereas the <xref:System.Data.DataSet.WriteXmlSchema%2A> method writes only the schema. To write both data and schema, set the `mode` parameter to `WriteSchema`.  \n  \n Note that the same is true for the <xref:System.Data.DataSet.ReadXml%2A> and <xref:System.Data.DataSet.ReadXmlSchema%2A> methods, respectively. To read XML data, or both schema and data into the `DataSet`, use the `ReadXml` method. To read just the schema, use the `ReadXmlSchema` method.  \n  \n> [!NOTE]\n>  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.","nodes":[{"pos":[0,305],"content":"The `WriteXml` method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataSet> into an XML document, whereas the <xref:System.Data.DataSet.WriteXmlSchema%2A> method writes only the schema. To write both data and schema, set the `mode` parameter to `WriteSchema`.","nodes":[{"content":"The <ph id=\"ph1\">`WriteXml`</ph> method provides a way to write either data only, or both data and schema from a <ph id=\"ph2\">&lt;xref:System.Data.DataSet&gt;</ph> into an XML document, whereas the <ph id=\"ph3\">&lt;xref:System.Data.DataSet.WriteXmlSchema%2A&gt;</ph> method writes only the schema.","pos":[0,231],"source":"The `WriteXml` method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataSet> into an XML document, whereas the <xref:System.Data.DataSet.WriteXmlSchema%2A> method writes only the schema."},{"content":"To write both data and schema, set the <ph id=\"ph1\">`mode`</ph> parameter to <ph id=\"ph2\">`WriteSchema`</ph>.","pos":[232,305],"source":" To write both data and schema, set the `mode` parameter to `WriteSchema`."}]},{"pos":[312,600],"content":"Note that the same is true for the <xref:System.Data.DataSet.ReadXml%2A> and <xref:System.Data.DataSet.ReadXmlSchema%2A> methods, respectively. To read XML data, or both schema and data into the `DataSet`, use the `ReadXml` method. To read just the schema, use the `ReadXmlSchema` method.","nodes":[{"content":"Note that the same is true for the <ph id=\"ph1\">&lt;xref:System.Data.DataSet.ReadXml%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Data.DataSet.ReadXmlSchema%2A&gt;</ph> methods, respectively.","pos":[0,143],"source":"Note that the same is true for the <xref:System.Data.DataSet.ReadXml%2A> and <xref:System.Data.DataSet.ReadXmlSchema%2A> methods, respectively."},{"content":"To read XML data, or both schema and data into the <ph id=\"ph1\">`DataSet`</ph>, use the <ph id=\"ph2\">`ReadXml`</ph> method.","pos":[144,231],"source":" To read XML data, or both schema and data into the `DataSet`, use the `ReadXml` method."},{"content":"To read just the schema, use the <ph id=\"ph1\">`ReadXmlSchema`</ph> method.","pos":[232,288],"source":" To read just the schema, use the `ReadXmlSchema` method."}]},{"pos":[608,873],"content":"[!NOTE]\n An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.","leadings":["","> "],"nodes":[{"content":"An <ph id=\"ph1\">&lt;xref:System.InvalidOperationException&gt;</ph> will be thrown if a column type in the <ph id=\"ph2\">`DataRow`</ph> being read from or written to implements <ph id=\"ph3\">&lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt;</ph> and does not implement <ph id=\"ph4\">&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;</ph>.","pos":[9,263],"source":" An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>."}]}],"pos":[284228,285109],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.IO.Stream\"></xref> object used to write to a file.","nodes":[{"pos":[0,71],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.IO.Stream\"&gt;&lt;/xref&gt;</ph> object used to write to a file.","source":"A <xref href=\"System.IO.Stream\"></xref> object used to write to a file."}],"pos":[285292,285364],"yaml":true},{"content":"One of the <xref href=\"System.Data.XmlWriteMode\"></xref> values.","nodes":[{"pos":[0,64],"content":"One of the <ph id=\"ph1\">&lt;xref href=\"System.Data.XmlWriteMode\"&gt;&lt;/xref&gt;</ph> values.","source":"One of the <xref href=\"System.Data.XmlWriteMode\"></xref> values."}],"pos":[285435,285500],"yaml":true},{"content":"Writes the current data for the <xref href=\"System.Data.DataSet\"></xref> to the specified file.","nodes":[{"pos":[0,95],"content":"Writes the current data for the <ph id=\"ph1\">&lt;xref href=\"System.Data.DataSet\"&gt;&lt;/xref&gt;</ph> to the specified file.","source":"Writes the current data for the <xref href=\"System.Data.DataSet\"></xref> to the specified file."}],"pos":[286689,286785],"yaml":true},{"content":"The `WriteXml` method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataSet> into an XML document, whereas the <xref:System.Data.DataSet.WriteXmlSchema%2A> method writes only the schema. To write both data and schema, use one of the overloads that includes the `mode` parameter, and set its value to `WriteSchema`.  \n  \n Note that the same is true for the <xref:System.Data.DataSet.ReadXml%2A> and <xref:System.Data.DataSet.ReadXmlSchema%2A> methods, respectively. To read XML data, or both schema and data into the `DataSet`, use the `ReadXml` method. To read just the schema, use the `ReadXmlSchema` method.  \n  \n> [!NOTE]\n>  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.","nodes":[{"pos":[0,359],"content":"The `WriteXml` method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataSet> into an XML document, whereas the <xref:System.Data.DataSet.WriteXmlSchema%2A> method writes only the schema. To write both data and schema, use one of the overloads that includes the `mode` parameter, and set its value to `WriteSchema`.","nodes":[{"content":"The <ph id=\"ph1\">`WriteXml`</ph> method provides a way to write either data only, or both data and schema from a <ph id=\"ph2\">&lt;xref:System.Data.DataSet&gt;</ph> into an XML document, whereas the <ph id=\"ph3\">&lt;xref:System.Data.DataSet.WriteXmlSchema%2A&gt;</ph> method writes only the schema.","pos":[0,231],"source":"The `WriteXml` method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataSet> into an XML document, whereas the <xref:System.Data.DataSet.WriteXmlSchema%2A> method writes only the schema."},{"content":"To write both data and schema, use one of the overloads that includes the <ph id=\"ph1\">`mode`</ph> parameter, and set its value to <ph id=\"ph2\">`WriteSchema`</ph>.","pos":[232,359],"source":" To write both data and schema, use one of the overloads that includes the `mode` parameter, and set its value to `WriteSchema`."}]},{"pos":[366,654],"content":"Note that the same is true for the <xref:System.Data.DataSet.ReadXml%2A> and <xref:System.Data.DataSet.ReadXmlSchema%2A> methods, respectively. To read XML data, or both schema and data into the `DataSet`, use the `ReadXml` method. To read just the schema, use the `ReadXmlSchema` method.","nodes":[{"content":"Note that the same is true for the <ph id=\"ph1\">&lt;xref:System.Data.DataSet.ReadXml%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Data.DataSet.ReadXmlSchema%2A&gt;</ph> methods, respectively.","pos":[0,143],"source":"Note that the same is true for the <xref:System.Data.DataSet.ReadXml%2A> and <xref:System.Data.DataSet.ReadXmlSchema%2A> methods, respectively."},{"content":"To read XML data, or both schema and data into the <ph id=\"ph1\">`DataSet`</ph>, use the <ph id=\"ph2\">`ReadXml`</ph> method.","pos":[144,231],"source":" To read XML data, or both schema and data into the `DataSet`, use the `ReadXml` method."},{"content":"To read just the schema, use the <ph id=\"ph1\">`ReadXmlSchema`</ph> method.","pos":[232,288],"source":" To read just the schema, use the `ReadXmlSchema` method."}]},{"pos":[662,927],"content":"[!NOTE]\n An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.","leadings":["","> "],"nodes":[{"content":"An <ph id=\"ph1\">&lt;xref:System.InvalidOperationException&gt;</ph> will be thrown if a column type in the <ph id=\"ph2\">`DataRow`</ph> being read from or written to implements <ph id=\"ph3\">&lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt;</ph> and does not implement <ph id=\"ph4\">&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;</ph>.","pos":[9,263],"source":" An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>."}]}],"pos":[286796,287731],"yaml":true,"extradata":"MT"},{"content":"The file name (including the path) to which to write.","nodes":[{"pos":[0,53],"content":"The file name (including the path) to which to write.","nodes":[{"content":"The file name (including the path) to which to write.","pos":[0,53]}]}],"pos":[287874,287928],"yaml":true},{"content":"<xref href=\"System.Security.Permissions.FileIOPermission\"></xref> is not set to <xref href=\"System.Security.Permissions.FileIOPermissionAccess.Write\"></xref>.","nodes":[{"pos":[0,158],"content":"<ph id=\"ph1\">&lt;xref href=\"System.Security.Permissions.FileIOPermission\"&gt;&lt;/xref&gt;</ph> is not set to <ph id=\"ph2\">&lt;xref href=\"System.Security.Permissions.FileIOPermissionAccess.Write\"&gt;&lt;/xref&gt;</ph>.","source":"<xref href=\"System.Security.Permissions.FileIOPermission\"></xref> is not set to <xref href=\"System.Security.Permissions.FileIOPermissionAccess.Write\"></xref>."}],"pos":[288096,288255],"yaml":true},{"content":"Writes the current data for the <xref href=\"System.Data.DataSet\"></xref> using the specified <xref href=\"System.IO.TextWriter\"></xref>.","nodes":[{"pos":[0,135],"content":"Writes the current data for the <ph id=\"ph1\">&lt;xref href=\"System.Data.DataSet\"&gt;&lt;/xref&gt;</ph> using the specified <ph id=\"ph2\">&lt;xref href=\"System.IO.TextWriter\"&gt;&lt;/xref&gt;</ph>.","source":"Writes the current data for the <xref href=\"System.Data.DataSet\"></xref> using the specified <xref href=\"System.IO.TextWriter\"></xref>."}],"pos":[289418,289554],"yaml":true},{"content":"The `WriteXml` method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataSet> into an XML document, whereas the <xref:System.Data.DataSet.WriteXmlSchema%2A> method writes only the schema. To write both data and schema, use one of the overloads that includes the `mode` parameter, and set its value to `WriteSchema`.  \n  \n Note that the same is true for the <xref:System.Data.DataSet.ReadXml%2A> and <xref:System.Data.DataSet.ReadXmlSchema%2A> methods, respectively. To read XML data, or both schema and data into the `DataSet`, use the `ReadXml` method. To read just the schema, use the `ReadXmlSchema` method.  \n  \n> [!NOTE]\n>  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.","nodes":[{"pos":[0,359],"content":"The `WriteXml` method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataSet> into an XML document, whereas the <xref:System.Data.DataSet.WriteXmlSchema%2A> method writes only the schema. To write both data and schema, use one of the overloads that includes the `mode` parameter, and set its value to `WriteSchema`.","nodes":[{"content":"The <ph id=\"ph1\">`WriteXml`</ph> method provides a way to write either data only, or both data and schema from a <ph id=\"ph2\">&lt;xref:System.Data.DataSet&gt;</ph> into an XML document, whereas the <ph id=\"ph3\">&lt;xref:System.Data.DataSet.WriteXmlSchema%2A&gt;</ph> method writes only the schema.","pos":[0,231],"source":"The `WriteXml` method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataSet> into an XML document, whereas the <xref:System.Data.DataSet.WriteXmlSchema%2A> method writes only the schema."},{"content":"To write both data and schema, use one of the overloads that includes the <ph id=\"ph1\">`mode`</ph> parameter, and set its value to <ph id=\"ph2\">`WriteSchema`</ph>.","pos":[232,359],"source":" To write both data and schema, use one of the overloads that includes the `mode` parameter, and set its value to `WriteSchema`."}]},{"pos":[366,654],"content":"Note that the same is true for the <xref:System.Data.DataSet.ReadXml%2A> and <xref:System.Data.DataSet.ReadXmlSchema%2A> methods, respectively. To read XML data, or both schema and data into the `DataSet`, use the `ReadXml` method. To read just the schema, use the `ReadXmlSchema` method.","nodes":[{"content":"Note that the same is true for the <ph id=\"ph1\">&lt;xref:System.Data.DataSet.ReadXml%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Data.DataSet.ReadXmlSchema%2A&gt;</ph> methods, respectively.","pos":[0,143],"source":"Note that the same is true for the <xref:System.Data.DataSet.ReadXml%2A> and <xref:System.Data.DataSet.ReadXmlSchema%2A> methods, respectively."},{"content":"To read XML data, or both schema and data into the <ph id=\"ph1\">`DataSet`</ph>, use the <ph id=\"ph2\">`ReadXml`</ph> method.","pos":[144,231],"source":" To read XML data, or both schema and data into the `DataSet`, use the `ReadXml` method."},{"content":"To read just the schema, use the <ph id=\"ph1\">`ReadXmlSchema`</ph> method.","pos":[232,288],"source":" To read just the schema, use the `ReadXmlSchema` method."}]},{"pos":[662,927],"content":"[!NOTE]\n An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.","leadings":["","> "],"nodes":[{"content":"An <ph id=\"ph1\">&lt;xref:System.InvalidOperationException&gt;</ph> will be thrown if a column type in the <ph id=\"ph2\">`DataRow`</ph> being read from or written to implements <ph id=\"ph3\">&lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt;</ph> and does not implement <ph id=\"ph4\">&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;</ph>.","pos":[9,263],"source":" An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>."}]}],"pos":[289565,290500],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.IO.TextWriter\"></xref> object with which to write.","nodes":[{"pos":[0,73],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.IO.TextWriter\"&gt;&lt;/xref&gt;</ph> object with which to write.","source":"The <xref href=\"System.IO.TextWriter\"></xref> object with which to write."}],"pos":[290660,290734],"yaml":true},{"content":"Writes the current data for the <xref href=\"System.Data.DataSet\"></xref> to the specified <xref href=\"System.Xml.XmlWriter\"></xref>.","nodes":[{"pos":[0,132],"content":"Writes the current data for the <ph id=\"ph1\">&lt;xref href=\"System.Data.DataSet\"&gt;&lt;/xref&gt;</ph> to the specified <ph id=\"ph2\">&lt;xref href=\"System.Xml.XmlWriter\"&gt;&lt;/xref&gt;</ph>.","source":"Writes the current data for the <xref href=\"System.Data.DataSet\"></xref> to the specified <xref href=\"System.Xml.XmlWriter\"></xref>."}],"pos":[291953,292086],"yaml":true},{"content":"The `WriteXml` method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataSet> into an XML document, whereas the <xref:System.Data.DataSet.WriteXmlSchema%2A> method writes only the schema. To write both data and schema, use one of the overloads that includes the `mode` parameter, and set its value to `WriteSchema`.  \n  \n Note that the same is true for the <xref:System.Data.DataSet.ReadXml%2A> and <xref:System.Data.DataSet.ReadXmlSchema%2A> methods, respectively. To read XML data, or both schema and data into the `DataSet`, use the `ReadXml` method. To read just the schema, use the `ReadXmlSchema` method.  \n  \n> [!NOTE]\n>  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.","nodes":[{"pos":[0,359],"content":"The `WriteXml` method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataSet> into an XML document, whereas the <xref:System.Data.DataSet.WriteXmlSchema%2A> method writes only the schema. To write both data and schema, use one of the overloads that includes the `mode` parameter, and set its value to `WriteSchema`.","nodes":[{"content":"The <ph id=\"ph1\">`WriteXml`</ph> method provides a way to write either data only, or both data and schema from a <ph id=\"ph2\">&lt;xref:System.Data.DataSet&gt;</ph> into an XML document, whereas the <ph id=\"ph3\">&lt;xref:System.Data.DataSet.WriteXmlSchema%2A&gt;</ph> method writes only the schema.","pos":[0,231],"source":"The `WriteXml` method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataSet> into an XML document, whereas the <xref:System.Data.DataSet.WriteXmlSchema%2A> method writes only the schema."},{"content":"To write both data and schema, use one of the overloads that includes the <ph id=\"ph1\">`mode`</ph> parameter, and set its value to <ph id=\"ph2\">`WriteSchema`</ph>.","pos":[232,359],"source":" To write both data and schema, use one of the overloads that includes the `mode` parameter, and set its value to `WriteSchema`."}]},{"pos":[366,654],"content":"Note that the same is true for the <xref:System.Data.DataSet.ReadXml%2A> and <xref:System.Data.DataSet.ReadXmlSchema%2A> methods, respectively. To read XML data, or both schema and data into the `DataSet`, use the `ReadXml` method. To read just the schema, use the `ReadXmlSchema` method.","nodes":[{"content":"Note that the same is true for the <ph id=\"ph1\">&lt;xref:System.Data.DataSet.ReadXml%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Data.DataSet.ReadXmlSchema%2A&gt;</ph> methods, respectively.","pos":[0,143],"source":"Note that the same is true for the <xref:System.Data.DataSet.ReadXml%2A> and <xref:System.Data.DataSet.ReadXmlSchema%2A> methods, respectively."},{"content":"To read XML data, or both schema and data into the <ph id=\"ph1\">`DataSet`</ph>, use the <ph id=\"ph2\">`ReadXml`</ph> method.","pos":[144,231],"source":" To read XML data, or both schema and data into the `DataSet`, use the `ReadXml` method."},{"content":"To read just the schema, use the <ph id=\"ph1\">`ReadXmlSchema`</ph> method.","pos":[232,288],"source":" To read just the schema, use the `ReadXmlSchema` method."}]},{"pos":[662,927],"content":"[!NOTE]\n An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.","leadings":["","> "],"nodes":[{"content":"An <ph id=\"ph1\">&lt;xref:System.InvalidOperationException&gt;</ph> will be thrown if a column type in the <ph id=\"ph2\">`DataRow`</ph> being read from or written to implements <ph id=\"ph3\">&lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt;</ph> and does not implement <ph id=\"ph4\">&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;</ph>.","pos":[9,263],"source":" An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>."}]}],"pos":[292097,293032],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Xml.XmlWriter\"></xref> with which to write.","nodes":[{"pos":[0,66],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Xml.XmlWriter\"&gt;&lt;/xref&gt;</ph> with which to write.","source":"The <xref href=\"System.Xml.XmlWriter\"></xref> with which to write."}],"pos":[293192,293259],"yaml":true},{"content":"Writes the current data for the <xref href=\"System.Data.DataSet\"></xref> using the specified <xref href=\"System.IO.Stream\"></xref>.","nodes":[{"pos":[0,131],"content":"Writes the current data for the <ph id=\"ph1\">&lt;xref href=\"System.Data.DataSet\"&gt;&lt;/xref&gt;</ph> using the specified <ph id=\"ph2\">&lt;xref href=\"System.IO.Stream\"&gt;&lt;/xref&gt;</ph>.","source":"Writes the current data for the <xref href=\"System.Data.DataSet\"></xref> using the specified <xref href=\"System.IO.Stream\"></xref>."}],"pos":[294457,294589],"yaml":true},{"content":"The `WriteXml` method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataSet> into an XML document, whereas the <xref:System.Data.DataSet.WriteXmlSchema%2A> method writes only the schema. To write both data and schema, use one of the overloads that includes the `mode` parameter, and set its value to `WriteSchema`.  \n  \n Note that the same is true for the <xref:System.Data.DataSet.ReadXml%2A> and <xref:System.Data.DataSet.ReadXmlSchema%2A> methods, respectively. To read XML data, or both schema and data into the `DataSet`, use the `ReadXml` method. To read just the schema, use the `ReadXmlSchema` method.  \n  \n> [!NOTE]\n>  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.","nodes":[{"pos":[0,359],"content":"The `WriteXml` method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataSet> into an XML document, whereas the <xref:System.Data.DataSet.WriteXmlSchema%2A> method writes only the schema. To write both data and schema, use one of the overloads that includes the `mode` parameter, and set its value to `WriteSchema`.","nodes":[{"content":"The <ph id=\"ph1\">`WriteXml`</ph> method provides a way to write either data only, or both data and schema from a <ph id=\"ph2\">&lt;xref:System.Data.DataSet&gt;</ph> into an XML document, whereas the <ph id=\"ph3\">&lt;xref:System.Data.DataSet.WriteXmlSchema%2A&gt;</ph> method writes only the schema.","pos":[0,231],"source":"The `WriteXml` method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataSet> into an XML document, whereas the <xref:System.Data.DataSet.WriteXmlSchema%2A> method writes only the schema."},{"content":"To write both data and schema, use one of the overloads that includes the <ph id=\"ph1\">`mode`</ph> parameter, and set its value to <ph id=\"ph2\">`WriteSchema`</ph>.","pos":[232,359],"source":" To write both data and schema, use one of the overloads that includes the `mode` parameter, and set its value to `WriteSchema`."}]},{"pos":[366,654],"content":"Note that the same is true for the <xref:System.Data.DataSet.ReadXml%2A> and <xref:System.Data.DataSet.ReadXmlSchema%2A> methods, respectively. To read XML data, or both schema and data into the `DataSet`, use the `ReadXml` method. To read just the schema, use the `ReadXmlSchema` method.","nodes":[{"content":"Note that the same is true for the <ph id=\"ph1\">&lt;xref:System.Data.DataSet.ReadXml%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Data.DataSet.ReadXmlSchema%2A&gt;</ph> methods, respectively.","pos":[0,143],"source":"Note that the same is true for the <xref:System.Data.DataSet.ReadXml%2A> and <xref:System.Data.DataSet.ReadXmlSchema%2A> methods, respectively."},{"content":"To read XML data, or both schema and data into the <ph id=\"ph1\">`DataSet`</ph>, use the <ph id=\"ph2\">`ReadXml`</ph> method.","pos":[144,231],"source":" To read XML data, or both schema and data into the `DataSet`, use the `ReadXml` method."},{"content":"To read just the schema, use the <ph id=\"ph1\">`ReadXmlSchema`</ph> method.","pos":[232,288],"source":" To read just the schema, use the `ReadXmlSchema` method."}]},{"pos":[662,927],"content":"[!NOTE]\n An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.","leadings":["","> "],"nodes":[{"content":"An <ph id=\"ph1\">&lt;xref:System.InvalidOperationException&gt;</ph> will be thrown if a column type in the <ph id=\"ph2\">`DataRow`</ph> being read from or written to implements <ph id=\"ph3\">&lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt;</ph> and does not implement <ph id=\"ph4\">&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;</ph>.","pos":[9,263],"source":" An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>."}]}],"pos":[294600,295535],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.IO.Stream\"></xref> object used to write to a file.","nodes":[{"pos":[0,71],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.IO.Stream\"&gt;&lt;/xref&gt;</ph> object used to write to a file.","source":"A <xref href=\"System.IO.Stream\"></xref> object used to write to a file."}],"pos":[296237,296309],"yaml":true},{"content":"Writes the <xref href=\"System.Data.DataSet\"></xref> structure as an XML schema to a file.","nodes":[{"pos":[0,89],"content":"Writes the <ph id=\"ph1\">&lt;xref href=\"System.Data.DataSet\"&gt;&lt;/xref&gt;</ph> structure as an XML schema to a file.","source":"Writes the <xref href=\"System.Data.DataSet\"></xref> structure as an XML schema to a file."}],"pos":[297738,297828],"yaml":true},{"content":"The name of the file to write to.","nodes":[{"pos":[0,33],"content":"The name of the file to write to.","nodes":[{"content":"The name of the file to write to.","pos":[0,33]}]}],"pos":[298025,298059],"yaml":true},{"content":"A delegate used to convert <xref href=\"System.Type\"></xref> to string.","nodes":[{"pos":[0,70],"content":"A delegate used to convert <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> to string.","source":"A delegate used to convert <xref href=\"System.Type\"></xref> to string."}],"pos":[298168,298239],"yaml":true},{"content":"Writes the <xref href=\"System.Data.DataSet\"></xref> structure as an XML schema to the specified <xref href=\"System.IO.Stream\"></xref> object.","nodes":[{"pos":[0,141],"content":"Writes the <ph id=\"ph1\">&lt;xref href=\"System.Data.DataSet\"&gt;&lt;/xref&gt;</ph> structure as an XML schema to the specified <ph id=\"ph2\">&lt;xref href=\"System.IO.Stream\"&gt;&lt;/xref&gt;</ph> object.","source":"Writes the <xref href=\"System.Data.DataSet\"></xref> structure as an XML schema to the specified <xref href=\"System.IO.Stream\"></xref> object."}],"pos":[299479,299621],"yaml":true},{"content":"Use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method to write the schema for a <xref:System.Data.DataSet> to an XML document. The schema includes table, relation, and constraint definitions. To write a schema to an XML document, use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method.  \n  \n The XML schema is written using the XSD standard.  \n  \n To write the data to an XML document, use the <xref:System.Data.DataSet.WriteXml%2A> method.  \n  \n Classes that derive from the <xref:System.IO.Stream> class include <xref:System.IO.BufferedStream>, <xref:System.IO.FileStream>, <xref:System.IO.MemoryStream>, and <xref:System.Net.Sockets.NetworkStream>.","nodes":[{"pos":[0,296],"content":"Use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method to write the schema for a <xref:System.Data.DataSet> to an XML document. The schema includes table, relation, and constraint definitions. To write a schema to an XML document, use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method.","nodes":[{"content":"Use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method to write the schema for a <xref:System.Data.DataSet> to an XML document. The schema includes table, relation, and constraint definitions. To write a schema to an XML document, use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method.","pos":[0,296],"nodes":[{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Data.DataSet.WriteXmlSchema%2A&gt;</ph> method to write the schema for a <ph id=\"ph2\">&lt;xref:System.Data.DataSet&gt;</ph> to an XML document.","pos":[0,132],"source":"Use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method to write the schema for a <xref:System.Data.DataSet> to an XML document."},{"content":"The schema includes table, relation, and constraint definitions.","pos":[133,197]},{"content":"To write a schema to an XML document, use the <ph id=\"ph1\">&lt;xref:System.Data.DataSet.WriteXmlSchema%2A&gt;</ph> method.","pos":[198,296],"source":" To write a schema to an XML document, use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method."}]}]},{"pos":[303,352],"content":"The XML schema is written using the XSD standard.","nodes":[{"content":"The XML schema is written using the XSD standard.","pos":[0,49]}]},{"pos":[359,451],"content":"To write the data to an XML document, use the <xref:System.Data.DataSet.WriteXml%2A> method.","nodes":[{"content":"To write the data to an XML document, use the <ph id=\"ph1\">&lt;xref:System.Data.DataSet.WriteXml%2A&gt;</ph> method.","pos":[0,92],"source":"To write the data to an XML document, use the <xref:System.Data.DataSet.WriteXml%2A> method."}]},{"pos":[458,662],"content":"Classes that derive from the <xref:System.IO.Stream> class include <xref:System.IO.BufferedStream>, <xref:System.IO.FileStream>, <xref:System.IO.MemoryStream>, and <xref:System.Net.Sockets.NetworkStream>.","nodes":[{"content":"Classes that derive from the <ph id=\"ph1\">&lt;xref:System.IO.Stream&gt;</ph> class include <ph id=\"ph2\">&lt;xref:System.IO.BufferedStream&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.IO.FileStream&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.IO.MemoryStream&gt;</ph>, and <ph id=\"ph5\">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>.","pos":[0,204],"source":"Classes that derive from the <xref:System.IO.Stream> class include <xref:System.IO.BufferedStream>, <xref:System.IO.FileStream>, <xref:System.IO.MemoryStream>, and <xref:System.Net.Sockets.NetworkStream>."}]}],"pos":[299632,300303],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.IO.Stream\"></xref> object used to write to a file.","nodes":[{"pos":[0,71],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.IO.Stream\"&gt;&lt;/xref&gt;</ph> object used to write to a file.","source":"A <xref href=\"System.IO.Stream\"></xref> object used to write to a file."}],"pos":[301011,301083],"yaml":true},{"content":"Writes the <xref href=\"System.Data.DataSet\"></xref> structure as an XML schema to the specified <xref href=\"System.IO.TextWriter\"></xref> object.","nodes":[{"pos":[0,145],"content":"Writes the <ph id=\"ph1\">&lt;xref href=\"System.Data.DataSet\"&gt;&lt;/xref&gt;</ph> structure as an XML schema to the specified <ph id=\"ph2\">&lt;xref href=\"System.IO.TextWriter\"&gt;&lt;/xref&gt;</ph> object.","source":"Writes the <xref href=\"System.Data.DataSet\"></xref> structure as an XML schema to the specified <xref href=\"System.IO.TextWriter\"></xref> object."}],"pos":[302347,302493],"yaml":true},{"content":"Use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method to write the schema for a <xref:System.Data.DataSet> to an XML document. The schema includes table, relation, and constraint definitions. To write a schema to an XML document, use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method.  \n  \n The XML schema is written using the XSD standard.  \n  \n To write the data to an XML document, use the <xref:System.Data.DataSet.WriteXml%2A> method.  \n  \n Classes the derive from the <xref:System.IO.TextWriter?displayProperty=fullName> class include the <xref:System.Web.HttpWriter?displayProperty=fullName>, <xref:System.CodeDom.Compiler.IndentedTextWriter?displayProperty=fullName>, <xref:System.Web.UI.HtmlTextWriter?displayProperty=fullName>, <xref:System.IO.StreamWriter?displayProperty=fullName>, and <xref:System.IO.StringWriter?displayProperty=fullName>.","nodes":[{"pos":[0,296],"content":"Use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method to write the schema for a <xref:System.Data.DataSet> to an XML document. The schema includes table, relation, and constraint definitions. To write a schema to an XML document, use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method.","nodes":[{"content":"Use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method to write the schema for a <xref:System.Data.DataSet> to an XML document. The schema includes table, relation, and constraint definitions. To write a schema to an XML document, use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method.","pos":[0,296],"nodes":[{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Data.DataSet.WriteXmlSchema%2A&gt;</ph> method to write the schema for a <ph id=\"ph2\">&lt;xref:System.Data.DataSet&gt;</ph> to an XML document.","pos":[0,132],"source":"Use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method to write the schema for a <xref:System.Data.DataSet> to an XML document."},{"content":"The schema includes table, relation, and constraint definitions.","pos":[133,197]},{"content":"To write a schema to an XML document, use the <ph id=\"ph1\">&lt;xref:System.Data.DataSet.WriteXmlSchema%2A&gt;</ph> method.","pos":[198,296],"source":" To write a schema to an XML document, use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method."}]}]},{"pos":[303,352],"content":"The XML schema is written using the XSD standard.","nodes":[{"content":"The XML schema is written using the XSD standard.","pos":[0,49]}]},{"pos":[359,451],"content":"To write the data to an XML document, use the <xref:System.Data.DataSet.WriteXml%2A> method.","nodes":[{"content":"To write the data to an XML document, use the <ph id=\"ph1\">&lt;xref:System.Data.DataSet.WriteXml%2A&gt;</ph> method.","pos":[0,92],"source":"To write the data to an XML document, use the <xref:System.Data.DataSet.WriteXml%2A> method."}]},{"pos":[458,865],"content":"Classes the derive from the <xref:System.IO.TextWriter?displayProperty=fullName> class include the <xref:System.Web.HttpWriter?displayProperty=fullName>, <xref:System.CodeDom.Compiler.IndentedTextWriter?displayProperty=fullName>, <xref:System.Web.UI.HtmlTextWriter?displayProperty=fullName>, <xref:System.IO.StreamWriter?displayProperty=fullName>, and <xref:System.IO.StringWriter?displayProperty=fullName>.","nodes":[{"content":"Classes the derive from the <ph id=\"ph1\">&lt;xref:System.IO.TextWriter?displayProperty=fullName&gt;</ph> class include the <ph id=\"ph2\">&lt;xref:System.Web.HttpWriter?displayProperty=fullName&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.CodeDom.Compiler.IndentedTextWriter?displayProperty=fullName&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.Web.UI.HtmlTextWriter?displayProperty=fullName&gt;</ph>, <ph id=\"ph5\">&lt;xref:System.IO.StreamWriter?displayProperty=fullName&gt;</ph>, and <ph id=\"ph6\">&lt;xref:System.IO.StringWriter?displayProperty=fullName&gt;</ph>.","pos":[0,407],"source":"Classes the derive from the <xref:System.IO.TextWriter?displayProperty=fullName> class include the <xref:System.Web.HttpWriter?displayProperty=fullName>, <xref:System.CodeDom.Compiler.IndentedTextWriter?displayProperty=fullName>, <xref:System.Web.UI.HtmlTextWriter?displayProperty=fullName>, <xref:System.IO.StreamWriter?displayProperty=fullName>, and <xref:System.IO.StringWriter?displayProperty=fullName>."}]}],"pos":[302504,303378],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.IO.TextWriter\"></xref> object with which to write.","nodes":[{"pos":[0,73],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.IO.TextWriter\"&gt;&lt;/xref&gt;</ph> object with which to write.","source":"The <xref href=\"System.IO.TextWriter\"></xref> object with which to write."}],"pos":[304272,304346],"yaml":true},{"content":"Writes the <xref href=\"System.Data.DataSet\"></xref> structure as an XML schema to a file.","nodes":[{"pos":[0,89],"content":"Writes the <ph id=\"ph1\">&lt;xref href=\"System.Data.DataSet\"&gt;&lt;/xref&gt;</ph> structure as an XML schema to a file.","source":"Writes the <xref href=\"System.Data.DataSet\"></xref> structure as an XML schema to a file."}],"pos":[305577,305667],"yaml":true},{"content":"Use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method to write the schema for a <xref:System.Data.DataSet> to an XML document. The schema includes table, relation, and constraint definitions. To write a schema to an XML document, use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method.  \n  \n The XML schema is written using the XSD standard.  \n  \n To write the data to an XML document, use the <xref:System.Data.DataSet.WriteXml%2A> method.","nodes":[{"pos":[0,296],"content":"Use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method to write the schema for a <xref:System.Data.DataSet> to an XML document. The schema includes table, relation, and constraint definitions. To write a schema to an XML document, use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method.","nodes":[{"content":"Use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method to write the schema for a <xref:System.Data.DataSet> to an XML document. The schema includes table, relation, and constraint definitions. To write a schema to an XML document, use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method.","pos":[0,296],"nodes":[{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Data.DataSet.WriteXmlSchema%2A&gt;</ph> method to write the schema for a <ph id=\"ph2\">&lt;xref:System.Data.DataSet&gt;</ph> to an XML document.","pos":[0,132],"source":"Use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method to write the schema for a <xref:System.Data.DataSet> to an XML document."},{"content":"The schema includes table, relation, and constraint definitions.","pos":[133,197]},{"content":"To write a schema to an XML document, use the <ph id=\"ph1\">&lt;xref:System.Data.DataSet.WriteXmlSchema%2A&gt;</ph> method.","pos":[198,296],"source":" To write a schema to an XML document, use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method."}]}]},{"pos":[303,352],"content":"The XML schema is written using the XSD standard.","nodes":[{"content":"The XML schema is written using the XSD standard.","pos":[0,49]}]},{"pos":[359,451],"content":"To write the data to an XML document, use the <xref:System.Data.DataSet.WriteXml%2A> method.","nodes":[{"content":"To write the data to an XML document, use the <ph id=\"ph1\">&lt;xref:System.Data.DataSet.WriteXml%2A&gt;</ph> method.","pos":[0,92],"source":"To write the data to an XML document, use the <xref:System.Data.DataSet.WriteXml%2A> method."}]}],"pos":[305678,306136],"yaml":true,"extradata":"MT"},{"content":"The file name (including the path) to which to write.","nodes":[{"pos":[0,53],"content":"The file name (including the path) to which to write.","nodes":[{"content":"The file name (including the path) to which to write.","pos":[0,53]}]}],"pos":[306665,306719],"yaml":true},{"content":"<xref href=\"System.Security.Permissions.FileIOPermission\"></xref> is not set to <xref href=\"System.Security.Permissions.FileIOPermissionAccess.Write\"></xref>.","nodes":[{"pos":[0,158],"content":"<ph id=\"ph1\">&lt;xref href=\"System.Security.Permissions.FileIOPermission\"&gt;&lt;/xref&gt;</ph> is not set to <ph id=\"ph2\">&lt;xref href=\"System.Security.Permissions.FileIOPermissionAccess.Write\"&gt;&lt;/xref&gt;</ph>.","source":"<xref href=\"System.Security.Permissions.FileIOPermission\"></xref> is not set to <xref href=\"System.Security.Permissions.FileIOPermissionAccess.Write\"></xref>."}],"pos":[306893,307052],"yaml":true},{"content":"Writes the <xref href=\"System.Data.DataSet\"></xref> structure as an XML schema to an <xref href=\"System.Xml.XmlWriter\"></xref> object.","nodes":[{"pos":[0,134],"content":"Writes the <ph id=\"ph1\">&lt;xref href=\"System.Data.DataSet\"&gt;&lt;/xref&gt;</ph> structure as an XML schema to an <ph id=\"ph2\">&lt;xref href=\"System.Xml.XmlWriter\"&gt;&lt;/xref&gt;</ph> object.","source":"Writes the <xref href=\"System.Data.DataSet\"></xref> structure as an XML schema to an <xref href=\"System.Xml.XmlWriter\"></xref> object."}],"pos":[308248,308383],"yaml":true},{"content":"Use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method to write the schema for a <xref:System.Data.DataSet> to an XML document. The schema includes table, relation, and constraint definitions. To write a schema to an XML document, use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method.  \n  \n The XML schema is written using the XSD standard.  \n  \n To write the data to an XML document, use the <xref:System.Data.DataSet.WriteXml%2A> method.  \n  \n One class that inherits from the <xref:System.Xml.XmlWriter?displayProperty=fullName> class is the <xref:System.Xml.XmlTextWriter?displayProperty=fullName> class.","nodes":[{"pos":[0,296],"content":"Use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method to write the schema for a <xref:System.Data.DataSet> to an XML document. The schema includes table, relation, and constraint definitions. To write a schema to an XML document, use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method.","nodes":[{"content":"Use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method to write the schema for a <xref:System.Data.DataSet> to an XML document. The schema includes table, relation, and constraint definitions. To write a schema to an XML document, use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method.","pos":[0,296],"nodes":[{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Data.DataSet.WriteXmlSchema%2A&gt;</ph> method to write the schema for a <ph id=\"ph2\">&lt;xref:System.Data.DataSet&gt;</ph> to an XML document.","pos":[0,132],"source":"Use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method to write the schema for a <xref:System.Data.DataSet> to an XML document."},{"content":"The schema includes table, relation, and constraint definitions.","pos":[133,197]},{"content":"To write a schema to an XML document, use the <ph id=\"ph1\">&lt;xref:System.Data.DataSet.WriteXmlSchema%2A&gt;</ph> method.","pos":[198,296],"source":" To write a schema to an XML document, use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method."}]}]},{"pos":[303,352],"content":"The XML schema is written using the XSD standard.","nodes":[{"content":"The XML schema is written using the XSD standard.","pos":[0,49]}]},{"pos":[359,451],"content":"To write the data to an XML document, use the <xref:System.Data.DataSet.WriteXml%2A> method.","nodes":[{"content":"To write the data to an XML document, use the <ph id=\"ph1\">&lt;xref:System.Data.DataSet.WriteXml%2A&gt;</ph> method.","pos":[0,92],"source":"To write the data to an XML document, use the <xref:System.Data.DataSet.WriteXml%2A> method."}]},{"pos":[458,620],"content":"One class that inherits from the <xref:System.Xml.XmlWriter?displayProperty=fullName> class is the <xref:System.Xml.XmlTextWriter?displayProperty=fullName> class.","nodes":[{"content":"One class that inherits from the <ph id=\"ph1\">&lt;xref:System.Xml.XmlWriter?displayProperty=fullName&gt;</ph> class is the <ph id=\"ph2\">&lt;xref:System.Xml.XmlTextWriter?displayProperty=fullName&gt;</ph> class.","pos":[0,162],"source":"One class that inherits from the <xref:System.Xml.XmlWriter?displayProperty=fullName> class is the <xref:System.Xml.XmlTextWriter?displayProperty=fullName> class."}]}],"pos":[308394,309023],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Xml.XmlWriter\"></xref> to write to.","nodes":[{"pos":[0,58],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Xml.XmlWriter\"&gt;&lt;/xref&gt;</ph> to write to.","source":"The <xref href=\"System.Xml.XmlWriter\"></xref> to write to."}],"pos":[309968,310027],"yaml":true},{"content":"Writes the <xref href=\"System.Data.DataSet\"></xref> structure as an XML schema to the specified <xref href=\"System.IO.Stream\"></xref> object.","nodes":[{"pos":[0,141],"content":"Writes the <ph id=\"ph1\">&lt;xref href=\"System.Data.DataSet\"&gt;&lt;/xref&gt;</ph> structure as an XML schema to the specified <ph id=\"ph2\">&lt;xref href=\"System.IO.Stream\"&gt;&lt;/xref&gt;</ph> object.","source":"Writes the <xref href=\"System.Data.DataSet\"></xref> structure as an XML schema to the specified <xref href=\"System.IO.Stream\"></xref> object."}],"pos":[311471,311613],"yaml":true},{"content":"A <xref href=\"System.IO.Stream\"></xref> object to write to.","nodes":[{"pos":[0,59],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.IO.Stream\"&gt;&lt;/xref&gt;</ph> object to write to.","source":"A <xref href=\"System.IO.Stream\"></xref> object to write to."}],"pos":[311819,311879],"yaml":true},{"content":"A delegate used to convert <xref href=\"System.Type\"></xref> to string.","nodes":[{"pos":[0,70],"content":"A delegate used to convert <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> to string.","source":"A delegate used to convert <xref href=\"System.Type\"></xref> to string."}],"pos":[311988,312059],"yaml":true},{"content":"Writes the <xref href=\"System.Data.DataSet\"></xref> structure as an XML schema to the specified <xref href=\"System.IO.TextWriter\"></xref>.","nodes":[{"pos":[0,138],"content":"Writes the <ph id=\"ph1\">&lt;xref href=\"System.Data.DataSet\"&gt;&lt;/xref&gt;</ph> structure as an XML schema to the specified <ph id=\"ph2\">&lt;xref href=\"System.IO.TextWriter\"&gt;&lt;/xref&gt;</ph>.","source":"Writes the <xref href=\"System.Data.DataSet\"></xref> structure as an XML schema to the specified <xref href=\"System.IO.TextWriter\"></xref>."}],"pos":[313527,313666],"yaml":true},{"content":"A <xref href=\"System.IO.TextWriter\"></xref> object to write to.","nodes":[{"pos":[0,63],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.IO.TextWriter\"&gt;&lt;/xref&gt;</ph> object to write to.","source":"A <xref href=\"System.IO.TextWriter\"></xref> object to write to."}],"pos":[313880,313944],"yaml":true},{"content":"A delegate used to convert <xref href=\"System.Type\"></xref> to string.","nodes":[{"pos":[0,70],"content":"A delegate used to convert <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> to string.","source":"A delegate used to convert <xref href=\"System.Type\"></xref> to string."}],"pos":[314053,314124],"yaml":true},{"content":"Writes the <xref href=\"System.Data.DataSet\"></xref> structure as an XML schema to the specified <xref href=\"System.Xml.XmlWriter\"></xref>.","nodes":[{"pos":[0,138],"content":"Writes the <ph id=\"ph1\">&lt;xref href=\"System.Data.DataSet\"&gt;&lt;/xref&gt;</ph> structure as an XML schema to the specified <ph id=\"ph2\">&lt;xref href=\"System.Xml.XmlWriter\"&gt;&lt;/xref&gt;</ph>.","source":"Writes the <xref href=\"System.Data.DataSet\"></xref> structure as an XML schema to the specified <xref href=\"System.Xml.XmlWriter\"></xref>."}],"pos":[315589,315728],"yaml":true},{"content":"A <xref href=\"System.Xml.XmlWriter\"></xref> object to write to.","nodes":[{"pos":[0,63],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Xml.XmlWriter\"&gt;&lt;/xref&gt;</ph> object to write to.","source":"A <xref href=\"System.Xml.XmlWriter\"></xref> object to write to."}],"pos":[315942,316006],"yaml":true},{"content":"A delegate used to convert <xref href=\"System.Type\"></xref> to string.","nodes":[{"pos":[0,70],"content":"A delegate used to convert <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> to string.","source":"A delegate used to convert <xref href=\"System.Type\"></xref> to string."}],"pos":[316115,316186],"yaml":true},{"content":"For a description of this member, see <xref href=\"System.ComponentModel.IListSource.ContainsListCollection\"></xref>.","nodes":[{"pos":[0,116],"content":"For a description of this member, see <ph id=\"ph1\">&lt;xref href=\"System.ComponentModel.IListSource.ContainsListCollection\"&gt;&lt;/xref&gt;</ph>.","source":"For a description of this member, see <xref href=\"System.ComponentModel.IListSource.ContainsListCollection\"></xref>."}],"pos":[317550,317667],"yaml":true},{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.DataSet> instance is cast to an <xref:System.ComponentModel.IListSource> interface.","nodes":[{"pos":[0,190],"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.DataSet> instance is cast to an <xref:System.ComponentModel.IListSource> interface.","nodes":[{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.DataSet> instance is cast to an <xref:System.ComponentModel.IListSource> interface.","pos":[0,190],"nodes":[{"content":"This member is an explicit interface member implementation.","pos":[0,59]},{"content":"It can be used only when the <ph id=\"ph1\">&lt;xref:System.Data.DataSet&gt;</ph> instance is cast to an <ph id=\"ph2\">&lt;xref:System.ComponentModel.IListSource&gt;</ph> interface.","pos":[60,190],"source":" It can be used only when the <xref:System.Data.DataSet> instance is cast to an <xref:System.ComponentModel.IListSource> interface."}]}]}],"pos":[317678,317869],"yaml":true,"extradata":"MT"},{"content":"For a description of this member, see <xref href=\"System.ComponentModel.IListSource.ContainsListCollection\"></xref>.","nodes":[{"pos":[0,116],"content":"For a description of this member, see <ph id=\"ph1\">&lt;xref href=\"System.ComponentModel.IListSource.ContainsListCollection\"&gt;&lt;/xref&gt;</ph>.","source":"For a description of this member, see <xref href=\"System.ComponentModel.IListSource.ContainsListCollection\"></xref>."}],"pos":[318021,318138],"yaml":true},{"content":"For a description of this member, see <xref href=\"System.ComponentModel.IListSource.GetList\"></xref>.","nodes":[{"pos":[0,101],"content":"For a description of this member, see <ph id=\"ph1\">&lt;xref href=\"System.ComponentModel.IListSource.GetList\"&gt;&lt;/xref&gt;</ph>.","source":"For a description of this member, see <xref href=\"System.ComponentModel.IListSource.GetList\"></xref>."}],"pos":[319426,319528],"yaml":true},{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.DataSet> instance is cast to an <xref:System.ComponentModel.IListSource> interface.","nodes":[{"pos":[0,190],"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.DataSet> instance is cast to an <xref:System.ComponentModel.IListSource> interface.","nodes":[{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.DataSet> instance is cast to an <xref:System.ComponentModel.IListSource> interface.","pos":[0,190],"nodes":[{"content":"This member is an explicit interface member implementation.","pos":[0,59]},{"content":"It can be used only when the <ph id=\"ph1\">&lt;xref:System.Data.DataSet&gt;</ph> instance is cast to an <ph id=\"ph2\">&lt;xref:System.ComponentModel.IListSource&gt;</ph> interface.","pos":[60,190],"source":" It can be used only when the <xref:System.Data.DataSet> instance is cast to an <xref:System.ComponentModel.IListSource> interface."}]}]}],"pos":[319539,319730],"yaml":true,"extradata":"MT"},{"content":"For a description of this member, see <xref href=\"System.ComponentModel.IListSource.GetList\"></xref>.","nodes":[{"pos":[0,101],"content":"For a description of this member, see <ph id=\"ph1\">&lt;xref href=\"System.ComponentModel.IListSource.GetList\"&gt;&lt;/xref&gt;</ph>.","source":"For a description of this member, see <xref href=\"System.ComponentModel.IListSource.GetList\"></xref>."}],"pos":[319889,319991],"yaml":true},{"content":"For a description of this member, see <xref href=\"System.Xml.Serialization.IXmlSerializable.GetSchema\"></xref>.","nodes":[{"pos":[0,111],"content":"For a description of this member, see <ph id=\"ph1\">&lt;xref href=\"System.Xml.Serialization.IXmlSerializable.GetSchema\"&gt;&lt;/xref&gt;</ph>.","source":"For a description of this member, see <xref href=\"System.Xml.Serialization.IXmlSerializable.GetSchema\"></xref>."}],"pos":[321347,321459],"yaml":true},{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.DataSet> instance is cast to an <xref:System.Xml.Serialization.IXmlSerializable> interface.","nodes":[{"pos":[0,198],"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.DataSet> instance is cast to an <xref:System.Xml.Serialization.IXmlSerializable> interface.","nodes":[{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.DataSet> instance is cast to an <xref:System.Xml.Serialization.IXmlSerializable> interface.","pos":[0,198],"nodes":[{"content":"This member is an explicit interface member implementation.","pos":[0,59]},{"content":"It can be used only when the <ph id=\"ph1\">&lt;xref:System.Data.DataSet&gt;</ph> instance is cast to an <ph id=\"ph2\">&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;</ph> interface.","pos":[60,198],"source":" It can be used only when the <xref:System.Data.DataSet> instance is cast to an <xref:System.Xml.Serialization.IXmlSerializable> interface."}]}]}],"pos":[321470,321669],"yaml":true,"extradata":"MT"},{"content":"For a description of this member, see <xref href=\"System.Xml.Serialization.IXmlSerializable.GetSchema\"></xref>.","nodes":[{"pos":[0,111],"content":"For a description of this member, see <ph id=\"ph1\">&lt;xref href=\"System.Xml.Serialization.IXmlSerializable.GetSchema\"&gt;&lt;/xref&gt;</ph>.","source":"For a description of this member, see <xref href=\"System.Xml.Serialization.IXmlSerializable.GetSchema\"></xref>."}],"pos":[321841,321953],"yaml":true},{"content":"For a description of this member, see <xref href=\"System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)\"></xref>.","nodes":[{"pos":[0,131],"content":"For a description of this member, see <ph id=\"ph1\">&lt;xref href=\"System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)\"&gt;&lt;/xref&gt;</ph>.","source":"For a description of this member, see <xref href=\"System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)\"></xref>."}],"pos":[323400,323532],"yaml":true},{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.DataSet> instance is cast to an <xref:System.Xml.Serialization.IXmlSerializable> interface.","nodes":[{"pos":[0,198],"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.DataSet> instance is cast to an <xref:System.Xml.Serialization.IXmlSerializable> interface.","nodes":[{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.DataSet> instance is cast to an <xref:System.Xml.Serialization.IXmlSerializable> interface.","pos":[0,198],"nodes":[{"content":"This member is an explicit interface member implementation.","pos":[0,59]},{"content":"It can be used only when the <ph id=\"ph1\">&lt;xref:System.Data.DataSet&gt;</ph> instance is cast to an <ph id=\"ph2\">&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;</ph> interface.","pos":[60,198],"source":" It can be used only when the <xref:System.Data.DataSet> instance is cast to an <xref:System.Xml.Serialization.IXmlSerializable> interface."}]}]}],"pos":[323543,323742],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Xml.XmlReader\"></xref>.","nodes":[{"pos":[0,44],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Xml.XmlReader\"&gt;&lt;/xref&gt;</ph>.","source":"A <xref href=\"System.Xml.XmlReader\"></xref>."}],"pos":[323911,323956],"yaml":true},{"content":"For a description of this member, see <xref href=\"System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)\"></xref>.","nodes":[{"pos":[0,132],"content":"For a description of this member, see <ph id=\"ph1\">&lt;xref href=\"System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)\"&gt;&lt;/xref&gt;</ph>.","source":"For a description of this member, see <xref href=\"System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)\"></xref>."}],"pos":[325407,325540],"yaml":true},{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.DataSet> instance is cast to an <xref:System.Xml.Serialization.IXmlSerializable> interface.","nodes":[{"pos":[0,198],"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.DataSet> instance is cast to an <xref:System.Xml.Serialization.IXmlSerializable> interface.","nodes":[{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.DataSet> instance is cast to an <xref:System.Xml.Serialization.IXmlSerializable> interface.","pos":[0,198],"nodes":[{"content":"This member is an explicit interface member implementation.","pos":[0,59]},{"content":"It can be used only when the <ph id=\"ph1\">&lt;xref:System.Data.DataSet&gt;</ph> instance is cast to an <ph id=\"ph2\">&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;</ph> interface.","pos":[60,198],"source":" It can be used only when the <xref:System.Data.DataSet> instance is cast to an <xref:System.Xml.Serialization.IXmlSerializable> interface."}]}]}],"pos":[325551,325750],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Xml.XmlWriter\"></xref>.","nodes":[{"pos":[0,44],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Xml.XmlWriter\"&gt;&lt;/xref&gt;</ph>.","source":"A <xref href=\"System.Xml.XmlWriter\"></xref>."}],"pos":[325920,325965],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Data.DataSet\n  commentId: T:System.Data.DataSet\n  id: DataSet\n  children:\n  - System.Data.DataSet.#ctor\n  - System.Data.DataSet.#ctor(System.String)\n  - System.Data.DataSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  - System.Data.DataSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Boolean)\n  - System.Data.DataSet.AcceptChanges\n  - System.Data.DataSet.BeginInit\n  - System.Data.DataSet.CaseSensitive\n  - System.Data.DataSet.Clear\n  - System.Data.DataSet.Clone\n  - System.Data.DataSet.Copy\n  - System.Data.DataSet.CreateDataReader(System.Data.DataTable[])\n  - System.Data.DataSet.CreateDataReader\n  - System.Data.DataSet.DataSetName\n  - System.Data.DataSet.DefaultViewManager\n  - System.Data.DataSet.DetermineSchemaSerializationMode(System.Xml.XmlReader)\n  - System.Data.DataSet.DetermineSchemaSerializationMode(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  - System.Data.DataSet.EndInit\n  - System.Data.DataSet.EnforceConstraints\n  - System.Data.DataSet.ExtendedProperties\n  - System.Data.DataSet.GetChanges\n  - System.Data.DataSet.GetChanges(System.Data.DataRowState)\n  - System.Data.DataSet.GetDataSetSchema(System.Xml.Schema.XmlSchemaSet)\n  - System.Data.DataSet.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  - System.Data.DataSet.GetSchemaSerializable\n  - System.Data.DataSet.GetSerializationData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  - System.Data.DataSet.GetXml\n  - System.Data.DataSet.GetXmlSchema\n  - System.Data.DataSet.HasChanges\n  - System.Data.DataSet.HasChanges(System.Data.DataRowState)\n  - System.Data.DataSet.HasErrors\n  - System.Data.DataSet.InferXmlSchema(System.IO.Stream,System.String[])\n  - System.Data.DataSet.InferXmlSchema(System.IO.TextReader,System.String[])\n  - System.Data.DataSet.InferXmlSchema(System.String,System.String[])\n  - System.Data.DataSet.InferXmlSchema(System.Xml.XmlReader,System.String[])\n  - System.Data.DataSet.Initialized\n  - System.Data.DataSet.InitializeDerivedDataSet\n  - System.Data.DataSet.IsBinarySerialized(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  - System.Data.DataSet.IsInitialized\n  - System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.DataTable[])\n  - System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.String[])\n  - System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler,System.Data.DataTable[])\n  - System.Data.DataSet.Locale\n  - System.Data.DataSet.Merge(System.Data.DataRow[])\n  - System.Data.DataSet.Merge(System.Data.DataSet)\n  - System.Data.DataSet.Merge(System.Data.DataTable)\n  - System.Data.DataSet.Merge(System.Data.DataSet,System.Boolean)\n  - System.Data.DataSet.Merge(System.Data.DataRow[],System.Boolean,System.Data.MissingSchemaAction)\n  - System.Data.DataSet.Merge(System.Data.DataSet,System.Boolean,System.Data.MissingSchemaAction)\n  - System.Data.DataSet.Merge(System.Data.DataTable,System.Boolean,System.Data.MissingSchemaAction)\n  - System.Data.DataSet.MergeFailed\n  - System.Data.DataSet.Namespace\n  - System.Data.DataSet.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)\n  - System.Data.DataSet.OnRemoveRelation(System.Data.DataRelation)\n  - System.Data.DataSet.OnRemoveTable(System.Data.DataTable)\n  - System.Data.DataSet.Prefix\n  - System.Data.DataSet.RaisePropertyChanging(System.String)\n  - System.Data.DataSet.ReadXml(System.Xml.XmlReader,System.Data.XmlReadMode)\n  - System.Data.DataSet.ReadXml(System.String,System.Data.XmlReadMode)\n  - System.Data.DataSet.ReadXml(System.IO.Stream,System.Data.XmlReadMode)\n  - System.Data.DataSet.ReadXml(System.IO.TextReader,System.Data.XmlReadMode)\n  - System.Data.DataSet.ReadXml(System.String)\n  - System.Data.DataSet.ReadXml(System.IO.TextReader)\n  - System.Data.DataSet.ReadXml(System.IO.Stream)\n  - System.Data.DataSet.ReadXml(System.Xml.XmlReader)\n  - System.Data.DataSet.ReadXmlSchema(System.IO.Stream)\n  - System.Data.DataSet.ReadXmlSchema(System.IO.TextReader)\n  - System.Data.DataSet.ReadXmlSchema(System.String)\n  - System.Data.DataSet.ReadXmlSchema(System.Xml.XmlReader)\n  - System.Data.DataSet.ReadXmlSerializable(System.Xml.XmlReader)\n  - System.Data.DataSet.RejectChanges\n  - System.Data.DataSet.Relations\n  - System.Data.DataSet.RemotingFormat\n  - System.Data.DataSet.Reset\n  - System.Data.DataSet.SchemaSerializationMode\n  - System.Data.DataSet.ShouldSerializeRelations\n  - System.Data.DataSet.ShouldSerializeTables\n  - System.Data.DataSet.Site\n  - System.Data.DataSet.Tables\n  - System.Data.DataSet.WriteXml(System.Xml.XmlWriter,System.Data.XmlWriteMode)\n  - System.Data.DataSet.WriteXml(System.String,System.Data.XmlWriteMode)\n  - System.Data.DataSet.WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode)\n  - System.Data.DataSet.WriteXml(System.IO.Stream,System.Data.XmlWriteMode)\n  - System.Data.DataSet.WriteXml(System.String)\n  - System.Data.DataSet.WriteXml(System.IO.TextWriter)\n  - System.Data.DataSet.WriteXml(System.Xml.XmlWriter)\n  - System.Data.DataSet.WriteXml(System.IO.Stream)\n  - System.Data.DataSet.WriteXmlSchema(System.String,System.Converter{System.Type,System.String})\n  - System.Data.DataSet.WriteXmlSchema(System.IO.Stream)\n  - System.Data.DataSet.WriteXmlSchema(System.IO.TextWriter)\n  - System.Data.DataSet.WriteXmlSchema(System.String)\n  - System.Data.DataSet.WriteXmlSchema(System.Xml.XmlWriter)\n  - System.Data.DataSet.WriteXmlSchema(System.IO.Stream,System.Converter{System.Type,System.String})\n  - System.Data.DataSet.WriteXmlSchema(System.IO.TextWriter,System.Converter{System.Type,System.String})\n  - System.Data.DataSet.WriteXmlSchema(System.Xml.XmlWriter,System.Converter{System.Type,System.String})\n  - System.Data.DataSet.System#ComponentModel#IListSource#ContainsListCollection\n  - System.Data.DataSet.System#ComponentModel#IListSource#GetList\n  - System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#GetSchema\n  - System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)\n  - System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)\n  langs:\n  - csharp\n  name: DataSet\n  nameWithType: DataSet\n  fullName: System.Data.DataSet\n  type: Class\n  assemblies:\n  - System.Data\n  - netstandard\n  - System.Data.Common\n  namespace: System.Data\n  summary: Represents an in-memory cache of data.\n  remarks: \"The <xref:System.Data.DataSet>, which is an in-memory cache of data retrieved from a data source, is a major component of the ADO.NET architecture. The <xref:System.Data.DataSet> consists of a collection of <xref:System.Data.DataTable> objects that you can relate to each other with <xref:System.Data.DataRelation> objects. You can also enforce data integrity in the <xref:System.Data.DataSet> by using the <xref:System.Data.UniqueConstraint> and <xref:System.Data.ForeignKeyConstraint> objects. For further details about working with <xref:System.Data.DataSet> objects, see [DataSets, DataTables, and DataViews](~/docs/framework/data/adonet/dataset-datatable-dataview/index.md).  \\n  \\n Whereas <xref:System.Data.DataTable> objects contain the data, the <xref:System.Data.DataRelationCollection> allows you to navigate though the table hierarchy. The tables are contained in a <xref:System.Data.DataTableCollection> accessed through the <xref:System.Data.DataSet.Tables%2A> property. When accessing <xref:System.Data.DataTable> objects, note that they are conditionally case sensitive. For example, if one <xref:System.Data.DataTable> is named \\\"mydatatable\\\" and another is named \\\"Mydatatable\\\", a string used to search for one of the tables is regarded as case sensitive. However, if \\\"mydatatable\\\" exists and \\\"Mydatatable\\\" does not, the search string is regarded as case insensitive. For more information about working with <xref:System.Data.DataTable> objects, see [Creating a DataTable](~/docs/framework/data/adonet/dataset-datatable-dataview/creating-a-datatable.md).  \\n  \\n A <xref:System.Data.DataSet> can read and write data and schema as XML documents. The data and schema can then be transported across HTTP and used by any application, on any platform that is XML-enabled. You can save the schema as an XML schema with the <xref:System.Data.DataSet.WriteXmlSchema%2A> method, and both schema and data can be saved using the <xref:System.Data.DataSet.WriteXml%2A> method. To read an XML document that includes both schema and data, use the <xref:System.Data.DataSet.ReadXml%2A> method.  \\n  \\n In a typical multiple-tier implementation, the steps for creating and refreshing a <xref:System.Data.DataSet>, and in turn, updating the original data are to:  \\n  \\n1.  Build and fill each <xref:System.Data.DataTable> in a <xref:System.Data.DataSet> with data from a data source using a <xref:System.Data.Common.DataAdapter>.  \\n  \\n2.  Change the data in individual <xref:System.Data.DataTable> objects by adding, updating, or deleting <xref:System.Data.DataRow> objects.  \\n  \\n3.  Invoke the <xref:System.Data.DataSet.GetChanges%2A> method to create a second <xref:System.Data.DataSet> that features only the changes to the data.  \\n  \\n4.  Call the <xref:System.Data.Common.DataAdapter.Update%2A> method of the <xref:System.Data.Common.DataAdapter>, passing the second <xref:System.Data.DataSet> as an argument.  \\n  \\n5.  Invoke the <xref:System.Data.DataSet.Merge%2A> method to merge the changes from the second <xref:System.Data.DataSet> into the first.  \\n  \\n6.  Invoke the <xref:System.Data.DataSet.AcceptChanges%2A> on the <xref:System.Data.DataSet>. Alternatively, invoke <xref:System.Data.DataSet.RejectChanges%2A> to cancel the changes.  \\n  \\n> [!NOTE]\\n>  The <xref:System.Data.DataSet> and <xref:System.Data.DataTable> objects inherit from <xref:System.ComponentModel.MarshalByValueComponent>, and support the <xref:System.Runtime.Serialization.ISerializable> interface for remoting. These are the only ADO.NET objects that can be remoted.  \\n  \\n> [!NOTE]\\n>  Classes inherited from <xref:System.Data.DataSet> are not finalized by the garbage collector, because the finalizer has been suppressed in <xref:System.Data.DataSet>. The derived class can call the <xref:System.GC.ReRegisterForFinalize%2A> method in its constructor to allow the class to be finalized by the garbage collector.\"\n  example:\n  - \"The following example consists of several methods that, combined, create and fill a <xref:System.Data.DataSet> from the **Northwind** database.  \\n  \\n [!code-csharp[Classic WebData DataSet Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet Example/CS/source.cs#1)]\\n [!code-vb[Classic WebData DataSet Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet Example/VB/source.vb#1)]\"\n  syntax:\n    content: 'public class DataSet : System.ComponentModel.MarshalByValueComponent, System.ComponentModel.IListSource, System.ComponentModel.ISupportInitializeNotification, System.Runtime.Serialization.ISerializable, System.Xml.Serialization.IXmlSerializable'\n  inheritance:\n  - System.Object\n  - System.ComponentModel.MarshalByValueComponent\n  implements:\n  - System.ComponentModel.IListSource\n  - System.ComponentModel.ISupportInitializeNotification\n  - System.Runtime.Serialization.ISerializable\n  - System.Xml.Serialization.IXmlSerializable\n  inheritedMembers:\n  - System.ComponentModel.MarshalByValueComponent.Container\n  - System.ComponentModel.MarshalByValueComponent.DesignMode\n  - System.ComponentModel.MarshalByValueComponent.Dispose\n  - System.ComponentModel.MarshalByValueComponent.Dispose(System.Boolean)\n  - System.ComponentModel.MarshalByValueComponent.Disposed\n  - System.ComponentModel.MarshalByValueComponent.Events\n  - System.ComponentModel.MarshalByValueComponent.GetService(System.Type)\n  - System.ComponentModel.MarshalByValueComponent.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  attributes: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.DataSet.#ctor\n  commentId: M:System.Data.DataSet.#ctor\n  id: '#ctor'\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: DataSet()\n  nameWithType: DataSet.DataSet()\n  fullName: DataSet.DataSet()\n  type: Constructor\n  assemblies:\n  - System.Data\n  - netstandard\n  - System.Data.Common\n  namespace: System.Data\n  summary: Initializes a new instance of the <xref href=\"System.Data.DataSet\"></xref> class.\n  remarks: \"This implementation of the <xref:System.Data.DataSet> constructor takes no parameters, and creates a default name, \\\"NewDataSet,\\\" for the new instance.  \\n  \\n A name for the <xref:System.Data.DataSet> is required to ensure that the XML representation of the <xref:System.Data.DataSet> always has a name for the document element, which is the highest-level element in a schema definition.\"\n  example:\n  - \"The following example creates a new <xref:System.Data.DataSet>, and adds two <xref:System.Data.DataTable> objects to it.  \\n  \\n [!code-vb[Classic WebData DataSet.DataSet Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.DataSet Example/VB/source.vb#1)]\"\n  syntax:\n    content: public DataSet ();\n    parameters: []\n  overload: System.Data.DataSet.#ctor*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.DataSet.#ctor(System.String)\n  commentId: M:System.Data.DataSet.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: DataSet(String)\n  nameWithType: DataSet.DataSet(String)\n  fullName: DataSet.DataSet(String)\n  type: Constructor\n  assemblies:\n  - System.Data\n  - netstandard\n  - System.Data.Common\n  namespace: System.Data\n  summary: Initializes a new instance of a <xref href=\"System.Data.DataSet\"></xref> class with the given name.\n  remarks: A name for the <xref:System.Data.DataSet> is required to ensure that the XML representation of the <xref:System.Data.DataSet> always has a name for the document element, which is the highest level element in a schema definition.\n  example:\n  - \"The following example creates a new <xref:System.Data.DataSet>, to which two <xref:System.Data.DataTable> objects are added.  \\n  \\n [!code-vb[Classic WebData DataSet.DataSet1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.DataSet1 Example/VB/source.vb#1)]\"\n  syntax:\n    content: public DataSet (string dataSetName);\n    parameters:\n    - id: dataSetName\n      type: System.String\n      description: The name of the <xref href=\"System.Data.DataSet\"></xref>.\n  overload: System.Data.DataSet.#ctor*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.DataSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  commentId: M:System.Data.DataSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  id: '#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)'\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: DataSet(SerializationInfo, StreamingContext)\n  nameWithType: DataSet.DataSet(SerializationInfo, StreamingContext)\n  fullName: DataSet.DataSet(SerializationInfo, StreamingContext)\n  type: Constructor\n  assemblies:\n  - System.Data\n  - netstandard\n  - System.Data.Common\n  namespace: System.Data\n  summary: Initializes a new instance of a <xref href=\"System.Data.DataSet\"></xref> class that has the given serialization information and context.\n  syntax:\n    content: protected DataSet (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);\n    parameters:\n    - id: info\n      type: System.Runtime.Serialization.SerializationInfo\n      description: The data needed to serialize or deserialize an object.\n    - id: context\n      type: System.Runtime.Serialization.StreamingContext\n      description: The source and destination of a given serialized stream.\n  overload: System.Data.DataSet.#ctor*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.DataSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Boolean)\n  commentId: M:System.Data.DataSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Boolean)\n  id: '#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Boolean)'\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: DataSet(SerializationInfo, StreamingContext, Boolean)\n  nameWithType: DataSet.DataSet(SerializationInfo, StreamingContext, Boolean)\n  fullName: DataSet.DataSet(SerializationInfo, StreamingContext, Boolean)\n  type: Constructor\n  assemblies:\n  - System.Data\n  - netstandard\n  - System.Data.Common\n  namespace: System.Data\n  summary: Initializes a new instance of the <xref href=\"System.Data.DataSet\"></xref> class.\n  syntax:\n    content: protected DataSet (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context, bool ConstructSchema);\n    parameters:\n    - id: info\n      type: System.Runtime.Serialization.SerializationInfo\n      description: The <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> object.\n    - id: context\n      type: System.Runtime.Serialization.StreamingContext\n      description: The <xref href=\"System.Runtime.Serialization.StreamingContext\"></xref> object.\n    - id: ConstructSchema\n      type: System.Boolean\n      description: The boolean value.\n  overload: System.Data.DataSet.#ctor*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.DataSet.AcceptChanges\n  commentId: M:System.Data.DataSet.AcceptChanges\n  id: AcceptChanges\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: AcceptChanges()\n  nameWithType: DataSet.AcceptChanges()\n  fullName: DataSet.AcceptChanges()\n  type: Method\n  assemblies:\n  - System.Data\n  - netstandard\n  - System.Data.Common\n  namespace: System.Data\n  summary: Commits all the changes made to this <xref href=\"System.Data.DataSet\"></xref> since it was loaded or since the last time <xref href=\"System.Data.DataSet.AcceptChanges\"></xref> was called.\n  remarks: \"Both the <xref:System.Data.DataRow> and <xref:System.Data.DataTable> classes have <xref:System.Data.DataSet.AcceptChanges%2A> methods. Calling <xref:System.Data.DataTable.AcceptChanges%2A> at the <xref:System.Data.DataTable> level causes the <xref:System.Data.DataRow.AcceptChanges%2A> method for each <xref:System.Data.DataRow> to be called. Similarly, invoking <xref:System.Data.DataSet.AcceptChanges%2A> on the <xref:System.Data.DataSet> causes <xref:System.Data.DataTable.AcceptChanges%2A> to be called on each table within the <xref:System.Data.DataSet>. In this manner, you have multiple levels at which the method can be invoked. Calling the <xref:System.Data.DataSet.AcceptChanges%2A> of the <xref:System.Data.DataSet> enables you to invoke the method on all subordinate objects (for example, tables and rows) with one call.  \\n  \\n When you call `AcceptChanges` on the `DataSet`, any <xref:System.Data.DataRow> objects still in edit-mode end their edits successfully. The <xref:System.Data.DataRow.RowState%2A> property of each <xref:System.Data.DataRow> also changes; `Added` and `Modified` rows become `Unchanged`, and `Deleted` rows are removed.  \\n  \\n If the `DataSet` contains <xref:System.Data.ForeignKeyConstraint> objects, invoking the `AcceptChanges` method also causes the <xref:System.Data.ForeignKeyConstraint.AcceptRejectRule%2A> to be enforced.  \\n  \\n> [!NOTE]\\n>  `AcceptChanges` and `RejectChanges` only apply to `DataRow` related changes (that is, Add, Remove, Delete, and Modify). They are not applicable to schema or structural changes.  \\n>   \\n>  Calling AcceptChanges will not replicate these changes back to the data source if the DataSet was filled using a DataAdapter. In that situation, call <xref:System.Data.Common.DataAdapter.Update%2A> instead. See [Updating Data Sources with DataAdapters](http://msdn.microsoft.com/library/33y2221y.aspx) for more information.\"\n  example:\n  - \"The following example adds a <xref:System.Data.DataRow> to a <xref:System.Data.DataTable> in a <xref:System.Data.DataSet>. The <xref:System.Data.DataSet.AcceptChanges%2A> method is then called on the <xref:System.Data.DataSet>, which cascades to all <xref:System.Data.DataTable> objects that it contains.  \\n  \\n [!code-csharp[Classic WebData DataSet.AcceptChanges#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.AcceptChanges/CS/source.cs#1)]\\n [!code-vb[Classic WebData DataSet.AcceptChanges#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.AcceptChanges/VB/source.vb#1)]\"\n  syntax:\n    content: public void AcceptChanges ();\n    parameters: []\n  overload: System.Data.DataSet.AcceptChanges*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.DataSet.BeginInit\n  commentId: M:System.Data.DataSet.BeginInit\n  id: BeginInit\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: BeginInit()\n  nameWithType: DataSet.BeginInit()\n  fullName: DataSet.BeginInit()\n  type: Method\n  assemblies:\n  - System.Data\n  - netstandard\n  - System.Data.Common\n  namespace: System.Data\n  summary: Begins the initialization of a <xref href=\"System.Data.DataSet\"></xref> that is used on a form or used by another component. The initialization occurs at run time.\n  remarks: The Visual Studio .NET design environment uses this method to start the initialization of a component that is used on a form or used by another component. The <xref:System.Data.DataSet.EndInit%2A> method ends the initialization. Using the <xref:System.Data.DataSet.BeginInit%2A> and <xref:System.Data.DataSet.EndInit%2A> methods prevents the control from being used before it is fully initialized.\n  syntax:\n    content: public void BeginInit ();\n    parameters: []\n  overload: System.Data.DataSet.BeginInit*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.DataSet.CaseSensitive\n  commentId: P:System.Data.DataSet.CaseSensitive\n  id: CaseSensitive\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: CaseSensitive\n  nameWithType: DataSet.CaseSensitive\n  fullName: DataSet.CaseSensitive\n  type: Property\n  assemblies:\n  - System.Data\n  - netstandard\n  - System.Data.Common\n  namespace: System.Data\n  summary: Gets or sets a value indicating whether string comparisons within <xref href=\"System.Data.DataTable\"></xref> objects are case-sensitive.\n  remarks: \"The <xref:System.Data.DataSet.CaseSensitive%2A> property affects how sorting, searching, and filtering operations are performed on each <xref:System.Data.DataTable> object contained in a <xref:System.Data.DataSet> when using the <xref:System.Data.DataTable.Select%2A> method.  \\n  \\n By default, setting the <xref:System.Data.DataSet.CaseSensitive%2A> property for a <xref:System.Data.DataSet> also sets the <xref:System.Data.DataTable.CaseSensitive%2A> property of each associated <xref:System.Data.DataTable> to the same value.\"\n  example:\n  - \"The following example toggles the <xref:System.Data.DataSet.CaseSensitive%2A> property.  \\n  \\n [!code-vb[Classic WebData DataSet.CaseSensitive Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.CaseSensitive Example/VB/source.vb#1)]\"\n  syntax:\n    content: public bool CaseSensitive { get; set; }\n    return:\n      type: System.Boolean\n      description: '`true` if string comparisons are case-sensitive; otherwise `false`. The default is `false`.'\n  overload: System.Data.DataSet.CaseSensitive*\n  exceptions: []\n  attributes: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.DataSet.Clear\n  commentId: M:System.Data.DataSet.Clear\n  id: Clear\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: Clear()\n  nameWithType: DataSet.Clear()\n  fullName: DataSet.Clear()\n  type: Method\n  assemblies:\n  - System.Data\n  - netstandard\n  - System.Data.Common\n  namespace: System.Data\n  summary: Clears the <xref href=\"System.Data.DataSet\"></xref> of any data by removing all rows in all tables.\n  remarks: If the <xref:System.Data.DataSet> is bound to an <xref:System.Xml.XmlDataDocument>, calling <xref:System.Data.DataSet.Clear%2A?displayProperty=fullName> or <xref:System.Data.DataTable.Clear%2A?displayProperty=fullName> raises the <xref:System.NotSupportedException>. To avoid this situation, traverse each table, removing each row one at a time.\n  example:\n  - \"The following example clears the <xref:System.Data.DataSet> of all rows in all tables.  \\n  \\n [!code-csharp[Classic WebData DataSet.Clear Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.Clear Example/CS/source.cs#1)]\\n [!code-vb[Classic WebData DataSet.Clear Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.Clear Example/VB/source.vb#1)]\"\n  syntax:\n    content: public void Clear ();\n    parameters: []\n  overload: System.Data.DataSet.Clear*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.DataSet.Clone\n  commentId: M:System.Data.DataSet.Clone\n  id: Clone\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: Clone()\n  nameWithType: DataSet.Clone()\n  fullName: DataSet.Clone()\n  type: Method\n  assemblies:\n  - System.Data\n  - netstandard\n  - System.Data.Common\n  namespace: System.Data\n  summary: Copies the structure of the <xref href=\"System.Data.DataSet\"></xref>, including all <xref href=\"System.Data.DataTable\"></xref> schemas, relations, and constraints. Does not copy any data.\n  remarks: >-\n    > [!NOTE]\n\n    >  If these classes have been subclassed, the clone will also be of the same subclasses.\n  example:\n  - \"The following example creates a clone of a <xref:System.Data.DataSet> object's schema.  \\n  \\n [!code-csharp[Classic WebData DataSet.Clone Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.Clone Example/CS/source.cs#1)]\\n [!code-vb[Classic WebData DataSet.Clone Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.Clone Example/VB/source.vb#1)]\"\n  syntax:\n    content: public virtual System.Data.DataSet Clone ();\n    parameters: []\n    return:\n      type: System.Data.DataSet\n      description: A new <xref href=\"System.Data.DataSet\"></xref> with the same schema as the current <xref href=\"System.Data.DataSet\"></xref>, but none of the data.\n  overload: System.Data.DataSet.Clone*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.DataSet.Copy\n  commentId: M:System.Data.DataSet.Copy\n  id: Copy\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: Copy()\n  nameWithType: DataSet.Copy()\n  fullName: DataSet.Copy()\n  type: Method\n  assemblies:\n  - System.Data\n  - netstandard\n  - System.Data.Common\n  namespace: System.Data\n  summary: Copies both the structure and data for this <xref href=\"System.Data.DataSet\"></xref>.\n  remarks: ''\n  example:\n  - \"The following example uses the <xref:System.Data.DataSet.Copy%2A> method to create a copy of the original <xref:System.Data.DataSet>.  \\n  \\n [!code-csharp[Classic WebData DataSet.Copy Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.Copy Example/CS/source.cs#1)]\\n [!code-vb[Classic WebData DataSet.Copy Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.Copy Example/VB/source.vb#1)]\"\n  syntax:\n    content: public System.Data.DataSet Copy ();\n    parameters: []\n    return:\n      type: System.Data.DataSet\n      description: \"A new <xref href=\\\"System.Data.DataSet\\\"></xref> with the same structure (table schemas, relations, and constraints) and data as this <xref href=\\\"System.Data.DataSet\\\"></xref>.  \\n  \\n <block subset=\\\"none\\\" type=\\\"note\\\"><p>  \\n If these classes have been subclassed, the copy will also be of the same subclasses.  \\n  \\n</p></block>\"\n  overload: System.Data.DataSet.Copy*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.DataSet.CreateDataReader(System.Data.DataTable[])\n  commentId: M:System.Data.DataSet.CreateDataReader(System.Data.DataTable[])\n  id: CreateDataReader(System.Data.DataTable[])\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: CreateDataReader(DataTable[])\n  nameWithType: DataSet.CreateDataReader(DataTable[])\n  fullName: DataSet.CreateDataReader(DataTable[])\n  type: Method\n  assemblies:\n  - System.Data\n  - netstandard\n  - System.Data.Common\n  namespace: System.Data\n  summary: Returns a <xref href=\"System.Data.DataTableReader\"></xref> with one result set per <xref href=\"System.Data.DataTable\"></xref>.\n  remarks: In order to ensure that the order of the result sets within the returned <xref:System.Data.DataTableReader>, if a <xref:System.Data.DataTable> within the <xref:System.Data.DataSet> is empty, it is represented by an empty result set within the returned `DataTableReader`. Because this overloaded version allows you to supply a list of `DataTable` instances as parameters, you can specify the order in which the result sets appear within the returned `DataTableReader`.\n  example:\n  - \"This example, a Console application, creates three <xref:System.Data.DataTable> instances and adds each to a <xref:System.Data.DataSet>. The example calls the <xref:System.Data.DataSet.CreateDataReader%2A> method and displays the contents of the returned <xref:System.Data.DataTableReader>. Note that the order of the result sets in the `DataTableReader` is controlled by the order of the `DataTable` instances passed as parameters. The example displays the results in the Console window.  \\n  \\n [!code-csharp[DataWorks DataSet.DataTableReaderTables#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataSet.DataTableReaderTables/CS/source.cs#1)]\\n [!code-vb[DataWorks DataSet.DataTableReaderTables#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataSet.DataTableReaderTables/VB/source.vb#1)]\"\n  syntax:\n    content: public System.Data.DataTableReader CreateDataReader (System.Data.DataTable[] dataTables);\n    parameters:\n    - id: dataTables\n      type: System.Data.DataTable[]\n      description: An array of DataTables providing the order of the result sets to be returned in the <xref href=\"System.Data.DataTableReader\"></xref>.\n    return:\n      type: System.Data.DataTableReader\n      description: A <xref href=\"System.Data.DataTableReader\"></xref> containing one or more result sets, corresponding to the <xref href=\"System.Data.DataTable\"></xref> instances contained within the source <xref href=\"System.Data.DataSet\"></xref>. The returned result sets are in the order specified by the <code>dataTables</code> parameter.\n  overload: System.Data.DataSet.CreateDataReader*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.DataSet.CreateDataReader\n  commentId: M:System.Data.DataSet.CreateDataReader\n  id: CreateDataReader\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: CreateDataReader()\n  nameWithType: DataSet.CreateDataReader()\n  fullName: DataSet.CreateDataReader()\n  type: Method\n  assemblies:\n  - System.Data\n  - netstandard\n  - System.Data.Common\n  namespace: System.Data\n  summary: Returns a <xref href=\"System.Data.DataTableReader\"></xref> with one result set per <xref href=\"System.Data.DataTable\"></xref>, in the same sequence as the tables appear in the <xref href=\"System.Data.DataSet.Tables\"></xref> collection.\n  remarks: In order to ensure the order of the result sets within the returned <xref:System.Data.DataTableReader>, if a <xref:System.Data.DataTable> within the <xref:System.Data.DataSet> is empty, it is represented by an empty result set within the returned `DataTableReader`.\n  example:\n  - \"The following example creates three <xref:System.Data.DataTable> instances, and adds each to a <xref:System.Data.DataSet>. The example then passes the filled `DataSet` to a procedure that calls the <xref:System.Data.DataSet.CreateDataReader%2A> method, and proceeds to iterate through all the result sets contained within the <xref:System.Data.DataTableReader>. The example displays the results in the Console window.  \\n  \\n [!code-csharp[DataWorks DataSet.DataTableReader#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataSet.DataTableReader/CS/source.cs#1)]\\n [!code-vb[DataWorks DataSet.DataTableReader#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataSet.DataTableReader/VB/source.vb#1)]\"\n  syntax:\n    content: public System.Data.DataTableReader CreateDataReader ();\n    parameters: []\n    return:\n      type: System.Data.DataTableReader\n      description: A <xref href=\"System.Data.DataTableReader\"></xref> containing one or more result sets, corresponding to the <xref href=\"System.Data.DataTable\"></xref> instances contained within the source <xref href=\"System.Data.DataSet\"></xref>.\n  overload: System.Data.DataSet.CreateDataReader*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.DataSet.DataSetName\n  commentId: P:System.Data.DataSet.DataSetName\n  id: DataSetName\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: DataSetName\n  nameWithType: DataSet.DataSetName\n  fullName: DataSet.DataSetName\n  type: Property\n  assemblies:\n  - System.Data\n  - netstandard\n  - System.Data.Common\n  namespace: System.Data\n  summary: Gets or sets the name of the current <xref href=\"System.Data.DataSet\"></xref>.\n  remarks: ''\n  example:\n  - \"The following example creates a new <xref:System.Data.DataSet> with the given <xref:System.Data.DataSet.DataSetName%2A>.  \\n  \\n [!code-csharp[Classic WebData DataSet.DataSetName Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.DataSetName Example/CS/source.cs#1)]\\n [!code-vb[Classic WebData DataSet.DataSetName Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.DataSetName Example/VB/source.vb#1)]\"\n  syntax:\n    content: public string DataSetName { get; set; }\n    return:\n      type: System.String\n      description: The name of the <xref href=\"System.Data.DataSet\"></xref>.\n  overload: System.Data.DataSet.DataSetName*\n  exceptions: []\n  attributes: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.DataSet.DefaultViewManager\n  commentId: P:System.Data.DataSet.DefaultViewManager\n  id: DefaultViewManager\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: DefaultViewManager\n  nameWithType: DataSet.DefaultViewManager\n  fullName: DataSet.DefaultViewManager\n  type: Property\n  assemblies:\n  - System.Data\n  - netstandard\n  - System.Data.Common\n  namespace: System.Data\n  summary: Gets a custom view of the data contained in the <xref href=\"System.Data.DataSet\"></xref> to allow filtering, searching, and navigating using a custom <xref href=\"System.Data.DataViewManager\"></xref>.\n  remarks: \"The <xref:System.Data.DataViewManager> returned by the <xref:System.Data.DataSet.DefaultViewManager%2A> property allows you to create custom settings for each <xref:System.Data.DataTable> in the <xref:System.Data.DataSet>.  \\n  \\n When you obtain a <xref:System.Data.DataView> from a <xref:System.Data.DataTable>, the sort order, filtering, and <xref:System.Data.DataViewRowState> are configured according to the settings in the <xref:System.Data.DataSet.DefaultViewManager%2A> property.\"\n  example:\n  - \"The following example gets the default <xref:System.Data.DataViewManager> for a <xref:System.Data.DataSet>, and adds a <xref:System.Data.DataTable> to the <xref:System.Data.DataTableCollection>.  \\n  \\n [!code-vb[Classic WebData DataSet.DefaultViewManager Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.DefaultViewManager Example/VB/source.vb#1)]\"\n  syntax:\n    content: >-\n      [System.ComponentModel.Browsable(false)]\n\n      public System.Data.DataViewManager DefaultViewManager { get; }\n    return:\n      type: System.Data.DataViewManager\n      description: A <xref href=\"System.Data.DataViewManager\"></xref> object.\n  overload: System.Data.DataSet.DefaultViewManager*\n  exceptions: []\n  attributes:\n  - type: System.ComponentModel.BrowsableAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.DataSet.DetermineSchemaSerializationMode(System.Xml.XmlReader)\n  commentId: M:System.Data.DataSet.DetermineSchemaSerializationMode(System.Xml.XmlReader)\n  id: DetermineSchemaSerializationMode(System.Xml.XmlReader)\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: DetermineSchemaSerializationMode(XmlReader)\n  nameWithType: DataSet.DetermineSchemaSerializationMode(XmlReader)\n  fullName: DataSet.DetermineSchemaSerializationMode(XmlReader)\n  type: Method\n  assemblies:\n  - System.Data\n  - netstandard\n  - System.Data.Common\n  namespace: System.Data\n  summary: Determines the <xref href=\"System.Data.DataSet.SchemaSerializationMode\"></xref> for a <xref href=\"System.Data.DataSet\"></xref>.\n  remarks: This method can be called when deserializing a typed <xref:System.Data.DataSet> to determine its <xref:System.Data.DataSet.SchemaSerializationMode%2A>.\n  syntax:\n    content: protected System.Data.SchemaSerializationMode DetermineSchemaSerializationMode (System.Xml.XmlReader reader);\n    parameters:\n    - id: reader\n      type: System.Xml.XmlReader\n      description: The <xref href=\"System.Xml.XmlReader\"></xref> instance that is passed during deserialization of the <xref href=\"System.Data.DataSet\"></xref>.\n    return:\n      type: System.Data.SchemaSerializationMode\n      description: An <xref href=\"System.Data.SchemaSerializationMode\"></xref> enumeration indicating whether schema information has been omitted from the payload.\n  overload: System.Data.DataSet.DetermineSchemaSerializationMode*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.DataSet.DetermineSchemaSerializationMode(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  commentId: M:System.Data.DataSet.DetermineSchemaSerializationMode(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  id: DetermineSchemaSerializationMode(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: DetermineSchemaSerializationMode(SerializationInfo, StreamingContext)\n  nameWithType: DataSet.DetermineSchemaSerializationMode(SerializationInfo, StreamingContext)\n  fullName: DataSet.DetermineSchemaSerializationMode(SerializationInfo, StreamingContext)\n  type: Method\n  assemblies:\n  - System.Data\n  - netstandard\n  - System.Data.Common\n  namespace: System.Data\n  summary: Determines the <xref href=\"System.Data.DataSet.SchemaSerializationMode\"></xref> for a <xref href=\"System.Data.DataSet\"></xref>.\n  remarks: This method can be called when deserializing a typed <xref:System.Data.DataSet> to determine its <xref:System.Data.DataSet.SchemaSerializationMode%2A>.\n  syntax:\n    content: protected System.Data.SchemaSerializationMode DetermineSchemaSerializationMode (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);\n    parameters:\n    - id: info\n      type: System.Runtime.Serialization.SerializationInfo\n      description: The <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> that a `DataSet`’s protected constructor <xref href=\"System.Data.DataSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\"></xref> is invoked with during deserialization in remoting scenarios.\n    - id: context\n      type: System.Runtime.Serialization.StreamingContext\n      description: The <xref href=\"System.Runtime.Serialization.StreamingContext\"></xref> that a `DataSet`’s protected constructor <xref href=\"System.Data.DataSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\"></xref> is invoked with during deserialization in remoting scenarios.\n    return:\n      type: System.Data.SchemaSerializationMode\n      description: An <xref href=\"System.Data.SchemaSerializationMode\"></xref> enumeration indicating whether schema information has been omitted from the payload.\n  overload: System.Data.DataSet.DetermineSchemaSerializationMode*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.DataSet.EndInit\n  commentId: M:System.Data.DataSet.EndInit\n  id: EndInit\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: EndInit()\n  nameWithType: DataSet.EndInit()\n  fullName: DataSet.EndInit()\n  type: Method\n  assemblies:\n  - System.Data\n  - netstandard\n  - System.Data.Common\n  namespace: System.Data\n  summary: Ends the initialization of a <xref href=\"System.Data.DataSet\"></xref> that is used on a form or used by another component. The initialization occurs at run time.\n  remarks: The Visual Studio .NET design environment uses this method to end the initialization of a component that is used on a form or used by another component. The <xref:System.Data.DataSet.BeginInit%2A> method starts the initialization. Using the <xref:System.Data.DataSet.BeginInit%2A> and <xref:System.Data.DataSet.EndInit%2A> methods prevents the control from being used before it is fully initialized.\n  syntax:\n    content: public void EndInit ();\n    parameters: []\n  overload: System.Data.DataSet.EndInit*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.DataSet.EnforceConstraints\n  commentId: P:System.Data.DataSet.EnforceConstraints\n  id: EnforceConstraints\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: EnforceConstraints\n  nameWithType: DataSet.EnforceConstraints\n  fullName: DataSet.EnforceConstraints\n  type: Property\n  assemblies:\n  - System.Data\n  - netstandard\n  - System.Data.Common\n  namespace: System.Data\n  summary: Gets or sets a value indicating whether constraint rules are followed when attempting any update operation.\n  remarks: Constraints are set at the <xref:System.Data.DataTable> level (<xref:System.Data.DataTable.Constraints%2A> property). For more information about creating constraints, see [DataTable Constraints](~/docs/framework/data/adonet/dataset-datatable-dataview/datatable-constraints.md).\n  example:\n  - \"The following example creates a <xref:System.Data.DataSet> with one table, one column, five rows, and one <xref:System.Data.UniqueConstraint>. The <xref:System.Data.DataSet.EnforceConstraints%2A> property is set to `false` and the values of each row are set to the same value. When the <xref:System.Data.DataSet.EnforceConstraints%2A> property is reset to `true`, a <xref:System.Data.ConstraintException> is generated.  \\n  \\n [!code-csharp[Classic WebData DataSet.EnforceConstraints Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.EnforceConstraints Example/CS/source.cs#1)]\\n [!code-vb[Classic WebData DataSet.EnforceConstraints Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.EnforceConstraints Example/VB/source.vb#1)]\"\n  syntax:\n    content: public bool EnforceConstraints { get; set; }\n    return:\n      type: System.Boolean\n      description: '`true` if rules are enforced; otherwise `false`. The default is `true`.'\n  overload: System.Data.DataSet.EnforceConstraints*\n  exceptions:\n  - type: System.Data.ConstraintException\n    commentId: T:System.Data.ConstraintException\n    description: One or more constraints cannot be enforced.\n  attributes: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.DataSet.ExtendedProperties\n  commentId: P:System.Data.DataSet.ExtendedProperties\n  id: ExtendedProperties\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: ExtendedProperties\n  nameWithType: DataSet.ExtendedProperties\n  fullName: DataSet.ExtendedProperties\n  type: Property\n  assemblies:\n  - System.Data\n  - netstandard\n  - System.Data.Common\n  namespace: System.Data\n  summary: Gets the collection of customized user information associated with the `DataSet`.\n  remarks: \"The <xref:System.Data.DataSet.ExtendedProperties%2A> property enables you to store custom information with the `DataSet`. For example, you might store a time when the data should be refreshed.  \\n  \\n Extended properties must be of type <xref:System.String> if you want them persisted when the <xref:System.Data.DataSet> is written as XML.\"\n  example:\n  - \"The following example adds a custom property to the <xref:System.Data.PropertyCollection> returned by the <xref:System.Data.DataColumn.ExtendedProperties%2A> property. The second example retrieves the custom property.  \\n  \\n [!code-csharp[Classic WebData DataColumn.ExtendedProperties Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.ExtendedProperties Example/CS/source.cs#1)]\\n [!code-vb[Classic WebData DataColumn.ExtendedProperties Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.ExtendedProperties Example/VB/source.vb#1)]\"\n  syntax:\n    content: >-\n      [System.ComponentModel.Browsable(false)]\n\n      public System.Data.PropertyCollection ExtendedProperties { get; }\n    return:\n      type: System.Data.PropertyCollection\n      description: A <xref href=\"System.Data.PropertyCollection\"></xref> with all custom user information.\n  overload: System.Data.DataSet.ExtendedProperties*\n  exceptions: []\n  attributes:\n  - type: System.ComponentModel.BrowsableAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.DataSet.GetChanges\n  commentId: M:System.Data.DataSet.GetChanges\n  id: GetChanges\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: GetChanges()\n  nameWithType: DataSet.GetChanges()\n  fullName: DataSet.GetChanges()\n  type: Method\n  assemblies:\n  - System.Data\n  - netstandard\n  - System.Data.Common\n  namespace: System.Data\n  summary: Gets a copy of the <xref href=\"System.Data.DataSet\"></xref> that contains all changes made to it since it was loaded or since <xref href=\"System.Data.DataSet.AcceptChanges\"></xref> was last called.\n  remarks: Creates a new <xref:System.Data.DataSet> that contains a copy of all rows in the original <xref:System.Data.DataSet> that have pending changes. Relationship constraints can cause additional unchanged rows to be added to the new <xref:System.Data.DataSet> if the unchanged rows contain primary keys corresponding to foreign keys in the changed rows. The method returns `null` if there are no rows in the original <xref:System.Data.DataSet> that have pending changes.\n  example:\n  - \"The following example creates a simple <xref:System.Data.DataSet> with one table, two columns, and ten rows. Two values are changed, and one row is added. A subset of the changed data is created using the <xref:System.Data.DataSet.GetChanges%2A> method. After reconciling errors, a new column is added to the subset, changing the schema. When the <xref:System.Data.DataSet.Merge%2A> method is called with the `missingSchemaAction` set to `MissingSchemaAction.Add`, the new column is added to the original <xref:System.Data.DataSet> object's schema.  \\n  \\n [!code-csharp[Classic WebData DataSet.GetChanges Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.GetChanges Example/CS/source.cs#1)]\\n [!code-vb[Classic WebData DataSet.GetChanges Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.GetChanges Example/VB/source.vb#1)]\"\n  syntax:\n    content: public System.Data.DataSet GetChanges ();\n    parameters: []\n    return:\n      type: System.Data.DataSet\n      description: A copy of the changes from this <xref href=\"System.Data.DataSet\"></xref> that can have actions performed on it and later be merged back in using <xref href=\"System.Data.DataSet.Merge(System.Data.DataSet)\"></xref>. If no changed rows are found, the method returns `null`.\n  overload: System.Data.DataSet.GetChanges*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.DataSet.GetChanges(System.Data.DataRowState)\n  commentId: M:System.Data.DataSet.GetChanges(System.Data.DataRowState)\n  id: GetChanges(System.Data.DataRowState)\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: GetChanges(DataRowState)\n  nameWithType: DataSet.GetChanges(DataRowState)\n  fullName: DataSet.GetChanges(DataRowState)\n  type: Method\n  assemblies:\n  - System.Data\n  - netstandard\n  - System.Data.Common\n  namespace: System.Data\n  summary: Gets a copy of the <xref href=\"System.Data.DataSet\"></xref> containing all changes made to it since it was last loaded, or since <xref href=\"System.Data.DataSet.AcceptChanges\"></xref> was called, filtered by <xref href=\"System.Data.DataRowState\"></xref>.\n  remarks: \"The <xref:System.Data.DataSet.GetChanges%2A> method is used to produce a second <xref:System.Data.DataSet> object that contains only the changes introduced into the original. Use the `rowStates` argument to specify the type of changes the new object should include.  \\n  \\n This returned copy is designed to be merged back in to this original <xref:System.Data.DataSet>. Relationship constraints may cause parent rows marked `Unchanged` to be included. If no rows of the desired <xref:System.Data.DataRowState> are found, the <xref:System.Data.DataSet.GetChanges%2A> method returns `null`.\"\n  example:\n  - \"The following example uses the <xref:System.Data.DataSet.GetChanges%2A> method to create a second <xref:System.Data.DataSet> object, which is then used to update a data source.  \\n  \\n [!code-csharp[Classic WebData DataSet.GetChanges1 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.GetChanges1 Example/CS/source.cs#1)]\\n [!code-vb[Classic WebData DataSet.GetChanges1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.GetChanges1 Example/VB/source.vb#1)]\"\n  syntax:\n    content: public System.Data.DataSet GetChanges (System.Data.DataRowState rowStates);\n    parameters:\n    - id: rowStates\n      type: System.Data.DataRowState\n      description: One of the <xref href=\"System.Data.DataRowState\"></xref> values.\n    return:\n      type: System.Data.DataSet\n      description: A filtered copy of the <xref href=\"System.Data.DataSet\"></xref> that can have actions performed on it, and subsequently be merged back in using <xref href=\"System.Data.DataSet.Merge(System.Data.DataSet)\"></xref>. If no rows of the desired <xref href=\"System.Data.DataRowState\"></xref> are found, the method returns `null`.\n  overload: System.Data.DataSet.GetChanges*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.DataSet.GetDataSetSchema(System.Xml.Schema.XmlSchemaSet)\n  commentId: M:System.Data.DataSet.GetDataSetSchema(System.Xml.Schema.XmlSchemaSet)\n  id: GetDataSetSchema(System.Xml.Schema.XmlSchemaSet)\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: GetDataSetSchema(XmlSchemaSet)\n  nameWithType: DataSet.GetDataSetSchema(XmlSchemaSet)\n  fullName: DataSet.GetDataSetSchema(XmlSchemaSet)\n  type: Method\n  assemblies:\n  - System.Data\n  - netstandard\n  - System.Data.Common\n  namespace: System.Data\n  summary: Gets a copy of <xref href=\"System.Xml.Schema.XmlSchemaSet\"></xref> for the DataSet.\n  syntax:\n    content: public static System.Xml.Schema.XmlSchemaComplexType GetDataSetSchema (System.Xml.Schema.XmlSchemaSet schemaSet);\n    parameters:\n    - id: schemaSet\n      type: System.Xml.Schema.XmlSchemaSet\n      description: The specified schema set.\n    return:\n      type: System.Xml.Schema.XmlSchemaComplexType\n      description: A copy of <xref href=\"System.Xml.Schema.XmlSchemaSet\"></xref>.\n  overload: System.Data.DataSet.GetDataSetSchema*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.DataSet.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  commentId: M:System.Data.DataSet.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  id: GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: GetObjectData(SerializationInfo, StreamingContext)\n  nameWithType: DataSet.GetObjectData(SerializationInfo, StreamingContext)\n  fullName: DataSet.GetObjectData(SerializationInfo, StreamingContext)\n  type: Method\n  assemblies:\n  - System.Data\n  - netstandard\n  - System.Data.Common\n  namespace: System.Data\n  summary: Populates a serialization information object with the data needed to serialize the <xref href=\"System.Data.DataSet\"></xref>.\n  syntax:\n    content: public virtual void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);\n    parameters:\n    - id: info\n      type: System.Runtime.Serialization.SerializationInfo\n      description: A <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> that holds the serialized data associated with the <xref href=\"System.Data.DataSet\"></xref>.\n    - id: context\n      type: System.Runtime.Serialization.StreamingContext\n      description: A <xref href=\"System.Runtime.Serialization.StreamingContext\"></xref> that contains the source and destination of the serialized stream associated with the <xref href=\"System.Data.DataSet\"></xref>.\n  overload: System.Data.DataSet.GetObjectData*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>info</code> parameter is `null`.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.DataSet.GetSchemaSerializable\n  commentId: M:System.Data.DataSet.GetSchemaSerializable\n  id: GetSchemaSerializable\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: GetSchemaSerializable()\n  nameWithType: DataSet.GetSchemaSerializable()\n  fullName: DataSet.GetSchemaSerializable()\n  type: Method\n  assemblies:\n  - System.Data\n  - netstandard\n  - System.Data.Common\n  namespace: System.Data\n  summary: Returns a serializable <xref href=\"System.Xml.Schema.XMLSchema\"></xref> instance.\n  syntax:\n    content: protected virtual System.Xml.Schema.XmlSchema GetSchemaSerializable ();\n    parameters: []\n    return:\n      type: System.Xml.Schema.XmlSchema\n      description: The <xref href=\"System.Xml.Schema.XMLSchema\"></xref> instance.\n  overload: System.Data.DataSet.GetSchemaSerializable*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.DataSet.GetSerializationData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  commentId: M:System.Data.DataSet.GetSerializationData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  id: GetSerializationData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: GetSerializationData(SerializationInfo, StreamingContext)\n  nameWithType: DataSet.GetSerializationData(SerializationInfo, StreamingContext)\n  fullName: DataSet.GetSerializationData(SerializationInfo, StreamingContext)\n  type: Method\n  assemblies:\n  - System.Data\n  - netstandard\n  - System.Data.Common\n  namespace: System.Data\n  summary: Deserializes the table data from the binary or XML stream.\n  syntax:\n    content: protected void GetSerializationData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);\n    parameters:\n    - id: info\n      type: System.Runtime.Serialization.SerializationInfo\n      description: The <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> instance.\n    - id: context\n      type: System.Runtime.Serialization.StreamingContext\n      description: The streaming context.\n  overload: System.Data.DataSet.GetSerializationData*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.DataSet.GetXml\n  commentId: M:System.Data.DataSet.GetXml\n  id: GetXml\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: GetXml()\n  nameWithType: DataSet.GetXml()\n  fullName: DataSet.GetXml()\n  type: Method\n  assemblies:\n  - System.Data\n  - netstandard\n  - System.Data.Common\n  namespace: System.Data\n  summary: Returns the XML representation of the data stored in the <xref href=\"System.Data.DataSet\"></xref>.\n  remarks: \"Calling this method is identical to calling <xref:System.Data.DataSet.WriteXml%2A> with <xref:System.Data.XmlWriteMode> set to <xref:System.Data.XmlWriteMode.IgnoreSchema>.  \\n  \\n <xref:System.Data.DataSet.GetXml%2A> returns XML as a string, and therefore requires more overhead than <xref:System.Data.DataSet.WriteXml%2A> to write XML to a file.  \\n  \\n If you build a <xref:System.Data.DataSet> using schema inference and serialize it using XML or Web services, the column ordering may change.\"\n  example:\n  - \"The following example creates a <xref:System.Data.DataSet> and <xref:System.Data.DataTable>, adds sample data, and then displays the data in XML format.  \\n  \\n [!code-csharp[Classic WebData DataSet.GetXml Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.GetXml Example/CS/source.cs#1)]\\n [!code-vb[Classic WebData DataSet.GetXml Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.GetXml Example/VB/source.vb#1)]  \\n  \\n This sample demonstrates how to write data into an XML file from a DataSet and read data into DataSet from XML. This sample will create one dataset with two tables, use two ways to export a dataset into the XML files (WriteXml and GetXml), and use two ways (ReadXml and InferXmlSchema) to import a dataset from the XML files.  \\n  \\n Before you compile and run the sample, you need to create four XML files in the sample directory. First, create ElementsWithAttributes.xml:  \\n  \\n```  \\n<MySchool>  \\n  <Course CourseID=\\\"C1045\\\" Year=\\\"2012\\\"  Title=\\\"Calculus\\\" Credits=\\\"4\\\" DepartmentID=\\\"7\\\">New</Course>  \\n  <Course CourseID=\\\"C1061\\\" Year=\\\"2012\\\"  Title=\\\"Physics\\\" Credits=\\\"4\\\" DepartmentID=\\\"1\\\" />  \\n  <Department DepartmentID=\\\"1\\\" Name=\\\"Engineering\\\" Budget=\\\"350000\\\" StartDate=\\\"2007-09-01T00:00:00+08:00\\\" Administrator=\\\"2\\\" />  \\n  <Department DepartmentID=\\\"7\\\" Name=\\\"Mathematics\\\" Budget=\\\"250024\\\" StartDate=\\\"2007-09-01T00:00:00+08:00\\\" Administrator=\\\"3\\\">Cancelled</Department>  \\n</MySchool>  \\n```  \\n  \\n Next, create ElementsWithChildElementsxml.xml:  \\n  \\n```  \\n<MySchool>  \\n  <Course>  \\n    <CourseID>C1045</CourseID>  \\n    <Year>2012</Year>  \\n    <Title>Calculus</Title>  \\n    <Credits>4</Credits>  \\n    <DepartmentID>7</DepartmentID>  \\n  </Course>  \\n  <Course>  \\n    <CourseID>C1061</CourseID>  \\n    <Year>2012</Year>  \\n    <Title>Physics</Title>  \\n    <Credits>4</Credits>  \\n    <DepartmentID>1</DepartmentID>  \\n  </Course>  \\n  <Course>  \\n    <CourseID>C2021</CourseID>  \\n    <Year>2012</Year>  \\n    <Title>Composition</Title>  \\n    <Credits>3</Credits>  \\n    <DepartmentID>2</DepartmentID>  \\n  </Course>  \\n  <Course>  \\n    <CourseID>C2042</CourseID>  \\n    <Year>2012</Year>  \\n    <Title>Literature</Title>  \\n    <Credits>4</Credits>  \\n    <DepartmentID>2</DepartmentID>  \\n  </Course>  \\n  <Department>  \\n    <DepartmentID>1</DepartmentID>  \\n    <Name>Engineering</Name>  \\n    <Budget>350000</Budget>  \\n    <StartDate>2007-09-01T00:00:00+08:00</StartDate>  \\n    <Administrator>2</Administrator>  \\n  </Department>  \\n  <Department>  \\n    <DepartmentID>2</DepartmentID>  \\n    <Name>English</Name>  \\n    <Budget>120000</Budget>  \\n    <StartDate>2007-09-01T00:00:00+08:00</StartDate>  \\n    <Administrator>6</Administrator>  \\n  </Department>  \\n  <Department>  \\n    <DepartmentID>4</DepartmentID>  \\n    <Name>Economics</Name>  \\n    <Budget>200000</Budget>  \\n    <StartDate>2007-09-01T00:00:00+08:00</StartDate>  \\n    <Administrator>4</Administrator>  \\n  </Department>  \\n  <Department>  \\n    <DepartmentID>7</DepartmentID>  \\n    <Name>Mathematics</Name>  \\n    <Budget>250024</Budget>  \\n    <StartDate>2007-09-01T00:00:00+08:00</StartDate>  \\n    <Administrator>3</Administrator>  \\n  </Department>  \\n</MySchool>  \\n```  \\n  \\n Now create ElementsWithOnlyAttributes.xml:  \\n  \\n```  \\n<MySchool>  \\n  <Course CourseID=\\\"C1045\\\" Year=\\\"2012\\\"  Title=\\\"Calculus\\\" Credits=\\\"4\\\" DepartmentID=\\\"7\\\" />  \\n  <Course CourseID=\\\"C1061\\\" Year=\\\"2012\\\"  Title=\\\"Physics\\\" Credits=\\\"4\\\" DepartmentID=\\\"1\\\" />  \\n  <Department DepartmentID=\\\"1\\\" Name=\\\"Engineering\\\" Budget=\\\"350000\\\" StartDate=\\\"2007-09-01T00:00:00+08:00\\\" Administrator=\\\"2\\\" />  \\n  <Department DepartmentID=\\\"7\\\" Name=\\\"Mathematics\\\" Budget=\\\"250024\\\" StartDate=\\\"2007-09-01T00:00:00+08:00\\\" Administrator=\\\"3\\\" />  \\n</MySchool>  \\n```  \\n  \\n And finally, create RepeatingElements.xml:  \\n  \\n```  \\n<MySchool>  \\n  <Course>C1045</Course>  \\n  <Course>C1061</Course>  \\n  <Department>Engineering</Department>   \\n  <Department>Mathematics</Department>  \\n</MySchool>  \\n```  \\n  \\n Now you can compile and run the following source code.  [How to Store Data of DataSet into XML File](http://code.msdn.microsoft.com/How-to-Store-Data-of-7b9710f3) has Visual Basic and C# projects for this sample.  \\n  \\n```  \\nusing System;  \\nusing System.Data;  \\nusing System.IO;  \\nusing System.Text;  \\nusing System.Xml;  \\n  \\n// Use WriteXml method to export the dataset.  \\nstatic class DataTableHelper {  \\n   public static void WriteDataSetToXML(DataSet dataset, String xmlFileName) {  \\n      using (FileStream fsWriterStream = new FileStream(xmlFileName, FileMode.Create)) {  \\n         using (XmlTextWriter xmlWriter = new XmlTextWriter(fsWriterStream, Encoding.Unicode)) {  \\n            dataset.WriteXml(xmlWriter, XmlWriteMode.WriteSchema);  \\n            Console.WriteLine(\\\"Write {0} to the File {1}.\\\", dataset.DataSetName, xmlFileName);  \\n            Console.WriteLine();  \\n         }  \\n      }  \\n   }  \\n  \\n   // Use GetXml method to get the XML data of the dataset and then export to the file.  \\n   public static void GetXMLFromDataSet(DataSet dataset, String xmlFileName) {  \\n      using (StreamWriter writer = new StreamWriter(xmlFileName)) {  \\n         writer.WriteLine(dataset.GetXml());  \\n         Console.WriteLine(\\\"Get Xml data from {0} and write to the File {1}.\\\", dataset.DataSetName, xmlFileName);  \\n         Console.WriteLine();  \\n      }  \\n   }  \\n  \\n   // Use ReadXml method to import the dataset from the dataset.  \\n   public static void ReadXmlIntoDataSet(DataSet newDataSet, String xmlFileName) {  \\n      using (FileStream fsReaderStream = new FileStream(xmlFileName, FileMode.Open)) {  \\n         using (XmlTextReader xmlReader = new XmlTextReader(fsReaderStream)) {  \\n            newDataSet.ReadXml(xmlReader, XmlReadMode.ReadSchema);  \\n         }  \\n      }  \\n   }  \\n  \\n   // Display the columns and value of DataSet.  \\n   public static void ShowDataSet(DataSet dataset) {  \\n      foreach (DataTable table in dataset.Tables) {  \\n         Console.WriteLine(\\\"Table {0}:\\\", table.TableName);  \\n         ShowDataTable(table);  \\n      }  \\n   }  \\n  \\n   // Display the columns and value of DataTable.  \\n   private static void ShowDataTable(DataTable table) {  \\n      foreach (DataColumn col in table.Columns) {  \\n         Console.Write(\\\"{0,-14}\\\", col.ColumnName);  \\n      }  \\n      Console.WriteLine(\\\"{0,-14}\\\", \\\"\\\");  \\n  \\n      foreach (DataRow row in table.Rows) {  \\n         if (row.RowState == DataRowState.Deleted) {  \\n            foreach (DataColumn col in table.Columns) {  \\n               if (col.DataType.Equals(typeof(DateTime))) {  \\n                  Console.Write(\\\"{0,-14:d}\\\", row[col, DataRowVersion.Original]);  \\n               }  \\n               else if (col.DataType.Equals(typeof(Decimal))) {  \\n                  Console.Write(\\\"{0,-14:C}\\\", row[col, DataRowVersion.Original]);  \\n               }  \\n               else {  \\n                  Console.Write(\\\"{0,-14}\\\", row[col, DataRowVersion.Original]);  \\n               }  \\n            }  \\n         }  \\n         else {  \\n            foreach (DataColumn col in table.Columns) {  \\n               if (col.DataType.Equals(typeof(DateTime))) {  \\n                  Console.Write(\\\"{0,-14:d}\\\", row[col]);  \\n               }  \\n               else if (col.DataType.Equals(typeof(Decimal))) {  \\n                  Console.Write(\\\"{0,-14:C}\\\", row[col]);  \\n               }  \\n               else {  \\n                  Console.Write(\\\"{0,-14}\\\", row[col]);  \\n               }  \\n            }  \\n         }  \\n         Console.WriteLine(\\\"{0,-14}\\\", \\\"\\\");  \\n      }  \\n   }  \\n  \\n   // Display the columns of DataSet.  \\n   public static void ShowDataSetSchema(DataSet dataSet) {  \\n      Console.WriteLine(\\\"{0} contains the following tables:\\\", dataSet.DataSetName);  \\n      foreach (DataTable table in dataSet.Tables) {  \\n         Console.WriteLine(\\\"   Table {0} contains the following columns:\\\", table.TableName);  \\n         ShowDataTableSchema(table);  \\n      }  \\n   }  \\n  \\n   // Display the columns of DataTable  \\n   private static void ShowDataTableSchema(DataTable table) {  \\n      String columnString = \\\"\\\";  \\n      foreach (DataColumn col in table.Columns) {  \\n         columnString += col.ColumnName + \\\"   \\\";  \\n      }  \\n      Console.WriteLine(columnString);  \\n   }  \\n}  \\n  \\nclass Program {  \\n   static void Main(string[] args) {  \\n      // Create the DataSet  \\n      DataSet school = new DataSet(\\\"MySchool\\\");  \\n      DataTable course = CreateCourse();  \\n      DataTable department = CreateDepartment();  \\n      school.Tables.Add(course);  \\n      school.Tables.Add(department);  \\n  \\n      // Define the constraint between the tables.  \\n      ForeignKeyConstraint courseDepartFK = new ForeignKeyConstraint(\\\"CourseDepartFK\\\", department.Columns[\\\"DepartmentID\\\"], course.Columns[\\\"DepartmentID\\\"]);  \\n      courseDepartFK.DeleteRule = Rule.Cascade;  \\n      courseDepartFK.UpdateRule = Rule.Cascade;  \\n      courseDepartFK.AcceptRejectRule = AcceptRejectRule.None;  \\n      course.Constraints.Add(courseDepartFK);  \\n  \\n      InsertDepartments(department);  \\n      InsertCourses(course);  \\n  \\n      // Export the dataset to the XML file.  \\n      Console.WriteLine(\\\"Data of the whole DataSet {0}\\\", school.DataSetName);  \\n      DataTableHelper.ShowDataSet(school);  \\n  \\n      String xmlWithSchemaFileName = \\\"WriterXMLWithSchema.xml\\\";  \\n      String xmlGetDataFileName = \\\"GetXML.xml\\\";  \\n  \\n      // Use two ways to export the dataset to the Xml file.  \\n      DataTableHelper.WriteDataSetToXML(school, xmlWithSchemaFileName);  \\n      DataTableHelper.GetXMLFromDataSet(school, xmlGetDataFileName);  \\n  \\n      // Import the dataset from the XML file.  \\n      // Use two ways to import the dataset from the Xml file.  \\n      Console.WriteLine(\\\"Read Xml document into a new DataSet:\\\");  \\n      DataSet newSchool = new DataSet(\\\"NewSchool\\\");  \\n      DataTableHelper.ReadXmlIntoDataSet(newSchool, xmlWithSchemaFileName);  \\n      DataTableHelper.ShowDataSetSchema(newSchool);  \\n      Console.WriteLine();  \\n  \\n      Console.WriteLine(\\\"Infer a schema for a DataSet from an XML document:\\\");  \\n      InferDataSetSchemaFromXml();  \\n  \\n      Console.WriteLine(\\\"Press any key to exit.\\\");  \\n      Console.ReadKey();  \\n   }  \\n  \\n   static DataTable CreateCourse() {  \\n      DataTable course = new DataTable(\\\"Course\\\");  \\n      DataColumn[] cols ={  \\n                              new DataColumn(\\\"CourseID\\\",typeof(String)),  \\n                              new DataColumn(\\\"Year\\\",typeof(Int32)),  \\n                              new DataColumn(\\\"Title\\\",typeof(String)),  \\n                              new DataColumn(\\\"Credits\\\",typeof(Int32)),  \\n                              new DataColumn(\\\"DepartmentID\\\",typeof(Int32))};  \\n      course.Columns.AddRange(cols);  \\n  \\n      course.PrimaryKey = new DataColumn[] { course.Columns[\\\"CourseID\\\"], course.Columns[\\\"Year\\\"] };  \\n  \\n      return course;  \\n   }  \\n  \\n   static DataTable CreateDepartment() {  \\n      DataTable department = new DataTable(\\\"Department\\\");  \\n      DataColumn[] cols = {   \\n                                new DataColumn(\\\"DepartmentID\\\", typeof(Int32)),  \\n                                new DataColumn(\\\"Name\\\",typeof(String)),  \\n                                new DataColumn(\\\"Budget\\\",typeof(Decimal)),  \\n                                new DataColumn(\\\"StartDate\\\",typeof(DateTime)),  \\n                                new DataColumn(\\\"Administrator\\\",typeof(Int32))};  \\n      department.Columns.AddRange(cols);  \\n  \\n      department.PrimaryKey = new DataColumn[] { department.Columns[\\\"DepartmentID\\\"] };  \\n  \\n      return department;  \\n   }  \\n  \\n   static void InsertDepartments(DataTable department) {  \\n      Object[] rows = {   \\n                            new Object[]{1,\\\"Engineering\\\",350000.00,new DateTime(2007,9,1),2},  \\n                            new Object[]{2,\\\"English\\\",120000.00,new DateTime(2007,9,1),6},  \\n                            new Object[]{4,\\\"Economics\\\",200000.00,new DateTime(2007,9,1),4},  \\n                            new Object[]{7,\\\"Mathematics\\\",250024.00,new DateTime(2007,9,1),3}};  \\n  \\n      foreach (Object[] row in rows) {  \\n         department.Rows.Add(row);  \\n      }  \\n   }  \\n  \\n   static void InsertCourses(DataTable course) {  \\n      Object[] rows ={  \\n                               new Object[]{\\\"C1045\\\",2012,\\\"Calculus\\\",4,7},  \\n                               new Object[]{\\\"C1061\\\",2012,\\\"Physics\\\",4,1},  \\n                               new Object[]{\\\"C2021\\\",2012,\\\"Composition\\\",3,2},  \\n                               new Object[]{\\\"C2042\\\",2012,\\\"Literature\\\",4,2}};  \\n  \\n      foreach (Object[] row in rows) {  \\n         course.Rows.Add(row);  \\n      }  \\n   }  \\n  \\n   // Display the results of inferring schema from four types of XML structures  \\n   private static void InferDataSetSchemaFromXml() {  \\n      String[] xmlFileNames = {   \\n  \\n                                    @\\\"ElementsWithOnlyAttributes.xml\\\",   \\n                                    @\\\"ElementsWithAttributes.xml\\\",  \\n                                    @\\\"RepeatingElements.xml\\\",   \\n                                    @\\\"ElementsWithChildElements.xml\\\" };  \\n  \\n      foreach (String xmlFileName in xmlFileNames) {  \\n         Console.WriteLine(\\\"Result of {0}\\\", Path.GetFileNameWithoutExtension(xmlFileName));  \\n         DataSet newSchool = new DataSet();  \\n         newSchool.InferXmlSchema(xmlFileName, null);  \\n         DataTableHelper.ShowDataSetSchema(newSchool);  \\n         Console.WriteLine();  \\n      }  \\n   }  \\n}  \\n```\"\n  syntax:\n    content: public string GetXml ();\n    parameters: []\n    return:\n      type: System.String\n      description: A string that is a representation of the data stored in the <xref href=\"System.Data.DataSet\"></xref>.\n  overload: System.Data.DataSet.GetXml*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.DataSet.GetXmlSchema\n  commentId: M:System.Data.DataSet.GetXmlSchema\n  id: GetXmlSchema\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: GetXmlSchema()\n  nameWithType: DataSet.GetXmlSchema()\n  fullName: DataSet.GetXmlSchema()\n  type: Method\n  assemblies:\n  - System.Data\n  - netstandard\n  - System.Data.Common\n  namespace: System.Data\n  summary: Returns the XML Schema for the XML representation of the data stored in the <xref href=\"System.Data.DataSet\"></xref>.\n  remarks: \"Calling this method is identical to calling <xref:System.Data.DataSet.WriteXmlSchema%2A>, except that only the primary schema is written.  \\n  \\n <xref:System.Data.DataSet.GetXmlSchema%2A> returns XML as a string, and therefore requires more overhead than <xref:System.Data.DataSet.WriteXmlSchema%2A> to write XML to a file.  \\n  \\n If you build a <xref:System.Data.DataSet> using schema inference and serialize it using XML or Web services, the column ordering may change.\"\n  example:\n  - \"The following example creates a <xref:System.Data.DataSet> and <xref:System.Data.DataTable>, and then displays the schema in XML format.  \\n  \\n [!code-csharp[Classic WebData DataSet.GetXmlSchema Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.GetXmlSchema Example/CS/source.cs#1)]\\n [!code-vb[Classic WebData DataSet.GetXmlSchema Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.GetXmlSchema Example/VB/source.vb#1)]\"\n  syntax:\n    content: public string GetXmlSchema ();\n    parameters: []\n    return:\n      type: System.String\n      description: String that is the XML Schema for the XML representation of the data stored in the <xref href=\"System.Data.DataSet\"></xref>.\n  overload: System.Data.DataSet.GetXmlSchema*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.DataSet.HasChanges\n  commentId: M:System.Data.DataSet.HasChanges\n  id: HasChanges\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: HasChanges()\n  nameWithType: DataSet.HasChanges()\n  fullName: DataSet.HasChanges()\n  type: Method\n  assemblies:\n  - System.Data\n  - netstandard\n  - System.Data.Common\n  namespace: System.Data\n  summary: Gets a value indicating whether the <xref href=\"System.Data.DataSet\"></xref> has changes, including new, deleted, or modified rows.\n  remarks: ''\n  example:\n  - \"The following example uses the <xref:System.Data.DataSet.GetChanges%2A> method to create a second <xref:System.Data.DataSet> object that is then used to update a data source.  \\n  \\n [!code-csharp[Classic WebData DataSet.HasChanges Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.HasChanges Example/CS/source.cs#1)]\\n [!code-vb[Classic WebData DataSet.HasChanges Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.HasChanges Example/VB/source.vb#1)]\"\n  syntax:\n    content: public bool HasChanges ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: '`true` if the <xref href=\"System.Data.DataSet\"></xref> has changes; otherwise `false`.'\n  overload: System.Data.DataSet.HasChanges*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.DataSet.HasChanges(System.Data.DataRowState)\n  commentId: M:System.Data.DataSet.HasChanges(System.Data.DataRowState)\n  id: HasChanges(System.Data.DataRowState)\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: HasChanges(DataRowState)\n  nameWithType: DataSet.HasChanges(DataRowState)\n  fullName: DataSet.HasChanges(DataRowState)\n  type: Method\n  assemblies:\n  - System.Data\n  - netstandard\n  - System.Data.Common\n  namespace: System.Data\n  summary: Gets a value indicating whether the <xref href=\"System.Data.DataSet\"></xref> has changes, including new, deleted, or modified rows, filtered by <xref href=\"System.Data.DataRowState\"></xref>.\n  remarks: Examine the <xref:System.Data.DataSet.HasChanges%2A> property of the `DataSet` before invoking the <xref:System.Data.DataSet.GetChanges%2A> method.\n  example:\n  - \"The following example uses the <xref:System.Data.DataSet.GetChanges%2A> method to create a second <xref:System.Data.DataSet> object, which is then used to update a data source.  \\n  \\n [!code-csharp[Classic WebData DataSet.GetChanges1 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.GetChanges1 Example/CS/source.cs#1)]\\n [!code-vb[Classic WebData DataSet.GetChanges1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.GetChanges1 Example/VB/source.vb#1)]\"\n  syntax:\n    content: public bool HasChanges (System.Data.DataRowState rowStates);\n    parameters:\n    - id: rowStates\n      type: System.Data.DataRowState\n      description: One of the <xref href=\"System.Data.DataRowState\"></xref> values.\n    return:\n      type: System.Boolean\n      description: '`true` if the <xref href=\"System.Data.DataSet\"></xref> has changes; otherwise `false`.'\n  overload: System.Data.DataSet.HasChanges*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.DataSet.HasErrors\n  commentId: P:System.Data.DataSet.HasErrors\n  id: HasErrors\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: HasErrors\n  nameWithType: DataSet.HasErrors\n  fullName: DataSet.HasErrors\n  type: Property\n  assemblies:\n  - System.Data\n  - netstandard\n  - System.Data.Common\n  namespace: System.Data\n  summary: Gets a value indicating whether there are errors in any of the <xref href=\"System.Data.DataTable\"></xref> objects within this <xref href=\"System.Data.DataSet\"></xref>.\n  remarks: Each <xref:System.Data.DataTable> in a <xref:System.Data.DataSet> also has a <xref:System.Data.DataTable.HasErrors%2A> property. Use the `HasErrors` property of the `DataSet` first, to determine if any table has errors, before checking individual <xref:System.Data.DataTable> objects. If a `DataTable` has errors, the <xref:System.Data.DataTable.GetErrors%2A> method returns an array of <xref:System.Data.DataRow> objects containing the errors.\n  example:\n  - \"The following example uses the <xref:System.Data.DataSet.HasErrors%2A> property to determine whether a <xref:System.Data.DataSet> object contains errors. If so, the errors for each <xref:System.Data.DataRow> in each <xref:System.Data.DataTable> are printed.  \\n  \\n [!code-csharp[Classic WebData DataSet.HasErrors Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.HasErrors Example/CS/source.cs#1)]\\n [!code-vb[Classic WebData DataSet.HasErrors Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.HasErrors Example/VB/source.vb#1)]\"\n  syntax:\n    content: >-\n      [System.ComponentModel.Browsable(false)]\n\n      public bool HasErrors { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if any table contains an error;otherwise `false`.'\n  overload: System.Data.DataSet.HasErrors*\n  exceptions: []\n  attributes:\n  - type: System.ComponentModel.BrowsableAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.DataSet.InferXmlSchema(System.IO.Stream,System.String[])\n  commentId: M:System.Data.DataSet.InferXmlSchema(System.IO.Stream,System.String[])\n  id: InferXmlSchema(System.IO.Stream,System.String[])\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: InferXmlSchema(Stream, String[])\n  nameWithType: DataSet.InferXmlSchema(Stream, String[])\n  fullName: DataSet.InferXmlSchema(Stream, String[])\n  type: Method\n  assemblies:\n  - System.Data\n  - netstandard\n  - System.Data.Common\n  namespace: System.Data\n  summary: Applies the XML schema from the specified <xref href=\"System.IO.Stream\"></xref> to the <xref href=\"System.Data.DataSet\"></xref>.\n  syntax:\n    content: public void InferXmlSchema (System.IO.Stream stream, string[] nsArray);\n    parameters:\n    - id: stream\n      type: System.IO.Stream\n      description: The `Stream` from which to read the schema.\n    - id: nsArray\n      type: System.String[]\n      description: An array of namespace Uniform Resource Identifier (URI) strings to be excluded from schema inference.\n  overload: System.Data.DataSet.InferXmlSchema*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.DataSet.InferXmlSchema(System.IO.TextReader,System.String[])\n  commentId: M:System.Data.DataSet.InferXmlSchema(System.IO.TextReader,System.String[])\n  id: InferXmlSchema(System.IO.TextReader,System.String[])\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: InferXmlSchema(TextReader, String[])\n  nameWithType: DataSet.InferXmlSchema(TextReader, String[])\n  fullName: DataSet.InferXmlSchema(TextReader, String[])\n  type: Method\n  assemblies:\n  - System.Data\n  - netstandard\n  - System.Data.Common\n  namespace: System.Data\n  summary: Applies the XML schema from the specified <xref href=\"System.IO.TextReader\"></xref> to the <xref href=\"System.Data.DataSet\"></xref>.\n  syntax:\n    content: public void InferXmlSchema (System.IO.TextReader reader, string[] nsArray);\n    parameters:\n    - id: reader\n      type: System.IO.TextReader\n      description: The `TextReader` from which to read the schema.\n    - id: nsArray\n      type: System.String[]\n      description: An array of namespace Uniform Resource Identifier (URI) strings to be excluded from schema inference.\n  overload: System.Data.DataSet.InferXmlSchema*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.DataSet.InferXmlSchema(System.String,System.String[])\n  commentId: M:System.Data.DataSet.InferXmlSchema(System.String,System.String[])\n  id: InferXmlSchema(System.String,System.String[])\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: InferXmlSchema(String, String[])\n  nameWithType: DataSet.InferXmlSchema(String, String[])\n  fullName: DataSet.InferXmlSchema(String, String[])\n  type: Method\n  assemblies:\n  - System.Data\n  - netstandard\n  - System.Data.Common\n  namespace: System.Data\n  summary: Applies the XML schema from the specified file to the <xref href=\"System.Data.DataSet\"></xref>.\n  syntax:\n    content: public void InferXmlSchema (string fileName, string[] nsArray);\n    parameters:\n    - id: fileName\n      type: System.String\n      description: The name of the file (including the path) from which to read the schema.\n    - id: nsArray\n      type: System.String[]\n      description: An array of namespace Uniform Resource Identifier (URI) strings to be excluded from schema inference.\n  overload: System.Data.DataSet.InferXmlSchema*\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: <xref href=\"System.Security.Permissions.FileIOPermission\"></xref> is not set to <xref href=\"System.Security.Permissions.FileIOPermissionAccess.Read\"></xref>.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.DataSet.InferXmlSchema(System.Xml.XmlReader,System.String[])\n  commentId: M:System.Data.DataSet.InferXmlSchema(System.Xml.XmlReader,System.String[])\n  id: InferXmlSchema(System.Xml.XmlReader,System.String[])\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: InferXmlSchema(XmlReader, String[])\n  nameWithType: DataSet.InferXmlSchema(XmlReader, String[])\n  fullName: DataSet.InferXmlSchema(XmlReader, String[])\n  type: Method\n  assemblies:\n  - System.Data\n  - netstandard\n  - System.Data.Common\n  namespace: System.Data\n  summary: Applies the XML schema from the specified <xref href=\"System.Xml.XmlReader\"></xref> to the <xref href=\"System.Data.DataSet\"></xref>.\n  syntax:\n    content: public void InferXmlSchema (System.Xml.XmlReader reader, string[] nsArray);\n    parameters:\n    - id: reader\n      type: System.Xml.XmlReader\n      description: The `XMLReader` from which to read the schema.\n    - id: nsArray\n      type: System.String[]\n      description: An array of namespace Uniform Resource Identifier (URI) strings to be excluded from schema inference.\n  overload: System.Data.DataSet.InferXmlSchema*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.DataSet.Initialized\n  commentId: E:System.Data.DataSet.Initialized\n  id: Initialized\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: Initialized\n  nameWithType: DataSet.Initialized\n  fullName: DataSet.Initialized\n  type: Event\n  assemblies:\n  - System.Data\n  - netstandard\n  - System.Data.Common\n  namespace: System.Data\n  summary: Occurs after the <xref href=\"System.Data.DataSet\"></xref> is initialized.\n  remarks: For more information, see <xref:System.Data.DataSet.IsInitialized%2A>.\n  syntax:\n    content: public event EventHandler Initialized;\n    return:\n      type: System.EventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.DataSet.InitializeDerivedDataSet\n  commentId: M:System.Data.DataSet.InitializeDerivedDataSet\n  id: InitializeDerivedDataSet\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: InitializeDerivedDataSet()\n  nameWithType: DataSet.InitializeDerivedDataSet()\n  fullName: DataSet.InitializeDerivedDataSet()\n  type: Method\n  assemblies:\n  - System.Data\n  - netstandard\n  - System.Data.Common\n  namespace: System.Data\n  summary: Deserialize all of the tables data of the DataSet from the binary or XML stream.\n  syntax:\n    content: protected virtual void InitializeDerivedDataSet ();\n    parameters: []\n  overload: System.Data.DataSet.InitializeDerivedDataSet*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.DataSet.IsBinarySerialized(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  commentId: M:System.Data.DataSet.IsBinarySerialized(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  id: IsBinarySerialized(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: IsBinarySerialized(SerializationInfo, StreamingContext)\n  nameWithType: DataSet.IsBinarySerialized(SerializationInfo, StreamingContext)\n  fullName: DataSet.IsBinarySerialized(SerializationInfo, StreamingContext)\n  type: Method\n  assemblies:\n  - System.Data\n  - netstandard\n  - System.Data.Common\n  namespace: System.Data\n  summary: Inspects the format of the serialized representation of the `DataSet`.\n  remarks: This member supports the .NET Framework infrastructure and is not intended to be used directly from your code.\n  syntax:\n    content: protected bool IsBinarySerialized (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);\n    parameters:\n    - id: info\n      type: System.Runtime.Serialization.SerializationInfo\n      description: The <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> object.\n    - id: context\n      type: System.Runtime.Serialization.StreamingContext\n      description: The <xref href=\"System.Runtime.Serialization.StreamingContext\"></xref> object.\n    return:\n      type: System.Boolean\n      description: '`true` if the specified <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> represents a `DataSet` serialized in its binary format, `false` otherwise.'\n  overload: System.Data.DataSet.IsBinarySerialized*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.DataSet.IsInitialized\n  commentId: P:System.Data.DataSet.IsInitialized\n  id: IsInitialized\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: IsInitialized\n  nameWithType: DataSet.IsInitialized\n  fullName: DataSet.IsInitialized\n  type: Property\n  assemblies:\n  - System.Data\n  - netstandard\n  - System.Data.Common\n  namespace: System.Data\n  summary: Gets a value that indicates whether the <xref href=\"System.Data.DataSet\"></xref> is initialized.\n  remarks: Returns the status of the <xref:System.Data.DataSet> while it’s being constructed, for instance by Visual Studio. The <xref:System.Data.DataSet.BeginInit%2A> method sets it to `false` and <xref:System.Data.DataSet.EndInit%2A> method sets it to `true`.\n  syntax:\n    content: >-\n      [System.ComponentModel.Browsable(false)]\n\n      public bool IsInitialized { get; }\n    return:\n      type: System.Boolean\n      description: '`true` to indicate the component has completed initialization; otherwise `false`.'\n  overload: System.Data.DataSet.IsInitialized*\n  exceptions: []\n  attributes:\n  - type: System.ComponentModel.BrowsableAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.DataTable[])\n  commentId: M:System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.DataTable[])\n  id: Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.DataTable[])\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: Load(IDataReader, LoadOption, DataTable[])\n  nameWithType: DataSet.Load(IDataReader, LoadOption, DataTable[])\n  fullName: DataSet.Load(IDataReader, LoadOption, DataTable[])\n  type: Method\n  assemblies:\n  - System.Data\n  - netstandard\n  - System.Data.Common\n  namespace: System.Data\n  summary: Fills a <xref href=\"System.Data.DataSet\"></xref> with values from a data source using the supplied <xref href=\"System.Data.IDataReader\"></xref>, using an array of <xref href=\"System.Data.DataTable\"></xref> instances to supply the schema and namespace information.\n  remarks: \"The <xref:System.Data.DataTable.Load%2A> method provides a technique for filling a single <xref:System.Data.DataTable> with data, retrieved from an <xref:System.Data.IDataReader> instance. This method provides the same functionality, but allows you to load multiple result sets from an <xref:System.Data.IDataReader> into multiple tables within a <xref:System.Data.DataSet>.  \\n  \\n> [!NOTE]\\n>  The load operation will fail with an <xref:System.InvalidOperationException> if any of the source data columns in the incoming `reader` are computed columns.  \\n  \\n The `loadOption` parameter allows you to specify how you want the imported data to interact with existing data, and can be any of the values from the <xref:System.Data.LoadOption> enumeration. See the documentation for the <xref:System.Data.DataTable><xref:System.Data.DataTable.Load%2A> method for more information on using this parameter.  \\n  \\n The `tables` parameter allows you to specify an array of <xref:System.Data.DataTable> instances, indicating the order of the tables corresponding to each result set loaded from the reader. The <xref:System.Data.DataSet.Load%2A>method fills each supplied <xref:System.Data.DataTable> instance with data from a single result set from the source data reader. After each result set, the <xref:System.Data.DataSet.Load%2A>method moves on to the next result set within the reader, until there are no more result sets.  \\n  \\n The name resolution scheme for this method is the same as that followed by the <xref:System.Data.Common.DbDataAdapter.Fill%2A> method of the <xref:System.Data.Common.DbDataAdapter> class.\"\n  example:\n  - \"The following example creates a new <xref:System.Data.DataSet>, adds two <xref:System.Data.DataTable> instances to the <xref:System.Data.DataSet>, and then fills the <xref:System.Data.DataSet> using the <xref:System.Data.DataSet.Load%2A> method, retrieving data from a <xref:System.Data.DataTableReader> that contains two result sets. Finally, the example displays the contents of the tables in the console window.  \\n  \\n [!code-csharp[DataWorks DataSet.LoadTables#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataSet.LoadTables/CS/source.cs#1)]\\n [!code-vb[DataWorks DataSet.LoadTables#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataSet.LoadTables/VB/source.vb#1)]\"\n  syntax:\n    content: public void Load (System.Data.IDataReader reader, System.Data.LoadOption loadOption, System.Data.DataTable[] tables);\n    parameters:\n    - id: reader\n      type: System.Data.IDataReader\n      description: An <xref href=\"System.Data.IDataReader\"></xref> that provides one or more result sets.\n    - id: loadOption\n      type: System.Data.LoadOption\n      description: A value from the <xref href=\"System.Data.LoadOption\"></xref> enumeration that indicates how rows already in the <xref href=\"System.Data.DataTable\"></xref> instances within the <xref href=\"System.Data.DataSet\"></xref> will be combined with incoming rows that share the same primary key.\n    - id: tables\n      type: System.Data.DataTable[]\n      description: An array of <xref href=\"System.Data.DataTable\"></xref> instances, from which the <xref href=\"System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.DataTable[])\"></xref> method retrieves name and namespace information. Each of these tables must be a member of the <xref href=\"System.Data.DataTableCollection\"></xref> contained by this <xref href=\"System.Data.DataSet\"></xref>.\n  overload: System.Data.DataSet.Load*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.String[])\n  commentId: M:System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.String[])\n  id: Load(System.Data.IDataReader,System.Data.LoadOption,System.String[])\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: Load(IDataReader, LoadOption, String[])\n  nameWithType: DataSet.Load(IDataReader, LoadOption, String[])\n  fullName: DataSet.Load(IDataReader, LoadOption, String[])\n  type: Method\n  assemblies:\n  - System.Data\n  - netstandard\n  - System.Data.Common\n  namespace: System.Data\n  summary: Fills a <xref href=\"System.Data.DataSet\"></xref> with values from a data source using the supplied <xref href=\"System.Data.IDataReader\"></xref>, using an array of strings to supply the names for the tables within the `DataSet`.\n  remarks: \"The <xref:System.Data.DataTable.Load%2A> method provides a technique for filling a single <xref:System.Data.DataTable> with data, retrieved from an <xref:System.Data.IDataReader> instance. This method provides the same functionality, but allows you to load multiple result sets from an `IDataReader` into multiple tables within a `DataSet`.  \\n  \\n> [!NOTE]\\n>  The load operation will fail with an <xref:System.InvalidOperationException> if any of the source data columns in the incoming `reader` are computed columns.  \\n  \\n The `loadOption` parameter allows you to specify how you want the imported data to interact with existing data, and can be any of the values from the <xref:System.Data.LoadOption> enumeration. See the documentation for the <xref:System.Data.DataTable.Load%2A> method for more information on using this parameter.  \\n  \\n The `tables` parameter allows you to specify an array of table names, indicating the order of the tables corresponding to each result set loaded from the reader. The `Load` method attempts to find a table within the `DataSet` matching the name found in the array of table names, in order. If a matching table is found, that table is loaded with the content of the current result set. If no matching table is found, a table is created using the name supplied in the array of table names, and the new table's schema is inferred from the result set. After each result set, the `Load` method moves on to the next result set within the reader, until there are no more result sets.  \\n  \\n The default namespace associated with `DataSet`, if any, is associated with each newly created `DataTable`. The name resolution scheme for this method is the same as that followed by the <xref:System.Data.Common.DbDataAdapter.Fill%2A> method of the <xref:System.Data.Common.DbDataAdapter> class.\"\n  example:\n  - \"The following Console application example first creates tables and loads data from a reader into a <xref:System.Data.DataSet>, using the `Load` method. The example then adds tables to a <xref:System.Data.DataSet> and attempts to fill the tables with data from a <xref:System.Data.DataTableReader>. In this example, because the parameters passed to the `Load` method indicate a table name that does not exist, the `Load` method creates a new table to match the name passed as a parameter. Once the data has been loaded, the example displays the contents of all its tables in the Console window.  \\n  \\n [!code-csharp[DataWorks DataSet.LoadString#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataSet.LoadString/CS/source.cs#1)]\\n [!code-vb[DataWorks DataSet.LoadString#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataSet.LoadString/VB/source.vb#1)]\"\n  syntax:\n    content: public void Load (System.Data.IDataReader reader, System.Data.LoadOption loadOption, string[] tables);\n    parameters:\n    - id: reader\n      type: System.Data.IDataReader\n      description: An <xref href=\"System.Data.IDataReader\"></xref> that provides one or more result sets.\n    - id: loadOption\n      type: System.Data.LoadOption\n      description: A value from the <xref href=\"System.Data.LoadOption\"></xref> enumeration that indicates how rows already in the <xref href=\"System.Data.DataTable\"></xref> instances within the `DataSet` will be combined with incoming rows that share the same primary key.\n    - id: tables\n      type: System.String[]\n      description: An array of strings, from which the `Load` method retrieves table name information.\n  overload: System.Data.DataSet.Load*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler,System.Data.DataTable[])\n  commentId: M:System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler,System.Data.DataTable[])\n  id: Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler,System.Data.DataTable[])\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: Load(IDataReader, LoadOption, FillErrorEventHandler, DataTable[])\n  nameWithType: DataSet.Load(IDataReader, LoadOption, FillErrorEventHandler, DataTable[])\n  fullName: DataSet.Load(IDataReader, LoadOption, FillErrorEventHandler, DataTable[])\n  type: Method\n  assemblies:\n  - System.Data\n  - netstandard\n  - System.Data.Common\n  namespace: System.Data\n  summary: Fills a <xref href=\"System.Data.DataSet\"></xref> with values from a data source using the supplied <xref href=\"System.Data.IDataReader\"></xref>, using an array of <xref href=\"System.Data.DataTable\"></xref> instances to supply the schema and namespace information.\n  remarks: \"The <xref:System.Data.DataTable.Load%2A> method provides a technique for filling a single <xref:System.Data.DataTable> with data, retrieved from an <xref:System.Data.IDataReader> instance. This method provides the same functionality, but allows you to load multiple result sets from an <xref:System.Data.IDataReader> into multiple tables within a <xref:System.Data.DataSet>.  \\n  \\n> [!NOTE]\\n>  The load operation will fail with an <xref:System.InvalidOperationException> if any of the source data columns in the incoming `reader` are computed columns.  \\n  \\n The `loadOption` parameter allows you to specify how you want the imported data to interact with existing data, and can be any of the values from the <xref:System.Data.LoadOption> enumeration. See the documentation for the <xref:System.Data.DataTable><xref:System.Data.DataTable.Load%2A> method for more information on using this parameter.  \\n  \\n The `errorHandler` parameter is a <xref:System.Data.FillErrorEventHandler> delegate that refers to a procedure that is called when an error occurs while loading data. The <xref:System.Data.FillErrorEventArgs> parameter passed to the procedure provides properties that allow you to retrieve information about the error that occurred, the current row of data, and the <xref:System.Data.DataTable> being filled. Using this delegate mechanism, rather than a simpler try/catch block, allows you to determine the error, handle the situation, and continue processing if you like. The <xref:System.Data.FillErrorEventArgs> parameter supplies a <xref:System.Data.FillErrorEventArgs.Continue%2A> property: set this property to `true` to indicate that you have handled the error and wish to continue processing; set the property to `false` to indicate that you wish to halt processing. Be aware that setting the property to `false` causes the code that triggered the problem to throw an exception.  \\n  \\n The `tables` parameter allows you to specify an array of <xref:System.Data.DataTable> instances, indicating the order of the tables corresponding to each result set loaded from the reader. The <xref:System.Data.DataSet.Load%2A>method fills each supplied <xref:System.Data.DataTable> instance with data from a single result set from the source data reader. After each result set, the <xref:System.Data.DataSet.Load%2A>method moves on to the next result set within the reader, until there are no more result sets.  \\n  \\n The name resolution scheme for this method is the same as that followed by the <xref:System.Data.Common.DbDataAdapter.Fill%2A> method of the <xref:System.Data.Common.DbDataAdapter> class.\"\n  example:\n  - \"The following example adds a table to a <xref:System.Data.DataSet>, and then attempts to use the <xref:System.Data.DataSet.Load%2A> method to load data from a <xref:System.Data.DataTableReader> that contains an incompatible schema. Rather than trapping the error, this example uses a <xref:System.Data.FillErrorEventHandler> delegate to investigate and handle the error. The output is displayed in the console window.  \\n  \\n [!code-csharp[DataWorks DataSet.Load#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataSet.Load/CS/source.cs#1)]\\n [!code-vb[DataWorks DataSet.Load#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataSet.Load/VB/source.vb#1)]\"\n  syntax:\n    content: public virtual void Load (System.Data.IDataReader reader, System.Data.LoadOption loadOption, System.Data.FillErrorEventHandler errorHandler, System.Data.DataTable[] tables);\n    parameters:\n    - id: reader\n      type: System.Data.IDataReader\n      description: An <xref href=\"System.Data.IDataReader\"></xref> that provides one or more result sets.\n    - id: loadOption\n      type: System.Data.LoadOption\n      description: A value from the <xref href=\"System.Data.LoadOption\"></xref> enumeration that indicates how rows already in the <xref href=\"System.Data.DataTable\"></xref> instances within the <xref href=\"System.Data.DataSet\"></xref> will be combined with incoming rows that share the same primary key.\n    - id: errorHandler\n      type: System.Data.FillErrorEventHandler\n      description: A <xref href=\"System.Data.FillErrorEventHandler\"></xref> delegate to call when an error occurs while loading data.\n    - id: tables\n      type: System.Data.DataTable[]\n      description: An array of <xref href=\"System.Data.DataTable\"></xref> instances, from which the <xref href=\"System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler,System.Data.DataTable[])\"></xref> method retrieves name and namespace information.\n  overload: System.Data.DataSet.Load*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.DataSet.Locale\n  commentId: P:System.Data.DataSet.Locale\n  id: Locale\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: Locale\n  nameWithType: DataSet.Locale\n  fullName: DataSet.Locale\n  type: Property\n  assemblies:\n  - System.Data\n  - netstandard\n  - System.Data.Common\n  namespace: System.Data\n  summary: Gets or sets the locale information used to compare strings within the table.\n  remarks: \"The <xref:System.Data.DataSet.Locale%2A> property specifies the locale for which sorting applies.  \\n  \\n By default, setting the <xref:System.Data.DataSet.Locale%2A> for a <xref:System.Data.DataSet> also sets the <xref:System.Data.DataSet.Locale%2A> for each <xref:System.Data.DataTable> object in that `DataSet` to the same value.  \\n  \\n> [!NOTE]\\n>  In columns that contain expressions, the <xref:System.StringComparison.InvariantCulture> is used. The <xref:System.StringComparison.CurrentCulture> is ignored.\"\n  example:\n  - \"The following example gets the <xref:System.Globalization.CultureInfo> for a <xref:System.Data.DataSet> and prints the <xref:System.Globalization.CultureInfo.DisplayName%2A> and <xref:System.Globalization.CultureInfo.EnglishName%2A> properties.  \\n  \\n [!code-vb[Classic WebData DataSet.Locale Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.Locale Example/VB/source.vb#1)]\"\n  syntax:\n    content: public System.Globalization.CultureInfo Locale { get; set; }\n    return:\n      type: System.Globalization.CultureInfo\n      description: A <xref href=\"System.Globalization.CultureInfo\"></xref> that contains data about the user's machine locale. The default is `null`.\n  overload: System.Data.DataSet.Locale*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.DataSet.Merge(System.Data.DataRow[])\n  commentId: M:System.Data.DataSet.Merge(System.Data.DataRow[])\n  id: Merge(System.Data.DataRow[])\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: Merge(DataRow[])\n  nameWithType: DataSet.Merge(DataRow[])\n  fullName: DataSet.Merge(DataRow[])\n  type: Method\n  assemblies:\n  - System.Data\n  - netstandard\n  - System.Data.Common\n  namespace: System.Data\n  summary: Merges an array of <xref href=\"System.Data.DataRow\"></xref> objects into the current <xref href=\"System.Data.DataSet\"></xref>.\n  remarks: \"The <xref:System.Data.DataSet.Merge%2A> method is used to merge two <xref:System.Data.DataSet> objects that have largely similar schemas. A merge is typically used on a client application to incorporate the latest changes from a data source into an existing <xref:System.Data.DataSet>. This allows the client application to have a refreshed <xref:System.Data.DataSet> with the latest data from the data source.  \\n  \\n The <xref:System.Data.DataSet.Merge%2A> method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing <xref:System.Data.DataSet>.  \\n  \\n In a client application, it is common to have a single button that the user can click that gathers the changed data and validates it before sending it back to a middle-tier component. In this scenario, the <xref:System.Data.DataSet.GetChanges%2A> method is first invoked. That method returns a second <xref:System.Data.DataSet> optimized for validating and merging. This second <xref:System.Data.DataSet> object contains only the <xref:System.Data.DataTable> and <xref:System.Data.DataRow> objects that were changed, resulting in a subset of the original <xref:System.Data.DataSet>. This subset is generally smaller and thus more efficiently passed back to a middle-tier component. The middle-tier component then updates the original data source with the changes through stored procedures. The middle tier can then send back either a new <xref:System.Data.DataSet> that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source. (For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned <xref:System.Data.DataSet> can be merged back into the client application's original <xref:System.Data.DataSet> with the <xref:System.Data.DataSet.Merge%2A> method.  \\n  \\n When the <xref:System.Data.DataSet.Merge%2A> method is called, the schemas of the two <xref:System.Data.DataSet> objects are compared because it is possible that the schemas may have been changed. For example, in a business-to-business scenario, new columns may have been added to an XML schema by an automated process. If the source <xref:System.Data.DataSet> contains schema elements (added <xref:System.Data.DataColumn> objects) that are missing in the target, the schema elements can be added to the target by setting the `missingSchemaAction` argument to `MissingSchemaAction.Add`. In that case, the merged <xref:System.Data.DataSet> contains the added schema and data.  \\n  \\n After merging schemas, the data is merged.  \\n  \\n When merging a new source <xref:System.Data.DataSet> into the target, any source rows with a <xref:System.Data.DataRowState> value of `Unchanged`, `Modified`, or `Deleted` are matched to target rows with the same primary key values. Source rows with a <xref:System.Data.DataRowState> value of `Added` are matched to new target rows with the same primary key values as the new source rows.  \\n  \\n During a merge, constraints are disabled. If any constraints cannot be enabled at the end of a merge, a <xref:System.Data.ConstraintException> is generated and the merged data is retained while the constraints are disabled. In this case, the <xref:System.Data.DataSet.EnforceConstraints%2A> property is set to `false`, and all rows that are invalid are marked in error. The errors must be resolved before attempting to reset the <xref:System.Data.DataSet.EnforceConstraints%2A> property to `true`.\"\n  syntax:\n    content: public void Merge (System.Data.DataRow[] rows);\n    parameters:\n    - id: rows\n      type: System.Data.DataRow[]\n      description: The array of `DataRow` objects to be merged into the `DataSet`.\n  overload: System.Data.DataSet.Merge*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.DataSet.Merge(System.Data.DataSet)\n  commentId: M:System.Data.DataSet.Merge(System.Data.DataSet)\n  id: Merge(System.Data.DataSet)\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: Merge(DataSet)\n  nameWithType: DataSet.Merge(DataSet)\n  fullName: DataSet.Merge(DataSet)\n  type: Method\n  assemblies:\n  - System.Data\n  - netstandard\n  - System.Data.Common\n  namespace: System.Data\n  summary: Merges a specified <xref href=\"System.Data.DataSet\"></xref> and its schema into the current `DataSet`.\n  remarks: \"The <xref:System.Data.DataSet.Merge%2A> method is used to merge two <xref:System.Data.DataSet> objects that have largely similar schemas. A merge is typically used on a client application to incorporate the latest changes from a data source into an existing <xref:System.Data.DataSet>. This allows the client application to have a refreshed <xref:System.Data.DataSet> with the latest data from the data source.  \\n  \\n The <xref:System.Data.DataSet.Merge%2A> method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing <xref:System.Data.DataSet>.  \\n  \\n In a client application, it is common to have a single button that the user can click that gathers the changed data and validates it before sending it back to a middle-tier component. In this scenario, the <xref:System.Data.DataSet.GetChanges%2A> method is first invoked. That method returns a second <xref:System.Data.DataSet> optimized for validating and merging. This second <xref:System.Data.DataSet> object contains only the <xref:System.Data.DataTable> and <xref:System.Data.DataRow> objects that were changed, resulting in a subset of the original <xref:System.Data.DataSet>. This subset is generally smaller, and thus more efficiently passed back to a middle-tier component. The middle-tier component then updates the original data source with the changes through stored procedures. The middle tier can then send back either a new <xref:System.Data.DataSet> that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source. (For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned <xref:System.Data.DataSet> can be merged back into the client application's original <xref:System.Data.DataSet> with the <xref:System.Data.DataSet.Merge%2A> method.  \\n  \\n When the <xref:System.Data.DataSet.Merge%2A> method is called, the schemas of the two <xref:System.Data.DataSet> objects are compared because it is possible that the schemas may have been changed. For example, in a business-to-business scenario, new columns may have been added to an XML schema by an automated process. If the source <xref:System.Data.DataSet> contains schema elements (added <xref:System.Data.DataColumn> objects) that are missing in the target, the schema elements can be added to the target by setting the `missingSchemaAction` argument to `MissingSchemaAction.Add`. In that case, the merged <xref:System.Data.DataSet> contains the added schema and data.  \\n  \\n After merging schemas, the data is merged.  \\n  \\n When merging a new source <xref:System.Data.DataSet> into the target, any source rows with a <xref:System.Data.DataRowState> value of `Unchanged`, `Modified`, or `Deleted` are matched to target rows with the same primary key values. Source rows with a `DataRowState` value of `Added` are matched to new target rows with the same primary key values as the new source rows.  \\n  \\n During a merge, constraints are disabled. If any constraints cannot be enabled at the end of merge, a <xref:System.Data.ConstraintException> is generated and the merged data is retained while the constraints are disabled. In this case, the <xref:System.Data.DataSet.EnforceConstraints%2A> property is set to `false`, and all rows that are invalid are marked in error. The errors must be resolved before attempting to reset the <xref:System.Data.DataSet.EnforceConstraints%2A> property to `true`.\"\n  example:\n  - \"The following example uses the <xref:System.Data.DataSet.GetChanges%2A>, Update, and <xref:System.Data.DataSet.Merge%2A> methods on a <xref:System.Data.DataSet>.  \\n  \\n [!code-csharp[Classic WebData DataSet.Merge Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.Merge Example/CS/source.cs#1)]\\n [!code-vb[Classic WebData DataSet.Merge Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.Merge Example/VB/source.vb#1)]\"\n  syntax:\n    content: public void Merge (System.Data.DataSet dataSet);\n    parameters:\n    - id: dataSet\n      type: System.Data.DataSet\n      description: The `DataSet` whose data and schema will be merged.\n  overload: System.Data.DataSet.Merge*\n  exceptions:\n  - type: System.Data.ConstraintException\n    commentId: T:System.Data.ConstraintException\n    description: One or more constraints cannot be enabled.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>dataSet</code> is `null`.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.DataSet.Merge(System.Data.DataTable)\n  commentId: M:System.Data.DataSet.Merge(System.Data.DataTable)\n  id: Merge(System.Data.DataTable)\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: Merge(DataTable)\n  nameWithType: DataSet.Merge(DataTable)\n  fullName: DataSet.Merge(DataTable)\n  type: Method\n  assemblies:\n  - System.Data\n  - netstandard\n  - System.Data.Common\n  namespace: System.Data\n  summary: Merges a specified <xref href=\"System.Data.DataTable\"></xref> and its schema into the current <xref href=\"System.Data.DataSet\"></xref>.\n  remarks: \"The <xref:System.Data.DataSet.Merge%2A> method is used to merge two <xref:System.Data.DataSet> objects that have largely similar schemas. A merge is typically used on a client application to incorporate the latest changes from a data source into an existing <xref:System.Data.DataSet>. This allows the client application to have a refreshed <xref:System.Data.DataSet> with the latest data from the data source.  \\n  \\n The <xref:System.Data.DataSet.Merge%2A> method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing <xref:System.Data.DataSet>.  \\n  \\n In a client application, it is common to have a single button that the user can click that gathers the changed data and validates it before sending it back to a middle-tier component. In this scenario, the <xref:System.Data.DataSet.GetChanges%2A> method is first invoked. That method returns a second <xref:System.Data.DataSet> optimized for validating and merging. This second <xref:System.Data.DataSet> object contains only the <xref:System.Data.DataTable> and <xref:System.Data.DataRow> objects that were changed, resulting in a subset of the original <xref:System.Data.DataSet>. This subset is generally smaller, and thus more efficiently passed back to a middle-tier component. The middle-tier component then updates the original data source with the changes through stored procedures. The middle tier can then send back either a new <xref:System.Data.DataSet> that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source. (For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned <xref:System.Data.DataSet> can be merged back into the client application's original <xref:System.Data.DataSet> with the <xref:System.Data.DataSet.Merge%2A> method.  \\n  \\n When the <xref:System.Data.DataSet.Merge%2A> method is called, the schemas of the two <xref:System.Data.DataSet> objects are compared because it is possible that the schemas may have been changed. For example, in a business-to-business scenario, new columns may have been added to an XML schema by an automated process. If the source <xref:System.Data.DataSet> contains schema elements (added <xref:System.Data.DataColumn> objects) that are missing in the target, the schema elements can be added to the target by setting the `missingSchemaAction` argument to `MissingSchemaAction.Add`. In that case, the merged <xref:System.Data.DataSet> contains the added schema and data.  \\n  \\n After merging schemas, the data is merged.  \\n  \\n When merging a new source <xref:System.Data.DataSet> into the target, any source rows with a <xref:System.Data.DataRowState> value of `Unchanged`, `Modified`, or `Deleted` are matched to target rows with the same primary key values. Source rows with a `DataRowState` value of `Added` are matched to new target rows with the same primary key values as the new source rows.  \\n  \\n During a merge, constraints are disabled. If any constraints cannot be enabled at the end of merge, a <xref:System.Data.ConstraintException> is generated and the merged data is retained while the constraints are disabled. In this case, the <xref:System.Data.DataSet.EnforceConstraints%2A> property is set to `false`, and all rows that are invalid are marked in error. The errors must be resolved before attempting to reset the <xref:System.Data.DataSet.EnforceConstraints%2A> property to `true`.\"\n  example:\n  - \"The following example creates a simple <xref:System.Data.DataSet> with one table, two columns, and ten rows. A second <xref:System.Data.DataTable> is created that is identical to the first. Two rows are added to the second table, which is then merged into the <xref:System.Data.DataSet>.  \\n  \\n [!code-csharp[Classic WebData DataSet.Merge3 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.Merge3 Example/CS/source.cs#1)]\\n [!code-vb[Classic WebData DataSet.Merge3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.Merge3 Example/VB/source.vb#1)]\"\n  syntax:\n    content: public void Merge (System.Data.DataTable table);\n    parameters:\n    - id: table\n      type: System.Data.DataTable\n      description: The <xref href=\"System.Data.DataTable\"></xref> whose data and schema will be merged.\n  overload: System.Data.DataSet.Merge*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>table</code> is `null`.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.DataSet.Merge(System.Data.DataSet,System.Boolean)\n  commentId: M:System.Data.DataSet.Merge(System.Data.DataSet,System.Boolean)\n  id: Merge(System.Data.DataSet,System.Boolean)\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: Merge(DataSet, Boolean)\n  nameWithType: DataSet.Merge(DataSet, Boolean)\n  fullName: DataSet.Merge(DataSet, Boolean)\n  type: Method\n  assemblies:\n  - System.Data\n  - netstandard\n  - System.Data.Common\n  namespace: System.Data\n  summary: Merges a specified <xref href=\"System.Data.DataSet\"></xref> and its schema into the current `DataSet`, preserving or discarding any changes in this `DataSet` according to the given argument.\n  remarks: \"The <xref:System.Data.DataSet.Merge%2A> method is used to merge two <xref:System.Data.DataSet> objects that have largely similar schemas. A merge is typically used on a client application to incorporate the latest changes from a data source into an existing <xref:System.Data.DataSet>. This allows the client application to have a refreshed <xref:System.Data.DataSet> with the latest data from the data source.  \\n  \\n The <xref:System.Data.DataSet.Merge%2A> method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing <xref:System.Data.DataSet>.  \\n  \\n In a client application, it is common to have a single button that the user can click that gathers the changed data and validates it before sending it back to a middle-tier component. In this scenario, the <xref:System.Data.DataSet.GetChanges%2A> method is first invoked. That method returns a second <xref:System.Data.DataSet> optimized for validating and merging. This second <xref:System.Data.DataSet> object contains only the <xref:System.Data.DataTable> and <xref:System.Data.DataRow> objects that were changed, resulting in a subset of the original <xref:System.Data.DataSet>. This subset is generally smaller, and thus more efficiently passed back to a middle-tier component. The middle-tier component then updates the original data source with the changes through stored procedures. The middle tier can then send back either a new <xref:System.Data.DataSet> that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source. (For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned <xref:System.Data.DataSet> can be merged back into the client application's original <xref:System.Data.DataSet> with the <xref:System.Data.DataSet.Merge%2A> method.  \\n  \\n When the <xref:System.Data.DataSet.Merge%2A> method is called, the schemas of the two <xref:System.Data.DataSet> objects are compared because it is possible that the schemas may have been changed. For example, in a business-to-business scenario, new columns may have been added to an XML schema by an automated process. If the source <xref:System.Data.DataSet> contains schema elements (added <xref:System.Data.DataColumn> objects) that are missing in the target, the schema elements can be added to the target by setting the `missingSchemaAction` argument to `MissingSchemaAction.Add`. In that case, the merged <xref:System.Data.DataSet> contains the added schema and data.  \\n  \\n After merging schemas, the data is merged.  \\n  \\n When merging a new source <xref:System.Data.DataSet> into the target, any source rows with a <xref:System.Data.DataRowState> value of `Unchanged`, `Modified`, or `Deleted` are matched to target rows with the same primary key values. Source rows with a `DataRowState` value of `Added` are matched to new target rows with the same primary key values as the new source rows.  \\n  \\n During a merge, constraints are disabled. If any constraints cannot be enabled at the end of merge, a <xref:System.Data.ConstraintException> is generated and the merged data is retained while the constraints are disabled. In this case, the <xref:System.Data.DataSet.EnforceConstraints%2A> property is set to `false`, and all rows that are invalid are marked in error. The errors must be resolved before attempting to reset the <xref:System.Data.DataSet.EnforceConstraints%2A> property to `true`.\"\n  example:\n  - \"The following example creates a simple <xref:System.Data.DataSet> with one table, two columns, and ten rows. After adding ten rows, two values are changed, and one row is added. A subset of the changed data is created using the <xref:System.Data.DataSet.GetChanges%2A> method. After reconciling errors, the subset data is merged into the original <xref:System.Data.DataSet>.  \\n  \\n [!code-csharp[Classic WebData DataSet.GetChanges Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.GetChanges Example/CS/source.cs#1)]\\n [!code-vb[Classic WebData DataSet.GetChanges Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.GetChanges Example/VB/source.vb#1)]\"\n  syntax:\n    content: public void Merge (System.Data.DataSet dataSet, bool preserveChanges);\n    parameters:\n    - id: dataSet\n      type: System.Data.DataSet\n      description: The `DataSet` whose data and schema will be merged.\n    - id: preserveChanges\n      type: System.Boolean\n      description: '`true` to preserve changes in the current `DataSet`; otherwise `false`.'\n  overload: System.Data.DataSet.Merge*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.DataSet.Merge(System.Data.DataRow[],System.Boolean,System.Data.MissingSchemaAction)\n  commentId: M:System.Data.DataSet.Merge(System.Data.DataRow[],System.Boolean,System.Data.MissingSchemaAction)\n  id: Merge(System.Data.DataRow[],System.Boolean,System.Data.MissingSchemaAction)\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: Merge(DataRow[], Boolean, MissingSchemaAction)\n  nameWithType: DataSet.Merge(DataRow[], Boolean, MissingSchemaAction)\n  fullName: DataSet.Merge(DataRow[], Boolean, MissingSchemaAction)\n  type: Method\n  assemblies:\n  - System.Data\n  - netstandard\n  - System.Data.Common\n  namespace: System.Data\n  summary: Merges an array of <xref href=\"System.Data.DataRow\"></xref> objects into the current <xref href=\"System.Data.DataSet\"></xref>, preserving or discarding changes in the `DataSet` and handling an incompatible schema according to the given arguments.\n  remarks: \"The <xref:System.Data.DataSet.Merge%2A> method is used to merge two <xref:System.Data.DataSet> objects that have largely similar schemas. A merge is typically used on a client application to incorporate the latest changes from a data source into an existing <xref:System.Data.DataSet>. This allows the client application to have a refreshed <xref:System.Data.DataSet> with the latest data from the data source.  \\n  \\n The <xref:System.Data.DataSet.Merge%2A> method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing <xref:System.Data.DataSet>.  \\n  \\n In a client application, it is common to have a single button that the user can click that gathers the changed data and validates it before sending it back to a middle-tier component. In this scenario, the <xref:System.Data.DataSet.GetChanges%2A> method is first invoked. That method returns a second <xref:System.Data.DataSet> optimized for validating and merging. This second <xref:System.Data.DataSet> object contains only the <xref:System.Data.DataTable> and <xref:System.Data.DataRow> objects that were changed, resulting in a subset of the original <xref:System.Data.DataSet>. This subset is generally smaller, and thus more efficiently passed back to a middle-tier component. The middle-tier component then updates the original data source with the changes through stored procedures. The middle tier can then send back either a new <xref:System.Data.DataSet> that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source. (For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned <xref:System.Data.DataSet> can be merged back into the client application's original <xref:System.Data.DataSet> with the <xref:System.Data.DataSet.Merge%2A> method.  \\n  \\n To facilitate explanation of the <xref:System.Data.DataSet.Merge%2A> method, we use \\\"target\\\" to signify the current <xref:System.Data.DataSet>, and \\\"source\\\" to name the second (parameter) <xref:System.Data.DataSet>. The target <xref:System.Data.DataSet> is so named because it is the object upon which an action (the merge) occurs. The second <xref:System.Data.DataSet> is called a \\\"source\\\" because the information it contains does not change, but instead is merged into the current <xref:System.Data.DataSet>.  \\n  \\n When the <xref:System.Data.DataSet.Merge%2A> method is called, the schemas of the two <xref:System.Data.DataSet> objects are compared because it is possible that the schemas may have been changed. For example, in a business-to-business scenario, new columns may have been added to an XML schema by an automated process. If the source <xref:System.Data.DataSet> contains schema elements (added <xref:System.Data.DataColumn> objects) that are missing in the target, the schema elements can be added to the target by setting the `missingSchemaAction` argument to `MissingSchemaAction.Add`. In that case, the merged <xref:System.Data.DataSet> contains the added schema and data.  \\n  \\n After merging schemas, the data is merged.  \\n  \\n When merging a new source <xref:System.Data.DataSet> into the target, any source rows with a <xref:System.Data.DataRowState> value of `Unchanged`, `Modified`, or `Deleted` are matched to target rows with the same primary key values. Source rows with a `DataRowState` value of `Added` are matched to new target rows with the same primary key values as the new source rows.  \\n  \\n During a merge, constraints are disabled. If any constraints cannot be enabled at the end of merge, a <xref:System.Data.ConstraintException> is generated and the merged data is retained while the constraints are disabled. In this case, the <xref:System.Data.DataSet.EnforceConstraints%2A> property is set to `false`, and all rows that are invalid are marked in error. The errors must be resolved before attempting to reset the <xref:System.Data.DataSet.EnforceConstraints%2A> property to `true`.\"\n  syntax:\n    content: public void Merge (System.Data.DataRow[] rows, bool preserveChanges, System.Data.MissingSchemaAction missingSchemaAction);\n    parameters:\n    - id: rows\n      type: System.Data.DataRow[]\n      description: The array of <xref href=\"System.Data.DataRow\"></xref> objects to be merged into the `DataSet`.\n    - id: preserveChanges\n      type: System.Boolean\n      description: '`true` to preserve changes in the `DataSet`; otherwise `false`.'\n    - id: missingSchemaAction\n      type: System.Data.MissingSchemaAction\n      description: One of the <xref href=\"System.Data.MissingSchemaAction\"></xref> values.\n  overload: System.Data.DataSet.Merge*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.DataSet.Merge(System.Data.DataSet,System.Boolean,System.Data.MissingSchemaAction)\n  commentId: M:System.Data.DataSet.Merge(System.Data.DataSet,System.Boolean,System.Data.MissingSchemaAction)\n  id: Merge(System.Data.DataSet,System.Boolean,System.Data.MissingSchemaAction)\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: Merge(DataSet, Boolean, MissingSchemaAction)\n  nameWithType: DataSet.Merge(DataSet, Boolean, MissingSchemaAction)\n  fullName: DataSet.Merge(DataSet, Boolean, MissingSchemaAction)\n  type: Method\n  assemblies:\n  - System.Data\n  - netstandard\n  - System.Data.Common\n  namespace: System.Data\n  summary: Merges a specified <xref href=\"System.Data.DataSet\"></xref> and its schema with the current `DataSet`, preserving or discarding changes in the current `DataSet` and handling an incompatible schema according to the given arguments.\n  remarks: \"The <xref:System.Data.DataSet.Merge%2A> method is used to merge two <xref:System.Data.DataSet> objects that have largely similar schemas. A merge is typically used on a client application to incorporate the latest changes from a data source into an existing <xref:System.Data.DataSet>. This allows the client application to have a refreshed <xref:System.Data.DataSet> with the latest data from the data source.  \\n  \\n The <xref:System.Data.DataSet.Merge%2A> method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing <xref:System.Data.DataSet>.  \\n  \\n In a client application, it is common to have a single button that the user can click that gathers the changed data and validates it before sending it back to a middle-tier component. In this scenario, the <xref:System.Data.DataSet.GetChanges%2A> method is first invoked. That method returns a second <xref:System.Data.DataSet> optimized for validating and merging. This second <xref:System.Data.DataSet> object contains only the <xref:System.Data.DataTable> and <xref:System.Data.DataRow> objects that were changed, resulting in a subset of the original <xref:System.Data.DataSet>. This subset is generally smaller, and thus more efficiently passed back to a middle-tier component. The middle-tier component then updates the original data source with the changes through stored procedures. The middle tier can then send back either a new <xref:System.Data.DataSet> that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source. (For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned <xref:System.Data.DataSet> can be merged back into the client application's original <xref:System.Data.DataSet> with the <xref:System.Data.DataSet.Merge%2A> method.  \\n  \\n To facilitate explanation of the <xref:System.Data.DataSet.Merge%2A> method, we use \\\"target\\\" to signify the current <xref:System.Data.DataSet>, and \\\"source\\\" to name the second (parameter) <xref:System.Data.DataSet>. The target <xref:System.Data.DataSet> is so named because it is the object upon which an action (the merge) occurs. The second <xref:System.Data.DataSet> is called a \\\"source\\\" because the information it contains does not change, but instead is merged into the current <xref:System.Data.DataSet>.  \\n  \\n When the <xref:System.Data.DataSet.Merge%2A> method is called, the schemas of the two <xref:System.Data.DataSet> objects are compared because it is possible that the schemas may have been changed. For example, in a business-to-business scenario, new columns may have been added to an XML schema by an automated process. If the source <xref:System.Data.DataSet> contains schema elements (added <xref:System.Data.DataColumn> objects) that are missing in the target, the schema elements can be added to the target by setting the `missingSchemaAction` argument to `MissingSchemaAction.Add`. In that case, the merged <xref:System.Data.DataSet> contains the added schema and data.  \\n  \\n After merging schemas, the data is merged.  \\n  \\n When merging a new source <xref:System.Data.DataSet> into the target, any source rows with a <xref:System.Data.DataRowState> value of `Unchanged`, `Modified`, or `Deleted` are matched to target rows with the same primary key values. Source rows with a `DataRowState` value of `Added` are matched to new target rows with the same primary key values as the new source rows.  \\n  \\n During a merge, constraints are disabled. If any constraints cannot be enabled at the end of merge, a <xref:System.Data.ConstraintException> is generated and the merged data is retained while the constraints are disabled. In this case, the <xref:System.Data.DataSet.EnforceConstraints%2A> property is set to `false`, and all rows that are invalid are marked in error. The errors must be resolved before attempting to reset the <xref:System.Data.DataSet.EnforceConstraints%2A> property to `true`.\"\n  example:\n  - \"The following example creates a simple <xref:System.Data.DataSet> with one table, two columns, and ten rows. Two values are changed, and one row is added. A subset of the changed data is created using the <xref:System.Data.DataSet.GetChanges%2A> method. After reconciling errors, a new column is added to the subset, changing the schema. When the <xref:System.Data.DataSet.Merge%2A> method is called with the `missingSchemaAction` set to `MissingSchemaAction.Add`, the new column is added to the original <xref:System.Data.DataSet> object's schema.  \\n  \\n [!code-csharp[Classic WebData DataSet.Merge2 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.Merge2 Example/CS/source.cs#1)]\\n [!code-vb[Classic WebData DataSet.Merge2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.Merge2 Example/VB/source.vb#1)]\"\n  syntax:\n    content: public void Merge (System.Data.DataSet dataSet, bool preserveChanges, System.Data.MissingSchemaAction missingSchemaAction);\n    parameters:\n    - id: dataSet\n      type: System.Data.DataSet\n      description: The `DataSet` whose data and schema will be merged.\n    - id: preserveChanges\n      type: System.Boolean\n      description: '`true` to preserve changes in the current `DataSet`; otherwise `false`.'\n    - id: missingSchemaAction\n      type: System.Data.MissingSchemaAction\n      description: One of the <xref href=\"System.Data.MissingSchemaAction\"></xref> values.\n  overload: System.Data.DataSet.Merge*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>dataSet</code> is `null`.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.DataSet.Merge(System.Data.DataTable,System.Boolean,System.Data.MissingSchemaAction)\n  commentId: M:System.Data.DataSet.Merge(System.Data.DataTable,System.Boolean,System.Data.MissingSchemaAction)\n  id: Merge(System.Data.DataTable,System.Boolean,System.Data.MissingSchemaAction)\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: Merge(DataTable, Boolean, MissingSchemaAction)\n  nameWithType: DataSet.Merge(DataTable, Boolean, MissingSchemaAction)\n  fullName: DataSet.Merge(DataTable, Boolean, MissingSchemaAction)\n  type: Method\n  assemblies:\n  - System.Data\n  - netstandard\n  - System.Data.Common\n  namespace: System.Data\n  summary: Merges a specified <xref href=\"System.Data.DataTable\"></xref> and its schema into the current `DataSet`, preserving or discarding changes in the `DataSet` and handling an incompatible schema according to the given arguments.\n  remarks: \"The <xref:System.Data.DataSet.Merge%2A> method is used to merge two <xref:System.Data.DataSet> objects that have largely similar schemas. A merge is typically used on a client application to incorporate the latest changes from a data source into an existing <xref:System.Data.DataSet>. This allows the client application to have a refreshed <xref:System.Data.DataSet> with the latest data from the data source.  \\n  \\n The <xref:System.Data.DataSet.Merge%2A> method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing <xref:System.Data.DataSet>.  \\n  \\n iOn a client application, it is common to have a single button that the user can click that gathers the changed data and validates it before sending it back to a middle-tier component. In this scenario, the <xref:System.Data.DataSet.GetChanges%2A> method is first invoked. That method returns a second <xref:System.Data.DataSet> optimized for validating and merging. This second <xref:System.Data.DataSet> object contains only the <xref:System.Data.DataTable> and <xref:System.Data.DataRow> objects that were changed, resulting in a subset of the original <xref:System.Data.DataSet>. This subset is generally smaller, and thus more efficiently passed back to a middle-tier component. The middle-tier component then updates the original data source with the changes through stored procedures. The middle tier can then send back either a new <xref:System.Data.DataSet> that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source. (For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned <xref:System.Data.DataSet> can be merged back into the client application's original <xref:System.Data.DataSet> with the <xref:System.Data.DataSet.Merge%2A> method.  \\n  \\n When the <xref:System.Data.DataSet.Merge%2A> method is called, the schemas of the two <xref:System.Data.DataSet> objects are compared because it is possible that the schemas may have been changed. For example, in a business-to-business scenario, new columns may have been added to an XML schema by an automated process. If the source <xref:System.Data.DataSet> contains schema elements (added <xref:System.Data.DataColumn> objects) that are missing in the target, the schema elements can be added to the target by setting the `missingSchemaAction` argument to `MissingSchemaAction.Add`. In that case, the merged <xref:System.Data.DataSet> contains the added schema and data.  \\n  \\n After merging schemas, the data is merged.  \\n  \\n When merging a new source <xref:System.Data.DataSet> into the target, any source rows with a <xref:System.Data.DataRowState> value of `Unchanged`, `Modified`, or `Deleted` are matched to target rows with the same primary key values. Source rows with a `DataRowState` value of `Added` are matched to new target rows with the same primary key values as the new source rows.  \\n  \\n During a merge, constraints are disabled. If any constraints cannot be enabled at the end of merge, a <xref:System.Data.ConstraintException> is generated and the merged data is retained while the constraints are disabled. In this case, the <xref:System.Data.DataSet.EnforceConstraints%2A> property is set to `false`, and all rows that are invalid are marked in error. The errors must be resolved before attempting to reset the <xref:System.Data.DataSet.EnforceConstraints%2A> property to `true`.\"\n  example:\n  - \"The following example creates a simple <xref:System.Data.DataSet> with one table, two columns, and ten rows. A second <xref:System.Data.DataTable> is created that is nearly identical to the first except that a new `DataColumn` is added to the table. Two rows are added to the second table, which is then merged into the <xref:System.Data.DataSet> with the `preserveChanges` argument set to `false`, and the `missingSchemaAction` argument set to `MissingSchemaAction.Add`.  \\n  \\n [!code-csharp[Classic WebData DataSet.Merge4 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.Merge4 Example/CS/source.cs#1)]\\n [!code-vb[Classic WebData DataSet.Merge4 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.Merge4 Example/VB/source.vb#1)]\"\n  syntax:\n    content: public void Merge (System.Data.DataTable table, bool preserveChanges, System.Data.MissingSchemaAction missingSchemaAction);\n    parameters:\n    - id: table\n      type: System.Data.DataTable\n      description: The `DataTable` whose data and schema will be merged.\n    - id: preserveChanges\n      type: System.Boolean\n      description: One of the <xref href=\"System.Data.MissingSchemaAction\"></xref> values.\n    - id: missingSchemaAction\n      type: System.Data.MissingSchemaAction\n      description: '`true` to preserve changes in the `DataSet`; otherwise `false`.'\n  overload: System.Data.DataSet.Merge*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>dataSet</code> is `null`.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.DataSet.MergeFailed\n  commentId: E:System.Data.DataSet.MergeFailed\n  id: MergeFailed\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: MergeFailed\n  nameWithType: DataSet.MergeFailed\n  fullName: DataSet.MergeFailed\n  type: Event\n  assemblies:\n  - System.Data\n  - netstandard\n  - System.Data.Common\n  namespace: System.Data\n  summary: Occurs when a target and source <xref href=\"System.Data.DataRow\"></xref> have the same primary key value, and <xref href=\"System.Data.DataSet.EnforceConstraints\"></xref> is set to true.\n  remarks: 'For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).'\n  example:\n  - \"The following example demonstrates the use of the <xref:System.Data.DataSet.MergeFailed> event.  \\n  \\n [!code-csharp[Classic WebData DataSet.MergeFailed Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.MergeFailed Example/CS/source.cs#1)]\\n [!code-vb[Classic WebData DataSet.MergeFailed Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.MergeFailed Example/VB/source.vb#1)]\"\n  syntax:\n    content: public event System.Data.MergeFailedEventHandler MergeFailed;\n    return:\n      type: System.Data.MergeFailedEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.DataSet.Namespace\n  commentId: P:System.Data.DataSet.Namespace\n  id: Namespace\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: Namespace\n  nameWithType: DataSet.Namespace\n  fullName: DataSet.Namespace\n  type: Property\n  assemblies:\n  - System.Data\n  - netstandard\n  - System.Data.Common\n  namespace: System.Data\n  summary: Gets or sets the namespace of the <xref href=\"System.Data.DataSet\"></xref>.\n  remarks: \"The <xref:System.Data.DataSet.Namespace%2A> property is used when reading and writing an XML document into the <xref:System.Data.DataSet> using the <xref:System.Data.DataSet.ReadXml%2A>, <xref:System.Data.DataSet.WriteXml%2A>, <xref:System.Data.DataSet.ReadXmlSchema%2A>, or <xref:System.Data.DataSet.WriteXmlSchema%2A> methods.  \\n  \\n The namespace of an XML document is used to scope XML attributes and elements when read into a <xref:System.Data.DataSet>. For example, if a <xref:System.Data.DataSet> contains a schema that was read from a document with the namespace \\\"myCompany,\\\" and an attempt is made to read data only from a document with a different namespace, any data that does not correspond to the existing schema is ignored.\"\n  example:\n  - \"The following example sets the <xref:System.Data.DataSet.Prefix%2A> before calling the <xref:System.Data.DataSet.ReadXml%2A> method.  \\n  \\n [!code-csharp[Classic WebData DataSet.Namespace Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.Namespace Example/CS/source.cs#1)]\\n [!code-vb[Classic WebData DataSet.Namespace Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.Namespace Example/VB/source.vb#1)]\"\n  syntax:\n    content: public string Namespace { get; set; }\n    return:\n      type: System.String\n      description: The namespace of the <xref href=\"System.Data.DataSet\"></xref>.\n  overload: System.Data.DataSet.Namespace*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The namespace already has data.\n  attributes: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.DataSet.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)\n  commentId: M:System.Data.DataSet.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)\n  id: OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: OnPropertyChanging(PropertyChangedEventArgs)\n  nameWithType: DataSet.OnPropertyChanging(PropertyChangedEventArgs)\n  fullName: DataSet.OnPropertyChanging(PropertyChangedEventArgs)\n  type: Method\n  assemblies:\n  - System.Data\n  - netstandard\n  - System.Data.Common\n  namespace: System.Data\n  summary: Raises the <xref href=\"System.Data.DataSet.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)\"></xref> event.\n  remarks: 'Raising an event invokes the event handler through a delegate. For an overview, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).'\n  syntax:\n    content: protected virtual void OnPropertyChanging (System.ComponentModel.PropertyChangedEventArgs pcevent);\n    parameters:\n    - id: pcevent\n      type: System.ComponentModel.PropertyChangedEventArgs\n      description: A <xref href=\"System.ComponentModel.PropertyChangedEventArgs\"></xref> that contains the event data.\n  overload: System.Data.DataSet.OnPropertyChanging*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.DataSet.OnRemoveRelation(System.Data.DataRelation)\n  commentId: M:System.Data.DataSet.OnRemoveRelation(System.Data.DataRelation)\n  id: OnRemoveRelation(System.Data.DataRelation)\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: OnRemoveRelation(DataRelation)\n  nameWithType: DataSet.OnRemoveRelation(DataRelation)\n  fullName: DataSet.OnRemoveRelation(DataRelation)\n  type: Method\n  assemblies:\n  - System.Data\n  - netstandard\n  - System.Data.Common\n  namespace: System.Data\n  summary: Occurs when a <xref href=\"System.Data.DataRelation\"></xref> object is removed from a <xref href=\"System.Data.DataTable\"></xref>.\n  remarks: This method should be overridden by subclasses to restrict tables being removed\n  syntax:\n    content: protected virtual void OnRemoveRelation (System.Data.DataRelation relation);\n    parameters:\n    - id: relation\n      type: System.Data.DataRelation\n      description: The <xref href=\"System.Data.DataRelation\"></xref> being removed.\n  overload: System.Data.DataSet.OnRemoveRelation*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.DataSet.OnRemoveTable(System.Data.DataTable)\n  commentId: M:System.Data.DataSet.OnRemoveTable(System.Data.DataTable)\n  id: OnRemoveTable(System.Data.DataTable)\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: OnRemoveTable(DataTable)\n  nameWithType: DataSet.OnRemoveTable(DataTable)\n  fullName: DataSet.OnRemoveTable(DataTable)\n  type: Method\n  assemblies:\n  - System.Data\n  - netstandard\n  - System.Data.Common\n  namespace: System.Data\n  summary: Occurs when a <xref href=\"System.Data.DataTable\"></xref> is removed from a <xref href=\"System.Data.DataSet\"></xref>.\n  remarks: This method can be overridden by subclasses to restrict tables from being removed.\n  example:\n  - \"The following example shows a class derived from the <xref:System.Data.DataSet> with the <xref:System.Data.DataSet.OnRemoveTable%2A> method overridden.  \\n  \\n [!code-csharp[Classic WebData DataSet.OnRemoveTable Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.OnRemoveTable Example/CS/source.cs#1)]\\n [!code-vb[Classic WebData DataSet.OnRemoveTable Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.OnRemoveTable Example/VB/source.vb#1)]\"\n  syntax:\n    content: protected virtual void OnRemoveTable (System.Data.DataTable table);\n    parameters:\n    - id: table\n      type: System.Data.DataTable\n      description: The <xref href=\"System.Data.DataTable\"></xref> being removed.\n  overload: System.Data.DataSet.OnRemoveTable*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.DataSet.Prefix\n  commentId: P:System.Data.DataSet.Prefix\n  id: Prefix\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: Prefix\n  nameWithType: DataSet.Prefix\n  fullName: DataSet.Prefix\n  type: Property\n  assemblies:\n  - System.Data\n  - netstandard\n  - System.Data.Common\n  namespace: System.Data\n  summary: Gets or sets an XML prefix that aliases the namespace of the <xref href=\"System.Data.DataSet\"></xref>.\n  remarks: The <xref:System.Data.DataSet.Prefix%2A> property is used throughout an XML document to identify elements which belong to the namespace of the <xref:System.Data.DataSet> object (as set by the <xref:System.Data.DataSet.Namespace%2A> property).\n  example:\n  - \"The following example sets the <xref:System.Data.DataSet.Prefix%2A> before calling the <xref:System.Data.DataSet.ReadXml%2A> method.  \\n  \\n [!code-csharp[Classic WebData DataSet.Namespace Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.Namespace Example/CS/source.cs#1)]\\n [!code-vb[Classic WebData DataSet.Namespace Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.Namespace Example/VB/source.vb#1)]\"\n  syntax:\n    content: public string Prefix { get; set; }\n    return:\n      type: System.String\n      description: The XML prefix for the <xref href=\"System.Data.DataSet\"></xref> namespace.\n  overload: System.Data.DataSet.Prefix*\n  exceptions: []\n  attributes: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.DataSet.RaisePropertyChanging(System.String)\n  commentId: M:System.Data.DataSet.RaisePropertyChanging(System.String)\n  id: RaisePropertyChanging(System.String)\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: RaisePropertyChanging(String)\n  nameWithType: DataSet.RaisePropertyChanging(String)\n  fullName: DataSet.RaisePropertyChanging(String)\n  type: Method\n  assemblies:\n  - System.Data\n  - netstandard\n  - System.Data.Common\n  namespace: System.Data\n  summary: Sends a notification that the specified <xref href=\"System.Data.DataSet\"></xref> property is about to change.\n  syntax:\n    content: protected void RaisePropertyChanging (string name);\n    parameters:\n    - id: name\n      type: System.String\n      description: The name of the property that is about to change.\n  overload: System.Data.DataSet.RaisePropertyChanging*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.DataSet.ReadXml(System.Xml.XmlReader,System.Data.XmlReadMode)\n  commentId: M:System.Data.DataSet.ReadXml(System.Xml.XmlReader,System.Data.XmlReadMode)\n  id: ReadXml(System.Xml.XmlReader,System.Data.XmlReadMode)\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: ReadXml(XmlReader, XmlReadMode)\n  nameWithType: DataSet.ReadXml(XmlReader, XmlReadMode)\n  fullName: DataSet.ReadXml(XmlReader, XmlReadMode)\n  type: Method\n  assemblies:\n  - System.Data\n  - netstandard\n  - System.Data.Common\n  namespace: System.Data\n  summary: Reads XML schema and data into the <xref href=\"System.Data.DataSet\"></xref> using the specified <xref href=\"System.Xml.XmlReader\"></xref> and <xref href=\"System.Data.XmlReadMode\"></xref>.\n  remarks: \"The <xref:System.Data.DataSet.ReadXml%2A> method provides a way to read either data only, or both data and schema into a <xref:System.Data.DataSet> from an XML document, whereas the <xref:System.Data.DataSet.ReadXmlSchema%2A> method reads only the schema. To read both data and schema, use one of the `ReadXML` overloads that includes the `mode` parameter, and set its value to `ReadSchema`.  \\n  \\n Note that the same is true for the <xref:System.Data.DataSet.WriteXml%2A> and <xref:System.Data.DataSet.WriteXmlSchema%2A> methods, respectively. To write XML data, or both schema and data from the `DataSet`, use the `WriteXml` method. To write just the schema, use the `WriteXmlSchema` method.  \\n  \\n> [!NOTE]\\n>  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.  \\n  \\n If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data. If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.  \\n  \\n If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document. If the schema cannot be extended through inference in order to expose all data, an exception is raised.  \\n  \\n> [!NOTE]\\n>  The `DataSet` does not associate an XML element with its corresponding `DataColumn` or `DataTable` when legal XML characters like (\\\"_\\\") are escaped in the serialized XML. The `DataSet` itself only escapes illegal XML characters in XML element names and hence can only consume the same. When legal characters in XML element name are escaped, the element is ignored while processing.  \\n  \\n If the XML Schema for a <xref:System.Data.DataSet> includes a `targetNamespace`, data may not be read, and you may encounter exceptions when calling <xref:System.Data.DataSet.ReadXml%2A> to load the <xref:System.Data.DataSet> with XML that contains elements with no qualifying namespace. To read unqualified elements, set `elementFormDefault` equal to \\\"qualified\\\" in your XML Schema as the following example demonstrates.  \\n  \\n```  \\n<xsd:schema id=\\\"MyDataSet\\\"   \\n   elementFormDefault=\\\"qualified\\\"   \\n   targetNamespace=\\\"http://www.tempuri.org/MyDataSet.xsd\\\"   \\n   xmlns=\\\"http://www.tempuri.org/MyDataSet.xsd\\\"   \\n   xmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema\\\"   \\n   xmlns:msdata=\\\"urn:schemas-microsoft-com:xml-msdata\\\">  \\n</xsd:schema>  \\n```  \\n  \\n> [!NOTE]\\n>  If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXml%2A> by specifying `XmlReadMode.ReadSchema`. This exception does not occur if you are using .NET Framework version 1.0.\"\n  syntax:\n    content: public System.Data.XmlReadMode ReadXml (System.Xml.XmlReader reader, System.Data.XmlReadMode mode);\n    parameters:\n    - id: reader\n      type: System.Xml.XmlReader\n      description: The <xref href=\"System.Xml.XmlReader\"></xref> from which to read.\n    - id: mode\n      type: System.Data.XmlReadMode\n      description: One of the <xref href=\"System.Data.XmlReadMode\"></xref> values.\n    return:\n      type: System.Data.XmlReadMode\n      description: The `XmlReadMode` used to read the data.\n  overload: System.Data.DataSet.ReadXml*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.DataSet.ReadXml(System.String,System.Data.XmlReadMode)\n  commentId: M:System.Data.DataSet.ReadXml(System.String,System.Data.XmlReadMode)\n  id: ReadXml(System.String,System.Data.XmlReadMode)\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: ReadXml(String, XmlReadMode)\n  nameWithType: DataSet.ReadXml(String, XmlReadMode)\n  fullName: DataSet.ReadXml(String, XmlReadMode)\n  type: Method\n  assemblies:\n  - System.Data\n  - netstandard\n  - System.Data.Common\n  namespace: System.Data\n  summary: Reads XML schema and data into the <xref href=\"System.Data.DataSet\"></xref> using the specified file and <xref href=\"System.Data.XmlReadMode\"></xref>.\n  remarks: \"The <xref:System.Data.DataSet.ReadXml%2A> method provides a way to read either data only, or both data and schema into a <xref:System.Data.DataSet> from an XML document, whereas the <xref:System.Data.DataSet.ReadXmlSchema%2A> method reads only the schema. To read both data and schema, use one of the `ReadXML` overloads that includes the `mode` parameter, and set its value to `ReadSchema`.  \\n  \\n Note that the same is true for the <xref:System.Data.DataSet.WriteXml%2A> and <xref:System.Data.DataSet.WriteXmlSchema%2A> methods, respectively. To write XML data, or both schema and data from the `DataSet`, use the `WriteXml` method. To write just the schema, use the `WriteXmlSchema` method.  \\n  \\n> [!NOTE]\\n>  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.  \\n  \\n If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data. If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.  \\n  \\n If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document. If the schema cannot be extended through inference in order to expose all data, an exception is raised.  \\n  \\n> [!NOTE]\\n>  The `DataSet` does not associate an XML element with its corresponding `DataColumn` or `DataTable` when legal XML characters like (\\\"_\\\") are escaped in the serialized XML. The `DataSet` itself only escapes illegal XML characters in XML element names and hence can only consume the same. When legal characters in XML element name are escaped, the element is ignored while processing.  \\n  \\n If the XML Schema for a <xref:System.Data.DataSet> includes a `targetNamespace`, data may not be read, and you may encounter exceptions when calling <xref:System.Data.DataSet.ReadXml%2A> to load the <xref:System.Data.DataSet> with XML that contains elements with no qualifying namespace. To read unqualified elements, set `elementFormDefault` equal to \\\"qualified\\\" in your XML Schema as the following example demonstrates.  \\n  \\n```  \\n<xsd:schema id=\\\"MyDataSet\\\"   \\n   elementFormDefault=\\\"qualified\\\"   \\n   targetNamespace=\\\"http://www.tempuri.org/MyDataSet.xsd\\\"   \\n   xmlns=\\\"http://www.tempuri.org/MyDataSet.xsd\\\"   \\n   xmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema\\\"   \\n   xmlns:msdata=\\\"urn:schemas-microsoft-com:xml-msdata\\\">  \\n</xsd:schema>  \\n```  \\n  \\n> [!NOTE]\\n>  If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXml%2A> by specifying `XmlReadMode.ReadSchema`. This exception does not occur if you are using .NET Framework version 1.0.\"\n  syntax:\n    content: public System.Data.XmlReadMode ReadXml (string fileName, System.Data.XmlReadMode mode);\n    parameters:\n    - id: fileName\n      type: System.String\n      description: The filename (including the path) from which to read.\n    - id: mode\n      type: System.Data.XmlReadMode\n      description: One of the <xref href=\"System.Data.XmlReadMode\"></xref> values.\n    return:\n      type: System.Data.XmlReadMode\n      description: The `XmlReadMode` used to read the data.\n  overload: System.Data.DataSet.ReadXml*\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: <xref href=\"System.Security.Permissions.FileIOPermission\"></xref> is not set to <xref href=\"System.Security.Permissions.FileIOPermissionAccess.Read\"></xref>.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.DataSet.ReadXml(System.IO.Stream,System.Data.XmlReadMode)\n  commentId: M:System.Data.DataSet.ReadXml(System.IO.Stream,System.Data.XmlReadMode)\n  id: ReadXml(System.IO.Stream,System.Data.XmlReadMode)\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: ReadXml(Stream, XmlReadMode)\n  nameWithType: DataSet.ReadXml(Stream, XmlReadMode)\n  fullName: DataSet.ReadXml(Stream, XmlReadMode)\n  type: Method\n  assemblies:\n  - System.Data\n  - netstandard\n  - System.Data.Common\n  namespace: System.Data\n  summary: Reads XML schema and data into the <xref href=\"System.Data.DataSet\"></xref> using the specified <xref href=\"System.IO.Stream\"></xref> and <xref href=\"System.Data.XmlReadMode\"></xref>.\n  remarks: \"The <xref:System.Data.DataSet.ReadXml%2A> method provides a way to read either data only, or both data and schema into a <xref:System.Data.DataSet> from an XML document, whereas the <xref:System.Data.DataSet.ReadXmlSchema%2A> method reads only the schema. To read both data and schema, use one of the `ReadXML` overloads that includes the `mode` parameter, and set its value to `ReadSchema`.  \\n  \\n The same is true for the <xref:System.Data.DataSet.WriteXml%2A> and <xref:System.Data.DataSet.WriteXmlSchema%2A> methods, respectively. To write XML data, or both schema and data from the `DataSet`, use the `WriteXml` method. To write just the schema, use the `WriteXmlSchema` method.  \\n  \\n> [!NOTE]\\n>  When you use <xref:System.Data.DataSet.ReadXml%2A> and you set <xref:System.Data.XmlReadMode> to `Diffgram`, the content of the target `DataSet` and the original `DataSet` may differ because of how the diffgram is generated and processed. For more information on diffgrams, see [DiffGrams](~/docs/framework/data/adonet/dataset-datatable-dataview/diffgrams.md).  \\n  \\n> [!NOTE]\\n>  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.  \\n  \\n If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data. If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.  \\n  \\n If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document. If the schema cannot be extended through inference in order to expose all data, an exception is raised.  \\n  \\n> [!NOTE]\\n>  The `DataSet` does not associate an XML element with its corresponding `DataColumn` or `DataTable` when legal XML characters like (\\\"_\\\") are escaped in the serialized XML. The `DataSet` itself only escapes illegal XML characters in XML element names and hence can only consume the same. When legal characters in XML element name are escaped, the element is ignored while processing.  \\n  \\n If the XML Schema for a <xref:System.Data.DataSet> includes `targetNamespace`, data may not be read, and you may encounter exceptions when calling <xref:System.Data.DataSet.ReadXml%2A> to load the <xref:System.Data.DataSet> with XML that contains elements with no qualifying namespace. To read unqualified elements, set `elementFormDefault` equal to \\\"qualified\\\" in your XML Schema as the following example demonstrates.  \\n  \\n```  \\n<xsd:schema id=\\\"MyDataSet\\\"   \\n   elementFormDefault=\\\"qualified\\\"   \\n   targetNamespace=\\\"http://www.tempuri.org/MyDataSet.xsd\\\"   \\n   xmlns=\\\"http://www.tempuri.org/MyDataSet.xsd\\\"   \\n   xmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema\\\"   \\n   xmlns:msdata=\\\"urn:schemas-microsoft-com:xml-msdata\\\">  \\n</xsd:schema>  \\n```  \\n  \\n> [!NOTE]\\n>  If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXml%2A> by specifying `XmlReadMode.ReadSchema`. This exception does not occur if you are using .NET Framework version 1.0.\"\n  syntax:\n    content: public System.Data.XmlReadMode ReadXml (System.IO.Stream stream, System.Data.XmlReadMode mode);\n    parameters:\n    - id: stream\n      type: System.IO.Stream\n      description: The <xref href=\"System.IO.Stream\"></xref> from which to read.\n    - id: mode\n      type: System.Data.XmlReadMode\n      description: One of the <xref href=\"System.Data.XmlReadMode\"></xref> values.\n    return:\n      type: System.Data.XmlReadMode\n      description: The `XmlReadMode` used to read the data.\n  overload: System.Data.DataSet.ReadXml*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.DataSet.ReadXml(System.IO.TextReader,System.Data.XmlReadMode)\n  commentId: M:System.Data.DataSet.ReadXml(System.IO.TextReader,System.Data.XmlReadMode)\n  id: ReadXml(System.IO.TextReader,System.Data.XmlReadMode)\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: ReadXml(TextReader, XmlReadMode)\n  nameWithType: DataSet.ReadXml(TextReader, XmlReadMode)\n  fullName: DataSet.ReadXml(TextReader, XmlReadMode)\n  type: Method\n  assemblies:\n  - System.Data\n  - netstandard\n  - System.Data.Common\n  namespace: System.Data\n  summary: Reads XML schema and data into the <xref href=\"System.Data.DataSet\"></xref> using the specified <xref href=\"System.IO.TextReader\"></xref> and <xref href=\"System.Data.XmlReadMode\"></xref>.\n  remarks: \"The <xref:System.Data.DataSet.ReadXml%2A> method provides a way to read either data only, or both data and schema into a <xref:System.Data.DataSet> from an XML document, whereas the <xref:System.Data.DataSet.ReadXmlSchema%2A> method reads only the schema. To read both data and schema, use one of the `ReadXML` overloads that includes the `mode` parameter, and set its value to `ReadSchema`.  \\n  \\n Note that the same is true for the <xref:System.Data.DataSet.WriteXml%2A> and <xref:System.Data.DataSet.WriteXmlSchema%2A> methods, respectively. To write XML data, or both schema and data from the `DataSet`, use the `WriteXml` method. To write just the schema, use the `WriteXmlSchema` method.  \\n  \\n> [!NOTE]\\n>  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.  \\n  \\n If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data. If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.  \\n  \\n If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document. If the schema cannot be extended through inference in order to expose all data, an exception is raised.  \\n  \\n> [!NOTE]\\n>  The `DataSet` does not associate an XML element with its corresponding `DataColumn` or `DataTable` when legal XML characters like (\\\"_\\\") are escaped in the serialized XML. The `DataSet` itself only escapes illegal XML characters in XML element names and hence can only consume the same. When legal characters in XML element name are escaped, the element is ignored while processing.  \\n  \\n If the XML Schema for a <xref:System.Data.DataSet> includes `targetNamespace`, data may not be read, and you may encounter exceptions when calling <xref:System.Data.DataSet.ReadXml%2A> to load the <xref:System.Data.DataSet> with XML that contains elements with no qualifying namespace. To read unqualified elements, set `elementFormDefault` equal to \\\"qualified\\\" in your XML Schema as the following example demonstrates.  \\n  \\n```  \\n<xsd:schema id=\\\"MyDataSet\\\"   \\n   elementFormDefault=\\\"qualified\\\"   \\n   targetNamespace=\\\"http://www.tempuri.org/MyDataSet.xsd\\\"   \\n   xmlns=\\\"http://www.tempuri.org/MyDataSet.xsd\\\"   \\n   xmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema\\\"   \\n   xmlns:msdata=\\\"urn:schemas-microsoft-com:xml-msdata\\\">  \\n</xsd:schema>  \\n```  \\n  \\n> [!NOTE]\\n>  If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXml%2A> by specifying `XmlReadMode.ReadSchema`. This exception does not occur if you are using .NET Framework version 1.0.\"\n  syntax:\n    content: public System.Data.XmlReadMode ReadXml (System.IO.TextReader reader, System.Data.XmlReadMode mode);\n    parameters:\n    - id: reader\n      type: System.IO.TextReader\n      description: The <xref href=\"System.IO.TextReader\"></xref> from which to read.\n    - id: mode\n      type: System.Data.XmlReadMode\n      description: One of the <xref href=\"System.Data.XmlReadMode\"></xref> values.\n    return:\n      type: System.Data.XmlReadMode\n      description: The `XmlReadMode` used to read the data.\n  overload: System.Data.DataSet.ReadXml*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.DataSet.ReadXml(System.String)\n  commentId: M:System.Data.DataSet.ReadXml(System.String)\n  id: ReadXml(System.String)\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: ReadXml(String)\n  nameWithType: DataSet.ReadXml(String)\n  fullName: DataSet.ReadXml(String)\n  type: Method\n  assemblies:\n  - System.Data\n  - netstandard\n  - System.Data.Common\n  namespace: System.Data\n  summary: Reads XML schema and data into the <xref href=\"System.Data.DataSet\"></xref> using the specified file.\n  remarks: \"The <xref:System.Data.DataSet.ReadXml%2A> method provides a way to read either data only, or both data and schema into a <xref:System.Data.DataSet> from an XML document, whereas the <xref:System.Data.DataSet.ReadXmlSchema%2A> method reads only the schema. To read both data and schema, use one of the `ReadXML` overloads that includes the `mode` parameter, and set its value to `ReadSchema`.  \\n  \\n Note that the same is true for the <xref:System.Data.DataSet.WriteXml%2A> and <xref:System.Data.DataSet.WriteXmlSchema%2A> methods, respectively. To write XML data, or both schema and data from the `DataSet`, use the `WriteXml` method. To write just the schema, use the `WriteXmlSchema` method.  \\n  \\n> [!NOTE]\\n>  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.  \\n  \\n If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data. If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.  \\n  \\n If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document. If the schema cannot be extended through inference in order to expose all data, an exception is raised.  \\n  \\n> [!NOTE]\\n>  The `DataSet` does not associate an XML element with its corresponding `DataColumn` or `DataTable` when legal XML characters like (\\\"_\\\") are escaped in the serialized XML. The `DataSet` itself only escapes illegal XML characters in XML element names and hence can only consume the same. When legal characters in XML element name are escaped, the element is ignored while processing.  \\n  \\n If the XML Schema for a <xref:System.Data.DataSet> includes a `targetNamespace`, data may not be read, and you may encounter exceptions when calling <xref:System.Data.DataSet.ReadXml%2A> to load the <xref:System.Data.DataSet> with XML that contains elements with no qualifying namespace. To read unqualified elements, set `elementFormDefault` equal to \\\"qualified\\\" in your XML Schema as the following example demonstrates.  \\n  \\n```  \\n<xsd:schema id=\\\"MyDataSet\\\"   \\n   elementFormDefault=\\\"qualified\\\"   \\n   targetNamespace=\\\"http://www.tempuri.org/MyDataSet.xsd\\\"   \\n   xmlns=\\\"http://www.tempuri.org/MyDataSet.xsd\\\"   \\n   xmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema\\\"   \\n   xmlns:msdata=\\\"urn:schemas-microsoft-com:xml-msdata\\\">  \\n</xsd:schema>  \\n```  \\n  \\n> [!NOTE]\\n>  If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXml%2A> by specifying `XmlReadMode.ReadSchema`. This exception does not occur if you are using .NET Framework version 1.0.\"\n  example:\n  - \"The following example first creates a simple <xref:System.Data.DataSet> with one <xref:System.Data.DataTable>, two columns, and ten rows. The <xref:System.Data.DataSet> schema and data are written to disk by invoking the <xref:System.Data.DataSet.WriteXml%2A> method. A second <xref:System.Data.DataSet> is created and the <xref:System.Data.DataSet.ReadXml%2A> method is used to fill it with schema and data.  \\n  \\n [!code-csharp[Classic WebData DataSet.ReadXml3 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXml3 Example/CS/source.cs#1)]\\n [!code-vb[Classic WebData DataSet.ReadXml3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXml3 Example/VB/source.vb#1)]\"\n  syntax:\n    content: public System.Data.XmlReadMode ReadXml (string fileName);\n    parameters:\n    - id: fileName\n      type: System.String\n      description: The filename (including the path) from which to read.\n    return:\n      type: System.Data.XmlReadMode\n      description: The `XmlReadMode` used to read the data.\n  overload: System.Data.DataSet.ReadXml*\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: <xref href=\"System.Security.Permissions.FileIOPermission\"></xref> is not set to <xref href=\"System.Security.Permissions.FileIOPermissionAccess.Read\"></xref>.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.DataSet.ReadXml(System.IO.TextReader)\n  commentId: M:System.Data.DataSet.ReadXml(System.IO.TextReader)\n  id: ReadXml(System.IO.TextReader)\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: ReadXml(TextReader)\n  nameWithType: DataSet.ReadXml(TextReader)\n  fullName: DataSet.ReadXml(TextReader)\n  type: Method\n  assemblies:\n  - System.Data\n  - netstandard\n  - System.Data.Common\n  namespace: System.Data\n  summary: Reads XML schema and data into the <xref href=\"System.Data.DataSet\"></xref> using the specified <xref href=\"System.IO.TextReader\"></xref>.\n  remarks: \"The <xref:System.Data.DataSet.ReadXml%2A> method provides a way to read either data only, or both data and schema into a <xref:System.Data.DataSet> from an XML document, whereas the <xref:System.Data.DataSet.ReadXmlSchema%2A> method reads only the schema. To read both data and schema, use one of the `ReadXML` overloads that includes the `mode` parameter, and set its value to `ReadSchema`.  \\n  \\n Note that the same is true for the <xref:System.Data.DataSet.WriteXml%2A> and <xref:System.Data.DataSet.WriteXmlSchema%2A> methods, respectively. To write XML data, or both schema and data from the `DataSet`, use the `WriteXml` method. To write just the schema, use the `WriteXmlSchema` method.  \\n  \\n> [!NOTE]\\n>  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.  \\n  \\n If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data. If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.  \\n  \\n If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document. If the schema cannot be extended through inference in order to expose all data, an exception is raised.  \\n  \\n> [!NOTE]\\n>  The `DataSet` does not associate an XML element with its corresponding `DataColumn` or `DataTable` when legal XML characters like (\\\"_\\\") are escaped in the serialized XML. The `DataSet` itself only escapes illegal XML characters in XML element names and hence can only consume the same. When legal characters in XML element name are escaped, the element is ignored while processing.  \\n  \\n If the XML Schema for a <xref:System.Data.DataSet> includes `targetNamespace`, data may not be read, and you may encounter exceptions when calling <xref:System.Data.DataSet.ReadXml%2A> to load the <xref:System.Data.DataSet> with XML that contains elements with no qualifying namespace. To read unqualified elements, set `elementFormDefault` equal to \\\"qualified\\\" in your XML Schema as the following example demonstrates.  \\n  \\n```  \\n<xsd:schema id=\\\"MyDataSet\\\"   \\n   elementFormDefault=\\\"qualified\\\"   \\n   targetNamespace=\\\"http://www.tempuri.org/MyDataSet.xsd\\\"   \\n   xmlns=\\\"http://www.tempuri.org/MyDataSet.xsd\\\"   \\n   xmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema\\\"   \\n   xmlns:msdata=\\\"urn:schemas-microsoft-com:xml-msdata\\\">  \\n</xsd:schema>  \\n```  \\n  \\n Classes that inherit from the <xref:System.IO.TextReader> class include the <xref:System.IO.StreamReader> and <xref:System.IO.StringReader> classes.  \\n  \\n> [!NOTE]\\n>  If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXml%2A> by specifying `XmlReadMode.ReadSchema`. This exception does not occur if you are using .NET Framework version 1.0.\"\n  example:\n  - \"The following example first creates a simple <xref:System.Data.DataSet> with one <xref:System.Data.DataTable>, two columns, and ten rows. The <xref:System.Data.DataSet> schema and data are written to disk by invoking the <xref:System.Data.DataSet.WriteXml%2A> method. A second <xref:System.Data.DataSet> is created and the <xref:System.Data.DataSet.ReadXml%2A> method is used to fill it with schema and data.  \\n  \\n [!code-csharp[Classic WebData DataSet.ReadXml2 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXml2 Example/CS/source.cs#1)]\\n [!code-vb[Classic WebData DataSet.ReadXml2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXml2 Example/VB/source.vb#1)]\"\n  syntax:\n    content: public System.Data.XmlReadMode ReadXml (System.IO.TextReader reader);\n    parameters:\n    - id: reader\n      type: System.IO.TextReader\n      description: The `TextReader` from which to read the schema and data.\n    return:\n      type: System.Data.XmlReadMode\n      description: The <xref href=\"System.Data.XmlReadMode\"></xref> used to read the data.\n  overload: System.Data.DataSet.ReadXml*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.DataSet.ReadXml(System.IO.Stream)\n  commentId: M:System.Data.DataSet.ReadXml(System.IO.Stream)\n  id: ReadXml(System.IO.Stream)\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: ReadXml(Stream)\n  nameWithType: DataSet.ReadXml(Stream)\n  fullName: DataSet.ReadXml(Stream)\n  type: Method\n  assemblies:\n  - System.Data\n  - netstandard\n  - System.Data.Common\n  namespace: System.Data\n  summary: Reads XML schema and data into the <xref href=\"System.Data.DataSet\"></xref> using the specified <xref href=\"System.IO.Stream\"></xref>.\n  remarks: \"The <xref:System.Data.DataSet.ReadXml%2A> method provides a way to read either data only, or both data and schema into a <xref:System.Data.DataSet> from an XML document, whereas the <xref:System.Data.DataSet.ReadXmlSchema%2A> method reads only the schema. To read both data and schema, use one of the `ReadXML` overloads that includes the `mode` parameter, and set its value to `ReadSchema`.  \\n  \\n Note that the same is true for the <xref:System.Data.DataSet.WriteXml%2A> and <xref:System.Data.DataSet.WriteXmlSchema%2A> methods, respectively. To write XML data, or both schema and data from the `DataSet`, use the `WriteXml` method. To write just the schema, use the `WriteXmlSchema` method.  \\n  \\n> [!NOTE]\\n>  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.  \\n  \\n If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data. If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.  \\n  \\n If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document. If the schema cannot be extended through inference in order to expose all data, an exception is raised.  \\n  \\n> [!NOTE]\\n>  The `DataSet` does not associate an XML element with its corresponding `DataColumn` or `DataTable` when legal XML characters like (\\\"_\\\") are escaped in the serialized XML. The `DataSet` itself only escapes illegal XML characters in XML element names and hence can only consume the same. When legal characters in XML element name are escaped, the element is ignored while processing.  \\n  \\n If the XML Schema for a <xref:System.Data.DataSet> includes `targetNamespace`, data may not be read, and you may encounter exceptions when calling <xref:System.Data.DataSet.ReadXml%2A> to load the <xref:System.Data.DataSet> with XML that contains elements with no qualifying namespace. To read unqualified elements, set `elementFormDefault` equal to \\\"qualified\\\" in your XML Schema, as the following example demonstrates.  \\n  \\n```  \\n<xsd:schema id=\\\"MyDataSet\\\"   \\n   elementFormDefault=\\\"qualified\\\"   \\n   targetNamespace=\\\"http://www.tempuri.org/MyDataSet.xsd\\\"   \\n   xmlns=\\\"http://www.tempuri.org/MyDataSet.xsd\\\"   \\n   xmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema\\\"   \\n   xmlns:msdata=\\\"urn:schemas-microsoft-com:xml-msdata\\\">  \\n</xsd:schema>  \\n```  \\n  \\n> [!NOTE]\\n>  If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXml%2A> by specifying `XmlReadMode.ReadSchema`. This exception does not occur if you are using .NET Framework version 1.0.\"\n  example:\n  - \"The following example first creates a simple <xref:System.Data.DataSet> with one <xref:System.Data.DataTable>, two columns, and ten rows. The <xref:System.Data.DataSet> schema and data are written to disk by invoking the <xref:System.Data.DataSet.WriteXml%2A> method. A second <xref:System.Data.DataSet> is created and the <xref:System.Data.DataSet.ReadXml%2A> method is used to fill it with schema and data.  \\n  \\n [!code-csharp[Classic WebData DataSet.ReadXml1 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXml1 Example/CS/source.cs#1)]\\n [!code-vb[Classic WebData DataSet.ReadXml1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXml1 Example/VB/source.vb#1)]\"\n  syntax:\n    content: public System.Data.XmlReadMode ReadXml (System.IO.Stream stream);\n    parameters:\n    - id: stream\n      type: System.IO.Stream\n      description: An object that derives from <xref href=\"System.IO.Stream\"></xref>.\n    return:\n      type: System.Data.XmlReadMode\n      description: The <xref href=\"System.Data.XmlReadMode\"></xref> used to read the data.\n  overload: System.Data.DataSet.ReadXml*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.DataSet.ReadXml(System.Xml.XmlReader)\n  commentId: M:System.Data.DataSet.ReadXml(System.Xml.XmlReader)\n  id: ReadXml(System.Xml.XmlReader)\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: ReadXml(XmlReader)\n  nameWithType: DataSet.ReadXml(XmlReader)\n  fullName: DataSet.ReadXml(XmlReader)\n  type: Method\n  assemblies:\n  - System.Data\n  - netstandard\n  - System.Data.Common\n  namespace: System.Data\n  summary: Reads XML schema and data into the <xref href=\"System.Data.DataSet\"></xref> using the specified <xref href=\"System.Xml.XmlReader\"></xref>.\n  remarks: \"The <xref:System.Data.DataSet.ReadXml%2A> method provides a way to read either data only, or both data and schema into a <xref:System.Data.DataSet> from an XML document, whereas the <xref:System.Data.DataSet.ReadXmlSchema%2A> method reads only the schema. To read both data and schema, use one of the `ReadXML` overloads that includes the `mode` parameter, and set its value to `ReadSchema`.  \\n  \\n Note that the same is true for the <xref:System.Data.DataSet.WriteXml%2A> and <xref:System.Data.DataSet.WriteXmlSchema%2A> methods, respectively. To write XML data, or both schema and data from the `DataSet`, use the `WriteXml` method. To write just the schema, use the `WriteXmlSchema` method.  \\n  \\n> [!NOTE]\\n>  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.  \\n  \\n If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data. If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.  \\n  \\n If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document. If the schema cannot be extended through inference in order to expose all data, an exception is raised.  \\n  \\n> [!NOTE]\\n>  The `DataSet` does not associate an XML element with its corresponding `DataColumn` or `DataTable` when legal XML characters like (\\\"_\\\") are escaped in the serialized XML. The `DataSet` itself only escapes illegal XML characters in XML element names and hence can only consume the same. When legal characters in XML element name are escaped, the element is ignored while processing.  \\n  \\n If the XML Schema for a <xref:System.Data.DataSet> includes a `targetNamespace`, data may not be read, and you may encounter exceptions when calling <xref:System.Data.DataSet.ReadXml%2A> to load the <xref:System.Data.DataSet> with XML that contains elements with no qualifying namespace. To read unqualified elements, set `elementFormDefault` equal to \\\"qualified\\\" in your XML Schema as the following example demonstrates.  \\n  \\n```  \\n<xsd:schema id=\\\"MyDataSet\\\"   \\n   elementFormDefault=\\\"qualified\\\"   \\n   targetNamespace=\\\"http://www.tempuri.org/MyDataSet.xsd\\\"   \\n   xmlns=\\\"http://www.tempuri.org/MyDataSet.xsd\\\"   \\n   xmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema\\\"   \\n   xmlns:msdata=\\\"urn:schemas-microsoft-com:xml-msdata\\\">  \\n</xsd:schema>  \\n```  \\n  \\n <xref:System.Xml.XmlTextReader?displayProperty=fullName> inherits from <xref:System.Xml.XmlReader>.  \\n  \\n> [!NOTE]\\n>  If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXml%2A> by specifying `XmlReadMode.ReadSchema`. This exception does not occur if you are using .NET Framework version 1.0.\"\n  example:\n  - \"The following example first creates a simple <xref:System.Data.DataSet> with one <xref:System.Data.DataTable>, two columns, and ten rows. The <xref:System.Data.DataSet> schema and data are written to disk by invoking the <xref:System.Data.DataSet.WriteXml%2A> method. A second <xref:System.Data.DataSet> is created and the <xref:System.Data.DataSet.ReadXml%2A> method is used to fill it with schema and data.  \\n  \\n [!code-csharp[Classic WebData DataSet.ReadXml Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXml Example/CS/source.cs#1)]\\n [!code-vb[Classic WebData DataSet.ReadXml Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXml Example/VB/source.vb#1)]\"\n  syntax:\n    content: public System.Data.XmlReadMode ReadXml (System.Xml.XmlReader reader);\n    parameters:\n    - id: reader\n      type: System.Xml.XmlReader\n      description: The <xref href=\"System.Xml.XmlReader\"></xref> from which to read.\n    return:\n      type: System.Data.XmlReadMode\n      description: The `XmlReadMode` used to read the data.\n  overload: System.Data.DataSet.ReadXml*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.DataSet.ReadXmlSchema(System.IO.Stream)\n  commentId: M:System.Data.DataSet.ReadXmlSchema(System.IO.Stream)\n  id: ReadXmlSchema(System.IO.Stream)\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: ReadXmlSchema(Stream)\n  nameWithType: DataSet.ReadXmlSchema(Stream)\n  fullName: DataSet.ReadXmlSchema(Stream)\n  type: Method\n  assemblies:\n  - System.Data\n  - netstandard\n  - System.Data.Common\n  namespace: System.Data\n  summary: Reads the XML schema from the specified <xref href=\"System.IO.Stream\"></xref> into the <xref href=\"System.Data.DataSet\"></xref>.\n  remarks: \"Use the <xref:System.Data.DataSet.ReadXmlSchema%2A> method to create the schema for a <xref:System.Data.DataSet>. The schema includes table, relation, and constraint definitions. To write a schema to an XML document, use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method.  \\n  \\n The XML schema is written using the XSD standard.  \\n  \\n> [!NOTE]\\n>  Data corruption can occur if the msdata:DataType and the xs:type types do not match. No exception will be thrown.  \\n  \\n The <xref:System.Data.DataSet.ReadXmlSchema%2A> method is generally invoked before invoking the <xref:System.Data.DataSet.ReadXml%2A> method which is used to fill the <xref:System.Data.DataSet>.  \\n  \\n Classes that derive from the <xref:System.IO.Stream> class include <xref:System.IO.BufferedStream>, <xref:System.IO.FileStream>, <xref:System.IO.MemoryStream>, and <xref:System.Net.Sockets.NetworkStream>.  \\n  \\n> [!NOTE]\\n>  If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is be thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXmlSchema%2A>. This exception does not occur if you are using .NET Framework version 1.0.\"\n  example:\n  - \"The following example creates a <xref:System.IO.FileStream> object to read an XML schema with, and invokes the <xref:System.Data.DataSet.ReadXmlSchema%2A> method with the object.  \\n  \\n [!code-csharp[Classic WebData DataSet.ReadXmlSchema1 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXmlSchema1 Example/CS/source.cs#1)]\\n [!code-vb[Classic WebData DataSet.ReadXmlSchema1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXmlSchema1 Example/VB/source.vb#1)]\"\n  syntax:\n    content: public void ReadXmlSchema (System.IO.Stream stream);\n    parameters:\n    - id: stream\n      type: System.IO.Stream\n      description: The <xref href=\"System.IO.Stream\"></xref> from which to read.\n  overload: System.Data.DataSet.ReadXmlSchema*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.DataSet.ReadXmlSchema(System.IO.TextReader)\n  commentId: M:System.Data.DataSet.ReadXmlSchema(System.IO.TextReader)\n  id: ReadXmlSchema(System.IO.TextReader)\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: ReadXmlSchema(TextReader)\n  nameWithType: DataSet.ReadXmlSchema(TextReader)\n  fullName: DataSet.ReadXmlSchema(TextReader)\n  type: Method\n  assemblies:\n  - System.Data\n  - netstandard\n  - System.Data.Common\n  namespace: System.Data\n  summary: Reads the XML schema from the specified <xref href=\"System.IO.TextReader\"></xref> into the <xref href=\"System.Data.DataSet\"></xref>.\n  remarks: \"Use the <xref:System.Data.DataSet.ReadXmlSchema%2A> method to create the schema for a <xref:System.Data.DataSet>. The schema includes table, relation, and constraint definitions. To write a schema to an XML document, use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method.  \\n  \\n The XML schema is written using the XSD standard.  \\n  \\n> [!NOTE]\\n>  Data corruption can occur if the msdata:DataType and the xs:type types do not match. No exception will be thrown.  \\n  \\n The <xref:System.Data.DataSet.ReadXmlSchema%2A> method is generally invoked before invoking the <xref:System.Data.DataSet.ReadXml%2A> method which is used to fill the <xref:System.Data.DataSet>.  \\n  \\n Classes that inherit from the <xref:System.IO.TextReader> class include the <xref:System.IO.StreamReader> and <xref:System.IO.StringReader> classes.  \\n  \\n> [!NOTE]\\n>  If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is be thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXmlSchema%2A>. This exception does not occur if you are using .NET Framework version 1.0.\"\n  example:\n  - \"The following example creates a <xref:System.IO.StreamReader> object to read a schema with, and invokes the <xref:System.Data.DataSet.ReadXmlSchema%2A> method with the object.  \\n  \\n [!code-csharp[Classic WebData DataSet.ReadXmlSchema2 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXmlSchema2 Example/CS/source.cs#1)]\\n [!code-vb[Classic WebData DataSet.ReadXmlSchema2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXmlSchema2 Example/VB/source.vb#1)]\"\n  syntax:\n    content: public void ReadXmlSchema (System.IO.TextReader reader);\n    parameters:\n    - id: reader\n      type: System.IO.TextReader\n      description: The <xref href=\"System.IO.TextReader\"></xref> from which to read.\n  overload: System.Data.DataSet.ReadXmlSchema*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.DataSet.ReadXmlSchema(System.String)\n  commentId: M:System.Data.DataSet.ReadXmlSchema(System.String)\n  id: ReadXmlSchema(System.String)\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: ReadXmlSchema(String)\n  nameWithType: DataSet.ReadXmlSchema(String)\n  fullName: DataSet.ReadXmlSchema(String)\n  type: Method\n  assemblies:\n  - System.Data\n  - netstandard\n  - System.Data.Common\n  namespace: System.Data\n  summary: Reads the XML schema from the specified file into the <xref href=\"System.Data.DataSet\"></xref>.\n  remarks: \"Use the <xref:System.Data.DataSet.ReadXmlSchema%2A> method to create the schema for a <xref:System.Data.DataSet>. The schema includes table, relation, and constraint definitions. To write a schema to an XML document, use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method.  \\n  \\n The XML schema is written using the XSD standard.  \\n  \\n> [!NOTE]\\n>  Data corruption can occur if the msdata:DataType and the xs:type types do not match. No exception will be thrown.  \\n  \\n The <xref:System.Data.DataSet.ReadXmlSchema%2A> method is generally invoked before invoking the <xref:System.Data.DataSet.ReadXml%2A> method which is used to fill the <xref:System.Data.DataSet>.  \\n  \\n> [!NOTE]\\n>  If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXmlSchema%2A>. This exception does not occur if you are using .NET Framework version 1.0.\"\n  example:\n  - >-\n    [!code-csharp[Classic WebData DataSet.ReadXmlSchema3 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXmlSchema3 Example/CS/source.cs#1)]\n     [!code-vb[Classic WebData DataSet.ReadXmlSchema3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXmlSchema3 Example/VB/source.vb#1)]\n  syntax:\n    content: public void ReadXmlSchema (string fileName);\n    parameters:\n    - id: fileName\n      type: System.String\n      description: The file name (including the path) from which to read.\n  overload: System.Data.DataSet.ReadXmlSchema*\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: <xref href=\"System.Security.Permissions.FileIOPermission\"></xref> is not set to <xref href=\"System.Security.Permissions.FileIOPermissionAccess.Read\"></xref>.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.DataSet.ReadXmlSchema(System.Xml.XmlReader)\n  commentId: M:System.Data.DataSet.ReadXmlSchema(System.Xml.XmlReader)\n  id: ReadXmlSchema(System.Xml.XmlReader)\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: ReadXmlSchema(XmlReader)\n  nameWithType: DataSet.ReadXmlSchema(XmlReader)\n  fullName: DataSet.ReadXmlSchema(XmlReader)\n  type: Method\n  assemblies:\n  - System.Data\n  - netstandard\n  - System.Data.Common\n  namespace: System.Data\n  summary: Reads the XML schema from the specified <xref href=\"System.Xml.XmlReader\"></xref> into the <xref href=\"System.Data.DataSet\"></xref>.\n  remarks: \"Use the <xref:System.Data.DataSet.ReadXmlSchema%2A> method to create the schema for a <xref:System.Data.DataSet>. The schema includes table, relation, and constraint definitions.  \\n  \\n The XML schema is written using the XSD standard.  \\n  \\n> [!NOTE]\\n>  Data corruption can occur if the msdata:DataType and the xs:type types do not match. No exception will be thrown.  \\n  \\n The <xref:System.Data.DataSet.ReadXmlSchema%2A> method is generally invoked before invoking the <xref:System.Data.DataSet.ReadXml%2A> method which is used to fill the <xref:System.Data.DataSet>.  \\n  \\n The <xref:System.Xml.XmlReader?displayProperty=fullName> class is abstract. A class that inherits from the `XmlReader` is the <xref:System.Xml.XmlTextReader?displayProperty=fullName> class.  \\n  \\n> [!NOTE]\\n>  If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is be thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXmlSchema%2A>. This exception does not occur if you are using .NET Framework version 1.0.\"\n  example:\n  - \"The following example creates a new <xref:System.Data.DataSet> and <xref:System.IO.FileStream?displayProperty=fullName> object. The <xref:System.IO.FileStream> object, created with a file path and file name, is used to create an <xref:System.Xml.XmlTextReader?displayProperty=fullName> that is passed as an argument to the <xref:System.Data.DataSet.ReadXmlSchema%2A> method.  \\n  \\n [!code-csharp[Classic WebData DataSet.ReadXmlSchema Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXmlSchema Example/CS/source.cs#1)]\\n [!code-vb[Classic WebData DataSet.ReadXmlSchema Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXmlSchema Example/VB/source.vb#1)]\"\n  syntax:\n    content: public void ReadXmlSchema (System.Xml.XmlReader reader);\n    parameters:\n    - id: reader\n      type: System.Xml.XmlReader\n      description: The <xref href=\"System.Xml.XmlReader\"></xref> from which to read.\n  overload: System.Data.DataSet.ReadXmlSchema*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.DataSet.ReadXmlSerializable(System.Xml.XmlReader)\n  commentId: M:System.Data.DataSet.ReadXmlSerializable(System.Xml.XmlReader)\n  id: ReadXmlSerializable(System.Xml.XmlReader)\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: ReadXmlSerializable(XmlReader)\n  nameWithType: DataSet.ReadXmlSerializable(XmlReader)\n  fullName: DataSet.ReadXmlSerializable(XmlReader)\n  type: Method\n  assemblies:\n  - System.Data\n  - netstandard\n  - System.Data.Common\n  namespace: System.Data\n  summary: Ignores attributes and returns an empty DataSet.\n  syntax:\n    content: protected virtual void ReadXmlSerializable (System.Xml.XmlReader reader);\n    parameters:\n    - id: reader\n      type: System.Xml.XmlReader\n      description: The specified XML reader.\n  overload: System.Data.DataSet.ReadXmlSerializable*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.DataSet.RejectChanges\n  commentId: M:System.Data.DataSet.RejectChanges\n  id: RejectChanges\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: RejectChanges()\n  nameWithType: DataSet.RejectChanges()\n  fullName: DataSet.RejectChanges()\n  type: Method\n  assemblies:\n  - System.Data\n  - netstandard\n  - System.Data.Common\n  namespace: System.Data\n  summary: Rolls back all the changes made to the <xref href=\"System.Data.DataSet\"></xref> since it was created, or since the last time <xref href=\"System.Data.DataSet.AcceptChanges\"></xref> was called.\n  remarks: \"Invoke the <xref:System.Data.DataSet.RejectChanges%2A?displayProperty=fullName> to call the <xref:System.Data.DataTable.RejectChanges%2A?displayProperty=fullName> method on all <xref:System.Data.DataTable> objects contained by the <xref:System.Data.DataSet>.  \\n  \\n <xref:System.Data.DataRow> objects contained by the <xref:System.Data.DataSet> can each be set into edit mode by invoking the <xref:System.Data.DataRow.BeginEdit%2A?displayProperty=fullName> method. After invoking the <xref:System.Data.DataRow.EndEdit%2A?displayProperty=fullName> method, changes can be rejected by calling the <xref:System.Data.DataTable.RejectChanges%2A?displayProperty=fullName> on the <xref:System.Data.DataTable> to which the <xref:System.Data.DataRow> objects belong.  \\n  \\n When the <xref:System.Data.DataTable.RejectChanges%2A?displayProperty=fullName> method is called, any rows still in edit-mode cancel their edits. New rows are removed. Modified and deleted rows return back to their original state (`DataRowState.Unchanged`).  \\n  \\n AcceptChanges and RejectChanges only apply to <xref:System.Data.DataRow> related changes (that is, `Add`, `Remove`, `Delete`, and `Modify`). They are not applicable to schema or structural changes.\"\n  example:\n  - \"The following example shows a class derived from the <xref:System.Data.DataSet> class. The <xref:System.Data.DataSet.RejectChanges%2A> event is invoked from within a function.  \\n  \\n [!code-csharp[Classic WebData DataSet.RejectChanges Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.RejectChanges Example/CS/source.cs#1)]\\n [!code-vb[Classic WebData DataSet.RejectChanges Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.RejectChanges Example/VB/source.vb#1)]\"\n  syntax:\n    content: public virtual void RejectChanges ();\n    parameters: []\n  overload: System.Data.DataSet.RejectChanges*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.DataSet.Relations\n  commentId: P:System.Data.DataSet.Relations\n  id: Relations\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: Relations\n  nameWithType: DataSet.Relations\n  fullName: DataSet.Relations\n  type: Property\n  assemblies:\n  - System.Data\n  - netstandard\n  - System.Data.Common\n  namespace: System.Data\n  summary: Get the collection of relations that link tables and allow navigation from parent tables to child tables.\n  remarks: ''\n  example:\n  - \"The following example prints the column name of all child tables through the <xref:System.Data.DataSet.Relations%2A> property.  \\n  \\n [!code-vb[Classic WebData DataSet.Relations Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.Relations Example/VB/source.vb#1)]\"\n  syntax:\n    content: public System.Data.DataRelationCollection Relations { get; }\n    return:\n      type: System.Data.DataRelationCollection\n      description: A <xref href=\"System.Data.DataRelationCollection\"></xref> that contains a collection of <xref href=\"System.Data.DataRelation\"></xref> objects. An empty collection is returned if no <xref href=\"System.Data.DataRelation\"></xref> objects exist.\n  overload: System.Data.DataSet.Relations*\n  exceptions: []\n  attributes: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.DataSet.RemotingFormat\n  commentId: P:System.Data.DataSet.RemotingFormat\n  id: RemotingFormat\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: RemotingFormat\n  nameWithType: DataSet.RemotingFormat\n  fullName: DataSet.RemotingFormat\n  type: Property\n  assemblies:\n  - System.Data\n  - netstandard\n  - System.Data.Common\n  namespace: System.Data\n  summary: Gets or sets a <xref href=\"System.Data.SerializationFormat\"></xref> for the <xref href=\"System.Data.DataSet\"></xref> used during remoting.\n  syntax:\n    content: public System.Data.SerializationFormat RemotingFormat { get; set; }\n    return:\n      type: System.Data.SerializationFormat\n      description: A <xref href=\"System.Data.SerializationFormat\"></xref> object.\n  overload: System.Data.DataSet.RemotingFormat*\n  exceptions: []\n  attributes: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.DataSet.Reset\n  commentId: M:System.Data.DataSet.Reset\n  id: Reset\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: Reset()\n  nameWithType: DataSet.Reset()\n  fullName: DataSet.Reset()\n  type: Method\n  assemblies:\n  - System.Data\n  - netstandard\n  - System.Data.Common\n  namespace: System.Data\n  summary: Clears all tables and removes all relations, foreign constraints, and tables from the <xref href=\"System.Data.DataSet\"></xref>. Subclasses should override <xref href=\"System.Data.DataSet.Reset\"></xref> to restore a <xref href=\"System.Data.DataSet\"></xref> to its original state.\n  syntax:\n    content: public virtual void Reset ();\n    parameters: []\n  overload: System.Data.DataSet.Reset*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.DataSet.SchemaSerializationMode\n  commentId: P:System.Data.DataSet.SchemaSerializationMode\n  id: SchemaSerializationMode\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: SchemaSerializationMode\n  nameWithType: DataSet.SchemaSerializationMode\n  fullName: DataSet.SchemaSerializationMode\n  type: Property\n  assemblies:\n  - System.Data\n  - netstandard\n  - System.Data.Common\n  namespace: System.Data\n  summary: Gets or sets a <xref href=\"System.Data.SchemaSerializationMode\"></xref> for a <xref href=\"System.Data.DataSet\"></xref>.\n  remarks: \"A <xref:System.Data.DataSet> serializes its schema and instance data by default in Web services and remoting scenarios. Setting the <xref:System.Data.DataSet.SchemaSerializationMode%2A> property of a typed `DataSet` to <xref:System.Data.SchemaSerializationMode.ExcludeSchema> causes schema information to be excluded from the serialization payload.  \\n  \\n <xref:System.Data.SchemaSerializationMode.ExcludeSchema> is supported only for a typed `DataSet`. For an un-typed `DataSet` this property can only be set to <xref:System.Data.SchemaSerializationMode.IncludeSchema>.  \\n  \\n <xref:System.Data.SchemaSerializationMode.ExcludeSchema> should only be used in cases where the schema information of the underlying typed `DataTables`, `DataRelations` and `Constraints` has not been modified. If modifications have occurred, complete schema information should be serialized with <xref:System.Data.SchemaSerializationMode.IncludeSchema>.  \\n  \\n <xref:System.Data.SchemaSerializationMode.ExcludeSchema> is supported in version 2.0 of the .NET Framework or later.  \\n  \\n When <xref:System.Data.SchemaSerializationMode.ExcludeSchema> is set, only the top level runtime properties present on the <xref:System.Data.DataSet> are serialized. In addition, they are serialized only if they happen to be different from the default values. None of the `Tables`, `Relations` or `Constraints` are serialized. The serialized runtime properties include <xref:System.Data.DataSet.DataSetName%2A>, <xref:System.Data.DataSet.Namespace%2A>, <xref:System.Data.DataSet.Prefix%2A>, <xref:System.Data.DataSet.Locale%2A>, <xref:System.Data.DataSet.EnforceConstraints%2A>, and <xref:System.Data.DataSet.CaseSensitive%2A>. These properties are serialized to make sure that overall runtime data integrity is preserved.\"\n  syntax:\n    content: >-\n      [System.ComponentModel.Browsable(false)]\n\n      public virtual System.Data.SchemaSerializationMode SchemaSerializationMode { get; set; }\n    return:\n      type: System.Data.SchemaSerializationMode\n      description: Gets or sets a <xref href=\"System.Data.SchemaSerializationMode\"></xref> for a <xref href=\"System.Data.DataSet\"></xref>.\n  overload: System.Data.DataSet.SchemaSerializationMode*\n  exceptions: []\n  attributes:\n  - type: System.ComponentModel.BrowsableAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.DataSet.ShouldSerializeRelations\n  commentId: M:System.Data.DataSet.ShouldSerializeRelations\n  id: ShouldSerializeRelations\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: ShouldSerializeRelations()\n  nameWithType: DataSet.ShouldSerializeRelations()\n  fullName: DataSet.ShouldSerializeRelations()\n  type: Method\n  assemblies:\n  - System.Data\n  - netstandard\n  - System.Data.Common\n  namespace: System.Data\n  summary: Gets a value indicating whether <xref href=\"System.Data.DataSet.Relations\"></xref> property should be persisted.\n  remarks: You typically use this method if you are either creating a designer for the <xref:System.Data.DataSet>, or creating your own control incorporating the <xref:System.Data.DataSet>.\n  example:\n  - \"The following examples show a class derived from the <xref:System.Data.DataSet> class. The <xref:System.Data.DataSet.Reset%2A> and <xref:System.Data.DataSet.ShouldSerializeRelations%2A> methods are invoked from within functions in the derived class.  \\n  \\n [!code-csharp[Classic WebData DataSet.ShouldSerializeRelations Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.ShouldSerializeRelations Example/CS/source.cs#1)]\\n [!code-vb[Classic WebData DataSet.ShouldSerializeRelations Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.ShouldSerializeRelations Example/VB/source.vb#1)]\"\n  syntax:\n    content: protected virtual bool ShouldSerializeRelations ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: '`true` if the property value has been changed from its default; otherwise `false`.'\n  overload: System.Data.DataSet.ShouldSerializeRelations*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.DataSet.ShouldSerializeTables\n  commentId: M:System.Data.DataSet.ShouldSerializeTables\n  id: ShouldSerializeTables\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: ShouldSerializeTables()\n  nameWithType: DataSet.ShouldSerializeTables()\n  fullName: DataSet.ShouldSerializeTables()\n  type: Method\n  assemblies:\n  - System.Data\n  - netstandard\n  - System.Data.Common\n  namespace: System.Data\n  summary: Gets a value indicating whether <xref href=\"System.Data.DataSet.Tables\"></xref> property should be persisted.\n  remarks: You typically use this method only if you are either creating a designer for the <xref:System.Data.DataSet>, or creating your own control incorporating the <xref:System.Data.DataSet>.\n  example:\n  - \"The following example shows a class derived from the <xref:System.Data.DataSet> class. The <xref:System.Data.DataSet.ShouldSerializeTables%2A> method is called from within functions in the derived class.  \\n  \\n [!code-csharp[Classic WebData DataSet.ShouldSerializeTables Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.ShouldSerializeTables Example/CS/source.cs#1)]\\n [!code-vb[Classic WebData DataSet.ShouldSerializeTables Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.ShouldSerializeTables Example/VB/source.vb#1)]\"\n  syntax:\n    content: protected virtual bool ShouldSerializeTables ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: '`true` if the property value has been changed from its default; otherwise `false`.'\n  overload: System.Data.DataSet.ShouldSerializeTables*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.DataSet.Site\n  commentId: P:System.Data.DataSet.Site\n  id: Site\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: Site\n  nameWithType: DataSet.Site\n  fullName: DataSet.Site\n  type: Property\n  assemblies:\n  - System.Data\n  - netstandard\n  - System.Data.Common\n  namespace: System.Data\n  summary: Gets or sets an <xref href=\"System.ComponentModel.ISite\"></xref> for the <xref href=\"System.Data.DataSet\"></xref>.\n  remarks: Sites bind a <xref:System.ComponentModel.Component> to a <xref:System.ComponentModel.Container> and enable communication between them, as well as provide a way for the container to manage its components.\n  syntax:\n    content: >-\n      [System.ComponentModel.Browsable(false)]\n\n      public override System.ComponentModel.ISite Site { get; set; }\n    return:\n      type: System.ComponentModel.ISite\n      description: An <xref href=\"System.ComponentModel.ISite\"></xref> for the <xref href=\"System.Data.DataSet\"></xref>.\n  overload: System.Data.DataSet.Site*\n  exceptions: []\n  attributes:\n  - type: System.ComponentModel.BrowsableAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.DataSet.Tables\n  commentId: P:System.Data.DataSet.Tables\n  id: Tables\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: Tables\n  nameWithType: DataSet.Tables\n  fullName: DataSet.Tables\n  type: Property\n  assemblies:\n  - System.Data\n  - netstandard\n  - System.Data.Common\n  namespace: System.Data\n  summary: Gets the collection of tables contained in the <xref href=\"System.Data.DataSet\"></xref>.\n  remarks: To add tables to the collection, use <xref:System.Data.DataTableCollection.Add%2A> method of the <xref:System.Data.DataTableCollection>. To remove tables, use the <xref:System.Data.DataTableCollection.Remove%2A> method.\n  example:\n  - \"The following example returns the <xref:System.Data.DataSet> object's <xref:System.Data.DataTableCollection>, and prints the columns and rows in each table.  \\n  \\n [!code-csharp[Classic WebData DataSet.Tables Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.Tables Example/CS/source.cs#1)]\\n [!code-vb[Classic WebData DataSet.Tables Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.Tables Example/VB/source.vb#1)]\"\n  syntax:\n    content: public System.Data.DataTableCollection Tables { get; }\n    return:\n      type: System.Data.DataTableCollection\n      description: The <xref href=\"System.Data.DataTableCollection\"></xref> contained by this <xref href=\"System.Data.DataSet\"></xref>. An empty collection is returned if no <xref href=\"System.Data.DataTable\"></xref> objects exist.\n  overload: System.Data.DataSet.Tables*\n  exceptions: []\n  attributes: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.DataSet.WriteXml(System.Xml.XmlWriter,System.Data.XmlWriteMode)\n  commentId: M:System.Data.DataSet.WriteXml(System.Xml.XmlWriter,System.Data.XmlWriteMode)\n  id: WriteXml(System.Xml.XmlWriter,System.Data.XmlWriteMode)\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: WriteXml(XmlWriter, XmlWriteMode)\n  nameWithType: DataSet.WriteXml(XmlWriter, XmlWriteMode)\n  fullName: DataSet.WriteXml(XmlWriter, XmlWriteMode)\n  type: Method\n  assemblies:\n  - System.Data\n  - netstandard\n  - System.Data.Common\n  namespace: System.Data\n  summary: Writes the current data, and optionally the schema, for the <xref href=\"System.Data.DataSet\"></xref> using the specified <xref href=\"System.Xml.XmlWriter\"></xref> and <xref href=\"System.Data.XmlWriteMode\"></xref>. To write the schema, set the value for the <code>mode</code> parameter to `WriteSchema`.\n  remarks: \"The `WriteXml` method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataSet> into an XML document, whereas the <xref:System.Data.DataSet.WriteXmlSchema%2A> method writes only the schema. To write both data and schema, set the `mode` parameter to `WriteSchema`.  \\n  \\n Note that the same is true for the <xref:System.Data.DataSet.ReadXml%2A> and <xref:System.Data.DataSet.ReadXmlSchema%2A> methods, respectively. To read XML data, or both schema and data into the `DataSet`, use the `ReadXml` method. To read just the schema, use the `ReadXmlSchema` method.  \\n  \\n> [!NOTE]\\n>  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.\"\n  example:\n  - \"The following example creates a <xref:System.IO.FileStream?displayProperty=fullName> object that is used to create a new <xref:System.Xml.XmlTextWriter?displayProperty=fullName>. The <xref:System.Xml.XmlTextWriter> object is used with the <xref:System.Data.DataSet.WriteXml%2A> method to write an XML document.  \\n  \\n [!code-csharp[Classic WebData DataSet.WriteXml6 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.WriteXml6 Example/CS/source.cs#1)]\\n [!code-vb[Classic WebData DataSet.WriteXml6 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.WriteXml6 Example/VB/source.vb#1)]\"\n  syntax:\n    content: public void WriteXml (System.Xml.XmlWriter writer, System.Data.XmlWriteMode mode);\n    parameters:\n    - id: writer\n      type: System.Xml.XmlWriter\n      description: The <xref href=\"System.Xml.XmlWriter\"></xref> with which to write.\n    - id: mode\n      type: System.Data.XmlWriteMode\n      description: One of the <xref href=\"System.Data.XmlWriteMode\"></xref> values.\n  overload: System.Data.DataSet.WriteXml*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.DataSet.WriteXml(System.String,System.Data.XmlWriteMode)\n  commentId: M:System.Data.DataSet.WriteXml(System.String,System.Data.XmlWriteMode)\n  id: WriteXml(System.String,System.Data.XmlWriteMode)\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: WriteXml(String, XmlWriteMode)\n  nameWithType: DataSet.WriteXml(String, XmlWriteMode)\n  fullName: DataSet.WriteXml(String, XmlWriteMode)\n  type: Method\n  assemblies:\n  - System.Data\n  - netstandard\n  - System.Data.Common\n  namespace: System.Data\n  summary: Writes the current data, and optionally the schema, for the <xref href=\"System.Data.DataSet\"></xref> to the specified file using the specified <xref href=\"System.Data.XmlWriteMode\"></xref>. To write the schema, set the value for the <code>mode</code> parameter to `WriteSchema`.\n  remarks: \"The `WriteXml` method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataSet> into an XML document, whereas the <xref:System.Data.DataSet.WriteXmlSchema%2A> method writes only the schema. To write both data and schema, set the `mode` parameter to `WriteSchema`.  \\n  \\n Note that the same is true for the <xref:System.Data.DataSet.ReadXml%2A> and <xref:System.Data.DataSet.ReadXmlSchema%2A> methods, respectively. To read XML data, or both schema and data into the `DataSet`, use the `ReadXml` method. To read just the schema, use the `ReadXmlSchema` method.  \\n  \\n> [!NOTE]\\n>  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.\"\n  example:\n  - \"The following example uses the <xref:System.Data.DataSet.WriteXml%2A> method to write an XML document.  \\n  \\n [!code-csharp[Classic WebData DataSet.WriteXml7 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.WriteXml7 Example/CS/source.cs#1)]\\n [!code-vb[Classic WebData DataSet.WriteXml7 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.WriteXml7 Example/VB/source.vb#1)]\"\n  syntax:\n    content: public void WriteXml (string fileName, System.Data.XmlWriteMode mode);\n    parameters:\n    - id: fileName\n      type: System.String\n      description: The file name (including the path) to which to write.\n    - id: mode\n      type: System.Data.XmlWriteMode\n      description: One of the <xref href=\"System.Data.XmlWriteMode\"></xref> values.\n  overload: System.Data.DataSet.WriteXml*\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: <xref href=\"System.Security.Permissions.FileIOPermission\"></xref> is not set to <xref href=\"System.Security.Permissions.FileIOPermissionAccess.Write\"></xref>.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.DataSet.WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode)\n  commentId: M:System.Data.DataSet.WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode)\n  id: WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode)\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: WriteXml(TextWriter, XmlWriteMode)\n  nameWithType: DataSet.WriteXml(TextWriter, XmlWriteMode)\n  fullName: DataSet.WriteXml(TextWriter, XmlWriteMode)\n  type: Method\n  assemblies:\n  - System.Data\n  - netstandard\n  - System.Data.Common\n  namespace: System.Data\n  summary: Writes the current data, and optionally the schema, for the <xref href=\"System.Data.DataSet\"></xref> using the specified <xref href=\"System.IO.TextWriter\"></xref> and <xref href=\"System.Data.XmlWriteMode\"></xref>. To write the schema, set the value for the <code>mode</code> parameter to `WriteSchema`.\n  remarks: \"The `WriteXml` method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataSet> into an XML document, whereas the <xref:System.Data.DataSet.WriteXmlSchema%2A> method writes only the schema. To write both data and schema, set the `mode` parameter to `WriteSchema`.  \\n  \\n Note that the same is true for the <xref:System.Data.DataSet.ReadXml%2A> and <xref:System.Data.DataSet.ReadXmlSchema%2A> methods, respectively. To read XML data, or both schema and data into the `DataSet`, use the `ReadXml` method. To read just the schema, use the `ReadXmlSchema` method.  \\n  \\n> [!NOTE]\\n>  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.\"\n  example:\n  - \"The following example first creates a simple <xref:System.Data.DataSet> with one <xref:System.Data.DataTable>, two columns, and ten rows. The <xref:System.Data.DataSet> schema and data are written to disk by invoking the <xref:System.Data.DataSet.WriteXml%2A> method. A second <xref:System.Data.DataSet> is created and the <xref:System.Data.DataSet.ReadXml%2A> method is used to fill it with schema and data.  \\n  \\n [!code-csharp[Classic WebData DataSet.ReadXml2 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXml2 Example/CS/source.cs#1)]\\n [!code-vb[Classic WebData DataSet.ReadXml2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXml2 Example/VB/source.vb#1)]\"\n  syntax:\n    content: public void WriteXml (System.IO.TextWriter writer, System.Data.XmlWriteMode mode);\n    parameters:\n    - id: writer\n      type: System.IO.TextWriter\n      description: A <xref href=\"System.IO.TextWriter\"></xref> object used to write the document.\n    - id: mode\n      type: System.Data.XmlWriteMode\n      description: One of the <xref href=\"System.Data.XmlWriteMode\"></xref> values.\n  overload: System.Data.DataSet.WriteXml*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.DataSet.WriteXml(System.IO.Stream,System.Data.XmlWriteMode)\n  commentId: M:System.Data.DataSet.WriteXml(System.IO.Stream,System.Data.XmlWriteMode)\n  id: WriteXml(System.IO.Stream,System.Data.XmlWriteMode)\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: WriteXml(Stream, XmlWriteMode)\n  nameWithType: DataSet.WriteXml(Stream, XmlWriteMode)\n  fullName: DataSet.WriteXml(Stream, XmlWriteMode)\n  type: Method\n  assemblies:\n  - System.Data\n  - netstandard\n  - System.Data.Common\n  namespace: System.Data\n  summary: Writes the current data, and optionally the schema, for the <xref href=\"System.Data.DataSet\"></xref> using the specified <xref href=\"System.IO.Stream\"></xref> and <xref href=\"System.Data.XmlWriteMode\"></xref>. To write the schema, set the value for the <code>mode</code> parameter to `WriteSchema`.\n  remarks: \"The `WriteXml` method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataSet> into an XML document, whereas the <xref:System.Data.DataSet.WriteXmlSchema%2A> method writes only the schema. To write both data and schema, set the `mode` parameter to `WriteSchema`.  \\n  \\n Note that the same is true for the <xref:System.Data.DataSet.ReadXml%2A> and <xref:System.Data.DataSet.ReadXmlSchema%2A> methods, respectively. To read XML data, or both schema and data into the `DataSet`, use the `ReadXml` method. To read just the schema, use the `ReadXmlSchema` method.  \\n  \\n> [!NOTE]\\n>  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.\"\n  syntax:\n    content: public void WriteXml (System.IO.Stream stream, System.Data.XmlWriteMode mode);\n    parameters:\n    - id: stream\n      type: System.IO.Stream\n      description: A <xref href=\"System.IO.Stream\"></xref> object used to write to a file.\n    - id: mode\n      type: System.Data.XmlWriteMode\n      description: One of the <xref href=\"System.Data.XmlWriteMode\"></xref> values.\n  overload: System.Data.DataSet.WriteXml*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.DataSet.WriteXml(System.String)\n  commentId: M:System.Data.DataSet.WriteXml(System.String)\n  id: WriteXml(System.String)\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: WriteXml(String)\n  nameWithType: DataSet.WriteXml(String)\n  fullName: DataSet.WriteXml(String)\n  type: Method\n  assemblies:\n  - System.Data\n  - netstandard\n  - System.Data.Common\n  namespace: System.Data\n  summary: Writes the current data for the <xref href=\"System.Data.DataSet\"></xref> to the specified file.\n  remarks: \"The `WriteXml` method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataSet> into an XML document, whereas the <xref:System.Data.DataSet.WriteXmlSchema%2A> method writes only the schema. To write both data and schema, use one of the overloads that includes the `mode` parameter, and set its value to `WriteSchema`.  \\n  \\n Note that the same is true for the <xref:System.Data.DataSet.ReadXml%2A> and <xref:System.Data.DataSet.ReadXmlSchema%2A> methods, respectively. To read XML data, or both schema and data into the `DataSet`, use the `ReadXml` method. To read just the schema, use the `ReadXmlSchema` method.  \\n  \\n> [!NOTE]\\n>  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.\"\n  syntax:\n    content: public void WriteXml (string fileName);\n    parameters:\n    - id: fileName\n      type: System.String\n      description: The file name (including the path) to which to write.\n  overload: System.Data.DataSet.WriteXml*\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: <xref href=\"System.Security.Permissions.FileIOPermission\"></xref> is not set to <xref href=\"System.Security.Permissions.FileIOPermissionAccess.Write\"></xref>.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.DataSet.WriteXml(System.IO.TextWriter)\n  commentId: M:System.Data.DataSet.WriteXml(System.IO.TextWriter)\n  id: WriteXml(System.IO.TextWriter)\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: WriteXml(TextWriter)\n  nameWithType: DataSet.WriteXml(TextWriter)\n  fullName: DataSet.WriteXml(TextWriter)\n  type: Method\n  assemblies:\n  - System.Data\n  - netstandard\n  - System.Data.Common\n  namespace: System.Data\n  summary: Writes the current data for the <xref href=\"System.Data.DataSet\"></xref> using the specified <xref href=\"System.IO.TextWriter\"></xref>.\n  remarks: \"The `WriteXml` method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataSet> into an XML document, whereas the <xref:System.Data.DataSet.WriteXmlSchema%2A> method writes only the schema. To write both data and schema, use one of the overloads that includes the `mode` parameter, and set its value to `WriteSchema`.  \\n  \\n Note that the same is true for the <xref:System.Data.DataSet.ReadXml%2A> and <xref:System.Data.DataSet.ReadXmlSchema%2A> methods, respectively. To read XML data, or both schema and data into the `DataSet`, use the `ReadXml` method. To read just the schema, use the `ReadXmlSchema` method.  \\n  \\n> [!NOTE]\\n>  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.\"\n  syntax:\n    content: public void WriteXml (System.IO.TextWriter writer);\n    parameters:\n    - id: writer\n      type: System.IO.TextWriter\n      description: The <xref href=\"System.IO.TextWriter\"></xref> object with which to write.\n  overload: System.Data.DataSet.WriteXml*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.DataSet.WriteXml(System.Xml.XmlWriter)\n  commentId: M:System.Data.DataSet.WriteXml(System.Xml.XmlWriter)\n  id: WriteXml(System.Xml.XmlWriter)\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: WriteXml(XmlWriter)\n  nameWithType: DataSet.WriteXml(XmlWriter)\n  fullName: DataSet.WriteXml(XmlWriter)\n  type: Method\n  assemblies:\n  - System.Data\n  - netstandard\n  - System.Data.Common\n  namespace: System.Data\n  summary: Writes the current data for the <xref href=\"System.Data.DataSet\"></xref> to the specified <xref href=\"System.Xml.XmlWriter\"></xref>.\n  remarks: \"The `WriteXml` method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataSet> into an XML document, whereas the <xref:System.Data.DataSet.WriteXmlSchema%2A> method writes only the schema. To write both data and schema, use one of the overloads that includes the `mode` parameter, and set its value to `WriteSchema`.  \\n  \\n Note that the same is true for the <xref:System.Data.DataSet.ReadXml%2A> and <xref:System.Data.DataSet.ReadXmlSchema%2A> methods, respectively. To read XML data, or both schema and data into the `DataSet`, use the `ReadXml` method. To read just the schema, use the `ReadXmlSchema` method.  \\n  \\n> [!NOTE]\\n>  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.\"\n  syntax:\n    content: public void WriteXml (System.Xml.XmlWriter writer);\n    parameters:\n    - id: writer\n      type: System.Xml.XmlWriter\n      description: The <xref href=\"System.Xml.XmlWriter\"></xref> with which to write.\n  overload: System.Data.DataSet.WriteXml*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.DataSet.WriteXml(System.IO.Stream)\n  commentId: M:System.Data.DataSet.WriteXml(System.IO.Stream)\n  id: WriteXml(System.IO.Stream)\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: WriteXml(Stream)\n  nameWithType: DataSet.WriteXml(Stream)\n  fullName: DataSet.WriteXml(Stream)\n  type: Method\n  assemblies:\n  - System.Data\n  - netstandard\n  - System.Data.Common\n  namespace: System.Data\n  summary: Writes the current data for the <xref href=\"System.Data.DataSet\"></xref> using the specified <xref href=\"System.IO.Stream\"></xref>.\n  remarks: \"The `WriteXml` method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataSet> into an XML document, whereas the <xref:System.Data.DataSet.WriteXmlSchema%2A> method writes only the schema. To write both data and schema, use one of the overloads that includes the `mode` parameter, and set its value to `WriteSchema`.  \\n  \\n Note that the same is true for the <xref:System.Data.DataSet.ReadXml%2A> and <xref:System.Data.DataSet.ReadXmlSchema%2A> methods, respectively. To read XML data, or both schema and data into the `DataSet`, use the `ReadXml` method. To read just the schema, use the `ReadXmlSchema` method.  \\n  \\n> [!NOTE]\\n>  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.\"\n  example:\n  - \"The following example creates a <xref:System.IO.FileStream?displayProperty=fullName> object. The object is then used with the <xref:System.Data.DataSet.WriteXml%2A> method to write an XML document.  \\n  \\n [!code-csharp[Classic WebData DataSet.WriteXml Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.WriteXml Example/CS/source.cs#1)]\\n [!code-vb[Classic WebData DataSet.WriteXml Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.WriteXml Example/VB/source.vb#1)]\"\n  syntax:\n    content: public void WriteXml (System.IO.Stream stream);\n    parameters:\n    - id: stream\n      type: System.IO.Stream\n      description: A <xref href=\"System.IO.Stream\"></xref> object used to write to a file.\n  overload: System.Data.DataSet.WriteXml*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.DataSet.WriteXmlSchema(System.String,System.Converter{System.Type,System.String})\n  commentId: M:System.Data.DataSet.WriteXmlSchema(System.String,System.Converter{System.Type,System.String})\n  id: WriteXmlSchema(System.String,System.Converter{System.Type,System.String})\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: WriteXmlSchema(String, Converter<Type,String>)\n  nameWithType: DataSet.WriteXmlSchema(String, Converter<Type,String>)\n  fullName: DataSet.WriteXmlSchema(String, Converter<Type,String>)\n  type: Method\n  assemblies:\n  - System.Data\n  - netstandard\n  - System.Data.Common\n  namespace: System.Data\n  summary: Writes the <xref href=\"System.Data.DataSet\"></xref> structure as an XML schema to a file.\n  syntax:\n    content: public void WriteXmlSchema (string fileName, Converter<Type,string> multipleTargetConverter);\n    parameters:\n    - id: fileName\n      type: System.String\n      description: The name of the file to write to.\n    - id: multipleTargetConverter\n      type: System.Converter{System.Type,System.String}\n      description: A delegate used to convert <xref href=\"System.Type\"></xref> to string.\n  overload: System.Data.DataSet.WriteXmlSchema*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.DataSet.WriteXmlSchema(System.IO.Stream)\n  commentId: M:System.Data.DataSet.WriteXmlSchema(System.IO.Stream)\n  id: WriteXmlSchema(System.IO.Stream)\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: WriteXmlSchema(Stream)\n  nameWithType: DataSet.WriteXmlSchema(Stream)\n  fullName: DataSet.WriteXmlSchema(Stream)\n  type: Method\n  assemblies:\n  - System.Data\n  - netstandard\n  - System.Data.Common\n  namespace: System.Data\n  summary: Writes the <xref href=\"System.Data.DataSet\"></xref> structure as an XML schema to the specified <xref href=\"System.IO.Stream\"></xref> object.\n  remarks: \"Use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method to write the schema for a <xref:System.Data.DataSet> to an XML document. The schema includes table, relation, and constraint definitions. To write a schema to an XML document, use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method.  \\n  \\n The XML schema is written using the XSD standard.  \\n  \\n To write the data to an XML document, use the <xref:System.Data.DataSet.WriteXml%2A> method.  \\n  \\n Classes that derive from the <xref:System.IO.Stream> class include <xref:System.IO.BufferedStream>, <xref:System.IO.FileStream>, <xref:System.IO.MemoryStream>, and <xref:System.Net.Sockets.NetworkStream>.\"\n  example:\n  - \"The following example creates a new <xref:System.IO.FileStream> object that is passed to the <xref:System.Data.DataSet.WriteXmlSchema%2A> method to write the schema to disk.  \\n  \\n [!code-csharp[Classic WebData DataSet.WriteXmlSchema Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.WriteXmlSchema Example/CS/source.cs#1)]\\n [!code-vb[Classic WebData DataSet.WriteXmlSchema Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.WriteXmlSchema Example/VB/source.vb#1)]\"\n  syntax:\n    content: public void WriteXmlSchema (System.IO.Stream stream);\n    parameters:\n    - id: stream\n      type: System.IO.Stream\n      description: A <xref href=\"System.IO.Stream\"></xref> object used to write to a file.\n  overload: System.Data.DataSet.WriteXmlSchema*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.DataSet.WriteXmlSchema(System.IO.TextWriter)\n  commentId: M:System.Data.DataSet.WriteXmlSchema(System.IO.TextWriter)\n  id: WriteXmlSchema(System.IO.TextWriter)\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: WriteXmlSchema(TextWriter)\n  nameWithType: DataSet.WriteXmlSchema(TextWriter)\n  fullName: DataSet.WriteXmlSchema(TextWriter)\n  type: Method\n  assemblies:\n  - System.Data\n  - netstandard\n  - System.Data.Common\n  namespace: System.Data\n  summary: Writes the <xref href=\"System.Data.DataSet\"></xref> structure as an XML schema to the specified <xref href=\"System.IO.TextWriter\"></xref> object.\n  remarks: \"Use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method to write the schema for a <xref:System.Data.DataSet> to an XML document. The schema includes table, relation, and constraint definitions. To write a schema to an XML document, use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method.  \\n  \\n The XML schema is written using the XSD standard.  \\n  \\n To write the data to an XML document, use the <xref:System.Data.DataSet.WriteXml%2A> method.  \\n  \\n Classes the derive from the <xref:System.IO.TextWriter?displayProperty=fullName> class include the <xref:System.Web.HttpWriter?displayProperty=fullName>, <xref:System.CodeDom.Compiler.IndentedTextWriter?displayProperty=fullName>, <xref:System.Web.UI.HtmlTextWriter?displayProperty=fullName>, <xref:System.IO.StreamWriter?displayProperty=fullName>, and <xref:System.IO.StringWriter?displayProperty=fullName>.\"\n  example:\n  - \"The following example creates a <xref:System.Text.StringBuilder?displayProperty=fullName> object to that is used to create a new <xref:System.IO.StringWriter?displayProperty=fullName>. The <xref:System.IO.StringWriter> is passed to the <xref:System.Data.DataSet.WriteXmlSchema%2A> method, and the resulting string is printed to the console window.  \\n  \\n [!code-csharp[Classic WebData DataSet.WriteXmlSchema1 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.WriteXmlSchema1 Example/CS/source.cs#1)]\\n [!code-vb[Classic WebData DataSet.WriteXmlSchema1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.WriteXmlSchema1 Example/VB/source.vb#1)]\"\n  syntax:\n    content: public void WriteXmlSchema (System.IO.TextWriter writer);\n    parameters:\n    - id: writer\n      type: System.IO.TextWriter\n      description: The <xref href=\"System.IO.TextWriter\"></xref> object with which to write.\n  overload: System.Data.DataSet.WriteXmlSchema*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.DataSet.WriteXmlSchema(System.String)\n  commentId: M:System.Data.DataSet.WriteXmlSchema(System.String)\n  id: WriteXmlSchema(System.String)\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: WriteXmlSchema(String)\n  nameWithType: DataSet.WriteXmlSchema(String)\n  fullName: DataSet.WriteXmlSchema(String)\n  type: Method\n  assemblies:\n  - System.Data\n  - netstandard\n  - System.Data.Common\n  namespace: System.Data\n  summary: Writes the <xref href=\"System.Data.DataSet\"></xref> structure as an XML schema to a file.\n  remarks: \"Use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method to write the schema for a <xref:System.Data.DataSet> to an XML document. The schema includes table, relation, and constraint definitions. To write a schema to an XML document, use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method.  \\n  \\n The XML schema is written using the XSD standard.  \\n  \\n To write the data to an XML document, use the <xref:System.Data.DataSet.WriteXml%2A> method.\"\n  example:\n  - >-\n    [!code-csharp[Classic WebData DataSet.WriteXmlSchema3 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.WriteXmlSchema3 Example/CS/source.cs#1)]\n     [!code-vb[Classic WebData DataSet.WriteXmlSchema3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.WriteXmlSchema3 Example/VB/source.vb#1)]\n  syntax:\n    content: public void WriteXmlSchema (string fileName);\n    parameters:\n    - id: fileName\n      type: System.String\n      description: The file name (including the path) to which to write.\n  overload: System.Data.DataSet.WriteXmlSchema*\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: <xref href=\"System.Security.Permissions.FileIOPermission\"></xref> is not set to <xref href=\"System.Security.Permissions.FileIOPermissionAccess.Write\"></xref>.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.DataSet.WriteXmlSchema(System.Xml.XmlWriter)\n  commentId: M:System.Data.DataSet.WriteXmlSchema(System.Xml.XmlWriter)\n  id: WriteXmlSchema(System.Xml.XmlWriter)\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: WriteXmlSchema(XmlWriter)\n  nameWithType: DataSet.WriteXmlSchema(XmlWriter)\n  fullName: DataSet.WriteXmlSchema(XmlWriter)\n  type: Method\n  assemblies:\n  - System.Data\n  - netstandard\n  - System.Data.Common\n  namespace: System.Data\n  summary: Writes the <xref href=\"System.Data.DataSet\"></xref> structure as an XML schema to an <xref href=\"System.Xml.XmlWriter\"></xref> object.\n  remarks: \"Use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method to write the schema for a <xref:System.Data.DataSet> to an XML document. The schema includes table, relation, and constraint definitions. To write a schema to an XML document, use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method.  \\n  \\n The XML schema is written using the XSD standard.  \\n  \\n To write the data to an XML document, use the <xref:System.Data.DataSet.WriteXml%2A> method.  \\n  \\n One class that inherits from the <xref:System.Xml.XmlWriter?displayProperty=fullName> class is the <xref:System.Xml.XmlTextWriter?displayProperty=fullName> class.\"\n  example:\n  - \"The following example creates a new <xref:System.IO.FileStream?displayProperty=fullName> object with the specified path. The <xref:System.IO.FileStream> object is used to create an <xref:System.Xml.XMLTextWriter?displayProperty=fullName> object. The <xref:System.Data.DataSet.WriteXmlSchema%2A> method is then invoked with the <xref:System.Xml.XmlTextWriter> object to write the schema to the disk.  \\n  \\n [!code-csharp[Classic WebData DataSet.WriteXmlSchema2 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.WriteXmlSchema2 Example/CS/source.cs#1)]\\n [!code-vb[Classic WebData DataSet.WriteXmlSchema2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.WriteXmlSchema2 Example/VB/source.vb#1)]\"\n  syntax:\n    content: public void WriteXmlSchema (System.Xml.XmlWriter writer);\n    parameters:\n    - id: writer\n      type: System.Xml.XmlWriter\n      description: The <xref href=\"System.Xml.XmlWriter\"></xref> to write to.\n  overload: System.Data.DataSet.WriteXmlSchema*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.DataSet.WriteXmlSchema(System.IO.Stream,System.Converter{System.Type,System.String})\n  commentId: M:System.Data.DataSet.WriteXmlSchema(System.IO.Stream,System.Converter{System.Type,System.String})\n  id: WriteXmlSchema(System.IO.Stream,System.Converter{System.Type,System.String})\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: WriteXmlSchema(Stream, Converter<Type,String>)\n  nameWithType: DataSet.WriteXmlSchema(Stream, Converter<Type,String>)\n  fullName: DataSet.WriteXmlSchema(Stream, Converter<Type,String>)\n  type: Method\n  assemblies:\n  - System.Data\n  - netstandard\n  - System.Data.Common\n  namespace: System.Data\n  summary: Writes the <xref href=\"System.Data.DataSet\"></xref> structure as an XML schema to the specified <xref href=\"System.IO.Stream\"></xref> object.\n  syntax:\n    content: public void WriteXmlSchema (System.IO.Stream stream, Converter<Type,string> multipleTargetConverter);\n    parameters:\n    - id: stream\n      type: System.IO.Stream\n      description: A <xref href=\"System.IO.Stream\"></xref> object to write to.\n    - id: multipleTargetConverter\n      type: System.Converter{System.Type,System.String}\n      description: A delegate used to convert <xref href=\"System.Type\"></xref> to string.\n  overload: System.Data.DataSet.WriteXmlSchema*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.DataSet.WriteXmlSchema(System.IO.TextWriter,System.Converter{System.Type,System.String})\n  commentId: M:System.Data.DataSet.WriteXmlSchema(System.IO.TextWriter,System.Converter{System.Type,System.String})\n  id: WriteXmlSchema(System.IO.TextWriter,System.Converter{System.Type,System.String})\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: WriteXmlSchema(TextWriter, Converter<Type,String>)\n  nameWithType: DataSet.WriteXmlSchema(TextWriter, Converter<Type,String>)\n  fullName: DataSet.WriteXmlSchema(TextWriter, Converter<Type,String>)\n  type: Method\n  assemblies:\n  - System.Data\n  - netstandard\n  - System.Data.Common\n  namespace: System.Data\n  summary: Writes the <xref href=\"System.Data.DataSet\"></xref> structure as an XML schema to the specified <xref href=\"System.IO.TextWriter\"></xref>.\n  syntax:\n    content: public void WriteXmlSchema (System.IO.TextWriter writer, Converter<Type,string> multipleTargetConverter);\n    parameters:\n    - id: writer\n      type: System.IO.TextWriter\n      description: A <xref href=\"System.IO.TextWriter\"></xref> object to write to.\n    - id: multipleTargetConverter\n      type: System.Converter{System.Type,System.String}\n      description: A delegate used to convert <xref href=\"System.Type\"></xref> to string.\n  overload: System.Data.DataSet.WriteXmlSchema*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.DataSet.WriteXmlSchema(System.Xml.XmlWriter,System.Converter{System.Type,System.String})\n  commentId: M:System.Data.DataSet.WriteXmlSchema(System.Xml.XmlWriter,System.Converter{System.Type,System.String})\n  id: WriteXmlSchema(System.Xml.XmlWriter,System.Converter{System.Type,System.String})\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: WriteXmlSchema(XmlWriter, Converter<Type,String>)\n  nameWithType: DataSet.WriteXmlSchema(XmlWriter, Converter<Type,String>)\n  fullName: DataSet.WriteXmlSchema(XmlWriter, Converter<Type,String>)\n  type: Method\n  assemblies:\n  - System.Data\n  - netstandard\n  - System.Data.Common\n  namespace: System.Data\n  summary: Writes the <xref href=\"System.Data.DataSet\"></xref> structure as an XML schema to the specified <xref href=\"System.Xml.XmlWriter\"></xref>.\n  syntax:\n    content: public void WriteXmlSchema (System.Xml.XmlWriter writer, Converter<Type,string> multipleTargetConverter);\n    parameters:\n    - id: writer\n      type: System.Xml.XmlWriter\n      description: A <xref href=\"System.Xml.XmlWriter\"></xref> object to write to.\n    - id: multipleTargetConverter\n      type: System.Converter{System.Type,System.String}\n      description: A delegate used to convert <xref href=\"System.Type\"></xref> to string.\n  overload: System.Data.DataSet.WriteXmlSchema*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.DataSet.System#ComponentModel#IListSource#ContainsListCollection\n  commentId: P:System.Data.DataSet.System#ComponentModel#IListSource#ContainsListCollection\n  id: System#ComponentModel#IListSource#ContainsListCollection\n  isEii: true\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: IListSource.ContainsListCollection\n  nameWithType: DataSet.IListSource.ContainsListCollection\n  fullName: DataSet.IListSource.ContainsListCollection\n  type: Property\n  assemblies:\n  - System.Data\n  - netstandard\n  - System.Data.Common\n  namespace: System.Data\n  summary: For a description of this member, see <xref href=\"System.ComponentModel.IListSource.ContainsListCollection\"></xref>.\n  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.DataSet> instance is cast to an <xref:System.ComponentModel.IListSource> interface.\n  syntax:\n    content: bool System.ComponentModel.IListSource.ContainsListCollection { get; }\n    return:\n      type: System.Boolean\n      description: For a description of this member, see <xref href=\"System.ComponentModel.IListSource.ContainsListCollection\"></xref>.\n  overload: System.Data.DataSet.System#ComponentModel#IListSource#ContainsListCollection*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.DataSet.System#ComponentModel#IListSource#GetList\n  commentId: M:System.Data.DataSet.System#ComponentModel#IListSource#GetList\n  id: System#ComponentModel#IListSource#GetList\n  isEii: true\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: IListSource.GetList()\n  nameWithType: DataSet.IListSource.GetList()\n  fullName: DataSet.IListSource.GetList()\n  type: Method\n  assemblies:\n  - System.Data\n  - netstandard\n  - System.Data.Common\n  namespace: System.Data\n  summary: For a description of this member, see <xref href=\"System.ComponentModel.IListSource.GetList\"></xref>.\n  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.DataSet> instance is cast to an <xref:System.ComponentModel.IListSource> interface.\n  syntax:\n    content: System.Collections.IList IListSource.GetList ();\n    parameters: []\n    return:\n      type: System.Collections.IList\n      description: For a description of this member, see <xref href=\"System.ComponentModel.IListSource.GetList\"></xref>.\n  overload: System.Data.DataSet.System#ComponentModel#IListSource#GetList*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#GetSchema\n  commentId: M:System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#GetSchema\n  id: System#Xml#Serialization#IXmlSerializable#GetSchema\n  isEii: true\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: IXmlSerializable.GetSchema()\n  nameWithType: DataSet.IXmlSerializable.GetSchema()\n  fullName: DataSet.IXmlSerializable.GetSchema()\n  type: Method\n  assemblies:\n  - System.Data\n  - netstandard\n  - System.Data.Common\n  namespace: System.Data\n  summary: For a description of this member, see <xref href=\"System.Xml.Serialization.IXmlSerializable.GetSchema\"></xref>.\n  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.DataSet> instance is cast to an <xref:System.Xml.Serialization.IXmlSerializable> interface.\n  syntax:\n    content: System.Xml.Schema.XmlSchema IXmlSerializable.GetSchema ();\n    parameters: []\n    return:\n      type: System.Xml.Schema.XmlSchema\n      description: For a description of this member, see <xref href=\"System.Xml.Serialization.IXmlSerializable.GetSchema\"></xref>.\n  overload: System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#GetSchema*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)\n  commentId: M:System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)\n  id: System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)\n  isEii: true\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: IXmlSerializable.ReadXml(XmlReader)\n  nameWithType: DataSet.IXmlSerializable.ReadXml(XmlReader)\n  fullName: DataSet.IXmlSerializable.ReadXml(XmlReader)\n  type: Method\n  assemblies:\n  - System.Data\n  - netstandard\n  - System.Data.Common\n  namespace: System.Data\n  summary: For a description of this member, see <xref href=\"System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)\"></xref>.\n  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.DataSet> instance is cast to an <xref:System.Xml.Serialization.IXmlSerializable> interface.\n  syntax:\n    content: void IXmlSerializable.ReadXml (System.Xml.XmlReader reader);\n    parameters:\n    - id: reader\n      type: System.Xml.XmlReader\n      description: A <xref href=\"System.Xml.XmlReader\"></xref>.\n  overload: System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#ReadXml*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)\n  commentId: M:System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)\n  id: System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)\n  isEii: true\n  parent: System.Data.DataSet\n  langs:\n  - csharp\n  name: IXmlSerializable.WriteXml(XmlWriter)\n  nameWithType: DataSet.IXmlSerializable.WriteXml(XmlWriter)\n  fullName: DataSet.IXmlSerializable.WriteXml(XmlWriter)\n  type: Method\n  assemblies:\n  - System.Data\n  - netstandard\n  - System.Data.Common\n  namespace: System.Data\n  summary: For a description of this member, see <xref href=\"System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)\"></xref>.\n  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.DataSet> instance is cast to an <xref:System.Xml.Serialization.IXmlSerializable> interface.\n  syntax:\n    content: void IXmlSerializable.WriteXml (System.Xml.XmlWriter writer);\n    parameters:\n    - id: writer\n      type: System.Xml.XmlWriter\n      description: A <xref href=\"System.Xml.XmlWriter\"></xref>.\n  overload: System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#WriteXml*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\nreferences:\n- uid: System.ComponentModel.MarshalByValueComponent\n  parent: System.ComponentModel\n  isExternal: false\n  name: MarshalByValueComponent\n  nameWithType: MarshalByValueComponent\n  fullName: System.ComponentModel.MarshalByValueComponent\n- uid: System.Data.ConstraintException\n  parent: System.Data\n  isExternal: false\n  name: ConstraintException\n  nameWithType: ConstraintException\n  fullName: System.Data.ConstraintException\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.Security.SecurityException\n  parent: System.Security\n  isExternal: false\n  name: SecurityException\n  nameWithType: SecurityException\n  fullName: System.Security.SecurityException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.Data.DataSet.#ctor\n  parent: System.Data.DataSet\n  isExternal: false\n  name: DataSet()\n  nameWithType: DataSet.DataSet()\n  fullName: DataSet.DataSet()\n- uid: System.Data.DataSet.#ctor(System.String)\n  parent: System.Data.DataSet\n  isExternal: false\n  name: DataSet(String)\n  nameWithType: DataSet.DataSet(String)\n  fullName: DataSet.DataSet(String)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Data.DataSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  parent: System.Data.DataSet\n  isExternal: false\n  name: DataSet(SerializationInfo, StreamingContext)\n  nameWithType: DataSet.DataSet(SerializationInfo, StreamingContext)\n  fullName: DataSet.DataSet(SerializationInfo, StreamingContext)\n- uid: System.Runtime.Serialization.SerializationInfo\n  parent: System.Runtime.Serialization\n  isExternal: false\n  name: SerializationInfo\n  nameWithType: SerializationInfo\n  fullName: System.Runtime.Serialization.SerializationInfo\n- uid: System.Runtime.Serialization.StreamingContext\n  parent: System.Runtime.Serialization\n  isExternal: false\n  name: StreamingContext\n  nameWithType: StreamingContext\n  fullName: System.Runtime.Serialization.StreamingContext\n- uid: System.Data.DataSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Boolean)\n  parent: System.Data.DataSet\n  isExternal: false\n  name: DataSet(SerializationInfo, StreamingContext, Boolean)\n  nameWithType: DataSet.DataSet(SerializationInfo, StreamingContext, Boolean)\n  fullName: DataSet.DataSet(SerializationInfo, StreamingContext, Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Data.DataSet.AcceptChanges\n  parent: System.Data.DataSet\n  isExternal: false\n  name: AcceptChanges()\n  nameWithType: DataSet.AcceptChanges()\n  fullName: DataSet.AcceptChanges()\n- uid: System.Data.DataSet.BeginInit\n  parent: System.Data.DataSet\n  isExternal: false\n  name: BeginInit()\n  nameWithType: DataSet.BeginInit()\n  fullName: DataSet.BeginInit()\n- uid: System.Data.DataSet.CaseSensitive\n  parent: System.Data.DataSet\n  isExternal: false\n  name: CaseSensitive\n  nameWithType: DataSet.CaseSensitive\n  fullName: DataSet.CaseSensitive\n- uid: System.Data.DataSet.Clear\n  parent: System.Data.DataSet\n  isExternal: false\n  name: Clear()\n  nameWithType: DataSet.Clear()\n  fullName: DataSet.Clear()\n- uid: System.Data.DataSet.Clone\n  parent: System.Data.DataSet\n  isExternal: false\n  name: Clone()\n  nameWithType: DataSet.Clone()\n  fullName: DataSet.Clone()\n- uid: System.Data.DataSet\n  parent: System.Data\n  isExternal: false\n  name: DataSet\n  nameWithType: DataSet\n  fullName: System.Data.DataSet\n- uid: System.Data.DataSet.Copy\n  parent: System.Data.DataSet\n  isExternal: false\n  name: Copy()\n  nameWithType: DataSet.Copy()\n  fullName: DataSet.Copy()\n- uid: System.Data.DataSet.CreateDataReader(System.Data.DataTable[])\n  parent: System.Data.DataSet\n  isExternal: false\n  name: CreateDataReader(DataTable[])\n  nameWithType: DataSet.CreateDataReader(DataTable[])\n  fullName: DataSet.CreateDataReader(DataTable[])\n- uid: System.Data.DataTableReader\n  parent: System.Data\n  isExternal: false\n  name: DataTableReader\n  nameWithType: DataTableReader\n  fullName: System.Data.DataTableReader\n- uid: System.Data.DataTable\n  name: DataTable\n  nameWithType: DataTable\n  fullName: System.Data.DataTable\n- uid: System.Data.DataTable[]\n  parent: System.Data\n  isExternal: false\n  name: DataTable[]\n  nameWithType: DataTable[]\n  fullName: System.Data.DataTable[]\n  spec.csharp:\n  - uid: System.Data.DataTable\n    name: DataTable\n    nameWithType: DataTable\n    fullName: System.Data.DataTable\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Data.DataSet.CreateDataReader\n  parent: System.Data.DataSet\n  isExternal: false\n  name: CreateDataReader()\n  nameWithType: DataSet.CreateDataReader()\n  fullName: DataSet.CreateDataReader()\n- uid: System.Data.DataSet.DataSetName\n  parent: System.Data.DataSet\n  isExternal: false\n  name: DataSetName\n  nameWithType: DataSet.DataSetName\n  fullName: DataSet.DataSetName\n- uid: System.Data.DataSet.DefaultViewManager\n  parent: System.Data.DataSet\n  isExternal: false\n  name: DefaultViewManager\n  nameWithType: DataSet.DefaultViewManager\n  fullName: DataSet.DefaultViewManager\n- uid: System.Data.DataViewManager\n  parent: System.Data\n  isExternal: false\n  name: DataViewManager\n  nameWithType: DataViewManager\n  fullName: System.Data.DataViewManager\n- uid: System.Data.DataSet.DetermineSchemaSerializationMode(System.Xml.XmlReader)\n  parent: System.Data.DataSet\n  isExternal: false\n  name: DetermineSchemaSerializationMode(XmlReader)\n  nameWithType: DataSet.DetermineSchemaSerializationMode(XmlReader)\n  fullName: DataSet.DetermineSchemaSerializationMode(XmlReader)\n- uid: System.Data.SchemaSerializationMode\n  parent: System.Data\n  isExternal: false\n  name: SchemaSerializationMode\n  nameWithType: SchemaSerializationMode\n  fullName: System.Data.SchemaSerializationMode\n- uid: System.Xml.XmlReader\n  parent: System.Xml\n  isExternal: false\n  name: XmlReader\n  nameWithType: XmlReader\n  fullName: System.Xml.XmlReader\n- uid: System.Data.DataSet.DetermineSchemaSerializationMode(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  parent: System.Data.DataSet\n  isExternal: false\n  name: DetermineSchemaSerializationMode(SerializationInfo, StreamingContext)\n  nameWithType: DataSet.DetermineSchemaSerializationMode(SerializationInfo, StreamingContext)\n  fullName: DataSet.DetermineSchemaSerializationMode(SerializationInfo, StreamingContext)\n- uid: System.Data.DataSet.EndInit\n  parent: System.Data.DataSet\n  isExternal: false\n  name: EndInit()\n  nameWithType: DataSet.EndInit()\n  fullName: DataSet.EndInit()\n- uid: System.Data.DataSet.EnforceConstraints\n  parent: System.Data.DataSet\n  isExternal: false\n  name: EnforceConstraints\n  nameWithType: DataSet.EnforceConstraints\n  fullName: DataSet.EnforceConstraints\n- uid: System.Data.DataSet.ExtendedProperties\n  parent: System.Data.DataSet\n  isExternal: false\n  name: ExtendedProperties\n  nameWithType: DataSet.ExtendedProperties\n  fullName: DataSet.ExtendedProperties\n- uid: System.Data.PropertyCollection\n  parent: System.Data\n  isExternal: false\n  name: PropertyCollection\n  nameWithType: PropertyCollection\n  fullName: System.Data.PropertyCollection\n- uid: System.Data.DataSet.GetChanges\n  parent: System.Data.DataSet\n  isExternal: false\n  name: GetChanges()\n  nameWithType: DataSet.GetChanges()\n  fullName: DataSet.GetChanges()\n- uid: System.Data.DataSet.GetChanges(System.Data.DataRowState)\n  parent: System.Data.DataSet\n  isExternal: false\n  name: GetChanges(DataRowState)\n  nameWithType: DataSet.GetChanges(DataRowState)\n  fullName: DataSet.GetChanges(DataRowState)\n- uid: System.Data.DataRowState\n  parent: System.Data\n  isExternal: false\n  name: DataRowState\n  nameWithType: DataRowState\n  fullName: System.Data.DataRowState\n- uid: System.Data.DataSet.GetDataSetSchema(System.Xml.Schema.XmlSchemaSet)\n  parent: System.Data.DataSet\n  isExternal: false\n  name: GetDataSetSchema(XmlSchemaSet)\n  nameWithType: DataSet.GetDataSetSchema(XmlSchemaSet)\n  fullName: DataSet.GetDataSetSchema(XmlSchemaSet)\n- uid: System.Xml.Schema.XmlSchemaComplexType\n  parent: System.Xml.Schema\n  isExternal: false\n  name: XmlSchemaComplexType\n  nameWithType: XmlSchemaComplexType\n  fullName: System.Xml.Schema.XmlSchemaComplexType\n- uid: System.Xml.Schema.XmlSchemaSet\n  parent: System.Xml.Schema\n  isExternal: false\n  name: XmlSchemaSet\n  nameWithType: XmlSchemaSet\n  fullName: System.Xml.Schema.XmlSchemaSet\n- uid: System.Data.DataSet.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  parent: System.Data.DataSet\n  isExternal: false\n  name: GetObjectData(SerializationInfo, StreamingContext)\n  nameWithType: DataSet.GetObjectData(SerializationInfo, StreamingContext)\n  fullName: DataSet.GetObjectData(SerializationInfo, StreamingContext)\n- uid: System.Data.DataSet.GetSchemaSerializable\n  parent: System.Data.DataSet\n  isExternal: false\n  name: GetSchemaSerializable()\n  nameWithType: DataSet.GetSchemaSerializable()\n  fullName: DataSet.GetSchemaSerializable()\n- uid: System.Xml.Schema.XmlSchema\n  parent: System.Xml.Schema\n  isExternal: false\n  name: XmlSchema\n  nameWithType: XmlSchema\n  fullName: System.Xml.Schema.XmlSchema\n- uid: System.Data.DataSet.GetSerializationData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  parent: System.Data.DataSet\n  isExternal: false\n  name: GetSerializationData(SerializationInfo, StreamingContext)\n  nameWithType: DataSet.GetSerializationData(SerializationInfo, StreamingContext)\n  fullName: DataSet.GetSerializationData(SerializationInfo, StreamingContext)\n- uid: System.Data.DataSet.GetXml\n  parent: System.Data.DataSet\n  isExternal: false\n  name: GetXml()\n  nameWithType: DataSet.GetXml()\n  fullName: DataSet.GetXml()\n- uid: System.Data.DataSet.GetXmlSchema\n  parent: System.Data.DataSet\n  isExternal: false\n  name: GetXmlSchema()\n  nameWithType: DataSet.GetXmlSchema()\n  fullName: DataSet.GetXmlSchema()\n- uid: System.Data.DataSet.HasChanges\n  parent: System.Data.DataSet\n  isExternal: false\n  name: HasChanges()\n  nameWithType: DataSet.HasChanges()\n  fullName: DataSet.HasChanges()\n- uid: System.Data.DataSet.HasChanges(System.Data.DataRowState)\n  parent: System.Data.DataSet\n  isExternal: false\n  name: HasChanges(DataRowState)\n  nameWithType: DataSet.HasChanges(DataRowState)\n  fullName: DataSet.HasChanges(DataRowState)\n- uid: System.Data.DataSet.HasErrors\n  parent: System.Data.DataSet\n  isExternal: false\n  name: HasErrors\n  nameWithType: DataSet.HasErrors\n  fullName: DataSet.HasErrors\n- uid: System.Data.DataSet.InferXmlSchema(System.IO.Stream,System.String[])\n  parent: System.Data.DataSet\n  isExternal: false\n  name: InferXmlSchema(Stream, String[])\n  nameWithType: DataSet.InferXmlSchema(Stream, String[])\n  fullName: DataSet.InferXmlSchema(Stream, String[])\n- uid: System.IO.Stream\n  parent: System.IO\n  isExternal: false\n  name: Stream\n  nameWithType: Stream\n  fullName: System.IO.Stream\n- uid: System.String[]\n  parent: System\n  isExternal: false\n  name: String[]\n  nameWithType: String[]\n  fullName: System.String[]\n  spec.csharp:\n  - uid: System.String\n    name: String\n    nameWithType: String\n    fullName: System.String\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Data.DataSet.InferXmlSchema(System.IO.TextReader,System.String[])\n  parent: System.Data.DataSet\n  isExternal: false\n  name: InferXmlSchema(TextReader, String[])\n  nameWithType: DataSet.InferXmlSchema(TextReader, String[])\n  fullName: DataSet.InferXmlSchema(TextReader, String[])\n- uid: System.IO.TextReader\n  parent: System.IO\n  isExternal: false\n  name: TextReader\n  nameWithType: TextReader\n  fullName: System.IO.TextReader\n- uid: System.Data.DataSet.InferXmlSchema(System.String,System.String[])\n  parent: System.Data.DataSet\n  isExternal: false\n  name: InferXmlSchema(String, String[])\n  nameWithType: DataSet.InferXmlSchema(String, String[])\n  fullName: DataSet.InferXmlSchema(String, String[])\n- uid: System.Data.DataSet.InferXmlSchema(System.Xml.XmlReader,System.String[])\n  parent: System.Data.DataSet\n  isExternal: false\n  name: InferXmlSchema(XmlReader, String[])\n  nameWithType: DataSet.InferXmlSchema(XmlReader, String[])\n  fullName: DataSet.InferXmlSchema(XmlReader, String[])\n- uid: System.Data.DataSet.Initialized\n  parent: System.Data.DataSet\n  isExternal: false\n  name: Initialized\n  nameWithType: DataSet.Initialized\n  fullName: DataSet.Initialized\n- uid: System.EventHandler\n  parent: System\n  isExternal: false\n  name: EventHandler\n  nameWithType: EventHandler\n  fullName: System.EventHandler\n- uid: System.Data.DataSet.InitializeDerivedDataSet\n  parent: System.Data.DataSet\n  isExternal: false\n  name: InitializeDerivedDataSet()\n  nameWithType: DataSet.InitializeDerivedDataSet()\n  fullName: DataSet.InitializeDerivedDataSet()\n- uid: System.Data.DataSet.IsBinarySerialized(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  parent: System.Data.DataSet\n  isExternal: false\n  name: IsBinarySerialized(SerializationInfo, StreamingContext)\n  nameWithType: DataSet.IsBinarySerialized(SerializationInfo, StreamingContext)\n  fullName: DataSet.IsBinarySerialized(SerializationInfo, StreamingContext)\n- uid: System.Data.DataSet.IsInitialized\n  parent: System.Data.DataSet\n  isExternal: false\n  name: IsInitialized\n  nameWithType: DataSet.IsInitialized\n  fullName: DataSet.IsInitialized\n- uid: System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.DataTable[])\n  parent: System.Data.DataSet\n  isExternal: false\n  name: Load(IDataReader, LoadOption, DataTable[])\n  nameWithType: DataSet.Load(IDataReader, LoadOption, DataTable[])\n  fullName: DataSet.Load(IDataReader, LoadOption, DataTable[])\n- uid: System.Data.IDataReader\n  parent: System.Data\n  isExternal: false\n  name: IDataReader\n  nameWithType: IDataReader\n  fullName: System.Data.IDataReader\n- uid: System.Data.LoadOption\n  parent: System.Data\n  isExternal: false\n  name: LoadOption\n  nameWithType: LoadOption\n  fullName: System.Data.LoadOption\n- uid: System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.String[])\n  parent: System.Data.DataSet\n  isExternal: false\n  name: Load(IDataReader, LoadOption, String[])\n  nameWithType: DataSet.Load(IDataReader, LoadOption, String[])\n  fullName: DataSet.Load(IDataReader, LoadOption, String[])\n- uid: System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler,System.Data.DataTable[])\n  parent: System.Data.DataSet\n  isExternal: false\n  name: Load(IDataReader, LoadOption, FillErrorEventHandler, DataTable[])\n  nameWithType: DataSet.Load(IDataReader, LoadOption, FillErrorEventHandler, DataTable[])\n  fullName: DataSet.Load(IDataReader, LoadOption, FillErrorEventHandler, DataTable[])\n- uid: System.Data.FillErrorEventHandler\n  parent: System.Data\n  isExternal: false\n  name: FillErrorEventHandler\n  nameWithType: FillErrorEventHandler\n  fullName: System.Data.FillErrorEventHandler\n- uid: System.Data.DataSet.Locale\n  parent: System.Data.DataSet\n  isExternal: false\n  name: Locale\n  nameWithType: DataSet.Locale\n  fullName: DataSet.Locale\n- uid: System.Globalization.CultureInfo\n  parent: System.Globalization\n  isExternal: false\n  name: CultureInfo\n  nameWithType: CultureInfo\n  fullName: System.Globalization.CultureInfo\n- uid: System.Data.DataSet.Merge(System.Data.DataRow[])\n  parent: System.Data.DataSet\n  isExternal: false\n  name: Merge(DataRow[])\n  nameWithType: DataSet.Merge(DataRow[])\n  fullName: DataSet.Merge(DataRow[])\n- uid: System.Data.DataRow\n  name: DataRow\n  nameWithType: DataRow\n  fullName: System.Data.DataRow\n- uid: System.Data.DataRow[]\n  parent: System.Data\n  isExternal: false\n  name: DataRow[]\n  nameWithType: DataRow[]\n  fullName: System.Data.DataRow[]\n  spec.csharp:\n  - uid: System.Data.DataRow\n    name: DataRow\n    nameWithType: DataRow\n    fullName: System.Data.DataRow\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Data.DataSet.Merge(System.Data.DataSet)\n  parent: System.Data.DataSet\n  isExternal: false\n  name: Merge(DataSet)\n  nameWithType: DataSet.Merge(DataSet)\n  fullName: DataSet.Merge(DataSet)\n- uid: System.Data.DataSet.Merge(System.Data.DataTable)\n  parent: System.Data.DataSet\n  isExternal: false\n  name: Merge(DataTable)\n  nameWithType: DataSet.Merge(DataTable)\n  fullName: DataSet.Merge(DataTable)\n- uid: System.Data.DataSet.Merge(System.Data.DataSet,System.Boolean)\n  parent: System.Data.DataSet\n  isExternal: false\n  name: Merge(DataSet, Boolean)\n  nameWithType: DataSet.Merge(DataSet, Boolean)\n  fullName: DataSet.Merge(DataSet, Boolean)\n- uid: System.Data.DataSet.Merge(System.Data.DataRow[],System.Boolean,System.Data.MissingSchemaAction)\n  parent: System.Data.DataSet\n  isExternal: false\n  name: Merge(DataRow[], Boolean, MissingSchemaAction)\n  nameWithType: DataSet.Merge(DataRow[], Boolean, MissingSchemaAction)\n  fullName: DataSet.Merge(DataRow[], Boolean, MissingSchemaAction)\n- uid: System.Data.MissingSchemaAction\n  parent: System.Data\n  isExternal: false\n  name: MissingSchemaAction\n  nameWithType: MissingSchemaAction\n  fullName: System.Data.MissingSchemaAction\n- uid: System.Data.DataSet.Merge(System.Data.DataSet,System.Boolean,System.Data.MissingSchemaAction)\n  parent: System.Data.DataSet\n  isExternal: false\n  name: Merge(DataSet, Boolean, MissingSchemaAction)\n  nameWithType: DataSet.Merge(DataSet, Boolean, MissingSchemaAction)\n  fullName: DataSet.Merge(DataSet, Boolean, MissingSchemaAction)\n- uid: System.Data.DataSet.Merge(System.Data.DataTable,System.Boolean,System.Data.MissingSchemaAction)\n  parent: System.Data.DataSet\n  isExternal: false\n  name: Merge(DataTable, Boolean, MissingSchemaAction)\n  nameWithType: DataSet.Merge(DataTable, Boolean, MissingSchemaAction)\n  fullName: DataSet.Merge(DataTable, Boolean, MissingSchemaAction)\n- uid: System.Data.DataSet.MergeFailed\n  parent: System.Data.DataSet\n  isExternal: false\n  name: MergeFailed\n  nameWithType: DataSet.MergeFailed\n  fullName: DataSet.MergeFailed\n- uid: System.Data.MergeFailedEventHandler\n  parent: System.Data\n  isExternal: false\n  name: MergeFailedEventHandler\n  nameWithType: MergeFailedEventHandler\n  fullName: System.Data.MergeFailedEventHandler\n- uid: System.Data.DataSet.Namespace\n  parent: System.Data.DataSet\n  isExternal: false\n  name: Namespace\n  nameWithType: DataSet.Namespace\n  fullName: DataSet.Namespace\n- uid: System.Data.DataSet.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)\n  parent: System.Data.DataSet\n  isExternal: false\n  name: OnPropertyChanging(PropertyChangedEventArgs)\n  nameWithType: DataSet.OnPropertyChanging(PropertyChangedEventArgs)\n  fullName: DataSet.OnPropertyChanging(PropertyChangedEventArgs)\n- uid: System.ComponentModel.PropertyChangedEventArgs\n  parent: System.ComponentModel\n  isExternal: false\n  name: PropertyChangedEventArgs\n  nameWithType: PropertyChangedEventArgs\n  fullName: System.ComponentModel.PropertyChangedEventArgs\n- uid: System.Data.DataSet.OnRemoveRelation(System.Data.DataRelation)\n  parent: System.Data.DataSet\n  isExternal: false\n  name: OnRemoveRelation(DataRelation)\n  nameWithType: DataSet.OnRemoveRelation(DataRelation)\n  fullName: DataSet.OnRemoveRelation(DataRelation)\n- uid: System.Data.DataRelation\n  parent: System.Data\n  isExternal: false\n  name: DataRelation\n  nameWithType: DataRelation\n  fullName: System.Data.DataRelation\n- uid: System.Data.DataSet.OnRemoveTable(System.Data.DataTable)\n  parent: System.Data.DataSet\n  isExternal: false\n  name: OnRemoveTable(DataTable)\n  nameWithType: DataSet.OnRemoveTable(DataTable)\n  fullName: DataSet.OnRemoveTable(DataTable)\n- uid: System.Data.DataSet.Prefix\n  parent: System.Data.DataSet\n  isExternal: false\n  name: Prefix\n  nameWithType: DataSet.Prefix\n  fullName: DataSet.Prefix\n- uid: System.Data.DataSet.RaisePropertyChanging(System.String)\n  parent: System.Data.DataSet\n  isExternal: false\n  name: RaisePropertyChanging(String)\n  nameWithType: DataSet.RaisePropertyChanging(String)\n  fullName: DataSet.RaisePropertyChanging(String)\n- uid: System.Data.DataSet.ReadXml(System.Xml.XmlReader,System.Data.XmlReadMode)\n  parent: System.Data.DataSet\n  isExternal: false\n  name: ReadXml(XmlReader, XmlReadMode)\n  nameWithType: DataSet.ReadXml(XmlReader, XmlReadMode)\n  fullName: DataSet.ReadXml(XmlReader, XmlReadMode)\n- uid: System.Data.XmlReadMode\n  parent: System.Data\n  isExternal: false\n  name: XmlReadMode\n  nameWithType: XmlReadMode\n  fullName: System.Data.XmlReadMode\n- uid: System.Data.DataSet.ReadXml(System.String,System.Data.XmlReadMode)\n  parent: System.Data.DataSet\n  isExternal: false\n  name: ReadXml(String, XmlReadMode)\n  nameWithType: DataSet.ReadXml(String, XmlReadMode)\n  fullName: DataSet.ReadXml(String, XmlReadMode)\n- uid: System.Data.DataSet.ReadXml(System.IO.Stream,System.Data.XmlReadMode)\n  parent: System.Data.DataSet\n  isExternal: false\n  name: ReadXml(Stream, XmlReadMode)\n  nameWithType: DataSet.ReadXml(Stream, XmlReadMode)\n  fullName: DataSet.ReadXml(Stream, XmlReadMode)\n- uid: System.Data.DataSet.ReadXml(System.IO.TextReader,System.Data.XmlReadMode)\n  parent: System.Data.DataSet\n  isExternal: false\n  name: ReadXml(TextReader, XmlReadMode)\n  nameWithType: DataSet.ReadXml(TextReader, XmlReadMode)\n  fullName: DataSet.ReadXml(TextReader, XmlReadMode)\n- uid: System.Data.DataSet.ReadXml(System.String)\n  parent: System.Data.DataSet\n  isExternal: false\n  name: ReadXml(String)\n  nameWithType: DataSet.ReadXml(String)\n  fullName: DataSet.ReadXml(String)\n- uid: System.Data.DataSet.ReadXml(System.IO.TextReader)\n  parent: System.Data.DataSet\n  isExternal: false\n  name: ReadXml(TextReader)\n  nameWithType: DataSet.ReadXml(TextReader)\n  fullName: DataSet.ReadXml(TextReader)\n- uid: System.Data.DataSet.ReadXml(System.IO.Stream)\n  parent: System.Data.DataSet\n  isExternal: false\n  name: ReadXml(Stream)\n  nameWithType: DataSet.ReadXml(Stream)\n  fullName: DataSet.ReadXml(Stream)\n- uid: System.Data.DataSet.ReadXml(System.Xml.XmlReader)\n  parent: System.Data.DataSet\n  isExternal: false\n  name: ReadXml(XmlReader)\n  nameWithType: DataSet.ReadXml(XmlReader)\n  fullName: DataSet.ReadXml(XmlReader)\n- uid: System.Data.DataSet.ReadXmlSchema(System.IO.Stream)\n  parent: System.Data.DataSet\n  isExternal: false\n  name: ReadXmlSchema(Stream)\n  nameWithType: DataSet.ReadXmlSchema(Stream)\n  fullName: DataSet.ReadXmlSchema(Stream)\n- uid: System.Data.DataSet.ReadXmlSchema(System.IO.TextReader)\n  parent: System.Data.DataSet\n  isExternal: false\n  name: ReadXmlSchema(TextReader)\n  nameWithType: DataSet.ReadXmlSchema(TextReader)\n  fullName: DataSet.ReadXmlSchema(TextReader)\n- uid: System.Data.DataSet.ReadXmlSchema(System.String)\n  parent: System.Data.DataSet\n  isExternal: false\n  name: ReadXmlSchema(String)\n  nameWithType: DataSet.ReadXmlSchema(String)\n  fullName: DataSet.ReadXmlSchema(String)\n- uid: System.Data.DataSet.ReadXmlSchema(System.Xml.XmlReader)\n  parent: System.Data.DataSet\n  isExternal: false\n  name: ReadXmlSchema(XmlReader)\n  nameWithType: DataSet.ReadXmlSchema(XmlReader)\n  fullName: DataSet.ReadXmlSchema(XmlReader)\n- uid: System.Data.DataSet.ReadXmlSerializable(System.Xml.XmlReader)\n  parent: System.Data.DataSet\n  isExternal: false\n  name: ReadXmlSerializable(XmlReader)\n  nameWithType: DataSet.ReadXmlSerializable(XmlReader)\n  fullName: DataSet.ReadXmlSerializable(XmlReader)\n- uid: System.Data.DataSet.RejectChanges\n  parent: System.Data.DataSet\n  isExternal: false\n  name: RejectChanges()\n  nameWithType: DataSet.RejectChanges()\n  fullName: DataSet.RejectChanges()\n- uid: System.Data.DataSet.Relations\n  parent: System.Data.DataSet\n  isExternal: false\n  name: Relations\n  nameWithType: DataSet.Relations\n  fullName: DataSet.Relations\n- uid: System.Data.DataRelationCollection\n  parent: System.Data\n  isExternal: false\n  name: DataRelationCollection\n  nameWithType: DataRelationCollection\n  fullName: System.Data.DataRelationCollection\n- uid: System.Data.DataSet.RemotingFormat\n  parent: System.Data.DataSet\n  isExternal: false\n  name: RemotingFormat\n  nameWithType: DataSet.RemotingFormat\n  fullName: DataSet.RemotingFormat\n- uid: System.Data.SerializationFormat\n  parent: System.Data\n  isExternal: false\n  name: SerializationFormat\n  nameWithType: SerializationFormat\n  fullName: System.Data.SerializationFormat\n- uid: System.Data.DataSet.Reset\n  parent: System.Data.DataSet\n  isExternal: false\n  name: Reset()\n  nameWithType: DataSet.Reset()\n  fullName: DataSet.Reset()\n- uid: System.Data.DataSet.SchemaSerializationMode\n  parent: System.Data.DataSet\n  isExternal: false\n  name: SchemaSerializationMode\n  nameWithType: DataSet.SchemaSerializationMode\n  fullName: DataSet.SchemaSerializationMode\n- uid: System.Data.DataSet.ShouldSerializeRelations\n  parent: System.Data.DataSet\n  isExternal: false\n  name: ShouldSerializeRelations()\n  nameWithType: DataSet.ShouldSerializeRelations()\n  fullName: DataSet.ShouldSerializeRelations()\n- uid: System.Data.DataSet.ShouldSerializeTables\n  parent: System.Data.DataSet\n  isExternal: false\n  name: ShouldSerializeTables()\n  nameWithType: DataSet.ShouldSerializeTables()\n  fullName: DataSet.ShouldSerializeTables()\n- uid: System.Data.DataSet.Site\n  parent: System.Data.DataSet\n  isExternal: false\n  name: Site\n  nameWithType: DataSet.Site\n  fullName: DataSet.Site\n- uid: System.ComponentModel.ISite\n  parent: System.ComponentModel\n  isExternal: false\n  name: ISite\n  nameWithType: ISite\n  fullName: System.ComponentModel.ISite\n- uid: System.Data.DataSet.Tables\n  parent: System.Data.DataSet\n  isExternal: false\n  name: Tables\n  nameWithType: DataSet.Tables\n  fullName: DataSet.Tables\n- uid: System.Data.DataTableCollection\n  parent: System.Data\n  isExternal: false\n  name: DataTableCollection\n  nameWithType: DataTableCollection\n  fullName: System.Data.DataTableCollection\n- uid: System.Data.DataSet.WriteXml(System.Xml.XmlWriter,System.Data.XmlWriteMode)\n  parent: System.Data.DataSet\n  isExternal: false\n  name: WriteXml(XmlWriter, XmlWriteMode)\n  nameWithType: DataSet.WriteXml(XmlWriter, XmlWriteMode)\n  fullName: DataSet.WriteXml(XmlWriter, XmlWriteMode)\n- uid: System.Xml.XmlWriter\n  parent: System.Xml\n  isExternal: false\n  name: XmlWriter\n  nameWithType: XmlWriter\n  fullName: System.Xml.XmlWriter\n- uid: System.Data.XmlWriteMode\n  parent: System.Data\n  isExternal: false\n  name: XmlWriteMode\n  nameWithType: XmlWriteMode\n  fullName: System.Data.XmlWriteMode\n- uid: System.Data.DataSet.WriteXml(System.String,System.Data.XmlWriteMode)\n  parent: System.Data.DataSet\n  isExternal: false\n  name: WriteXml(String, XmlWriteMode)\n  nameWithType: DataSet.WriteXml(String, XmlWriteMode)\n  fullName: DataSet.WriteXml(String, XmlWriteMode)\n- uid: System.Data.DataSet.WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode)\n  parent: System.Data.DataSet\n  isExternal: false\n  name: WriteXml(TextWriter, XmlWriteMode)\n  nameWithType: DataSet.WriteXml(TextWriter, XmlWriteMode)\n  fullName: DataSet.WriteXml(TextWriter, XmlWriteMode)\n- uid: System.IO.TextWriter\n  parent: System.IO\n  isExternal: false\n  name: TextWriter\n  nameWithType: TextWriter\n  fullName: System.IO.TextWriter\n- uid: System.Data.DataSet.WriteXml(System.IO.Stream,System.Data.XmlWriteMode)\n  parent: System.Data.DataSet\n  isExternal: false\n  name: WriteXml(Stream, XmlWriteMode)\n  nameWithType: DataSet.WriteXml(Stream, XmlWriteMode)\n  fullName: DataSet.WriteXml(Stream, XmlWriteMode)\n- uid: System.Data.DataSet.WriteXml(System.String)\n  parent: System.Data.DataSet\n  isExternal: false\n  name: WriteXml(String)\n  nameWithType: DataSet.WriteXml(String)\n  fullName: DataSet.WriteXml(String)\n- uid: System.Data.DataSet.WriteXml(System.IO.TextWriter)\n  parent: System.Data.DataSet\n  isExternal: false\n  name: WriteXml(TextWriter)\n  nameWithType: DataSet.WriteXml(TextWriter)\n  fullName: DataSet.WriteXml(TextWriter)\n- uid: System.Data.DataSet.WriteXml(System.Xml.XmlWriter)\n  parent: System.Data.DataSet\n  isExternal: false\n  name: WriteXml(XmlWriter)\n  nameWithType: DataSet.WriteXml(XmlWriter)\n  fullName: DataSet.WriteXml(XmlWriter)\n- uid: System.Data.DataSet.WriteXml(System.IO.Stream)\n  parent: System.Data.DataSet\n  isExternal: false\n  name: WriteXml(Stream)\n  nameWithType: DataSet.WriteXml(Stream)\n  fullName: DataSet.WriteXml(Stream)\n- uid: System.Data.DataSet.WriteXmlSchema(System.String,System.Converter{System.Type,System.String})\n  parent: System.Data.DataSet\n  isExternal: false\n  name: WriteXmlSchema(String, Converter<Type,String>)\n  nameWithType: DataSet.WriteXmlSchema(String, Converter<Type,String>)\n  fullName: DataSet.WriteXmlSchema(String, Converter<Type,String>)\n- uid: System.Converter`2\n  name: Converter<TInput,TOutput>\n  nameWithType: Converter<TInput,TOutput>\n  fullName: System.Converter<TInput,TOutput>\n- uid: System.Type\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Converter{System.Type,System.String}\n  parent: System\n  isExternal: false\n  name: Converter<Type,String>\n  nameWithType: Converter<Type,String>\n  fullName: System.Converter<System.Type,System.String>\n  spec.csharp:\n  - uid: System.Converter`2\n    name: Converter\n    nameWithType: Converter\n    fullName: System.Converter\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Type\n    name: Type\n    nameWithType: Type\n    fullName: System.Type\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: System.String\n    name: String\n    nameWithType: String\n    fullName: System.String\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Data.DataSet.WriteXmlSchema(System.IO.Stream)\n  parent: System.Data.DataSet\n  isExternal: false\n  name: WriteXmlSchema(Stream)\n  nameWithType: DataSet.WriteXmlSchema(Stream)\n  fullName: DataSet.WriteXmlSchema(Stream)\n- uid: System.Data.DataSet.WriteXmlSchema(System.IO.TextWriter)\n  parent: System.Data.DataSet\n  isExternal: false\n  name: WriteXmlSchema(TextWriter)\n  nameWithType: DataSet.WriteXmlSchema(TextWriter)\n  fullName: DataSet.WriteXmlSchema(TextWriter)\n- uid: System.Data.DataSet.WriteXmlSchema(System.String)\n  parent: System.Data.DataSet\n  isExternal: false\n  name: WriteXmlSchema(String)\n  nameWithType: DataSet.WriteXmlSchema(String)\n  fullName: DataSet.WriteXmlSchema(String)\n- uid: System.Data.DataSet.WriteXmlSchema(System.Xml.XmlWriter)\n  parent: System.Data.DataSet\n  isExternal: false\n  name: WriteXmlSchema(XmlWriter)\n  nameWithType: DataSet.WriteXmlSchema(XmlWriter)\n  fullName: DataSet.WriteXmlSchema(XmlWriter)\n- uid: System.Data.DataSet.WriteXmlSchema(System.IO.Stream,System.Converter{System.Type,System.String})\n  parent: System.Data.DataSet\n  isExternal: false\n  name: WriteXmlSchema(Stream, Converter<Type,String>)\n  nameWithType: DataSet.WriteXmlSchema(Stream, Converter<Type,String>)\n  fullName: DataSet.WriteXmlSchema(Stream, Converter<Type,String>)\n- uid: System.Data.DataSet.WriteXmlSchema(System.IO.TextWriter,System.Converter{System.Type,System.String})\n  parent: System.Data.DataSet\n  isExternal: false\n  name: WriteXmlSchema(TextWriter, Converter<Type,String>)\n  nameWithType: DataSet.WriteXmlSchema(TextWriter, Converter<Type,String>)\n  fullName: DataSet.WriteXmlSchema(TextWriter, Converter<Type,String>)\n- uid: System.Data.DataSet.WriteXmlSchema(System.Xml.XmlWriter,System.Converter{System.Type,System.String})\n  parent: System.Data.DataSet\n  isExternal: false\n  name: WriteXmlSchema(XmlWriter, Converter<Type,String>)\n  nameWithType: DataSet.WriteXmlSchema(XmlWriter, Converter<Type,String>)\n  fullName: DataSet.WriteXmlSchema(XmlWriter, Converter<Type,String>)\n- uid: System.Data.DataSet.System#ComponentModel#IListSource#ContainsListCollection\n  parent: System.Data.DataSet\n  isExternal: false\n  name: IListSource.ContainsListCollection\n  nameWithType: DataSet.IListSource.ContainsListCollection\n  fullName: DataSet.IListSource.ContainsListCollection\n- uid: System.Data.DataSet.System#ComponentModel#IListSource#GetList\n  parent: System.Data.DataSet\n  isExternal: false\n  name: IListSource.GetList()\n  nameWithType: DataSet.IListSource.GetList()\n  fullName: DataSet.IListSource.GetList()\n- uid: System.Collections.IList\n  parent: System.Collections\n  isExternal: false\n  name: IList\n  nameWithType: IList\n  fullName: System.Collections.IList\n- uid: System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#GetSchema\n  parent: System.Data.DataSet\n  isExternal: false\n  name: IXmlSerializable.GetSchema()\n  nameWithType: DataSet.IXmlSerializable.GetSchema()\n  fullName: DataSet.IXmlSerializable.GetSchema()\n- uid: System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)\n  parent: System.Data.DataSet\n  isExternal: false\n  name: IXmlSerializable.ReadXml(XmlReader)\n  nameWithType: DataSet.IXmlSerializable.ReadXml(XmlReader)\n  fullName: DataSet.IXmlSerializable.ReadXml(XmlReader)\n- uid: System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)\n  parent: System.Data.DataSet\n  isExternal: false\n  name: IXmlSerializable.WriteXml(XmlWriter)\n  nameWithType: DataSet.IXmlSerializable.WriteXml(XmlWriter)\n  fullName: DataSet.IXmlSerializable.WriteXml(XmlWriter)\n- uid: System.Data.DataSet.CreateDataReader*\n  parent: System.Data.DataSet\n  isExternal: false\n  name: CreateDataReader\n  nameWithType: DataSet.CreateDataReader\n  fullName: DataSet.CreateDataReader\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n- uid: System.Data.DataSet.DetermineSchemaSerializationMode*\n  parent: System.Data.DataSet\n  isExternal: false\n  name: DetermineSchemaSerializationMode\n  nameWithType: DataSet.DetermineSchemaSerializationMode\n  fullName: DataSet.DetermineSchemaSerializationMode\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n- uid: System.Data.DataSet.Load*\n  parent: System.Data.DataSet\n  isExternal: false\n  name: Load\n  nameWithType: DataSet.Load\n  fullName: DataSet.Load\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n- uid: System.Data.DataSet.#ctor*\n  parent: System.Data.DataSet\n  isExternal: false\n  name: DataSet\n  nameWithType: DataSet.DataSet\n  fullName: DataSet.DataSet\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n- uid: System.Data.DataSet.AcceptChanges*\n  parent: System.Data.DataSet\n  isExternal: false\n  name: AcceptChanges\n  nameWithType: DataSet.AcceptChanges\n  fullName: DataSet.AcceptChanges\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n- uid: System.Data.DataSet.BeginInit*\n  parent: System.Data.DataSet\n  isExternal: false\n  name: BeginInit\n  nameWithType: DataSet.BeginInit\n  fullName: DataSet.BeginInit\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n- uid: System.Data.DataSet.CaseSensitive*\n  parent: System.Data.DataSet\n  isExternal: false\n  name: CaseSensitive\n  nameWithType: DataSet.CaseSensitive\n  fullName: DataSet.CaseSensitive\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n- uid: System.Data.DataSet.Clear*\n  parent: System.Data.DataSet\n  isExternal: false\n  name: Clear\n  nameWithType: DataSet.Clear\n  fullName: DataSet.Clear\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n- uid: System.Data.DataSet.Clone*\n  parent: System.Data.DataSet\n  isExternal: false\n  name: Clone\n  nameWithType: DataSet.Clone\n  fullName: DataSet.Clone\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n- uid: System.Data.DataSet.Copy*\n  parent: System.Data.DataSet\n  isExternal: false\n  name: Copy\n  nameWithType: DataSet.Copy\n  fullName: DataSet.Copy\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n- uid: System.Data.DataSet.DataSetName*\n  parent: System.Data.DataSet\n  isExternal: false\n  name: DataSetName\n  nameWithType: DataSet.DataSetName\n  fullName: DataSet.DataSetName\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n- uid: System.Data.DataSet.DefaultViewManager*\n  parent: System.Data.DataSet\n  isExternal: false\n  name: DefaultViewManager\n  nameWithType: DataSet.DefaultViewManager\n  fullName: DataSet.DefaultViewManager\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n- uid: System.Data.DataSet.EndInit*\n  parent: System.Data.DataSet\n  isExternal: false\n  name: EndInit\n  nameWithType: DataSet.EndInit\n  fullName: DataSet.EndInit\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n- uid: System.Data.DataSet.EnforceConstraints*\n  parent: System.Data.DataSet\n  isExternal: false\n  name: EnforceConstraints\n  nameWithType: DataSet.EnforceConstraints\n  fullName: DataSet.EnforceConstraints\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n- uid: System.Data.DataSet.ExtendedProperties*\n  parent: System.Data.DataSet\n  isExternal: false\n  name: ExtendedProperties\n  nameWithType: DataSet.ExtendedProperties\n  fullName: DataSet.ExtendedProperties\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n- uid: System.Data.DataSet.GetChanges*\n  parent: System.Data.DataSet\n  isExternal: false\n  name: GetChanges\n  nameWithType: DataSet.GetChanges\n  fullName: DataSet.GetChanges\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n- uid: System.Data.DataSet.GetDataSetSchema*\n  parent: System.Data.DataSet\n  isExternal: false\n  name: GetDataSetSchema\n  nameWithType: DataSet.GetDataSetSchema\n  fullName: DataSet.GetDataSetSchema\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n- uid: System.Data.DataSet.GetObjectData*\n  parent: System.Data.DataSet\n  isExternal: false\n  name: GetObjectData\n  nameWithType: DataSet.GetObjectData\n  fullName: DataSet.GetObjectData\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n- uid: System.Data.DataSet.GetSchemaSerializable*\n  parent: System.Data.DataSet\n  isExternal: false\n  name: GetSchemaSerializable\n  nameWithType: DataSet.GetSchemaSerializable\n  fullName: DataSet.GetSchemaSerializable\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n- uid: System.Data.DataSet.GetSerializationData*\n  parent: System.Data.DataSet\n  isExternal: false\n  name: GetSerializationData\n  nameWithType: DataSet.GetSerializationData\n  fullName: DataSet.GetSerializationData\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n- uid: System.Data.DataSet.GetXml*\n  parent: System.Data.DataSet\n  isExternal: false\n  name: GetXml\n  nameWithType: DataSet.GetXml\n  fullName: DataSet.GetXml\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n- uid: System.Data.DataSet.GetXmlSchema*\n  parent: System.Data.DataSet\n  isExternal: false\n  name: GetXmlSchema\n  nameWithType: DataSet.GetXmlSchema\n  fullName: DataSet.GetXmlSchema\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n- uid: System.Data.DataSet.HasChanges*\n  parent: System.Data.DataSet\n  isExternal: false\n  name: HasChanges\n  nameWithType: DataSet.HasChanges\n  fullName: DataSet.HasChanges\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n- uid: System.Data.DataSet.HasErrors*\n  parent: System.Data.DataSet\n  isExternal: false\n  name: HasErrors\n  nameWithType: DataSet.HasErrors\n  fullName: DataSet.HasErrors\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n- uid: System.Data.DataSet.InferXmlSchema*\n  parent: System.Data.DataSet\n  isExternal: false\n  name: InferXmlSchema\n  nameWithType: DataSet.InferXmlSchema\n  fullName: DataSet.InferXmlSchema\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n- uid: System.Data.DataSet.InitializeDerivedDataSet*\n  parent: System.Data.DataSet\n  isExternal: false\n  name: InitializeDerivedDataSet\n  nameWithType: DataSet.InitializeDerivedDataSet\n  fullName: DataSet.InitializeDerivedDataSet\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n- uid: System.Data.DataSet.IsBinarySerialized*\n  parent: System.Data.DataSet\n  isExternal: false\n  name: IsBinarySerialized\n  nameWithType: DataSet.IsBinarySerialized\n  fullName: DataSet.IsBinarySerialized\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n- uid: System.Data.DataSet.IsInitialized*\n  parent: System.Data.DataSet\n  isExternal: false\n  name: IsInitialized\n  nameWithType: DataSet.IsInitialized\n  fullName: DataSet.IsInitialized\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n- uid: System.Data.DataSet.Locale*\n  parent: System.Data.DataSet\n  isExternal: false\n  name: Locale\n  nameWithType: DataSet.Locale\n  fullName: DataSet.Locale\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n- uid: System.Data.DataSet.Merge*\n  parent: System.Data.DataSet\n  isExternal: false\n  name: Merge\n  nameWithType: DataSet.Merge\n  fullName: DataSet.Merge\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n- uid: System.Data.DataSet.Namespace*\n  parent: System.Data.DataSet\n  isExternal: false\n  name: Namespace\n  nameWithType: DataSet.Namespace\n  fullName: DataSet.Namespace\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n- uid: System.Data.DataSet.OnPropertyChanging*\n  parent: System.Data.DataSet\n  isExternal: false\n  name: OnPropertyChanging\n  nameWithType: DataSet.OnPropertyChanging\n  fullName: DataSet.OnPropertyChanging\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n- uid: System.Data.DataSet.OnRemoveRelation*\n  parent: System.Data.DataSet\n  isExternal: false\n  name: OnRemoveRelation\n  nameWithType: DataSet.OnRemoveRelation\n  fullName: DataSet.OnRemoveRelation\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n- uid: System.Data.DataSet.OnRemoveTable*\n  parent: System.Data.DataSet\n  isExternal: false\n  name: OnRemoveTable\n  nameWithType: DataSet.OnRemoveTable\n  fullName: DataSet.OnRemoveTable\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n- uid: System.Data.DataSet.Prefix*\n  parent: System.Data.DataSet\n  isExternal: false\n  name: Prefix\n  nameWithType: DataSet.Prefix\n  fullName: DataSet.Prefix\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n- uid: System.Data.DataSet.RaisePropertyChanging*\n  parent: System.Data.DataSet\n  isExternal: false\n  name: RaisePropertyChanging\n  nameWithType: DataSet.RaisePropertyChanging\n  fullName: DataSet.RaisePropertyChanging\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n- uid: System.Data.DataSet.ReadXml*\n  parent: System.Data.DataSet\n  isExternal: false\n  name: ReadXml\n  nameWithType: DataSet.ReadXml\n  fullName: DataSet.ReadXml\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n- uid: System.Data.DataSet.ReadXmlSchema*\n  parent: System.Data.DataSet\n  isExternal: false\n  name: ReadXmlSchema\n  nameWithType: DataSet.ReadXmlSchema\n  fullName: DataSet.ReadXmlSchema\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n- uid: System.Data.DataSet.ReadXmlSerializable*\n  parent: System.Data.DataSet\n  isExternal: false\n  name: ReadXmlSerializable\n  nameWithType: DataSet.ReadXmlSerializable\n  fullName: DataSet.ReadXmlSerializable\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n- uid: System.Data.DataSet.RejectChanges*\n  parent: System.Data.DataSet\n  isExternal: false\n  name: RejectChanges\n  nameWithType: DataSet.RejectChanges\n  fullName: DataSet.RejectChanges\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n- uid: System.Data.DataSet.Relations*\n  parent: System.Data.DataSet\n  isExternal: false\n  name: Relations\n  nameWithType: DataSet.Relations\n  fullName: DataSet.Relations\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n- uid: System.Data.DataSet.RemotingFormat*\n  parent: System.Data.DataSet\n  isExternal: false\n  name: RemotingFormat\n  nameWithType: DataSet.RemotingFormat\n  fullName: DataSet.RemotingFormat\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n- uid: System.Data.DataSet.Reset*\n  parent: System.Data.DataSet\n  isExternal: false\n  name: Reset\n  nameWithType: DataSet.Reset\n  fullName: DataSet.Reset\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n- uid: System.Data.DataSet.SchemaSerializationMode*\n  parent: System.Data.DataSet\n  isExternal: false\n  name: SchemaSerializationMode\n  nameWithType: DataSet.SchemaSerializationMode\n  fullName: DataSet.SchemaSerializationMode\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n- uid: System.Data.DataSet.ShouldSerializeRelations*\n  parent: System.Data.DataSet\n  isExternal: false\n  name: ShouldSerializeRelations\n  nameWithType: DataSet.ShouldSerializeRelations\n  fullName: DataSet.ShouldSerializeRelations\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n- uid: System.Data.DataSet.ShouldSerializeTables*\n  parent: System.Data.DataSet\n  isExternal: false\n  name: ShouldSerializeTables\n  nameWithType: DataSet.ShouldSerializeTables\n  fullName: DataSet.ShouldSerializeTables\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n- uid: System.Data.DataSet.Site*\n  parent: System.Data.DataSet\n  isExternal: false\n  name: Site\n  nameWithType: DataSet.Site\n  fullName: DataSet.Site\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n- uid: System.Data.DataSet.Tables*\n  parent: System.Data.DataSet\n  isExternal: false\n  name: Tables\n  nameWithType: DataSet.Tables\n  fullName: DataSet.Tables\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n- uid: System.Data.DataSet.WriteXml*\n  parent: System.Data.DataSet\n  isExternal: false\n  name: WriteXml\n  nameWithType: DataSet.WriteXml\n  fullName: DataSet.WriteXml\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n- uid: System.Data.DataSet.WriteXmlSchema*\n  parent: System.Data.DataSet\n  isExternal: false\n  name: WriteXmlSchema\n  nameWithType: DataSet.WriteXmlSchema\n  fullName: DataSet.WriteXmlSchema\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n- uid: System.Data.DataSet.System#ComponentModel#IListSource#ContainsListCollection*\n  parent: System.Data.DataSet\n  isExternal: false\n  name: System.ComponentModel.IListSource.ContainsListCollection\n  nameWithType: DataSet.System.ComponentModel.IListSource.ContainsListCollection\n  fullName: DataSet.System.ComponentModel.IListSource.ContainsListCollection\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n- uid: System.Data.DataSet.System#ComponentModel#IListSource#GetList*\n  parent: System.Data.DataSet\n  isExternal: false\n  name: System.ComponentModel.IListSource.GetList\n  nameWithType: DataSet.System.ComponentModel.IListSource.GetList\n  fullName: DataSet.System.ComponentModel.IListSource.GetList\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n- uid: System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#GetSchema*\n  parent: System.Data.DataSet\n  isExternal: false\n  name: System.Xml.Serialization.IXmlSerializable.GetSchema\n  nameWithType: DataSet.System.Xml.Serialization.IXmlSerializable.GetSchema\n  fullName: DataSet.System.Xml.Serialization.IXmlSerializable.GetSchema\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n- uid: System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#ReadXml*\n  parent: System.Data.DataSet\n  isExternal: false\n  name: System.Xml.Serialization.IXmlSerializable.ReadXml\n  nameWithType: DataSet.System.Xml.Serialization.IXmlSerializable.ReadXml\n  fullName: DataSet.System.Xml.Serialization.IXmlSerializable.ReadXml\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n- uid: System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#WriteXml*\n  parent: System.Data.DataSet\n  isExternal: false\n  name: System.Xml.Serialization.IXmlSerializable.WriteXml\n  nameWithType: DataSet.System.Xml.Serialization.IXmlSerializable.WriteXml\n  fullName: DataSet.System.Xml.Serialization.IXmlSerializable.WriteXml\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/DataSet.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.ComponentModel.MarshalByValueComponent.ToString\n  parent: System.ComponentModel.MarshalByValueComponent\n  isExternal: false\n  name: ToString()\n  nameWithType: MarshalByValueComponent.ToString()\n  fullName: MarshalByValueComponent.ToString()\n- uid: System.ComponentModel.MarshalByValueComponent.Container\n  parent: System.ComponentModel.MarshalByValueComponent\n  isExternal: false\n  name: Container\n  nameWithType: MarshalByValueComponent.Container\n  fullName: MarshalByValueComponent.Container\n- uid: System.ComponentModel.MarshalByValueComponent.DesignMode\n  parent: System.ComponentModel.MarshalByValueComponent\n  isExternal: false\n  name: DesignMode\n  nameWithType: MarshalByValueComponent.DesignMode\n  fullName: MarshalByValueComponent.DesignMode\n- uid: System.ComponentModel.MarshalByValueComponent.Dispose\n  parent: System.ComponentModel.MarshalByValueComponent\n  isExternal: false\n  name: Dispose()\n  nameWithType: MarshalByValueComponent.Dispose()\n  fullName: MarshalByValueComponent.Dispose()\n- uid: System.ComponentModel.MarshalByValueComponent.Dispose(System.Boolean)\n  parent: System.ComponentModel.MarshalByValueComponent\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: MarshalByValueComponent.Dispose(Boolean)\n  fullName: MarshalByValueComponent.Dispose(Boolean)\n- uid: System.ComponentModel.MarshalByValueComponent.Disposed\n  parent: System.ComponentModel.MarshalByValueComponent\n  isExternal: false\n  name: Disposed\n  nameWithType: MarshalByValueComponent.Disposed\n  fullName: MarshalByValueComponent.Disposed\n- uid: System.ComponentModel.MarshalByValueComponent.Events\n  parent: System.ComponentModel.MarshalByValueComponent\n  isExternal: false\n  name: Events\n  nameWithType: MarshalByValueComponent.Events\n  fullName: MarshalByValueComponent.Events\n- uid: System.ComponentModel.MarshalByValueComponent.GetService(System.Type)\n  parent: System.ComponentModel.MarshalByValueComponent\n  isExternal: false\n  name: GetService(Type)\n  nameWithType: MarshalByValueComponent.GetService(Type)\n  fullName: MarshalByValueComponent.GetService(Type)\n- uid: System.ComponentModel.IListSource\n  parent: System.ComponentModel\n  isExternal: false\n  name: IListSource\n  nameWithType: IListSource\n  fullName: System.ComponentModel.IListSource\n- uid: System.ComponentModel.ISupportInitializeNotification\n  parent: System.ComponentModel\n  isExternal: false\n  name: ISupportInitializeNotification\n  nameWithType: ISupportInitializeNotification\n  fullName: System.ComponentModel.ISupportInitializeNotification\n- uid: System.Runtime.Serialization.ISerializable\n  parent: System.Runtime.Serialization\n  isExternal: false\n  name: ISerializable\n  nameWithType: ISerializable\n  fullName: System.Runtime.Serialization.ISerializable\n- uid: System.Xml.Serialization.IXmlSerializable\n  parent: System.Xml.Serialization\n  isExternal: false\n  name: IXmlSerializable\n  nameWithType: IXmlSerializable\n  fullName: System.Xml.Serialization.IXmlSerializable\n"}