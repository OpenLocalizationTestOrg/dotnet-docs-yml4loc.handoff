{"nodes":[{"content":"Represents a synchronization primitive that is signaled when its count reaches zero.","nodes":[{"pos":[0,84],"content":"Represents a synchronization primitive that is signaled when its count reaches zero.","nodes":[{"content":"Represents a synchronization primitive that is signaled when its count reaches zero.","pos":[0,84]}]}],"pos":[1565,1650],"yaml":true},{"content":"Initializes a new instance of <xref href=\"System.Threading.CountdownEvent\"></xref> class with the specified count.","nodes":[{"pos":[0,114],"content":"Initializes a new instance of <ph id=\"ph1\">&lt;xref href=\"System.Threading.CountdownEvent\"&gt;&lt;/xref&gt;</ph> class with the specified count.","source":"Initializes a new instance of <xref href=\"System.Threading.CountdownEvent\"></xref> class with the specified count."}],"pos":[3726,3841],"yaml":true},{"content":"iI `initialCount` is 0, the event is created in a signaled state.","nodes":[{"pos":[0,65],"content":"iI <ph id=\"ph1\">`initialCount`</ph> is 0, the event is created in a signaled state.","source":"iI `initialCount` is 0, the event is created in a signaled state."}],"pos":[3852,3918],"yaml":true,"extradata":"MT"},{"content":"The number of signals initially required to set the <xref href=\"System.Threading.CountdownEvent\"></xref>.","nodes":[{"pos":[0,105],"content":"The number of signals initially required to set the <ph id=\"ph1\">&lt;xref href=\"System.Threading.CountdownEvent\"&gt;&lt;/xref&gt;</ph>.","source":"The number of signals initially required to set the <xref href=\"System.Threading.CountdownEvent\"></xref>."}],"pos":[4066,4172],"yaml":true},{"content":"<code>initialCount</code> is less than 0.","nodes":[{"pos":[0,41],"content":"<ph id=\"ph1\">&lt;code&gt;initialCount&lt;/code&gt;</ph> is less than 0.","source":"<code>initialCount</code> is less than 0."}],"pos":[4351,4393],"yaml":true},{"content":"Increments the <xref href=\"System.Threading.CountdownEvent\"></xref>'s current count by one.","nodes":[{"pos":[0,91],"content":"Increments the <ph id=\"ph1\">&lt;xref href=\"System.Threading.CountdownEvent\"&gt;&lt;/xref&gt;</ph>'s current count by one.","source":"Increments the <xref href=\"System.Threading.CountdownEvent\"></xref>'s current count by one."}],"pos":[5825,5917],"yaml":true},{"content":"The current instance has already been disposed.","nodes":[{"pos":[0,47],"content":"The current instance has already been disposed.","nodes":[{"content":"The current instance has already been disposed.","pos":[0,47]}]}],"pos":[6158,6206],"yaml":true},{"content":"The current instance is already set.  \n  \n -or-  \n  \n <xref href=\"System.Threading.CountdownEvent.CurrentCount\"></xref> is equal to or greater than <xref href=\"System.Int32.MaxValue\"></xref>.","nodes":[{"pos":[0,36],"content":"The current instance is already set.","nodes":[{"content":"The current instance is already set.","pos":[0,36]}]},{"pos":[43,47],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[54,191],"content":"<ph id=\"ph1\">&lt;xref href=\"System.Threading.CountdownEvent.CurrentCount\"&gt;&lt;/xref&gt;</ph> is equal to or greater than <ph id=\"ph2\">&lt;xref href=\"System.Int32.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"<xref href=\"System.Threading.CountdownEvent.CurrentCount\"></xref> is equal to or greater than <xref href=\"System.Int32.MaxValue\"></xref>."}],"pos":[6316,6518],"yaml":true},{"content":"Increments the <xref href=\"System.Threading.CountdownEvent\"></xref>'s current count by a specified value.","nodes":[{"pos":[0,105],"content":"Increments the <ph id=\"ph1\">&lt;xref href=\"System.Threading.CountdownEvent\"&gt;&lt;/xref&gt;</ph>'s current count by a specified value.","source":"Increments the <xref href=\"System.Threading.CountdownEvent\"></xref>'s current count by a specified value."}],"pos":[8007,8113],"yaml":true},{"content":"The value by which to increase <xref href=\"System.Threading.CountdownEvent.CurrentCount\"></xref>.","nodes":[{"pos":[0,97],"content":"The value by which to increase <ph id=\"ph1\">&lt;xref href=\"System.Threading.CountdownEvent.CurrentCount\"&gt;&lt;/xref&gt;</ph>.","source":"The value by which to increase <xref href=\"System.Threading.CountdownEvent.CurrentCount\"></xref>."}],"pos":[8258,8356],"yaml":true},{"content":"The current instance has already been disposed.","nodes":[{"pos":[0,47],"content":"The current instance has already been disposed.","nodes":[{"content":"The current instance has already been disposed.","pos":[0,47]}]}],"pos":[8530,8578],"yaml":true},{"content":"<code>signalCount</code> is less than or equal to 0.","nodes":[{"pos":[0,52],"content":"<ph id=\"ph1\">&lt;code&gt;signalCount&lt;/code&gt;</ph> is less than or equal to 0.","source":"<code>signalCount</code> is less than or equal to 0."}],"pos":[8692,8745],"yaml":true},{"content":"The current instance is already set.  \n  \n -or-  \n  \n <xref href=\"System.Threading.CountdownEvent.CurrentCount\"></xref> is equal to or greater than <xref href=\"System.Int32.MaxValue\"></xref> after count is incremented by <code>signalCount.</code>","nodes":[{"pos":[0,36],"content":"The current instance is already set.","nodes":[{"content":"The current instance is already set.","pos":[0,36]}]},{"pos":[43,47],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[54,246],"content":"<ph id=\"ph1\">&lt;xref href=\"System.Threading.CountdownEvent.CurrentCount\"&gt;&lt;/xref&gt;</ph> is equal to or greater than <ph id=\"ph2\">&lt;xref href=\"System.Int32.MaxValue\"&gt;&lt;/xref&gt;</ph> after count is incremented by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph3\">signalCount.</ph><ept id=\"p1\">&lt;/code&gt;</ept>","source":"<xref href=\"System.Threading.CountdownEvent.CurrentCount\"></xref> is equal to or greater than <xref href=\"System.Int32.MaxValue\"></xref> after count is incremented by <code>signalCount.</code>"}],"pos":[8855,9112],"yaml":true},{"content":"Gets the number of remaining signals required to set the event.","nodes":[{"pos":[0,63],"content":"Gets the number of remaining signals required to set the event.","nodes":[{"content":"Gets the number of remaining signals required to set the event.","pos":[0,63]}]}],"pos":[10564,10628],"yaml":true},{"content":"The number of remaining signals required to set the event.","nodes":[{"pos":[0,58],"content":"The number of remaining signals required to set the event.","nodes":[{"content":"The number of remaining signals required to set the event.","pos":[0,58]}]}],"pos":[10740,10799],"yaml":true},{"content":"Releases all resources used by the current instance of the <xref href=\"System.Threading.CountdownEvent\"></xref> class.","nodes":[{"pos":[0,118],"content":"Releases all resources used by the current instance of the <ph id=\"ph1\">&lt;xref href=\"System.Threading.CountdownEvent\"&gt;&lt;/xref&gt;</ph> class.","source":"Releases all resources used by the current instance of the <xref href=\"System.Threading.CountdownEvent\"></xref> class."}],"pos":[12300,12419],"yaml":true},{"content":"Call `Dispose` when you are finished using the <xref:System.Threading.CountdownEvent>. The `Dispose` method leaves the <xref:System.Threading.CountdownEvent> in an unusable state. After calling `Dispose`, you must release all references to the <xref:System.Threading.CountdownEvent> so the garbage collector can reclaim the memory that the <xref:System.Threading.CountdownEvent> was occupying.  \n  \n For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).  \n  \n> [!NOTE]\n>  Always call `Dispose` before you release your last reference to the <xref:System.Threading.CountdownEvent>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Threading.CountdownEvent> object's `Finalize` method.","nodes":[{"pos":[0,393],"content":"Call `Dispose` when you are finished using the <xref:System.Threading.CountdownEvent>. The `Dispose` method leaves the <xref:System.Threading.CountdownEvent> in an unusable state. After calling `Dispose`, you must release all references to the <xref:System.Threading.CountdownEvent> so the garbage collector can reclaim the memory that the <xref:System.Threading.CountdownEvent> was occupying.","nodes":[{"content":"Call <ph id=\"ph1\">`Dispose`</ph> when you are finished using the <ph id=\"ph2\">&lt;xref:System.Threading.CountdownEvent&gt;</ph>.","pos":[0,86],"source":"Call `Dispose` when you are finished using the <xref:System.Threading.CountdownEvent>."},{"content":"The <ph id=\"ph1\">`Dispose`</ph> method leaves the <ph id=\"ph2\">&lt;xref:System.Threading.CountdownEvent&gt;</ph> in an unusable state.","pos":[87,179],"source":" The `Dispose` method leaves the <xref:System.Threading.CountdownEvent> in an unusable state."},{"content":"After calling <ph id=\"ph1\">`Dispose`</ph>, you must release all references to the <ph id=\"ph2\">&lt;xref:System.Threading.CountdownEvent&gt;</ph> so the garbage collector can reclaim the memory that the <ph id=\"ph3\">&lt;xref:System.Threading.CountdownEvent&gt;</ph> was occupying.","pos":[180,393],"source":" After calling `Dispose`, you must release all references to the <xref:System.Threading.CountdownEvent> so the garbage collector can reclaim the memory that the <xref:System.Threading.CountdownEvent> was occupying."}]},{"pos":[400,605],"content":"For more information, see <bpt id=\"p1\">[</bpt>Cleaning Up Unmanaged Resources<ept id=\"p1\">](~/docs/standard/garbage-collection/unmanaged.md)</ept> and <bpt id=\"p2\">[</bpt>Implementing a Dispose Method<ept id=\"p2\">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.","source":"For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md)."},{"pos":[613,891],"content":"[!NOTE]\n Always call `Dispose` before you release your last reference to the <xref:System.Threading.CountdownEvent>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Threading.CountdownEvent> object's `Finalize` method.","leadings":["","> "],"nodes":[{"content":" Always call `Dispose` before you release your last reference to the <xref:System.Threading.CountdownEvent>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Threading.CountdownEvent> object's `Finalize` method.","pos":[8,276],"nodes":[{"content":"Always call <ph id=\"ph1\">`Dispose`</ph> before you release your last reference to the <ph id=\"ph2\">&lt;xref:System.Threading.CountdownEvent&gt;</ph>.","pos":[1,108],"source":" Always call `Dispose` before you release your last reference to the <xref:System.Threading.CountdownEvent>."},{"content":"Otherwise, the resources it is using will not be freed until the garbage collector calls the <ph id=\"ph1\">&lt;xref:System.Threading.CountdownEvent&gt;</ph> object's <ph id=\"ph2\">`Finalize`</ph> method.","pos":[109,268],"source":" Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Threading.CountdownEvent> object's `Finalize` method."}]}]}],"pos":[12430,13329],"yaml":true,"extradata":"MT"},{"content":"Releases the unmanaged resources used by the <xref href=\"System.Threading.CountdownEvent\"></xref>, and optionally releases the managed resources.","nodes":[{"pos":[0,145],"content":"Releases the unmanaged resources used by the <ph id=\"ph1\">&lt;xref href=\"System.Threading.CountdownEvent\"&gt;&lt;/xref&gt;</ph>, and optionally releases the managed resources.","source":"Releases the unmanaged resources used by the <xref href=\"System.Threading.CountdownEvent\"></xref>, and optionally releases the managed resources."}],"pos":[14960,15106],"yaml":true},{"content":"Unlike most of the members of <xref:System.Threading.CountdownEvent>, <xref:System.Threading.CountdownEvent.Dispose%2A> is not thread-safe and may not be used concurrently with other members of this instance.","nodes":[{"pos":[0,208],"content":"Unlike most of the members of <xref:System.Threading.CountdownEvent>, <xref:System.Threading.CountdownEvent.Dispose%2A> is not thread-safe and may not be used concurrently with other members of this instance.","nodes":[{"content":"Unlike most of the members of <ph id=\"ph1\">&lt;xref:System.Threading.CountdownEvent&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Threading.CountdownEvent.Dispose%2A&gt;</ph> is not thread-safe and may not be used concurrently with other members of this instance.","pos":[0,208],"source":"Unlike most of the members of <xref:System.Threading.CountdownEvent>, <xref:System.Threading.CountdownEvent.Dispose%2A> is not thread-safe and may not be used concurrently with other members of this instance."}]}],"pos":[15117,15326],"yaml":true,"extradata":"MT"},{"content":"true to release both managed and unmanaged resources; false to release only unmanaged resources.","nodes":[{"pos":[0,96],"content":"true to release both managed and unmanaged resources; false to release only unmanaged resources.","nodes":[{"content":"true to release both managed and unmanaged resources; false to release only unmanaged resources.","pos":[0,96]}]}],"pos":[15480,15577],"yaml":true},{"content":"Gets the numbers of signals initially required to set the event.","nodes":[{"pos":[0,64],"content":"Gets the numbers of signals initially required to set the event.","nodes":[{"content":"Gets the numbers of signals initially required to set the event.","pos":[0,64]}]}],"pos":[17099,17164],"yaml":true},{"content":"The number of signals initially required to set the event.","nodes":[{"pos":[0,58],"content":"The number of signals initially required to set the event.","nodes":[{"content":"The number of signals initially required to set the event.","pos":[0,58]}]}],"pos":[17276,17335],"yaml":true},{"content":"Indicates whether the <xref href=\"System.Threading.CountdownEvent\"></xref> object's current count has reached zero..","nodes":[{"pos":[0,116],"content":"Indicates whether the <ph id=\"ph1\">&lt;xref href=\"System.Threading.CountdownEvent\"&gt;&lt;/xref&gt;</ph> object's current count has reached zero..","source":"Indicates whether the <xref href=\"System.Threading.CountdownEvent\"></xref> object's current count has reached zero.."}],"pos":[18820,18937],"yaml":true},{"content":"The <xref:System.Threading.CountdownEvent> does not raise an event when the countdown has reached zero. Instead, the <xref:System.Threading.CountdownEvent.CurrentCount%2A> property equals zero, and the <xref:System.Threading.CountdownEvent.IsSet%2A> property equals `true`.","nodes":[{"pos":[0,273],"content":"The <xref:System.Threading.CountdownEvent> does not raise an event when the countdown has reached zero. Instead, the <xref:System.Threading.CountdownEvent.CurrentCount%2A> property equals zero, and the <xref:System.Threading.CountdownEvent.IsSet%2A> property equals `true`.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.CountdownEvent&gt;</ph> does not raise an event when the countdown has reached zero.","pos":[0,103],"source":"The <xref:System.Threading.CountdownEvent> does not raise an event when the countdown has reached zero."},{"content":"Instead, the <ph id=\"ph1\">&lt;xref:System.Threading.CountdownEvent.CurrentCount%2A&gt;</ph> property equals zero, and the <ph id=\"ph2\">&lt;xref:System.Threading.CountdownEvent.IsSet%2A&gt;</ph> property equals <ph id=\"ph3\">`true`</ph>.","pos":[104,273],"source":" Instead, the <xref:System.Threading.CountdownEvent.CurrentCount%2A> property equals zero, and the <xref:System.Threading.CountdownEvent.IsSet%2A> property equals `true`."}]}],"pos":[18948,19222],"yaml":true,"extradata":"MT"},{"content":"`true` if the current count is zero; otherwise, `false`.","nodes":[{"pos":[0,56],"content":"<ph id=\"ph1\">`true`</ph> if the current count is zero; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the current count is zero; otherwise, `false`."}],"pos":[19330,19389],"yaml":true},{"content":"Resets the <xref href=\"System.Threading.CountdownEvent.CurrentCount\"></xref> to the value of <xref href=\"System.Threading.CountdownEvent.InitialCount\"></xref>.","nodes":[{"pos":[0,159],"content":"Resets the <ph id=\"ph1\">&lt;xref href=\"System.Threading.CountdownEvent.CurrentCount\"&gt;&lt;/xref&gt;</ph> to the value of <ph id=\"ph2\">&lt;xref href=\"System.Threading.CountdownEvent.InitialCount\"&gt;&lt;/xref&gt;</ph>.","source":"Resets the <xref href=\"System.Threading.CountdownEvent.CurrentCount\"></xref> to the value of <xref href=\"System.Threading.CountdownEvent.InitialCount\"></xref>."}],"pos":[20871,21031],"yaml":true},{"content":"Unlike most of the members of <xref:System.Threading.CountdownEvent>, Reset is not thread-safe and may not be used concurrently with other members of this instance.","nodes":[{"pos":[0,164],"content":"Unlike most of the members of <xref:System.Threading.CountdownEvent>, Reset is not thread-safe and may not be used concurrently with other members of this instance.","nodes":[{"content":"Unlike most of the members of <ph id=\"ph1\">&lt;xref:System.Threading.CountdownEvent&gt;</ph>, Reset is not thread-safe and may not be used concurrently with other members of this instance.","pos":[0,164],"source":"Unlike most of the members of <xref:System.Threading.CountdownEvent>, Reset is not thread-safe and may not be used concurrently with other members of this instance."}]}],"pos":[21042,21207],"yaml":true,"extradata":"MT"},{"content":"The current instance has already been disposed..","nodes":[{"pos":[0,48],"content":"The current instance has already been disposed..","nodes":[{"content":"The current instance has already been disposed..","pos":[0,48]}]}],"pos":[21442,21491],"yaml":true},{"content":"Resets the <xref href=\"System.Threading.CountdownEvent.InitialCount\"></xref> property to a specified value.","nodes":[{"pos":[0,107],"content":"Resets the <ph id=\"ph1\">&lt;xref href=\"System.Threading.CountdownEvent.InitialCount\"&gt;&lt;/xref&gt;</ph> property to a specified value.","source":"Resets the <xref href=\"System.Threading.CountdownEvent.InitialCount\"></xref> property to a specified value."}],"pos":[22962,23070],"yaml":true},{"content":"This method resets <xref:System.Threading.CountdownEvent.InitialCount%2A> for all subsequent accesses of the property on the current instance. Unlike most of the members of <xref:System.Threading.CountdownEvent>, Reset is not thread-safe and may not be used concurrently with other members of this instance.","nodes":[{"pos":[0,307],"content":"This method resets <xref:System.Threading.CountdownEvent.InitialCount%2A> for all subsequent accesses of the property on the current instance. Unlike most of the members of <xref:System.Threading.CountdownEvent>, Reset is not thread-safe and may not be used concurrently with other members of this instance.","nodes":[{"content":"This method resets <xref:System.Threading.CountdownEvent.InitialCount%2A> for all subsequent accesses of the property on the current instance. Unlike most of the members of <xref:System.Threading.CountdownEvent>, Reset is not thread-safe and may not be used concurrently with other members of this instance.","pos":[0,307],"nodes":[{"content":"This method resets <ph id=\"ph1\">&lt;xref:System.Threading.CountdownEvent.InitialCount%2A&gt;</ph> for all subsequent accesses of the property on the current instance.","pos":[0,142],"source":"This method resets <xref:System.Threading.CountdownEvent.InitialCount%2A> for all subsequent accesses of the property on the current instance."},{"content":"Unlike most of the members of <ph id=\"ph1\">&lt;xref:System.Threading.CountdownEvent&gt;</ph>, Reset is not thread-safe and may not be used concurrently with other members of this instance.","pos":[143,307],"source":" Unlike most of the members of <xref:System.Threading.CountdownEvent>, Reset is not thread-safe and may not be used concurrently with other members of this instance."}]}]}],"pos":[23081,23389],"yaml":true,"extradata":"MT"},{"content":"The number of signals required to set the <xref href=\"System.Threading.CountdownEvent\"></xref>.","nodes":[{"pos":[0,95],"content":"The number of signals required to set the <ph id=\"ph1\">&lt;xref href=\"System.Threading.CountdownEvent\"&gt;&lt;/xref&gt;</ph>.","source":"The number of signals required to set the <xref href=\"System.Threading.CountdownEvent\"></xref>."}],"pos":[23519,23615],"yaml":true},{"content":"The current instance has alread been disposed.","nodes":[{"pos":[0,46],"content":"The current instance has alread been disposed.","nodes":[{"content":"The current instance has alread been disposed.","pos":[0,46]}]}],"pos":[23786,23833],"yaml":true},{"content":"<code>count</code> is less than 0.","nodes":[{"pos":[0,34],"content":"<ph id=\"ph1\">&lt;code&gt;count&lt;/code&gt;</ph> is less than 0.","source":"<code>count</code> is less than 0."}],"pos":[23947,23982],"yaml":true},{"content":"Registers multiple signals with the <xref href=\"System.Threading.CountdownEvent\"></xref>, decrementing the value of <xref href=\"System.Threading.CountdownEvent.CurrentCount\"></xref> by the specified amount.","nodes":[{"pos":[0,206],"content":"Registers multiple signals with the <ph id=\"ph1\">&lt;xref href=\"System.Threading.CountdownEvent\"&gt;&lt;/xref&gt;</ph>, decrementing the value of <ph id=\"ph2\">&lt;xref href=\"System.Threading.CountdownEvent.CurrentCount\"&gt;&lt;/xref&gt;</ph> by the specified amount.","source":"Registers multiple signals with the <xref href=\"System.Threading.CountdownEvent\"></xref>, decrementing the value of <xref href=\"System.Threading.CountdownEvent.CurrentCount\"></xref> by the specified amount."}],"pos":[25459,25666],"yaml":true},{"content":"The number of signals to register.","nodes":[{"pos":[0,34],"content":"The number of signals to register.","nodes":[{"content":"The number of signals to register.","pos":[0,34]}]}],"pos":[25809,25844],"yaml":true},{"content":"true if the signals caused the count to reach zero and the event was set; otherwise, false.","nodes":[{"pos":[0,91],"content":"true if the signals caused the count to reach zero and the event was set; otherwise, false.","nodes":[{"content":"true if the signals caused the count to reach zero and the event was set; otherwise, false.","pos":[0,91]}]}],"pos":[25902,25994],"yaml":true},{"content":"The current instance has already been disposed.","nodes":[{"pos":[0,47],"content":"The current instance has already been disposed.","nodes":[{"content":"The current instance has already been disposed.","pos":[0,47]}]}],"pos":[26166,26214],"yaml":true},{"content":"<code>signalCount</code> is less than 1.","nodes":[{"pos":[0,40],"content":"<ph id=\"ph1\">&lt;code&gt;signalCount&lt;/code&gt;</ph> is less than 1.","source":"<code>signalCount</code> is less than 1."}],"pos":[26328,26369],"yaml":true},{"content":"The current instance is already set. -or- Or <code>signalCount</code> is greater than <xref href=\"System.Threading.CountdownEvent.CurrentCount\"></xref>.","nodes":[{"pos":[0,152],"content":"The current instance is already set. -or- Or <code>signalCount</code> is greater than <xref href=\"System.Threading.CountdownEvent.CurrentCount\"></xref>.","nodes":[{"content":"The current instance is already set.","pos":[0,36]},{"content":"-or- Or <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">signalCount</ph><ept id=\"p1\">&lt;/code&gt;</ept> is greater than <ph id=\"ph2\">&lt;xref href=\"System.Threading.CountdownEvent.CurrentCount\"&gt;&lt;/xref&gt;</ph>.","pos":[37,152],"source":" -or- Or <code>signalCount</code> is greater than <xref href=\"System.Threading.CountdownEvent.CurrentCount\"></xref>."}]}],"pos":[26479,26632],"yaml":true},{"content":"Registers a signal with the <xref href=\"System.Threading.CountdownEvent\"></xref>, decrementing the value of <xref href=\"System.Threading.CountdownEvent.CurrentCount\"></xref>.","nodes":[{"pos":[0,174],"content":"Registers a signal with the <ph id=\"ph1\">&lt;xref href=\"System.Threading.CountdownEvent\"&gt;&lt;/xref&gt;</ph>, decrementing the value of <ph id=\"ph2\">&lt;xref href=\"System.Threading.CountdownEvent.CurrentCount\"&gt;&lt;/xref&gt;</ph>.","source":"Registers a signal with the <xref href=\"System.Threading.CountdownEvent\"></xref>, decrementing the value of <xref href=\"System.Threading.CountdownEvent.CurrentCount\"></xref>."}],"pos":[28052,28227],"yaml":true},{"content":"true if the signal caused the count to reach zero and the event was set; otherwise, false.","nodes":[{"pos":[0,90],"content":"true if the signal caused the count to reach zero and the event was set; otherwise, false.","nodes":[{"content":"true if the signal caused the count to reach zero and the event was set; otherwise, false.","pos":[0,90]}]}],"pos":[28350,28441],"yaml":true},{"content":"The current instance has already been disposed.","nodes":[{"pos":[0,47],"content":"The current instance has already been disposed.","nodes":[{"content":"The current instance has already been disposed.","pos":[0,47]}]}],"pos":[28613,28661],"yaml":true},{"content":"The current instance is already set.","nodes":[{"pos":[0,36],"content":"The current instance is already set.","nodes":[{"content":"The current instance is already set.","pos":[0,36]}]}],"pos":[28771,28808],"yaml":true},{"content":"Attempts to increment <xref href=\"System.Threading.CountdownEvent.CurrentCount\"></xref> by one.","nodes":[{"pos":[0,95],"content":"Attempts to increment <ph id=\"ph1\">&lt;xref href=\"System.Threading.CountdownEvent.CurrentCount\"&gt;&lt;/xref&gt;</ph> by one.","source":"Attempts to increment <xref href=\"System.Threading.CountdownEvent.CurrentCount\"></xref> by one."}],"pos":[30258,30354],"yaml":true},{"content":"true if the increment succeeded; otherwise, false. If <xref href=\"System.Threading.CountdownEvent.CurrentCount\"></xref> is already at zero, this method will return false.","nodes":[{"pos":[0,170],"content":"true if the increment succeeded; otherwise, false. If <xref href=\"System.Threading.CountdownEvent.CurrentCount\"></xref> is already at zero, this method will return false.","nodes":[{"content":"true if the increment succeeded; otherwise, false.","pos":[0,50]},{"content":"If <ph id=\"ph1\">&lt;xref href=\"System.Threading.CountdownEvent.CurrentCount\"&gt;&lt;/xref&gt;</ph> is already at zero, this method will return false.","pos":[51,170],"source":" If <xref href=\"System.Threading.CountdownEvent.CurrentCount\"></xref> is already at zero, this method will return false."}]}],"pos":[30482,30653],"yaml":true},{"content":"The current instance has already been disposed.","nodes":[{"pos":[0,47],"content":"The current instance has already been disposed.","nodes":[{"content":"The current instance has already been disposed.","pos":[0,47]}]}],"pos":[30830,30878],"yaml":true},{"content":"<xref href=\"System.Threading.CountdownEvent.CurrentCount\"></xref> is equal to <xref href=\"System.Int32.MaxValue\"></xref>.","nodes":[{"pos":[0,121],"content":"<ph id=\"ph1\">&lt;xref href=\"System.Threading.CountdownEvent.CurrentCount\"&gt;&lt;/xref&gt;</ph> is equal to <ph id=\"ph2\">&lt;xref href=\"System.Int32.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"<xref href=\"System.Threading.CountdownEvent.CurrentCount\"></xref> is equal to <xref href=\"System.Int32.MaxValue\"></xref>."}],"pos":[30988,31110],"yaml":true},{"content":"Attempts to increment <xref href=\"System.Threading.CountdownEvent.CurrentCount\"></xref> by a specified value.","nodes":[{"pos":[0,109],"content":"Attempts to increment <ph id=\"ph1\">&lt;xref href=\"System.Threading.CountdownEvent.CurrentCount\"&gt;&lt;/xref&gt;</ph> by a specified value.","source":"Attempts to increment <xref href=\"System.Threading.CountdownEvent.CurrentCount\"></xref> by a specified value."}],"pos":[32617,32727],"yaml":true},{"content":"The value by which to increase <xref href=\"System.Threading.CountdownEvent.CurrentCount\"></xref>.","nodes":[{"pos":[0,97],"content":"The value by which to increase <ph id=\"ph1\">&lt;xref href=\"System.Threading.CountdownEvent.CurrentCount\"&gt;&lt;/xref&gt;</ph>.","source":"The value by which to increase <xref href=\"System.Threading.CountdownEvent.CurrentCount\"></xref>."}],"pos":[32875,32973],"yaml":true},{"content":"true if the increment succeeded; otherwise, false. If <xref href=\"System.Threading.CountdownEvent.CurrentCount\"></xref> is already at zero this will return false.","nodes":[{"pos":[0,162],"content":"true if the increment succeeded; otherwise, false. If <xref href=\"System.Threading.CountdownEvent.CurrentCount\"></xref> is already at zero this will return false.","nodes":[{"content":"true if the increment succeeded; otherwise, false.","pos":[0,50]},{"content":"If <ph id=\"ph1\">&lt;xref href=\"System.Threading.CountdownEvent.CurrentCount\"&gt;&lt;/xref&gt;</ph> is already at zero this will return false.","pos":[51,162],"source":" If <xref href=\"System.Threading.CountdownEvent.CurrentCount\"></xref> is already at zero this will return false."}]}],"pos":[33031,33194],"yaml":true},{"content":"The current instance has already been disposed.","nodes":[{"pos":[0,47],"content":"The current instance has already been disposed.","nodes":[{"content":"The current instance has already been disposed.","pos":[0,47]}]}],"pos":[33371,33419],"yaml":true},{"content":"<code>signalCount</code> is less than or equal to 0.","nodes":[{"pos":[0,52],"content":"<ph id=\"ph1\">&lt;code&gt;signalCount&lt;/code&gt;</ph> is less than or equal to 0.","source":"<code>signalCount</code> is less than or equal to 0."}],"pos":[33533,33586],"yaml":true},{"content":"The current instance is already set.  \n  \n -or-  \n  \n <xref href=\"System.Threading.CountdownEvent.CurrentCount\"></xref> + <code>signalCount</code> is equal to or greater than <xref href=\"System.Int32.MaxValue\"></xref>.","nodes":[{"pos":[0,36],"content":"The current instance is already set.","nodes":[{"content":"The current instance is already set.","pos":[0,36]}]},{"pos":[43,47],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[54,218],"content":"<ph id=\"ph1\">&lt;xref href=\"System.Threading.CountdownEvent.CurrentCount\"&gt;&lt;/xref&gt;</ph><ph id=\"ph2\"> + </ph><bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph3\">signalCount</ph><ept id=\"p1\">&lt;/code&gt;</ept> is equal to or greater than <ph id=\"ph4\">&lt;xref href=\"System.Int32.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"<xref href=\"System.Threading.CountdownEvent.CurrentCount\"></xref> + <code>signalCount</code> is equal to or greater than <xref href=\"System.Int32.MaxValue\"></xref>."}],"pos":[33696,33925],"yaml":true},{"content":"Blocks the current thread until the <xref href=\"System.Threading.CountdownEvent\"></xref> is set.","nodes":[{"pos":[0,96],"content":"Blocks the current thread until the <ph id=\"ph1\">&lt;xref href=\"System.Threading.CountdownEvent\"&gt;&lt;/xref&gt;</ph> is set.","source":"Blocks the current thread until the <xref href=\"System.Threading.CountdownEvent\"></xref> is set."}],"pos":[35333,35430],"yaml":true},{"content":"The caller of this method blocks indefinitely until the current instance is set. The caller will return immediately if the event is currently in a set state.","nodes":[{"pos":[0,157],"content":"The caller of this method blocks indefinitely until the current instance is set. The caller will return immediately if the event is currently in a set state.","nodes":[{"content":"The caller of this method blocks indefinitely until the current instance is set. The caller will return immediately if the event is currently in a set state.","pos":[0,157],"nodes":[{"content":"The caller of this method blocks indefinitely until the current instance is set.","pos":[0,80]},{"content":"The caller will return immediately if the event is currently in a set state.","pos":[81,157]}]}]}],"pos":[35441,35599],"yaml":true,"extradata":"MT"},{"content":"The current instance has already been disposed.","nodes":[{"pos":[0,47],"content":"The current instance has already been disposed.","nodes":[{"content":"The current instance has already been disposed.","pos":[0,47]}]}],"pos":[35832,35880],"yaml":true},{"content":"Blocks the current thread until the <xref href=\"System.Threading.CountdownEvent\"></xref> is set, using a 32-bit signed integer to measure the timeout.","nodes":[{"pos":[0,150],"content":"Blocks the current thread until the <ph id=\"ph1\">&lt;xref href=\"System.Threading.CountdownEvent\"&gt;&lt;/xref&gt;</ph> is set, using a 32-bit signed integer to measure the timeout.","source":"Blocks the current thread until the <xref href=\"System.Threading.CountdownEvent\"></xref> is set, using a 32-bit signed integer to measure the timeout."}],"pos":[37345,37496],"yaml":true},{"content":"The number of milliseconds to wait, or <xref href=\"System.Threading.Timeout.Infinite\"></xref>(-1) to wait indefinitely.","nodes":[{"pos":[0,119],"content":"The number of milliseconds to wait, or <ph id=\"ph1\">&lt;xref href=\"System.Threading.Timeout.Infinite\"&gt;&lt;/xref&gt;</ph>(-1) to wait indefinitely.","source":"The number of milliseconds to wait, or <xref href=\"System.Threading.Timeout.Infinite\"></xref>(-1) to wait indefinitely."}],"pos":[37653,37773],"yaml":true},{"content":"true if the <xref href=\"System.Threading.CountdownEvent\"></xref> was set; otherwise, false.","nodes":[{"pos":[0,91],"content":"true if the <ph id=\"ph1\">&lt;xref href=\"System.Threading.CountdownEvent\"&gt;&lt;/xref&gt;</ph> was set; otherwise, false.","source":"true if the <xref href=\"System.Threading.CountdownEvent\"></xref> was set; otherwise, false."}],"pos":[37831,37923],"yaml":true},{"content":"The current instance has already been disposed.","nodes":[{"pos":[0,47],"content":"The current instance has already been disposed.","nodes":[{"content":"The current instance has already been disposed.","pos":[0,47]}]}],"pos":[38093,38141],"yaml":true},{"content":"<code>millisecondsTimeout</code> is a negative number other than -1, which represents an infinite time-out.","nodes":[{"pos":[0,107],"content":"<ph id=\"ph1\">&lt;code&gt;millisecondsTimeout&lt;/code&gt;</ph> is a negative number other than -1, which represents an infinite time-out.","source":"<code>millisecondsTimeout</code> is a negative number other than -1, which represents an infinite time-out."}],"pos":[38255,38363],"yaml":true},{"content":"Blocks the current thread until the <xref href=\"System.Threading.CountdownEvent\"></xref> is set, while observing a <xref href=\"System.Threading.CancellationToken\"></xref>.","nodes":[{"pos":[0,171],"content":"Blocks the current thread until the <ph id=\"ph1\">&lt;xref href=\"System.Threading.CountdownEvent\"&gt;&lt;/xref&gt;</ph> is set, while observing a <ph id=\"ph2\">&lt;xref href=\"System.Threading.CancellationToken\"&gt;&lt;/xref&gt;</ph>.","source":"Blocks the current thread until the <xref href=\"System.Threading.CountdownEvent\"></xref> is set, while observing a <xref href=\"System.Threading.CancellationToken\"></xref>."}],"pos":[39930,40102],"yaml":true},{"content":"The caller of this method blocks indefinitely until the current instance is set. The caller will return immediately if the event is currently in a set state. If the <xref:System.Threading.CancellationToken> being observed is canceled during the wait operation, an <xref:System.OperationCanceledException> will be thrown.","nodes":[{"pos":[0,320],"content":"The caller of this method blocks indefinitely until the current instance is set. The caller will return immediately if the event is currently in a set state. If the <xref:System.Threading.CancellationToken> being observed is canceled during the wait operation, an <xref:System.OperationCanceledException> will be thrown.","nodes":[{"content":"The caller of this method blocks indefinitely until the current instance is set. The caller will return immediately if the event is currently in a set state. If the <xref:System.Threading.CancellationToken> being observed is canceled during the wait operation, an <xref:System.OperationCanceledException> will be thrown.","pos":[0,320],"nodes":[{"content":"The caller of this method blocks indefinitely until the current instance is set.","pos":[0,80]},{"content":"The caller will return immediately if the event is currently in a set state.","pos":[81,157]},{"content":"If the <ph id=\"ph1\">&lt;xref:System.Threading.CancellationToken&gt;</ph> being observed is canceled during the wait operation, an <ph id=\"ph2\">&lt;xref:System.OperationCanceledException&gt;</ph> will be thrown.","pos":[158,320],"source":" If the <xref:System.Threading.CancellationToken> being observed is canceled during the wait operation, an <xref:System.OperationCanceledException> will be thrown."}]}]}],"pos":[40113,40434],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Threading.CancellationToken\"></xref> to observe.","nodes":[{"pos":[0,71],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationToken\"&gt;&lt;/xref&gt;</ph> to observe.","source":"The <xref href=\"System.Threading.CancellationToken\"></xref> to observe."}],"pos":[40640,40712],"yaml":true},{"content":"<code>cancellationToken</code> has been canceled.","nodes":[{"pos":[0,49],"content":"<ph id=\"ph1\">&lt;code&gt;cancellationToken&lt;/code&gt;</ph> has been canceled.","source":"<code>cancellationToken</code> has been canceled."}],"pos":[40888,40938],"yaml":true},{"content":"The current instance has already been disposed. -or- The <xref href=\"System.Threading.CancellationTokenSource\"></xref> that created <code>cancellationToken</code> has already been disposed.","nodes":[{"pos":[0,189],"content":"The current instance has already been disposed. -or- The <xref href=\"System.Threading.CancellationTokenSource\"></xref> that created <code>cancellationToken</code> has already been disposed.","nodes":[{"content":"The current instance has already been disposed.","pos":[0,47]},{"content":"-or- The <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationTokenSource\"&gt;&lt;/xref&gt;</ph> that created <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">cancellationToken</ph><ept id=\"p1\">&lt;/code&gt;</ept> has already been disposed.","pos":[48,189],"source":" -or- The <xref href=\"System.Threading.CancellationTokenSource\"></xref> that created <code>cancellationToken</code> has already been disposed."}]}],"pos":[41044,41234],"yaml":true},{"content":"Blocks the current thread until the <xref href=\"System.Threading.CountdownEvent\"></xref> is set, using a <xref href=\"System.TimeSpan\"></xref> to measure the timeout.","nodes":[{"pos":[0,165],"content":"Blocks the current thread until the <ph id=\"ph1\">&lt;xref href=\"System.Threading.CountdownEvent\"&gt;&lt;/xref&gt;</ph> is set, using a <ph id=\"ph2\">&lt;xref href=\"System.TimeSpan\"&gt;&lt;/xref&gt;</ph> to measure the timeout.","source":"Blocks the current thread until the <xref href=\"System.Threading.CountdownEvent\"></xref> is set, using a <xref href=\"System.TimeSpan\"></xref> to measure the timeout."}],"pos":[42717,42883],"yaml":true},{"content":"A <xref href=\"System.TimeSpan\"></xref> that represents the number of milliseconds to wait, or a <xref href=\"System.TimeSpan\"></xref> that represents -1 milliseconds to wait indefinitely.","nodes":[{"pos":[0,186],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.TimeSpan\"&gt;&lt;/xref&gt;</ph> that represents the number of milliseconds to wait, or a <ph id=\"ph2\">&lt;xref href=\"System.TimeSpan\"&gt;&lt;/xref&gt;</ph> that represents -1 milliseconds to wait indefinitely.","source":"A <xref href=\"System.TimeSpan\"></xref> that represents the number of milliseconds to wait, or a <xref href=\"System.TimeSpan\"></xref> that represents -1 milliseconds to wait indefinitely."}],"pos":[43024,43211],"yaml":true},{"content":"true if the <xref href=\"System.Threading.CountdownEvent\"></xref> was set; otherwise, false.","nodes":[{"pos":[0,91],"content":"true if the <ph id=\"ph1\">&lt;xref href=\"System.Threading.CountdownEvent\"&gt;&lt;/xref&gt;</ph> was set; otherwise, false.","source":"true if the <xref href=\"System.Threading.CountdownEvent\"></xref> was set; otherwise, false."}],"pos":[43269,43361],"yaml":true},{"content":"The current instance has already been disposed.","nodes":[{"pos":[0,47],"content":"The current instance has already been disposed.","nodes":[{"content":"The current instance has already been disposed.","pos":[0,47]}]}],"pos":[43531,43579],"yaml":true},{"content":"<code>timeout</code> is a negative number other than -1 milliseconds, which represents an infinite time-out -or- timeout is greater than <xref href=\"System.Int32.MaxValue\"></xref>.","nodes":[{"pos":[0,180],"content":"<ph id=\"ph1\">&lt;code&gt;timeout&lt;/code&gt;</ph> is a negative number other than -1 milliseconds, which represents an infinite time-out -or- timeout is greater than <ph id=\"ph2\">&lt;xref href=\"System.Int32.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>timeout</code> is a negative number other than -1 milliseconds, which represents an infinite time-out -or- timeout is greater than <xref href=\"System.Int32.MaxValue\"></xref>."}],"pos":[43693,43874],"yaml":true},{"content":"Blocks the current thread until the <xref href=\"System.Threading.CountdownEvent\"></xref> is set, using a 32-bit signed integer to measure the timeout, while observing a <xref href=\"System.Threading.CancellationToken\"></xref>.","nodes":[{"pos":[0,225],"content":"Blocks the current thread until the <ph id=\"ph1\">&lt;xref href=\"System.Threading.CountdownEvent\"&gt;&lt;/xref&gt;</ph> is set, using a 32-bit signed integer to measure the timeout, while observing a <ph id=\"ph2\">&lt;xref href=\"System.Threading.CancellationToken\"&gt;&lt;/xref&gt;</ph>.","source":"Blocks the current thread until the <xref href=\"System.Threading.CountdownEvent\"></xref> is set, using a 32-bit signed integer to measure the timeout, while observing a <xref href=\"System.Threading.CancellationToken\"></xref>."}],"pos":[45501,45727],"yaml":true},{"content":"The number of milliseconds to wait, or <xref href=\"System.Threading.Timeout.Infinite\"></xref>(-1) to wait indefinitely.","nodes":[{"pos":[0,119],"content":"The number of milliseconds to wait, or <ph id=\"ph1\">&lt;xref href=\"System.Threading.Timeout.Infinite\"&gt;&lt;/xref&gt;</ph>(-1) to wait indefinitely.","source":"The number of milliseconds to wait, or <xref href=\"System.Threading.Timeout.Infinite\"></xref>(-1) to wait indefinitely."}],"pos":[45938,46058],"yaml":true},{"content":"The <xref href=\"System.Threading.CancellationToken\"></xref> to observe.","nodes":[{"pos":[0,71],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationToken\"&gt;&lt;/xref&gt;</ph> to observe.","source":"The <xref href=\"System.Threading.CancellationToken\"></xref> to observe."}],"pos":[46152,46224],"yaml":true},{"content":"true if the <xref href=\"System.Threading.CountdownEvent\"></xref> was set; otherwise, false.","nodes":[{"pos":[0,91],"content":"true if the <ph id=\"ph1\">&lt;xref href=\"System.Threading.CountdownEvent\"&gt;&lt;/xref&gt;</ph> was set; otherwise, false.","source":"true if the <xref href=\"System.Threading.CountdownEvent\"></xref> was set; otherwise, false."}],"pos":[46282,46374],"yaml":true},{"content":"<code>cancellationToken</code> has been canceled.","nodes":[{"pos":[0,49],"content":"<ph id=\"ph1\">&lt;code&gt;cancellationToken&lt;/code&gt;</ph> has been canceled.","source":"<code>cancellationToken</code> has been canceled."}],"pos":[46550,46600],"yaml":true},{"content":"The current instance has already been disposed. -or- The <xref href=\"System.Threading.CancellationTokenSource\"></xref> that created <code>cancellationToken</code> has already been disposed.","nodes":[{"pos":[0,189],"content":"The current instance has already been disposed. -or- The <xref href=\"System.Threading.CancellationTokenSource\"></xref> that created <code>cancellationToken</code> has already been disposed.","nodes":[{"content":"The current instance has already been disposed.","pos":[0,47]},{"content":"-or- The <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationTokenSource\"&gt;&lt;/xref&gt;</ph> that created <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">cancellationToken</ph><ept id=\"p1\">&lt;/code&gt;</ept> has already been disposed.","pos":[48,189],"source":" -or- The <xref href=\"System.Threading.CancellationTokenSource\"></xref> that created <code>cancellationToken</code> has already been disposed."}]}],"pos":[46706,46896],"yaml":true},{"content":"<code>millisecondsTimeout</code> is a negative number other than -1, which represents an infinite time-out.","nodes":[{"pos":[0,107],"content":"<ph id=\"ph1\">&lt;code&gt;millisecondsTimeout&lt;/code&gt;</ph> is a negative number other than -1, which represents an infinite time-out.","source":"<code>millisecondsTimeout</code> is a negative number other than -1, which represents an infinite time-out."}],"pos":[47010,47118],"yaml":true},{"content":"Blocks the current thread until the <xref href=\"System.Threading.CountdownEvent\"></xref> is set, using a <xref href=\"System.TimeSpan\"></xref> to measure the timeout, while observing a <xref href=\"System.Threading.CancellationToken\"></xref>.","nodes":[{"pos":[0,240],"content":"Blocks the current thread until the <ph id=\"ph1\">&lt;xref href=\"System.Threading.CountdownEvent\"&gt;&lt;/xref&gt;</ph> is set, using a <ph id=\"ph2\">&lt;xref href=\"System.TimeSpan\"&gt;&lt;/xref&gt;</ph> to measure the timeout, while observing a <ph id=\"ph3\">&lt;xref href=\"System.Threading.CancellationToken\"&gt;&lt;/xref&gt;</ph>.","source":"Blocks the current thread until the <xref href=\"System.Threading.CountdownEvent\"></xref> is set, using a <xref href=\"System.TimeSpan\"></xref> to measure the timeout, while observing a <xref href=\"System.Threading.CancellationToken\"></xref>."}],"pos":[48763,49004],"yaml":true},{"content":"A <xref href=\"System.TimeSpan\"></xref> that represents the number of milliseconds to wait, or a <xref href=\"System.TimeSpan\"></xref> that represents -1 milliseconds to wait indefinitely.","nodes":[{"pos":[0,186],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.TimeSpan\"&gt;&lt;/xref&gt;</ph> that represents the number of milliseconds to wait, or a <ph id=\"ph2\">&lt;xref href=\"System.TimeSpan\"&gt;&lt;/xref&gt;</ph> that represents -1 milliseconds to wait indefinitely.","source":"A <xref href=\"System.TimeSpan\"></xref> that represents the number of milliseconds to wait, or a <xref href=\"System.TimeSpan\"></xref> that represents -1 milliseconds to wait indefinitely."}],"pos":[49199,49386],"yaml":true},{"content":"The <xref href=\"System.Threading.CancellationToken\"></xref> to observe.","nodes":[{"pos":[0,71],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationToken\"&gt;&lt;/xref&gt;</ph> to observe.","source":"The <xref href=\"System.Threading.CancellationToken\"></xref> to observe."}],"pos":[49480,49552],"yaml":true},{"content":"true if the <xref href=\"System.Threading.CountdownEvent\"></xref> was set; otherwise, false.","nodes":[{"pos":[0,91],"content":"true if the <ph id=\"ph1\">&lt;xref href=\"System.Threading.CountdownEvent\"&gt;&lt;/xref&gt;</ph> was set; otherwise, false.","source":"true if the <xref href=\"System.Threading.CountdownEvent\"></xref> was set; otherwise, false."}],"pos":[49610,49702],"yaml":true},{"content":"<code>cancellationToken</code> has been canceled.","nodes":[{"pos":[0,49],"content":"<ph id=\"ph1\">&lt;code&gt;cancellationToken&lt;/code&gt;</ph> has been canceled.","source":"<code>cancellationToken</code> has been canceled."}],"pos":[49878,49928],"yaml":true},{"content":"The current instance has already been disposed. -or- The <xref href=\"System.Threading.CancellationTokenSource\"></xref> that created <code>cancellationToken</code> has already been disposed.","nodes":[{"pos":[0,189],"content":"The current instance has already been disposed. -or- The <xref href=\"System.Threading.CancellationTokenSource\"></xref> that created <code>cancellationToken</code> has already been disposed.","nodes":[{"content":"The current instance has already been disposed.","pos":[0,47]},{"content":"-or- The <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationTokenSource\"&gt;&lt;/xref&gt;</ph> that created <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">cancellationToken</ph><ept id=\"p1\">&lt;/code&gt;</ept> has already been disposed.","pos":[48,189],"source":" -or- The <xref href=\"System.Threading.CancellationTokenSource\"></xref> that created <code>cancellationToken</code> has already been disposed."}]}],"pos":[50034,50224],"yaml":true},{"content":"<code>timeout</code> is a negative number other than -1 milliseconds, which represents an infinite time-out -or- timeout is greater than <xref href=\"System.Int32.MaxValue\"></xref>.","nodes":[{"pos":[0,180],"content":"<ph id=\"ph1\">&lt;code&gt;timeout&lt;/code&gt;</ph> is a negative number other than -1 milliseconds, which represents an infinite time-out -or- timeout is greater than <ph id=\"ph2\">&lt;xref href=\"System.Int32.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>timeout</code> is a negative number other than -1 milliseconds, which represents an infinite time-out -or- timeout is greater than <xref href=\"System.Int32.MaxValue\"></xref>."}],"pos":[50338,50519],"yaml":true},{"content":"Gets a <xref href=\"System.Threading.WaitHandle\"></xref> that is used to wait for the event to be set.","nodes":[{"pos":[0,101],"content":"Gets a <ph id=\"ph1\">&lt;xref href=\"System.Threading.WaitHandle\"&gt;&lt;/xref&gt;</ph> that is used to wait for the event to be set.","source":"Gets a <xref href=\"System.Threading.WaitHandle\"></xref> that is used to wait for the event to be set."}],"pos":[51959,52061],"yaml":true},{"content":"<xref:System.Threading.CountdownEvent.WaitHandle%2A> should only be used if it's needed for integration with code bases that rely on having a WaitHandle. If all that's needed is to wait for the <xref:System.Threading.CountdownEvent> to be set, the <xref:System.Threading.CountdownEvent.Wait%2A> method should be preferred.","nodes":[{"pos":[0,322],"content":"<xref:System.Threading.CountdownEvent.WaitHandle%2A> should only be used if it's needed for integration with code bases that rely on having a WaitHandle. If all that's needed is to wait for the <xref:System.Threading.CountdownEvent> to be set, the <xref:System.Threading.CountdownEvent.Wait%2A> method should be preferred.","nodes":[{"content":"<xref:System.Threading.CountdownEvent.WaitHandle%2A> should only be used if it's needed for integration with code bases that rely on having a WaitHandle. If all that's needed is to wait for the <xref:System.Threading.CountdownEvent> to be set, the <xref:System.Threading.CountdownEvent.Wait%2A> method should be preferred.","pos":[0,322],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Threading.CountdownEvent.WaitHandle%2A&gt;</ph> should only be used if it's needed for integration with code bases that rely on having a WaitHandle.","pos":[0,153],"source":"<xref:System.Threading.CountdownEvent.WaitHandle%2A> should only be used if it's needed for integration with code bases that rely on having a WaitHandle."},{"content":"If all that's needed is to wait for the <ph id=\"ph1\">&lt;xref:System.Threading.CountdownEvent&gt;</ph> to be set, the <ph id=\"ph2\">&lt;xref:System.Threading.CountdownEvent.Wait%2A&gt;</ph> method should be preferred.","pos":[154,322],"source":" If all that's needed is to wait for the <xref:System.Threading.CountdownEvent> to be set, the <xref:System.Threading.CountdownEvent.Wait%2A> method should be preferred."}]}]}],"pos":[52072,52395],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Threading.WaitHandle\"></xref> that is used to wait for the event to be set.","nodes":[{"pos":[0,96],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Threading.WaitHandle\"&gt;&lt;/xref&gt;</ph> that is used to wait for the event to be set.","source":"A <xref href=\"System.Threading.WaitHandle\"></xref> that is used to wait for the event to be set."}],"pos":[52544,52641],"yaml":true},{"content":"The current instance has already been disposed.","nodes":[{"pos":[0,47],"content":"The current instance has already been disposed.","nodes":[{"content":"The current instance has already been disposed.","pos":[0,47]}]}],"pos":[52817,52865],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Threading.CountdownEvent\n  commentId: T:System.Threading.CountdownEvent\n  id: CountdownEvent\n  children:\n  - System.Threading.CountdownEvent.#ctor(System.Int32)\n  - System.Threading.CountdownEvent.AddCount\n  - System.Threading.CountdownEvent.AddCount(System.Int32)\n  - System.Threading.CountdownEvent.CurrentCount\n  - System.Threading.CountdownEvent.Dispose\n  - System.Threading.CountdownEvent.Dispose(System.Boolean)\n  - System.Threading.CountdownEvent.InitialCount\n  - System.Threading.CountdownEvent.IsSet\n  - System.Threading.CountdownEvent.Reset\n  - System.Threading.CountdownEvent.Reset(System.Int32)\n  - System.Threading.CountdownEvent.Signal(System.Int32)\n  - System.Threading.CountdownEvent.Signal\n  - System.Threading.CountdownEvent.TryAddCount\n  - System.Threading.CountdownEvent.TryAddCount(System.Int32)\n  - System.Threading.CountdownEvent.Wait\n  - System.Threading.CountdownEvent.Wait(System.Int32)\n  - System.Threading.CountdownEvent.Wait(System.Threading.CancellationToken)\n  - System.Threading.CountdownEvent.Wait(System.TimeSpan)\n  - System.Threading.CountdownEvent.Wait(System.Int32,System.Threading.CancellationToken)\n  - System.Threading.CountdownEvent.Wait(System.TimeSpan,System.Threading.CancellationToken)\n  - System.Threading.CountdownEvent.WaitHandle\n  langs:\n  - csharp\n  name: CountdownEvent\n  nameWithType: CountdownEvent\n  fullName: System.Threading.CountdownEvent\n  type: Class\n  assemblies:\n  - System.Threading\n  - mscorlib\n  - netstandard\n  namespace: System.Threading\n  summary: Represents a synchronization primitive that is signaled when its count reaches zero.\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public class CountdownEvent : IDisposable\n  inheritance:\n  - System.Object\n  implements:\n  - System.IDisposable\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/CountdownEvent.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.CountdownEvent.#ctor(System.Int32)\n  commentId: M:System.Threading.CountdownEvent.#ctor(System.Int32)\n  id: '#ctor(System.Int32)'\n  parent: System.Threading.CountdownEvent\n  langs:\n  - csharp\n  name: CountdownEvent(Int32)\n  nameWithType: CountdownEvent.CountdownEvent(Int32)\n  fullName: CountdownEvent.CountdownEvent(Int32)\n  type: Constructor\n  assemblies:\n  - System.Threading\n  - mscorlib\n  - netstandard\n  namespace: System.Threading\n  summary: Initializes a new instance of <xref href=\"System.Threading.CountdownEvent\"></xref> class with the specified count.\n  remarks: iI `initialCount` is 0, the event is created in a signaled state.\n  syntax:\n    content: public CountdownEvent (int initialCount);\n    parameters:\n    - id: initialCount\n      type: System.Int32\n      description: The number of signals initially required to set the <xref href=\"System.Threading.CountdownEvent\"></xref>.\n  overload: System.Threading.CountdownEvent.#ctor*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>initialCount</code> is less than 0.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/CountdownEvent.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.CountdownEvent.AddCount\n  commentId: M:System.Threading.CountdownEvent.AddCount\n  id: AddCount\n  parent: System.Threading.CountdownEvent\n  langs:\n  - csharp\n  name: AddCount()\n  nameWithType: CountdownEvent.AddCount()\n  fullName: CountdownEvent.AddCount()\n  type: Method\n  assemblies:\n  - System.Threading\n  - mscorlib\n  - netstandard\n  namespace: System.Threading\n  summary: Increments the <xref href=\"System.Threading.CountdownEvent\"></xref>'s current count by one.\n  syntax:\n    content: public void AddCount ();\n    parameters: []\n  overload: System.Threading.CountdownEvent.AddCount*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The current instance has already been disposed.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"The current instance is already set.  \\n  \\n -or-  \\n  \\n <xref href=\\\"System.Threading.CountdownEvent.CurrentCount\\\"></xref> is equal to or greater than <xref href=\\\"System.Int32.MaxValue\\\"></xref>.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/CountdownEvent.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.CountdownEvent.AddCount(System.Int32)\n  commentId: M:System.Threading.CountdownEvent.AddCount(System.Int32)\n  id: AddCount(System.Int32)\n  parent: System.Threading.CountdownEvent\n  langs:\n  - csharp\n  name: AddCount(Int32)\n  nameWithType: CountdownEvent.AddCount(Int32)\n  fullName: CountdownEvent.AddCount(Int32)\n  type: Method\n  assemblies:\n  - System.Threading\n  - mscorlib\n  - netstandard\n  namespace: System.Threading\n  summary: Increments the <xref href=\"System.Threading.CountdownEvent\"></xref>'s current count by a specified value.\n  syntax:\n    content: public void AddCount (int signalCount);\n    parameters:\n    - id: signalCount\n      type: System.Int32\n      description: The value by which to increase <xref href=\"System.Threading.CountdownEvent.CurrentCount\"></xref>.\n  overload: System.Threading.CountdownEvent.AddCount*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The current instance has already been disposed.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>signalCount</code> is less than or equal to 0.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"The current instance is already set.  \\n  \\n -or-  \\n  \\n <xref href=\\\"System.Threading.CountdownEvent.CurrentCount\\\"></xref> is equal to or greater than <xref href=\\\"System.Int32.MaxValue\\\"></xref> after count is incremented by <code>signalCount.</code>\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/CountdownEvent.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.CountdownEvent.CurrentCount\n  commentId: P:System.Threading.CountdownEvent.CurrentCount\n  id: CurrentCount\n  parent: System.Threading.CountdownEvent\n  langs:\n  - csharp\n  name: CurrentCount\n  nameWithType: CountdownEvent.CurrentCount\n  fullName: CountdownEvent.CurrentCount\n  type: Property\n  assemblies:\n  - System.Threading\n  - mscorlib\n  - netstandard\n  namespace: System.Threading\n  summary: Gets the number of remaining signals required to set the event.\n  syntax:\n    content: public int CurrentCount { get; }\n    return:\n      type: System.Int32\n      description: The number of remaining signals required to set the event.\n  overload: System.Threading.CountdownEvent.CurrentCount*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/CountdownEvent.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.CountdownEvent.Dispose\n  commentId: M:System.Threading.CountdownEvent.Dispose\n  id: Dispose\n  parent: System.Threading.CountdownEvent\n  langs:\n  - csharp\n  name: Dispose()\n  nameWithType: CountdownEvent.Dispose()\n  fullName: CountdownEvent.Dispose()\n  type: Method\n  assemblies:\n  - System.Threading\n  - mscorlib\n  - netstandard\n  namespace: System.Threading\n  summary: Releases all resources used by the current instance of the <xref href=\"System.Threading.CountdownEvent\"></xref> class.\n  remarks: \"Call `Dispose` when you are finished using the <xref:System.Threading.CountdownEvent>. The `Dispose` method leaves the <xref:System.Threading.CountdownEvent> in an unusable state. After calling `Dispose`, you must release all references to the <xref:System.Threading.CountdownEvent> so the garbage collector can reclaim the memory that the <xref:System.Threading.CountdownEvent> was occupying.  \\n  \\n For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).  \\n  \\n> [!NOTE]\\n>  Always call `Dispose` before you release your last reference to the <xref:System.Threading.CountdownEvent>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Threading.CountdownEvent> object's `Finalize` method.\"\n  syntax:\n    content: public void Dispose ();\n    parameters: []\n  overload: System.Threading.CountdownEvent.Dispose*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/CountdownEvent.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.CountdownEvent.Dispose(System.Boolean)\n  commentId: M:System.Threading.CountdownEvent.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.Threading.CountdownEvent\n  langs:\n  - csharp\n  name: Dispose(Boolean)\n  nameWithType: CountdownEvent.Dispose(Boolean)\n  fullName: CountdownEvent.Dispose(Boolean)\n  type: Method\n  assemblies:\n  - System.Threading\n  - mscorlib\n  - netstandard\n  namespace: System.Threading\n  summary: Releases the unmanaged resources used by the <xref href=\"System.Threading.CountdownEvent\"></xref>, and optionally releases the managed resources.\n  remarks: Unlike most of the members of <xref:System.Threading.CountdownEvent>, <xref:System.Threading.CountdownEvent.Dispose%2A> is not thread-safe and may not be used concurrently with other members of this instance.\n  syntax:\n    content: protected virtual void Dispose (bool disposing);\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: true to release both managed and unmanaged resources; false to release only unmanaged resources.\n  overload: System.Threading.CountdownEvent.Dispose*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/CountdownEvent.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.CountdownEvent.InitialCount\n  commentId: P:System.Threading.CountdownEvent.InitialCount\n  id: InitialCount\n  parent: System.Threading.CountdownEvent\n  langs:\n  - csharp\n  name: InitialCount\n  nameWithType: CountdownEvent.InitialCount\n  fullName: CountdownEvent.InitialCount\n  type: Property\n  assemblies:\n  - System.Threading\n  - mscorlib\n  - netstandard\n  namespace: System.Threading\n  summary: Gets the numbers of signals initially required to set the event.\n  syntax:\n    content: public int InitialCount { get; }\n    return:\n      type: System.Int32\n      description: The number of signals initially required to set the event.\n  overload: System.Threading.CountdownEvent.InitialCount*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/CountdownEvent.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.CountdownEvent.IsSet\n  commentId: P:System.Threading.CountdownEvent.IsSet\n  id: IsSet\n  parent: System.Threading.CountdownEvent\n  langs:\n  - csharp\n  name: IsSet\n  nameWithType: CountdownEvent.IsSet\n  fullName: CountdownEvent.IsSet\n  type: Property\n  assemblies:\n  - System.Threading\n  - mscorlib\n  - netstandard\n  namespace: System.Threading\n  summary: Indicates whether the <xref href=\"System.Threading.CountdownEvent\"></xref> object's current count has reached zero..\n  remarks: The <xref:System.Threading.CountdownEvent> does not raise an event when the countdown has reached zero. Instead, the <xref:System.Threading.CountdownEvent.CurrentCount%2A> property equals zero, and the <xref:System.Threading.CountdownEvent.IsSet%2A> property equals `true`.\n  syntax:\n    content: public bool IsSet { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the current count is zero; otherwise, `false`.'\n  overload: System.Threading.CountdownEvent.IsSet*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/CountdownEvent.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.CountdownEvent.Reset\n  commentId: M:System.Threading.CountdownEvent.Reset\n  id: Reset\n  parent: System.Threading.CountdownEvent\n  langs:\n  - csharp\n  name: Reset()\n  nameWithType: CountdownEvent.Reset()\n  fullName: CountdownEvent.Reset()\n  type: Method\n  assemblies:\n  - System.Threading\n  - mscorlib\n  - netstandard\n  namespace: System.Threading\n  summary: Resets the <xref href=\"System.Threading.CountdownEvent.CurrentCount\"></xref> to the value of <xref href=\"System.Threading.CountdownEvent.InitialCount\"></xref>.\n  remarks: Unlike most of the members of <xref:System.Threading.CountdownEvent>, Reset is not thread-safe and may not be used concurrently with other members of this instance.\n  syntax:\n    content: public void Reset ();\n    parameters: []\n  overload: System.Threading.CountdownEvent.Reset*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The current instance has already been disposed..\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/CountdownEvent.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.CountdownEvent.Reset(System.Int32)\n  commentId: M:System.Threading.CountdownEvent.Reset(System.Int32)\n  id: Reset(System.Int32)\n  parent: System.Threading.CountdownEvent\n  langs:\n  - csharp\n  name: Reset(Int32)\n  nameWithType: CountdownEvent.Reset(Int32)\n  fullName: CountdownEvent.Reset(Int32)\n  type: Method\n  assemblies:\n  - System.Threading\n  - mscorlib\n  - netstandard\n  namespace: System.Threading\n  summary: Resets the <xref href=\"System.Threading.CountdownEvent.InitialCount\"></xref> property to a specified value.\n  remarks: This method resets <xref:System.Threading.CountdownEvent.InitialCount%2A> for all subsequent accesses of the property on the current instance. Unlike most of the members of <xref:System.Threading.CountdownEvent>, Reset is not thread-safe and may not be used concurrently with other members of this instance.\n  syntax:\n    content: public void Reset (int count);\n    parameters:\n    - id: count\n      type: System.Int32\n      description: The number of signals required to set the <xref href=\"System.Threading.CountdownEvent\"></xref>.\n  overload: System.Threading.CountdownEvent.Reset*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The current instance has alread been disposed.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>count</code> is less than 0.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/CountdownEvent.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.CountdownEvent.Signal(System.Int32)\n  commentId: M:System.Threading.CountdownEvent.Signal(System.Int32)\n  id: Signal(System.Int32)\n  parent: System.Threading.CountdownEvent\n  langs:\n  - csharp\n  name: Signal(Int32)\n  nameWithType: CountdownEvent.Signal(Int32)\n  fullName: CountdownEvent.Signal(Int32)\n  type: Method\n  assemblies:\n  - System.Threading\n  - mscorlib\n  - netstandard\n  namespace: System.Threading\n  summary: Registers multiple signals with the <xref href=\"System.Threading.CountdownEvent\"></xref>, decrementing the value of <xref href=\"System.Threading.CountdownEvent.CurrentCount\"></xref> by the specified amount.\n  syntax:\n    content: public bool Signal (int signalCount);\n    parameters:\n    - id: signalCount\n      type: System.Int32\n      description: The number of signals to register.\n    return:\n      type: System.Boolean\n      description: true if the signals caused the count to reach zero and the event was set; otherwise, false.\n  overload: System.Threading.CountdownEvent.Signal*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The current instance has already been disposed.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>signalCount</code> is less than 1.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The current instance is already set. -or- Or <code>signalCount</code> is greater than <xref href=\"System.Threading.CountdownEvent.CurrentCount\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/CountdownEvent.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.CountdownEvent.Signal\n  commentId: M:System.Threading.CountdownEvent.Signal\n  id: Signal\n  parent: System.Threading.CountdownEvent\n  langs:\n  - csharp\n  name: Signal()\n  nameWithType: CountdownEvent.Signal()\n  fullName: CountdownEvent.Signal()\n  type: Method\n  assemblies:\n  - System.Threading\n  - mscorlib\n  - netstandard\n  namespace: System.Threading\n  summary: Registers a signal with the <xref href=\"System.Threading.CountdownEvent\"></xref>, decrementing the value of <xref href=\"System.Threading.CountdownEvent.CurrentCount\"></xref>.\n  syntax:\n    content: public bool Signal ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: true if the signal caused the count to reach zero and the event was set; otherwise, false.\n  overload: System.Threading.CountdownEvent.Signal*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The current instance has already been disposed.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The current instance is already set.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/CountdownEvent.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.CountdownEvent.TryAddCount\n  commentId: M:System.Threading.CountdownEvent.TryAddCount\n  id: TryAddCount\n  parent: System.Threading.CountdownEvent\n  langs:\n  - csharp\n  name: TryAddCount()\n  nameWithType: CountdownEvent.TryAddCount()\n  fullName: CountdownEvent.TryAddCount()\n  type: Method\n  assemblies:\n  - System.Threading\n  - mscorlib\n  - netstandard\n  namespace: System.Threading\n  summary: Attempts to increment <xref href=\"System.Threading.CountdownEvent.CurrentCount\"></xref> by one.\n  syntax:\n    content: public bool TryAddCount ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: true if the increment succeeded; otherwise, false. If <xref href=\"System.Threading.CountdownEvent.CurrentCount\"></xref> is already at zero, this method will return false.\n  overload: System.Threading.CountdownEvent.TryAddCount*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The current instance has already been disposed.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <xref href=\"System.Threading.CountdownEvent.CurrentCount\"></xref> is equal to <xref href=\"System.Int32.MaxValue\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/CountdownEvent.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.CountdownEvent.TryAddCount(System.Int32)\n  commentId: M:System.Threading.CountdownEvent.TryAddCount(System.Int32)\n  id: TryAddCount(System.Int32)\n  parent: System.Threading.CountdownEvent\n  langs:\n  - csharp\n  name: TryAddCount(Int32)\n  nameWithType: CountdownEvent.TryAddCount(Int32)\n  fullName: CountdownEvent.TryAddCount(Int32)\n  type: Method\n  assemblies:\n  - System.Threading\n  - mscorlib\n  - netstandard\n  namespace: System.Threading\n  summary: Attempts to increment <xref href=\"System.Threading.CountdownEvent.CurrentCount\"></xref> by a specified value.\n  syntax:\n    content: public bool TryAddCount (int signalCount);\n    parameters:\n    - id: signalCount\n      type: System.Int32\n      description: The value by which to increase <xref href=\"System.Threading.CountdownEvent.CurrentCount\"></xref>.\n    return:\n      type: System.Boolean\n      description: true if the increment succeeded; otherwise, false. If <xref href=\"System.Threading.CountdownEvent.CurrentCount\"></xref> is already at zero this will return false.\n  overload: System.Threading.CountdownEvent.TryAddCount*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The current instance has already been disposed.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>signalCount</code> is less than or equal to 0.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"The current instance is already set.  \\n  \\n -or-  \\n  \\n <xref href=\\\"System.Threading.CountdownEvent.CurrentCount\\\"></xref> + <code>signalCount</code> is equal to or greater than <xref href=\\\"System.Int32.MaxValue\\\"></xref>.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/CountdownEvent.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.CountdownEvent.Wait\n  commentId: M:System.Threading.CountdownEvent.Wait\n  id: Wait\n  parent: System.Threading.CountdownEvent\n  langs:\n  - csharp\n  name: Wait()\n  nameWithType: CountdownEvent.Wait()\n  fullName: CountdownEvent.Wait()\n  type: Method\n  assemblies:\n  - System.Threading\n  - mscorlib\n  - netstandard\n  namespace: System.Threading\n  summary: Blocks the current thread until the <xref href=\"System.Threading.CountdownEvent\"></xref> is set.\n  remarks: The caller of this method blocks indefinitely until the current instance is set. The caller will return immediately if the event is currently in a set state.\n  syntax:\n    content: public void Wait ();\n    parameters: []\n  overload: System.Threading.CountdownEvent.Wait*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The current instance has already been disposed.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/CountdownEvent.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.CountdownEvent.Wait(System.Int32)\n  commentId: M:System.Threading.CountdownEvent.Wait(System.Int32)\n  id: Wait(System.Int32)\n  parent: System.Threading.CountdownEvent\n  langs:\n  - csharp\n  name: Wait(Int32)\n  nameWithType: CountdownEvent.Wait(Int32)\n  fullName: CountdownEvent.Wait(Int32)\n  type: Method\n  assemblies:\n  - System.Threading\n  - mscorlib\n  - netstandard\n  namespace: System.Threading\n  summary: Blocks the current thread until the <xref href=\"System.Threading.CountdownEvent\"></xref> is set, using a 32-bit signed integer to measure the timeout.\n  syntax:\n    content: public bool Wait (int millisecondsTimeout);\n    parameters:\n    - id: millisecondsTimeout\n      type: System.Int32\n      description: The number of milliseconds to wait, or <xref href=\"System.Threading.Timeout.Infinite\"></xref>(-1) to wait indefinitely.\n    return:\n      type: System.Boolean\n      description: true if the <xref href=\"System.Threading.CountdownEvent\"></xref> was set; otherwise, false.\n  overload: System.Threading.CountdownEvent.Wait*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The current instance has already been disposed.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>millisecondsTimeout</code> is a negative number other than -1, which represents an infinite time-out.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/CountdownEvent.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.CountdownEvent.Wait(System.Threading.CancellationToken)\n  commentId: M:System.Threading.CountdownEvent.Wait(System.Threading.CancellationToken)\n  id: Wait(System.Threading.CancellationToken)\n  parent: System.Threading.CountdownEvent\n  langs:\n  - csharp\n  name: Wait(CancellationToken)\n  nameWithType: CountdownEvent.Wait(CancellationToken)\n  fullName: CountdownEvent.Wait(CancellationToken)\n  type: Method\n  assemblies:\n  - System.Threading\n  - mscorlib\n  - netstandard\n  namespace: System.Threading\n  summary: Blocks the current thread until the <xref href=\"System.Threading.CountdownEvent\"></xref> is set, while observing a <xref href=\"System.Threading.CancellationToken\"></xref>.\n  remarks: The caller of this method blocks indefinitely until the current instance is set. The caller will return immediately if the event is currently in a set state. If the <xref:System.Threading.CancellationToken> being observed is canceled during the wait operation, an <xref:System.OperationCanceledException> will be thrown.\n  syntax:\n    content: public void Wait (System.Threading.CancellationToken cancellationToken);\n    parameters:\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: The <xref href=\"System.Threading.CancellationToken\"></xref> to observe.\n  overload: System.Threading.CountdownEvent.Wait*\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: <code>cancellationToken</code> has been canceled.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The current instance has already been disposed. -or- The <xref href=\"System.Threading.CancellationTokenSource\"></xref> that created <code>cancellationToken</code> has already been disposed.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/CountdownEvent.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.CountdownEvent.Wait(System.TimeSpan)\n  commentId: M:System.Threading.CountdownEvent.Wait(System.TimeSpan)\n  id: Wait(System.TimeSpan)\n  parent: System.Threading.CountdownEvent\n  langs:\n  - csharp\n  name: Wait(TimeSpan)\n  nameWithType: CountdownEvent.Wait(TimeSpan)\n  fullName: CountdownEvent.Wait(TimeSpan)\n  type: Method\n  assemblies:\n  - System.Threading\n  - mscorlib\n  - netstandard\n  namespace: System.Threading\n  summary: Blocks the current thread until the <xref href=\"System.Threading.CountdownEvent\"></xref> is set, using a <xref href=\"System.TimeSpan\"></xref> to measure the timeout.\n  syntax:\n    content: public bool Wait (TimeSpan timeout);\n    parameters:\n    - id: timeout\n      type: System.TimeSpan\n      description: A <xref href=\"System.TimeSpan\"></xref> that represents the number of milliseconds to wait, or a <xref href=\"System.TimeSpan\"></xref> that represents -1 milliseconds to wait indefinitely.\n    return:\n      type: System.Boolean\n      description: true if the <xref href=\"System.Threading.CountdownEvent\"></xref> was set; otherwise, false.\n  overload: System.Threading.CountdownEvent.Wait*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The current instance has already been disposed.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>timeout</code> is a negative number other than -1 milliseconds, which represents an infinite time-out -or- timeout is greater than <xref href=\"System.Int32.MaxValue\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/CountdownEvent.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.CountdownEvent.Wait(System.Int32,System.Threading.CancellationToken)\n  commentId: M:System.Threading.CountdownEvent.Wait(System.Int32,System.Threading.CancellationToken)\n  id: Wait(System.Int32,System.Threading.CancellationToken)\n  parent: System.Threading.CountdownEvent\n  langs:\n  - csharp\n  name: Wait(Int32, CancellationToken)\n  nameWithType: CountdownEvent.Wait(Int32, CancellationToken)\n  fullName: CountdownEvent.Wait(Int32, CancellationToken)\n  type: Method\n  assemblies:\n  - System.Threading\n  - mscorlib\n  - netstandard\n  namespace: System.Threading\n  summary: Blocks the current thread until the <xref href=\"System.Threading.CountdownEvent\"></xref> is set, using a 32-bit signed integer to measure the timeout, while observing a <xref href=\"System.Threading.CancellationToken\"></xref>.\n  syntax:\n    content: public bool Wait (int millisecondsTimeout, System.Threading.CancellationToken cancellationToken);\n    parameters:\n    - id: millisecondsTimeout\n      type: System.Int32\n      description: The number of milliseconds to wait, or <xref href=\"System.Threading.Timeout.Infinite\"></xref>(-1) to wait indefinitely.\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: The <xref href=\"System.Threading.CancellationToken\"></xref> to observe.\n    return:\n      type: System.Boolean\n      description: true if the <xref href=\"System.Threading.CountdownEvent\"></xref> was set; otherwise, false.\n  overload: System.Threading.CountdownEvent.Wait*\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: <code>cancellationToken</code> has been canceled.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The current instance has already been disposed. -or- The <xref href=\"System.Threading.CancellationTokenSource\"></xref> that created <code>cancellationToken</code> has already been disposed.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>millisecondsTimeout</code> is a negative number other than -1, which represents an infinite time-out.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/CountdownEvent.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.CountdownEvent.Wait(System.TimeSpan,System.Threading.CancellationToken)\n  commentId: M:System.Threading.CountdownEvent.Wait(System.TimeSpan,System.Threading.CancellationToken)\n  id: Wait(System.TimeSpan,System.Threading.CancellationToken)\n  parent: System.Threading.CountdownEvent\n  langs:\n  - csharp\n  name: Wait(TimeSpan, CancellationToken)\n  nameWithType: CountdownEvent.Wait(TimeSpan, CancellationToken)\n  fullName: CountdownEvent.Wait(TimeSpan, CancellationToken)\n  type: Method\n  assemblies:\n  - System.Threading\n  - mscorlib\n  - netstandard\n  namespace: System.Threading\n  summary: Blocks the current thread until the <xref href=\"System.Threading.CountdownEvent\"></xref> is set, using a <xref href=\"System.TimeSpan\"></xref> to measure the timeout, while observing a <xref href=\"System.Threading.CancellationToken\"></xref>.\n  syntax:\n    content: public bool Wait (TimeSpan timeout, System.Threading.CancellationToken cancellationToken);\n    parameters:\n    - id: timeout\n      type: System.TimeSpan\n      description: A <xref href=\"System.TimeSpan\"></xref> that represents the number of milliseconds to wait, or a <xref href=\"System.TimeSpan\"></xref> that represents -1 milliseconds to wait indefinitely.\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: The <xref href=\"System.Threading.CancellationToken\"></xref> to observe.\n    return:\n      type: System.Boolean\n      description: true if the <xref href=\"System.Threading.CountdownEvent\"></xref> was set; otherwise, false.\n  overload: System.Threading.CountdownEvent.Wait*\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: <code>cancellationToken</code> has been canceled.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The current instance has already been disposed. -or- The <xref href=\"System.Threading.CancellationTokenSource\"></xref> that created <code>cancellationToken</code> has already been disposed.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>timeout</code> is a negative number other than -1 milliseconds, which represents an infinite time-out -or- timeout is greater than <xref href=\"System.Int32.MaxValue\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/CountdownEvent.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.CountdownEvent.WaitHandle\n  commentId: P:System.Threading.CountdownEvent.WaitHandle\n  id: WaitHandle\n  parent: System.Threading.CountdownEvent\n  langs:\n  - csharp\n  name: WaitHandle\n  nameWithType: CountdownEvent.WaitHandle\n  fullName: CountdownEvent.WaitHandle\n  type: Property\n  assemblies:\n  - System.Threading\n  - mscorlib\n  - netstandard\n  namespace: System.Threading\n  summary: Gets a <xref href=\"System.Threading.WaitHandle\"></xref> that is used to wait for the event to be set.\n  remarks: <xref:System.Threading.CountdownEvent.WaitHandle%2A> should only be used if it's needed for integration with code bases that rely on having a WaitHandle. If all that's needed is to wait for the <xref:System.Threading.CountdownEvent> to be set, the <xref:System.Threading.CountdownEvent.Wait%2A> method should be preferred.\n  syntax:\n    content: public System.Threading.WaitHandle WaitHandle { get; }\n    return:\n      type: System.Threading.WaitHandle\n      description: A <xref href=\"System.Threading.WaitHandle\"></xref> that is used to wait for the event to be set.\n  overload: System.Threading.CountdownEvent.WaitHandle*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The current instance has already been disposed.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/CountdownEvent.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.ArgumentOutOfRangeException\n  parent: System\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n- uid: System.ObjectDisposedException\n  parent: System\n  isExternal: false\n  name: ObjectDisposedException\n  nameWithType: ObjectDisposedException\n  fullName: System.ObjectDisposedException\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  nameWithType: InvalidOperationException\n  fullName: System.InvalidOperationException\n- uid: System.OperationCanceledException\n  parent: System\n  isExternal: false\n  name: OperationCanceledException\n  nameWithType: OperationCanceledException\n  fullName: System.OperationCanceledException\n- uid: System.Threading.CountdownEvent.#ctor(System.Int32)\n  parent: System.Threading.CountdownEvent\n  isExternal: false\n  name: CountdownEvent(Int32)\n  nameWithType: CountdownEvent.CountdownEvent(Int32)\n  fullName: CountdownEvent.CountdownEvent(Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Threading.CountdownEvent.AddCount\n  parent: System.Threading.CountdownEvent\n  isExternal: false\n  name: AddCount()\n  nameWithType: CountdownEvent.AddCount()\n  fullName: CountdownEvent.AddCount()\n- uid: System.Threading.CountdownEvent.AddCount(System.Int32)\n  parent: System.Threading.CountdownEvent\n  isExternal: false\n  name: AddCount(Int32)\n  nameWithType: CountdownEvent.AddCount(Int32)\n  fullName: CountdownEvent.AddCount(Int32)\n- uid: System.Threading.CountdownEvent.CurrentCount\n  parent: System.Threading.CountdownEvent\n  isExternal: false\n  name: CurrentCount\n  nameWithType: CountdownEvent.CurrentCount\n  fullName: CountdownEvent.CurrentCount\n- uid: System.Threading.CountdownEvent.Dispose\n  parent: System.Threading.CountdownEvent\n  isExternal: false\n  name: Dispose()\n  nameWithType: CountdownEvent.Dispose()\n  fullName: CountdownEvent.Dispose()\n- uid: System.Threading.CountdownEvent.Dispose(System.Boolean)\n  parent: System.Threading.CountdownEvent\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: CountdownEvent.Dispose(Boolean)\n  fullName: CountdownEvent.Dispose(Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Threading.CountdownEvent.InitialCount\n  parent: System.Threading.CountdownEvent\n  isExternal: false\n  name: InitialCount\n  nameWithType: CountdownEvent.InitialCount\n  fullName: CountdownEvent.InitialCount\n- uid: System.Threading.CountdownEvent.IsSet\n  parent: System.Threading.CountdownEvent\n  isExternal: false\n  name: IsSet\n  nameWithType: CountdownEvent.IsSet\n  fullName: CountdownEvent.IsSet\n- uid: System.Threading.CountdownEvent.Reset\n  parent: System.Threading.CountdownEvent\n  isExternal: false\n  name: Reset()\n  nameWithType: CountdownEvent.Reset()\n  fullName: CountdownEvent.Reset()\n- uid: System.Threading.CountdownEvent.Reset(System.Int32)\n  parent: System.Threading.CountdownEvent\n  isExternal: false\n  name: Reset(Int32)\n  nameWithType: CountdownEvent.Reset(Int32)\n  fullName: CountdownEvent.Reset(Int32)\n- uid: System.Threading.CountdownEvent.Signal(System.Int32)\n  parent: System.Threading.CountdownEvent\n  isExternal: false\n  name: Signal(Int32)\n  nameWithType: CountdownEvent.Signal(Int32)\n  fullName: CountdownEvent.Signal(Int32)\n- uid: System.Threading.CountdownEvent.Signal\n  parent: System.Threading.CountdownEvent\n  isExternal: false\n  name: Signal()\n  nameWithType: CountdownEvent.Signal()\n  fullName: CountdownEvent.Signal()\n- uid: System.Threading.CountdownEvent.TryAddCount\n  parent: System.Threading.CountdownEvent\n  isExternal: false\n  name: TryAddCount()\n  nameWithType: CountdownEvent.TryAddCount()\n  fullName: CountdownEvent.TryAddCount()\n- uid: System.Threading.CountdownEvent.TryAddCount(System.Int32)\n  parent: System.Threading.CountdownEvent\n  isExternal: false\n  name: TryAddCount(Int32)\n  nameWithType: CountdownEvent.TryAddCount(Int32)\n  fullName: CountdownEvent.TryAddCount(Int32)\n- uid: System.Threading.CountdownEvent.Wait\n  parent: System.Threading.CountdownEvent\n  isExternal: false\n  name: Wait()\n  nameWithType: CountdownEvent.Wait()\n  fullName: CountdownEvent.Wait()\n- uid: System.Threading.CountdownEvent.Wait(System.Int32)\n  parent: System.Threading.CountdownEvent\n  isExternal: false\n  name: Wait(Int32)\n  nameWithType: CountdownEvent.Wait(Int32)\n  fullName: CountdownEvent.Wait(Int32)\n- uid: System.Threading.CountdownEvent.Wait(System.Threading.CancellationToken)\n  parent: System.Threading.CountdownEvent\n  isExternal: false\n  name: Wait(CancellationToken)\n  nameWithType: CountdownEvent.Wait(CancellationToken)\n  fullName: CountdownEvent.Wait(CancellationToken)\n- uid: System.Threading.CancellationToken\n  parent: System.Threading\n  isExternal: false\n  name: CancellationToken\n  nameWithType: CancellationToken\n  fullName: System.Threading.CancellationToken\n- uid: System.Threading.CountdownEvent.Wait(System.TimeSpan)\n  parent: System.Threading.CountdownEvent\n  isExternal: false\n  name: Wait(TimeSpan)\n  nameWithType: CountdownEvent.Wait(TimeSpan)\n  fullName: CountdownEvent.Wait(TimeSpan)\n- uid: System.TimeSpan\n  parent: System\n  isExternal: false\n  name: TimeSpan\n  nameWithType: TimeSpan\n  fullName: System.TimeSpan\n- uid: System.Threading.CountdownEvent.Wait(System.Int32,System.Threading.CancellationToken)\n  parent: System.Threading.CountdownEvent\n  isExternal: false\n  name: Wait(Int32, CancellationToken)\n  nameWithType: CountdownEvent.Wait(Int32, CancellationToken)\n  fullName: CountdownEvent.Wait(Int32, CancellationToken)\n- uid: System.Threading.CountdownEvent.Wait(System.TimeSpan,System.Threading.CancellationToken)\n  parent: System.Threading.CountdownEvent\n  isExternal: false\n  name: Wait(TimeSpan, CancellationToken)\n  nameWithType: CountdownEvent.Wait(TimeSpan, CancellationToken)\n  fullName: CountdownEvent.Wait(TimeSpan, CancellationToken)\n- uid: System.Threading.CountdownEvent.WaitHandle\n  parent: System.Threading.CountdownEvent\n  isExternal: false\n  name: WaitHandle\n  nameWithType: CountdownEvent.WaitHandle\n  fullName: CountdownEvent.WaitHandle\n- uid: System.Threading.WaitHandle\n  parent: System.Threading\n  isExternal: false\n  name: WaitHandle\n  nameWithType: WaitHandle\n  fullName: System.Threading.WaitHandle\n- uid: System.Threading.CountdownEvent.#ctor*\n  parent: System.Threading.CountdownEvent\n  isExternal: false\n  name: CountdownEvent\n  nameWithType: CountdownEvent.CountdownEvent\n  fullName: CountdownEvent.CountdownEvent\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/CountdownEvent.xml\n- uid: System.Threading.CountdownEvent.AddCount*\n  parent: System.Threading.CountdownEvent\n  isExternal: false\n  name: AddCount\n  nameWithType: CountdownEvent.AddCount\n  fullName: CountdownEvent.AddCount\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/CountdownEvent.xml\n- uid: System.Threading.CountdownEvent.CurrentCount*\n  parent: System.Threading.CountdownEvent\n  isExternal: false\n  name: CurrentCount\n  nameWithType: CountdownEvent.CurrentCount\n  fullName: CountdownEvent.CurrentCount\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/CountdownEvent.xml\n- uid: System.Threading.CountdownEvent.Dispose*\n  parent: System.Threading.CountdownEvent\n  isExternal: false\n  name: Dispose\n  nameWithType: CountdownEvent.Dispose\n  fullName: CountdownEvent.Dispose\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/CountdownEvent.xml\n- uid: System.Threading.CountdownEvent.InitialCount*\n  parent: System.Threading.CountdownEvent\n  isExternal: false\n  name: InitialCount\n  nameWithType: CountdownEvent.InitialCount\n  fullName: CountdownEvent.InitialCount\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/CountdownEvent.xml\n- uid: System.Threading.CountdownEvent.IsSet*\n  parent: System.Threading.CountdownEvent\n  isExternal: false\n  name: IsSet\n  nameWithType: CountdownEvent.IsSet\n  fullName: CountdownEvent.IsSet\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/CountdownEvent.xml\n- uid: System.Threading.CountdownEvent.Reset*\n  parent: System.Threading.CountdownEvent\n  isExternal: false\n  name: Reset\n  nameWithType: CountdownEvent.Reset\n  fullName: CountdownEvent.Reset\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/CountdownEvent.xml\n- uid: System.Threading.CountdownEvent.Signal*\n  parent: System.Threading.CountdownEvent\n  isExternal: false\n  name: Signal\n  nameWithType: CountdownEvent.Signal\n  fullName: CountdownEvent.Signal\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/CountdownEvent.xml\n- uid: System.Threading.CountdownEvent.TryAddCount*\n  parent: System.Threading.CountdownEvent\n  isExternal: false\n  name: TryAddCount\n  nameWithType: CountdownEvent.TryAddCount\n  fullName: CountdownEvent.TryAddCount\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/CountdownEvent.xml\n- uid: System.Threading.CountdownEvent.Wait*\n  parent: System.Threading.CountdownEvent\n  isExternal: false\n  name: Wait\n  nameWithType: CountdownEvent.Wait\n  fullName: CountdownEvent.Wait\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/CountdownEvent.xml\n- uid: System.Threading.CountdownEvent.WaitHandle*\n  parent: System.Threading.CountdownEvent\n  isExternal: false\n  name: WaitHandle\n  nameWithType: CountdownEvent.WaitHandle\n  fullName: CountdownEvent.WaitHandle\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/CountdownEvent.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.IDisposable\n  parent: System\n  isExternal: false\n  name: IDisposable\n  nameWithType: IDisposable\n  fullName: System.IDisposable\n"}