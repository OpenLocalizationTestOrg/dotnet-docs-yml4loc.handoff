<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">408d067f0257590c32e8e80a3cd5862c836e60f6</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.ValueTuple-8.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cc187b27d6b3b68b358a96876ebe61aa90cdec4e</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4749c5faddfdcf065846cbaef0d99deb7c9b1d13</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Represents an <bpt id="p1">*</bpt><ph id="ph1">n</ph><ept id="p1">*</ept>-value tuple, where <bpt id="p2">*</bpt><ph id="ph2">n</ph><ept id="p2">*</ept> is 8 or greater.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>A value tuple is a data structure that has a specific number and sequence of values.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ValueTuple%608&gt;</ph> structure represents a value tuple that has eight or more elements.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value tuple types differ from the tuple types (such as <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph>) as follows:</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>They are structures (value types) rather than classes (reference types).</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>Members such as <ph id="ph1">&lt;xref:System.ValueTuple%608.Item1&gt;</ph> and   <ph id="ph2">&lt;xref:System.ValueTuple%608.Item2&gt;</ph> are fields rather than properties.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>Their fields are mutable rather than read-only.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value tuple types provide the runtime implementation that supports <bpt id="p1">[</bpt>tuples in C#<ept id="p1">](~/docs/csharp/tuples.md)</ept> and struct tuples in F#.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>In addition to creating a <ph id="ph1">&lt;xref:System.ValueTuple%608&gt;</ph> instance by using language syntax, you can call the <ph id="ph2">&lt;xref:System.ValueTuple.Create%60%608%28%60%600%2C%60%601%2C%60%602%2C%60%603%2C%60%604%2C%60%605%2C%60%606%2C%60%607%29?displayProperty=fullName&gt;</ph> factory method.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The type of the value tuple's first element.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The type of the value tuple's second element.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The type of the value tuple's third element.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The type of the value tuple's fourth element.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The type of the value tuple's fifth element.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The type of the value tuple's sixth element.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The type of the value tuple's seventh element.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Any generic value tuple instance that defines the types of the tuple's remaining elements.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Initializes a new <ph id="ph1">&lt;xref href="System.ValueTuple`8"&gt;&lt;/xref&gt;</ph> instance.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>In addition to using your language's build-in support for tuples, you can also create a value tuple by calling the static <ph id="ph1">&lt;xref:System.ValueTuple.Create%60%608%28%60%600%2C%60%601%2C%60%602%2C%60%603%2C%60%604%2C%60%605%2C%60%606%2C%60%607%29?displayProperty=fullName&gt;</ph> method without having to explicitly specify the types of its elements.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The value tuple's first element.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The value tuple's second element.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The value tuple's third element.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The value tuple's fourth element.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The value tuple's fifth element.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The value tuple's sixth element.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The value tuple's seventh element.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>An instance of any value tuple type that contains the values of the value's tuple's remaining elements.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;rest&lt;/code&gt;</ph> is not a generic value tuple type.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Compares the current <ph id="ph1">&lt;xref href="System.ValueTuple`8"&gt;&lt;/xref&gt;</ph> instance to a specified <ph id="ph2">&lt;xref href="System.ValueTuple`8"&gt;&lt;/xref&gt;</ph> instance</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The tuple to compare with this instance.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>A signed integer that indicates the relative position of this instance and <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">other</ph><ept id="p1">&lt;/code&gt;</ept> in the sort order, as shown in the following able.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Vaue</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>A negative integer</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>This instance precedes <ph id="ph1">&lt;code&gt;other&lt;/code&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Zero</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>This instance and <ph id="ph1">&lt;code&gt;other&lt;/code&gt;</ph> have the same position in the sort order.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>A positive integer</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>This instance follows <ph id="ph1">&lt;code&gt;other&lt;/code&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Returns a value that indicates whether the current <ph id="ph1">&lt;xref href="System.ValueTuple`8"&gt;&lt;/xref&gt;</ph> instance is equal to a specified object.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`obj`</ph> argument is considered to be equal to the current instance under the following conditions:</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is a <ph id="ph1">&lt;xref:System.ValueTuple%608&gt;</ph> value type.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source>Its components are of the same types as those of the current instance.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>Its components are equal to those of the current instance.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT">
          <source>Equality is determined by the default equality comparer for each component.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The object to compare with this instance.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the current instance is equal to the specified object; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Returns a value that indicates whether the current <ph id="ph1">&lt;xref href="System.ValueTuple`8"&gt;&lt;/xref&gt;</ph> instance is equal to a specified <ph id="ph2">&lt;xref href="System.ValueTuple`8"&gt;&lt;/xref&gt;</ph> instance.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`other`</ph> argument is considered to be equal to the current instance under the following conditions:</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT">
          <source>Its components are of the same types as those of the current instance.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT">
          <source>Its components are equal to those of the current instance.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT">
          <source>Equality is determined by the default equality comparer for each component.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The value tuple to compare with this instance.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the current instance is equal to the specified tuple; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Calculates the hash code for the current <ph id="ph1">&lt;xref href="System.ValueTuple`8"&gt;&lt;/xref&gt;</ph> instance.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The hash code for the current <ph id="ph1">&lt;xref href="System.ValueTuple`8"&gt;&lt;/xref&gt;</ph> instance.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Gets the value of the current <ph id="ph1">&lt;xref href="System.ValueTuple`8"&gt;&lt;/xref&gt;</ph> instance's first element.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Gets the value of the current <ph id="ph1">&lt;xref href="System.ValueTuple`8"&gt;&lt;/xref&gt;</ph> instance's second element.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Gets the value of the current <ph id="ph1">&lt;xref href="System.ValueTuple`8"&gt;&lt;/xref&gt;</ph> instance's third element.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Gets the value of the current <ph id="ph1">&lt;xref href="System.ValueTuple`8"&gt;&lt;/xref&gt;</ph> instance's fourth element.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Gets the value of the current <ph id="ph1">&lt;xref href="System.ValueTuple`8"&gt;&lt;/xref&gt;</ph> instance's fifth element.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Gets the value of the current <ph id="ph1">&lt;xref href="System.ValueTuple`8"&gt;&lt;/xref&gt;</ph> instance's sixth element.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Gets the value of the current <ph id="ph1">&lt;xref href="System.ValueTuple`8"&gt;&lt;/xref&gt;</ph> instance's seventh element.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Gets the current <ph id="ph1">&lt;xref href="System.ValueTuple`8"&gt;&lt;/xref&gt;</ph> instance's remaining elements.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ValueTuple%608.Rest&gt;</ph> field returns a nested value tuple that allows access to the eighth though <bpt id="p1">*</bpt><ph id="ph2">n</ph><ept id="p1">*</ept>th elements of the tuple.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT">
          <source>Depending on the total number of elements in the tuple, the values of the eighth through fourteenth components can be retrieved from the nested value tuple's <ph id="ph1">`Item1`</ph> through <ph id="ph2">`Item7`</ph> properties.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can then use the <ph id="ph1">&lt;xref:System.ValueTuple%608.Rest&gt;</ph> property of a nested <ph id="ph2">&lt;xref:System.ValueTuple%608&gt;</ph> object to retrieve the value tuple at the next level of nesting.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Returns a string that represents the value of this <ph id="ph1">&lt;xref href="System.ValueTuple`8"&gt;&lt;/xref&gt;</ph> instance.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT">
          <source>The string returned by this method takes the form (<bpt id="p1">*</bpt>Item1<ept id="p1">*</ept>, <bpt id="p2">*</bpt>Item2<ept id="p2">*</ept>, <bpt id="p3">*</bpt>Item3<ept id="p3">*</ept>, <bpt id="p4">*</bpt>Item4<ept id="p4">*</ept>, <bpt id="p5">*</bpt>Item5<ept id="p5">*</ept>, <bpt id="p6">*</bpt>Item6<ept id="p6">*</ept>, <bpt id="p7">*</bpt>Item7<ept id="p7">*</ept>, <bpt id="p8">*</bpt>Item8<ept id="p8">*</ept>…), where <bpt id="p9">*</bpt>Item1<ept id="p9">*</ept>, <bpt id="p10">*</bpt>Item2<ept id="p10">*</ept>, <bpt id="p11">*</bpt>Item3<ept id="p11">*</ept>, <bpt id="p12">*</bpt>Item4<ept id="p12">*</ept>, <bpt id="p13">*</bpt>Item5<ept id="p13">*</ept>, <bpt id="p14">*</bpt>Item6<ept id="p14">*</ept>, and <bpt id="p15">*</bpt>Item7<ept id="p15">*</ept> represent the values of the <ph id="ph1">&lt;xref:System.ValueTuple%608.Item1&gt;</ph>, <ph id="ph2">&lt;xref:System.ValueTuple%608.Item2&gt;</ph>, <ph id="ph3">&lt;xref:System.ValueTuple%608.Item3&gt;</ph>, <ph id="ph4">&lt;xref:System.ValueTuple%608.Item4&gt;</ph>, <ph id="ph5">&lt;xref:System.ValueTuple%608.Item5&gt;</ph>, <ph id="ph6">&lt;xref:System.ValueTuple%608.Item6&gt;</ph>, and <ph id="ph7">&lt;xref:System.ValueTuple%608.Item7&gt;</ph> fields.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">*</bpt>Item8<ept id="p1">*</ept> represents the value of the <ph id="ph1">&lt;xref:System.ValueTuple%608&gt;</ph> instance's <ph id="ph2">`Next.Item1`</ph> field.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value of any additional nested elements follows <bpt id="p1">*</bpt>Item8<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT">
          <source>If any of the field values is <ph id="ph1">`null`</ph>, it is represented as <ph id="ph2">&lt;xref:System.String.Empty?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The string representation of this <ph id="ph1">&lt;xref href="System.ValueTuple`8"&gt;&lt;/xref&gt;</ph> instance.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Compares the current <ph id="ph1">&lt;xref href="System.ValueTuple`8"&gt;&lt;/xref&gt;</ph> instance to a specified object by using a specified comparer and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT">
          <source>This member is an explicit interface implementation.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT">
          <source>It can only be used when the <ph id="ph1">&lt;xref:System.ValueTuple%608&gt;</ph> instance is cast to an  <ph id="ph2">&lt;xref:System.Collections.IStructuralComparable&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method lets you define customized comparisons of <ph id="ph1">&lt;xref:System.ValueTuple%608&gt;</ph> objects.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, you can use this method to order <ph id="ph1">&lt;xref:System.ValueTuple%608&gt;</ph> objects based on the value of a specific component.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT">
          <source>Although this method can be called directly, it is most commonly called by collection-sorting methods that include <ph id="ph1">&lt;xref:System.Collections.IComparer&gt;</ph> parameters to order the members of a collection.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, it is called by the <ph id="ph1">&lt;xref:System.Array.Sort%28System.Array%2CSystem.Collections.IComparer%29?displayProperty=fullName&gt;</ph> method and the <ph id="ph2">&lt;xref:System.Collections.SortedList.Add%2A&gt;</ph> method of a <ph id="ph3">&lt;xref:System.Collections.SortedList&gt;</ph> object that is instantiated by using the <ph id="ph4">&lt;xref:System.Collections.SortedList.%23ctor%28System.Collections.IComparer%29?displayProperty=fullName&gt;</ph> constructor.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ValueTuple%608.System%23Collections%23IStructuralComparable%23CompareTo%2A&gt;</ph> method is intended for use in sorting operations.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT">
          <source>It should not be used when the primary purpose of a comparison is to determine whether two objects are equal.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT">
          <source>To determine whether two objects are equal, call the <ph id="ph1">&lt;xref:System.ValueTuple%608.System%23Collections%23IStructuralEquatable%23Equals%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The object to compare with the current instance.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>An object that provides custom rules for comparison.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>A signed integer that indicates the relative position of this instance and <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">other</ph><ept id="p1">&lt;/code&gt;</ept> in the sort order, as shown in the following able.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Vaue</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>A negative integer</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>This instance precedes <ph id="ph1">&lt;code&gt;other&lt;/code&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Zero</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>This instance and <ph id="ph1">&lt;code&gt;other&lt;/code&gt;</ph> have the same position in the sort order.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>A positive integer</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>This instance follows <ph id="ph1">&lt;code&gt;other&lt;/code&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;other&lt;/code&gt;</ph> is not a <ph id="ph2">&lt;xref href="System.ValueTuple`8"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Returns a value that indicates whether the current <ph id="ph1">&lt;xref href="System.ValueTuple`8"&gt;&lt;/xref&gt;</ph> instance is equal to a specified object based on a specified comparison method.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT">
          <source>This member is an explicit interface implementation.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT">
          <source>It can only be used when the <ph id="ph1">&lt;xref:System.ValueTuple%608&gt;</ph> instance is cast to an  <ph id="ph2">&lt;xref:System.Collections.IStructuralEquatable&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Collections.IEqualityComparer.Equals%2A?displayProperty=fullName&gt;</ph> implementation is called only if <ph id="ph2">`other`</ph> is not <ph id="ph3">`null`</ph>, and if it can be successfully cast to a <ph id="ph4">&lt;xref:System.ValueTuple%608&gt;</ph> object that has the same total number of components (including those in nested tuple objects) of the same types as the current instance.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Collections.IStructuralEquatable.Equals%28System.Object%2CSystem.Collections.IEqualityComparer%29?displayProperty=fullName&gt;</ph> method first passes the <ph id="ph2">&lt;xref:System.ValueTuple%608.Item1&gt;</ph> values of the <ph id="ph3">&lt;xref:System.ValueTuple%608&gt;</ph> objects to be compared to the <ph id="ph4">&lt;xref:System.Collections.IEqualityComparer.Equals%2A?displayProperty=fullName&gt;</ph> implementation.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT">
          <source>If this method call returns <ph id="ph1">`true`</ph>, the method is called again and passed the <ph id="ph2">&lt;xref:System.ValueTuple%608.Item2&gt;</ph> values of the two <ph id="ph3">&lt;xref:System.ValueTuple%608&gt;</ph> objects.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT">
          <source>This continues until the method call returns <ph id="ph1">`false`</ph> when it compares a specific pair of values, or the two <ph id="ph2">&lt;xref:System.ValueTuple%608.Rest&gt;</ph> values are passed to the method.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>The object to compare with this instance.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>An object that defines the method to use to evaluate whether the two objects are equal.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the current instance is equal to the specified objects; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Calculates the hash code for the current <ph id="ph1">&lt;xref href="System.ValueTuple`8"&gt;&lt;/xref&gt;</ph> instance by using a specified computation method.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT">
          <source>This member is an explicit interface implementation.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT">
          <source>It can only be used when the <ph id="ph1">&lt;xref:System.ValueTuple%608&gt;</ph> instance is cast to an  <ph id="ph2">&lt;xref:System.Collections.IStructuralEquatable&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT">
          <source>The method simply wraps a call to the <ph id="ph1">`comparer`</ph> object's <ph id="ph2">&lt;xref:System.Collections.IEqualityComparer.GetHashCode%2A?displayProperty=fullName&gt;</ph> implementation.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT">
          <source>The algorithm used to compute the hash code should return the same hash code for two <ph id="ph1">&lt;xref:System.ValueTuple%608&gt;</ph> objects that are considered to be equal.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>An object whose <ph id="ph1">&lt;xref href="System.Collections.IEqualityComparer.GetHashCode(System.Object)"&gt;&lt;/xref&gt;</ph> method calculates the hash code of the current <ph id="ph2">&lt;xref href="System.ValueTuple`8"&gt;&lt;/xref&gt;</ph> instance.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>A 32-bit signed integer hash code.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Compares the current <ph id="ph1">&lt;xref href="System.ValueTuple`8"&gt;&lt;/xref&gt;</ph> object to a specified object and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT">
          <source>This member is an explicit interface member implementation.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.ValueTuple%608&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.IComparable&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method provides the <ph id="ph1">&lt;xref:System.IComparable.CompareTo%2A?displayProperty=fullName&gt;</ph> implementation for the <ph id="ph2">&lt;xref:System.ValueTuple%608&gt;</ph> structure.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT">
          <source>Although the method can be called directly, it is most commonly called by the default overloads of collection-sorting methods, such as <ph id="ph1">&lt;xref:System.Array.Sort%28System.Array%29?displayProperty=fullName&gt;</ph> and <ph id="ph2">&lt;xref:System.Collections.SortedList.Add%2A?displayProperty=fullName&gt;</ph>, to order the members of a collection.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ValueTuple%608.System%23IComparable%23CompareTo%2A?displayProperty=fullName&gt;</ph> method is intended for use in sorting operations.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT">
          <source>It should not be used when the primary purpose of a comparison is to determine whether two objects are equal.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT">
          <source>To determine whether two objects are equal, call the <ph id="ph1">&lt;xref:System.ValueTuple%608.Equals%28System.Object%29?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method uses the default object comparer to compare each component.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>An object to compare with the current instance.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>A signed integer that indicates the relative position of this instance and <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">obj</ph><ept id="p1">&lt;/code&gt;</ept> in the sort order, as shown in the following table.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Value</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>A negative integer</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>This instance precedes <ph id="ph1">&lt;code&gt;other&lt;/code&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Zero</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>This instance and <ph id="ph1">&lt;code&gt;other&lt;/code&gt;</ph> have the same position in the sort order.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>A positive integer</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>This instance follows <ph id="ph1">&lt;code&gt;other&lt;/code&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;other&lt;/code&gt;</ph> is not a <ph id="ph2">&lt;xref href="System.ValueTuple`8"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>