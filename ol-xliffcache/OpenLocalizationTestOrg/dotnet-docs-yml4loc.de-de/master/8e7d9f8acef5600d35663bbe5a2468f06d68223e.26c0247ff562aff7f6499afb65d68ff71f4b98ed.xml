{"nodes":[{"content":"The `Information` module contains the procedures used to return, test for, or verify information.","nodes":[{"pos":[0,97],"content":"The <ph id=\"ph1\">`Information`</ph> module contains the procedures used to return, test for, or verify information.","source":"The `Information` module contains the procedures used to return, test for, or verify information."}],"pos":[1430,1528],"yaml":true},{"content":"This module supports the Visual Basic language keywords and run-time library members that provide error information, validate data, determine array bounds, and retrieve data type and color information.","nodes":[{"pos":[0,201],"content":"This module supports the Visual Basic language keywords and run-time library members that provide error information, validate data, determine array bounds, and retrieve data type and color information.","nodes":[{"content":"This module supports the Visual Basic language keywords and run-time library members that provide error information, validate data, determine array bounds, and retrieve data type and color information.","pos":[0,201]}]}],"pos":[1539,1741],"yaml":true,"extradata":"MT"},{"content":"Returns an integer indicating the line number of the last executed statement. Read-only.","nodes":[{"pos":[0,88],"content":"Returns an integer indicating the line number of the last executed statement. Read-only.","nodes":[{"content":"Returns an integer indicating the line number of the last executed statement. Read-only.","pos":[0,88],"nodes":[{"content":"Returns an integer indicating the line number of the last executed statement.","pos":[0,77]},{"content":"Read-only.","pos":[78,88]}]}]}],"pos":[3639,3728],"yaml":true},{"content":"If Visual Basic encounters no line numbers, it returns 0.","nodes":[{"pos":[0,57],"content":"If Visual Basic encounters no line numbers, it returns 0.","nodes":[{"content":"If Visual Basic encounters no line numbers, it returns 0.","pos":[0,57]}]}],"pos":[3739,3797],"yaml":true,"extradata":"MT"},{"content":"Returns an integer indicating the line number of the last executed statement. Read-only.","nodes":[{"pos":[0,88],"content":"Returns an integer indicating the line number of the last executed statement. Read-only.","nodes":[{"content":"Returns an integer indicating the line number of the last executed statement. Read-only.","pos":[0,88],"nodes":[{"content":"Returns an integer indicating the line number of the last executed statement.","pos":[0,77]},{"content":"Read-only.","pos":[78,88]}]}]}],"pos":[4136,4225],"yaml":true},{"content":"Contains information about run-time errors.","nodes":[{"pos":[0,43],"content":"Contains information about run-time errors.","nodes":[{"content":"Contains information about run-time errors.","pos":[0,43]}]}],"pos":[5157,5201],"yaml":true},{"content":"The properties of the `Err` object are set by the generator of an error—Visual Basic, an object, or the programmer.  \n  \n When a run-time error occurs, the properties of the `Err` object are filled with information that uniquely identifies the error and that you can use to handle the error. To generate a run-time error in your code, use the `Raise` method.  \n  \n The `Err` object's properties are reset to zero or zero-length strings (\"\") after an `Exit Sub`, `Exit Function`, `Exit Property`, or `Resume Next` statement within an error-handling routine. Using any form of the `Resume` statement outside of an error-handling routine will not reset the `Err` object's properties. You can use the `Clear` method to explicitly reset `Err`.  \n  \n Use the `Raise` method rather than the `Error` statement to generate run-time errors for system errors and class modules. Your decision about whether to use the `Raise` method in other code depends on the richness of the information you want to return.  \n  \n The `Err` object is an intrinsic object with global scope. Therefore, you do not need to create an instance of it in your code.","nodes":[{"pos":[0,115],"content":"The properties of the <ph id=\"ph1\">`Err`</ph> object are set by the generator of an error—Visual Basic, an object, or the programmer.","source":"The properties of the `Err` object are set by the generator of an error—Visual Basic, an object, or the programmer."},{"pos":[122,358],"content":"When a run-time error occurs, the properties of the `Err` object are filled with information that uniquely identifies the error and that you can use to handle the error. To generate a run-time error in your code, use the `Raise` method.","nodes":[{"content":"When a run-time error occurs, the properties of the <ph id=\"ph1\">`Err`</ph> object are filled with information that uniquely identifies the error and that you can use to handle the error.","pos":[0,169],"source":"When a run-time error occurs, the properties of the `Err` object are filled with information that uniquely identifies the error and that you can use to handle the error."},{"content":"To generate a run-time error in your code, use the <ph id=\"ph1\">`Raise`</ph> method.","pos":[170,236],"source":" To generate a run-time error in your code, use the `Raise` method."}]},{"pos":[365,738],"content":"The `Err` object's properties are reset to zero or zero-length strings (\"\") after an `Exit Sub`, `Exit Function`, `Exit Property`, or `Resume Next` statement within an error-handling routine. Using any form of the `Resume` statement outside of an error-handling routine will not reset the `Err` object's properties. You can use the `Clear` method to explicitly reset `Err`.","nodes":[{"content":"The <ph id=\"ph1\">`Err`</ph> object's properties are reset to zero or zero-length strings (\"\") after an <ph id=\"ph2\">`Exit Sub`</ph>, <ph id=\"ph3\">`Exit Function`</ph>, <ph id=\"ph4\">`Exit Property`</ph>, or <ph id=\"ph5\">`Resume Next`</ph> statement within an error-handling routine.","pos":[0,191],"source":"The `Err` object's properties are reset to zero or zero-length strings (\"\") after an `Exit Sub`, `Exit Function`, `Exit Property`, or `Resume Next` statement within an error-handling routine."},{"content":"Using any form of the <ph id=\"ph1\">`Resume`</ph> statement outside of an error-handling routine will not reset the <ph id=\"ph2\">`Err`</ph> object's properties.","pos":[192,315],"source":" Using any form of the `Resume` statement outside of an error-handling routine will not reset the `Err` object's properties."},{"content":"You can use the <ph id=\"ph1\">`Clear`</ph> method to explicitly reset <ph id=\"ph2\">`Err`</ph>.","pos":[316,373],"source":" You can use the `Clear` method to explicitly reset `Err`."}]},{"pos":[745,997],"content":"Use the `Raise` method rather than the `Error` statement to generate run-time errors for system errors and class modules. Your decision about whether to use the `Raise` method in other code depends on the richness of the information you want to return.","nodes":[{"content":"Use the <ph id=\"ph1\">`Raise`</ph> method rather than the <ph id=\"ph2\">`Error`</ph> statement to generate run-time errors for system errors and class modules.","pos":[0,121],"source":"Use the `Raise` method rather than the `Error` statement to generate run-time errors for system errors and class modules."},{"content":"Your decision about whether to use the <ph id=\"ph1\">`Raise`</ph> method in other code depends on the richness of the information you want to return.","pos":[122,252],"source":" Your decision about whether to use the `Raise` method in other code depends on the richness of the information you want to return."}]},{"pos":[1004,1131],"content":"The `Err` object is an intrinsic object with global scope. Therefore, you do not need to create an instance of it in your code.","nodes":[{"content":"The <ph id=\"ph1\">`Err`</ph> object is an intrinsic object with global scope.","pos":[0,58],"source":"The `Err` object is an intrinsic object with global scope."},{"content":"Therefore, you do not need to create an instance of it in your code.","pos":[59,127]}]}],"pos":[5212,6356],"yaml":true,"extradata":"MT"},{"content":"Contains information about run-time errors.","nodes":[{"pos":[0,43],"content":"Contains information about run-time errors.","nodes":[{"content":"Contains information about run-time errors.","pos":[0,43]}]}],"pos":[6960,7004],"yaml":true},{"content":"Returns a `Boolean` value indicating whether a variable points to an array.","nodes":[{"pos":[0,75],"content":"Returns a <ph id=\"ph1\">`Boolean`</ph> value indicating whether a variable points to an array.","source":"Returns a `Boolean` value indicating whether a variable points to an array."}],"pos":[8006,8082],"yaml":true},{"content":"`IsArray` returns `True` if the variable points to an array; otherwise, it returns `False`. `IsArray` is especially useful with objects that might contain arrays.","nodes":[{"pos":[0,162],"content":"`IsArray` returns `True` if the variable points to an array; otherwise, it returns `False`. `IsArray` is especially useful with objects that might contain arrays.","nodes":[{"content":"<ph id=\"ph1\">`IsArray`</ph> returns <ph id=\"ph2\">`True`</ph> if the variable points to an array; otherwise, it returns <ph id=\"ph3\">`False`</ph>.","pos":[0,91],"source":"`IsArray` returns `True` if the variable points to an array; otherwise, it returns `False`."},{"content":"<ph id=\"ph1\">`IsArray`</ph> is especially useful with objects that might contain arrays.","pos":[92,162],"source":"`IsArray` is especially useful with objects that might contain arrays."}]}],"pos":[8093,8258],"yaml":true,"extradata":"MT"},{"content":"Required. `Object` variable.","nodes":[{"pos":[0,28],"content":"Required. `Object` variable.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"<ph id=\"ph1\">`Object`</ph> variable.","pos":[10,28],"source":"`Object` variable."}]}],"pos":[8638,8667],"yaml":true},{"content":"Returns a `Boolean` value indicating whether a variable points to an array.","nodes":[{"pos":[0,75],"content":"Returns a <ph id=\"ph1\">`Boolean`</ph> value indicating whether a variable points to an array.","source":"Returns a `Boolean` value indicating whether a variable points to an array."}],"pos":[8725,8801],"yaml":true},{"content":"Returns a `Boolean` value indicating whether an expression represents a valid `Date` value.","nodes":[{"pos":[0,91],"content":"Returns a <ph id=\"ph1\">`Boolean`</ph> value indicating whether an expression represents a valid <ph id=\"ph2\">`Date`</ph> value.","source":"Returns a `Boolean` value indicating whether an expression represents a valid `Date` value."}],"pos":[9801,9893],"yaml":true},{"content":"`IsDate` returns `True` if `Expression` is of the <xref:System.DateTime> data type or can be converted to it; otherwise, it returns `False`.  \n  \n The <xref:System.DateTime> data type holds both a date value and a time value. `IsDate` returns `True` if `Expression` represents a valid date, a valid time, or a valid date and time.","nodes":[{"pos":[0,140],"content":"<ph id=\"ph1\">`IsDate`</ph> returns <ph id=\"ph2\">`True`</ph> if <ph id=\"ph3\">`Expression`</ph> is of the <ph id=\"ph4\">&lt;xref:System.DateTime&gt;</ph> data type or can be converted to it; otherwise, it returns <ph id=\"ph5\">`False`</ph>.","source":"`IsDate` returns `True` if `Expression` is of the <xref:System.DateTime> data type or can be converted to it; otherwise, it returns `False`."},{"pos":[147,330],"content":"The <xref:System.DateTime> data type holds both a date value and a time value. `IsDate` returns `True` if `Expression` represents a valid date, a valid time, or a valid date and time.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.DateTime&gt;</ph> data type holds both a date value and a time value.","pos":[0,78],"source":"The <xref:System.DateTime> data type holds both a date value and a time value."},{"content":"<ph id=\"ph1\">`IsDate`</ph> returns <ph id=\"ph2\">`True`</ph> if <ph id=\"ph3\">`Expression`</ph> represents a valid date, a valid time, or a valid date and time.","pos":[79,183],"source":"`IsDate` returns `True` if `Expression` represents a valid date, a valid time, or a valid date and time."}]}],"pos":[9904,10239],"yaml":true,"extradata":"MT"},{"content":"Required. `Object` expression.","nodes":[{"pos":[0,30],"content":"Required. `Object` expression.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"<ph id=\"ph1\">`Object`</ph> expression.","pos":[10,30],"source":"`Object` expression."}]}],"pos":[10778,10809],"yaml":true},{"content":"Returns a `Boolean` value indicating whether an expression represents a valid `Date` value.","nodes":[{"pos":[0,91],"content":"Returns a <ph id=\"ph1\">`Boolean`</ph> value indicating whether an expression represents a valid <ph id=\"ph2\">`Date`</ph> value.","source":"Returns a `Boolean` value indicating whether an expression represents a valid `Date` value."}],"pos":[10867,10959],"yaml":true},{"content":"Returns a `Boolean` value indicating whether an expression evaluates to the <xref href=\"System.DBNull\"></xref> class.","nodes":[{"pos":[0,117],"content":"Returns a <ph id=\"ph1\">`Boolean`</ph> value indicating whether an expression evaluates to the <ph id=\"ph2\">&lt;xref href=\"System.DBNull\"&gt;&lt;/xref&gt;</ph> class.","source":"Returns a `Boolean` value indicating whether an expression evaluates to the <xref href=\"System.DBNull\"></xref> class."}],"pos":[11970,12088],"yaml":true},{"content":"`IsDBNull` returns `True` if the data type of `Expression` evaluates to the <xref:System.DBNull> type; otherwise, `IsDBNull` returns `False`.  \n  \n The <xref:System.DBNull?displayProperty=fullName> value indicates that the `Object` represents missing or nonexistent data. `DBNull` is not the same as `Nothing`, which indicates that a variable has not yet been initialized. `DBNull` is also not the same as a zero-length string (`\"\"`), which is sometimes referred to as a null string.","nodes":[{"pos":[0,141],"content":"<ph id=\"ph1\">`IsDBNull`</ph> returns <ph id=\"ph2\">`True`</ph> if the data type of <ph id=\"ph3\">`Expression`</ph> evaluates to the <ph id=\"ph4\">&lt;xref:System.DBNull&gt;</ph> type; otherwise, <ph id=\"ph5\">`IsDBNull`</ph> returns <ph id=\"ph6\">`False`</ph>.","source":"`IsDBNull` returns `True` if the data type of `Expression` evaluates to the <xref:System.DBNull> type; otherwise, `IsDBNull` returns `False`."},{"pos":[148,483],"content":"The <xref:System.DBNull?displayProperty=fullName> value indicates that the `Object` represents missing or nonexistent data. `DBNull` is not the same as `Nothing`, which indicates that a variable has not yet been initialized. `DBNull` is also not the same as a zero-length string (`\"\"`), which is sometimes referred to as a null string.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.DBNull?displayProperty=fullName&gt;</ph> value indicates that the <ph id=\"ph2\">`Object`</ph> represents missing or nonexistent data.","pos":[0,123],"source":"The <xref:System.DBNull?displayProperty=fullName> value indicates that the `Object` represents missing or nonexistent data."},{"content":"<ph id=\"ph1\">`DBNull`</ph> is not the same as <ph id=\"ph2\">`Nothing`</ph>, which indicates that a variable has not yet been initialized.","pos":[124,224],"source":"`DBNull` is not the same as `Nothing`, which indicates that a variable has not yet been initialized."},{"content":"<ph id=\"ph1\">`DBNull`</ph> is also not the same as a zero-length string (<ph id=\"ph2\">`\"\"`</ph>), which is sometimes referred to as a null string.","pos":[225,335],"source":"`DBNull` is also not the same as a zero-length string (`\"\"`), which is sometimes referred to as a null string."}]}],"pos":[12099,12589],"yaml":true,"extradata":"MT"},{"content":"Required. `Object` expression.","nodes":[{"pos":[0,30],"content":"Required. `Object` expression.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"<ph id=\"ph1\">`Object`</ph> expression.","pos":[10,30],"source":"`Object` expression."}]}],"pos":[12978,13009],"yaml":true},{"content":"Returns a `Boolean` value indicating whether an expression evaluates to the <xref href=\"System.DBNull\"></xref> class.","nodes":[{"pos":[0,117],"content":"Returns a <ph id=\"ph1\">`Boolean`</ph> value indicating whether an expression evaluates to the <ph id=\"ph2\">&lt;xref href=\"System.DBNull\"&gt;&lt;/xref&gt;</ph> class.","source":"Returns a `Boolean` value indicating whether an expression evaluates to the <xref href=\"System.DBNull\"></xref> class."}],"pos":[13067,13185],"yaml":true},{"content":"Returns a `Boolean` value indicating whether an expression is an exception type.","nodes":[{"pos":[0,80],"content":"Returns a <ph id=\"ph1\">`Boolean`</ph> value indicating whether an expression is an exception type.","source":"Returns a `Boolean` value indicating whether an expression is an exception type."}],"pos":[14192,14273],"yaml":true},{"content":"`IsError` returns `True` if the expression represents an `Object` variable that derives from the <xref:System.Exception> class in the <xref:System> namespace.  \n  \n An exception that derives from <xref:System.Exception?displayProperty=fullName> can be caught with the `Try...Catch...Finally` statements.","nodes":[{"pos":[0,158],"content":"<ph id=\"ph1\">`IsError`</ph> returns <ph id=\"ph2\">`True`</ph> if the expression represents an <ph id=\"ph3\">`Object`</ph> variable that derives from the <ph id=\"ph4\">&lt;xref:System.Exception&gt;</ph> class in the <ph id=\"ph5\">&lt;xref:System&gt;</ph> namespace.","source":"`IsError` returns `True` if the expression represents an `Object` variable that derives from the <xref:System.Exception> class in the <xref:System> namespace."},{"pos":[165,303],"content":"An exception that derives from <ph id=\"ph1\">&lt;xref:System.Exception?displayProperty=fullName&gt;</ph> can be caught with the <ph id=\"ph2\">`Try...Catch...Finally`</ph> statements.","source":"An exception that derives from <xref:System.Exception?displayProperty=fullName> can be caught with the `Try...Catch...Finally` statements."}],"pos":[14284,14592],"yaml":true,"extradata":"MT"},{"content":"Required. `Object` expression.","nodes":[{"pos":[0,30],"content":"Required. `Object` expression.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"<ph id=\"ph1\">`Object`</ph> expression.","pos":[10,30],"source":"`Object` expression."}]}],"pos":[14995,15026],"yaml":true},{"content":"Returns a `Boolean` value indicating whether an expression is an exception type.","nodes":[{"pos":[0,80],"content":"Returns a <ph id=\"ph1\">`Boolean`</ph> value indicating whether an expression is an exception type.","source":"Returns a `Boolean` value indicating whether an expression is an exception type."}],"pos":[15084,15165],"yaml":true},{"content":"Returns a `Boolean` value indicating whether an expression has no object assigned to it.","nodes":[{"pos":[0,88],"content":"Returns a <ph id=\"ph1\">`Boolean`</ph> value indicating whether an expression has no object assigned to it.","source":"Returns a `Boolean` value indicating whether an expression has no object assigned to it."}],"pos":[16183,16272],"yaml":true},{"content":"`IsNothing` returns `True` if the expression represents an object variable that currently has no object assigned to it; otherwise, it returns `False`.  \n  \n `IsNothing` is intended to work on reference types. A value type cannot hold a value of  and reverts to its default value if you assign `Nothing` to it. If you supply a value type in `Expression`, `IsNothing` always returns `False`.","nodes":[{"pos":[0,150],"content":"<ph id=\"ph1\">`IsNothing`</ph> returns <ph id=\"ph2\">`True`</ph> if the expression represents an object variable that currently has no object assigned to it; otherwise, it returns <ph id=\"ph3\">`False`</ph>.","source":"`IsNothing` returns `True` if the expression represents an object variable that currently has no object assigned to it; otherwise, it returns `False`."},{"pos":[157,389],"content":"`IsNothing` is intended to work on reference types. A value type cannot hold a value of  and reverts to its default value if you assign `Nothing` to it. If you supply a value type in `Expression`, `IsNothing` always returns `False`.","nodes":[{"content":"<ph id=\"ph1\">`IsNothing`</ph> is intended to work on reference types.","pos":[0,51],"source":"`IsNothing` is intended to work on reference types."},{"content":"A value type cannot hold a value of  and reverts to its default value if you assign <ph id=\"ph1\">`Nothing`</ph> to it.","pos":[52,152],"source":" A value type cannot hold a value of  and reverts to its default value if you assign `Nothing` to it."},{"content":"If you supply a value type in <ph id=\"ph1\">`Expression`</ph>, <ph id=\"ph2\">`IsNothing`</ph> always returns <ph id=\"ph3\">`False`</ph>.","pos":[153,232],"source":" If you supply a value type in `Expression`, `IsNothing` always returns `False`."}]}],"pos":[16283,16677],"yaml":true,"extradata":"MT"},{"content":"Required. `Object` expression.","nodes":[{"pos":[0,30],"content":"Required. `Object` expression.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"<ph id=\"ph1\">`Object`</ph> expression.","pos":[10,30],"source":"`Object` expression."}]}],"pos":[17102,17133],"yaml":true},{"content":"Returns a `Boolean` value indicating whether an expression has no object assigned to it.","nodes":[{"pos":[0,88],"content":"Returns a <ph id=\"ph1\">`Boolean`</ph> value indicating whether an expression has no object assigned to it.","source":"Returns a `Boolean` value indicating whether an expression has no object assigned to it."}],"pos":[17191,17280],"yaml":true},{"content":"Returns a `Boolean` value indicating whether an expression can be evaluated as a number.","nodes":[{"pos":[0,88],"content":"Returns a <ph id=\"ph1\">`Boolean`</ph> value indicating whether an expression can be evaluated as a number.","source":"Returns a `Boolean` value indicating whether an expression can be evaluated as a number."}],"pos":[18300,18389],"yaml":true},{"content":"`IsNumeric` returns `True` if the data type of `Expression` is `Boolean`, `Byte`, `Decimal`, `Double`, `Integer`, `Long`, `SByte`, `Short`, `Single`, `UInteger`, `ULong`, or `UShort`. It also returns `True` if `Expression` is a `Char`, `String`, or `Object` that can be successfully converted to a number. `Expression` can contain non-numeric characters. `IsNumeric` returns `True` if `Expression` is a string that contains a valid hexadecimal or octal number. `IsNumeric` also returns `True` if `Expression` contains a valid numeric expression that begins with a + or - character or contains commas.  \n  \n `IsNumeric` returns `False` if `Expression` is of data type `Date`. It returns `False` if `Expression` is a `Char`, `String`, or `Object` that cannot be successfully converted to a number.","nodes":[{"pos":[0,600],"content":"`IsNumeric` returns `True` if the data type of `Expression` is `Boolean`, `Byte`, `Decimal`, `Double`, `Integer`, `Long`, `SByte`, `Short`, `Single`, `UInteger`, `ULong`, or `UShort`. It also returns `True` if `Expression` is a `Char`, `String`, or `Object` that can be successfully converted to a number. `Expression` can contain non-numeric characters. `IsNumeric` returns `True` if `Expression` is a string that contains a valid hexadecimal or octal number. `IsNumeric` also returns `True` if `Expression` contains a valid numeric expression that begins with a + or - character or contains commas.","nodes":[{"content":"<ph id=\"ph1\">`IsNumeric`</ph> returns <ph id=\"ph2\">`True`</ph> if the data type of <ph id=\"ph3\">`Expression`</ph> is <ph id=\"ph4\">`Boolean`</ph>, <ph id=\"ph5\">`Byte`</ph>, <ph id=\"ph6\">`Decimal`</ph>, <ph id=\"ph7\">`Double`</ph>, <ph id=\"ph8\">`Integer`</ph>, <ph id=\"ph9\">`Long`</ph>, <ph id=\"ph10\">`SByte`</ph>, <ph id=\"ph11\">`Short`</ph>, <ph id=\"ph12\">`Single`</ph>, <ph id=\"ph13\">`UInteger`</ph>, <ph id=\"ph14\">`ULong`</ph>, or <ph id=\"ph15\">`UShort`</ph>.","pos":[0,183],"source":"`IsNumeric` returns `True` if the data type of `Expression` is `Boolean`, `Byte`, `Decimal`, `Double`, `Integer`, `Long`, `SByte`, `Short`, `Single`, `UInteger`, `ULong`, or `UShort`."},{"content":"It also returns <ph id=\"ph1\">`True`</ph> if <ph id=\"ph2\">`Expression`</ph> is a <ph id=\"ph3\">`Char`</ph>, <ph id=\"ph4\">`String`</ph>, or <ph id=\"ph5\">`Object`</ph> that can be successfully converted to a number.","pos":[184,305],"source":" It also returns `True` if `Expression` is a `Char`, `String`, or `Object` that can be successfully converted to a number."},{"content":"<ph id=\"ph1\">`Expression`</ph> can contain non-numeric characters.","pos":[306,354],"source":"`Expression` can contain non-numeric characters."},{"content":"<ph id=\"ph1\">`IsNumeric`</ph> returns <ph id=\"ph2\">`True`</ph> if <ph id=\"ph3\">`Expression`</ph> is a string that contains a valid hexadecimal or octal number.","pos":[355,460],"source":"`IsNumeric` returns `True` if `Expression` is a string that contains a valid hexadecimal or octal number."},{"content":"<ph id=\"ph1\">`IsNumeric`</ph> also returns <ph id=\"ph2\">`True`</ph> if <ph id=\"ph3\">`Expression`</ph> contains a valid numeric expression that begins with a + or - character or contains commas.","pos":[461,600],"source":"`IsNumeric` also returns `True` if `Expression` contains a valid numeric expression that begins with a + or - character or contains commas."}]},{"pos":[607,795],"content":"`IsNumeric` returns `False` if `Expression` is of data type `Date`. It returns `False` if `Expression` is a `Char`, `String`, or `Object` that cannot be successfully converted to a number.","nodes":[{"content":"<ph id=\"ph1\">`IsNumeric`</ph> returns <ph id=\"ph2\">`False`</ph> if <ph id=\"ph3\">`Expression`</ph> is of data type <ph id=\"ph4\">`Date`</ph>.","pos":[0,67],"source":"`IsNumeric` returns `False` if `Expression` is of data type `Date`."},{"content":"It returns <ph id=\"ph1\">`False`</ph> if <ph id=\"ph2\">`Expression`</ph> is a <ph id=\"ph3\">`Char`</ph>, <ph id=\"ph4\">`String`</ph>, or <ph id=\"ph5\">`Object`</ph> that cannot be successfully converted to a number.","pos":[68,188],"source":" It returns `False` if `Expression` is a `Char`, `String`, or `Object` that cannot be successfully converted to a number."}]}],"pos":[18400,19200],"yaml":true,"extradata":"MT"},{"content":"Required. `Object` expression.","nodes":[{"pos":[0,30],"content":"Required. `Object` expression.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"<ph id=\"ph1\">`Object`</ph> expression.","pos":[10,30],"source":"`Object` expression."}]}],"pos":[19623,19654],"yaml":true},{"content":"Returns a `Boolean` value indicating whether an expression can be evaluated as a number.","nodes":[{"pos":[0,88],"content":"Returns a <ph id=\"ph1\">`Boolean`</ph> value indicating whether an expression can be evaluated as a number.","source":"Returns a `Boolean` value indicating whether an expression can be evaluated as a number."}],"pos":[19712,19801],"yaml":true},{"content":"Returns a `Boolean` value indicating whether an expression evaluates to a reference type.","nodes":[{"pos":[0,89],"content":"Returns a <ph id=\"ph1\">`Boolean`</ph> value indicating whether an expression evaluates to a reference type.","source":"Returns a `Boolean` value indicating whether an expression evaluates to a reference type."}],"pos":[20833,20923],"yaml":true},{"content":"`IsReference` returns `True` if `Expression` represents a reference type, such as a class instance, a `String` type, or an array of any type; otherwise, it returns `False`.  \n  \n A reference type contains a pointer to data stored elsewhere in memory. A value type contains its own data.","nodes":[{"pos":[0,172],"content":"<ph id=\"ph1\">`IsReference`</ph> returns <ph id=\"ph2\">`True`</ph> if <ph id=\"ph3\">`Expression`</ph> represents a reference type, such as a class instance, a <ph id=\"ph4\">`String`</ph> type, or an array of any type; otherwise, it returns <ph id=\"ph5\">`False`</ph>.","source":"`IsReference` returns `True` if `Expression` represents a reference type, such as a class instance, a `String` type, or an array of any type; otherwise, it returns `False`."},{"pos":[179,286],"content":"A reference type contains a pointer to data stored elsewhere in memory. A value type contains its own data.","nodes":[{"content":"A reference type contains a pointer to data stored elsewhere in memory. A value type contains its own data.","pos":[0,107],"nodes":[{"content":"A reference type contains a pointer to data stored elsewhere in memory.","pos":[0,71]},{"content":"A value type contains its own data.","pos":[72,107]}]}]}],"pos":[20934,21225],"yaml":true,"extradata":"MT"},{"content":"Required. `Object` expression.","nodes":[{"pos":[0,30],"content":"Required. `Object` expression.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"<ph id=\"ph1\">`Object`</ph> expression.","pos":[10,30],"source":"`Object` expression."}]}],"pos":[21802,21833],"yaml":true},{"content":"Returns a `Boolean` value indicating whether an expression evaluates to a reference type.","nodes":[{"pos":[0,89],"content":"Returns a <ph id=\"ph1\">`Boolean`</ph> value indicating whether an expression evaluates to a reference type.","source":"Returns a `Boolean` value indicating whether an expression evaluates to a reference type."}],"pos":[21891,21981],"yaml":true},{"content":"Returns the lowest available subscript for the indicated dimension of an array.","nodes":[{"pos":[0,79],"content":"Returns the lowest available subscript for the indicated dimension of an array.","nodes":[{"content":"Returns the lowest available subscript for the indicated dimension of an array.","pos":[0,79]}]}],"pos":[23039,23119],"yaml":true},{"content":"Since array subscripts start at 0, the lowest available subscript for every dimension is always 0.  \n  \n For an array with the following dimensions, `LBound` returns the values in the following table:  \n  \n```vb  \nDim a(100, 5, 4) As Byte  \n```  \n  \n|Call to LBound|Return value|  \n|--------------------|------------------|  \n|`LBound(a, 1)`|0|  \n|`LBound(a, 2)`|0|  \n|`LBound(a, 3)`|0|","nodes":[{"pos":[0,98],"content":"Since array subscripts start at 0, the lowest available subscript for every dimension is always 0.","nodes":[{"content":"Since array subscripts start at 0, the lowest available subscript for every dimension is always 0.","pos":[0,98]}]},{"pos":[105,200],"content":"For an array with the following dimensions, <ph id=\"ph1\">`LBound`</ph> returns the values in the following table:","source":"For an array with the following dimensions, `LBound` returns the values in the following table:"},{"pos":[251,265],"content":"Call to LBound","nodes":[{"content":"Call to LBound","pos":[0,14]}]},{"pos":[266,278],"content":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"pos":[342,343],"content":"0","nodes":[{"content":"0","pos":[0,1]}]},{"pos":[363,364],"content":"0","nodes":[{"content":"0","pos":[0,1]}]},{"pos":[384,385],"content":"0","nodes":[{"content":"0","pos":[0,1]}]}],"pos":[23130,23531],"yaml":true,"extradata":"MT"},{"content":"Required. Array of any data type. The array in which you want to find the lowest possible subscript of a dimension.","nodes":[{"pos":[0,115],"content":"Required. Array of any data type. The array in which you want to find the lowest possible subscript of a dimension.","nodes":[{"content":"Required. Array of any data type. The array in which you want to find the lowest possible subscript of a dimension.","pos":[0,115],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Array of any data type.","pos":[10,33]},{"content":"The array in which you want to find the lowest possible subscript of a dimension.","pos":[34,115]}]}]}],"pos":[23961,24077],"yaml":true},{"content":"Optional. `Integer`. The dimension for which the lowest possible subscript is to be returned. Use 1 for the first dimension, 2 for the second, and so on. If <code>Rank</code> is omitted, 1 is assumed.","nodes":[{"pos":[0,200],"content":"Optional. `Integer`. The dimension for which the lowest possible subscript is to be returned. Use 1 for the first dimension, 2 for the second, and so on. If <code>Rank</code> is omitted, 1 is assumed.","nodes":[{"content":"Optional.","pos":[0,9]},{"content":"<ph id=\"ph1\">`Integer`</ph>.","pos":[10,20],"source":"`Integer`."},{"content":"The dimension for which the lowest possible subscript is to be returned.","pos":[21,93]},{"content":"Use 1 for the first dimension, 2 for the second, and so on.","pos":[94,153]},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">Rank</ph><ept id=\"p1\">&lt;/code&gt;</ept> is omitted, 1 is assumed.","pos":[154,200],"source":" If <code>Rank</code> is omitted, 1 is assumed."}]}],"pos":[24136,24337],"yaml":true},{"content":"`Integer`. The lowest value the subscript for the specified dimension can contain. `LBound` always returns 0 as long as <code>Array</code> has been initialized, even if it has no elements, for example if it is a zero-length string. If <code>Array</code> is `Nothing`, `LBound` throws an <xref href=\"System.ArgumentNullException\"></xref>.","nodes":[{"pos":[0,337],"content":"`Integer`. The lowest value the subscript for the specified dimension can contain. `LBound` always returns 0 as long as <code>Array</code> has been initialized, even if it has no elements, for example if it is a zero-length string. If <code>Array</code> is `Nothing`, `LBound` throws an <xref href=\"System.ArgumentNullException\"></xref>.","nodes":[{"content":"<ph id=\"ph1\">`Integer`</ph>.","pos":[0,10],"source":"`Integer`."},{"content":"The lowest value the subscript for the specified dimension can contain.","pos":[11,82]},{"content":"<ph id=\"ph1\">`LBound`</ph> always returns 0 as long as <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">Array</ph><ept id=\"p1\">&lt;/code&gt;</ept> has been initialized, even if it has no elements, for example if it is a zero-length string.","pos":[83,231],"source":"`LBound` always returns 0 as long as <code>Array</code> has been initialized, even if it has no elements, for example if it is a zero-length string."},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">Array</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">`Nothing`</ph>, <ph id=\"ph3\">`LBound`</ph> throws an <ph id=\"ph4\">&lt;xref href=\"System.ArgumentNullException\"&gt;&lt;/xref&gt;</ph>.","pos":[232,337],"source":" If <code>Array</code> is `Nothing`, `LBound` throws an <xref href=\"System.ArgumentNullException\"></xref>."}]}],"pos":[24393,24733],"yaml":true},{"content":"<code>Array</code> is `Nothing`.","nodes":[{"pos":[0,32],"content":"<ph id=\"ph1\">&lt;code&gt;Array&lt;/code&gt;</ph> is <ph id=\"ph2\">`Nothing`</ph>.","source":"<code>Array</code> is `Nothing`."}],"pos":[24903,24936],"yaml":true},{"content":"<code>Rank</code> less than 1, or <code>Rank</code> is greater than the rank of <code>Array</code>.","nodes":[{"pos":[0,99],"content":"<ph id=\"ph1\">&lt;code&gt;Rank&lt;/code&gt;</ph> less than 1, or <ph id=\"ph2\">&lt;code&gt;Rank&lt;/code&gt;</ph> is greater than the rank of <ph id=\"ph3\">&lt;code&gt;Array&lt;/code&gt;</ph>.","source":"<code>Rank</code> less than 1, or <code>Rank</code> is greater than the rank of <code>Array</code>."}],"pos":[25022,25122],"yaml":true},{"content":"Returns an `Integer` value representing the RGB color code corresponding to the specified color number.","nodes":[{"pos":[0,103],"content":"Returns an <ph id=\"ph1\">`Integer`</ph> value representing the RGB color code corresponding to the specified color number.","source":"Returns an `Integer` value representing the RGB color code corresponding to the specified color number."}],"pos":[26050,26154],"yaml":true},{"content":"Starting with the least-significant byte, the returned value specifies the red, green, and blue values used to set the appropriate color in the RGB system used by the Visual Basic language.  \n  \n The `Color` argument has these settings.  \n  \n|Number|Color|Number|Color|  \n|------------|-----------|------------|-----------|  \n|0|Black|8|Gray|  \n|1|Blue|9|Light blue|  \n|2|Green|10|Light green|  \n|3|Cyan|11|Light cyan|  \n|4|Red|12|Light red|  \n|5|Magenta|13|Light magenta|  \n|6|Yellow|14|Light yellow|  \n|7|White|15|Bright white|","nodes":[{"pos":[0,189],"content":"Starting with the least-significant byte, the returned value specifies the red, green, and blue values used to set the appropriate color in the RGB system used by the Visual Basic language.","nodes":[{"content":"Starting with the least-significant byte, the returned value specifies the red, green, and blue values used to set the appropriate color in the RGB system used by the Visual Basic language.","pos":[0,189]}]},{"pos":[196,236],"content":"The <ph id=\"ph1\">`Color`</ph> argument has these settings.","source":"The `Color` argument has these settings."},{"pos":[243,249],"content":"Number","nodes":[{"content":"Number","pos":[0,6]}]},{"pos":[250,255],"content":"Color","nodes":[{"content":"Color","pos":[0,5]}]},{"pos":[256,262],"content":"Number","nodes":[{"content":"Number","pos":[0,6]}]},{"pos":[263,268],"content":"Color","nodes":[{"content":"Color","pos":[0,5]}]},{"pos":[327,328],"content":"0","nodes":[{"content":"0","pos":[0,1]}]},{"pos":[329,334],"content":"Black","nodes":[{"content":"Black","pos":[0,5]}]},{"pos":[335,336],"content":"8","nodes":[{"content":"8","pos":[0,1]}]},{"pos":[337,341],"content":"Gray","nodes":[{"content":"Gray","pos":[0,4]}]},{"pos":[346,347],"content":"1","nodes":[{"content":"1","pos":[0,1]}]},{"pos":[348,352],"content":"Blue","nodes":[{"content":"Blue","pos":[0,4]}]},{"pos":[353,354],"content":"9","nodes":[{"content":"9","pos":[0,1]}]},{"pos":[355,365],"content":"Light blue","nodes":[{"content":"Light blue","pos":[0,10]}]},{"pos":[370,371],"content":"2","nodes":[{"content":"2","pos":[0,1]}]},{"pos":[372,377],"content":"Green","nodes":[{"content":"Green","pos":[0,5]}]},{"pos":[378,380],"content":"10","nodes":[{"content":"10","pos":[0,2]}]},{"pos":[381,392],"content":"Light green","nodes":[{"content":"Light green","pos":[0,11]}]},{"pos":[397,398],"content":"3","nodes":[{"content":"3","pos":[0,1]}]},{"pos":[399,403],"content":"Cyan","nodes":[{"content":"Cyan","pos":[0,4]}]},{"pos":[404,406],"content":"11","nodes":[{"content":"11","pos":[0,2]}]},{"pos":[407,417],"content":"Light cyan","nodes":[{"content":"Light cyan","pos":[0,10]}]},{"pos":[422,423],"content":"4","nodes":[{"content":"4","pos":[0,1]}]},{"pos":[424,427],"content":"Red","nodes":[{"content":"Red","pos":[0,3]}]},{"pos":[428,430],"content":"12","nodes":[{"content":"12","pos":[0,2]}]},{"pos":[431,440],"content":"Light red","nodes":[{"content":"Light red","pos":[0,9]}]},{"pos":[445,446],"content":"5","nodes":[{"content":"5","pos":[0,1]}]},{"pos":[447,454],"content":"Magenta","nodes":[{"content":"Magenta","pos":[0,7]}]},{"pos":[455,457],"content":"13","nodes":[{"content":"13","pos":[0,2]}]},{"pos":[458,471],"content":"Light magenta","nodes":[{"content":"Light magenta","pos":[0,13]}]},{"pos":[476,477],"content":"6","nodes":[{"content":"6","pos":[0,1]}]},{"pos":[478,484],"content":"Yellow","nodes":[{"content":"Yellow","pos":[0,6]}]},{"pos":[485,487],"content":"14","nodes":[{"content":"14","pos":[0,2]}]},{"pos":[488,500],"content":"Light yellow","nodes":[{"content":"Light yellow","pos":[0,12]}]},{"pos":[505,506],"content":"7","nodes":[{"content":"7","pos":[0,1]}]},{"pos":[507,512],"content":"White","nodes":[{"content":"White","pos":[0,5]}]},{"pos":[513,515],"content":"15","nodes":[{"content":"15","pos":[0,2]}]},{"pos":[516,528],"content":"Bright white","nodes":[{"content":"Bright white","pos":[0,12]}]}],"pos":[26165,26710],"yaml":true,"extradata":"MT"},{"content":"Required. A whole number in the range 0–15.","nodes":[{"pos":[0,43],"content":"Required. A whole number in the range 0–15.","nodes":[{"content":"Required. A whole number in the range 0–15.","pos":[0,43],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"A whole number in the range 0–15.","pos":[10,43]}]}]}],"pos":[27129,27173],"yaml":true},{"content":"Returns an `Integer` value representing the RGB color code corresponding to the specified color number.","nodes":[{"pos":[0,103],"content":"Returns an <ph id=\"ph1\">`Integer`</ph> value representing the RGB color code corresponding to the specified color number.","source":"Returns an `Integer` value representing the RGB color code corresponding to the specified color number."}],"pos":[27229,27333],"yaml":true},{"content":"<code>Color</code> is outside of range 0 to 15, inclusive.","nodes":[{"pos":[0,58],"content":"<ph id=\"ph1\">&lt;code&gt;Color&lt;/code&gt;</ph> is outside of range 0 to 15, inclusive.","source":"<code>Color</code> is outside of range 0 to 15, inclusive."}],"pos":[27496,27555],"yaml":true},{"content":"Returns an `Integer` value representing an RGB color value from a set of red, green and blue color components.","nodes":[{"pos":[0,110],"content":"Returns an <ph id=\"ph1\">`Integer`</ph> value representing an RGB color value from a set of red, green and blue color components.","source":"Returns an `Integer` value representing an RGB color value from a set of red, green and blue color components."}],"pos":[28579,28690],"yaml":true},{"content":"Application methods and properties that accept a color specification expect that specification to be a number representing an RGB color value. An RGB color value specifies the relative intensity of red, green, and blue to cause a specific color to be displayed.  \n  \n If the value for any argument to `RGB` is greater than 255, 255 is used.  \n  \n The following table lists some standard colors and the red, green, and blue values they include.  \n  \n|Color|Red value|Green value|Blue value|  \n|-----------|---------------|-----------------|----------------|  \n|Black|0|0|0|  \n|Blue|0|0|255|  \n|Green|0|255|0|  \n|Cyan|0|255|255|  \n|Red|255|0|0|  \n|Magenta|255|0|255|  \n|Yellow|255|255|0|  \n|White|255|255|255|","nodes":[{"pos":[0,261],"content":"Application methods and properties that accept a color specification expect that specification to be a number representing an RGB color value. An RGB color value specifies the relative intensity of red, green, and blue to cause a specific color to be displayed.","nodes":[{"content":"Application methods and properties that accept a color specification expect that specification to be a number representing an RGB color value. An RGB color value specifies the relative intensity of red, green, and blue to cause a specific color to be displayed.","pos":[0,261],"nodes":[{"content":"Application methods and properties that accept a color specification expect that specification to be a number representing an RGB color value.","pos":[0,142]},{"content":"An RGB color value specifies the relative intensity of red, green, and blue to cause a specific color to be displayed.","pos":[143,261]}]}]},{"pos":[268,340],"content":"If the value for any argument to <ph id=\"ph1\">`RGB`</ph> is greater than 255, 255 is used.","source":"If the value for any argument to `RGB` is greater than 255, 255 is used."},{"pos":[347,443],"content":"The following table lists some standard colors and the red, green, and blue values they include.","nodes":[{"content":"The following table lists some standard colors and the red, green, and blue values they include.","pos":[0,96]}]},{"pos":[450,455],"content":"Color","nodes":[{"content":"Color","pos":[0,5]}]},{"pos":[456,465],"content":"Red value","nodes":[{"content":"Red value","pos":[0,9]}]},{"pos":[466,477],"content":"Green value","nodes":[{"content":"Green value","pos":[0,11]}]},{"pos":[478,488],"content":"Blue value","nodes":[{"content":"Blue value","pos":[0,10]}]},{"pos":[560,565],"content":"Black","nodes":[{"content":"Black","pos":[0,5]}]},{"pos":[566,567],"content":"0","nodes":[{"content":"0","pos":[0,1]}]},{"pos":[568,569],"content":"0","nodes":[{"content":"0","pos":[0,1]}]},{"pos":[570,571],"content":"0","nodes":[{"content":"0","pos":[0,1]}]},{"pos":[576,580],"content":"Blue","nodes":[{"content":"Blue","pos":[0,4]}]},{"pos":[581,582],"content":"0","nodes":[{"content":"0","pos":[0,1]}]},{"pos":[583,584],"content":"0","nodes":[{"content":"0","pos":[0,1]}]},{"pos":[585,588],"content":"255","nodes":[{"content":"255","pos":[0,3]}]},{"pos":[593,598],"content":"Green","nodes":[{"content":"Green","pos":[0,5]}]},{"pos":[599,600],"content":"0","nodes":[{"content":"0","pos":[0,1]}]},{"pos":[601,604],"content":"255","nodes":[{"content":"255","pos":[0,3]}]},{"pos":[605,606],"content":"0","nodes":[{"content":"0","pos":[0,1]}]},{"pos":[611,615],"content":"Cyan","nodes":[{"content":"Cyan","pos":[0,4]}]},{"pos":[616,617],"content":"0","nodes":[{"content":"0","pos":[0,1]}]},{"pos":[618,621],"content":"255","nodes":[{"content":"255","pos":[0,3]}]},{"pos":[622,625],"content":"255","nodes":[{"content":"255","pos":[0,3]}]},{"pos":[630,633],"content":"Red","nodes":[{"content":"Red","pos":[0,3]}]},{"pos":[634,637],"content":"255","nodes":[{"content":"255","pos":[0,3]}]},{"pos":[638,639],"content":"0","nodes":[{"content":"0","pos":[0,1]}]},{"pos":[640,641],"content":"0","nodes":[{"content":"0","pos":[0,1]}]},{"pos":[646,653],"content":"Magenta","nodes":[{"content":"Magenta","pos":[0,7]}]},{"pos":[654,657],"content":"255","nodes":[{"content":"255","pos":[0,3]}]},{"pos":[658,659],"content":"0","nodes":[{"content":"0","pos":[0,1]}]},{"pos":[660,663],"content":"255","nodes":[{"content":"255","pos":[0,3]}]},{"pos":[668,674],"content":"Yellow","nodes":[{"content":"Yellow","pos":[0,6]}]},{"pos":[675,678],"content":"255","nodes":[{"content":"255","pos":[0,3]}]},{"pos":[679,682],"content":"255","nodes":[{"content":"255","pos":[0,3]}]},{"pos":[683,684],"content":"0","nodes":[{"content":"0","pos":[0,1]}]},{"pos":[689,694],"content":"White","nodes":[{"content":"White","pos":[0,5]}]},{"pos":[695,698],"content":"255","nodes":[{"content":"255","pos":[0,3]}]},{"pos":[699,702],"content":"255","nodes":[{"content":"255","pos":[0,3]}]},{"pos":[703,706],"content":"255","nodes":[{"content":"255","pos":[0,3]}]}],"pos":[28701,29426],"yaml":true,"extradata":"MT"},{"content":"Required. `Integer` in the range 0–255, inclusive, that represents the intensity of the red component of the color.","nodes":[{"pos":[0,115],"content":"Required. `Integer` in the range 0–255, inclusive, that represents the intensity of the red component of the color.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"<ph id=\"ph1\">`Integer`</ph> in the range 0–255, inclusive, that represents the intensity of the red component of the color.","pos":[10,115],"source":"`Integer` in the range 0–255, inclusive, that represents the intensity of the red component of the color."}]}],"pos":[29824,29940],"yaml":true},{"content":"Required. `Integer` in the range 0–255, inclusive, that represents the intensity of the green component of the color.","nodes":[{"pos":[0,117],"content":"Required. `Integer` in the range 0–255, inclusive, that represents the intensity of the green component of the color.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"<ph id=\"ph1\">`Integer`</ph> in the range 0–255, inclusive, that represents the intensity of the green component of the color.","pos":[10,117],"source":"`Integer` in the range 0–255, inclusive, that represents the intensity of the green component of the color."}]}],"pos":[30000,30118],"yaml":true},{"content":"Required. `Integer` in the range 0–255, inclusive, that represents the intensity of the blue component of the color.","nodes":[{"pos":[0,116],"content":"Required. `Integer` in the range 0–255, inclusive, that represents the intensity of the blue component of the color.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"<ph id=\"ph1\">`Integer`</ph> in the range 0–255, inclusive, that represents the intensity of the blue component of the color.","pos":[10,116],"source":"`Integer` in the range 0–255, inclusive, that represents the intensity of the blue component of the color."}]}],"pos":[30177,30294],"yaml":true},{"content":"Returns an `Integer` value representing an RGB color value from a set of red, green and blue color components.","nodes":[{"pos":[0,110],"content":"Returns an <ph id=\"ph1\">`Integer`</ph> value representing an RGB color value from a set of red, green and blue color components.","source":"Returns an `Integer` value representing an RGB color value from a set of red, green and blue color components."}],"pos":[30350,30461],"yaml":true},{"content":"<code>Green</code>, <code>Blue</code>, or <code>Red</code> is outside of range 0 to 255, inclusive.","nodes":[{"pos":[0,99],"content":"<ph id=\"ph1\">&lt;code&gt;Green&lt;/code&gt;</ph>, <ph id=\"ph2\">&lt;code&gt;Blue&lt;/code&gt;</ph>, or <ph id=\"ph3\">&lt;code&gt;Red&lt;/code&gt;</ph> is outside of range 0 to 255, inclusive.","source":"<code>Green</code>, <code>Blue</code>, or <code>Red</code> is outside of range 0 to 255, inclusive."}],"pos":[30620,30720],"yaml":true},{"content":"Returns a `String` value containing the system data type name of a variable.","nodes":[{"pos":[0,76],"content":"Returns a <ph id=\"ph1\">`String`</ph> value containing the system data type name of a variable.","source":"Returns a `String` value containing the system data type name of a variable."}],"pos":[31696,31773],"yaml":true},{"content":"`SystemTypeName` returns the fully qualified common language runtime (CLR) type name corresponding to the Visual Basic type name. For example, if `VbName` contains \"Date\", `SystemTypeName` returns \"System.DateTime\". If `SystemTypeName` does not recognize the value of `VbName`, it returns `Nothing` (not the string \"Nothing\").","nodes":[{"pos":[0,326],"content":"`SystemTypeName` returns the fully qualified common language runtime (CLR) type name corresponding to the Visual Basic type name. For example, if `VbName` contains \"Date\", `SystemTypeName` returns \"System.DateTime\". If `SystemTypeName` does not recognize the value of `VbName`, it returns `Nothing` (not the string \"Nothing\").","nodes":[{"content":"<ph id=\"ph1\">`SystemTypeName`</ph> returns the fully qualified common language runtime (CLR) type name corresponding to the Visual Basic type name.","pos":[0,129],"source":"`SystemTypeName` returns the fully qualified common language runtime (CLR) type name corresponding to the Visual Basic type name."},{"content":"For example, if <ph id=\"ph1\">`VbName`</ph> contains \"Date\", <ph id=\"ph2\">`SystemTypeName`</ph> returns \"System.DateTime\".","pos":[130,215],"source":" For example, if `VbName` contains \"Date\", `SystemTypeName` returns \"System.DateTime\"."},{"content":"If <ph id=\"ph1\">`SystemTypeName`</ph> does not recognize the value of <ph id=\"ph2\">`VbName`</ph>, it returns <ph id=\"ph3\">`Nothing`</ph> (not the string \"Nothing\").","pos":[216,326],"source":" If `SystemTypeName` does not recognize the value of `VbName`, it returns `Nothing` (not the string \"Nothing\")."}]}],"pos":[31784,32113],"yaml":true,"extradata":"MT"},{"content":"Required. A `String` variable containing a Visual Basic type name.","nodes":[{"pos":[0,66],"content":"Required. A `String` variable containing a Visual Basic type name.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"A <ph id=\"ph1\">`String`</ph> variable containing a Visual Basic type name.","pos":[10,66],"source":" A `String` variable containing a Visual Basic type name."}]}],"pos":[32516,32583],"yaml":true},{"content":"Returns a `String` value containing the system data type name of a variable.","nodes":[{"pos":[0,76],"content":"Returns a <ph id=\"ph1\">`String`</ph> value containing the system data type name of a variable.","source":"Returns a `String` value containing the system data type name of a variable."}],"pos":[32640,32717],"yaml":true},{"content":"Returns a `String` value containing data-type information about a variable.","nodes":[{"pos":[0,75],"content":"Returns a <ph id=\"ph1\">`String`</ph> value containing data-type information about a variable.","source":"Returns a `String` value containing data-type information about a variable."}],"pos":[33736,33812],"yaml":true},{"content":"The following table shows the `String` values returned by `TypeName` for different contents of `VarName`.  \n  \n|`VarName` contents|String returned|  \n|------------------------|---------------------|  \n|16-bit `True` or `False` value type|\"Boolean\"|  \n|8-bit binary value type|\"Byte\"|  \n|16-bit character value type|\"Char\"|  \n|64-bit date and time value type|\"Date\"|  \n|Reference type indicating missing or nonexistent data|\"DBNull\"|  \n|128-bit fixed-point numeric value type|\"Decimal\"|  \n|64-bit floating-point numeric value type|\"Double\"|  \n|32-bit integer value type|\"Integer\"|  \n|Reference type pointing to an unspecialized object|\"Object\"|  \n|Reference type pointing to a specialized object created from class *objectclass*|\"*objectclass*\"|  \n|64-bit integer value type|\"Long\"|  \n|Reference type with no object currently assigned to it|\"Nothing\"|  \n|8-bit signed integer value type|\"SByte\"|  \n|16-bit integer value type|\"Short\"|  \n|32-bit floating-point numeric value type|\"Single\"|  \n|Reference type pointing to a string of 16-bit characters|\"String\"|  \n|32-bit unsigned integer value type|\"UInteger\"|  \n|64-bit unsigned integer value type|\"ULong\"|  \n|16-bit unsigned integer value type|\"UShort\"|  \n  \n If `VarName` is an array, the returned string can be any one of the strings in the preceding table with empty parentheses appended. For example, if `VarName` points to an array of integers, `TypeName` returns \"Integer()\".  \n  \n When `TypeName` returns the name of a reference type such as a class, it returns only the name itself, not the qualified name. For example, if `VarName` points to an object of class <xref:System.Drawing.Printing.PaperSource?displayProperty=fullName>, `TypeName` returns \"PaperSource\". Note that if the variable is declared to be of a certain class type but does not have an object assigned to it, `TypeName` returns \"Nothing\".","nodes":[{"pos":[0,105],"content":"The following table shows the <ph id=\"ph1\">`String`</ph> values returned by <ph id=\"ph2\">`TypeName`</ph> for different contents of <ph id=\"ph3\">`VarName`</ph>.","source":"The following table shows the `String` values returned by `TypeName` for different contents of `VarName`."},{"pos":[112,130],"content":"<ph id=\"ph1\">`VarName`</ph> contents","source":"`VarName` contents"},{"pos":[131,146],"content":"String returned","nodes":[{"content":"String returned","pos":[0,15]}]},{"pos":[202,237],"content":"16-bit <ph id=\"ph1\">`True`</ph> or <ph id=\"ph2\">`False`</ph> value type","source":"16-bit `True` or `False` value type"},{"pos":[238,247],"content":"\"Boolean\"","nodes":[{"content":"\"Boolean\"","pos":[0,9]}]},{"pos":[252,275],"content":"8-bit binary value type","nodes":[{"content":"8-bit binary value type","pos":[0,23]}]},{"pos":[276,282],"content":"\"Byte\"","nodes":[{"content":"\"Byte\"","pos":[0,6]}]},{"pos":[287,314],"content":"16-bit character value type","nodes":[{"content":"16-bit character value type","pos":[0,27]}]},{"pos":[315,321],"content":"\"Char\"","nodes":[{"content":"\"Char\"","pos":[0,6]}]},{"pos":[326,357],"content":"64-bit date and time value type","nodes":[{"content":"64-bit date and time value type","pos":[0,31]}]},{"pos":[358,364],"content":"\"Date\"","nodes":[{"content":"\"Date\"","pos":[0,6]}]},{"pos":[369,422],"content":"Reference type indicating missing or nonexistent data","nodes":[{"content":"Reference type indicating missing or nonexistent data","pos":[0,53]}]},{"pos":[423,431],"content":"\"DBNull\"","nodes":[{"content":"\"DBNull\"","pos":[0,8]}]},{"pos":[436,474],"content":"128-bit fixed-point numeric value type","nodes":[{"content":"128-bit fixed-point numeric value type","pos":[0,38]}]},{"pos":[475,484],"content":"\"Decimal\"","nodes":[{"content":"\"Decimal\"","pos":[0,9]}]},{"pos":[489,529],"content":"64-bit floating-point numeric value type","nodes":[{"content":"64-bit floating-point numeric value type","pos":[0,40]}]},{"pos":[530,538],"content":"\"Double\"","nodes":[{"content":"\"Double\"","pos":[0,8]}]},{"pos":[543,568],"content":"32-bit integer value type","nodes":[{"content":"32-bit integer value type","pos":[0,25]}]},{"pos":[569,578],"content":"\"Integer\"","nodes":[{"content":"\"Integer\"","pos":[0,9]}]},{"pos":[583,633],"content":"Reference type pointing to an unspecialized object","nodes":[{"content":"Reference type pointing to an unspecialized object","pos":[0,50]}]},{"pos":[634,642],"content":"\"Object\"","nodes":[{"content":"\"Object\"","pos":[0,8]}]},{"pos":[647,727],"content":"Reference type pointing to a specialized object created from class <bpt id=\"p1\">*</bpt>objectclass<ept id=\"p1\">*</ept>","source":"Reference type pointing to a specialized object created from class *objectclass*"},{"pos":[728,743],"content":"\"<bpt id=\"p1\">*</bpt>objectclass<ept id=\"p1\">*</ept>\"","source":"\"*objectclass*\""},{"pos":[748,773],"content":"64-bit integer value type","nodes":[{"content":"64-bit integer value type","pos":[0,25]}]},{"pos":[774,780],"content":"\"Long\"","nodes":[{"content":"\"Long\"","pos":[0,6]}]},{"pos":[785,839],"content":"Reference type with no object currently assigned to it","nodes":[{"content":"Reference type with no object currently assigned to it","pos":[0,54]}]},{"pos":[840,849],"content":"\"Nothing\"","nodes":[{"content":"\"Nothing\"","pos":[0,9]}]},{"pos":[854,885],"content":"8-bit signed integer value type","nodes":[{"content":"8-bit signed integer value type","pos":[0,31]}]},{"pos":[886,893],"content":"\"SByte\"","nodes":[{"content":"\"SByte\"","pos":[0,7]}]},{"pos":[898,923],"content":"16-bit integer value type","nodes":[{"content":"16-bit integer value type","pos":[0,25]}]},{"pos":[924,931],"content":"\"Short\"","nodes":[{"content":"\"Short\"","pos":[0,7]}]},{"pos":[936,976],"content":"32-bit floating-point numeric value type","nodes":[{"content":"32-bit floating-point numeric value type","pos":[0,40]}]},{"pos":[977,985],"content":"\"Single\"","nodes":[{"content":"\"Single\"","pos":[0,8]}]},{"pos":[990,1046],"content":"Reference type pointing to a string of 16-bit characters","nodes":[{"content":"Reference type pointing to a string of 16-bit characters","pos":[0,56]}]},{"pos":[1047,1055],"content":"\"String\"","nodes":[{"content":"\"String\"","pos":[0,8]}]},{"pos":[1060,1094],"content":"32-bit unsigned integer value type","nodes":[{"content":"32-bit unsigned integer value type","pos":[0,34]}]},{"pos":[1095,1105],"content":"\"UInteger\"","nodes":[{"content":"\"UInteger\"","pos":[0,10]}]},{"pos":[1110,1144],"content":"64-bit unsigned integer value type","nodes":[{"content":"64-bit unsigned integer value type","pos":[0,34]}]},{"pos":[1145,1152],"content":"\"ULong\"","nodes":[{"content":"\"ULong\"","pos":[0,7]}]},{"pos":[1157,1191],"content":"16-bit unsigned integer value type","nodes":[{"content":"16-bit unsigned integer value type","pos":[0,34]}]},{"pos":[1192,1200],"content":"\"UShort\"","nodes":[{"content":"\"UShort\"","pos":[0,8]}]},{"pos":[1208,1429],"content":"If `VarName` is an array, the returned string can be any one of the strings in the preceding table with empty parentheses appended. For example, if `VarName` points to an array of integers, `TypeName` returns \"Integer()\".","nodes":[{"content":"If <ph id=\"ph1\">`VarName`</ph> is an array, the returned string can be any one of the strings in the preceding table with empty parentheses appended.","pos":[0,131],"source":"If `VarName` is an array, the returned string can be any one of the strings in the preceding table with empty parentheses appended."},{"content":"For example, if <ph id=\"ph1\">`VarName`</ph> points to an array of integers, <ph id=\"ph2\">`TypeName`</ph> returns \"Integer()\".","pos":[132,221],"source":" For example, if `VarName` points to an array of integers, `TypeName` returns \"Integer()\"."}]},{"pos":[1436,1862],"content":"When `TypeName` returns the name of a reference type such as a class, it returns only the name itself, not the qualified name. For example, if `VarName` points to an object of class <xref:System.Drawing.Printing.PaperSource?displayProperty=fullName>, `TypeName` returns \"PaperSource\". Note that if the variable is declared to be of a certain class type but does not have an object assigned to it, `TypeName` returns \"Nothing\".","nodes":[{"content":"When <ph id=\"ph1\">`TypeName`</ph> returns the name of a reference type such as a class, it returns only the name itself, not the qualified name.","pos":[0,126],"source":"When `TypeName` returns the name of a reference type such as a class, it returns only the name itself, not the qualified name."},{"content":"For example, if <ph id=\"ph1\">`VarName`</ph> points to an object of class <ph id=\"ph2\">&lt;xref:System.Drawing.Printing.PaperSource?displayProperty=fullName&gt;</ph>, <ph id=\"ph3\">`TypeName`</ph> returns \"PaperSource\".","pos":[127,284],"source":" For example, if `VarName` points to an object of class <xref:System.Drawing.Printing.PaperSource?displayProperty=fullName>, `TypeName` returns \"PaperSource\"."},{"content":"Note that if the variable is declared to be of a certain class type but does not have an object assigned to it, <ph id=\"ph1\">`TypeName`</ph> returns \"Nothing\".","pos":[285,426],"source":" Note that if the variable is declared to be of a certain class type but does not have an object assigned to it, `TypeName` returns \"Nothing\"."}]}],"pos":[33823,35758],"yaml":true,"extradata":"MT"},{"content":"Required. `Object` variable. If `Option Strict` is `Off`, you can pass a variable of any data type except a structure.","nodes":[{"pos":[0,118],"content":"Required. `Object` variable. If `Option Strict` is `Off`, you can pass a variable of any data type except a structure.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"<ph id=\"ph1\">`Object`</ph> variable.","pos":[10,28],"source":"`Object` variable."},{"content":"If <ph id=\"ph1\">`Option Strict`</ph> is <ph id=\"ph2\">`Off`</ph>, you can pass a variable of any data type except a structure.","pos":[29,118],"source":" If `Option Strict` is `Off`, you can pass a variable of any data type except a structure."}]}],"pos":[36159,36278],"yaml":true},{"content":"Returns a `String` value containing data-type information about a variable.","nodes":[{"pos":[0,75],"content":"Returns a <ph id=\"ph1\">`String`</ph> value containing data-type information about a variable.","source":"Returns a `String` value containing data-type information about a variable."}],"pos":[36335,36411],"yaml":true},{"content":"Returns the highest available subscript for the indicated dimension of an array.","nodes":[{"pos":[0,80],"content":"Returns the highest available subscript for the indicated dimension of an array.","nodes":[{"content":"Returns the highest available subscript for the indicated dimension of an array.","pos":[0,80]}]}],"pos":[37466,37547],"yaml":true},{"content":"Since array subscripts start at 0, the length of a dimension is greater by one than the highest available subscript for that dimension.  \n  \n For an array with the following dimensions, `UBound` returns the values in the following table:  \n  \n```vb  \nDim a(100, 5, 4) As Byte  \n```  \n  \n|Call to UBound|Return value|  \n|--------------------|------------------|  \n|`UBound(a, 1)`|100|  \n|`UBound(a, 2)`|5|  \n|`UBound(a, 3)`|4|  \n  \n You can use `UBound` to determine the total number of elements in an array, but you must adjust the value it returns to account for the fact that the subscripts start at 0. The following example calculates the total size of the array `a` in the preceding example:  \n  \n```vb  \nDim total As Integer  \ntotal = (UBound(A, 1) + 1) * (UBound(A, 2) + 1) * (UBound(A, 3) + 1)  \n```  \n  \n The value calculated for `total` is 3030, which is 101 * 6 * 5.","nodes":[{"pos":[0,135],"content":"Since array subscripts start at 0, the length of a dimension is greater by one than the highest available subscript for that dimension.","nodes":[{"content":"Since array subscripts start at 0, the length of a dimension is greater by one than the highest available subscript for that dimension.","pos":[0,135]}]},{"pos":[142,237],"content":"For an array with the following dimensions, <ph id=\"ph1\">`UBound`</ph> returns the values in the following table:","source":"For an array with the following dimensions, `UBound` returns the values in the following table:"},{"pos":[288,302],"content":"Call to UBound","nodes":[{"content":"Call to UBound","pos":[0,14]}]},{"pos":[303,315],"content":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"pos":[379,382],"content":"100","nodes":[{"content":"100","pos":[0,3]}]},{"pos":[402,403],"content":"5","nodes":[{"content":"5","pos":[0,1]}]},{"pos":[423,424],"content":"4","nodes":[{"content":"4","pos":[0,1]}]},{"pos":[432,695],"content":"You can use `UBound` to determine the total number of elements in an array, but you must adjust the value it returns to account for the fact that the subscripts start at 0. The following example calculates the total size of the array `a` in the preceding example:","nodes":[{"content":"You can use <ph id=\"ph1\">`UBound`</ph> to determine the total number of elements in an array, but you must adjust the value it returns to account for the fact that the subscripts start at 0.","pos":[0,172],"source":"You can use `UBound` to determine the total number of elements in an array, but you must adjust the value it returns to account for the fact that the subscripts start at 0."},{"content":"The following example calculates the total size of the array <ph id=\"ph1\">`a`</ph> in the preceding example:","pos":[173,263],"source":" The following example calculates the total size of the array `a` in the preceding example:"}]},{"pos":[813,876],"content":"The value calculated for <ph id=\"ph1\">`total`</ph> is 3030, which is 101 * 6 * 5.","source":"The value calculated for `total` is 3030, which is 101 * 6 * 5."}],"pos":[37558,38458],"yaml":true,"extradata":"MT"},{"content":"Required. Array of any data type. The array in which you want to find the highest possible subscript of a dimension.","nodes":[{"pos":[0,116],"content":"Required. Array of any data type. The array in which you want to find the highest possible subscript of a dimension.","nodes":[{"content":"Required. Array of any data type. The array in which you want to find the highest possible subscript of a dimension.","pos":[0,116],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Array of any data type.","pos":[10,33]},{"content":"The array in which you want to find the highest possible subscript of a dimension.","pos":[34,116]}]}]}],"pos":[38889,39006],"yaml":true},{"content":"Optional. `Integer`. The dimension for which the highest possible subscript is to be returned. Use 1 for the first dimension, 2 for the second, and so on. If <code>Rank</code> is omitted, 1 is assumed.","nodes":[{"pos":[0,201],"content":"Optional. `Integer`. The dimension for which the highest possible subscript is to be returned. Use 1 for the first dimension, 2 for the second, and so on. If <code>Rank</code> is omitted, 1 is assumed.","nodes":[{"content":"Optional.","pos":[0,9]},{"content":"<ph id=\"ph1\">`Integer`</ph>.","pos":[10,20],"source":"`Integer`."},{"content":"The dimension for which the highest possible subscript is to be returned.","pos":[21,94]},{"content":"Use 1 for the first dimension, 2 for the second, and so on.","pos":[95,154]},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">Rank</ph><ept id=\"p1\">&lt;/code&gt;</ept> is omitted, 1 is assumed.","pos":[155,201],"source":" If <code>Rank</code> is omitted, 1 is assumed."}]}],"pos":[39065,39267],"yaml":true},{"content":"`Integer`. The highest value the subscript for the specified dimension can contain. If <code>Array</code> has only one element, `UBound` returns 0. If <code>Array</code> has no elements, for example if it is a zero-length string, `UBound` returns -1.","nodes":[{"pos":[0,250],"content":"`Integer`. The highest value the subscript for the specified dimension can contain. If <code>Array</code> has only one element, `UBound` returns 0. If <code>Array</code> has no elements, for example if it is a zero-length string, `UBound` returns -1.","nodes":[{"content":"<ph id=\"ph1\">`Integer`</ph>.","pos":[0,10],"source":"`Integer`."},{"content":"The highest value the subscript for the specified dimension can contain.","pos":[11,83]},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">Array</ph><ept id=\"p1\">&lt;/code&gt;</ept> has only one element, <ph id=\"ph2\">`UBound`</ph> returns 0.","pos":[84,147],"source":" If <code>Array</code> has only one element, `UBound` returns 0."},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">Array</ph><ept id=\"p1\">&lt;/code&gt;</ept> has no elements, for example if it is a zero-length string, <ph id=\"ph2\">`UBound`</ph> returns -1.","pos":[148,250],"source":" If <code>Array</code> has no elements, for example if it is a zero-length string, `UBound` returns -1."}]}],"pos":[39323,39576],"yaml":true},{"content":"<code>Array</code> is `Nothing`.","nodes":[{"pos":[0,32],"content":"<ph id=\"ph1\">&lt;code&gt;Array&lt;/code&gt;</ph> is <ph id=\"ph2\">`Nothing`</ph>.","source":"<code>Array</code> is `Nothing`."}],"pos":[39746,39779],"yaml":true},{"content":"<code>Rank</code> is less than 1, or <code>Rank</code> is greater than the rank of <code>Array</code>.","nodes":[{"pos":[0,102],"content":"<ph id=\"ph1\">&lt;code&gt;Rank&lt;/code&gt;</ph> is less than 1, or <ph id=\"ph2\">&lt;code&gt;Rank&lt;/code&gt;</ph> is greater than the rank of <ph id=\"ph3\">&lt;code&gt;Array&lt;/code&gt;</ph>.","source":"<code>Rank</code> is less than 1, or <code>Rank</code> is greater than the rank of <code>Array</code>."}],"pos":[39865,39968],"yaml":true},{"content":"Returns an `Integer` value containing the data type classification of a variable.","nodes":[{"pos":[0,81],"content":"Returns an <ph id=\"ph1\">`Integer`</ph> value containing the data type classification of a variable.","source":"Returns an `Integer` value containing the data type classification of a variable."}],"pos":[40902,40984],"yaml":true},{"content":"The integer value returned by `VarType` is a member of the <xref:Microsoft.VisualBasic.VariantType>.  \n  \n The following table shows the values returned by `VarType` for special cases of `VarName`.  \n  \n|Data type represented by `VarName`|Value returned by `VarType`|  \n|----------------------------------------|---------------------------------|  \n|[Nothing](~/docs/visual-basic/language-reference/nothing.md)|`VariantType.Object`|  \n|<xref:System.DBNull>|`VariantType.Null`|  \n|Enumeration|Underlying data type (`SByte`, `Byte`, `Short`, `UShort`, `Integer`, `UInteger`, `Long`, or `ULong`)|  \n|Array|Bitwise OR of array element type and `VariantType.Array`|  \n|Array of arrays|Bitwise OR of `VariantType.Object` and `VariantType.Array`|  \n|Structure (<xref:System.ValueType?displayProperty=fullName>)|`VariantType.UserDefinedType`|  \n|<xref:System.Exception>|`VariantType.Error`|  \n|Unknown|`VariantType.Object`|","nodes":[{"pos":[0,100],"content":"The integer value returned by <ph id=\"ph1\">`VarType`</ph> is a member of the <ph id=\"ph2\">&lt;xref:Microsoft.VisualBasic.VariantType&gt;</ph>.","source":"The integer value returned by `VarType` is a member of the <xref:Microsoft.VisualBasic.VariantType>."},{"pos":[107,197],"content":"The following table shows the values returned by <ph id=\"ph1\">`VarType`</ph> for special cases of <ph id=\"ph2\">`VarName`</ph>.","source":"The following table shows the values returned by `VarType` for special cases of `VarName`."},{"pos":[204,238],"content":"Data type represented by <ph id=\"ph1\">`VarName`</ph>","source":"Data type represented by `VarName`"},{"pos":[239,266],"content":"Value returned by <ph id=\"ph1\">`VarType`</ph>","source":"Value returned by `VarType`"},{"pos":[350,410],"content":"<bpt id=\"p1\">[</bpt>Nothing<ept id=\"p1\">](~/docs/visual-basic/language-reference/nothing.md)</ept>","source":"[Nothing](~/docs/visual-basic/language-reference/nothing.md)"},{"pos":[436,456],"content":"<xref:System.DBNull>","nodes":[]},{"pos":[480,491],"content":"Enumeration","nodes":[{"content":"Enumeration","pos":[0,11]}]},{"pos":[492,592],"content":"Underlying data type (<ph id=\"ph1\">`SByte`</ph>, <ph id=\"ph2\">`Byte`</ph>, <ph id=\"ph3\">`Short`</ph>, <ph id=\"ph4\">`UShort`</ph>, <ph id=\"ph5\">`Integer`</ph>, <ph id=\"ph6\">`UInteger`</ph>, <ph id=\"ph7\">`Long`</ph>, or <ph id=\"ph8\">`ULong`</ph>)","source":"Underlying data type (`SByte`, `Byte`, `Short`, `UShort`, `Integer`, `UInteger`, `Long`, or `ULong`)"},{"pos":[597,602],"content":"Array","nodes":[{"content":"Array","pos":[0,5]}]},{"pos":[603,659],"content":"Bitwise OR of array element type and <ph id=\"ph1\">`VariantType.Array`</ph>","source":"Bitwise OR of array element type and `VariantType.Array`"},{"pos":[664,679],"content":"Array of arrays","nodes":[{"content":"Array of arrays","pos":[0,15]}]},{"pos":[680,738],"content":"Bitwise OR of <ph id=\"ph1\">`VariantType.Object`</ph> and <ph id=\"ph2\">`VariantType.Array`</ph>","source":"Bitwise OR of `VariantType.Object` and `VariantType.Array`"},{"pos":[743,803],"content":"Structure (<xref:System.ValueType?displayProperty=fullName>)","nodes":[{"content":"Structure (<ph id=\"ph1\">&lt;xref:System.ValueType?displayProperty=fullName&gt;</ph>)","pos":[0,60],"source":"Structure (<xref:System.ValueType?displayProperty=fullName>)"}]},{"pos":[838,861],"content":"<xref:System.Exception>","nodes":[]},{"pos":[886,893],"content":"Unknown","nodes":[{"content":"Unknown","pos":[0,7]}]}],"pos":[40995,41926],"yaml":true,"extradata":"MT"},{"content":"Required. `Object` variable. If `Option Strict` is `Off`, you can pass a variable of any data type except a structure.","nodes":[{"pos":[0,118],"content":"Required. `Object` variable. If `Option Strict` is `Off`, you can pass a variable of any data type except a structure.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"<ph id=\"ph1\">`Object`</ph> variable.","pos":[10,28],"source":"`Object` variable."},{"content":"If <ph id=\"ph1\">`Option Strict`</ph> is <ph id=\"ph2\">`Off`</ph>, you can pass a variable of any data type except a structure.","pos":[29,118],"source":" If `Option Strict` is `Off`, you can pass a variable of any data type except a structure."}]}],"pos":[42367,42486],"yaml":true},{"content":"Returns an `Integer` value containing the data type classification of a variable.","nodes":[{"pos":[0,81],"content":"Returns an <ph id=\"ph1\">`Integer`</ph> value containing the data type classification of a variable.","source":"Returns an `Integer` value containing the data type classification of a variable."}],"pos":[42563,42645],"yaml":true},{"content":"Returns a `String` value containing the Visual Basic data type name of a variable.","nodes":[{"pos":[0,82],"content":"Returns a <ph id=\"ph1\">`String`</ph> value containing the Visual Basic data type name of a variable.","source":"Returns a `String` value containing the Visual Basic data type name of a variable."}],"pos":[43669,43752],"yaml":true},{"content":"`VbTypeName` returns the Visual Basic type name corresponding to the common language runtime type name. For example, if `UrtName` contains \"Int32\" or \"System.Int32\", `VbTypeName` returns \"Integer\". If `VbTypeName` does not recognize the value of `UrtName`, it returns `Nothing` (not the string \"Nothing\").  \n  \n The type name in `UrtName` can be obtained from various sources, for example from the <xref:System.Reflection.MemberInfo.Name%2A> property in the <xref:System.Reflection.MemberInfo> array of the <xref:System.Type> class.","nodes":[{"pos":[0,305],"content":"`VbTypeName` returns the Visual Basic type name corresponding to the common language runtime type name. For example, if `UrtName` contains \"Int32\" or \"System.Int32\", `VbTypeName` returns \"Integer\". If `VbTypeName` does not recognize the value of `UrtName`, it returns `Nothing` (not the string \"Nothing\").","nodes":[{"content":"<ph id=\"ph1\">`VbTypeName`</ph> returns the Visual Basic type name corresponding to the common language runtime type name.","pos":[0,103],"source":"`VbTypeName` returns the Visual Basic type name corresponding to the common language runtime type name."},{"content":"For example, if <ph id=\"ph1\">`UrtName`</ph> contains \"Int32\" or \"System.Int32\", <ph id=\"ph2\">`VbTypeName`</ph> returns \"Integer\".","pos":[104,197],"source":" For example, if `UrtName` contains \"Int32\" or \"System.Int32\", `VbTypeName` returns \"Integer\"."},{"content":"If <ph id=\"ph1\">`VbTypeName`</ph> does not recognize the value of <ph id=\"ph2\">`UrtName`</ph>, it returns <ph id=\"ph3\">`Nothing`</ph> (not the string \"Nothing\").","pos":[198,305],"source":" If `VbTypeName` does not recognize the value of `UrtName`, it returns `Nothing` (not the string \"Nothing\")."}]},{"pos":[312,532],"content":"The type name in <ph id=\"ph1\">`UrtName`</ph> can be obtained from various sources, for example from the <ph id=\"ph2\">&lt;xref:System.Reflection.MemberInfo.Name%2A&gt;</ph> property in the <ph id=\"ph3\">&lt;xref:System.Reflection.MemberInfo&gt;</ph> array of the <ph id=\"ph4\">&lt;xref:System.Type&gt;</ph> class.","source":"The type name in `UrtName` can be obtained from various sources, for example from the <xref:System.Reflection.MemberInfo.Name%2A> property in the <xref:System.Reflection.MemberInfo> array of the <xref:System.Type> class."}],"pos":[43763,44308],"yaml":true,"extradata":"MT"},{"content":"Required. `String` variable containing a type name used by the common language runtime.","nodes":[{"pos":[0,87],"content":"Required. `String` variable containing a type name used by the common language runtime.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"<ph id=\"ph1\">`String`</ph> variable containing a type name used by the common language runtime.","pos":[10,87],"source":"`String` variable containing a type name used by the common language runtime."}]}],"pos":[44705,44793],"yaml":true},{"content":"Returns a `String` value containing the Visual Basic data type name of a variable.","nodes":[{"pos":[0,82],"content":"Returns a <ph id=\"ph1\">`String`</ph> value containing the Visual Basic data type name of a variable.","source":"Returns a `String` value containing the Visual Basic data type name of a variable."}],"pos":[44850,44933],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: Microsoft.VisualBasic.Information\n  commentId: T:Microsoft.VisualBasic.Information\n  id: Information\n  children:\n  - Microsoft.VisualBasic.Information.Erl\n  - Microsoft.VisualBasic.Information.Err\n  - Microsoft.VisualBasic.Information.IsArray(System.Object)\n  - Microsoft.VisualBasic.Information.IsDate(System.Object)\n  - Microsoft.VisualBasic.Information.IsDBNull(System.Object)\n  - Microsoft.VisualBasic.Information.IsError(System.Object)\n  - Microsoft.VisualBasic.Information.IsNothing(System.Object)\n  - Microsoft.VisualBasic.Information.IsNumeric(System.Object)\n  - Microsoft.VisualBasic.Information.IsReference(System.Object)\n  - Microsoft.VisualBasic.Information.LBound(System.Array,System.Int32)\n  - Microsoft.VisualBasic.Information.QBColor(System.Int32)\n  - Microsoft.VisualBasic.Information.RGB(System.Int32,System.Int32,System.Int32)\n  - Microsoft.VisualBasic.Information.SystemTypeName(System.String)\n  - Microsoft.VisualBasic.Information.TypeName(System.Object)\n  - Microsoft.VisualBasic.Information.UBound(System.Array,System.Int32)\n  - Microsoft.VisualBasic.Information.VarType(System.Object)\n  - Microsoft.VisualBasic.Information.VbTypeName(System.String)\n  langs:\n  - csharp\n  name: Information\n  nameWithType: Information\n  fullName: Microsoft.VisualBasic.Information\n  type: Class\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: The `Information` module contains the procedures used to return, test for, or verify information.\n  remarks: This module supports the Visual Basic language keywords and run-time library members that provide error information, validate data, determine array bounds, and retrieve data type and color information.\n  example:\n  - \"The following example uses the `VbTypeName` function to return data type names for several variables.  \\n  \\n```  \\nDim sysDateName As String = \\\"System.DateTime\\\"  \\nDim sysShortName As String = \\\"Int16\\\"  \\nDim sysBadName As String = \\\"Nonsense\\\"  \\nDim testVbName As String  \\ntestVbName = VbTypeName(sysDateName)   \\n' Returns \\\"Date\\\".  \\ntestVbName = VbTypeName(sysShortName)   \\n' Returns \\\"Short\\\".  \\ntestVbName = VbTypeName(sysBadName)   \\n' Returns Nothing.  \\n```\"\n  syntax:\n    content: >-\n      [Microsoft.VisualBasic.CompilerServices.StandardModule]\n\n      public sealed class Information\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  attributes:\n  - type: Microsoft.VisualBasic.CompilerServices.StandardModuleAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/Information.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.Information.Erl\n  commentId: M:Microsoft.VisualBasic.Information.Erl\n  id: Erl\n  parent: Microsoft.VisualBasic.Information\n  langs:\n  - csharp\n  name: Erl()\n  nameWithType: Information.Erl()\n  fullName: Information.Erl()\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns an integer indicating the line number of the last executed statement. Read-only.\n  remarks: If Visual Basic encounters no line numbers, it returns 0.\n  example:\n  - \"This example uses the `Erl` property to indicate the line number.  \\n  \\n [!code-vb[VbVbalrErrorHandling#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#6)]\"\n  syntax:\n    content: public static int Erl ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: Returns an integer indicating the line number of the last executed statement. Read-only.\n  overload: Microsoft.VisualBasic.Information.Erl*\n  exceptions: []\n  attributes: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/Information.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.Information.Err\n  commentId: M:Microsoft.VisualBasic.Information.Err\n  id: Err\n  parent: Microsoft.VisualBasic.Information\n  langs:\n  - csharp\n  name: Err()\n  nameWithType: Information.Err()\n  fullName: Information.Err()\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Contains information about run-time errors.\n  remarks: \"The properties of the `Err` object are set by the generator of an error—Visual Basic, an object, or the programmer.  \\n  \\n When a run-time error occurs, the properties of the `Err` object are filled with information that uniquely identifies the error and that you can use to handle the error. To generate a run-time error in your code, use the `Raise` method.  \\n  \\n The `Err` object's properties are reset to zero or zero-length strings (\\\"\\\") after an `Exit Sub`, `Exit Function`, `Exit Property`, or `Resume Next` statement within an error-handling routine. Using any form of the `Resume` statement outside of an error-handling routine will not reset the `Err` object's properties. You can use the `Clear` method to explicitly reset `Err`.  \\n  \\n Use the `Raise` method rather than the `Error` statement to generate run-time errors for system errors and class modules. Your decision about whether to use the `Raise` method in other code depends on the richness of the information you want to return.  \\n  \\n The `Err` object is an intrinsic object with global scope. Therefore, you do not need to create an instance of it in your code.\"\n  example:\n  - \"This example uses the properties of the `Err` object in constructing an error-message dialog box. Notice that if you use the `Clear` method first, when you generate a Visual Basic error with the `Raise` method, Visual Basic's default values become the properties of the `Err` object.  \\n  \\n [!code-vb[VbVbalrErrorHandling#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#3)]\"\n  syntax:\n    content: public static Microsoft.VisualBasic.ErrObject Err ();\n    parameters: []\n    return:\n      type: Microsoft.VisualBasic.ErrObject\n      description: Contains information about run-time errors.\n  overload: Microsoft.VisualBasic.Information.Err*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/Information.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.Information.IsArray(System.Object)\n  commentId: M:Microsoft.VisualBasic.Information.IsArray(System.Object)\n  id: IsArray(System.Object)\n  parent: Microsoft.VisualBasic.Information\n  langs:\n  - csharp\n  name: IsArray(Object)\n  nameWithType: Information.IsArray(Object)\n  fullName: Information.IsArray(Object)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns a `Boolean` value indicating whether a variable points to an array.\n  remarks: '`IsArray` returns `True` if the variable points to an array; otherwise, it returns `False`. `IsArray` is especially useful with objects that might contain arrays.'\n  example:\n  - \"This example uses the `IsArray` function to check if several variables refer to an array.  \\n  \\n [!code-vb[VbVbalrFunctions#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#34)]\"\n  syntax:\n    content: public static bool IsArray (object VarName);\n    parameters:\n    - id: VarName\n      type: System.Object\n      description: Required. `Object` variable.\n    return:\n      type: System.Boolean\n      description: Returns a `Boolean` value indicating whether a variable points to an array.\n  overload: Microsoft.VisualBasic.Information.IsArray*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/Information.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.Information.IsDate(System.Object)\n  commentId: M:Microsoft.VisualBasic.Information.IsDate(System.Object)\n  id: IsDate(System.Object)\n  parent: Microsoft.VisualBasic.Information\n  langs:\n  - csharp\n  name: IsDate(Object)\n  nameWithType: Information.IsDate(Object)\n  fullName: Information.IsDate(Object)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns a `Boolean` value indicating whether an expression represents a valid `Date` value.\n  remarks: \"`IsDate` returns `True` if `Expression` is of the <xref:System.DateTime> data type or can be converted to it; otherwise, it returns `False`.  \\n  \\n The <xref:System.DateTime> data type holds both a date value and a time value. `IsDate` returns `True` if `Expression` represents a valid date, a valid time, or a valid date and time.\"\n  example:\n  - \"The following example uses the `IsDate` function to determine if several variables represent valid <xref:System.DateTime> values.  \\n  \\n [!code-vb[VbVbalrFunctions#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#35)]  \\n  \\n In the preceding example, `IsDate` returns `True` for the first four calls and `False` for the last call.\"\n  syntax:\n    content: public static bool IsDate (object Expression);\n    parameters:\n    - id: Expression\n      type: System.Object\n      description: Required. `Object` expression.\n    return:\n      type: System.Boolean\n      description: Returns a `Boolean` value indicating whether an expression represents a valid `Date` value.\n  overload: Microsoft.VisualBasic.Information.IsDate*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/Information.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.Information.IsDBNull(System.Object)\n  commentId: M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)\n  id: IsDBNull(System.Object)\n  parent: Microsoft.VisualBasic.Information\n  langs:\n  - csharp\n  name: IsDBNull(Object)\n  nameWithType: Information.IsDBNull(Object)\n  fullName: Information.IsDBNull(Object)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns a `Boolean` value indicating whether an expression evaluates to the <xref href=\"System.DBNull\"></xref> class.\n  remarks: \"`IsDBNull` returns `True` if the data type of `Expression` evaluates to the <xref:System.DBNull> type; otherwise, `IsDBNull` returns `False`.  \\n  \\n The <xref:System.DBNull?displayProperty=fullName> value indicates that the `Object` represents missing or nonexistent data. `DBNull` is not the same as `Nothing`, which indicates that a variable has not yet been initialized. `DBNull` is also not the same as a zero-length string (`\\\"\\\"`), which is sometimes referred to as a null string.\"\n  example:\n  - \"This example uses the `IsDBNull` function to determine if a variable evaluates to `DBNull`.  \\n  \\n [!code-vb[VbVbalrFunctions#36](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#36)]\"\n  syntax:\n    content: public static bool IsDBNull (object Expression);\n    parameters:\n    - id: Expression\n      type: System.Object\n      description: Required. `Object` expression.\n    return:\n      type: System.Boolean\n      description: Returns a `Boolean` value indicating whether an expression evaluates to the <xref href=\"System.DBNull\"></xref> class.\n  overload: Microsoft.VisualBasic.Information.IsDBNull*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/Information.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.Information.IsError(System.Object)\n  commentId: M:Microsoft.VisualBasic.Information.IsError(System.Object)\n  id: IsError(System.Object)\n  parent: Microsoft.VisualBasic.Information\n  langs:\n  - csharp\n  name: IsError(Object)\n  nameWithType: Information.IsError(Object)\n  fullName: Information.IsError(Object)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns a `Boolean` value indicating whether an expression is an exception type.\n  remarks: \"`IsError` returns `True` if the expression represents an `Object` variable that derives from the <xref:System.Exception> class in the <xref:System> namespace.  \\n  \\n An exception that derives from <xref:System.Exception?displayProperty=fullName> can be caught with the `Try...Catch...Finally` statements.\"\n  example:\n  - \"The following example uses the `IsError` function to check if an expression represents a system exception.  \\n  \\n [!code-vb[VbVbalrFunctions#37](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#37)]\"\n  syntax:\n    content: public static bool IsError (object Expression);\n    parameters:\n    - id: Expression\n      type: System.Object\n      description: Required. `Object` expression.\n    return:\n      type: System.Boolean\n      description: Returns a `Boolean` value indicating whether an expression is an exception type.\n  overload: Microsoft.VisualBasic.Information.IsError*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/Information.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.Information.IsNothing(System.Object)\n  commentId: M:Microsoft.VisualBasic.Information.IsNothing(System.Object)\n  id: IsNothing(System.Object)\n  parent: Microsoft.VisualBasic.Information\n  langs:\n  - csharp\n  name: IsNothing(Object)\n  nameWithType: Information.IsNothing(Object)\n  fullName: Information.IsNothing(Object)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns a `Boolean` value indicating whether an expression has no object assigned to it.\n  remarks: \"`IsNothing` returns `True` if the expression represents an object variable that currently has no object assigned to it; otherwise, it returns `False`.  \\n  \\n `IsNothing` is intended to work on reference types. A value type cannot hold a value of  and reverts to its default value if you assign `Nothing` to it. If you supply a value type in `Expression`, `IsNothing` always returns `False`.\"\n  example:\n  - \"The following example uses the `IsNothing` function to determine if an object variable is associated with any object instance.  \\n  \\n [!code-vb[VbVbalrFunctions#38](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#38)]\"\n  syntax:\n    content: public static bool IsNothing (object Expression);\n    parameters:\n    - id: Expression\n      type: System.Object\n      description: Required. `Object` expression.\n    return:\n      type: System.Boolean\n      description: Returns a `Boolean` value indicating whether an expression has no object assigned to it.\n  overload: Microsoft.VisualBasic.Information.IsNothing*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/Information.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.Information.IsNumeric(System.Object)\n  commentId: M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)\n  id: IsNumeric(System.Object)\n  parent: Microsoft.VisualBasic.Information\n  langs:\n  - csharp\n  name: IsNumeric(Object)\n  nameWithType: Information.IsNumeric(Object)\n  fullName: Information.IsNumeric(Object)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns a `Boolean` value indicating whether an expression can be evaluated as a number.\n  remarks: \"`IsNumeric` returns `True` if the data type of `Expression` is `Boolean`, `Byte`, `Decimal`, `Double`, `Integer`, `Long`, `SByte`, `Short`, `Single`, `UInteger`, `ULong`, or `UShort`. It also returns `True` if `Expression` is a `Char`, `String`, or `Object` that can be successfully converted to a number. `Expression` can contain non-numeric characters. `IsNumeric` returns `True` if `Expression` is a string that contains a valid hexadecimal or octal number. `IsNumeric` also returns `True` if `Expression` contains a valid numeric expression that begins with a + or - character or contains commas.  \\n  \\n `IsNumeric` returns `False` if `Expression` is of data type `Date`. It returns `False` if `Expression` is a `Char`, `String`, or `Object` that cannot be successfully converted to a number.\"\n  example:\n  - \"The following example uses the `IsNumeric` function to determine if the contents of a variable can be evaluated as a number.  \\n  \\n [!code-vb[VbVbalrFunctions#39](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#39)]\"\n  syntax:\n    content: public static bool IsNumeric (object Expression);\n    parameters:\n    - id: Expression\n      type: System.Object\n      description: Required. `Object` expression.\n    return:\n      type: System.Boolean\n      description: Returns a `Boolean` value indicating whether an expression can be evaluated as a number.\n  overload: Microsoft.VisualBasic.Information.IsNumeric*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/Information.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.Information.IsReference(System.Object)\n  commentId: M:Microsoft.VisualBasic.Information.IsReference(System.Object)\n  id: IsReference(System.Object)\n  parent: Microsoft.VisualBasic.Information\n  langs:\n  - csharp\n  name: IsReference(Object)\n  nameWithType: Information.IsReference(Object)\n  fullName: Information.IsReference(Object)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns a `Boolean` value indicating whether an expression evaluates to a reference type.\n  remarks: \"`IsReference` returns `True` if `Expression` represents a reference type, such as a class instance, a `String` type, or an array of any type; otherwise, it returns `False`.  \\n  \\n A reference type contains a pointer to data stored elsewhere in memory. A value type contains its own data.\"\n  example:\n  - \"This example uses the `IsReference` function to check if several variables refer to reference types.  \\n  \\n [!code-vb[VbVbalrFunctions#40](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#40)]  \\n  \\n In the preceding example, the first three calls to `IsReference` return `True`. The last call returns `False`, because `Integer` is a value type, not a reference type.\"\n  syntax:\n    content: public static bool IsReference (object Expression);\n    parameters:\n    - id: Expression\n      type: System.Object\n      description: Required. `Object` expression.\n    return:\n      type: System.Boolean\n      description: Returns a `Boolean` value indicating whether an expression evaluates to a reference type.\n  overload: Microsoft.VisualBasic.Information.IsReference*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/Information.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.Information.LBound(System.Array,System.Int32)\n  commentId: M:Microsoft.VisualBasic.Information.LBound(System.Array,System.Int32)\n  id: LBound(System.Array,System.Int32)\n  parent: Microsoft.VisualBasic.Information\n  langs:\n  - csharp\n  name: LBound(Array, Int32)\n  nameWithType: Information.LBound(Array, Int32)\n  fullName: Information.LBound(Array, Int32)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns the lowest available subscript for the indicated dimension of an array.\n  remarks: \"Since array subscripts start at 0, the lowest available subscript for every dimension is always 0.  \\n  \\n For an array with the following dimensions, `LBound` returns the values in the following table:  \\n  \\n```vb  \\nDim a(100, 5, 4) As Byte  \\n```  \\n  \\n|Call to LBound|Return value|  \\n|--------------------|------------------|  \\n|`LBound(a, 1)`|0|  \\n|`LBound(a, 2)`|0|  \\n|`LBound(a, 3)`|0|\"\n  example:\n  - \"The following example uses the `LBound` function to determine the lowest available subscript for the indicated dimension of an array.  \\n  \\n [!code-vb[VbVbalrFunctions#41](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#41)]\"\n  syntax:\n    content: public static int LBound (Array Array, int Rank = 1);\n    parameters:\n    - id: Array\n      type: System.Array\n      description: Required. Array of any data type. The array in which you want to find the lowest possible subscript of a dimension.\n    - id: Rank\n      type: System.Int32\n      description: Optional. `Integer`. The dimension for which the lowest possible subscript is to be returned. Use 1 for the first dimension, 2 for the second, and so on. If <code>Rank</code> is omitted, 1 is assumed.\n    return:\n      type: System.Int32\n      description: '`Integer`. The lowest value the subscript for the specified dimension can contain. `LBound` always returns 0 as long as <code>Array</code> has been initialized, even if it has no elements, for example if it is a zero-length string. If <code>Array</code> is `Nothing`, `LBound` throws an <xref href=\"System.ArgumentNullException\"></xref>.'\n  overload: Microsoft.VisualBasic.Information.LBound*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>Array</code> is `Nothing`.\n  - type: System.RankException\n    commentId: T:System.RankException\n    description: <code>Rank</code> less than 1, or <code>Rank</code> is greater than the rank of <code>Array</code>.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/Information.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.Information.QBColor(System.Int32)\n  commentId: M:Microsoft.VisualBasic.Information.QBColor(System.Int32)\n  id: QBColor(System.Int32)\n  parent: Microsoft.VisualBasic.Information\n  langs:\n  - csharp\n  name: QBColor(Int32)\n  nameWithType: Information.QBColor(Int32)\n  fullName: Information.QBColor(Int32)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns an `Integer` value representing the RGB color code corresponding to the specified color number.\n  remarks: \"Starting with the least-significant byte, the returned value specifies the red, green, and blue values used to set the appropriate color in the RGB system used by the Visual Basic language.  \\n  \\n The `Color` argument has these settings.  \\n  \\n|Number|Color|Number|Color|  \\n|------------|-----------|------------|-----------|  \\n|0|Black|8|Gray|  \\n|1|Blue|9|Light blue|  \\n|2|Green|10|Light green|  \\n|3|Cyan|11|Light cyan|  \\n|4|Red|12|Light red|  \\n|5|Magenta|13|Light magenta|  \\n|6|Yellow|14|Light yellow|  \\n|7|White|15|Bright white|\"\n  example:\n  - \"This example uses the `QBColor` function to change to the color indicated by `colorInteger`. `QBColor` accepts integer values between 0 and 15.  \\n  \\n [!code-vb[VbVbalrCatRef#29](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#29)]\"\n  syntax:\n    content: public static int QBColor (int Color);\n    parameters:\n    - id: Color\n      type: System.Int32\n      description: Required. A whole number in the range 0–15.\n    return:\n      type: System.Int32\n      description: Returns an `Integer` value representing the RGB color code corresponding to the specified color number.\n  overload: Microsoft.VisualBasic.Information.QBColor*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>Color</code> is outside of range 0 to 15, inclusive.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/Information.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.Information.RGB(System.Int32,System.Int32,System.Int32)\n  commentId: M:Microsoft.VisualBasic.Information.RGB(System.Int32,System.Int32,System.Int32)\n  id: RGB(System.Int32,System.Int32,System.Int32)\n  parent: Microsoft.VisualBasic.Information\n  langs:\n  - csharp\n  name: RGB(Int32, Int32, Int32)\n  nameWithType: Information.RGB(Int32, Int32, Int32)\n  fullName: Information.RGB(Int32, Int32, Int32)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns an `Integer` value representing an RGB color value from a set of red, green and blue color components.\n  remarks: \"Application methods and properties that accept a color specification expect that specification to be a number representing an RGB color value. An RGB color value specifies the relative intensity of red, green, and blue to cause a specific color to be displayed.  \\n  \\n If the value for any argument to `RGB` is greater than 255, 255 is used.  \\n  \\n The following table lists some standard colors and the red, green, and blue values they include.  \\n  \\n|Color|Red value|Green value|Blue value|  \\n|-----------|---------------|-----------------|----------------|  \\n|Black|0|0|0|  \\n|Blue|0|0|255|  \\n|Green|0|255|0|  \\n|Cyan|0|255|255|  \\n|Red|255|0|0|  \\n|Magenta|255|0|255|  \\n|Yellow|255|255|0|  \\n|White|255|255|255|\"\n  example:\n  - \"This example shows how the `RGB` function is used to return a whole number representing an `RGB` color value.  \\n  \\n [!code-vb[VbVbalrCatRef#18](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#18)]\"\n  syntax:\n    content: public static int RGB (int Red, int Green, int Blue);\n    parameters:\n    - id: Red\n      type: System.Int32\n      description: Required. `Integer` in the range 0–255, inclusive, that represents the intensity of the red component of the color.\n    - id: Green\n      type: System.Int32\n      description: Required. `Integer` in the range 0–255, inclusive, that represents the intensity of the green component of the color.\n    - id: Blue\n      type: System.Int32\n      description: Required. `Integer` in the range 0–255, inclusive, that represents the intensity of the blue component of the color.\n    return:\n      type: System.Int32\n      description: Returns an `Integer` value representing an RGB color value from a set of red, green and blue color components.\n  overload: Microsoft.VisualBasic.Information.RGB*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>Green</code>, <code>Blue</code>, or <code>Red</code> is outside of range 0 to 255, inclusive.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/Information.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.Information.SystemTypeName(System.String)\n  commentId: M:Microsoft.VisualBasic.Information.SystemTypeName(System.String)\n  id: SystemTypeName(System.String)\n  parent: Microsoft.VisualBasic.Information\n  langs:\n  - csharp\n  name: SystemTypeName(String)\n  nameWithType: Information.SystemTypeName(String)\n  fullName: Information.SystemTypeName(String)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns a `String` value containing the system data type name of a variable.\n  remarks: '`SystemTypeName` returns the fully qualified common language runtime (CLR) type name corresponding to the Visual Basic type name. For example, if `VbName` contains \"Date\", `SystemTypeName` returns \"System.DateTime\". If `SystemTypeName` does not recognize the value of `VbName`, it returns `Nothing` (not the string \"Nothing\").'\n  example:\n  - \"The following example uses the `SystemTypeName` function to return data type names for several variables.  \\n  \\n [!code-vb[VbVbalrFunctions#49](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#49)]\"\n  syntax:\n    content: public static string SystemTypeName (string VbName);\n    parameters:\n    - id: VbName\n      type: System.String\n      description: Required. A `String` variable containing a Visual Basic type name.\n    return:\n      type: System.String\n      description: Returns a `String` value containing the system data type name of a variable.\n  overload: Microsoft.VisualBasic.Information.SystemTypeName*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/Information.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.Information.TypeName(System.Object)\n  commentId: M:Microsoft.VisualBasic.Information.TypeName(System.Object)\n  id: TypeName(System.Object)\n  parent: Microsoft.VisualBasic.Information\n  langs:\n  - csharp\n  name: TypeName(Object)\n  nameWithType: Information.TypeName(Object)\n  fullName: Information.TypeName(Object)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns a `String` value containing data-type information about a variable.\n  remarks: \"The following table shows the `String` values returned by `TypeName` for different contents of `VarName`.  \\n  \\n|`VarName` contents|String returned|  \\n|------------------------|---------------------|  \\n|16-bit `True` or `False` value type|\\\"Boolean\\\"|  \\n|8-bit binary value type|\\\"Byte\\\"|  \\n|16-bit character value type|\\\"Char\\\"|  \\n|64-bit date and time value type|\\\"Date\\\"|  \\n|Reference type indicating missing or nonexistent data|\\\"DBNull\\\"|  \\n|128-bit fixed-point numeric value type|\\\"Decimal\\\"|  \\n|64-bit floating-point numeric value type|\\\"Double\\\"|  \\n|32-bit integer value type|\\\"Integer\\\"|  \\n|Reference type pointing to an unspecialized object|\\\"Object\\\"|  \\n|Reference type pointing to a specialized object created from class *objectclass*|\\\"*objectclass*\\\"|  \\n|64-bit integer value type|\\\"Long\\\"|  \\n|Reference type with no object currently assigned to it|\\\"Nothing\\\"|  \\n|8-bit signed integer value type|\\\"SByte\\\"|  \\n|16-bit integer value type|\\\"Short\\\"|  \\n|32-bit floating-point numeric value type|\\\"Single\\\"|  \\n|Reference type pointing to a string of 16-bit characters|\\\"String\\\"|  \\n|32-bit unsigned integer value type|\\\"UInteger\\\"|  \\n|64-bit unsigned integer value type|\\\"ULong\\\"|  \\n|16-bit unsigned integer value type|\\\"UShort\\\"|  \\n  \\n If `VarName` is an array, the returned string can be any one of the strings in the preceding table with empty parentheses appended. For example, if `VarName` points to an array of integers, `TypeName` returns \\\"Integer()\\\".  \\n  \\n When `TypeName` returns the name of a reference type such as a class, it returns only the name itself, not the qualified name. For example, if `VarName` points to an object of class <xref:System.Drawing.Printing.PaperSource?displayProperty=fullName>, `TypeName` returns \\\"PaperSource\\\". Note that if the variable is declared to be of a certain class type but does not have an object assigned to it, `TypeName` returns \\\"Nothing\\\".\"\n  example:\n  - \"The following example uses the `TypeName` function to return data type information about several variables.  \\n  \\n [!code-vb[VbVbalrFunctions#52](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#52)]\"\n  syntax:\n    content: public static string TypeName (object VarName);\n    parameters:\n    - id: VarName\n      type: System.Object\n      description: Required. `Object` variable. If `Option Strict` is `Off`, you can pass a variable of any data type except a structure.\n    return:\n      type: System.String\n      description: Returns a `String` value containing data-type information about a variable.\n  overload: Microsoft.VisualBasic.Information.TypeName*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/Information.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.Information.UBound(System.Array,System.Int32)\n  commentId: M:Microsoft.VisualBasic.Information.UBound(System.Array,System.Int32)\n  id: UBound(System.Array,System.Int32)\n  parent: Microsoft.VisualBasic.Information\n  langs:\n  - csharp\n  name: UBound(Array, Int32)\n  nameWithType: Information.UBound(Array, Int32)\n  fullName: Information.UBound(Array, Int32)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns the highest available subscript for the indicated dimension of an array.\n  remarks: \"Since array subscripts start at 0, the length of a dimension is greater by one than the highest available subscript for that dimension.  \\n  \\n For an array with the following dimensions, `UBound` returns the values in the following table:  \\n  \\n```vb  \\nDim a(100, 5, 4) As Byte  \\n```  \\n  \\n|Call to UBound|Return value|  \\n|--------------------|------------------|  \\n|`UBound(a, 1)`|100|  \\n|`UBound(a, 2)`|5|  \\n|`UBound(a, 3)`|4|  \\n  \\n You can use `UBound` to determine the total number of elements in an array, but you must adjust the value it returns to account for the fact that the subscripts start at 0. The following example calculates the total size of the array `a` in the preceding example:  \\n  \\n```vb  \\nDim total As Integer  \\ntotal = (UBound(A, 1) + 1) * (UBound(A, 2) + 1) * (UBound(A, 3) + 1)  \\n```  \\n  \\n The value calculated for `total` is 3030, which is 101 * 6 * 5.\"\n  example:\n  - \"The following example uses the `UBound` function to determine the highest available subscript for the indicated dimension of an array.  \\n  \\n [!code-vb[VbVbalrFunctions#53](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#53)]\"\n  syntax:\n    content: public static int UBound (Array Array, int Rank = 1);\n    parameters:\n    - id: Array\n      type: System.Array\n      description: Required. Array of any data type. The array in which you want to find the highest possible subscript of a dimension.\n    - id: Rank\n      type: System.Int32\n      description: Optional. `Integer`. The dimension for which the highest possible subscript is to be returned. Use 1 for the first dimension, 2 for the second, and so on. If <code>Rank</code> is omitted, 1 is assumed.\n    return:\n      type: System.Int32\n      description: '`Integer`. The highest value the subscript for the specified dimension can contain. If <code>Array</code> has only one element, `UBound` returns 0. If <code>Array</code> has no elements, for example if it is a zero-length string, `UBound` returns -1.'\n  overload: Microsoft.VisualBasic.Information.UBound*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>Array</code> is `Nothing`.\n  - type: System.RankException\n    commentId: T:System.RankException\n    description: <code>Rank</code> is less than 1, or <code>Rank</code> is greater than the rank of <code>Array</code>.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/Information.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.Information.VarType(System.Object)\n  commentId: M:Microsoft.VisualBasic.Information.VarType(System.Object)\n  id: VarType(System.Object)\n  parent: Microsoft.VisualBasic.Information\n  langs:\n  - csharp\n  name: VarType(Object)\n  nameWithType: Information.VarType(Object)\n  fullName: Information.VarType(Object)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns an `Integer` value containing the data type classification of a variable.\n  remarks: \"The integer value returned by `VarType` is a member of the <xref:Microsoft.VisualBasic.VariantType>.  \\n  \\n The following table shows the values returned by `VarType` for special cases of `VarName`.  \\n  \\n|Data type represented by `VarName`|Value returned by `VarType`|  \\n|----------------------------------------|---------------------------------|  \\n|[Nothing](~/docs/visual-basic/language-reference/nothing.md)|`VariantType.Object`|  \\n|<xref:System.DBNull>|`VariantType.Null`|  \\n|Enumeration|Underlying data type (`SByte`, `Byte`, `Short`, `UShort`, `Integer`, `UInteger`, `Long`, or `ULong`)|  \\n|Array|Bitwise OR of array element type and `VariantType.Array`|  \\n|Array of arrays|Bitwise OR of `VariantType.Object` and `VariantType.Array`|  \\n|Structure (<xref:System.ValueType?displayProperty=fullName>)|`VariantType.UserDefinedType`|  \\n|<xref:System.Exception>|`VariantType.Error`|  \\n|Unknown|`VariantType.Object`|\"\n  example:\n  - \"The following example uses the `VarType` function to return data type classification information about several variables.  \\n  \\n [!code-vb[VbVbalrFunctions#55](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#55)]\"\n  syntax:\n    content: public static Microsoft.VisualBasic.VariantType VarType (object VarName);\n    parameters:\n    - id: VarName\n      type: System.Object\n      description: Required. `Object` variable. If `Option Strict` is `Off`, you can pass a variable of any data type except a structure.\n    return:\n      type: Microsoft.VisualBasic.VariantType\n      description: Returns an `Integer` value containing the data type classification of a variable.\n  overload: Microsoft.VisualBasic.Information.VarType*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/Information.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.Information.VbTypeName(System.String)\n  commentId: M:Microsoft.VisualBasic.Information.VbTypeName(System.String)\n  id: VbTypeName(System.String)\n  parent: Microsoft.VisualBasic.Information\n  langs:\n  - csharp\n  name: VbTypeName(String)\n  nameWithType: Information.VbTypeName(String)\n  fullName: Information.VbTypeName(String)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns a `String` value containing the Visual Basic data type name of a variable.\n  remarks: \"`VbTypeName` returns the Visual Basic type name corresponding to the common language runtime type name. For example, if `UrtName` contains \\\"Int32\\\" or \\\"System.Int32\\\", `VbTypeName` returns \\\"Integer\\\". If `VbTypeName` does not recognize the value of `UrtName`, it returns `Nothing` (not the string \\\"Nothing\\\").  \\n  \\n The type name in `UrtName` can be obtained from various sources, for example from the <xref:System.Reflection.MemberInfo.Name%2A> property in the <xref:System.Reflection.MemberInfo> array of the <xref:System.Type> class.\"\n  example:\n  - \"The following example uses the `VbTypeName` function to return data type names for several variables.  \\n  \\n [!code-vb[VbVbalrFunctions#56](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#56)]\"\n  syntax:\n    content: public static string VbTypeName (string UrtName);\n    parameters:\n    - id: UrtName\n      type: System.String\n      description: Required. `String` variable containing a type name used by the common language runtime.\n    return:\n      type: System.String\n      description: Returns a `String` value containing the Visual Basic data type name of a variable.\n  overload: Microsoft.VisualBasic.Information.VbTypeName*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/Information.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.RankException\n  parent: System\n  isExternal: false\n  name: RankException\n  nameWithType: RankException\n  fullName: System.RankException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: Microsoft.VisualBasic.Information.Erl\n  parent: Microsoft.VisualBasic.Information\n  isExternal: false\n  name: Erl()\n  nameWithType: Information.Erl()\n  fullName: Information.Erl()\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: Microsoft.VisualBasic.Information.Err\n  parent: Microsoft.VisualBasic.Information\n  isExternal: false\n  name: Err()\n  nameWithType: Information.Err()\n  fullName: Information.Err()\n- uid: Microsoft.VisualBasic.ErrObject\n  parent: Microsoft.VisualBasic\n  isExternal: false\n  name: ErrObject\n  nameWithType: ErrObject\n  fullName: Microsoft.VisualBasic.ErrObject\n- uid: Microsoft.VisualBasic.Information.IsArray(System.Object)\n  parent: Microsoft.VisualBasic.Information\n  isExternal: false\n  name: IsArray(Object)\n  nameWithType: Information.IsArray(Object)\n  fullName: Information.IsArray(Object)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: Microsoft.VisualBasic.Information.IsDate(System.Object)\n  parent: Microsoft.VisualBasic.Information\n  isExternal: false\n  name: IsDate(Object)\n  nameWithType: Information.IsDate(Object)\n  fullName: Information.IsDate(Object)\n- uid: Microsoft.VisualBasic.Information.IsDBNull(System.Object)\n  parent: Microsoft.VisualBasic.Information\n  isExternal: false\n  name: IsDBNull(Object)\n  nameWithType: Information.IsDBNull(Object)\n  fullName: Information.IsDBNull(Object)\n- uid: Microsoft.VisualBasic.Information.IsError(System.Object)\n  parent: Microsoft.VisualBasic.Information\n  isExternal: false\n  name: IsError(Object)\n  nameWithType: Information.IsError(Object)\n  fullName: Information.IsError(Object)\n- uid: Microsoft.VisualBasic.Information.IsNothing(System.Object)\n  parent: Microsoft.VisualBasic.Information\n  isExternal: false\n  name: IsNothing(Object)\n  nameWithType: Information.IsNothing(Object)\n  fullName: Information.IsNothing(Object)\n- uid: Microsoft.VisualBasic.Information.IsNumeric(System.Object)\n  parent: Microsoft.VisualBasic.Information\n  isExternal: false\n  name: IsNumeric(Object)\n  nameWithType: Information.IsNumeric(Object)\n  fullName: Information.IsNumeric(Object)\n- uid: Microsoft.VisualBasic.Information.IsReference(System.Object)\n  parent: Microsoft.VisualBasic.Information\n  isExternal: false\n  name: IsReference(Object)\n  nameWithType: Information.IsReference(Object)\n  fullName: Information.IsReference(Object)\n- uid: Microsoft.VisualBasic.Information.LBound(System.Array,System.Int32)\n  parent: Microsoft.VisualBasic.Information\n  isExternal: false\n  name: LBound(Array, Int32)\n  nameWithType: Information.LBound(Array, Int32)\n  fullName: Information.LBound(Array, Int32)\n- uid: System.Array\n  parent: System\n  isExternal: false\n  name: Array\n  nameWithType: Array\n  fullName: System.Array\n- uid: Microsoft.VisualBasic.Information.QBColor(System.Int32)\n  parent: Microsoft.VisualBasic.Information\n  isExternal: false\n  name: QBColor(Int32)\n  nameWithType: Information.QBColor(Int32)\n  fullName: Information.QBColor(Int32)\n- uid: Microsoft.VisualBasic.Information.RGB(System.Int32,System.Int32,System.Int32)\n  parent: Microsoft.VisualBasic.Information\n  isExternal: false\n  name: RGB(Int32, Int32, Int32)\n  nameWithType: Information.RGB(Int32, Int32, Int32)\n  fullName: Information.RGB(Int32, Int32, Int32)\n- uid: Microsoft.VisualBasic.Information.SystemTypeName(System.String)\n  parent: Microsoft.VisualBasic.Information\n  isExternal: false\n  name: SystemTypeName(String)\n  nameWithType: Information.SystemTypeName(String)\n  fullName: Information.SystemTypeName(String)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: Microsoft.VisualBasic.Information.TypeName(System.Object)\n  parent: Microsoft.VisualBasic.Information\n  isExternal: false\n  name: TypeName(Object)\n  nameWithType: Information.TypeName(Object)\n  fullName: Information.TypeName(Object)\n- uid: Microsoft.VisualBasic.Information.UBound(System.Array,System.Int32)\n  parent: Microsoft.VisualBasic.Information\n  isExternal: false\n  name: UBound(Array, Int32)\n  nameWithType: Information.UBound(Array, Int32)\n  fullName: Information.UBound(Array, Int32)\n- uid: Microsoft.VisualBasic.Information.VarType(System.Object)\n  parent: Microsoft.VisualBasic.Information\n  isExternal: false\n  name: VarType(Object)\n  nameWithType: Information.VarType(Object)\n  fullName: Information.VarType(Object)\n- uid: Microsoft.VisualBasic.VariantType\n  parent: Microsoft.VisualBasic\n  isExternal: false\n  name: VariantType\n  nameWithType: VariantType\n  fullName: Microsoft.VisualBasic.VariantType\n- uid: Microsoft.VisualBasic.Information.VbTypeName(System.String)\n  parent: Microsoft.VisualBasic.Information\n  isExternal: false\n  name: VbTypeName(String)\n  nameWithType: Information.VbTypeName(String)\n  fullName: Information.VbTypeName(String)\n- uid: Microsoft.VisualBasic.Information.Erl*\n  parent: Microsoft.VisualBasic.Information\n  isExternal: false\n  name: Erl\n  nameWithType: Information.Erl\n  fullName: Information.Erl\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/Information.xml\n- uid: Microsoft.VisualBasic.Information.Err*\n  parent: Microsoft.VisualBasic.Information\n  isExternal: false\n  name: Err\n  nameWithType: Information.Err\n  fullName: Information.Err\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/Information.xml\n- uid: Microsoft.VisualBasic.Information.IsArray*\n  parent: Microsoft.VisualBasic.Information\n  isExternal: false\n  name: IsArray\n  nameWithType: Information.IsArray\n  fullName: Information.IsArray\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/Information.xml\n- uid: Microsoft.VisualBasic.Information.IsDate*\n  parent: Microsoft.VisualBasic.Information\n  isExternal: false\n  name: IsDate\n  nameWithType: Information.IsDate\n  fullName: Information.IsDate\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/Information.xml\n- uid: Microsoft.VisualBasic.Information.IsDBNull*\n  parent: Microsoft.VisualBasic.Information\n  isExternal: false\n  name: IsDBNull\n  nameWithType: Information.IsDBNull\n  fullName: Information.IsDBNull\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/Information.xml\n- uid: Microsoft.VisualBasic.Information.IsError*\n  parent: Microsoft.VisualBasic.Information\n  isExternal: false\n  name: IsError\n  nameWithType: Information.IsError\n  fullName: Information.IsError\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/Information.xml\n- uid: Microsoft.VisualBasic.Information.IsNothing*\n  parent: Microsoft.VisualBasic.Information\n  isExternal: false\n  name: IsNothing\n  nameWithType: Information.IsNothing\n  fullName: Information.IsNothing\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/Information.xml\n- uid: Microsoft.VisualBasic.Information.IsNumeric*\n  parent: Microsoft.VisualBasic.Information\n  isExternal: false\n  name: IsNumeric\n  nameWithType: Information.IsNumeric\n  fullName: Information.IsNumeric\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/Information.xml\n- uid: Microsoft.VisualBasic.Information.IsReference*\n  parent: Microsoft.VisualBasic.Information\n  isExternal: false\n  name: IsReference\n  nameWithType: Information.IsReference\n  fullName: Information.IsReference\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/Information.xml\n- uid: Microsoft.VisualBasic.Information.LBound*\n  parent: Microsoft.VisualBasic.Information\n  isExternal: false\n  name: LBound\n  nameWithType: Information.LBound\n  fullName: Information.LBound\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/Information.xml\n- uid: Microsoft.VisualBasic.Information.QBColor*\n  parent: Microsoft.VisualBasic.Information\n  isExternal: false\n  name: QBColor\n  nameWithType: Information.QBColor\n  fullName: Information.QBColor\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/Information.xml\n- uid: Microsoft.VisualBasic.Information.RGB*\n  parent: Microsoft.VisualBasic.Information\n  isExternal: false\n  name: RGB\n  nameWithType: Information.RGB\n  fullName: Information.RGB\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/Information.xml\n- uid: Microsoft.VisualBasic.Information.SystemTypeName*\n  parent: Microsoft.VisualBasic.Information\n  isExternal: false\n  name: SystemTypeName\n  nameWithType: Information.SystemTypeName\n  fullName: Information.SystemTypeName\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/Information.xml\n- uid: Microsoft.VisualBasic.Information.TypeName*\n  parent: Microsoft.VisualBasic.Information\n  isExternal: false\n  name: TypeName\n  nameWithType: Information.TypeName\n  fullName: Information.TypeName\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/Information.xml\n- uid: Microsoft.VisualBasic.Information.UBound*\n  parent: Microsoft.VisualBasic.Information\n  isExternal: false\n  name: UBound\n  nameWithType: Information.UBound\n  fullName: Information.UBound\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/Information.xml\n- uid: Microsoft.VisualBasic.Information.VarType*\n  parent: Microsoft.VisualBasic.Information\n  isExternal: false\n  name: VarType\n  nameWithType: Information.VarType\n  fullName: Information.VarType\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/Information.xml\n- uid: Microsoft.VisualBasic.Information.VbTypeName*\n  parent: Microsoft.VisualBasic.Information\n  isExternal: false\n  name: VbTypeName\n  nameWithType: Information.VbTypeName\n  fullName: Information.VbTypeName\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/Information.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n"}