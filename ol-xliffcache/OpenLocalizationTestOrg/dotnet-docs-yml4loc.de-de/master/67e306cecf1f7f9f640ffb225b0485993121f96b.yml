### YamlMime:ManagedReference
items:
- uid: System.Xml.Linq.XElement
  commentId: T:System.Xml.Linq.XElement
  id: XElement
  children:
  - System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XElement)
  - System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XName)
  - System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XStreamingElement)
  - System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XName,System.Object)
  - System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XName,System.Object[])
  - System.Xml.Linq.XElement.AncestorsAndSelf
  - System.Xml.Linq.XElement.AncestorsAndSelf(System.Xml.Linq.XName)
  - System.Xml.Linq.XElement.Attribute(System.Xml.Linq.XName)
  - System.Xml.Linq.XElement.Attributes
  - System.Xml.Linq.XElement.Attributes(System.Xml.Linq.XName)
  - System.Xml.Linq.XElement.DescendantNodesAndSelf
  - System.Xml.Linq.XElement.DescendantsAndSelf(System.Xml.Linq.XName)
  - System.Xml.Linq.XElement.DescendantsAndSelf
  - System.Xml.Linq.XElement.EmptySequence
  - System.Xml.Linq.XElement.FirstAttribute
  - System.Xml.Linq.XElement.GetDefaultNamespace
  - System.Xml.Linq.XElement.GetNamespaceOfPrefix(System.String)
  - System.Xml.Linq.XElement.GetPrefixOfNamespace(System.Xml.Linq.XNamespace)
  - System.Xml.Linq.XElement.HasAttributes
  - System.Xml.Linq.XElement.HasElements
  - System.Xml.Linq.XElement.IsEmpty
  - System.Xml.Linq.XElement.LastAttribute
  - System.Xml.Linq.XElement.Load(System.IO.TextReader,System.Xml.Linq.LoadOptions)
  - System.Xml.Linq.XElement.Load(System.Xml.XmlReader,System.Xml.Linq.LoadOptions)
  - System.Xml.Linq.XElement.Load(System.String,System.Xml.Linq.LoadOptions)
  - System.Xml.Linq.XElement.Load(System.IO.Stream,System.Xml.Linq.LoadOptions)
  - System.Xml.Linq.XElement.Load(System.IO.TextReader)
  - System.Xml.Linq.XElement.Load(System.String)
  - System.Xml.Linq.XElement.Load(System.IO.Stream)
  - System.Xml.Linq.XElement.Load(System.Xml.XmlReader)
  - System.Xml.Linq.XElement.LoadAsync(System.IO.Stream,System.Xml.Linq.LoadOptions,System.Threading.CancellationToken)
  - System.Xml.Linq.XElement.LoadAsync(System.IO.TextReader,System.Xml.Linq.LoadOptions,System.Threading.CancellationToken)
  - System.Xml.Linq.XElement.LoadAsync(System.Xml.XmlReader,System.Xml.Linq.LoadOptions,System.Threading.CancellationToken)
  - System.Xml.Linq.XElement.Name
  - System.Xml.Linq.XElement.NodeType
  - System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.Nullable{System.Int64})
  - System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.Nullable{System.Single})
  - System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.Nullable{System.TimeSpan})
  - System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.Nullable{System.UInt32})
  - System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.Nullable{System.UInt64})
  - System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.UInt32)
  - System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.String)
  - System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.TimeSpan)
  - System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.UInt64)
  - System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.Nullable{System.Int32})
  - System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.Single)
  - System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.Nullable{System.Guid})
  - System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.Nullable{System.Boolean})
  - System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.Nullable{System.Decimal})
  - System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.Boolean)
  - System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.DateTime)
  - System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.DateTimeOffset)
  - System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.Double)
  - System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.Guid)
  - System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.Decimal)
  - System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.Int64)
  - System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.Nullable{System.Double})
  - System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.Nullable{System.DateTime})
  - System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.Nullable{System.DateTimeOffset})
  - System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.Int32)
  - System.Xml.Linq.XElement.Parse(System.String)
  - System.Xml.Linq.XElement.Parse(System.String,System.Xml.Linq.LoadOptions)
  - System.Xml.Linq.XElement.RemoveAll
  - System.Xml.Linq.XElement.RemoveAttributes
  - System.Xml.Linq.XElement.ReplaceAll(System.Object)
  - System.Xml.Linq.XElement.ReplaceAll(System.Object[])
  - System.Xml.Linq.XElement.ReplaceAttributes(System.Object[])
  - System.Xml.Linq.XElement.ReplaceAttributes(System.Object)
  - System.Xml.Linq.XElement.Save(System.IO.Stream)
  - System.Xml.Linq.XElement.Save(System.IO.TextWriter)
  - System.Xml.Linq.XElement.Save(System.String)
  - System.Xml.Linq.XElement.Save(System.Xml.XmlWriter)
  - System.Xml.Linq.XElement.Save(System.IO.Stream,System.Xml.Linq.SaveOptions)
  - System.Xml.Linq.XElement.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)
  - System.Xml.Linq.XElement.Save(System.String,System.Xml.Linq.SaveOptions)
  - System.Xml.Linq.XElement.SaveAsync(System.IO.Stream,System.Xml.Linq.SaveOptions,System.Threading.CancellationToken)
  - System.Xml.Linq.XElement.SaveAsync(System.Xml.XmlWriter,System.Threading.CancellationToken)
  - System.Xml.Linq.XElement.SaveAsync(System.IO.TextWriter,System.Xml.Linq.SaveOptions,System.Threading.CancellationToken)
  - System.Xml.Linq.XElement.SetAttributeValue(System.Xml.Linq.XName,System.Object)
  - System.Xml.Linq.XElement.SetElementValue(System.Xml.Linq.XName,System.Object)
  - System.Xml.Linq.XElement.SetValue(System.Object)
  - System.Xml.Linq.XElement.Value
  - System.Xml.Linq.XElement.WriteTo(System.Xml.XmlWriter)
  - System.Xml.Linq.XElement.WriteToAsync(System.Xml.XmlWriter,System.Threading.CancellationToken)
  - System.Xml.Linq.XElement.System#Xml#Serialization#IXmlSerializable#GetSchema
  - System.Xml.Linq.XElement.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)
  - System.Xml.Linq.XElement.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)
  langs:
  - csharp
  name: XElement
  nameWithType: XElement
  fullName: System.Xml.Linq.XElement
  type: Class
  assemblies:
  - System.Xml.XDocument
  - System.Xml.Linq
  - netstandard
  namespace: System.Xml.Linq
  summary: Represents an XML element.  See [XElement Class Overview](http://msdn.microsoft.com/library/d35180fe-7016-4895-9bfc-ba1e3f7875ec) and the Remarks section on this page for usage information and examples.
  remarks: "> [!NOTE]\n>  To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#System.Xml.Linq/XLinq.cs#3367036406d1344a). You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/).  \n  \n This class represents an XML element, the fundamental XML construct.  See [XElement Class Overview](http://msdn.microsoft.com/library/d35180fe-7016-4895-9bfc-ba1e3f7875ec) for other usage information.  \n  \n An element has an <xref:System.Xml.Linq.XName>, optionally one or more attributes, and can optionally contain content (for more information, see <xref:System.Xml.Linq.XContainer.Nodes%2A>).  \n  \n An <xref:System.Xml.Linq.XElement> can contain the following types of content:  \n  \n-   <xref:System.Xml.Linq.XElement>  \n  \n-   <xref:System.Xml.Linq.XComment>  \n  \n-   <xref:System.Xml.Linq.XProcessingInstruction>  \n  \n-   <xref:System.Xml.Linq.XText>  \n  \n For details about the valid content of an <xref:System.Xml.Linq.XElement>, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).  \n  \n <xref:System.Xml.Linq.XElement> derives from <xref:System.Xml.Linq.XContainer>, which derives from <xref:System.Xml.Linq.XNode>.  \n  \n Some <xref:System.Xml.Linq.XElement> methods can be used from XAML. For more information, see [LINQ to XML Dynamic Properties](http://msdn.microsoft.com/library/0455f47c-4a68-4f2e-a3f8-dd1d85b99012)."
  example:
  - "The following example creates an XML tree. The content of the new element comes from a LINQ query.  \n  \n```csharp  \n  \n                XElement xmlTree1 = new XElement(\"Root\",  \n    new XElement(\"Child1\", 1),  \n    new XElement(\"Child2\", 2),  \n    new XElement(\"Child3\", 3),  \n    new XElement(\"Child4\", 4),  \n    new XElement(\"Child5\", 5),  \n    new XElement(\"Child6\", 6)  \n);  \n  \nXElement xmlTree2 = new XElement(\"Root\",  \n    from el in xmlTree1.Elements()  \n    where((int)el >= 3 && (int)el <= 5)  \n    select el  \n);  \nConsole.WriteLine(xmlTree2);  \n```  \n  \n```vb  \n  \n                Dim xmlTree1 As XElement = _  \n        <Root>  \n            <Child1>1</Child1>  \n            <Child2>2</Child2>  \n            <Child3>3</Child3>  \n            <Child4>4</Child4>  \n            <Child5>5</Child5>  \n            <Child6>6</Child6>  \n        </Root>  \n  \nDim xmlTree2 As XElement = _   \n    <Root>  \n        <%= From el In xmlTree1.Elements() _  \n            Where el.Value >= 3 And el.Value <= 5 _  \n            Select el %>  \n    </Root>  \n  \nConsole.WriteLine(xmlTree2)  \n  \n```  \n  \n This example produces the following output:  \n  \n```xml  \n  \n                <Root>  \n  <Child3>3</Child3>  \n  <Child4>4</Child4>  \n  <Child5>5</Child5>  \n</Root>  \n```  \n  \n The following is the same example, but in this case the XML is in a namespace. For more information, see [Working with XML Namespaces](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).  \n  \n```csharp  \n  \n                XNamespace aw = \"http://www.adventure-works.com\";  \nXElement xmlTree1 = new XElement(aw + \"Root\",  \n    new XElement(aw + \"Child1\", 1),  \n    new XElement(aw + \"Child2\", 2),  \n    new XElement(aw + \"Child3\", 3),  \n    new XElement(aw + \"Child4\", 4),  \n    new XElement(aw + \"Child5\", 5),  \n    new XElement(aw + \"Child6\", 6)  \n);  \n  \nXElement xmlTree2 = new XElement(aw + \"Root\",  \n    from el in xmlTree1.Elements()  \n    where((int)el >= 3 && (int)el <= 5)  \n    select el  \n);  \nConsole.WriteLine(xmlTree2);  \n```  \n  \n```vb  \n  \n                Imports <xmlns=\"http://www.adventure-works.com\">  \n  \nModule Module1  \n    Sub Main()  \n        Dim xmlTree1 As XElement = _  \n            <Root>  \n                <Child1>1</Child1>  \n                <Child2>2</Child2>  \n                <Child3>3</Child3>  \n                <Child4>4</Child4>  \n                <Child5>5</Child5>  \n                <Child6>6</Child6>  \n            </Root>  \n  \n        Dim xmlTree2 As XElement = _   \n            <Root>  \n                <%= From el In xmlTree1.Elements() _  \n                    Where el.Value >= 3 And el.Value <= 5 _  \n                    Select el %>  \n            </Root>  \n  \n        Console.WriteLine(xmlTree2)  \n    End SUb  \nEnd Module  \n```  \n  \n This example produces the following output:  \n  \n```xml  \n  \n                <Root xmlns=\"http://www.adventure-works.com\">  \n  <Child3>3</Child3>  \n  <Child4>4</Child4>  \n  <Child5>5</Child5>  \n</Root>  \n```"
  syntax:
    content: 'public class XElement : System.Xml.Linq.XContainer, System.Xml.Serialization.IXmlSerializable'
  inheritance:
  - System.Object
  - System.Xml.Linq.XObject
  - System.Xml.Linq.XNode
  - System.Xml.Linq.XContainer
  implements:
  - System.Xml.Serialization.IXmlSerializable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Xml.Linq.XContainer.Add(System.Object)
  - System.Xml.Linq.XContainer.Add(System.Object[])
  - System.Xml.Linq.XContainer.AddFirst(System.Object)
  - System.Xml.Linq.XContainer.AddFirst(System.Object[])
  - System.Xml.Linq.XContainer.CreateWriter
  - System.Xml.Linq.XContainer.DescendantNodes
  - System.Xml.Linq.XContainer.Descendants
  - System.Xml.Linq.XContainer.Descendants(System.Xml.Linq.XName)
  - System.Xml.Linq.XContainer.Element(System.Xml.Linq.XName)
  - System.Xml.Linq.XContainer.Elements
  - System.Xml.Linq.XContainer.Elements(System.Xml.Linq.XName)
  - System.Xml.Linq.XContainer.FirstNode
  - System.Xml.Linq.XContainer.LastNode
  - System.Xml.Linq.XContainer.Nodes
  - System.Xml.Linq.XContainer.RemoveNodes
  - System.Xml.Linq.XContainer.ReplaceNodes(System.Object)
  - System.Xml.Linq.XContainer.ReplaceNodes(System.Object[])
  - System.Xml.Linq.XNode.AddAfterSelf(System.Object)
  - System.Xml.Linq.XNode.AddAfterSelf(System.Object[])
  - System.Xml.Linq.XNode.AddBeforeSelf(System.Object)
  - System.Xml.Linq.XNode.AddBeforeSelf(System.Object[])
  - System.Xml.Linq.XNode.Ancestors
  - System.Xml.Linq.XNode.Ancestors(System.Xml.Linq.XName)
  - System.Xml.Linq.XNode.CompareDocumentOrder(System.Xml.Linq.XNode,System.Xml.Linq.XNode)
  - System.Xml.Linq.XNode.CreateReader
  - System.Xml.Linq.XNode.CreateReader(System.Xml.Linq.ReaderOptions)
  - System.Xml.Linq.XNode.DeepEquals(System.Xml.Linq.XNode,System.Xml.Linq.XNode)
  - System.Xml.Linq.XNode.DocumentOrderComparer
  - System.Xml.Linq.XNode.ElementsAfterSelf
  - System.Xml.Linq.XNode.ElementsAfterSelf(System.Xml.Linq.XName)
  - System.Xml.Linq.XNode.ElementsBeforeSelf
  - System.Xml.Linq.XNode.ElementsBeforeSelf(System.Xml.Linq.XName)
  - System.Xml.Linq.XNode.EqualityComparer
  - System.Xml.Linq.XNode.IsAfter(System.Xml.Linq.XNode)
  - System.Xml.Linq.XNode.IsBefore(System.Xml.Linq.XNode)
  - System.Xml.Linq.XNode.NextNode
  - System.Xml.Linq.XNode.NodesAfterSelf
  - System.Xml.Linq.XNode.NodesBeforeSelf
  - System.Xml.Linq.XNode.PreviousNode
  - System.Xml.Linq.XNode.ReadFrom(System.Xml.XmlReader)
  - System.Xml.Linq.XNode.ReadFromAsync(System.Xml.XmlReader,System.Threading.CancellationToken)
  - System.Xml.Linq.XNode.Remove
  - System.Xml.Linq.XNode.ReplaceWith(System.Object)
  - System.Xml.Linq.XNode.ReplaceWith(System.Object[])
  - System.Xml.Linq.XNode.ToString
  - System.Xml.Linq.XNode.ToString(System.Xml.Linq.SaveOptions)
  - System.Xml.Linq.XObject.AddAnnotation(System.Object)
  - System.Xml.Linq.XObject.Annotation(System.Type)
  - System.Xml.Linq.XObject.Annotation``1
  - System.Xml.Linq.XObject.Annotations(System.Type)
  - System.Xml.Linq.XObject.Annotations``1
  - System.Xml.Linq.XObject.BaseUri
  - System.Xml.Linq.XObject.Changed
  - System.Xml.Linq.XObject.Changing
  - System.Xml.Linq.XObject.Document
  - System.Xml.Linq.XObject.Parent
  - System.Xml.Linq.XObject.RemoveAnnotations(System.Type)
  - System.Xml.Linq.XObject.RemoveAnnotations``1
  - System.Xml.Linq.XObject.System#Xml#IXmlLineInfo#HasLineInfo
  - System.Xml.Linq.XObject.System#Xml#IXmlLineInfo#LineNumber
  - System.Xml.Linq.XObject.System#Xml#IXmlLineInfo#LinePosition
  extensionMethods:
  - System.Xml.Schema.Extensions.GetSchemaInfo(System.Xml.Linq.XElement)
  - System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XElement,System.Xml.Schema.XmlSchemaObject,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler)
  - System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XElement,System.Xml.Schema.XmlSchemaObject,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler,System.Boolean)
  - System.Xml.XPath.Extensions.CreateNavigator(System.Xml.Linq.XNode)
  - System.Xml.XPath.Extensions.CreateNavigator(System.Xml.Linq.XNode,System.Xml.XmlNameTable)
  - System.Xml.XPath.Extensions.XPathEvaluate(System.Xml.Linq.XNode,System.String)
  - System.Xml.XPath.Extensions.XPathEvaluate(System.Xml.Linq.XNode,System.String,System.Xml.IXmlNamespaceResolver)
  - System.Xml.XPath.Extensions.XPathSelectElement(System.Xml.Linq.XNode,System.String)
  - System.Xml.XPath.Extensions.XPathSelectElement(System.Xml.Linq.XNode,System.String,System.Xml.IXmlNamespaceResolver)
  - System.Xml.XPath.Extensions.XPathSelectElements(System.Xml.Linq.XNode,System.String)
  - System.Xml.XPath.Extensions.XPathSelectElements(System.Xml.Linq.XNode,System.String,System.Xml.IXmlNamespaceResolver)
  - System.Xml.XPath.XDocumentExtensions.ToXPathNavigable(System.Xml.Linq.XNode)
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XElement)
  commentId: M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XElement)
  id: '#ctor(System.Xml.Linq.XElement)'
  parent: System.Xml.Linq.XElement
  langs:
  - csharp
  name: XElement(XElement)
  nameWithType: XElement.XElement(XElement)
  fullName: XElement.XElement(XElement)
  type: Constructor
  assemblies:
  - System.Xml.XDocument
  - System.Xml.Linq
  - netstandard
  namespace: System.Xml.Linq
  summary: Initializes a new instance of the <xref href="System.Xml.Linq.XElement"></xref> class from another <xref href="System.Xml.Linq.XElement"></xref> object.
  remarks: This constructor makes a deep copy of an element.
  example:
  - "The following example creates an XML tree, creates a clone of the tree, and then calls <xref:System.Xml.Linq.XNode.DeepEquals%2A>, which tests whether the two XML trees are equal.  \n  \n```csharp  \n  \n                XElement xmlTree = new XElement(\"Root\",  \n    new XAttribute(\"Att1\", 1),  \n    new XElement(\"Child1\", 1),  \n    new XElement(\"Child2\", 2)  \n);  \n  \n// Create a clone of the tree.  \nXElement treeClone = new XElement(xmlTree);  \n  \nConsole.WriteLine(\"xmlTree = treeClone: {0}\", XNode.DeepEquals(xmlTree, treeClone));  \n  \n// Do some work with xmlTree, perhaps pass it to other methods.  \nxmlTree.Add(new XElement(\"Child3\", 3));  \n  \nConsole.WriteLine(\"xmlTree = treeClone: {0}\", XNode.DeepEquals(xmlTree, treeClone));  \n```  \n  \n```vb  \n  \n                Dim xmlTree As XElement = _  \n        <Root Att1=\"1\">  \n            <Child1>1</Child1>  \n            <Child2>2</Child2>  \n        </Root>  \n  \n' Create a clone of the tree.  \nDim treeClone As XElement = New XElement(xmlTree)  \n  \nConsole.WriteLine(\"xmlTree = treeClone: {0}\", XNode.DeepEquals(xmlTree, treeClone))  \n  \n' Do some work with xmlTree, perhaps pass it to other methods.  \nxmlTree.Add(New XElement(\"Child3\", 3))  \n  \nConsole.WriteLine(\"xmlTree = treeClone: {0}\", XNode.DeepEquals(xmlTree, treeClone))  \n  \n```  \n  \n This example produces the following output:  \n  \n```  \n  \n                xmlTree = treeClone: True  \nxmlTree = treeClone: False  \n```"
  syntax:
    content: public XElement (System.Xml.Linq.XElement other);
    parameters:
    - id: other
      type: System.Xml.Linq.XElement
      description: An <xref href="System.Xml.Linq.XElement"></xref> object to copy from.
  overload: System.Xml.Linq.XElement.#ctor*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XName)
  commentId: M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XName)
  id: '#ctor(System.Xml.Linq.XName)'
  parent: System.Xml.Linq.XElement
  langs:
  - csharp
  name: XElement(XName)
  nameWithType: XElement.XElement(XName)
  fullName: XElement.XElement(XName)
  type: Constructor
  assemblies:
  - System.Xml.XDocument
  - System.Xml.Linq
  - netstandard
  namespace: System.Xml.Linq
  summary: Initializes a new instance of the <xref href="System.Xml.Linq.XElement"></xref> class with the specified name.
  remarks: "This constructor creates an element with no content and no attributes.  \n  \n There is an implicit conversion from string to <xref:System.Xml.Linq.XName>. Typical use of this constructor is to specify a string as the parameter instead of creating a new <xref:System.Xml.Linq.XName>. When creating an element in a namespace, typical use is to use the addition operator overload with an <xref:System.Xml.Linq.XNamespace> and a string to create an <xref:System.Xml.Linq.XName>. For more information, see [Working with XML Namespaces](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430)."
  example:
  - "The following example creates an element with no content.  \n  \n```csharp  \n  \n                XElement el = new XElement(\"Root\");  \nConsole.WriteLine(el);  \n```  \n  \n```vb  \n  \n                Dim el As XElement = <Root/>  \nConsole.WriteLine(el)  \n```  \n  \n This example produces the following output:  \n  \n```xml  \n  \n<Root />  \n```  \n  \n The following example creates an element in a namespace with no content. For more information, see [Working with XML Namespaces](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).  \n  \n```  \n  \n                XNamespace aw = \"http://www.adventure-works.com\";  \nXElement root = new XElement(aw + \"Root\");  \nConsole.WriteLine(root);  \n```  \n  \n```vb  \n  \n                Imports <xmlns=\"http://www.adventure-works.com\">  \n  \nModule Module1  \n    Sub Main()  \n        Dim root = <Root/>  \n        Console.WriteLine(root)  \n    End Sub  \nEnd Module  \n```  \n  \n This example produces the following output:  \n  \n```xml  \n  \n<Root xmlns=\"http://www.adventure-works.com\" />  \n```"
  syntax:
    content: public XElement (System.Xml.Linq.XName name);
    parameters:
    - id: name
      type: System.Xml.Linq.XName
      description: An <xref href="System.Xml.Linq.XName"></xref> that contains the name of the element.
  overload: System.Xml.Linq.XElement.#ctor*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XStreamingElement)
  commentId: M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XStreamingElement)
  id: '#ctor(System.Xml.Linq.XStreamingElement)'
  parent: System.Xml.Linq.XElement
  langs:
  - csharp
  name: XElement(XStreamingElement)
  nameWithType: XElement.XElement(XStreamingElement)
  fullName: XElement.XElement(XStreamingElement)
  type: Constructor
  assemblies:
  - System.Xml.XDocument
  - System.Xml.Linq
  - netstandard
  namespace: System.Xml.Linq
  summary: Initializes a new instance of the <xref href="System.Xml.Linq.XElement"></xref> class from an <xref href="System.Xml.Linq.XStreamingElement"></xref> object.
  remarks: This constructor iterates through the contents of the specified <xref:System.Xml.Linq.XStreamingElement>, and creates an element with its contents.
  example:
  - "The following example creates a source XML tree, and then creates an <xref:System.Xml.Linq.XStreamingElement> from a query on the source XML tree. It then serializes the <xref:System.Xml.Linq.XStreamingElement> to the console, adds a new element to the source XML tree, and then serializes the <xref:System.Xml.Linq.XStreamingElement> again. You can see that element newly added to the source XML tree is not included in the first serialization, but is included in the second.  \n  \n```csharp  \n  \n                XElement src = new XElement(\"Root\",  \n                   new XElement(\"Child1\", 1),  \n                   new XElement(\"Child2\", 2),  \n                   new XElement(\"Child3\", 3)  \n               );  \nXStreamingElement xse = new XStreamingElement(\"NewRoot\",  \n                            from el in src.Elements()  \n                            where (int)el >= 2  \n                            select el  \n                        );  \nConsole.WriteLine(xse);  \nsrc.Add(new XElement(\"Child4\", 4));  \nConsole.WriteLine(\"----\");  \nConsole.WriteLine(xse);  \n```  \n  \n```vb  \n  \n                Dim src As XElement = _   \n        <Root>  \n            <Child1>1</Child1>  \n            <Child2>2</Child2>  \n            <Child3>3</Child3>  \n        </Root>  \nDim xse As XStreamingElement = New XStreamingElement(\"NewRoot\", _  \n        From el In src.Elements() _  \n        Where (CInt(el) >= 2) _  \n        Select el _  \n)  \nConsole.WriteLine(xse)  \nsrc.Add(New XElement(\"Child4\", 4))  \nConsole.WriteLine(\"----\")  \nConsole.WriteLine(xse)  \n```  \n  \n This example produces the following output:  \n  \n```  \n  \n                <NewRoot>  \n  <Child2>2</Child2>  \n  <Child3>3</Child3>  \n</NewRoot>  \n----  \n<NewRoot>  \n  <Child2>2</Child2>  \n  <Child3>3</Child3>  \n  <Child4>4</Child4>  \n</NewRoot>  \n```"
  syntax:
    content: public XElement (System.Xml.Linq.XStreamingElement other);
    parameters:
    - id: other
      type: System.Xml.Linq.XStreamingElement
      description: An <xref href="System.Xml.Linq.XStreamingElement"></xref> that contains unevaluated queries that will be iterated for the contents of this <xref href="System.Xml.Linq.XElement"></xref>.
  overload: System.Xml.Linq.XElement.#ctor*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XName,System.Object)
  commentId: M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XName,System.Object)
  id: '#ctor(System.Xml.Linq.XName,System.Object)'
  parent: System.Xml.Linq.XElement
  langs:
  - csharp
  name: XElement(XName, Object)
  nameWithType: XElement.XElement(XName, Object)
  fullName: XElement.XElement(XName, Object)
  type: Constructor
  assemblies:
  - System.Xml.XDocument
  - System.Xml.Linq
  - netstandard
  namespace: System.Xml.Linq
  summary: Initializes a new instance of the <xref href="System.Xml.Linq.XElement"></xref> class with the specified name and content.
  remarks: "This constructor creates an element with the specified content and attributes.  \n  \n There is an implicit conversion from string to <xref:System.Xml.Linq.XName>. Typical use of this constructor is to specify a string as the parameter instead of creating a new <xref:System.Xml.Linq.XName>.  \n  \n When creating an element in a namespace, typical use is to use the addition operator overload with an <xref:System.Xml.Linq.XNamespace> and a string to create an <xref:System.Xml.Linq.XName>. For more information, see [Working with XML Namespaces](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).  \n  \n For details about the valid content that can be passed to this constructor, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)."
  example:
  - "The following example creates an XML tree. The content of the new element comes from a LINQ query.  \n  \n```csharp  \n  \n                XElement xmlTree1 = new XElement(\"Root\",  \n    new XElement(\"Child1\", 1),  \n    new XElement(\"Child2\", 2),  \n    new XElement(\"Child3\", 3),  \n    new XElement(\"Child4\", 4),  \n    new XElement(\"Child5\", 5),  \n    new XElement(\"Child6\", 6)  \n);  \n  \nXElement xmlTree2 = new XElement(\"Root\",  \n    from el in xmlTree1.Elements()  \n    where((int)el >= 3 && (int)el <= 5)  \n    select el  \n);  \nConsole.WriteLine(xmlTree2);  \n```  \n  \n```vb  \n  \n                Dim xmlTree1 As XElement = _   \n        <Root>  \n            <Child1>1</Child1>  \n            <Child2>2</Child2>  \n            <Child3>3</Child3>  \n            <Child4>4</Child4>  \n            <Child5>5</Child5>  \n            <Child6>6</Child6>  \n        </Root>  \n  \nDim xmlTree2 As XElement = _  \n    <Root>  \n        <%= From el In xmlTree1.Elements() _  \n            Where el.Value >= 3 And el.Value <= 5 _  \n            Select el %>  \n    </Root>  \n  \nConsole.WriteLine(xmlTree2)  \n  \n```  \n  \n This example produces the following output:  \n  \n```xml  \n  \n                <Root>  \n  <Child3>3</Child3>  \n  <Child4>4</Child4>  \n  <Child5>5</Child5>  \n</Root>  \n```  \n  \n The following example creates an XML tree with a variety of types of content.  \n  \n```csharp  \n  \n                XElement root;  \n  \n// String content:  \nroot = new XElement(\"Root\", \"Some text\");  \nConsole.WriteLine(root);  \n  \n// XElement object content:  \nroot = new XElement(\"Root\",   \n    new XElement(\"NewChild\", \"n\")  \n);  \nConsole.WriteLine(root);  \n  \n// XAttribute object content:  \nroot = new XElement(\"Root\",   \n    new XAttribute(\"NewAttribute\", \"n\")  \n);  \nConsole.WriteLine(root);  \n  \n// Double content:  \ndouble dbl = 12.345;  \nroot = new XElement(\"Root\", dbl);  \nConsole.WriteLine(root);  \n  \n// DateTime content:  \nDateTime dt = new DateTime(2006, 10, 6, 12, 30, 00);  \nroot = new XElement(\"Root\", dt);  \nConsole.WriteLine(root);  \n  \n// String array content:  \n// Any collection other than a collection of XElement or XAttribute objects  \n// are converted to strings. The strings are concatenated and added.  \nstring[] stringArray = {  \n    \"abc\",  \n    \"def\",  \n    \"ghi\"  \n};  \nroot = new XElement(\"Root\", stringArray);  \nConsole.WriteLine(root);  \n  \n// XElement object array content:  \nXElement[] ellArray = {  \n    new XElement(\"NewChild1\", 1),  \n    new XElement(\"NewChild2\", 2),  \n    new XElement(\"NewChild3\", 3)  \n};  \nroot = new XElement(\"Root\", ellArray);  \nConsole.WriteLine(root);  \n  \n// XAttribute object array content:  \nXAttribute[] attArray = {  \n    new XAttribute(\"NewAtt1\", 1),  \n    new XAttribute(\"NewAtt2\", 2),  \n    new XAttribute(\"NewAtt3\", 3)  \n};  \nroot = new XElement(\"Root\", attArray);  \nConsole.WriteLine(root);  \n```  \n  \n```vb  \n  \n                Dim root As XElement  \n  \n' String content:  \nroot = <Root>Some text</Root>  \nConsole.WriteLine(root)  \n  \n' XElement object content:  \nroot = <Root>  \n           <NewChild>n</NewChild>  \n       </Root>  \nConsole.WriteLine(root)  \n  \n' XAttribute object content:  \nroot = <Root NewAttribute=\"n\"/>  \nConsole.WriteLine(root)  \n  \n' Double content:  \nDim dbl As Double = 12.345  \nroot = <Root><%= dbl %></Root>  \nConsole.WriteLine(root)  \n  \n' DateTime content:  \nDim dt As DateTime = New DateTime(2006, 10, 6, 12, 30, 0)  \nroot = <Root><%= dt %></Root>  \nConsole.WriteLine(root)  \n  \n' String array content:  \n' Any collection other than a collection of XElement or XAttribute objects  \n' are converted to strings. The strings are concatenated and added.  \n  \nDim stringArray As String() = { _  \n    \"abc\", _  \n    \"def\", _  \n    \"ghi\" _  \n}  \nroot = <Root><%= stringArray %></Root>  \nConsole.WriteLine(root)  \n  \n' XElement object array content:  \nDim ellArray As XElement() = { _  \n    <NewChild1>1</NewChild1>, _  \n    <NewChild2>2</NewChild2>, _  \n    <NewChild3>3</NewChild3> _  \n}  \n  \nroot = <Root><%= ellArray %></Root>  \nConsole.WriteLine(root)  \n  \n' XAttribute object array content  \nDim attArray As XAttribute() = { _  \n    New XAttribute(\"NewAtt1\", 1), _  \n    New XAttribute(\"NewAtt2\", 2), _  \n    New XAttribute(\"NewAtt3\", 3) _  \n}  \nroot = <Root><%= attArray %></Root>  \nConsole.WriteLine(root)  \n  \n```  \n  \n This example produces the following output:  \n  \n```  \n  \n                <Root>Some text</Root>  \n<Root>  \n  <NewChild>n</NewChild>  \n</Root>  \n<Root NewAttribute=\"n\" />  \n<Root>12.345</Root>  \n<Root>2006-10-06T12:30:00</Root>  \n<Root>abcdefghi</Root>  \n<Root>  \n  <NewChild1>1</NewChild1>  \n  <NewChild2>2</NewChild2>  \n  <NewChild3>3</NewChild3>  \n</Root>  \n<Root NewAtt1=\"1\" NewAtt2=\"2\" NewAtt3=\"3\" />  \n```  \n  \n The following example creates an XML tree in a namespace.  \n  \n```csharp  \n  \n                // Create an XML tree in a namespace.  \nXNamespace aw = \"http://www.adventure-works.com\";  \nXElement root = new XElement(aw + \"Root\",  \n    new XElement(aw + \"Child\", \"child content\")  \n);  \nConsole.WriteLine(root);  \n```  \n  \n```vb  \n  \n                ' Create an XML tree in a namespace.  \nDim root As XElement = _   \n    <Root xmlns='http://www.adventure-works.com'>  \n        <Child>child content</Child>  \n    </Root>  \nConsole.WriteLine(root)  \n```  \n  \n This example produces the following output:  \n  \n```xml  \n  \n                <Root xmlns=\"http://www.adventure-works.com\">  \n  <Child>child content</Child>  \n</Root>  \n```  \n  \n The following example creates an XML tree with nested namespaces.  \n  \n```csharp  \n  \n                // Create an XML tree with nested namespaces.  \nXNamespace aw = \"http://www.adventure-works.com\";  \nXNamespace fc = \"www.fourthcoffee.com\";  \nXDocument root = new XDocument(  \n    new XDeclaration(\"1.0\", \"utf-8\", \"yes\"),  \n    new XElement(aw + \"Root\",  \n        new XElement(fc + \"Child\",  \n            new XElement(aw + \"DifferentChild\", \"other content\")  \n        )  \n    )  \n);  \nConsole.WriteLine(root);  \n```  \n  \n```vb  \n  \n                ' Create an XML tree with nested namespaces.  \nDim root As XDocument = _   \n    <?xml version='1.0'?>  \n    <Root xmlns='http://www.adventure-works.com'>  \n        <Child xmlns='www.fourthcoffee.com'>  \n        <DifferentChild xmlns='http://www.adventure-works.com'>other content</DifferentChild>  \n        </Child>  \n    </Root>  \nConsole.WriteLine(root)  \n```  \n  \n This example produces the following output:  \n  \n```xml  \n  \n                <Root xmlns=\"http://www.adventure-works.com\">  \n  <Child xmlns=\"www.fourthcoffee.com\">  \n    <DifferentChild xmlns=\"http://www.adventure-works.com\">other content</DifferentChild>  \n  </Child>  \n</Root>  \n```"
  syntax:
    content: public XElement (System.Xml.Linq.XName name, object content);
    parameters:
    - id: name
      type: System.Xml.Linq.XName
      description: An <xref href="System.Xml.Linq.XName"></xref> that contains the element name.
    - id: content
      type: System.Object
      description: The contents of the element.
  overload: System.Xml.Linq.XElement.#ctor*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XName,System.Object[])
  commentId: M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XName,System.Object[])
  id: '#ctor(System.Xml.Linq.XName,System.Object[])'
  parent: System.Xml.Linq.XElement
  langs:
  - csharp
  name: XElement(XName, Object[])
  nameWithType: XElement.XElement(XName, Object[])
  fullName: XElement.XElement(XName, Object[])
  type: Constructor
  assemblies:
  - System.Xml.XDocument
  - System.Xml.Linq
  - netstandard
  namespace: System.Xml.Linq
  summary: Initializes a new instance of the <xref href="System.Xml.Linq.XElement"></xref> class with the specified name and content.
  remarks: "This constructor creates an element with the specified content and attributes.  \n  \n There is an implicit conversion from string to <xref:System.Xml.Linq.XName>. Typical use of this constructor is to specify a string as the parameter instead of creating a new <xref:System.Xml.Linq.XName>.  \n  \n When creating an element in a namespace, typical use is to use the addition operator overload with an <xref:System.Xml.Linq.XNamespace> and a string to create an <xref:System.Xml.Linq.XName>. For more information, see [Working with XML Namespaces](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).  \n  \n For details about the valid content that can be passed to this constructor, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)."
  example:
  - "The following example creates an XML tree. The content of the new element comes from a LINQ query.  \n  \n```csharp  \n  \n                XElement xmlTree1 = new XElement(\"Root\",  \n    new XElement(\"Child1\", 1),  \n    new XElement(\"Child2\", 2),  \n    new XElement(\"Child3\", 3),  \n    new XElement(\"Child4\", 4),  \n    new XElement(\"Child5\", 5),  \n    new XElement(\"Child6\", 6)  \n);  \n  \nXElement xmlTree2 = new XElement(\"Root\",  \n    from el in xmlTree1.Elements()  \n    where((int)el >= 3 && (int)el <= 5)  \n    select el  \n);  \nConsole.WriteLine(xmlTree2);  \n```  \n  \n```vb  \n  \n                Dim xmlTree1 As XElement = _   \n        <Root>  \n            <Child1>1</Child1>  \n            <Child2>2</Child2>  \n            <Child3>3</Child3>  \n            <Child4>4</Child4>  \n            <Child5>5</Child5>  \n            <Child6>6</Child6>  \n        </Root>  \n  \nDim xmlTree2 As XElement = _   \n    <Root>  \n        <%= From el In xmlTree1.Elements() _  \n            Where el.Value >= 3 And el.Value <= 5 _  \n            Select el %>  \n    </Root>  \n  \nConsole.WriteLine(xmlTree2)  \n  \n```  \n  \n This example produces the following output:  \n  \n```xml  \n  \n                <Root>  \n  <Child3>3</Child3>  \n  <Child4>4</Child4>  \n  <Child5>5</Child5>  \n</Root>  \n```  \n  \n The following example creates an XML tree with a variety of types of content.  \n  \n```csharp  \n  \n                XElement root;  \n  \n// String content:  \nroot = new XElement(\"Root\", \"Some text\");  \nConsole.WriteLine(root);  \n  \n// XElement object content:  \nroot = new XElement(\"Root\",   \n    new XElement(\"NewChild\", \"n\")  \n);  \nConsole.WriteLine(root);  \n  \n// XAttribute object content:  \nroot = new XElement(\"Root\",   \n    new XAttribute(\"NewAttribute\", \"n\")  \n);  \nConsole.WriteLine(root);  \n  \n// Double content:  \ndouble dbl = 12.345;  \nroot = new XElement(\"Root\", dbl);  \nConsole.WriteLine(root);  \n  \n// DateTime content:  \nDateTime dt = new DateTime(2006, 10, 6, 12, 30, 00);  \nroot = new XElement(\"Root\", dt);  \nConsole.WriteLine(root);  \n  \n// String array content:  \n// Any collection other than a collection of XElement or XAttribute objects  \n// are converted to strings. The strings are concatenated and added.  \nstring[] stringArray = {  \n    \"abc\",  \n    \"def\",  \n    \"ghi\"  \n};  \nroot = new XElement(\"Root\", stringArray);  \nConsole.WriteLine(root);  \n  \n// XElement object array content:  \nXElement[] ellArray = {  \n    new XElement(\"NewChild1\", 1),  \n    new XElement(\"NewChild2\", 2),  \n    new XElement(\"NewChild3\", 3)  \n};  \nroot = new XElement(\"Root\", ellArray);  \nConsole.WriteLine(root);  \n  \n// XAttribute object array content:  \nXAttribute[] attArray = {  \n    new XAttribute(\"NewAtt1\", 1),  \n    new XAttribute(\"NewAtt2\", 2),  \n    new XAttribute(\"NewAtt3\", 3)  \n};  \nroot = new XElement(\"Root\", attArray);  \nConsole.WriteLine(root);  \n```  \n  \n```vb  \n  \n                Dim root As XElement  \n  \n' String content:  \nroot = <Root>Some text</Root>  \nConsole.WriteLine(root)  \n  \n' XElement object content:  \nroot = <Root>  \n           <NewChild>n</NewChild>  \n       </Root>  \nConsole.WriteLine(root)  \n  \n' XAttribute object content:  \nroot = <Root NewAttribute=\"n\"/>  \nConsole.WriteLine(root)  \n  \n' Double content:  \nDim dbl As Double = 12.345  \nroot = <Root><%= dbl %></Root>  \nConsole.WriteLine(root)  \n  \n' DateTime content:  \nDim dt As DateTime = New DateTime(2006, 10, 6, 12, 30, 0)  \nroot = <Root><%= dt %></Root>  \nConsole.WriteLine(root)  \n  \n' String array content:  \n' Any collection other than a collection of XElement or XAttribute objects  \n' are converted to strings. The strings are concatenated and added.  \n  \nDim stringArray As String() = { _  \n    \"abc\", _  \n    \"def\", _  \n    \"ghi\" _  \n}  \nroot = <Root><%= stringArray %></Root>  \nConsole.WriteLine(root)  \n  \n' XElement object array content:  \nDim ellArray As XElement() = { _  \n    <NewChild1>1</NewChild1>, _  \n    <NewChild2>2</NewChild2>, _  \n    <NewChild3>3</NewChild3> _  \n}  \n  \nroot = <Root><%= ellArray %></Root>  \nConsole.WriteLine(root)  \n  \n' XAttribute object array content  \nDim attArray As XAttribute() = { _  \n    New XAttribute(\"NewAtt1\", 1), _  \n    New XAttribute(\"NewAtt2\", 2), _  \n    New XAttribute(\"NewAtt3\", 3) _  \n}  \nroot = <Root><%= attArray %></Root>  \nConsole.WriteLine(root)  \n  \n```  \n  \n This example produces the following output:  \n  \n```  \n  \n                <Root>Some text</Root>  \n<Root>  \n  <NewChild>n</NewChild>  \n</Root>  \n<Root NewAttribute=\"n\" />  \n<Root>12.345</Root>  \n<Root>2006-10-06T12:30:00</Root>  \n<Root>abcdefghi</Root>  \n<Root>  \n  <NewChild1>1</NewChild1>  \n  <NewChild2>2</NewChild2>  \n  <NewChild3>3</NewChild3>  \n</Root>  \n<Root NewAtt1=\"1\" NewAtt2=\"2\" NewAtt3=\"3\" />  \n```  \n  \n The following example creates an XML tree in a namespace.  \n  \n```csharp  \n  \n                // Create an XML tree in a namespace.  \nXNamespace aw = \"http://www.adventure-works.com\";  \nXElement root = new XElement(aw + \"Root\",  \n    new XElement(aw + \"Child\", \"child content\")  \n);  \nConsole.WriteLine(root);  \n```  \n  \n```vb  \n  \n                ' Create an XML tree in a namespace.  \nDim root As XElement = _   \n    <Root xmlns='http://www.adventure-works.com'>  \n        <Child>child content</Child>  \n    </Root>  \nConsole.WriteLine(root)  \n```  \n  \n This example produces the following output:  \n  \n```xml  \n  \n                <Root xmlns=\"http://www.adventure-works.com\">  \n  <Child>child content</Child>  \n</Root>  \n```  \n  \n The following example creates an XML tree with nested namespaces.  \n  \n```csharp  \n  \n                // Create an XML tree with nested namespaces.  \nXNamespace aw = \"http://www.adventure-works.com\";  \nXNamespace fc = \"www.fourthcoffee.com\";  \nXElement root = new XElement(aw + \"Root\",  \n    new XElement(fc + \"Child\",  \n        new XElement(aw + \"DifferentChild\", \"other content\")  \n    )  \n);  \nConsole.WriteLine(root);  \n```  \n  \n```vb  \n  \n                ' Create an XML tree with nested namespaces.  \nDim root As XDocument = _   \n    <?xml version='1.0'?>  \n    <Root xmlns='http://www.adventure-works.com'>  \n        <Child xmlns='www.fourthcoffee.com'>  \n        <DifferentChild xmlns='http://www.adventure-works.com'>other content</DifferentChild>  \n        </Child>  \n    </Root>  \nConsole.WriteLine(root)  \n  \n```  \n  \n This example produces the following output:  \n  \n```xml  \n  \n                <Root xmlns=\"http://www.adventure-works.com\">  \n  <Child xmlns=\"www.fourthcoffee.com\">  \n    <DifferentChild xmlns=\"http://www.adventure-works.com\">other content</DifferentChild>  \n  </Child>  \n</Root>  \n  \n```"
  syntax:
    content: public XElement (System.Xml.Linq.XName name, object[] content);
    parameters:
    - id: name
      type: System.Xml.Linq.XName
      description: An <xref href="System.Xml.Linq.XName"></xref> that contains the element name.
    - id: content
      type: System.Object[]
      description: The initial content of the element.
  overload: System.Xml.Linq.XElement.#ctor*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Xml.Linq.XElement.AncestorsAndSelf
  commentId: M:System.Xml.Linq.XElement.AncestorsAndSelf
  id: AncestorsAndSelf
  parent: System.Xml.Linq.XElement
  langs:
  - csharp
  name: AncestorsAndSelf()
  nameWithType: XElement.AncestorsAndSelf()
  fullName: XElement.AncestorsAndSelf()
  type: Method
  assemblies:
  - System.Xml.XDocument
  - System.Xml.Linq
  - netstandard
  namespace: System.Xml.Linq
  summary: Returns a collection of elements that contain this element, and the ancestors of this element.
  remarks: "The elements in the returned collection are in reverse document order.  \n  \n This method uses deferred execution."
  example:
  - "The following example creates an XML tree. It then finds the `GrandChild` element, and then prints the ancestors of it.  \n  \n```csharp  \n  \n                XElement xmlTree = new XElement(\"Root\",  \n    new XElement(\"Child\",  \n        new XElement(\"GrandChild\", \"element content\")  \n    )  \n);  \nXElement gc = xmlTree.Element(\"Child\").Element(\"GrandChild\");  \nIEnumerable<XElement> aas =  \n    from el in gc.AncestorsAndSelf()  \n    select el;  \nforeach (XElement el in aas)  \n    Console.WriteLine(el.Name);  \n```  \n  \n```vb  \n  \n                Dim xmlTree As XElement = _   \n    <Root>  \n        <Child>  \n            <GrandChild>element content</GrandChild>  \n        </Child>  \n    </Root>  \n  \nDim GC As XElement = xmlTree.<Child>.<GrandChild>(0)  \n  \nDim aas As IEnumerable(Of XElement) = _  \n    From el In GC.AncestorsAndSelf() _  \n    Select el  \n  \nFor Each el In aas  \n    Console.WriteLine(el.Name)  \nNext  \n  \n```  \n  \n This example produces the following output:  \n  \n```  \n  \n                GrandChild  \nChild  \nRoot  \n```"
  syntax:
    content: public System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement> AncestorsAndSelf ();
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement}
      description: An <xref href="System.Collections.Generic.IEnumerable`1"></xref> of <xref href="System.Xml.Linq.XElement"></xref> of elements that contain this element, and the ancestors of this element.
  overload: System.Xml.Linq.XElement.AncestorsAndSelf*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Xml.Linq.XElement.AncestorsAndSelf(System.Xml.Linq.XName)
  commentId: M:System.Xml.Linq.XElement.AncestorsAndSelf(System.Xml.Linq.XName)
  id: AncestorsAndSelf(System.Xml.Linq.XName)
  parent: System.Xml.Linq.XElement
  langs:
  - csharp
  name: AncestorsAndSelf(XName)
  nameWithType: XElement.AncestorsAndSelf(XName)
  fullName: XElement.AncestorsAndSelf(XName)
  type: Method
  assemblies:
  - System.Xml.XDocument
  - System.Xml.Linq
  - netstandard
  namespace: System.Xml.Linq
  summary: Returns a filtered collection of elements that contain this element, and the ancestors of this element. Only elements that have a matching <xref href="System.Xml.Linq.XName"></xref> are included in the collection.
  remarks: "The elements in the returned collection are in reverse document order.  \n  \n This method uses deferred execution."
  example:
  - "The following example uses this .  \n  \n```csharp  \n  \n                XElement xmlTree = new XElement(\"Root\",  \n    new XElement(\"Child\",  \n        new XElement(\"GrandChild\", \"element content\")  \n    )  \n);  \nXElement gc = xmlTree.Element(\"Child\").Element(\"GrandChild\");  \nIEnumerable<XElement> aas = gc.AncestorsAndSelf(\"Child\");  \nforeach (XElement el in aas)  \n    Console.WriteLine(el.Name);  \n```  \n  \n```vb  \n  \n                Dim xmlTree As XElement = _   \n    <Root>  \n        <Child>  \n            <GrandChild>element content</GrandChild>  \n        </Child>  \n    </Root>  \n  \nDim GC As XElement = xmlTree.<Child>.<GrandChild>(0)  \nDim aas As IEnumerable(Of XElement) = GC.AncestorsAndSelf(\"Child\")  \nFor Each el In aas  \n    Console.WriteLine(el.Name)  \nNext  \n  \n```  \n  \n This example produces the following output:  \n  \n```  \n  \nChild  \n```"
  syntax:
    content: public System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement> AncestorsAndSelf (System.Xml.Linq.XName name);
    parameters:
    - id: name
      type: System.Xml.Linq.XName
      description: The <xref href="System.Xml.Linq.XName"></xref> to match.
    return:
      type: System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement}
      description: An <xref href="System.Collections.Generic.IEnumerable`1"></xref> of <xref href="System.Xml.Linq.XElement"></xref> that contain this element, and the ancestors of this element. Only elements that have a matching <xref href="System.Xml.Linq.XName"></xref> are included in the collection.
  overload: System.Xml.Linq.XElement.AncestorsAndSelf*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Xml.Linq.XElement.Attribute(System.Xml.Linq.XName)
  commentId: M:System.Xml.Linq.XElement.Attribute(System.Xml.Linq.XName)
  id: Attribute(System.Xml.Linq.XName)
  parent: System.Xml.Linq.XElement
  langs:
  - csharp
  name: Attribute(XName)
  nameWithType: XElement.Attribute(XName)
  fullName: XElement.Attribute(XName)
  type: Method
  assemblies:
  - System.Xml.XDocument
  - System.Xml.Linq
  - netstandard
  namespace: System.Xml.Linq
  summary: Returns the <xref href="System.Xml.Linq.XAttribute"></xref> of this <xref href="System.Xml.Linq.XElement"></xref> that has the specified <xref href="System.Xml.Linq.XName"></xref>.
  remarks: "Some  return collections of elements or attributes. This method returns only a single attribute. Sometimes this is referred to as a *singleton* (in contrast to a *collection*).  \n  \n Visual Basic users can use the integrated attribute axis to retrieve the value of an attribute with a specified name."
  example:
  - "The following example creates an element with an attribute. It then retrieves the attribute using this method.  \n  \n```csharp  \n  \n                XElement xmlTree = new XElement(\"Root\",  \n    new XAttribute(\"Att\", \"attribute content\")  \n);  \nXAttribute att = xmlTree.Attribute(\"Att\");  \nConsole.WriteLine(att);  \n```  \n  \n```vb  \n  \n                Dim xmlTree As XElement = <Root Att=\"attribute content\"/>  \n  \nDim att As XAttribute = xmlTree.Attribute(\"Att\")  \nConsole.WriteLine(att)  \n  \n```  \n  \n This example produces the following output:  \n  \n```  \n  \nAtt=\"attribute content\"  \n```  \n  \n The following is the same example, but in this case the XML is in a namespace. For more information, see [Working with XML Namespaces](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).  \n  \n```csharp  \n  \n                XNamespace aw = \"http://www.adventure-works.com\";  \nXElement xmlTree = new XElement(aw + \"Root\",  \n    new XAttribute(XNamespace.Xmlns + \"aw\", \"http://www.adventure-works.com\"),  \n    new XAttribute(aw + \"Att\", \"attribute content\")  \n);  \nXAttribute att = xmlTree.Attribute(aw + \"Att\");  \nConsole.WriteLine(att);  \n```  \n  \n```vb  \n  \n                Imports <xmlns:aw=\"http://www.adventure-works.com\">  \n  \nModule Module1  \n    Sub Main()  \n        Dim xmlTree As XElement = <aw:Root aw:Att=\"attribute content\"/>  \n  \n        Dim att As XAttribute = xmlTree.Attribute(GetXmlNamespace(aw) + \"Att\")  \n        Console.WriteLine(att)  \n    End Sub  \nEnd Module  \n```  \n  \n This example produces the following output:  \n  \n```  \n  \naw:Att=\"attribute content\"  \n```"
  syntax:
    content: public System.Xml.Linq.XAttribute Attribute (System.Xml.Linq.XName name);
    parameters:
    - id: name
      type: System.Xml.Linq.XName
      description: The <xref href="System.Xml.Linq.XName"></xref> of the <xref href="System.Xml.Linq.XAttribute"></xref> to get.
    return:
      type: System.Xml.Linq.XAttribute
      description: An <xref href="System.Xml.Linq.XAttribute"></xref> that has the specified <xref href="System.Xml.Linq.XName"></xref>; `null` if there is no attribute with the specified name.
  overload: System.Xml.Linq.XElement.Attribute*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Xml.Linq.XElement.Attributes
  commentId: M:System.Xml.Linq.XElement.Attributes
  id: Attributes
  parent: System.Xml.Linq.XElement
  langs:
  - csharp
  name: Attributes()
  nameWithType: XElement.Attributes()
  fullName: XElement.Attributes()
  type: Method
  assemblies:
  - System.Xml.XDocument
  - System.Xml.Linq
  - netstandard
  namespace: System.Xml.Linq
  summary: Returns a collection of attributes of this element.
  remarks: "The attributes in the returned collection are in the order that they were added to the element. If the XML tree was parsed from XML, the attributes are returned in document order.  \n  \n This method uses deferred execution."
  example:
  - "The following example creates an element with two attributes. It then uses this  to retrieve all attributes of the element.  \n  \n```csharp  \n  \n                XElement xmlTree = new XElement(\"Root\",  \n    new XAttribute(\"Att1\", \"content1\"),  \n    new XAttribute(\"Att2\", \"content2\")  \n);  \nIEnumerable<XAttribute> attList =  \n    from at in xmlTree.Attributes()  \n    select at;  \nforeach (XAttribute att in attList)  \n    Console.WriteLine(att);  \n```  \n  \n```vb  \n  \n                Dim xmlTree As XElement = <Root Att1=\"content1\" Att2=\"content2\"/>  \n  \nDim attList As IEnumerable(Of XAttribute) = _  \nFrom at In xmlTree.Attributes() _  \nSelect at  \n  \nFor Each att In attList  \n    Console.WriteLine(att)  \nNext  \n  \n```  \n  \n This example produces the following output:  \n  \n```  \n  \n                Att1=\"content1\"  \nAtt2=\"content2\"  \n```  \n  \n The following is the same example, but in this case the XML is in a namespace. For more information, see [Working with XML Namespaces](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).  \n  \n```csharp  \n  \n                XNamespace aw = \"http://www.adventure-works.com\";  \nXElement xmlTree = new XElement(aw + \"Root\",  \n    new XAttribute(aw + \"Att1\", \"content1\"),  \n    new XAttribute(aw + \"Att2\", \"content2\"),  \n    new XAttribute(XNamespace.Xmlns + \"aw\", \"http://www.adventure-works.com\")  \n);  \nIEnumerable<XAttribute> attList =  \n    from at in xmlTree.Attributes()  \n    select at;  \nforeach (XAttribute att in attList)  \n    Console.WriteLine(att);  \n```  \n  \n```vb  \n  \n                Imports <xmlns:aw=\"http://www.adventure-works.com\">  \n  \nModule Module1  \n    Sub Main()  \n        Dim xmlTree As XElement = <aw:Root aw:Att1=\"content1\" aw:Att2=\"content2\"/>  \n  \n        Dim attList As IEnumerable(Of XAttribute) = _  \n            From at In xmlTree.Attributes() _  \n            Select at  \n  \n        For Each att In attList  \n            Console.WriteLine(att)  \n        Next  \n    End Sub  \nEnd Module  \n```  \n  \n This example produces the following output:  \n  \n```  \n  \n                aw:Att1=\"content1\"  \naw:Att2=\"content2\"  \nxmlns:aw=\"http://www.adventure-works.com\"  \n```"
  syntax:
    content: public System.Collections.Generic.IEnumerable<System.Xml.Linq.XAttribute> Attributes ();
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.Xml.Linq.XAttribute}
      description: An <xref href="System.Collections.Generic.IEnumerable`1"></xref> of <xref href="System.Xml.Linq.XAttribute"></xref> of attributes of this element.
  overload: System.Xml.Linq.XElement.Attributes*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Xml.Linq.XElement.Attributes(System.Xml.Linq.XName)
  commentId: M:System.Xml.Linq.XElement.Attributes(System.Xml.Linq.XName)
  id: Attributes(System.Xml.Linq.XName)
  parent: System.Xml.Linq.XElement
  langs:
  - csharp
  name: Attributes(XName)
  nameWithType: XElement.Attributes(XName)
  fullName: XElement.Attributes(XName)
  type: Method
  assemblies:
  - System.Xml.XDocument
  - System.Xml.Linq
  - netstandard
  namespace: System.Xml.Linq
  summary: Returns a filtered collection of attributes of this element. Only elements that have a matching <xref href="System.Xml.Linq.XName"></xref> are included in the collection.
  remarks: "Attribute names must be unique within an element. Therefore, this  can return either a collection that contains only one attribute, or it can return an empty collection.  \n  \n This method uses deferred execution."
  example:
  - "The following example uses this .  \n  \n```csharp  \n  \n                XElement xmlTree = new XElement(\"Root\",  \n    new XAttribute(\"Att1\", \"content1\"),  \n    new XAttribute(\"Att2\", \"content2\")  \n);  \nIEnumerable<XAttribute> attList = xmlTree.Attributes(\"Att1\");  \nforeach (XAttribute att in attList)  \n    Console.WriteLine(att);  \n```  \n  \n```vb  \n  \n                Dim xmlTree As XElement = <Root Att1=\"content1\" Att2=\"content2\"/>  \n  \nDim attList As IEnumerable(Of XAttribute) = xmlTree.Attributes(\"Att1\")  \n  \nFor Each att In attList  \n    Console.WriteLine(att)  \nNext  \n  \n```  \n  \n This example produces the following output:  \n  \n```  \n  \nAtt1=\"content1\"  \n```  \n  \n The following is the same example, but in this case the XML is in a namespace. For more information, see [Working with XML Namespaces](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).  \n  \n```csharp  \n  \n                XNamespace aw = \"http://www.adventure-works.com\";  \nXElement xmlTree = new XElement(aw + \"Root\",  \n    new XAttribute(XNamespace.Xmlns + \"aw\", \"http://www.adventure-works.com\"),  \n    new XAttribute(aw + \"Att1\", \"content1\"),  \n    new XAttribute(aw + \"Att2\", \"content2\")  \n);  \nIEnumerable<XAttribute> attList = xmlTree.Attributes(aw + \"Att1\");  \nforeach (XAttribute att in attList)  \n    Console.WriteLine(att);  \n```  \n  \n```vb  \n  \n                Imports <xmlns:aw=\"http://www.adventure-works.com\">  \n  \nModule Module1  \n    Sub Main()  \n        Dim xmlTree As XElement = <aw:Root aw:Att1=\"content1\" aw:Att2=\"content2\"/>  \n  \n        Dim attList As IEnumerable(Of XAttribute) = xmlTree.Attributes(GetXmlNamespace(aw) + \"Att1\")  \n  \n        For Each att In attList  \n            Console.WriteLine(att)  \n        Next  \n    End Sub  \nEnd Module  \n```  \n  \n This example produces the following output:  \n  \n```  \n  \naw:Att1=\"content1\"  \n```"
  syntax:
    content: public System.Collections.Generic.IEnumerable<System.Xml.Linq.XAttribute> Attributes (System.Xml.Linq.XName name);
    parameters:
    - id: name
      type: System.Xml.Linq.XName
      description: The <xref href="System.Xml.Linq.XName"></xref> to match.
    return:
      type: System.Collections.Generic.IEnumerable{System.Xml.Linq.XAttribute}
      description: An <xref href="System.Collections.Generic.IEnumerable`1"></xref> of <xref href="System.Xml.Linq.XAttribute"></xref> that contains the attributes of this element. Only elements that have a matching <xref href="System.Xml.Linq.XName"></xref> are included in the collection.
  overload: System.Xml.Linq.XElement.Attributes*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Xml.Linq.XElement.DescendantNodesAndSelf
  commentId: M:System.Xml.Linq.XElement.DescendantNodesAndSelf
  id: DescendantNodesAndSelf
  parent: System.Xml.Linq.XElement
  langs:
  - csharp
  name: DescendantNodesAndSelf()
  nameWithType: XElement.DescendantNodesAndSelf()
  fullName: XElement.DescendantNodesAndSelf()
  type: Method
  assemblies:
  - System.Xml.XDocument
  - System.Xml.Linq
  - netstandard
  namespace: System.Xml.Linq
  summary: Returns a collection of nodes that contain this element, and all descendant nodes of this element, in document order.
  remarks: This method uses deferred execution.
  example:
  - "The following example creates an XML tree, and then uses this .  \n  \n```csharp  \n  \n                XElement xmlTree = new XElement(\"Root\",  \n    // Attributes are not nodes, so will not be returned by DescendantNodesAndSelf.  \n    new XAttribute(\"Att1\", \"AttributeContent\"),  \n    new XElement(\"Child\",  \n        new XText(\"Some text\"),  \n        new XElement(\"GrandChild\", \"element content\")  \n    )  \n);  \nIEnumerable<XNode> dnas =  \n    from node in xmlTree.DescendantNodesAndSelf()  \n    select node;  \nforeach (XNode node in dnas)  \n{  \n    if (node is XElement)  \n        Console.WriteLine((node as XElement).Name);  \n    else  \n        Console.WriteLine(node);  \n}  \n```  \n  \n```vb  \n  \n                Dim xmlTree As XElement = _  \n    <Root Att1=\"AttributeContent\">  \n        <Child>Some text<GrandChild>element content</GrandChild>  \n        </Child>  \n    </Root>  \n  \nDim dnas As IEnumerable(Of XNode) = _  \n    From node In xmlTree.DescendantNodesAndSelf() _  \n    Select node  \n  \nFor Each node In dnas  \n    If TypeOf node Is XElement Then  \n        Console.WriteLine(DirectCast(node, XElement).Name)  \n    Else  \n        Console.WriteLine(node)  \n    End If  \nNext  \n  \n```  \n  \n This example produces the following output:  \n  \n```  \n  \n                Root  \nChild  \nSome text  \nGrandChild  \nelement content  \n```"
  syntax:
    content: public System.Collections.Generic.IEnumerable<System.Xml.Linq.XNode> DescendantNodesAndSelf ();
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.Xml.Linq.XNode}
      description: An <xref href="System.Collections.Generic.IEnumerable`1"></xref> of <xref href="System.Xml.Linq.XNode"></xref> that contain this element, and all descendant nodes of this element, in document order.
  overload: System.Xml.Linq.XElement.DescendantNodesAndSelf*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Xml.Linq.XElement.DescendantsAndSelf(System.Xml.Linq.XName)
  commentId: M:System.Xml.Linq.XElement.DescendantsAndSelf(System.Xml.Linq.XName)
  id: DescendantsAndSelf(System.Xml.Linq.XName)
  parent: System.Xml.Linq.XElement
  langs:
  - csharp
  name: DescendantsAndSelf(XName)
  nameWithType: XElement.DescendantsAndSelf(XName)
  fullName: XElement.DescendantsAndSelf(XName)
  type: Method
  assemblies:
  - System.Xml.XDocument
  - System.Xml.Linq
  - netstandard
  namespace: System.Xml.Linq
  summary: Returns a filtered collection of elements that contain this element, and all descendant elements of this element, in document order. Only elements that have a matching <xref href="System.Xml.Linq.XName"></xref> are included in the collection.
  remarks: This method uses deferred execution.
  example:
  - "The following example creates an XML tree, and then uses this .  \n  \n```csharp  \n  \n                XElement xmlTree = new XElement(\"Root\",  \n    new XAttribute(\"Att1\", \"AttributeContent\"),  \n    new XElement(\"Child\",  \n        new XText(\"Some text\"),  \n        new XElement(\"GrandChild\", \"element content\")  \n    )  \n);  \nIEnumerable<XElement> das = xmlTree.DescendantsAndSelf(\"Child\");  \nforeach (XElement el in das)  \n    Console.WriteLine(el.Name);  \n```  \n  \n```vb  \n  \n                Dim xmlTree As XElement = _  \n    <Root Att1=\"AttributeContent\">  \n        <Child>Some text  \n            <GrandChild>element content</GrandChild>  \n        </Child>  \n    </Root>  \n  \nDim das As IEnumerable(Of XElement) = xmlTree.DescendantsAndSelf(\"Child\")  \n  \nFor Each el In das  \n    Console.WriteLine(el.Name)  \nNext  \n  \n```  \n  \n This example produces the following output:  \n  \n```  \n  \nChild  \n```"
  syntax:
    content: public System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement> DescendantsAndSelf (System.Xml.Linq.XName name);
    parameters:
    - id: name
      type: System.Xml.Linq.XName
      description: The <xref href="System.Xml.Linq.XName"></xref> to match.
    return:
      type: System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement}
      description: An <xref href="System.Collections.Generic.IEnumerable`1"></xref> of <xref href="System.Xml.Linq.XElement"></xref> that contain this element, and all descendant elements of this element, in document order. Only elements that have a matching <xref href="System.Xml.Linq.XName"></xref> are included in the collection.
  overload: System.Xml.Linq.XElement.DescendantsAndSelf*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Xml.Linq.XElement.DescendantsAndSelf
  commentId: M:System.Xml.Linq.XElement.DescendantsAndSelf
  id: DescendantsAndSelf
  parent: System.Xml.Linq.XElement
  langs:
  - csharp
  name: DescendantsAndSelf()
  nameWithType: XElement.DescendantsAndSelf()
  fullName: XElement.DescendantsAndSelf()
  type: Method
  assemblies:
  - System.Xml.XDocument
  - System.Xml.Linq
  - netstandard
  namespace: System.Xml.Linq
  summary: Returns a collection of elements that contain this element, and all descendant elements of this element, in document order.
  remarks: This method uses deferred execution.
  example:
  - "The following example creates an XML tree, and then uses this .  \n  \n```csharp  \n  \n                XElement xmlTree = new XElement(\"Root\",  \n    new XAttribute(\"Att1\", \"AttributeContent\"),  \n    new XElement(\"Child\",  \n        new XText(\"Some text\"),  \n        new XElement(\"GrandChild\", \"element content\")  \n    )  \n);  \nIEnumerable<XElement> das =  \n    from el in xmlTree.DescendantsAndSelf()  \n    select el;  \nforeach (XElement el in das)  \n    Console.WriteLine(el.Name);  \n```  \n  \n```vb  \n  \n                Dim xmlTree As XElement = _  \n    <Root Att1=\"AttributeContent\">  \n        <Child>Some text  \n            <GrandChild>element content</GrandChild>  \n        </Child>  \n    </Root>  \n  \nDim das As IEnumerable(Of XElement) = _  \n    From el In xmlTree.DescendantsAndSelf() _  \n    Select el  \n  \nFor Each el In das  \n    Console.WriteLine(el.Name)  \nNext  \n  \n```  \n  \n This example produces the following output:  \n  \n```  \n  \n                Root  \nChild  \nGrandChild  \n```"
  syntax:
    content: public System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement> DescendantsAndSelf ();
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement}
      description: An <xref href="System.Collections.Generic.IEnumerable`1"></xref> of <xref href="System.Xml.Linq.XElement"></xref> of elements that contain this element, and all descendant elements of this element, in document order.
  overload: System.Xml.Linq.XElement.DescendantsAndSelf*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Xml.Linq.XElement.EmptySequence
  commentId: P:System.Xml.Linq.XElement.EmptySequence
  id: EmptySequence
  parent: System.Xml.Linq.XElement
  langs:
  - csharp
  name: EmptySequence
  nameWithType: XElement.EmptySequence
  fullName: XElement.EmptySequence
  type: Property
  assemblies:
  - System.Xml.XDocument
  - System.Xml.Linq
  - netstandard
  namespace: System.Xml.Linq
  summary: Gets an empty collection of elements.
  remarks: This property is typically used by class implementers when writing a method that returns a collection of elements. If the method must return no elements, it can use this property to get an empty collection of <xref:System.Xml.Linq.XElement> objects.
  syntax:
    content: public static System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement> EmptySequence { get; }
    return:
      type: System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement}
      description: An <xref href="System.Collections.Generic.IEnumerable`1"></xref> of <xref href="System.Xml.Linq.XElement"></xref> that contains an empty collection.
  overload: System.Xml.Linq.XElement.EmptySequence*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Xml.Linq.XElement.FirstAttribute
  commentId: P:System.Xml.Linq.XElement.FirstAttribute
  id: FirstAttribute
  parent: System.Xml.Linq.XElement
  langs:
  - csharp
  name: FirstAttribute
  nameWithType: XElement.FirstAttribute
  fullName: XElement.FirstAttribute
  type: Property
  assemblies:
  - System.Xml.XDocument
  - System.Xml.Linq
  - netstandard
  namespace: System.Xml.Linq
  summary: Gets the first attribute of this element.
  remarks: Attributes are stored in the element in the order that they were added to the element.
  example:
  - "The following example uses this property.  \n  \n```csharp  \n  \n                XElement xmlTree = new XElement(\"Root\",  \n    new XAttribute(\"Att1\", 1),  \n    new XAttribute(\"Att2\", 2),  \n    new XAttribute(\"Att3\", 3)  \n);  \nConsole.WriteLine(xmlTree.FirstAttribute);  \n```  \n  \n```vb  \n  \n                Dim xmlTree As XElement = <Root Att1=\"1\" Att2=\"2\" Att3=\"3\"/>  \nConsole.WriteLine(xmlTree.FirstAttribute)  \n  \n```  \n  \n This example produces the following output:  \n  \n```  \n  \nAtt1=\"1\"  \n```"
  syntax:
    content: public System.Xml.Linq.XAttribute FirstAttribute { get; }
    return:
      type: System.Xml.Linq.XAttribute
      description: An <xref href="System.Xml.Linq.XAttribute"></xref> that contains the first attribute of this element.
  overload: System.Xml.Linq.XElement.FirstAttribute*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Xml.Linq.XElement.GetDefaultNamespace
  commentId: M:System.Xml.Linq.XElement.GetDefaultNamespace
  id: GetDefaultNamespace
  parent: System.Xml.Linq.XElement
  langs:
  - csharp
  name: GetDefaultNamespace()
  nameWithType: XElement.GetDefaultNamespace()
  fullName: XElement.GetDefaultNamespace()
  type: Method
  assemblies:
  - System.Xml.XDocument
  - System.Xml.Linq
  - netstandard
  namespace: System.Xml.Linq
  summary: Gets the default <xref href="System.Xml.Linq.XNamespace"></xref> of this <xref href="System.Xml.Linq.XElement"></xref>.
  remarks: "Namespace declarations may be persisted as attributes in the XML tree. These special attributes declare namespaces, including default namespaces. This method finds the namespace declaration that declares the default namespace, if there is one, and returns the <xref:System.Xml.Linq.XNamespace> for the default namespace.  \n  \n If there is no attribute that declares the default namespace, then this method returns <xref:System.Xml.Linq.XNamespace.None%2A?displayProperty=fullName>.  \n  \n When creating XML trees using C#, even if an XML tree would be serialized with a default namespace, if the namespace is not persisted in the XML tree as an attribute, this method will not report the namespace as the default namespace.  \n  \n When creating XML trees using Visual Basic and XML literals, if you create the XML in a default namespace using the Imports statement, then a namespace attribute will be created in the tree by the Visual Basic compiler, and this method will report that namespace."
  example:
  - "The following example creates an XML tree that has a default namespace. It then uses this method to retrieve the default namespace.  \n  \n```csharp  \n  \n                String xml = \"<root xmlns='http://www.adventure-works.com'/>\";  \nXElement e = XElement.Parse(xml);  \nConsole.WriteLine(\"Default namespace: {0}\", e.GetDefaultNamespace());  \n```  \n  \n```vb  \n  \n                Imports <xmlns=\"http://www.adventure-works.com\">  \n  \nModule Module1  \n    Sub Main()  \n        Dim e As XElement = <root/>  \n        Console.WriteLine(\"Default namespace: {0}\", e.GetDefaultNamespace())  \n    End Sub  \nEnd Module  \n```  \n  \n This example produces the following output:  \n  \n```  \n  \nDefault namespace: http://www.adventure-works.com  \n```"
  syntax:
    content: public System.Xml.Linq.XNamespace GetDefaultNamespace ();
    parameters: []
    return:
      type: System.Xml.Linq.XNamespace
      description: An <xref href="System.Xml.Linq.XNamespace"></xref> that contains the default namespace of this <xref href="System.Xml.Linq.XElement"></xref>.
  overload: System.Xml.Linq.XElement.GetDefaultNamespace*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Xml.Linq.XElement.GetNamespaceOfPrefix(System.String)
  commentId: M:System.Xml.Linq.XElement.GetNamespaceOfPrefix(System.String)
  id: GetNamespaceOfPrefix(System.String)
  parent: System.Xml.Linq.XElement
  langs:
  - csharp
  name: GetNamespaceOfPrefix(String)
  nameWithType: XElement.GetNamespaceOfPrefix(String)
  fullName: XElement.GetNamespaceOfPrefix(String)
  type: Method
  assemblies:
  - System.Xml.XDocument
  - System.Xml.Linq
  - netstandard
  namespace: System.Xml.Linq
  summary: Gets the namespace associated with a particular prefix for this <xref href="System.Xml.Linq.XElement"></xref>.
  remarks: This method looks through the XML tree for namespace attributes that are in scope for this element. Namespace prefixes are specified in namespace attributes that are in the XML tree.
  example:
  - "The following example creates an XML tree that has a namespace with an associated prefix. It then uses this method to retrieve the <xref:System.Xml.Linq.XNamespace> for the prefix.  \n  \n```csharp  \n  \n                XElement xmlTree = XElement.Parse(\"<Root xmlns:aw='http://www.adventure-works.com'/>\");  \nXNamespace awNamespace = xmlTree.GetNamespaceOfPrefix(\"aw\");  \nConsole.WriteLine(\"Namespace: {0}\", awNamespace);  \n```  \n  \n When using Visual Basic, you would typically use the [GetXmlNamespace Operator](~/docs/visual-basic/language-reference/operators/getxmlnamespace-operator.md) operator, as follows  \n  \n```vb  \n  \n                Imports <xmlns:aw=\"http://www.adventure-works.com\">  \n  \nModule Module1  \n    Sub Main()  \n        Dim xmlTree As XElement = <aw:Root/>  \n        Dim awNamespace As XNamespace = GetXmlNamespace(aw)  \n        Console.WriteLine(\"Namespace: {0}\", awNamespace)  \n    End Sub  \nEnd Module  \n  \n```  \n  \n This example produces the following output:  \n  \n```  \n  \nNamespace: http://www.adventure-works.com  \n```"
  syntax:
    content: public System.Xml.Linq.XNamespace GetNamespaceOfPrefix (string prefix);
    parameters:
    - id: prefix
      type: System.String
      description: A string that contains the namespace prefix to look up.
    return:
      type: System.Xml.Linq.XNamespace
      description: An <xref href="System.Xml.Linq.XNamespace"></xref> for the namespace associated with the prefix for this <xref href="System.Xml.Linq.XElement"></xref>.
  overload: System.Xml.Linq.XElement.GetNamespaceOfPrefix*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Xml.Linq.XElement.GetPrefixOfNamespace(System.Xml.Linq.XNamespace)
  commentId: M:System.Xml.Linq.XElement.GetPrefixOfNamespace(System.Xml.Linq.XNamespace)
  id: GetPrefixOfNamespace(System.Xml.Linq.XNamespace)
  parent: System.Xml.Linq.XElement
  langs:
  - csharp
  name: GetPrefixOfNamespace(XNamespace)
  nameWithType: XElement.GetPrefixOfNamespace(XNamespace)
  fullName: XElement.GetPrefixOfNamespace(XNamespace)
  type: Method
  assemblies:
  - System.Xml.XDocument
  - System.Xml.Linq
  - netstandard
  namespace: System.Xml.Linq
  summary: Gets the prefix associated with a namespace for this <xref href="System.Xml.Linq.XElement"></xref>.
  remarks: "This method looks through the XML tree for namespace attributes that are in scope for this element. Namespace prefixes are specified in namespace attributes that are in the XML tree.  \n  \n If the namespace is the default namespace, and there is no prefix for the namespace, then this method returns null."
  example:
  - "The following example creates an XML tree that contains a namespace with a prefix. It then uses this method to retrieve the prefix for the namespace. Notice that this example uses the implicit conversion from string to <xref:System.Xml.Linq.XNamespace> when calling this method.  \n  \n```csharp  \n  \n                XElement xmlTree = XElement.Parse(\"<Root xmlns:aw='http://www.adventure-works.com'/>\");  \nstring prefix = xmlTree.GetPrefixOfNamespace(\"http://www.adventure-works.com\");  \nConsole.WriteLine(\"Prefix: {0}\", prefix);  \n```  \n  \n```vb  \n  \n                Imports <xmlns:aw=\"http://www.adventure-works.com\">  \n  \nModule Module1  \n    Sub Main()  \n        Dim xmlTree As XElement = <aw:Root/>  \n        Dim prefix As String = xmlTree.GetPrefixOfNamespace(\"http://www.adventure-works.com\")  \n        Console.WriteLine(\"Prefix: {0}\", prefix)  \n    End Sub  \nEnd Module  \n```  \n  \n This example produces the following output:  \n  \n```  \n  \nPrefix: aw  \n```"
  syntax:
    content: public string GetPrefixOfNamespace (System.Xml.Linq.XNamespace ns);
    parameters:
    - id: ns
      type: System.Xml.Linq.XNamespace
      description: An <xref href="System.Xml.Linq.XNamespace"></xref> to look up.
    return:
      type: System.String
      description: A <xref href="System.String"></xref> that contains the namespace prefix.
  overload: System.Xml.Linq.XElement.GetPrefixOfNamespace*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Xml.Linq.XElement.HasAttributes
  commentId: P:System.Xml.Linq.XElement.HasAttributes
  id: HasAttributes
  parent: System.Xml.Linq.XElement
  langs:
  - csharp
  name: HasAttributes
  nameWithType: XElement.HasAttributes
  fullName: XElement.HasAttributes
  type: Property
  assemblies:
  - System.Xml.XDocument
  - System.Xml.Linq
  - netstandard
  namespace: System.Xml.Linq
  summary: Gets a value indicating whether this element has at least one attribute.
  remarks: ''
  example:
  - "The following example uses this property.  \n  \n```csharp  \n  \n                XElement xmlTree1 = new XElement(\"Root\",  \n    new XAttribute(\"Att1\", 1)  \n);  \nConsole.WriteLine(xmlTree1.HasAttributes);  \nXElement xmlTree2 = new XElement(\"Root\");  \nConsole.WriteLine(xmlTree2.HasAttributes);  \n```  \n  \n```vb  \n  \n                Dim xmlTree1 As XElement = <Root Att1=\"1\"/>  \nConsole.WriteLine(xmlTree1.HasAttributes)  \n  \nDim xmlTree2 As XElement = <Root/>  \nConsole.WriteLine(xmlTree2.HasAttributes)  \n  \n```  \n  \n This example produces the following output:  \n  \n```  \nTrue  \nFalse  \n```"
  syntax:
    content: public bool HasAttributes { get; }
    return:
      type: System.Boolean
      description: '`true` if this element has at least one attribute; otherwise `false`.'
  overload: System.Xml.Linq.XElement.HasAttributes*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Xml.Linq.XElement.HasElements
  commentId: P:System.Xml.Linq.XElement.HasElements
  id: HasElements
  parent: System.Xml.Linq.XElement
  langs:
  - csharp
  name: HasElements
  nameWithType: XElement.HasElements
  fullName: XElement.HasElements
  type: Property
  assemblies:
  - System.Xml.XDocument
  - System.Xml.Linq
  - netstandard
  namespace: System.Xml.Linq
  summary: Gets a value indicating whether this element has at least one child element.
  remarks: ''
  example:
  - "The following example uses this property.  \n  \n```csharp  \n  \n                XElement xmlTree1 = new XElement(\"Root\",  \n    new XElement(\"Child\", 1)  \n);  \nConsole.WriteLine(xmlTree1.HasElements);  \nXElement xmlTree2 = new XElement(\"Root\", \"contents\");  \nConsole.WriteLine(xmlTree2.HasElements);  \n```  \n  \n```vb  \n  \n                Dim xmlTree1 As XElement = _   \n        <Root>  \n            <Child>1</Child>  \n        </Root>  \nConsole.WriteLine(xmlTree1.HasElements)  \n  \nDim xmlTree2 As XElement = <Root>contents</Root>  \nConsole.WriteLine(xmlTree2.HasElements)  \n  \n```  \n  \n This example produces the following output:  \n  \n```  \n  \n                True  \nFalse  \n```"
  syntax:
    content: public bool HasElements { get; }
    return:
      type: System.Boolean
      description: '`true` if this element has at least one child element; otherwise `false`.'
  overload: System.Xml.Linq.XElement.HasElements*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Xml.Linq.XElement.IsEmpty
  commentId: P:System.Xml.Linq.XElement.IsEmpty
  id: IsEmpty
  parent: System.Xml.Linq.XElement
  langs:
  - csharp
  name: IsEmpty
  nameWithType: XElement.IsEmpty
  fullName: XElement.IsEmpty
  type: Property
  assemblies:
  - System.Xml.XDocument
  - System.Xml.Linq
  - netstandard
  namespace: System.Xml.Linq
  summary: Gets a value indicating whether this element contains no content.
  remarks: Note that an element that contains a start and end tag with no content between the tags is not considered to be an empty element. It has content with no length. Only an element that contains only a start tag, and is expressed as a terminated empty element, is considered to be empty.
  example:
  - "The following example creates a variety of XML trees, and shows the value of this property with each tree.  \n  \n```csharp  \n  \n                XElement el1 = new XElement(\"Root\");  \nConsole.WriteLine(el1);  \nConsole.WriteLine(el1.IsEmpty);  \nConsole.WriteLine();  \nXElement el2 = new XElement(\"Root\", \"content\");  \nConsole.WriteLine(el2);  \nConsole.WriteLine(el2.IsEmpty);  \nConsole.WriteLine();  \nXElement el3 = new XElement(\"Root\", \"\");  \nConsole.WriteLine(el3);  \nConsole.WriteLine(el3.IsEmpty);  \nConsole.WriteLine();  \nel3.ReplaceAll(null);  \nConsole.WriteLine(el3);  \nConsole.WriteLine(el3.IsEmpty);  \n```  \n  \n```vb  \n  \n                Dim el1 As XElement = <Root/>  \nConsole.WriteLine(el1)  \nConsole.WriteLine(el1.IsEmpty)  \nConsole.WriteLine()  \nDim el2 As XElement = <Root>content</Root>  \nConsole.WriteLine(el2)  \nConsole.WriteLine(el2.IsEmpty)  \nConsole.WriteLine()  \nDim el3 As XElement = <Root></Root>  \nConsole.WriteLine(el3)  \nConsole.WriteLine(el3.IsEmpty)  \nConsole.WriteLine()  \nel3.ReplaceAll(Nothing)  \nConsole.WriteLine(el3)  \nConsole.WriteLine(el3.IsEmpty)  \n  \n```  \n  \n This example produces the following output:  \n  \n```  \n  \n                <Root />  \nTrue  \n  \n<Root>content</Root>  \nFalse  \n  \n<Root></Root>  \nFalse  \n  \n<Root />  \nTrue  \n```"
  syntax:
    content: public bool IsEmpty { get; }
    return:
      type: System.Boolean
      description: '`true` if this element contains no content; otherwise `false`.'
  overload: System.Xml.Linq.XElement.IsEmpty*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Xml.Linq.XElement.LastAttribute
  commentId: P:System.Xml.Linq.XElement.LastAttribute
  id: LastAttribute
  parent: System.Xml.Linq.XElement
  langs:
  - csharp
  name: LastAttribute
  nameWithType: XElement.LastAttribute
  fullName: XElement.LastAttribute
  type: Property
  assemblies:
  - System.Xml.XDocument
  - System.Xml.Linq
  - netstandard
  namespace: System.Xml.Linq
  summary: Gets the last attribute of this element.
  remarks: Attributes are stored in the element in the order that they were added to the element.
  example:
  - "The following example creates an XML tree with three attributes. It then writes the last attribute as output.  \n  \n```csharp  \n  \n                XElement xmlTree = new XElement(\"Root\",  \n    new XAttribute(\"Att1\", 1),  \n    new XAttribute(\"Att2\", 2),  \n    new XAttribute(\"Att3\", 3)  \n);  \nConsole.WriteLine(xmlTree.LastAttribute);  \n```  \n  \n```vb  \n  \n                Dim xmlTree As XElement = <Root Att1=\"1\" Att2=\"2\" Att3=\"3\"/>  \nConsole.WriteLine(xmlTree.LastAttribute)  \n  \n```  \n  \n This example produces the following output:  \n  \n```  \n  \nAtt3=\"3\"  \n```"
  syntax:
    content: public System.Xml.Linq.XAttribute LastAttribute { get; }
    return:
      type: System.Xml.Linq.XAttribute
      description: An <xref href="System.Xml.Linq.XAttribute"></xref> that contains the last attribute of this element.
  overload: System.Xml.Linq.XElement.LastAttribute*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Xml.Linq.XElement.Load(System.IO.TextReader,System.Xml.Linq.LoadOptions)
  commentId: M:System.Xml.Linq.XElement.Load(System.IO.TextReader,System.Xml.Linq.LoadOptions)
  id: Load(System.IO.TextReader,System.Xml.Linq.LoadOptions)
  parent: System.Xml.Linq.XElement
  langs:
  - csharp
  name: Load(TextReader, LoadOptions)
  nameWithType: XElement.Load(TextReader, LoadOptions)
  fullName: XElement.Load(TextReader, LoadOptions)
  type: Method
  assemblies:
  - System.Xml.XDocument
  - System.Xml.Linq
  - netstandard
  namespace: System.Xml.Linq
  summary: Loads an <xref href="System.Xml.Linq.XElement"></xref> from a <xref href="System.IO.TextReader"></xref>, optionally preserving white space and retaining line information.
  remarks: "If the source XML is indented, setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` causes the reader to read all white space in the source XML. Nodes of type <xref:System.Xml.Linq.XText> are created for both significant and insignificant white space.  \n  \n If the source XML is indented, not setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` causes the reader to ignore all of the insignificant white space in the source XML. The XML tree is created without any text nodes for insignificant white space.  \n  \n If the source XML is not indented, setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` has no effect. Significant white space is still preserved, and there are no spans of insignificant white space that could cause the creation of more white space text nodes.  \n  \n For more information, see [Preserving White Space while Loading or Parsing XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).  \n  \n Use <xref:System.Xml.Linq.XElement.Parse%2A> to create an <xref:System.Xml.Linq.XElement> from a string that contains XML.  \n  \n Setting <xref:System.Xml.Linq.LoadOptions.SetBaseUri> will have no effect when loading from a <xref:System.IO.TextReader>.  \n  \n There is a performance penalty if you set the <xref:System.Xml.Linq.LoadOptions.SetLineInfo> flag.  \n  \n The line information is accurate immediately after loading the XML document. If you modify the XML tree after loading the document, the line information may become meaningless.  \n  \n LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>. Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document."
  example:
  - "The following example loads an <xref:System.Xml.Linq.XElement> from a <xref:System.IO.StringReader> in two different ways: preserving white space, and not preserving white space. It then uses a query to determine the number of white space nodes in the resulting XML tree.  \n  \n```csharp  \n  \n                TextReader sr;  \nint whiteSpaceNodes;  \n  \nsr = new StringReader(\"<Root> <Child> </Child> </Root>\");  \nXElement xmlTree1 = XElement.Load(sr, LoadOptions.None);  \nsr.Close();  \nwhiteSpaceNodes = xmlTree1  \n    .DescendantNodesAndSelf()  \n    .OfType<XText>()  \n    .Where(tNode => tNode.ToString().Trim().Length == 0)  \n    .Count();  \nConsole.WriteLine(\"Count of white space nodes (not preserving whitespace): {0}\", whiteSpaceNodes);  \n  \nsr = new StringReader(\"<Root> <Child> </Child> </Root>\");  \nXElement xmlTree2 = XElement.Load(sr, LoadOptions.PreserveWhitespace);  \nsr.Close();  \nwhiteSpaceNodes = xmlTree2  \n    .DescendantNodesAndSelf()  \n    .OfType<XText>()  \n    .Where(tNode => tNode.ToString().Trim().Length == 0)  \n    .Count();  \nConsole.WriteLine(\"Count of white space nodes (preserving whitespace): {0}\", whiteSpaceNodes);  \n```  \n  \n```vb  \n  \n                Dim sr As TextReader  \nDim whiteSpaceNodes As Integer  \n  \nsr = New StringReader(\"<Root> <Child> </Child> </Root>\")  \nDim xmlTree1 As XElement = XElement.Load(sr, LoadOptions.None)  \nsr.Close()  \nwhiteSpaceNodes = xmlTree1 _  \n    .DescendantNodesAndSelf() _  \n    .OfType(Of XText)() _  \n    .Where(Function(ByVal tNode As XNode) tNode.ToString().Trim().Length = 0) _  \n    .Count()  \nConsole.WriteLine(\"Count of white space nodes (not preserving whitespace): {0}\", whiteSpaceNodes)  \n  \nsr = New StringReader(\"<Root> <Child> </Child> </Root>\")  \nDim xmlTree2 As XElement = XElement.Load(sr, LoadOptions.PreserveWhitespace)  \nsr.Close()  \nwhiteSpaceNodes = xmlTree2 _  \n    .DescendantNodesAndSelf() _  \n    .OfType(Of XText)() _  \n    .Where(Function(ByVal tNode As XNode) tNode.ToString().Trim().Length = 0) _  \n    .Count()  \nConsole.WriteLine(\"Count of white space nodes (preserving whitespace): {0}\", whiteSpaceNodes)  \n```  \n  \n This example produces the following output:  \n  \n```  \n  \n                Count of white space nodes (not preserving whitespace): 0  \nCount of white space nodes (preserving whitespace): 3  \n```  \n  \n The following example loads the line information as it loads from the <xref:System.IO.TextReader>. It then prints the line information.  \n  \n```csharp  \n  \n                TextReader sr = new StringReader(  \n@\"<Root>  \n  <Child>  \n    <GrandChild1/>  \n    <GrandChild2/>  \n  </Child>  \n</Root>\");  \nXElement po = XElement.Load(sr,  \n    LoadOptions.SetLineInfo);  \nConsole.WriteLine(\"{0}{1}{2}\",  \n    \"Element Name\".PadRight(20),  \n    \"Line\".PadRight(5),  \n    \"Position\");  \nConsole.WriteLine(\"{0}{1}{2}\",  \n    \"------------\".PadRight(20),  \n    \"----\".PadRight(5),  \n    \"--------\");  \nforeach (XElement e in po.DescendantsAndSelf())  \n    Console.WriteLine(\"{0}{1}{2}\",  \n        (\"\".PadRight(e.Ancestors().Count() * 2) + e.Name).PadRight(20),  \n        ((IXmlLineInfo)e).LineNumber.ToString().PadRight(5),  \n        ((IXmlLineInfo)e).LinePosition);  \n```  \n  \n```vb  \n  \n                Dim sr As TextReader = New StringReader( _  \n    \"<Root>\" & Environment.NewLine & _  \n    \"  <Child>\" & Environment.NewLine & _  \n    \"    <GrandChild1/>\" & Environment.NewLine & _  \n    \"    <GrandChild2/>\" & Environment.NewLine & _  \n    \"  </Child>\" & Environment.NewLine & _  \n    \"</Root>\")  \nDim po As XElement = XElement.Load(sr, LoadOptions.SetLineInfo)  \nConsole.WriteLine(\"{0}{1}{2}\", _  \n    \"Element Name\".PadRight(20), _  \n    \"Line\".PadRight(5), _  \n    \"Position\")  \nConsole.WriteLine(\"{0}{1}{2}\", _  \n    \"------------\".PadRight(20), _  \n    \"----\".PadRight(5), _  \n    \"--------\")  \nFor Each e As XElement In po.DescendantsAndSelf()  \n    Console.WriteLine(\"{0}{1}{2}\", _  \n        (\"\".PadRight(e.Ancestors().Count() * 2) & e.Name.ToString).PadRight(20), _  \n        (DirectCast(e, IXmlLineInfo)).LineNumber.ToString().PadRight(5), _  \n        (DirectCast(e, IXmlLineInfo)).LinePosition)  \nNext  \n```  \n  \n This example produces the following output:  \n  \n```  \n  \n                Element Name        Line Position  \n------------        ---- --------  \nRoot                1    2  \n  Child             2    4  \n    GrandChild1     3    6  \n    GrandChild2     4    6  \n```"
  syntax:
    content: public static System.Xml.Linq.XElement Load (System.IO.TextReader textReader, System.Xml.Linq.LoadOptions options);
    parameters:
    - id: textReader
      type: System.IO.TextReader
      description: A <xref href="System.IO.TextReader"></xref> that will be read for the <xref href="System.Xml.Linq.XElement"></xref> content.
    - id: options
      type: System.Xml.Linq.LoadOptions
      description: A <xref href="System.Xml.Linq.LoadOptions"></xref> that specifies white space behavior, and whether to load base URI and line information.
    return:
      type: System.Xml.Linq.XElement
      description: An <xref href="System.Xml.Linq.XElement"></xref> that contains the XML that was read from the specified <xref href="System.IO.TextReader"></xref>.
  overload: System.Xml.Linq.XElement.Load*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Xml.Linq.XElement.Load(System.Xml.XmlReader,System.Xml.Linq.LoadOptions)
  commentId: M:System.Xml.Linq.XElement.Load(System.Xml.XmlReader,System.Xml.Linq.LoadOptions)
  id: Load(System.Xml.XmlReader,System.Xml.Linq.LoadOptions)
  parent: System.Xml.Linq.XElement
  langs:
  - csharp
  name: Load(XmlReader, LoadOptions)
  nameWithType: XElement.Load(XmlReader, LoadOptions)
  fullName: XElement.Load(XmlReader, LoadOptions)
  type: Method
  assemblies:
  - System.Xml.XDocument
  - System.Xml.Linq
  - netstandard
  namespace: System.Xml.Linq
  summary: Loads an <xref href="System.Xml.Linq.XElement"></xref> from an <xref href="System.Xml.XmlReader"></xref>, optionally preserving white space, setting the base URI, and retaining line information.
  remarks: "By creating an <xref:System.Xml.XmlNodeReader> from a DOM document, and then using the <xref:System.Xml.XmlNodeReader> to create an <xref:System.Xml.Linq.XElement>, this method can be used to create a copy of a DOM document in a LINQ to XML tree.  \n  \n Use <xref:System.Xml.Linq.XElement.Parse%2A> to create an <xref:System.Xml.Linq.XElement> from a string that contains XML.  \n  \n Setting <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> is not valid when loading from a <xref:System.Xml.XmlReader>. The <xref:System.Xml.XmlReader> will be configured to either read whitespace or not. The LINQ to XML tree will be populated with the whitespace nodes that the reader surfaces. This will be the behavior regardless of whether <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> is set or not.  \n  \n The <xref:System.Xml.XmlReader> may have a valid base URI or not. If you set <xref:System.Xml.Linq.LoadOptions.SetBaseUri>, the base URI will be set in the XML tree from the base URI that is reported by the <xref:System.Xml.XmlReader>.  \n  \n The <xref:System.Xml.XmlReader> may have a valid line information or not. If you set <xref:System.Xml.Linq.LoadOptions.SetLineInfo>, the line information will be set in the XML tree from the line information that is reported by the <xref:System.Xml.XmlReader>.  \n  \n There is a performance penalty if you set the <xref:System.Xml.Linq.LoadOptions.SetLineInfo> flag.  \n  \n The line information is accurate immediately after loading the XML document. If you modify the XML tree after loading the document, the line information may become meaningless.  \n  \n LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>. Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document."
  example:
  - "The following example loads the line information that it loads from the <xref:System.Xml.XmlReader>. It then prints the line information.  \n  \n```csharp  \n  \n                string markup =  \n@\"<Root>  \n    <Child>  \n        <GrandChild/>  \n    </Child>  \n</Root>\";  \n  \n// Create a reader and move to the content.  \nusing (XmlReader nodeReader = XmlReader.Create(new StringReader(markup)))  \n{  \n    // the reader must be in the Interactive state in order to  \n    // Create a LINQ to XML tree from it.  \n    nodeReader.MoveToContent();  \n  \n    XElement xRoot = XElement.Load(nodeReader, LoadOptions.SetLineInfo);  \n    Console.WriteLine(\"{0}{1}{2}\",  \n        \"Element Name\".PadRight(20),  \n        \"Line\".PadRight(5),  \n        \"Position\");  \n    Console.WriteLine(\"{0}{1}{2}\",  \n        \"------------\".PadRight(20),  \n        \"----\".PadRight(5),  \n        \"--------\");  \n    foreach (XElement e in xRoot.DescendantsAndSelf())  \n        Console.WriteLine(\"{0}{1}{2}\",  \n            (\"\".PadRight(e.Ancestors().Count() * 2) + e.Name).PadRight(20),  \n            ((IXmlLineInfo)e).LineNumber.ToString().PadRight(5),  \n            ((IXmlLineInfo)e).LinePosition);  \n}  \n```  \n  \n```vb  \n  \n                Dim markup As String = _  \n    \"<Root>\" & Environment.NewLine & _  \n    \"    <Child>\" & Environment.NewLine & _  \n    \"        <GrandChild/>\" & Environment.NewLine & _  \n    \"    </Child>\" & Environment.NewLine & _  \n    \"</Root>\"  \n  \n' Create a reader and move to the content.  \nUsing nodeReader As XmlReader = XmlReader.Create(New StringReader(markup))  \n  \n    ' the reader must be in the Interactive state in order to  \n    ' Create a LINQ to XML tree from it.  \n    nodeReader.MoveToContent()  \n  \n    Dim xRoot As XElement = XElement.Load(nodeReader, LoadOptions.SetLineInfo)  \n    Console.WriteLine(\"{0}{1}{2}\", _  \n        \"Element Name\".PadRight(20), _  \n        \"Line\".PadRight(5), _  \n        \"Position\")  \n    Console.WriteLine(\"{0}{1}{2}\", _  \n        \"------------\".PadRight(20), _  \n        \"----\".PadRight(5), _  \n        \"--------\")  \n    For Each e As XElement In xRoot.DescendantsAndSelf()  \n        Console.WriteLine(\"{0}{1}{2}\", _  \n            (\"\".PadRight(e.Ancestors().Count() * 2) & e.Name.ToString).PadRight(20), _  \n            (DirectCast(e, IXmlLineInfo)).LineNumber.ToString().PadRight(5), _  \n            (DirectCast(e, IXmlLineInfo)).LinePosition)  \n    Next  \nEnd Using  \n```  \n  \n This example produces the following output:  \n  \n```  \n  \n                Element Name        Line Position  \n------------        ---- --------  \nRoot                1    2  \n  Child             2    6  \n    GrandChild      3    10  \n```"
  syntax:
    content: public static System.Xml.Linq.XElement Load (System.Xml.XmlReader reader, System.Xml.Linq.LoadOptions options);
    parameters:
    - id: reader
      type: System.Xml.XmlReader
      description: A <xref href="System.Xml.XmlReader"></xref> that will be read for the content of the <xref href="System.Xml.Linq.XElement"></xref>.
    - id: options
      type: System.Xml.Linq.LoadOptions
      description: A <xref href="System.Xml.Linq.LoadOptions"></xref> that specifies white space behavior, and whether to load base URI and line information.
    return:
      type: System.Xml.Linq.XElement
      description: An <xref href="System.Xml.Linq.XElement"></xref> that contains the XML that was read from the specified <xref href="System.Xml.XmlReader"></xref>.
  overload: System.Xml.Linq.XElement.Load*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Xml.Linq.XElement.Load(System.String,System.Xml.Linq.LoadOptions)
  commentId: M:System.Xml.Linq.XElement.Load(System.String,System.Xml.Linq.LoadOptions)
  id: Load(System.String,System.Xml.Linq.LoadOptions)
  parent: System.Xml.Linq.XElement
  langs:
  - csharp
  name: Load(String, LoadOptions)
  nameWithType: XElement.Load(String, LoadOptions)
  fullName: XElement.Load(String, LoadOptions)
  type: Method
  assemblies:
  - System.Xml.XDocument
  - System.Xml.Linq
  - netstandard
  namespace: System.Xml.Linq
  summary: Loads an <xref href="System.Xml.Linq.XElement"></xref> from a file, optionally preserving white space, setting the base URI, and retaining line information.
  remarks: "If the source XML is indented, setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` causes the reader to read all white space in the source XML. Nodes of type <xref:System.Xml.Linq.XText> are created for both significant and insignificant white space.  \n  \n If the source XML is indented, not setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` causes the reader to ignore all of the insignificant white space in the source XML. The XML tree is created without any text nodes for insignificant white space.  \n  \n If the source XML is not indented, setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` has no effect. Significant white space is still preserved, and there are no spans of insignificant white space that could cause the creation of more white space text nodes.  \n  \n For more information, see [Preserving White Space while Loading or Parsing XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).  \n  \n Use <xref:System.Xml.Linq.XElement.Parse%2A> to create an <xref:System.Xml.Linq.XElement> from a string that contains XML.  \n  \n There is a performance penalty if you set the <xref:System.Xml.Linq.LoadOptions.SetBaseUri> and the <xref:System.Xml.Linq.LoadOptions.SetLineInfo> flags.  \n  \n The base URI and the line information are accurate immediately after loading the XML document. If you modify the XML tree after loading the document, the base URI and line information may become meaningless.  \n  \n LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>. Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document."
  example:
  - "The following example loads an <xref:System.Xml.Linq.XElement> from a file in two different ways: preserving white space, and not preserving white space. It then uses a query to determine the number of white space nodes in the resulting XML tree.  \n  \n```csharp  \n  \n                XElement xmlTree1 = XElement.Parse(\"<Root> <Child>  </Child> </Root>\", LoadOptions.PreserveWhitespace);  \nxmlTree1.Save(\"Tree.xml\");  \nConsole.WriteLine(xmlTree1);  \n  \nint whiteSpaceNodes;  \nXElement xmlTree2 = XElement.Load(\"Tree.xml\",  \n    LoadOptions.None);  \nwhiteSpaceNodes = xmlTree2  \n    .DescendantNodesAndSelf()  \n    .OfType<XText>()  \n    .Where(tNode => tNode.ToString().Trim().Length == 0)  \n    .Count();  \nConsole.WriteLine(\"Count of white space nodes (not preserving whitespace): {0}\", whiteSpaceNodes);  \n  \nXElement xmlTree3 = XElement.Load(\"Tree.xml\",  \n    LoadOptions.PreserveWhitespace);  \nwhiteSpaceNodes = xmlTree3  \n    .DescendantNodesAndSelf()  \n    .OfType<XText>()  \n    .Where(tNode => tNode.ToString().Trim().Length == 0)  \n    .Count();  \nConsole.WriteLine(\"Count of white space nodes (preserving whitespace): {0}\", whiteSpaceNodes);  \n```  \n  \n```vb  \n  \n                Dim xmlTree1 As XElement = XElement.Parse(\"<Root> <Child>  </Child> </Root>\", LoadOptions.PreserveWhitespace)  \nxmlTree1.Save(\"Tree.xml\")  \nConsole.WriteLine(xmlTree1)  \n  \nDim whiteSpaceNodes As Integer  \nDim xmlTree2 As XElement = XElement.Load(\"Tree.xml\", LoadOptions.None)  \nwhiteSpaceNodes = xmlTree2 _  \n                  .DescendantNodesAndSelf() _  \n                  .OfType(Of XText)() _  \n                  .Where(Function(ByVal tNode As XNode) tNode.ToString().Trim().Length = 0) _  \n                  .Count()  \nConsole.WriteLine(\"Count of white space nodes (not preserving whitespace): {0}\", whiteSpaceNodes)  \n  \nDim xmlTree3 As XElement = XElement.Load(\"Tree.xml\", LoadOptions.PreserveWhitespace)  \nwhiteSpaceNodes = xmlTree3 _  \n                  .DescendantNodesAndSelf() _  \n                  .OfType(Of XText)() _  \n                  .Where(Function(ByVal tNode As XNode) tNode.ToString().Trim().Length = 0) _  \n                  .Count()  \nConsole.WriteLine(\"Count of white space nodes (preserving whitespace): {0}\", whiteSpaceNodes)  \n```  \n  \n This example produces the following output:  \n  \n```  \n  \n                <Root> <Child>  </Child> </Root>  \nCount of white space nodes (not preserving whitespace): 0  \nCount of white space nodes (preserving whitespace): 3  \n```  \n  \n The following example loads the base URI and line information as it loads the file. It then prints the base URI and the line information.  \n  \n This example uses the following resource file: [Sample XML File: Typical Purchase Order (LINQ to XML)](http://msdn.microsoft.com/library/0606c09f-6e43-4f8d-95c8-e8e2e08d2348).  \n  \n```csharp  \n  \n                XElement po = XElement.Load(\"PurchaseOrder.xml\",  \n    LoadOptions.SetBaseUri | LoadOptions.SetLineInfo);  \nstring[] splitUri = po.BaseUri.Split('/');  \nConsole.WriteLine(\"BaseUri: {0}\", splitUri[splitUri.Length - 1]);  \nConsole.WriteLine();  \nConsole.WriteLine(\"{0}{1}{2}\",  \n    \"Element Name\".PadRight(20),  \n    \"Line\".PadRight(5),  \n    \"Position\");  \nConsole.WriteLine(\"{0}{1}{2}\",  \n    \"------------\".PadRight(20),  \n    \"----\".PadRight(5),  \n    \"--------\");  \nforeach (XElement e in po.DescendantsAndSelf())  \n    Console.WriteLine(\"{0}{1}{2}\",  \n        (\"\".PadRight(e.Ancestors().Count() * 2) + e.Name).PadRight(20),  \n        ((IXmlLineInfo)e).LineNumber.ToString().PadRight(5),  \n        ((IXmlLineInfo)e).LinePosition);  \n```  \n  \n```vb  \n  \n        Dim po As XElement = XElement.Load(\"PurchaseOrder.xml\", LoadOptions.SetBaseUri Or LoadOptions.SetLineInfo)  \nDim splitUri() As String = po.BaseUri.Split(\"/\")  \nConsole.WriteLine(\"BaseUri: {0}\", splitUri(splitUri.Length - 1))  \nConsole.WriteLine()  \nConsole.WriteLine(\"{0}{1}{2}\", _  \n    \"Element Name\".PadRight(20), _  \n    \"Line\".PadRight(5), _  \n    \"Position\")  \nConsole.WriteLine(\"{0}{1}{2}\", _  \n    \"------------\".PadRight(20), _  \n    \"----\".PadRight(5), _  \n    \"--------\")  \nFor Each e As XElement In po.DescendantsAndSelf()  \n    Console.WriteLine(\"{0}{1}{2}\", _  \n        (\"\".PadRight(e.Ancestors().Count() * 2) & e.Name.ToString()).PadRight(20), _  \n        (DirectCast(e, IXmlLineInfo)).LineNumber.ToString().PadRight(5), _  \n        (DirectCast(e, IXmlLineInfo)).LinePosition)  \nNext  \n```  \n  \n This example produces the following output:  \n  \n```  \n  \n                BaseUri: PurchaseOrder.xml  \n  \nElement Name        Line Position  \n------------        ---- --------  \nPurchaseOrder       2    2  \n  Address           3    4  \n    Name            4    6  \n    Street          5    6  \n    City            6    6  \n    State           7    6  \n    Zip             8    6  \n    Country         9    6  \n  Address           11   4  \n    Name            12   6  \n    Street          13   6  \n    City            14   6  \n    State           15   6  \n    Zip             16   6  \n    Country         17   6  \n  DeliveryNotes     19   4  \n  Items             20   4  \n    Item            21   6  \n      ProductName   22   8  \n      Quantity      23   8  \n      USPrice       24   8  \n      Comment       25   8  \n    Item            27   6  \n      ProductName   28   8  \n      Quantity      29   8  \n      USPrice       30   8  \n      ShipDate      31   8  \n```"
  syntax:
    content: public static System.Xml.Linq.XElement Load (string uri, System.Xml.Linq.LoadOptions options);
    parameters:
    - id: uri
      type: System.String
      description: A URI string referencing the file to load into an <xref href="System.Xml.Linq.XElement"></xref>.
    - id: options
      type: System.Xml.Linq.LoadOptions
      description: A <xref href="System.Xml.Linq.LoadOptions"></xref> that specifies white space behavior, and whether to load base URI and line information.
    return:
      type: System.Xml.Linq.XElement
      description: An <xref href="System.Xml.Linq.XElement"></xref> that contains the contents of the specified file.
  overload: System.Xml.Linq.XElement.Load*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Xml.Linq.XElement.Load(System.IO.Stream,System.Xml.Linq.LoadOptions)
  commentId: M:System.Xml.Linq.XElement.Load(System.IO.Stream,System.Xml.Linq.LoadOptions)
  id: Load(System.IO.Stream,System.Xml.Linq.LoadOptions)
  parent: System.Xml.Linq.XElement
  langs:
  - csharp
  name: Load(Stream, LoadOptions)
  nameWithType: XElement.Load(Stream, LoadOptions)
  fullName: XElement.Load(Stream, LoadOptions)
  type: Method
  assemblies:
  - System.Xml.XDocument
  - System.Xml.Linq
  - netstandard
  namespace: System.Xml.Linq
  summary: Creates a new <xref href="System.Xml.Linq.XElement"></xref> instance by using the specified stream, optionally preserving white space, setting the base URI, and retaining line information.
  remarks: "LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>. Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.  \n  \n If you have to modify <xref:System.Xml.XmlReaderSettings>, following these steps:  \n  \n1.  Create an <xref:System.Xml.XmlReader> by calling one of the <xref:System.Xml.XmlReader.Create%2A> overloads that take <xref:System.Xml.XmlReaderSettings> as a parameter.  \n  \n2.  Pass the <xref:System.Xml.XmlReader> to one of the <xref:System.Xml.Linq.XElement>'s <xref:System.Xml.Linq.XElement.Load%2A> overloads that takes <xref:System.Xml.XmlReader> as a parameter."
  syntax:
    content: public static System.Xml.Linq.XElement Load (System.IO.Stream stream, System.Xml.Linq.LoadOptions options);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: The stream containing the XML data.
    - id: options
      type: System.Xml.Linq.LoadOptions
      description: A <xref href="System.Xml.Linq.LoadOptions"></xref> object that specifies whether to load base URI and line information.
    return:
      type: System.Xml.Linq.XElement
      description: An <xref href="System.Xml.Linq.XElement"></xref> object used to read the data that the stream contains.
  overload: System.Xml.Linq.XElement.Load*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Xml.Linq.XElement.Load(System.IO.TextReader)
  commentId: M:System.Xml.Linq.XElement.Load(System.IO.TextReader)
  id: Load(System.IO.TextReader)
  parent: System.Xml.Linq.XElement
  langs:
  - csharp
  name: Load(TextReader)
  nameWithType: XElement.Load(TextReader)
  fullName: XElement.Load(TextReader)
  type: Method
  assemblies:
  - System.Xml.XDocument
  - System.Xml.Linq
  - netstandard
  namespace: System.Xml.Linq
  summary: Loads an <xref href="System.Xml.Linq.XElement"></xref> from a <xref href="System.IO.TextReader"></xref>.
  remarks: "This method reads the raw XML into the XML tree. It discards all insignificant white space in the file.  \n  \n LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>. Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document."
  example:
  - "The following example loads an element from a <xref:System.IO.StringReader>.  \n  \n```csharp  \n  \n                TextReader sr = new StringReader(\"<Root><Child/></Root>\");  \nXElement xmlTree = XElement.Load(sr);  \nsr.Close();  \nConsole.WriteLine(xmlTree);  \n```  \n  \n```vb  \n  \n                Dim sr As TextReader = New StringReader(\"<Root><Child/></Root>\")  \nDim xmlTree As XElement = XElement.Load(sr)  \nsr.Close()  \nConsole.WriteLine(xmlTree)  \n  \n```  \n  \n This example produces the following output:  \n  \n```xml  \n  \n                <Root>  \n  <Child />  \n</Root>  \n```"
  syntax:
    content: public static System.Xml.Linq.XElement Load (System.IO.TextReader textReader);
    parameters:
    - id: textReader
      type: System.IO.TextReader
      description: A <xref href="System.IO.TextReader"></xref> that will be read for the <xref href="System.Xml.Linq.XElement"></xref> content.
    return:
      type: System.Xml.Linq.XElement
      description: An <xref href="System.Xml.Linq.XElement"></xref> that contains the XML that was read from the specified <xref href="System.IO.TextReader"></xref>.
  overload: System.Xml.Linq.XElement.Load*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Xml.Linq.XElement.Load(System.String)
  commentId: M:System.Xml.Linq.XElement.Load(System.String)
  id: Load(System.String)
  parent: System.Xml.Linq.XElement
  langs:
  - csharp
  name: Load(String)
  nameWithType: XElement.Load(String)
  fullName: XElement.Load(String)
  type: Method
  assemblies:
  - System.Xml.XDocument
  - System.Xml.Linq
  - netstandard
  namespace: System.Xml.Linq
  summary: Loads an <xref href="System.Xml.Linq.XElement"></xref> from a file.
  remarks: "This method reads the raw XML into the XML tree. It discards all insignificant white space in the file.  \n  \n LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>. Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document."
  example:
  - "The following example creates an XML tree, saves it to a file, and then uses this method to load the <xref:System.Xml.Linq.XElement> from the file.  \n  \n```csharp  \n  \n                XElement xmlTree1 = new XElement(\"Root\",  \n    new XElement(\"Child\", \"content\")  \n);  \nxmlTree1.Save(\"Tree.xml\");  \n  \nXElement xmlTree2 = XElement.Load(\"Tree.xml\");  \nConsole.WriteLine(xmlTree2.Name);  \n```  \n  \n```vb  \n  \n                Dim xmlTree1 As XElement = _   \n        <Root>  \n            <Child>Content</Child>  \n        </Root>  \nxmlTree1.Save(\"Tree.xml\")  \n  \nDim xmlTree2 As XElement = XElement.Load(\"Tree.xml\")  \nConsole.WriteLine(xmlTree2.Name)  \n  \n```  \n  \n This example produces the following output:  \n  \n```  \n  \nRoot  \n```"
  syntax:
    content: public static System.Xml.Linq.XElement Load (string uri);
    parameters:
    - id: uri
      type: System.String
      description: A URI string referencing the file to load into a new <xref href="System.Xml.Linq.XElement"></xref>.
    return:
      type: System.Xml.Linq.XElement
      description: An <xref href="System.Xml.Linq.XElement"></xref> that contains the contents of the specified file.
  overload: System.Xml.Linq.XElement.Load*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Xml.Linq.XElement.Load(System.IO.Stream)
  commentId: M:System.Xml.Linq.XElement.Load(System.IO.Stream)
  id: Load(System.IO.Stream)
  parent: System.Xml.Linq.XElement
  langs:
  - csharp
  name: Load(Stream)
  nameWithType: XElement.Load(Stream)
  fullName: XElement.Load(Stream)
  type: Method
  assemblies:
  - System.Xml.XDocument
  - System.Xml.Linq
  - netstandard
  namespace: System.Xml.Linq
  summary: Creates a new <xref href="System.Xml.Linq.XElement"></xref> instance by using the specified stream.
  remarks: "If you want to control load options, use the <xref:System.Xml.Linq.XElement.Load%2A> overload that takes <xref:System.Xml.Linq.LoadOptions> as a parameter.  \n  \n LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>. Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.  \n  \n If you have to modify <xref:System.Xml.XmlReaderSettings>, following these steps:  \n  \n1.  Create an <xref:System.Xml.XmlReader> by calling one of the <xref:System.Xml.XmlReader.Create%2A> overloads that take <xref:System.Xml.XmlReaderSettings> as a parameter.  \n  \n2.  Pass the <xref:System.Xml.XmlReader> to one of the <xref:System.Xml.Linq.XElement>'s <xref:System.Xml.Linq.XElement.Load%2A> overloads that takes <xref:System.Xml.XmlReader> as a parameter."
  syntax:
    content: public static System.Xml.Linq.XElement Load (System.IO.Stream stream);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: The stream that contains the XML data.
    return:
      type: System.Xml.Linq.XElement
      description: An <xref href="System.Xml.Linq.XElement"></xref> object used to read the data that is contained in the stream.
  overload: System.Xml.Linq.XElement.Load*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Xml.Linq.XElement.Load(System.Xml.XmlReader)
  commentId: M:System.Xml.Linq.XElement.Load(System.Xml.XmlReader)
  id: Load(System.Xml.XmlReader)
  parent: System.Xml.Linq.XElement
  langs:
  - csharp
  name: Load(XmlReader)
  nameWithType: XElement.Load(XmlReader)
  fullName: XElement.Load(XmlReader)
  type: Method
  assemblies:
  - System.Xml.XDocument
  - System.Xml.Linq
  - netstandard
  namespace: System.Xml.Linq
  summary: Loads an <xref href="System.Xml.Linq.XElement"></xref> from an <xref href="System.Xml.XmlReader"></xref>.
  remarks: "By creating an <xref:System.Xml.XmlNodeReader> from a DOM document, and then using the <xref:System.Xml.XmlNodeReader> to create an <xref:System.Xml.Linq.XElement>, this method can be used to create a copy of a DOM document in a LINQ to XML tree.  \n  \n LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>. Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document."
  example:
  - "The following example creates a DOM document, creates an <xref:System.Xml.XmlNodeReader> from the DOM document, instantiates a tree from the reader. This code effectively copies a DOM document into a LINQ to XML tree.  \n  \n```csharp  \n// Create a DOM document with some content.  \nXmlDocument doc = new XmlDocument();  \nXmlElement child = doc.CreateElement(\"Child\");  \nchild.InnerText = \"child contents\";  \nXmlElement root = doc.CreateElement(\"Root\");  \nroot.AppendChild(child);  \ndoc.AppendChild(root);  \n  \n// Create a reader and move to the content.  \nusing (XmlNodeReader nodeReader = new XmlNodeReader(doc)) {  \n    // the reader must be in the Interactive state in order to  \n    // Create a LINQ to XML tree from it.  \n    nodeReader.MoveToContent();  \n  \n    XElement xRoot = XElement.Load(nodeReader);  \n    Console.WriteLine(xRoot);  \n}  \n```  \n  \n```vb  \n' Create a DOM document with some content.  \nDim doc As XmlDocument = New XmlDocument()  \nDim child As XmlElement = doc.CreateElement(\"Child\")  \nchild.InnerText = \"child contents\"  \nDim root As XmlElement = doc.CreateElement(\"Root\")  \nroot.AppendChild(child)  \ndoc.AppendChild(root)  \n  \n' Create a reader and move to the content.  \nUsing nodeReader = New XmlNodeReader(doc)  \n    ' the reader must be in the Interactive state in order to  \n    ' Create a LINQ to XML tree from it.  \n    nodeReader.MoveToContent()  \n  \n    Dim xRoot As XElement = XElement.Load(nodeReader)  \n    Console.WriteLine(xRoot)  \nEnd Using  \n  \n```  \n  \n This example produces the following output:  \n  \n```xml  \n  \n                <Root>  \n  <Child>child contents</Child>  \n</Root>  \n```"
  syntax:
    content: public static System.Xml.Linq.XElement Load (System.Xml.XmlReader reader);
    parameters:
    - id: reader
      type: System.Xml.XmlReader
      description: A <xref href="System.Xml.XmlReader"></xref> that will be read for the content of the <xref href="System.Xml.Linq.XElement"></xref>.
    return:
      type: System.Xml.Linq.XElement
      description: An <xref href="System.Xml.Linq.XElement"></xref> that contains the XML that was read from the specified <xref href="System.Xml.XmlReader"></xref>.
  overload: System.Xml.Linq.XElement.Load*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Xml.Linq.XElement.LoadAsync(System.IO.Stream,System.Xml.Linq.LoadOptions,System.Threading.CancellationToken)
  commentId: M:System.Xml.Linq.XElement.LoadAsync(System.IO.Stream,System.Xml.Linq.LoadOptions,System.Threading.CancellationToken)
  id: LoadAsync(System.IO.Stream,System.Xml.Linq.LoadOptions,System.Threading.CancellationToken)
  parent: System.Xml.Linq.XElement
  langs:
  - csharp
  name: LoadAsync(Stream, LoadOptions, CancellationToken)
  nameWithType: XElement.LoadAsync(Stream, LoadOptions, CancellationToken)
  fullName: XElement.LoadAsync(Stream, LoadOptions, CancellationToken)
  type: Method
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  syntax:
    content: public static System.Threading.Tasks.Task<System.Xml.Linq.XElement> LoadAsync (System.IO.Stream stream, System.Xml.Linq.LoadOptions options, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: ''
    - id: options
      type: System.Xml.Linq.LoadOptions
      description: ''
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: ''
    return:
      type: System.Threading.Tasks.Task{System.Xml.Linq.XElement}
      description: ''
  overload: System.Xml.Linq.XElement.LoadAsync*
  exceptions: []
  version:
  - netcore-2.0
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml
- uid: System.Xml.Linq.XElement.LoadAsync(System.IO.TextReader,System.Xml.Linq.LoadOptions,System.Threading.CancellationToken)
  commentId: M:System.Xml.Linq.XElement.LoadAsync(System.IO.TextReader,System.Xml.Linq.LoadOptions,System.Threading.CancellationToken)
  id: LoadAsync(System.IO.TextReader,System.Xml.Linq.LoadOptions,System.Threading.CancellationToken)
  parent: System.Xml.Linq.XElement
  langs:
  - csharp
  name: LoadAsync(TextReader, LoadOptions, CancellationToken)
  nameWithType: XElement.LoadAsync(TextReader, LoadOptions, CancellationToken)
  fullName: XElement.LoadAsync(TextReader, LoadOptions, CancellationToken)
  type: Method
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  syntax:
    content: public static System.Threading.Tasks.Task<System.Xml.Linq.XElement> LoadAsync (System.IO.TextReader textReader, System.Xml.Linq.LoadOptions options, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: textReader
      type: System.IO.TextReader
      description: ''
    - id: options
      type: System.Xml.Linq.LoadOptions
      description: ''
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: ''
    return:
      type: System.Threading.Tasks.Task{System.Xml.Linq.XElement}
      description: ''
  overload: System.Xml.Linq.XElement.LoadAsync*
  exceptions: []
  version:
  - netcore-2.0
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml
- uid: System.Xml.Linq.XElement.LoadAsync(System.Xml.XmlReader,System.Xml.Linq.LoadOptions,System.Threading.CancellationToken)
  commentId: M:System.Xml.Linq.XElement.LoadAsync(System.Xml.XmlReader,System.Xml.Linq.LoadOptions,System.Threading.CancellationToken)
  id: LoadAsync(System.Xml.XmlReader,System.Xml.Linq.LoadOptions,System.Threading.CancellationToken)
  parent: System.Xml.Linq.XElement
  langs:
  - csharp
  name: LoadAsync(XmlReader, LoadOptions, CancellationToken)
  nameWithType: XElement.LoadAsync(XmlReader, LoadOptions, CancellationToken)
  fullName: XElement.LoadAsync(XmlReader, LoadOptions, CancellationToken)
  type: Method
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  syntax:
    content: public static System.Threading.Tasks.Task<System.Xml.Linq.XElement> LoadAsync (System.Xml.XmlReader reader, System.Xml.Linq.LoadOptions options, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: reader
      type: System.Xml.XmlReader
      description: ''
    - id: options
      type: System.Xml.Linq.LoadOptions
      description: ''
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: ''
    return:
      type: System.Threading.Tasks.Task{System.Xml.Linq.XElement}
      description: ''
  overload: System.Xml.Linq.XElement.LoadAsync*
  exceptions: []
  version:
  - netcore-2.0
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml
- uid: System.Xml.Linq.XElement.Name
  commentId: P:System.Xml.Linq.XElement.Name
  id: Name
  parent: System.Xml.Linq.XElement
  langs:
  - csharp
  name: Name
  nameWithType: XElement.Name
  fullName: XElement.Name
  type: Property
  assemblies:
  - System.Xml.XDocument
  - System.Xml.Linq
  - netstandard
  namespace: System.Xml.Linq
  summary: Gets or sets the name of this element.
  remarks: Setting this property will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.
  example:
  - "The following example uses this property to determine the name of an element.  \n  \n```csharp  \n  \n                XElement el1 = new XElement(\"Root\", \"content\");  \nConsole.WriteLine(el1.Name);  \n  \nXNamespace ns = \"http://www.adventure-works.com\";  \nXElement el2 = new XElement(ns + \"Root\", \"content\");  \nConsole.WriteLine(el2.Name);  \nConsole.WriteLine(el2.Name.Namespace);  \nConsole.WriteLine(el2.Name.LocalName);  \nel2.Name = ns + \"NewName\";  \nConsole.WriteLine(el2.Name);  \n```  \n  \n```vb  \n  \n                Imports <xmlns:aw=\"http://www.adventure-works.com\">  \n  \nModule Module1  \n    Sub Main()  \n        Dim el1 As XElement = <Root>content</Root>  \n        Console.WriteLine(el1.Name)  \n  \n        Dim el2 As XElement = <aw:Root>content</aw:Root>  \n        Console.WriteLine(el2.Name)  \n        Console.WriteLine(el2.Name.Namespace)  \n        Console.WriteLine(el2.Name.LocalName)  \n        Dim aw as XNamespace = GetXmlNamespace(aw)  \n        el2.Name = aw + \"NewName\"  \n        Console.WriteLine(el2.Name)  \n    End Sub  \nEnd Module  \n```  \n  \n This example produces the following output:  \n  \n```  \n  \n                Root  \n{http://www.adventure-works.com}Root  \nhttp://www.adventure-works.com  \nRoot  \n{http://www.adventure-works.com}NewName  \n```"
  syntax:
    content: public System.Xml.Linq.XName Name { get; set; }
    return:
      type: System.Xml.Linq.XName
      description: An <xref href="System.Xml.Linq.XName"></xref> that contains the name of this element.
  overload: System.Xml.Linq.XElement.Name*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Xml.Linq.XElement.NodeType
  commentId: P:System.Xml.Linq.XElement.NodeType
  id: NodeType
  parent: System.Xml.Linq.XElement
  langs:
  - csharp
  name: NodeType
  nameWithType: XElement.NodeType
  fullName: XElement.NodeType
  type: Property
  assemblies:
  - System.Xml.XDocument
  - System.Xml.Linq
  - netstandard
  namespace: System.Xml.Linq
  summary: Gets the node type for this node.
  remarks: Because all classes that derive from <xref:System.Xml.Linq.XObject> contain a <xref:System.Xml.Linq.XObject.NodeType%2A> property, you can write code that operates on collections of concrete subclass of <xref:System.Xml.Linq.XObject>. Your code can then test for the node type of each node in the collection.
  example:
  - "The following example uses this property to print the node type of an element.  \n  \n```csharp  \n  \n                XElement el1 = new XElement(\"Root\", \"content\");  \nConsole.WriteLine(el1.NodeType);  \nConsole.WriteLine();  \n```  \n  \n```vb  \n  \n                Dim el1 As XElement = <Root>content</Root>  \nConsole.WriteLine(el1.NodeType.ToString())  \nConsole.WriteLine()  \n  \n```  \n  \n This example produces the following output:  \n  \n```  \n  \nElement  \n```"
  syntax:
    content: public override System.Xml.XmlNodeType NodeType { get; }
    return:
      type: System.Xml.XmlNodeType
      description: The node type. For <xref href="System.Xml.Linq.XElement"></xref> objects, this value is <xref href="System.Xml.XmlNodeType.Element"></xref>.
  overload: System.Xml.Linq.XElement.NodeType*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.Nullable{System.Int64})
  commentId: M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Int64}
  id: op_Explicit(System.Xml.Linq.XElement to System.Nullable{System.Int64})
  parent: System.Xml.Linq.XElement
  langs:
  - csharp
  name: op_Explicit(XElement to Nullable<Int64>)
  nameWithType: XElement.op_Explicit(XElement to Nullable<Int64>)
  fullName: XElement.op_Explicit(XElement to Nullable<Int64>)
  type: Operator
  assemblies:
  - System.Xml.XDocument
  - System.Xml.Linq
  - netstandard
  namespace: System.Xml.Linq
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static Nullable<long> op_Explicit (System.Xml.Linq.XElement element);
    parameters:
    - id: element
      type: System.Xml.Linq.XElement
      description: ''
    return:
      type: System.Nullable{System.Int64}
      description: ''
  overload: System.Xml.Linq.XElement.op_Explicit*
  exceptions: []
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml
- uid: System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.Nullable{System.Single})
  commentId: M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Single}
  id: op_Explicit(System.Xml.Linq.XElement to System.Nullable{System.Single})
  parent: System.Xml.Linq.XElement
  langs:
  - csharp
  name: op_Explicit(XElement to Nullable<Single>)
  nameWithType: XElement.op_Explicit(XElement to Nullable<Single>)
  fullName: XElement.op_Explicit(XElement to Nullable<Single>)
  type: Operator
  assemblies:
  - System.Xml.XDocument
  - System.Xml.Linq
  - netstandard
  namespace: System.Xml.Linq
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static Nullable<float> op_Explicit (System.Xml.Linq.XElement element);
    parameters:
    - id: element
      type: System.Xml.Linq.XElement
      description: ''
    return:
      type: System.Nullable{System.Single}
      description: ''
  overload: System.Xml.Linq.XElement.op_Explicit*
  exceptions: []
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml
- uid: System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.Nullable{System.TimeSpan})
  commentId: M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.TimeSpan}
  id: op_Explicit(System.Xml.Linq.XElement to System.Nullable{System.TimeSpan})
  parent: System.Xml.Linq.XElement
  langs:
  - csharp
  name: op_Explicit(XElement to Nullable<TimeSpan>)
  nameWithType: XElement.op_Explicit(XElement to Nullable<TimeSpan>)
  fullName: XElement.op_Explicit(XElement to Nullable<TimeSpan>)
  type: Operator
  assemblies:
  - System.Xml.XDocument
  - System.Xml.Linq
  - netstandard
  namespace: System.Xml.Linq
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static Nullable<TimeSpan> op_Explicit (System.Xml.Linq.XElement element);
    parameters:
    - id: element
      type: System.Xml.Linq.XElement
      description: ''
    return:
      type: System.Nullable{System.TimeSpan}
      description: ''
  overload: System.Xml.Linq.XElement.op_Explicit*
  exceptions: []
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml
- uid: System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.Nullable{System.UInt32})
  commentId: M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.UInt32}
  id: op_Explicit(System.Xml.Linq.XElement to System.Nullable{System.UInt32})
  parent: System.Xml.Linq.XElement
  langs:
  - csharp
  name: op_Explicit(XElement to Nullable<UInt32>)
  nameWithType: XElement.op_Explicit(XElement to Nullable<UInt32>)
  fullName: XElement.op_Explicit(XElement to Nullable<UInt32>)
  type: Operator
  assemblies:
  - System.Xml.XDocument
  - System.Xml.Linq
  - netstandard
  namespace: System.Xml.Linq
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static Nullable<uint> op_Explicit (System.Xml.Linq.XElement element);
    parameters:
    - id: element
      type: System.Xml.Linq.XElement
      description: ''
    return:
      type: System.Nullable{System.UInt32}
      description: ''
  overload: System.Xml.Linq.XElement.op_Explicit*
  exceptions: []
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml
- uid: System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.Nullable{System.UInt64})
  commentId: M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.UInt64}
  id: op_Explicit(System.Xml.Linq.XElement to System.Nullable{System.UInt64})
  parent: System.Xml.Linq.XElement
  langs:
  - csharp
  name: op_Explicit(XElement to Nullable<UInt64>)
  nameWithType: XElement.op_Explicit(XElement to Nullable<UInt64>)
  fullName: XElement.op_Explicit(XElement to Nullable<UInt64>)
  type: Operator
  assemblies:
  - System.Xml.XDocument
  - System.Xml.Linq
  - netstandard
  namespace: System.Xml.Linq
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static Nullable<ulong> op_Explicit (System.Xml.Linq.XElement element);
    parameters:
    - id: element
      type: System.Xml.Linq.XElement
      description: ''
    return:
      type: System.Nullable{System.UInt64}
      description: ''
  overload: System.Xml.Linq.XElement.op_Explicit*
  exceptions: []
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml
- uid: System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.UInt32)
  commentId: M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.UInt32
  id: op_Explicit(System.Xml.Linq.XElement to System.UInt32)
  parent: System.Xml.Linq.XElement
  langs:
  - csharp
  name: op_Explicit(XElement to UInt32)
  nameWithType: XElement.op_Explicit(XElement to UInt32)
  fullName: XElement.op_Explicit(XElement to UInt32)
  type: Operator
  assemblies:
  - System.Xml.XDocument
  - System.Xml.Linq
  - netstandard
  namespace: System.Xml.Linq
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static uint op_Explicit (System.Xml.Linq.XElement element);
    parameters:
    - id: element
      type: System.Xml.Linq.XElement
      description: ''
    return:
      type: System.UInt32
      description: ''
  overload: System.Xml.Linq.XElement.op_Explicit*
  exceptions: []
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml
- uid: System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.String)
  commentId: M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.String
  id: op_Explicit(System.Xml.Linq.XElement to System.String)
  parent: System.Xml.Linq.XElement
  langs:
  - csharp
  name: op_Explicit(XElement to String)
  nameWithType: XElement.op_Explicit(XElement to String)
  fullName: XElement.op_Explicit(XElement to String)
  type: Operator
  assemblies:
  - System.Xml.XDocument
  - System.Xml.Linq
  - netstandard
  namespace: System.Xml.Linq
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static string op_Explicit (System.Xml.Linq.XElement element);
    parameters:
    - id: element
      type: System.Xml.Linq.XElement
      description: ''
    return:
      type: System.String
      description: ''
  overload: System.Xml.Linq.XElement.op_Explicit*
  exceptions: []
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml
- uid: System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.TimeSpan)
  commentId: M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.TimeSpan
  id: op_Explicit(System.Xml.Linq.XElement to System.TimeSpan)
  parent: System.Xml.Linq.XElement
  langs:
  - csharp
  name: op_Explicit(XElement to TimeSpan)
  nameWithType: XElement.op_Explicit(XElement to TimeSpan)
  fullName: XElement.op_Explicit(XElement to TimeSpan)
  type: Operator
  assemblies:
  - System.Xml.XDocument
  - System.Xml.Linq
  - netstandard
  namespace: System.Xml.Linq
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static TimeSpan op_Explicit (System.Xml.Linq.XElement element);
    parameters:
    - id: element
      type: System.Xml.Linq.XElement
      description: ''
    return:
      type: System.TimeSpan
      description: ''
  overload: System.Xml.Linq.XElement.op_Explicit*
  exceptions: []
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml
- uid: System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.UInt64)
  commentId: M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.UInt64
  id: op_Explicit(System.Xml.Linq.XElement to System.UInt64)
  parent: System.Xml.Linq.XElement
  langs:
  - csharp
  name: op_Explicit(XElement to UInt64)
  nameWithType: XElement.op_Explicit(XElement to UInt64)
  fullName: XElement.op_Explicit(XElement to UInt64)
  type: Operator
  assemblies:
  - System.Xml.XDocument
  - System.Xml.Linq
  - netstandard
  namespace: System.Xml.Linq
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static ulong op_Explicit (System.Xml.Linq.XElement element);
    parameters:
    - id: element
      type: System.Xml.Linq.XElement
      description: ''
    return:
      type: System.UInt64
      description: ''
  overload: System.Xml.Linq.XElement.op_Explicit*
  exceptions: []
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml
- uid: System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.Nullable{System.Int32})
  commentId: M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Int32}
  id: op_Explicit(System.Xml.Linq.XElement to System.Nullable{System.Int32})
  parent: System.Xml.Linq.XElement
  langs:
  - csharp
  name: op_Explicit(XElement to Nullable<Int32>)
  nameWithType: XElement.op_Explicit(XElement to Nullable<Int32>)
  fullName: XElement.op_Explicit(XElement to Nullable<Int32>)
  type: Operator
  assemblies:
  - System.Xml.XDocument
  - System.Xml.Linq
  - netstandard
  namespace: System.Xml.Linq
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static Nullable<int> op_Explicit (System.Xml.Linq.XElement element);
    parameters:
    - id: element
      type: System.Xml.Linq.XElement
      description: ''
    return:
      type: System.Nullable{System.Int32}
      description: ''
  overload: System.Xml.Linq.XElement.op_Explicit*
  exceptions: []
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml
- uid: System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.Single)
  commentId: M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Single
  id: op_Explicit(System.Xml.Linq.XElement to System.Single)
  parent: System.Xml.Linq.XElement
  langs:
  - csharp
  name: op_Explicit(XElement to Single)
  nameWithType: XElement.op_Explicit(XElement to Single)
  fullName: XElement.op_Explicit(XElement to Single)
  type: Operator
  assemblies:
  - System.Xml.XDocument
  - System.Xml.Linq
  - netstandard
  namespace: System.Xml.Linq
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static float op_Explicit (System.Xml.Linq.XElement element);
    parameters:
    - id: element
      type: System.Xml.Linq.XElement
      description: ''
    return:
      type: System.Single
      description: ''
  overload: System.Xml.Linq.XElement.op_Explicit*
  exceptions: []
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml
- uid: System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.Nullable{System.Guid})
  commentId: M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Guid}
  id: op_Explicit(System.Xml.Linq.XElement to System.Nullable{System.Guid})
  parent: System.Xml.Linq.XElement
  langs:
  - csharp
  name: op_Explicit(XElement to Nullable<Guid>)
  nameWithType: XElement.op_Explicit(XElement to Nullable<Guid>)
  fullName: XElement.op_Explicit(XElement to Nullable<Guid>)
  type: Operator
  assemblies:
  - System.Xml.XDocument
  - System.Xml.Linq
  - netstandard
  namespace: System.Xml.Linq
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static Nullable<Guid> op_Explicit (System.Xml.Linq.XElement element);
    parameters:
    - id: element
      type: System.Xml.Linq.XElement
      description: ''
    return:
      type: System.Nullable{System.Guid}
      description: ''
  overload: System.Xml.Linq.XElement.op_Explicit*
  exceptions: []
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml
- uid: System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.Nullable{System.Boolean})
  commentId: M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Boolean}
  id: op_Explicit(System.Xml.Linq.XElement to System.Nullable{System.Boolean})
  parent: System.Xml.Linq.XElement
  langs:
  - csharp
  name: op_Explicit(XElement to Nullable<Boolean>)
  nameWithType: XElement.op_Explicit(XElement to Nullable<Boolean>)
  fullName: XElement.op_Explicit(XElement to Nullable<Boolean>)
  type: Operator
  assemblies:
  - System.Xml.XDocument
  - System.Xml.Linq
  - netstandard
  namespace: System.Xml.Linq
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static Nullable<bool> op_Explicit (System.Xml.Linq.XElement element);
    parameters:
    - id: element
      type: System.Xml.Linq.XElement
      description: ''
    return:
      type: System.Nullable{System.Boolean}
      description: ''
  overload: System.Xml.Linq.XElement.op_Explicit*
  exceptions: []
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml
- uid: System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.Nullable{System.Decimal})
  commentId: M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Decimal}
  id: op_Explicit(System.Xml.Linq.XElement to System.Nullable{System.Decimal})
  parent: System.Xml.Linq.XElement
  langs:
  - csharp
  name: op_Explicit(XElement to Nullable<Decimal>)
  nameWithType: XElement.op_Explicit(XElement to Nullable<Decimal>)
  fullName: XElement.op_Explicit(XElement to Nullable<Decimal>)
  type: Operator
  assemblies:
  - System.Xml.XDocument
  - System.Xml.Linq
  - netstandard
  namespace: System.Xml.Linq
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static Nullable<decimal> op_Explicit (System.Xml.Linq.XElement element);
    parameters:
    - id: element
      type: System.Xml.Linq.XElement
      description: ''
    return:
      type: System.Nullable{System.Decimal}
      description: ''
  overload: System.Xml.Linq.XElement.op_Explicit*
  exceptions: []
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml
- uid: System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.Boolean)
  commentId: M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Boolean
  id: op_Explicit(System.Xml.Linq.XElement to System.Boolean)
  parent: System.Xml.Linq.XElement
  langs:
  - csharp
  name: op_Explicit(XElement to Boolean)
  nameWithType: XElement.op_Explicit(XElement to Boolean)
  fullName: XElement.op_Explicit(XElement to Boolean)
  type: Operator
  assemblies:
  - System.Xml.XDocument
  - System.Xml.Linq
  - netstandard
  namespace: System.Xml.Linq
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static bool op_Explicit (System.Xml.Linq.XElement element);
    parameters:
    - id: element
      type: System.Xml.Linq.XElement
      description: ''
    return:
      type: System.Boolean
      description: ''
  overload: System.Xml.Linq.XElement.op_Explicit*
  exceptions: []
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml
- uid: System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.DateTime)
  commentId: M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.DateTime
  id: op_Explicit(System.Xml.Linq.XElement to System.DateTime)
  parent: System.Xml.Linq.XElement
  langs:
  - csharp
  name: op_Explicit(XElement to DateTime)
  nameWithType: XElement.op_Explicit(XElement to DateTime)
  fullName: XElement.op_Explicit(XElement to DateTime)
  type: Operator
  assemblies:
  - System.Xml.XDocument
  - System.Xml.Linq
  - netstandard
  namespace: System.Xml.Linq
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static DateTime op_Explicit (System.Xml.Linq.XElement element);
    parameters:
    - id: element
      type: System.Xml.Linq.XElement
      description: ''
    return:
      type: System.DateTime
      description: ''
  overload: System.Xml.Linq.XElement.op_Explicit*
  exceptions: []
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml
- uid: System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.DateTimeOffset)
  commentId: M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.DateTimeOffset
  id: op_Explicit(System.Xml.Linq.XElement to System.DateTimeOffset)
  parent: System.Xml.Linq.XElement
  langs:
  - csharp
  name: op_Explicit(XElement to DateTimeOffset)
  nameWithType: XElement.op_Explicit(XElement to DateTimeOffset)
  fullName: XElement.op_Explicit(XElement to DateTimeOffset)
  type: Operator
  assemblies:
  - System.Xml.XDocument
  - System.Xml.Linq
  - netstandard
  namespace: System.Xml.Linq
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static DateTimeOffset op_Explicit (System.Xml.Linq.XElement element);
    parameters:
    - id: element
      type: System.Xml.Linq.XElement
      description: ''
    return:
      type: System.DateTimeOffset
      description: ''
  overload: System.Xml.Linq.XElement.op_Explicit*
  exceptions: []
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml
- uid: System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.Double)
  commentId: M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Double
  id: op_Explicit(System.Xml.Linq.XElement to System.Double)
  parent: System.Xml.Linq.XElement
  langs:
  - csharp
  name: op_Explicit(XElement to Double)
  nameWithType: XElement.op_Explicit(XElement to Double)
  fullName: XElement.op_Explicit(XElement to Double)
  type: Operator
  assemblies:
  - System.Xml.XDocument
  - System.Xml.Linq
  - netstandard
  namespace: System.Xml.Linq
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static double op_Explicit (System.Xml.Linq.XElement element);
    parameters:
    - id: element
      type: System.Xml.Linq.XElement
      description: ''
    return:
      type: System.Double
      description: ''
  overload: System.Xml.Linq.XElement.op_Explicit*
  exceptions: []
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml
- uid: System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.Guid)
  commentId: M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Guid
  id: op_Explicit(System.Xml.Linq.XElement to System.Guid)
  parent: System.Xml.Linq.XElement
  langs:
  - csharp
  name: op_Explicit(XElement to Guid)
  nameWithType: XElement.op_Explicit(XElement to Guid)
  fullName: XElement.op_Explicit(XElement to Guid)
  type: Operator
  assemblies:
  - System.Xml.XDocument
  - System.Xml.Linq
  - netstandard
  namespace: System.Xml.Linq
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static Guid op_Explicit (System.Xml.Linq.XElement element);
    parameters:
    - id: element
      type: System.Xml.Linq.XElement
      description: ''
    return:
      type: System.Guid
      description: ''
  overload: System.Xml.Linq.XElement.op_Explicit*
  exceptions: []
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml
- uid: System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.Decimal)
  commentId: M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Decimal
  id: op_Explicit(System.Xml.Linq.XElement to System.Decimal)
  parent: System.Xml.Linq.XElement
  langs:
  - csharp
  name: op_Explicit(XElement to Decimal)
  nameWithType: XElement.op_Explicit(XElement to Decimal)
  fullName: XElement.op_Explicit(XElement to Decimal)
  type: Operator
  assemblies:
  - System.Xml.XDocument
  - System.Xml.Linq
  - netstandard
  namespace: System.Xml.Linq
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static decimal op_Explicit (System.Xml.Linq.XElement element);
    parameters:
    - id: element
      type: System.Xml.Linq.XElement
      description: ''
    return:
      type: System.Decimal
      description: ''
  overload: System.Xml.Linq.XElement.op_Explicit*
  exceptions: []
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml
- uid: System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.Int64)
  commentId: M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Int64
  id: op_Explicit(System.Xml.Linq.XElement to System.Int64)
  parent: System.Xml.Linq.XElement
  langs:
  - csharp
  name: op_Explicit(XElement to Int64)
  nameWithType: XElement.op_Explicit(XElement to Int64)
  fullName: XElement.op_Explicit(XElement to Int64)
  type: Operator
  assemblies:
  - System.Xml.XDocument
  - System.Xml.Linq
  - netstandard
  namespace: System.Xml.Linq
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static long op_Explicit (System.Xml.Linq.XElement element);
    parameters:
    - id: element
      type: System.Xml.Linq.XElement
      description: ''
    return:
      type: System.Int64
      description: ''
  overload: System.Xml.Linq.XElement.op_Explicit*
  exceptions: []
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml
- uid: System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.Nullable{System.Double})
  commentId: M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Double}
  id: op_Explicit(System.Xml.Linq.XElement to System.Nullable{System.Double})
  parent: System.Xml.Linq.XElement
  langs:
  - csharp
  name: op_Explicit(XElement to Nullable<Double>)
  nameWithType: XElement.op_Explicit(XElement to Nullable<Double>)
  fullName: XElement.op_Explicit(XElement to Nullable<Double>)
  type: Operator
  assemblies:
  - System.Xml.XDocument
  - System.Xml.Linq
  - netstandard
  namespace: System.Xml.Linq
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static Nullable<double> op_Explicit (System.Xml.Linq.XElement element);
    parameters:
    - id: element
      type: System.Xml.Linq.XElement
      description: ''
    return:
      type: System.Nullable{System.Double}
      description: ''
  overload: System.Xml.Linq.XElement.op_Explicit*
  exceptions: []
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml
- uid: System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.Nullable{System.DateTime})
  commentId: M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.DateTime}
  id: op_Explicit(System.Xml.Linq.XElement to System.Nullable{System.DateTime})
  parent: System.Xml.Linq.XElement
  langs:
  - csharp
  name: op_Explicit(XElement to Nullable<DateTime>)
  nameWithType: XElement.op_Explicit(XElement to Nullable<DateTime>)
  fullName: XElement.op_Explicit(XElement to Nullable<DateTime>)
  type: Operator
  assemblies:
  - System.Xml.XDocument
  - System.Xml.Linq
  - netstandard
  namespace: System.Xml.Linq
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static Nullable<DateTime> op_Explicit (System.Xml.Linq.XElement element);
    parameters:
    - id: element
      type: System.Xml.Linq.XElement
      description: ''
    return:
      type: System.Nullable{System.DateTime}
      description: ''
  overload: System.Xml.Linq.XElement.op_Explicit*
  exceptions: []
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml
- uid: System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.Nullable{System.DateTimeOffset})
  commentId: M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.DateTimeOffset}
  id: op_Explicit(System.Xml.Linq.XElement to System.Nullable{System.DateTimeOffset})
  parent: System.Xml.Linq.XElement
  langs:
  - csharp
  name: op_Explicit(XElement to Nullable<DateTimeOffset>)
  nameWithType: XElement.op_Explicit(XElement to Nullable<DateTimeOffset>)
  fullName: XElement.op_Explicit(XElement to Nullable<DateTimeOffset>)
  type: Operator
  assemblies:
  - System.Xml.XDocument
  - System.Xml.Linq
  - netstandard
  namespace: System.Xml.Linq
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static Nullable<DateTimeOffset> op_Explicit (System.Xml.Linq.XElement element);
    parameters:
    - id: element
      type: System.Xml.Linq.XElement
      description: ''
    return:
      type: System.Nullable{System.DateTimeOffset}
      description: ''
  overload: System.Xml.Linq.XElement.op_Explicit*
  exceptions: []
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml
- uid: System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.Int32)
  commentId: M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Int32
  id: op_Explicit(System.Xml.Linq.XElement to System.Int32)
  parent: System.Xml.Linq.XElement
  langs:
  - csharp
  name: op_Explicit(XElement to Int32)
  nameWithType: XElement.op_Explicit(XElement to Int32)
  fullName: XElement.op_Explicit(XElement to Int32)
  type: Operator
  assemblies:
  - System.Xml.XDocument
  - System.Xml.Linq
  - netstandard
  namespace: System.Xml.Linq
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static int op_Explicit (System.Xml.Linq.XElement element);
    parameters:
    - id: element
      type: System.Xml.Linq.XElement
      description: ''
    return:
      type: System.Int32
      description: ''
  overload: System.Xml.Linq.XElement.op_Explicit*
  exceptions: []
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml
- uid: System.Xml.Linq.XElement.Parse(System.String)
  commentId: M:System.Xml.Linq.XElement.Parse(System.String)
  id: Parse(System.String)
  parent: System.Xml.Linq.XElement
  langs:
  - csharp
  name: Parse(String)
  nameWithType: XElement.Parse(String)
  fullName: XElement.Parse(String)
  type: Method
  assemblies:
  - System.Xml.XDocument
  - System.Xml.Linq
  - netstandard
  namespace: System.Xml.Linq
  summary: Load an <xref href="System.Xml.Linq.XElement"></xref> from a string that contains XML.
  remarks: "This method does not preserve white space. If you want to preserve white space in the XML tree, use the overload of the <xref:System.Xml.Linq.XElement.Parse%2A> method that takes <xref:System.Xml.Linq.LoadOptions> as a parameter. For more information, see [Preserving White Space while Loading or Parsing XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).  \n  \n LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>. Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document."
  example:
  - "The following example creates a string that contains XML. It then parses the string into an <xref:System.Xml.Linq.XElement>.  \n  \n```csharp  \n  \n                XElement xmlTree = XElement.Parse(\"<Root> <Child> </Child> </Root>\");  \nConsole.WriteLine(xmlTree);  \n```  \n  \n```vb  \n  \n                Dim xmlTree As XElement = <Root><Child></Child></Root>  \nConsole.WriteLine(xmlTree)  \n```  \n  \n This example produces the following output:  \n  \n```xml  \n  \n                <Root>  \n  <Child></Child>  \n</Root>  \n```"
  syntax:
    content: public static System.Xml.Linq.XElement Parse (string text);
    parameters:
    - id: text
      type: System.String
      description: A <xref href="System.String"></xref> that contains XML.
    return:
      type: System.Xml.Linq.XElement
      description: An <xref href="System.Xml.Linq.XElement"></xref> populated from the string that contains XML.
  overload: System.Xml.Linq.XElement.Parse*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Xml.Linq.XElement.Parse(System.String,System.Xml.Linq.LoadOptions)
  commentId: M:System.Xml.Linq.XElement.Parse(System.String,System.Xml.Linq.LoadOptions)
  id: Parse(System.String,System.Xml.Linq.LoadOptions)
  parent: System.Xml.Linq.XElement
  langs:
  - csharp
  name: Parse(String, LoadOptions)
  nameWithType: XElement.Parse(String, LoadOptions)
  fullName: XElement.Parse(String, LoadOptions)
  type: Method
  assemblies:
  - System.Xml.XDocument
  - System.Xml.Linq
  - netstandard
  namespace: System.Xml.Linq
  summary: Load an <xref href="System.Xml.Linq.XElement"></xref> from a string that contains XML, optionally preserving white space and retaining line information.
  remarks: "If the source XML is indented, setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` causes the reader to read all white space in the source XML. Nodes of type <xref:System.Xml.Linq.XText> are created for both significant and insignificant white space.  \n  \n If the source XML is indented, not setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` causes the reader to ignore all of the insignificant white space in the source XML. The XML tree is created without any text nodes for insignificant white space.  \n  \n If the source XML is not indented, setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` has no effect. Significant white space is still preserved, and there are no spans of insignificant white space that could cause the creation of more white space text nodes.  \n  \n For more information, see [Preserving White Space while Loading or Parsing XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).  \n  \n Setting <xref:System.Xml.Linq.LoadOptions.SetBaseUri> will have no effect when parsing from a <xref:System.String>.  \n  \n The <xref:System.Xml.XmlReader> may have a valid line information or not. If you set <xref:System.Xml.Linq.LoadOptions.SetLineInfo>, the line information will be set in the XML tree from the line information that is reported by the <xref:System.Xml.XmlReader>.  \n  \n There is a performance penalty if you set the <xref:System.Xml.Linq.LoadOptions.SetLineInfo> flag.  \n  \n The line information is accurate immediately after loading the XML document. If you modify the XML tree after loading the document, the line information may become meaningless.  \n  \n LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>. Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document."
  example:
  - "The following example parses a string into an <xref:System.Xml.Linq.XElement> in two different ways: preserving white space, and not preserving white space. It then uses a query to determine the number of white space nodes in the resulting XML tree.  \n  \n```csharp  \n  \n                int whiteSpaceNodes;  \n  \nXElement xmlTree1 = XElement.Parse(\"<Root> <Child> </Child> </Root>\",  \n    LoadOptions.None);  \nwhiteSpaceNodes = xmlTree1  \n    .DescendantNodesAndSelf()  \n    .OfType<XText>()  \n    .Where(tNode => tNode.ToString().Trim().Length == 0)  \n    .Count();  \nConsole.WriteLine(\"Count of white space nodes (not preserving whitespace): {0}\",  \n    whiteSpaceNodes);  \n  \nXElement xmlTree2 = XElement.Parse(\"<Root> <Child> </Child> </Root>\",  \n    LoadOptions.PreserveWhitespace);  \nwhiteSpaceNodes = xmlTree2  \n    .DescendantNodesAndSelf()  \n    .OfType<XText>()  \n    .Where(tNode => tNode.ToString().Trim().Length == 0)  \n    .Count();  \nConsole.WriteLine(\"Count of white space nodes (preserving whitespace): {0}\",  \n    whiteSpaceNodes);  \n```  \n  \n```vb  \n  \n                Dim whiteSpaceNodes As Integer  \n  \nDim xmlTree1 As XElement = XElement.Parse(\"<Root> <Child> </Child> </Root>\", LoadOptions.None)  \nwhiteSpaceNodes = xmlTree1 _  \n    .DescendantNodesAndSelf() _  \n    .OfType(Of XText)() _  \n    .Where(Function(ByVal tNode As XNode) tNode.ToString().Trim().Length = 0) _  \n    .Count()  \nConsole.WriteLine(\"Count of white space nodes (not preserving whitespace): {0}\", whiteSpaceNodes)  \n  \nDim xmlTree2 As XElement = XElement.Parse(\"<Root> <Child> </Child> </Root>\", LoadOptions.PreserveWhitespace)  \nwhiteSpaceNodes = xmlTree2 _  \n    .DescendantNodesAndSelf() _  \n    .OfType(Of XText)() _  \n    .Where(Function(ByVal tNode As XNode) tNode.ToString().Trim().Length = 0) _  \n    .Count()  \nConsole.WriteLine(\"Count of white space nodes (preserving whitespace): {0}\", whiteSpaceNodes)  \n```  \n  \n This example produces the following output:  \n  \n```  \n  \n                Count of white space nodes (not preserving whitespace): 0  \nCount of white space nodes (preserving whitespace): 3  \n```  \n  \n The following example retains line information as it parses the string.  \n  \n```csharp  \n  \n                string markup =  \n@\"<Root>  \n    <Child>  \n        <GrandChild/>  \n    </Child>  \n</Root>\";  \n  \nXElement xRoot = XElement.Parse(markup, LoadOptions.SetLineInfo);  \nConsole.WriteLine(\"{0}{1}{2}\",  \n    \"Element Name\".PadRight(20),  \n    \"Line\".PadRight(5),  \n    \"Position\");  \nConsole.WriteLine(\"{0}{1}{2}\",  \n    \"------------\".PadRight(20),  \n    \"----\".PadRight(5),  \n    \"--------\");  \nforeach (XElement e in xRoot.DescendantsAndSelf())  \n    Console.WriteLine(\"{0}{1}{2}\",  \n        (\"\".PadRight(e.Ancestors().Count() * 2) + e.Name).PadRight(20),  \n        ((IXmlLineInfo)e).LineNumber.ToString().PadRight(5),  \n        ((IXmlLineInfo)e).LinePosition);  \n```  \n  \n```vb  \n  \n                Dim markup As String = _  \n\"<Root>\" & Environment.NewLine & _  \n\"    <Child>\" & Environment.NewLine & _  \n\"        <GrandChild/>\" & Environment.NewLine & _  \n\"    </Child>\" & Environment.NewLine & _  \n\"</Root>\"  \n  \nDim xRoot As XElement = XElement.Parse(markup, LoadOptions.SetLineInfo)  \nConsole.WriteLine(\"{0}{1}{2}\", _  \n    \"Element Name\".PadRight(20), _  \n    \"Line\".PadRight(5), _  \n    \"Position\")  \nConsole.WriteLine(\"{0}{1}{2}\", _  \n    \"------------\".PadRight(20), _  \n    \"----\".PadRight(5), _  \n    \"--------\")  \nFor Each e As XElement In xRoot.DescendantsAndSelf()  \n    Console.WriteLine(\"{0}{1}{2}\", _  \n        (\"\".PadRight(e.Ancestors().Count() * 2) & e.Name.ToString).PadRight(20), _  \n        DirectCast(e, IXmlLineInfo).LineNumber.ToString().PadRight(5), _  \n        DirectCast(e, IXmlLineInfo).LinePosition)  \nNext  \n```  \n  \n This example produces the following output:  \n  \n```  \n  \n                Element Name        Line Position  \n------------        ---- --------  \nRoot                1    2  \n  Child             2    6  \n    GrandChild      3    10  \n```"
  syntax:
    content: public static System.Xml.Linq.XElement Parse (string text, System.Xml.Linq.LoadOptions options);
    parameters:
    - id: text
      type: System.String
      description: A <xref href="System.String"></xref> that contains XML.
    - id: options
      type: System.Xml.Linq.LoadOptions
      description: A <xref href="System.Xml.Linq.LoadOptions"></xref> that specifies white space behavior, and whether to load base URI and line information.
    return:
      type: System.Xml.Linq.XElement
      description: An <xref href="System.Xml.Linq.XElement"></xref> populated from the string that contains XML.
  overload: System.Xml.Linq.XElement.Parse*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Xml.Linq.XElement.RemoveAll
  commentId: M:System.Xml.Linq.XElement.RemoveAll
  id: RemoveAll
  parent: System.Xml.Linq.XElement
  langs:
  - csharp
  name: RemoveAll()
  nameWithType: XElement.RemoveAll()
  fullName: XElement.RemoveAll()
  type: Method
  assemblies:
  - System.Xml.XDocument
  - System.Xml.Linq
  - netstandard
  namespace: System.Xml.Linq
  summary: Removes nodes and attributes from this <xref href="System.Xml.Linq.XElement"></xref>.
  remarks: This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.
  example:
  - "The following example creates an element with attributes and child elements. It then calls this method to remove both the attributes and the child elements.  \n  \n```csharp  \n  \n                XElement root = new XElement(\"Root\",  \n    new XAttribute(\"Att1\", 1),  \n    new XAttribute(\"Att2\", 2),  \n    new XAttribute(\"Att3\", 3),  \n    new XElement(\"Child1\", 1),  \n    new XElement(\"Child2\", 2),  \n    new XElement(\"Child3\", 3)  \n);  \nroot.RemoveAll();   // removes children elements and attributes of root  \nConsole.WriteLine(root);  \n```  \n  \n```vb  \n  \n                Dim root As XElement = _   \n        <Root Attr1=\"1\" Attr2=\"2\" Attr3=\"3\">  \n            <Child1>1</Child1>  \n            <Child2>2</Child2>  \n            <Child3>3</Child3>  \n        </Root>  \n  \nroot.RemoveAll()   ' removes children elements and attributes of root  \nConsole.WriteLine(root)  \n```  \n  \n This example produces the following output:  \n  \n```xml  \n  \n<Root />  \n```"
  syntax:
    content: public void RemoveAll ();
    parameters: []
  overload: System.Xml.Linq.XElement.RemoveAll*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Xml.Linq.XElement.RemoveAttributes
  commentId: M:System.Xml.Linq.XElement.RemoveAttributes
  id: RemoveAttributes
  parent: System.Xml.Linq.XElement
  langs:
  - csharp
  name: RemoveAttributes()
  nameWithType: XElement.RemoveAttributes()
  fullName: XElement.RemoveAttributes()
  type: Method
  assemblies:
  - System.Xml.XDocument
  - System.Xml.Linq
  - netstandard
  namespace: System.Xml.Linq
  summary: Removes the attributes of this <xref href="System.Xml.Linq.XElement"></xref>.
  remarks: This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.
  example:
  - "The following example creates an element with attributes and child elements. It then calls this method to remove the attributes. The child elements remain.  \n  \n```csharp  \n  \n                XElement root = new XElement(\"Root\",  \n    new XAttribute(\"Att1\", 1),  \n    new XAttribute(\"Att2\", 2),  \n    new XAttribute(\"Att3\", 3),  \n    new XElement(\"Child1\", 1),  \n    new XElement(\"Child2\", 2),  \n    new XElement(\"Child3\", 3)  \n);  \nroot.RemoveAttributes();  \nConsole.WriteLine(root);  \n```  \n  \n```vb  \n  \n                Dim root As XElement = _   \n    <Root Attr1=\"1\" Attr2=\"2\" Attr3=\"3\">  \n        <Child1>1</Child1>  \n        <Child2>2</Child2>  \n        <Child3>3</Child3>  \n     </Root>  \n  \nroot.RemoveAttributes()  \nConsole.WriteLine(root)  \n```  \n  \n This example produces the following output:  \n  \n```xml  \n  \n                <Root>  \n  <Child1>1</Child1>  \n  <Child2>2</Child2>  \n  <Child3>3</Child3>  \n</Root>   \n```"
  syntax:
    content: public void RemoveAttributes ();
    parameters: []
  overload: System.Xml.Linq.XElement.RemoveAttributes*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Xml.Linq.XElement.ReplaceAll(System.Object)
  commentId: M:System.Xml.Linq.XElement.ReplaceAll(System.Object)
  id: ReplaceAll(System.Object)
  parent: System.Xml.Linq.XElement
  langs:
  - csharp
  name: ReplaceAll(Object)
  nameWithType: XElement.ReplaceAll(Object)
  fullName: XElement.ReplaceAll(Object)
  type: Method
  assemblies:
  - System.Xml.XDocument
  - System.Xml.Linq
  - netstandard
  namespace: System.Xml.Linq
  summary: Replaces the child nodes and the attributes of this element with the specified content.
  remarks: "This method first removes existing content and attributes. It then adds the specified `content`.  \n  \n This method uses snapshot semantics—that is, it creates a separate copy of the new content before replacing the contents of the current element with the new content. This means that you can query the contents of the current element and use the results of the query as the specified new content.  \n  \n For details about the valid content that can be passed to this function, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).  \n  \n This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events."
  example:
  - "The following example uses this method.  \n  \n```csharp  \n  \n                XElement root = new XElement(\"Root\",  \n    new XElement(\"Child\", \"child content\")  \n);  \n  \n// ReplaceAll with an XElement object.  \nroot.ReplaceAll(new XElement(\"NewChild\", \"n\"));  \nConsole.WriteLine(root);  \n  \n// ReplaceAll with an XAttribute object.  \nroot.ReplaceAll(new XAttribute(\"NewAttribute\", \"n\"));  \nConsole.WriteLine(root);  \n  \n// ReplaceAll with a string.  \nroot.ReplaceAll(\"Some text\");  \nConsole.WriteLine(root);  \n  \n// ReplaceAll with a double.  \ndouble dbl = 12.345;  \nroot.ReplaceAll(dbl);  \nConsole.WriteLine(root);  \n  \n// ReplaceAll with a DateTime object.  \nDateTime dt = new DateTime(2006, 10, 6, 12, 30, 00);  \nroot.ReplaceAll(dt);  \nConsole.WriteLine(root);  \n  \n// ReplaceAll with a string array.  \n// Any collection other than a collection of XElement or XAttribute objects  \n// are converted to strings. The strings are concatenated and added.  \nstring[] stringArray = {  \n    \"abc\",  \n    \"def\",  \n    \"ghi\"  \n};  \nroot.ReplaceAll(stringArray);  \nConsole.WriteLine(root);  \n  \n// ReplaceAll with an array of XElement objects.  \nXElement[] ellArray = {  \n    new XElement(\"NewChild1\", 1),  \n    new XElement(\"NewChild2\", 2),  \n    new XElement(\"NewChild3\", 3)  \n};  \nroot.ReplaceAll(ellArray);  \nConsole.WriteLine(root);  \n  \n// ReplaceAll with an array of XAttribute objects.  \nXAttribute[] attArray = {  \n    new XAttribute(\"NewAtt1\", 1),  \n    new XAttribute(\"NewAtt2\", 2),  \n    new XAttribute(\"NewAtt3\", 3)  \n};  \nroot.ReplaceAll(attArray);  \nConsole.WriteLine(root);  \n```  \n  \n```vb  \n  \n                Dim root As XElement = _   \n    <Root>  \n        <Child>child content</Child>  \n    </Root>  \n  \n' ReplaceAll with an XElement object.  \nroot.ReplaceAll(<NewChild>n</NewChild>)  \nConsole.WriteLine(root)  \n  \n' ReplaceAll with an XAttribute object.  \nroot.ReplaceAll(New XAttribute(\"NewAttribute\", \"n\"))  \nConsole.WriteLine(root)  \n  \n' ReplaceAll with a string.  \nroot.ReplaceAll(\"Some text\")  \nConsole.WriteLine(root)  \n  \n' ReplaceAll with a double.  \nDim dbl As Double = 12.345  \nroot.ReplaceAll(dbl)  \nConsole.WriteLine(root)  \n  \n' ReplaceAll with a DateTime object.  \nDim dt As DateTime = New DateTime(2006, 10, 6, 12, 30, 0)  \nroot.ReplaceAll(dt)  \nConsole.WriteLine(root)  \n  \n' ReplaceAll with a string array.  \n' Any collection other than a collection of XElement or XAttribute objects  \n' are converted to strings. The strings are concatenated and added.  \nDim stringArray As String() = { _  \n    \"abc\", _  \n    \"def\", _  \n    \"ghi\" _  \n}  \nroot.ReplaceAll(stringArray)  \nConsole.WriteLine(root)  \n  \n' ReplaceAll with an array of XElement objects.  \nDim ellArray As XElement() = { _  \n    New XElement(\"NewChild1\", 1), _  \n    New XElement(\"NewChild2\", 2), _  \n    New XElement(\"NewChild3\", 3) _  \n}  \nroot.ReplaceAll(ellArray)  \nConsole.WriteLine(root)  \n  \n' ReplaceAll with an array of XAttribute objects.  \nDim attArray As XAttribute() = { _  \nNew XAttribute(\"NewAtt1\", 1), _  \nNew XAttribute(\"NewAtt2\", 2), _  \nNew XAttribute(\"NewAtt3\", 3) _  \n}  \nroot.ReplaceAll(attArray)  \nConsole.WriteLine(root)  \n  \n```  \n  \n This example produces the following output:  \n  \n```  \n  \n                <Root>  \n  <NewChild>n</NewChild>  \n</Root>  \n<Root NewAttribute=\"n\" />  \n<Root>Some text</Root>  \n<Root>12.345</Root>  \n<Root>2006-10-06T12:30:00</Root>  \n<Root>abcdefghi</Root>  \n<Root>  \n  <NewChild1>1</NewChild1>  \n  <NewChild2>2</NewChild2>  \n  <NewChild3>3</NewChild3>  \n</Root>  \n<Root NewAtt1=\"1\" NewAtt2=\"2\" NewAtt3=\"3\" />  \n```"
  syntax:
    content: public void ReplaceAll (object content);
    parameters:
    - id: content
      type: System.Object
      description: The content that will replace the child nodes and attributes of this element.
  overload: System.Xml.Linq.XElement.ReplaceAll*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Xml.Linq.XElement.ReplaceAll(System.Object[])
  commentId: M:System.Xml.Linq.XElement.ReplaceAll(System.Object[])
  id: ReplaceAll(System.Object[])
  parent: System.Xml.Linq.XElement
  langs:
  - csharp
  name: ReplaceAll(Object[])
  nameWithType: XElement.ReplaceAll(Object[])
  fullName: XElement.ReplaceAll(Object[])
  type: Method
  assemblies:
  - System.Xml.XDocument
  - System.Xml.Linq
  - netstandard
  namespace: System.Xml.Linq
  summary: Replaces the child nodes and the attributes of this element with the specified content.
  remarks: "This method first removes existing content and attributes. It then adds the specified `content`.  \n  \n This method uses snapshot semantics—that is, it creates a separate copy of the new content before replacing the contents of the current element with the new content. This means that you can query the contents of the current element and use the results of the query as the specified new content.  \n  \n For details about the valid content that can be passed to this function, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).  \n  \n This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events."
  example:
  - "The following example passes the results of a LINQ query to this method, replacing the contents of an element with the query results.  \n  \n```csharp  \n  \n                XElement xmlTree1 = new XElement(\"Root\",  \n    new XElement(\"Child1\", 1),  \n    new XElement(\"Child2\", 2),  \n    new XElement(\"Child3\", 3),  \n    new XElement(\"Child4\", 4),  \n    new XElement(\"Child5\", 5),  \n    new XElement(\"Child6\", 6)  \n);  \n  \nXElement root = new XElement(\"Root\",  \n    new XElement(\"Child\", \"child content\")  \n);  \n  \nroot.ReplaceAll(  \n    from el in xmlTree1.Elements()  \n    where((int)el >= 3 && (int)el <= 5)  \n    select el  \n);  \nConsole.WriteLine(root);  \n```  \n  \n```vb  \n  \n                Dim xmlTree1 As XElement = _   \n        <Root>  \n            <Child1>1</Child1>  \n            <Child2>2</Child2>  \n            <Child3>3</Child3>  \n            <Child4>4</Child4>  \n            <Child5>5</Child5>  \n            <Child6>6</Child6>  \n        </Root>  \n  \nDim root As XElement = <Root>  \n                           <Child>child content</Child>  \n                       </Root>  \n  \nroot.ReplaceAll( _  \n    From el In xmlTree1.Elements() _  \n    Where el.Value >= 3 And el.Value <= 5 _  \n    Select el _  \n)  \n  \nConsole.WriteLine(root)  \n  \n```  \n  \n This example produces the following output:  \n  \n```xml  \n  \n                <Root>  \n  <Child3>3</Child3>  \n  <Child4>4</Child4>  \n  <Child5>5</Child5>  \n</Root>  \n```"
  syntax:
    content: public void ReplaceAll (object[] content);
    parameters:
    - id: content
      type: System.Object[]
      description: A parameter list of content objects.
  overload: System.Xml.Linq.XElement.ReplaceAll*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Xml.Linq.XElement.ReplaceAttributes(System.Object[])
  commentId: M:System.Xml.Linq.XElement.ReplaceAttributes(System.Object[])
  id: ReplaceAttributes(System.Object[])
  parent: System.Xml.Linq.XElement
  langs:
  - csharp
  name: ReplaceAttributes(Object[])
  nameWithType: XElement.ReplaceAttributes(Object[])
  fullName: XElement.ReplaceAttributes(Object[])
  type: Method
  assemblies:
  - System.Xml.XDocument
  - System.Xml.Linq
  - netstandard
  namespace: System.Xml.Linq
  summary: Replaces the attributes of this element with the specified content.
  remarks: "This method first removes existing attributes. It then adds the specified `content`.  \n  \n For details about the valid content that can be passed to this function, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).  \n  \n This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events."
  example:
  - "The following example creates an element with three attributes. It then replaces the attributes with other attributes.  \n  \n```csharp  \n  \n                XElement root = new XElement(\"Root\",  \n    new XAttribute(\"Att1\", 1),  \n    new XAttribute(\"Att2\", 2),  \n    new XAttribute(\"Att3\", 3)  \n);  \nroot.ReplaceAttributes(  \n    new XAttribute(\"NewAtt1\", 101),  \n    new XAttribute(\"NewAtt2\", 102),  \n    new XAttribute(\"NewAtt3\", 103)  \n);  \nConsole.WriteLine(root);  \n```  \n  \n```vb  \n  \n                Dim root As XElement = <Root Att1=\"1\" Att2=\"2\" Att3=\"3\"/>  \nroot.ReplaceAttributes( _  \nNew XAttribute(\"NewAtt1\", 101), _  \nNew XAttribute(\"NewAtt2\", 102), _  \nNew XAttribute(\"NewAtt3\", 103))  \nConsole.WriteLine(root)  \n```  \n  \n This example produces the following output:  \n  \n```xml  \n  \n<Root NewAtt1=\"101\" NewAtt2=\"102\" NewAtt3=\"103\" />  \n```"
  syntax:
    content: public void ReplaceAttributes (object[] content);
    parameters:
    - id: content
      type: System.Object[]
      description: A parameter list of content objects.
  overload: System.Xml.Linq.XElement.ReplaceAttributes*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Xml.Linq.XElement.ReplaceAttributes(System.Object)
  commentId: M:System.Xml.Linq.XElement.ReplaceAttributes(System.Object)
  id: ReplaceAttributes(System.Object)
  parent: System.Xml.Linq.XElement
  langs:
  - csharp
  name: ReplaceAttributes(Object)
  nameWithType: XElement.ReplaceAttributes(Object)
  fullName: XElement.ReplaceAttributes(Object)
  type: Method
  assemblies:
  - System.Xml.XDocument
  - System.Xml.Linq
  - netstandard
  namespace: System.Xml.Linq
  summary: Replaces the attributes of this element with the specified content.
  remarks: "This method first removes existing attributes. It then adds the specified `content`.  \n  \n For details about the valid content that can be passed to this function, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).  \n  \n This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events."
  example:
  - "The following example creates an element with three attributes. It then uses this method to replace all of the attributes of the element with a single attribute.  \n  \n```csharp  \n  \n                XElement root = new XElement(\"Root\",  \n    new XAttribute(\"Att1\", 1),  \n    new XAttribute(\"Att2\", 2),  \n    new XAttribute(\"Att3\", 3)  \n);  \nroot.ReplaceAttributes(  \n    new XAttribute(\"NewAtt1\", 101)  \n);  \nConsole.WriteLine(root);  \n```  \n  \n```vb  \n  \n                Dim root As XElement = <Root Att1=\"1\" Att2=\"2\" Att3=\"3\"/>  \nroot.ReplaceAttributes(New XAttribute(\"NewAtt1\", 101))  \nConsole.WriteLine(root)  \n```  \n  \n This example produces the following output:  \n  \n```xml  \n  \n<Root NewAtt1=\"101\" />  \n```"
  syntax:
    content: public void ReplaceAttributes (object content);
    parameters:
    - id: content
      type: System.Object
      description: The content that will replace the attributes of this element.
  overload: System.Xml.Linq.XElement.ReplaceAttributes*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Xml.Linq.XElement.Save(System.IO.Stream)
  commentId: M:System.Xml.Linq.XElement.Save(System.IO.Stream)
  id: Save(System.IO.Stream)
  parent: System.Xml.Linq.XElement
  langs:
  - csharp
  name: Save(Stream)
  nameWithType: XElement.Save(Stream)
  fullName: XElement.Save(Stream)
  type: Method
  assemblies:
  - System.Xml.XDocument
  - System.Xml.Linq
  - netstandard
  namespace: System.Xml.Linq
  summary: Outputs this <xref href="System.Xml.Linq.XElement"></xref> to the specified <xref href="System.IO.Stream"></xref>.
  remarks: "The serialized XML will be indented. All insignificant white space will be removed, and additional white space will be added so that the XML will be properly indented. The behavior of this method is that insignificant white space will not be preserved.  \n  \n If you want to control white space, use the overload of <xref:System.Xml.Linq.XElement.Save%2A> that takes <xref:System.Xml.Linq.SaveOptions> as a parameter. Use the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> option to save unindented XML. This will cause the writer to write all white spaces exactly as represented in the XML tree.  \n  \n Use the <xref:System.Xml.Linq.SaveOptions.OmitDuplicateNamespaces> option if you want to remove duplicate namespace declarations."
  syntax:
    content: public void Save (System.IO.Stream stream);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: The stream to output this <xref href="System.Xml.Linq.XElement"></xref> to.
  overload: System.Xml.Linq.XElement.Save*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Xml.Linq.XElement.Save(System.IO.TextWriter)
  commentId: M:System.Xml.Linq.XElement.Save(System.IO.TextWriter)
  id: Save(System.IO.TextWriter)
  parent: System.Xml.Linq.XElement
  langs:
  - csharp
  name: Save(TextWriter)
  nameWithType: XElement.Save(TextWriter)
  fullName: XElement.Save(TextWriter)
  type: Method
  assemblies:
  - System.Xml.XDocument
  - System.Xml.Linq
  - netstandard
  namespace: System.Xml.Linq
  summary: Serialize this element to a <xref href="System.IO.TextWriter"></xref>.
  remarks: "The serialized XML will be indented. All insignificant white space will be removed, and additional white space will be added so that the XML will be properly indented. The behavior of this method is that white space will not be preserved.  \n  \n If you want to control white space, use the overload of <xref:System.Xml.Linq.XElement.Save%2A> that allows you to specify <xref:System.Xml.Linq.SaveOptions> as a parameter. For more information, see [Preserving White Space while Loading or Parsing XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)."
  example:
  - "The following example creates an <xref:System.Xml.Linq.XElement>, saves the document to a <xref:System.IO.StringWriter>, and then prints the string to the console.  \n  \n```csharp  \n  \n                XElement root = XElement.Parse(@\"<Root> <Child> Text </Child> </Root>\");  \nusing (StringWriter sw = new StringWriter()) {  \n    root.Save(sw);  \n    Console.WriteLine(sw.ToString());  \n}  \n```  \n  \n```vb  \n  \n                Dim root As XElement = <Root><Child> Text </Child></Root>  \nUsing sw = New StringWriter()  \n    root.Save(sw)  \n    Console.WriteLine(sw.ToString())  \nEnd Using  \n```  \n  \n This example produces the following output:  \n  \n```xml  \n  \n                <?xml version=\"1.0\" encoding=\"utf-16\"?>  \n<Root>  \n  <Child> Text </Child>  \n</Root>  \n```"
  syntax:
    content: public void Save (System.IO.TextWriter textWriter);
    parameters:
    - id: textWriter
      type: System.IO.TextWriter
      description: A <xref href="System.IO.TextWriter"></xref> that the <xref href="System.Xml.Linq.XElement"></xref> will be written to.
  overload: System.Xml.Linq.XElement.Save*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Xml.Linq.XElement.Save(System.String)
  commentId: M:System.Xml.Linq.XElement.Save(System.String)
  id: Save(System.String)
  parent: System.Xml.Linq.XElement
  langs:
  - csharp
  name: Save(String)
  nameWithType: XElement.Save(String)
  fullName: XElement.Save(String)
  type: Method
  assemblies:
  - System.Xml.Linq
  - netstandard
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: Serialize this element to a file.
  remarks: "The serialized XML will be indented. All insignificant white space will be removed, and additional white space will be added so that the XML will be properly indented. The behavior of this method is that insignificant white space nodes in the XML tree will not be preserved.  \n  \n If you want to control white space, use the overload of <xref:System.Xml.Linq.XElement.Save%2A> that allows you to specify <xref:System.Xml.Linq.SaveOptions> as a parameter. For more information, see [Preserving White Space while Loading or Parsing XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)."
  example:
  - "The following example creates an <xref:System.Xml.Linq.XElement>, saves the document to a file, and then prints the file to the console.  \n  \n```csharp  \n  \n                XElement root = new XElement(\"Root\",  \n    new XElement(\"Child\", \"child content\")  \n);  \nroot.Save(\"Root.xml\");  \nstring str = File.ReadAllText(\"Root.xml\");  \nConsole.WriteLine(str);  \n```  \n  \n```vb  \n  \n                Dim root As XElement = _   \n        <Root>  \n            <Child>child content</Child>  \n        </Root>  \nroot.Save(\"Root.xml\")  \nDim Str As String = File.ReadAllText(\"Root.xml\")  \nConsole.WriteLine(Str)  \n```  \n  \n This example produces the following output:  \n  \n```xml  \n  \n                <?xml version=\"1.0\" encoding=\"utf-8\"?>  \n<Root>  \n  <Child>child content</Child>  \n</Root>  \n```"
  syntax:
    content: public void Save (string fileName);
    parameters:
    - id: fileName
      type: System.String
      description: A <xref href="System.String"></xref> that contains the name of the file.
  overload: System.Xml.Linq.XElement.Save*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Xml.Linq.XElement.Save(System.Xml.XmlWriter)
  commentId: M:System.Xml.Linq.XElement.Save(System.Xml.XmlWriter)
  id: Save(System.Xml.XmlWriter)
  parent: System.Xml.Linq.XElement
  langs:
  - csharp
  name: Save(XmlWriter)
  nameWithType: XElement.Save(XmlWriter)
  fullName: XElement.Save(XmlWriter)
  type: Method
  assemblies:
  - System.Xml.XDocument
  - System.Xml.Linq
  - netstandard
  namespace: System.Xml.Linq
  summary: Serialize this element to an <xref href="System.Xml.XmlWriter"></xref>.
  remarks: ''
  example:
  - "The following example shows how to save an <xref:System.Xml.Linq.XElement> to an <xref:System.Xml.XmlWriter>.  \n  \n```csharp  \n  \n                StringBuilder sb = new StringBuilder();  \nXmlWriterSettings xws = new XmlWriterSettings();  \nxws.OmitXmlDeclaration = true;  \nusing (XmlWriter xw = XmlWriter.Create(sb, xws)) {  \n    XElement root = new XElement(\"Root\",  \n        new XElement(\"Child\", \"child content\")  \n    );  \n    root.Save(xw);  \n}  \nConsole.WriteLine(sb.ToString());  \n```  \n  \n```vb  \n  \n                Dim sb As StringBuilder = New StringBuilder()  \nDim xws As XmlWriterSettings = New XmlWriterSettings()  \nxws.OmitXmlDeclaration = True  \nUsing xw = XmlWriter.Create(sb, xws)  \n    Dim root As XElement = <Root>  \n                               <Child>child content</Child>  \n                           </Root>  \n    root.Save(xw)  \nEnd Using  \nConsole.WriteLine(sb.ToString())  \n```  \n  \n This example produces the following output:  \n  \n```xml  \n  \n<Root><Child>child content</Child></Root>  \n```"
  syntax:
    content: public void Save (System.Xml.XmlWriter writer);
    parameters:
    - id: writer
      type: System.Xml.XmlWriter
      description: A <xref href="System.Xml.XmlWriter"></xref> that the <xref href="System.Xml.Linq.XElement"></xref> will be written to.
  overload: System.Xml.Linq.XElement.Save*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Xml.Linq.XElement.Save(System.IO.Stream,System.Xml.Linq.SaveOptions)
  commentId: M:System.Xml.Linq.XElement.Save(System.IO.Stream,System.Xml.Linq.SaveOptions)
  id: Save(System.IO.Stream,System.Xml.Linq.SaveOptions)
  parent: System.Xml.Linq.XElement
  langs:
  - csharp
  name: Save(Stream, SaveOptions)
  nameWithType: XElement.Save(Stream, SaveOptions)
  fullName: XElement.Save(Stream, SaveOptions)
  type: Method
  assemblies:
  - System.Xml.XDocument
  - System.Xml.Linq
  - netstandard
  namespace: System.Xml.Linq
  summary: Outputs this <xref href="System.Xml.Linq.XElement"></xref> to the specified <xref href="System.IO.Stream"></xref>, optionally specifying formatting behavior.
  remarks: "By default the `options` are set to <xref:System.Xml.Linq.SaveOptions.None>. This option will remove all extraneous insignificant white space, and add appropriate insignificant white space so that the XML is properly indented.  \n  \n If you want to save unindented XML, specify the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> flag for `options`. This will cause the writer to write all white spaces exactly as represented in the XML tree.  \n  \n Use <xref:System.Xml.Linq.SaveOptions.OmitDuplicateNamespaces> option if you want to remove duplicate namespace declarations."
  syntax:
    content: public void Save (System.IO.Stream stream, System.Xml.Linq.SaveOptions options);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: The stream to output this <xref href="System.Xml.Linq.XElement"></xref> to.
    - id: options
      type: System.Xml.Linq.SaveOptions
      description: A <xref href="System.Xml.Linq.SaveOptions"></xref> object that specifies formatting behavior.
  overload: System.Xml.Linq.XElement.Save*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Xml.Linq.XElement.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)
  commentId: M:System.Xml.Linq.XElement.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)
  id: Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)
  parent: System.Xml.Linq.XElement
  langs:
  - csharp
  name: Save(TextWriter, SaveOptions)
  nameWithType: XElement.Save(TextWriter, SaveOptions)
  fullName: XElement.Save(TextWriter, SaveOptions)
  type: Method
  assemblies:
  - System.Xml.XDocument
  - System.Xml.Linq
  - netstandard
  namespace: System.Xml.Linq
  summary: Serialize this element to a <xref href="System.IO.TextWriter"></xref>, optionally disabling formatting.
  remarks: "If you want to save unindented XML, specify the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> flag for `options`. This will cause the writer to write all white space exactly as represented in the XML tree.  \n  \n If you want to save indented XML, do not specify the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> flag for `options`. This will remove all extraneous insignificant white space, and add appropriate insignificant white space so that the XML is properly indented. This is the default behavior, and the behavior of the overloads of the <xref:System.Xml.Linq.XElement.Save%2A> methods that do not take `options` as a parameter.  \n  \n For more information, see [Preserving White Space while Loading or Parsing XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)."
  example:
  - "The following example shows two uses of this method. The first use preserves white space. The second serializes the <xref:System.Xml.Linq.XElement> with formatting. Because the document has no white space in it as constructed, preserving white space outputs the XML without any indenting.  \n  \n```csharp  \n  \n                XElement root = XElement.Parse(@\"<Root> <Child> Text </Child> </Root>\");  \n  \nusing (StringWriter sw = new StringWriter())  \n{  \n    root.Save(sw, SaveOptions.DisableFormatting);  \n    Console.WriteLine(sw.ToString());  \n}  \n  \nConsole.WriteLine(\"=====\");  \n  \nusing (StringWriter sw = new StringWriter())  \n{  \n    root.Save(sw, SaveOptions.None);  \n    Console.WriteLine(sw.ToString());  \n}  \n```  \n  \n```vb  \n  \n                Dim root As XElement = <Root><Child> Text </Child></Root>  \n  \nUsing sw = New StringWriter()  \n    root.Save(sw, SaveOptions.DisableFormatting)  \n    Console.WriteLine(sw.ToString())  \nEnd Using  \n  \nConsole.WriteLine(\"=====\")  \n  \nUsing sw = New StringWriter()  \n    root.Save(sw, SaveOptions.None)  \n    Console.WriteLine(sw.ToString())  \nEnd Using  \n  \n```  \n  \n This example produces the following output:  \n  \n```  \n  \n                <?xml version=\"1.0\" encoding=\"utf-16\"?><Root><Child> Text </Child></Root>  \n=====  \n<?xml version=\"1.0\" encoding=\"utf-16\"?>  \n<Root>  \n  <Child> Text </Child>  \n</Root>  \n```"
  syntax:
    content: public void Save (System.IO.TextWriter textWriter, System.Xml.Linq.SaveOptions options);
    parameters:
    - id: textWriter
      type: System.IO.TextWriter
      description: The <xref href="System.IO.TextWriter"></xref> to output the XML to.
    - id: options
      type: System.Xml.Linq.SaveOptions
      description: A <xref href="System.Xml.Linq.SaveOptions"></xref> that specifies formatting behavior.
  overload: System.Xml.Linq.XElement.Save*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Xml.Linq.XElement.Save(System.String,System.Xml.Linq.SaveOptions)
  commentId: M:System.Xml.Linq.XElement.Save(System.String,System.Xml.Linq.SaveOptions)
  id: Save(System.String,System.Xml.Linq.SaveOptions)
  parent: System.Xml.Linq.XElement
  langs:
  - csharp
  name: Save(String, SaveOptions)
  nameWithType: XElement.Save(String, SaveOptions)
  fullName: XElement.Save(String, SaveOptions)
  type: Method
  assemblies:
  - System.Xml.Linq
  - netstandard
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: Serialize this element to a file, optionally disabling formatting.
  remarks: "If you want to save unindented XML, specify the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> flag for `options`. This will cause the writer to write all white space exactly as represented in the XML tree.  \n  \n If you want to save indented XML, do not specify the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> flag for `options`. This will remove all extraneous insignificant white space, and add appropriate insignificant white space so that the XML is properly indented. This is the default behavior, and the behavior of the overloads of the <xref:System.Xml.Linq.XElement.Save%2A> methods that do not take `options` as a parameter.  \n  \n For more information, see [Preserving White Space while Loading or Parsing XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)."
  example:
  - "The following example shows two uses of this method. The first use preserves white space. The second one serializes the <xref:System.Xml.Linq.XElement> with formatting.  \n  \n```csharp  \n  \n                string str;  \nXElement root = XElement.Parse(@\"<Root> <Child> Text </Child> </Root>\");  \n  \nroot.Save(\"Root.xml\", SaveOptions.DisableFormatting);  \nstr = File.ReadAllText(\"Root.xml\");  \nConsole.WriteLine(str);  \n  \nConsole.WriteLine(\"=====\");  \n  \nroot.Save(\"Root.xml\", SaveOptions.None);  \nstr = File.ReadAllText(\"Root.xml\");  \nConsole.WriteLine(str);  \n```  \n  \n```vb  \n  \n                Dim str As String  \nDim root As XElement = <Root><Child> Text </Child></Root>  \n  \nroot.Save(\"Root.xml\", SaveOptions.DisableFormatting)  \nstr = File.ReadAllText(\"Root.xml\")  \nConsole.WriteLine(str)  \n  \nConsole.WriteLine(\"=====\")  \n  \nroot.Save(\"Root.xml\", SaveOptions.None)  \nstr = File.ReadAllText(\"Root.xml\")  \nConsole.WriteLine(str)  \n  \n```  \n  \n This example produces the following output:  \n  \n```  \n  \n                <?xml version=\"1.0\" encoding=\"utf-8\"?><Root><Child> Text </Child></Root>  \n=====  \n<?xml version=\"1.0\" encoding=\"utf-8\"?>  \n<Root>  \n  <Child> Text </Child>  \n</Root>  \n```"
  syntax:
    content: public void Save (string fileName, System.Xml.Linq.SaveOptions options);
    parameters:
    - id: fileName
      type: System.String
      description: A <xref href="System.String"></xref> that contains the name of the file.
    - id: options
      type: System.Xml.Linq.SaveOptions
      description: A <xref href="System.Xml.Linq.SaveOptions"></xref> that specifies formatting behavior.
  overload: System.Xml.Linq.XElement.Save*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Xml.Linq.XElement.SaveAsync(System.IO.Stream,System.Xml.Linq.SaveOptions,System.Threading.CancellationToken)
  commentId: M:System.Xml.Linq.XElement.SaveAsync(System.IO.Stream,System.Xml.Linq.SaveOptions,System.Threading.CancellationToken)
  id: SaveAsync(System.IO.Stream,System.Xml.Linq.SaveOptions,System.Threading.CancellationToken)
  parent: System.Xml.Linq.XElement
  langs:
  - csharp
  name: SaveAsync(Stream, SaveOptions, CancellationToken)
  nameWithType: XElement.SaveAsync(Stream, SaveOptions, CancellationToken)
  fullName: XElement.SaveAsync(Stream, SaveOptions, CancellationToken)
  type: Method
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  syntax:
    content: public System.Threading.Tasks.Task SaveAsync (System.IO.Stream stream, System.Xml.Linq.SaveOptions options, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: ''
    - id: options
      type: System.Xml.Linq.SaveOptions
      description: ''
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: ''
    return:
      type: System.Threading.Tasks.Task
      description: ''
  overload: System.Xml.Linq.XElement.SaveAsync*
  exceptions: []
  version:
  - netcore-2.0
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml
- uid: System.Xml.Linq.XElement.SaveAsync(System.Xml.XmlWriter,System.Threading.CancellationToken)
  commentId: M:System.Xml.Linq.XElement.SaveAsync(System.Xml.XmlWriter,System.Threading.CancellationToken)
  id: SaveAsync(System.Xml.XmlWriter,System.Threading.CancellationToken)
  parent: System.Xml.Linq.XElement
  langs:
  - csharp
  name: SaveAsync(XmlWriter, CancellationToken)
  nameWithType: XElement.SaveAsync(XmlWriter, CancellationToken)
  fullName: XElement.SaveAsync(XmlWriter, CancellationToken)
  type: Method
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  syntax:
    content: public System.Threading.Tasks.Task SaveAsync (System.Xml.XmlWriter writer, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: writer
      type: System.Xml.XmlWriter
      description: ''
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: ''
    return:
      type: System.Threading.Tasks.Task
      description: ''
  overload: System.Xml.Linq.XElement.SaveAsync*
  exceptions: []
  version:
  - netcore-2.0
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml
- uid: System.Xml.Linq.XElement.SaveAsync(System.IO.TextWriter,System.Xml.Linq.SaveOptions,System.Threading.CancellationToken)
  commentId: M:System.Xml.Linq.XElement.SaveAsync(System.IO.TextWriter,System.Xml.Linq.SaveOptions,System.Threading.CancellationToken)
  id: SaveAsync(System.IO.TextWriter,System.Xml.Linq.SaveOptions,System.Threading.CancellationToken)
  parent: System.Xml.Linq.XElement
  langs:
  - csharp
  name: SaveAsync(TextWriter, SaveOptions, CancellationToken)
  nameWithType: XElement.SaveAsync(TextWriter, SaveOptions, CancellationToken)
  fullName: XElement.SaveAsync(TextWriter, SaveOptions, CancellationToken)
  type: Method
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  syntax:
    content: public System.Threading.Tasks.Task SaveAsync (System.IO.TextWriter textWriter, System.Xml.Linq.SaveOptions options, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: textWriter
      type: System.IO.TextWriter
      description: ''
    - id: options
      type: System.Xml.Linq.SaveOptions
      description: ''
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: ''
    return:
      type: System.Threading.Tasks.Task
      description: ''
  overload: System.Xml.Linq.XElement.SaveAsync*
  exceptions: []
  version:
  - netcore-2.0
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml
- uid: System.Xml.Linq.XElement.SetAttributeValue(System.Xml.Linq.XName,System.Object)
  commentId: M:System.Xml.Linq.XElement.SetAttributeValue(System.Xml.Linq.XName,System.Object)
  id: SetAttributeValue(System.Xml.Linq.XName,System.Object)
  parent: System.Xml.Linq.XElement
  langs:
  - csharp
  name: SetAttributeValue(XName, Object)
  nameWithType: XElement.SetAttributeValue(XName, Object)
  fullName: XElement.SetAttributeValue(XName, Object)
  type: Method
  assemblies:
  - System.Xml.XDocument
  - System.Xml.Linq
  - netstandard
  namespace: System.Xml.Linq
  summary: Sets the value of an attribute, adds an attribute, or removes an attribute.
  remarks: "This method is designed to make it easy to maintain a list of name/value pairs as a set of attributes. When maintaining the list, you need to add pairs, modify pairs, or delete pairs. If you call this method passing a name that does not exist as an attribute, this method creates an attribute for you. If you call this method passing the name of an existing attribute, this method modifies the value of the attribute to the value that you specify. If you pass `null` for `value`, this method removes the attribute.  \n  \n This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.  \n  \n The value is assigned to the attribute with the specified name. If no attribute with the specified name exists, a new attribute is added. If the value is `null`, the attribute with the specified name, if any, is deleted.  \n  \n For more information, see [Maintaining Name/Value Pairs](http://msdn.microsoft.com/library/fe9798bf-b5e2-4a3c-a86c-7f8638912691)."
  example:
  - "The following example creates an element with an attribute. It then uses this method to replace the content of the attribute.  \n  \n```csharp  \n// Create an element with no content.  \nXElement root = new XElement(\"Root\");  \n  \n// Add some name/value pairs.  \nroot.SetAttributeValue(\"Att1\", 1);  \nroot.SetAttributeValue(\"Att2\", 2);  \nroot.SetAttributeValue(\"Att3\", 3);  \nConsole.WriteLine(root);  \n  \n// Modify one of the name/value pairs.  \nroot.SetAttributeValue(\"Att2\", 22);  \nConsole.WriteLine(root);  \n  \n// Remove one of the name/value pairs.  \nroot.SetAttributeValue(\"Att3\", null);  \nConsole.WriteLine(root);  \n```  \n  \n```vb  \n' Create an element with no content.  \nDim root As XElement = <Root/>  \n  \n' Add some name/value pairs.  \nroot.SetAttributeValue(\"Att1\", 1)  \nroot.SetAttributeValue(\"Att2\", 2)  \nroot.SetAttributeValue(\"Att3\", 3)  \nConsole.WriteLine(root)  \n  \n' Modify one of the name/value pairs.  \nroot.SetAttributeValue(\"Att2\", 22)  \nConsole.WriteLine(root)  \n  \n' Remove one of the name/value pairs.  \nroot.SetAttributeValue(\"Att3\", Nothing)  \nConsole.WriteLine(root)  \n  \n```  \n  \n This example produces the following output:  \n  \n```  \n  \n                <Root Att1=\"1\" Att2=\"2\" Att3=\"3\" />  \n<Root Att1=\"1\" Att2=\"22\" Att3=\"3\" />  \n<Root Att1=\"1\" Att2=\"22\" />  \n```"
  syntax:
    content: public void SetAttributeValue (System.Xml.Linq.XName name, object value);
    parameters:
    - id: name
      type: System.Xml.Linq.XName
      description: An <xref href="System.Xml.Linq.XName"></xref> that contains the name of the attribute to change.
    - id: value
      type: System.Object
      description: The value to assign to the attribute. The attribute is removed if the value is `null`. Otherwise, the value is converted to its string representation and assigned to the <xref href="System.Xml.Linq.XAttribute.Value"></xref> property of the attribute.
  overload: System.Xml.Linq.XElement.SetAttributeValue*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The <code>value</code> is an instance of <xref href="System.Xml.Linq.XObject"></xref>.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Xml.Linq.XElement.SetElementValue(System.Xml.Linq.XName,System.Object)
  commentId: M:System.Xml.Linq.XElement.SetElementValue(System.Xml.Linq.XName,System.Object)
  id: SetElementValue(System.Xml.Linq.XName,System.Object)
  parent: System.Xml.Linq.XElement
  langs:
  - csharp
  name: SetElementValue(XName, Object)
  nameWithType: XElement.SetElementValue(XName, Object)
  fullName: XElement.SetElementValue(XName, Object)
  type: Method
  assemblies:
  - System.Xml.XDocument
  - System.Xml.Linq
  - netstandard
  namespace: System.Xml.Linq
  summary: Sets the value of a child element, adds a child element, or removes a child element.
  remarks: "This method is designed to make it easy to maintain a list of name/value pairs as a set of children elements. When maintaining the list, you need to add pairs, modify pairs, or delete pairs. If you call this method passing a name that does not exist as a child element, this method creates a child element for you. If you call this method passing the name of an existing child element, this method modifies the value of the child element to the value that you specify. If you pass `null` for `value`, this method removes the child element.  \n  \n This method will raise events.  \n  \n The value is assigned to the first child element with the specified name. If no child element with the specified name exists, a new child element is added. If the value is null, the first child element with the specified name, if any, is deleted.  \n  \n This method does not add child nodes or attributes to the specified child element. This method throws an exception if any object that derives from <xref:System.Xml.Linq.XObject> is passed as `value`.  \n  \n For more information, see [Maintaining Name/Value Pairs](http://msdn.microsoft.com/library/fe9798bf-b5e2-4a3c-a86c-7f8638912691)."
  example:
  - "The following example creates an element with a child element. It then uses this method to set the value of the child element.  \n  \n```csharp  \n// Create an element with no content  \nXElement root = new XElement(\"Root\");  \n  \n// Add some name/value pairs.  \nroot.SetElementValue(\"Ele1\", 1);  \nroot.SetElementValue(\"Ele2\", 2);  \nroot.SetElementValue(\"Ele3\", 3);  \nConsole.WriteLine(root);  \n  \n// Modify one of the name/value pairs.  \nroot.SetElementValue(\"Ele2\", 22);  \nConsole.WriteLine(root);  \n  \n// Remove one of the name/value pairs.  \nroot.SetElementValue(\"Ele3\", null);  \nConsole.WriteLine(root);  \n```  \n  \n```vb  \n' Create an element with no content.  \nDim root As XElement = <Root/>  \n  \n' Add some name/value pairs.  \nroot.SetElementValue(\"Ele1\", 1)  \nroot.SetElementValue(\"Ele2\", 2)  \nroot.SetElementValue(\"Ele3\", 3)  \nConsole.WriteLine(root)  \n  \n' Modify one of the name/value pairs.  \nroot.SetElementValue(\"Ele2\", 22)  \nConsole.WriteLine(root)  \n  \n' Remove one of the name/value pairs.  \nroot.SetElementValue(\"Ele3\", Nothing)  \nConsole.WriteLine(root)  \n  \n```  \n  \n This example produces the following output:  \n  \n```  \n  \n                <Root>  \n  <Ele1>1</Ele1>  \n  <Ele2>2</Ele2>  \n  <Ele3>3</Ele3>  \n</Root>  \n<Root>  \n  <Ele1>1</Ele1>  \n  <Ele2>22</Ele2>  \n  <Ele3>3</Ele3>  \n</Root>  \n<Root>  \n  <Ele1>1</Ele1>  \n  <Ele2>22</Ele2>  \n</Root>  \n```"
  syntax:
    content: public void SetElementValue (System.Xml.Linq.XName name, object value);
    parameters:
    - id: name
      type: System.Xml.Linq.XName
      description: An <xref href="System.Xml.Linq.XName"></xref> that contains the name of the child element to change.
    - id: value
      type: System.Object
      description: The value to assign to the child element. The child element is removed if the value is `null`. Otherwise, the value is converted to its string representation and assigned to the <xref href="System.Xml.Linq.XElement.Value"></xref> property of the child element.
  overload: System.Xml.Linq.XElement.SetElementValue*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The <code>value</code> is an instance of <xref href="System.Xml.Linq.XObject"></xref>.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Xml.Linq.XElement.SetValue(System.Object)
  commentId: M:System.Xml.Linq.XElement.SetValue(System.Object)
  id: SetValue(System.Object)
  parent: System.Xml.Linq.XElement
  langs:
  - csharp
  name: SetValue(Object)
  nameWithType: XElement.SetValue(Object)
  fullName: XElement.SetValue(Object)
  type: Method
  assemblies:
  - System.Xml.XDocument
  - System.Xml.Linq
  - netstandard
  namespace: System.Xml.Linq
  summary: Sets the value of this element.
  remarks: "This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.  \n  \n It is invalid to pass an instance of a class that derives from <xref:System.Xml.Linq.XObject>, such as <xref:System.Xml.Linq.XElement>."
  example:
  - "The following example creates an element that contains a child element. It then sets the value of the element using this method.  \n  \n```csharp  \n  \n                XElement root = new XElement(\"Root\",  \n    new XElement(\"Child\", \"child content\")  \n);  \nroot.SetValue(\"new content\");  \nConsole.WriteLine(root);  \n```  \n  \n```vb  \n  \n                Dim root As XElement = _   \n        <Root>  \n            <Child>child content</Child>  \n        </Root>  \n  \nroot.SetValue(\"new content\")  \nConsole.WriteLine(root)  \n```  \n  \n This example produces the following output:  \n  \n```xml  \n  \n<Root>new content</Root>  \n```"
  syntax:
    content: public void SetValue (object value);
    parameters:
    - id: value
      type: System.Object
      description: The value to assign to this element. The value is converted to its string representation and assigned to the <xref href="System.Xml.Linq.XElement.Value"></xref> property.
  overload: System.Xml.Linq.XElement.SetValue*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>value</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The <code>value</code> is an <xref href="System.Xml.Linq.XObject"></xref>.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Xml.Linq.XElement.Value
  commentId: P:System.Xml.Linq.XElement.Value
  id: Value
  parent: System.Xml.Linq.XElement
  langs:
  - csharp
  name: Value
  nameWithType: XElement.Value
  fullName: XElement.Value
  type: Property
  assemblies:
  - System.Xml.XDocument
  - System.Xml.Linq
  - netstandard
  namespace: System.Xml.Linq
  summary: Gets or sets the concatenated text contents of this element.
  remarks: "Using this property, you can get or set the value of an element.  \n  \n Setting this property will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.  \n  \n If you want to get the value of an element but you are not sure that it exists, it is more convenient to use the explicit conversion operators, and assign the element to a nullable type such as `string` or <xref:System.Nullable%601> of <xref:System.Int32>. If the element does not exist, the nullable type is set to `null`. By contrast, if you want to use this property, you must make sure that the <xref:System.Xml.Linq.XContainer.Element%2A> method does not return `null` before you access this property."
  example:
  - "The following example uses this property to retrieve the text of an element with mixed content.  \n  \n```csharp  \n  \n                XElement el = XElement.Parse(\"<Root>This is <b>mixed</b> content</Root>\");  \nConsole.WriteLine(\"{0}\", el.Value);  \n```  \n  \n```vb  \n  \n                Dim el As XElement = <Root>This is <b>mixed</b> content</Root>  \nConsole.WriteLine(\"{0}\", el.Value)  \n  \n```  \n  \n This example produces the following output:  \n  \n```  \n  \nThis is mixed content  \n```"
  syntax:
    content: public string Value { get; set; }
    return:
      type: System.String
      description: A <xref href="System.String"></xref> that contains all of the text content of this element. If there are multiple text nodes, they will be concatenated.
  overload: System.Xml.Linq.XElement.Value*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Xml.Linq.XElement.WriteTo(System.Xml.XmlWriter)
  commentId: M:System.Xml.Linq.XElement.WriteTo(System.Xml.XmlWriter)
  id: WriteTo(System.Xml.XmlWriter)
  parent: System.Xml.Linq.XElement
  langs:
  - csharp
  name: WriteTo(XmlWriter)
  nameWithType: XElement.WriteTo(XmlWriter)
  fullName: XElement.WriteTo(XmlWriter)
  type: Method
  assemblies:
  - System.Xml.XDocument
  - System.Xml.Linq
  - netstandard
  namespace: System.Xml.Linq
  summary: Write this element to an <xref href="System.Xml.XmlWriter"></xref>.
  remarks: ''
  example:
  - "The following example shows how to write an <xref:System.Xml.Linq.XElement> to an <xref:System.Xml.XmlWriter>. Note that the example did not write an XML declaration.  \n  \n```csharp  \n  \n                StringBuilder sb = new StringBuilder();  \nXmlWriterSettings xws = new XmlWriterSettings();  \nxws.OmitXmlDeclaration = true;  \nxws.Indent = true;  \n  \nusing (XmlWriter xw = XmlWriter.Create(sb, xws)) {  \n    xw.WriteStartElement(\"Root\");  \n  \n    XElement child1 = new XElement(\"Child\",  \n        new XElement(\"GrandChild\", \"some content\")  \n    );  \n    child1.WriteTo(xw);  \n  \n    XElement child2 = new XElement(\"AnotherChild\",  \n        new XElement(\"GrandChild\", \"different content\")  \n    );  \n    child2.WriteTo(xw);  \n  \n    xw.WriteEndElement();  \n}  \n  \nConsole.WriteLine(sb.ToString());  \n```  \n  \n```vb  \n  \n                Dim sb As StringBuilder = New StringBuilder()  \nDim xws As XmlWriterSettings = New XmlWriterSettings()  \nxws.OmitXmlDeclaration = True  \nxws.Indent = True  \n  \nUsing xw = XmlWriter.Create(sb, xws)  \n    xw.WriteStartElement(\"Root\")  \n    Dim child1 As XElement = _  \n        <Child>  \n            <GrandChild>some content</GrandChild>  \n        </Child>  \n    child1.WriteTo(xw)  \n    Dim child2 As XElement = _   \n        <AnotherChild>  \n            <GrandChild>different content</GrandChild>  \n        </AnotherChild>  \n    child2.WriteTo(xw)  \n    xw.WriteEndElement()  \nEnd Using  \n  \nConsole.WriteLine(sb.ToString())  \n  \n```  \n  \n This example produces the following output:  \n  \n```xml  \n  \n                <Root>  \n  <Child>  \n    <GrandChild>some content</GrandChild>  \n  </Child>  \n  <AnotherChild>  \n    <GrandChild>different content</GrandChild>  \n  </AnotherChild>  \n</Root>  \n```"
  syntax:
    content: public override void WriteTo (System.Xml.XmlWriter writer);
    parameters:
    - id: writer
      type: System.Xml.XmlWriter
      description: An <xref href="System.Xml.XmlWriter"></xref> into which this method will write.
  overload: System.Xml.Linq.XElement.WriteTo*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Xml.Linq.XElement.WriteToAsync(System.Xml.XmlWriter,System.Threading.CancellationToken)
  commentId: M:System.Xml.Linq.XElement.WriteToAsync(System.Xml.XmlWriter,System.Threading.CancellationToken)
  id: WriteToAsync(System.Xml.XmlWriter,System.Threading.CancellationToken)
  parent: System.Xml.Linq.XElement
  langs:
  - csharp
  name: WriteToAsync(XmlWriter, CancellationToken)
  nameWithType: XElement.WriteToAsync(XmlWriter, CancellationToken)
  fullName: XElement.WriteToAsync(XmlWriter, CancellationToken)
  type: Method
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  syntax:
    content: public override System.Threading.Tasks.Task WriteToAsync (System.Xml.XmlWriter writer, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: writer
      type: System.Xml.XmlWriter
      description: ''
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: ''
    return:
      type: System.Threading.Tasks.Task
      description: ''
  overload: System.Xml.Linq.XElement.WriteToAsync*
  exceptions: []
  version:
  - netcore-2.0
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml
- uid: System.Xml.Linq.XElement.System#Xml#Serialization#IXmlSerializable#GetSchema
  commentId: M:System.Xml.Linq.XElement.System#Xml#Serialization#IXmlSerializable#GetSchema
  id: System#Xml#Serialization#IXmlSerializable#GetSchema
  isEii: true
  parent: System.Xml.Linq.XElement
  langs:
  - csharp
  name: IXmlSerializable.GetSchema()
  nameWithType: XElement.IXmlSerializable.GetSchema()
  fullName: XElement.IXmlSerializable.GetSchema()
  type: Method
  assemblies:
  - System.Xml.XDocument
  - System.Xml.Linq
  - netstandard
  namespace: System.Xml.Linq
  summary: Gets an XML schema definition that describes the XML representation of this object.
  remarks: "This method is part of implementation of the <xref:System.Xml.Serialization.IXmlSerializable> interface.  \n  \n This method is used internally for serializing object graphs that contain LINQ to XML objects. For an example of serializing an object graph that contains LINQ to XML objects, see [Serializing Object Graphs that Contain XElement Objects](http://msdn.microsoft.com/library/443d7904-a6f0-450a-b1a4-5d7ed869d1d5)."
  syntax:
    content: System.Xml.Schema.XmlSchema IXmlSerializable.GetSchema ();
    parameters: []
    return:
      type: System.Xml.Schema.XmlSchema
      description: An <xref href="System.Xml.Schema.XmlSchema"></xref> that describes the XML representation of the object that is produced by the <xref href="System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"></xref> method and consumed by the <xref href="System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"></xref> method.
  overload: System.Xml.Linq.XElement.System#Xml#Serialization#IXmlSerializable#GetSchema*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Xml.Linq.XElement.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)
  commentId: M:System.Xml.Linq.XElement.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)
  id: System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)
  isEii: true
  parent: System.Xml.Linq.XElement
  langs:
  - csharp
  name: IXmlSerializable.ReadXml(XmlReader)
  nameWithType: XElement.IXmlSerializable.ReadXml(XmlReader)
  fullName: XElement.IXmlSerializable.ReadXml(XmlReader)
  type: Method
  assemblies:
  - System.Xml.XDocument
  - System.Xml.Linq
  - netstandard
  namespace: System.Xml.Linq
  summary: Generates an object from its XML representation.
  remarks: "This method is part of implementation of the <xref:System.Xml.Serialization.IXmlSerializable> interface.  \n  \n This method is used internally for serializing object graphs that contain LINQ to XML objects. For an example of serializing an object graph that contains LINQ to XML objects, see [Serializing Object Graphs that Contain XElement Objects](http://msdn.microsoft.com/library/443d7904-a6f0-450a-b1a4-5d7ed869d1d5)."
  syntax:
    content: void IXmlSerializable.ReadXml (System.Xml.XmlReader reader);
    parameters:
    - id: reader
      type: System.Xml.XmlReader
      description: The <xref href="System.Xml.XmlReader"></xref> from which the object is deserialized.
  overload: System.Xml.Linq.XElement.System#Xml#Serialization#IXmlSerializable#ReadXml*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Xml.Linq.XElement.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)
  commentId: M:System.Xml.Linq.XElement.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)
  id: System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)
  isEii: true
  parent: System.Xml.Linq.XElement
  langs:
  - csharp
  name: IXmlSerializable.WriteXml(XmlWriter)
  nameWithType: XElement.IXmlSerializable.WriteXml(XmlWriter)
  fullName: XElement.IXmlSerializable.WriteXml(XmlWriter)
  type: Method
  assemblies:
  - System.Xml.XDocument
  - System.Xml.Linq
  - netstandard
  namespace: System.Xml.Linq
  summary: Converts an object into its XML representation.
  remarks: This method is used internally for marshaling object graphs that contain LINQ to XML objects. For an example of serializing an object graph that contains LINQ to XML objects, see [Serializing Object Graphs that Contain XElement Objects](http://msdn.microsoft.com/library/443d7904-a6f0-450a-b1a4-5d7ed869d1d5).
  syntax:
    content: void IXmlSerializable.WriteXml (System.Xml.XmlWriter writer);
    parameters:
    - id: writer
      type: System.Xml.XmlWriter
      description: The <xref href="System.Xml.XmlWriter"></xref> to which this object is serialized.
  overload: System.Xml.Linq.XElement.System#Xml#Serialization#IXmlSerializable#WriteXml*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
references:
- uid: System.Xml.Linq.XContainer
  parent: System.Xml.Linq
  isExternal: false
  name: XContainer
  nameWithType: XContainer
  fullName: System.Xml.Linq.XContainer
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.ArgumentNullException
  parent: System
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XElement)
  parent: System.Xml.Linq.XElement
  isExternal: false
  name: XElement(XElement)
  nameWithType: XElement.XElement(XElement)
  fullName: XElement.XElement(XElement)
- uid: System.Xml.Linq.XElement
  parent: System.Xml.Linq
  isExternal: false
  name: XElement
  nameWithType: XElement
  fullName: System.Xml.Linq.XElement
- uid: System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XName)
  parent: System.Xml.Linq.XElement
  isExternal: false
  name: XElement(XName)
  nameWithType: XElement.XElement(XName)
  fullName: XElement.XElement(XName)
- uid: System.Xml.Linq.XName
  parent: System.Xml.Linq
  isExternal: false
  name: XName
  nameWithType: XName
  fullName: System.Xml.Linq.XName
- uid: System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XStreamingElement)
  parent: System.Xml.Linq.XElement
  isExternal: false
  name: XElement(XStreamingElement)
  nameWithType: XElement.XElement(XStreamingElement)
  fullName: XElement.XElement(XStreamingElement)
- uid: System.Xml.Linq.XStreamingElement
  parent: System.Xml.Linq
  isExternal: false
  name: XStreamingElement
  nameWithType: XStreamingElement
  fullName: System.Xml.Linq.XStreamingElement
- uid: System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XName,System.Object)
  parent: System.Xml.Linq.XElement
  isExternal: false
  name: XElement(XName, Object)
  nameWithType: XElement.XElement(XName, Object)
  fullName: XElement.XElement(XName, Object)
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XName,System.Object[])
  parent: System.Xml.Linq.XElement
  isExternal: false
  name: XElement(XName, Object[])
  nameWithType: XElement.XElement(XName, Object[])
  fullName: XElement.XElement(XName, Object[])
- uid: System.Object[]
  parent: System
  isExternal: false
  name: Object[]
  nameWithType: Object[]
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Xml.Linq.XElement.AncestorsAndSelf
  parent: System.Xml.Linq.XElement
  isExternal: false
  name: AncestorsAndSelf()
  nameWithType: XElement.AncestorsAndSelf()
  fullName: XElement.AncestorsAndSelf()
- uid: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
- uid: System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<XElement>
  nameWithType: IEnumerable<XElement>
  fullName: System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Xml.Linq.XElement
    name: XElement
    nameWithType: XElement
    fullName: System.Xml.Linq.XElement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Xml.Linq.XElement.AncestorsAndSelf(System.Xml.Linq.XName)
  parent: System.Xml.Linq.XElement
  isExternal: false
  name: AncestorsAndSelf(XName)
  nameWithType: XElement.AncestorsAndSelf(XName)
  fullName: XElement.AncestorsAndSelf(XName)
- uid: System.Xml.Linq.XElement.Attribute(System.Xml.Linq.XName)
  parent: System.Xml.Linq.XElement
  isExternal: false
  name: Attribute(XName)
  nameWithType: XElement.Attribute(XName)
  fullName: XElement.Attribute(XName)
- uid: System.Xml.Linq.XAttribute
  parent: System.Xml.Linq
  isExternal: false
  name: XAttribute
  nameWithType: XAttribute
  fullName: System.Xml.Linq.XAttribute
- uid: System.Xml.Linq.XElement.Attributes
  parent: System.Xml.Linq.XElement
  isExternal: false
  name: Attributes()
  nameWithType: XElement.Attributes()
  fullName: XElement.Attributes()
- uid: System.Collections.Generic.IEnumerable{System.Xml.Linq.XAttribute}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<XAttribute>
  nameWithType: IEnumerable<XAttribute>
  fullName: System.Collections.Generic.IEnumerable<System.Xml.Linq.XAttribute>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Xml.Linq.XAttribute
    name: XAttribute
    nameWithType: XAttribute
    fullName: System.Xml.Linq.XAttribute
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Xml.Linq.XElement.Attributes(System.Xml.Linq.XName)
  parent: System.Xml.Linq.XElement
  isExternal: false
  name: Attributes(XName)
  nameWithType: XElement.Attributes(XName)
  fullName: XElement.Attributes(XName)
- uid: System.Xml.Linq.XElement.DescendantNodesAndSelf
  parent: System.Xml.Linq.XElement
  isExternal: false
  name: DescendantNodesAndSelf()
  nameWithType: XElement.DescendantNodesAndSelf()
  fullName: XElement.DescendantNodesAndSelf()
- uid: System.Xml.Linq.XNode
  name: XNode
  nameWithType: XNode
  fullName: System.Xml.Linq.XNode
- uid: System.Collections.Generic.IEnumerable{System.Xml.Linq.XNode}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<XNode>
  nameWithType: IEnumerable<XNode>
  fullName: System.Collections.Generic.IEnumerable<System.Xml.Linq.XNode>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Xml.Linq.XNode
    name: XNode
    nameWithType: XNode
    fullName: System.Xml.Linq.XNode
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Xml.Linq.XElement.DescendantsAndSelf(System.Xml.Linq.XName)
  parent: System.Xml.Linq.XElement
  isExternal: false
  name: DescendantsAndSelf(XName)
  nameWithType: XElement.DescendantsAndSelf(XName)
  fullName: XElement.DescendantsAndSelf(XName)
- uid: System.Xml.Linq.XElement.DescendantsAndSelf
  parent: System.Xml.Linq.XElement
  isExternal: false
  name: DescendantsAndSelf()
  nameWithType: XElement.DescendantsAndSelf()
  fullName: XElement.DescendantsAndSelf()
- uid: System.Xml.Linq.XElement.EmptySequence
  parent: System.Xml.Linq.XElement
  isExternal: false
  name: EmptySequence
  nameWithType: XElement.EmptySequence
  fullName: XElement.EmptySequence
- uid: System.Xml.Linq.XElement.FirstAttribute
  parent: System.Xml.Linq.XElement
  isExternal: false
  name: FirstAttribute
  nameWithType: XElement.FirstAttribute
  fullName: XElement.FirstAttribute
- uid: System.Xml.Linq.XElement.GetDefaultNamespace
  parent: System.Xml.Linq.XElement
  isExternal: false
  name: GetDefaultNamespace()
  nameWithType: XElement.GetDefaultNamespace()
  fullName: XElement.GetDefaultNamespace()
- uid: System.Xml.Linq.XNamespace
  parent: System.Xml.Linq
  isExternal: false
  name: XNamespace
  nameWithType: XNamespace
  fullName: System.Xml.Linq.XNamespace
- uid: System.Xml.Linq.XElement.GetNamespaceOfPrefix(System.String)
  parent: System.Xml.Linq.XElement
  isExternal: false
  name: GetNamespaceOfPrefix(String)
  nameWithType: XElement.GetNamespaceOfPrefix(String)
  fullName: XElement.GetNamespaceOfPrefix(String)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Xml.Linq.XElement.GetPrefixOfNamespace(System.Xml.Linq.XNamespace)
  parent: System.Xml.Linq.XElement
  isExternal: false
  name: GetPrefixOfNamespace(XNamespace)
  nameWithType: XElement.GetPrefixOfNamespace(XNamespace)
  fullName: XElement.GetPrefixOfNamespace(XNamespace)
- uid: System.Xml.Linq.XElement.HasAttributes
  parent: System.Xml.Linq.XElement
  isExternal: false
  name: HasAttributes
  nameWithType: XElement.HasAttributes
  fullName: XElement.HasAttributes
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Xml.Linq.XElement.HasElements
  parent: System.Xml.Linq.XElement
  isExternal: false
  name: HasElements
  nameWithType: XElement.HasElements
  fullName: XElement.HasElements
- uid: System.Xml.Linq.XElement.IsEmpty
  parent: System.Xml.Linq.XElement
  isExternal: false
  name: IsEmpty
  nameWithType: XElement.IsEmpty
  fullName: XElement.IsEmpty
- uid: System.Xml.Linq.XElement.LastAttribute
  parent: System.Xml.Linq.XElement
  isExternal: false
  name: LastAttribute
  nameWithType: XElement.LastAttribute
  fullName: XElement.LastAttribute
- uid: System.Xml.Linq.XElement.Load(System.IO.TextReader,System.Xml.Linq.LoadOptions)
  parent: System.Xml.Linq.XElement
  isExternal: false
  name: Load(TextReader, LoadOptions)
  nameWithType: XElement.Load(TextReader, LoadOptions)
  fullName: XElement.Load(TextReader, LoadOptions)
- uid: System.IO.TextReader
  parent: System.IO
  isExternal: false
  name: TextReader
  nameWithType: TextReader
  fullName: System.IO.TextReader
- uid: System.Xml.Linq.LoadOptions
  parent: System.Xml.Linq
  isExternal: false
  name: LoadOptions
  nameWithType: LoadOptions
  fullName: System.Xml.Linq.LoadOptions
- uid: System.Xml.Linq.XElement.Load(System.Xml.XmlReader,System.Xml.Linq.LoadOptions)
  parent: System.Xml.Linq.XElement
  isExternal: false
  name: Load(XmlReader, LoadOptions)
  nameWithType: XElement.Load(XmlReader, LoadOptions)
  fullName: XElement.Load(XmlReader, LoadOptions)
- uid: System.Xml.XmlReader
  parent: System.Xml
  isExternal: false
  name: XmlReader
  nameWithType: XmlReader
  fullName: System.Xml.XmlReader
- uid: System.Xml.Linq.XElement.Load(System.String,System.Xml.Linq.LoadOptions)
  parent: System.Xml.Linq.XElement
  isExternal: false
  name: Load(String, LoadOptions)
  nameWithType: XElement.Load(String, LoadOptions)
  fullName: XElement.Load(String, LoadOptions)
- uid: System.Xml.Linq.XElement.Load(System.IO.Stream,System.Xml.Linq.LoadOptions)
  parent: System.Xml.Linq.XElement
  isExternal: false
  name: Load(Stream, LoadOptions)
  nameWithType: XElement.Load(Stream, LoadOptions)
  fullName: XElement.Load(Stream, LoadOptions)
- uid: System.IO.Stream
  parent: System.IO
  isExternal: false
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.Xml.Linq.XElement.Load(System.IO.TextReader)
  parent: System.Xml.Linq.XElement
  isExternal: false
  name: Load(TextReader)
  nameWithType: XElement.Load(TextReader)
  fullName: XElement.Load(TextReader)
- uid: System.Xml.Linq.XElement.Load(System.String)
  parent: System.Xml.Linq.XElement
  isExternal: false
  name: Load(String)
  nameWithType: XElement.Load(String)
  fullName: XElement.Load(String)
- uid: System.Xml.Linq.XElement.Load(System.IO.Stream)
  parent: System.Xml.Linq.XElement
  isExternal: false
  name: Load(Stream)
  nameWithType: XElement.Load(Stream)
  fullName: XElement.Load(Stream)
- uid: System.Xml.Linq.XElement.Load(System.Xml.XmlReader)
  parent: System.Xml.Linq.XElement
  isExternal: false
  name: Load(XmlReader)
  nameWithType: XElement.Load(XmlReader)
  fullName: XElement.Load(XmlReader)
- uid: System.Xml.Linq.XElement.LoadAsync(System.IO.Stream,System.Xml.Linq.LoadOptions,System.Threading.CancellationToken)
  parent: System.Xml.Linq.XElement
  isExternal: false
  name: LoadAsync(Stream, LoadOptions, CancellationToken)
  nameWithType: XElement.LoadAsync(Stream, LoadOptions, CancellationToken)
  fullName: XElement.LoadAsync(Stream, LoadOptions, CancellationToken)
- uid: System.Threading.Tasks.Task`1
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
- uid: System.Threading.Tasks.Task{System.Xml.Linq.XElement}
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<XElement>
  nameWithType: Task<XElement>
  fullName: System.Threading.Tasks.Task<System.Xml.Linq.XElement>
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Xml.Linq.XElement
    name: XElement
    nameWithType: XElement
    fullName: System.Xml.Linq.XElement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Xml.Linq.XElement.LoadAsync(System.IO.TextReader,System.Xml.Linq.LoadOptions,System.Threading.CancellationToken)
  parent: System.Xml.Linq.XElement
  isExternal: false
  name: LoadAsync(TextReader, LoadOptions, CancellationToken)
  nameWithType: XElement.LoadAsync(TextReader, LoadOptions, CancellationToken)
  fullName: XElement.LoadAsync(TextReader, LoadOptions, CancellationToken)
- uid: System.Xml.Linq.XElement.LoadAsync(System.Xml.XmlReader,System.Xml.Linq.LoadOptions,System.Threading.CancellationToken)
  parent: System.Xml.Linq.XElement
  isExternal: false
  name: LoadAsync(XmlReader, LoadOptions, CancellationToken)
  nameWithType: XElement.LoadAsync(XmlReader, LoadOptions, CancellationToken)
  fullName: XElement.LoadAsync(XmlReader, LoadOptions, CancellationToken)
- uid: System.Xml.Linq.XElement.Name
  parent: System.Xml.Linq.XElement
  isExternal: false
  name: Name
  nameWithType: XElement.Name
  fullName: XElement.Name
- uid: System.Xml.Linq.XElement.NodeType
  parent: System.Xml.Linq.XElement
  isExternal: false
  name: NodeType
  nameWithType: XElement.NodeType
  fullName: XElement.NodeType
- uid: System.Xml.XmlNodeType
  parent: System.Xml
  isExternal: false
  name: XmlNodeType
  nameWithType: XmlNodeType
  fullName: System.Xml.XmlNodeType
- uid: System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.Nullable{System.Int64})
  parent: System.Xml.Linq.XElement
  isExternal: false
  name: op_Explicit(XElement to Nullable<Int64>)
  nameWithType: XElement.op_Explicit(XElement to Nullable<Int64>)
  fullName: XElement.op_Explicit(XElement to Nullable<Int64>)
- uid: System.Nullable`1
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
- uid: System.Int64
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Nullable{System.Int64}
  parent: System
  isExternal: false
  name: Nullable<Int64>
  nameWithType: Nullable<Int64>
  fullName: System.Nullable<System.Int64>
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.Nullable{System.Single})
  parent: System.Xml.Linq.XElement
  isExternal: false
  name: op_Explicit(XElement to Nullable<Single>)
  nameWithType: XElement.op_Explicit(XElement to Nullable<Single>)
  fullName: XElement.op_Explicit(XElement to Nullable<Single>)
- uid: System.Single
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: System.Nullable{System.Single}
  parent: System
  isExternal: false
  name: Nullable<Single>
  nameWithType: Nullable<Single>
  fullName: System.Nullable<System.Single>
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.Nullable{System.TimeSpan})
  parent: System.Xml.Linq.XElement
  isExternal: false
  name: op_Explicit(XElement to Nullable<TimeSpan>)
  nameWithType: XElement.op_Explicit(XElement to Nullable<TimeSpan>)
  fullName: XElement.op_Explicit(XElement to Nullable<TimeSpan>)
- uid: System.TimeSpan
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Nullable{System.TimeSpan}
  parent: System
  isExternal: false
  name: Nullable<TimeSpan>
  nameWithType: Nullable<TimeSpan>
  fullName: System.Nullable<System.TimeSpan>
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.Nullable{System.UInt32})
  parent: System.Xml.Linq.XElement
  isExternal: false
  name: op_Explicit(XElement to Nullable<UInt32>)
  nameWithType: XElement.op_Explicit(XElement to Nullable<UInt32>)
  fullName: XElement.op_Explicit(XElement to Nullable<UInt32>)
- uid: System.UInt32
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: System.Nullable{System.UInt32}
  parent: System
  isExternal: false
  name: Nullable<UInt32>
  nameWithType: Nullable<UInt32>
  fullName: System.Nullable<System.UInt32>
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.UInt32
    name: UInt32
    nameWithType: UInt32
    fullName: System.UInt32
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.Nullable{System.UInt64})
  parent: System.Xml.Linq.XElement
  isExternal: false
  name: op_Explicit(XElement to Nullable<UInt64>)
  nameWithType: XElement.op_Explicit(XElement to Nullable<UInt64>)
  fullName: XElement.op_Explicit(XElement to Nullable<UInt64>)
- uid: System.UInt64
  name: UInt64
  nameWithType: UInt64
  fullName: System.UInt64
- uid: System.Nullable{System.UInt64}
  parent: System
  isExternal: false
  name: Nullable<UInt64>
  nameWithType: Nullable<UInt64>
  fullName: System.Nullable<System.UInt64>
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.UInt32)
  parent: System.Xml.Linq.XElement
  isExternal: false
  name: op_Explicit(XElement to UInt32)
  nameWithType: XElement.op_Explicit(XElement to UInt32)
  fullName: XElement.op_Explicit(XElement to UInt32)
- uid: System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.String)
  parent: System.Xml.Linq.XElement
  isExternal: false
  name: op_Explicit(XElement to String)
  nameWithType: XElement.op_Explicit(XElement to String)
  fullName: XElement.op_Explicit(XElement to String)
- uid: System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.TimeSpan)
  parent: System.Xml.Linq.XElement
  isExternal: false
  name: op_Explicit(XElement to TimeSpan)
  nameWithType: XElement.op_Explicit(XElement to TimeSpan)
  fullName: XElement.op_Explicit(XElement to TimeSpan)
- uid: System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.UInt64)
  parent: System.Xml.Linq.XElement
  isExternal: false
  name: op_Explicit(XElement to UInt64)
  nameWithType: XElement.op_Explicit(XElement to UInt64)
  fullName: XElement.op_Explicit(XElement to UInt64)
- uid: System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.Nullable{System.Int32})
  parent: System.Xml.Linq.XElement
  isExternal: false
  name: op_Explicit(XElement to Nullable<Int32>)
  nameWithType: XElement.op_Explicit(XElement to Nullable<Int32>)
  fullName: XElement.op_Explicit(XElement to Nullable<Int32>)
- uid: System.Int32
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Nullable{System.Int32}
  parent: System
  isExternal: false
  name: Nullable<Int32>
  nameWithType: Nullable<Int32>
  fullName: System.Nullable<System.Int32>
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.Single)
  parent: System.Xml.Linq.XElement
  isExternal: false
  name: op_Explicit(XElement to Single)
  nameWithType: XElement.op_Explicit(XElement to Single)
  fullName: XElement.op_Explicit(XElement to Single)
- uid: System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.Nullable{System.Guid})
  parent: System.Xml.Linq.XElement
  isExternal: false
  name: op_Explicit(XElement to Nullable<Guid>)
  nameWithType: XElement.op_Explicit(XElement to Nullable<Guid>)
  fullName: XElement.op_Explicit(XElement to Nullable<Guid>)
- uid: System.Guid
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Nullable{System.Guid}
  parent: System
  isExternal: false
  name: Nullable<Guid>
  nameWithType: Nullable<Guid>
  fullName: System.Nullable<System.Guid>
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.Nullable{System.Boolean})
  parent: System.Xml.Linq.XElement
  isExternal: false
  name: op_Explicit(XElement to Nullable<Boolean>)
  nameWithType: XElement.op_Explicit(XElement to Nullable<Boolean>)
  fullName: XElement.op_Explicit(XElement to Nullable<Boolean>)
- uid: System.Nullable{System.Boolean}
  parent: System
  isExternal: false
  name: Nullable<Boolean>
  nameWithType: Nullable<Boolean>
  fullName: System.Nullable<System.Boolean>
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.Nullable{System.Decimal})
  parent: System.Xml.Linq.XElement
  isExternal: false
  name: op_Explicit(XElement to Nullable<Decimal>)
  nameWithType: XElement.op_Explicit(XElement to Nullable<Decimal>)
  fullName: XElement.op_Explicit(XElement to Nullable<Decimal>)
- uid: System.Decimal
  name: Decimal
  nameWithType: Decimal
  fullName: System.Decimal
- uid: System.Nullable{System.Decimal}
  parent: System
  isExternal: false
  name: Nullable<Decimal>
  nameWithType: Nullable<Decimal>
  fullName: System.Nullable<System.Decimal>
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.Boolean)
  parent: System.Xml.Linq.XElement
  isExternal: false
  name: op_Explicit(XElement to Boolean)
  nameWithType: XElement.op_Explicit(XElement to Boolean)
  fullName: XElement.op_Explicit(XElement to Boolean)
- uid: System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.DateTime)
  parent: System.Xml.Linq.XElement
  isExternal: false
  name: op_Explicit(XElement to DateTime)
  nameWithType: XElement.op_Explicit(XElement to DateTime)
  fullName: XElement.op_Explicit(XElement to DateTime)
- uid: System.DateTime
  parent: System
  isExternal: false
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.DateTimeOffset)
  parent: System.Xml.Linq.XElement
  isExternal: false
  name: op_Explicit(XElement to DateTimeOffset)
  nameWithType: XElement.op_Explicit(XElement to DateTimeOffset)
  fullName: XElement.op_Explicit(XElement to DateTimeOffset)
- uid: System.DateTimeOffset
  parent: System
  isExternal: false
  name: DateTimeOffset
  nameWithType: DateTimeOffset
  fullName: System.DateTimeOffset
- uid: System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.Double)
  parent: System.Xml.Linq.XElement
  isExternal: false
  name: op_Explicit(XElement to Double)
  nameWithType: XElement.op_Explicit(XElement to Double)
  fullName: XElement.op_Explicit(XElement to Double)
- uid: System.Double
  parent: System
  isExternal: false
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.Guid)
  parent: System.Xml.Linq.XElement
  isExternal: false
  name: op_Explicit(XElement to Guid)
  nameWithType: XElement.op_Explicit(XElement to Guid)
  fullName: XElement.op_Explicit(XElement to Guid)
- uid: System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.Decimal)
  parent: System.Xml.Linq.XElement
  isExternal: false
  name: op_Explicit(XElement to Decimal)
  nameWithType: XElement.op_Explicit(XElement to Decimal)
  fullName: XElement.op_Explicit(XElement to Decimal)
- uid: System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.Int64)
  parent: System.Xml.Linq.XElement
  isExternal: false
  name: op_Explicit(XElement to Int64)
  nameWithType: XElement.op_Explicit(XElement to Int64)
  fullName: XElement.op_Explicit(XElement to Int64)
- uid: System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.Nullable{System.Double})
  parent: System.Xml.Linq.XElement
  isExternal: false
  name: op_Explicit(XElement to Nullable<Double>)
  nameWithType: XElement.op_Explicit(XElement to Nullable<Double>)
  fullName: XElement.op_Explicit(XElement to Nullable<Double>)
- uid: System.Nullable{System.Double}
  parent: System
  isExternal: false
  name: Nullable<Double>
  nameWithType: Nullable<Double>
  fullName: System.Nullable<System.Double>
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.Nullable{System.DateTime})
  parent: System.Xml.Linq.XElement
  isExternal: false
  name: op_Explicit(XElement to Nullable<DateTime>)
  nameWithType: XElement.op_Explicit(XElement to Nullable<DateTime>)
  fullName: XElement.op_Explicit(XElement to Nullable<DateTime>)
- uid: System.Nullable{System.DateTime}
  parent: System
  isExternal: false
  name: Nullable<DateTime>
  nameWithType: Nullable<DateTime>
  fullName: System.Nullable<System.DateTime>
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.Nullable{System.DateTimeOffset})
  parent: System.Xml.Linq.XElement
  isExternal: false
  name: op_Explicit(XElement to Nullable<DateTimeOffset>)
  nameWithType: XElement.op_Explicit(XElement to Nullable<DateTimeOffset>)
  fullName: XElement.op_Explicit(XElement to Nullable<DateTimeOffset>)
- uid: System.Nullable{System.DateTimeOffset}
  parent: System
  isExternal: false
  name: Nullable<DateTimeOffset>
  nameWithType: Nullable<DateTimeOffset>
  fullName: System.Nullable<System.DateTimeOffset>
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.DateTimeOffset
    name: DateTimeOffset
    nameWithType: DateTimeOffset
    fullName: System.DateTimeOffset
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement to System.Int32)
  parent: System.Xml.Linq.XElement
  isExternal: false
  name: op_Explicit(XElement to Int32)
  nameWithType: XElement.op_Explicit(XElement to Int32)
  fullName: XElement.op_Explicit(XElement to Int32)
- uid: System.Xml.Linq.XElement.Parse(System.String)
  parent: System.Xml.Linq.XElement
  isExternal: false
  name: Parse(String)
  nameWithType: XElement.Parse(String)
  fullName: XElement.Parse(String)
- uid: System.Xml.Linq.XElement.Parse(System.String,System.Xml.Linq.LoadOptions)
  parent: System.Xml.Linq.XElement
  isExternal: false
  name: Parse(String, LoadOptions)
  nameWithType: XElement.Parse(String, LoadOptions)
  fullName: XElement.Parse(String, LoadOptions)
- uid: System.Xml.Linq.XElement.RemoveAll
  parent: System.Xml.Linq.XElement
  isExternal: false
  name: RemoveAll()
  nameWithType: XElement.RemoveAll()
  fullName: XElement.RemoveAll()
- uid: System.Xml.Linq.XElement.RemoveAttributes
  parent: System.Xml.Linq.XElement
  isExternal: false
  name: RemoveAttributes()
  nameWithType: XElement.RemoveAttributes()
  fullName: XElement.RemoveAttributes()
- uid: System.Xml.Linq.XElement.ReplaceAll(System.Object)
  parent: System.Xml.Linq.XElement
  isExternal: false
  name: ReplaceAll(Object)
  nameWithType: XElement.ReplaceAll(Object)
  fullName: XElement.ReplaceAll(Object)
- uid: System.Xml.Linq.XElement.ReplaceAll(System.Object[])
  parent: System.Xml.Linq.XElement
  isExternal: false
  name: ReplaceAll(Object[])
  nameWithType: XElement.ReplaceAll(Object[])
  fullName: XElement.ReplaceAll(Object[])
- uid: System.Xml.Linq.XElement.ReplaceAttributes(System.Object[])
  parent: System.Xml.Linq.XElement
  isExternal: false
  name: ReplaceAttributes(Object[])
  nameWithType: XElement.ReplaceAttributes(Object[])
  fullName: XElement.ReplaceAttributes(Object[])
- uid: System.Xml.Linq.XElement.ReplaceAttributes(System.Object)
  parent: System.Xml.Linq.XElement
  isExternal: false
  name: ReplaceAttributes(Object)
  nameWithType: XElement.ReplaceAttributes(Object)
  fullName: XElement.ReplaceAttributes(Object)
- uid: System.Xml.Linq.XElement.Save(System.IO.Stream)
  parent: System.Xml.Linq.XElement
  isExternal: false
  name: Save(Stream)
  nameWithType: XElement.Save(Stream)
  fullName: XElement.Save(Stream)
- uid: System.Xml.Linq.XElement.Save(System.IO.TextWriter)
  parent: System.Xml.Linq.XElement
  isExternal: false
  name: Save(TextWriter)
  nameWithType: XElement.Save(TextWriter)
  fullName: XElement.Save(TextWriter)
- uid: System.IO.TextWriter
  parent: System.IO
  isExternal: false
  name: TextWriter
  nameWithType: TextWriter
  fullName: System.IO.TextWriter
- uid: System.Xml.Linq.XElement.Save(System.String)
  parent: System.Xml.Linq.XElement
  isExternal: false
  name: Save(String)
  nameWithType: XElement.Save(String)
  fullName: XElement.Save(String)
- uid: System.Xml.Linq.XElement.Save(System.Xml.XmlWriter)
  parent: System.Xml.Linq.XElement
  isExternal: false
  name: Save(XmlWriter)
  nameWithType: XElement.Save(XmlWriter)
  fullName: XElement.Save(XmlWriter)
- uid: System.Xml.XmlWriter
  parent: System.Xml
  isExternal: false
  name: XmlWriter
  nameWithType: XmlWriter
  fullName: System.Xml.XmlWriter
- uid: System.Xml.Linq.XElement.Save(System.IO.Stream,System.Xml.Linq.SaveOptions)
  parent: System.Xml.Linq.XElement
  isExternal: false
  name: Save(Stream, SaveOptions)
  nameWithType: XElement.Save(Stream, SaveOptions)
  fullName: XElement.Save(Stream, SaveOptions)
- uid: System.Xml.Linq.SaveOptions
  parent: System.Xml.Linq
  isExternal: false
  name: SaveOptions
  nameWithType: SaveOptions
  fullName: System.Xml.Linq.SaveOptions
- uid: System.Xml.Linq.XElement.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)
  parent: System.Xml.Linq.XElement
  isExternal: false
  name: Save(TextWriter, SaveOptions)
  nameWithType: XElement.Save(TextWriter, SaveOptions)
  fullName: XElement.Save(TextWriter, SaveOptions)
- uid: System.Xml.Linq.XElement.Save(System.String,System.Xml.Linq.SaveOptions)
  parent: System.Xml.Linq.XElement
  isExternal: false
  name: Save(String, SaveOptions)
  nameWithType: XElement.Save(String, SaveOptions)
  fullName: XElement.Save(String, SaveOptions)
- uid: System.Xml.Linq.XElement.SaveAsync(System.IO.Stream,System.Xml.Linq.SaveOptions,System.Threading.CancellationToken)
  parent: System.Xml.Linq.XElement
  isExternal: false
  name: SaveAsync(Stream, SaveOptions, CancellationToken)
  nameWithType: XElement.SaveAsync(Stream, SaveOptions, CancellationToken)
  fullName: XElement.SaveAsync(Stream, SaveOptions, CancellationToken)
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Xml.Linq.XElement.SaveAsync(System.Xml.XmlWriter,System.Threading.CancellationToken)
  parent: System.Xml.Linq.XElement
  isExternal: false
  name: SaveAsync(XmlWriter, CancellationToken)
  nameWithType: XElement.SaveAsync(XmlWriter, CancellationToken)
  fullName: XElement.SaveAsync(XmlWriter, CancellationToken)
- uid: System.Xml.Linq.XElement.SaveAsync(System.IO.TextWriter,System.Xml.Linq.SaveOptions,System.Threading.CancellationToken)
  parent: System.Xml.Linq.XElement
  isExternal: false
  name: SaveAsync(TextWriter, SaveOptions, CancellationToken)
  nameWithType: XElement.SaveAsync(TextWriter, SaveOptions, CancellationToken)
  fullName: XElement.SaveAsync(TextWriter, SaveOptions, CancellationToken)
- uid: System.Xml.Linq.XElement.SetAttributeValue(System.Xml.Linq.XName,System.Object)
  parent: System.Xml.Linq.XElement
  isExternal: false
  name: SetAttributeValue(XName, Object)
  nameWithType: XElement.SetAttributeValue(XName, Object)
  fullName: XElement.SetAttributeValue(XName, Object)
- uid: System.Xml.Linq.XElement.SetElementValue(System.Xml.Linq.XName,System.Object)
  parent: System.Xml.Linq.XElement
  isExternal: false
  name: SetElementValue(XName, Object)
  nameWithType: XElement.SetElementValue(XName, Object)
  fullName: XElement.SetElementValue(XName, Object)
- uid: System.Xml.Linq.XElement.SetValue(System.Object)
  parent: System.Xml.Linq.XElement
  isExternal: false
  name: SetValue(Object)
  nameWithType: XElement.SetValue(Object)
  fullName: XElement.SetValue(Object)
- uid: System.Xml.Linq.XElement.Value
  parent: System.Xml.Linq.XElement
  isExternal: false
  name: Value
  nameWithType: XElement.Value
  fullName: XElement.Value
- uid: System.Xml.Linq.XElement.WriteTo(System.Xml.XmlWriter)
  parent: System.Xml.Linq.XElement
  isExternal: false
  name: WriteTo(XmlWriter)
  nameWithType: XElement.WriteTo(XmlWriter)
  fullName: XElement.WriteTo(XmlWriter)
- uid: System.Xml.Linq.XElement.WriteToAsync(System.Xml.XmlWriter,System.Threading.CancellationToken)
  parent: System.Xml.Linq.XElement
  isExternal: false
  name: WriteToAsync(XmlWriter, CancellationToken)
  nameWithType: XElement.WriteToAsync(XmlWriter, CancellationToken)
  fullName: XElement.WriteToAsync(XmlWriter, CancellationToken)
- uid: System.Xml.Linq.XElement.System#Xml#Serialization#IXmlSerializable#GetSchema
  parent: System.Xml.Linq.XElement
  isExternal: false
  name: IXmlSerializable.GetSchema()
  nameWithType: XElement.IXmlSerializable.GetSchema()
  fullName: XElement.IXmlSerializable.GetSchema()
- uid: System.Xml.Schema.XmlSchema
  parent: System.Xml.Schema
  isExternal: false
  name: XmlSchema
  nameWithType: XmlSchema
  fullName: System.Xml.Schema.XmlSchema
- uid: System.Xml.Linq.XElement.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)
  parent: System.Xml.Linq.XElement
  isExternal: false
  name: IXmlSerializable.ReadXml(XmlReader)
  nameWithType: XElement.IXmlSerializable.ReadXml(XmlReader)
  fullName: XElement.IXmlSerializable.ReadXml(XmlReader)
- uid: System.Xml.Linq.XElement.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)
  parent: System.Xml.Linq.XElement
  isExternal: false
  name: IXmlSerializable.WriteXml(XmlWriter)
  nameWithType: XElement.IXmlSerializable.WriteXml(XmlWriter)
  fullName: XElement.IXmlSerializable.WriteXml(XmlWriter)
- uid: System.Xml.Linq.XElement.#ctor*
  parent: System.Xml.Linq.XElement
  isExternal: false
  name: XElement
  nameWithType: XElement.XElement
  fullName: XElement.XElement
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml
- uid: System.Xml.Linq.XElement.AncestorsAndSelf*
  parent: System.Xml.Linq.XElement
  isExternal: false
  name: AncestorsAndSelf
  nameWithType: XElement.AncestorsAndSelf
  fullName: XElement.AncestorsAndSelf
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml
- uid: System.Xml.Linq.XElement.Attributes*
  parent: System.Xml.Linq.XElement
  isExternal: false
  name: Attributes
  nameWithType: XElement.Attributes
  fullName: XElement.Attributes
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml
- uid: System.Xml.Linq.XElement.DescendantsAndSelf*
  parent: System.Xml.Linq.XElement
  isExternal: false
  name: DescendantsAndSelf
  nameWithType: XElement.DescendantsAndSelf
  fullName: XElement.DescendantsAndSelf
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml
- uid: System.Xml.Linq.XElement.Load*
  parent: System.Xml.Linq.XElement
  isExternal: false
  name: Load
  nameWithType: XElement.Load
  fullName: XElement.Load
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml
- uid: System.Xml.Linq.XElement.ReplaceAll*
  parent: System.Xml.Linq.XElement
  isExternal: false
  name: ReplaceAll
  nameWithType: XElement.ReplaceAll
  fullName: XElement.ReplaceAll
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml
- uid: System.Xml.Linq.XElement.ReplaceAttributes*
  parent: System.Xml.Linq.XElement
  isExternal: false
  name: ReplaceAttributes
  nameWithType: XElement.ReplaceAttributes
  fullName: XElement.ReplaceAttributes
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml
- uid: System.Xml.Linq.XElement.Attribute*
  parent: System.Xml.Linq.XElement
  isExternal: false
  name: Attribute
  nameWithType: XElement.Attribute
  fullName: XElement.Attribute
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml
- uid: System.Xml.Linq.XElement.DescendantNodesAndSelf*
  parent: System.Xml.Linq.XElement
  isExternal: false
  name: DescendantNodesAndSelf
  nameWithType: XElement.DescendantNodesAndSelf
  fullName: XElement.DescendantNodesAndSelf
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml
- uid: System.Xml.Linq.XElement.EmptySequence*
  parent: System.Xml.Linq.XElement
  isExternal: false
  name: EmptySequence
  nameWithType: XElement.EmptySequence
  fullName: XElement.EmptySequence
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml
- uid: System.Xml.Linq.XElement.FirstAttribute*
  parent: System.Xml.Linq.XElement
  isExternal: false
  name: FirstAttribute
  nameWithType: XElement.FirstAttribute
  fullName: XElement.FirstAttribute
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml
- uid: System.Xml.Linq.XElement.GetDefaultNamespace*
  parent: System.Xml.Linq.XElement
  isExternal: false
  name: GetDefaultNamespace
  nameWithType: XElement.GetDefaultNamespace
  fullName: XElement.GetDefaultNamespace
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml
- uid: System.Xml.Linq.XElement.GetNamespaceOfPrefix*
  parent: System.Xml.Linq.XElement
  isExternal: false
  name: GetNamespaceOfPrefix
  nameWithType: XElement.GetNamespaceOfPrefix
  fullName: XElement.GetNamespaceOfPrefix
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml
- uid: System.Xml.Linq.XElement.GetPrefixOfNamespace*
  parent: System.Xml.Linq.XElement
  isExternal: false
  name: GetPrefixOfNamespace
  nameWithType: XElement.GetPrefixOfNamespace
  fullName: XElement.GetPrefixOfNamespace
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml
- uid: System.Xml.Linq.XElement.HasAttributes*
  parent: System.Xml.Linq.XElement
  isExternal: false
  name: HasAttributes
  nameWithType: XElement.HasAttributes
  fullName: XElement.HasAttributes
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml
- uid: System.Xml.Linq.XElement.HasElements*
  parent: System.Xml.Linq.XElement
  isExternal: false
  name: HasElements
  nameWithType: XElement.HasElements
  fullName: XElement.HasElements
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml
- uid: System.Xml.Linq.XElement.IsEmpty*
  parent: System.Xml.Linq.XElement
  isExternal: false
  name: IsEmpty
  nameWithType: XElement.IsEmpty
  fullName: XElement.IsEmpty
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml
- uid: System.Xml.Linq.XElement.LastAttribute*
  parent: System.Xml.Linq.XElement
  isExternal: false
  name: LastAttribute
  nameWithType: XElement.LastAttribute
  fullName: XElement.LastAttribute
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml
- uid: System.Xml.Linq.XElement.LoadAsync*
  parent: System.Xml.Linq.XElement
  isExternal: false
  name: LoadAsync
  nameWithType: XElement.LoadAsync
  fullName: XElement.LoadAsync
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml
- uid: System.Xml.Linq.XElement.Name*
  parent: System.Xml.Linq.XElement
  isExternal: false
  name: Name
  nameWithType: XElement.Name
  fullName: XElement.Name
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml
- uid: System.Xml.Linq.XElement.NodeType*
  parent: System.Xml.Linq.XElement
  isExternal: false
  name: NodeType
  nameWithType: XElement.NodeType
  fullName: XElement.NodeType
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml
- uid: System.Xml.Linq.XElement.op_Explicit*
  parent: System.Xml.Linq.XElement
  isExternal: false
  name: op_Explicit
  nameWithType: XElement.op_Explicit
  fullName: XElement.op_Explicit
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml
- uid: System.Xml.Linq.XElement.Parse*
  parent: System.Xml.Linq.XElement
  isExternal: false
  name: Parse
  nameWithType: XElement.Parse
  fullName: XElement.Parse
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml
- uid: System.Xml.Linq.XElement.RemoveAll*
  parent: System.Xml.Linq.XElement
  isExternal: false
  name: RemoveAll
  nameWithType: XElement.RemoveAll
  fullName: XElement.RemoveAll
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml
- uid: System.Xml.Linq.XElement.RemoveAttributes*
  parent: System.Xml.Linq.XElement
  isExternal: false
  name: RemoveAttributes
  nameWithType: XElement.RemoveAttributes
  fullName: XElement.RemoveAttributes
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml
- uid: System.Xml.Linq.XElement.Save*
  parent: System.Xml.Linq.XElement
  isExternal: false
  name: Save
  nameWithType: XElement.Save
  fullName: XElement.Save
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml
- uid: System.Xml.Linq.XElement.SaveAsync*
  parent: System.Xml.Linq.XElement
  isExternal: false
  name: SaveAsync
  nameWithType: XElement.SaveAsync
  fullName: XElement.SaveAsync
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml
- uid: System.Xml.Linq.XElement.SetAttributeValue*
  parent: System.Xml.Linq.XElement
  isExternal: false
  name: SetAttributeValue
  nameWithType: XElement.SetAttributeValue
  fullName: XElement.SetAttributeValue
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml
- uid: System.Xml.Linq.XElement.SetElementValue*
  parent: System.Xml.Linq.XElement
  isExternal: false
  name: SetElementValue
  nameWithType: XElement.SetElementValue
  fullName: XElement.SetElementValue
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml
- uid: System.Xml.Linq.XElement.SetValue*
  parent: System.Xml.Linq.XElement
  isExternal: false
  name: SetValue
  nameWithType: XElement.SetValue
  fullName: XElement.SetValue
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml
- uid: System.Xml.Linq.XElement.Value*
  parent: System.Xml.Linq.XElement
  isExternal: false
  name: Value
  nameWithType: XElement.Value
  fullName: XElement.Value
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml
- uid: System.Xml.Linq.XElement.WriteTo*
  parent: System.Xml.Linq.XElement
  isExternal: false
  name: WriteTo
  nameWithType: XElement.WriteTo
  fullName: XElement.WriteTo
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml
- uid: System.Xml.Linq.XElement.WriteToAsync*
  parent: System.Xml.Linq.XElement
  isExternal: false
  name: WriteToAsync
  nameWithType: XElement.WriteToAsync
  fullName: XElement.WriteToAsync
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml
- uid: System.Xml.Linq.XElement.System#Xml#Serialization#IXmlSerializable#GetSchema*
  parent: System.Xml.Linq.XElement
  isExternal: false
  name: System.Xml.Serialization.IXmlSerializable.GetSchema
  nameWithType: XElement.System.Xml.Serialization.IXmlSerializable.GetSchema
  fullName: XElement.System.Xml.Serialization.IXmlSerializable.GetSchema
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml
- uid: System.Xml.Linq.XElement.System#Xml#Serialization#IXmlSerializable#ReadXml*
  parent: System.Xml.Linq.XElement
  isExternal: false
  name: System.Xml.Serialization.IXmlSerializable.ReadXml
  nameWithType: XElement.System.Xml.Serialization.IXmlSerializable.ReadXml
  fullName: XElement.System.Xml.Serialization.IXmlSerializable.ReadXml
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml
- uid: System.Xml.Linq.XElement.System#Xml#Serialization#IXmlSerializable#WriteXml*
  parent: System.Xml.Linq.XElement
  isExternal: false
  name: System.Xml.Serialization.IXmlSerializable.WriteXml
  nameWithType: XElement.System.Xml.Serialization.IXmlSerializable.WriteXml
  fullName: XElement.System.Xml.Serialization.IXmlSerializable.WriteXml
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XElement.xml
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: Object.Equals(Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: Object.Equals(Object, Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: false
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: Object.GetHashCode()
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  nameWithType: Object.GetType()
  fullName: Object.GetType()
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: Object.MemberwiseClone()
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: Object.ReferenceEquals(Object, Object)
- uid: System.Xml.Linq.XNode.ToString
  parent: System.Xml.Linq.XNode
  isExternal: false
  name: ToString()
  nameWithType: XNode.ToString()
  fullName: XNode.ToString()
- uid: System.Xml.Linq.XObject.AddAnnotation(System.Object)
  parent: System.Xml.Linq.XObject
  isExternal: false
  name: AddAnnotation(Object)
  nameWithType: XObject.AddAnnotation(Object)
  fullName: XObject.AddAnnotation(Object)
- uid: System.Xml.Linq.XObject.Annotation(System.Type)
  parent: System.Xml.Linq.XObject
  isExternal: false
  name: Annotation(Type)
  nameWithType: XObject.Annotation(Type)
  fullName: XObject.Annotation(Type)
- uid: System.Xml.Linq.XObject.Annotation``1
  parent: System.Xml.Linq.XObject
  isExternal: false
  name: Annotation<T>()
  nameWithType: XObject.Annotation<T>()
  fullName: XObject.Annotation<T>()
- uid: System.Xml.Linq.XObject.Annotations(System.Type)
  parent: System.Xml.Linq.XObject
  isExternal: false
  name: Annotations(Type)
  nameWithType: XObject.Annotations(Type)
  fullName: XObject.Annotations(Type)
- uid: System.Xml.Linq.XObject.Annotations``1
  parent: System.Xml.Linq.XObject
  isExternal: false
  name: Annotations<T>()
  nameWithType: XObject.Annotations<T>()
  fullName: XObject.Annotations<T>()
- uid: System.Xml.Linq.XObject.BaseUri
  parent: System.Xml.Linq.XObject
  isExternal: false
  name: BaseUri
  nameWithType: XObject.BaseUri
  fullName: XObject.BaseUri
- uid: System.Xml.Linq.XObject.Changed
  parent: System.Xml.Linq.XObject
  isExternal: false
  name: Changed
  nameWithType: XObject.Changed
  fullName: XObject.Changed
- uid: System.Xml.Linq.XObject.Changing
  parent: System.Xml.Linq.XObject
  isExternal: false
  name: Changing
  nameWithType: XObject.Changing
  fullName: XObject.Changing
- uid: System.Xml.Linq.XObject.Document
  parent: System.Xml.Linq.XObject
  isExternal: false
  name: Document
  nameWithType: XObject.Document
  fullName: XObject.Document
- uid: System.Xml.Linq.XObject.Parent
  parent: System.Xml.Linq.XObject
  isExternal: false
  name: Parent
  nameWithType: XObject.Parent
  fullName: XObject.Parent
- uid: System.Xml.Linq.XObject.RemoveAnnotations(System.Type)
  parent: System.Xml.Linq.XObject
  isExternal: false
  name: RemoveAnnotations(Type)
  nameWithType: XObject.RemoveAnnotations(Type)
  fullName: XObject.RemoveAnnotations(Type)
- uid: System.Xml.Linq.XObject.RemoveAnnotations``1
  parent: System.Xml.Linq.XObject
  isExternal: false
  name: RemoveAnnotations<T>()
  nameWithType: XObject.RemoveAnnotations<T>()
  fullName: XObject.RemoveAnnotations<T>()
- uid: System.Xml.Linq.XObject.System#Xml#IXmlLineInfo#HasLineInfo
  parent: System.Xml.Linq.XObject
  isExternal: false
  name: IXmlLineInfo.HasLineInfo()
  nameWithType: XObject.IXmlLineInfo.HasLineInfo()
  fullName: XObject.IXmlLineInfo.HasLineInfo()
- uid: System.Xml.Linq.XObject.System#Xml#IXmlLineInfo#LineNumber
  parent: System.Xml.Linq.XObject
  isExternal: false
  name: IXmlLineInfo.LineNumber
  nameWithType: XObject.IXmlLineInfo.LineNumber
  fullName: XObject.IXmlLineInfo.LineNumber
- uid: System.Xml.Linq.XObject.System#Xml#IXmlLineInfo#LinePosition
  parent: System.Xml.Linq.XObject
  isExternal: false
  name: IXmlLineInfo.LinePosition
  nameWithType: XObject.IXmlLineInfo.LinePosition
  fullName: XObject.IXmlLineInfo.LinePosition
- uid: System.Xml.Linq.XNode.AddAfterSelf(System.Object)
  parent: System.Xml.Linq.XNode
  isExternal: false
  name: AddAfterSelf(Object)
  nameWithType: XNode.AddAfterSelf(Object)
  fullName: XNode.AddAfterSelf(Object)
- uid: System.Xml.Linq.XNode.AddAfterSelf(System.Object[])
  parent: System.Xml.Linq.XNode
  isExternal: false
  name: AddAfterSelf(Object[])
  nameWithType: XNode.AddAfterSelf(Object[])
  fullName: XNode.AddAfterSelf(Object[])
- uid: System.Xml.Linq.XNode.AddBeforeSelf(System.Object)
  parent: System.Xml.Linq.XNode
  isExternal: false
  name: AddBeforeSelf(Object)
  nameWithType: XNode.AddBeforeSelf(Object)
  fullName: XNode.AddBeforeSelf(Object)
- uid: System.Xml.Linq.XNode.AddBeforeSelf(System.Object[])
  parent: System.Xml.Linq.XNode
  isExternal: false
  name: AddBeforeSelf(Object[])
  nameWithType: XNode.AddBeforeSelf(Object[])
  fullName: XNode.AddBeforeSelf(Object[])
- uid: System.Xml.Linq.XNode.Ancestors
  parent: System.Xml.Linq.XNode
  isExternal: false
  name: Ancestors()
  nameWithType: XNode.Ancestors()
  fullName: XNode.Ancestors()
- uid: System.Xml.Linq.XNode.Ancestors(System.Xml.Linq.XName)
  parent: System.Xml.Linq.XNode
  isExternal: false
  name: Ancestors(XName)
  nameWithType: XNode.Ancestors(XName)
  fullName: XNode.Ancestors(XName)
- uid: System.Xml.Linq.XNode.CompareDocumentOrder(System.Xml.Linq.XNode,System.Xml.Linq.XNode)
  parent: System.Xml.Linq.XNode
  isExternal: false
  name: CompareDocumentOrder(XNode, XNode)
  nameWithType: XNode.CompareDocumentOrder(XNode, XNode)
  fullName: XNode.CompareDocumentOrder(XNode, XNode)
- uid: System.Xml.Linq.XNode.CreateReader
  parent: System.Xml.Linq.XNode
  isExternal: false
  name: CreateReader()
  nameWithType: XNode.CreateReader()
  fullName: XNode.CreateReader()
- uid: System.Xml.Linq.XNode.CreateReader(System.Xml.Linq.ReaderOptions)
  parent: System.Xml.Linq.XNode
  isExternal: false
  name: CreateReader(ReaderOptions)
  nameWithType: XNode.CreateReader(ReaderOptions)
  fullName: XNode.CreateReader(ReaderOptions)
- uid: System.Xml.Linq.XNode.DeepEquals(System.Xml.Linq.XNode,System.Xml.Linq.XNode)
  parent: System.Xml.Linq.XNode
  isExternal: false
  name: DeepEquals(XNode, XNode)
  nameWithType: XNode.DeepEquals(XNode, XNode)
  fullName: XNode.DeepEquals(XNode, XNode)
- uid: System.Xml.Linq.XNode.DocumentOrderComparer
  parent: System.Xml.Linq.XNode
  isExternal: false
  name: DocumentOrderComparer
  nameWithType: XNode.DocumentOrderComparer
  fullName: XNode.DocumentOrderComparer
- uid: System.Xml.Linq.XNode.ElementsAfterSelf
  parent: System.Xml.Linq.XNode
  isExternal: false
  name: ElementsAfterSelf()
  nameWithType: XNode.ElementsAfterSelf()
  fullName: XNode.ElementsAfterSelf()
- uid: System.Xml.Linq.XNode.ElementsAfterSelf(System.Xml.Linq.XName)
  parent: System.Xml.Linq.XNode
  isExternal: false
  name: ElementsAfterSelf(XName)
  nameWithType: XNode.ElementsAfterSelf(XName)
  fullName: XNode.ElementsAfterSelf(XName)
- uid: System.Xml.Linq.XNode.ElementsBeforeSelf
  parent: System.Xml.Linq.XNode
  isExternal: false
  name: ElementsBeforeSelf()
  nameWithType: XNode.ElementsBeforeSelf()
  fullName: XNode.ElementsBeforeSelf()
- uid: System.Xml.Linq.XNode.ElementsBeforeSelf(System.Xml.Linq.XName)
  parent: System.Xml.Linq.XNode
  isExternal: false
  name: ElementsBeforeSelf(XName)
  nameWithType: XNode.ElementsBeforeSelf(XName)
  fullName: XNode.ElementsBeforeSelf(XName)
- uid: System.Xml.Linq.XNode.EqualityComparer
  parent: System.Xml.Linq.XNode
  isExternal: false
  name: EqualityComparer
  nameWithType: XNode.EqualityComparer
  fullName: XNode.EqualityComparer
- uid: System.Xml.Linq.XNode.IsAfter(System.Xml.Linq.XNode)
  parent: System.Xml.Linq.XNode
  isExternal: false
  name: IsAfter(XNode)
  nameWithType: XNode.IsAfter(XNode)
  fullName: XNode.IsAfter(XNode)
- uid: System.Xml.Linq.XNode.IsBefore(System.Xml.Linq.XNode)
  parent: System.Xml.Linq.XNode
  isExternal: false
  name: IsBefore(XNode)
  nameWithType: XNode.IsBefore(XNode)
  fullName: XNode.IsBefore(XNode)
- uid: System.Xml.Linq.XNode.NextNode
  parent: System.Xml.Linq.XNode
  isExternal: false
  name: NextNode
  nameWithType: XNode.NextNode
  fullName: XNode.NextNode
- uid: System.Xml.Linq.XNode.NodesAfterSelf
  parent: System.Xml.Linq.XNode
  isExternal: false
  name: NodesAfterSelf()
  nameWithType: XNode.NodesAfterSelf()
  fullName: XNode.NodesAfterSelf()
- uid: System.Xml.Linq.XNode.NodesBeforeSelf
  parent: System.Xml.Linq.XNode
  isExternal: false
  name: NodesBeforeSelf()
  nameWithType: XNode.NodesBeforeSelf()
  fullName: XNode.NodesBeforeSelf()
- uid: System.Xml.Linq.XNode.PreviousNode
  parent: System.Xml.Linq.XNode
  isExternal: false
  name: PreviousNode
  nameWithType: XNode.PreviousNode
  fullName: XNode.PreviousNode
- uid: System.Xml.Linq.XNode.ReadFrom(System.Xml.XmlReader)
  parent: System.Xml.Linq.XNode
  isExternal: false
  name: ReadFrom(XmlReader)
  nameWithType: XNode.ReadFrom(XmlReader)
  fullName: XNode.ReadFrom(XmlReader)
- uid: System.Xml.Linq.XNode.ReadFromAsync(System.Xml.XmlReader,System.Threading.CancellationToken)
  parent: System.Xml.Linq.XNode
  isExternal: false
  name: ReadFromAsync(XmlReader, CancellationToken)
  nameWithType: XNode.ReadFromAsync(XmlReader, CancellationToken)
  fullName: XNode.ReadFromAsync(XmlReader, CancellationToken)
- uid: System.Xml.Linq.XNode.Remove
  parent: System.Xml.Linq.XNode
  isExternal: false
  name: Remove()
  nameWithType: XNode.Remove()
  fullName: XNode.Remove()
- uid: System.Xml.Linq.XNode.ReplaceWith(System.Object)
  parent: System.Xml.Linq.XNode
  isExternal: false
  name: ReplaceWith(Object)
  nameWithType: XNode.ReplaceWith(Object)
  fullName: XNode.ReplaceWith(Object)
- uid: System.Xml.Linq.XNode.ReplaceWith(System.Object[])
  parent: System.Xml.Linq.XNode
  isExternal: false
  name: ReplaceWith(Object[])
  nameWithType: XNode.ReplaceWith(Object[])
  fullName: XNode.ReplaceWith(Object[])
- uid: System.Xml.Linq.XNode.ToString(System.Xml.Linq.SaveOptions)
  parent: System.Xml.Linq.XNode
  isExternal: false
  name: ToString(SaveOptions)
  nameWithType: XNode.ToString(SaveOptions)
  fullName: XNode.ToString(SaveOptions)
- uid: System.Xml.Linq.XContainer.Add(System.Object)
  parent: System.Xml.Linq.XContainer
  isExternal: false
  name: Add(Object)
  nameWithType: XContainer.Add(Object)
  fullName: XContainer.Add(Object)
- uid: System.Xml.Linq.XContainer.Add(System.Object[])
  parent: System.Xml.Linq.XContainer
  isExternal: false
  name: Add(Object[])
  nameWithType: XContainer.Add(Object[])
  fullName: XContainer.Add(Object[])
- uid: System.Xml.Linq.XContainer.AddFirst(System.Object)
  parent: System.Xml.Linq.XContainer
  isExternal: false
  name: AddFirst(Object)
  nameWithType: XContainer.AddFirst(Object)
  fullName: XContainer.AddFirst(Object)
- uid: System.Xml.Linq.XContainer.AddFirst(System.Object[])
  parent: System.Xml.Linq.XContainer
  isExternal: false
  name: AddFirst(Object[])
  nameWithType: XContainer.AddFirst(Object[])
  fullName: XContainer.AddFirst(Object[])
- uid: System.Xml.Linq.XContainer.CreateWriter
  parent: System.Xml.Linq.XContainer
  isExternal: false
  name: CreateWriter()
  nameWithType: XContainer.CreateWriter()
  fullName: XContainer.CreateWriter()
- uid: System.Xml.Linq.XContainer.DescendantNodes
  parent: System.Xml.Linq.XContainer
  isExternal: false
  name: DescendantNodes()
  nameWithType: XContainer.DescendantNodes()
  fullName: XContainer.DescendantNodes()
- uid: System.Xml.Linq.XContainer.Descendants
  parent: System.Xml.Linq.XContainer
  isExternal: false
  name: Descendants()
  nameWithType: XContainer.Descendants()
  fullName: XContainer.Descendants()
- uid: System.Xml.Linq.XContainer.Descendants(System.Xml.Linq.XName)
  parent: System.Xml.Linq.XContainer
  isExternal: false
  name: Descendants(XName)
  nameWithType: XContainer.Descendants(XName)
  fullName: XContainer.Descendants(XName)
- uid: System.Xml.Linq.XContainer.Element(System.Xml.Linq.XName)
  parent: System.Xml.Linq.XContainer
  isExternal: false
  name: Element(XName)
  nameWithType: XContainer.Element(XName)
  fullName: XContainer.Element(XName)
- uid: System.Xml.Linq.XContainer.Elements
  parent: System.Xml.Linq.XContainer
  isExternal: false
  name: Elements()
  nameWithType: XContainer.Elements()
  fullName: XContainer.Elements()
- uid: System.Xml.Linq.XContainer.Elements(System.Xml.Linq.XName)
  parent: System.Xml.Linq.XContainer
  isExternal: false
  name: Elements(XName)
  nameWithType: XContainer.Elements(XName)
  fullName: XContainer.Elements(XName)
- uid: System.Xml.Linq.XContainer.FirstNode
  parent: System.Xml.Linq.XContainer
  isExternal: false
  name: FirstNode
  nameWithType: XContainer.FirstNode
  fullName: XContainer.FirstNode
- uid: System.Xml.Linq.XContainer.LastNode
  parent: System.Xml.Linq.XContainer
  isExternal: false
  name: LastNode
  nameWithType: XContainer.LastNode
  fullName: XContainer.LastNode
- uid: System.Xml.Linq.XContainer.Nodes
  parent: System.Xml.Linq.XContainer
  isExternal: false
  name: Nodes()
  nameWithType: XContainer.Nodes()
  fullName: XContainer.Nodes()
- uid: System.Xml.Linq.XContainer.RemoveNodes
  parent: System.Xml.Linq.XContainer
  isExternal: false
  name: RemoveNodes()
  nameWithType: XContainer.RemoveNodes()
  fullName: XContainer.RemoveNodes()
- uid: System.Xml.Linq.XContainer.ReplaceNodes(System.Object)
  parent: System.Xml.Linq.XContainer
  isExternal: false
  name: ReplaceNodes(Object)
  nameWithType: XContainer.ReplaceNodes(Object)
  fullName: XContainer.ReplaceNodes(Object)
- uid: System.Xml.Linq.XContainer.ReplaceNodes(System.Object[])
  parent: System.Xml.Linq.XContainer
  isExternal: false
  name: ReplaceNodes(Object[])
  nameWithType: XContainer.ReplaceNodes(Object[])
  fullName: XContainer.ReplaceNodes(Object[])
- uid: System.Xml.Schema.Extensions.GetSchemaInfo(System.Xml.Linq.XElement)
  parent: System.Xml.Schema.Extensions
  isExternal: false
  name: GetSchemaInfo(XElement)
  nameWithType: Extensions.GetSchemaInfo(XElement)
  fullName: Extensions.GetSchemaInfo(XElement)
- uid: System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XElement,System.Xml.Schema.XmlSchemaObject,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler)
  parent: System.Xml.Schema.Extensions
  isExternal: false
  name: Validate(XElement, XmlSchemaObject, XmlSchemaSet, ValidationEventHandler)
  nameWithType: Extensions.Validate(XElement, XmlSchemaObject, XmlSchemaSet, ValidationEventHandler)
  fullName: Extensions.Validate(XElement, XmlSchemaObject, XmlSchemaSet, ValidationEventHandler)
- uid: System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XElement,System.Xml.Schema.XmlSchemaObject,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler,System.Boolean)
  parent: System.Xml.Schema.Extensions
  isExternal: false
  name: Validate(XElement, XmlSchemaObject, XmlSchemaSet, ValidationEventHandler, Boolean)
  nameWithType: Extensions.Validate(XElement, XmlSchemaObject, XmlSchemaSet, ValidationEventHandler, Boolean)
  fullName: Extensions.Validate(XElement, XmlSchemaObject, XmlSchemaSet, ValidationEventHandler, Boolean)
- uid: System.Xml.XPath.Extensions.CreateNavigator(System.Xml.Linq.XNode)
  parent: System.Xml.XPath.Extensions
  isExternal: false
  name: CreateNavigator(XNode)
  nameWithType: Extensions.CreateNavigator(XNode)
  fullName: Extensions.CreateNavigator(XNode)
- uid: System.Xml.XPath.Extensions.CreateNavigator(System.Xml.Linq.XNode,System.Xml.XmlNameTable)
  parent: System.Xml.XPath.Extensions
  isExternal: false
  name: CreateNavigator(XNode, XmlNameTable)
  nameWithType: Extensions.CreateNavigator(XNode, XmlNameTable)
  fullName: Extensions.CreateNavigator(XNode, XmlNameTable)
- uid: System.Xml.XPath.Extensions.XPathEvaluate(System.Xml.Linq.XNode,System.String)
  parent: System.Xml.XPath.Extensions
  isExternal: false
  name: XPathEvaluate(XNode, String)
  nameWithType: Extensions.XPathEvaluate(XNode, String)
  fullName: Extensions.XPathEvaluate(XNode, String)
- uid: System.Xml.XPath.Extensions.XPathEvaluate(System.Xml.Linq.XNode,System.String,System.Xml.IXmlNamespaceResolver)
  parent: System.Xml.XPath.Extensions
  isExternal: false
  name: XPathEvaluate(XNode, String, IXmlNamespaceResolver)
  nameWithType: Extensions.XPathEvaluate(XNode, String, IXmlNamespaceResolver)
  fullName: Extensions.XPathEvaluate(XNode, String, IXmlNamespaceResolver)
- uid: System.Xml.XPath.Extensions.XPathSelectElement(System.Xml.Linq.XNode,System.String)
  parent: System.Xml.XPath.Extensions
  isExternal: false
  name: XPathSelectElement(XNode, String)
  nameWithType: Extensions.XPathSelectElement(XNode, String)
  fullName: Extensions.XPathSelectElement(XNode, String)
- uid: System.Xml.XPath.Extensions.XPathSelectElement(System.Xml.Linq.XNode,System.String,System.Xml.IXmlNamespaceResolver)
  parent: System.Xml.XPath.Extensions
  isExternal: false
  name: XPathSelectElement(XNode, String, IXmlNamespaceResolver)
  nameWithType: Extensions.XPathSelectElement(XNode, String, IXmlNamespaceResolver)
  fullName: Extensions.XPathSelectElement(XNode, String, IXmlNamespaceResolver)
- uid: System.Xml.XPath.Extensions.XPathSelectElements(System.Xml.Linq.XNode,System.String)
  parent: System.Xml.XPath.Extensions
  isExternal: false
  name: XPathSelectElements(XNode, String)
  nameWithType: Extensions.XPathSelectElements(XNode, String)
  fullName: Extensions.XPathSelectElements(XNode, String)
- uid: System.Xml.XPath.Extensions.XPathSelectElements(System.Xml.Linq.XNode,System.String,System.Xml.IXmlNamespaceResolver)
  parent: System.Xml.XPath.Extensions
  isExternal: false
  name: XPathSelectElements(XNode, String, IXmlNamespaceResolver)
  nameWithType: Extensions.XPathSelectElements(XNode, String, IXmlNamespaceResolver)
  fullName: Extensions.XPathSelectElements(XNode, String, IXmlNamespaceResolver)
- uid: System.Xml.XPath.XDocumentExtensions.ToXPathNavigable(System.Xml.Linq.XNode)
  parent: System.Xml.XPath.XDocumentExtensions
  isExternal: false
  name: ToXPathNavigable(XNode)
  nameWithType: XDocumentExtensions.ToXPathNavigable(XNode)
  fullName: XDocumentExtensions.ToXPathNavigable(XNode)
- uid: System.Xml.Serialization.IXmlSerializable
  parent: System.Xml.Serialization
  isExternal: false
  name: IXmlSerializable
  nameWithType: IXmlSerializable
  fullName: System.Xml.Serialization.IXmlSerializable
