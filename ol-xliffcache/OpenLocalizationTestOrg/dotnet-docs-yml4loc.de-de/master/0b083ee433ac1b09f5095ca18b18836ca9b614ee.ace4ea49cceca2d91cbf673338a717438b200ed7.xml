{"nodes":[{"content":"Provides a Cryptography Next Generation (CNG) implementation of the Elliptic Curve Digital Signature Algorithm (ECDSA).","nodes":[{"pos":[0,119],"content":"Provides a Cryptography Next Generation (CNG) implementation of the Elliptic Curve Digital Signature Algorithm (ECDSA).","nodes":[{"content":"Provides a Cryptography Next Generation (CNG) implementation of the Elliptic Curve Digital Signature Algorithm (ECDSA).","pos":[0,119]}]}],"pos":[2590,2710],"yaml":true},{"content":"This class derives from the <xref:System.Security.Cryptography.ECDsa> abstract base class.","nodes":[{"pos":[0,90],"content":"This class derives from the <xref:System.Security.Cryptography.ECDsa> abstract base class.","nodes":[{"content":"This class derives from the <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.ECDsa&gt;</ph> abstract base class.","pos":[0,90],"source":"This class derives from the <xref:System.Security.Cryptography.ECDsa> abstract base class."}]}],"pos":[2721,2812],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.ECDsaCng\"></xref> class with a random key pair.","nodes":[{"pos":[0,122],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.ECDsaCng\"&gt;&lt;/xref&gt;</ph> class with a random key pair.","source":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.ECDsaCng\"></xref> class with a random key pair."}],"pos":[6359,6482],"yaml":true},{"content":"The random key pair has a public key length of 521 bits.","nodes":[{"pos":[0,56],"content":"The random key pair has a public key length of 521 bits.","nodes":[{"content":"The random key pair has a public key length of 521 bits.","pos":[0,56]}]}],"pos":[6493,6550],"yaml":true,"extradata":"MT"},{"content":"Cryptography Next Generation (CNG) classes are not supported on this system.","nodes":[{"pos":[0,76],"content":"Cryptography Next Generation (CNG) classes are not supported on this system.","nodes":[{"content":"Cryptography Next Generation (CNG) classes are not supported on this system.","pos":[0,76]}]}],"pos":[6801,6878],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.ECDsaCng\"></xref> class with a random key pair, using the specified key size.","nodes":[{"pos":[0,152],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.ECDsaCng\"&gt;&lt;/xref&gt;</ph> class with a random key pair, using the specified key size.","source":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.ECDsaCng\"></xref> class with a random key pair, using the specified key size."}],"pos":[8125,8278],"yaml":true},{"content":"The random key pair will have the public key length defined by the `keySize` parameter.","nodes":[{"pos":[0,87],"content":"The random key pair will have the public key length defined by the <ph id=\"ph1\">`keySize`</ph> parameter.","source":"The random key pair will have the public key length defined by the `keySize` parameter."}],"pos":[8289,8377],"yaml":true,"extradata":"MT"},{"content":"The size of the key. Valid key sizes are 256, 384, and 521 bits.","nodes":[{"pos":[0,64],"content":"The size of the key. Valid key sizes are 256, 384, and 521 bits.","nodes":[{"content":"The size of the key. Valid key sizes are 256, 384, and 521 bits.","pos":[0,64],"nodes":[{"content":"The size of the key.","pos":[0,20]},{"content":"Valid key sizes are 256, 384, and 521 bits.","pos":[21,64]}]}]}],"pos":[8509,8574],"yaml":true},{"content":"Cryptography Next Generation (CNG) classes are not supported on this system.","nodes":[{"pos":[0,76],"content":"Cryptography Next Generation (CNG) classes are not supported on this system.","nodes":[{"content":"Cryptography Next Generation (CNG) classes are not supported on this system.","pos":[0,76]}]}],"pos":[8763,8840],"yaml":true},{"content":"<code>keySize</code> specifies an invalid length.","nodes":[{"pos":[0,49],"content":"<ph id=\"ph1\">&lt;code&gt;keySize&lt;/code&gt;</ph> specifies an invalid length.","source":"<code>keySize</code> specifies an invalid length."}],"pos":[8988,9038],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.ECDsaCng\"></xref> class by using the specified <xref href=\"System.Security.Cryptography.CngKey\"></xref> object.","nodes":[{"pos":[0,186],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.ECDsaCng\"&gt;&lt;/xref&gt;</ph> class by using the specified <ph id=\"ph2\">&lt;xref href=\"System.Security.Cryptography.CngKey\"&gt;&lt;/xref&gt;</ph> object.","source":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.ECDsaCng\"></xref> class by using the specified <xref href=\"System.Security.Cryptography.CngKey\"></xref> object."}],"pos":[10357,10544],"yaml":true},{"content":"The key that will be used as input to the cryptographic operations performed by the current object.","nodes":[{"pos":[0,99],"content":"The key that will be used as input to the cryptographic operations performed by the current object.","nodes":[{"content":"The key that will be used as input to the cryptographic operations performed by the current object.","pos":[0,99]}]}],"pos":[10723,10823],"yaml":true},{"content":"<code>key</code> does not specify an Elliptic Curve Digital Signature Algorithm (ECDSA) group.","nodes":[{"pos":[0,94],"content":"<ph id=\"ph1\">&lt;code&gt;key&lt;/code&gt;</ph> does not specify an Elliptic Curve Digital Signature Algorithm (ECDSA) group.","source":"<code>key</code> does not specify an Elliptic Curve Digital Signature Algorithm (ECDSA) group."}],"pos":[10988,11083],"yaml":true},{"content":"<code>key</code> is `null`.","nodes":[{"pos":[0,27],"content":"<ph id=\"ph1\">&lt;code&gt;key&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>key</code> is `null`."}],"pos":[11185,11213],"yaml":true},{"content":"Cryptography Next Generation (CNG) classes are not supported on this system.","nodes":[{"pos":[0,76],"content":"Cryptography Next Generation (CNG) classes are not supported on this system.","nodes":[{"content":"Cryptography Next Generation (CNG) classes are not supported on this system.","pos":[0,76]}]}],"pos":[11331,11408],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.ECDsaCng\"></xref> class whose public/private key pair is generated over the specified curve.","nodes":[{"pos":[0,167],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.ECDsaCng\"&gt;&lt;/xref&gt;</ph> class whose public/private key pair is generated over the specified curve.","source":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.ECDsaCng\"></xref> class whose public/private key pair is generated over the specified curve."}],"pos":[12750,12918],"yaml":true},{"content":"`curve` must validate (that is, it must return `true`) when passed to the <xref:System.Security.Cryptography.ECCurve.Validate%2A?displayProperty=fullName> method and must be either a named or explicit prime.","nodes":[{"pos":[0,207],"content":"<ph id=\"ph1\">`curve`</ph> must validate (that is, it must return <ph id=\"ph2\">`true`</ph>) when passed to the <ph id=\"ph3\">&lt;xref:System.Security.Cryptography.ECCurve.Validate%2A?displayProperty=fullName&gt;</ph> method and must be either a named or explicit prime.","source":"`curve` must validate (that is, it must return `true`) when passed to the <xref:System.Security.Cryptography.ECCurve.Validate%2A?displayProperty=fullName> method and must be either a named or explicit prime."}],"pos":[12929,13139],"yaml":true,"extradata":"MT"},{"content":"The curve used to generate the public/private key pair.","nodes":[{"pos":[0,55],"content":"The curve used to generate the public/private key pair.","nodes":[{"content":"The curve used to generate the public/private key pair.","pos":[0,55]}]}],"pos":[13324,13380],"yaml":true},{"content":"<code>curve</code> does not validate.","nodes":[{"pos":[0,37],"content":"<ph id=\"ph1\">&lt;code&gt;curve&lt;/code&gt;</ph> does not validate.","source":"<code>curve</code> does not validate."}],"pos":[13599,13637],"yaml":true},{"content":"Exports the key and explicit curve parameters used by the Elliptic curve cryptography (ECC) object into an <xref href=\"System.Security.Cryptography.ECParameters\"></xref> object.","nodes":[{"pos":[0,177],"content":"Exports the key and explicit curve parameters used by the Elliptic curve cryptography (ECC) object into an <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.ECParameters\"&gt;&lt;/xref&gt;</ph> object.","source":"Exports the key and explicit curve parameters used by the Elliptic curve cryptography (ECC) object into an <xref href=\"System.Security.Cryptography.ECParameters\"></xref> object."}],"pos":[15948,16126],"yaml":true},{"content":"`true` to include private parameters; otherwise, `false`.","nodes":[{"pos":[0,57],"content":"<ph id=\"ph1\">`true`</ph> to include private parameters; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` to include private parameters; otherwise, `false`."}],"pos":[16362,16422],"yaml":true},{"content":"The key and explicit curve parameters used by the ECC object.","nodes":[{"pos":[0,61],"content":"The key and explicit curve parameters used by the ECC object.","nodes":[{"content":"The key and explicit curve parameters used by the ECC object.","pos":[0,61]}]}],"pos":[16507,16569],"yaml":true},{"content":"An error occurred while obtaining the curve values.","nodes":[{"pos":[0,51],"content":"An error occurred while obtaining the curve values.","nodes":[{"content":"An error occurred while obtaining the curve values.","pos":[0,51]}]}],"pos":[16807,16859],"yaml":true},{"content":"Explicit export is not supported by this platform. Windows 10 or higher is required.","nodes":[{"pos":[0,84],"content":"Explicit export is not supported by this platform. Windows 10 or higher is required.","nodes":[{"content":"Explicit export is not supported by this platform. Windows 10 or higher is required.","pos":[0,84],"nodes":[{"content":"Explicit export is not supported by this platform.","pos":[0,50]},{"content":"Windows 10 or higher is required.","pos":[51,84]}]}]}],"pos":[16977,17062],"yaml":true},{"content":"Exports the key used by the Elliptic curve cryptography (ECC) object into an <xref href=\"System.Security.Cryptography.ECParameters\"></xref> object. If the key was created as a named curve, the <xref href=\"System.Security.Cryptography.ECParameters.Curve\"></xref> field contains named curve parameters; otherwise, it contains explicit parameters.","nodes":[{"pos":[0,344],"content":"Exports the key used by the Elliptic curve cryptography (ECC) object into an <xref href=\"System.Security.Cryptography.ECParameters\"></xref> object. If the key was created as a named curve, the <xref href=\"System.Security.Cryptography.ECParameters.Curve\"></xref> field contains named curve parameters; otherwise, it contains explicit parameters.","nodes":[{"content":"Exports the key used by the Elliptic curve cryptography (ECC) object into an <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.ECParameters\"&gt;&lt;/xref&gt;</ph> object.","pos":[0,147],"source":"Exports the key used by the Elliptic curve cryptography (ECC) object into an <xref href=\"System.Security.Cryptography.ECParameters\"></xref> object."},{"content":"If the key was created as a named curve, the <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.ECParameters.Curve\"&gt;&lt;/xref&gt;</ph> field contains named curve parameters; otherwise, it contains explicit parameters.","pos":[148,344],"source":" If the key was created as a named curve, the <xref href=\"System.Security.Cryptography.ECParameters.Curve\"></xref> field contains named curve parameters; otherwise, it contains explicit parameters."}]}],"pos":[17979,18324],"yaml":true},{"content":"`true` to include private parameters; otherwise, `false`.","nodes":[{"pos":[0,57],"content":"<ph id=\"ph1\">`true`</ph> to include private parameters; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` to include private parameters; otherwise, `false`."}],"pos":[18552,18612],"yaml":true},{"content":"The key and named curve parameters used by the ECC object.","nodes":[{"pos":[0,58],"content":"The key and named curve parameters used by the ECC object.","nodes":[{"content":"The key and named curve parameters used by the ECC object.","pos":[0,58]}]}],"pos":[18697,18756],"yaml":true},{"content":"An error occurred while obtaining the curve values.","nodes":[{"pos":[0,51],"content":"An error occurred while obtaining the curve values.","nodes":[{"content":"An error occurred while obtaining the curve values.","pos":[0,51]}]}],"pos":[18986,19038],"yaml":true},{"content":"This method is not implemented.","nodes":[{"pos":[0,31],"content":"This method is not implemented.","nodes":[{"content":"This method is not implemented.","pos":[0,31]}]}],"pos":[19878,19910],"yaml":true},{"content":"To deserialize an XML key, use the <xref:System.Security.Cryptography.ECDsaCng.FromXmlString%28System.String%2CSystem.Security.Cryptography.ECKeyXmlFormat%29> overload instead.","nodes":[{"pos":[0,176],"content":"To deserialize an XML key, use the <xref:System.Security.Cryptography.ECDsaCng.FromXmlString%28System.String%2CSystem.Security.Cryptography.ECKeyXmlFormat%29> overload instead.","nodes":[{"content":"To deserialize an XML key, use the <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.ECDsaCng.FromXmlString%28System.String%2CSystem.Security.Cryptography.ECKeyXmlFormat%29&gt;</ph> overload instead.","pos":[0,176],"source":"To deserialize an XML key, use the <xref:System.Security.Cryptography.ECDsaCng.FromXmlString%28System.String%2CSystem.Security.Cryptography.ECKeyXmlFormat%29> overload instead."}]}],"pos":[19921,20098],"yaml":true,"extradata":"MT"},{"content":"The XML-based key information to be deserialized.","nodes":[{"pos":[0,49],"content":"The XML-based key information to be deserialized.","nodes":[{"content":"The XML-based key information to be deserialized.","pos":[0,49]}]}],"pos":[20257,20307],"yaml":true},{"content":"This method was not overridden for this instance.","nodes":[{"pos":[0,49],"content":"This method was not overridden for this instance.","nodes":[{"content":"This method was not overridden for this instance.","pos":[0,49]}]}],"pos":[20492,20542],"yaml":true},{"content":"Deserializes the key information from an XML string by using the specified format.","nodes":[{"pos":[0,82],"content":"Deserializes the key information from an XML string by using the specified format.","nodes":[{"content":"Deserializes the key information from an XML string by using the specified format.","pos":[0,82]}]}],"pos":[21771,21854],"yaml":true},{"content":"The XML-based key information to be deserialized.","nodes":[{"pos":[0,49],"content":"The XML-based key information to be deserialized.","nodes":[{"content":"The XML-based key information to be deserialized.","pos":[0,49]}]}],"pos":[22044,22094],"yaml":true},{"content":"One of the enumeration values that specifies the format of the XML string. The only currently accepted format is <xref href=\"System.Security.Cryptography.ECKeyXmlFormat.Rfc4050\"></xref>.","nodes":[{"pos":[0,186],"content":"One of the enumeration values that specifies the format of the XML string. The only currently accepted format is <xref href=\"System.Security.Cryptography.ECKeyXmlFormat.Rfc4050\"></xref>.","nodes":[{"content":"One of the enumeration values that specifies the format of the XML string.","pos":[0,74]},{"content":"The only currently accepted format is <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.ECKeyXmlFormat.Rfc4050\"&gt;&lt;/xref&gt;</ph>.","pos":[75,186],"source":" The only currently accepted format is <xref href=\"System.Security.Cryptography.ECKeyXmlFormat.Rfc4050\"></xref>."}]}],"pos":[22186,22373],"yaml":true},{"content":"<code>xml</code> is `null`.","nodes":[{"pos":[0,27],"content":"<ph id=\"ph1\">&lt;code&gt;xml&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>xml</code> is `null`."}],"pos":[22554,22582],"yaml":true},{"content":"<code>format</code> specifies an invalid format. The only accepted value is <xref href=\"System.Security.Cryptography.ECKeyXmlFormat.Rfc4050\"></xref>.","nodes":[{"pos":[0,149],"content":"<code>format</code> specifies an invalid format. The only accepted value is <xref href=\"System.Security.Cryptography.ECKeyXmlFormat.Rfc4050\"></xref>.","nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;format&lt;/code&gt;</ph> specifies an invalid format.","pos":[0,48],"source":"<code>format</code> specifies an invalid format."},{"content":"The only accepted value is <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.ECKeyXmlFormat.Rfc4050\"&gt;&lt;/xref&gt;</ph>.","pos":[49,149],"source":" The only accepted value is <xref href=\"System.Security.Cryptography.ECKeyXmlFormat.Rfc4050\"></xref>."}]}],"pos":[22696,22846],"yaml":true},{"content":"All other errors.","nodes":[{"pos":[0,17],"content":"All other errors.","nodes":[{"content":"All other errors.","pos":[0,17]}]}],"pos":[22994,23012],"yaml":true},{"content":"Generates a key to use for the ECDsaCng algorithm.","nodes":[{"pos":[0,50],"content":"Generates a key to use for the ECDsaCng algorithm.","nodes":[{"content":"Generates a key to use for the ECDsaCng algorithm.","pos":[0,50]}]}],"pos":[24169,24220],"yaml":true},{"content":"The curve to use to generate the key.","nodes":[{"pos":[0,37],"content":"The curve to use to generate the key.","nodes":[{"content":"The curve to use to generate the key.","pos":[0,37]}]}],"pos":[24422,24460],"yaml":true},{"content":"<code>curve</code> does not validate.","nodes":[{"pos":[0,37],"content":"<ph id=\"ph1\">&lt;code&gt;curve&lt;/code&gt;</ph> does not validate.","source":"<code>curve</code> does not validate."}],"pos":[24685,24723],"yaml":true},{"content":"Gets or sets the hash algorithm to use when signing and verifying data.","nodes":[{"pos":[0,71],"content":"Gets or sets the hash algorithm to use when signing and verifying data.","nodes":[{"content":"Gets or sets the hash algorithm to use when signing and verifying data.","pos":[0,71]}]}],"pos":[25533,25605],"yaml":true},{"content":"This property accepts the following algorithms: <xref:System.Security.Cryptography.CngAlgorithm.MD5%2A>, <xref:System.Security.Cryptography.CngAlgorithm.Sha1%2A>, <xref:System.Security.Cryptography.CngAlgorithm.Sha256%2A>, <xref:System.Security.Cryptography.CngAlgorithm.Sha384%2A>, and <xref:System.Security.Cryptography.CngAlgorithm.Sha512%2A>.  \n  \n Other custom hash algorithms may also be used.  \n  \n The default algorithm is <xref:System.Security.Cryptography.CngAlgorithm.Sha256%2A>.  \n  \n This property is not used if you are signing or verifying data that is already hashed.","nodes":[{"pos":[0,346],"content":"This property accepts the following algorithms: <xref:System.Security.Cryptography.CngAlgorithm.MD5%2A>, <xref:System.Security.Cryptography.CngAlgorithm.Sha1%2A>, <xref:System.Security.Cryptography.CngAlgorithm.Sha256%2A>, <xref:System.Security.Cryptography.CngAlgorithm.Sha384%2A>, and <xref:System.Security.Cryptography.CngAlgorithm.Sha512%2A>.","nodes":[{"content":"This property accepts the following algorithms: <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.CngAlgorithm.MD5%2A&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Security.Cryptography.CngAlgorithm.Sha1%2A&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Security.Cryptography.CngAlgorithm.Sha256%2A&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.Security.Cryptography.CngAlgorithm.Sha384%2A&gt;</ph>, and <ph id=\"ph5\">&lt;xref:System.Security.Cryptography.CngAlgorithm.Sha512%2A&gt;</ph>.","pos":[0,346],"source":"This property accepts the following algorithms: <xref:System.Security.Cryptography.CngAlgorithm.MD5%2A>, <xref:System.Security.Cryptography.CngAlgorithm.Sha1%2A>, <xref:System.Security.Cryptography.CngAlgorithm.Sha256%2A>, <xref:System.Security.Cryptography.CngAlgorithm.Sha384%2A>, and <xref:System.Security.Cryptography.CngAlgorithm.Sha512%2A>."}]},{"pos":[353,399],"content":"Other custom hash algorithms may also be used.","nodes":[{"content":"Other custom hash algorithms may also be used.","pos":[0,46]}]},{"pos":[406,490],"content":"The default algorithm is <xref:System.Security.Cryptography.CngAlgorithm.Sha256%2A>.","nodes":[{"content":"The default algorithm is <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.CngAlgorithm.Sha256%2A&gt;</ph>.","pos":[0,84],"source":"The default algorithm is <xref:System.Security.Cryptography.CngAlgorithm.Sha256%2A>."}]},{"pos":[497,583],"content":"This property is not used if you are signing or verifying data that is already hashed.","nodes":[{"content":"This property is not used if you are signing or verifying data that is already hashed.","pos":[0,86]}]}],"pos":[25616,26208],"yaml":true,"extradata":"MT"},{"content":"An object that specifies the hash algorithm.","nodes":[{"pos":[0,44],"content":"An object that specifies the hash algorithm.","nodes":[{"content":"An object that specifies the hash algorithm.","pos":[0,44]}]}],"pos":[26393,26438],"yaml":true},{"content":"The value is `null`.","nodes":[{"pos":[0,20],"content":"The value is <ph id=\"ph1\">`null`</ph>.","source":"The value is `null`."}],"pos":[26619,26640],"yaml":true},{"content":"Replaces the existing key that the current instance is working with by creating a new <xref href=\"System.Security.Cryptography.CngKey\"></xref> for the parameters structure.","nodes":[{"pos":[0,172],"content":"Replaces the existing key that the current instance is working with by creating a new <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.CngKey\"&gt;&lt;/xref&gt;</ph> for the parameters structure.","source":"Replaces the existing key that the current instance is working with by creating a new <xref href=\"System.Security.Cryptography.CngKey\"></xref> for the parameters structure."}],"pos":[31157,31330],"yaml":true},{"content":"If `parameters` contains only <xref:System.Security.Cryptography.ECParameters.Q>, only a public key is imported. If `parameters` also contains <xref:System.Security.Cryptography.ECParameters.D>, a full key pair is imported. The <xref:System.Security.Cryptography.ECParameters.Curve> field specifies the type of the curve to import.","nodes":[{"pos":[0,331],"content":"If `parameters` contains only <xref:System.Security.Cryptography.ECParameters.Q>, only a public key is imported. If `parameters` also contains <xref:System.Security.Cryptography.ECParameters.D>, a full key pair is imported. The <xref:System.Security.Cryptography.ECParameters.Curve> field specifies the type of the curve to import.","nodes":[{"content":"If <ph id=\"ph1\">`parameters`</ph> contains only <ph id=\"ph2\">&lt;xref:System.Security.Cryptography.ECParameters.Q&gt;</ph>, only a public key is imported.","pos":[0,112],"source":"If `parameters` contains only <xref:System.Security.Cryptography.ECParameters.Q>, only a public key is imported."},{"content":"If <ph id=\"ph1\">`parameters`</ph> also contains <ph id=\"ph2\">&lt;xref:System.Security.Cryptography.ECParameters.D&gt;</ph>, a full key pair is imported.","pos":[113,223],"source":" If `parameters` also contains <xref:System.Security.Cryptography.ECParameters.D>, a full key pair is imported."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.ECParameters.Curve&gt;</ph> field specifies the type of the curve to import.","pos":[224,331],"source":" The <xref:System.Security.Cryptography.ECParameters.Curve> field specifies the type of the curve to import."}]}],"pos":[31341,31673],"yaml":true,"extradata":"MT"},{"content":"The curve parameters.","nodes":[{"pos":[0,21],"content":"The curve parameters.","nodes":[{"content":"The curve parameters.","pos":[0,21]}]}],"pos":[31900,31922],"yaml":true},{"content":"<code>parameters</code> does not contain valid values.","nodes":[{"pos":[0,54],"content":"<ph id=\"ph1\">&lt;code&gt;parameters&lt;/code&gt;</ph> does not contain valid values.","source":"<code>parameters</code> does not contain valid values."}],"pos":[32152,32207],"yaml":true},{"content":"<code>parameters</code> references a curve that cannot be imported.","nodes":[{"pos":[0,67],"content":"<ph id=\"ph1\">&lt;code&gt;parameters&lt;/code&gt;</ph> references a curve that cannot be imported.","source":"<code>parameters</code> references a curve that cannot be imported."}],"pos":[32309,32377],"yaml":true},{"content":"<code>parameters</code> references a curve that is not supported by this platform.","nodes":[{"pos":[0,82],"content":"<ph id=\"ph1\">&lt;code&gt;parameters&lt;/code&gt;</ph> references a curve that is not supported by this platform.","source":"<code>parameters</code> references a curve that is not supported by this platform."}],"pos":[32495,32578],"yaml":true},{"content":"Gets or sets the key to use when signing and verifying data.","nodes":[{"pos":[0,60],"content":"Gets or sets the key to use when signing and verifying data.","nodes":[{"content":"Gets or sets the key to use when signing and verifying data.","pos":[0,60]}]}],"pos":[33344,33405],"yaml":true},{"content":"An object that specifies the key.","nodes":[{"pos":[0,33],"content":"An object that specifies the key.","nodes":[{"content":"An object that specifies the key.","pos":[0,33]}]}],"pos":[33563,33597],"yaml":true},{"content":"Generates a signature for the specified data.","nodes":[{"pos":[0,45],"content":"Generates a signature for the specified data.","nodes":[{"content":"Generates a signature for the specified data.","pos":[0,45]}]}],"pos":[36668,36714],"yaml":true},{"content":"This method generates a signature for the specified data by hashing the input data using the <xref:System.Security.Cryptography.ECDsaCng.HashAlgorithm%2A> property, and then signing the result.  \n  \n The <xref:System.Security.Permissions.KeyContainerPermissionFlags?displayProperty=fullName> flag is required if the Cryptography Next Generation (CNG) key is not randomly generated by the <xref:System.Security.Cryptography.ECDsaCng> object.","nodes":[{"pos":[0,193],"content":"This method generates a signature for the specified data by hashing the input data using the <xref:System.Security.Cryptography.ECDsaCng.HashAlgorithm%2A> property, and then signing the result.","nodes":[{"content":"This method generates a signature for the specified data by hashing the input data using the <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.ECDsaCng.HashAlgorithm%2A&gt;</ph> property, and then signing the result.","pos":[0,193],"source":"This method generates a signature for the specified data by hashing the input data using the <xref:System.Security.Cryptography.ECDsaCng.HashAlgorithm%2A> property, and then signing the result."}]},{"pos":[200,440],"content":"The <xref:System.Security.Permissions.KeyContainerPermissionFlags?displayProperty=fullName> flag is required if the Cryptography Next Generation (CNG) key is not randomly generated by the <xref:System.Security.Cryptography.ECDsaCng> object.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Security.Permissions.KeyContainerPermissionFlags?displayProperty=fullName&gt;</ph> flag is required if the Cryptography Next Generation (CNG) key is not randomly generated by the <ph id=\"ph2\">&lt;xref:System.Security.Cryptography.ECDsaCng&gt;</ph> object.","pos":[0,240],"source":"The <xref:System.Security.Permissions.KeyContainerPermissionFlags?displayProperty=fullName> flag is required if the Cryptography Next Generation (CNG) key is not randomly generated by the <xref:System.Security.Cryptography.ECDsaCng> object."}]}],"pos":[36725,37170],"yaml":true,"extradata":"MT"},{"content":"The message data to be signed.","nodes":[{"pos":[0,30],"content":"The message data to be signed.","nodes":[{"content":"The message data to be signed.","pos":[0,30]}]}],"pos":[37307,37338],"yaml":true},{"content":"A digital signature for the specified data.","nodes":[{"pos":[0,43],"content":"A digital signature for the specified data.","nodes":[{"content":"A digital signature for the specified data.","pos":[0,43]}]}],"pos":[37395,37439],"yaml":true},{"content":"<code>data</code> is `null`.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;data&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>data</code> is `null`."}],"pos":[37615,37644],"yaml":true},{"content":"The key information that is associated with the instance does not have a private key.","nodes":[{"pos":[0,85],"content":"The key information that is associated with the instance does not have a private key.","nodes":[{"content":"The key information that is associated with the instance does not have a private key.","pos":[0,85]}]}],"pos":[37792,37878],"yaml":true},{"content":"Generates a signature for the specified data stream, reading to the end of the stream.","nodes":[{"pos":[0,86],"content":"Generates a signature for the specified data stream, reading to the end of the stream.","nodes":[{"content":"Generates a signature for the specified data stream, reading to the end of the stream.","pos":[0,86]}]}],"pos":[38938,39025],"yaml":true},{"content":"This method generates a signature for the specified data stream by hashing the input data using the <xref:System.Security.Cryptography.ECDsaCng.HashAlgorithm%2A> property, and then signing the result.  \n  \n The <xref:System.Security.Permissions.KeyContainerPermissionFlags?displayProperty=fullName> flag is required if the Cryptography Next Generation (CNG) key is not randomly generated by the <xref:System.Security.Cryptography.ECDsaCng> object.","nodes":[{"pos":[0,200],"content":"This method generates a signature for the specified data stream by hashing the input data using the <xref:System.Security.Cryptography.ECDsaCng.HashAlgorithm%2A> property, and then signing the result.","nodes":[{"content":"This method generates a signature for the specified data stream by hashing the input data using the <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.ECDsaCng.HashAlgorithm%2A&gt;</ph> property, and then signing the result.","pos":[0,200],"source":"This method generates a signature for the specified data stream by hashing the input data using the <xref:System.Security.Cryptography.ECDsaCng.HashAlgorithm%2A> property, and then signing the result."}]},{"pos":[207,447],"content":"The <xref:System.Security.Permissions.KeyContainerPermissionFlags?displayProperty=fullName> flag is required if the Cryptography Next Generation (CNG) key is not randomly generated by the <xref:System.Security.Cryptography.ECDsaCng> object.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Security.Permissions.KeyContainerPermissionFlags?displayProperty=fullName&gt;</ph> flag is required if the Cryptography Next Generation (CNG) key is not randomly generated by the <ph id=\"ph2\">&lt;xref:System.Security.Cryptography.ECDsaCng&gt;</ph> object.","pos":[0,240],"source":"The <xref:System.Security.Permissions.KeyContainerPermissionFlags?displayProperty=fullName> flag is required if the Cryptography Next Generation (CNG) key is not randomly generated by the <xref:System.Security.Cryptography.ECDsaCng> object."}]}],"pos":[39036,39488],"yaml":true,"extradata":"MT"},{"content":"The data stream to be signed.","nodes":[{"pos":[0,29],"content":"The data stream to be signed.","nodes":[{"content":"The data stream to be signed.","pos":[0,29]}]}],"pos":[39638,39668],"yaml":true},{"content":"A digital signature for the specified data stream.","nodes":[{"pos":[0,50],"content":"A digital signature for the specified data stream.","nodes":[{"content":"A digital signature for the specified data stream.","pos":[0,50]}]}],"pos":[39725,39776],"yaml":true},{"content":"<code>data</code> is `null`.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;data&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>data</code> is `null`."}],"pos":[39952,39981],"yaml":true},{"content":"The key information that is associated with the instance does not have a private key.","nodes":[{"pos":[0,85],"content":"The key information that is associated with the instance does not have a private key.","nodes":[{"content":"The key information that is associated with the instance does not have a private key.","pos":[0,85]}]}],"pos":[40129,40215],"yaml":true},{"content":"Generates a digital signature for the specified length of data, beginning at the specified offset.","nodes":[{"pos":[0,98],"content":"Generates a digital signature for the specified length of data, beginning at the specified offset.","nodes":[{"content":"Generates a digital signature for the specified length of data, beginning at the specified offset.","pos":[0,98]}]}],"pos":[41403,41502],"yaml":true},{"content":"This method generates a signature for the specified data by hashing the input data using the <xref:System.Security.Cryptography.ECDsaCng.HashAlgorithm%2A> property, and then signing the result  \n  \n The <xref:System.Security.Permissions.KeyContainerPermissionFlags?displayProperty=fullName> flag is required if the Cryptography Next Generation (CNG) key is not randomly generated by the <xref:System.Security.Cryptography.ECDsaCng> object.","nodes":[{"pos":[0,192],"content":"This method generates a signature for the specified data by hashing the input data using the <xref:System.Security.Cryptography.ECDsaCng.HashAlgorithm%2A> property, and then signing the result","nodes":[{"content":"This method generates a signature for the specified data by hashing the input data using the <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.ECDsaCng.HashAlgorithm%2A&gt;</ph> property, and then signing the result","pos":[0,192],"source":"This method generates a signature for the specified data by hashing the input data using the <xref:System.Security.Cryptography.ECDsaCng.HashAlgorithm%2A> property, and then signing the result"}]},{"pos":[199,439],"content":"The <xref:System.Security.Permissions.KeyContainerPermissionFlags?displayProperty=fullName> flag is required if the Cryptography Next Generation (CNG) key is not randomly generated by the <xref:System.Security.Cryptography.ECDsaCng> object.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Security.Permissions.KeyContainerPermissionFlags?displayProperty=fullName&gt;</ph> flag is required if the Cryptography Next Generation (CNG) key is not randomly generated by the <ph id=\"ph2\">&lt;xref:System.Security.Cryptography.ECDsaCng&gt;</ph> object.","pos":[0,240],"source":"The <xref:System.Security.Permissions.KeyContainerPermissionFlags?displayProperty=fullName> flag is required if the Cryptography Next Generation (CNG) key is not randomly generated by the <xref:System.Security.Cryptography.ECDsaCng> object."}]}],"pos":[41513,41957],"yaml":true,"extradata":"MT"},{"content":"The message data to be signed.","nodes":[{"pos":[0,30],"content":"The message data to be signed.","nodes":[{"content":"The message data to be signed.","pos":[0,30]}]}],"pos":[42117,42148],"yaml":true},{"content":"The location in the string at which to start signing.","nodes":[{"pos":[0,53],"content":"The location in the string at which to start signing.","nodes":[{"content":"The location in the string at which to start signing.","pos":[0,53]}]}],"pos":[42209,42263],"yaml":true},{"content":"The length of the string, in characters, following <code>offset</code> that will be signed.","nodes":[{"pos":[0,91],"content":"The length of the string, in characters, following <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">offset</ph><ept id=\"p1\">&lt;/code&gt;</ept> that will be signed.","source":"The length of the string, in characters, following <code>offset</code> that will be signed."}],"pos":[42323,42415],"yaml":true},{"content":"A digital signature for the specified length of data.","nodes":[{"pos":[0,53],"content":"A digital signature for the specified length of data.","nodes":[{"content":"A digital signature for the specified length of data.","pos":[0,53]}]}],"pos":[42472,42526],"yaml":true},{"content":"<code>data</code> is `null`.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;data&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>data</code> is `null`."}],"pos":[42702,42731],"yaml":true},{"content":"<code>count</code> or <code>offset</code> caused reading outside the bounds of the data string.","nodes":[{"pos":[0,95],"content":"<ph id=\"ph1\">&lt;code&gt;count&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;offset&lt;/code&gt;</ph> caused reading outside the bounds of the data string.","source":"<code>count</code> or <code>offset</code> caused reading outside the bounds of the data string."}],"pos":[42845,42941],"yaml":true},{"content":"The key information that is associated with the instance does not have a private key.","nodes":[{"pos":[0,85],"content":"The key information that is associated with the instance does not have a private key.","nodes":[{"content":"The key information that is associated with the instance does not have a private key.","pos":[0,85]}]}],"pos":[43089,43175],"yaml":true},{"content":"Generates a signature for the specified hash value.","nodes":[{"pos":[0,51],"content":"Generates a signature for the specified hash value.","nodes":[{"content":"Generates a signature for the specified hash value.","pos":[0,51]}]}],"pos":[44259,44311],"yaml":true},{"content":"The <xref:System.Security.Permissions.KeyContainerPermissionFlags?displayProperty=fullName> flag is required if the Cryptography Next Generation (CNG) key is not randomly generated by the <xref:System.Security.Cryptography.ECDsaCng> object.","nodes":[{"pos":[0,240],"content":"The <xref:System.Security.Permissions.KeyContainerPermissionFlags?displayProperty=fullName> flag is required if the Cryptography Next Generation (CNG) key is not randomly generated by the <xref:System.Security.Cryptography.ECDsaCng> object.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Security.Permissions.KeyContainerPermissionFlags?displayProperty=fullName&gt;</ph> flag is required if the Cryptography Next Generation (CNG) key is not randomly generated by the <ph id=\"ph2\">&lt;xref:System.Security.Cryptography.ECDsaCng&gt;</ph> object.","pos":[0,240],"source":"The <xref:System.Security.Permissions.KeyContainerPermissionFlags?displayProperty=fullName> flag is required if the Cryptography Next Generation (CNG) key is not randomly generated by the <xref:System.Security.Cryptography.ECDsaCng> object."}]}],"pos":[44322,44563],"yaml":true,"extradata":"MT"},{"content":"The hash value of the data to be signed.","nodes":[{"pos":[0,40],"content":"The hash value of the data to be signed.","nodes":[{"content":"The hash value of the data to be signed.","pos":[0,40]}]}],"pos":[44709,44750],"yaml":true},{"content":"A digital signature for the specified hash value.","nodes":[{"pos":[0,49],"content":"A digital signature for the specified hash value.","nodes":[{"content":"A digital signature for the specified hash value.","pos":[0,49]}]}],"pos":[44807,44857],"yaml":true},{"content":"<code>hash</code> is `null`.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;hash&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>hash</code> is `null`."}],"pos":[45033,45062],"yaml":true},{"content":"The key information that is associated with the instance does not have a private key.","nodes":[{"pos":[0,85],"content":"The key information that is associated with the instance does not have a private key.","nodes":[{"content":"The key information that is associated with the instance does not have a private key.","pos":[0,85]}]}],"pos":[45210,45296],"yaml":true},{"content":"This method is not implemented.","nodes":[{"pos":[0,31],"content":"This method is not implemented.","nodes":[{"content":"This method is not implemented.","pos":[0,31]}]}],"pos":[46522,46554],"yaml":true},{"content":"To convert the current key to an XML representation, use the <xref:System.Security.Cryptography.ECDsaCng.ToXmlString%28System.Security.Cryptography.ECKeyXmlFormat%29> overload instead.","nodes":[{"pos":[0,184],"content":"To convert the current key to an XML representation, use the <xref:System.Security.Cryptography.ECDsaCng.ToXmlString%28System.Security.Cryptography.ECKeyXmlFormat%29> overload instead.","nodes":[{"content":"To convert the current key to an XML representation, use the <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.ECDsaCng.ToXmlString%28System.Security.Cryptography.ECKeyXmlFormat%29&gt;</ph> overload instead.","pos":[0,184],"source":"To convert the current key to an XML representation, use the <xref:System.Security.Cryptography.ECDsaCng.ToXmlString%28System.Security.Cryptography.ECKeyXmlFormat%29> overload instead."}]}],"pos":[46565,46750],"yaml":true,"extradata":"MT"},{"content":"`true` to include private parameters; otherwise, `false`.","nodes":[{"pos":[0,57],"content":"<ph id=\"ph1\">`true`</ph> to include private parameters; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` to include private parameters; otherwise, `false`."}],"pos":[46938,46998],"yaml":true},{"content":"Not applicable.","nodes":[{"pos":[0,15],"content":"Not applicable.","nodes":[{"content":"Not applicable.","pos":[0,15]}]}],"pos":[47055,47071],"yaml":true},{"content":"This method is not implemented.","nodes":[{"pos":[0,31],"content":"This method is not implemented.","nodes":[{"content":"This method is not implemented.","pos":[0,31]}]}],"pos":[47254,47286],"yaml":true},{"content":"Serializes the key information to an XML string by using the specified format.","nodes":[{"pos":[0,78],"content":"Serializes the key information to an XML string by using the specified format.","nodes":[{"content":"Serializes the key information to an XML string by using the specified format.","pos":[0,78]}]}],"pos":[48437,48516],"yaml":true},{"content":"One of the enumeration values that specifies the format of the XML string. The only currently accepted format is <xref href=\"System.Security.Cryptography.ECKeyXmlFormat.Rfc4050\"></xref>.","nodes":[{"pos":[0,186],"content":"One of the enumeration values that specifies the format of the XML string. The only currently accepted format is <xref href=\"System.Security.Cryptography.ECKeyXmlFormat.Rfc4050\"></xref>.","nodes":[{"content":"One of the enumeration values that specifies the format of the XML string.","pos":[0,74]},{"content":"The only currently accepted format is <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.ECKeyXmlFormat.Rfc4050\"&gt;&lt;/xref&gt;</ph>.","pos":[75,186],"source":" The only currently accepted format is <xref href=\"System.Security.Cryptography.ECKeyXmlFormat.Rfc4050\"></xref>."}]}],"pos":[48727,48914],"yaml":true},{"content":"A string object that contains the key information, serialized to an XML string according to the requested format.","nodes":[{"pos":[0,113],"content":"A string object that contains the key information, serialized to an XML string according to the requested format.","nodes":[{"content":"A string object that contains the key information, serialized to an XML string according to the requested format.","pos":[0,113]}]}],"pos":[48971,49085],"yaml":true},{"content":"<code>format</code> specifies an invalid format. The only accepted value is <xref href=\"System.Security.Cryptography.ECKeyXmlFormat.Rfc4050\"></xref>.","nodes":[{"pos":[0,149],"content":"<code>format</code> specifies an invalid format. The only accepted value is <xref href=\"System.Security.Cryptography.ECKeyXmlFormat.Rfc4050\"></xref>.","nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;format&lt;/code&gt;</ph> specifies an invalid format.","pos":[0,48],"source":"<code>format</code> specifies an invalid format."},{"content":"The only accepted value is <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.ECKeyXmlFormat.Rfc4050\"&gt;&lt;/xref&gt;</ph>.","pos":[49,149],"source":" The only accepted value is <xref href=\"System.Security.Cryptography.ECKeyXmlFormat.Rfc4050\"></xref>."}]}],"pos":[49276,49426],"yaml":true},{"content":"All other errors.","nodes":[{"pos":[0,17],"content":"All other errors.","nodes":[{"content":"All other errors.","pos":[0,17]}]}],"pos":[49574,49592],"yaml":true},{"content":"Verifies the digital signature of the specified data.","nodes":[{"pos":[0,53],"content":"Verifies the digital signature of the specified data.","nodes":[{"content":"Verifies the digital signature of the specified data.","pos":[0,53]}]}],"pos":[50721,50775],"yaml":true},{"content":"This method generates a signature for the given data by hashing the input data using the <xref:System.Security.Cryptography.ECDsaCng.HashAlgorithm%2A> property, and then signing the result.","nodes":[{"pos":[0,189],"content":"This method generates a signature for the given data by hashing the input data using the <xref:System.Security.Cryptography.ECDsaCng.HashAlgorithm%2A> property, and then signing the result.","nodes":[{"content":"This method generates a signature for the given data by hashing the input data using the <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.ECDsaCng.HashAlgorithm%2A&gt;</ph> property, and then signing the result.","pos":[0,189],"source":"This method generates a signature for the given data by hashing the input data using the <xref:System.Security.Cryptography.ECDsaCng.HashAlgorithm%2A> property, and then signing the result."}]}],"pos":[50786,50976],"yaml":true,"extradata":"MT"},{"content":"The data that was signed.","nodes":[{"pos":[0,25],"content":"The data that was signed.","nodes":[{"content":"The data that was signed.","pos":[0,25]}]}],"pos":[51131,51157],"yaml":true},{"content":"The signature to be verified.","nodes":[{"pos":[0,29],"content":"The signature to be verified.","nodes":[{"content":"The signature to be verified.","pos":[0,29]}]}],"pos":[51222,51252],"yaml":true},{"content":"`true` if the signature is valid; otherwise, `false`.","nodes":[{"pos":[0,53],"content":"<ph id=\"ph1\">`true`</ph> if the signature is valid; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the signature is valid; otherwise, `false`."}],"pos":[51310,51366],"yaml":true},{"content":"<code>data</code> or <code>signature</code> is `null`.","nodes":[{"pos":[0,54],"content":"<ph id=\"ph1\">&lt;code&gt;data&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;signature&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>data</code> or <code>signature</code> is `null`."}],"pos":[51544,51599],"yaml":true},{"content":"Verifies the digital signature of the specified data stream, reading to the end of the stream.","nodes":[{"pos":[0,94],"content":"Verifies the digital signature of the specified data stream, reading to the end of the stream.","nodes":[{"content":"Verifies the digital signature of the specified data stream, reading to the end of the stream.","pos":[0,94]}]}],"pos":[52737,52832],"yaml":true},{"content":"This method hashes the input data by using the <xref:System.Security.Cryptography.ECDsaCng.HashAlgorithm%2A> property before verification.","nodes":[{"pos":[0,138],"content":"This method hashes the input data by using the <xref:System.Security.Cryptography.ECDsaCng.HashAlgorithm%2A> property before verification.","nodes":[{"content":"This method hashes the input data by using the <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.ECDsaCng.HashAlgorithm%2A&gt;</ph> property before verification.","pos":[0,138],"source":"This method hashes the input data by using the <xref:System.Security.Cryptography.ECDsaCng.HashAlgorithm%2A> property before verification."}]}],"pos":[52843,52982],"yaml":true,"extradata":"MT"},{"content":"The data stream that was signed.","nodes":[{"pos":[0,32],"content":"The data stream that was signed.","nodes":[{"content":"The data stream that was signed.","pos":[0,32]}]}],"pos":[53150,53183],"yaml":true},{"content":"The signature to be verified.","nodes":[{"pos":[0,29],"content":"The signature to be verified.","nodes":[{"content":"The signature to be verified.","pos":[0,29]}]}],"pos":[53248,53278],"yaml":true},{"content":"`true` if the signature is valid; otherwise, `false`.","nodes":[{"pos":[0,53],"content":"<ph id=\"ph1\">`true`</ph> if the signature is valid; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the signature is valid; otherwise, `false`."}],"pos":[53336,53392],"yaml":true},{"content":"<code>data</code> or <code>signature</code> is `null`.","nodes":[{"pos":[0,54],"content":"<ph id=\"ph1\">&lt;code&gt;data&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;signature&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>data</code> or <code>signature</code> is `null`."}],"pos":[53570,53625],"yaml":true},{"content":"Verifies a signature for the specified length of data, beginning at the specified offset.","nodes":[{"pos":[0,89],"content":"Verifies a signature for the specified length of data, beginning at the specified offset.","nodes":[{"content":"Verifies a signature for the specified length of data, beginning at the specified offset.","pos":[0,89]}]}],"pos":[54891,54981],"yaml":true},{"content":"This method hashes the input data by using the <xref:System.Security.Cryptography.ECDsaCng.HashAlgorithm%2A> property before verification.","nodes":[{"pos":[0,138],"content":"This method hashes the input data by using the <xref:System.Security.Cryptography.ECDsaCng.HashAlgorithm%2A> property before verification.","nodes":[{"content":"This method hashes the input data by using the <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.ECDsaCng.HashAlgorithm%2A&gt;</ph> property before verification.","pos":[0,138],"source":"This method hashes the input data by using the <xref:System.Security.Cryptography.ECDsaCng.HashAlgorithm%2A> property before verification."}]}],"pos":[54992,55131],"yaml":true,"extradata":"MT"},{"content":"The data that was signed.","nodes":[{"pos":[0,25],"content":"The data that was signed.","nodes":[{"content":"The data that was signed.","pos":[0,25]}]}],"pos":[55309,55335],"yaml":true},{"content":"The location in the data at which the signed data begins.","nodes":[{"pos":[0,57],"content":"The location in the data at which the signed data begins.","nodes":[{"content":"The location in the data at which the signed data begins.","pos":[0,57]}]}],"pos":[55396,55454],"yaml":true},{"content":"The length of the data, in characters, following <code>offset</code> that will be signed.","nodes":[{"pos":[0,89],"content":"The length of the data, in characters, following <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">offset</ph><ept id=\"p1\">&lt;/code&gt;</ept> that will be signed.","source":"The length of the data, in characters, following <code>offset</code> that will be signed."}],"pos":[55514,55604],"yaml":true},{"content":"The signature to be verified.","nodes":[{"pos":[0,29],"content":"The signature to be verified.","nodes":[{"content":"The signature to be verified.","pos":[0,29]}]}],"pos":[55669,55699],"yaml":true},{"content":"`true` if the signature is valid; otherwise, `false`.","nodes":[{"pos":[0,53],"content":"<ph id=\"ph1\">`true`</ph> if the signature is valid; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the signature is valid; otherwise, `false`."}],"pos":[55757,55813],"yaml":true},{"content":"<code>offset</code> or <code>count</code> is less then zero.  \n  \n -or-  \n  \n <code>offset</code> or <code>count</code> is larger than the length of the byte array passed in the <code>data</code> parameter.","nodes":[{"pos":[0,60],"content":"<ph id=\"ph1\">&lt;code&gt;offset&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;count&lt;/code&gt;</ph> is less then zero.","source":"<code>offset</code> or <code>count</code> is less then zero."},{"pos":[67,71],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[78,206],"content":"<ph id=\"ph1\">&lt;code&gt;offset&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;count&lt;/code&gt;</ph> is larger than the length of the byte array passed in the <ph id=\"ph3\">&lt;code&gt;data&lt;/code&gt;</ph> parameter.","source":"<code>offset</code> or <code>count</code> is larger than the length of the byte array passed in the <code>data</code> parameter."}],"pos":[56003,56216],"yaml":true},{"content":"<code>data</code> or <code>signature</code> is `null`.","nodes":[{"pos":[0,54],"content":"<ph id=\"ph1\">&lt;code&gt;data&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;signature&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>data</code> or <code>signature</code> is `null`."}],"pos":[56318,56373],"yaml":true},{"content":"Verifies the specified digital signature against a specified hash value.","nodes":[{"pos":[0,72],"content":"Verifies the specified digital signature against a specified hash value.","nodes":[{"content":"Verifies the specified digital signature against a specified hash value.","pos":[0,72]}]}],"pos":[57535,57608],"yaml":true},{"content":"The hash value of the data to be verified.","nodes":[{"pos":[0,42],"content":"The hash value of the data to be verified.","nodes":[{"content":"The hash value of the data to be verified.","pos":[0,42]}]}],"pos":[57772,57815],"yaml":true},{"content":"The digital signature of the data to be verified against the hash value.","nodes":[{"pos":[0,72],"content":"The digital signature of the data to be verified against the hash value.","nodes":[{"content":"The digital signature of the data to be verified against the hash value.","pos":[0,72]}]}],"pos":[57880,57953],"yaml":true},{"content":"`true` if the signature is valid; otherwise, `false`.","nodes":[{"pos":[0,53],"content":"<ph id=\"ph1\">`true`</ph> if the signature is valid; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the signature is valid; otherwise, `false`."}],"pos":[58011,58067],"yaml":true},{"content":"<code>hash</code> or <code>signature</code> is `null`.","nodes":[{"pos":[0,54],"content":"<ph id=\"ph1\">&lt;code&gt;hash&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;signature&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>hash</code> or <code>signature</code> is `null`."}],"pos":[58245,58300],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.Cryptography.ECDsaCng\n  commentId: T:System.Security.Cryptography.ECDsaCng\n  id: ECDsaCng\n  children:\n  - System.Security.Cryptography.ECDsaCng.#ctor\n  - System.Security.Cryptography.ECDsaCng.#ctor(System.Int32)\n  - System.Security.Cryptography.ECDsaCng.#ctor(System.Security.Cryptography.CngKey)\n  - System.Security.Cryptography.ECDsaCng.#ctor(System.Security.Cryptography.ECCurve)\n  - System.Security.Cryptography.ECDsaCng.Dispose(System.Boolean)\n  - System.Security.Cryptography.ECDsaCng.ExportExplicitParameters(System.Boolean)\n  - System.Security.Cryptography.ECDsaCng.ExportParameters(System.Boolean)\n  - System.Security.Cryptography.ECDsaCng.FromXmlString(System.String)\n  - System.Security.Cryptography.ECDsaCng.FromXmlString(System.String,System.Security.Cryptography.ECKeyXmlFormat)\n  - System.Security.Cryptography.ECDsaCng.GenerateKey(System.Security.Cryptography.ECCurve)\n  - System.Security.Cryptography.ECDsaCng.HashAlgorithm\n  - System.Security.Cryptography.ECDsaCng.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  - System.Security.Cryptography.ECDsaCng.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  - System.Security.Cryptography.ECDsaCng.ImportParameters(System.Security.Cryptography.ECParameters)\n  - System.Security.Cryptography.ECDsaCng.Key\n  - System.Security.Cryptography.ECDsaCng.KeySize\n  - System.Security.Cryptography.ECDsaCng.LegalKeySizes\n  - System.Security.Cryptography.ECDsaCng.SignData(System.Byte[])\n  - System.Security.Cryptography.ECDsaCng.SignData(System.IO.Stream)\n  - System.Security.Cryptography.ECDsaCng.SignData(System.Byte[],System.Int32,System.Int32)\n  - System.Security.Cryptography.ECDsaCng.SignHash(System.Byte[])\n  - System.Security.Cryptography.ECDsaCng.ToXmlString(System.Boolean)\n  - System.Security.Cryptography.ECDsaCng.ToXmlString(System.Security.Cryptography.ECKeyXmlFormat)\n  - System.Security.Cryptography.ECDsaCng.VerifyData(System.Byte[],System.Byte[])\n  - System.Security.Cryptography.ECDsaCng.VerifyData(System.IO.Stream,System.Byte[])\n  - System.Security.Cryptography.ECDsaCng.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[])\n  - System.Security.Cryptography.ECDsaCng.VerifyHash(System.Byte[],System.Byte[])\n  langs:\n  - csharp\n  name: ECDsaCng\n  nameWithType: ECDsaCng\n  fullName: System.Security.Cryptography.ECDsaCng\n  type: Class\n  assemblies:\n  - System.Security.Cryptography.Cng\n  - System.Core\n  - netstandard\n  namespace: System.Security.Cryptography\n  summary: Provides a Cryptography Next Generation (CNG) implementation of the Elliptic Curve Digital Signature Algorithm (ECDSA).\n  remarks: This class derives from the <xref:System.Security.Cryptography.ECDsa> abstract base class.\n  example:\n  - \"The following example shows how to use the <xref:System.Security.Cryptography.ECDsaCng> class to sign a message and how to use the signature to verify that the message has not been altered.  \\n  \\n [!code-csharp[ECDsaCng#1](~/samples/snippets/csharp/VS_Snippets_CLR/ecdsacng/cs/program.cs#1)]\\n [!code-vb[ECDsaCng#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ecdsacng/vb/program.vb#1)]\"\n  syntax:\n    content: 'public sealed class ECDsaCng : System.Security.Cryptography.ECDsa'\n  inheritance:\n  - System.Object\n  - System.Security.Cryptography.AsymmetricAlgorithm\n  - System.Security.Cryptography.ECDsa\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  - System.Security.Cryptography.AsymmetricAlgorithm.Clear\n  - System.Security.Cryptography.AsymmetricAlgorithm.Dispose\n  - System.Security.Cryptography.AsymmetricAlgorithm.KeySizeValue\n  - System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizesValue\n  - System.Security.Cryptography.ECDsa.Create\n  - System.Security.Cryptography.ECDsa.Create(System.Security.Cryptography.ECCurve)\n  - System.Security.Cryptography.ECDsa.Create(System.Security.Cryptography.ECParameters)\n  - System.Security.Cryptography.ECDsa.Create(System.String)\n  - System.Security.Cryptography.ECDsa.KeyExchangeAlgorithm\n  - System.Security.Cryptography.ECDsa.SignatureAlgorithm\n  - System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  - System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  - System.Security.Cryptography.ECDsa.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  - System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  - System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  - System.Security.Cryptography.ECDsa.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsaCng.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.ECDsaCng.#ctor\n  commentId: M:System.Security.Cryptography.ECDsaCng.#ctor\n  id: '#ctor'\n  parent: System.Security.Cryptography.ECDsaCng\n  langs:\n  - csharp\n  name: ECDsaCng()\n  nameWithType: ECDsaCng.ECDsaCng()\n  fullName: ECDsaCng.ECDsaCng()\n  type: Constructor\n  assemblies:\n  - System.Security.Cryptography.Cng\n  - System.Core\n  - netstandard\n  namespace: System.Security.Cryptography\n  summary: Initializes a new instance of the <xref href=\"System.Security.Cryptography.ECDsaCng\"></xref> class with a random key pair.\n  remarks: The random key pair has a public key length of 521 bits.\n  syntax:\n    content: public ECDsaCng ();\n    parameters: []\n  overload: System.Security.Cryptography.ECDsaCng.#ctor*\n  exceptions:\n  - type: System.PlatformNotSupportedException\n    commentId: T:System.PlatformNotSupportedException\n    description: Cryptography Next Generation (CNG) classes are not supported on this system.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsaCng.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.ECDsaCng.#ctor(System.Int32)\n  commentId: M:System.Security.Cryptography.ECDsaCng.#ctor(System.Int32)\n  id: '#ctor(System.Int32)'\n  parent: System.Security.Cryptography.ECDsaCng\n  langs:\n  - csharp\n  name: ECDsaCng(Int32)\n  nameWithType: ECDsaCng.ECDsaCng(Int32)\n  fullName: ECDsaCng.ECDsaCng(Int32)\n  type: Constructor\n  assemblies:\n  - System.Security.Cryptography.Cng\n  - System.Core\n  - netstandard\n  namespace: System.Security.Cryptography\n  summary: Initializes a new instance of the <xref href=\"System.Security.Cryptography.ECDsaCng\"></xref> class with a random key pair, using the specified key size.\n  remarks: The random key pair will have the public key length defined by the `keySize` parameter.\n  syntax:\n    content: public ECDsaCng (int keySize);\n    parameters:\n    - id: keySize\n      type: System.Int32\n      description: The size of the key. Valid key sizes are 256, 384, and 521 bits.\n  overload: System.Security.Cryptography.ECDsaCng.#ctor*\n  exceptions:\n  - type: System.PlatformNotSupportedException\n    commentId: T:System.PlatformNotSupportedException\n    description: Cryptography Next Generation (CNG) classes are not supported on this system.\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: <code>keySize</code> specifies an invalid length.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsaCng.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.ECDsaCng.#ctor(System.Security.Cryptography.CngKey)\n  commentId: M:System.Security.Cryptography.ECDsaCng.#ctor(System.Security.Cryptography.CngKey)\n  id: '#ctor(System.Security.Cryptography.CngKey)'\n  parent: System.Security.Cryptography.ECDsaCng\n  langs:\n  - csharp\n  name: ECDsaCng(CngKey)\n  nameWithType: ECDsaCng.ECDsaCng(CngKey)\n  fullName: ECDsaCng.ECDsaCng(CngKey)\n  type: Constructor\n  assemblies:\n  - System.Security.Cryptography.Cng\n  - System.Core\n  - netstandard\n  namespace: System.Security.Cryptography\n  summary: Initializes a new instance of the <xref href=\"System.Security.Cryptography.ECDsaCng\"></xref> class by using the specified <xref href=\"System.Security.Cryptography.CngKey\"></xref> object.\n  syntax:\n    content: public ECDsaCng (System.Security.Cryptography.CngKey key);\n    parameters:\n    - id: key\n      type: System.Security.Cryptography.CngKey\n      description: The key that will be used as input to the cryptographic operations performed by the current object.\n  overload: System.Security.Cryptography.ECDsaCng.#ctor*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>key</code> does not specify an Elliptic Curve Digital Signature Algorithm (ECDSA) group.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>key</code> is `null`.\n  - type: System.PlatformNotSupportedException\n    commentId: T:System.PlatformNotSupportedException\n    description: Cryptography Next Generation (CNG) classes are not supported on this system.\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsaCng.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.ECDsaCng.#ctor(System.Security.Cryptography.ECCurve)\n  commentId: M:System.Security.Cryptography.ECDsaCng.#ctor(System.Security.Cryptography.ECCurve)\n  id: '#ctor(System.Security.Cryptography.ECCurve)'\n  parent: System.Security.Cryptography.ECDsaCng\n  langs:\n  - csharp\n  name: ECDsaCng(ECCurve)\n  nameWithType: ECDsaCng.ECDsaCng(ECCurve)\n  fullName: ECDsaCng.ECDsaCng(ECCurve)\n  type: Constructor\n  assemblies:\n  - System.Security.Cryptography.Cng\n  - System.Core\n  - netstandard\n  namespace: System.Security.Cryptography\n  summary: Initializes a new instance of the <xref href=\"System.Security.Cryptography.ECDsaCng\"></xref> class whose public/private key pair is generated over the specified curve.\n  remarks: '`curve` must validate (that is, it must return `true`) when passed to the <xref:System.Security.Cryptography.ECCurve.Validate%2A?displayProperty=fullName> method and must be either a named or explicit prime.'\n  syntax:\n    content: public ECDsaCng (System.Security.Cryptography.ECCurve curve);\n    parameters:\n    - id: curve\n      type: System.Security.Cryptography.ECCurve\n      description: The curve used to generate the public/private key pair.\n  overload: System.Security.Cryptography.ECDsaCng.#ctor*\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: <code>curve</code> does not validate.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsaCng.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.ECDsaCng.Dispose(System.Boolean)\n  commentId: M:System.Security.Cryptography.ECDsaCng.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.Security.Cryptography.ECDsaCng\n  langs:\n  - csharp\n  name: Dispose(Boolean)\n  nameWithType: ECDsaCng.Dispose(Boolean)\n  fullName: ECDsaCng.Dispose(Boolean)\n  type: Method\n  assemblies:\n  - System.Security.Cryptography.Cng\n  - System.Core\n  - netstandard\n  namespace: System.Security.Cryptography\n  syntax:\n    content: protected override void Dispose (bool disposing);\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: ''\n  overload: System.Security.Cryptography.ECDsaCng.Dispose*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsaCng.xml\n- uid: System.Security.Cryptography.ECDsaCng.ExportExplicitParameters(System.Boolean)\n  commentId: M:System.Security.Cryptography.ECDsaCng.ExportExplicitParameters(System.Boolean)\n  id: ExportExplicitParameters(System.Boolean)\n  parent: System.Security.Cryptography.ECDsaCng\n  langs:\n  - csharp\n  name: ExportExplicitParameters(Boolean)\n  nameWithType: ECDsaCng.ExportExplicitParameters(Boolean)\n  fullName: ECDsaCng.ExportExplicitParameters(Boolean)\n  type: Method\n  assemblies:\n  - System.Security.Cryptography.Cng\n  - System.Core\n  - netstandard\n  namespace: System.Security.Cryptography\n  summary: Exports the key and explicit curve parameters used by the Elliptic curve cryptography (ECC) object into an <xref href=\"System.Security.Cryptography.ECParameters\"></xref> object.\n  syntax:\n    content: public override System.Security.Cryptography.ECParameters ExportExplicitParameters (bool includePrivateParameters);\n    parameters:\n    - id: includePrivateParameters\n      type: System.Boolean\n      description: '`true` to include private parameters; otherwise, `false`.'\n    return:\n      type: System.Security.Cryptography.ECParameters\n      description: The key and explicit curve parameters used by the ECC object.\n  overload: System.Security.Cryptography.ECDsaCng.ExportExplicitParameters*\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: An error occurred while obtaining the curve values.\n  - type: System.PlatformNotSupportedException\n    commentId: T:System.PlatformNotSupportedException\n    description: Explicit export is not supported by this platform. Windows 10 or higher is required.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.7\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsaCng.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.ECDsaCng.ExportParameters(System.Boolean)\n  commentId: M:System.Security.Cryptography.ECDsaCng.ExportParameters(System.Boolean)\n  id: ExportParameters(System.Boolean)\n  parent: System.Security.Cryptography.ECDsaCng\n  langs:\n  - csharp\n  name: ExportParameters(Boolean)\n  nameWithType: ECDsaCng.ExportParameters(Boolean)\n  fullName: ECDsaCng.ExportParameters(Boolean)\n  type: Method\n  assemblies:\n  - System.Security.Cryptography.Cng\n  - System.Core\n  - netstandard\n  namespace: System.Security.Cryptography\n  summary: Exports the key used by the Elliptic curve cryptography (ECC) object into an <xref href=\"System.Security.Cryptography.ECParameters\"></xref> object. If the key was created as a named curve, the <xref href=\"System.Security.Cryptography.ECParameters.Curve\"></xref> field contains named curve parameters; otherwise, it contains explicit parameters.\n  syntax:\n    content: public override System.Security.Cryptography.ECParameters ExportParameters (bool includePrivateParameters);\n    parameters:\n    - id: includePrivateParameters\n      type: System.Boolean\n      description: '`true` to include private parameters; otherwise, `false`.'\n    return:\n      type: System.Security.Cryptography.ECParameters\n      description: The key and named curve parameters used by the ECC object.\n  overload: System.Security.Cryptography.ECDsaCng.ExportParameters*\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: An error occurred while obtaining the curve values.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.7\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsaCng.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.ECDsaCng.FromXmlString(System.String)\n  commentId: M:System.Security.Cryptography.ECDsaCng.FromXmlString(System.String)\n  id: FromXmlString(System.String)\n  parent: System.Security.Cryptography.ECDsaCng\n  langs:\n  - csharp\n  name: FromXmlString(String)\n  nameWithType: ECDsaCng.FromXmlString(String)\n  fullName: ECDsaCng.FromXmlString(String)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: This method is not implemented.\n  remarks: To deserialize an XML key, use the <xref:System.Security.Cryptography.ECDsaCng.FromXmlString%28System.String%2CSystem.Security.Cryptography.ECKeyXmlFormat%29> overload instead.\n  syntax:\n    content: public override void FromXmlString (string xmlString);\n    parameters:\n    - id: xmlString\n      type: System.String\n      description: The XML-based key information to be deserialized.\n  overload: System.Security.Cryptography.ECDsaCng.FromXmlString*\n  exceptions:\n  - type: System.NotImplementedException\n    commentId: T:System.NotImplementedException\n    description: This method was not overridden for this instance.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsaCng.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.ECDsaCng.FromXmlString(System.String,System.Security.Cryptography.ECKeyXmlFormat)\n  commentId: M:System.Security.Cryptography.ECDsaCng.FromXmlString(System.String,System.Security.Cryptography.ECKeyXmlFormat)\n  id: FromXmlString(System.String,System.Security.Cryptography.ECKeyXmlFormat)\n  parent: System.Security.Cryptography.ECDsaCng\n  langs:\n  - csharp\n  name: FromXmlString(String, ECKeyXmlFormat)\n  nameWithType: ECDsaCng.FromXmlString(String, ECKeyXmlFormat)\n  fullName: ECDsaCng.FromXmlString(String, ECKeyXmlFormat)\n  type: Method\n  assemblies:\n  - System.Core\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: Deserializes the key information from an XML string by using the specified format.\n  syntax:\n    content: public void FromXmlString (string xml, System.Security.Cryptography.ECKeyXmlFormat format);\n    parameters:\n    - id: xml\n      type: System.String\n      description: The XML-based key information to be deserialized.\n    - id: format\n      type: System.Security.Cryptography.ECKeyXmlFormat\n      description: One of the enumeration values that specifies the format of the XML string. The only currently accepted format is <xref href=\"System.Security.Cryptography.ECKeyXmlFormat.Rfc4050\"></xref>.\n  overload: System.Security.Cryptography.ECDsaCng.FromXmlString*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>xml</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>format</code> specifies an invalid format. The only accepted value is <xref href=\"System.Security.Cryptography.ECKeyXmlFormat.Rfc4050\"></xref>.\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: All other errors.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsaCng.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.ECDsaCng.GenerateKey(System.Security.Cryptography.ECCurve)\n  commentId: M:System.Security.Cryptography.ECDsaCng.GenerateKey(System.Security.Cryptography.ECCurve)\n  id: GenerateKey(System.Security.Cryptography.ECCurve)\n  parent: System.Security.Cryptography.ECDsaCng\n  langs:\n  - csharp\n  name: GenerateKey(ECCurve)\n  nameWithType: ECDsaCng.GenerateKey(ECCurve)\n  fullName: ECDsaCng.GenerateKey(ECCurve)\n  type: Method\n  assemblies:\n  - System.Security.Cryptography.Cng\n  - System.Core\n  - netstandard\n  namespace: System.Security.Cryptography\n  summary: Generates a key to use for the ECDsaCng algorithm.\n  syntax:\n    content: public override void GenerateKey (System.Security.Cryptography.ECCurve curve);\n    parameters:\n    - id: curve\n      type: System.Security.Cryptography.ECCurve\n      description: The curve to use to generate the key.\n  overload: System.Security.Cryptography.ECDsaCng.GenerateKey*\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: <code>curve</code> does not validate.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.7\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsaCng.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.ECDsaCng.HashAlgorithm\n  commentId: P:System.Security.Cryptography.ECDsaCng.HashAlgorithm\n  id: HashAlgorithm\n  parent: System.Security.Cryptography.ECDsaCng\n  langs:\n  - csharp\n  name: HashAlgorithm\n  nameWithType: ECDsaCng.HashAlgorithm\n  fullName: ECDsaCng.HashAlgorithm\n  type: Property\n  assemblies:\n  - System.Core\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: Gets or sets the hash algorithm to use when signing and verifying data.\n  remarks: \"This property accepts the following algorithms: <xref:System.Security.Cryptography.CngAlgorithm.MD5%2A>, <xref:System.Security.Cryptography.CngAlgorithm.Sha1%2A>, <xref:System.Security.Cryptography.CngAlgorithm.Sha256%2A>, <xref:System.Security.Cryptography.CngAlgorithm.Sha384%2A>, and <xref:System.Security.Cryptography.CngAlgorithm.Sha512%2A>.  \\n  \\n Other custom hash algorithms may also be used.  \\n  \\n The default algorithm is <xref:System.Security.Cryptography.CngAlgorithm.Sha256%2A>.  \\n  \\n This property is not used if you are signing or verifying data that is already hashed.\"\n  syntax:\n    content: public System.Security.Cryptography.CngAlgorithm HashAlgorithm { get; set; }\n    return:\n      type: System.Security.Cryptography.CngAlgorithm\n      description: An object that specifies the hash algorithm.\n  overload: System.Security.Cryptography.ECDsaCng.HashAlgorithm*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The value is `null`.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsaCng.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.ECDsaCng.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  commentId: M:System.Security.Cryptography.ECDsaCng.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  id: HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.ECDsaCng\n  langs:\n  - csharp\n  name: HashData(Stream, HashAlgorithmName)\n  nameWithType: ECDsaCng.HashData(Stream, HashAlgorithmName)\n  fullName: ECDsaCng.HashData(Stream, HashAlgorithmName)\n  type: Method\n  assemblies:\n  - System.Security.Cryptography.Cng\n  - System.Core\n  - netstandard\n  namespace: System.Security.Cryptography\n  syntax:\n    content: protected override byte[] HashData (System.IO.Stream data, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);\n    parameters:\n    - id: data\n      type: System.IO.Stream\n      description: ''\n    - id: hashAlgorithm\n      type: System.Security.Cryptography.HashAlgorithmName\n      description: ''\n    return:\n      type: System.Byte[]\n      description: ''\n  overload: System.Security.Cryptography.ECDsaCng.HashData*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.7\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsaCng.xml\n- uid: System.Security.Cryptography.ECDsaCng.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  commentId: M:System.Security.Cryptography.ECDsaCng.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  id: HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.ECDsaCng\n  langs:\n  - csharp\n  name: HashData(Byte[], Int32, Int32, HashAlgorithmName)\n  nameWithType: ECDsaCng.HashData(Byte[], Int32, Int32, HashAlgorithmName)\n  fullName: ECDsaCng.HashData(Byte[], Int32, Int32, HashAlgorithmName)\n  type: Method\n  assemblies:\n  - System.Security.Cryptography.Cng\n  - System.Core\n  - netstandard\n  namespace: System.Security.Cryptography\n  syntax:\n    content: protected override byte[] HashData (byte[] data, int offset, int count, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);\n    parameters:\n    - id: data\n      type: System.Byte[]\n      description: ''\n    - id: offset\n      type: System.Int32\n      description: ''\n    - id: count\n      type: System.Int32\n      description: ''\n    - id: hashAlgorithm\n      type: System.Security.Cryptography.HashAlgorithmName\n      description: ''\n    return:\n      type: System.Byte[]\n      description: ''\n  overload: System.Security.Cryptography.ECDsaCng.HashData*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.7\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsaCng.xml\n- uid: System.Security.Cryptography.ECDsaCng.ImportParameters(System.Security.Cryptography.ECParameters)\n  commentId: M:System.Security.Cryptography.ECDsaCng.ImportParameters(System.Security.Cryptography.ECParameters)\n  id: ImportParameters(System.Security.Cryptography.ECParameters)\n  parent: System.Security.Cryptography.ECDsaCng\n  langs:\n  - csharp\n  name: ImportParameters(ECParameters)\n  nameWithType: ECDsaCng.ImportParameters(ECParameters)\n  fullName: ECDsaCng.ImportParameters(ECParameters)\n  type: Method\n  assemblies:\n  - System.Security.Cryptography.Cng\n  - System.Core\n  - netstandard\n  namespace: System.Security.Cryptography\n  summary: Replaces the existing key that the current instance is working with by creating a new <xref href=\"System.Security.Cryptography.CngKey\"></xref> for the parameters structure.\n  remarks: If `parameters` contains only <xref:System.Security.Cryptography.ECParameters.Q>, only a public key is imported. If `parameters` also contains <xref:System.Security.Cryptography.ECParameters.D>, a full key pair is imported. The <xref:System.Security.Cryptography.ECParameters.Curve> field specifies the type of the curve to import.\n  syntax:\n    content: public override void ImportParameters (System.Security.Cryptography.ECParameters parameters);\n    parameters:\n    - id: parameters\n      type: System.Security.Cryptography.ECParameters\n      description: The curve parameters.\n  overload: System.Security.Cryptography.ECDsaCng.ImportParameters*\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: <code>parameters</code> does not contain valid values.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: <code>parameters</code> references a curve that cannot be imported.\n  - type: System.PlatformNotSupportedException\n    commentId: T:System.PlatformNotSupportedException\n    description: <code>parameters</code> references a curve that is not supported by this platform.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.7\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsaCng.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.ECDsaCng.Key\n  commentId: P:System.Security.Cryptography.ECDsaCng.Key\n  id: Key\n  parent: System.Security.Cryptography.ECDsaCng\n  langs:\n  - csharp\n  name: Key\n  nameWithType: ECDsaCng.Key\n  fullName: ECDsaCng.Key\n  type: Property\n  assemblies:\n  - System.Security.Cryptography.Cng\n  - System.Core\n  - netstandard\n  namespace: System.Security.Cryptography\n  summary: Gets or sets the key to use when signing and verifying data.\n  syntax:\n    content: public System.Security.Cryptography.CngKey Key { get; }\n    return:\n      type: System.Security.Cryptography.CngKey\n      description: An object that specifies the key.\n  overload: System.Security.Cryptography.ECDsaCng.Key*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsaCng.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.ECDsaCng.KeySize\n  commentId: P:System.Security.Cryptography.ECDsaCng.KeySize\n  id: KeySize\n  parent: System.Security.Cryptography.ECDsaCng\n  langs:\n  - csharp\n  name: KeySize\n  nameWithType: ECDsaCng.KeySize\n  fullName: ECDsaCng.KeySize\n  type: Property\n  assemblies:\n  - System.Security.Cryptography.Cng\n  - netstandard\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public override int KeySize { get; set; }\n    return:\n      type: System.Int32\n      description: ''\n  overload: System.Security.Cryptography.ECDsaCng.KeySize*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsaCng.xml\n- uid: System.Security.Cryptography.ECDsaCng.LegalKeySizes\n  commentId: P:System.Security.Cryptography.ECDsaCng.LegalKeySizes\n  id: LegalKeySizes\n  parent: System.Security.Cryptography.ECDsaCng\n  langs:\n  - csharp\n  name: LegalKeySizes\n  nameWithType: ECDsaCng.LegalKeySizes\n  fullName: ECDsaCng.LegalKeySizes\n  type: Property\n  assemblies:\n  - System.Security.Cryptography.Cng\n  - netstandard\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public override System.Security.Cryptography.KeySizes[] LegalKeySizes { get; }\n    return:\n      type: System.Security.Cryptography.KeySizes[]\n      description: ''\n  overload: System.Security.Cryptography.ECDsaCng.LegalKeySizes*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsaCng.xml\n- uid: System.Security.Cryptography.ECDsaCng.SignData(System.Byte[])\n  commentId: M:System.Security.Cryptography.ECDsaCng.SignData(System.Byte[])\n  id: SignData(System.Byte[])\n  parent: System.Security.Cryptography.ECDsaCng\n  langs:\n  - csharp\n  name: SignData(Byte[])\n  nameWithType: ECDsaCng.SignData(Byte[])\n  fullName: ECDsaCng.SignData(Byte[])\n  type: Method\n  assemblies:\n  - System.Core\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: Generates a signature for the specified data.\n  remarks: \"This method generates a signature for the specified data by hashing the input data using the <xref:System.Security.Cryptography.ECDsaCng.HashAlgorithm%2A> property, and then signing the result.  \\n  \\n The <xref:System.Security.Permissions.KeyContainerPermissionFlags?displayProperty=fullName> flag is required if the Cryptography Next Generation (CNG) key is not randomly generated by the <xref:System.Security.Cryptography.ECDsaCng> object.\"\n  syntax:\n    content: public byte[] SignData (byte[] data);\n    parameters:\n    - id: data\n      type: System.Byte[]\n      description: The message data to be signed.\n    return:\n      type: System.Byte[]\n      description: A digital signature for the specified data.\n  overload: System.Security.Cryptography.ECDsaCng.SignData*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>data</code> is `null`.\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: The key information that is associated with the instance does not have a private key.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsaCng.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.ECDsaCng.SignData(System.IO.Stream)\n  commentId: M:System.Security.Cryptography.ECDsaCng.SignData(System.IO.Stream)\n  id: SignData(System.IO.Stream)\n  parent: System.Security.Cryptography.ECDsaCng\n  langs:\n  - csharp\n  name: SignData(Stream)\n  nameWithType: ECDsaCng.SignData(Stream)\n  fullName: ECDsaCng.SignData(Stream)\n  type: Method\n  assemblies:\n  - System.Core\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: Generates a signature for the specified data stream, reading to the end of the stream.\n  remarks: \"This method generates a signature for the specified data stream by hashing the input data using the <xref:System.Security.Cryptography.ECDsaCng.HashAlgorithm%2A> property, and then signing the result.  \\n  \\n The <xref:System.Security.Permissions.KeyContainerPermissionFlags?displayProperty=fullName> flag is required if the Cryptography Next Generation (CNG) key is not randomly generated by the <xref:System.Security.Cryptography.ECDsaCng> object.\"\n  syntax:\n    content: public byte[] SignData (System.IO.Stream data);\n    parameters:\n    - id: data\n      type: System.IO.Stream\n      description: The data stream to be signed.\n    return:\n      type: System.Byte[]\n      description: A digital signature for the specified data stream.\n  overload: System.Security.Cryptography.ECDsaCng.SignData*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>data</code> is `null`.\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: The key information that is associated with the instance does not have a private key.\n  attributes: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsaCng.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.ECDsaCng.SignData(System.Byte[],System.Int32,System.Int32)\n  commentId: M:System.Security.Cryptography.ECDsaCng.SignData(System.Byte[],System.Int32,System.Int32)\n  id: SignData(System.Byte[],System.Int32,System.Int32)\n  parent: System.Security.Cryptography.ECDsaCng\n  langs:\n  - csharp\n  name: SignData(Byte[], Int32, Int32)\n  nameWithType: ECDsaCng.SignData(Byte[], Int32, Int32)\n  fullName: ECDsaCng.SignData(Byte[], Int32, Int32)\n  type: Method\n  assemblies:\n  - System.Core\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: Generates a digital signature for the specified length of data, beginning at the specified offset.\n  remarks: \"This method generates a signature for the specified data by hashing the input data using the <xref:System.Security.Cryptography.ECDsaCng.HashAlgorithm%2A> property, and then signing the result  \\n  \\n The <xref:System.Security.Permissions.KeyContainerPermissionFlags?displayProperty=fullName> flag is required if the Cryptography Next Generation (CNG) key is not randomly generated by the <xref:System.Security.Cryptography.ECDsaCng> object.\"\n  syntax:\n    content: public byte[] SignData (byte[] data, int offset, int count);\n    parameters:\n    - id: data\n      type: System.Byte[]\n      description: The message data to be signed.\n    - id: offset\n      type: System.Int32\n      description: The location in the string at which to start signing.\n    - id: count\n      type: System.Int32\n      description: The length of the string, in characters, following <code>offset</code> that will be signed.\n    return:\n      type: System.Byte[]\n      description: A digital signature for the specified length of data.\n  overload: System.Security.Cryptography.ECDsaCng.SignData*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>data</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>count</code> or <code>offset</code> caused reading outside the bounds of the data string.\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: The key information that is associated with the instance does not have a private key.\n  attributes: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsaCng.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.ECDsaCng.SignHash(System.Byte[])\n  commentId: M:System.Security.Cryptography.ECDsaCng.SignHash(System.Byte[])\n  id: SignHash(System.Byte[])\n  parent: System.Security.Cryptography.ECDsaCng\n  langs:\n  - csharp\n  name: SignHash(Byte[])\n  nameWithType: ECDsaCng.SignHash(Byte[])\n  fullName: ECDsaCng.SignHash(Byte[])\n  type: Method\n  assemblies:\n  - System.Security.Cryptography.Cng\n  - System.Core\n  - netstandard\n  namespace: System.Security.Cryptography\n  summary: Generates a signature for the specified hash value.\n  remarks: The <xref:System.Security.Permissions.KeyContainerPermissionFlags?displayProperty=fullName> flag is required if the Cryptography Next Generation (CNG) key is not randomly generated by the <xref:System.Security.Cryptography.ECDsaCng> object.\n  syntax:\n    content: public override byte[] SignHash (byte[] hash);\n    parameters:\n    - id: hash\n      type: System.Byte[]\n      description: The hash value of the data to be signed.\n    return:\n      type: System.Byte[]\n      description: A digital signature for the specified hash value.\n  overload: System.Security.Cryptography.ECDsaCng.SignHash*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>hash</code> is `null`.\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: The key information that is associated with the instance does not have a private key.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsaCng.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.ECDsaCng.ToXmlString(System.Boolean)\n  commentId: M:System.Security.Cryptography.ECDsaCng.ToXmlString(System.Boolean)\n  id: ToXmlString(System.Boolean)\n  parent: System.Security.Cryptography.ECDsaCng\n  langs:\n  - csharp\n  name: ToXmlString(Boolean)\n  nameWithType: ECDsaCng.ToXmlString(Boolean)\n  fullName: ECDsaCng.ToXmlString(Boolean)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: This method is not implemented.\n  remarks: To convert the current key to an XML representation, use the <xref:System.Security.Cryptography.ECDsaCng.ToXmlString%28System.Security.Cryptography.ECKeyXmlFormat%29> overload instead.\n  syntax:\n    content: public override string ToXmlString (bool includePrivateParameters);\n    parameters:\n    - id: includePrivateParameters\n      type: System.Boolean\n      description: '`true` to include private parameters; otherwise, `false`.'\n    return:\n      type: System.String\n      description: Not applicable.\n  overload: System.Security.Cryptography.ECDsaCng.ToXmlString*\n  exceptions:\n  - type: System.NotImplementedException\n    commentId: T:System.NotImplementedException\n    description: This method is not implemented.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsaCng.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.ECDsaCng.ToXmlString(System.Security.Cryptography.ECKeyXmlFormat)\n  commentId: M:System.Security.Cryptography.ECDsaCng.ToXmlString(System.Security.Cryptography.ECKeyXmlFormat)\n  id: ToXmlString(System.Security.Cryptography.ECKeyXmlFormat)\n  parent: System.Security.Cryptography.ECDsaCng\n  langs:\n  - csharp\n  name: ToXmlString(ECKeyXmlFormat)\n  nameWithType: ECDsaCng.ToXmlString(ECKeyXmlFormat)\n  fullName: ECDsaCng.ToXmlString(ECKeyXmlFormat)\n  type: Method\n  assemblies:\n  - System.Core\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: Serializes the key information to an XML string by using the specified format.\n  syntax:\n    content: public string ToXmlString (System.Security.Cryptography.ECKeyXmlFormat format);\n    parameters:\n    - id: format\n      type: System.Security.Cryptography.ECKeyXmlFormat\n      description: One of the enumeration values that specifies the format of the XML string. The only currently accepted format is <xref href=\"System.Security.Cryptography.ECKeyXmlFormat.Rfc4050\"></xref>.\n    return:\n      type: System.String\n      description: A string object that contains the key information, serialized to an XML string according to the requested format.\n  overload: System.Security.Cryptography.ECDsaCng.ToXmlString*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>format</code> specifies an invalid format. The only accepted value is <xref href=\"System.Security.Cryptography.ECKeyXmlFormat.Rfc4050\"></xref>.\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: All other errors.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsaCng.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.ECDsaCng.VerifyData(System.Byte[],System.Byte[])\n  commentId: M:System.Security.Cryptography.ECDsaCng.VerifyData(System.Byte[],System.Byte[])\n  id: VerifyData(System.Byte[],System.Byte[])\n  parent: System.Security.Cryptography.ECDsaCng\n  langs:\n  - csharp\n  name: VerifyData(Byte[], Byte[])\n  nameWithType: ECDsaCng.VerifyData(Byte[], Byte[])\n  fullName: ECDsaCng.VerifyData(Byte[], Byte[])\n  type: Method\n  assemblies:\n  - System.Core\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: Verifies the digital signature of the specified data.\n  remarks: This method generates a signature for the given data by hashing the input data using the <xref:System.Security.Cryptography.ECDsaCng.HashAlgorithm%2A> property, and then signing the result.\n  syntax:\n    content: public bool VerifyData (byte[] data, byte[] signature);\n    parameters:\n    - id: data\n      type: System.Byte[]\n      description: The data that was signed.\n    - id: signature\n      type: System.Byte[]\n      description: The signature to be verified.\n    return:\n      type: System.Boolean\n      description: '`true` if the signature is valid; otherwise, `false`.'\n  overload: System.Security.Cryptography.ECDsaCng.VerifyData*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>data</code> or <code>signature</code> is `null`.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsaCng.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.ECDsaCng.VerifyData(System.IO.Stream,System.Byte[])\n  commentId: M:System.Security.Cryptography.ECDsaCng.VerifyData(System.IO.Stream,System.Byte[])\n  id: VerifyData(System.IO.Stream,System.Byte[])\n  parent: System.Security.Cryptography.ECDsaCng\n  langs:\n  - csharp\n  name: VerifyData(Stream, Byte[])\n  nameWithType: ECDsaCng.VerifyData(Stream, Byte[])\n  fullName: ECDsaCng.VerifyData(Stream, Byte[])\n  type: Method\n  assemblies:\n  - System.Core\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: Verifies the digital signature of the specified data stream, reading to the end of the stream.\n  remarks: This method hashes the input data by using the <xref:System.Security.Cryptography.ECDsaCng.HashAlgorithm%2A> property before verification.\n  syntax:\n    content: public bool VerifyData (System.IO.Stream data, byte[] signature);\n    parameters:\n    - id: data\n      type: System.IO.Stream\n      description: The data stream that was signed.\n    - id: signature\n      type: System.Byte[]\n      description: The signature to be verified.\n    return:\n      type: System.Boolean\n      description: '`true` if the signature is valid; otherwise, `false`.'\n  overload: System.Security.Cryptography.ECDsaCng.VerifyData*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>data</code> or <code>signature</code> is `null`.\n  attributes: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsaCng.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.ECDsaCng.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[])\n  commentId: M:System.Security.Cryptography.ECDsaCng.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[])\n  id: VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[])\n  parent: System.Security.Cryptography.ECDsaCng\n  langs:\n  - csharp\n  name: VerifyData(Byte[], Int32, Int32, Byte[])\n  nameWithType: ECDsaCng.VerifyData(Byte[], Int32, Int32, Byte[])\n  fullName: ECDsaCng.VerifyData(Byte[], Int32, Int32, Byte[])\n  type: Method\n  assemblies:\n  - System.Core\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: Verifies a signature for the specified length of data, beginning at the specified offset.\n  remarks: This method hashes the input data by using the <xref:System.Security.Cryptography.ECDsaCng.HashAlgorithm%2A> property before verification.\n  syntax:\n    content: public bool VerifyData (byte[] data, int offset, int count, byte[] signature);\n    parameters:\n    - id: data\n      type: System.Byte[]\n      description: The data that was signed.\n    - id: offset\n      type: System.Int32\n      description: The location in the data at which the signed data begins.\n    - id: count\n      type: System.Int32\n      description: The length of the data, in characters, following <code>offset</code> that will be signed.\n    - id: signature\n      type: System.Byte[]\n      description: The signature to be verified.\n    return:\n      type: System.Boolean\n      description: '`true` if the signature is valid; otherwise, `false`.'\n  overload: System.Security.Cryptography.ECDsaCng.VerifyData*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>offset</code> or <code>count</code> is less then zero.  \\n  \\n -or-  \\n  \\n <code>offset</code> or <code>count</code> is larger than the length of the byte array passed in the <code>data</code> parameter.\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>data</code> or <code>signature</code> is `null`.\n  attributes: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsaCng.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.ECDsaCng.VerifyHash(System.Byte[],System.Byte[])\n  commentId: M:System.Security.Cryptography.ECDsaCng.VerifyHash(System.Byte[],System.Byte[])\n  id: VerifyHash(System.Byte[],System.Byte[])\n  parent: System.Security.Cryptography.ECDsaCng\n  langs:\n  - csharp\n  name: VerifyHash(Byte[], Byte[])\n  nameWithType: ECDsaCng.VerifyHash(Byte[], Byte[])\n  fullName: ECDsaCng.VerifyHash(Byte[], Byte[])\n  type: Method\n  assemblies:\n  - System.Security.Cryptography.Cng\n  - System.Core\n  - netstandard\n  namespace: System.Security.Cryptography\n  summary: Verifies the specified digital signature against a specified hash value.\n  syntax:\n    content: public override bool VerifyHash (byte[] hash, byte[] signature);\n    parameters:\n    - id: hash\n      type: System.Byte[]\n      description: The hash value of the data to be verified.\n    - id: signature\n      type: System.Byte[]\n      description: The digital signature of the data to be verified against the hash value.\n    return:\n      type: System.Boolean\n      description: '`true` if the signature is valid; otherwise, `false`.'\n  overload: System.Security.Cryptography.ECDsaCng.VerifyHash*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>hash</code> or <code>signature</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsaCng.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\nreferences:\n- uid: System.Security.Cryptography.ECDsa\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: ECDsa\n  nameWithType: ECDsa\n  fullName: System.Security.Cryptography.ECDsa\n- uid: System.PlatformNotSupportedException\n  parent: System\n  isExternal: false\n  name: PlatformNotSupportedException\n  nameWithType: PlatformNotSupportedException\n  fullName: System.PlatformNotSupportedException\n- uid: System.Security.Cryptography.CryptographicException\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CryptographicException\n  nameWithType: CryptographicException\n  fullName: System.Security.Cryptography.CryptographicException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.NotImplementedException\n  parent: System\n  isExternal: false\n  name: NotImplementedException\n  nameWithType: NotImplementedException\n  fullName: System.NotImplementedException\n- uid: System.ArgumentOutOfRangeException\n  parent: System\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n- uid: System.NotSupportedException\n  parent: System\n  isExternal: false\n  name: NotSupportedException\n  nameWithType: NotSupportedException\n  fullName: System.NotSupportedException\n- uid: System.Security.Cryptography.ECDsaCng.#ctor\n  parent: System.Security.Cryptography.ECDsaCng\n  isExternal: false\n  name: ECDsaCng()\n  nameWithType: ECDsaCng.ECDsaCng()\n  fullName: ECDsaCng.ECDsaCng()\n- uid: System.Security.Cryptography.ECDsaCng.#ctor(System.Int32)\n  parent: System.Security.Cryptography.ECDsaCng\n  isExternal: false\n  name: ECDsaCng(Int32)\n  nameWithType: ECDsaCng.ECDsaCng(Int32)\n  fullName: ECDsaCng.ECDsaCng(Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Security.Cryptography.ECDsaCng.#ctor(System.Security.Cryptography.CngKey)\n  parent: System.Security.Cryptography.ECDsaCng\n  isExternal: false\n  name: ECDsaCng(CngKey)\n  nameWithType: ECDsaCng.ECDsaCng(CngKey)\n  fullName: ECDsaCng.ECDsaCng(CngKey)\n- uid: System.Security.Cryptography.CngKey\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CngKey\n  nameWithType: CngKey\n  fullName: System.Security.Cryptography.CngKey\n- uid: System.Security.Cryptography.ECDsaCng.#ctor(System.Security.Cryptography.ECCurve)\n  parent: System.Security.Cryptography.ECDsaCng\n  isExternal: false\n  name: ECDsaCng(ECCurve)\n  nameWithType: ECDsaCng.ECDsaCng(ECCurve)\n  fullName: ECDsaCng.ECDsaCng(ECCurve)\n- uid: System.Security.Cryptography.ECCurve\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: ECCurve\n  nameWithType: ECCurve\n  fullName: System.Security.Cryptography.ECCurve\n- uid: System.Security.Cryptography.ECDsaCng.Dispose(System.Boolean)\n  parent: System.Security.Cryptography.ECDsaCng\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: ECDsaCng.Dispose(Boolean)\n  fullName: ECDsaCng.Dispose(Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Security.Cryptography.ECDsaCng.ExportExplicitParameters(System.Boolean)\n  parent: System.Security.Cryptography.ECDsaCng\n  isExternal: false\n  name: ExportExplicitParameters(Boolean)\n  nameWithType: ECDsaCng.ExportExplicitParameters(Boolean)\n  fullName: ECDsaCng.ExportExplicitParameters(Boolean)\n- uid: System.Security.Cryptography.ECParameters\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: ECParameters\n  nameWithType: ECParameters\n  fullName: System.Security.Cryptography.ECParameters\n- uid: System.Security.Cryptography.ECDsaCng.ExportParameters(System.Boolean)\n  parent: System.Security.Cryptography.ECDsaCng\n  isExternal: false\n  name: ExportParameters(Boolean)\n  nameWithType: ECDsaCng.ExportParameters(Boolean)\n  fullName: ECDsaCng.ExportParameters(Boolean)\n- uid: System.Security.Cryptography.ECDsaCng.FromXmlString(System.String)\n  parent: System.Security.Cryptography.ECDsaCng\n  isExternal: false\n  name: FromXmlString(String)\n  nameWithType: ECDsaCng.FromXmlString(String)\n  fullName: ECDsaCng.FromXmlString(String)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Security.Cryptography.ECDsaCng.FromXmlString(System.String,System.Security.Cryptography.ECKeyXmlFormat)\n  parent: System.Security.Cryptography.ECDsaCng\n  isExternal: false\n  name: FromXmlString(String, ECKeyXmlFormat)\n  nameWithType: ECDsaCng.FromXmlString(String, ECKeyXmlFormat)\n  fullName: ECDsaCng.FromXmlString(String, ECKeyXmlFormat)\n- uid: System.Security.Cryptography.ECKeyXmlFormat\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: ECKeyXmlFormat\n  nameWithType: ECKeyXmlFormat\n  fullName: System.Security.Cryptography.ECKeyXmlFormat\n- uid: System.Security.Cryptography.ECDsaCng.GenerateKey(System.Security.Cryptography.ECCurve)\n  parent: System.Security.Cryptography.ECDsaCng\n  isExternal: false\n  name: GenerateKey(ECCurve)\n  nameWithType: ECDsaCng.GenerateKey(ECCurve)\n  fullName: ECDsaCng.GenerateKey(ECCurve)\n- uid: System.Security.Cryptography.ECDsaCng.HashAlgorithm\n  parent: System.Security.Cryptography.ECDsaCng\n  isExternal: false\n  name: HashAlgorithm\n  nameWithType: ECDsaCng.HashAlgorithm\n  fullName: ECDsaCng.HashAlgorithm\n- uid: System.Security.Cryptography.CngAlgorithm\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CngAlgorithm\n  nameWithType: CngAlgorithm\n  fullName: System.Security.Cryptography.CngAlgorithm\n- uid: System.Security.Cryptography.ECDsaCng.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.ECDsaCng\n  isExternal: false\n  name: HashData(Stream, HashAlgorithmName)\n  nameWithType: ECDsaCng.HashData(Stream, HashAlgorithmName)\n  fullName: ECDsaCng.HashData(Stream, HashAlgorithmName)\n- uid: System.Byte\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte\n- uid: System.Byte[]\n  parent: System\n  isExternal: false\n  name: Byte[]\n  nameWithType: Byte[]\n  fullName: System.Byte[]\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: System.Byte\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.IO.Stream\n  parent: System.IO\n  isExternal: false\n  name: Stream\n  nameWithType: Stream\n  fullName: System.IO.Stream\n- uid: System.Security.Cryptography.HashAlgorithmName\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: HashAlgorithmName\n  nameWithType: HashAlgorithmName\n  fullName: System.Security.Cryptography.HashAlgorithmName\n- uid: System.Security.Cryptography.ECDsaCng.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.ECDsaCng\n  isExternal: false\n  name: HashData(Byte[], Int32, Int32, HashAlgorithmName)\n  nameWithType: ECDsaCng.HashData(Byte[], Int32, Int32, HashAlgorithmName)\n  fullName: ECDsaCng.HashData(Byte[], Int32, Int32, HashAlgorithmName)\n- uid: System.Security.Cryptography.ECDsaCng.ImportParameters(System.Security.Cryptography.ECParameters)\n  parent: System.Security.Cryptography.ECDsaCng\n  isExternal: false\n  name: ImportParameters(ECParameters)\n  nameWithType: ECDsaCng.ImportParameters(ECParameters)\n  fullName: ECDsaCng.ImportParameters(ECParameters)\n- uid: System.Security.Cryptography.ECDsaCng.Key\n  parent: System.Security.Cryptography.ECDsaCng\n  isExternal: false\n  name: Key\n  nameWithType: ECDsaCng.Key\n  fullName: ECDsaCng.Key\n- uid: System.Security.Cryptography.ECDsaCng.KeySize\n  parent: System.Security.Cryptography.ECDsaCng\n  isExternal: false\n  name: KeySize\n  nameWithType: ECDsaCng.KeySize\n  fullName: ECDsaCng.KeySize\n- uid: System.Security.Cryptography.ECDsaCng.LegalKeySizes\n  parent: System.Security.Cryptography.ECDsaCng\n  isExternal: false\n  name: LegalKeySizes\n  nameWithType: ECDsaCng.LegalKeySizes\n  fullName: ECDsaCng.LegalKeySizes\n- uid: System.Security.Cryptography.KeySizes\n  name: KeySizes\n  nameWithType: KeySizes\n  fullName: System.Security.Cryptography.KeySizes\n- uid: System.Security.Cryptography.KeySizes[]\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: KeySizes[]\n  nameWithType: KeySizes[]\n  fullName: System.Security.Cryptography.KeySizes[]\n  spec.csharp:\n  - uid: System.Security.Cryptography.KeySizes\n    name: KeySizes\n    nameWithType: KeySizes\n    fullName: System.Security.Cryptography.KeySizes\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Security.Cryptography.ECDsaCng.SignData(System.Byte[])\n  parent: System.Security.Cryptography.ECDsaCng\n  isExternal: false\n  name: SignData(Byte[])\n  nameWithType: ECDsaCng.SignData(Byte[])\n  fullName: ECDsaCng.SignData(Byte[])\n- uid: System.Security.Cryptography.ECDsaCng.SignData(System.IO.Stream)\n  parent: System.Security.Cryptography.ECDsaCng\n  isExternal: false\n  name: SignData(Stream)\n  nameWithType: ECDsaCng.SignData(Stream)\n  fullName: ECDsaCng.SignData(Stream)\n- uid: System.Security.Cryptography.ECDsaCng.SignData(System.Byte[],System.Int32,System.Int32)\n  parent: System.Security.Cryptography.ECDsaCng\n  isExternal: false\n  name: SignData(Byte[], Int32, Int32)\n  nameWithType: ECDsaCng.SignData(Byte[], Int32, Int32)\n  fullName: ECDsaCng.SignData(Byte[], Int32, Int32)\n- uid: System.Security.Cryptography.ECDsaCng.SignHash(System.Byte[])\n  parent: System.Security.Cryptography.ECDsaCng\n  isExternal: false\n  name: SignHash(Byte[])\n  nameWithType: ECDsaCng.SignHash(Byte[])\n  fullName: ECDsaCng.SignHash(Byte[])\n- uid: System.Security.Cryptography.ECDsaCng.ToXmlString(System.Boolean)\n  parent: System.Security.Cryptography.ECDsaCng\n  isExternal: false\n  name: ToXmlString(Boolean)\n  nameWithType: ECDsaCng.ToXmlString(Boolean)\n  fullName: ECDsaCng.ToXmlString(Boolean)\n- uid: System.Security.Cryptography.ECDsaCng.ToXmlString(System.Security.Cryptography.ECKeyXmlFormat)\n  parent: System.Security.Cryptography.ECDsaCng\n  isExternal: false\n  name: ToXmlString(ECKeyXmlFormat)\n  nameWithType: ECDsaCng.ToXmlString(ECKeyXmlFormat)\n  fullName: ECDsaCng.ToXmlString(ECKeyXmlFormat)\n- uid: System.Security.Cryptography.ECDsaCng.VerifyData(System.Byte[],System.Byte[])\n  parent: System.Security.Cryptography.ECDsaCng\n  isExternal: false\n  name: VerifyData(Byte[], Byte[])\n  nameWithType: ECDsaCng.VerifyData(Byte[], Byte[])\n  fullName: ECDsaCng.VerifyData(Byte[], Byte[])\n- uid: System.Security.Cryptography.ECDsaCng.VerifyData(System.IO.Stream,System.Byte[])\n  parent: System.Security.Cryptography.ECDsaCng\n  isExternal: false\n  name: VerifyData(Stream, Byte[])\n  nameWithType: ECDsaCng.VerifyData(Stream, Byte[])\n  fullName: ECDsaCng.VerifyData(Stream, Byte[])\n- uid: System.Security.Cryptography.ECDsaCng.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[])\n  parent: System.Security.Cryptography.ECDsaCng\n  isExternal: false\n  name: VerifyData(Byte[], Int32, Int32, Byte[])\n  nameWithType: ECDsaCng.VerifyData(Byte[], Int32, Int32, Byte[])\n  fullName: ECDsaCng.VerifyData(Byte[], Int32, Int32, Byte[])\n- uid: System.Security.Cryptography.ECDsaCng.VerifyHash(System.Byte[],System.Byte[])\n  parent: System.Security.Cryptography.ECDsaCng\n  isExternal: false\n  name: VerifyHash(Byte[], Byte[])\n  nameWithType: ECDsaCng.VerifyHash(Byte[], Byte[])\n  fullName: ECDsaCng.VerifyHash(Byte[], Byte[])\n- uid: System.Security.Cryptography.ECDsaCng.#ctor*\n  parent: System.Security.Cryptography.ECDsaCng\n  isExternal: false\n  name: ECDsaCng\n  nameWithType: ECDsaCng.ECDsaCng\n  fullName: ECDsaCng.ECDsaCng\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsaCng.xml\n- uid: System.Security.Cryptography.ECDsaCng.Dispose*\n  parent: System.Security.Cryptography.ECDsaCng\n  isExternal: false\n  name: Dispose\n  nameWithType: ECDsaCng.Dispose\n  fullName: ECDsaCng.Dispose\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsaCng.xml\n- uid: System.Security.Cryptography.ECDsaCng.ExportExplicitParameters*\n  parent: System.Security.Cryptography.ECDsaCng\n  isExternal: false\n  name: ExportExplicitParameters\n  nameWithType: ECDsaCng.ExportExplicitParameters\n  fullName: ECDsaCng.ExportExplicitParameters\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsaCng.xml\n- uid: System.Security.Cryptography.ECDsaCng.ExportParameters*\n  parent: System.Security.Cryptography.ECDsaCng\n  isExternal: false\n  name: ExportParameters\n  nameWithType: ECDsaCng.ExportParameters\n  fullName: ECDsaCng.ExportParameters\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsaCng.xml\n- uid: System.Security.Cryptography.ECDsaCng.FromXmlString*\n  parent: System.Security.Cryptography.ECDsaCng\n  isExternal: false\n  name: FromXmlString\n  nameWithType: ECDsaCng.FromXmlString\n  fullName: ECDsaCng.FromXmlString\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsaCng.xml\n- uid: System.Security.Cryptography.ECDsaCng.GenerateKey*\n  parent: System.Security.Cryptography.ECDsaCng\n  isExternal: false\n  name: GenerateKey\n  nameWithType: ECDsaCng.GenerateKey\n  fullName: ECDsaCng.GenerateKey\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsaCng.xml\n- uid: System.Security.Cryptography.ECDsaCng.HashAlgorithm*\n  parent: System.Security.Cryptography.ECDsaCng\n  isExternal: false\n  name: HashAlgorithm\n  nameWithType: ECDsaCng.HashAlgorithm\n  fullName: ECDsaCng.HashAlgorithm\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsaCng.xml\n- uid: System.Security.Cryptography.ECDsaCng.HashData*\n  parent: System.Security.Cryptography.ECDsaCng\n  isExternal: false\n  name: HashData\n  nameWithType: ECDsaCng.HashData\n  fullName: ECDsaCng.HashData\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsaCng.xml\n- uid: System.Security.Cryptography.ECDsaCng.ImportParameters*\n  parent: System.Security.Cryptography.ECDsaCng\n  isExternal: false\n  name: ImportParameters\n  nameWithType: ECDsaCng.ImportParameters\n  fullName: ECDsaCng.ImportParameters\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsaCng.xml\n- uid: System.Security.Cryptography.ECDsaCng.Key*\n  parent: System.Security.Cryptography.ECDsaCng\n  isExternal: false\n  name: Key\n  nameWithType: ECDsaCng.Key\n  fullName: ECDsaCng.Key\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsaCng.xml\n- uid: System.Security.Cryptography.ECDsaCng.KeySize*\n  parent: System.Security.Cryptography.ECDsaCng\n  isExternal: false\n  name: KeySize\n  nameWithType: ECDsaCng.KeySize\n  fullName: ECDsaCng.KeySize\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsaCng.xml\n- uid: System.Security.Cryptography.ECDsaCng.LegalKeySizes*\n  parent: System.Security.Cryptography.ECDsaCng\n  isExternal: false\n  name: LegalKeySizes\n  nameWithType: ECDsaCng.LegalKeySizes\n  fullName: ECDsaCng.LegalKeySizes\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsaCng.xml\n- uid: System.Security.Cryptography.ECDsaCng.SignData*\n  parent: System.Security.Cryptography.ECDsaCng\n  isExternal: false\n  name: SignData\n  nameWithType: ECDsaCng.SignData\n  fullName: ECDsaCng.SignData\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsaCng.xml\n- uid: System.Security.Cryptography.ECDsaCng.SignHash*\n  parent: System.Security.Cryptography.ECDsaCng\n  isExternal: false\n  name: SignHash\n  nameWithType: ECDsaCng.SignHash\n  fullName: ECDsaCng.SignHash\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsaCng.xml\n- uid: System.Security.Cryptography.ECDsaCng.ToXmlString*\n  parent: System.Security.Cryptography.ECDsaCng\n  isExternal: false\n  name: ToXmlString\n  nameWithType: ECDsaCng.ToXmlString\n  fullName: ECDsaCng.ToXmlString\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsaCng.xml\n- uid: System.Security.Cryptography.ECDsaCng.VerifyData*\n  parent: System.Security.Cryptography.ECDsaCng\n  isExternal: false\n  name: VerifyData\n  nameWithType: ECDsaCng.VerifyData\n  fullName: ECDsaCng.VerifyData\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsaCng.xml\n- uid: System.Security.Cryptography.ECDsaCng.VerifyHash*\n  parent: System.Security.Cryptography.ECDsaCng\n  isExternal: false\n  name: VerifyHash\n  nameWithType: ECDsaCng.VerifyHash\n  fullName: ECDsaCng.VerifyHash\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsaCng.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.Security.Cryptography.AsymmetricAlgorithm.Clear\n  parent: System.Security.Cryptography.AsymmetricAlgorithm\n  isExternal: false\n  name: Clear()\n  nameWithType: AsymmetricAlgorithm.Clear()\n  fullName: AsymmetricAlgorithm.Clear()\n- uid: System.Security.Cryptography.ECDsa.Create\n  parent: System.Security.Cryptography.ECDsa\n  isExternal: false\n  name: Create()\n  nameWithType: ECDsa.Create()\n  fullName: ECDsa.Create()\n- uid: System.Security.Cryptography.ECDsa.Create(System.String)\n  parent: System.Security.Cryptography.ECDsa\n  isExternal: false\n  name: Create(String)\n  nameWithType: ECDsa.Create(String)\n  fullName: ECDsa.Create(String)\n- uid: System.Security.Cryptography.AsymmetricAlgorithm.Dispose\n  parent: System.Security.Cryptography.AsymmetricAlgorithm\n  isExternal: false\n  name: Dispose()\n  nameWithType: AsymmetricAlgorithm.Dispose()\n  fullName: AsymmetricAlgorithm.Dispose()\n- uid: System.Security.Cryptography.ECDsa.KeyExchangeAlgorithm\n  parent: System.Security.Cryptography.ECDsa\n  isExternal: false\n  name: KeyExchangeAlgorithm\n  nameWithType: ECDsa.KeyExchangeAlgorithm\n  fullName: ECDsa.KeyExchangeAlgorithm\n- uid: System.Security.Cryptography.AsymmetricAlgorithm.KeySizeValue\n  parent: System.Security.Cryptography.AsymmetricAlgorithm\n  isExternal: false\n  name: KeySizeValue\n  nameWithType: AsymmetricAlgorithm.KeySizeValue\n  fullName: AsymmetricAlgorithm.KeySizeValue\n- uid: System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizesValue\n  parent: System.Security.Cryptography.AsymmetricAlgorithm\n  isExternal: false\n  name: LegalKeySizesValue\n  nameWithType: AsymmetricAlgorithm.LegalKeySizesValue\n  fullName: AsymmetricAlgorithm.LegalKeySizesValue\n- uid: System.Security.Cryptography.ECDsa.SignatureAlgorithm\n  parent: System.Security.Cryptography.ECDsa\n  isExternal: false\n  name: SignatureAlgorithm\n  nameWithType: ECDsa.SignatureAlgorithm\n  fullName: ECDsa.SignatureAlgorithm\n- uid: System.Security.Cryptography.ECDsa.Create(System.Security.Cryptography.ECCurve)\n  parent: System.Security.Cryptography.ECDsa\n  isExternal: false\n  name: Create(ECCurve)\n  nameWithType: ECDsa.Create(ECCurve)\n  fullName: ECDsa.Create(ECCurve)\n- uid: System.Security.Cryptography.ECDsa.Create(System.Security.Cryptography.ECParameters)\n  parent: System.Security.Cryptography.ECDsa\n  isExternal: false\n  name: Create(ECParameters)\n  nameWithType: ECDsa.Create(ECParameters)\n  fullName: ECDsa.Create(ECParameters)\n- uid: System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.ECDsa\n  isExternal: false\n  name: SignData(Byte[], HashAlgorithmName)\n  nameWithType: ECDsa.SignData(Byte[], HashAlgorithmName)\n  fullName: ECDsa.SignData(Byte[], HashAlgorithmName)\n- uid: System.Security.Cryptography.ECDsa.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.ECDsa\n  isExternal: false\n  name: SignData(Stream, HashAlgorithmName)\n  nameWithType: ECDsa.SignData(Stream, HashAlgorithmName)\n  fullName: ECDsa.SignData(Stream, HashAlgorithmName)\n- uid: System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.ECDsa\n  isExternal: false\n  name: SignData(Byte[], Int32, Int32, HashAlgorithmName)\n  nameWithType: ECDsa.SignData(Byte[], Int32, Int32, HashAlgorithmName)\n  fullName: ECDsa.SignData(Byte[], Int32, Int32, HashAlgorithmName)\n- uid: System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.ECDsa\n  isExternal: false\n  name: VerifyData(Byte[], Byte[], HashAlgorithmName)\n  nameWithType: ECDsa.VerifyData(Byte[], Byte[], HashAlgorithmName)\n  fullName: ECDsa.VerifyData(Byte[], Byte[], HashAlgorithmName)\n- uid: System.Security.Cryptography.ECDsa.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.ECDsa\n  isExternal: false\n  name: VerifyData(Stream, Byte[], HashAlgorithmName)\n  nameWithType: ECDsa.VerifyData(Stream, Byte[], HashAlgorithmName)\n  fullName: ECDsa.VerifyData(Stream, Byte[], HashAlgorithmName)\n- uid: System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.ECDsa\n  isExternal: false\n  name: VerifyData(Byte[], Int32, Int32, Byte[], HashAlgorithmName)\n  nameWithType: ECDsa.VerifyData(Byte[], Int32, Int32, Byte[], HashAlgorithmName)\n  fullName: ECDsa.VerifyData(Byte[], Int32, Int32, Byte[], HashAlgorithmName)\n"}